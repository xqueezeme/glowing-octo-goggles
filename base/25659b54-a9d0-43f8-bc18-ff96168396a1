{
    "title": "The Damp, Gray Gone Ch. 03",
    "pages": [
        "Introduction. So here we go, the final installment. As I told you all up front, this is my (concededly boring and long winded) take on the Rambo Revenge Scenario. If you're still with me through this final part, thanks for taking the time to read it all. If you're starting here, get your ass back to Part 1 so you know what's going on.\n\nAlso, please remember to take a few moments and comment on the story. I don't really care if you vote, but I do read all comments, and even try to respond to many of them. They really are the only payment we writers receive for hours of hard work.\n\n*\n\nWhitney's disappearance, and the resulting delay in the LaBruzzi heroin trafficking trial, was front page news in the Register. I read the article twice, looking at the pictures on the front page of both Whitney and of the LaBruzzis' defense attorney, Lawton Dunlop. He looked like a typical narcotics defense attorney, the type in all the television shows. Expensive blue suit, white shirt with French cuffs and diamond encrusted cufflinks, square jaw, wide smile with perfectly capped teeth, and hair perfectly coiffed and held in place with so much hairspray it could catch a bullet. He oozed slime from his pores.\n\nJust as when I woke up, something in the article started that little worm in my brain going all over again. Something about the bare facts that Whitney had disappeared and Lawton Dunlop's demands for an immediate resumption of continuing the trial or declaring a mistrial, which he claimed would end in the permanent dismissal of all charges against his client.\n\nWhen I held the paper up, exposing the front page to Kyle, the bombshell dropped.\n\n\"Why's Mommy in the paper?\" he said. \"And Charlie?\"\n\nI lowered the paper, my eyes narrowing. \"Charlie?\"\n\nHe pointed to the pictures on the front page. \"Sure. Charlie. He's a lawyer like Mommy. He came over on Sunday morning while I was eating.\"\n\nI flipped the paper back to the front page. Lawton Dunlop. I pointed to the picture.\n\n\"This is the man she called Charlie?\"\n\n\"Yeah,\" he said, then went back to reading his comics, forgetting about his initial questions.\n\nI, though, sat there dumbstruck. Charlie. Charles Lawton Dunlop. CLD. CLDLaw@lincty.net. It wasn't the e-mail address for Cahill, Levine & Dunleavy; it was Charles Lawton Dunlop's e-mail address.\n\nWhitney had been fucking the LaBruzzis' defense attorney.\n\nWhile the case was pending.\n\nAnd now it was in trial--with a strong case, by all appearances--and Whitney had disappeared.\n\nSorry, folks, but it doesn't take a fucking rocket scientist to figure out why Whitney was suddenly missing.\n\nI left the table to go find Gavers's business card so I could share with him my newfound information. Card in hand, I picked up the phone and stepped out onto the deck to make the call away from Kyle's ears.\n\nJust before I started dialing the number, though, another series of thoughts began tumbling through my brain.\n\nWhen did Dunlop begin going after Whitney? Presumed answer, once she was assigned to the LaBruzzi prosecution.\n\nWhy did he go after her? Presumed answers, to get inside information on the prosecution's case; to somehow get her off the case and get another, less able, prosecutor assigned; to conspire with her to throw the trial; all of the above; or some combination of the above.\n\nIf so, if he was already their defense attorney of record, why did Whitney even allow it to happen? That would've created a scandal that would've derailed her career.\n\nBefore dialing Gavers, I needed to do some research.\n\n\"What're you doing, Dad?\" Kyle asked, putting his bowl and glass into the dishwasher.\n\n\"I'll only be a few minutes,\" I said, rushing to the den and clicking onto the net.\n\nA search of the Register's archives gave me all the information I needed in less than ten minutes. When the LaBruzzis were initially arraigned, they'd had some attorney named Leland Smithers. Smithers had stayed on the case until three months ago, at which time Dunlop's name started appearing in the papers as the attorney for the defense. Three months ago, well after our divorce was filed.\n\nMy eyes stared at the screen, the anger surging through my veins.\n\nThat sleazy fucking prick had set out to destroy my marriage so he could get an advantage in securing the acquittals of a couple of fucking lowlife heroin dealers.\n\nDriving Kyle to school, I reached my decision: Fuck Gavers and fuck the police and fuck Charles Lawton Dunlop.\n\nThis was personal, and I wanted my revenge.\n\n* * * * *\n\nMy Thursday classes were both morning classes, and the second was finished by noon. To this day, I don't really remember much about the classes. I just stood there and rambled on about the whatever-the-hell-was-in-the-books-first issues, gave terse answers to questions posed, and damned near sprinted to my car when the second class was finally finished.\n\n\"Luke,\" I heard Doug calling from behind me.\n\nI didn't stop, though. Instead, I waved, hopped in my car, and tore out of there. I needed to think, to formulate a plan. And, of course, to get as much information as humanly possible in the next five hours. I didn't want to rush off half-cocked and act on presumptions while discarding any facts that disagreed with my hypothesis. There was, I suppose, a chance that Charles Lawton Dunlop was not the mystery man. Still, the chance seemed slim. If nothing else, the additional information would give me the planning-stage intelligence vital to a successful operation.\n\n* * * * *\n\nThree hours later, I was in my den, head back, deep in thought. My research had turned up some interesting facts.\n\nFirst, Charles Lawton Dunlop had been an attorney for fourteen years, and he was just shy of forty. He had been practicing criminal defense law his entire career, first with the Public Defender's Office, but on his own for the past nine years. His record on cases that went to trial was somewhere around fifty-fifty, which seemed awfully damned good. Most of his cases never went to trial, though. Rather, they were frequently dropped for no apparent reason. Moreover, the newspaper accounts of his trials strongly suggested that several of the jury acquittals were out of the blue.\n\nThus, it seems Dunlop had a shady background, which led to the obvious questions: How did Whitney not know about his background, and, assuming she did, why would she ever succumb to his advances without being more wary? That, of course, led me to the more depressing conclusion that she was ripe for the picking. That our marriage was already dead so far as she was concerned.\n\nSecond, the LaBruzzis were Carlo and Vincent. They owned a string of fourteen pizza parlors throughout the Chicago suburbs, and the news accounts strongly hinted they were connected to, if not made members of, the Chicago Outfit. In the newspaper pictures, Carlo was around fifty, short, chunky, and bald. Vincent was the younger by a few years, also short, but lean and wiry with thinning hair combed straight back and acne scars covering his cheeks and chin. Carlo looked like a waddling Porky Pig with fat lips; Vincent like a ferret-faced thug with thin lips. In both pictures, though, they looked dangerous; something about the way they impassively stared at the booking camera gave me the chills.\n\nThird, the LaBruzzis were being tried in state court for distributing heroin through their pizza parlors, but the state court case was a warm-up for a larger federal indictment for RICO violations. The indictments for that had only come down the previous month and were predicated on the theory that the drugs were being shipped into the country--and then across state lines--with pizza-making inventory. Most speculation was that if the state case failed, the LaBruzzis would still go down on the federal case. Still, if they didn't beat the state case first, the results of the federal case would be irrelevant. They'd get fifty years plus on the state charges.\n\nSo I had a scumbag mob lawyer and his two mob clients. I had to figure out what they'd done with Whitney and, assuming she wasn't already dead, how to get her back. In the process, I had to connect Dunlop to the kidnapping--and maybe murder--without anyone finding out I'd done anything. Sure, Carlo and Vincent LaBruzzi had at least a hand in Dunlop's scheme that ended my marriage, but I still didn't want to run afoul of the mob. It would be nice to snare them in, too, but not a priority.\n\nAnd that's when I began to have some serious doubts. If I was caught here, I was putting Kyle's life at risk. I didn't need a bunch of gangster assholes gunning for me and catching Kyle in the crossfire. I also didn't need to be on the run for the rest of my life, shooing my son from secret location to secret location.\n\nI was about to give up when the doorbell rang.\n\n\"Professor Patterson,\" Lieutenant Gavers said when I opened the door. \"May we come in for a moment?\"\n\nI looked at my watch. Ten after three. Kyle would be home any minute.\n\n\"This way,\" I said, leading them to the back deck. \"Kyle doesn't know anything yet, and I don't want him to find out anything until we know what's going on.\"\n\nGavers, with the pretty Sergeant Adams in tow, followed me through the house to the back deck. I let Sun Tzu charge out ahead of us, then slid the door closed behind us when they got out.\n\n\"Heard anything yet?\" I asked.\n\nHe paused, then turned to Sergeant Adams.\n\n\"We have a few follow-up questions,\" she said, flipping open her notebook.\n\nI waited, glaring at them.\n\n\"Did your ex-wife wear any jewelry?\"\n\nI closed my eyes, picturing her. \"Yes. A round, gold locket on a gold chain. There was a picture of Kyle inside.\"\n\nShe nodded, then made a checkmark in the notebook. Then she sighed and looked at Gavers.\n\nHe looked at her, his eyes narrowing, then turned to me.\n\n\"Why did you get divorced?\" he asked.\n\n\"None of your business.\"\n\nHe sighed. \"I'm afraid it is my business, Professor. It's very much my business. And unless you want us to arrest you and take you in for questioning of a more formal nature, you'll answer my question. Now, why did you get divorced? We know you filed. So why?\"\n\nI looked from him to her. Adams's face showed embarrassment at the whole thing, but Gavers's just showed patience. I looked at Adams when I responded.\n\n\"Because she said she didn't love me anymore. After all our years together, she just didn't love me anymore. She was bored. 'In a rut,' she said. I don't know why. I didn't beat her, I make good money, take care of the house and Kyle and her.\" I felt the emotion rising in my throat and fought to hold it down. My final words were a forced croak. \"I still don't know why.\"\n\nAdams looked at the ground, stock still, when I finished.\n\n\"Was she seeing someone else?\" Gavers said, plodding forward.\n\n\"I don't know,\" I lied, then softened the lie. \"Maybe. She wouldn't tell me. Just that there was someone, but it wasn't romantic. That's what she said, at least.\"\n\n\"Do you know who this somebody may have been?\"\n\nI turned and looked at him. He was staring at me intently, and I forced myself to maintain eye contact when I answered.\n\n\"Not a fuckin' clue.\"\n\nSlowly, almost imperceptibly, his right eyebrow rose.\n\n\"Any guesses?\"\n\nI shook my head. \"Could've been anyone. Someone she works with, something like that. She worked long hours. She was always coming home at seven-thirty or eight. She had plenty of time.\"\n\nHe just stared at me. He knew I was lying. As much as I tried to hold it back, there was something in his face that all but forced the smirk on my lips. The smirk that told him, 'Yeah, I know you know I'm lying. Now try to do something about it.'\n\n\"You know,\" he said after a moment, \"this paints you in a whole different light.\"\n\n\"How so?\"\n\n\"She was cheating. You're divorced now, but you're still pissed. Furious, even. Furious enough to maybe wanna kill her.\"\n\n\"Really,\" I said.\n\n\"Really,\" he agreed.\n\n\"Good luck provin' it,\" I said, unable to keep from sneering at him. \"I have a rock solid alibi for the whole damned night, and you know it. I saw the uniforms interviewing Sally Romescu next door when I got home. Or didn't you speak with them yet?\"\n\n\"Maybe you got someone else to do it for you.\"\n\nI laughed, a bitter, impatient laugh. \"Yeah, right. I did a quick internet search for hit men who kill cheating wives, paid the retainer, and they came right on over.\"\n\n\"Wouldn't be the first time,\" Adams said, rejuvenated by Gavers's aggressive questioning.\n\n\"I know,\" I said. \"Family member or ex-husband's the first one you look at. Makes sense. But you've already looked, and you know it's bullshit.\"\n\n\"You know,\" Gavers said, trying a different tack, \"if you're withholding something--anything--you can be charged with accessory.\"\n\n\"Nice try, Lieutenant, but no dice. And fuck the obstruction of justice charge you're gonna threaten me with next, too. Good luck on both of 'em.\"\n\nHe just stared at me, his jaw finally flexing with his frustration and anger.\n\n\"So if we're done here,\" I said, seeing the front door open, \"I think my son's home.\"\n\nThey both glared at me, but then Sergeant Adams recognized the futility of further questioning when I walked past them and back into the house.\n\n\"Hey, little man,\" I said, scooping him into my arms while they walked past me and let themselves out the front door.\n\nWe spent the next hour getting his homework done, then Kyle went outside to play with the Romescu kids and Sonny.\n\nI spent the time thinking the whole thing through.\n\n* * * * *\n\nPoint Number One: If I told the cops what I knew, they'd only bring Dunlop in for questioning. He'd never crack--c'mon, he's an attorney, for Chrissake. Worse, assuming he didn't crack, his only recourse would be to kill Whitney and hide the body somewhere it could never be found.\n\nSorry, but police rules favor the criminals. I, though, was under no such constraints.\n\nPoint Number Two: Yes, Whitney had apparently cheated on me and--worse, in my eyes, and the real reason for the divorce--rejected me, but that didn't mean I wanted my son's mother do die a horrible death. Assuming she was still alive, I had to save her. Also, I had to make damned sure I wasn't killed in the process. Sure, I wanted to live, but my bigger fear was leaving Kyle as an orphan.\n\nPoint Number Three: Assuming I could find Whitney and she was still alive, I had to accomplish all of this without anyone finding out--or even having the slightest suspicion--I was behind it. The mobsters scared me more than the cops, but both scared me plenty. Getting killed was bad, but going to prison for a long stretch was nearly as bad.\n\nPoint Number Four: I had to do all of this on my own. Conspiracies are only as strong as the weakest conspirator. Thus, the more people involved in any way, the more likely I'd get caught by someone.\n\nThat's when I went to the basement and opened my weapons safe, the beginning of a plan forming in my head. I pulled out the Colt AR-15 I'd owned for years. Laying it on a table, I field-stripped it, then spent the next fifteen minutes thoroughly cleaning and lubing the disassembled weapon. Next, I loaded three twenty-round clips with ammo, then stacked them next to the rifle. Next, Glock 9mm came out, and I repeated the process of cleaning and filling clips. Finished in little more than thirty minutes, I placed them all in a duffle bag along with a black ski mask, black sweat pants, black shoes, socks, and sweatshirt. I hesitated before deciding against the black shoe polish for my hands. That would be hard to explain away if I was caught, and it would be damned near impossible to thoroughly get off of my hands for a few days at least.\n\nBy the time I was done, the plan was almost fully formed. And that's when I remembered something, something I'd been ignoring and decided to check on just in case it yielded anything of value.\n\nStrangely enough, it yielded a bonanza.\n\nAnd it all but confirmed my hypothesis.\n\n* * * * *\n\nOnce logged in, I clicked on the sole remaining e-mail, 'Luke, I'm So Sorry.'\n\n\"Dear Luke,\" she wrote. \"By now you know it all. You know I lied. You know I cheated. You may have even figured out who he is. If you haven't, his name is Charles Dunlop. He's a lawyer, and a good one.\n\n\"I don't really know how it all got started. I remember being upset with you. With me, really, but I blamed you. I was feeling guilty. Guilty because you do so much, so many of the things that I always wanted to do. Taking care of the cooking and cleaning and Kyle. Those were things I should have been doing, things I should have at least been helping you a lot more with. On the other hand, I was a hair's breadth away from the top slot in the office. Chief of the Criminal Division. After ten years, I was so close to realizing my potential, and I felt guilty that I was realizing it at the expense of my family.\n\n\"So how did this become your fault? Because, I now realize, I blamed you for taking up the slack I left to pursue my career. I know: It doesn't make any sense. I see that now. But at the time, I was thinking that if you'd stood up to me more, if you'd have at least bitched about having to take care of everything, then I'd have been forced to cut back at work and spend more time doing the things I should have been doing all along. Pretty fucked up, right? Just writing this, it still doesn't make sense to me. I was blaming you because you were supporting me and my goals, and I was giving you very little in return.\n\n\"I don't know how Charlie spotted this, but he did. He saw my unhappiness, and he went out of his way to cheer me up. And to seduce me. And I let him.\n\n\"I wish I had an excuse, a justification that could somehow make all of this your fault. I don't. None of it was your fault. Your sole mistake was to be there for Kyle and me, to always give 110% without complaint.\n\n\"I know now the enormity of my mistake. Actually, I knew that Saturday I left you with Kyle to meet with Charlie. That's why I broke it off that day, and I wanted to come home and somehow get you to forgive me. But you didn't. I don't blame you for any of this. If the roles had been reversed, I'd have never forgiven you, either.\n\n\"I do know a few things, though. For example, I know my biggest mistake wasn't cheating on you with Charles. Sure, that was probably unforgivable. Nor was my biggest mistake refusing to just come clean and tell you everything, which was also unforgivable. No, my biggest mistake was in ever telling you that I didn't love you anymore and didn't want to stay married. The first two mistakes were probably deal breakers, but the third mistake was the super glue that sealed the death of our marriage.\n\n\"I want you to know that I will never forgive myself for any of this. For cheating on you, for refusing to come clean, and, worst of all, for ever allowing you to believe that any of this was your fault. The fault was mine and mine alone. So many times, after you filed for divorce, I wanted to tell you all of this. But I saw your pain every day, the pain I'd caused you. Looking at that pain, I knew I didn't deserve you back and that you deserved someone who would never do this to you. To this day, I can barely stand to look at you without my shame overwhelming me.\n\n\"In closing, Luke, I know that what I have done has ruined my marriage, my husband, my son, and all of us as a family. I wish I could take it back. I sit alone in my apartment every night dreaming of the past, and wondering what the hell I was thinking. I just wanted you to know, though, that I have one last trial coming up, and it's a biggie. I'm going to win it, and then I'll be offered the position I've always dreamed of--Chief of the Criminal Division. When they make me that offer, I'm going to resign. I'm going to re-dedicate myself to being a mother to our little boy. I only hope you won't prevent me from doing this. It is the only dream I now have to keep me sane, and I want to do my fair share so you can take the time to re-build your own life after my betrayal.",
        "\"With eternal shame and everlasting love,\n\n\"Whitney\"\n\nI'll admit it: My eyes were wet by the time I finished reading Whitney's confession. My mind was filled with what ifs. What if she'd have come clean that day? Would I have taken her back and tried to overcome her betrayal? What if I'd have paid more attention months before when she'd begun withdrawing? Could I have prevented the whole thing?\n\nIf. The saddest goddamned word in the English language.\n\nYet, now my suspicions had been confirmed. All I could wonder was whether Whitney had ever put the pieces together on Dunlop's nefarious scheme before she disappeared. And if so, how had she reacted upon learning that she'd destroyed her marriage to be with a man who didn't give two shits for her or her problems, but only wanted to gain the advantage in a criminal case?\n\nMy sadness turned to a simmering rage as I deleted the message and wiped all traces of it from my hard drive.\n\n* * * * *\n\nUnfortunately, I was unsuccessful in hiding my emotions when Kristin and Ben showed up. She took one look at me and turned to Ben and told him to go outside and play, her eyes on me the whole time.\n\n\"You know who it is, don't you?\" she said when Ben was outside. \"You know where she is.\"\n\nI didn't move.\n\n\"What're you going to do?\" she pressed.\n\n\"I need you to watch Kyle tonight,\" was all I managed.\n\n\"Luke,\" she pleaded, \"you have to call the police. You can't do this on your own. Jesus, you'll get killed. Then where will Kyle be?\"\n\nI shook my head. \"I can't really say anything, Kristin.\"\n\n\"Bullshit,\" she hissed, her eyes darting outside to make sure the boys were out of range before turning back to me. \"You're gonna go out and act like some kind of friggin' cowboy--maybe get killed or at least shot or stabbed--without thinking even for a second about what'll happen to Kyle if that happens. What the fuck--\"\n\n\"Bullshit,\" I hissed right back at her. \"You think I haven't thought about that? But what happens if I call the cops, huh? I'll tell you. She gets killed so they can't get caught. That's what happens. If they haven't killed her already. Then what do I tell Kyle?\"\n\n\"But Luke,\" she said, her eyes pleading with me to reconsider, \"there's got to be another way.\"\n\nI shook my head. \"I've been thinking about it all day. Since this morning when I figured it all out. There's no other way, believe me. You think I want to do this?\"\n\nShe stayed silent, her eyes pleading with me to not leave but the reality of my words sinking in.\n\n\"Trust me,\" I said, \"I've thought about nothing but Kyle. And bottom line is this: I can never again look at Kyle if Whitney's killed--if he has to go to his mother's funeral--and I knew all along that maybe I could've stopped it. Or, if she dies, if I can at least catch the rotten fuckers who did this.\"\n\nShe was shaking now, the fear and enormity of the situation running through her face and limbs.\n\n\"Promise me you won't get hurt,\" she said. \"Please, Luke. Promise me you'll be careful.\"\n\nI tried to smile. \"You just keep an eye on the boys tonight and I'll be back by midnight or so, okay?\"\n\nTears were streaming down her cheeks, and I brushed them off with my fingertips.\n\n\"Get yourself together,\" I said. \"Keep an eye on the boys. It'll work out, okay?\"\n\nShe nodded. \"Okay.\"\n\nCHAPTER FIFTEEN\n\nI left at eight, just before the sun would set. This plan had to be carried out at night. I had no idea how many of them there were, where I was going, or what I would do when I got there.\n\nDarkness and surprise would be my only allies.\n\nAs I pulled out of the driveway, though, I saw the car parked down the block slowly start rolling with its headlights turned off.\n\nI had company.\n\nI drove slowly, giving no one cause to pull me over and discover my cache of weapons. Getting caught would get Whitney disappeared for good.\n\nTwenty minutes later, I drove slowly past Charles Dunlop's law office. There were no lights on and no cars in the parking lot. I kept my fingers crossed that he was home, and that he actually lived at the address listed in the phone book. My plan was risky, but it seemed the only way to lure him out and get him to lead me to Whitney or, in the alternative, her killers.\n\nI was still being followed, and I finally made the identity of the driver when I cruised through a well-lit intersection. Sergeant Adams. I was right: They knew I was hiding the identity, and they had guessed I intended to do something about it.\n\nGreat, I thought, now I've got to avoid them while trying to save Whitney. I started running through scenarios in my mind, all of which depended on whether back-up would be joining the pretty detective.\n\nIt had been like this during my military career. Make a great plan, set the plan in motion, and something comes along to fuck it all up. Throughout history, the great tacticians had all been able to deal with the changes and improvise solutions on the fly. Unfortunately, I wasn't a great tactician. I was a West Point-trained infantry leader who had been permanently knocked out in my first combat engagement. I hadn't thought like an infantry soldier in nearly twenty years, and none of it was coming back as quickly as I'd hoped.\n\nI pushed the newest developments from my mind when I pulled in front of Dunlop's house. The living room was lit up, and I saw a figure through the gauzy drapes moving around inside.\n\nIt was now or never. I mulled over the plan again, knowing that if I followed through and did not succeed I was signing Whitney's death warrant. There was no chance they'd keep her alive if they thought the cops were onto them. Likewise, there was no way to get them to tip their hands unless they thought the cops were onto them.\n\nDeciding they'd probably kill Whitney either way, if they hadn't done so already, I pulled the disposable cell phone from my pocket and dialed the pre-programmed number. Dunlop answered on the second ring.\n\n\"Hello?\"\n\n\"This is gonna be short and sweet,\" I said into the phone.\n\n\"Who is this?\"\n\n\"Be quiet. This is a friend. That's all you need to know for now.\"\n\nHe paused, then asked, \"What do you want?\"\n\n\"You're being bugged,\" I said. \"Office phones, cell phone, home phone.\"\n\nHe said nothing, and I plowed on.\n\n\"The wiretap warrants were signed this afternoon. Your name's all over one of 'em. You shouldn't have to guess whose names are on the other two.\"\n\n\"And you're sharing this with me--\"\n\n\"Because I'll make myself known to you down the road,\" I said. \"When I do, I'll expect you to show your appreciation. And your friends, too.\"\n\n\"And how can I believe you?\"\n\n\"How can you afford not to?\" I shot back. \"Either way, this conversation's over with. I'm not saying anymore in case the bugs are already in place.\"\n\nWith that, I snapped the cell phone shut, pulled into the far end of the cul-de-sac, and waited to see if Dunlop took the bait. I didn't see where Sergeant Adams had parked, but I assumed she was outside the cul-de-sac where she'd see us both as we left. \n\nTen minutes later, Dunlop strode out of his front door, looked left and right, then slid into his Cadillac and pulled out. I smiled, pleased with myself. I started my own car and followed the Cadillac, staying well behind him. And like a scene from Keystone Kops, Sergeant Adams followed behind me.\n\n* * * * *\n\nWithin minutes, we were cruising down country roads at speeds nearing seventy. My worst nightmare, I realized as I threw the cell phone out the window and into a creek. If I try to keep up with Dunlop, Adams has a reason to pull me over and Whitney is never seen again. If I don't try to keep up with Dunlop, I lose him and Whitney gets killed.\n\nThat's when I made my first improvisation. I decided to keep up with Dunlop and hope Adams--and probably Gavers, too--would realize I was following the kidnapper. If they knew I was holding back on them, then they had to know who I was now following. I trusted them to let me keep following Dunlop rather than stop me and let Dunlop go.\n\nI pressed my foot on the accelerator to catch up with the disappearing taillights in front of me. Two miles later, Adams had still not pulled me over. Instead, she was keeping pace with me about a quarter mile back.\n\nI smiled, knowing none of us could lose each other on this long, lonely country road. Yet, just as I congratulated myself on nerves of steel, the Cadillac's taillights turned and disappeared.\n\nI slowed down to fifty, not wanting to risk going past him too slowly if he was waiting in a turnoff ahead. Even at fifty, I damned near missed the half-overgrown dirt trail leading into the woods. A few hundred yards into the woods, I saw a brief flicker of bouncing red taillights, and I eased the car to a stop in the ditch ahead, pulling well off the road.\n\nAdams had slowed down behind me. I pulled my mask down, grabbed the duffle bag, and was out of the car and into the woods before Adams saw where I'd gone.\n\nI watched from the edge of the woods while Adams slowed down, then came to a complete stop in the roadway parallel with my car. She flashed a light into my car, spoke briefly into a cell phone, then pulled over in front of my car. I was well into the woods, walking a course parallel with the overgrown trail, before I heard her car door slam in the distance behind me.\n\nIt was a moonless night, and the undergrowth was still damp from the morning's rain. I was soaking wet from the waist down before I'd gone fifty yards, but my mind was charged with the adrenalin coursing through my veins. It had always been like this in the Army: The tense planning sessions followed by calm followed by tension times ten once the plan was set in motion.\n\nThis one was a lot more like that morning all those years before, though. The morning I went into combat across the Iraqi frontier. The morning I knew they'd be shooting back with real bullets and people were going to die. Then it was tension combined with a cold, numbing fear, senses so attuned and twitchy a mosquito fart at a hundred yards had me ducking and searching the darkness. Now, it was worse. Now, I was out of practice and out of shape and I'd lost the bravado of youth.\n\nThree hundred yards in, the trail meandered to the left and reached a break in the woods. I stopped there, looking at the open space in front of me. Down a gentle slope no more than seventy-five yards in front of me was a rusty, dilapidated metal shed. The red Cadillac was parked in front, next to an old Ford pickup truck.\n\nWithout conscious thought, my eyes surveyed the terrain for tactical features and ideas. As I said, the shed sat in the middle of a small punchbowl in the earth, the ground sloping down to the shed from where I stood. Good for me; bad for them. I would have the high ground with the added bonus of forest concealment while they would be pinned down and unable to pass me without exposing themselves.\n\nThe vehicles, while not hiding the door into the shed, were parked close enough that they could make a run for the vehicles and, if they got there, have half a chance of getting past me. I couldn't fire at them if Whitney was with them--too much chance of hitting her. Thus, the vehicles needed to be disabled.\n\nThere was a propane tank sixty feet or so to the left of the shed. This had to be avoided at all costs. There could be no chance of a stray shot hitting the tank and possibly killing us all.\n\nOn the right side of the shed, I saw soft light coming from windows. There was nothing else there except bare grass up the gentle slope to the edge of the forest. Picturing the angles in my mind, I made my decision. If I was situated at the edge of the woods to my right, I'd have clear angles to see inside the shed and clear shots at anyone coming out the door toward the vehicles. The only downside was that a missed shot could hit the propane tank, but that didn't faze me. Seventy-five yards from a prone position down a hill with an AR-15? No matter how out of practice I was, there was no way I'd miss what I was aiming at from that distance.\n\nMy basic plan formed, I crept along the wood line to my left to commence my reconnaissance. Crouching low and staying on the edge, I circled around the punchbowl, keeping an eye out for sound and movement as I went. When I was opposite where I'd started, I took a deep breath, counted silently to ten, and scurried down the slope toward the shed.\n\n\"--say a fucking thing about offing her, man,\" I heard a whiney voice say from inside the shed.\n\nThe voice was clear--and slurring the words--and I assumed the windows were open. I smelled a strange odor coming from inside the shed--metallic and medicinal and off-putting.\n\n\"Don't worry,\" another voice said, yelling at the first voice. \"You won't have to do it. Me, neither. They're coming themselves to take care of it. We just need to wait for them here.\"\n\n\"It's still a murder rap if we get caught, though,\" voice one whined. \"I didn't sign up for no murder rap.\"\n\n\"And kidnapping seems okay to you? Murder's out, but you'll face twenty or thirty years for kidnapping? You're okay with that? Because I'm sure the fuck not okay with it.\"\n\n\"Ssshhh,\" voice one said. \"You hear that?\"\n\n\"There's nothing out there,\" voice two said, his voice still going low. \"You've been smoking too much of your own shit.\"\n\n\"Fuck you.\"\n\nI heard footsteps, then a shuffling and a muffled voice. A woman's voice, I realized, with her mouth probably taped shut.\n\nIt was Whitney, of that I was sure. She was still alive, and they were now doing what my phone call had spurred them to do. They were waiting for someone else to show up so they could kill her.\n\n\"Might as well take the blindfold off her,\" voice two said. \"She won't be able to identify anyone after tonight.\"\n\n\"Let them do it,\" voice one pouted.\n\nI'd heard enough, though, and didn't hear the response. I made my way back up to the edge of the woods and moved clockwise along the wood line. My eyes roamed the ground in front of me, checking firing lines to my right as I moved along. Seeing the open view of the doorway, I stopped, dropped the duffle bag, and retrieved my weapons.\n\nThe Glock went into my waistband in the small of my back. Then I laid flat, my body molding into the damp grass, my arms cradling the butt of the rifle into my chest. I sighted along the barrel, then flicked the safety switch to semi-automatic.\n\n\"This is where I'd have planted myself, too,\" Gavers said to my rear.\n\nI froze, staying glued to the ground.\n\nI heard his pistol cock behind me. \"Drop the rifle. Now.\"\n\nMy body sagged as I flipped the rifle back to safe.\n\n\"When we came out of the woods,\" he said, his voice low and matter of fact, \"you were already circling around. Pretty good, by the way, but you should've stayed lower and watched something other than the shed.\"\n\nI heard the rustle through the undergrowth, then felt his feet on the ground behind me.\n\n\"Then I looked at it all and knew what you were doing,\" he continued. \"Line of fire to keep them penned in. Good plan.\"\n\n\"She's alive,\" I said. \"She's in there, and she's alive.\"\n\nOff to my left, I heard someone suck in their breath. Gavers was silent for a moment.\n\n\"Did you hear her?\" Adams said.\n\n\"Yes.\"\n\n\"Sure it was her?\"\n\n\"It was a woman. Her mouth was taped or something. I didn't see anyone, but I could hear them.\"\n\n\"How many?\" Gavers said.\n\n\"Two for sure. I don't think there's anyone else, but two for sure. One of them's Dunlop. The other's high on something.\"\n\n\"Meth,\" Adams said. \"You can smell it. This place is a meth lab, sure as shit.\"\n\n\"Any more surprises before we cuff your ass to the tree over there?\" Gavers asked.\n\n\"There are more on the way,\" I said. \"They're waiting for someone else to show up. That someone's going to kill her and get rid of the body.\"\n\nI heard a snort from Adams. \"You're--\"\n\nBut her voice was cut off when a pair of headlights broke from the edge of the woods and started slowly down the gentle slope to the shed.\n\n\"You don't have any rifles,\" I said, flipping the rifle back to semi-automatic fire.\n\n\"Don't do it,\" Adams said.\n\n\"You need me,\" I insisted. \"It's just the two of you, and now you're outnumbered big time. And you don't have a rifle. They'll fucking kill her. You know they will. And without me, there's not a goddamned thing you can do about it.\"\n\nI heard Gavers move, quickly and not so silently.\n\n\"You keep them pinned down,\" he whispered back at me before breaking from the edge of the woods. \"And don't let whoever it is out of that fucking car.\"\n\nAdams started to protest, then thought better of it. Instead, she crouched down next to me.\n\n\"You could've fucking told us,\" she said.\n\n\"And you wouldn't have been able to do shit,\" I said, my eyes focusing on the car slowing down near the shed.\n\nI shot my eyes to the right and saw that Gavers was still exposed, less than twenty feet down the slope. Back on the car, though, I decided I couldn't wait.\n\nI took a breath and squeezed the trigger. The car lurched simultaneously with the crack of the rifle, and I turned the barrel to the left. It took two shots to take out the left tire, but it left the car twenty feet from the other vehicles.\n\n\"What the fuck,\" someone shouted down below, and I saw the front door swing open. A tall, cadaverous figure stepped into the light cast by the open door, and I put a shot high up the door frame.\n\n\"Don't fucking hit him,\" Adams warned as the figure dropped to the ground and looked around wildly before scrambling back inside.\n\n\"Shut the fuck up,\" I hissed, turning back to the car and putting two shots into the grille. Steam started hissing from under the hood almost immediately. They were well and truly fucked now, and I knew it.\n\n\"He's there,\" Adams whispered, her voice losing all excitement and turning flat.\n\nI glanced to the shed and saw Gavers, his back against the shed next to the window, pistol held high.\n\nI sighted back to the vehicles in front of the shed and, in four shots, took out the front tires on the Cadillac and the pickup truck. For good measure, I put two rounds each into the grilles, and the Cadillac also started spouting steam.\n\nI saw the passenger door open on the new vehicle--the one I knew contained at least one, if not both, of the LaBruzzis. I put a round into the door, and it slammed shut.\n\n\"He's pointing,\" Adams intoned.\n\nI looked back, grabbing a clip as I did so, and saw Gavers holding up his hand and making a shooting sign toward the end of the shed nearest the vehicles. I slammed the clip home, aimed high on the far side of the shed, and pumped five rounds into the building. As I did so, Gavers extended his arms and pistol through the open window.\n\nI saw only one shot, then Gavers was climbing through the window. The front door burst open at the same time, and Dunlop started careening around the vehicles and through the woods.\n\n\"He's getting away,\" Adams said. \"By the propane tank.\"\n\nI ignored both Adams and the fleeing figure of Charles Lawton Dunlop. My eyes stayed locked on the LaBruzzis. They were both still alive, and there wasn't a doubt in my mind they had weapons.\n\n\"You,\" I said, my eyes staying down the line of the barrel, \"get your ass around behind them, then come in low. Stay in the tree line.\"\n\n\"But--\"\n\n\"But they've got fucking guns, and Gavers is alone in that shed. If only one of them gets out of that car and to that shed, we've got problems.\"\n\nWithout another word, she sprinted off.\n\nA minute later, I saw someone coming back out through the window. She was being shoved out the window from behind and falling with a sluggish thud to the ground four feet below.\n\nI recognized the hair and the frail figure and, for the briefest of moments, allowed myself to breathe a sigh of relief. Whitney was safe. For now. She started stumbling up the slope toward the woods opposite the cars, keeping the shed between her and the LaBruzzis. Good.",
        "I turned back to the LaBruzzis. Behind their car, I saw a movement on the slope and knew Adams was coming down behind them. Needing to keep their attention on me, I fired five rounds into the front of their car.\n\nWithout warning, an arm reached out the passenger side of the car and squeezed off five rounds in my direction. I ate dirt, trying to dig myself in as deeply as possible. I heard the bullets hitting trees and ground only four or five feet to my left. They had finally seen my muzzle flashes and knew where I was. Though I knew pistols were worthless at that range, all it took was one lucky shot to send me to my maker.\n\n\"Drop your fucking guns,\" I heard Adams scream.\n\nI looked up. She was standing behind and to the left of the car, her arms extended with her pistol pointing at them from behind.\n\n\"Now,\" she screamed. \"Out the fucking windows. Now.\"\n\nAfter a brief pause, I saw movement and thuds as the pistols hit the ground. Next, Gavers flew out of the building and took up position behind and to the right of the vehicle.\n\nHe said something, but I couldn't hear him. He said something more, and both car doors opened. Then the LaBruzzis stuck their arms out, followed by their bodies, and lay flat on the ground next to the car.\n\nOnce I saw them cuffed, I hopped up and grabbed my duffle bag. With a final look at the shed below, I turned right and began sprinting along the tree line.\n\nWhen I saw her just inside the woods, I slowed down. Whitney was looking at the shed, shaking uncontrollably, her face a mask of horror.\n\n\"You'll be okay,\" I whispered as I drew nearer.\n\nShe twisted and shrank back, trying to make herself as small as possible.\n\nI stopped in front of her and held my hand out for hers.\n\n\"It's me,\" I said from behind the ski mask. \"You're gonna be okay.\"\n\nIn slow motion, her hand reached out to mine. When our fingertips touched, she jerked her hand away, then reached back and clasped me in a death grip.\n\n\"Come on,\" I said. \"Let's get you back to them, okay?\"\n\nWhitney didn't seem to hear me, but she followed along without hesitation.\n\nAs we neared the shed, I stopped.\n\n\"You're safe now,\" I said.\n\nHer hand squeezed mine tighter, refusing to let go.\n\n\"I've gotta get out of here, Whit,\" I said. \"You've got to let go. You're safe now.\"\n\nStill, she wouldn't let go.\n\n\"If I'm still here when back up arrives,\" I said, \"it's gonna be bad. I'll get arrested. The LaBruzzis may come after me. They may come after Kyle, Whitney. You've got to let me go now.\"\n\nThat seemed to sink in, and Whitney released my hand.\n\n\"Remember,\" I said, my hand on her chin. \"I was never hear. Got it?\"\n\nHer head stuttered up and down.\n\nWithout another word, I turned and sprinted to my right. Once back in the tree line, I made my way around the punch bowl and straight up the path toward the road.\n\nI had to get the fuck out of there before any more cops showed up.\n\nAnd I had to hope and pray that Gavers and Adams would keep their mouths shut.\n\n* * * * *\n\nNear the road, I heard sirens wailing in the distance. They'd be there any minute. Reaching in my pocket for the car keys, I heard a scraping from behind and turned. Without warning, the wind was driven from me as I was knocked backward to the ground.\n\n\"Who the fuck are you,\" Dunlop screamed, clawing at the mask on my face.\n\nI said nothing, concentrating all my effort on breaking free of him.\n\nHe cocked his right arm back to punch me, and I pushed off with all my strength and rolled up and into him, nullifying whatever blow he had planned. Still he wouldn't let go. Rolling again onto my back, I felt the gouge of metal into my upper buttocks and knew what I had to do.\n\nContinuing the roll, I reached back and brought the Glock out. Holding the gun like a rock, I pummeled Dunlop repeatedly on the side of the head until I felt his body go limp. Not waiting to check for a pulse, I scrambled to my feet and got in my car.\n\nFifteen seconds later, I was driving away from the sirens popping one after another over the rise in the road behind me. To my relief, I saw them all come to a halt near Adams's car parked on the side of the road.\n\nSlowing back down to the speed limit, I took the very next left two miles up and made my way toward the last stop of the night before going home.\n\n* * * * *\n\nDressed now in jeans, sweatshirt, and deck shoes, I stood on the edge of the abandoned gravel pit. The adrenalin was finally gone, and my body was overcome with fatigue. Still, I needed to get this as far out there as possible.\n\nWith a mighty heave, I threw the duffle bag with my clothes and what was left of the ammo as far into the black waters as I could. Then, silently, I watched it float for a moment before sinking with the weight of the five bricks inside. I'd already thrown the rifle's disassembled bolt mechanism into a creek on my way to the pit, and the rest of both weapons had been broken down and tossed down the various monitoring wells still littering the landscape around the pit.\n\nI suppose if anyone ever found one, they'd have a good shot at finding them all. Still, I found it hard to believe any such efforts would ever be made. And the whole point would be moot either way if Gavers and Adams came for me. Though neither had seen my face, Adams surely had my license plates number from following me to the shed.\n\nStill, better safe than sorry, right?\n\nCHAPTER SIXTEEN\n\nThe living room was dark, and I tiptoed across the floor.\n\n\"Are you all right?\" Kristin said from the couch.\n\nI stopped, relieved and overcome with exhaustion.\n\n\"I'm fine,\" I whispered.\n\nI heard her sniffle. Then a small sob broke from her lips, then I felt her squeezing me hard. Her robe and flimsy pajamas were so soft and warm, I just wanted to hold her against me forever. Quickly, though, my strength began to fade.\n\n\"And Whitney?\" Kristin said.\n\n\"She's fine, too. Alive and for the most part unharmed.\"\n\n\"And . . . whoever it was?\" she asked, breaking the hug.\n\nI saw her shiny eyes searching mine.\n\n\"Cops got 'em,\" I said.\n\nShe hugged me again, but I began to sag toward the floor.\n\nFeeling my collapse, Kristin helped me to the couch. Once seated, her lips were all over me, kissing my lips and nose and eyes and hugging me to her breasts.\n\n\"It's gonna be okay,\" she said to herself over and over again, as if she didn't really believe the words coming from her own mouth.\n\nI didn't say anything, wondering when Gavers and Adams were going to show up to take me in.\n\nI was too tired to care, though, and just allowed Kristin to wind down her pent up emotions.\n\n\"I was so scared,\" she finally said, sitting on the couch holding me.\n\n\"Me, too,\" I said, starting to nod off.\n\nShe saw my fatigue and brushed my cheek with the back of her hand.\n\n\"Go to sleep,\" she said, then pulled me sideways so my head was in her lap.\n\nMy last thoughts were how good it felt while Kristin ran her fingers through my hair and massaged my right shoulder.\n\nSo comforting.\n\nSo loved.\n\n* * * * *\n\nIt was like a dream, but I knew it wasn't. From the moment I felt her warmth engulf me, I knew this was no fantasy.\n\nThrough half-open eyes, I watched Kristin slowly undulate her hips over me, her eyes on me the whole time. Her hand took mine and placed it on her pajama top, over her breast, and encouraged me to squeeze. I complied, and she tightened her lips as my other hand cupped her other breast.\n\nAll too soon, my breath got ragged with my impending release, and Kristin leaned in and kissed me long and hard.\n\n\"Let it go,\" she said, her hips moving faster now, her muscles clenching around me as her breathing, too, turned to gasps.\n\nSoon, I was letting lose with a climax that melted my backbone and relaxed every muscle in my body. Every muscle except one, and Kristin took full advantage of my post-orgasmic stamina to attain her own release. Then, with me still lodged firmly inside of her, she leaned forward and kissed me.\n\nThen, once again, the darkness washed over me.\n\n* * * * *\n\nI awoke on the couch, covered in a blanket with a pillow under my head. Sun Tzu was nestled into my chest, snoring lightly.\n\n\"Hungry?\" Kristin said, leaning in close.\n\nShe looked bright and chipper, well-rested and happy as a lark.\n\nI started to say no, but a low gurgling from my stomach awoke the pup who looked at me with terror on his face.\n\nKristin chuckled and didn't wait for me to answer. Instead, she disappeared toward the kitchen. Sun Tzu jumped off of me and followed her with his tail snapping back and forth, visions of dropped tidbits no doubt dancing in his head.\n\nSitting up, I tried to stretch the ache from my joints and the fatigue from my muscles.\n\n\"Hey, Dad,\" Kyle chirped from the table, his mouth half full of cereal and a broad grin on his face.\n\n\"Hey, Mr. Patterson,\" Ben chimed.\n\n\"Morning, fellas,\" I said, yawning.\n\n\"Sit,\" Kristin ordered, bringing me a bowl of oatmeal and a plate covered with eggs, bacon, and toast.\n\n\"Smells good,\" I said, sliding dutifully into the chair at the head of the table.\n\n\"Eat up,\" she said, smiling as she slid the food in front of me. She went back and poured a cup of coffee, then placed that, too, in front of me.\n\n\"You didn't have to do this,\" I said, starting in on the toast and eggs. \"But I'm glad you did. Thanks.\"\n\n\"You're welcome,\" Kristin said, sitting at the other end of the table and sipping her coffee.\n\nI ate my breakfast, polishing it off in record time, while Ben and Kyle chattered away about school and classmates and video games. Sonny darted around the table, yipping the whole time, waiting and praying for someone to drop something his way. Kristin sipped her coffee and took it all in with an easy smile on her face.\n\nIt was like a family, I realized. A lot like what Whitney, Kyle, and I had once had, just with a dog and another boy at the table. It was nice.\n\n\"So what're you going to do today?\" Kristin asked as I stood and took my dirty dishes to the dishwasher.\n\n\"Just bum around, I suppose,\" I said, my chest tightening. I was surprised the police hadn't already appeared and dragged me away in handcuffs. \"Hang around the house and get some paperwork done. Get my class notes in order for next week.\"\n\n\"I was thinking,\" Kristin started.\n\n\"We wanna order pizza and watch movies real late,\" Kyle interjected.\n\nI looked at him. \"We?\"\n\n\"Me and Ben.\"\n\nI turned to Kristin. \"Thoughts?\"\n\nShe shook her head. \"If you've got other plans or want to do something else. . . . \"\n\n\"Movies and pizza sound great to me. What about you?\"\n\nHer smile could've lit a city. \"Sounds great to me, too.\"\n\n\"Then it's settled,\" I said, taking the boys' dishes and putting them, too, into the dishwasher. \"Might as well plan on a slumber party, I guess.\"\n\nI won't say the look Kristin shot me was pornographic, but I can confirm that it made me remember my dream-like release of the night before. I will also confirm that I would soon need a cold shower.\n\n\"I'll take them to school with me,\" Kristin said, putting her coffee cup into the dishwasher before turning to me. \"You get some rest. You're gonna need it.\"\n\nShe leaned in and kissed me on the cheek, then blew a light breeze into my ear.\n\nI wanted to jump her then and there, but the boys ran out with book bags in hand and they were all gone before I could act.\n\n* * * * *\n\nI was dozing on the couch when the doorbell rang. My eyes flew open and turned to the clock. Just after ten.\n\nI approached the door like a condemned man walking to the gallows.\n\n\"Professor Patterson,\" Gavers said when I opened the door.\n\nWithout a word, I stepped back and motioned him and Sergeant Adams inside.\n\n\"You got any weapons here?\" Gavers asked once they were inside.\n\nI nodded. \"Gun safe in the basement.\"\n\nHe swept his arm. \"Lead the way.\"\n\nI looked at him, unable to read his expression. Adams was likewise a blank page. I turned and led them to the basement, flipping on the lights when we got there.\n\n\"Cool,\" I heard Gavers say as we wound our way between the battle scenes toward the corner of the long room.\n\n\"Whatever,\" Adams mumbled, bored with my hobby.\n\nI spun the combination on the gun safe, then pulled it open and stood back.\n\nAdams leaned in, then turned over her shoulder and said, \"They're not here.\"\n\n\"Good,\" he shouted back, kneeling down and taking a close look at the tunnels filled with men on the Ypres diorama.\n\n\"Crazy fuckers,\" he said, then looked at me and smiled. \"That must've been one rotten fucking war, huh?\"\n\nI nodded, wondering what they were setting me up for.\n\nI heard Adams whistle long and low, and I turned. She had a small wooden box open in her hand, her eyes looking from me back to the medals inside.\n\n\"Suppose this explains it,\" she said to Gavers, who had by now moved on to study the Carthaginian tactics at Cannae.\n\nHis eyes turned to her, narrowed, and he walked toward us. Taking the box, he looked inside and then at me.\n\n\"Where's the citation?\"\n\nI frowned. Besides my fellow soldiers, Whitney was the only one who'd ever seen it, the only one who knew what happened that day. His eyes told me I'd better show him. With a resigned shrug, I reached between them and back into the gun safe, withdrawing the folder containing the citation. Without a word, I handed it to him.\n\nGavers ran his fingers over the cheap plastic folder, then flipped it open and read aloud.\n\n\"Department of the Army. This is to certify that the Secretary of Defense has awarded the Silver Star to First Lieutenant Lucas M. Patterson, United States Army,\" Gaver said. \"First Lieutenant Lucas M. Patterson conducted himself with valor in the face of the enemy on 24 February 1991. While serving as a platoon leader for the 3rd Squadron, 2nd Armored Cavalry Regiment, VII Corps, First Lieutenant Patterson was part of the spearhead element invading Iraq. Shortly after crossing the border into Iraq, the lead elements were targeted with small arms fire and . . . .\"\n\nGavers read the rest of the citation to himself, then he went back and read it again. Once finished, he handed the citation to Adams and fixed me with a stare. My eyes darted from him to Adams, who was now reading the citation, her eyes growing wider as she read.\n\n\"You held off--\"\n\n\"Almost two hundred fucking men,\" Adams interrupted. \"For a half hour, with only two other guys to help. And killed at least twenty-nine enemy soldiers in the engagement.\"\n\n\"All with bullets and shrapnel in hour legs and hips and belly,\" Gavers finished.\n\n\"You some kinda goddamned Superman or Rambo or something?\" Adams asked.\n\n\"I'm a history professor I said.\"\n\nThey both continued staring at me.\n\nI said nothing in response. Reaching over, I took the citation from Adams and tossed it back into the gun safe atop the box of medals.\n\nAdams now looked at me with awe all over her features. Gavers, on the other hand, just gave an easy smile. He'd been there, I realized. In the Gulf War. He was about the right age, and he had the military bearing that never really goes away. They drill that shit into your fucking soul during Officers Candidate School.\n\n\"You got any coffee?\" he finally said.\n\n\"Sure,\" I said, and led them back upstairs.\n\n* * * * *\n\nI watched them at the table while I ground the beans and poured the water into the coffee maker. They never said a word, but they exchanged more than a few glances and raised eyebrows.\n\nFor more than five long minutes, I stood at the counter watching them, wondering when the hammer was going to fall. Then, just as I reached for three mugs and the carafe of freshly brewed tar, I saw Gavers fix Adams with a stare.\n\n\"Well?\"\n\n\"Yeah,\" she said.\n\nI poured us all a cup of coffee, then sat at the table.\n\n\"How's Whitney?\" I asked.\n\n\"A wreck,\" Gavers said, taking a sip of the coffee. \"Dehydrated, mostly. Still pretty much in shock, too.\"\n\n\"She'll come out of it,\" Adams said. \"Few days of rest and relaxation and she'll be fine.\"\n\n\"Except for the nightmares,\" I muttered, more to myself than to them.\n\n\"Yeah,\" Gavers said, staring into his cup of coffee. \"They don't go away, do they.\"\n\nI didn't respond.\n\n\"The LaBruzzis are in custody now,\" Adams continued. \"Charged with kidnapping and unlawful imprisonment and a whole shitload of other things that'll keep them there forever.\"\n\n\"Dunlop?\"\n\n\"Handcuffed to a bed just down the hall from Whitney,\" Gavers said. \"Looks like he fell while trying to escape and hit the hell out of his head. A lot. Pretty bad concussion, but nothing really permanent.\"\n\nI nodded, trying to hide my relief that this was how they had decided to play it.\n\n\"Strange thing about serious head injuries,\" Adams added, smiling. \"Seems they wipe out short term memory. The worse the head trauma, the longer the memory lapse.\"\n\n\"He can't remember what he had for lunch yesterday,\" Gavers summed up. \"Weird, huh?\"\n\n\"Weird,\" I agreed.\n\n\"There was another guy there, too,\" Gavers said, now getting into his role and pretending he was telling all of this to a total stranger.\n\n\"Really,\" I said.\n\n\"Really,\" Gavers echoed. \"Manny Samuelson. Local meth maker, dealer, and all-around scumbag du jour. Poor Manny.\"\n\n\"Dead?\" I asked, not really caring if he was.\n\nAdams started laughing. \"Second asshole. Gavers here shot him in the ass, right next to the other one already there.\"\n\n\"Pretty messy,\" Gavers agreed, pinching his face in disgust.\n\n\"And how did you two crack it?\" I asked, relaxing totally and taking a sip of my coffee.\n\n\"Just solid police work,\" Gavers explained.\n\n\"Following up the leads,\" Adams said.\n\nI smiled from ear to ear. \"Well done. Really, just well done.\"\n\n\"Thanks,\" Gavers chuckled.\n\n\"Tell our bosses that,\" Adams groused.\n\n\"Still,\" Gavers said, \"I'd just love to know why Dunlop decided to drive out there after sundown. I mean, if he hadn't done that, we'd have never found her. Poor Sergeant Adams would've just spent all night alone in her car down the block.\"\n\nI shrugged. \"Maybe he needed to make sure nothing was wrong.\"\n\nGavers raised his eyebrows.\n\n\"Maybe,\" I continued, \"he got a phone call that scared him. Maybe told him the cops were onto him and had wiretapped all of his phones. Something like that.\"\n\nGavers nodded, his eyes narrowing as he did so.\n\n\"Wonder who did that? I mean, pretty risky. A lot could've gone wrong.\"\n\nI returned his stare, agreeing with his assessment and overjoyed that nothing had gone wrong.\n\n\"My guess would be that the longer she was missing, the more likely she was dead. Whoever did it probably wanted to get shit rolling before they killed her.\"\n\nWe were silent for a moment, all of us sipping our coffee.\n\n\"I wonder something, though,\" I said.\n\n\"Oh?\" Gavers responded.\n\n\"Why was she still alive? I mean, why didn't they just kill her immediately?\"\n\nAdams answered. \"Dunlop remembered all of that. They were going to make her leave a message sometime next week. Like Wednesday or Thursday. A message saying she was now convinced the whole thing was a set up--the whole case against the LaBruzzis--and she'd taken off because she didn't want to have anything else to do with it.\"\n\n\"Sounds a bit farfetched to me,\" I said.\n\nGavers shrugged. \"They were fucked and they knew it. He'd cozied up to Whitney a long time ago trying to get information from her about the case. He wouldn't tell us how cozy, but we can fill in the blanks. Either way, that didn't really work so well. Then, once the trial got going, she was bending over backward from opening statements to hammer them. They figured their best shot was a mistrial. Once the jury is seated, if the mistrial is intentionally caused by the prosecution, jeopardy attaches and they can't be tried again. The whole thing goes away.\"\n\n\"Ballsy,\" I said.\n\nWe finished our coffee in silence.\n\n\"Well fuck it,\" Adams said, pushing back from the table. \"Just wanted to let you know your boy's mom was okay and all.\"",
        "\"Thanks,\" I said, standing along with them.\n\n\"It's been a pleasure,\" Gavers said at the door, turning and shaking my hand with a firm grip.\n\n\"The pleasure's been all mine, I can assure you.\"\n\nHe smiled, then turned and walked toward his car.\n\n\"You ever wanna . . . you know . . . talk or something, give me a call, okay?\" Sergeant Adams said, pressing her card into my hand and lingering over the handshake just a moment longer than was proper.\n\n\"Thanks,\" I said.\n\n\"Let's go, Sergeant,\" Gavers called out before sliding behind the steering wheel of the car in the driveway.\n\nShe gave a quick smile, then turned and walked to the car.\n\nI watched her ass the whole way.\n\nI mean, give me a break, okay?\n\nShe had her own handcuffs.\n\nCHAPTER SEVENTEEN\n\nOn the following Monday morning, I was called into Professor Whitman's office.\n\n\"Your . . . er . . . former wife is doing well I take it?\"\n\nI nodded. \"She'll be fine. She got out of the hospital yesterday.\"\n\n\"Good, good,\" he nodded.\n\nThen he stared off to his right, out the window at students shuffling to and fro under the autumn sun.\n\n\"I'm going to miss it,\" he said.\n\n\"Miss what, Dean Whitman?\"\n\nSorry, but I wasn't just pandering. Even the President of Chadwick never called Whitman by his first name. He'd been around too long and done too much for the institution to not be given his due.\n\nHe turned back and faced me, a peaceful smile on his lips.\n\n\"I'm retiring at the semester break, Luke.\"\n\nSure, I'd been expecting this. It still hit me in the chest, though.\n\n\"You're doing okay, right?\"\n\nHe nodded. \"I figure I've got another five or six years left. And I want to spend those years pulling together all of my notes and theories and writings gathered over the years. My magnum opus, so to speak.\"\n\nI remained silent, and after a moment he continued.\n\n\"I'll be on staff still, of course. Emeritus status. That'll entitle me to a research assistant to help. But I'm giving up my teaching duties. And my position as Dean of the department.\"\n\n\"But you can still--\"\n\n\"No,\" he said, his voice softening. \"It needs to be someone who teaches. A scholar and a teacher both. And that's you, Luke. If you want it, that is.\"\n\nI sat back. It would come with more responsibility, of course. And more pay, too. But I'd have one less class to teach to make up for the extra administrative duties I'd be assuming.\n\n\"I just . . . I think . . . you need to . . . .\"\n\nYou ever know something was coming, but still weren't prepared when it came? That's how I was.\n\n\"You'll do just fine,\" he said, his smile calming me.\n\nI smiled leaving his office, completely at peace for the first time in months.\n\nMy life seemed to be coming around.\n\nI believed I could be happy again.\n\n* * * * *\n\nIt was late October before Kristin again joined me in harmonious passion. We had spent the intervening month getting to know each other better and better, and friendship quickly blossomed to love.\n\nOn Thanksgiving weekend, she and Ben moved in with Kyle, Sun Tzu, and me.\n\nMost of December was spent Christmas shopping.\n\nWe were walking down the crowded mall when a voice froze us.\n\n\"Professor,\" Heather Farley was calling, shouldering her way through the throng of shoppers, pulling Randy along behind her.\n\n\"Merry Christmas,\" I said, smiling.\n\n\"Merry Christmas,\" they both said in unison, her voice all chipper and Randy's a drone.\n\nI introduced Kristin, and another round of holiday wishes followed.\n\n\"So,\" I said, wanting to get my shopping finished, \"you two sticking around here for the holidays?\"\n\nHeather smiled at me, then turned to Randy, leaned in, and kissed him. \"Yeah. He lives too far away for us to be together if we go home. We decided to just stay here.\"\n\nRandy's bashful smile told me he was embarrassed at the riches Santa would soon be bestowing upon him. Strangely, Kristin's face was, if anything, even more adoring as she smiled at his blush.\n\n\"Good,\" I said, interrupting their thoughts. \"Since neither of you is apparently all that busy, I've got some more things you need to get for me.\"\n\n\"You're kidding,\" Randy said.\n\n\"Not a chance,\" Heather agreed.\n\nI shrugged. \"If you change your mind. . . .\"\n\nThey got away from us before I could try to foist more work on their holiday break.\n\n\"She has a crush on you,\" Kristin said, watching them walk away.\n\nI chuckled. \"Looks more to me like they're in love with each other. Which I'd have never seen coming, by the way.\"\n\nKristin elbowed me. \"Men can be so blind sometimes.\"\n\nI turned, leaned in, and pecked her on the cheek. \"Blinded to all but you, babe.\"\n\nShe made a gagging gesture with her fingers in her throat.\n\nI only laughed, then snuck a quick peak at Heather Farley's departing backside.\n\n\"All but me,\" Kristin said, seeing my sneak peek.\n\n* * * * *\n\nWhitney phoned three days before Christmas. We'd barely spoken since she'd gotten out of the hospital. She'd been tongue-tied every time I'd seen her, which was usually at the beginning and end of her visitation periods with Kyle. Every time she looked at me, she got a haunted look about her face. The haunted look deepened when Kristin was around.\n\n\"I was thinking,\" she said, her voice barely a whisper.\n\n\"What, Whit?\"\n\n\"Maybe he should be with you on Christmas Day. I'll just take him for awhile on Christmas Eve and get him back by ten or so.\"\n\n\"Not a chance,\" I said. \"Ben's going to his dad's house, and Kyle's going with you. Kristin and I are going back to bed to catch up on all the sleep we're going to miss out on Christmas Eve.\"\n\n\"It's just that he's going to get bored spending all day and night with me,\" she said.\n\n\"Nonsense. He'll be bored here, too.\"\n\n\"He'll have his new presents to play with.\"\n\n\"He'll have them at your place, too.\"\n\nShe said nothing to that.\n\n\"What's wrong, Whit?\"\n\nShe mumbled something, and I asked her to repeat it.\n\n\"I guess I'm just trying to figure out a way to pay you back.\"\n\n\"For what?\"\n\n\"For everything, Luke. For taking care of Kyle; for saving me. Because I shit all over you, and you were still there for all of us.\"\n\n\"Saving you?\" I said.\n\n\"Karen Adams and Aaron Gavers came and saw me in the hospital. Before you and Kyle got there. I knew it was you in the mask. I mean, fucking duh, right? When I brought this up, Karen told me the whole story.\"\n\n\"And?\"\n\n\"And they made a couple of things pretty clear. Number one, they'd have never been able to save me on their own. It was your plan that tipped their hand--got Dunlop to go to where I was. Two, if I ever told a soul, you'd be in real danger. Not just the danger of prosecution, either. Danger of retaliation from the LaBruzzis.\"\n\n\"Kyle, too,\" I reminded her. \"Kyle could get caught in the crossfire.\"\n\n\"I know.\"\n\n\"So let's not talk about it anymore, okay?\"\n\n\"But you've got to let me show you I'm sorry. And thankful, too. For all of it.\"\n\nI was silent.\n\n\"Please?\"\n\n\"You want to show me you're sorry--maybe you've learned something? Fine. Then don't be late for your visitations. Don't blow them off. Spend as much time with Kyle as you can. He deserves a mother, too.\"\n\n\"But Kristin. . . .\"\n\n\"Is not his mother. You are. Always have been, always will be. And when you're not there for him, he feels rejected. So you want to show me you're sorry and appreciative and all that shit I'm not asking you for? Fine. Don't leave me here to pick up the pieces because you've blown him off for visitation again. For any reason. From now on, Kyle needs to be first in your life, not your fucking job. Fair enough?\"\n\nShe paused for a moment, then whispered, \"Fair enough.\"\n\n\"Good,\" I said, calming down. \"Then have a Merry Christmas and don't be late.\"\n\nI heard her sniffle with tears. \"I'll be there. And Merry Christmas to you, too. And Kristin and Ben.\"\n\nWe rang off.\n\n* * * * *\n\nChristmas morning was like being back in the Army.\n\nReveille consisted of Ben and Kyle jumping on our bed at shortly after four, all excited to go unwrap their presents from Santa.\n\nTwenty minutes later, the sleep still in our eyes and mugs of coffee and hot cocoa all prepared, the boys tore into their presents.\n\nKristin and I had agreed to spend the same on each boy; to shop for and buy all gifts together; and to make them all from Santa. No need to create jealousy, and we wanted them both to know that neither of us would play favorites with either of them.\n\nSuch subtleties seemed lost, though, in the roomful of opened gifts. What wasn't lost, however, was that not all presents between Kristin and me had been exchanged.\n\n\"Dad,\" Kyle said, hands on hips and eyebrows raised, \"when're you going to give Kristin her present?\"\n\n\"After you leave,\" I said.\n\nKristin looked at me with raised eyebrows. Then a smile curled her lips.\n\n\"Strange,\" she said. \"I've got a present for you, too, that only gets opened when they're gone.\"\n\n\"Really?\" I said.\n\nHer look told me she was serious, and that I'd really, really like it.\n\n* * * * *\n\nWhitney and Tyler appeared at the same time to pick up Kyle and Ben, respectively.\n\n\"So you're Whitney?\" Tyler said, shaking her hand after wishing her a Merry Christmas. \"The prosecutor who gave us all a big scare awhile ago?\"\n\nShe looked at the floor, then nodded.\n\n\"Well I'm glad you're safe,\" he said, then paused, furrowed his brow, and looked at her strangely. \"Strange coincidence. My first book was about something like that. About an ex-wife who disappears without a trace. But in that one the husband ran off and saved her.\"\n\nWhitney's head shot up and met his eyes. Then her face softened, and she said, \"I guess there just wasn't enough time for Luke to get in on the action.\"\n\nHe laughed. \"Guess not. Still, I'm glad you're okay.\"\n\nWhitney turned to me with a soft look. The haunted look was gone, replaced by a look she'd not bestowed upon me since well before Charles Lawton Dunlop had appeared on the scene.\n\nI felt a pang in my heart for what had transpired between us.\n\nBut then Kristin placed her hand on my forearm, and the regret was replaced with calm satisfaction at where I'd landed in life.\n\n* * * * *\n\n\"So who goes first here?\" I asked Kristin once the boys had left.\n\n\"I will,\" she said. \"Give me five minutes, then come into the bedroom.\"\n\nThe flash in her eyes told me five minutes on the dot. Not a second sooner or a second later.\n\nEyes on the seconds hand of my watch, I opened the door at five minutes on the dot. The sight before me took my breath away as all of the blood in my body raced to my rampant pecker tenting my pajama bottoms.\n\nKristin was laying in the middle of the bed, dressed in nothing save a large red ribbon with the bow over her silky soft tuft of pubic hair. Her arms were stretched wide above her head, handcuffed to the headboard Tyler's father had made.\n\n\"It's not much,\" she said, her eyes hungry and hips squirming as she spoke.\n\nMy response choked in my throat.\n\n\"It's on the dresser,\" she said, nodding toward the wrapped box sitting in the middle of the dresser.\n\n\"Can't I open this one first?\" I said, making my way toward the bed.\n\n\"No.\"\n\nI stopped, then walked to the dresser and retrieved the box. I carried it over to the bed and sat next to her.\n\n\"I'm not going to lie to you,\" Kristin said. \"Since my second divorce, I haven't been totally celibate. Pretty damned close, though. And I needed some help to get me through a lot of lonely nights.\"\n\nI tore the paper off and opened the box, looking inside with wonder.\n\nShe smiled. \"When we moved in a month ago, I hid this from you. In the attic. I guess I was . . . I don't know . . . ashamed or something. But the past month--hell, the past four months--have been the happiest I've had in a long time. And I decided I didn't want to hide anything from you.\"\n\nA lascivious grin was spreading across my face.\n\n\"So I didn't really buy you a present,\" she continued. \"Not with money, anyway. Instead, I thought I'd give you . . . I don't know . . . my total trust. Access to all of my secrets. Let you know that I'm not hiding anything from you and that I never will.\"\n\nI looked into the box, then back to her. While satisfying, our lovemaking to date had also been conventional. My mind now whirled, though, at the various possibilities contained in the gift box before me.\n\nI reached into the box and pulled out a vibrator, holding it up in front of her and twisting the base.\n\n\"And what exactly do you want me to do with these things?\"\n\nI tickled the tip of the vibrator around the base of the bow, and her hips followed it.\n\n\"Anything,\" she said breathlessly, her eyes closing. \"Anything you want. I want you to take me. Do with me as you will. Live out your wildest fantasies.\"\n\n\"Really?\" I said, putting the vibrator aside and pulling out a slim, tapered vibrator with a large circular base tied to a bottle of lube. \"And what's this for?\"\n\nShe opened her eyes, looked at what was in my hand, and started blushing.\n\n\"Is this what I think it is?\"\n\nShe nodded, looking like a shy schoolgirl.\n\nI leaned in and kissed her, and she kissed me back. With my hands, I grabbed the vibrator and turned it on low, circling the tip over her nipples as we kissed hungrily and she started writhing on the bed with the sensations flowing through her breasts.\n\nMy lips trailed down, and I sucked one of her nipples into my mouth. It was already hard, but my oral ministrations made it darken and stand out still more.\n\n\"My clit,\" she pleaded.\n\nThe vibrator left her breasts and trailed down her stomach, where I ran it the length of her lips, up and down slowly in rhythm to her grinding hips. A few minutes later, my mouth followed the trail of the vibrator until I reached the bow covering the small, thinned strip of her mound.\n\nUsing my teeth, I pulled the ribbon and released it, and her hips rose from the bed to meet my tongue. I ran the vibrator gently over the nubbin of her clit, my tongue going below and taking gentle swipes at the glistening lips of her labia.\n\n\"Yes,\" Kristin hissed, then started groaning.\n\nAfter a minute or two, my tongue moved up and joined the vibrator, which I now held over the hood of her clit while my tongue took feathery swipes at the engorged nubbin before me. Within seconds, Kristin was gasping and groaning through an explosive climax.\n\nGiving her time to settle down, I stood and shucked my clothes, then kneeled on the bed next to her head. Without hesitation, she turned her head and sucked me into her mouth.\n\nI groaned at the moist heat and tingling sensations of her lips and tongue, my hand on the back of her head as I helped hold her head in place. Soon, though, her mouth left my cock and she looked me in the eyes.\n\n\"More,\" she said. \"Please.\"\n\n\"For you or me?\" I asked.\n\n\"Both of us.\"\n\nI turned on the bed, positioning my hips over her mouth while lowering myself back to her pussy. We were both soon nearing orgasm, and I began to pull my hips up and away from her mouth.\n\n\"No,\" she pleaded. \"Please. I want to.\"\n\nSurprised, I lowered my hips back to her mouth and renewed my oral assault on her clit with vigor. My hands were cupping her ass, squeezing her cheeks and holding her pussy in place.\n\nSoon, her hips were bucking and she was shrieking around my cock, her mouth sucking me harder and deeper than I thought possible. Just as her orgasm subsided, my own hit, and I lifted my mouth from her and gave a long, low groan as I shot stream after stream into her mouth.\n\nShe sputtered with the effort of taking it all, and I pulled out as the last shots hit her chin.\n\n\"Sweet Jesus,\" I panted, rolling to the side before flipping around and facing her.\n\n\"No shit,\" she said. \"Like wow.\"\n\nWith my fingertips, I dabbed up the cum on her face and held it in front of her. Her eyes on mine the whole time, she sucked the ends of my fingers.\n\n\"That's the hottest thing I've ever seen,\" I said. \"Probably the hottest thing I've ever done.\"\n\nShe smiled. \"I'll bet we can top that.\"\n\nI laughed. \"I'm not twenty,\" I reminded her. \"It could take awhile.\"\n\n\"Get him back up here,\" she said. \"I'll have him going again in no time.\"\n\nShe wasn't kidding.\n\nTen minutes later, my cock rejuvenated, Kristin turned over with her shoulders on the bed and her ass in the air, and my mouth now attacking her from behind, I smeared lube over the anal vibrator.\n\n\"Slow,\" she said as the tip of the smaller vibrator pressed against the crinkled knot of her ass.\n\nSlender though it was, I had doubts it would fit, particularly at the fatter end of the taper. Little more than a minute later, though, with Kristin emitting a deep, satisfied groan the whole time, the circular base of the vibrator was pressed firmly against her ass.\n\n\"Now,\" she said breathlessly. \"Put it in me now.\"\n\nI knelt behind her, my glazed eyes taking in the sight before me. It was the naughtiest, sexiest, most incredibly erotic thing I'd ever seen. I wedged my head against her lips and, in one slow, steady surge, entered her molten depths.\n\nKristin started bucking in orgasm before I'd even bottomed out, and I kept up a steady rhythm through her most intense climax of the morning. After a couple of minutes, I realized that her orgasms were now coming one after the other, like a steady stream of electrons firing off through her body, and I reached down and pulled the vibrator nearly out of her bottom before pressing it back in.\n\nThis caused Kristin's bucking to explode in intensity, the whole time her voice pleading me to go harder and faster and just please keep doing it. I did, but she was soon overwhelmed with the sensations and her body began to sag in exhaustion.\n\n\"Switch,\" she said, turning to me with her eyes still on fire. \"Please hurry.\"\n\nI knew what she meant. I pulled the vibrator from her ass and replaced it with the head of my cock. Pressing against her, she opened up and accepted the entry with a long groan.\n\nI slowly buried myself in her perfect, incredibly tight, heart-shaped ass. Reaching to the side, I picked up the other vibrator, turned it on, reached down, and touched it against her pussy. Kristin shrieked and bucked, driving me the rest of the way inside her.\n\n\"Yes,\" she hissed. \"Yes, yes, yes.\"\n\nShe was moving back and forth against me of her own volition, setting the pace. I was mesmerized by the sight of my cock sliding back and forth in her ass, charged with excitement as I'd never been before.\n\n\"I'm cumming again,\" she warned, then started bucking even faster.\n\nHer ass was clenching and unclenching around me as the orgasm pulsed in waved over her body, and I, too, felt my body go taut as I again released shot after shot deep within her.\n\nWith a final groan from Kristin, we collapsed together onto the bed.\n\n\"Goddamn, Luke,\" she panted, gulping in air as my cock shrank from her.\n\n\"Yeah,\" I panted, still trying to catch my breath as well.\n\n\"I'm not gonna walk right for a week.\"\n\nI kissed her. \"Thank you. It was . . . well . . . it was like nothing I've ever experienced before. Any of it.\"\n\nShe smiled, her eyes still closed. \"Me neither. But I've had a lot of time over the past few years to build up some really good fantasies.\"\n\nI chuckled. \"It was time well spent.\"\n\n* * * * *\n\nI awoke to Kristin kissing me, her hands now somehow free of the handcuffs.\n\n\"So where's my present?\" she said.\n\nI opened my eyes. She was dressed in pajamas and a robe.\n\n\"Let me get cleaned up,\" I said, sitting up and swinging my legs over the edge of the bed.\n\n\"Already did that for you,\" she said. \"Just throw on your pajamas.\"\n\nI pulled on the flannel pants, then went to the top shelf of my closet. Retrieving the small box, I turned and held it up to Kristin.\n\nShe saw it, and her eyes immediately glistened with tears as her mouth turned to a sad smile.\n\n\"Please tell me it's not . . . .\"",
        "I hesitated, then handed it to her.\n\nWith trembling fingers, she began opening the small box. Once it was unwrapped, she opened it and looked at the ring within.\n\n\"I want to get married,\" I said, my eyes on her the whole time. \"You're my best friend. You've been there for me through the worst of times, and now I want you to be with me for the best of times.\"\n\nShe looked at me, then back to the ring.\n\n\"But my past,\" she said.\n\n\"I don't care. It's past.\"\n\nThe tears really started flowing at that. \"I don't want to hurt you, Luke. I'm . . . I'm damaged goods.\"\n\nI cupped her chin and turned her head to face me.\n\n\"You made some mistakes,\" I said. \"Sure, they were major mistakes, and they were probably mostly your fault. But that was then. Years ago. You're not that person anymore.\"\n\n\"But what if I am?\"\n\nI shook my head. \"People learn from their mistakes,\" I said. \"I believe that; I really do. And you've learned. You'll never do it again.\"\n\n\"But how can you know?\"\n\n\"I just know.\"\n\nShe looked at the ring, then at me, then back at the ring.\n\nI waited for her, tensing up, my chest ready to explode.\n\nImperceptibly at first, then more vigorously, she started nodding her head. And crying. And laughing, too.\n\n\"I never want to lose you.\"\n\nI hugged her to me. \"And I never want to lose you.\"\n\nFinis"
    ],
    "authorname": "Rehnquist",
    "tags": [
        "cheating",
        "divorce",
        "oral",
        "anal",
        "one-on-one",
        "bondage"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/the-damp-gray-gone-ch-03"
}
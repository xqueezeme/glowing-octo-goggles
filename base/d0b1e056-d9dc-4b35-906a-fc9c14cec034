{
    "title": "Sexual Sissy Awakening",
    "pages": [
        "Summary: Man turns into a sissy with help from online author.\n\nNote 1: Dedicated to Brittany, who suggested this sissy exploration tale.\n\nNote 2: Thanks to Tex Beethoven and Robert for editing this story.\n\nSexual Sissy Awakening\n\nI thank silkstockingslover. 100%. Okay, well not a hundred percent, that would be ridiculous. But her influence was huge.\n\nMany of her stories seemed to be about everything I was feeling. Not the lesbian or group sex ones of course, but the ones about men rediscovering themselves, absolutely!\n\nIt was like she'd been inside my head when she wrote them.\n\nShe'd helped me come to grips with many of my insecurities.\n\nIf her stories were true... or even partly true... then I wasn't alone in my desire to dress up in feminine clothing. I wasn't alone in being curious about sucking a cock. I wasn't alone in having a mid-life crisis at 52.\n\nIf her stories were true, not only did many men have sexual awakenings in their late 30s to early 50s, but many men my age were curious about becoming feminized, about sucking cock, and perhaps even about bottoming.\n\nBut I can't thank only her. I can also thank those hypno sissy videos, since they became completely inspirational for me. But those too I could thank her for, since I never knew they existed until I read her HypnoSissy series, and well, a whole new world was suddenly staring back at me.\n\nNo, I really can't thank only her. I mean it was my own desperate idea to email her in the first place. But then it was her gracious decision to respond.\n\nAm I being confusing? Okay then, here's the story of my exploration of my feminine side.\n\nWhich really shifted from just jerking off, to hypno sissy and shemale porn, to my becoming a complete slut for cock... something Emma, my wife of twenty-nine years still didn't know when I first emailed silkstockingslover.\n\nWhen I did it, I wasn't expecting a reply. And I certainly wasn't expecting to receive her advice. It was just a safe way of getting some things off my chest.\n\nDear silkstockingslover\n\nI have been reading your stories, and I just have to finally write and thank you. I have always voted five stars for the stories I enjoyed, which was almost all of them, and even left the odd comment as Anonymous, and yet finally after reading a couple stories that really hit home, I have to finally open up and write.\n\nYou have changed my life, or at least you have changed the trajectory of my sex life.\n\nAlthough I'd love for you to respond, I understand you likely get a lot of fan mail, but I just have to finally tell you how great you are, and to repeat that you have completely changed me as a man, and helped me begin to come to grips with many feelings I have kept inside for years, but that had grown stronger and tougher to ignore as I hit my forties.\n\nThanks. Bradshaw\n\nI pressed Send, and felt relieved. I hadn't actually said much, only vaguely hinted at my sissy curiosity... something I'd never told anyone before. I mean who would you tell?\n\nNot your friends.\n\nDefinitely not your wife.\n\nLiterally, no one.\n\nI didn't expect a response, so I was quite surprised when a day later there was an email in my inbox from her.\n\nI was at work. I'm an executive VP of a small computer firm. Yes, I'm a little geeky, although I was otherwise the epitome of average.\n\nYet I had to read her response.\n\nHi Bradshaw,\n\nThanks for the email.\n\nWhich stories in particular do you like the most? What exactly do you mean by I have changed the trajectory of your sex life? I'm flattered, but curious what that means.\n\nI have a new story out every week or so, and I hope you vote five stars for the ones you like and leave the odd comment. Authors love to get emails like yours, and comments about our stories.\n\nWhy don't you tell me a bit about yourself?\n\nJasmine\n\nSee what I mean? She didn't have to start asking me questions, unless she intended to assist me with my journey. So of course even though I should have been prepping for a meeting, I couldn't help but respond immediately.\n\nJasmine (if I may call you that -- I mean by your first name instead of more formally),\n\nI'm flattered you took the time to respond.\n\nI'm 52. Married. Work in computers. Six feet tall, 185 pounds, in pretty good shape, and the beginning of grey hair hinting that I really am now in my fifties. But I am still decent looking and sometimes get looks from the ladies. Maybe that is more information than you were requesting.\n\nI enjoy almost all your stories. I have loved nylons for as long as I can remember. When I was in high school in the eighties, the lady teachers, cheerleaders and many of my peers wore them all the time. My mom was a nurse back in the time when white pantyhose were still part of their uniform.\n\nI binge read all your incest stories first... I've always liked the taboo aspect of it. I also read all your lesbian and illustrated ones. Eventually I have read your entire catalogue, even the gay ones, and those are the ones that began my new trajectory.\n\nThe one that really started it for me was the first story in the Kinky Tales series. The idea of a woman wearing a strap-on and fucking her husband was strangely hot. I mean, I had never even remotely thought about that, nor was I at all interested in getting ass fucked, yet over the next few weeks I kept going back to that series over and over.\n\nThat led to my researching pegging, discovering it wasn't as rare as I had assumed, and I began watching a lot of pegging porn. Although I had a problem with it, because most it went straight to the sucking and fucking, without much of a plot, if any. And for me at least, I needed a plot. How did the outrageously masculine quarterback end up getting bent over and fucked by a cheerleader? Or how did the stepson end up begging to get ass fucked by his stepmom while his girlfriend watched? Or how did the tattooed stud end up bent over a pool table while being sodomized (a word you often use, which I find so hot) by a chubby waitress?\n\nAnyway, this led to more, but I've probably already gone on longer than you would want to read.\n\nHowever if you do want to hear more, I'd love to share more.\n\nWriting this down feels surprisingly therapeutic.\n\nBradshaw\n\nI clicked Send and went back to work with a major hard-on, hoping she would respond. If her stories were more than just fiction, and all the psychological aspects did appear to be well researched, then I wasn't alone in my curiosity, and maybe she would not only understand, but help me to explore my growing obsession with becoming feminized.\n\nShe hadn't responded two days later, so I assumed I had turned her off.\n\nIt was Friday afternoon, near the end of the day, as I was winding down from an intense day at work, and believe it or not, there can be some intense crises at my job, especially when a major client is hacked.\n\nSo I was thrilled to see an email from Jasmine had arrived an hour ago.\n\nI sat back in my chair and clicked it open.\n\nBradshaw\n\nOf course you may call me Jasmine. But you may also call me Mistress, since it is pretty obvious you are looking for guidance.\n\nJust so you know, you are not alone. Many men your age begin to question their sexuality. Whether it is pegging that attracts them, which is becoming more and more commonplace each year; or sucking cock, which a shocking amount of men your age fantasize about doing (or actually do); or becoming a bottom for cock, often big black cock; there is nothing about any of those practices to be ashamed of.\n\nAnd I know almost for sure you have felt guilt, confusion, and likely a plethora of other feelings.\n\nThese are all perfectly natural.\n\nSo if you have more questions, or need to share or vent, feel free to drop me another line whenever you like.\n\nHave you been pegged yet?\n\nJasmine\n\nHer words were magical!\n\nThey were exactly what I needed.\n\nSomeone who understood.\n\nSomeone who wouldn't judge.\n\nSomeone with whom I could share my inner truths without condemnation or risk.\n\nYes I had felt all those feelings she listed, and she had called them natural!\n\nI responded.\n\nMistress Jasmine (I love the look of those two words together),\n\nThank you for your response and your understanding. Everything you said is true. The past two years have been so confusing, as I questioned my manhood and my masculinity. I mean can I be the man of the house and still want to be pegged? Or maybe want to suck a cock? I haven't known.\n\nNo, I have never been pegged. I love my wife Emma, but our sex life has diminished substantially over the years, which, I suppose, happens to most couples. I don't think she would understand any of my feelings. About being pegged. Sucking cock. Wearing women's clothes. Getting fucked.\n\nJust writing them down is both liberating and humiliating.\n\nI should note that after reading your pegging stories, I then read all your shemale stories, as the idea of sucking a cock attached to a woman made it seem less gay. Same with the idea of getting fucked. If I got fucked by a curvy woman who happened to have a real cock, that seemed less shameful.\n\nBut then I read your HypnoSissy series, and that fucked me over completely!\n\nI had no idea men like that existed, but once I read the series, I had to find some examples, and well, by now I have watched every one on Pornhub, and other sites I could find.\n\nHaving women calling me names and telling me what to do, was somehow the ultimate turn on.\n\nThis, of course, has led me to my becoming obsessed with being feminized, sucking cock and getting fucked.\n\nBut of course fantasy and reality are two very, very different things. I haven't actually done any of those things.\n\nThanks for letting me vent. It has felt very liberating to get two years of guilt and confusion off my chest.\n\nBrittany\n\nI clicked Send, I made sure my office door was locked, sat down on my desk and jerked off... I didn't last three minutes.\n\nUnfortunately, she didn't respond right away, so I headed home.\n\nI checked my email every few minutes all night until I finally fell asleep, and alas, nothing.\n\nAs soon as I woke up, I saw there was one from her.\n\nBrittany (by the way, an interesting name choice, and from experience and years of teaching, most Brittanys are hot and slutty),\n\nIf I may be blunt, I have chatted with many men like yourself. You have three paths to choose between.\n\n1. Ignore these growing feelings, although they will likely continue to consume you and make you unhappy, and potentially you might even start feeling bitter towards your oblivious wife.\n\n2. Tell Emma what you're feeling. Of course this could go a number of ways, and you know her better than I do. But I can honestly tell you that women are more open minded than most men assume, and many of us have our own kinky secrets and fantasies we're hiding (such as an author with a hidden identity, who in real life secretly wants to eat student pussy, to get fucked by a BBC, and to share an incestuous threesome with her sisters, for example).\n\n3. Explore these feelings secretly.\n\nBut I need to stress that Option 1 is futile, which I know from my experience in corresponding with other men just like you (and there are so many of you)! Once the idea has been triggered, there is no pushing it away. Pandora's Box has been opened, the Genie is out of the bottle, or whatever metaphor you care to use.\n\nI know it's scary.\n\nI know you're confused.\n\nBut from your own words... you are becoming more and more consumed by these feelings, and thus they will continue to control your mind, body and soul, until you have satisfied this curiosity.\n\nJasmine\n\nI read her response a dozen times.\n\nYes, it was scary.\n\nYes, I was confused.\n\nYet I was also beginning, through her words, to accept my growing curiosity and desire. It was indeed consuming me, and I assumed she was right... that until I dealt with it one way or another, it would continue to burn inside me.\n\nWhile Emma was in the shower, I responded,\n\nJasmine\n\nThank you so much!\n\nI know I can't choose option 1.\n\nI also know I can't choose option 2. I mean I could, but I'm scared of the worst-case scenario, which I think is the only likely one.\n\nAnd as for option 3... where would I even begin?\n\nI hate to ask for even more of your guidance, as I'm sure you have better things to do than help some man explore whether he is a sissy or not, but could you give me some advice?\n\nI literally am ready to go ahead with number three... but where do I start?\n\nPet Brittany\n\nI clicked Send, just as my wife walked out of the shower.\n\n\"I see you're hard already,\" she said, as my dick bulged in my boxers.\n\n\"Yeah, I'm thinking we should do something about that,\" I agreed, tossing the phone onto the bed and walking over to her.\n\n\"I just showered,\" she objected.\n\n\"I prefer you getting a little dirty,\" I smiled, as I leaned in to kiss her.\n\n\"Not now,\" she refused, backing away.\n\nI sighed.\n\n\"Don't sigh at me,\" she said. \"You want sex after I shower while I have to get ready for work.\"\n\nI replied, like I always seemed to do, \"Sorry.\"\n\n\"We can definitely have sex,\" she said. \"But we need to plan it.\"\n\n\"Yeah, nothing is sexier than fucking on a schedule,\" I joked, the raw passion where we'd fucked like bunnies long gone, or when we'd fucked anywhere. Shit, the first time I fucked her was in a girl's bathroom at her sister's wedding.\n\n\"Sorry, you know I prefer to plan things,\" she said as she escaped over to her dresser.\n\n\"We didn't plan the time you sucked me under the table at Walter's, or when I fucked you in your boss's office at the Christmas party,\" I tried to remind her of her younger, wilder, more spontaneous days.\n\n\"I was twenty then, not forty-five with kids.\"\n\n\"I know,\" I said, thinking if I was ever going to tell her what I'd been feeling, this would be the time. Yet I didn't. \"It's just we....\" I paused.\n\n\"It's just we what?\" she asked, in a tone that warned whatever I said next might blow up in my face.\n\n\"Nothing.\"\n\n\"No, tell me,\" she said, as she put her panties on. Panties that weren't remotely sexy.\n\n\"It's just, we don't really connect like we used to,\" I said cautiously.\n\n\"Connect?\" she asked. \"You mean fuck?\"\n\n\"Not just fuck, but experience moments when we simply have to have each other.\"\n\nThis seemed to soften her. \"Yeah, I suppose that's true.\"\n\n\"It's no one's fault. Life got busy.\" I said.\n\n\"Well,\" she said, as she grabbed a pair of pantyhose, she used to wear thigh highs, or garter-belts and stockings, but now it was always pantyhose. \"Let's plan a night.\"\n\n\"Okay,\" I said, as she sat on the bed.\n\nShe said, seeing me watching her. \"Maybe I'll even go buy some thigh highs.\"\n\n\"Please do.\"\n\n\"You and your nylon fetish.\"\n\n\"That's why I married a woman who works in politics,\" I joked.\n\n\"And because I used to suck your dick every day,\" she said, now sounding like my wife in her younger days.\n\n\"And swallowed,\" I added.\n\n\"And gave you foot jobs,\" she added.\n\n\"And sat on my face,\" I continued.\n\n\"Fuck, you're getting me horny now,\" she sighed, as she finished putting her pantyhose on.\n\n\"Well, you could go in late,\" I said.\n\n\"I have a meeting with the mayor at nine,\" she said. \"I can't be late.\"\n\n\"Fine,\" I said.\n\n\"But if you can shoot your load quickly, I can give you a quick BJ,\" she said, as she knelt before me.\n\n\"You know I never last long in your mouth,\" I said, as she pulled down my boxers.\n\n\"Well, just come down my throat, she said. \"I haven't taken the time for breakfast yet anyway.\"\n\nAs she began sucking my dick for the first time in months, I joked, \"Well, that is the most important meal of the day.\"\n\nThree minutes later, she was standing up after having swallowed my load. \"I do love cum.\"\n\n\"Well, I'll always have a fresh load ready for you,\" I smiled.\n\n\"I'll keep that in mind,\" as she kissed me and went into the walk-in closet to finish getting dressed.\n\nI hopped into the shower, suddenly feeling so guilty for emailing Jasmine, and for even considering exploring my sissy curiosity.\n\nI loved Emma. So either I'd tell her, or I'd do nothing.\n\nThat was my new resolve.\n\nWhich, of course, lasted only for about four hours.\n\nWhen I couldn't help but check whether Jasmine had responded.\n\nShe had.\n\nThen I couldn't help but read it... because even after that special moment with my wife, my curiosity was still there, and my desire to be feminized was still strong.\n\nPet Brittany,\n\nWhat's next is simple.\n\nYou start by doing small tasks.\n\nFor example, here is task 1. Go out right now, buy a pair of pantyhose, and put them on underneath your work clothes.\n\nSimple.\n\nBaby steps.\n\nMistress Jasmine\n\nShe'd used the term Mistress.\n\nShe'd given me an order.\n\nIt was almost lunchtime.\n\nWhat the fuck!\n\nWhy not?\n\nI had always wondered what wearing pantyhose would be like, and had always thought it was unfair that for some reason they were considered a women only clothing accessory.\n\nI headed out for lunch, grabbed a sandwich, and bought a pair of black nylons from a department store. It was kind of awkward to purchase pantyhose, although the saleswoman didn't seem too fazed.\n\nI got back to work, locked my office door and pulled on the pantyhose... which I discovered was a lot more work than I had imagined. Watching a woman put them on had always been sexy, I had watched many scenes on YouTube, but actually doing it, was a bit of work and awkward.\n\nOnce on, I put my socks back on, pulled up my pants and walked around. It felt slightly weird, yet super exciting.\n\nI sat down at my desk and checked my Inbox to see if there was another email from Jasmine... and one had arrived just three minutes ago.\n\nOf course I clicked on it.\n\nPet Brittany,\n\nIf I am right, and I usually am, you went out almost immediately, bought some nylons, and you're now wearing them.\n\nIf that's true, which I'm confident it is, I want you to slide your pants down, and just rub your hands over your nylon legs.\n\nHow does it feel? Does it make your cock hard?\n\nBut don't touch that dick of yours.\n\nWhen you're in nylons... you must allow your feminine side to take charge.\n\nYou are sexy.\n\nYou are sensual.\n\nYou are BRITTANY.\n\nYou don't have a dick... you have a pussy.\n\nMistress Jasmine\n\nWow!\n\nHer words were as magical here as they were in her stories... even more so, since they were directed at me personally.",
        "Silkstockingslover herself was telling me what to do!\n\nI felt compelled to obey.\n\nI glanced at the clock.\n\nI had twenty minutes before a meeting.\n\nSo I pulled my pants down to my knees, and moved my hands up and down over my nylon-clad legs... happy I'd purchased a pair of silky sheer ones.\n\nIt felt so nice.\n\nI felt my cock harden as I touched my legs, and yet I resisted the temptation to touch it, as instructed.\n\nI wasn't Brad, I was Brittany.\n\nI was sexy.\n\nI was sensual.\n\nI was feminine.\n\nI was Brittany!\n\nI did this for a few minutes before my cell rang. It was a client. I kept my pants at my ankles and my free hand roaming freely as I chatted with him.\n\nEventually, I pulled my pants back up, and before going to my meeting, I emailed Jasmine back.\n\nMistress Jasmine\n\nI did just as you told me.\n\nI bought a pair of black nylons.\n\nPut them on.\n\nThen caressed my nylon-clad legs.\n\nIt felt so sensual and so right.\n\nAnd although my dick was hard the entire time, I ignored it like a good girl.\n\nI'm heading to a meeting now with three men and a woman, wearing pantyhose underneath my suit. I feel sexy. I feel a little slutty, and I have a major rush of adrenaline from obeying your orders.\n\nYour Pet Brittany\n\nI went to my meeting... a little distracted and a lot excited. It was a complete rush that I was wearing pantyhose underneath my clothing, yet no one had a clue.\n\nThe day got really busy and I didn't get a chance to check my email until four, but even so, there was no response from Jasmine.\n\nI headed home, keeping the pantyhose on.\n\nI got home, walked in, and my wife said, surprising me in lingerie, \"Welcome home, honey.\"\n\n\"H-h-hi,\" I stammered, shocked to see her dressed in sexy red lingerie, while realizing I was still wearing my pantyhose.\n\n\"I like that reaction,\" she smiled, as she swayed towards me.\n\n\"You look amazing,\" I said, my cock hardening.\n\n\"I know,\" she said, as she hopped up onto the kitchen counter and said, \"Hungry for some dessert?\"\n\n\"Oh honey, I am,\" I said, \"But I've really got to go pee first.\"\n\n\"Hurry,\" she said, \"your after work cocktail has been marinating all day.\"\n\n\"I will,\" I said, quickly going into the bathroom, getting out of my slacks, then my pantyhose, and stuffing them in the bottom of the cabinet to retrieve later.\n\nI flushed the toilet I hadn't actually used, washed my hands, and headed back to my horny (for once) wife.\n\nI moved between her legs, kissed her inner thigh, and then licked her pussy. After a couple minutes, she said, \"Fuck me, baby. I need your dick inside me now.\"\n\n\"Okay,\" I said, not needing to be told twice. I took control like I used to when we were wild, spun her around, and bent her over.\n\n\"Oh yes, just slide your dick in me,\" she moaned.\n\nI did just that, sliding into her from behind.\n\n\"Pound me, baby,\" she moaned.\n\nI began fucking her, my balls already boiling after just a few thrusts, when suddenly I wondered what it would be like if I was the one bent over.\n\n\"Deeper,\" she moaned, which was frustrating, since I couldn't possibly go any deeper.\n\nI slammed into her as hard as I could, even while I couldn't stop imagining getting fucked myself, which triggered a quick eruption. \"Fuck,\" I grunted, as I filled her pussy.\n\n\"Already?\" she snapped, clearly annoyed by my quick trigger.\n\nNot wanting to disappoint her, and curious what a cream pie would taste like, I pulled out, spun her back around, dropped to my knees, and buried my face in her cum-filled pussy.\n\n\"What are you dooooooing?\" she asked, as I began licking her.\n\n\"Just making sure you come too,\" I said, as I tasted my cum for the first time.\n\n\"But you're eating your cum,\" she pointed out, but she didn't stop me.\n\n\"Anything for you,\" I said, as I hungrily lapped her pussy and my cum... which was quite the unique cocktail, just like she'd offered me. It tasted good, and it was exhilarating.\n\n\"Then go ahead and eat my cum-filled pussy,\" she said, sounding turned on by me eating my own cum out of her pussy.\n\n\"Tastes so good,\" I said, trying to hint at my secret desire to suck cock... and then to swallow cum.\n\n\"This is so hot,\" she moaned, as she put her hand on the back of my head and guided me deeper into her pussy.\n\n\"Come on my face,\" I said, as I sucked on her clit, knowing that expedited her orgasms.\n\n\"Don't stop baby, don't fucking stop,\" she moaned, holding my head deep in her pussy.\n\nI didn't, and she came a minute or two later, returning a lot of my cum, as her orgasm exploded in my face.\n\nI lapped up as much as I could, until she let go of my head a minute later.\n\n\"That was new,\" she said, looking down at me.\n\n\"Did you like it?\"\n\n\"Yeah, did you?\"\n\n\"Yeah,\" I said, standing up.\n\n\"Eating me after fucking me and coming inside me, somehow made it more intense,\" she added.\n\n\"Agreed,\" I smiled, feeling a rush of excitement at eating my cum for the first time, and better yet, with my wife.\n\n\"Well, I'm going to shower,\" she said. \"Can you check on the chicken in the oven?\"\n\n\"Of course,\" I said, as she walked away, and I admired her back end in her lingerie and nylons.\n\nOnce she was gone, I shook my head at just how crazy this day had been.\n\nI felt guilty for emailing Jasmine... and for obeying her.\n\nYet, I also felt so alive from obeying Jasmine.\n\nI loved Emma.\n\nI hoped this welcome interlude wasn't an anomaly, and our sex life could be rejuvenated.\n\nBut I also knew I still needed to explore this feminine side of me. Eating my cum was exhilarating, and it only made me more curious about what it might be like to suck a cock and taste the cum directly from that cock.\n\n.....\n\nNext day, I emailed Jasmine:\n\nMistress Jasmine\n\nThank you for the orders. It was exhilarating to just mindlessly obey without judgement. I really appreciate it.\n\nAfter having sex with my wife and coming in her, I ate her out. My first ever cream pie. I loved it, and she did too.\n\nI'm back in my pantyhose as I head to work.\n\nPS: I'll be flying to Toronto in three days, and will be staying in a hotel for five nights. I mention this in case you want to assign any tasks for me while I'm there.\n\nPet Brittany.\n\nI checked my email a dozen times throughout the day, but there was no response.\n\nSmartly, just in case, I took off my pantyhose before going home, although there wasn't any sexy surprise this time when I got home.\n\nIt wasn't until I was getting ready for bed, that I got an email from Jasmine.\n\nPet Brittany,\n\nOh my... you're well on your way to becoming a complete sissy.\n\nSince you're taking this exercise so seriously, please answer the following questions, so I can understand what you need. I will then give you some tasks for Toronto, which I actually know quite well, since I attended university there.\n\n1. What kinds of porn do you watch?\n\n2. Does anyone besides me know you want to be a sissy?\n\n3. Where do you want to go with this? For instance to cross dress? To suck cock? To get fucked? To be completely feminized?\n\n4. I assume I know the answer, but let me know what you have done sexually related to being with men. For example, have you played with your ass?\n\n5. Have you been pegged?\n\nJasmine\n\nI took my laptop into the bathroom and responded,\n\nMistress Jasmine,\n\nThank you again for responding, I'm so honored you would take time from your busy writing schedule for me.\n\nHere are my answers.\n\n1. What kinds of porn do I watch?\n\nI used to watch typical vanilla porn. Some lesbian. Eventually I started watching interracial porn and was in awe of the size of their cocks, which began my current twisted journey. Shemale porn, the odd gay porn, and lots of hypno sissy videos are what I watch now.\n\n2. Does anyone besides you know I want to be a sissy?\n\nNo one. Just you.\n\n3. Where do I want to go with this? For instance to cross dress? To suck cock? To get fucked? To be completely feminized?\n\nI know it sounds pathetic, but I want to do everything you listed, although each item both intrigues and scares me. But I've become particularly obsessed with sucking a cock.\n\n4. You assume you know the answer, but let you know what I have done sexually related to being with men. For example have I played with my ass?\n\nI've never been with a man. Never had anything up my ass. I've thought about going to a gloryhole, but am terrified I'd bump into someone I know.\n\n5. Have I been pegged?\n\nThe answer is still no, but the idea is really appealing.\n\nI'm ready to obey any order you'd care to give me, Mistress, especially while I'm in Toronto.\n\nPet Brittany\n\nI pressed Send, and after a quick jerking off, headed to the bedroom.\n\n.....\n\nI woke up the next morning and checked my messages, to see one from Jasmine.\n\nPet Slut Brittany\n\nI expect you to buy the following for your trip:\n\n-panties (all pink)\n\n-a few pairs of pantyhose\n\n-red nail polish\n\n-red lipstick\n\n-a set of three butt plugs (in graduating sizes) with lube\n\n-optional: a wig.\n\nYou WILL wear panties and pantyhose on your flight including through security.\n\nAs soon as you get to your hotel, you will insert the smallest of your three butt plugs in that virgin cunt of yours.\n\nSend me a picture of everything once you've bought it.\n\nMistress Jasmine\n\nPS: If anyone asks why you're buying these items... you tell them the truth! Is that clear?\n\nI noticed she'd called me a slut, which made my cock harden.\n\nI noticed she'd called my ass a cunt, a term she used liberally in her stories, and a term she often used to indicate a sissy's asshole.\n\nI read through the long list.\n\nPanties were something I'd always wanted to wear. Pink enhanced the feminine aspect of them.\n\nMore pantyhose were easy, as I couldn't continue wearing the only pair I'd bought, and washing them at home would be difficult to explain.\n\nI had always found red nail polish sexy, and had always wondered what it would be like to have my nails done like a sexy woman's.\n\nLipstick. That I had never considered buying.\n\nAnd butt plugs. Yes, I'd been curious about what it would feel like to be pegged, or even ass fucked, but I hadn't seriously considered buying any toys. Good idea!\n\nA wig? I wouldn't even know where to start.\n\nI headed to work, wearing the same pantyhose for the third straight day, this being Friday, before I flew out on Sunday afternoon. At work, I responded.\n\nMistress Jasmine\n\nYour slut sissy Brittany will purchase all these items today at lunch or after work. My flight is Sunday at 3 PM.\n\nI look forward to being your mindless submissive sissy slut for a week, while visiting a foreign city.\n\nYour pet slut Brittany.\n\nI pressed Send, and then went to work. It was a crazy day, but I left work an hour early to go shopping.\n\nI was excited until I reached the mall.\n\nHow would I buy some panties without looking like a creep?\n\nI walked into a Victoria Secret nervously. I went to the panties area, and realized I had no idea what size I would wear in panties. I wore medium boxers. Would that translate to a large in women's? An extra large?\n\nAs I pondered this, a pretty blonde walked over to me and asked, \"May I help you?\"\n\nRecalling Jasmine's order, I responded, a little sheepishly, \"I'm looking for some pink panties.\"\n\n\"For your wife?\" she asked.\n\n\"No, for me,\" I answered, rather quietly.\n\n\"Oh,\" she said, my answer surprising her.\n\n\"Yes, my Mistress ordered me to purchase five pairs of pink panties,\" I replied, knowing I had to obey Jasmine, and oddly it felt good to do so.\n\n\"Oh, okay,\" she said, clearly surprised by my answer.\n\n\"Although I'm not sure what size I am,\" I said.\n\nShe looked at me, then said, \"Probably an extra large.\"\n\n\"I'm a medium in men's underwear,\" I said.\n\n\"Maybe only a large, then,\" she said. \"I can't say for sure.\"\n\n\"Okay,\" I said. \"Can you find me five pairs in large, and five in extra large in a variety of styles?\"\n\n\"Sure,\" she said, as she started going through the panties.\n\n\"Okay,\" I said, feeling oddly at ease with the strange situation.\n\nI waited a couple minutes until she said, \"Here you go.\"\n\n\"Thank you,\" I said.\n\n\"You're welcome,\" she said.\n\n\"Oh, I also need pantyhose in extra large. One of every colour you have.\"\n\n\"Okay,\" she said more casually now, obviously growing more accustomed to my kink, leading me to a different section of the store. \"Any thigh highs?\"\n\n\"Sure, get me a pair of those in each colour, too,\" I said, thinking, Why not? Jasmine loves them, and I love when Emma wears them.\n\nShe grabbed me a bunch of packages, led me to the till, and I purchased everything.\n\nI proceeded to Macy's, and I bought some red lipstick and nail polish where, thankfully, I wasn't asked any questions.\n\nI then drove to an adult store in a somewhat sketchy area at a strip mall. I walked inside, not having been inside one of these in years. They had certainly changed! There were sex toys I couldn't fathom being used on any woman, for instance some dildos that seemed to me the size of tree trunks! (Well, saplings anyway.) There were kinky toys I tried to imagine being used on a woman. I found the butt plug section, and gasped at the size of some of them... some didn't look humanly possible to be used in either length or girth.\n\nI ended up buying a pack of three in a variety of sizes from small to seemingly way too big, as well as a vibrating prostate massager (not on the list, but it intrigued me), and anal lubricant. The cashier, a woman, didn't seem at all fazed by my purchases.\n\nI got to my car, dumped all my purchases onto the passenger seat, and took a picture of them. I then emailed Jasmine.\n\nMistress Jasmine,\n\nHere is a picture of all the purchases you instructed me to buy.\n\nIt was nerve-wracking and exciting. Buying panties was awkward, as the girl was definitely judging me at first. The other two purchases went without a hitch.\n\nPet Slut Brittany\n\nI got home, stored my purchases in the trunk, and went inside.\n\nSaturday I did some work in the garage, and kept checking for a response from Jasmine.\n\nNone came.\n\nTo my surprise, on Sunday I received a very rare morning blow job from my wife, and I returned the favour. Somehow just as I was beginning to explore my feminine side, after years of growing neglect from Emma, she was suddenly getting amorous again. Go figure. It almost made me feel guilty for my obedience to an online Mistress.\n\nAfter our sex, I checked my phone, and there was a message from Jasmine.\n\nPet Slut Brittany,\n\nSorry for the delayed response. The weekend has been busy. I finished a new story, marked some essays, and so forth.\n\nAnyway...\n\nGood boy. Nice purchases. I see you even bought a prostate massager. However, your pussy will need to be trained before it can take that.\n\nAre you leaving today?\n\nBe sure to wear panties and pantyhose to the airport. Are you staying in downtown Toronto? If so, I can come up with a couple of adventures for you.\n\nMistress Jasmine\n\nI responded instantly.\n\nMistress Jasmine\n\nI leave in a few hours.\n\nI will dress as instructed.\n\nI am staying at a hotel on Yonge Street in the heart of downtown.\n\nI eagerly await any further instructions.\n\nPet Brittany\n\nMy cock was hard at the promises lying ahead.\n\nI had breakfast with the wife, packed, knowing I'd be repacking once I left the house and parked a few minutes away, and I did some reading.\n\nOnce I was a few minutes away from my house, I pulled over and repacked my suitcase, adding five pairs of panties, pantyhose, lipstick, nail polish, lube, and all the toys... I was already wearing a pair of pink panties and tan pantyhose.\n\nI got to the airport, the toys all in my suitcase and not in my travel bag, I wasn't that adventurous, went through security without event, and went to the bathroom to take a leak. I walked to a urinal and then remembered I was wearing pantyhose, which I was already used to wearing, so I went into a stall instead.\n\nBefore I got on the plane, I checked my email and saw another one from Jasmine.\n\nPet Slut Brittany,\n\nI am sending you my cell number for quick communication. Text me once you arrive in your hotel room.\n\nMistress Jasmine\n\nI responded in awe she was sending me her cell number.\n\nMistress Jasmine\n\nThank you so much!!\n\nI will text you the moment I get to my room.\n\nPet Slut Brittany\n\nThe flight, in a rarity from my experience, arrived early. I got off, grabbed my bags, my suitcase being the first off the conveyor belt, also a first, and went to hail a taxi... which was also right there when I got out into the cooler Canadian air. Twenty-five minutes later, the taxi dropped me off at my hotel. I checked in, went to my room, and looked out my window from the 17<sup>th</sup> story. I could see the CN Tower. I could see their sports complex. I could see the city. It was utterly gorgeous.\n\nTo my surprise, I briefly forgot I was to text Jasmine the moment I got into my room. I pulled out my phone and texted her.\n\nME: In my hotel room in Toronto.\n\nA minute later she responded, as I stared at my phone waiting with anticipation.\n\nJASMINE: Hope the flight went well. Are you hungry?\n\nI thought that was an odd question.\n\nME: It went great. Even arrived ahead of schedule. I am a little peckish.\n\nJASMINE: So you're ready for your first cock?\n\nMy eyes went wide. Now the question made more sense!\n\nI'd been anticipating this for a while, but suddenly it was looking very, very real.\n\nA mixture of emotions coursed through me.\n\nExcitement.\n\nFear.\n\nTrepidation.\n\nIntrigue.\n\nI responded without giving it a lot of thought... just obeying blindly.\n\nME: No time like the present!\n\nJASMINE: There is a small adult theatre on Yonge Street. It has a dozen seats each in a few different theatres. It also has some glory holes. I'm certain you can find a willing top to slide inside that eager cock sucking mouth of yours.\n\nWow!\n\nIt was suddenly now or never.\n\nIt was suddenly no longer a fantasy... reality was looming right before me.\n\nME: WOW! I don't know what to say!\n\nJASMINE: Yes, Mistress is the correct response.\n\nME: Right, sorry. Yes, Mistress. I will obey.\n\nJASMINE: I'll text you the address. Be sure to relax, be confident, and just let your inner submissive take control.\n\nME: Okay.",
        "JASMINE: Have fun.\n\nShe texted me the address. I checked it on my phone and saw it was a fifteen-minute walk.\n\nStill wearing my panties and pantyhose, I stowed the room key in my wallet, and went for a stroll.\n\nFor fifteen minutes I pondered what I was about to do.\n\nFifteen minutes also to admire the beauty of downtown Toronto.\n\nFifteen minutes to observe the diversity of people.\n\nBut then suddenly, I was there.\n\nI paused.\n\nThis was it.\n\nShowtime.\n\nIt was one thing to fantasize about this.\n\nIt was a very different thing to do it.\n\nI considered turning around and leaving, but my need to obey Jasmine, my desire to explore this feminine side of myself, and the curiosity of an adult theatre where most of the action wasn't on the screen, had me opening a door, going up a flight of stairs, and then needing to make another decision.\n\nTo my surprise, there were two turnstiles. One for gay films and one for straight films.\n\nI had no idea which to go through, and each had a slot to put money in.\n\nAfter some thought, I chose the straight one, as it seemed a little... well... less... gay.\n\nI put the coins into the slot and walked in. I wandered around and found doors for movies, and then a hallway. Curious, I walked past the two movies and walked down the hallway to see six small rooms with doors. Four were open, two closed. In one that was open, I saw a small television. Clearly these were rooms for jerking off, or perhaps having sex. I also noticed there was a hole in the wall between the room and the hallway.\n\nI then walked back to the two movie rooms, took a deep breath, and walked into one.\n\nA movie was playing on a large screen television, not an actual movie screen like I'd imagined. Two men were sitting on opposite sides of the room watching a girl on the screen sucking cock. I stood in the back and watched for a moment, before I walked out and checked out the second room. It had the same setup, a dozen chairs on each side, and this one had four men. Two pairs of men were each side by side on opposite sides, and as I got closer I saw a younger man was stroking an older man's dick on one side, while an older man leaned down to suck a younger man's dick on the other side. I glanced up at the screen to see a brunette getting spit-roasted.\n\nI don't know why, but I took a seat right across from the older man currently sucking cock, and the other two men were directly behind me.\n\nI attempted to watch the movie, the brunette was hot, but my eyes kept glancing over to the grey-haired man who was sucking dick. When the younger guy being sucked glanced my way, I hurriedly turned back to the film.\n\nThe door opened and closed, but I didn't look back, since I wasn't sure what the etiquette was... although staring at a blow job was probably rude.\n\nI glanced over a few more times, my cock hardening, as I couldn't help but wonder what it would be like to suck a cock.\n\n\"First time here?\" a voice from immediately behind me asked.\n\nMy eyes went wide while I nodded, \"Yeah.\"\n\n\"Come sit with me,\" the voice said.\n\nI turned around and found the two men who were behind me were gone, but a guy around my own age was sitting there wearing a suit. \"Um, okay,\" I said, as I got up, glanced at the blow job again, and went to sit beside the new man.\n\n\"Hi, I'm Mike,\" he said, extending his hand.\n\n\"Bill,\" I said, shaking his hand, which seemed strange in such a location.\n\n\"You from here?\" he asked.\n\n\"No, New Jersey,\" I said.\n\n\"Explains the accent,\" he said.\n\n\"Yeah, I just arrived here today.\"\n\n\"I see,\" he nodded. \"Top or bottom?\" he asked.\n\n\"Curious bottom,\" I answered.\n\n\"Have you sucked cock before?\"\n\n\"No.\"\n\n\"Want to see mine?\" he asked.\n\n\"Yeah,\" I said, really excited to see his dick.\n\n\"Pull yours out too,\" he said, as he fished his cock out.\n\n\"Okay,\" I nodded, as his cock was suddenly free and looked to be about seven inches, \"but I'm wearing pantyhose.\"\n\n\"Oh, interesting,\" he said without judging. \"Just pull your pants down, then.\"\n\n\"Okay,\" I said, doing as he instructed.\n\n\"Nice,\" he said, as he moved his hand to my hard cock and rubbed it over my panties and pantyhose. \"Go ahead, you can stroke mine.\"\n\n\"Okay,\" I repeated in a daze. I had imagined sucking cock, oddly I hadn't imagined stroking one, or having mine stroked.\n\n\"Get me nice and hard,\" he said, as I wrapped my hand around the first dick ever that wasn't my own. It was awkward, sitting side by side as we were, but also exciting. It was so hard. A couple inches longer than mine, and also thicker.\n\n\"You have a nice dick,\" I said, as I slowly stroked it.\n\n\"Thanks,\" he said.\n\nFor a couple minutes I slowly stroked him to complete hardness, he slowly rubbed my cock through my pantyhose. Then after that time while I spent more time admiring his cock than watching the brunette getting double penetrated, he invited/ordered, as he took his hand off my cock and placed it on my head. \"Go ahead Bill, bend down and suck my cock.\"\n\n\"Here?\" I asked, as I looked around and saw the older guy was still sucking the younger one.\n\n\"Yes,\" he said, \"here is the perfect place,\" as he guided me towards his cock.\n\nA rush of adrenaline coursed through me as my mouth was summoned to his dick. I mindlessly opened up and took his fat cock inside.\n\n\"There you go,\" he groaned, as I wrapped my mouth around his dick.\n\nI can't explain it, but just like so many first time cock sucker stories as well as many forums, as soon as I had his dick in my mouth I felt... at home. Alive. Excited. It felt like this was what I'd always been supposed to do. Suck dick.\n\nI began to bob slowly, getting used to having a dick in my mouth, although bent sideways was awkward.\n\n\"Oh yeah, there you go,\" he groaned. \"Nice and slow.\"\n\n\"Mmmmmmmm,\" I responded, wanting to let him know I acknowledged his words, but didn't want to stop sucking his cock.\n\n\"Such a natural,\" he said, as I continued slowly bobbing. After a couple minutes, he said, \"Why don't you get down on your knees? It'll be a lot more comfortable than the position you're in now.\"\n\n\"Good idea,\" I said, quickly sliding down off the chair and onto my knees, allowing my side to stretch, which had begun to hurt while I was sucking the way I had been.\n\nI moved between his legs and took his cock back in my mouth. This position felt so much more comfortable... and natural. Like this was the position I was meant to be in.\n\n\"Oh yeah, suck my dick,\" he groaned, as I resumed bobbing, going a little faster in this far more comfortable position.\n\nThis was even better. It felt so natural... so good... as if this were why I was born: to suck cock. I know it sounds ludicrous, but that's what I felt. I brought my hand to my pantyhose-covered cock and began rubbing as I bobbed.\n\n\"Oh yeah Bill, you're a natural cock sucker,\" he moaned, as I was taking over two-thirds of his cock into my mouth. Being called a cock sucker made my cock flinch... since it was a term that always turned me on when I read it, and especially when I listened to sexy female voices calling me one while I was watching those hypno-sissy videos.\n\nI moaned on his cock in response, suddenly wondering what this cock was going to feel like in my mouth when he came. I wondered what it would feel like to have his cum shooting into my mouth. I wondered what it would taste like. Well... I was about to find out!\n\n\"That's it, take more and more of me,\" he groaned softly.\n\nAs odd as it sounds, I was in a self-contained, all-encompassing zone. All that mattered was his cock. I continued bobbing for a couple more minutes until he warned, or perhaps it's better to say announced, \"Here it comes, cock sucker!\"\n\nI had to have that load! That cum! I bobbed faster, and a dozen bobs later I heard him grunt, and I felt his cum shoot into my mouth, slide down my throat, and warm my belly, even as my cock twitched and a rush of adrenaline coursed through me.\n\n\"Yeah,\" he groaned, as I swallowed every drop.\n\nOnce there was no more cum left, I wasn't sure what to do next, so I just kept slowly sucking him.\n\n\"That was great,\" he said, and I backed off.\n\n\"Thanks,\" I said, unsure of what else to say.\n\n\"You're a natural,\" he said, beaming down at me.\n\n\"Thanks,\" I said again.\n\n\"I need to go,\" he said.\n\n\"Oh yeah,\" I nodded, standing up extremely awkwardly, reminded my pants were around my ankles.\n\n\"Nice to meet you, Bill,\" he said, as he got up and headed out.\n\nI stood there, realizing no one else remained in the small theatre.\n\nI pulled my pants up and headed out. I thought about going to the other theatre, the one that wasn't 'straight', and I also considered visiting the gloryhole, but my head was spinning from what I'd already accomplished. So I headed out and strolled back to the hotel with the taste of another man's cum lingering in my mouth.\n\n.....\n\nBack at my hotel, I texted Jasmine a rather lengthy report.\n\nME: Mistress Jasmine. I went to the theatre. I ended up sucking my first cock. Swallowing my first load. Was called a cock sucker for the first time. I have never felt more alive than I did when I was on my knees with a cock in my mouth.\n\nME: It was exhilarating; it was completely intoxicating; it was life changing. Okay... enough hyperbole. Simply put: thank you. Eagerly waiting to know what to do next. Pet Cock Sucker Brittany\n\nI got undressed, except for the pantyhose and slightly stained pink panties from my own pre-cum and sat in bed with my laptop open and clicking on one of my favourite hypno sissy scenes.\n\nI was only a couple minutes into it when I received a text.\n\nI grabbed it, and was disappointed to see it was only from Emma, which made me shake my head at my own pathetic-ness (I'm not sure that's a word, but it fits for this).\n\nEMMA: Settled into the hotel yet? How was your flight?\n\nI decided to phone her, and we chatted for a few minutes while I watched a hypno sissy video on mute that focused on sucking cock. God, there were just so many different sizes, shapes and colours of cock. Pussy was pussy... it all looked almost identical to me; but cock... no two were alike.\n\nAnd not just their size (although the length can vary so much), or girth (thin cocks, fat cocks), or shape (straight, curved up, curved down, even curved sideways) or colour (black, white, and a variety of other shades), but also the way cum explodes out of a cock (like a rocket, in streams, or even just weakly oozing out).\n\nJust as we were finishing up, I got a text. I assumed it was from Jasmine. I resisted looking at it until I hung up with my wife after we both said 'I love you'.\n\nI checked the text. Yes! It was from Jasmine.\n\nJASMINE: Two choices for tomorrow. One... more cock sucking (a minimum of three); two... a visit to a salon to femme you up. Of course, you can choose number two first, and then do number one, or I suppose you could get your fill of cock first and then get feminized. I need to know if you wish to include option two, since I have tentatively booked you at a spa I used to go to.\n\nI didn't even hesitate, even though I likely should have, but the hypno sissy videos I had been watching only enhanced my subconscious decision to choose option two.\n\nME: Mistress Jasmine although I definitely want to suck more cock, the idea of being feminized is too big a temptation to resist. Please tell me when and where.\n\nJASMINE: 5 o' clock. I'll send the address in the morning. Be sure to be wearing pantyhose throughout all your meetings. Good night, sissy.\n\nME: Thank you, Mistress. I will obey. Have a good night.\n\nJASMINE: PS: No touching your clitty. If you're going to be my submissive pet, you must learn self-discipline.\n\nME: Of course not, Mistress.\n\nI resisted watched more sissy videos, since they would only get me excited. So instead I watched sports highlights and went to bed... excited and curious about tomorrow.\n\n.....\n\nSurprisingly, the next day flew by quickly... and I ended up at a salon just a couple blocks from the scene of last night's sordid affair. (Well, I guess a proper sordid affair would include passionate kissing and embracing instead of just a blowjob, but you know what I mean.)\n\nBeing in an unfamiliar city, an unfamiliar country, made this appointment a lot less stressful. I walked in and said simply, \"I have a five o'clock appointment.\" Presumably they sissified guys all the time, since the receptionist didn't even raise an eyebrow.\n\nShe took my information, then led me down the hallway to a room. She said, \"Get completely naked and climb under the blanket.\"\n\n\"Yes, ma'am,\" I replied, even though she was substantially younger than I.\n\nI got undressed, and lay on the massage table. I waited a few minutes before, to my surprise, a man walked in. He asked, \"So you want the full monty?\"\n\n\"Yes please,\" I nodded, Jasmine having explained what was about to happen to me.\n\n\"All right,\" he said, as he pulled the thin blanket off of me. \"First, I'll wax you.\"\n\n\"Okay,\" I said.\n\n\"Lucky for you, you're not too hairy, but this will still hurt,\" he warned, as he went to a table.\n\n\"I understand,\" I said, having seen 40-Year-Old Virgin... although other than my legs, I didn't have a lot of hair on my chest or anywhere else.\n\nHe returned and applied warm wax to my back, ass, and to my surprise, some oozing way down between my ass cheeks, and my legs.\n\nAfter waiting a few minutes, he said, as he put stuff on my back, \"On three.\"\n\n\"Okay,\" I said.\n\nThen for the next five minutes I suffered some serious pain. It made me wonder why women did this. It also made me wonder what childbirth could possibly be like. Women... they have it a lot tougher than we men, if I can still call myself one.\n\nHe even did between my ass cheeks, which I discovered was a pretty sensitive area... as was the back of my legs... which were still burning five minutes after they were waxed and yanked.\n\n\"Roll over,\" he ordered.\n\nIt was then I realized I was only halfway done... and he hadn't even done my scrotal area... which was rather hairy.\n\nHe waxed me again.\n\nHe waited a couple of minutes.\n\nHe did my chest, which thankfully didn't hurt much since I didn't have much hair... but the area around my nipples, an area where I was always sensitive, hurt like hell.\n\nHe did my legs and then finally my groin area. He said, now holding a razor, \"Don't move.\"\n\n'Okay,\" I repeated, praying I didn't twitch or get an itch.\n\nHe took fifteen minutes, before he had made me as bald as the day I was born. I looked down and was surprised how a shaved groin made my cock look substantially larger.\n\nHe then went to the counter, grabbed some lotion and rubbed it all over my chest, balls and legs. \"Flip back over,\" he ordered.\n\nI obeyed, and he lotioned up my back, ass and legs. He then said, \"Grab a robe and follow me.\"\n\n\"Okay,\" I said, the lotion soothing my body and cooling the earlier burn.\n\nI followed him out of the room, down the hallway, and into a room where three women were getting their nails done. \"Go to station five,\" he said.\n\n\"Okay,\" I said, although I felt self-conscious because I was about to get my nails done while three women wondered about me.\n\nI sheepishly went to a seat between two older women, and sat down. The guy left, and a minute later an older Asian woman knelt before me and guided my feet into warm water.\n\nI won't bore you with the details of the next thirty minutes, but I received a pedicure and manicure. My fingernails and toenails were then painted ruby red. Once done, I was led back to another room with a wardrobe and a person I instantly could tell was a cross-dresser in his-her early twenties, I would guess, was waiting for me.\n\n\"Hi, ready to be made beautiful?\"\n\n\"I am,\" I said, instantly feeling comfortable around this person.\n\n\"Well, let's have some fun then,\" they said (I think that's an acceptable pronoun). \"I'm Janet, by the way.\"\n\n\"I can't wait,\" I said, excited to look half as good as Janet did, noticing his Adam's Apple, confirming my assumptions.\n\nShe took my hand, I decided if she was called Janet, I should accept her as a girl in this adventure, and she led me to some outfits\n\nAgain, I won't bore you, but in thirty minutes, I had acquired some extra-large silicone tits (which were so exciting), a long blonde wig that looked so real, sexy lace black panties, three-inch heels (I know, but I didn't want to break my inexperienced ankles), a black garter-belt and stockings, all topped off with a sexy red gown.\n\n\"Okay,\" she said. \"Now let's get your face done.\"\n\nTwenty minutes later I'd been painted with mascara, red lipstick, blush, eye shadow and more.\n\n\"Ready to see yourself?\" she asked, there being no mirrors in this room... trust me, I'd looked.\n\nShe pulled out a phone and said, \"I need to send a picture to Jasmine.\"\n\n\"You know Jasmine?\" I asked.\n\n\"She's the one who helped me discover my true self,\" she said.\n\n\"No way,\" I said.\n\n\"Yeah, that's' why it's so much fun for me to help you,\" she said, taking my hand again, just us girls together. \"Come with me.\"\n\nI wobbled a bit, even these modest heels were a little awkward to walk in, as I followed her.\n\nThen I caught my first sight of her... I mean me.\n\n\"Wow!\" I said, looking at myself in the mirror... but not recognizing myself.\n\n\"Yeah, you look hot,\" she said.\n\n\"You think so?\" I asked, thinking I did look quite pretty....\n\n\"Yeah, I definitely think so,\" she nodded. \"Want to go to a club and show off your new self?\"\n\n\"With you?\" I asked, feeling an odd connection with her.\n\n\"Sure,\" she said. \"Plus, if you're feeling ambitious, it's amateur night.\"\n\n\"Amateur night?\" I asked.\n\n\"Yes, we're going to a drag queen club,\" Janet said, \"And I bet you'd be very popular onstage.\"\n\n\"Oh my,\" I said, my cock flinching, although I also felt instant anxiety.\n\n\"You don't have to,\" she said. \"But you will be encouraged.\"\n\n\"Let's just go and check it out, and then see how I feel,\" I said, before I could change my mind.\n\n\"Sure,\" she said, taking my hand and leading me out. I paid for the two and a half hour makeover, I won't tell you how much, and when Emma saw the credit card I'd have some explaining to do, but at the moment, that was the last thing on my mind.\n\nTonight I wasn't Bill, but I didn't know what name I should use instead. As we walked outside onto the busy streets of Toronto, I asked, \"Would you please name me?\"\n\n\"Pardon?\" Janet asked, still holding my hand, I realized... and oddly, I liked it.\n\n\"I need a stage name,\" I said.\n\n\"Oh, yes,\" she said, stopping and looking me over. \"Hmmmmmmmmmmm.\"\n\n\"I know, there's no simple feminine version of Bill,\" I said. \"Except for Billina of course, but she wasn't a person, but a hen in Ozma of Oz, the third Oz book. And I don't want to be named for a talking chicken.\"\n\n\"No, that wouldn't work,\" she agreed.\n\n\"And I don't feel like Brittany tonight, even though that's the name I've been using.\"\n\n\"Agreed, you're not a Brittany,\" she said. \"No, you're someone else entirely.\"\n\nI took that as a compliment, as I asked, \"So who am I?\"\n\n\"Give me a minute to think,\" she said, really putting some thought into my new feminine persona.\n\n\"Okay,\" I said, as we resumed walking hand in hand.\n\nAbout a minute later, as we stopped at a Don't Walk light, she said, \"In honour of Jasmine, as well as for myself, your girlfriend du jour, I think your new name is....\"\n\nShe paused for dramatic effect, which was killing me, \"You... are... definitely... a... Janelle.\"\n\n\"Janelle,\" I said, savouring the name as it rolled off my tongue.\n\n\"Yes, it's perfect,\" Janet said.",
        "\"Yes, yes, it certainly is,\" I agreed as the light changed and we crossed the street, me with a little more spring in my heels with my new sexy name.\n\nA minute later we were walking into a smallish bar about four blocks away from where we'd started.\n\n\"Janet!\" the bouncer at the door greeted.\n\n\"Hey, sweet stuff,\" Janet said, \"this is my new friend Janelle. Janelle, this is Baker.\"\n\n\"Hi, Baker,\" I smiled awkwardly, feeling a little self-conscious dressed as a woman.\n\n\"You're going to be very popular,\" Baker said, as he literally checked me out, head to toe, and especially my boobs.\n\n\"I'm trying to talk her into competing tonight,\" Janet said.\n\n\"Oh, you definitely need to,\" Baker urged me. \"You're absolutely delicious!\"\n\n\"I am?\" I asked, surprised to receive such a compliment.\n\n\"Yeah, you're fucking hot,\" Janet said, as she led me into the bar.\n\n\"This is crazy,\" I said, as we walked into a smallish bar, albeit a pretty packed one. There were other crossdressers, there were men, there were women... and often I couldn't tell which gender someone had started out as.\n\n\"Oh, you wait,\" Janet said, as she gave my hand a squeeze, as her phone buzzed. She looked at it and said, \"The discussion is over. You're definitely competing tonight.\"\n\n\"I am?\" I repeated, sounding like a confused parrot.\n\n\"Mistress Jasmine says you are,\" Janet said, showing me her phone.\n\nI read the message: Tell Janelle I expect her to compete tonight.\n\n\"Well, I guess I'm competing, then,\" I said with an awkward chuckle, not even sure what I was competing in.\n\n\"You'll have a blast,\" Janet said, before adding with wicked foreshadowing, \"literally.\"\n\nDuring the next hour I met a bunch of people, got my ass grabbed twice, and had supper. I then went to the bathroom to apply some more lipstick, at Janet's suggestion. In the bathroom, I took a piss (which was more difficult than I'd expected in a long dress), and was washing my hands when a guy walked in.\n\n\"Hey, sexy,\" he said.\n\nI looked up through the mirror and saw a good-looking guy in his early twenties.\n\n\"Hi,\" I said, not sure what else to say.\n\n\"Want some dessert?\" he asked, as he came up to me and squeezed my ass.\n\n\"Um, I, well,\" I said, assuming he wanted me to suck his cock.\n\n\"Come on,\" he said, taking my hand and leading me to a bathroom stall.\n\nI mindlessly followed, curious, and a little excited to suck my second cock ever.\n\nHe closed the door, and I wordlessly dropped to my knees and unzipped his jeans.\n\n\"I like a girl who knows what she wants and goes for it,\" he said, as I pulled out his smallish cock.\n\nI didn't say anything as I leaned forward and took his flaccid cock in my mouth.\n\n\"Oh yeah, you were really hungry,\" he groaned, as his soft cock began to harden in my mouth... which was a new... and exciting... feeling.\n\n\"Mmmmmm,\" I moaned on his cock, wanting to let him know I was hungry.\n\n\"Yes, that's it you sexy slut, get me nice and hard,\" he moaned, his calling me a sexy slut making my cock flinch in my panties.\n\nOnce it was hard, although just five inches, I began to bob.\n\n\"Oh yeah, take it all, you hot slut,\" he moaned.\n\nFeeling the natural rush of being on my knees with a cock in my mouth, I began to bob faster, my submissive cock sucking nature taking control.\n\n\"Shit, I'm going to bust a nut in that pretty mouth,\" he groaned after just a minute of deep throat (sorta) cock sucking.\n\nI bobbed even faster as he grunted and spewed his load in my mouth. \"Fuck!\"\n\nI hungrily swallowed it all, not slowing down, as his warm load slid down my throat.\n\n\"Oh fuck,\" he said weakly, as I extracted every drop of the cum from his balls.\n\nI slowed down and nursed his cock for another minute, before he pulled out and said, \"Thanks, that was great.\"\n\n\"Agreed,\" I said, as he pulled up his underwear and pants.\n\nHe headed out, and I noticed there was a hole in the side of the stall. I began to get up, when a black cock came through the hole, not massive like in the porn movies, but bigger than the last one by a good two plus inches.\n\nI closed the stall door, moved a couple of feet, and took the thicker cock in my hands.\n\n\"Hurry up,\" a guy said gruffly. \"I don't have a lot of time.\"\n\n\"Yes, sir,\" I said, even though I had no idea how old the guy attached to this big dick was.\n\n\"Get sucking,\" he ordered, his cock already semi-hard.\n\nI obeyed, taking his cock into my mouth and slowly bobbing, getting it completely hard.\n\n\"That's it, faggot,\" he groaned, which made my cock flinch again. Sissy, slut, sexy, cock sucker, faggot... a variety of terms that all excited me. I wanted to live up to all those nasty terms.\n\nOnce hard, I began bobbing quickly, taking five of his seven plus inches in my mouth.\n\n\"Oh yeah, cock sucker,\" he moaned. \"Suck my black dick.\"\n\nUnlike many guys who were obsessed with BBC, at least according to online stories, I was discovering I loved all cocks. Big... small; white... black... whatever colour. Cock was cock. It was clear to me after sucking just three different ones, that my personal thrill came from being on my knees sucking cock... from making men moan... from making them cum... size didn't matter... I just wanted as much cock as I could possibly get.\n\nFor three or four minutes, maybe even longer, I sucked, eventually taking almost his entire cock in my mouth; he growled, \"Don't you dare slow down, faggot.\"\n\nI had no intention of doing so. Truth was, sucking cock was becoming the ultimate thrill... getting a guy off was more of an adrenaline rush than scoring the winning goal in a hockey game (which I had done). It was becoming my ultimate rush.\n\nAs pathetic as it may sound, nothing had given me more pleasure than my experiences this day. Becoming Janelle... exploring my feminine side... becoming a slut... being on my knees... becoming the cock sucker I was born to be!\n\n\"Swallow it all, faggot,\" the black stranger said, as a massive load, the biggest of the three I'd swallowed so far, exploded into my mouth like big cannon blasts, that seemed actually to pelt into the back of my throat.\n\nI kept sucking the big cock until he pulled back out, and disappeared without another word. I waited a minute, before I stood up and walked out of the stall. The bathroom was empty. I redid my lipstick and returned to Janet, who was chatting with a black man. Was he the one I sucked? I paused for a moment hoping he'd walk away, but he didn't... so I walked over anyway.\n\n\"You were gone for a while,\" Janet observed.\n\n\"Yeah, Um,\" I began.\n\nShe gave me a look, informing me she knew what likely had happened and said, \"No worries, sexy thang. Janelle, this is Jake, he's a lawyer.\"\n\n\"Hi Jake,\" I said, thinking I'd likely just sucked his dick.\n\n\"Hey, Janelle, you're a pretty thing,\" he said, taking my hand, and I learned he wasn't the one... his voice was mellower.\n\n\"Thank you,\" I said, wondering what his dick looked like.\n\n\"Well, maybe we'll chat later,\" he said.\n\n\"Sure,\" I said, feeling a strange, giddy excitement.\n\nAfter he left, Janet said, \"I think he likes you.\"\n\n\"This is so wild,\" I said, the aftertaste of cum still lingering.\n\n\"Did you get some of that free mouthwash in the bathroom?\" Janet asked.\n\n\"Yeah,\" I said sheepishly, then added, kind of needing to tell someone, \"two doses, actually.\"\n\n\"You lucky little slut,\" Janet said.\n\n\"It all happened so fast,\" I said.\n\n\"It can do that,\" she smiled. After a moment, she asked, \"Ready to continue the night of your life?\"\n\n\"Well, I'm already two cocks in,\" I joked.\n\n\"You may be two cocks full, pretty soon,\" she said.\n\n\"R-r-really?\" I stammered, the idea of sucking more cocks exciting, but the idea of getting ass fucked a little nerve-wracking.\n\n\"Yeah, it's always a possibility,\" she said. \"Truth be told, there isn't anything more fulfilling than getting spit-roasted.\"\n\n\"I've never had a dick... or anything at all... back there,\" I worried.\n\nShe smiled, \"Oh, once you've had a dick in that pussy of yours, you'll be addicted.\"\n\n\"That's what happened as soon as I sucked my first cock,\" I said, already craving another dick.\n\n\"Yeah,\" Janet smiled reminiscently. \"I still remember my first cock.\"\n\n\"Long time ago?\" I asked, curious to learn about another guy's exploration of his sexuality. Or rather her sexuality. I think.\n\n\"College,\" she nodded. \"My roommate. One night we were drunk, horny, and well, one of us became a bottom, the other a top.\"\n\n\"I'm guessing you were the bottom,\" I smiled.\n\n\"Yeah,\" she nodded. \"I got my pussy fucked before I ever sucked a cock.\"\n\n\"That's unusual,\" I said.\n\n\"Yeah, I've never met anyone else who started that way around,\" she said.\n\n\"Well, at least you had a source of regular cock,\" I said. \"That's what I need, especially now that I've discovered just how much I love it.\"\n\n\"Yeah, after that night, I sucked his cock and got fucked pretty much every day, and sometimes multiple times,\" she said, then laughed, \"but now he's married and in politics.\"\n\n\"Figures,\" I said.\n\n\"Yeah, he still fucks me on occasion.\"\n\n\"Really?\"\n\n\"Yeah, I'm a better cock sucker and a better fuck than his wife,\" Janet said. \"All my married men tell me that.\"\n\nI smiled, \"I bet you are.\"\n\n\"Oh... I am,\" she assured me.\n\n\"Anyone interested in competing tonight, please come to the stage,\" an amplified male voice announced.\n\n\"Fate beckons you,\" Janet said.\n\n\"I'm still not sure about this,\" I said, excitement and trepidation swirling inside me.\n\n\"No worries, our Mistress Jasmine has already decided for you.\"\n\n\"Right,\" I said, shaking my head at how I was implicitly obeying a stranger I only knew online ... a stranger I trusted completely.\n\n\"Get going, you sexy slut,\" Janet ordered.\n\n\"Fuck, this is getting crazy,\" I said.\n\n\"Oh, the craziness is just beginning,\" Janet smiled, as I headed to the stage.\n\nI reached the stage, and there were two other 'girls' there. After a couple minutes the stocky man, tattoos all over, asked, \"First time here?\"\n\n\"Yeah, is it that obvious?\" I asked.\n\n\"I'm here every day, and think I'd remember a beauty like you,\" he said, looking me over.\n\n\"Thanks, I'm flattered,\" I said.\n\n\"So, tonight is amateur night,\" he said. \"First round is doing a dance onstage.\"\n\n\"Oh,\" I said.\n\n\"Second round is an auction,\" he continued.\n\n\"Auction?\" I asked.\n\n\"Yes, people bid on you, and you're the winner's date for the rest of the night,\" he said. \"But that's optional; you'd need to agree to it.\"\n\n\"Date?\" I asked, repeating everything he said.\n\n\"Yeah,\" Janet spoke up from behind me. \"You're their little fuck toy for the rest of the night. They don't buy you dinner, but they do buy you breakfast.\"\n\n\"Oh,\" I said.\n\n\"All the money goes to a charity,\" Janet added.\n\n\"Really?\" I asked.\n\n\"Yes, to the LGTBQ society,\" the guy said. No way he could be gay, was there? He was so manly. He looked more like a biker in a gang.\n\n\"Okay, let's do both,\" I said, deciding just to allow fate to decide my night.\n\n\"Okay, we'll start in fifteen minutes,\" he said.\n\n\"Okay,\" I said.\n\n\"Do you have a favourite song to dance to?\"\n\n\"No idea,\" I said.\n\n\"Definitely 'I Will Survive',\" Janet decided for me.\n\n\"That is a good song,\" I said.\n\n\"Great,\" the guy said, before adding, \"why don't you come backstage with me for some practice? Janet, can you sign up any others?\"\n\n\"Anything for you, Babe,\" Janet said, before calling out to my back, \"Have fun, Janelle.\"\n\nI followed the guy backstage and he said, as he pushed me to my knees as soon as we were inside a small dressing room, \"You're fucking hot.\"\n\n\"Thanks,\" I said, my cock flinching at his rugged dominance, as my hands automatically went to his pants.\n\n\"I usually don't do this before a show, but your lips were made to suck cock,\" he complimented.\n\n\"I just sucked my first cock yesterday, so I may not be too good,\" I demurred, as I fished out his decent sized six-plus inch cock.\n\n\"Really?\" he said, looking genuinely surprised.\n\n\"Yeah,\" I admitted, \"curiosity finally got to me.\"\n\n\"Then you just open your mouth, and I'll do the rest,\" he said, as he slid his cock into my mouth, grabbed the sides of my head and began fucking my face.\n\nThis was so different than my first three cocks... I wasn't sucking his dick... he was fucking my mouth. Although different, it was equally exciting... I was simply being used.\n\n\"Focus on breathing through your nose,\" he advised me after I'd slightly gagged a couple of times.\n\nI did as I was told, wanting to be good for him, wanting to be a good cock slut.\n\nAfter a couple minutes, his tool long enough I actually was being deep throated, his balls actually bouncing off my chin, and my getting used to his cock slamming into me, he pulled out, pulled me up, spun me around, hiked up my dress, yanked my panties down to my ankles, thus freeing my dick... sorry, my clitty... for the first time tonight... and said, \"I've got to have this. Ever been fucked?\"\n\n\"N-n-no,\" I stammered.\n\n\"Well, that's about to change,\" he said, as he walked to a table and grabbed what I assumed was lube, and returned.\n\n\"I'm a little nervous,\" I said, even as I remained bent over for him.\n\n\"Don't worry,\" he said, as he really lubed his cock, \"I've never met a sexy thing like you who didn't love a dick in her tight pussy.\"\n\n\"Please, go slowly,\" I said, both scared and excited... expecting pain, but hoping for pleasure, too.\n\n\"I will, but only until you beg to get that cunt really pounded,\" he said. \"And no worries, you'll be begging for it very soon!\"\n\n\"Okay,\" I said, as he moved his cock between my ass cheeks.\n\n\"Remember to breathe,\" he said. \"In fact, concentrate on doing that.\"\n\n\"Okaaaaaaaaaaaaaaaaay,\" I said, as he pushed his cock up to my asshole and it slid inside, creating instant intense pain burning through me.\n\n\"Oh yeah, such a tight fucking pussy,\" he groaned, as he began fucking my ass. And as he'd promised, he went very slowly at first.\n\nThe feeling was so strange. Yes... painful. Yet I felt so full. And my cock twitched with each thrust. Yet even as the pain burned... I also felt a strange, surreal... sensation.\n\n\"Oh, God,\" I whimpered.\n\n\"You're going to love being a slut for cock,\" he promised as he fucked me... still slowly, thank goodness.\n\n\"I'm so full,\" I said.\n\n\"Yeah? Wait until you get a ten-inch dick spelunking in this pussy.\"\n\n\"I can't fathom,\" I said, and I couldn't. No way could I take even a tenth of an inch more.\n\n\"Your pussy is made to take big cocks,\" he said, as he began fucking me faster but true to his word, only a little faster.\n\n\"You're so big,\" I whimpered, the pain still burning, yet a subtle pleasure was beginning to rise.\n\n\"I'm only average,\" he denied. \"Well, a little above average.\"\n\nHe fucked me for a couple more minutes, every stroke gradually increasing the pleasure, which conversely numbed the pain. And although it felt so weird, it also began to feel so natural. Like I was meant to have a dick in my ass... sorry... my pussy.\n\nThen I begged, \"Harder, fuck me harder.\"\n\n\"Oh yeah, you little slut, you love cock now, don't you?\" he said, as he grabbed my hips and began really fucking me.\n\n\"Oh yes, I'm a slut, a slut for cock,\" I declared, as I placed my hands firmly on the wall a little lower for better balance, as he really began to slam into me.\n\n\"Oh yeah, such a tight cunt,\" he groaned.\n\n\"Come in my cunt, fill my cunt with your big load,\" I begged mindlessly, now wanting to feel what it felt like to have a load filling me.\n\n\"Oh, you want me to breed you?\" he asked, as he really drilled me.\n\n\"Yesssss,\" I moaned, my cock throbbing, the pain only a memory, as pleasure consumed me in a way I'd never experienced before... his dick really rubbing my prostate. \"I want it so bad.\"\n\n\"You love my cock now, don't you?\" he said, filling me as deep as he possibly could.\n\n\"Oh yes, I love your big cock in my pussy,\" I moaned, wondering if I could come from getting ass fucked... I felt like I could come at any moment!\n\n\"I'm going to fill you with so much cum,\" he promised, his breathing signalling he was close.\n\n\"Fuck me... breed me... fill me,\" I babbled, so consumed with intense pleasure I'd do anything to get fucked... to get 'bred'.\n\n\"Oh, fuck, yessssss,\" he grunted a few strokes later.\n\n\"Oh, fuck,\" I moaned as the moment I felt his warm cum fill my ass, I too came, spewing my load all over the wall.\n\n\"Janelle, you really are a slut,\" he said, as he kept pumping, now sloppily, in my cum-filled ass.\n\n\"Fuck,\" I moaned, so overwhelmed with pleasure.\n\nA minute later he pulled out and said, \"You're a great fuck.\"\n\n\"Thanks, that was amazing,\" I said, feeling a bit of cum leaking out of my ass.\n\n\"Don't move,\" he said, putting his dick away. \"I'll send Janet in here to clean you up.\"\n\n\"Okay,\" I said, not sure if I even could move yet.\n\nI stood there, still bent over and propped against the wall for a couple minutes, until Janet walked in and said brightly, \"Well, that was quick.\"\n\n\"I can't believe I just got fucked,\" I said.\n\nJanet said, \"Oh, it was inevitable. You're so fucking hot and fuckable.\"\n\n\"Well, that goes without saying,\" I joked, as Janet moved behind me, knelt down and started licking my asshole.\n\n\"W-w-what are you doing?\" I stammered.\n\n\"Getting the cum out of your pussy,\" she said, sucking cum out of me... which felt good, but weird.\n\n\"Okay,\" I moaned.\n\nAfter a couple of minutes, Janet stood back up, turned me around and said, \"Okay, we need to make a couple of touch-ups if you're going onstage.\"\n\n\"I may walk bow-legged now,\" I joked.\n\n\"That's okay, just keep dancing,\" she said, as she fixed my makeup.\n\n\"Okay,\" I said, my head spinning, my ass feeling a little empty.\n\n\"Did you like it?\" she asked.\n\n\"I came all over the wall,\" I said.\n\n\"Really?\" she asked, \"without even touching yourself?\" this surprising her.\n\n\"Yeah.\"\n\n\"I've never had that happen to me.\"\n\n\"Really?\"\n\n\"Yeah, you're a special girl,\" she said.\n\n\"Well, that goes without saying,\" I repeated, feeling so comfortable around her.\n\nA few minutes later, \"Ready to strut your sexy stuff?\"\n\n\"Why the fuck not?\"\n\n\"Exactly,\" she said, as 'I Will Survive' began playing.\n\nI took a deep breath as the guy who'd just taken my virginity (I still hadn't learned his name!) announced, \"Ladies, men who want to be ladies, gentlemen, and gentlemen who want to fuck ladies regardless of the nature of their plumbing, we're in for a treat tonight! Coming north of the border from America for her first ever performance, please welcome... Janelle!\"\n\nAs cheering echoed around the smallish room, I walked onto stage and... danced... allowed my inner feminine side to come surging out of me once again... enjoying the clapping, the chanting and the admiration.\n\nAs I did strut my stuff, I knew I was forever changed. I couldn't ever go back to my humdrum boring life. I couldn't pretend today and this week hadn't happened, or that it wasn't going to happen again and again!\n\nI was Janelle, and I was about to be auctioned off to the highest bidder...\n\nEPILOGUE:\n\nFollowing a memorable and long night... and my paramour did indeed buy me breakfast... I spent the rest of the weekend with Janet, having a wonderful time meeting and being fucked by many of her friends.\n\nBut on the flight home, once again wearing pink panties and pantyhose, but externally looking like a regular man, I began worrying. There was that huge fee I'd paid to the beauty salon that Emma would see when she checked our credit card statement; but even before that, she'd have a chance to see that I didn't have any hair on my body below my neck! I couldn't just suddenly start refusing to be naked around her.\n\nAnd then I was so preoccupied with these worries, that I forgot to change out of my panties and pantyhose before entering the house and calling out, \"I'm home, darling!\"",
        "\"I'm in the bedroom,\" she called back.\n\nWhen I reached the bedroom, she was wearing some sexy new lingerie I'd never seen before, and a bright smile. Just as I entered, my phone dinged with a text message.\n\n\"You'll want to read that,\" my wife said, still grinning.\n\nIt was from Jasmine.\n\nPet Slut Janelle,\n\nEmma just texted me you've arrived home, so here are your next orders:\n\nDo whatever she says, just as if it's coming from me. In fact most of it will be from me, although she may embellish my suggestions somewhat. She knows everything, including most of what you did in Toronto. But no worries, all is well. Have fun!\n\nMistress Jasmine\n\nI looked back up at Emma, who by now couldn't contain floods of giggles!\n\n\"Say what?\" I asked, dumbfounded.\n\n\"You'd seemed very preoccupied in the days leading up to your trip to Toronto, so after you left, I did some snooping in your computer and read through all your emails to and from Jasmine. I thought you really should have gone with Option 2, but obviously you were too afraid of how I might react.\n\n\"So, I emailed Jasmine, introduced myself as 'Brittany's' wife, told her I wanted to support your explorations, and asked for her advice. She wrote back, and after making sure I was sincere, she filled me in on all your adventures in Toronto, and gave me some suggestions, which I intend to follow.\n\n\"And the plan for tonight is first I'll help you doll yourself up as that gorgeous and sexy Janelle again (she sent me the pictures of you Janet sent her), and then, dear sissy of mine, you're getting pegged!\"\n\nShe then reached under a pillow and pulled out a ten-inch bright red strap-on and a tube of lube, while my mouth dropped open!\n\nTHE END"
    ],
    "authorname": "silkstockingslover",
    "tags": [
        "sissy",
        "cocksucker",
        "pantyhose",
        "stockings",
        "bbc",
        "first time",
        "silkstockingslover",
        "gay",
        "anal",
        "crossdressing"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/sexual-sissy-awakening"
}
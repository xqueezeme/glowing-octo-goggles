{
    "title": "Parts of Desire Ch. 04",
    "pages": [
        "Ravenna933 edited this story and made some helpful suggestions.\n\n*\n\nDay four in Oman, a Wednesday, dawned with a soft knocking at my door.\n\nI rolled over in bed, still half-asleep, checking the clock. It was about an hour prior to my alarm, and wearily, I got out of bed, walked to the door, and opened it. The hallway was deserted, apart from the back of a hijabi woman, making her way towards the elevator, who turned around when she heard the door open. It was Khadija. She quickly looked around, then bolted back towards my room, letting herself in and slamming the door behind her.\n\n\"Make yourself at home?\" I said sleepily.\n\n\"Were you asleep?\" she asked.\n\n\"Yeah.\"\n\n\"I'm sorry, I didn't mean to wake you.\" Khadija sat on the unmade bed. \"You guys let me sleep last night after we fooled around. I don't mind, it was nice, but I napped for a couple of hours and now I've had all the sleep I can handle. I'll never fall asleep again. Rania went back to bed after morning prayers, but I was up for the day, and I didn't want to bother her by puttering around our room or putting the light on to read. I thought I'd see if you were up, and I tried to knock softly, but apparently it was enough to wake you.\"\n\n\"It's okay\", I said, shaking the cobwebs out of my head.\n\n\"Do you want to go back to bed?\" she asked. \"I can leave if you do.\"\n\n\"I mean... you're here now\", I answered.\n\n\"We could cuddle again\", she suggested. \"I'd really enjoy that.\"\n\n\"Sure, that sounds good.\" I climbed back into bed, savouring the warmth of the spot I'd been sleeping in.\n\n\"Can we...\" she hesitated, still standing. \"Can we cuddle naked?\"\n\nI paused. \"I don't see why not\", I eventually said, with Rania's permission slip from last night still ringing in my ears.\n\nI stripped off my boxers and t-shirt under the covers, tossing them out from underneath as Khadija undressed, removing headscarf and abeya, revealing a set of form-fitting baby blue pyjamas. I watched as she slowly removed the top, letting it ride up her body and holding it in place for a second or two before doing a titty drop, her breasts bouncing away from her top as gravity took over. She then turned around and dropped her shorts and panties all in one, revealing her pussy from the rear as she lingered in that pose for a moment, before turning and slinking into bed with me, curling in and nibbling at my ear and neck. Khadija's body was soft and warm and enveloping.\n\n\"Presumably you know what today's plans are?\" I asked obliviously. In my defense, I was still half-asleep.\n\n\"Of course.\"\n\n\"And you're not going to tell me anything?\"\n\n\"Not a chance\", she cooed.\n\n\"But you do know about Rania's plans with me about her first time?\"\n\n\"She wants you to deflower her tonight? Yeah, I know about it\", Khadija giggled.\n\n\"You're also aware that men don't recharge as fast as women do, and I want to save all my strength for her tonight?\" I continued.\n\n\"I don't necessarily want sex this morning\", she answered reassuringly. \"I just wanted a cuddle, to spend some time with you.\"\n\n\"You could have fooled me.\"\n\nShe sighed. \"Everything about you, about this trip, is turning me on right now. And I'm feeling dangerously uninhibited this week, so I'm sure you can tell exactly how I'm feeling as I'm feeling it. It is liberating like I cannot even begin to describe, feeling like I don't have to hide my sexuality from you. But I really was just bored, and I enjoyed snuggling with a man yesterday and wanted more of it. I felt so safe in your arms.\"\n\n\"I like snuggling with you.\"\n\n\"And I really like teasing you\", she continued. The way you look at me makes me feel sexy. Men don't look at women like that here, partly because that's our culture, and partly because we have to present our frumpiest selves in public.\"\n\n\"That makes sense\", I responded. \"You and Rania are making me feel like a sex god so far on this trip. It is totally not what I'm used to, but I'm really enjoying it.\"\n\n\"I'm fine with whatever happens this morning\", Khadija said happily. \"Rania told me she gave you permission to fool around with me. But I'm still obviously going to respect your boundaries.\"\n\nWe lay there for a few minutes, the noise of the air conditioner the only sound. I focused on Khadija's slow breathing, feeling her soft, warm skin against mine, our legs entwined, the firm lusciousness of her breast against my chest.\n\n\"How was I yesterday?\" Khadija finally broke the silence.\n\n\"It was a lot of fun\", I answered.\n\n\"I know it was, but how was I?\", she prodded.\n\nYou were an enthusiastic, uninhibited lover who was excellent at all of the things you'd have any understanding of how to do, but who clearly has never seen or touched a penis before\", I said honestly. \"No one knows what to do with the opposite sex their first time; I was completely useless with a vagina once. I didn't even know what a clit was, let alone how to find it.\"\n\n\"Clearly whoever taught you did a good job\", she laughed. \"Maybe you can teach me what to do this week sometime. You know, when you're not fucking my best friend senseless.\"\n\n\"I haven't forgotten that I also owe you a masturbation show\", I remembered. \"My obligations are starting to pile up. Maybe I should stay another week.\"\n\n\"You should stay forever\", she cooed. Her hand had started exploring up and down my chest.\n\n\"Is this dangerous?\" I asked her.\n\n\"Maybe.\" She leaned in and kissed me as her hand drifted onto my cock, grasping it gently and starting to touch. I started getting hard, and I felt her experimenting with various touches on my penis as it grew and stiffened.\n\n\"That is seriously cool how that does that\", she said, awestruck.\n\n\"If you're going to touch me anyway, I may as well show you what to do\", I said.\n\n\"I know you can't cum, so I don't want to get you too close anyway\", she responded. \"I'm just trying to tease you.\"\n\n\"It's working.\"\n\n\"I know.\" She grinned deviously, still gently stroking.\n\n\"So, do you want me to give you that show now?\" I asked.\n\n\"That sounds fun\", she answered. \"That way it's not my fault if you go too far and cum.\"\n\n\"It would at least be sort of your fault, Miss Knock-on-my-door-at-6:30-in-the-morning-and-then-perform-a-striptease.\"\n\n\"Guilty!\" she said happily.\n\nI sat up, uncovering both of us, and propped up a couple of pillows against the headboard, leaning back. Khadija got on her knees on the bed, legs spread slightly, staring without shame between my legs.\n\n\"This should be mutual, don't you think?\" I asked.\n\n\"I do, except I'm going to cum whether you want me to or not\", she responded seriously.\n\n\"Be my guest.\" I smiled at her. \"Ok, so get in as close as you want\", I showed her as she shifted to a closer view, straddling my leg. \"The head is the most sensitive part. Think of it like the clit. The shaft is important too, I can't cum without stimulating both, and I think most guys are the same. You can see I'm circumcised, which I think Muslim guys are -\"\n\n\"They are\", she interjected.\n\n\"-and because I don't have a foreskin, the way I do it is to use my hand to sort of simulate that. I mainly stroke with a backhand grip, and the penis produces a little bit of its own lube, though not as much as your vagina does. So I sort of stroke the shaft and rub the head at the same time with one hand, which simulates sex as much as you can on your own.\"\n\n\"Interesting\", she breathed, watching me for a few moments. \"Can I try?\"\n\n\"Of course, though for a partner the forehand grip is usually better, because you can hold it from an angle that I can't.\"\n\nKhadija reached between her legs and rubbed herself a little, then showed me the wetness in her hand before starting to stroke a little bit. Shortly, she had the knack of it, and it started feeling quite intensely good.\n\n\"OK, you've definitely got it.\"\n\n\"Any other tips?\"\n\n\"Use your thumb on the underside, like -- yep, that's it -- and you can also sort of give a twist on the head at the top of you stroke...\" I moaned deeply.\n\nShe stroked for a minute or so, experimenting with different grips and speeds, watching my face intently, trying to figure out what I enjoyed and didn't. She was an inquisitive, sensitive personality, and it didn't take her long until she'd narrowed in exactly on what I liked.\n\n\"Jesus, you're a fast learner.\"\n\nKhadija smiled. \"I try.\" She kept stroking, giving the impression she was mentally recording everything for later use.\n\nI suddenly grunted, involuntarily, which brought a smile from Khadija.\n\n\"This is really, really cool. Thanks, Ryan\", she said proudly, her hand still maintaining a grip and pace she'd correctly decided that I liked. \"Later this trip I want to make you cum with my hand.\"\n\n\"We can make that happen.\" I took back over, stroking myself slowly as I turned to face her. \"You haven't started touching yourself yet but you're obviously wet. Do you want to show me what you do?\"\n\n\"Sure\", she shooed me off the pillows, and we reversed positions. I leaned down, resting my head on her inner thigh, six inches or so from her opening. \"That's awfully close.\"\n\n\"I can move\", I offered, \"but it's nice being able to see the fine details up close since it's so much more intricate down there than on a man.\"\n\n\"True\", she said. \"Okay, so I'm left-handed so I usually use my left. What I do is take two fingers, my index and middle, and get them wet, and I sort of lock them right into this spot here.\" She indicated a spot on the right side of her clit hood. \"Then I just kind of rub diagonal strokes across my hood.\" She started doing this as she spoke. \"That's the absolute basic thing. I only touch my clit directly when I'm about to cum. Sometimes I like to lick my nipples while I'm doing it.\" She took her right breast in her mouth, licking around the nipple as she rubbed.\n\n\"Do you ever go inside?\"\n\n\"I like being penetrated\", she answered. \"It's one of the things I'm most curious about having sex for real. I've had my fingers inside, as well as my lovers', and my hairbrush handle. It's hard to rub your own g-spot, but when I'm with a partner I like having something inside. I've never anything as large as you are, and it's not like you can just buy a dildo in Saudi Arabia. I bet it feels incredible.\"\n\nI collected some wetness from her opening and locked two fingers onto the spot that she indicated, and I started trying to mimic her motions as she squirmed. \"Yep, that's definitely it\". She looked down at me. \"You don't exactly need a lesson, hon.\"\n\n\"Every woman is different\", I responded. \"The basics don't change, but it's good to know exactly what you like.\"\n\n\"True\", she answered. \"It's all part of the fun in having new partners. I've never met another girl who likes it exactly how I do. I'm sure other men aren't exactly like you, but I feel like I'm getting a foundation on what to do this week that I can use someday, and I'm really happy about that.\"\n\nWe both stopped talking and started playing with ourselves, her laying against the headboard, me lying perpendicular with my head on her inner thigh, me with a close-up view of her pleasure, her with a wide-angle view of mine. Khadija was quite obviously entranced with seeing a man do it, as I didn't catch her eye meeting mine even once as I kept alternating between watching her fingers and watching the pleasure on her face. She just stared, eyes completely glued between my legs. She moaned softly to herself, and kept her left hand working her clit, while her right roamed between stimulating her breasts and sliding in and out of her opening. I was close enough to her intimate area to feel the wet heat on my face, and I could easily hear the repetitive squishy noises of a woman's pleasure.\n\n\"If I don't stop now, I won't be able to\", I finally said with great reluctance.\n\n\"Okay\", she said, out of breath. \"You're still my best friend's boyfriend and I am not disrespecting her plans for today. But will you watch me cum?\"\n\n\"I'd love to\".\n\nShe picked up the pressure and speed on her clit.\n\n\"Is there anything I can do to help?\"\n\n\"Honestly, Ryan, I'm really getting off on having you watching me that close-up\", she answered.\n\nI inched my face closer, to the point that I was only inches away.\n\n\"Oh my God...\"\n\nShe picked up the speed again, to the point that both of her hands were a total blur, then started to shake violently and erupted, squeezing her legs together involuntarily around my head. I was pressed hard into her vagina, feeling her fingers pressing hard and moving against my cheek with her orgasm.\n\nAfter what felt like forever, she finally started to relax, and realized what she had done, noticing the wet smear on my cheek and touching it, embarrassed. \"Oh Ryan, I'm sorry, are you okay?\"\n\n\"I'm fine\", I said truthfully, smiling. \"That looked intense.\"\n\n\"It was\", she grinned back. \"Definitely one of my better ones.\" She lay back, spent. \"Rania can cum and cum and never get tired of it. I can have multiple orgasms too, and sometimes I want to, but it's always more intense and pleasurable for me to have one really good one. It's definitely cool how two people can be so different.\"\n\nShe shuffled down in the bed again, pulling the covers back up as I joined her. As we settled in, Khadija noticed I was still pitching a tent, and she giggled. \"That will eventually go away, right?\"\n\n\"Eventually.\"\n\n\"Good. Save it up for Rania tonight. She's as excited as I've ever seen her.\"\n\nKhadija pulled the covers up over as we curled into each other. I savoured the soft warmth of her body, listening to her breathing slowing down, her pulse returning to normal in the afterglow of her orgasm. The last thing I remember was her gently stroking my chest, because the next thing I knew, my alarm was going off and she was gone. I showered, dressed, packed up my stuff and headed down to breakfast, meeting both the girls there.\n\n\"It sounds like you're already up to no good with your permission slip, Mr. Stud\", Rania teased quietly as I sat down with coffee, a pita and some fruit.\n\n\"Um...\" I couldn't read her tone.\n\n\"Relax, Ryan, I meant what I said to you last night.\" She smiled. \"Just remember we're girls, and girls tell each other everything.\"\n\n\"This is the craziest, best trip I've ever been on\", I answered. \"You two are something else.\"\n\n\"We try to be\", Khadija smiled. \"One of these nights I'm going to keep Rania to myself, and you can be the one left alone in the hotel room.\"\n\n\"Not fucking likely\", Rania mumbled under her breath.\n\nWe checked out of the hotel, loading up our gear into the Land Cruiser and climbing in, Rania taking shotgun this time.\n\n\"Where to, ladies?\"\n\n\"Back to Sur\", Rania answered. \"Then we head inland. We've got about a two-and-a-half-hour drive ahead.\"\n\nWe left Cape End of the World in our rear-view mirror, and headed back towards Sur. The conversation was pleasant and PG-rated. Rania seemed nervously excited, which I suppose I could understand. She was practically bouncing with energy, more bubbly and talkative than usual. Khadija was obviously satisfied following the morning's activities, and she was quieter and calmer than she'd been for much of the trip so far. I, for what it's worth, was in a state of serious sexual agitation.\n\nFrom Sur we headed south on Highway 23, then turned west with the road after crossing the Hajar Mountains again. The roads out here were all two lanes, unlike the dual carriageway on the Muscat-to-Sur route, but still well-paved and relatively free from traffic. After two hours of driving, just as 23 was turning south again and the land had mostly flattened out, Rania pointed out a turn and had me head back north, climbing again into the mountains. The road gained elevation and started twisting and turning as we climbed, and then, finally, dead-ended at a sign reading WADI BANI KHALID.\n\n\"Another wadi?\"\n\n\"Yes, but this one is totally different. Apparently. This wasn't on the original plan for today, but my friend who lives here heard we were driving by and told me we had to stop\", Khadija explained.\n\n\"Okay, I trust your judgment. Or hers, I guess.\" I looked again at the sign. \"What does this one mean?\"\n\n\"'Sons of Khalid wadi'\", Rania translated. \"Got your swimsuit?\"\n\nWe started walking, and Wadi Bani Khalid, at first glance, was nothing like Wadi Shab. Unlike the towering cliffs of Wadi Shab, Wadi Bani Khalid was open, airy. We were surrounded by mountains, layers of angled rock in all directions on the near horizon, but there was none of the claustrophobia of Wadi Shab. Hell, the entrance was a lovely boardwalk from the parking lot, past a pond and a small caf\u00e9 and gift shop.\n\nIt was about a ten-minute walk to the entrance of the wadi, and when we reached it, I could suddenly see why we'd been told to come here. Wadi Bani Khalid was a swimming hole in the Tom Sawyer mould. The cliffs weren't particularly high, but were a perfect white, smooth stone, dropping precipitously into an impossibly clear and deep pool below. There were about twenty tourists frolicking, swimming and sunning. A few teenage boys were doing dives off the cliff, about three metres into the pool below.\n\n\"It's beautiful\", Khadija's eyes lit up. \"I've never seen a more perfect place to swim.\"\n\nWe quickly changed, me wrapped in a towel in the more open wadi, the girls once again having prepared ahead with Islamic bathing costume under their clothes, then went in the water, warm, fresh and clear.\n\nAfter about twenty minutes of floating around Rania and I were done, but Khadija wanted to stay in, so the two of us climbed up on a rock, drying off in the brilliant late-morning sun.\n\n\"I hear you're saving your strength for me tonight\", she said matter-of-factly.\n\n\"There's no point in even thinking about keeping secrets, are there?\" I asked rhetorically.\n\n\"Only because there isn't any need\", she responded. \"I'm glad you're saving yourself.\"\n\nWe sat in silence for a while.\n\n\"You're really okay with this morning?\" I asked.\n\n\"Yes...\" she answered. \"I know we talked about this last night, a little, but now that it's happened, I still feel like it's the right decision. I mean, I don't love the idea of you fooling around without me, but not because I don't trust you, or her. It is because I want to be involved with everything that's happening this week. I don't ever want to leave your side for the time you're here, and I hate that we can't sleep in the same bed as we used to.\n\n\"But I owe my entire worldview, my openness, to her. Without her as a roommate, I probably wouldn't be anything like the person I am today. She was the one encouraging me to pursue my M.Ed. degree, and to do my research trip to Canada. I was hesitant, and she practically made me go. Without having met her, I would probably be happily, ignorantly married to a man back home who treats me like garbage. And God knows I certainly wouldn't have travelled to Canada, taken a male roommate even by accident, and wound up falling in love, real love, the way I would never have known was possible. I probably still would be intensely sexually frustrated without knowing it, the way I was as a teenager, and I never would have even had an orgasm or discovered my sexuality.\n\n\"She's wanted this for longer than I've known her, and I want her to have it if it's within my power to give it to her. She changed me into a better, more worldly, and more open person, and I want her to have this, for one week in her life, just to have a taste of what it's like. She may never go abroad, and she may never meet a man like you. I can't believe there are many men like you out there. So, I feel that I owe that to her, for all that she's done for me. But I also want it, too. I wouldn't force you on a woman you weren't into, but you two are clearly attracted to each other, and while I'd never share my boyfriend with just anyone, I trust and love her deeply and know I have no reason to worry that you'll leave me for her, or something.\"",
        "\"She's an attractive woman with a fun, friendly personality, but I love you.\"\n\n\"I love you too. I cannot wait to have you inside me tonight. I want to give that to you, so badly. I know I won't be your first, but I hope I can compare to the other women you've been with.\" Rania shifted, looking down at Khadija still frolicking in the water, demonstrating the finer points of the breaststroke to a couple of preteens. \"She's a wonderful person, and you can have her later this trip, too, if that's what you both want. But tonight is going to fulfill a fantasy I've had since I was a teenager, dreaming about my future husband. I still can't believe it's going to come true.\"\n\n\"I'm still completely in the dark about this, and I'm okay with that\", I responded. \"If this really is a teenage fantasy come true I'll be fine with whatever it is. I trust you.\"\n\n\"You're so sweet. I promise it's going to be wonderful.\"\n\nIn time, Khadija came back and towelled off, and we made our way back to the car. The open wadi had meant that the girls climbed in the car still wearing their wet swimsuits, and as I drove back out down the mountain, the girls both shed them, changing in the backseat, protected by the deeply-tinted windows and the lack of passers-by on the highway. I tried to focus on the winding mountain roads, but two dripping naked Arab girls were still a considerable distraction, even with them not trying, at least this time, to tease or distract me.\n\nWe eventually hit the main road again, and Rania, by now dressed and back in the passenger seat, directed me to carry on west. It wasn't long before the mountain landscape disappeared, the land flattening into a perfect level void reminiscent of the Canadian prairies. The land appeared to be a hard-packed dry soil, and shortly I saw my first herd of camels, grazing on the low scraggly bushes dotting the landscape.\n\n\"Camels!\"\n\n\"Oh, yeah. Dromedaries. I guess this would be your first time seeing them\", Rania said expressionlessly.\n\n\"Are camels not a big deal here?\" I asked.\n\n\"It would be like seeing cows in Ontario\", she answered. \"There are millions of them. They're all owned by the Bedouin nomads and they go where they want. Mind you don't hit one on the highway. There aren't any fences.\"\n\nTen miles and fifty-odd camels later we hit the town of Bidiyah, the first town since leaving Wadi Bani Khalid. It was after 1 PM by this point, so we stopped at a roadside caf\u00e9 for a quick lunch of paper-thin Omani bread stuffed with fried egg and cream cheese.\n\nAfter eating, we loaded up again, and Rania directed me south through Bidiyah, away from the highway. The town was small, reminding me of other Omani towns; shops lining the main street, gated Arab-style houses set back from the road, ubiquitous mosques. On the way out of town, we passed an auto repair shop with a hand-written sign reading \"TIRE DEFLATIONS\" in English. I did a double-take, confused.\n\n\"Turn in here.\"\n\n\"What?\"\n\n\"Turn in!\"\n\nI turned into the garage, and a friendly guy approached our window. Rania rolled her window down, briefly spoke to him in Arabic, handed him a one rial note, and he then set about deflating the tires of the Land Cruiser, one-by-one.\n\n\"I promise that I trust you, love, but you're going to have to clue me in with this one\", I said dumbly.\n\n\"All will be revealed shortly\", she responded.\n\nOnce all four tires were done, the guy flashed a thumbs-up, and I headed back onto the road, with Rania still directing. The 4X4 still had some air in the tires, but driving was now sluggish, the car no longer as responsive. We drove three or four minutes until the road ended, then started driving cross-country on the flat hard-packed ground for a few more minutes, and then I saw it.\n\nDirectly in front of us, stretching as far as I could see along the horizon, was a wall of sand. It seemed to go on forever, one enormous, never-ending chain of dunes, and I stared, completely dumbstruck, stopping the car in the middle of the dirt track.\n\n\"You can drive in the snow, right?\" Rania asked.\n\n\"Yeah.\"\n\n\"Same thing, sand.\" She grinned. \"Don't get us stuck, please.\"\n\n\"You want me to drive up the wall there?\" I was still in shock.\n\n\"Please.\"\n\nI had no choice but to trust the girls completely by this point, so I shrugged and gunned the engine, aimed at a set of tire tracks leading up the incline, and hit the sand at speed. We blasted up the hill, the wheels straining against the loose-packed sand, and then suddenly we were on top of the sand wall, in another world. My childhood mental picture of Arabia had suddenly, unexpectedly come to life. We were in the desert. Towering dunes the size of small mountains surrounded us. There were bits of vegetation rarely dotting the landscape, and a train of camels on the horizon.\n\n\"Welcome to the Arabian desert, Ryan\", Khadija said. \"This place is called the Wahiba Sands. It's actually the more populated part of the desert -- a hundred or so miles north, there's another road connecting coastal Oman with the interior. After that, you get the Rub al-'khali, or 'empty quarter', where there's literally nothing but sand until you're a thousand miles into Saudi Arabia. No roads, no towns, no people.\"\n\n\"I saw Lawrence of Arabia when I was in university. I feel like I just walked onto the set.\" I was still in awe.\n\n\"Want to go off-roading?\" Rania indicated the tire tracks all over the dunes, at every angle imaginable. On the horizon to the right, I could see another white Land Cruiser having what looked like a wonderful time, making crazy sharp turns and doing jumps over the rises in the land.\n\n\"You don't have to ask twice.\"\n\nI spent the next twenty or so minutes giving the Land Cruiser all it had, doing jumps, spins, and turns through the soft sand as the girls whooped with delight. I discovered that with the tires so low on air, they had a ton of grip in the sand, and I could get moving again through pretty much any situation. The car occasionally seemed at risk of flipping or rolling, but the Toyota was solid and as at home in the sand as the camels. At last, I ascended what appeared to be the tallest rise on the horizon and stopped. We piled out of the car.\n\nFrom our vantage point I could see for dozens of miles in every direction, the town of Bidiyah visible on the far horizon, but otherwise nothing but soft rippled sand, occasional plant life, and a few Bedouin tents down near the sandy track that obviously acted as the road. It was incredibly hot, as the dunes absorbed and reflected the sunlight beating down from the cloudless sky. It was also as deathly silent as any place I'd ever been; there was no wind, and the sand absorbed any noise that may have come from the few vehicles we could see. It was impossible to tell if anything we could see was a mile away or twenty. I just stared, taking the alien landscape in, suddenly realizing why it was so easy for people to die out here. I could see the town on the horizon, but apart from that, there was no directional markers or navigational aids, and after just two minutes outside I was already hot and thirsty.\n\nRania put her arm around me. \"Welcome to the real Arabia, my love.\"\n\n\"Does your plan for tonight involve the desert?\" I asked.\n\n\"Maybe. You'll have to wait and see,\" she answered slyly.\n\nWe took photos of the three of us, using the hood of the 4X4 as a tripod, and then Rania directed me to head towards a small grouping of Bedouin tents down in the valley. When we arrived, there was a small group of tourists with local guides in their own Land Cruisers, and a couple of camels with a guy charging the tourists for camel selfies.\n\nWe approached the tent and entered. An older husband and wife were sitting cross-legged on Arabian carpets on the floor, and invited us in, gesturing towards a pot of coffee and dates. The tent was surprisingly cool in the desert heat, nearly dark and sealed off from the worst of the sun. Khadija made the introductions in Arabic, handing them a few bills for their story.\n\nOver the next half hour or so I learned about their lives. Their names were Omar and Aisha, they were about the age of my parents, and they'd spent their lives in this desert. Once upon a time the Bedouin had roamed the desert indiscriminately, but now, a lot of them clung to this spot on the edge of Bidiyah, making a living taking tourists around the desert as guides or working in one of the many desert adventure camps nearby. The older people, like these two, spent their days talking to tourists and acting as cultural interpreters. The Bedouin liked living where there was cell reception, where there was access to grocery stores, where they could send their children to school in Bidiyah, and who could blame them? Yet they resisted buying houses and settling down; they still wanted to live the nomadic lives of their ancestors.\n\nI was shocked to learn that Oman in 1970 was one of the world's great backwaters. Only 5% of the population was literate, the infant mortality rate was over 50%, and hardly anyone went to school of any kind. The interior was technically a separate Sultanate from the coast; full of desert nomads herding camels as they'd done for centuries. The coast was full of sailors and fishermen eking out a living from the sea and trading throughout the Indian Ocean coastline, from India to Madagascar. Muscat at the time was a small backwards city, and a Communist rebellion was raging in Dhofar province, far to the south.\n\nThe change was solely attributed to the aging Sultan, Qaboos bin Said al Said. He seized power from his father, the tyrant Said, in 1970 in a bloodless coup backed by the British, and in nearly fifty years on the throne as absolute monarch, he had modernized the country, built Muscat into a world capital, improved literacy to close to 100%, put the entire population to work, developed the country's oil reserves, and put nearly all of the oil money back into development for the Omani people. I had taken it for granted over the past few days that I was travelling in a safe, literate, developed first world country, and I was stunned to learn that all of it had happened within the lifetimes of my parents, and to the credit of one benevolent Sultan.\n\nKhadija and Rania told me that the status of women in Oman was also to the credit of Qaboos. If I had gone to university in Oman at the time I did back in Canada, I would have been in segregated classrooms, but now all universities were co-ed. Qaboos's creed seemed to be slow development, pushing towards westernization and modernization as quickly as possible without inciting resistance. No Omani had ever been arrested for terrorism -- the only Muslim country where that was true -- and the population had somehow modernized over fifty years without much complaint. I'd seen portraits of a stern-looking older man with a neatly-trimmed white beard and colourful mussar turban in shops and restaurants for the past four days without giving it a second thought. It was with great shock that I realized that all that I'd seen and experienced, this tolerant, welcoming society that clung to its good traditions while eschewing the regressive ones, was to the credit of one man's leadership. And Omar and Aisha had seen the whole thing first-hand.\n\nWe emerged eventually into the sunlight. I was still in a state of shock, not sure how to process what I'd just learned. Rania asked me to head back to Bidiyah to buy some supplies, and I turned the vehicle onto the desert track.\n\n\"Everything we've seen this week, all since 1970.\"\n\n\"Yep. Saudi was kind of similar in the era of our great-grandparents, a little earlier than when Oman started to modernize. All of Arabia was desperately poor before the oil was discovered\", Khadija said. \"When the oil money started to flow, Oman hung onto the architecture, art, culture, history and Arab hospitality and threw out the repressive traditions. Saudi went in the opposite direction. We embraced an extreme form of Islam, put the clerics in charge, and tore down nearly any building older than my father. Mecca looks like Las Vegas now, all giant hotels.\"\n\n\"Have you been on the pilgrimage there?\" I asked.\n\n\"We both have, separately. It's easy when you live in Saudi,\" Rania said. \"It was a profoundly moving experience, seeing the Kaaba, drinking the holy water. But the city was a disappointment.\"\n\n\"I found the same\", Khadija added. \"It was incredible being around so many believers from across the world. But it was still the same Saudi Arabia.\"\n\n\"And what happens when Sultan Qaboos dies?\" I asked. \"He took power in 1970, so he's got to be getting up there in years.\"\n\n\"No one knows\", Rania answered. \"He isn't married and has no heir. There have always been rumours that he's a homosexual, though it will obviously never be known for sure. He apparently has a succession plan filed in the government, though no one but him knows what it is. One hopes that this wonderful, tolerant country doesn't die along with its leader.\"\n\nOn that sobering note, we left the desert and drove to a grocery store in Bidiyah, loading up on supplies, and then headed back. By this point the sun was growing low in the sky.\n\nWe drove aimlessly, heading miles deeper into the boundless void, until we were out of sight of the desert camps. Rania had been tracking our position on the GPS on her phone, so I wasn't too worried about getting lost, but when she directed me to stop, I was a little confused.\n\n\"Here?\"\n\n\"It's as good a place as any.\"\n\nThe girls opened the liftgate of the 4X4 and finally dug into the mystery packages in the back, pulling out a Styrofoam cooler and a large wicker mat, laying it out on the desert and anchoring it expertly.\n\n\"Wait. Where did you get a cooler?\" I asked, confused.\n\n\"Ras Al-Hadd. While you and Rania were having dinner last night, I was preparing for tonight\", Khadija answered. \"This is all part of her plan.\"\n\nMeanwhile, Rania was building a fire, expertly loading kindling into a pile on the sand. She had a raging blaze going within a few minutes.\n\n\"I am seriously impressed\", I said. \"How did the two of you manage this?\"\n\n\"We're Saudi\", Rania said simply. \"We're descended from the Bedouin. We might live in cities now, but we're still desert people at heart.\"\n\nThe girls sat me comfortably on the mat in the sand, and over the course of the next hour, they prepared a feast of grilled chicken kebabs on the open fire as well as pita bread, fresh fruit and vegetables, and a rice-based porridge flavoured with cardamom and cinnamon. I had nothing to do but relax and watch the sun set, then shortly after, watch a crescent moon rising over the dunes. I could see another cooking fire on the horizon, many miles away, but otherwise there was no one around. The temperature dropped as soon as the sun disappeared, and while I'd heard deserts could be cold at night, the evening in Wahiba Sands was just pleasant.\n\nAt length the girls announced the food was ready, and we dug in.\n\n\"This is delicious. I don't know how you pulled this off\", I said in gratitude.\n\n\"We're happy to do it for you\", Rania said. \"It's important to us that we show you some proper, old-school Arab hospitality. Our traditions at home are being lost in the rush to modernization. We wanted to do this for you, while you're a guest in our land. You showed me the best of Canada while I was living with you. I wanted to return the favour, to show you the best of Arabia.\"\n\n\"Thank you so much.\" I was touched. \"This is far more than I ever could have expected.\"\n\nWe eventually finished the meal and packed up our garbage, and then Khadija asked me for the car keys.\n\n\"What? Why? Can you drive?\"\n\n\"We both have learner's permits\", she responded. \"The King finally let women learn how to drive.\"\n\nKhadija climbed into the driver's seat, adjusting the seat to her shorter frame. I watched, keys still in hand, until Rania nudged me in the ribs. It hit me suddenly. \"Oooooooohhhhhhhhh.\" I handed over the keys. \"Where are you going?\"\n\n\"I have a real need to see what's a couple hundred yards over there\", she said, winking at me. \"I'll be back in an hour.\"\n\nThe engine started, and the Land Cruiser drove off, then stopped abruptly, still within sight, but facing away from us. The lights shut off, and then Rania and I were alone, in the dark, sitting on our wicker mat, the fire dying down to embers, with more stars than I'd ever seen in my life overhead. The Milky Way was easily visible, and the crescent moon hung in the east, providing just enough moonlight to see my girlfriend's soft features. She looked nervous, but she snuggled into me as we both looked up at the night sky.\n\n\"So, this is the big plan?\" I asked. \"It's kind of perfect.\"\n\n\"When I was a teenage girl, I had no conception of sex as being something that women wanted or desired\", she began. \"I wasn't raised to believe that was a possibility, and while I'm sure I was incredibly sexually frustrated most of the time, it never manifested as sexual, apart from occasionally waking up in the middle of the night out of breath and feeling intense pleasure in my private area without understanding why. But every year, we'd go camping out in the desert as a family, or as I got older, with friends. I'd lie out alone in the sand after dark, under the moon and stars, and think about how romantic it was, and dream about my future husband. I'd try to imagine what he would be like, and how he would treat me, and about lying out in the desert on a night like this, cuddling with him. It's the only sexual fantasy I remember having from back then, even though I didn't think of it as sexual, and when I found out you were coming to Arabia, I was determined that this would be how I'd make love to you for the first time.\"\n\n\"That's absolutely wonderful\", I said genuinely. \"How do I compare to your future husband?\"\n\nShe smiled at me. \"I never pictured he'd be a white man. But you're just as handsome, and as kind, and as loving, and you treat me as well as I would have wanted. You're the one I want to share this with.\"\n\nI leaned over, making eye contact, and stared at her for a moment, gazing deeply into her eyes. She shivered, and I took that moment to lean in and kiss her.\n\nOur fooling around over the previous few days had been intense and hormone-driven, but this by comparison was pure romance. I quickly shed Rania's headscarf to have access to her hair, but otherwise there was no hurry as we slowly kissed.\n\nSlowly, things progressed. Rania shed the abeya only to reveal form-fitting black leggings and a tight green workout shirt underneath, and both of us rolled together, pressed in close, hands gently exploring each other, kissing each other's lips, ears, necks. I was hard by this point, but I was in no rush. I was content to let her drive, taking over when she wanted me to, but otherwise letting her make her fantasy a reality.\n\nAt last I finally slid my hand up her top. She wasn't wearing a bra, and her breasts were firm under my fingertips as I explored them gently, circling her gumdrop nipples as she kissed me more intensely.\n\n\"This is so nice\", she finally pulled back and said breathily. Her face was radiant in the moonlight, flushed with exertion and desire. \"Our entire relationship has felt like we're in a hurry. All I want to do this time is take time and savour this moment with you.\" She looked up at the sky, brilliant with the pinprick lights of a billion stars, and clasped my hand, through her shirt. \"This is all I ever wanted.\"\n\n\"It is such a pleasure spending this moment with you\", I agreed. \"I never would have believed it, the day we met, that a year later we'd be about to have sex in the middle of the Arabian Desert. But this feels so right.\"\n\nShe spread her legs, looking anxiously at me, and I took the invitation to let my hand drift southwardly, gently tracing a line down her torso and between her legs. I felt damp heat at her core and lightly touched for a moment before moving back up and kissing her again.",
        "Rania's response was to reach down and pull my shirt off in one fluid motion. She assumed the dominant position again, kissing me from above and running her fingers through my chest hair. \"I love your body\", she exclaimed. \"So masculine.\"\n\nShe finally sat up and pulled her shirt off, exposing her breasts to the desert. She moved up and cradled my head in her arms, inviting me to suckle on her nipple, which I started to do, licking and tugging and lightly nibbling her as she squirmed with pleasure and ran her fingers over my body.\n\nRania's squirming, rocking her hips and opening and closing her legs had reached fever pitch, and I finally decided to touch her intimate place. I reached down, slowly, as she watched me. I found the waistband of her leggings, tucked my fingers inside, then continued inside her panties, drifting down across the light stubble on her mound, and finally into the cleft between her legs. She was as wet as I'd ever felt her, and she groaned in pleasure as soon as my fingertips made contact.\n\n\"You're so wet, love\", I observed.\n\n\"That's what happens when you fulfill a sexual fantasy you've had for years\", she responded.\n\n\"Wet is good\", I said. \"It will make penetration easier.\"\n\n\"I don't know what to expect\", she mused, \"but I've had things inside me before, just not, you know, this big. It might hurt, but I'm ready for it. I want this.\"\n\nShe reached down and unzipped my hiking pants, pulling them and my boxer briefs off together. My erection bounded out, free at last, and she giggled to herself.\n\n\"Something funny at seeing your boyfriend naked?\"\n\n\"No, it's not...\" she was still fighting off laughter. \"You're perfectly silhouetted against the moon. It's like seeing those pictures of a wolf or E.T., only it's a man with a boner.\"\n\nThe laughter broke what was left of the tension as I posed for her in a couple of positions, emphasizing the seven-inch rod protruding from me. She finally gestured at me to come closer, and started touching me, stroking me as I gently fingered her under her leggings.\n\nFinally, Rania stripped off her bottoms, spreading her legs wide and leaning back on the mat, her naked skin shining softly in the moonlight, her face radiating desire. Her vagina was wet, open, and ready for me.\n\n\"Take me, Ryan Kershaw. Make me a woman.\"\n\nI assumed the missionary position, and I started rubbing the head of my cock against her opening, lubing myself up with her juices, the way we had done a dozen times previously. She watched, clearly nervous, touching her clit gently, waiting, as I pressed against the opening, going in a half-inch or so.\n\n\"I love you, Rania.\"\n\n\"I love you, Ryan.\"\n\nI pushed. There was light resistance from inside her at first, then her vagina accepted the incoming intruder, and I slowly slid into her, inch-by-inch, until I bottomed out. I was inside.\n\n\"How does that feel?\" I didn't move, letting her get used to the sensation.\n\n\"So weird\", she answered, shifting her body. \"It doesn't hurt the way I was expecting... It's uncomfortable, a little, but it also feels good... I feel so full... It's like being fingered only so much wider and deeper.\"\n\nI still hadn't moved.\n\n\"Okay, I'm ready. Go slowly.\"\n\nI started to move, gently moving in and out at an excruciatingly slow pace, savouring the incredibly tight wet pressure enveloping my cock.\n\n\"How does it feel for you?\" she asked.\n\n\"You feel incredible\", I answered. \"You're so wet and tight, it's like a vise. You're gripping me in every way and it feels amazing.\"\n\n\"It's starting to feel good\", she said. She had started rubbing her clit with a little more intent. \"I always loved rubbing my clit and being fingered at the same time. This feels similar only so much deeper, more intense.\"\n\n\"Do you want to try a different position?\" I asked.\n\n\"Next time\", she answered. \"This is good, it hurts a little, but I think I could cum from it as long as I keep touching myself. So far, the pain is bearable, and I don't want to overdo it.\" She paused. \"Could you cum from this?\"\n\n\"If I could speed up a little, absolutely\", I answered. \"I can finish with my hand if you can't handle that, don't feel obligated.\"\n\n\"No, you can\", she said. \"I've been fantasizing about you cumming inside me for a year. I want that. It'll be worth it.\" She smiled at me and kissed me briefly.\n\nI picked up speed, a little, and she grimaced at first, then started to moan softly. \"It's getting good, Ryan\", she whined in surprise.\n\n\"Oh my God yes it is\", I answered.\n\nThe slapping noises and mutual moans picked up, echoing across the dunes. Rania had started moving in rhythm with me, stroking her clit with abandon. She'd gotten even wetter, if such a thing was possible, and her intense grip, coupled with the year-long buildup, had me already close to an orgasm. For her first time I didn't want to prolong it.\n\n\"Ryan, you have that look\", Rania moaned.\n\n\"What look?\"\n\n\"Like you're going to cum inside my pussy.\"\n\n\"Maybe.\"\n\n\"Do it, cum inside me, fill me up with your cum like I've dreamed about.\" Rania's fingers rubbed across her clit at lightning speed.\n\nI groaned and buried myself as deeply inside as I could go, then erupted.\n\n\"Yes, yes, yes\", she watched me, locking eyes with me. \"This is so hot... unf!\" Rania came with a start, squeezing her legs together, moaning, pulsating around my cock. I felt her shaking under me as I collapsed into her arms, draining my balls into her cunt as she milked me for all I had. I collapsed into her embrace, then, suddenly, the desert was silent.\n\nWe lay together for a few moments, still connected, before Rania pushed gently on me. \"I need you to pull out\", she asked.\n\nI did so. \"Are you okay?\"\n\nShe kissed me. \"Better than okay. That was better than I ever expected. I never guessed that the first time could be that good.\"\n\n\"Even in the west, it's not usually that good\", I said, thinking. \"We must be sexually compatible.\"\n\n\"I always believed we were.\" She grinned.\n\n\"Are you sore?\" I asked.\n\n\"Yes, in a good way, if that makes sense\", she answered. \"I felt so full having you inside. I've never experienced anything like that. I was expecting it to feel like getting fingered, but it was so much more intense. It was so much deeper, and I felt like I was getting stretched out, in a good way. It hurts a bit, and I think I'll be sore tomorrow, but it was so, so good. Thank you for making my first time so special.\"\n\nWe lay together, curled up, nude, under the stars, watching the occasional shooting star blaze overhead in the sparkling sky.\n\n\"Make a wish\", I said. Rania thought, then said \"Okay, I did.\"\n\n\"What did you wish for?\"\n\n\"I can't tell you\", she said. \"It won't come true if I say.\"\n\nWe snuggled together for some time, but eventually, there was a noise from behind us, and I saw the lights of the Land Cruiser approaching. We stood up for visibility, and soon the car was alongside.\n\n\"How was it, sexy naked lovers?\" Khadija asked.\n\n\"Incredible\", Rania answered. \"I'll tell you all about it tomorrow.\"\n\n\"Where are we sleeping tonight?\" I asked.\n\nKhadija popped the lift gate on the 4X4, and I walked around to discover the back seat folded down, and three sleeping bags laid out alongside each other.\n\n\"Sleeping bags? Where did you get sleeping bags?\"\n\n\"We packed everything we needed\", Khadija answered. \"We've been planning this for a long time.\"\n\n\"That's what was in all those bags we've been carrying around?\" I asked.\n\n\"The luggage allowance on Arabian airlines is generous. Don't knock it and don't ask questions.\" Khadija elbowed me playfully.\n\n\"Is it legal to camp out here?\" I continued.\n\n\"People camp in their cars everywhere in the Middle East\", Rania answered. \"This won't be our last time this trip.\"\n\nRania and I dove into our suitcases, put on warm pyjamas, and the three of us then climbed into our sleeping bags. It was a tight fit, but we managed.\n\n\"Good night, my love\", Rania said. \"Thank you for making my dreams come true.\"\n\n\"Good night\", I answered. \"This was a magical night. I'll never forget it.\"\n\n\"Good night\", Khadija added. \"Thanks for letting me be a third wheel on your big night.\"\n\nShe reached up and killed the dome light. The desert was as dark and silent a place as I'd ever tried to sleep, and while the cramped space was a bit of an issue, I kept catching Rania's eye as we looked at each other from close range. She kept staring, contentment showing clearly on her face, as though she still wasn't believing that her fantasy had come true, that we were together again, that life had led us to this place and time. I was enjoying telling wordless stories with her, but eventually we drifted off. The future could bring what it brought, but tonight had been as perfect of a night as I'd ever experienced, and I went to sleep as happy as I'd ever been in my life."
    ],
    "authorname": "thatsbogus",
    "tags": [
        "virginity",
        "first time",
        "desert",
        "masturbation",
        "hotel",
        "arabia",
        "mutual",
        "deflower",
        "missionary",
        "sex"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/parts-of-desire-ch-04"
}
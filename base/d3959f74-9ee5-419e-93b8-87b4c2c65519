{
    "title": "The Archer Part Pt. 05",
    "pages": [
        "Aslin didn't see much of Ero over the next string of days, as the palace staff prepared for the arrival of the royal party. The Tirian King himself would not be attendance, but instead the young heir, Prince Philip. In his youth the Prince had been sallow and gaunt from a lingering blood illness, but they said he grew into strength in his young adulthood. He was the Tirian King's only male heir, Aslin knew, and thus would be heavily guarded. Yet from what she could tell, the Almanian preparations were more for a large festival than for a dangerous meeting of enemies. Even if both sides were confident a treaty would be signed, Aslin wondered at how little security was on Ero's mind.\n\nWhen she saw him, it seemed the only thing on his mind was her. They were sometimes together briefly in the late morning, if Ero could get away, and at supper, when the family ate together. Aslin, it seems, was invited to dine with the royal family at every meal. It was never a formal discussion, Bitta simply came to bring her to the dining room so often that eventually Aslin went there herself. And during these hours Ero's gaze never strayed from her, he listened deeply and wanted to be close.\n\nBut they were only ever truly alone at night. Ero had slept in her bed every night since they landed. Aslin left her door unlocked these days and would wake to find him stretched out atop her, his mouth pressed over every surface of her body, ravenous. He would take her over and over, till she persuaded him to sleep, and when he did, it was like a log had fallen atop her, trapping her till morning. They never spoke again about the lily root mixture from Silta, and Aslin put it away.\n\nIn between hurried kisses they would exchange the doings of their days. Ero's hours were filled with endless preparations, and strategy talks with his father and representatives from the different regions of the vast island. They seemed to have a kind of governmental system in which the King believed himself bound in part to the desires of the other regions, and thus was developing a treaty that would satisfy one corner's need for exclusive fishing rights and another's for imported farming equipment, and so on. Disagreements regarding priorities meant for some long nights with Ero's head seemingly swirling with the endless conversation.\n\nShe woke every morning to an empty bed, though Ero would, as was his custom from before, choose for her a gown and a pair of clasps. The clasps were different now, heavier and of finer metal, and often embellished with small gems. The act of wearing them had held little interest for Aslin in the beginning, but now she looked forward to donning them, and felt more beautiful with their shine.\n\nHer days were much more pleasant than Ero's, if blander. The palace complex was huge, and she relished finally having the freedom to roam that she had been denied in the embassy keep. Its vastness meant a network of servants and high born people coexisted there, living and working together. It seemed always a flurry of activity, and Aslin couldn't tell if it was mostly in preparation for the Prince or if she had been very wrong in her conception of the royal women lying about eating grapes and being fanned.\n\nNo one ever seemed to mention Aslin's future once the Prince's party had departed, and though the question of what would become of her tugged at her mind often, she let the matter lie for now.\n\nAt least one matter had been lifted from her consciousness: the worry of her parents. Only the third day she had been there the King had called for her, and the two of them sat over a desk as he carefully crafted a letter. They both knew that Almanian mail was opened and read by the Tirians no matter the sender, and it was the King's idea to weave in the news of her safety and current location through metaphor. He asked her if her mother had called her by any nicknames or pet names, and Aslin, somewhat abashed, had told him that her mother had often called Aslin \"my daisy,\" for her paleness.\n\nHe had then proceeded to write a rather strange but endearing letter to her mother, inquiring after her health and family, and reporting he wrote to tell her after their long separation that a new kind of daisy had begun to grow in Almanian soil that reminded him of her. Any gardener reading the letter would doubt the sanity of its author, at the letter's far fetched idea that a type of daisy had suddenly vanished from the Tirian countryside, only to be found growing amongst the encampments of enlisted soldiers on the coast, and was now remarkably thriving in the balmy island weather of Almania, but Aslin knew that the soldier likely opening mail would give it only the most cursory of glances.\n\nWhen the King remembered faintly that her mother had not been an only child, she had told him that she had two uncles living far inland on the grasslands, neither of whom she had ever met. When the King asked for her permission to write them as well, she readily agreed, feeling strangely giddy about the possibility of knowing family she had never imagined she'd meet.\n\nBitta had been her godsend, showing her the complex and spending day after day in her company. At first Aslin worried that the young woman did this out of a sense of duty, but with time grew reassured that the Princess enjoyed her friendship. And the feeling was mutual. She found Bitta frank and funny, well-read and a lover of debate. Bitta, it seemed, loved Aslin's complete lack of knowledge about Almanian dress, and had occupied much of their first week together in befitting her blonde friend with an entirely new wardrobe, which Aslin had to admit suited her figure quite well. Bitta experimented with different hairstyles and jewelry, bemoaning the fact that her brother was too scarce of late to appreciate her hard work.\n\nWhile Aslin enjoyed making Bitta happy playing dress-up, she found much more joy in the girls' regular habit of practicing archery. It seemed archery was a feminine rather than a masculine sport in Almania, a fact that shocked and delighted Aslin. She could shoot as a man in Tiria, and as a woman in Almania. While here the archery was stationary, with different kinds of targets set up at varying distances from the shooters standing together, Aslin still enjoyed the exercise of strength and accuracy it required.\n\nWhen Bitta had first taken her to a weapons room to select their bows, Aslin's eyes widened at the vast array of weaponry on display.\n\n\"This room is left unlocked?\" she marveled, turning fully around at the spears, bows, and knives all within her reach.\n\n\"Most storerooms are,\" Bitta laughed. \"Why would this one be any different?\"\n\n\"Doesn't the King worry about his own safety?\"\n\nBitta considered this question for a moment before answering.\n\n\"I suppose we choose to believe that those with ill will would not resort to violence first.\"\n\nAslin got the feeling Bitta's reply was meant to encourage her to retract her suspicion, but if anything, the girl's words reinforced Aslin's opinion that the Almanians were too naive, too trusting. It was one thing to believe in the goodness of people, but quite another to leave palace gates wide open and armories unlocked.\n\nWhen Bitta left her alone to find someone who could lift the bows off the walls for their choosing, Aslin searched the room quickly, finding and taking a small knife in a sheath affixed to a kind of thin belt. It looked ornamental, and meant to wrap around a man's bicep perhaps, but it would serve her. She felt only a moment's guilt as she hid it within the waist of her inner skirts for later, promising herself she would return it before she left the palace. She had worn the knife around her thigh for so many years growing up, it had felt like part of her ensemble. The Almanian garments already made her feel practically naked, but she felt even more vulnerable without the safety of knowing her little knife was close.\n\nWhen the Prince's ship docked, Aslin sensed nervousness growing in Ero, who asked her to make herself scarce. Before she could even assent, Ero was quick to supply his reasoning.\n\n\"I would love nothing more than to have you beside me for all of it, introduce you to the chieftains. But until the war is over I think it safer if no Tirians beside your family know you are here.\"\n\n\"I do stick out like a sore thumb,\" she smiled, and Ero exhaled in relief at finding no resistance from her. He cupped her face in his hand and traced his thumb across the apple of her cheek, looking at her warmly.\n\n\"I promise when they are gone we can begin again. There's so much here I want to show you.\"\n\nAslin's heart thumped at the mention of a future in which she might still be living in the palace.\n\n\"Bitta's been wonderful, she's shown me so much already,\" she murmured. \"But I suppose she'll be called away while they're here.\"\n\n\"Only to dinners and such, she won't be at the talks. You two can still pierce all sorts of poor defenseless melons and straw stuffed men out on the grounds. As long as you're not painting my face on any of them.\"\n\nAslin laughed at the thought and the corners of his eyes crinkled the way they did whenever he made her laugh, and in her happiness she kissed him. His replying kiss was lingering and passionate, and Aslin's heart ached with the wonder of what she would possibly do without him when the time came to be parted. It had become so much more than a dalliance for her, and although his lust for her had not seemed to ebb at all, the differences between them were still too vast for anything lasting.\n\nSo the royal delegation arrived with fanfare so loud Aslin could hear it distinctly through her window, and there was much raucous noise and feteing during their welcome celebration. She mostly stayed indoors, reading from the vast library of Tirian books that somehow had been compiled in the palace over the years, and began to learn to read and write in Almanian, after only ever speaking it.\n\nWhen Ero would come to her at night, she would wake to find herself still in an armchair instead of the bed, schoolchild primers sliding off her lap. Her effort towards literacy in Almanian seemed to delight Ero, though she hardly did it for him. She didn't ask much about the proceedings, and he told her only that they went well and as expected, with both parties eager to reconcile. She much preferred their new game of tracing Almanian words on each other's backs for the other to guess as they lay together in the dark.\n\nOn the eve of the party's departure, Bitta convinced her to venture outside for more archery practice. Bitta had an idea for a series of targets of increasing difficulty, so that they might compete against each other, though Bitta already declared Aslin the better shot.\n\nThe day was bright and warm as they set up their targets, and the wood of the bow felt smooth and familiar in Aslin's grasp. It was good to be outside, she realized, squinting up at the sun.\n\nWhen after a while they noticed a small retinue of men in Tirian uniform in an informal group lingering on the grounds in the distance, Aslin lowered her bow and looked at Bitta with uncertainty.\n\n\"It's alright,\" the young woman reassured her, aware of Aslin's desire to remain inconspicuous.\n\n\"They're just waiting for the loose ends to be tied. If they come closer, we'll leave.\"\n\nAs she spoke, their attention was caught by a male voice closeby, speaking in Tirian.\n\n\"Lovely day, ladies,\" the voice called out, and when Aslin turned, her heart dropped to the pit of her stomach.\n\n\"Good day, sir,\" Bitta replied in a perfect Tirian, fluent like her brother, though her tone was clipped.\n\nWhen the soldier turned his gaze to Aslin, she felt the distant need to say something, but was utterly frozen in place.\n\n\"I hope I'm not impertinent, my lady, but I've never seen the likes of you in this country. You look like someone I might find at home. Are you from here?\"\n\n\"She's lived here some time now,\" Bitta answered for her, coming swiftly to Aslin's side and taking the bow from her hands. Only then did Aslin realize she still had an arrow notched.\n\nThe man said nothing, curiously looking at her, and Aslin could not find it within herself to move a muscle. She somehow felt that only by being utterly still would the ruse hold.\n\n\"Is that . . . the King?\" the soldier asked, his voice peaked with interest as he looked past the ladies towards the expanse of grounds beyond them.\n\nAslin stayed still, her mind racing, but Bitta had apparently turned to see.\n\n\"It must be over finally,\" Bitta said mildly, but she spoke more pointedly to the soldier.\n\n\"You should join your fellow men.\"\n\nHer tone of command was unmistakable. But the man's attention had left them entirely, and was fixated on the distant form of the Almanian King.\n\nWith no other word the soldier left them, walking swiftly away.\n\n\"How rude,\" Bitta huffed, but Aslin knew better.\n\nShe felt her immobility drain away, and her mind honed in on the soldier, calculating his pace, his distance from the King, Ero, and several chieftains who had come out onto the grounds, walking as if to stretch their legs after long disuse. Not a damn Almanian guard in sight, she cursed inwardly.\n\nShe turned, snatching her bow back from Bitta, not hearing the girl's surprised inquiry. Clamping the bow between her legs she gathered her hair behind her and secured it with the leather band she wore on her wrist for that very reason, her eyes never leaving the man. She slipped off her shoes, jogging to the line of shrubbery enclosing the grounds with bent knees, crouching as she watched the man's path.\n\n\"Aslin, what are you doing?\" she heard Bitta query, alarmed, and Aslin turned to her, her eyes narrowed.\n\n\"Hush!\" she whispered fiercely, holding her finger to her mouth and turning back.\n\nBitta's eyes widened and she took a step back, following Aslin's gaze out into the field.\n\nThe man had indeed merged with the smaller group of Tirian soldiers, there for security though the Prince was nowhere in sight. Aslin stood, bringing her bow behind her back as she walked from tree to flowering bush to shrubbery, slowly approaching the group and squinting to discern the man who had spoken to them.\n\nHer heart was pounding, praying to God she was wrong, that the gut instinct that screamed at her was wrong. She knew the price for her error could be her own life, walking up to them armed, but Ero was right there, damn it.\n\nThe closer she got the more her pulse throbbed, and her vision narrowed to blackness on all sides except for the pinpointed movements of the man. As she feared, he extricated himself, the other soldiers uninterested in the Almanians nearby, and in slow motion she watched as he shuffled closer to the King and his son.\n\n\"Laredo!\" she shouted, bolting in a run towards her target.\n\nThe loud cry caught everyone's attention, and they all turned to her, but Laredo only paused for a moment. His gaze darted briefly to her but his weight shifted nervously, and he reached into the small of his back for something as he too set off in a run, but towards the royal party.\n\nShe froze, and in one fluid motion twisted her torso, brought the bow in position and tracked his form, letting an arrow fly.\n\nA long moment later Laredo screamed in pain, and she saw that her aim had been true. His attention was caught as he gazed in horror at the blooming red spot on his thigh, the thick arrow lodged deep in his muscle. But still he gripped the pistol, its metal glinting in the broad sun.\n\nShe wore no quiver, and so dropped the bow, breaking out again into a sprint towards him.\n\nAs she did so, she saw Ero running towards her, and her heart swelled with fear.\n\n\"No!\" she yelled, holding up a hand to ward him off and he froze, his body ready to go either towards her or to the Tirian she had just shot. Ero's face was white, and he looked at her as if she had gone mad.\n\n\"This is for Tiria, fucker,\" Aslin heard Laredo cry out, and her head whipped back to see that during her brief distraction he had recovered enough of his wits to swing the pistol in a broad arc towards Ero.\n\nShe dove towards Laredo, knocking him back with the force of their collision, and he grunted in pain as his injured leg met the hard ground and the pistol flew out of his grasp. She straddled him, shoving his chest onto the grass with a loud yell.\n\nThe man looked at her in surprise, and then his eyes slowly widened.\n\nShe knew the moment he recognized her.\n\nShe wanted to beg, plead for him to stop, but he was twisting wildly underneath her, and she knew he was reaching for the knife he kept strapped to his ankle, and he let out a victorious whoop as she felt the sharp edge slide into the skin of her bare leg.\n\nThe feel of it brought Aslin entirely outside of her body.\n\nShe was not Aslin, dutiful daughter and sister.\n\nShe was no new recruit, battered and afraid.\n\nNo loyal archer, no kind angel.\n\nShe was no guest.\n\nShe was a wraith, made of smoke and savagery.\n\nShe was a ghost, covered in blood.\n\n***\n\nEro watched in stunned disbelief as Aslin craned up to face him. The Tirian man's blood was still pouring out onto her, both of her arms were slick with it. Ero barely spared the man a glance, but jerked forward towards Aslin, outstretching his arms. Fear was coursing through him, but all he knew was that she was in danger, she was hurt, and he must pull her off this man as soon as he could.\n\nBut when he spotted the little dagger still in her tight grasp, dark red with blood, he paused, looking at her face.\n\nHer eyes were wide and sightless, and she was panting, her mouth open. He knew that look. It was the one every soldier wore after their first close contact death. It was pure, unadulterated horror.\n\n\"Aslin . . .\" he whispered, trying to make her recognize him, his hands extended to show her he was unarmed.\n\nBut his movement towards her was too much and she stood off the man, backing away, her eyes darting around her at the dozen or so witnesses.\n\n\"Aslin!\" Ero heard his father exclaim, aghast, as he hurried up to them.\n\n\"Father, no,\" Ero warned firmly, pushing his father back away from Aslin, whose defensive stance said she was still ready to attack.\n\n\"How in all of godsland did you know what he meant to do?\" his father asked Aslin, amazed, and it was the same question resounding in Ero's brain.\n\nHow had she known?\n\nShe said nothing, still panting, but her frantic gaze caught sight of the knife in her hand and with a little gasp she opened her fist and dropped it to the ground.\n\nIt was then that Ero noticed the gash on her thigh, and he felt he might be sick.\n\n\"Your leg . . .\" he swore, taking an involuntary step towards her.\n\nAlready on high alert, her instincts sounded the alarm, and she ran. A blur of white and red darted through a copse of nearby trees and turned sharply towards the nearest building. Ero felt a gut-wrenching wave of worry and heard his own cry as he moved to chase her.\n\nBut then he felt his father grip his upper arm.\n\n\"You and I must go inside, son.\"\n\n\"No,\" he resisted angrily. \"I have to go after her. She saved me.\"\n\n\"Your life and mine besides,\" his father replied grimly, pulling him towards the building whence they had come. \"But you are the heir to this kingdom and our guards must figure out what the hell is going on here before you can go running off in search of her. There could be others.\"\n\nHis head swimming, Ero acknowledged that what his father said was true, though every fibre of his being was screaming at him to find Aslin and take her somewhere safe.\n\n\"She'll go to her room,\" his father murmured, as if reading his mind. \"I'll send a man there.\"\n\nThe next half hour was pure chaos, as the noise and bustle drew more people like a magnet, Tirian and Almanian alike. The Tirian Prince, once located, was astounded, and could not identify the dead man. It took more than two dozen Tirian soldiers before someone could, and when he was finally recognized it was as a comrade from a battle decades ago, with no place in the royal protection guard, a man who had not even sailed with the Tirian fleet. The mystery only deepened.",
        "He wore a Tirian uniform, he was on Almanian soil, and Aslin had known him. What in all of godsland was going on?\n\nEro could see the fear on the Tirian Prince's face that the work of their reconciliation was on the verge of crumbling, but his father clasped the Prince's hand and stayed near him.\n\n\"I don't understand,\" the Prince said, shaken. \"My men tell me a woman killed him, a Tirian woman.\" His tone implied it could not be possible.\n\n\"Yes, our own guardian angel, so it seems,\" his father murmured, looking worriedly at Ero.\n\n\"She is in her room?\" Ero asked, waiting for confirmation.\n\n\"I sent someone,\" the King answered vaguely. \"He didn't come back, so I assume so.\"\n\n\"That's not good enough, Father,\" he answered impatiently. \"I must go to her.\"\n\n\"I'd rather you wait until the guards finish their sweep.\"\n\n\"I'll wait no longer,\" Ero growled, breaking away from the group and half running in the direction of her room.\n\nHe disregarded his father's attempt to call him back, and once in the hallway the urgency doubled, and he broke out in a sprint towards her apartments. The area was desolate, and the door to her room was open. He flew in, calling her name and going from room to room, finding nothing, as he had feared. Even as he left her room his mind frantically began categorizing a list of the places he thought she might be, places they had been together, places he had known her to go with Bitta.\n\nAs the hours crept on his fruitless search expanded ever outwards, every once in a while punctuated by an encounter with an Almanian guard or royal he recognized. He'd seize them, no matter their station, and demand if they'd seen anyone by Aslin's description. Each time he described her, slender and pale, in a soft pink gown that would be covered in blood, he felt the import of the moment sink further into him. The words felt so foreign as they left his tongue.\n\nThe woman he loved, a Tirian woman, covered in a dead man's blood. Blood she had spilt for him. She had killed, to save him.\n\nIt was beyond love, he realized, this wondrous and terrifying thing that they shared. It was a grafting of their souls. It was utter, unsoiled devotion.\n\nAnd now, he could not find her, his other half, in the moment of her extreme need.\n\nShe would think that he had abandoned her, the unrelenting voice taunted him. She would feel so alone. Exactly what he had sworn to himself that she would never feel once they landed in his homeland.\n\nAnd so he kept searching, even as the late afternoon turned into evening, not stopping to eat or even see his father. Dimly he began to fear that she had left the complex altogether, had run into the city itself, or even the docks, searching for a boat to hide away in that would take her far away from him and everything he represented. The gnawing feeling stabbed at his stomach as he searched on in the most unlikely of places, places he knew she had never been to, the launderer, the winter pantry, the children's craft room. With his loops he came back to both her rooms and his half a dozen times, thinking surely she would eventually go there. His voice was hoarse from calling her name fruitlessly into the open, quiet air. It was no longer fear, but instead a kind of deadness inside. He would not find her.\n\nAs he opened the door to the rooftop garden, he thought at least he would finally be able to scream there without causing a scene. He stumbled forward into the open, empty space, the sun setting low in the sky with just the faintest of red orange light suffusing the city below. Lanterns were glowing all over and the people were loud, dancing and singing in celebration of the war's close. News of the Tirian assassin would be repressed, his father had already decided, it being better for both sides that the armistice went untainted. So jubilee reigned, and he watched it for a long while, trying to breathe deeply, knowing he should rest for the long search of tomorrow. He would assemble the army and they would sweep the island until they found her. If she had stowed away on a ship bound for Almania, then he would sail too.\n\nEventually he felt the weight of his eyelids pressuring him to sleep, and he turned away from the ledge back towards the door, scanning the garden halfheartedly.\n\nThere Aslin sat on the concrete. He could see her torso and her legs where she sat awkwardly, her hands splayed as if to prop her upright. Her hair was a pale yellow swath obscuring her face. His heart kickstarted in disbelief.\n\nHe stumbled over, coming in front of her, but still she did not see him. Her eyes were closed lightly, her breath slow and deep as if she slept sitting up. There was dried blood all over her. It was the eeriest sight he had ever beheld.\n\n\"Aslin,\" he whispered, his voice tremulous as he reached to brush her hair away from her face.\n\nHer eyes flew open and she jumped, scrambling backwards and scraping her palms and knees against the rough concrete. She stood with difficulty, her limbs seemingly asleep, and swayed on her feet as she peered closer at him. He followed her movements, unable to stop himself now, and enfolded her in a tight embrace.\n\nFor a moment she stood docile in his hold, and he moved even closer, pressing their bodies together as he whispered thanks to all his gods and her god as well, to every deity that ever protected over humankind.\n\nBut too soon she began to struggle out of his embrace with a rending cry, stumbling several paces away and looking down at her blood stained hands. Her eyes were darting wildly over their surface, her breath coming fast now.\n\n\"Why did I do it?\" she whispered to herself, panicked. She turned her hands over only to see more blood and gasped, rubbing her hands down the fabric of her ruined gown.\n\n\"Aslin,\" he moaned, feeling sick to his stomach. \"Come with me, ilya, come with me now.\"\n\nShe shook her head vehemently, her hands skimming over her body as if in search of the source of all this blood.\n\n\"Why did I do it?\" she asked again, louder, her voice breaking.\n\n\"Is it because I love you?' she went on, looking at their surroundings, dazed. \"Surely that is not reason enough to kill a man. What have I done?\"\n\nEro's world stopped with her words. He stopped breathing, his eyes open and fixed on Aslin, every movement of his muscles paused.\n\nShe loved him.\n\nShe seemed unaware of the import of the words. She kept speaking, half to herself, half to him, pacing on the rooftop restlessly.\n\n\"When I saw him I just knew. I knew he was going to hurt you.\"\n\nEro's breath came back to him in a painful rush, and he took a step towards her, though she didn't seem to note his presence. She was wringing her hands, and he tried to take them in his, but she pulled away.\n\n\"I couldn't let him hurt you,\" she moaned, rocking back and forth slightly and squeezing her eyes tight.\n\nHe folded her again in his embrace, if only to still her frenetic motions, and ground her.\n\n\"You've saved my life, chela,\" he murmured, and she did still in his arms, though she did not hold him. Not wanting to frighten her, he kept his embrace loose, running his hands over her hair, her dress, trying to soothe her.\n\n\"I can never go home,\" she said flatly, and he tensed.\n\nShe pulled back, the realization just occurring to her. She looked up at him, but her eyes were glazed and unfocused.\n\n\"They would try me for treason. Or murder. I would hang.\"\n\nEro felt a swift wave of emotion crash over him, and despite his intentions he gripped her upper arms tightly and shook her once.\n\n\"I will not let that happen,\" he promised, his voice breaking.\n\n\"The rest of my life in this strange place,\" she said softly, looking out into the glow of the night lanterns illuminating the curves of the buildings below. He was frightened by her tone, this unrecognizable, otherworldly Aslin who felt miles away even in his arms. He shook her again, unable to find a reply.\n\n\"That is, if I am even allowed to stay,\" she added in a soft, despairing laugh.\n\n\"You will stay with me and never leave,\" he commanded harshly, feeling the strength of his grip around her slender arms, knowing he was bruising her, and forcing himself to let go.\n\nShe said nothing, still looking out calmly into the half-dark of city night, the wind lifting long strands of her loose hair away from her, as a lover would. He saw a splatter of small red droplets on her cheek and neck, and his face crumpled, a strangled cry of grief escaping him.\n\nThe sound caught her attention, and she looked at him then, her eyes focusing.\n\n\"Ero,\" she whispered, frowning. Her hands went to his chest, smoothing over the fabric of his shirt, gliding up to his neck, his throat. He inhaled sharply, his breath hitching with emotion.\n\n\"You are . . . you are unharmed?\" Her voice wavered as she searched for his nonexistent injuries, and he crushed her close, tears falling, wishing only to take all that she was feeling inside himself.\n\n\"I am well, thanks to you, my sweetness, my warrior woman,\" he murmured into her hair, his arms wrapping tightly around her. Faintly he felt her hands continue their search for wounds, patting his back, his abdomen, finding nothing.\n\nEventually she twisted away, looking with confusion at the sky and their surroundings, as if seeing them for the first time.\n\n\"How long has it been?\"\n\nHis eyes darted over her face, seeing her earlier trance begin to slip away.\n\n\"Many hours, love. I've been searching for you everywhere.\"\n\n\"I don't even remember coming here,\" she replied faintly, and as she took a step away a chill swept through her, though the night was not cold. \"I feel so odd, Ero. Like electricity in my veins.\"\n\n\"It is shock,\" he explained, following her closely. He would not let her get close to the roof's edge. \"It's your body's way of coping with what happened. Your instincts tell you to run and hide. It is what happens to most soldiers at first. It happened to me.\"\n\nShe wrapped her arms around her chest, her mass of hair undulating in the breeze. \"It will stay this way?\"\n\n\"No,\" he rushed to answer. \"No, I swear it. You will rest, and it will fade. Come with me now, and I will help you.\"\n\nHe touched her elbow lightly and she turned, looking up at him gravely. She was still in shock, but she was herself once more, thanks be to all the gods.\n\n\"The police are here?\" she asked tremulously, and emotion threatened to overtake him once more.\n\n\"No, darling,\" he reassured her gently, taking her hand in his. \"Many people saw what happened. It is very clear that you acted in my defense. There is no doubt of that.\"\n\n\"I need to talk to people now?\"\n\nHe shook his head, feeling the day must have aged her soul by a generation.\n\n\"No, Aslin, now all you need to do is rest.\"\n\nHe led her slowly back to his apartments, calling for food and wine. He ran a bath, keeping the water very hot. She was docile as she stood in front of him and he undressed her slowly, removing her clasps, her gown, her underskirt. On one thigh he saw a kind of leather garter, its holster empty. He removed it, turning to the other thigh to assess her wound, which had stopped bleeding and was thankfully superficial. Guiding her into the water, he leaned her back, and wordlessly began to wash her.\n\nHe took his time, never having washed a woman before, trying to be gentle and slow in his movements. He massaged her scalp with shampoo and rinsed it clean, pouring cup after cup of warm water over her to remove the suds. Taking a bar of soap he smoothed it over her skin, working the lather up and taking all the dust and blood from her. With a small bristle brush he cleaned under her fingernails. He knew, from experience, that tonight it was very important that Aslin feel very, very clean.\n\nHe had thought she might want to talk, or cry, but she lay submissive in the water, her eyes lightly closed. He was grateful for that, reluctant to let her see how pink the bathwater had turned, pulling the drain before wrapping her directly in his robe and carrying her over to a large sofa where food lay waiting.\n\nThey both ate, he more heartily than her, but after she finished a glass of wine he urged another on her and she accepted, her gaze drowsy. He carried her to his bed and laid her down, calling for a healer.\n\nWhen the healer arrived and began to clean the cut on Aslin's thigh, Ero stepped back. He moved towards the bathroom, stripping off his shirt as he watched the healer carefully wrap her thigh in white gauze.\n\n\"You're leaving?\" she asked, and he heard the anxiety in her voice.\n\nHis chest clenched at the magnitude of love he felt, his incredible, searing desire to reassure her that he would stay beside her always.\n\n\"I'm just going to wash before bed. I'll be back in a minute.\"\n\nShe nodded, her eyes darting back to the healer, but when he turned to close the door behind him her eyes had already returned to him.\n\nIt was the fastest shower of his life, he thought, scrubbing madly as if he had only 60 seconds of hot water. When he stepped out of the shower he came out naked, wrapping a towel around his hips, uncaring what the healer saw. The man was just beginning to pack his bag, and Aslin murmured to him her thanks.\n\n\"It is the least I can do for the woman who saved our kingdom. What a good story this will make for my grandchildren,\" the healer smiled kindly, glancing and nodding at Ero before ducking out unobtrusively.\n\nEro climbed in bed, pulling her into his arms. She was languorous and heavy and molded easily against his chest, her face against his shoulder. Ero felt the knot in his chest begin to loosen for the first time that day and he felt his eyes prickle unexpectedly with tears. He wouldn't let her see him cry, trying to blink them away, but they fell nevertheless, adding to the dampness of her hair.\n\n\"I can still see it,\" she whispered, and he shut his eyes tight.\n\n\"Yes,\" he said soothingly, kissing the crown of her head. She would see it for a long time, he knew.\n\n\"Tell me what you see.\"\n\n\"I see Laredo beneath me. I can feel his strength, his body bucking off the ground. He is pained, and confused, but then he looks up at me and I see the moment he recognizes me. It is like he's been slapped in the face. His eyes widen and he says Ryker. My brother's name that I went by at the barracks. Laredo twists, bending at the waist. I know he's going for the knife at his ankle, I see the sheath's fastening is open. I don't even remember reaching for my own knife, I just hear a piercing scream. And it is me screaming, and then I stab him in the throat, the tender part with the artery like we were taught. And the knife goes in so, so easily, so much easier than I thought it would, like through warm butter. And the blood is hot and so much of it is pouring out of him, endlessly, and he says nothing, but he looks surprised that I've done it. He looks at me as if . . . as if I've made a mistake. And my whole body is red and hot and it is his life over me, his life I have taken, and then I see my hands, covered in blood . . .\" she trailed off, lifting her clean hands up.\n\nEro tried hard to calm himself, but the effort of trying to slow his frantic breathing was painful. \"You knew him?\" he whispered, feeling it must be true and yet it was impossible at the same time.\n\n\"He was in my regiment.\"\n\nHe was silent, slipping his hands more tightly around her and lifting her back onto his chest, pressing more of her against him. She settled easily there.\n\n\"Laredo hated all Almanians with a passion, without exception. He said they were demons. Once he told a story about having a prostitute he thought was Almanian and cutting her nipples off with his knife. 'So she could never suckle another Almanian whelp,' he had said.\" Aslin shivered at the memory. \"He would say over and over that if he was ever within reach of the King, he'd gut him like a pig.\"\n\nEro's mind worked over how a man from her regiment could have travelled to Almania and slipped into the Prince's royal guard, and he could not make the pieces of the puzzle fit.\n\nAs if reading his mind, Aslin went on in a low voice.\n\n\"He was a war hero. His back bore dozens of victory markings, I remember. He must have pulled strings. They could not have known what he meant to do.\"\n\n\"Aslin,\" he murmured, feeling overcome. \"I am so, so sorry.\"\n\nShe trembled at his words, pressing her chin down against her chest and drawing her knees up into herself. Frantically he feared she was pulling away from him and made a sound of protest, drawing his own legs up to keep her within the cradle of his body.\n\n\"I trained for it,\" she whispered so softly he could barely hear her. \"But I didn't feel like a soldier. I felt . . . like a wild animal.\"\n\nBefore he could answer she twisted in his hold, turning and wrapping her arms around his neck, burying her face in the warm hollow at the side of his face. With a rush of gratitude he scooped her up entirely against him, caressing her soft body, murmuring against her skin.\n\nHolding her this way had its predictable effect and he stifled a groan of self-loathing, trying to tilt his hips away so she would not feel him hardening. It was the last fucking thing she needed right now, he cursed to himself, wishing for once that her body stirred him less. She moved to fill the space he left as he shifted away from her, and pressed her belly against his flagrant arousal.\n\n\"Forgive me,\" he whispered, and she came onto her knees, never letting go of his neck as she sat straddled across him. Wordlessly she pressed herself close again, returning to his neck, and incredibly, he felt her kissing the cords of his throat. He swallowed painfully, wanting to hold her and bring her this comfort, but unsure of how far he could go without burying himself inside her.\n\nHer kisses grew more urgent, her tongue licking his skin and he closed his eyes, swimming in the crazed sensation of the strangest day of his life. His hands felt her wet hair, the slickness it left on the bare skin of her back, and feeling her he realized she had pulled off her robe. His heart was thudding wildly.\n\n\"Aslin,\" he whispered, grateful and unsure.\n\n\"I need to feel you,\" she murmured shakily, and he sensed desperation in her. \"Alive, here with me,\" she added, her hands trembling.\n\nHe understood then, and came forward, dropping her onto her back on his bed, bending and taking a peaked nipple into his mouth as he tossed aside the towel that had been wrapped around his hips. Naked he returned to her, stroking and licking every part of her body, trying to draw her fear and her pain away and give her only pleasure. When he kissed her mouth she drew her hands around his waist and pulled him down between her legs.\n\n\"Please,\" she begged, arching her hips up to meet him.\n\n\"Yes,\" he whispered, kissing her hotly as the head of his cock found her willing entrance, thrusting within her as his tongue penetrated the reaches of her mouth.\n\nAslin cried out, her body jerking underneath him and momentarily he paused, to see if it was too much, but to his surprise he found her already in the extremity of pleasure, her body arching off the bed as her fingers dug into his back. He grunted, thrusting again to the hilt, and she cried out again, tears falling down onto her temples. He bent, licking them off her face as he moved within her, feeling savage and out of control.\n\nShe was his woman, and she had saved his life.\n\nNever had he known a truth so fully.\n\nHis heart begged him to say the words, to whisper into her ear that he loved her, that he wanted her beside him always, as his wife, his Queen. Never had he craved anything more than to hear her say again what she had let slip unawares on the roof.\n\nBut he could not whisper words of love and promise into the ear of a woman who had killed that day. She would not hear them for what they were, truths that had lived in his heart for weeks now, before he even tasted the bliss that was knowing her carnally.",
        "So he screamed it silently as he filled her, bringing her over and over to the pinnacle of pleasure, kissing her tears away and pouring into her everything he had, everything he was. When at last they were sated, she lay in the curve of his body, his arm and leg draped over her protectively, his mouth pressed against her shoulder. Despite his exhaustion, he waited a long time, feeling finally the slow, deep breaths of Aslin's slumber before succumbing to the darkness himself."
    ],
    "authorname": "Surfacing1440",
    "tags": [
        "fantasy",
        "royalty",
        "combat",
        "assassin",
        "archery",
        "aftercare",
        "self-sacrifice"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/the-archer-part-pt-05"
}
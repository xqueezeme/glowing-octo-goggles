{
    "title": "Sober me vs. Drunk me",
    "pages": [
        "V2\n\n*****\n\n(Ryan) \n\n\"I cannot believe you married Jesse Summer,\" I called out.\n\nI was visiting my dad for the holidays in Los Angeles. I planned on staying a couple weeks since it'd been a few years since we'd seen each other. I'd just gotten in that morning, and in our old habit, we went to work on my car as we caught up.\n\nI was on my back on a mechanic creeper underneath my classic 1965 Mustang. It'd been a gift from my parents on my 16th birthday and I'd been restoring it slowly but surely over the years. It was 90% finished, with all the mechanics being done and now just needed a classic paint job. I was doing standard maintenance on the undercarriage, checking all the seals and bearings.\n\n\"What's wrong with that?\" my dad asked.\n\nI snorted, \"You know damn well,\" I teased. \"On principal alone you should've never talked to her.\"\n\n\"What can I say, she was too beautiful to resist and by the time I found out I was already smitten,\" he said.\n\n\"God save me, pretty sure even mom would give you hell for that,\" I said.\n\n\"Hey, even in Game of Thrones they had to make crazy alliances,\" he said.\n\nChecking one last bolt I replied, \"And look how well that turned out for most of them.\"\n\nHe chuckled, \"Winter is coming.\"\n\nI snorted, \"Yeah, winter is coming.\"\n\n\"Where she'd go anyway?\" I asked.\n\n\"To pick her sister up from the airport,\" he replied. \"You'll like her, she's cute and only two years older than you. According to her sister, she's also a little... wild.\"\n\nI raised an eyebrow as I rolled out from underneath the car but before I could ask further, we both heard a car pull into our driveway. My dad cocked his head.\n\n\"Ryan, come meet your new family,\" my dad said as he walked inside the house.\n\n\"K,\" I said standing up. \"Just let me wash my hands.\"\n\nAs I walked back into the house from the garage, I stopped in our laundry room, which was the transition between the kitchen and the garage. I spent a few minutes cleaning up and checked myself in the mirror. I'd kept it simple today and was wearing sneakers, blue jeans, and a simple black t-shirt. Since I'd planned on doing some mechanical work, I didn't want to wear anything that might get ruined.\n\nI was a little nervous since I was meeting my Dad's new wife for the first time. He was a widow during my high school years, and when I left to join the Marine Corps after I graduated, he apparently started seeing somebody. Deployments and stuff had kept me away for the last few years and I was just now coming home. They'd gotten married the past year and my dad really wanted me to get along with my new in-laws.\n\nTruthfully, I don't know what he was worried about. My mom had died when I was in my teens, so I wasn't concerned about dad's new wife replacing her memory or anything crazy like that. Maybe I would've acted up at a younger age, who knows, but now I was just glad my dad had found someone that made him happy. \n\nI heard the front door open as I walked into the kitchen. A few seconds later two beautiful women walked in.\n\nThe older one instantly looked at me, \"Oh my god, I've been dying to meet you, I'm Jesse,\" she said, coming forward to give me a huge hug.\n\nJesse was lean, with dark hair and huge brown eyes and an easy smile. Right now, she was wearing slim jeans and a light blue blouse. Her relaxed manner and friendliness immediately put me at ease. She held the hug for a while and brought her hand to the back of my neck as she broke away.\n\n\"Your dad talks about you nonstop,\" she said. \"I feel like I already know you. I hope we can become good friends.\"\n\nI smiled and nodded my head, \"I'm sure we will.\"\n\nTurning, she pointed out her sister, \"This is Alice.\"\n\nAlice immediately took her place and gave me a hug.\n\n\"I've been wanting to meet you for a long time,\" she said.\n\nWe spent the next few minutes chatting and talking about what we each did. I knew from my dad most of what they were saying, but it was nice to hear it from each of them. Apparently, they were the only family they had. Their parents had died in a car accident shortly after Alice was born. Alice had been a very late surprise for them, that's why she was 20 years younger than her sister at 24.\n\nAs they talked, I studied them. \n\nIt was hard not to stare at Alice, she was taller than most girls, about a hand width shy of my own six feet. Right now, she was wearing a tight black tanktop with a Harry Potter Gryffindor emblem and denim shorts that looked a size to small. They molded to her firm ass and I could see a bit of cheek peeking out. She was beautiful, with lean muscles and a chest that filled her tanktop. He white blonde hair was in a messy ponytail that went just past her shoulders, she had that smattering of freckles across her face and chest that you get from spending a lot of time in the sun.\n\nAfter a few minutes, dad motioned us out.\n\n\"You two get to know each other, Jesse and I are going to cook up some lunch,\" he said.\n\nI motioned her in front of me as we moved over to the living room, my dad had the Christmas tree set up near the fireplace and was angled so that all the furniture faced it. He must have bought new furniture recently, because none of it was what I remembered, a sofa, loveseat and recliner all in dark suede fabric that was velvety soft to the touch. I went to the recliner and Alice took a seat opposite me on the couch.\n\n\"I'm curious, is that shirt just a shirt or are you a Harry Potter fan?\" I asked.\n\n\"Gryffindor all the way baby,\" she cried out, raising her fist in the air.\n\nI snorted.\n\n\"What, you got a problem with Gryffindor?\" she asked.\n\n\"Slytherin rules,\" I teased.\n\nShe looked at me with mock outrage, \"How can you say that? All the good guys are from Gryffindor.\"\n\n\"You mean all the losers,\" I replied, giving her an exaggerated \"whatever\" look.\n\n\"Are you kidding me right now?\" she asked, her bright blue eyes flashing. \"Please tell me you're joking, please say I'm not going to have to beat you up the first day we meet.\"\n\n\"Aren't we feisty?\" I grinned.\n\n\"Keep dissing my house and I'll show you how feisty I can get,\" she taunted. \n\nI held up my hands in a placating gesture, \"Look, all I'm saying is the Gryffindor house was made for losers.\"\n\nHer eyes narrowed, \"You better explain yourself real fast buddy.\"\n\n\"Okay, Ravenclaw has all the smart people, right?\" I asked.\n\nShe nodded.\n\n\"And Hufflepuff has all the hard workers,\" I continued.\n\n\"Yes,\" she agreed.\n\n\"And we all know Slytherin is willing to do what needs to be done,\" I said.\n\n\"Uh huh,\" she grunted.\n\n\"So you've creating a school with four qualities, you got hard workers, smart people, people that with do what it takes to get ahead, then you got the last group,\" I said, giving a condescending look. \"I guess we'll call you guys 'brave' and give you your own house. Because that'll get you far in life.\"\n\nI gave as much sarcasm as I could muster when I made air quotes as I said brave.\n\nHer jaw dropped.\n\n\"I mean, have you ever put brave on a job application, or even a college application?\" I asked playfully. \"Cause of course, that's what all schools want, a brave applicant.\"\n\n\"Not smart, not hard working, not willing to sacrifice to get ahead, but brave,\" I said mockingly, rolling my eyes and giving her a thumbs up.\n\n\"But they're the heroes of the story,\" she snapped.\n\n\"Yeah, and a year later, what will that get them?\" I replied. \"Face it, anybody from Gryffindor is a loser.\"\n\nShe stayed still for a minute, eyes locked to mine, \"I may have to kick your ass.\"\n\nI laughed.\n\n\"You know, I felt bad about taking your room while I stayed here, now, not so much,\" she said.\n\nMy laughter stopped, \"Wait, what?\"\n\nSuddenly she grinned and held up a hand to her mouth, \"Oh, you didn't know that did you?\"\n\nWith a false tone of sweetness, she said, \"Yeah, I'm sorry, your dad said I can stay in your room and you can sleep on the couch while I'm here.\"\n\nI narrowed my eyes and frowned.\n\n\"Guess house Gryffindor gets the perks and Slytherin has to rough it,\" she sighed with fake sincerity. \"I mean, you guys are willing to do whatever it takes.\"\n\nAt that point my dad called us for lunch and we went into the kitchen.\n\n\"I can't believe you gave her my room,\" I said as we all took a seat at the kitchen island to eat.\n\nMy dad looked up confused, \"Huh?\"\n\n\"My room,\" I stated. \"You gave it away.\"\n\n\"Oh yeah, well we can't have a guest sleep on the couch, besides you're a Marine, you're used to roughing it,\" he said.\n\nI glared at Alice who was smirking with a raised eyebrow, she had a bite of food on her fork and right before she brought it to her lips she mouthed, \"Gryffindor rules.\"\n\n*****\n\n(Ryan)\n\nMy eyes snapped open. For a moment I lay on the couch, blinking the sleep away and mentally clearing the cobwebs. I glanced at the window and could see by the lightening sky that it was predawn. I pulled the blanket off my body and shifted to a sitting position. Glancing around I saw that I was alone so I stood and went to my duffel bag and grabbed some clothes. I only wore sport briefs to sleep so I put on some red knee length running shorts and a black tank top. I stretched my body for a few minutes and then grabbed my sneakers and socks. \n\nHeading outside I went for a light jog. I lost myself in the early morning, focusing on my breathing and the quiet sounds of the waking world. I ran a five-mile circle and stopped on my front porch sweating. By now the sun had fully risen and I caught my breath while admiring the view of the nearby mountains. After a few minutes I started stretching my muscles as I cooled down. Once I finished, I headed inside.\n\nI went to the kitchen to get some water and found Alice there. She was bent over with her forearms on the kitchen island and holding a cup of coffee in both hands while looking at her iPhone. She looked up and smiled as I walked by her to the refrigerator, opening it up and grabbing a bottled water. \n\nI twisted the cap and took a healthy drink as I eyed her from the side. I was trying to keep casual but the fact that she was only wearing a gray sleeveless hoodie that only halfway covered her ass and black bikini panties had my hormones in an uproar. The way she was bent over, the hoodie was giving me some serious sideboob too.\n\nShe shifted and glanced at me. \n\nIn a sleepy bored voice, she said, \"Someone's up early.\"\n\nTaking another sip of water, I shrugged, \"Curse of military life, getting up early becomes a habit.\"\n\nI took another deep drink and tried not to stare, but it was really difficult, especially when she turned away and I didn't have to worry about her seeing me perving on her. I finished the bottle and moved to throw it in the trash, when I turned back, she had shifted position again and now her hoodie was at her waist. With it pulled up higher, I could see most of her hip and could tell her panties were a string bikini.\n\nSomething alerted her, some instinct, and she looked sidelong at me. I fought the urge to look away, she started this, I wasn't going to shy away.\n\nShe met my eyes. Her blue eyes narrowed an infinitesimal fraction, and without really changing her neutral expression, it felt knowing, challenging, teasing in the knowledge of what I wanted and what she was showing.\n\nAn understanding passed between us. The measure of each other being taken, the stakes of the game understood.\n\nI wanted her, I wanted to rip those panties off her and take her right there in the kitchen, roughly pounding into her, making her scream my name in delight, beg me for more.\n\nAs if sensing my thoughts, she raised an eyebrow, giving me a slight chiding shake of her head as she looked back at her phone.\n\nI waited silently to see if she'd say anything but she just kept looking at her iPhone on the counter. \n\n\"What we gonna do for breakfast?\" I finally asked.\n\nShe looked up at me, grinning as if she'd won the contest of wills between us, but I stole a little bit of her thunder by making sure it was obvious I was staring at her ass. She gruffly cleared her throat and I slowly turned my eyes toward hers. \n\nA ghost of a smile crossed her lips and she said, \"How about we get dressed and I'll treat to French toast.\"\n\n\"Sounds great,\" I said.\n\nNeither of us moved. \n\nFinally, she stood straight, walking her coffee over to the sink she dumped what little was left. Then with her back to me she sighed and stretched her arms over her head causing her hoodie to ride high on her waist. Now her cute little peach of a butt was on display in tight black cotton.\n\nIn the middle of her stretch she looked over her shoulder at me with a lazy grin. My eyes flicked to hers but then I made an exaggerated and obvious look down at her ass. \n\nShe turned and trailed a hand across my chest as she walked away. \n\nNever turning back, she said, \"You got 20 minutes to get ready then I'm leaving without you.\"\n\nI went to change and thought about the exchange we just had, the subtle test of wills and struggle for dominance in each interaction. \n\nI met her at the door and we went to a nearby diner for breakfast. After that we spent the rest of the day just hanging out and getting to know each other. I enjoyed the time with her. She was funny, with a dry sense of humor and wickedly smart. Time flew by as she took me to a local park and we walked around talking about our lives and family.\n\n*****\n\n(Alice)\n\nI walked by the kitchen and saw Ryan making dinner. He was looking pretty cute in blue jeans and a black t-shirt that had Marines in gold lettering on the front, it hugged his frame and showed off his lean physique.\n\nWe'd spent the previous day hanging out and I admit that I enjoyed our time together. For a Marine he was surprisingly smart and funny. I figured I'd like him just from the way his dad constantly bragged about him but I did imagine he'd be a little full of himself, instead he was humble. I'd felt a bit flirtatious yesterday morning so I'd walked around in my panties, and there'd been some light brushing of our bodies throughout the day, but nothing too wicked. That surprised me again, I figured he might be more aggressive in response to my teasing but instead he took it in stride.\n\nFor a moment I watched him, his dad had shared pictures with Jesse and me before I met him. He was cute, but the pictures didn't do him justice. There was definitely something about him in person. Plus, most of the pictures were older and military life had filled him out. At six feet, he looked about 170 pounds and from what I could tell it was solid. His physique wasn't over the top muscle, just defined. His jet-black hair was cut short and he had the tanned skin of somebody that spent a lot of time outdoors. I couldn't see them right now, but his eyes were a warm brown with flecks of gold. \n\nRight now, his face was screwed in concentration as he mixed ingredients into a bowl.\n\n\"What you making?\" I asked, entering the kitchen and hopping onto a barstool opposite him at the center kitchen aisle.\n\n\"Dinner,\" he replied.\n\nI rolled my eyes, \"I can see that dork, I meant what are you making for dinner?\" \n\n\"It's my own recipe, I call them seafood snaps,\" he said.\n\n\"Ohhhh, your dad mentioned those, he said they were fantastic, he also said you were a good cook,\" I said.\n\n\"I try,\" he said, looking up at me grinning. \"Want to help make dinner?\"\n\n\"Sure,\" I said. \"What do you need me to do?\"\n\n\"I just added some stuff to the pasta in that bowl right there,\" he said, gesturing with his chin. \"Add that bottle of Italian dressing and mix it all up.\"\n\nI nodded and did what he said, for a few minutes we worked in companionable silence.\n\n\"Kind of unusual for someone your age to be such a good cook,\" I said when I finished.\n\nHe looked up at me and shrugged, \"Not a big secret or anything, after my mom died, dad was always working. Seemed kind of messed up to expect him to work all day then come home and make dinner.\"\n\n\"I'm impressed, most teenagers wouldn't think like that,\" I said.\n\nLooking around like he was checking if anybody was nearby, he turned to me, \"I'll tell you a secret.\"\n\nEyes bright, I asked, \"What?\"\n\n\"Dad's a horrible cook, it was a self-preservation thing,\" he laughed.\n\nI giggled, \"Still, he says that you don't just cook basic recipes, you try your own dishes and some pretty complicated dinners too, that's impressive.\"\n\n\"Thank you,\" he nodded. \"I just kind of took to it, little experiments here and there, it was nice to cheer dad up, coming home to a good meal made it easier on both of us. Reduced the stress of a bad situation.\"\n\n\"That's sweet,\" I said. \"I've heard some crazy other things about you.\" \n\n\"Uh oh,\" he said. \"Like what?\"\n\nI arched an eyebrow, \"You do yoga.\"\n\nHe smiled with a shrug, \"Guilty as charged.\"\n\n\"Is that to pick up chicks or something?\" I teased.\n\n\"Naw, strangely enough, it's a Marine thing,\" he stated. \"I have a Master Sgt. that's kind of a mentor. He told me that in battle, it's not always about moving forward, in today's environments in the cities and stuff, being able to move in multiple dimensions and being limber is important.\"\n\nI nodded my head, \"Never thought about that, but it makes sense.\"\n\n\"That's what I thought,\" he said. \"And I can tell you after two combat deployments, he was right. Being limber, being able to move through doors and windows, increased flexibility, it all helped.\"\n\n\"The more I talk to you, the more impressed I am,\" I admitted.\n\nHe shrugged again and looked down. \n\nTaking his bowl, he began to spoon the mixture on slices of sourdough. \n\n\"You can put a lid on that and put it in the frig,\" he said.\n\nI nodded and did as he said. Then turned to the sink and started washing some of the dirty utensils.\n\n\"I also heard a story about you getting pretty drunk recently,\" I teased.\n\n\"Oh my god,\" he groaned. \"Dad is making way too big a deal about that.\"\n\nI laughed, \"Oh yeah, why's that?\"\n\n\"He knows I rarely drink...\"\n\nI interrupted, \"Wait, what, a Marine that doesn't drink?\"\n\nHe shook his head ruefully, \"Yeah, I know, I get it all the time.\"\n\n\"So why did you get drunk?\" I asked playfully. \"Girl break up with you?\"\n\nHe sniffed, \"I wish.\"\n\nI looked at him skeptically, \"A cutie like you doesn't have a girl?\"\n\nHe tilted his head, \"Too many deployments and stuff, just haven't had the chance to meet many girls, and I'm not really a one-night stand kind of guy.\"\n\nI eyed him in disbelief, \"No hit it and quit it.\"\n\nHe met my gaze and didn't flinch, quietly he said, \"I prefer to hit it repeatedly till she can't think straight and passes out.\"\n\nMy eyes widened and I swallowed, he never broke my stare.\n\nI blinked first and looked away, suddenly shy. I made a point to rinse some dishes and he went to the oven to put a tray in before he turned back to me.\n\nClearing my throat, I looked back at him \"Uhm, okay, about this drinking binge.\"\n\nHe held my gaze a moment, then walked to the refrigerator and pulled out a bottle of crown and a coke. Getting ice from the freezer and working methodically he made two drinks and handed me one.\n\n\"When I do drink, I drink good stuff,\" he said.\n\nAs I took the drink his fingers grazed mine, for a moment we held them there as he looked into my eyes, I flushed red but acted nonchalant as I took a sip and nodded.\n\n\"Anyway, again, it's no big mystery or anything crazy, all my friends use me as a DD,\" he said.\n\nContinuing his story, \"One night somebody asked if I just wanted a single drink and I waved him off, he said that one drink wouldn't hurt.\"\n\n\"At that point I asked him, how do you know? Do you even know what .08 feels like?\"\n\n\"At first, he was all 'Everybody knows that,' and he launched into what the classes have taught us and all that crap.\"\n\n\"Then I interrupted him, I know what they teach us, but do you know what .08 feels like? Have you ever had a breathalyzer by you and tested yourself after each drink?\"",
        "I nodded my head, \"I've never thought about that but it makes sense,\" I said. \"I'm not even sure what that feels like.\"\n\n\"Exactly,\" Ryan replied. \"Anyway, the rest of the night was spent talking and arguing, but it sparked an idea.\"\n\n\"I went to our unit contact for drug testing, they always have a breathalyzer. I told him what I was doing and got him to teach me how to use it.\"\n\n\"Then, the next weekend I conducted an experiment with my buddies.\"\n\nHe held up his drink and took a sip, \"I'm not a beer fan so I drank crown and coke, I had another friend drink beer, and another one drink wine.\"\n\n\"It was simple, we spent five minutes downing whatever drink, then waited 25 minutes. Then we tested ourselves with the breathalyzer and afterward started our next drink.\"\n\n\"So how far did you go?\" I asked.\n\n\"Until we all tested .4, at that point is was pretty pointless,\" he laughed.\n\nI giggled with him, \"I'm sure it would be.\"\n\n\"What did you find out?\" I asked.\n\n\"The results scared the hell out of me,\" he said, taking another drink.\n\nI raised an eyebrow.\n\n\"When I blew .08, I would've sworn I was stone cold sober,\" he said. \"Even my friends were shocked.\"\n\n\"By the time we could all say we felt a little buzzed, but what I used to think I would probably be okay to drive if I had to, we were all at .18.\"\n\nI sipped my drink, \"Really?\"\n\nHe nodded, \"Truth.\"\n\n\"It kind of hit home on my friends', even they were surprised,\" he said. \"Ever since then, they still drink, but if anybody says anything to the DD, they lose it.\"\n\n\"I can imagine,\" I said. \"That's kind of scary.\"\n\nHe nodded and looked at the clock, then the oven. Setting his drink down he put on an oven mitt and got the food out.\n\n\"Damn, I may have to come visit you and try that someday. I need to know what certain levels feel like too,\" I said.\n\n*****\n\n(Ryan)\n\nThe next morning, I was relaxing in a recliner when Alice poked her head into the living room.\n\n\"Hey,\" she cried. \"You want to go to yoga with me? It starts in an hour.\"\n\nI shrugged, \"Sure.\"\n\n\"Great, I'll borrow the car from sis,\" she said happily, disappearing with a flash of her ponytail. \n\n\"I expect to be impressed,\" her dwindling voice said. \n\n\"I'll try,\" I called out. \n\nI went and changed into a form fitting pair of black knee length running shorts and a black sleeveless t-shirt. I was standing by the front door when Alice came running around the corner and jumped on my back, wrapping her arms around my neck. The move caught me off guard and I stumbled forward half a step before I caught myself.\n\n\"Hiya,\" she cried. \"Move horsey.\"\n\nI turned my head as she bounced up and down like a cowgirl on my back, wrapping her legs around me so she wouldn't fall.\n\n\"Are you kidding me?\" I said narrowing my eyes and giving her a mock glare.\n\nStill bouncing, she said merrily, \"Hey, steeds don't talk, they mush.\"\n\n\"Mush,\" I said raising my eyes. \"Isn't that for dogs?\"\n\n\"Look steed, I don't care, mush, giddyap, either way, move now,\" she said sternly, pointing one hand at the door.\n\n\"If you think...\" I started to say when the hand she had around my neck slid up and covered my mouth.\n\nBringing her lips close, she bit my ear, making me grit my teeth and hiss. I glared at her. \n\nShe met my gaze with narrowed eyes and whispered, \"If my horsey is good, he gets a rubdown.\"\n\nI raised an eyebrow but didn't try to shift her hand off my mouth. For a moment our eyes locked and instinctually we sensed something. Then she gave me a saucy grin, so I rolled my eyes, shifted her to a better position and grabbed her legs then gave her a piggyback ride to the car.\n\nMinutes later Alice was driving us to the yoga studio.\n\nAfter we got there and parked, she took my hand and walked me into the studio. We bypassed the small front office and went into a comfortably warm spacious main room. It was a beautifully done area, dark hardwood floors and off to the side were dark wood cubbyholes for storing personal items. Next to the cubbyholes was a small water dispenser that had ice and orange slices visible in the glass container and stacked next to that were light blue colored mats for use by the patrons. Off to the side were two doors for bathrooms and another door that must have led to a back room. The other two walls were covered in mirrors.\n\nI took a deep breath, hints of jasmine and lavender hung in the air. \n\nWe must have been a bit early because nobody else was in the room.\n\nAlice walked to the mats and picked two up then handed me one.\n\nAlice looked at me, \"I know you're experienced but have you ever done hot yoga?\"\n\nI nodded.\n\n\"Cool, so you know what to expect,\" she said. \n\nI started to nod again but at that moment the back-room door opened and out walked a woman in tiny pink thong panties... and nothing else.\n\nMy eyes went wide and I glanced at Alice, she was biting her lip with a quirky expression.\n\n\"Oh yeah, did I mention it was a nude yoga class?\" she said casually.\n\n\"No, you didn't,\" I said through gritted teeth.\n\nThe instructor smiled as she came toward us. She looked about 30-years old, medium height with an athletic build, with black shoulder length hair in a pony tail and bright blue eyes. \n\nI tried not to stare but it was hard not to notice her slim waist and beautiful upturned breasts. She looked like a small C cup with light pink nipples contrasting to her overall creamy white complexion. For some reason the fictional character of Snow White fleetingly crossed my mind. \n\nShe held out her hand as she stood in front of me.\n\n\"Hi, I'm Bunny,\" she said.\n\nI took her hand, \"Like a rabbit?\" I said stupidly.\n\n\"Yep, my actual name is Alex, but everyone calls me Bunny,\" she said.\n\n\"Why?\" I asked.\n\nAlice slugged my arm.\n\n\"Rude,\" she said.\n\nBunny laughed, \"It's okay.\"\n\n\"Ever since I was a kid I've always been moving, can't stay still, my parents said I used to hop around the house like a bunny,\" she explained. \"The name stuck, and now all my family and friends call me Bunny.\"\n\nI nodded, \"Cool.\"\n\nI introduced myself and then Bunny looked at Alice.\n\n\"It's so nice to see you again,\" Bunny said while moving to embrace Alice. \"I'm so glad you made the class today and brought a friend.\"\n\nAt that moment the entrance door opened and a few more girls came through. Bunny smiled at us and moved to greet them, leaving me with Alice. \n\n\"Seriously?\" I asked motioning Alice to the edge of the cubbyholes.\n\n\"What?\" Alice asked innocently.\n\nI sighed, \"Look, I'm not exactly shy, but I will admit, I have no desire to do yoga with my junk hanging out. Unlike you ladies, my stuff tends to flop around and I have no wish to be staring at it in some of these positions.\"\n\nAlice laughed, \"Most nude yoga classes have rules against wearing clothes, but I talked to her and Bunny is pretty lenient. This is an advanced class, so if you're a pretender just looking for a cheap thrill, she's going to notice really fast and ask you to leave.\"\n\n\"Makes sense,\" I said.\n\n\"She'll allow underwear as long as she thinks you're on the level,\" Alice said.\n\nI sighed, \"Fine, let's do this. Do we drop trou out here, or in the bathrooms?\"\n\n\"Either way is fine,\" Alice replied. \n\nAs we'd talked, more people came in and without any preamble began to undress. Given their lack of modesty it didn't feel awkward as I took off my shirt. I folded it and put it in a cubbyhole and then went to my socks and shorts. Alice copied me, shedding her leggings after her shoes. \n\nI looked over at her as she undressed, she didn't hesitate and soon was wearing only a black g-string panty at the same time that I got down to black sport briefs. We eyed each other for a moment and grinned.\n\nWith a quick look at everyone, she turned to face me, putting her back to the class. \n\nReaching out, she placed a hand on my chest, \"You ready for this Winter?\" she asked, using my last name.\n\n\"More than you are Summer,\" I said using her last name.\n\n\"I still can't believe my sister went to the dark side, a Summer marrying a Winter is just wrong,\" she said.\n\n\"I said the exact same thing,\" I chuckled.\n\n\"Summer rules, Winter drools,\" she said teasingly.\n\nI narrowed my eyes, then calmly reached up and lightly tweaked one of her nipples. \n\nHer mouth dropped and her eyes went wide, then she slapped my arm playfully, \"Bad boy.\"\n\nI reached back up and pinched the other nipple.\n\n\"Stop that,\" she growled.\n\nShe glared at me while I smirked but never raised her hands to stop me or made any other movement. \n\nFinally, I motioned my head toward the class, \"Looks like we're starting.\"\n\nWe turned around together to join the class. I did my best to act casual, since I didn't want to give off a weird vibe. There was about a dozen people besides us and the teacher, with three other guys.\n\nAbout half kept their underwear on and the rest were naked. Everybody seemed younger than 30 and in shape. As we moved to a spot off to one side I ended up between the wall and cute dark-haired girl that smiled at me and introduced herself as Kim. Kim was short and pretty with a slim body, small pert breasts and dark brown nipples and a neatly trimmed stripe of black hair between her legs. I introduced Alice and myself as Alice moved in front of me.\n\nThe teacher called the class to order as she stripped out of her panties revealing her smooth waxed pussy. She had us shift to face her, so I ended up at an angle with both Alice and Kim in front of me. \n\nThe next hour was spent completing various poses and exercises. When I first started taking yoga classes I admit I'd felt a little foolish. The complicated poses seemed ridiculous and childish to body health. I wanted to build muscle, strength, and stamina, not twist my body around like a kid on a playground. Still, as I took a few classes and began to enjoy them I realized that yoga did help overall health. \n\nEven in normal classes, it was hard not to notice that the classes were predominantly women and at the beginning I made an effort not to stare at the ladies around me, despite the fact that most were in shape and wore scanty clothing and sport bras. I was always good about not perving on girls in any of the yoga classes I went to but it was really hard not to look around this time. I thought I'd gotten used to beautiful women sweating and stretching their bodies in tantalizing ways around me.\n\nI had not.\n\nOr at least I had not gotten used to it when they were naked or half naked.\n\nIt really was distracting being next to a dozen females with toned, naked, glistening bodies. \n\nIt got even more difficult as Alice and Kim shifted to a bow pose in front of me. Both their tight asses were presented and I was getting an eyeful of Kim's sex too. Looking away was useless, all of the girls were pretty, so no matter where I looked, I saw sexy naked bodies showing everything.\n\nThankfully, the guys took the opposite corners so they weren't in my field of view. Alice would occasionally look back at me and grin. She was obvious about giving my own body appraising stares and she seemed to enjoy flexing in provocative positions in front of me, checking each time she posed to see if I was looking at her.\n\nKim kept looking at me too and I swore she was being as teasing as Alice.\n\nEventually we posed in downward dog, I looked toward the teacher and literally saw a half dozen curvy, tight asses in the air in front of me. Alice and her black g-string, that left nothing at all to the imagination, had the best butt. Two dimples stood out as she flexed and the muscles of her thighs created striations down her legs. Halfway through the pose she looked back to see me checking her out, winking, she gave her ass a small wiggle for me, then nodded over at Kim. \n\nKim was just as distracting, her legs were a little more than shoulder width apart, so when she stretched, I received a very personal view of her mound. Her tight trimmed curls and dark stripe sat above a perfect camel toe of her tight-lipped pussy. As I watched she stretched her neck back and forth looking around the room, shifting back to look at me with a small smile and a wink.\n\nTrying to focus on something else because my dick was getting hard, I looked forward. That was a fail, because two more blonde girls were in front of us, one wearing white bikini panties and the other nude, with a waxed pussy that glistened as she stretched. I idly wondered if it was sweat or some mild level of arousal.\n\nStrangely enough, the bikini panties were turning me on as much as the nudity. They were tiny and barely stretched across her ass and like the other girls, the owner had an excellent body.\n\nThe whole scenario was driving me wild and as much as I tried not to look around, every pose seemed to entice me to do just that. When we went to the warrior pose, I stood and was able to face the mirrored wall, now I could see just about every girl in the class exposing their tits. When we shifted to the opposite side, that mirror reflected any of the girls that I'd missed. I swear I was seeing more naked hot bodies than if I'd been at a strip club. \n\nEmbarrassingly I got a hardon and no matter how I tried to think of other things, looking around at the class of beauties I stayed hard. It was like having an iron bar in my briefs, it refused to go down.\n\nOn one pose Alice looked at me and raised an eyebrow. I gave the slightest shift and flipped her off. This was her damn fault and she knew it. She let out a small giggle and faced back to the teacher.\n\nFinally, the hour was over. I did feel relaxed but shifted to keep Alice in front of me to hide my erection from the other girls in class. Kim walked over to us and with a glance down and a smirk she asked us how we enjoyed the class.\n\n\"Somebody seemed to enjoy it quite a bit,\" Alice said, tilting her head toward me.\n\n\"Really? You have to go there?\" I asked exasperated.\n\nBoth girls giggled.\n\n\"Don't worry about it,\" Kim said, shooing her hand. \"It happens all the time.\"\n\nI sighed, \"Doesn't make it less embarrassing.\"\n\nKim shrugged, \"I think it's kind of cute.\"\n\nWe chatted a few more minutes and Kim gave her number to Alice with talk about getting together for drinks or something while we were here. She gave me a pat on the ass as she said goodbye and walked to the bathroom to get dressed.\n\nThen Alice and I got our clothes and dressed, saying good bye to the teacher as she came around.\n\n*****\n\n(Alice)\n\nWe made it home and together went into the kitchen to get some water. I saw a note on the fridge and grabbed it. \n\n\"Went out to do some last-minute Christmas shopping. Dad\"\n\n\"Looks like they'll be gone for a while,\" I said, handing Ryan the note.\n\nHe handed me a water from the pantry and I uncapped it and took a sip.\n\nHe nodded in between his own drinking.\n\n\"Yeah, I'm sure they'll be gone all afternoon,\" he said.\n\nI turned away and headed to his room.\n\n\"That'll give me time to give you your rubdown,\" I said.\n\nLooking over my shoulder I saw his stunned expression, he gulped.\n\n\"Uhmmm, you were serious about that?\" he asked.\n\nI raised an eyebrow, \"Why wouldn't I be?\"\n\nI giggled as he stammered, \"Uhm, I don't know, I just thought...\"\n\nIt was fun to tease him, I knew how flirty I'd been and of course he wasn't sure if rub down was code for something else. It might include some naughtiness but I wasn't going to give him the full treatment yet.\n\nI tilted my head, \"Well, come on, we haven't got all day.\"\n\nOnce in his bedroom I grabbed the towel I'd been using and laid it on the carpet. \n\nI gestured to the towel, \"Strip and lay down,\" I commanded.\n\nHe looked at me, \"Uhhh, strip strip? Or just strip?\"\n\nI stared at him, the silence building as he turned red.\n\n\"Yeah,\" he muttered and began to take off his clothes, placing them neatly on his bed. He got to his black briefs and hesitated while glancing at me. I raised an eyebrow. He swallowed and hooked his thumbs in the sides and pulled them down. With an embarrassed sigh he laid face down on the towel. I grabbed a pillow and tossed it to him and he turned his head sideways to watch me. I pulled off my shirt and leggings, standing there in sport bra and panties, then grabbed some oil out of my suitcase and straddled his ass. \n\nPouring some oil into my hands I spread it over his back and shoulders. I could tell by how stiff he was that he was nervous. It was cute in a nerdy kind of way.\n\n\"Relax,\" I whispered as I stroked his neck.\n\nHe took a large breath, gained control of himself and blew out the air and relaxed. I felt the difference in his muscles as he allowed me to stroke his body back and forth. I spent a while, kneading his back and shoulders before I shifted down and moved to the side. Then I focused on his legs, thighs, and ass. He tightened up as I dug my thumbs into his ass, but a playful slap on his butt calmed him down again. \n\nDespite his tension, I could tell he enjoyed it when I rubbed his butt. Admittedly, it was a nice butt, very firm and a perfect shape. I resisted the urge to take a bite out of it like an apple.\n\nI took my time, enjoying the feel of muscle underneath smooth skin. Alternately using my thumbs or just stroking up and down. I shifted to either side and after I finished, I smacked his ass and said, \"Turn over.\"\n\nHe cracked an eye and paused, then shrugged and rolled over until he was facing up. I watched his face as I massaged his thighs, but he kept his eyes closed and swallowed nervously. I moved up and down his legs coming closer to his manhood with each stroke.\n\nIt was amusing to watch his shaft slowly grow. It caught my attention on the first stroke that ended near his groin. He'd been soft, but apparently my closeness changed that because it moved from the side to straighten on its own. Curious, I stroked ever closer, and with every stroke I watched it grow harder. I'd never seen a man slowly get hard in front of me, it was fascinating. \n\nI shifted to his other side and did that leg. At this point, his dick was rock hard, reaching out, I casually stroked it a few times during the massage and enjoyed watching it twitch as I worked. I would rub it every minute or so, I didn't want to tease him to much or give him the wrong idea so I kept it light.\n\nI moved to his chest and massaged his tension away. Each of us simply enjoying the moment. Finally, with one last teasing stroke to his shaft, I finished and tapped his shoulder.\n\n\"All done,\" I said.\n\nHe opened his eyes and looked at me then asked, \"Would you like me to return the favor?\"\n\nI thought for a minute, I was tempted, very tempted, but in the end, I shook my head no. \n\n\"I want to, I really do, but it might be best if I took a shower now. You understand?\" I asked.\n\nHe croaked, \"Yeah, might need a cold shower myself after you're done.\"\n\n\"But I will take a rain check, when I've gotten myself under control,\" I said with a small smile.\n\n\"No problem,\" he said.\n\n*****\n\n(Ryan)\n\nIt was the day before Christmas Eve and we'd just finished dinner. Alice and I did the dishes afterward and she told me that I was taking her out.\n\n\"And why am I doing that?\" I asked.\n\n\"Because sis wants some alone time with your dad tonight and knows we're going to be together all day tomorrow and the next.\"\n\nI raised an eyebrow, \"Seriously?\"\n\n\"Yep,\" she grinned. \"Apparently, we've been cramping her style the last few days and she wants to get freaky with your father tonight.\"\n\nI made a disgusted face, \"Awww, why did you have to go there?\"\n\n\"Hey, you think I like the mental image of them going at it like monkeys any better than you, but misery loves company,\" she said. \"But don't worry, I'm going to make it up to you.\"\n\n\"How?\" I asked.\n\n\"I've been texting Kim throughout the day, she's going to meet us tonight. I think she likes you,\" she said.\n\nLater that night, Alice took me to a downtown bar and when I opened the door and she walked in, I swear every guy in the place looked at her. She was gorgeous, dressed in a black long sleeve sweater dress with black thigh-high leather boots. Her hair was teased and fell in waves to her shoulders and she used just a touch of makeup to darken her eyes giving her a smoldering sex appeal. I'd kept it simple in a nice black long-sleeve button up shirt and blue jeans with black Nike's.",
        "The bar was typical with a dark wood counter and tables scattered throughout. The whole place was about half full and had a relaxed vibe. Behind the bar a single male bartender worked, with glass shelves behind him holding various bottles of booze in front of a full-length mirror that went from one side of the bar to the other. The sweet smell of mixed drinks and ladies' perfumes mixed in the air. \n\nI found a couple of stools at the bar and as we took a seat, she looked at me with a frown.\n\n\"What's up?\" I asked.\n\n\"Kim just texted, something came up, she can't make it,\" she said.\n\n\"Bummer,\" I shrugged. \"Guess it'll just be me and you.\"\n\n\"Works for me,\" she said flashing her beautiful smile.\n\nWe both got a rum and coke and then talked about her school and my Marine Corps. She told me about growing up with her sister and their huge age difference. \n\n\"I was very unplanned, but it all worked out. Jesse raised me after our parents died,\" she said.\n\n\"I'll bet you were a troublemaker,\" I said.\n\nBatting her eyes and giving a fake smile, she held a hand to her chest, \"Moi, I have no idea what you're talking about.\"\n\nWe both laughed and I signaled for another round of drinks.\n\n\"I'll be back in a second, got to use the bano,\" I said.\n\nShe nodded as I walked away.\n\nA couple of minutes later I came back and saw that a guy had approached her. I held back for a moment, unsure if she wanted to chat with him or not. There were sparks between us but I didn't want to presume or prevent her from having fun. \n\nAfter all, as flirtatious as we were being, anything with us would be complicated, to say the least. \n\nI signaled the bartender, asking if he'd made my drink. He nodded no, so I had him give it to me now. Then I turned and checked out the bar. It was too bad Kim couldn't make it, I would've had fun with her, and she was definitely giving me some bedroom eyes when we talked at yoga. I thought back to that tight body she had and felt a rise in my pants.\n\nOh well, I was sure I'd have a good night either way. Alice was flirty as hell and didn't seem to mind showing off her body to me. I thought about something happening between us and liked the idea, but it might make the holidays a bit awkward. I chuckled, I could just imagine that, it sounded like something out of a soap opera.\n\nEven if we didn't hook up, I could enjoy flirting and hanging with her.\n\nI glanced in her direction, the guy was sideways to her and their drinks had just come. Something struck me as odd, I watched as he stuck his hand in his pocket. I immediately stiffened and moved closer. From her angle I knew she couldn't see what I saw. When he pulled out his hand, I saw a white pill held between his thumb and forefinger and I saw him squeeze, then he passed a hand over their drinks and handed her one.\n\nMurder in my heart, I pushed past the people next to me causing them to look up.\n\nAlice saw me at the last second and my face must've reflected my emotions because she went wide-eyed and shrank away as I grabbed the guy's neck and slammed his face into the bar. I grabbed an arm at the same time and yanked it forcefully behind his back.\n\n\"Don't drink that,\" I snarled.\n\nThe guy struggled briefly until I said, \"Stop moving or I'll break your arm.\"\n\nThen I pulled it back to show I wasn't joking and he stayed still.\n\nThe bartender was signaling the bouncer and I looked up to see him rushing toward me. Everyone around me was freaking out and looking at me in fear.\n\nRaising my voice, I yelled loud and clear, \"I just saw him put a pill in my friends drink.\"\n\nThe attitude changed like I'd thrown a light switch. Suddenly everyone was no longer afraid but frowning toward him and curious about the situation. When the bouncer made it to me, he paused.\n\nI looked at him, \"I watched him pull a small white pill from his pocket and crush it, then put it in her drink.\"\n\nAlice frowned at the drink and gingerly moved it away from her. Then the bartender and the bouncer looked at me as if waiting to see what I'd do.\n\n\"What's your name?\" I growled.\n\n\"Let me go,\" he cried out, giving a brief struggle.\n\nI twisted his arm harder.\n\n\"What. Is. Your. Name?\" I growled, emphasizing each word.\n\n\"Chad,\" he mumbled.\n\nI paused.\n\n\"Seriously? Your name is Chad?\" I said drily. \"You drug girls and your name is Chad? Are you fucking with me right now?\"\n\nHe tried to shake his head but I grabbed it tighter, \"No, I swear,\" he said, fear in his voice.\n\nI rolled my eyes, \"Unfuckingbelievable. Could you pick a bigger stereotype?\"\n\nAlice snorted in disgust and everyone else smiled, even the bartender and bouncer smirked.\n\nI shifted my arms and looked at the bartender, \"Hold him please.\"\n\nHe seized him, not quite as forcefully as I was holding him, but enough to keep him still. Then I reached into his pocket and searched, seconds later I pulled out two small white pills in a four-pack foil cover. Two were missing. \n\nWithout any noise you could tell the crowd had shifted from a tentative disbelief to a smoldering anger.\n\nOne guy spoke out, \"Did that asshole really just try to drug her?\"\n\nEverybody around me that had watched the scene play out nodded. Small whispers went back and forth.\n\n\"Let him go, me and my buddies want to talk to him outside,\" another guy called out.\n\n\"Hell yes,\" somebody echoed.\n\nThe bouncer looked around frowning, he suddenly looked a little worried that he was going to have to hold the crowd back rather than secure Chad.\n\n\"I'm a nurse,\" one girl said. \"That looks like Rohypnol.\"\n\nThe bartender was already calling the cops and I handed the foil packet to Alice. She looked at it, then looked at her drink.\n\nThe bouncer pulled Chad up and was holding him in an arm-lock. The way Chad looked around I was sure he wasn't going to try and get free, he could tell the crowd was more dangerous.\n\nAs the bouncer turned to move him into a corner until the police arrived Alice stood up and walked in front of him, forcing them to stop. For a moment she looked in his eyes, Chad looked away. When he did, she hauled back and punched him in the nose. Blood gushed and the crowd erupted into oooh's and aaah's, then some small laughter broke out.\n\n\"Damn,\" somebody said.\n\nAlice was seething, standing in front of him I could tell she was about to do more. The bartender had chuckled but then he realized the danger wasn't over. I could tell he didn't want to restrain her, but he couldn't let her beat him up no matter what the crowd wanted. I moved toward her and got between her and Chad, then reaching down I grabbed her hand and held it.\n\nStartled, she looked at me and her body relaxed, she let me pull her away as the bartender grabbed her drink and covered it, putting it on the counter behind him. The bouncer moved Chad to a small corner and stood in front of him, making sure he didn't try to run away. \n\n\"You want another drink?\" the bartender asked Alice. \"On the house.\"\n\nShe nodded yes and we took a seat.\n\nI watched her as she took a sip and began to relax. A few people walked by and would casually reach up and squeeze her shoulder. None of them said anything but she would nod thanks at them.\n\nTwo police officers showed up and we explained what happened. One officer looked at Chad's busted nose, then glanced down at Alice's swollen knuckles. \n\n\"Anything you want to complain about?\" he asked Chad, raising an eyebrow.\n\nChad looked at us and shook his head no.\n\nThe cop smirked and shook his head. Pretty quickly they arrested Chad and took him away. The second officer poured the drink in a container and took it and the pills as evidence. Then the first officer handed Alice a card with his name and the case number on it.\n\nAs he was about to walk away, he said, \"Hey Tyson, put some ice on the hand, it helps with the swelling.\"\n\nShe smiled and nodded and we went back into the bar. \n\nFor a while our mood was somber, Alice sipped her drink and I kept up light talk. I wasn't trying too hard to engage her, just keeping up idle chatter as she worked through her emotions.\n\nAfter a while she shook herself and looked up at me.\n\n\"Okay, we won't let dumbass ruin the night,\" she said.\n\nHer smile seemed forced, but after a deep breath, she regained control.\n\nHer attitude was infectious so I nodded and we toasted glasses. She downed her drink and signaled for another.\n\n\"I can't believe his name was Chad,\" she snorted.\n\n\"Right,\" I said, shaking my head. \"I mean Christ, with a name like Chad you almost have to be a date rapist.\"\n\nAlice giggled, then in a fake male voice said, \"Hi, I'm Chad.\"\n\nI laughed with her.\n\nAlice continued in her man voice, \"Can I buy you a drink sweet thang?\"\n\nWe both laughed harder.\n\n\"There are so many levels that I don't get about that,\" she said back in her normal voice. \"I mean, do you want sex so bad that you'd take a dead lay?\"\n\nI sputtered my drink.\n\n\"EXACTLY,\" I cried out.\n\n\"Like who does that?\" she asked, shaking her head.\n\n\"Hey, I'm with you,\" I said. \"I don't care how hot a girl is, if she just lays there, I'm not going to enjoy it.\"\n\nShaking her head and holding a hand in the air, she said, \"And not to brag, but I am a damn good fuck.\"\n\nI raised an eyebrow.\n\nShe took another drink, then grabbed my arm, \"I'm serious, I'm a fucking awesome lay. I get into it. I moan, writhe, grab that ass, wrap my legs around their waist and scream 'Daddy.'\"\n\nI felt a rise in my jeans and breathed, \"Wow, that's hot.\"\n\n\"Hells yeah,\" she said sneering. \"I ride my man like a bronco cowgirl. Yippie ki yay mutherfucker.\"\n\n\"Hallelujah,\" I said.\n\n\"So why the fuck would a guy want to have sex with someone who's passed the fuck out or oblivious to what's going on?\" she asked with a frown.\n\n\"Beats me,\" I said. \"Some people just don't get it, if it's done right, sex is a two-person sport, not a solo event.\"\n\n\"Fuck yeah,\" she said, clinking her glass to mine. \"Fuck Chad.\"\n\n\"Fuck Chad,\" I echoed.\n\nA few people cheered our toast making Alice look around.\n\n\"Hold me,\" she said as she stood on a rung of her barstool. I held one of her hands so she could balance as everyone looked toward her.\n\n\"FUCK CHAD,\" she yelled, looking around and holding her drink up.\n\nThe other patrons looked at her and raised their drinks.\n\n\"FUCK CHAD,\" they yelled, then everyone took a drink.\n\nSitting back down, she looked at me and sniffed, \"Fucking Chad.\"\n\nI laughed so hard I almost fell out of my chair as she grinned.\n\nAfter a few minutes she got up to go to the bathroom and freshen up. Giving me a kiss on the cheek she disappeared.\n\n*****\n\n(Ryan)\n\nI was still sitting on a barstool sipping my drink when she came back. Taking the seat next to me she looked at me with a sheepish look. \n\nSomething about her attitude bothered me, I frowned and jerked my head up in a questioning manner, \"What's wrong?\"\n\nShe held up one of the little white pills that he'd almost drugged her with.\n\nFor a minute she stared at it, rolling in between her fingers.\n\n\"Where'd you get that?\" I asked.\n\nNever taking her eyes off it she said, \"I took one out of the foil packet when you handed it to me.\"\n\nHer attitude right after had been subdued, but she seemed to shake it off. Now it seemed like she was thinking again and I was concerned that she'd slip back into a melancholy state. \n\n\"You okay?\" I asked.\n\nSnapping out if it, she shook her head and looked at me, \"Yeah, just thinking. Kind of scary how close that was.\"\n\nI nodded, \"Don't worry, I'd have never let anything happen.\"\n\nShe looked back at the pill pinched between her thumb and forefinger, \"Yeah, that's just it, you won't always be there will you?\"\n\nI sensed she was a little freaked out by how dangerous the situation had been, but I was still caught off guard as she shrugged, popped the pill in her mouth and took a swallow of her drink.\n\nI did a double take, \"WHAT THE FUCK DID YOU JUST DO?\"\n\nA few people turned toward us.\n\nAlice smiled and looked around, letting them know everything was okay. After a few seconds they went back to their own conversations.\n\n\"Keep your voice down,\" Alice said putting a hand on my leg.\n\n\"Why would you do that?\" I whispered fiercely.\n\n\"It was your idea,\" she said.\n\n\"MY...\" I started to raise my voice again but she squeezed my leg in warning.\n\nI closed my mouth and eyes and took deep breaths to control myself, after a few seconds I looked at her.\n\n\"Please tell me how this is my idea,\" I said through gritted teeth.\n\n\"You got me thinking about it with your story, the one about knowing what .08 feels like,\" she said. \"I realized I didn't know what Rohypnol feels like.\"\n\nEyes furious, \"I don't know what cocaine or heroin feels like either but I'm not going to find out just because somebody has some.\"\n\n\"This is so incredibly dangerous,\" I continued. \"And it is not even close to what I did. That was alcohol, perfectly legal, and in a very controlled setting. You have no idea how good or bad a quality this drug is.\"\n\nShe held up a hand to stall my rant. \n\n\"Look, I know what you're saying, and you're probably right and maybe this is incredibly stupid. But you're not a girl and this is a real thing, as tonight proves,\" she said holding up her hands, pointing around the bar.\n\n\"That jerk was actually going to try and rape me,\" she said.\n\nThat sobered me up.\n\n\"I know it's dangerous, that's why I'm doing it now, you're my safety net. But I really want to know what this feels like, I want to understand it, that way, if something like this ever happens again, maybe I won't end up with a horror story,\" she said.\n\nI looked at her, she was giving me a level look and I could tell she was serious. I eased up on my aggressive posture.\n\nSensing victory, she grinned and leaned toward me conspiratorially, \"And who better to make sure I'm safe than you?\"\n\nI shook my head and faced the bar, taking a sip of my drink I said, \"I can't believe I'm agreeing to this.\"\n\n\"Yay,\" she said, clapping her hands together. \"I knew I could count on you.\"\n\nI rolled my eyes and she wrapped her arms around my shoulders from the side, \"IF,\" I emphasized, \"I even think something's wrong I'm taking you to the hospital, and afterwards you can explain it to the family.\"\n\n\"Fair enough,\" she breathed in my ear. \"But I'm sure I can count on you to protect me.\"\n\nThen she bit my earlobe and slowly pulled her teeth off, \"Besides, we might have some fun.\"\n\n*****\n\n(Ryan)\n\nAn hour or so later as we walked out of the bar very intoxicated. Alice asked if we could stroll around a few blocks to clear her head. It was a beautiful clear night and the local shops and stores all had Christmas lights on gives the streets a cheery glow. \n\nI agreed, so Alice reached out and took my hand and we casually began to walk around. \n\nAfter a few minutes she looked at me, her eyes bright.\n\n\"We're going to make a deal,\" Alice said. \n\n\"For what?\" I asked.\n\n\"You've taken care of me so far, but I want something more,\" she said.\n\nWith a questioning look, I asked, \"Like?\"\n\n\"I think sober me needs to learn a lesson,\" she said.\n\n\"Uhhhhhh, not sure I'm following,\" I replied.\n\nShe stopped and pulled me to facing her, \"Look, we both agree that sober me went crazy doing what she did, if I have you punish me now, then drunk me is taking the punishment, and I'm not having that. So, we need to come up with a punishment for sober me,\" she said.\n\nI raised an eyebrow and grinned, \"Like what, a spanking or something?\" \n\n\"Hmmm, I like where you're going with that, but sober me might like that too much,\" she laughed.\n\n\"What did you have in mind?\" I asked.\n\nClearing her throat, she looked around then back at me and whispered, \"Well, I embarrassed to say, but when I put some of my clothes in your drawers, I may have found your porn stash.\"\n\n\"Oh god,\" I groaned.\n\nShe giggled, \"Somebody has a thing for bondage and exhibitionism.\"\n\nCovering my face with one hand, \"Christ, that's embarrassing.\"\n\n\"I think it's cute,\" she said. \"And don't worry, it's kind of a thing for me too.\"\n\nI looked into her eyes.\n\n\"Really?\" I asked.\n\nShe nodded.\n\n\"Which brings me to my point, I happen to know sober me has a very ticklish pussy,\" she said.\n\nMy mouth dropped and I looked at her with a stunned expression, \"Uhhh, what?\"\n\n\"I also know for a fact that the more sober me is turned on, the more ticklish her pussy gets,\" Alice said smirking.\n\nWith a confused look, \"How are you going to...\"\n\nInterrupting me, Alice held up a hand, then pointed at me, \"Not me, you.\"\n\n\"Wait, what?\" I stuttered.\n\nRaising both her hands in a 'duh' motion, \"Well, it'd be impossible to tickle my own pussy.\"\n\n\"You want me to do this?\" I asked dumbfounded.\n\nShe nodded.\n\nWe started walking again while I thought about it. After a minute I was still stunned, \"Okay, you need to walk me through this, because I'm confused as hell.\"\n\nGrinning, she said, \"Here's what we'll do. We're going to go to the sex store near here, then I'm going to buy some restraints and a peacock feather. After that, you're going to get a hotel room and then you're going to tie drunk me to the bed and gag me. Then when sober me wakes up, you're going to use the feather to tease me.\"\n\n\"Alright, let's go by the numbers, first, I'm not saying I agree to this, but if we do, I'll gladly buy the stuff from the sex store,\" I said.\n\nShe shook her head, \"No, it has to be me, because we're going to video record me doing it. If you have anything to do with it, then sober me can get mad as hell.\"\n\nI thought a moment then nodded agreement, \"That's fair, okay next issue, sober you is going to be mad as hell when she wakes up tied down. What the hell am I supposed to do about that?\"\n\n\"You agree sober me was crazy tonight, right?\" she asked.\n\nI nodded tentatively, \"I'm not happy with her decision.\"\n\n\"Great, then this is justified,\" she said.\n\nShe held up a hand stopping me as I was about to say something else, \"Look, we're going to video drunk me explaining to sober me why she's getting punished, so sober me can't say a damn thing, because drunk me is the one orchestrating it.\"\n\n\"I'm getting a headache,\" I said drily.\n\nAlice laughed and shifted to wrap her arm in mine.\n\nBiting her lip, she steeled herself, then said, \"If you help me do this, sober me will give you a blowjob.\"\n\nOnce again, I was stunned, I searched her face as we walked, trying to see if she was serious, but she looked forward, never meeting my eyes.\n\n\"So how will sober you be responsible for a debt that drunk you is making?\" I asked.\n\nShe grinned, \"I'll video sober me that drunk me agreed to this and trust me, we always pay our debts.\"\n\n\"I kind of don't feel right about this, I'm supposed to be taking care of you and making sure nothing happens while your messed up,\" I said.\n\nShe stopped and looked into my eyes, holding her hand up to my cheek, \"That's so sweet.\"\n\nTaking a deep breath, she said, \"But taking care of me, and helping me get back at sober me are two different things. You don't need to feel bad about this at all.\"\n\nContinuing, she said, \"Sober me will wake up not knowing what the hell happened. She's going to be mad at first, then she'll try pleading and begging. I'm going to make sure she can't get free or say anything. Then after she sees the video we'll make, you get to tease her mercilessly.\"\n\nI chuckled, \"You have a wicked streak, even against yourself.\"\n\nShe lifted her eyebrows a few times, \"You have no idea.\"\n\n\"Anyway, as long as you do what I ask, don't let her go, just tickle and tease her, then I'll make sure she sees the video with me telling her she owes you a blowjob,\" she said.\n\n\"And you think she'll just agree to that,\" I asked.\n\n\"She won't have a choice, sober me always pays her debts. Since she may not remember any of this, she'll have my video to remind her,\" Alice said.",
        "I shook my head, \"I can't believe I'm agreeing to this. It feels really close to being sketchy.\"\n\nLocking her eyes to mine, she grew serious, \"Do you really think, sober me, drunk me, any me, would really do something like this if she didn't want to, no matter what drunk me said in a video?\"\n\nI was a taken aback by her seriousness, \"You're right, I'm sorry,\" I said.\n\nHer visage softened, \"Don't be, it makes me happy you feel that way. I know I'll always be safe with you.\"\n\nShe pulled my head down a planted a soft kiss on my lips that lasted a few seconds. When she pulled away, she looked into my eyes, neither of us spoke. The kiss hadn't been overly sexual but it was much more than friendly and for a moment we held each other.\n\nThen she closed her eyes and buried her face in my chest, I wrapped my arms around her and we stood there for a while. Finally, she broke away.\n\n\"You have no idea how hard it is for me right now not to tell you to bring me to a hotel room and have mad crazy sex with you,\" she said. \n\nI laughed, \"I may agree to this crazy sober me versus drunk me thing, but I will not be taking advantage of you tonight.\"\n\nShe groaned, \"God, that's equally pissing me off and turning me on.\"\n\n\"As much as I want to, I don't want either of us regretting something in the morning. If we ever push forward past what we are now, we should be level headed enough to understand the situation,\" I said.\n\nShe hugged me tighter, \"You're a good guy.\"\n\nWe broke apart and I took out my iPhone and got us an uber before we started walking again.\n\nAs we walked, I watched her, she was looking all around her and loving the lights. After a moment she broke away and danced around me with her arms raised in the air.\n\n\"Are you feeling a difference yet?\" I asked.\n\nShe nodded, \"Oh, I've been feeling a difference for a while. There is a feeling of lightheadedness, it feels different from being drunk.\"\n\nShe paused and looked at me mischievously, \"There is also a definite lowering of inhibitions.\"\n\nLooking around, then back at me she arched an eyebrow, slowly she dropped her hands to the hem of her sweater dress and grabbed it. With a wicked look she slowly raised it up to her waist, revealing her black lace panties.\n\nI glanced around to see if anybody was watching but we were by ourselves.\n\n\"You're being bad,\" I said.\n\n\"Want to take a pic?\" she asked.\n\nI swallowed, \"I do, but aren't I supposed to be protecting you?\"\n\n\"That doesn't mean we can't be a little bad. What's the point of being drunk if I can't make a few bad decisions?\" she asked.\n\nI grinned and held up my iPhone, snapping a few pictures as she teased her dress back and forth.\n\nNarrowing her eyes, she gave me an intense stare, her voice husky, she said, \"Take my panties off.\"\n\nI stopped and met her stare, with a small nod I stepped forward, she held my eyes with her smoldering gaze and smirk as I dropped to my knees and set my phone down. Then I reached up and slowly pulled her panties down revealing her smooth shaved mound.\n\nAs I pulled them past the top of her boots to her ankles, she said, \"Hand me your phone.\"\n\nI did what she said and kept her panties as she stepped out of them.\n\nAs I started to rise, she said, \"Don't move.\"\n\nI looked up and she said, \"Hold my skirt up.\"\n\nI replaced her hands with mine, holding her skirt at her stomach and she held up my phone and took a few pictures of me. I could tell from the angle that all her lower body was in the picture.\n\n\"Kiss her,\" she commanded, her eyes shining with a breathless excitement. \n\nShaking my head in silent laughter I leaned forward and I kissed her mound. Using my tongue to tease the top of her slit. Tilting my head, I raised my eyes but kept kissing her pussy as she took a few more pictures. Slowly I slid my tongue down, giving her a slow lick from the top of her slit to the bottom while she moaned.\n\n\"Do that again,\" she breathed. \"I want to video that.\"\n\nI did what she asked and afterward she tilted her head back with her eyes closed. A shudder went through her body and she leaned against the building wall.\n\n\"That felt soooo good,\" she breathed.\n\nStanding up, I put her panties in my pocket as she handed me back my phone and fixed her skirt. \n\nOur uber arrived a moment later and I held the door open of the black Ford Explorer he was driving. We got into the back seat, with Alice behind the driver. She pulled out her phone and checked her maps, then showed him where to go as he put it into his system.\n\nLeaning back, I relaxed as he drove us. \n\nMy phone buzzed and I looked down. I had a text from Alice.\n\nAlice: I'm not wearing a bra.\n\nI looked at her and chuckled.\n\n\"Prove it,\" I dared.\n\nHer eyes flashed, \"I was hoping you'd say that.\"\n\nShe grabbed the bottom of her dress again and wiggled it over her hips and up, pulling it over her head and off in seconds. \n\nTossing it to me, I barely managed to grab it as I watched her in shock.\n\n\"Any more dares?\" she asked. \n\nI looked to the driver but he hadn't noticed yet.\n\n\"Are you going to stay like that?\" I whispered.\n\nShe shrugged and relaxed back into her seat, closing her eyes. \n\nWe made it to the all-night lingerie store and she got out on her side while I grabbed her dress and followed. The driver looked stunned as she waved goodbye while I shrugged helplessly and followed her into the store. When she opened the door, the cashier's jaw dropped. I glanced around, there were a few other customers but nobody else noticed her yet.\n\nWithout hesitation she walked up to the clerk. \n\nLooking at his name tag, \"Dave, I need to know where your bondage stuff is.\"\n\nDave didn't answer, he was too busy looking her up and down with a stupid expression on his face.\n\nAlice snapped her fingers a few times, \"Dave. Dave, up here Dave. Do I need to put on my clothes David? Will that get your attention?\"\n\n\"Huh,\" Dave stuttered finally looking into her eyes.\n\n\"Good boy David, help me out and you can look all you want, but when I talk to you, I expect you to look into my eyes,\" she said, making a V with her fingers and pointing at her eyes. \"Comprende?\"\n\nDave nodded stupidly.\n\n\"Good boy, now tell me where the bondage stuff is,\" she commanded.\n\nDave lifted an arm and pointed to a far section of wall.\n\nAlice looked where he pointed and nodded, \"Perfect.\"\n\nLooking back at Dave she asked, \"One last thing Dave, if I stay like this will you hook me up with the employee discount or do I have to get dressed?\"\n\n\"Dis... discount,\" Dave stuttered.\n\nShe reached a hand up and patted his cheek, then using a tone one reserved for pets she said, \"Good boy.\"\n\nTurning to me, \"If you wouldn't mind video recording the rest of this.\"\n\nI pulled out my phone and followed her as she walked to the back wall and started looking at a pair of leather wrist restraints. \n\n\"Do you know that every night she gets naked and stays on top of her bed for about 20 minutes in the off chance you'll walk into her room and 'accidentally' see her?\" Alice asked, making air quotes.\n\n\"Really?\" I asked.\n\nShe looked around, most everyone had noticed her at this point and had their phones out taking pictures. \n\nShe nodded her head, \"It's true. She's even used her vibrator a few times like that, hoping you'd see her and she'd pretend to be embarrassed.\"\n\n\"Would she be embarrassed?\"\n\nAlice scoffed, \"Hell no. She'd pretend but she'd be thrilled. She's had alternate fantasies. One, you take the vibrator and finish for her, the other she finishes by herself while you watch.\"\n\n\"Sounds fun,\" I said. \n\n\"To be honest, that's also kind of why I want to do this,\" she said. \"Plus, it'll be such a thrill, to wake up not knowing what's going on, to be helpless as you tease me, I'm getting worked up just thinking about it. It's the ultimate bad scenario done in an erotic way.\"\n\n\"This is so crazy,\" I said.\n\n\"I know,\" she said. \n\nEying me, she asked, \"Do you have anything that you want sober me to do?\"\n\n\"You can tell sober you I like it when she walks around the house in her panties,\" I said. \"And the nude yoga was hot.\"\n\n\"Yeah, she was getting real turned on at nude yoga, between you and Kim, she was soaking wet,\" she said, as she held up one item, shook her head and put it back.\n\n\"Kim? She got turned on by Kim?\" I asked. I pointed out a peacock feather and she nodded her head and grabbed it. \n\n\"Did I not mention she has a bisexual streak? Oh wait, that's me. She denies it, but I definitely have one, so when she lets me out, I've had fun. It's so cute when she wakes up embarrassed,\" she said, winking at a couple near her as the girl gave her a nod of approval.\n\n\"So you've been with girls?\" I asked.\n\nGrinning evilly, she nodded her head, and gestured to the wall.\n\n\"Who do you think the first person to ever tie me up was?\" she asked. \n\n\"No way,\" I breathed.\n\n\"She tries to hide it, but like I just said, she was crushing on Kim at yoga. She didn't really have anything planned when she invited you two out, but the idea of hot tub skinny dipping with you and Kim crossed her mind a few times,\" Alice said.\n\n\"That's hot,\" I said. \"But we need to come back to that first time tied up thing, I really need to hear that story.\"\n\n\"Mmmm, remind me another time, I'll give you all the juicy details,\" she said, she paused, holding up a pink ballgag and looking at me questioningly.\n\nI nodded.\n\n\"Alright, I think I've found everything I want, let's make some more videos,\" she said.\n\n*****\n\n(Alice)\n\nMmmmm, slowly my sleep filled eyes opened to the incoming light. I glanced over and noticed Ryan partially opening the curtain letting in a small stream of light to the room. I lazily took in his toned body, all he was wearing were black sport briefs and he looked delicious. I started to roll over to watch him but couldn't.\n\nConfused, my brow furrowed. I looked to my right arm and saw a leather cuff buckled around my wrist. I twisted it and saw white cotton rope looped through a ring that kept me strapped down. My eyes snapped to my other arm restrained in the same way. \n\nWith dawning horror, I looked to my legs and saw my ankles tied to either corner of the bed. I even had cuffs wrapped around my thighs with ropes pulling them wide, keeping me from closing my legs at all.\n\nEven more mortifying was the fact that I was completely naked and no blanket covered me. I spent a brief moment straining my muscles against my restraints but after a few seconds I realized I was securely tied and had no chance of getting free without help.\n\nI was dumbfounded that Ryan would do this to me. Sure, we'd been flirty, but this was too damn far. Anger coursed through me. When I got free, I was about to have a very livid conversation about limits.\n\nI tried to say something and realized there was a pink ballgag in my mouth. Shaking my head from side to side I tried to push it out of my mouth with my tongue but it was useless. \n\nFrustrated, I relaxed back on the bed and looked toward Ryan, he was watching me with a small smile on his face.\n\nI felt my anger and embarrassment rising. I wasn't sure how I got into this position but obviously he had something to do with it. There was no way I could have done this on my own.\n\nI tried to think how I got into this mess but for some reason my brain was fuzzy. I know had a serious attraction to Ryan, but waking up tied and gagged with my legs spread wide and my sex on display was a bit much, even for me. I'd done pretty crazy things in my life, but this was topping the list fast.\n\n\"Morning beautiful,\" Ryan said, leaning back against the wall.\n\nI flipped him off and growled through my gag. My brain was fuzzy and I was trying to blink sleep from my eyes but I was getting really mad. \n\nI was also fighting the sinking feeling that Ryan had taken advantage of me throughout the night. I wasn't sure what was going on, but my bit of a crush on him didn't explain this situation. A surge of disappointment in his actions flashed through me.\n\nMy faced betrayed my emotions because he cleared his throat.\n\n\"Before you get all mad, I have something to show you,\" he said.\n\nRyan walked to the small desk by the bed, for the first time I noticed an iPad propped up.\n\nI watched as Ryan touched the play video button.\n\nAn image of me calmly wearing nothing but my boots in the middle of a store popped up. In the background I could see lingerie and sex toys. Wide-eyed, I watched people in the background smiling and pointing at my nakedness. Then the video Alice spoke.\n\n\"Hey babe,\" video Alice said. \"If your seeing this you probably just woke up.\"\n\n\"I imagine you're a little disoriented and maybe getting a bit mad, probably at Ryan, since he should be standing there.\"\n\nI was confused, I looked back at Ryan but he was watching the video.\n\nVideo Alice looked to whoever was holding the camera and blew them a kiss, \"Thanks sweetie for taking care of us.\"\n\nI heard Ryan's voice off screen, \"Anytime.\"\n\nFocusing back on the camera, video Alice smirked and dropped her voice to a throaty whisper, \"If all went according to plan, you've woken up very helplessly tied, and very, very naked.\"\n\nVideo Alice grinned like a Cheshire cat, \"I'm here to let you know that Ryan had nothing to do with it, it was all me.\"\n\nVideo Alice paused and I looked to Ryan, he shrugged with a fake sorry look and gave a helpless chuckle as the video continued. Video Alice's voice snapped me back toward the iPad.\n\n\"You have been a very bad girl,\" video Alice said as she scolded her finger. \"For once drunk me is innocent and sober me is the bad one.\"\n\n\"So drunk me decided that sober me needs to learn a lesson,\" video Alice said matter of factly.\n\nVideo Alice spent the next few minutes explaining what I'd done and I lay there stunned that I could be so reckless.\n\n\"Ryan and I decided sober me needed to learn a lesson, hence why you woke up the way you did,\" she said holding out her arms mimicking the way I was tied. \n\n\"Since usually drunk me is the one that causes problems that you have to get us out of, I feel justified in payback,\" video Alice continued holding her chin up and speaking in a prim voice.\n\n\"You will notice the leather cuffs around my ankles and wrists,\" she said holding them up for display. \n\nI looked from the video to my own wrists and ankles and saw they were the same.\n\n\"I bought them so don't look at Ryan,\" she said. \n\nReaching off screen video Alice pulled a pink ballgag of a shelf.\n\n\"In case you're wondering, I also bought the ballgag you're wearing,\" she said looking at the gag then back at the screen grinning. \"I like pink, don't you?\"\n\n\"I decided we can't have sober me waking up and telling Ryan anything or screaming at him, so drunk me had to make sure you can't talk,\" she said.\n\nFrustrated, I shook my head and whined while looking at Ryan.\n\n\"And don't even think about getting him to let you go, Ryan is under strict orders from drunk me not to let sober me go,\" she said narrowing her eyes. \"You're going to take your punishment whether you like it or not.\"\n\nI growled at the screen but video Alice continued, \"I don't even want to hear it from you, your supposed to be the smart one and you left me in charge, deal with it.\"\n\nI gave a frustrated shake of my head.\n\n\"Now, to continue, Ryan and I had a fun time trying to come up with a good punishment,\" video Alice said.\n\nVideo Alice leaned toward the camera conspiratorially, \"He mentioned spanking a couple times so I think that might be a thing for him, you should watch out for that.\"\n\nMy eyes flicked toward Ryan in alarm.\n\nVideo Alice continued, \"But I talked him out of that. Mostly cause he wanted to do it tonight, and no way am I taking your punishment. Any spankings will be done to sober me, drunk me is not playing that.\"\n\n\"At least not tonight,\" she laughed.\n\nVideo Alice winked, \"But I did come up with something interesting that Ryan agreed is wicked, which also explains why you're in the position you're in.\"\n\n\"See, I told Ryan how incredibly ticklish your pussy is, especially when you're turned on,\" she said eyes bright.\n\n\"He didn't believe me at first, but I promised him it was true.\"\n\nMy eyes grew wide in fear and I struggled against the restraints, I spent a minute tugging and straining my body trying to get free but it was impossible. Eventually, I collapsed, chest heaving, my body flushed red from exertion. \n\n\"I told him your reaction to this video would prove it,\" video Alice said drily.\n\nShocked, I realized I'd done exactly what the video said I would. I looked at Ryan with pleading eyes and whimpered. I had to get free, there was no way I could handle being tickled, already my embarrassment was at an all time high, being tickled would be unbearable. \n\n\"Don't waste time giving Ryan those puppy dog eyes, we've already worked out a deal, he's not letting you free,\" video Alice said.\n\nI looked back to see video Alice smiling sweetly.\n\nIn a flash, I fumed and glared at Ryan, shaking my head and signaling him to let me go.\n\n\"And anger isn't going to work either, I've told Ryan all your tricks and we've made some agreements,\" video Alice said.\n\nVideo Alice arched one eyebrow and stood with a hand on her hip.\n\n\"Drunk me,\" she said, gesturing to herself, \"may not be as smart as sober me,\" she pointed to the screen. \"But drunk me still knows you better than anyone, and drunk me is sooooo much shadier than sober me.\"\n\n\"Plus, I know all your secrets,\" video Alice said.\n\n\"That is not the first time you've had a ballgag in your mouth,\" video Alice said raising her eyebrows.\n\nEmbarrassed that I'd admit that to him I looked to Ryan as he watched me.\n\n\"That is not the first time you've woken up like that,\" she continued.\n\nVideo Alice dropped to a whisper, \"And that you have wanted a reason for Ryan to see you exactly like this, and that you're loving it.\"\n\nI groaned and looked toward the ceiling, embarrassed.\n\n\"Oh, I'm sorry, did I say that out loud,\" video Alice said while holding a hand to her mouth in pretend surprise, like she'd accidentally let a secret slip.\n\n\"I've predicted every one of your reactions,\" video Alice observed with a raised eyebrow. \n\nNow she looked to the side, as if she were addressing Ryan directly, \"Do you really think she's not enjoying having that cute little pussy on display for you? I promise, she loves it.\"\n\n\"She's even tried to think of ways that she could walk in on you in the shower,\" video Alice seductively whispered. \"She's wanted to wrap her lips around your dick since the moment she met you.\"\n\nRyan smiled, then pointedly looked up and down my body. I was mortified that I couldn't deny my desire. My body was flushed and my nipples were hard as diamonds, I could smell my arousal and knew my bare pussy was glistening with my own juices.\n\nVideo Alice looked back to the center of the screen and smiled.\n\n\"Slut,\" video Alice said.\n\nVideo Alice locked eyes with me, \"Don't worry, I let him take quite a few pictures, and he promised to video this,\" video Alice said. \"So now it's time for your punishment.\"\n\nVideo Alice reached off-screen again and then held up a peacock feather.\n\n\"Enjoy babe,\" she laughed.\n\nOkay, okay, okay, keep calm. Just get him to look at me.\n\nAs soon as the video ended Ryan picked up the feather off the table and moved toward me. \n\nI gave my best pleading face but he ignored me and waved the peacock feather back and forth as he moved next to me on the bed. \n\nI was breathing through my nose like a racehorse at this point. I whimpered as he lightly touched the feather to my tits.\n\nOkay, okay, I can handle this. Maybe he's not that experienced.\n\nNo sooner had I thought this than he softly teased the feather back and forth across my chest.\n\nI exploded into laughter, straining against the ropes that held me down. I struggled as he moved from side to side, keeping the feather just tickling my nipples and chest. I tried to push up to get a harder, less sensitive touch but he matched me. I shrank away and again, he kept motion with me, relentless in his torture.",
        "After a minute he pulled away and I lay there panting. Even with nothing touching me at the moment I was going wild. I could feel the aftereffects and wanted to crush my hands to my chest in relief. I was also feeling very aroused. I twisted and turned but couldn't move. Laying there, I watched him side-eyed and his smirk infuriated me. I tried to yell through the gag, he may not be able to understand my words but my tone showed I was furious. I wasn't going to let him do this anymore.\n\nInstead of being scared or stopping, he dropped the feather to my stomach and drew it across my skin.\n\nJESUS FUCKING CHRIST!!!\n\nLazily, he moved from my stomach to my sides and up to my arm pits.\n\nI shrieked and thrashed, tossing my head back and forth as he brushed both sides of my body before he stopped.\n\nI lay there whimpering, looking at him with pleading eyes, shaking my head. I was almost in tears and would do anything to get him to stop. Even more embarrassing was the scent of my own excitement and my pussy was soaking wet. It would be impossible for him not to have noticed both. \n\nI thought he'd give me another break but instead he dropped the feather to my mound and grazed it tantalizingly up and down. \n\nMy body exploded.\n\nMy back arched as he tickled my pussy lips with delicate strokes. The thigh cuffs kept me from closing my legs. I was sweating and screaming into the gag. He was unyielding, touching the feather up and down as I stretched and strained, hands grasping the air, toes curling as I fought with all my strength and energy uselessly.\n\nWorse than the tickling, my body was on fire, I could never achieve orgasm this way but it was unmistakably erotic. Heat built between my legs and my nipples ached. Just when I thought I couldn't bear anymore he stopped. I collapsed back into the mattress and lay there breathless, unable to do anything but moan and watch him with half-closed eyes.\n\nHe smiled and pulled out his phone, tapping a few buttons he put it to the side. Then he slowly moved the feather to rest on my mound. He didn't move it, just left it there in a teasing threat. \n\nA shudder went through me.\n\nI whimpered and pleaded with my eyes, hoping he'd take mercy.\n\nThen I heard my own voice from his phone.\n\n\"The trick is the buildup,\" video Alice said. \"Don't start at my pussy, get me worked up. Tease my nipples, tease my ribs.\"\n\nVideo Alice continued, \"I'm going to be furious, panicked, and more turned on than you can imagine.\"\n\n\"BUT NO MATTER WHAT I DO, NO MATTER HOW I THREATEN OR PLEAD. DO NOT STOP. DO NOT UNTIE ME. DO NOT GIVE IN,\" video Alice commanded. \n\nYou've got to be kidding me. I was seriously hating this bitch. I knew it was me, but in my mind, she was separate and if I could've gotten a hold of her, I would've choked her the hell out.\n\n\"And dirty talk is a must,\" video Alice whispered. \n\nI groaned.\n\nRyan leaned forward until his lips were right next to my ear, I tried to turn my head but he put a hand in my hair and locked me facing forward. \n\nGod, that was such a turn-on.\n\nWhispering, he said, \"You have a beautiful pussy, I love how responsive your body is.\"\n\nHis warm breath tickled my ear, I closed my eyes.\n\n\"I'll make you a deal, put on a show for me and I'll take a break from tickling you,\" he said, moving the feather off me. \"Show me how you'd fuck me, show me how much you'd enjoy it. I won't stop, but while you're putting on a show, you won't get tickled.\"\n\nI wasn't sure if this was Ryan's idea or I'd told him when I was drunk but I didn't care. If he wanted a show and that would give me a break, then I'd give him the best show he'd ever seen.\n\nWithout hesitation I arched my back, giving a slow moan. \n\nHe released my hair and sat back.\n\nI didn't think it was possible to spread my legs wider but I managed a little. I ground my pussy up and down, giving slow long moans.\n\n\"You look beautiful,\" he said.\n\nNow I shifted and lifted my chest as much as possible while my ass gyrated into the mattress. I locked my eyes to his and purred.\n\nHis face took on a hard look and he eased the feather to just above my mound, then he growled, \"Tell me, is this pussy mine?\" \n\nDamn, that sent a surge of adrenaline through my body. I quickly nodded yes.\n\n\"Say it,\" he whispered.\n\n\"It's your pussy. It's your pussy,\" I cried through the gag.\n\nIt came out garbled but he seemed satisfied that my cadence matched the words.\n\n\"You like that don't you?\" he whispered.\n\nI closed my eyes and nodded.\n\nHe bent toward me again, his tongue tracing the ridge of my ear and sending a shiver up my spine.\n\n\"You really like that don't you, you want me to fuck you don't you?\" he breathed.\n\n\"Yes, yes,\" I cried.\n\n\"Tell me again who's pussy it is,\" he said.\n\n\"It's your pussy, it's your pussy,\" I moaned, frustrated the gag blocked my words.\n\nI knew I was impossible to understand, but my tone and grunts through the gag were clear, I was saying exactly what he wanted. \n\nAnd at this moment, it wasn't a lie.\n\nHe brought the feather forward and stroked it over my entire body, playing with my tits, my sides and my pussy. He ran it down my legs and arms as I shrieked with laughter, arching my body and twisting back and forth.\n\n\"Keep saying it,\" he ordered.\n\n\"It's your pussy, it's your pussy,\" I screamed through the gag whenever I could find the breath. \n\nMy vision was starting to go black at the edges and I was a mass of sweating, heaving, screaming wreck. My sex was on fire but I couldn't build past the point I needed for orgasm. I lost track of the time and didn't even notice when he quit playing with me. It was pure anguish. \n\nFor more than an hour he talked dirty, tormented, and drove me wild. In between breaks I would writhe my body, putting on a show of how I'd fuck him. I ground my pussy in the air, arched my back, and moaned his name.\n\nAll the while the damn feather touched me. Sometimes for seconds, sometimes for minutes, but each time felt like an eternity. \n\nI lay there soaked in sweat, muscles quivering, unsure if I could move even if he untied me.\n\nIf I could get free, I'd have beaten Ryan to within an inch of his life or fucked him until he passed out.\n\nFinally, he stepped back and put the feather down, I was gasping, chest heaving, with my jaw actually sore from biting down on the gag so hard and choking back frustrated moans and screams. The bed covers were drenched in sweat and I was more turned on than I'd ever been in my life.\n\nMy pussy lips were swollen and my nipples were so sensitive I could feel every movement of air in the room.\n\n\"Don't worry babe, we're almost done,\" he said. \"But before we finish, I want one thing. I'm going to take the gag out, and whether you get tickled one last time will entirely depend on what you say.\"\n\nI nodded my head and swallowed. I knew what he wanted.\n\nHe grabbed his phone and pointed it at me, I saw he was recording but I didn't care. In fact, I welcomed it. He unbuckled the gag and I pushed it out with my tongue.\n\nGiving him my best sexy look, I said, \"This pussy is yours baby, all yours, anytime you want it.\"\n\nWe stared at each other for a moment, then he smiled and panned the camera over my nude, bound body. I wasn't sure if we were playing or not, but I did know at that moment I meant every word I said. If he wanted to fuck me, I'd let him. Right now, I'd agree to anything he wanted, hell, if he wanted to fuck me every time we got together I'd let him, whether I had a boyfriend or not.\n\nMaybe that'd change when I came down off this high, but I was so sexually charged right now I'd agree to anything, consequences be damned.\n\nWhen he put his phone down, I blinked sweat from my eyes as he moved to my legs and unbuckled the cuffs.\n\nI was finally able to close my legs and I gave a relieved sigh as he loosened one of my arms. Once it was free, he moved around the bed. I thought he was coming to undo my other hand but he went to the iPad and touched a few buttons. \n\nWe both paused to look at each other. The tension between us was electric. I stayed perfectly still as he watched me. I wasn't sure what he would do, but I was positive I'd let him do whatever. Finally, he shook himself, swallowed, and turned away.\n\n\"I'm going to take a cold shower,\" he said hoarsely.\n\nI watched him go, relief coursing through my body, mixed with a tinge of disappointment. I wanted him, I knew he wanted me, but I wanted to do things with a clear head rather than off a drunken night, and even though I wasn't feeling drunk or anything right now, this scenario was still off the consequences of that.\n\nI reached for my other arm and began undoing the restraint.\n\nThen the video popped up and video me was on the bed I was currently laying on, naked with a huge grin on her face.\n\n\"Fucking bitch,\" I muttered as I worked the cuff off my arm.\n\n\"Now, now, don't be like that,\" video Alice said.\n\n\"Not cool, you know I hate being tickled,\" I said.\n\n\"Bullshit, we both know you love being tickled in certain ways, and that was hot as hell,\" video Alice replied. \"If you hadn't had been so turned on, it wouldn't have tickled. Remember when that asshole Jerk tried it, we didn't flinch.\"\n\n\"His name was Dirk,\" I said.\n\n\"Jerk,\" video Alice insisted. \"And you're missing the point, our pussy is only ticklish when we're very turned on.\"\n\nIt was disconcerting that I was arguing with a video of myself and was able to predict my own actions so well.\n\nVideo Alice continued, \"If it'd been a normal tickling, you're right, we'd be mad as hell. But that, that was sooooo fun and you know it.\"\n\nI sniffed and eyed the bathroom door wondering if I should join Ryan in the shower.\n\n\"But we do have the matter of payment,\" video Alice said.\n\n\"WHAT?\" I exclaimed, shaking my head.\n\n\"Keep your panties on, you didn't think Ryan did that for free did you?\" video Alice said.\n\n\"You've got to be kidding me,\" I said.\n\n\"He knew he'd have to tolerate your anger and pleading so I had to make it worth his while,\" video Alice said.\n\n\"What the hell did you offer?\" I asked myself.\n\n\"We have to give him a Christmas Eve blowjob,\" video Alice said smugly.\n\nMy mouth opened in shock, \"Oh my god,\" I groaned, putting my face in my palm.\n\n\"I know, right,\" video Alice chuckled. \"Don't worry, he took care of us for free, he's such a sweetie, but the whole tickle thing, he was worried about your wrath so I had to sweeten the pot to get him to agree to help me.\"\n\n\"There is no way I'm giving him a blow job tonight,\" I mumbled. \n\n\"Oh yes you are,\" video Alice countered. \"We always pay our debts and you'd better not even think of backing out of this one.\"\n\nFrustrated I clenched my fists. \n\n\"Fucking slut,\" I whispered.\n\n\"I know you are,\" video Alice said and winked at the camera.\n\nThe video ended and I slowly got up and found my clothes, getting dressed while he showered. I untied the ropes and gathered up all the toys into the shopping bag they came in. Moments later he opened the door and emerged looking clean and fresh. I looked down to my own disheveled state.\n\n\"This doesn't seem fair,\" I said.\n\nHe laughed, \"You can always take a quick shower but I'm warning you. I've kept to the agreement between 'drunk' you and me,\" he said, making air quotes.\n\n\"But if you undress right now, all bets are off,\" he finished.\n\nI paused at that, once again temptation surged through me. I was thinking about it but something about him made me pause. I looked closer, his hands were tightened and I could see how white his knuckles are. His body was perfectly still but his nostrils flared. He was barely restraining himself. My own excitement grew, if I gave the word, I knew he'd crash into me like a wild animal. A brief thought of him ravaging my body almost had me nodding approval but I knew the danger of that. Neither of us was thinking clearly. I didn't want massive regret ruining the moment afterward. With a deep breath and force of will I pushed the thoughts aside.\n\n\"As much as I'd like that, it's best if I wait until I get home,\" I said.\n\n*****\n\n(Ryan)\n\nI lay on the couch staring at the Christmas lights, my head propped up with a pillow and my favorite red comforter covering me. I kept telling myself not to expect anything. Not to get my hopes up. She told me 11:00 pm when she was drunk and it was 10:55. I kept telling myself it's no big deal, I can't hold her to something that she said while intoxicated, but still, this girl captivated me. I was crushing on her and the anticipation was driving me wild.\n\nAnd then she was standing in front of me.\n\nI hadn't even heard her come in. She was wearing a small red silk sleep shirt with spaghetti straps that barely covered the juncture of her legs. In the dim light I couldn't tell if she was wearing panties. The Christmas lights gave her skin a soft look and she met my eyes with a warm gaze. Gone was the smirking teasing, the stolen glances, replaced by honest desire, we stared at each other a while. Finally, she broke her gaze and lifted her hand. I hadn't noticed her phone, she tapped a few buttons and then set it on the arm of the couch and dropped to her knees next to me.\n\nWithout a word she pulled back my comforter revealing my black sport briefs. Eyes half lidded, she grabbed the edges of my briefs and then looked into my eyes as she pulled them down my legs. \n\nShe bent down and gave my shaft a teasing lick that caused my breath to catch and my dick to pulse.\n\nA stray lock of her hair covered her face, she absently flicked it away, her hair was free and wild, so she paused and pulled a tie from around her wrist and grabbed her hair into a ponytail. \n\nThe silence and anticipation were turning me on. I was steel hard as I watched her. \n\nOnce her hair was back, she gave me one last look and then turned to grab my shaft, with one hand holding me up she put her lips to the tip of my dick and teased her tongue around the top. \n\nI groaned as she spent the next minute using her tongue to lick up and down my cock. My own phone buzzed a text but I ignored it.\n\nWithout looking up, Alice grabbed my phone and put it on my chest tapping it.\n\nThen she wrapped her lips completely around my dick and began to bob up and down, long strokes with her mouth to the base of my shaft and excruciatingly slow pullback to the top where she would lick the head and then repeat.\n\nI fumbled for my phone, almost dropping it as she pushed down and then did a few quick up and downs.\n\nChecking my phone, I saw she sent me a video. I opened it up and hit play.\n\nAlice showed up in the hotel room, naked with one arm behind her head and laying back on the bed.\n\n\"Hey sexy, I just sent you away and had to make a few videos to send to both of us,\" video Alice said. \"If you're seeing this, it's because I have my lips wrapped around your dick like it's my job.\"\n\n\"I've been told I'm pretty good and I know I'm giving you my A game, so I hope you appreciate this,\" video Alice teased.\n\nI groaned as she once again bounced up and down and licked my head.\n\n\"I told you I pay my debts,\" video Alice said. \"And just so you know, I swallow.\"\n\n\"Oh god,\" I said, pushing my hips up. \n\nTalking to Alice while getting a blowjob was exquisite. I watched as she went up and down. Not looking up, she was using all her concentration and focus on me, her hand moving in circular motions around the base of my shaft and her tongue licking up and down, circling the head.\n\n\"I'm good, aren't I?\" video Alice said. \"The trick is to make it sloppy, you have to really get into it.\"\n\n\"I do have a favor to ask,\" video Alice said.\n\n\"Anything,\" I breathed.\n\n\"I'm going to hold you to that,\" video Alice laughed.\n\nHer voice dropped and a serious look came over her face, \"I want you to return the favor Christmas night.\"\n\nI reached a hand down and grabbed her ass, sliding my hand up her back I tugged her silk shirt, as I suspected, she wasn't wearing underwear and I moved my hand to the crack of her ass and felt her slit from behind.\n\nShe moaned as I teased her, stroking up and down her swollen lips, fingers slick from her juices.\n\n\"Christmas night, MY room,\" video Alice said with emphasis. \"Don't say a word, just open the door and I'll be waiting.\"\n\nEven though I knew video Alice couldn't see me, I nodded.\n\n\"Also, I'm liking the idea of silent sessions between us. So don't talk, just return the favor,\" she finished.\n\nAfter that, the only sound was the wet noise of Alice as she licked and bobbed on my dick. She coated my shaft with her saliva and used her thumb and forefinger circled around the base to move in sync with her mouth while slurped up and down. \n\nI'd always had a hard time cumming from blowjobs, but this time, I felt my buildup quick. I pushed my hips and grabbed her ponytail then started to fuck her mouth. Relaxing her body, she let me pound her throat as my orgasm erupted forth. I tried to pull away but her lips wrapped around my shaft and she grabbed my hips refusing to let go as I pulsed my load into her. \n\nEach throb of my cock she sucked and swallowed, until I was finally spent. Quietly I released her and she pulled away, looking into my eyes as she stood up. Slowly she brought a finger up and traced her lips, licking the tip of her finger. Biting her lip, she brought her fingers into the straps of her slip and shrugged her shoulders, exposing her breasts. Bringing one finger to a nipple she teased herself, slowly tracing a circle around the hardened nub, never taking her eyes off mine. \n\nAfter a few minutes, she took a deep breath, then looked away, replacing her slip and reaching down to pick up her phone from where she put it. With a last glance at me she walked to her room, ruffling her fingers through my hair as she went by me. \n\n*****\n\n(Ryan)\n\nI looked at my phone, 2250.\n\nTen more minutes. \n\nI lay on the couch under a comforter in dark red sport briefs, staring at the lights on the Christmas tree. \n\nI swear this was as bad as being a kid on Christmas. The anticipation was killing me.\n\nTime was passing so slowly, she gave me a specific time and since she showed up exactly as she said she would I didn't want to be any different. \n\nMy mind wandered back to the last two days. It'd been incredible. The teasing her and pictures. Damn, it was easily one of the most memorable sex experiences I'd ever had and we hadn't even had sex!\n\nAnd that blowjob. She hadn't lied, talk about A-game. It was so sexy watching her give me head. Slutty and energetic and intense. Right now, I was hard as a rock from just thinking about it. \n\nAnd her teasing. God, I loved it. The tying her down, the walking around half-naked. Those were huge turn-ons for me. \n\nBut it wasn't just the wanting sex. Today had been great in other ways too. Throughout the day there had been lots of little moments. Every time she went past me, she did something. She would reach out and touch my chest, or stroke my forearm, a few times she ran her fingers through my hair. It sent shivers through me every time she did that and she noticed. \n\nI checked my phone again, two minutes to time.\n\nI eased off the couch and padded to her room. \n\nQuietly I eased the door open and stepped inside. She'd left a small Christmas wreath in the corner with white twinkling lights on to give us light to see each other. It gave the room a cheery feel without being too bright.\n\nI paused and looked at her. She was relaxed on my bed with her legs spread wide, not wearing any clothes. I was stunned by her beauty, her small smile as she watched me. The toned athletic body and tanned skin that glowed under the lighting. I moved forward, closer I could see her nipples were hard and she shifted her legs, keeping them wide for me.\n\nI dropped down at the foot of the bed, using my hands to spread her legs at the knees and simultaneously pulling her toward me. ",
        "She caught her breath but didn't resist, watching me as I leaned forward, ever so slowly bending my head toward her pussy. I brought my lips so close that the warmth of my breath made goosebumps across her skin. Her butt shifted and she let out the smallest whimper. \n\nI brought my tongue out and teased it until it touched her skin, right at the bottom of her mound. She let out a breath, and I slowly, playfully brought my tongue up, taking my time as I licked her slit from top to bottom. \n\nHer breath came out in a sigh and she spread her legs even wider, reaching one hand to my hair and another to cover her mouth.\n\nReversing, I kept the same torturous pace coming back down, making her toes curl as the hand in my hair tightened until I thought she'd break my neck.\n\nI took my time slowly moving my tongue up and down her pussy. Changing tempo, long deep licks, coupled with faster ones that barely touched her lips. I'd stop and push my tongue deep inside her, making her arch her back and whimper.\n\nLooking up, she was biting her hand to keep her whimpers from becoming too loud. My tongue found her clit and I swirled around it, feeling her body stiffen and then her legs clamped together as her ankles wrapped around my back.\n\nWe struggled in silence, her body rocking as I licked and sucked on her bud. I probed her with my tongue, our rhythm increasing and we began to sweat. Faster and faster she moved, my face buried between her legs, matching her speed. Suddenly, she froze, both hands shot to my head and held me, her mouth open in a wide O as her hips convulsed and an orgasm wracked her body. \n\nWhen she finally came down, her body relaxed and she collapsed back onto the bed, her legs going limp.\n\n*****\n\n(Alice)\n\nI lay on his bed utterly relaxed. That orgasm had been intense. All the pent-up sexual energy between the two of us had been delightful.\n\nFrom the beginning I'd enjoyed teasing him, walking around in my panties, taking him to nude yoga, giving him a massage. And god, drunk me versus sober me, that had been insane. I still didn't remember anything past the beginning of that night but I was strangely impressed with myself that I'd come up with such a unique plan of showing off and letting him play with my body.\n\nNow I watched as he stood and moved to the side of the bed. I put a finger in his briefs and pulled, silently he grabbed either side and slid them down.\n\nHis body was just what I liked, lean muscle and smooth skin. His shaft was trimmed close with dark hair and he was erect and thick. Despite my orgasm moments ago I stirred, lust at the sight of him rising in me.\n\nI shifted back to the center of the bed as he moved top of me, his legs between mine, nestled in tight, his shaft rubbing against my lips. I sighed and closed my eyes as he moved his full length inside me. Flexing slightly, I wrapped my legs around his and put my hands on his ass pushing him deeper. \n\nHe felt amazing, his skin soft and pressed to my body, him arms holding him above me, the muscles moving, rippling like living steel. He took his time, gliding in and out of me, holding himself in perfect control. I moved wantonly underneath him, pushing him deeper, shifting my hips toward his, holding us together. We started to sweat and I grew more animated, his control was absolute, steady, driven, pushing deep inside me with each thrust. \n\nAt this point I was climbing his body, digging my nails into his back, growling like an animal. I pressed my lips to his, kissing him savagely. Pushing my tongue into his mouth, claiming dominance even as he took me. He rumbled and let his arms collapse, pinning me to the bed, shifting his hands to my ass, grabbing it, pulling it toward him as he pushed, striving to go even deeper.\n\nIt set me on fire, my own growl escaped my lips as we kept kissing. We were covered in sweat now, our bodies fighting against one another yet in total synchronization.\n\nWe couldn't keep our forms close enough to satisfy either of us. Every possible inch of him that could press against me was, but I wanted more. I tightened my grip and my muscles swelled as he rode me. I felt my buildup, most times it was gradual, a slow anticipation to a beautiful release. This time, I barely had time to register it before my orgasm hit me. I whimpered into our kiss and broke away biting down on his shoulder to keep from screaming.\n\nHe hissed and I grabbed tighter to him, his thrusts coming faster and seconds later his body shuddered as he pulsed inside me, throbbing, sending another mini-orgasm shattering through me.\n\nMy head dropped back and minutes went by as he lay in my arms, both of us breathless. I loved the feel of his sweat slicked body against me. I lazily caressed his back and he stirred, shifting inside me. As he moved, his hardened dick throbbed and I reflexively tightened my legs around him. \n\nCatching my breath, I wiggled my butt and was rewarded with another pressing of our bodies and I started getting horny all over again. He looked up into my eyes and shifted inside me sending a surge through my body.\n\n\"Stop that,\" I breathed, giving him a light slap on the arm.\n\nHe moved again making me gasp.\n\n\"Stop what?\" he asked innocently.\n\nPropping myself up on my elbows.\n\n\"You know...\"\n\nHe tightened, cutting me off mid-sentence as I moaned.\n\n\"Stop that,\" I hissed.\n\nHe flexed, I clenched my teeth and gripped the sheets.\n\nWe stared at each other, his slight grin to my narrowed eyes. I shook my head, then lifted my body, hooking one leg into his I threw my weight and we rolled on the bed. Now I was on top.\n\nHe grabbed my hips, this time I closed my eyes and leaned back. On top now, I grabbed my tits, massaging them, tracing my nipples. He held me still as he began to grind, slowly moving, shifting, taking his time. I moved a hand to my hair then down my body, putting on a show, switching to both hands, running them up and down my sides, cupping my tits, hands in my hair, moaning softly as he stayed slow and steady, using his groin muscles to flex and shift inside me. \n\nIt was torturous and erotic, the slow buildup inside me, the heat and passion as even on top, he controlled me. \n\nI could feel every inch of him, thick, veiny, every time he flexed it moved inside me. Not the rhythmic pounding, but an exquisite teasing. It wasn't quite enough stimulation to let me orgasm but it was more erotic of a buildup than I'd ever experienced. I shifted my gaze back to him, eyes half-lidded, biting my lip I watched his face in concentration. I loved the devotion he was putting toward me, the focus, he wasn't trying to get himself off, he was trying to get us both off. A tremor went through me. He finally moved back and forth, slowly thrusting up and down. I continued to ride him, letting him do all the work, letting my body move wherever he put me. The quiet pleasure was intense and the sensation overwhelmed me. \n\nI tilted my hips, letting him go even deeper, letting out a loud groan as I did. \n\n\"Yippie ki yay,\" I breathed.\n\nPutting my hands on his chest I took control of the game, shifting more of my weight, I began to grind in my own motions. No longer content to let him lead. He relaxed and I took over, pushing back and forth, using my knees and thigh muscles to bring me up and down at my own pace. He stayed still but moved his hands toward my tits, tracing patterns in my flesh, lightly tweaking my nipples, sending chills down my spine.\n\nMy breathing grew ragged and I started to sweat again. Ryan closed his eyes and opened his mouth in excitement. That goaded me on. With slow focused movements I rode all the way up and down the length of his shaft. I'd move to the top, then slide back down with force, grinding into him. I squeezed my hips and my faster clenching his dick with my muscles on every upstroke. \n\nHe growled, a low primal buildup that grew as I took him. My own orgasm built as his animal instincts took over. I abandoned all pretense of rhythm, of control. Gritting my teeth, breathing in harsh gasps I bucked into him, harder and harder as his growl grew in volume. I clamped a free hand over his mouth and kept the other to his chest as I rode him with wild abandon.\n\nMy hair danced around my head as I shook violently and then it hit. A blinding whiteness exploded inside me, my muscles tightened and I shivered in ecstasy. The orgasm riding through my body like a wave, back and forth. Just as my own pleasure was satisfied, Ryan let go inside me, causing shock waves to course through my body like a rock dropped in a pond, sending out ripples, each one diminishing, until at last I fell against him. \n\nThis time I moved so that he was no longer inside me and we lay together. \n\nAfter a few minutes, I said. \"As much as I wouldn't mind sleeping next to you, unless we're ready to explain this, you should go sleep back on the couch.\"\n\nHe stirred, \"I don't really mind explaining it, but not sure about how my dad would feel, so it's probably best to figure this out before we let anybody know.\"\n\nI nodded, \"I like you, but we live hours apart and you're in the military. So we need to decide if this is a get together on holidays kind of thing, a one-time thing, or if we want to make it a full thing.\"\n\nRyan nodded with me, \"Maybe we can talk about it over lunch tomorrow?\"\n\n\"I'd like that,\" I said.\n\nBefore he got up, I reached over and kissed him, my tongue slipping into his mouth in slow teases, playing with his tongue. He grabbed my ass and pressed me tightly to him as I slid a hand behind his neck to stroke my fingers through his hair. My toes played with his and I giggled into our kiss. When we finished, I gently bit his lip and pulled away.\n\n*****\n\nThe end\n\nNote: Comments always appreciated."
    ],
    "authorname": "storm_usmc",
    "tags": [
        "bondage",
        "exhibitionist",
        "feather",
        "gagged",
        "massage",
        "panty",
        "rope",
        "thong",
        "tickled",
        "yoga"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/sober-me-vs-drunk-me"
}
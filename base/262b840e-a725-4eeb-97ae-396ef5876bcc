{
    "title": "The Steamy Chase Ch. 10",
    "pages": [
        "Comments, critiques and tips are welcome. \nDean Broody vs. Kayla Cooper\n\nDedicated to MabelCinnamon\n\n***\n\nKayla stared at the woman approaching her seat, in surprise. Though Kayla was still supposed to be on leave, she was only in the office to pick up some files which she wanted to work on from home. Kayla wasn't even dressed for the office. She looked her usual hot self in jeans and a sexy cowl-neck top. Her head had been bent low whilst she rummaged through her drawer so she hadn't seen who had come out of the elevator when she heard the ping. But when she looked up and saw Lucy Broody, strutting confidently towards her, she froze. What did Dean's mother want in her office, Kayla thought with dread. Was she also coming to show her exactly how disgusted she was with her behaviour like her sons had done? Kayla swallowed nervously and stared at the elegantly dressed woman as she approached. \n\nBut for her face, which clearly showed she was elderly, one would think Lucy Broody was a model. Not only was she tall, but she was extremely elegant. Talk about ageing with style, Kayla thought with inner pride. When Lucy got to Kayla, she simply placed her lovely and obviously expensive Chanel bag on Kayla's desk and opened her arms to Kayla. Kayla didn't hesitate for even a second, she quickly went around her desk and stepped into Lucy's motherly embrace and held on tight. God, she needed that, Kayla thought with a deep sigh as she buried her face against the older woman's neck.\n\n\"Are you okay?\" Lucy whispered, rocking a trembling Kayla as though she were a child. At Kayla's nod, Lucy pressed a kiss to her hair and informed Kayla softly but firmly. \"We're going out for lunch. Get your bag. Now where the hell is Cole?\" \n\nKayla was so surprised at Lucy's orders, she started laughing softly. \"Cole is in his office, Dr. Bro... Lucy.\" Kayla quickly corrected herself when Lucy wagged a finger at her.\n\n\"Good. I'm going to talk to him to give you the rest of the day off so...\"\n\n\"Oh you don't have to do that, Lucy. I'm on leave. I'm only here to pick up a file.\" Kayla said with a smile.\n\n\"Good. I'll still talk to him anyway.\"\n\nKayla laughed at that and pointed at Cole's door. \"Walk right in, Ma'am.\"\n\nKayla couldn't tear her eyes off the door Lucy had gone through. She was still in shock. With a shake of her head, she pushed the file into her bag and locked up her drawer. Then she sat down and waited for Lucy. She didn't have to wait for long. Lucy came out with a laughing Cole, who had his arms around the older woman's shoulder.\n\n\"I promise, Lucy. I'll come by with her on Sunday.\" Cole was saying.\n\n\"I can't wait to finally meet her. When's the wedding by the way?\" Lucy asked, looking up at Cole.\n\n\"We've decided to hold on till she's done with college. Her dad says she can't get pregnant till she's done with college. And my plan is to put a baby in her stomach immediately we step out of that church. So...\" Cole drawled, making Lucy laugh loudly and Kayla, flush with embarrassment. She hadn't even waited for church at all, she thought with shame.\n\n\"That's how it's supposed to be done. But sometimes, nature pushes stubborn people, to make a faster trip to the church.\" Lucy drawled, turning her head to wink at Kayla.\n\nOh no, please don't say anything, Kayla thought frantically. Cole didn't know about her pregnancy. Neither did he know about her deferring her law course. She wanted to be the one to tell him. She just wasn't ready yet.\n\n\"At this particular point, I'd love it if nature gives me that push.\" Cole chuckled. \"So I can blame it on nature.\"\n\n\"You can push nature, you know...\" Lucy retorted making Cole burst into laughter. And this time, Kayla couldn't help but laugh too. \"So I'll be expecting you on Sunday.\" Lucy said and turned to Kayla with a brilliant smile that looked so much like her son's. \"Ready?\"\n\n\"Sure.\" Kayla got up and fell into step beside Cole and Lucy.\n\n\"How's the learning going, Sexy?\" Cole asked Kayla.\n\n\"I'm on it.\" Kayla answered evenly, feeling guilty for lying to her boss and best friend. \"I'll give you a call this evening okay?\"\n\n\"I'll be expecting it.\" Cole grinned.\n\nAfter giving Lucy Broody kisses on both cheeks, Cole left the two ladies alone to go enjoy their lunch, and went back to his office to call Dean. He thought he should inform his friend that the two women in his life were out for lunch. Cole smiled to himself, imagining Lucy and Kayla's obvious topic for lunch...Dean. He just had to tease his friend. Little did he know... \n\n***\n\n\"Fuck, Dean!\" Cole swore, clutching the phone as if it were Dean's neck. \"You shouldn't have broken up with her.\"\n\n\"I know.\" Dean muttered. \"But I was angry. Hell, I'm still angry.\" It had been two weeks since Kayla walked out of his home and he still didn't know how to approach her. \"I wish I could take back what I said, Cole. But...how could she do that to me?\" Dean's frustration could be clearly felt through the phone. \"We are in a relationship for goodness sake. She should be able to tell me anything. That's what people in love do, right?\"\n\n\"Listen to me Dean. We both know Kayla is most comfortable with me when she has problems. But even me, she hasn't said anything to. She was obviously scared and you must try to understand her. She's not as strong or resilient as she lets people think, you know. Besides, she didn't go through with it. Shouldn't that count for something?\" Cole was almost shouting at that point.\n\n\"I was hurt and angry, Cole.\" Dean's voice raised in anger too. \"I felt betrayed okay? I'm only human.\" Then he gave a deep sigh and swore. \"Fuck! I don't know what to do. I told mum just last night that she's pregnant and we've broken up but I didn't go into detail. Now she's going to listen to her side first.\"\n\n\"And that's what you're worried about?\" Cole asked incredulously.\n\n\"Dude, you know my mother. She's going to kill me.\" \n\n\"You have to fix this, Dean. She's pregnant. This is not the time for her to feel alone and depressed. If you really love her as much as you claim, fix this.\" Cole said quietly, his heart heavy. \n\nContrary to what everyone thought, Kayla was a very soft-hearted person. All that toughness was for appearance...to shield herself from people's cruelty. Moving from one foster home to another could do that to people. Cole could imagine the tears Kayla had probably shed alone in her house. His heart went out to her. \n\n\"Please, Dean.\" Cole pleaded quietly.\n\nUnder normal circumstances, Cole would have given Dean hell, but he understood his friend's anger. No responsible man would be happy if the woman they loved did what Kayla had done. But it was pardonable, Cole thought grimly. So he rather curbed his anger and pleaded with his friend to forget about the past and move forward. That was what Kayla needed right then. Not Dean's anger. \n\n\"I know I was harsh but... fuck! You know Kayla, Dean. She's not going to allow me back into her life. We both know that. And it's killing me. I said some really nasty things to her.\" Dean groaned.\n\n\"She said she was going to call me this evening but I'm not going to wait for that call. I'll go to her and have a talk with her. I'll try and see her mindset, know how she feels and see how best you can proceed. You better say a prayer and keep your fingers crossed, asshole.\"\n\n\"I will. Thanks Cole.\" Dean sighed.\n\n\"Talk to you later.\"\n\n***\n\n\"Oh God, you poor, poor child.\" Lucy Broody whispered, covering Kayla's hand with hers. \n\nThey had finished eating at the posh Raby Restaurant. After making sure Kayla was full, Lucy had asked her what exactly was going on between her and Dean. Kayla had told the older woman everything. She had left nothing out...well except the cruel words Dean had thrown at her. Though Kayla knew Dean had meant every word, she also knew he'd been angry. It wasn't her place to get Lucy angry at her son. \n\n\"Has your doctor checked you out?\" Lucy asked with a frown.\n\n\"Yes.\" Kayla nodded. \"The baby's fine. I'm fine.\" She shrugged. \"He doesn't expect any problems.\"\n\n\"Good.\" Lucy murmured, taking Kayla's hand into hers. \"Would you do me a favour, Kayla?\" Lucy asked, looking into Kayla's eyes with so much...anxiety.\n\n\"Anything for you, Lucy.\" Kayla said with a smile and immediately kicked herself mentally. What if...\"\n\n\"I'm sure your own doctor is a good one and more than capable of seeing to you, but would you please allow me to...take that role? You will make me the happiest grandmother alive if you allow me to be your doctor...at least for the duration of the pregnancy. Please.\" The look on Lucy's face was eagerness, hope and pure excitement. \n\n\"Ow Lucy.\" Kayla looked at Lucy with surprise and...some joy. She hadn't expected that from Lucy. Kayla thought Lucy's request was going to be in connection with her and Dean's breakup. But it looked like the woman was more concerned about the baby than its parents' problems. Looking at the excitement in the older woman's eyes, Kayla just knew she couldn't say no. \"I'll be honoured.\" She said with a tremulous smile.\n\n\"Oh honey...\" Lucy immediately stood up and went around the table to draw Kayla into her arms for a tight hug. \"Thank you so much. You have no idea how much that means to me, my dear.\" Lucy beamed and went back to her chair. \"Now, can I see you this Friday?\" Lucy gushed, looking all excited. \n\n\"Why not?\" Kayla laughed. \"What time should I get there? I have nothing doing till I resume work next week so...\"\n\n\"Good. Eleven a.m. will be perfect.\" Lucy said, signaling the waiter for their bill.\n\nAnd for the first time since walking out of Dean's house two weeks earlier, Kayla felt some lightness within. Kayla couldn't stop smiling. She felt happy.\n\n***\n\n\"Cole, I know you mean well but I'm fine.\" Kayla insisted. \"I don't need Dean to survive...\"\n\n\"You need him in your life, Kayla.\" Cole cut in. \n\n\"I don't.\" Kayla replied stubbornly. They were sitting in her kitchen, waiting for the cake in the oven to bake.\n\n\"I don't care what you say, Kay. You both need each other. This is the time to stick together. If not for yourselves, then for your baby. Be sensible here, darling. 'Cause if you act stubborn and cause any misery to that innocent baby, so help me God, I'll...\"\n\n\"Nothing will happen, Cole. Chillax. He said he doesn't want me anymore. I'm not the kind of person to go begging him to take me back. I did say I was sorry but he wouldn't accept my apology. He's entitled to his opinion and feelings. And I did hurt him, Cole. Now I have to concentrate on my baby and do what is right by it. What can I say? Shit happens!\"\n\n\"You're not fooling me with all this hard talk, you know.\" Cole said softly.\n\n\"What else can I do?\" Kayla's voice cracked as she looked down at her entwined fingers on the Kitchen Island. \"What can I do?\" She whispered.\n\nThe two of them sat quietly for a while each lost in thought, till the oven beeped, signaling that the cake was done. Cole stood and went to take the cake out and placed it in front of a now beaming Kayla.\n\n\"At this rate, you're going to be a size twenty by next week, lady.\" Cole drawled.\n\n\"Fuck off, asshole.\" Kayla laughed as she cut a slice of cake and popped it into her mouth. She gave a loud moan, making Cole laugh.\n\nCole opened the fridge and took out a bottle of Shandy for himself and poured a glass of pineapple juice for Kayla.\n\n\"Come on.\" He said to Kayla, who picked up the hot cake and followed Cole into the living room.\n\nThe two friends settled on the couch and ate the delicious hot cake with their drinks whilst they watched the season finale of 'Suites'.\n\nCole saw Kayla yawn at a point and stood up to clear the table. By the time he got back from the kitchen, Kayla's eyes were already shut.\n\n\"Hey, go to bed.\" Cole said softly. \"I'll call to check up on you in the morning, okay?\" \n\nAt Kayla's nod, Cole hugged her and told her to take good care of herself and to remember that he loved her very much. \n\n\"Don't make me cry, you jerk.\" Kayla murmured and wiped at her eyes. \"Tell Briana that I said she has to get ready for a shopping spree. I need to change my wardrobe.\" Kayla purred, making Cole chuckle.\n\n\"Women!\" He muttered and ducked out before Kayla's hand could connect with his shoulder. \"Lock the door.\" He shouted from outside, making Kayla laugh. \n\nAs if she wasn't sensible enough to lock her door, Kayla thought with a shake of her head. Cole was nuts, but she loved him like the brother she never had.\n\n***\n\n\"That's the heart beating.\" Lucy said watching the monitor with Kayla. \"Still too early to tell the sex. As if we care.\" Lucy laughed, making Kayla smile. \n\n\"Dr. Hawk told we should be able to tell when I'm sixteen weeks.\" Kayla said. \n\nShe was already twelve weeks gone. Kayla did a quick calculation in her head. When she had gotten to know of her pregnancy, two weeks before Dean's confrontation, the doctor had said she was already two months gone and that was eight week. Meaning at the time of the confrontation, she was ten weeks pregnant. Currently, it had been two weeks since the breakup with Dean...meaning she was twelve weeks already. Therefore she had four more weeks to go, to know the sex of her baby. Kayla couldn't wait. Though she was curious, she didn't really care about the sex. Her baby was going to be smothered with love no matter what sex it was. \n\n\"It can even be earlier than sixteen weeks.\" Lucy laughed.\n\nShe'd conducted a thorough check on Kayla and told her everything she needed to know. Lucy was happy with all the results and had assured Kayla that, she and the baby were as fit as fiddles. Of course she already knew that, Kayla thought, amused at the excitement in Lucy's eyes. One would think Dr. Lucy Broody had never seen a baby before, Kayla almost laughed out loud. The woman was simply adorable...just like her son, Kayla thought with a pang of sadness. She couldn't help but wish Dean were by her side that very moment, watching their baby's heart beat on the monitor, with her.\n\n\"Dr. Broody?\" A nurse stuck her head in the door. \"Jean and Dean are here. They're waiting in your office.\"\n\nAnd just like that, the part of the monitor that was reading the heartbeat of Kayla herself, went haywire. Her heartbeat increased so fast, Kayla begun to breathe harshly.\n\n\"Oh my God, Kayla calm down.\" Lucy shouted, signaling the nurse to bring her a shot. \"What is wrong, honey?\" Lucy sounded desperate as she took the prepared syringe from the nurse and gave Kayla a quick shot in the arm. \"Kayla?\"\n\n\"I'm sorry.\" Kayla gasped. \"I'm okay.\" But even as he assured Lucy, Kayla's eyes looked frantically towards the door.\n\nLucy Broody didn't need to be Einstein to figure out what had caused Kayla's panic. The twins! Lucy was furious. Thank God for modern equipment, that had picked up on Kayla's stress quickly enough. Anything could have happened. What the fuck had those boys done to Kayla, Lucy fumed? Kayla had mentioned the two of them not being happy with her when they came for her from the hospital. Lucy knew she couldn't possibly ask Kayla what her silly sons had done to her in her current state. But if those boys knew what was coming to them...\n\nLucy turned to see that Kayla's eyes were fluttering, her breath coming out softly. She was going to sleep because of that shot she'd given her. Lucy removed the sensors attached to Kayla and covered her with the covers. She was already fast asleep. Lucy tenderly ran her fingers through Kayla's short hair and bent to drop a kiss on her forehead. She really didn't know why but she adored Kayla as though she were her own child.\n\nWith a sigh, Lucy turned on her heels and headed for the door. Time to confront those silly sons of hers.\n\n***\n\n\"What the hell did you boys do to her?\" Lucy Broody asked without preamble immediately she entered her office.\n\nJean and Dean were in her office to take her out for lunch like they usually did on her birthday. The whole family would go for dinner the following day which was a Saturday. But according to the Broody tradition, her babies got to take her out to lunch whenever her birthday fell on a weekday.\n\n\"Did to who?\" Both men asked at the same time, looking up at their mother with identical faces. If Lucy hadn't been so angry, she would have smiled because she never ceased to find that adorable. She loved her babies to bits.\n\n\"Kayla. She's terrified of you.\" Lucy went to stand in front of her sons with her hands on her hips.\n\n\"Did she say we did something?\" Dean asked.\n\n\"She didn't have to. I have eyes. I can see terror when I see it. And I know my boys. Now I'll ask one more time... What did you do to the poor girl?\"\n\n\"We did nothing...\" Dean mumbled.\n\n\"Well, I might have...given her the look.\" Jean said sheepishly.\n\n\"The look?\" Lucy screeched just as Dean turned to his brother with a bellow...\n\n\"You did what?\"\n\nJean had a way of looking at people that made them feel like they were the very scum of the earth. The family called it the 'vermin look'. The brothers actually went out of their way to sic Jean and his look on people they abhorred.\n\n\"Why would you give Kayla the vermin look?\" Lucy looked shocked. \n\nJean flushed guiltily. \"I thought she had... It was at the hospital. I...I didn't know she hadn't gone through with it then.\"\n\n\"Jean Esau Broody, I've very disappointed in you. How could you?\" Lucy gasped, staring at her son.\n\n\"Mum, my name is not Esau and you know...\"\n\n\"Your name is whatever I say it is young man so shut your beak and listen to me. I...\"\n\n\"I might have also said a few things to her.\" Dean mumbled beside his brother, drawing his mother's furious gaze from Jean to him.\n\n\"And what exactly did you say besides not wanting to be with her again?\" Lucy demanded tightly. \"Oh yes, she told me.\" Lucy hissed when Dean's eyes widened in surprise. \"That vague 'we broke up' was actually you, telling her you didn't want to be with her again, I hear. Now spill...what other nasty stuff did you tell her?\" \n\n\"I...I might have used the words, wicked and cruel and monster at a point.\" It had been giving Dean nightmares ever since.\n\n\"What?\" Lucy whispered.\n\n\"No, I didn't use monster.\" Dean quickly added. \"She did. She said she wasn't a monster.\" Dean actually had the nerve to look relieved.\n\nLucy Broody looked incredulous. \"Oh and you think it's okay because you didn't actually use the word? How about the others? You implied perfectly that she was a monster. That's why she told you she wasn't. Jesus. Haven't I taught you idiots anything? That's not how to treat women. Definitely not a pregnant one.\" Lucy paused and took a deep breath. She was livid. \"I really wish I could take both of you over my knees and tan that hind of yours...\"\n\n\"Mum...\" Dean groaned whilst Jean burst into laughter. \n\n\"Oh you think this is funny?\" Lucy turned her angry gave onto Jean. \"Now this is how it's going to be. You are going to go to Kayla and apologize.\" She addressed Jean. \"This is between Kayla and Dean and you had no right making her feel like filth. I don't care how or where you do it, but you have to do it today. Got that?\"\n\n\"Yes mum.\" Jean muttered, looking down at his shoes. Their mother had a way of making them feel like kids again. The boys knew that would never change.\n\n\"And as for you,\" Lucy turned her attention on Dean, \"we need to have a serious talk. Come by the house this evening.\" \n\nAnd with a final angry look at her sons, she flounced off, leaving her sons to wonder whether lunch was cancelled. \n\n***\n\nKayla sat on the couch with a big jug of strawberry flavoured iced-tea, chocolate chip cookies, and a big bowl of popcorn mixed with roasted nuts. Even as she curled her legs beneath her, she grimaced at the junk spread on the center-table before her. Was this how it was going to be till the baby dropped, Kayla wondered with dread. Her cravings were getting out of hand. She needed help, she thought miserably. What she was doing was only going to get her bloated up for sure but she just couldn't control it. ",
        "She'd had a good sleep at the hospital that afternoon so her plan was to watch the whole of season two of 'Devious Maids'. Kayla poured some of the iced tea into a glass and placed the bowl of popcorn and nuts in her lap. But just as she got comfortable and pressed play on the remote, her door bell chimed. \n\n\"Ow come on...\" Kayla groaned and paused the video. \n\nCarefully removing the bowl of popcorn and nuts from her lap, she placed it on the center-table and got off the couch to go see who was at the door. She was decent enough in her pajamas so didn't give much thought to offending whoever was at the door.\n\nWhen she looked into the pin-hole, Kayla froze. Jean Broody stood outside her door. What the fuck did Jean want, Kayla wondered. He was the last person she expected to see at her door. Well, if he thought she was going to allow him to rain insults on her in her own home, he had another thinking coming. Kayla yanked open her door and glared at the man who looked exactly like the man who was constantly in her dreams...calling her wicked.\n\n\"What do you want?\" Kayla's growl would have made a gladiator proud.\n\nJean raised his hands with both palms out in a gesture of surrender. \"I come in peace.\" He responded softly. \"May I come in please?\"\n\nKayla turned around and stormed off to her seat, sat down and switched to TV. There was no way she was going to waste her series by watching it whilst listening to Dean's brother say God knew what.\n\nJean closed the door and went to sit beside Kayla on the couch. They both silently watched the Glasgow Athletics on TV. Kayla took her bowl of popcorn and nuts and started chewing slowly. She couldn't have described how she was feeling if she had been asked to. It was a mixture of sadness, fear, hope, and more sadness. The feeling was so unsettling. After they'd both silently watched two, four hundred meter men events, Jean finally broke the silence.\n\n\"I'm sorry, Kayla.\" He said quietly.\n\nKayla didn't say a word. But she suddenly couldn't see a thing on the big flat screen TV. The athlete was who currently on the screen, throwing Shot Put, looked like he was doing it in water. Kayla's eyes had brimmed over with tears...all it took was a blink, and tears were sliding down her cheeks. It felt like her chest was being weighed down with huge boulders. The feeling was so disconcerting.\n\n\"I know I hurt you.\" Jean continued. \"It wasn't my place to act that way and no excuse makes how I acted, justified. I'm so sorry. Please forgive me.\" \n\nKayla suddenly reached out to place her bowl of goodies on the table and stood up. She was determined not to make a fool of herself by breaking down in front of Jean. But she barely took three steps towards her bedroom before her composure broke and she burst into uncontrollable sobs. They were so heart-wrenching, Jean rushed to her and gathered her trembling body into his strong arms. Kayla cried like she'd never cried before, wetting the front of Jean's shirt.\n\n\"I'm sorry.\" Jean crooned, rocking Kayla in his arms. \"So, so sorry, angel.\" Jean kept talking softly and soothingly to Kayla till she eventually quieted down. \n\nWith his arms still around her, Jean drew Kayla to the couch they had been sitting on earlier and cradled her against him. Kayla snuggled willingly into Jean's arms, loving his warmth and soothing touch. Surprisingly, she hadn't shed a single tear since Dean had broken up with her on that fateful day two weeks earlier. And it felt good, so very good, to finally let it out. The occasional spasm in Kayla's breathing due to crying for so long only made Jean tighten his hold on her. \n\nGod, his brother was a fool, Jean thought. What happened to Dean's theory of waiting to see whether Kayla would actually go through with the abortion, to know whether they belonged together or not? She hadn't gone through with it for fuck's sake. Why the fuck had he broken up with her anyway? When his brother told him what he'd done, it had hit Jean just how angry Dean had been. Dean was a fun-loving person who joked around a lot but when he got angry, which was usually very rare, his actions were usually unexpectedly over the top. \n\nWith this particular issue, Dean had confided in Jean that he was actually scared to go and see Kayla after talking rather harshly to her. Jean hoped his brother would get the courage to face his woman, and Kayla would find it in her heart to forgive and accept Dean because Dean was damn miserable.\n\nWhen Jean felt Kayla snoring softly in his arms, he picked her up, bridal style and took her to the room he correctly guessed was her bedroom. He tucked her in and bent to drop a soft kiss on her cheek. Then he went back to the living room, gathered Kayla's goodies, took them into the kitchen and sealed them up in Ziploc bags he found. Then he stored the ice-tea in the fridge and came back to the living room to turn off the TV and switched off the lights. Then will a final look around, Jean released the safety catch on the front door and let himself out, knowing he was going to call Kayla in the morning to see how she was doing. Till his silly brother took back his responsibility, Jean vowed to himself that he was going to be there for Kayla. It was the least he could do after treating her so badly.\n\n***\n\nAfter his parents had pointed out to him exactly how stupid he'd been, Dean sat quietly by the pool in his parents' house, deep in thought. He'd never seen his dad so furious and disappointed in him. Not even when Dean had made a bad business decision that had cost Michael Broody's empire a lot of money when Dean had initially taken over the business. His dad had laughed it off and said it was a learning curve. This time was however different. Michael Broody was mad. One thing his father had said that had cut Dean deep was that Dean was worse than all the foster parents who hadn't shown Kayla any love, put together.\n\n\"At least I don't think they'd ever claimed to love her. She didn't expect any affection, understanding or love from them because they never led her to believe they were going to give her that.\" Michael had hissed. \"You on the other hand, abandoned her at the time she needed you most. And you call her cruel and wicked? Looked in a mirror of late? You are the cruel one. I thought we raised you better. She told you she kept the baby and you still allowed yourself to be ruled by your anger and broke up with her? And you think you are the better parent? Damn it!\" The senior Broody had sworn darkly and stood up and started to pace.\n\n\"At least she put that baby first when she finally realized what a gift she'd been given. She even deferred her course to next year because she doesn't think she can cope with the stress of early pregnancy and studies. You could have helped her study and write her exams, damn it. That's what people do when they love people. They help them...not make them so terrified they almost get a heart attack at the mere mention of their names. How could you act so unfeeling? How could you...\"\n\n\"Honey, it's okay.\" Lucy Broody cut off her husband, who was by then screaming, and urged him to go and lie down. \n\nAnd with a disappointing look at Dean, Michael had allowed his wife to escort him to their bedroom. That was when Dean had gone out to sit by the pool, feeling like the very scum of earth. What had he done, he asked himself for the umpteenth time.\n\nWhen Dean heard his mother's footsteps approaching, he turned his head to look at her. She had been so angry with him and Jean that afternoon, she'd sent her secretary to tell them whilst they waited in her office, that lunch was off. He hadn't been able to ask his mother about what she had meant by Kayla getting terrified by merely hearing their names. Had Kayla been at the hospital when they'd gone there? Dean didn't know what to think.\n\nLucy sat down beside her son on the bench and leaned her head against his shoulder. She hated it when her husband went ballistic on their sons. She however knew Dean had totally deserved it. But he was still her baby and her heart went out to him.\n\n\"I'm sorry I ruined your birthday.\" Dean murmured.\n\n\"Don't worry about me. I'm just grateful to be alive.\" Lucy replied quietly.\n\nDean went quiet for a while and spoke again. \"I didn't know she deferred her finals.\"\n\n\"She didn't think she could stop sleeping long enough to study since she was all by herself and all. She did the right thing. You could have helped her though.\"\n\nDean nodded and realized his mother couldn't see him. \"I could have.\" He agreed, silently calling himself every vile word he could think of. \"Was she...was she at the hospital when we came in today?\" Dean's voice was barely above a whisper.\n\n\"Yes.\"\n\n\"Why didn't you tell me? I would have gone to see her.\"\n\nLucy gave a short humourless laugh and sat upright to look at her son. \"Just the mere mention of your name, Dean...all Agnes did was mention that the two of you were in and she almost had a heart attack.\"\n\n\"Jesus.\" Dean whispered.\n\nLucy nodded tersely. \"I had to give her a shot to calm her down. That's how bad it was.\"\n\n\"Fu... Sorry.\" Dean muttered. \"How are she and the baby doing?\"\n\n\"They're fine.\" Lucy responded, patting Dean gently on the thigh. \"I don't foresee any complications.\"\n\n\"You sure she's fine?\" \n\n\"She's fine.\"\n\n\"I've been worried about her. I know she'd kept taking the pill even after getting pregnant since she hadn't known...\"\n\n\"She's okay, baby. I've checked her out thoroughly. Everything is fine.\"\n\nDean nodded. \"She has err...her nipples are itchy all the time. Has it stopped?\"\n\nLucy laughed softly. \"No it hasn't. But I've given her something for it. It's embarrassing and irritating but she'll just have to endure it till the baby comes. Not all women have that problem. It can bring a lot of...pleasure if you know how to...\"\n\n\"Mum...\" Dean groaned.\n\n\"Ow come on, you already know it. Don't be coy. I'm sure you...\"\n\n\"Mum, can we not talk about this right now? Jeez.\" Dean groaned, getting to his feet whilst his mother laughed teasingly.\n\n\"You have to make this right, son.\" Lucy finally stopped laughing and told her son. \"You have to be by her side.\"\n\n\"I'm scared, mum.\" Dean whispered.\n\n\"Of what?\"\n\n\"That she might not take me back. You don't know Kayla.\"\n\n\"You can only know if you try. If she doesn't, you just have to try harder. I wouldn't make it easy for you either if I were in her shoes. You hurt her. Even worse, she's now terrified of you. You have a lot of work to do, my dear.\"\n\nThen Dean blurted out something that made Lucy Broody smile with pure joy. \"I want to marry her, Mum. But now, she won't allow it. She feels marriages that take place because of a baby, never last. It's not because of the baby though. I just don't see myself spending the rest of my life without her.\" Dean muttered sounding so miserable.\n\n\"So it's up to you to convince her that, you don't want to marry her because of some baby. You want her for you. If you play your cards right, she'll be begging you to marry her. No son of mine is a pussy.\"\n\n\"Mum...\" Dean's eyes widened at his mother's choice of words. Then they both burst into laughter. Lucy stood and hugged her son. \"I love you so much, mum. Thanks.\"\n\n\"I love you too, baby. Make me proud.\"\n\nAnd with that, mother and son turned to go back into the house, both lost in their own thoughts.\n\n***\n\nDean stood in Kayla's bedroom, watching her sleep. It was Sunday afternoon and Dean had finally decided to take a bold step. His brother had told him what had happened when he'd come to see Kayla on Friday night. Dean had almost gone out of his mind with anguish. He couldn't believe he'd done that to Kayla...brought her so much pain and sadness. Dean had followed Kayla discreetly the whole of Saturday afternoon when she'd gone grocery shopping with Jean. Dean had never been so jealous of his twin brother as he had been at that moment. Jean had known he was there the whole time but had not said anything to Kayla. Dean hadn't been able to sleep a wink on Saturday night, especially as Cole had also called to yell at him for being too chicken to do the right thing. So on Sunday, he'd resolved to visit Kayla come hell or high water. He still had the key she'd given him so it had been easy getting in.\n\nSo there he stood in Kayla's bedroom, staring down at the woman he loved, sleeping adoringly without a care in the world. Dean smiled when he noticed that Kayla was actually wearing one of his t-shirts, on skimpy, hot jeans shorts. She'd put on a little more weight since the last time he'd seen her. And she looked so adorable and beautiful Dean's breath hitched in his throat. His smile turned into a full blown grin when Kayla brought her hand up to scratch a nipple through the t-shirt. She wasn't wearing a bra so her nipple instantly grew into a pebble, standing out through the soft material. Dean licked his lips in sheer lust. \n\n\"Oh God, I've missed her.\" Dean muttered, reaching down to adjust himself. What he wouldn't give to be buried balls deep inside Kayla's heat right that very moment.\n\n\"What the fuck are you doing here?\" Dean heard Kayla's raspy voice and looked up from the captivating sight of her hardened nipple to see widened intense green eyes, staring incredulously at him.\n\n\"Kay...how are...\" Dean started but got cut off before he could complete whatever question he'd been about to ask.\n\n\"Get the fuck out of here.\" Kayla screeched, jumping out of bed.\n\n\"Baby please...\"\n\n\"I'm not your fucking baby. Just get out.\" Kayla's eyes blazed with anger. How dare Dean show his face in her bedroom of all places? \"Get out before I call the police.\" She yelled.\n\nDean had never seen a woman so angry...well except in movies. And even that, the producer would have to pay a lot of cash for anyone to be able to act like that, Dean was sure.\n\n\"Kayla, listen to me please.\" Dean started retreating backwards. His heart was breaking. Surely he was about to have a heart attack, Dean thought. 'Cause the sharp pain he felt within his chest that very moment was scary.\n\n\"I don't want to listen to whatever you have to say, Dean. Out!\"\n\n\"Kayla, please...\"\n\n\"I haven't killed the baby if that's what you want to know. Now get the hell out of my house.\"\n\nBy then, they were almost to the front door and Dean's eyes stung with unshed tears. \"Kay...\"\n\nKayla opened her front door and reached for the phone on the wall. Whilst looking at Dean, she dialed a number. \n\n\"Please come up.\" She said into the receiver to the security guy who picked up. \"I have an intruder.\"\n\nDean stepped outside. But before Kayla closed the door, she stretched out her hand, palm up.\n\n\"Key.\" Just one word. \n\nDean took a key out of his pocket and placed it into Kayla's outstretched hand. And then he watched miserably as Kayla slammed the door in his face. So much for being courageous, Dean thought wretchedly as he turned to go before the so-called security guy got to him. Because the way he was feeling right then, Dean knew he would probably beat the guy to a pulp and get into trouble.\n\nFuck!\n\n***\n\nAt the other end of the door, Kayla sank slowly onto the floor and breathed hard. She couldn't believe she'd just done that. She'd thrown Dean out of her home. Though it had felt good to do that, she couldn't help but think she'd gone too far. She'd actually called security on him. Talking of sec... Kayla heard a knock on her door and got up to open it to a smiling security man. Really? So if she were truly getting attacked, he was going to come and face her assailant with a smiley face? Idiot! He was no match for her Dean anyway. One would think the company would bring more muscular guys as...\n\n\"Are you ok, Ma'am?\" The smiling guy interrupted Kayla's silly thoughts.\n\n\"I'm fine thank you very much. I scared him off.\"\n\nThe guy looked Kayla up and down with surprise. \"Really.\"\n\nNow, what the fuck did he mean by that, Kayla fumed. Folding her arms under her breasts, she pasted a brilliant smile on her face. \"I've got some skills if you care to know. Thanks and bye.\"\n\nAnd with that, Kayla firmly closed her door and sank back onto the floor. That was when she started shaking. She stuck her hands out in front of her and watched as they shook and quickly clenched them. Then she heard a knock on her door. With a groan, Kayla stood up, ready to tell the security man to back the hell off.\n\nShe yanked the door open and came face to face with Tristan. Before she could even stop to think, Kayla threw herself into Tristan's arms. She didn't cry but her body shook so bad Tristan got alarmed.\n\n\"Hey, hey what's wrong?\" Tristan asked, rocking Kayla gently in his arms.\n\nTristan gently propelled Kayla back into the living room and closed the door behind him. Then he sat Kayla down on the couch and just held her. \n\n\"Wanna talk about it?\" Tristan murmured. And without any hesitation, Kayla started to tell Tristan everything. When she finally got to the part about driving Dean out of her home, a furious Tristan burst into laughter. \"Put it up there girl.\" He laughed as Kayla slapped his raised palm with hers.\n\nKayla couldn't help but laugh too. \"You're nuts you know that? That guy adores you and what do you do? Sit here and laugh at his expense.\" Kayla laughed.\n\n\"Well he loves, loves, loves you. And what did you do? Drive him out of your home.\" Tristan retorted.\n\n\"It felt good doing it, Tristan. I didn't know I was that angry at him till I saw him. I said I was sorry, Tris. And I kept the baby. He still called me names and told me he couldn't be with me. That hurt. A lot.\" Kayla added in a whisper.\n\n\"Do you feel better now? After throwing his arse out?\" Tristan asked.\n\n\"I do actually.\" Kayla said with a grin.\n\n\"Good. Now we've got to get him back...\"\n\n\"No, no don't even suggest that, Tristan. I don't want him back.\" Kayla screeched, moving away from Tristan.\n\n\"You sure about that?\" Tristan drawled.\n\n\"Of course I'm...\" Kayla turned to face Tristan. \"What are you doing here?\"\n\n\"What? Now you want to throw me out too?\" Tristan chuckled.\n\n\"Did he send you?\" Kayla's eyes narrowed into slits.\n\n\"No.\" Tristan laughed. \"I didn't even know you guys had broken up, remember? I need your help actually. But first, you've gotta feed me.\" \n\nTristan stood up and started for the kitchen. \"What do you have?\"\n\n\"Yet to cook.\" Kayla laughed. \"What would you want?\" But Tristan didn't answer. He was already in the kitchen. \n\nJust as Kayla stood up to go to him, there was another knock.\n\n\"What now?\" She groaned as she went to open the door. But Kayla grinned when she saw who was at the door. \"Jean. Come on in.\"\n\nJean entered and looked closely at Kayla. \"Are you okay?\"\n\n\"I'm fine.\" She sighed.\n\n\"Good. Did you really have to call security on him?\" Jean drawled as he drew Kayla into his arms. But before Kayla could answer Jean, they both heard Tristan's voice as he re-entered the living room.\n\n\"Did you bake this?\" Tristan asked with his eyes on the slice of cake in his hand. \"They are so...\" Tristan trailed off when he saw Jean. \"I didn't mean you had to forgive him so soon. You've gotta feed me first before you two get in between the sheets and start doing the nasty.\"\n\n\"We don't have to get in between the sheets to do the nasty.\" Jean drawled. \"We can do it right here. Wanna watch?\" He tried not to be affected by Kayla's uncontrollable giggles.\n\nTristan gave a slight frown and threw himself into the couch, still munching on the slice of cake. \"Sure. Why don't you guys start with a bj?\"\n\nKayla burst into laughter just as Jean muttered incredulously... \"You've got to be kidding me.\"\n\n\"You asked for it, Jean.\" Kayla laughed at the look on Jean Broody's face and turned to shake her head at a naughty-faced Tristan. \"You are so fucked up young man. This is not Dean. It's...\"\n\n\"Jean.\" Tristan exclaimed, pointing a finger at Jean. \"Dean's crazy twin brother.\"",
        "\"That's me. And you are?\"\n\n\"Not important. Where the fuck is your asshole of a brother?\"\n\n\"Tris...\" Kayla started...\n\n\"No, hold it Kayla.\" Tristan stood up from the couch and went to stand in front of Jean with an angry glare. \"You and your brother actually had the nerve to treat Kayla like that? A pregnant woman?\"\n\nJean had the grace to look guilty. \"I've apologized. You don't know just how sorry I am for...\"\n\n\"And you're a doctor, right? She's pregnant, you jerk. You should have known better.\" Tristan sneered.\n\n\"I didn't know she was...\" Jean trailed off, not knowing exactly how to defend himself. \"I'm sorry.\" He said with a frustrated sigh.\n\n\"It's okay, Jean.\" Kayla said softly. \"What I did was wrong. It was only natural for you to get angry.\" Then she turned to Tristan. \"Let it go, Tris.\"\n\n\"You forgive him, you've got to forgive Dean too.\" Tristan said stubbornly.\n\nKayla's eyes widened for a moment, and then she flared up. \n\n\"It's not the same thing.\" Kayla said heatedly. \"I admit not telling him was wrong. But I apologized. And not only did he not forgive me and broke up with me, he actually had the nerve to tell me that for as long as the baby remained alive, I would never need for anything.\" Kayla heard both men gasp when the import of what she'd said dawned on them. But she ignored their shocked looks and went on. \"As if I would go and kill the baby. If I wanted to get rid of it, I would have gone ahead with the abortion as planned. And not need for anything? Really? I don't fucking need his money. I've never felt so insulted in my life. Breaking up with me had hurt, I'll admit. But implying that I was some monster who would kill my kid or a gold-digger who would keep a baby simply to be able to live well for the rest of my life was low. That killed my spirit.\"\n\nKayla turned and walked slowly towards her bedroom, leaving the two men to stare after her with shocked eyes.\n\n\"He fucked up real bad.\" Tristan muttered softly.\n\n\"He sure did.\" Jean agreed. \"Fuck! The idiot didn't tell me that part.\"\n\nTristan turned to look at Jean. \"We need to do something.\" Worried green eyes looked into dread-filled blue eyes. \"This is bad.\"\n\nJean sighed. \"I don't know what to do.\" He confided. \"This is more serious than I thought. What the fuck was that idiot thinking?\" Then turning to fully face Tristan, Jean asked out of the blue... \"How's your equally fucked-up husband by the way?\"\n\nTristan laughed and moved to sit on the couch. \"He's well, thanks.\"\n\nJean dropped into the couch beside Tristan. \"God, this is so messed up.\" He groaned. \"What is Cole doing about this?\"\n\n\"What can he do?\" Tristan muttered. \n\n\"Sometimes it helps when friends step in to help.\" Jean said, rubbing his eyes tiredly.\n\n\"Hmm... that's true. Maybe...\" Tristan sat forward, thinking hard. \n\nJean looked at him eagerly, knowing Tristan would come up with a strategy that would help his brother. Dean had told him how Tristan had managed to get him together with Kayla the morning after they hooked up.\n\n\"Well...\" Jean prompted.\n\n\"I was thinking....\"\n\n***\n\n\"I hear Tyron is hurt.\" Chris announced as he got off his phone. \"That was a member of his crew on the line.\"\n\n\"Hope it's nothing serious. These Seals get hurt all the time. What happened this time?\" Damon asked, reaching out to push Tristan's hair out of his eyes.\n\n\"Oh he's fine. Just a sprain. He'll live.\" Chris chuckled.\n\nIt was Cole's turn to host their usual Saturday get together so the squad was in Cole's den, which they called 'the boyz ghetto'. All the guys were present except for Tyron, who was out on a mission and Kyle who had travelled outside the country. The guys were engrossed in the live Formular One World Championship, which was showing on TV. They urged on their favourites whilst they enjoyed their booze. They all seemed to be in high spirits except for Dean, who sat quietly watching the race. \n\nDean had initially decided not to come to Cole's for the get together but Jean had forced him to...more like blackmailed him actually. Dean was supposed to play golf with some important clients that Saturday morning before coming to Cole's but had planned on going back home from the golf course instead. But Jean had insisted that coming to be with the guys would get his mind off his troubles and help him loosen up. When Dean had adamantly refused to come, Jean had threatened to call all their brothers to come spend time with him. Now, Dean couldn't have that. He'd groaned, wishing Jean were back to work so he would be too busy to poke his nose into his affairs. Dean could imagine how his big brothers would tease him and probably rub it in that he would have known how to treat women better, if he had entered into medicine like they all had. That reasoning had always sounded so silly to Dean but it had never stopped the Broody brothers from saying it all the time.\n\nNow there he was...bored out of his mind because he couldn't bring himself to have fun like he usually did when he was with his guys. When he felt a dip on the seat beside him, Dean turned to find Matt getting comfortable beside him on the couch Dean was sitting.\n\n\"I heard what happened.\" Matt muttered.\n\nDean shrugged. \"No shit.\" Dean mumbled. \"Everyone has heard. No biggie.\"\n\n\"Yes biggie. Dude, you have to get her back.\"\n\n\"She doesn't want to see me.\" Dean groaned. \"She's made that perfectly clear. What can I do? I can't force her...\"\n\n\"Yes, you can.\" Matt growled. \"If you can't force her, who the hell can? You're Dean-fucking-Broody. Don't sell yourself short. She's hurt and angry and that's the only reason why she's behaving like that. Not forgetting the hormones. Step in and claim your woman back, asshole. Don't give her a say in it. Just do it. Let her know who's the man.\"\n\n\"That's sexist.\"\n\n\"And do you have a better way? This is Kayla we're talking about. A man's gotta do what a man's gotta do. Don't be a pussy.\"\n\n\"Hmm... Spoken like a true African huh?\" Dean chuckled. \n\n\"Let's just say we know when to take matters into our own hands. It's about time you did exactly that, bro.\" Matt slapped Dean on the back and relaxed into the seat to give his full attention to the race, leaving Dean to think about what he'd said.\n\n\"Thanks Matt.\" Dean finally sighed and got up.\n\n\"Where are you going?\" Matt asked, turning to look at Dean.\n\n\"I'm going to get a bottle of water from the kitchen. Want one?\"\n\n\"Sure.\"\n\n***\n\n\"Why are we using the back entrance and not the front?\" Kayla asked Briana.\n\nThey'd been out shopping since morning. Briana had insisted she wanted Kayla's opinion on an outfit she was going to wear to an important ball so she'd driven then directly to Cole's instead of going to drop Kayla at her condo. When they'd gotten to Cole's condo, Briana had used the back entrance instead of the front which was rather strange.\n\n\"I hear one of the occupants is having a party of sorts out front so we're better off coming in through here.\" Briana said as she maneuvered her cute Benz to the very entrance of Cole's back access. \n\n\"Seriously?\" Kayla looked incredulous. \"Who does that?\"\n\n\"Beats me. Come on.\" Briana said, getting out of the car and hoping Kayla wouldn't kill her when she found out she'd been set up. \n\nIf Briana had gone to park in front, Kayla would have noticed that all the guys were hanging out at Cole's as their cars were parked out front. And knowing Kayla, she would have freaked out and demanded to be taken home at once rather than face Dean. Briana hoped Tristan knew what he was doing. Her part was to get Kayla into the house and she was going to make sure she did exactly that, Briana thought with determination.\n\nKayla followed Briana into the house, wishing she were already back home, in bed. Not only was she tired and sleepy, Kayla also wanted to get out of her dress so she could get access to the parts of her body that needed her attention. Kayla was showing now and it looked like entering into her second trimester had heightened most of her senses, especially that of feeling. Though impatient most of the time, Kayla easily got emotional and would cry at a drop of a hat. \n\nThe least said about her body, the better, Kayla thought miserably. She felt bloated and heavy. The only thing she seemed to like about herself, were her boobs. They had filled out even more and looked real good in anything she wore. The attention she'd been getting from guys was very flattering and exciting but also made her wonder whether they had problems with their eyes and couldn't tell she was pregnant. She'd had to actually tell a guy she was once speaking to that her eyes were up and not on her chest. It wasn't the attention she loved, but the way she looked extra hot in her clothes. \n\nBut damn, her itchy nipples drove her crazy. The itching seemed to get worse by the day. The annoying thing was that, scratching it only got her horny. God, was she horny. She hadn't been able to tell her doctor that particular problem. How could she possibly tell Dean's mother that thanks to her itchy nipples, she was horny most of the time? It was sometimes so bad she actually had to touch herself to get some relief. The problem was that she only ended up getting even more horny afterwards so she'd stopped trying to get herself off. Damn!\n\nWhilst Briana took her purchases upstairs, Kayla headed directly for Cole's kitchen to look for a cold drink. Her fingers were already on her breasts, trying to scratch through the layers of fabric. And boy, was it frustrating. She opened the fridge and moaned softly as the chilled air cooled her skin. Kayla's eyes closed in bliss as she just stood there, enjoying the chill from the fridge, her fingers relentlessly kneading her nipples through her sexy mini dress.\n\n\"Need help with that?\" Dean asked huskily from the doorway. \n\nHe'd been staring at an oblivious Kayla for almost a minute and that was all the time it had taken for his cock to get as hard as rock. The sight of Kayla in that hot fuck-me dress, with her eyes closed in obvious pleasure, the flush of need on her cheeks and her hardened nipples standing out in that dress was so erotically captivating. And the fact that she was touching those hard nipples was just sinful icing on the cake. It was a sight Dean wasn't ever going to forget. She was so fucking beautiful.\n\nKayla gasped and allowed her hands to fall to her sides. What the fuck was Dean doing there, she thought, slightly panicked. Briana had told her they were alone in the house. A hot shiver coursed through Kayla as she stared at Dean, the love of her life...the ruler of her pussy, Kayla thought with a silent groan as she felt her pussy flooding with moisture and heat. The sexual ferocity on Dean's face caused her pussy to clench in need even as she tried to remember all the reasons why she shouldn't be in the same room with the guy. It had always been that way between them...all it took for their desire to boil over was just a look. And boy, did he look hot in his sea-blue polo shirt and white pants. He'd obviously been to play golf. And Dean in his golf outfit was always so mouth-wateringly sexy, it always made her cream her pants. When Dean started walking towards her in that sexy way she adored, Kayla's legs almost buckled beneath her.\n\n\"Dean...\" She breathed.\n\nDean pushed the door of the fridge close and slowly reached for Kayla. Kayla couldn't move. Her brain screamed at her to move, move out of Dean's reach, move out of the kitchen...but her feet were rooted to the ground. \n\nDean's arms went around Kayla's waist to hold her to him as his mouth found its way to the sensitive spot on her neck. Kayla moaned brokenly as she went from wet to drenched in microseconds. Oh God, she had to stop this, Kayla thought desperately.\n\n\"Dean, please.\" Kayla gasped shakily, feeling Dean's wet tongue on her sensitive skin.\n\n\"Tell me to stop and I will.\" Dean murmured huskily into Kayla's ear, making her shiver with need. \"Tell me.\"\n\nThen with a lustful moan, Kayla was seeking Dean's lips. She was desperate for his lips. It felt like she would die if she didn't kiss those lips.\n\nWhen their lips slammed together, it was like an electric current had gone off inside both of them. Both moaned uncontrollably as they devoured each other, not even noticing when Briana pulled the kitchen door shut with a satisfied smile. It had gone way better than she and Tristan had planned. \n\nAnd when Dean eventually took control of the kiss, Kayla almost passed out. She'd been kissed lots of times by Dean, but this took the cake. It was mind-blowingly orgasmic. Kayla was trembling so much from sheer need, she knew she would go out of her mind if she didn't get off. As if he could read her mind, Dean pushed the neck of her low cut dress down together with her bra to release her full breasts with their hardened nipples. Then without wasting any time, Dean tore his mouth from Kayla's and bent to take a distended nipple into the heat of his wet mouth and sucked on it. \n\nKayla went wild. With a loud cry, her head snapped back and her back arched as her hands automatically reached for the back of Dean's head to hold him to her. Dean pushed Kayla against the fridge and switched to her other nipple, this time, taking the recently-sucked nipple in between his fingers at the same time, to twist and pull. Then as he tormented those taut nipples, Dean's questing fingers moved under Kayla's dress to find the edge of her thong's elastic band. His fingers eased beneath the band and moved down to slide through the silky moisture that slickened Kayla's folds to rub her clit. Kayla couldn't have stopped the scream that tore out of her throat as her orgasm slammed into her.\n\nBefore she got down from that high, Dean was bending her over the Island. Then he was unzipping his pants and releasing that beautiful big throbbing cock of his. Dean didn't waste time to take off Kayla's panties. He simply reached for a kitchen knife and cut it off her. Then taking a firm but gentle hold of her hips, Dean gently and slowly pushed into Kayla's soaked, tight heat as if he was afraid of hurting her.\n\n\"Oh fuck, Kay.\" Dean groaned, caressing her creamy arse. \"You're so tight.\" He moaned as he finally merged them together fully, still feeling her contractions from her orgasm. \"Damn, I've missed you.\" He said huskily even as he started slowly thrusting in and out of Kayla's heat.\n\n\"Oh my God!\" Kayla cried out. It was so good.\n\n\"Are you okay?\" Dean husked, slowing down his thrusts even more.\n\nFuck, had she always been this warm down there, Dean wondered silently. And even as he took his pleasure, he made a mental note to ask his mother whether it was normal or there was something wrong. He damn right wasn't going to take any chances where his woman and child were concerned.\n\n\"Dean Broody, will you fuck me harder?\" Kayla growled. \"I'm not going to break.\"\n\n\"Baby, I don't want to hur...\"\n\n\"Shut up and fuck me like a man.\" She snapped, cutting him off. Then she completely ruined her sexy command by adding in a soft whimper... \"Please.\" Dean couldn't help the grin that broke out on his face. God, he loved her.\n\nAnd fuck her, he did. Dean's hips began to slam into Kayla, knocking the breath from her lungs even as he drove her up the pleasure path yet again. Faster and faster he moved, his whole body tensed as he heated up with every lunge. Kayla felt even sweeter on his cock than Dean remembered, he thought with his head thrown back in pleasure. His moans became louder and louder as he began to lose the tight control he held over his body.\n\n\"Oh fuck, baby. You are so hot, and wet, and slick, and tight...\" Dean chanted as he fucked even harder into Kayla, their erotic cries filling the kitchen. \n\n\"Dean...\" Kayla cried out as her eyes grew more dilated with her passion.\n\nKayla's body bucked and trembled as Dean took her with a passion she'd never seen in him. She felt him filling her as she had never been filled before, stretching her, taking her to heights that she'd only dreamt of these past weeks. Kayla rubbed her nipples, which had become hardened peaks that needed some attention, on the surface of the Island. She was helpless against the feeling, the inferno that was blazing between her thighs, knowing it could only be quenched by the man taking her to cloud nine that very moment. When she felt Dean's fingers on her swollen clit, Kayla cried out as her head began to thrush from side to side in mindless pleasure.\n\n\"Dean!\" She moaned helplessly with need as he used one finger to gently rub her clit with easy circles. \"Please!\" Kayla gasped and arched into his touch.\n\nDean leaned over Kayla's back and latched onto her neck, sucking up a mark as he slammed into her from behind and worked on her clit at the same time. Kayla didn't know what hit her. She exploded into a million pieces as sensation flayed her body ruthlessly. She screamed as she felt herself rising from an unbelievable plateau of pleasure to a blissful feeling of euphoria.\n\nKayla didn't even feel it when Dean pulled out of her. He turned her over to lie on her back and then plunged back into her. Even as he thrust into Kayla, Dean's eyes moved up to her rounded tummy. \n\n\"God...\" He breathed as he felt his heart swell with so much love. His eyes glazed over with wonder.\n\nDean reached out...almost reverently to tenderly caress Kayla's bump, his eyes brimming with tears. Then leaning forward, he pulled Kayla up so that she was in his arms with her legs coiled around his hips. Dean looked into Kayla's eyes with all the love he felt reflected in his eyes.\n\n\"I love you, Kayla. I'm sorry for how I acted.\" Dean drew her face close to his so that their lips were almost touching. \"Please forgive me.\" He whispered against her lips and captured Kayla's lips in a kiss so gentle and sweet, Kayla couldn't stop her own tears from sliding down her cheeks.\n\nKayla felt her heart melt as a flood of emotions broke free in her body. It was a mixture of lust, love, desire, and they were all for the man in her arms. She trembled in his arms as their tears mixed together even as their lips remained locked together. Kayla could feel the desperation in Dean's kiss. His kiss told her everything she wanted to know. Dean loved her just as she did him and nothing was ever going to change that. He was hers. When Dean resumed his thrusting, Kayla hung on for the ride.\n\nAnd with his arms tightly around her, Dean plunged into Kayla's warm heat with wild abandon till his orgasm ripped through him. He heard his own cry shattering the air even as he convulsed against her. He was rocked by the force of it, his body shuddering so brutally he feared hurting Kayla.\n\n\"Oh God, baby are you okay?\" He husked against her lips.\n\n\"I'm fine.\" Kayla breathed. \"And I love you too.\"\n\n\"Oh fuck.\" Dean whispered and pulled out of Kayla.\n\nThen to Kayla's surprise, Dean pressed her back onto the Island and parted her thighs. Then she felt him part her folds with his fingers. \n\n\"What are you doing, Dean?\" Kayla's gasp turned into a cry of surprise and dirty pleasure when she felt Dean's warm breath on her clit. \"Dean, no...\"\n\nBut Dean wasn't listening. He draped one of her legs over his shoulder, the foot of the other planted on the Island, opening Kayla wide for his seeking mouth. Dean blew naughtily onto the hardened button and flicked the tender knot back and forth with the tip of his stiffened tongue, driving Kayla out of her mind. Then with a growl, he drew that throbbing pleasure button into his hot mouth and sucked on it \u2013 hard, not caring that she was soaked with his semen.\n\nKayla cried out Dean's name in a hoarse broken voice as an intense orgasm seared across her nerve endings, ripping the world apart as stars splashed behind her closed eyelids. Her hips gyrated, grinding her pussy against his mouth, intensifying the excruciating sensations as every muscle in her body trembled in unadulterated ecstasy. Even as her pussy convulsed ecstatically, Dean continued sucking on her clit, enjoying Kayla's cries of pleasure, not caring that his friends might overhear them. He wanted to give her ultimate pleasure as thanks to his anger, he'd denied her that pleasure. Dean suddenly felt such overwhelming wretchedness, sadness and remorse in his heart he just knew he was on the verge of breaking down. With renewed vigour, he tongued and sucked her clit until she came again and again.",
        "\"No more, please...\" Kayla pleaded breathlessly as unending ecstasy sizzled down her spine. \"Dean, please...\" Kayla sobbed.\n\nDean stopped sucking on Kayla and moved up to drop kisses on her swollen stomach. Then as though a dam had broken inside him, Dean broke down and cried against Kayla's protruding belly.\n\n\"Oh baby.\" Kayla groaned and sat up to cradle Dean's head against her breasts. \n\nShe couldn't help but feel guilty for her own part in their problems. If she had trusted and confided in her man as she was supposed to, all that wouldn't have happened.\n\n\"I'm sorry too, baby.\" Kayla whimpered. \"I should have told you. I promise I'm never ever going to keep anything from you again. Please forgive me. Do you forgive me, Dean?\" Kayla was by then crying too.\n\nDean was too overwhelmed with emotions he couldn't talk. All he could do was tremble as gut-wrenching sobs tore through him. All he wanted was to be in Kayla's arm. He needed those arms around him, soothing him, telling him everything was going to be okay. And he was grateful he had that. Taking a deep breath, Dean tried to bring his breathing under control. \n\nKayla reached for a tissue and started wiping Dean's face, feeling such overwhelming love for the man it was scary. She took another tissue, moistened it with a little water, and then proceeded to wipe at Dean's eyes, making him laugh softly.\n\n\"Thanks.\" Dean whispered.\n\n\"Pleasure. So...do you forgive me?\" Kayla asked.\n\n\"Do you?\" Dean asked right back.\n\n\"You really think I would be wiping your tears, just to make sure those idiots out there don't tease you when we finally get out of here if I hadn't forgiven you?\" Kayla drawled, then paused to frown at Dean. \"Unless of course the guys are not here...are you here alone?\"\n\n\"Everyone is here except Kyle and Ty.\" Dean said hoarsely.\n\n\"Thought so. Now your turn. Forgive me?\"\n\nDean shook his head. \"No.\"\n\n\"What?\" Kayla looked incredulous. \"What do you mean, no?\"\n\n\"Exactly what it means my love. I will only forgive you on one condition.\"\n\n\"Ow come on. You're not being fair.\"\n\n\"Marry me, Kayla.\" Dean said softly. \"You know I love you, baby. And I know you love me too. I want you to marry me not because I'm asking you to, but because you want to be with me for the rest of your life, just as much as I want to be with you. Please say you'll be by my side for as long as we both draw breath. Kay...\"\n\n\"I will.\" Kayla said softly, cutting Dean off. She never wanted to go through not being by his side, in his bed, in his arms for even one more day. \"Yes, I'll marry you.\"\n\nDean looked shocked. \"Do...do you me...mean that?\" Dean stammered. \n\nKayla laughed, nodding her head and wiping fresh tears from her eyes. She had never been more content as she was that very moment. She felt like she was finally home...with Dean...where she rightfully belonged. Because wherever Dean was, was home to Kayla and she knew it.\n\n\"Thank you.\" Dean whispered, not knowing what else to say. \"Thank you, Kay.\" He hugged her fiercely. \"You have no idea what that means to me. Thank you, my angel.\"\n\n\"Pleasure is all mine, my love.\" Kayla laughed softly. \"I love you. So much.\"\n\n\"I know, baby.\" Dean smiled, pressing a kiss against Kayla's swollen lips. \"Now let's go spread the good news.\"\n\nKayla laughed, looking around for her panties. \"Can't wait to tell everyone huh?\" \n\n\"Can you?\" Dean laughed, zipping up.\n\n\"No.\" Kayla shook her head. \"Where the fuck are my panties?\" She asked, looking around.\n\n\"It's in my pocket.\" Dean chuckled. \"I destroyed it. Sorry.\"\n\n\"Ow come on, Dean.\" Kayla whined. \"How do you expect me to...\"Kayla trailed off when she felt a wet clothe between her legs. \n\nShe looked down and saw that Dean was cleaning her up with a handkerchief he'd obviously moistened when she was busily looking around.\n\n\"I'm sorry. Better?\" He asked softly.\n\n\"I'm good. But you have to take me home soon. I need to get out of these clothes and have a cold shower.\" Kayla said, allowing Dean to bring her down from the Island.\n\nDean kept his arms around her when he noticed that her wobbly legs wouldn't hold her up. \"Are you okay?\"\n\nKayla nodded against Dean's chest. \"What did you expect after fucking me like that?\" She laughed softly, leaning against Dean as they headed towards the closed kitchen door. Kayla stopped abruptly when they got to the door. \"Oh my God, do you think they heard us?\" Kayla's cheeks were pink with embarrassment now that reality was about to intrude.\n\n\"A little too late to think about that don't you think?\" Dean drawled, and then leaned down to press a kiss against Kayla's pouty lips. He sometimes forgot that Kayla had actually been a virgin till not too long ago. \"They already know we fuck, Kay. Do you think they don't know how that baby got in there?\"\n\n\"Yeah, but...\" Kayla trailed off when the kitchen door opened from the outside. When she saw Briana's smiling face, her face heated up even more but she was also relieved.\n\n\"Don't worry, I kept them away.\" Briana beamed. \"But damn, that was hot...\"\n\n\"Oh my God, please tell me you were not there the whole time.\" Kayla gasped and promptly groaned when she saw Briana nodding her head slowly with a knowing smile on her face.\n\n\"How do you think I kept them out?\" Briana laughed, when Kayla buried her face against Dean. \"Congratulations by the way.\" Briana reached out to draw Kayla into a tight hug. \"Can I be your maid of honour please?\"\n\nKayla laughed as Dean groaned. \"Who else is hot and classy enough to rock a fabulous Valentino dress?\" Kayla purred, busting into laughter when Briana squealed with excitement. \n\n\"They finished fucking yet?\" Chris bellowed from the corridor, making all the guys, who had rushed out of the den on hearing Briana's squeal, burst into laughter.\n\n\"They're getting married.\" Briana screamed. \n\n\"Dude, that was a record breaker.\" Matt laughed. \"What the fuck did you tell her to get her to agree to sell her freedom so quickly?\"\n\n\"More like what did he do to her...\" Damon chuckled, making everyone laugh.\n\nThere were hugs all around and Dean, who couldn't stop beaming with joy, wouldn't even let Kayla out of his sight.\n\n\"Dude, relax.\" Cole growled. \"She's not fully yours till you pay a fine for knocking her up first.\n\nAnd even as the friends laughed and argued amongst themselves, there was a general feeling of delight for the newly engaged couple.\n\n***\n\nThere had never been a more beautiful bride. Kayla looked simply hot and adorable in her long Valentino gown which showed off her baby bump flatteringly. She looked so beautiful. Few things can make as dramatic a statement as a backless wedding gown ...a drop dead detail that is sure to have all eyes focused on a bride as she makes her grand entrance on her wedding day. And that was exactly what Kayla set out to achieve. \n\nShe couldn't possibly hide her baby bump. So she decided to be daring instead, by wearing a gown that would not only draw people's attention off her bump, but would also drop jaws and ensure that she was the center of attention on her day. Kayla achieved this by baring her back to the very top of her butt, with a breathtakingly low backless lace Valentino wedding dress that fit to the shape of her body like a glove. The beautiful train on the dress created a flare at the bottom, which flattered the curve of her lower back. The stunning completely backless wedding dress drew all eyes to the arch of Kayla's back, just as she'd wanted. She looked simply stunning.\n\n\"Close your mouth little brother.\" Jean whispered to Dean as he teasingly wiped at the nonexistent drool on Dean's lips with a handkerchief. \"You're drooling.\" \n\n\"Damn...\" Dean breathed, captivated by the alluringly sexy sight of his bride. \n\nThe wedding took place in the lovely Aburi Gardens. And there were a lot of well-wishers there to support the happy couple. The Broody clan was over the moon...their baby was getting hitched. The seven groomsmen, comprising, Cole, Michael, Kyle, Chris, Damon, Matt and Tyron all looked breathtakingly striking in their tuxes. \n\nJean was the best man. And as best man, he got to walk hand in hand with the beautiful maid-of-honour, Briana. Briana exuded sexy elegance in a plain and simple two-strap lace backless Valentino dress, with a scoop back that people couldn't help but adore. Like Kayla, her whole back was exposed but for the fashionably amazing scoop covering her shoulder blades. To get on Cole's nerves, Jean never failed to keep his hands on Briana's exposed lower back, give her tiny kisses or hug her whenever he could. Cole was fuming! It didn't help matters when Jean kept sending Cole silly winks whenever he noticed Cole glaring at him. The guys had so much fun watching Jean and Cole. \n\nMichael and Lucy Broody were so happy they both kept wiping at their eyes. And when Dean and Kayla were finally pronounced husband and wife, Lucy shed silent happy tears. She'd known her baby would come through for her and he hadn't disappointed her. Lucy was ecstatic. \n\nAll in all, it was a simple, touching and graceful ceremony. At least till the reception...then all hell broke loose. Tristan, who was the MC for the occasion, did a really good job by keeping everything light, funny and totally classy. His very first words... \n\n\"Ladies and gentlemen, it's been a very emotional day. Even the cake is in tiers...\" \n\n...got everyone laughing. The music was good, the atmosphere was charged with excitement and everyone had a really good time.\n\nWhen the time came for the best man's speech, Dean groaned because he knew his twin brother was going to be his usual naughty self. Jean calmly pulled a paper out of his pocket and began to read almost lazily, about what a wonderful husband Dean was going to be, how he was loyal, handsome, kind, how he was loved by everyone...etc. Then he paused, squinted at the paper, stumbled a little over some words, and then turned to face a surprised Dean. Then with a straight face, Jean handed a confused looking Dean the paper and then pretending to avoid the microphone, mischievously said loudly to everyone's hearing...\n\n\"Dude, your handwriting has gotten terrible. I can't read the rest of what you've written.\" \n\nThe look on Dean's face was priceless. That classic move by Jean brought the house down. Kayla had tears in her eyes from laughing so hard. Jean then went ahead to make a very important announcement to the guests. \n\n\"Well, Kayla is moving in with Dean now, so it looks like all the ladies will have to give up their keys to his place.\" Jean sounded dead serious, staring intently at the guests.\n\nThere was total silence. One could have heard a pin drop. Kayla gasped with shock. When she felt Dean stiffen beside her, her heart started pounding so hard.\n\n\"What is he doing?\" Kayla whispered to Dean, who gently took her hand in his and held on to it tightly, slightly shaking his head to indicate that he also had no idea what was going on.\n\n\"Ladies, I'm not kidding.\" Jean went on, looking all serious. \"Give them up. At least one lady must be bold enough to...\"\n\nBefore he could complete that sentence, Alice stood up, looking totally hot in a little red dress and killer heels, and started towards Dean and Kayla's table. Kayla was shaking, her heart pounding so hard whilst looking from Alice to Jean. When she heard Dean swear beside her, her eyes instantly filled with tears. Alice had made it clear she wanted Dean when they met at the Broody home months earlier. Was something going on between her and Dean?\n\nThen to the utter disbelief of everyone, including the confused couple, about fifteen more really hot young ladies in the hall got up and started walking towards Dean and Kayla's table. Kayla's mouth opened in surprise. Amongst the ladies were two cousins of Dean's, two of Kayla's brides maids, some of Dean's friends, Mary, Michael's wife and Jen, Matt's fianc\u00e9e, and finally, Lucy Broody's older sister, who was over seventy years old. All the ladies walked to their table and dropped a key each in front of Dean. Dean's auntie, who was the last to get to their table, stood in front of the couple with her back to everyone, opened her blazer, and shook her frail body at the couple. And just as she'd planned, everyone looking on from the audience assumed she was flashing Dean. What they actually didn't know was that she was wearing a t-shirt underneath her blazer which said, 'Everyone thinks I'm flashing you right now'.\n\nAnd when that mischievous old woman turned around to face the guests and posed for people to read what was written on her t-shirt, they just couldn't hold their laughter. People were screaming with laughter. Kayla had never laughed so hard in her life. Dean and Kayla later found out that Jean had actually selected those ladies...including their old auntie, and given them a key each, just to confuse the two of them. The squad, who were also the groomsmen, was in on that crazy plot too. Kayla made a mental note to punch Jean after the reception, for putting her through that heartache. \n\n\"Your brother is nuts.\" Kayla leaned closer to Dean and whispered. \"But I guess it's true what they say...'it's just not a proper wedding unless the best man pisses off the bride'.\" Kayla laughed.\n\n\"I'm going to kill him.\" Dean growled. He'd known his brother would definitely pull a prank but this...\n\nBy the end of Dean's speech, people were in stitches, some were wiping tears from their eyes and Kayla had her head on the table, both in mortification and hilarity because his parting shot was just as hilarious.\n\n\"They say the best man's speech should never be longer than the groom's penis. Either I forgot this very important fact, or my brother is really packing.\" He turned around to give Kayla a slow wink. \"But looking at that baby bump, I must say Kayla found out the hard way.\" Then turning to the guests, who had erupted into laughter, Jean raised his glass and toasted: \"To the happy couple. May all their ups and downs be in between their sheets.\"\n\nEveryone was on their feet laughing, applauding and drinking to Dean and Kayla. \n\nIt was indeed a wedding to remember.\n\n***\n\n\"Give us a smile Kayla.\" The photographer called out and a very tired Kayla instantly flashed her 'killer smile' as Dean called it, and saw lots of flashes going on. \n\n\"That's more like it.\" Someone shouted from the crowd making others laugh. \n\n\"Hey,\" Dean tilted Kayla's chin up and stared down at her with a worried look, \"You okay?\" \n\n\"Of course. Just tired.\" She replied, going up on her toes to give him a quick kiss. \n\nBut Dean held Kayla's head, sank his fingers into her hair, and returned her kiss with a scorching one of his own. When his tongue swept into her mouth, she drew him in deeper and sucked erotically on him, caressing over him and luxuriating in his taste. For that fraction of time, it was just the two of them and Kayla gave herself completely to Dean, rubbing her hardened nipples against his chest and moaning against his lips helplessly.\n\nA piercing whistle penetrated Kayla's consciousness, bringing her quickly to the present and the fact that they were being watched by over two hundred pairs of eyes. Dean's friends were applauding as if the curtain had just come down on a show in a theatre. With a groan Dean drew back, his lips going to Kayla's ear to give it a quick lick.\n\n\"Dean...\" Kayla shivered and moaned uncontrollably. \n\n\"Let's get out of here,\" Dean rasped, though he didn't release his hold on Kayla, \"before I do something scandalous.\" \n\nThe couple quickly said their goodbyes to the friends and family who were still around and jumped into the limo which was to take them directly to the airport. They were on their way to Venice for their honeymoon and Kayla couldn't wait to see the city of love and have her husband all to herself. \n\n\"Ready to join the Mile High Club?\" Dean drawled, leaning down to kiss Kayla soundly.\n\n\"Try and stop me.\" Kayla purred, moving to sit in Dean's lap.\n\nDean laughed and kissed her even harder. \"I love you, wife.\" He whispered in her ear.\n\n\"I love you too, husband.\" She whispered right back.\n\nThen Dean bent down to press a kiss on Kayla's stomach. \"Mummy and Daddy loves you very much, baby girl.\" He whispered with so much emotion in his voice. \"I can't wait to see the little angel.\" Dean had been over the moon when they found out they were expecting a girl. He claimed he'd had enough of guys. Who wouldn't want a little girl to spoil in the mist of all those bossy brothers and crazy friends, he always asked Kayla.\n\nWhen Dean straightened up, he saw the tears that had gathered on Kayla's lashes and reached out to wipe them away.\n\n\"I'm happy.\" He whispered to his wife. \"Thank you.\"\n\n\"Same here.\" Kayla choked and turned to straddle Dean with a contented smile. \"And guess what?\" Kayla whispered.\n\n\"What?\" Dean whispered back.\n\n\"I'm not wearing panties.\"\n\n\"Fuck.\" Dean growled, getting instantly hard. \"Why didn't...\"\n\n\"No room for one under this gown.\" Kayla murmured even as she reached between then to undo Dean's belt.\n\n\"Baby...\" Dean breathed as his eyes closed in pure arousal.\n\n\"I want you.\" Kayla whispered. \"Now.\"\n\nDean didn't even bother talking to the chauffeur on the intercom. He bellowed; \"Yo Rick, take the longer route to the airport will you?\"\n\nAnd before Rick could even respond to the order, the glass between his side and theirs was sliding up to effectively block him from hearing or seeing them through the driving mirror. Then Dean lifted his hips slightly to enable him push down his pants. \n\n\"You're so gonna get it Mrs. Broody.\" Dean husked.\n\nKayla laughed breathlessly as she set her hands on Dean's shoulders for balance and got on her knees on both sides of Dean's thighs.\n\n\"Give it to me hard, fast and dirty, husband mine.\" Kayla purred and then gasped when she felt Dean's hot erection against her soft folds. \"God, I want you.\" She whispered. \n\nDean looked at his aroused wife from beneath his lashed and felt his heart swell with even more love for the beautiful vixen.\n\n\"I love you even more pregnant.\" Dean chuckled.\n\n\"And why's that?\" Kayla breathed as she started lowering herself onto that big wet hard cock. \"Oh God, this is so good, Dean. So good...\"\n\n\"Christ. Kay...\" Dean gasped as he felt that exquisite heat lower onto him, grip him...squeeze him. \"So hot, so slick, so fucking sweet.\" He growled as his hands slipped beneath the gorgeous gown to hold Kayla's hip. \n\nAnyone looking on from behind Kayla, would have only seen a bride in her beautiful gown, which was spread beautifully onto the floor of the car, sitting on her handsome groom. It was an artistically beautiful sight. Dean pushed up deeper into Kayla, holding her as she arched in his arms until he had buried every throbbing, desperate inch of his cock inside her clenching pussy. Kayla's eyes rolled back in her head as her face went slack in carnal bliss. She tried to stop the cry that was threatening to burst forth...knew she had to be quiet...despite the glass separating them, there was another person in the car with them. But it was too much. And even before Dean could start thrusting up into Kayla, he felt her tighten even more around him and then with a loud cry which she just couldn't control, she started coming. That tight contracting pussy was almost Dean's undoing. His eyes lost their focus as his control frayed.\n\n\"Fuuuuuuck!\" He growled as he tried to hold on to his control. He pulled his lower lip between this teeth and bit, drawing blood as he tried to stave off release.\n\nBy the time he was composed enough to start thrusting hard and fast into that spasming heat, Dean knew he wouldn't last long. He sought Kayla's mouth and kissed her as he rocked against her, holding her firmly around the waist as he thrust up repeatedly into her, taking with aggression just as he knew she wanted.",
        "\"I want you to come again for me, baby.\" Dean said huskily against Kayla's lips as his fingers found her swollen wet clit and began to massage it in slow, expertly soft circles.\"\n\n\"Dean...\" Kayla gasped at the sensations that slammed through her. \"Ah...\"\n\nThat's when she began riding Dean, sliding up and down on his long, thick cock like there was no tomorrow. She sexily gyrated and rolled her hips into each upward thrust by Dean, driving her husband out of his mind. Kayla's knees slipped wider apart, taking Dean even deeper inside her. It felt so good she threw her head back in abandon. She was whimpering, flushed, her intense green eyes dazed with lust as her hips jerked. And just when Kayla didn't think she could take even one more sensation, Dean leaned forward and bit one of her hardened nipples through her dress.\n\n\"Oh my God!\" Kayla screamed just as her second release hit her, stronger and sharper than the first.\n\nKayla's body jerked with such ecstatic pleasure she screamed and screamed, making Rick smile in front. Her entire body convulsed as her pussy closed like a vise on Dean's cock. Their gazes locked. Kayla's filled with blissful wonder, whilst Dean's filled with tenderness and sweet agony.\n\nDean couldn't hold off any longer. He didn't even thrust twice into Kayla's spasming heat before he stiffened and gasped as his orgasm thundered through him and he lost his hold on reality.\n\n\"Kay...\" His mouth fell open, his eyes squeezed shut and his hold on Kayla's waist tightened as his entire body shuddered in ecstasy. \"Fuck!\"\n\nEventually, the tension eased from Dean's body and he opened his eyes to look at Kayla.\n\n\"Hey.\" She whispered.\n\n\"Hey.\" He whispered back lazily, his fingers playing gently through Kayla's short hair.\n\n\"I don't think I could ever get bored looking at you.\" Kayla whispered. \"You're so gorgeous...and all mine.\"\n\nDean laughed softly. \"All yours.\"\n\n\"Now, what was that you were saying about loving me more pregnant?\"\n\nDean grinned, not surprised she'd remembered. \"You're more...ready to go now. I'm not saying you were not before. It's just that you're...insatiable now, and I love it. I just might keep you barefoot and pregnant all the time if this is what I'm going to...\" Dean paused when he saw the blush that coloured Kayla's cheeks. \"Hey, what is it?\" He queried huskily even as his mouth curved into a teasing grin. \n\nWith a moan, Kayla buried her face against Dean's neck. \"Enjoy it whilst it last. Your mother says it's hormones.\"\n\nDean groaned. \"Now she's discussing our sex-life with my mum. Just great.\" \n\nKayla laughed so hard she would have fallen off Dean's thighs if he didn't have his arms so tightly around her. \"She's my doctor, Dean. What did you expect?\" Kayla retorted, trying to bring her laughter under control.\n\n\"I know. It sucks that's all.\" Dean groaned.\n\nKayla had never seen a cuter Dean than the one worried about his mother discussing his sex life. She just melted, looking at her gorgeous, adorable and sexy husband.\n\n\"Oh I love you, Dean Broody.\" Kayla gushed.\n\n\"Love you more, baby.\" Dean whispered as he kissed his wife.\n\nTheir love and happiness was all that mattered. All that would ever matter...\n\nTHE END"
    ],
    "authorname": "adjoaq",
    "tags": [
        "hea",
        "reconciliation",
        "wedding",
        "kitchen"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/the-steamy-chase-ch-10"
}
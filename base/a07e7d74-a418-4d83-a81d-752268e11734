{
    "title": "JJ and Ashley Ch. 08",
    "pages": [
        "Debbie was up and in the kitchen quietly making breakfast, brewing coffee and packing herself a lunch when Ashley's bedroom door opened, its hinges squeaking as it swung fully open. Whispers and a giggle announced the girls' arrival before they came around the corner.\n\nAshley was in a long sleep shirt, one that had once belonged to her father. Her hair was a mess, extra unruly from sleeping on the fancy up-do from the night before. She blushed when she saw Debbie, but left JJ's side to give her mom a hug. \"Morning mom.\"\n\nDebbie squeezed her daughter, \"Morning sweetie. I didn't wake you, did I? I was trying to be quiet and let you two sleep in.\"\n\nThat comment had Ashley's cheeks turning a darker shade of pink and glancing furtively at JJ.\n\n\"No, we were already awake. Someone forgot to take bobby pins out of her hair and they ended up all over the pillows. Not the most comfortable thing to sleep on.\" JJ spoke up, wearing a grey wife beater and plaid pair of boxers. She came and gave Debbie a morning hug when the older woman waved her in.\n\n\"Well in that case, help yourselves to some coffee. You'll have to fend for yourselves for breakfast. I need to keep moving or I'll be late for work.\" Debbie continued to pack her lunch while Ashley and JJ decided between cereal or eggs and toast.\n\nIt was more fun than she'd ever admit, listening to the younger women. Debbie wanted to smile when JJ won Ashley over by suggesting she make the eggs so Ashley could enjoy her coffee while on toast duty. Not only were they willing to compromise with each other, they already had a rhythm to how they moved together in the kitchen. And she knew for a fact that they had a good rhythm elsewhere. Debbie would never share this with either girl, but she'd heard more of their activity last night than they would have wanted. Going to bed early had been her plan, since she did have to be in to work earlier than usual. However, that didn't mean she'd been able to fall asleep. Debbie had read a book for almost two hours before she finally fell asleep and in that time, got up to refill her bedside water. Passing Ashley's bedroom she'd heard enough to know what had, finally, occurred.\n\nPart of her was elated that Ashley had found someone who loved her and whom she loved in return. That her daughter's partner was devoted to her entire well-being, and took care to ensure that at all times. Another part of her wanted to weep. Her daughter, her only baby was beginning to grow away from her in a permanent way. The way she looked at JJ made that very clear. Debbie sighed quietly and zipped her lunch bag. There was another, smaller part of her that ached with longing. She wanted what Ashley was discovering. Well, she really just wanted John back, with all the love of their marriage full and alive. Seeing the girls happy and in love brought the ache to the fore, made it more obvious what was missing in her own life.\n\n\"Alright ladies, I'm off to another day full of flowers, helping people brighten their days.one garden at a time. JJ, would you mind walking me out?\" Debbie kissed Ashley on the head, her purse and lunch bag already on her shoulder.\n\n\"Sure. Let me just...\" JJ bit her lip and tipped the hot skillet to slide a fully cooked egg onto a piece of buttered toast. \"Perfect. Go ahead and eat while it's hot, Ashie.\" JJ slid the plate back to the blonde and followed Debbie out the front door barefoot.\n\nDebra unlocked her small red truck and set her bags on the front seat before turning to JJ. She stared at the younger girl, mentally organizing her words. It took her long enough that JJ was getting nervous, her shoulders tightening the way they always did when she was a girl.\n\n\"Fifteen years ago I stopped a group of boys from bullying someone weaker than them. I was simply trying to be a good parent, be a good adult and stop a fight that should never have happened. I expected I'd bandage you up and send you on your way, never to see you again. Imagine my surprise when you not only came back to play with Ashley, but bonded with her and became friends. Best friends, even.\" Debra sighed and leaned against the open car door. \"I know things have not been easy for you JJ. I should have stepped in again and done something more than worry about the rumors. It broke my heart to find out why you ran away, and I am so sorry.\"\n\nJJ swallowed and shuffled her feet, looking down. \"Ashley wanted me to tell you and Mr. Turner that night. I was too afraid to stay. And, honestly, you did everything you could have.\" JJ looked back up, stepping closer to Debbie and taking her hand for a second. \"You and Mr. Turner gave me four years of amazing memories. You cared for me like I was your own daughter and that outweighs anything you might have tried to do. Not to mention, Ashley has pretty much always had my heart. I left it here, with her, all those years ago and only recently stopped pretending otherwise. If anything, I should say thank you for loving me when I needed it and for raising your daughter to be as accepting and loving as you.\"\n\nDebbie patted JJ's hand and smiled. \"You've grown into an amazing young woman, JJ. I can't take credit for that, but I'm so glad that fight broke out in my front yard and not someone else's. That day was the start of something important and I am beyond happy to see you and Ashley together. I could search the world over and never find another person who I'd trust with my daughter. I don't even feel the need to warn you to take care of her. I already know you will.\"\n\nJJ let Debbie pull her into a tight hug, then watched the older woman climb into her truck, waving when she backed out and drove off.\n\nJJ walked back into the house, shutting and locking the front door behind herself.\n\n\"What was that about?\" Ashley asked, peeking out the front window, coffee in hand. JJ scratched her head, ruffling her hair. \"I think I just got the parental seal of approval. Or re-got. Since apparently I've had it for years and had no idea.\"\n\nAshley giggled and gave JJ a side hug, warm mug held at a safe distance. \"I was worried she'd give you that whole, 'respect my daughter or say hello to my shotgun' speech.\"\n\n\"Your mother owns a shotgun?\" JJ sounded genuinely worried.\n\n\"Not to my knowledge. She didn't before my last semester of college, but I've been away for months, so who knows. Come eat. You're going to need all the energy you can get.\" Ashley beamed up at her girlfriend, her hand finding its way to JJ's bottom and squeezing.\n\n\"Mmm. Yes ma'am.\" JJ grinned back and stole a kiss before striding back to the stove.\n\nThe next two weeks flew by. Ashley started her part time summer job at the craft store. Her mornings were filled with shelf organization and customer support. Her afternoons were full of JJ. Every afternoon she went home, changed and either met JJ somewhere, drove to her house, or JJ was waiting to pick her up, that big black truck rumbling at the curb.\n\nHands down Ashley's favorite was when JJ picked her up. There was something exciting about climbing into that big beast and kissing JJ, who always had a grin and a kiss for her. Sometimes JJ had plans, bowling or a movie, but they always ended up in bed. They didn't always use the strap on, but Ashley was quickly starting to see what the appeal was.\n\nIt had really clicked when JJ had handed Ashley a dildo, one a little longer than they'd used before, and scooted herself away to the end of her bed. \"Play with it. I'm just going to watch.\"\n\nAfter working past a surprise bout of shyness Ashley had begun to play with herself, slowly working her body down that familiar path to orgasm. Using the fake cock had felt weird and a bit unnatural, but Ashley loved being filled, loved the weight of a cock inside her, the way its movement in and out rubbed at nerves and sensitive tissue she'd never be able to reach otherwise.\n\nHer fourth orgasm seemed to be JJ's limit, the older girl no longer content to watch. JJ managed to wring a fifth orgasm out of Ashley that night, but only just. Ashley was still thinking of a way to get even with JJ for making her pass out completely after that last one.\n\n***\n\nAll too soon June arrived. Ashley parked her car in her driveway and sprinted up the porch steps, already untucking her green work polo. It was the 3rd, the day Rebecca and Amy would be arriving for their two weeks of vacation in Sierra Falls. Plans for a group dinner had been made throughout the week and JJ was going to pick Ashley up for some time together beforehand. Unfortunately work ran late, a customer needing multiple questions answered and quite a few products from upper shelves. Now Ashley was running behind.\n\nShe tossed her shirt into her hamper as she entered her room, kicking off the required all black sneakers and shedding the tan chinos that made up her uniform.\n\nA quick swipe of deodorant under her arms and Ashley spun to the closet. What to wear? JJ hadn't said they were going out, but they were going to the dinner together. So something casual, but nice enough for Chili's. Ashley picked out a black skirt with a ruffled hem and a white tank top, a pale lavender button down over the tank. She left a few buttons undone to show off the tank top. A pair of clean low top converse finished off the outfit.\n\nAshley was stuffing a purse with her keys, wallet, phone, and a half a pack of gum when a familiar rumble reached her ears. Her heart skipped and she couldn't quite keep the smile off her face. JJ.\n\nJJ watched the front door of the Turner house, her left leg bouncing in a nervous tick. She was excited to see everyone again, but decidedly anxious too. She was already feeling like her time with Ashley was getting crunched, even though they had a solid four hour window before dinner. Because of that harried feeling JJ was already wearing her strap on.\n\nQuickies were something that they hadn't tried yet. They always took their time, teasing out the pleasure and easing into orgasms. JJ wasn't sure they'd had sex anywhere but a bed yet. If Ashley was up for it that would change the minute she had the blonde over the threshold. JJ double checked her hair in the rear view mirror, her fade freshly touched up.\n\nAshley finally came out, locking the door behind her as always. \"Oh that's fucking perfect.\" JJ muttered, when she saw Ashley was in a skirt. She shifted the truck into park and slid to the middle of the bench seat to greet her girlfriend.\n\nAshley opened the passenger door and bounded up into the truck, beaming. \"Hey!\"\n\n\"Hey.\" JJ waited until Ashley had shut the door to pull the blonde to her. She tugged Ashley all the way into her lap and kissed her hungrily. Ashley responded eagerly, wiggling herself closer, her arms around JJ's shoulders. JJ leaned back into the seat and, hands on Ashley's hips, pulled the blonde against the bulge of her cock.\n\nAshley pulled back, her eyes wide. \"Is that what I think it is?\"\n\n\"Depends. What do you think it is?\" JJ asked, grinding into Ashley, grinning.\n\nAshley moaned, glancing down at their laps, the back at JJ. She smiled, \"I think it's your cock, all big and hard for me.\"\n\nJJ groaned and squeezed Ashley's ass, burying her face in the blonde's shoulder. Ashley continued to surprise her with how eager she was, with how bold she was becoming.\n\n\"You are planning to fuck me with that, not just tease me?\" Ashley whispered to the top of JJ's head.\n\n\"When have I ever teased you with my cock?\" JJ asked indignantly, her hands busy pulling up the back of Ashley's skirt.\n\n\"Uh, the first time I ever saw it! You wouldn't fuck me with this,\" Ashley rocked herself against the ridge in JJ's pants, \"So I had to improvise. Remember that? Gave you a fantastic blowjob.\" Ashley gasped when JJ tugged at her panties, pulling the waistband over her ass.\n\n\"You bet I remember. It makes me want to tease you some more and see if you always respond with a bj.\" JJ dipped a finger into the wet folds of Ashley's pussy.\n\nAshley whimpered and pressed into JJ's finger. She held JJ's head to her chest and begged, \"Please don't tease me with your big cock. Let me have it. Suck it and fuck it with my wet pussy. Please, JJ. I want to fuck your cock, then suck my juices off, clean you off before we fuck some more.\n\nThat got her a low growl and JJ pushing her off her lap and into the passenger seat.\n\n\"Fucking hell babe. We gotta go unless you wanna fuck right here.\" JJ yanked her seatbelt on and glanced over to make sure Ashley had done the same before whipping the truck into gear.\n\nJJ drove them out of the neighborhood and onto the main streets, forcing herself to focus on the road and not on the girl next to her.\n\nHands suddenly working at her belt and the snap of her jeans got JJ's attention. \"Baby that is not a good idea.\"\n\nAshley didn't stop working JJ's zipper down, pulling her jeans open. \"Why not?\"\n\nJJ exhaled roughly, braking for a red light just as Ashley pulled her cock free. \"Because you are seriously testing my control.\" JJ looked down when Ashley shifted, her head completely in JJ's lap, bobbing up and down.\n\n\"Jesus.\" JJ whispered, sweat forming on her forehead when Ashley's actions put delicious pressure on her highly aroused sex. She accelerated when the light turned green, clenching the steering wheel.\n\nThey were halfway there when Ashley started adding noise. JJ did her best to ignore the slurping and soft sucking pops. The moaning was impossible to tone out though.\n\nBrakes squealed when JJ parked in the driveway. She shut the truck off and, getting a fistful of blonde curls, pulled Ashley off her dripping cock. \"Inside.\" JJ panted, Ashley's eyes half glazed over.\n\nAfter a bit of wardrobe correction they made the walk from truck to front door in seconds. JJ managed to unlock the door without fumbling, Ashley pressed to her side and whining quietly.\n\nThe door was barely shut when JJ pushed Ashley into the wall immediately to the right of the door and pinned her there, belly to the wall. JJ ground her hips against the firm roundness of Ashley's ass, the blonde's hands held above their heads with JJ's right hand. With her left, JJ released her cock again, still wet, and flipped up Ashley's skirt. The panties stuck to Ashley for a second, who was arching her bottom back for JJ and making all kinds of noise, whimpering and whining.\n\nJJ held her still with one hand, the tip of her cock catching at the slick opening of Ashley's body for one breathless second before gliding inside. JJ didn't stop until the dildo was fully buried, the longer length not causing any problems.\n\nThey both paused for a few heartbeats to savor the penetration. JJ pulled back and began thrusting into Ashley, her ignited passion and excitement eating away at her usual control and finesse. Ashley didn't seem to mind, tipping her hips and pushing her ass back into the older girl. She was cooing and panting, trying to talk around the increasingly rough fucking.\n\n\"God, JJ...yes...ooh, yes...fuck my wet little pussy. Fuck it hard...Ah! Yes, like that, just like that...Oh! Ung. JJ! This feels amazing...fuck...so deep...hng...uh...you're gonna make me cum, JJ. Ooh, don't you dare stop. Fuck, fuck, fuck!\" Ashley stamped a foot and threw her head back onto JJ's shoulder as her entire body vibrated under the continued fucking and orgasm.\n\n\"Mmmm, that's it, cum for me. Cum all over my cock, baby.\" JJ never slowed, but took Ashley's surrender as a sign. She blew wayward curls out of her way and kissed the pale skin of Ashley's neck. Her kisses ventured down to the exposed lines of Ashley's collarbone, her tongue flicking at a sensitive spot. JJ raked her teeth over the skin, her fast pace starting to catch up with her. Sweat was trickling down her back and a ball of tension was building in her lower back.\n\nUnable to free her hands, Ashley was forced to push back into JJ's thrusts, her body still tingling and racing towards more pleasure. She leaned her head against the wall, JJ's kisses now traveling over her shoulder. \"I wanna cum on your big cock again. I'm so close too. Please, JJ.\" she looked over at JJ as the other girl set teeth into Ashley's shoulder, dark eyes meeting hers. JJ bit down hard enough to make Ashley gasp, leaving marks but not breaking skin.\n\nJJ watched Ashley's pupils expand and pulled back. Glancing down she could see the toy flashing wetly into view between them. She needed to cum too. \"Cum with me, Ashie. I'm right there too.\"\n\n\"Oh, please, don't stop. Just a little bit more.\" Ashley whimpered.\n\nJJ didn't have a little bit. She raised her left hand and let it drop sharply on the naked perfection of Ashley's ass.\n\nWith a yelp turned moan, Ashley came with JJ, both of them trying to push more of the dildo inside Ashley, their bodies tense and trembling.\n\n\"Goddamn, JJ.\" Ashley breathed, her racing heart echoing in her ears.\n\nJJ chuckled breathlessly and brought Ashley's hands down, her own guiding them to wrap around Ashley's waist. \"Goddamn yourself. You excite me too much sometimes.\" JJ peeked between their bodies at the bright pink imprint of her hand on Ashley's buttock.\n\n\"Geez, you don't have to make it sound like a bad thing.\" Ashley pouted and batted her eyes at JJ.\n\n\"I never said it was bad, just that-\" JJ was interrupted by a muffled ringing from her back pocket. She pulled the device from her pocket and looked at the display. From the way Ashley stiffened, JJ knew she'd seen it too. Veronica's name. JJ silenced the ringing and slipped the phone back in her pocket. \"She can leave a message.\"\n\nAshley shifted in JJ's arms, her good mood dissipating. \"Yeah.\" She didn't want to think about Veronica the ex-girlfriend and what she might be calling for. Ashley was distracted from her worries when JJ nudged the dildo just a smidge deeper.\n\n\"Think you're up for round two?\" JJ asked, her hands inside Ashley's now unbuttoned blouse and cupping her breasts through the tank.\n\nAshley pushed JJ back and turned to face her, eyeing the wet cock bobbing from her unzipped jeans. \"I sure am. The question is, are you?\" Dropping to her knees Ashley did as she'd said in the truck and began licking her own juices off the robust cock.\n\nRound two ended with Ashley on her back in the armchair, her legs dangling over JJ's arms while JJ did her best to bury her cock deep and hard. Both girls were worn out after that and after a quick clean-up and smoke, snuggled on the couch to watch a movie.\n\nAshley had begun to doze through the movie, already having seen Harrison Ford avenge his murdered wife. Her phone ringing woke her, jerking her upright. JJ sat up too and watched Ashley dig through her purse and answer the phone.\n\n\"Hello? Brenda, yes, we will be there at six...under your name? Okay. Do you want us to snag the table or wait for the group if we arrive first? Gotcha. Okay, yes, see you in an hour. Bye!\" Ashley ended the call and dropped the phone back into her bag. \"Dinner's at six at Chili's. If we arrive first then we need to wait for most of the group, then take the reservation which is in Brenda's name.\"\n\n\"Okay. The movie should be over about the time we need to leave. Cuddle?\" JJ laid back down, her arms open for Ashley.\n\nAshley crawled back into her warm spot and hummed happily. \"Cuddle.\" She pulled JJ's arm around her and interlocked their fingers.\n\nThey pulled into the Chili's parking lot ten minutes early. JJ parked but let the truck idle. \"Anyone else here?\"\n\nAshley peered at the other cars. \"Rebecca and Amy will have a rental, but I recognize Sarah's car and of course Brenda's. Chloe might have caught a ride with any of them.\" Ashley unbuckled her seatbelt and opened the door, pausing when JJ didn't follow suit. \"You're coming, aren't you?\"\n\n\"Yeah. Just a little nervous. Mind if I grab a smoke real quick first?\" JJ pulled a single cigarette and a lighter out, shutting off the car and unbuckling.",
        "Ashley joined JJ at the back of the truck. \"There's nothing to be worried about. Everyone is excited to see you again.\"\n\nJJ exhaled smoke away from Ashley and shrugged. Her hair fell forward when she looked down, casting a shadow across her face. \"I know it's probably stupid but I always assume people aren't going to accept me. It's one thing to be a child who may be confused about herself. It's another to be a gay adult. Ya know?\"\n\n\"Not really. I think I understand what you're saying, that some people aren't tolerant or accepting of the gay lifestyle. They think it's abhorrent. They judge you and even persecute you. I've yet to experience that myself though.\" Ashley smoothed back JJ's hair, running her fingers over the silky smooth fade. \"I can promise that sort of hate is not something you'll ever encounter with our friends. Rebecca and Amy are engaged, for Chrissake! How hypocritical would it be to accept them but not you?\"\n\nJJ took another drag of the cigarette, exhaling slowly. \"Very. I'm okay, really. Just nervous. It's been ten years, Ashie. People can change and I have experienced that. I'm not saying your friends won't be sweet and welcoming like they were before. I'm sure they still are, or you'd have found new friends. These nerves are just a conditioned response to meeting people.\"\n\nAshley studied JJ's brown eyes, so beautifully dark. They were filled with JJ's usual calm, but Ashley could see the nerves. They tightened JJ's shoulders and kept her empty hand balled into a fist. \"Technically, you're not meeting them. You're just seeing old friends after a long time.\"\n\nJJ flicked ashes from her cigarette, paused, and then dropped the unsmoked half to the asphalt. She ground it out and smiled at Ashley. \"You're absolutely right, my dear. Ready?\"\n\nJJ and Ashley walked towards the entrance hand in hand. Before they reached the red double doors Ashley squeezed JJ's hand and waved to a group of young women standing around a bench to the right of the doors.\n\n\"Ashley!\" A tall curvy redhead separated from the group and sauntered over, eyeing JJ. \n\n\"Rebecca, how are you?\" Ashley let go of JJ's hand to hug the other girl who was still giving JJ an appraising look.\n\n\"Fantastic, now that I'm not sweating every time I step foot outside. I forgot how nice the summers were here. JJ, is that you?\" Rebecca stepped back from Ashley as the rest of the girls joined them.\n\n\"Yeah, same old JJ.\" JJ grinned, stuffing her hands in her pockets.\n\nRebecca raised one sleek eyebrow and pursed her lips. \"Girl, there is nothing 'same old' about you.\" She looked up at the tall butch who stepped in close to wrap an arm around her waist. \"Amy, this is JJ. JJ, this is my fianc\u00e9 Amy. Play nice.\" the redhead added, bumping her hip into the taller girl.\n\nAmy rolled her eyes and extended a hand with a smile. \"Nice to meet you JJ.\"\n\nJJ grinned back and shook the tall girl's hand firmly. \"Likewise.\"\n\nTheir handshake was interrupted by a short and very petite brunette slipping under their hands and hugging JJ tightly, so tightly that JJ almost lost her breath. Another brunette came up and hugged JJ from the side, squeezing just as tightly.\n\n\"Don't you ever leave us again.\" The shorter of the brunettes looked up at JJ over the rim of her glasses.\n\n\"I don't plan on it, Sarah.\" JJ freed an arm to wrap around both girls.\n\n\"Since when do we have group hugs before food?\" A new voice asked from behind JJ.\n\n\"Since JJ is here.\" Brenda, the taller of the brunettes told Chloe, who JJ recognized. Her pale blonde bob had lost its purple streak, but she was definitely the same bartender from the club.\n\n\"No shit? Oh my god I forgot you'd be here! Move it ladies, I need a hug.\" Chloe playfully pushed her friends aside and smothered JJ in yet another hug. A hug that went on for too long.\n\n\"Okay, down Chloe. I thought you wanted food.\" Ashley stepped in, prying Chloe from JJ.\n\n\"Food, yes, sorry.\" Chloe made as if she had to tear her eyes away from JJ and led the group to the door, eliciting giggles from the girls when she batted her eyes at JJ. Ashley laughed along, knowing her friends were doing their best to welcome JJ back. She had no fear that Chloe might flirt with JJ with the real intent of stealing her. In fact, it was fun to watch JJ relax and enjoy the fun.\n\nDinner was a loud, long affair. Everyone seemed to be talking at once catching up and reconnecting. JJ was more than a little relieved that no one hounded her with questions about her last ten years. She relaxed and laughed along with the girls, thoroughly enjoying the laid back nature of the conversations.\n\nDrinks and food were ordered amidst the verbal chaos, their server flirting heavily with all of them. JJ figured he felt like he'd won the jackpot, scoring the table full of pretty young women. She'd have felt the same way in his shoes.\n\nOnce the food was eaten and leftovers were boxed Brenda brought up their summer camping trip. \"I think we need to go over who brings what again.\" The practical brunette pushed her braid over her shoulder and pulled a short stack of notecards from her jeans pocket. Chloe sagged in her chair and rolled her eyes at Brenda's organization.\n\nIgnoring Chloe, Brenda cleared her throat and read off the first card. \"Rebecca and Amy, you are in charge of games, bug spray, and sunscreen.\" Amy leaned across the table to take the note card.\n\n\"Sara agreed to do food. This does include desserts and s'mores.\" Sara took her card and read it over, pushing her glasses up her pert little nose.\n\n\"Ashley you get to bring the camping equipment. The grill, the dishes, pots and pans.\" Ashley took her card, folded it and tucked it in her purse. JJ wasn't sure how this system worked but she sure hoped Ashley already had these items.\n\n\"Chloe you landed drink duty. This means water and coffee along with the alcohol you're no doubt already planning.\" Chloe took her card and shot Brenda an evil grin, her prickly mood eased by a full belly.\n\nBrenda held up her card, \"I will supply the tent, the air mattresses and several blankets. Feel free to bring extras and your pillow along with your clothing and personal effects.\"\n\nSara looked up from her card. \"When and where are we meeting?\"\n\nBrenda blinked, her face blank for a minute. \"We hadn't settled on either the last time we discussed the trip.\"\n\nThat revelation started up a new round of verbal chaos. JJ sat back and sipped from her soda, listening to the logic of starting early combatting the late risers. No one could pick the best place to group up their caravan.\n\n\"You could all meet at my place. 'Bout 8 in the morning? Not super early, but not so late we miss a day at the campsite.\" JJ suggested quietly, everyone falling silent to listen to her.\n\nThe girls all looked at each other to gauge reactions, then back at JJ. Rebecca slapped a hand on the table and leaned back. \"Sold.\"\n\nNo one else had any objections so JJ found herself giving out the address and basic directions.\n\nWith their camping trip delegated and planned, the conversation lulled. Everyone was full and satisfied. Take out boxes were gathered and the bill was paid. The girls made their way outside and said their goodnights under a starlit sky.\n\n***\n\n8 am found all seven of them outside on JJ's driveway packing up cars and calling dibs on seats. Brenda had her parent's Jeep Liberty for the trip, the back already full of equipment. JJ's truck bed was filled with the rest, and five out of the seven personal bags. The last two bags were secured in foot wells, one in each car. Brenda led the way out of town, Sarah, Rebecca and Amy riding along in her car. JJ followed with Ashley and Chloe.\n\nIt was a pleasant drive, just an hour and a half north of town through wooded land. Ashley and Chloe spent the drive playing mad libs with JJ and playing dj with her music.\n\nThe camp grounds were not the same JJ remembered from childhood, but looked just as cleanly rustic. Trees covered the grounds with relatively flat areas cleared for camp spots. Trails were marked clearly, with directional maps every 40 to 80 feet. As they drove from the Ranger Station to their spot they passed several empty sites.\n\n\"Maybe we'll have the place to ourselves\" Chloe sounded hopeful, but almost instantly they rolled past a family already set up with an RV and multiple small tents. \"Damn. We'll have to keep a lid on our drunken mayhem.\" the pale blonde pouted.\n\nBrenda finally pulled into their site, a large circle of dirt with an empty fire pit offset from the exact center. JJ parked behind her, reversing in to make unloading easier.\n\nOnce again, JJ helped the girls set up camp efficiently, everyone pitching in and working until everything was done. The tent was a large 10 person monstrosity with two door on its longest sides and windows at regular intervals. Bedding and bags were arranged inside while food, already in coolers and on ice, were set into the bear safe. The camping cookware was unpacked and tucked into the safe for easy access. Cloth chairs were set up around the unlit fire pit, everyone picking a seat when the camp was finished.\n\n\"Now what should we do? I could use a few hours in the sun. Get a sweet tan to make all the boys drool.\" Chloe slouched in a chair, a leg dangling over the arm.\n\n\"Don't they already do that?\" Sarah asked, adjusting her baseball hat and glasses.\n\n\"The lake is within walking distance. We could swim first before it gets too warm.\" Brenda offered, stopping Chloe from answering Sarah.\n\nRebecca stood and pulled her shirt over her head, revealing a green bikini top. \"Sunscreen first. Everyone.\" the pale redhead looked at everyone sharply, opening her fashionably short cutoffs. Amy raised an eyebrow and took an appreciative look when her wife-to-be bent over to remove her shorts completely, leaving her in bottoms that matched the top.\n\n\"Well damn, don't you come prepared? Anyone else gotta use the tent to change?\" Ashley asked, wishing she could have thought ahead and worn her bikini under her shorts and tee.\n\nEveryone else needed to change, so they took turns using the tent, then applying sunblock and gathering towels.\n\nJJ waited her turn, going last. She found it interesting that the swimsuits matched the girls and the personalities she remembered. Rebecca wore a stylish bikini that worked with both her fair skin and bright hair. The little wooden beads on the strings implied it was more for wearing than actual swimming. They actually matched the beading on the floppy sun hat Rebecca wore.\n\nSarah, so conservative and demure, wore a lilac one piece with a fun shape cut out in the back. It fit well and showed off her curves while containing them.\n\nBrenda wore a bikini as well, but hers was definitely for swimming. It reminded JJ of sportswear, which it probably was given that the stocky brunette played both lacrosse and was on the diving team. It's navy blue and white stripes with their red accent stripe just seemed like it belonged on a jersey too.\n\nChloe's bikini was almost indecent. Tiny lime green triangles barely covering the necessities, thin strings keeping it on her, but only just. JJ hoped it was strictly for tanning purposes and not for swimming. She couldn't imagine it staying in place.\n\nAshley wore a bikini that was a pleasant mix of sporty and stylish, plastic beads clacking happily at the ends of the wide strings that secured the baby blue suit. JJ found herself enjoying the way the bottom covered Ashley's round cheeks completely but left almost nothing to her imagination.\n\nAmy emerged from the tent, her tall and thin frame surprising JJ. Blue hair secured into a tiny braid, the taller butch smiled at JJ. \"Tent's all yours.\" She wore a black bikini that almost matched Rebecca's, but was without the beading.\n\n\"Thanks\" JJ returned Amy's smile and stepped into the temporary structure. She opened her duffel and pulled her swimsuit out before undressing.\n\nAshley was rubbing sunscreen on Brenda's wide shoulders when JJ stepped out of the tent. She may have seen JJ naked quite a few times now, but her mouth still watered and her hands paused. Black men's swim trunks covered JJ's powerful thighs but the simple black bikini top showed off her muscled belly and strong shoulders. Ashley blushed when she spotted what looked like a love bite on JJ's bicep. She remembered putting it there, but hadn't realized it would still be visible.\n\n\"Am I covered?\" Brenda asked, bringing Ashley back to the task at hand.\n\n\"Almost. Just need a little more here.\" Ashley squirted more lotion on her hand and smeared it over Brenda's lower back, between bikini top and bottom.\n\nChloe skipped over to JJ who was carefully putting sunscreen on her face. \"Need help getting your back?\"\n\nBefore JJ could answer Rebecca stepped up. \"You need your back done, missy. JJ can do that while I help do hers, since I'm already done.\" Rebecca took the bottle JJ was using and squeezed out a generous amount before handing the bottle back. She scooped some up and started smoothing it over JJ's right shoulder blade.\n\n\"No pouting, Chloe. It's not becoming at all.\" JJ spun the flirty blonde and methodically applied sunscreen to her back.\n\nWith Brenda's help to cover her back Ashley was done with her own sunscreen before Rebecca had finished with JJ's back. A nagging need to claim JJ as hers swept over Ashley, followed by embarrassment. These were her friends. She knew they wouldn't take JJ from her, so there was no need to 'claim' JJ. But maybe she could just gently remind them.\n\nJJ watched Ashley approach with a handful of sunblock. She wasn't sure how the blonde was taking all the attention the girls were giving her. With other girlfriends, this kind of situation would have ended with fighting and arguing. JJ had never seen Ashley handle this sort of thing before.\n\n\"I've got extra. Have you done your arms yet?\" Ashley asked, showing JJ the white lotion in her palm.\n\n\"Nope. Just my face and back.\" JJ could see where this was going. Ashley was marking her territory, but not by force. Clever girl. \"Feel free to do my entire front if you want.\"\n\nAshley rolled her eyes but started working on JJ's arm. \"I'll let you do your legs. Don't forget your neck and ears. Those always burn.\"\n\nRebecca stepped back and patted Ashley's butt as she passed, \"Cover her good. It would be a shame for such beautiful skin to burn. I'm almost jealous. Of course the butches have better skin than me.\"\n\nAmy turned from the chair she'd been sitting in and clucked her tongue at the redhead. \"Your skin is perfect. How many times do I have to tell you this? You have nothing to be jealous of!\"\n\nRebecca pushed the wide brim of her hat back and pointed to the bridge of her straight nose. \"Freckles, my dear. They only show up when I get too much sun.\"\n\n\"What's wrong with freckles?\" Sarah asked indignantly, her own nose and cheekbones sprinkled with the cute brown flecks.\n\n\"There's nothing wrong with yours, Sarah. You have them year round. They just add to the adorable librarian look. Mine are from direct exposure to the damn sun. There's nothing cute about burning my skin till it spots.\" Rebecca sat next to Amy, her towel rolled up and set on her lap.\n\nAmy leaned over and ducked under the floppy sunhat to kiss Rebecca's nose. \"I love you, freckles or no freckles. Burn yourself as red as a lobster. I'll still love you.\"\n\nAshley squirted more sunscreen onto her palm and began applying it to JJ's belly, half listening to Brenda and Chloe discuss whether boys were cuter with or without freckles, half distracted by the muscles under JJ's creamy pale skin, the way they flexed under her touch. Her fingers followed the v shaped groove that she knew led right to JJs delicious pussy, skimming along the low riding waistband of JJ's swim trunks. Maybe they could find a private spot to enjoy each other away from curious eyes and ears. \n\nA warm hand on her elbow pulled Ashley out of her fantasies. She looked up at JJ, who seemed to be waiting for an answer. \"Hmm?\"\n\n\"I like your swimsuit. Looks good on you.\" JJ touched the plastic beads.\n\n\"Oh, thank you. I'm kinda amazed it still fits. I've had it since high school and I definitely went through a growth spurt freshman year of college.\" Ashley moved her hands to JJ's sides, making sure she was completely covered.\n\n\"How much taller did you get?\" JJ asked.\n\nAshley blushed, and shook her head. \"I gained a cup size and my hips actually showed up, didn't get any taller.\"\n\nJJ chuckled and after a quick glance to be sure no one was peeking, cupped one of Ashley's breasts. \"I love them.\" Her thumb found a turgid nipple and swiped over it a few times till it stood erect under the baby blue material.\n\n\"You two coming, or should we go on ahead?\" Brenda called across the fire pit, the girls all ready and waiting.\n\n\"Not yet, but there's time.\" JJ quipped, dropping her hand after a farewell squeeze.\n\nHer joke got some giggles and after one more swipe, Ashley declared her job done. JJ tucked the sunscreen into her towel and followed the group down the path.\n\nThe lake was within walking distance but only just. Right about the time JJ was feeling grumpy, sweaty, and hot the trees gave way to a gentle slope of grass and brush. The greenery formed a scraggly line along the sand of the narrow beach. It looked blissfully empty.\n\nTowels were arranged and Rebecca and Chloe settled on the beach while the rest of the group charged the water. Ashley hit the water first but Brenda reached the floating dock way ahead of everyone else. The five of them took turns diving off, competing to see who could get the farthest leap, biggest splash, and best original dive.\n\nAfter a few hours everyone was pleasantly worn out and made their way to the damp sand of the beach. Rebecca met them with towels and sunscreen, insisting everyone reapply.\n\nSandcastles seemed the obvious next step, given the damp sand and empty beach. It was a group effort, Rebecca walking the water's edge to find shells and rocks to decorate with while the construction took place. A smooth base soon supported a classic four turreted, drawbridge bearing, castle. A moat was dug, windows were carefully added. Bricks were detailed, as were pavement stones. Flowers became the flags, seaweed and other long grasses from the lake became banners and a long piece of bark served as a sturdy drawbridge. An iridescent seashell made an excellent coat of arms. Rocks lined the banks of the moat to deter any enemies with halfway decent swimming skills.\n\nAbout the time phones were making appearances to capture their creation, Chloe meandered over.\n\n\"Nice. When I'm filthy rich I'll call you guys to build my dream house. Anyone else feel like lunch? I'm fucking starving.\"\n\nSarah sighed and rubbed her nose, forgetting her glasses were on her towel. \"Language, Chloe.\"\n\n\"Yes, Mother. But seriously, anyone else hungry?\" Chloe adjusted one of the flower-flags so it stood upright again.\n\nBrenda dusted sand from her hands and stood. \"Swimming always makes me hungry, and it is about time for lunch.\" She added, consulting the sports watch on her wrist.\n\nThe group trekked back to their campsite and made a quick lunch out of a pre-made club sandwich and chips.\n\nAfter lunch was cleaned up everyone split up. Brenda wanted to go for a hike, so Ashley tagged along, both girls donning their clothing over their suits and putting shoes back on.\n\nRebecca lounged in one of the chairs with a book and her floppy sun hat.\n\nSarah, Amy, and JJ sat at the bench and played a card game while Chloe sat with a sketch book, muttering and drawing.\n\nThe atmosphere was one of relaxed enjoyment, something JJ had missed. Her friends in the modeling business and back in San Francisco were always moving. Things were fast paced, you hopped on the wagon or you missed out. JJ laid down another card and sighed happily. This was what she needed. What she wanted.",
        "By the time Brenda and Ashley came back Rebecca had joined the card game, and Chloe had put up her sketch book to lay in the hammock, earbuds in and eyes closed.\n\nBrenda came up to the table and set her water bottle down. \"Who's hungry? Dinner's on me.\"\n\nDinner was a pretty classic camping meal, hot dogs. Brenda added potatoes, wrapped in foil and grilled, and baked beans.\n\nEveryone gathered at the table to eat, a bottle of soda getting passed around. Almost no one talked while they ate, only asking for this or that to be passed.\n\nChloe decided to break the silence. \"So how long have you and Ashley been a thing, JJ?\"\n\n\"A little more than a month, officially.\" JJ glanced at Ashley who blushed when all eyes turned to her.\n\n\"Officially? Explain.\" Chloe propped her elbow on the table, chin in hand.\n\nJJ shrugged, watching Ashley's cheeks turn a deeper shade of pink. \"I had to pull my head out of my ass and realize what was in front of me. If I'd done that earlier, we probably could have started dating sooner.\" She looked at the girls sitting around the table, taking in how much they had changed yet stayed the same. \"We all could have reconnected sooner if I hadn't been so stubborn.\"\n\n\"I'm just glad you realized, even if it took a while.\" Ashley spoke, taking JJ's hand and beaming at her.\n\nChloe waved off Sarah's sigh at their affection. \"Ashley has been pretty quiet about you two. Are you really a good kisser? She rated you very high.\"\n\nJJ laughed while Ashley tried to admonish Chloe, embarrassed to have JJ find out she'd spilled the beans.\n\n\"I suppose I'm decent. I've never kissed myself. How high did she rate me?\" JJ ignored Ashley's indignant gasp and set her chin in hand, elbow in the table.\n\n\"She gave you a solid 45 on a scale of 1 to 10.\"\n\n\"Really?\" JJ arched an eyebrow at Ashley who cocked her head with a wide eyed innocent look. The girls, who'd been paying rapt attention, giggled at their antics.\n\n\"But I have a problem, JJ. Our dear blonde friend has been frustratingly tight lipped about any other details. I'm dying from curiosity.\" Chloe added dramatically.\n\n\"Understatement of the fucking century.\" Rebecca quipped, sitting as close to Amy's as possible, a slender hand on her fianc\u00e9's thigh.\n\nJJ wasn't sure what Rebecca meant, but she wasn't about to share intimate details. Especially if Ashley had already drawn a line with her friends. \"I'm afraid I can't enlighten you either, Chloe. If Ashie wants it to stay private then that's how it'll stay.\"\n\nChloe huffed, then asked a final question. \"Black mask? A beer and two shots of whiskey?\"\n\nJJ shrugged, \"Yeah.\"\n\nChloe gave Ashley a smug look and sat back in her chair.\n\nSarah readjusted her glasses and looked between the trio. \"What does that have to do with anything? Amy orders the same thing at bars.\"\n\nAmy chuckled and patted Rebecca's hand when the redhead looked over at the petite brunette with a mock glare.\n\nBrenda leaned forward, her long braid swinging off her shoulder. \"It is a rather cryptic question, Chloe.\"\n\nAshley cleared her throat. \"JJ and I ran into each other over spring break. It was at the club during their masquerade theme night. Chloe happened to be bartending and saw us together. I didn't know it was JJ at the time, I actually thought she was a guy.\"\n\nThat revelation had most of the girls speechless, Rebecca giggled and looked up at Amy, who just smiled knowingly.\n\n\"I can see how that could happen, with your short hair and everything.\" Sarah supposed, tipping her head to the left and squinting.\n\n\"Not to mention the way you dress. More masculine than feminine, dark colors, plain fabrics instead of patterns.\" Chloe remembered, flicking pale hair from her cheek.\n\nBrenda frowned. \"I tend to dress more masculine. I mean, how often do you see me in dresses? Would you mistake me for a man?\"\n\nThe conversation continued in this vein, Brenda and Chloe leading a discussion over clothing and how it lended itself to assumptions about gender and sexual preferences when Ashley finally had enough.\n\n\"It wasn't just the way she'd dressed, guys. Clothing played a part, but so did the dark environment, the mask, her hair, and...her general attitude.\" Ashley had to catch herself from mentioning what JJ'd had in her pants. \"She was the most chivalrous man I'd ever met at a club or anywhere social, for that matter. Eventually finding out she was female really didn't change anything.\"\n\nJJ snorted a laugh, which turned everyone's attention to her. \"I'm not sure what happened falls under chivalrous, Ashie.\"\n\nAshley blushed.\n\nRebecca cut in with dessert before Chloe could ask what had happened. Ashley decided that store bought cookies had never tasted so good.\n\nWhen the cookies were gone, wood was piled up in the fire pit and a fire started. It was just starting to get dark, and the air was a bit cooler than earlier. The girls gathered around in the circle of chairs and watched the flames leap about and crackle. Sarah nudged the wood every so often to keep the fire big while they talked about what to do tomorrow. More swimming was agreed upon, and Brenda invited everyone to hike the trail she and Ashley had taken. Chloe and Rebecca declined, preferring to sit at the campsite and keep an eye on things.\n\nJJ sat back in the cloth chair, one hand in her lap, the other holding Ashley's. The warmth of the fire, the relaxed environment, and the company had her feeling good, even with the slight nagging need for a cigarette. She sighed and leaned her head back, the stars just visible through the canopy.\n\nAshley squeezed her hand, getting JJ's attention. Sitting back up JJ took the bottle of tequila Ashley was offering her. A sip sent a shot of warmth through her middle. She passed the bottle to Brenda, who sat to her left. JJ watched as the bottle made the rounds, slowly coming back to her. Another sip, then passed about. JJ had already figured out that bedtime was going to be rough, no time or privacy for hanky panky. Adding the alcohol made her start to think about ways to be discreet, how she could keep some level of sexual intimacy even with five other women in close proximity.\n\nSarah fell asleep first, curled up in her chair, the fire poker stick still clutched in her hands. Brenda quietly offered to move her, standing to pick up the smaller girl when no one had objections. Chloe took the fire stick, moving some of the embers about lazily. \n\nBrenda returned, but was the next to cede to the growing night. Quiet goodnights followed her into the tent, which she zipped behind her. JJ watched Ashley take a sip from the tequila and offer the bottle with a dopey grin.\n\n\"You drunk, or just happily buzzed?\" JJ asked quietly, taking the alcohol.\n\n\"Yes.\" Ashley leaned her head back, still grinning.\n\n\"You tell me when it's bedtime.\" JJ whispered before taking her own sip and passing it to Rebecca, who'd walked over to get the booze.\n\nIt only took one more round of Tequila before Ashley looked over and whispered, \"Bed.\"\n\nJJ stood and gave Rebecca the bottle, \"Time for us to turn in.\" \n\n\"Okay. Amy and I will send Chloe in before she passes out, then douse the fire before we come to bed.\" Rebecca hugged Ashley when the blonde stood, then hugged JJ. \"Goodnight you two.\"\n\nAshley led JJ into the tent where a small light offered some visibility. Two king sized air mattresses were pushed together and covered in blankets and pillows. Sarah was curled up on the far left, a little ball under a blanket. Brenda was sprawled out halfway down the bedding, belly down and snoring softly.\n\nAshley kicked her shoes off, peeling her socks off too before crawling into the bed beside Brenda, leaving plenty of room for JJ on the mattress edge. JJ kicked off her high tops, the old sneakers untied and loose on her feet. She joined Ashley on the bed, moving slowly to avoid jostling Brenda too much. Ashley didn't say anything, but she snuggled close, facing JJ. Her nose nudged into JJ's neck, which sparked at the arousal already teasing at the edges of JJ's awareness. JJ closed her eyes, doing her best to ignore that tingle, and wrapped an arm around Ashley, falling asleep quickly.\n\nThe following four days passed with varied, but similar activities. They started every morning off with instant oatmeal and coffee, then a quick jaunt to the lake. Brenda went for a hike every day, always with at least one other girl for safety. Card and board games were exhausted, naps were taken, and books were finished. Chloe tanned quickly, spending much of her time in the sun. Sarah quietly bounced about, catching up with all of them, one on one. JJ had watched with a small amount of envy when Amy and Rebecca went for an evening walk, day four. They both had big grins and rosy cheeks when they joined the fire circle and JJ was dying to have Ashley looking the same way.\n\nTheir last night around the fire they made smores. It was messy, but more delicious than JJ remembered. Chloe had pulled out more than one bottle of booze, passing a whipped cream vodka around, followed by a dark rum. They'd spent the day doing some packing, but most of it had been at the lake and everyone was pleasantly worn.\n\nAfter a couple rounds of alcohol, Sarah spoke up. \"We should play Truth or Dare.\"\n\nRebecca rotated her third marshmallow and laughed. \"What kind of dares are we gonna do in the woods? I'm not peeing in bushes.\"\n\nSarah shrugged, her feet swinging as she smooshed a toasty marshmallow between chocolate and crackers.\n\n\"I wanna play! We'll just have to be creative.\" Chloe spoke through a mouthful of smore.\n\nJJ licked chocolate from her thumb. \"I would love to play. It's been too long.\"\n\nAshley didn't see any real reason to protest, accepting the vodka from Chloe. \"I'm in.\"\n\nBrenda and Amy agreed they'd play, and Sarah was elected to start.\n\nThe petite brunette adjusted her glasses and peered around the group. \"Rebecca. Truth or Dare.\"\n\nShe rolled her eyes, but Rebecca chose, \"Truth.\"\n\n\"Have you ever dyed your hair to be a more vibrant red?\" Sarah asked, Chloe gasping at the rather direct question.\n\n\"Damn girl. You been hitting the rum extra hard? No, I've never dyed my entire head of hair. I added that blonde streak to my bangs three years ago, but that's it.\" Rebecca pulled her stick from the fire and tested her marshmallow. \"My turn now, right? Hmm. JJ, Truth or Dare.\"\n\nJJ felt her stomach flip, but answered, \"Truth.\"\n\nRebecca tilted her head while she considered her question. \"Who was the first girl you kissed?\"\n\nJJ had a flash of memory, little Megan Perkins blushing and asking for a kiss. \"Megan Perkins.\"\n\nThere was a moment of silence while the group absorbed this, all of them familiar with Megan, who worked at the local grocery store, a small town prom queen grown up. \"Your turn.\" Rebecca reminded JJ.\n\n\"Chloe, Truth or Dare?\" JJ asked.\n\n\"Dare.\" Chloe smirked.\n\n\"I dare you to finish that bottle of schnapps from last night.\" JJ challenged, well aware Chloe hadn't liked the taste, and aware there wasn't much in the bottle. Three shots at most.\n\n\"Ugh. You fucking suck.\" Chloe pouted.\n\n\"No. I don't swing that way.\" JJ couldn't resist the lame joke, which got a weak laugh from Chloe who grabbed the correct bottle and took a deep breath before downing the contents, gagging when it was gone.\n\n\"Excellent. My turn. Ashley. Truth or Dare.\" Chloe wiped her mouth with the back of her hand.\n\n\"Truth.\" Ashley wasn't about to chug anything.\n\n\"Hmm...I have so many questions. Which one? Okay, how bout this one. You still got your V card?\" Chloe swayed when she leaned forward, the schnapps hitting her hard.\n\nShould've gone with a dare. \"No.\" Ashley blushed hard, very glad for the dark that hid her red cheeks.\n\n\"Haha, nice.\" Chloe giggled and slumped back in her chair.\n\nAshley cleared her throat. \"Brenda. Truth or Dare?\"\n\nBrenda paused before she answered. \"Dare.\"\n\n\"I dare you to...\" Ashley racked her brain for something good, \"to show us the tattoo on your ass.\"\n\nGiggles and playfully taunting 'oohs' echoed among the trees. Brenda smiled shyly, but stood and turned around, pulling down the right side of her swimsuit. She bared just enough cheek to show a soft pastel colored butterfly. She sat down to a round of applause, bowing herself theatrically into her seat.\n\n\"Amy. Truth or Dare?\" Brenda asked the tall, quiet woman.\n\n\"Truth.\" Amy's quiet voice had a hint of laughter in it.\n\n\"Did you really propose to Rebecca on the waterfront, at sunset, on your anniversary?\" Brenda asked. This was what Rebecca had told them, but she had no photographic proof, which Chloe had teased her about rather mercilessly.\n\nAmy smiled over at Rebecca who beamed back up at her. \"I did.\"\n\n\"Picture proof!\" Chloe waved her hands in drunken exasperation while Sarah, Ashley, and Brenda all cooed at the couple.\n\nAmy lifted her hand, Rebecca's fingers entwined, and kissed the back of her fianc\u00e9's hand. \"Chloe, how about Truth or Dare?\"\n\nThe game continued until Chloe passed out, followed by Sarah. Everyone headed to bed shortly thereafter, the fire already burned down enough to be doused.\n\nJJ followed Ashley into the tent, buzzing hard from the alcohol and the conversation. Ashley hadn't been kidding when she said things got raunchy.\n\nAs they had all week Ashley laid next to Brenda who was already stretched out on her belly, face buried in her pillow. JJ laid down beside Ashley and pulled her close, the big spoon with her back to the edge of the mattress. Almost without thinking about it JJ cupped Ashley's breast, squeezing the plump mound. Her hand drifted along Ashley's torso, finally dipping inside the swim suit the blonde had worn all week, her fingers plucking at the nipple she found.\n\nAshley turned her head and in the dim light from the nightlight JJ could see her frown. A hand pulled at JJ's wrist, Ashley obviously not in the mood or not comfortable getting frisky with her friends so close. JJ let her hand be removed, but nestled her nose through Ashley's wild tangle of curls to find the warm, soft skin of her neck. JJ didn't want Ashley to feel uncomfortable about sex, but she was starting to go crazy from need. They had not gotten any private time during the days, and the nights had always been out of the question.\n\nHer lips rested on the skin of Ashley's neck while she wrestled with herself. Should she push because she wanted it, or let Ashley be? If she waited, JJ knew she'd be all over Ashley the minute they had any privacy. Her sex drive was on the high end and she couldn't always control herself when she finally had her girl all to herself. Pushing would take that edge off, but she didn't know how Ashley would react, how she'd behave in such proximity to her friends.\n\nWith a sigh JJ settled herself behind Ashley, resigned to waiting another night. It wasn't worth it to push when she'd have Ashley however she wanted soon enough.\n\nNo sooner had she closed her eyes then she snapped them back open. Ashley was pressing her ass back into JJ's lap, stretching from the feel of things. JJ ignored the pressure of her girlfriend's firm bottom nestling into her groin and even closed her eyes again, readjusting the pillow. She didn't let the next nudge get a reaction, although she felt her self-control slipping and her pussy start dampening.\n\nAshley added a wiggle to her next nudge, slowly pressing each cheek into JJ's lap. JJ couldn't resist any longer and her arm, draped loosely over Ashley's side, tightened around the blonde as her hand shot between warm thighs to cup a trim mound.\n\nAshley froze and her hand grabbed JJ's wrist again, but JJ wasn't about to be deterred. She pressed close, her lips bumping Ashley's ear. \"Let me have this sweet pussy tonight. You've teased enough. Hmm?\" JJ pressed fingertips into hot nylon, the plumpness of Ashley's pussy giving way under the pressure.\n\nAshley didn't let go of her wrist, but JJ felt the shiver that raced through her. She slipped her fingers into the bikini bottoms and ruffled past the flattened curls. Slickness coated everything, labia, pubic hair, and the gusset of the swimsuit. JJ slipped a single finger between Ashley's pussy lips and sank it into the welcoming heat, all the way to the third knuckle. Both of them groaned quietly when JJ added a second finger, buried just as deeply.\n\n\"So fucking wet.\" JJ growled quietly. She pulled her hand away from Ashley's pussy, bringing her fingers up to Ashley's mouth. Ashley lapped at JJ's fingertips, reluctant to take them fully into her mouth.\n\nJJ didn't press the issue, instead slipping her hand back inside Ashley's bottoms and flicking at the blonde's erect and swollen clit. Ashley gasped, the sudden attention to such a sensitive spot sending tingles and goosebumps racing. JJ brought her arm up, the one she'd had pillowing Ashley's head and touched her forearm to Ashley's mouth, a reminder to be quiet while she continued to rub and tease.\n\nAshley pressed her mouth into JJ's arm, her heart pounding, ears suddenly perked for any other sound in the tent. No one else made noise, not even the rustle of sheets. This really was risky, being so close to her friends. Part of her wished JJ had just waited. It wasn't like she wasn't going out of her mind with need too. Ashley knew she'd pushed too far with her wiggling though. She squeezed her eyes shut, gripped the blanket underneath them, and gave in to JJ's demanding caress.\n\nJJ felt Ashley's orgasm, her entire body locking up and trembling, her pussy flooding the already soaked bikini bottoms. \"Ooh, that's a good baby girl.\" JJ whispered. She sighed into Ashley's neck and slowed her fingers, easing the blonde down from a rushed orgasm. It didn't help her own arousal, but it made JJ feel good to know she'd gotten Ashley off.\n\nShe wasn't expecting Ashley to roll over, and was even more surprised when the blonde snuggled up, nose in JJ's neck and her hands making quick work of the drawstring on JJ's shorts. Ashley's hand cupped JJ's pussy, a finger slipping between smooth, plump lips to play with JJ's clit. JJ wrapped her arm around Ashley and shifted her leg to give the blonde a bit more room. Ashley licked at JJ's neck, nipping the skin and sucking at the hollow of her throat. JJ purred and pushed her hips into Ashley's hand, those nimble fingers pushing her close to the edge.\n\nPulling her fingers away from JJ's excited clit, Ashley wet them and tapped at the exposed tip, feeling JJ's body tense in reaction. Feeling impish, Ashley frigged that small nub roughly, not completely happy with JJ's pushing for sex. Maybe this would get that message through. JJ exhaled into Ashley's hair, her body tense and sweaty. Ashley stroked her girlfriend's clit gently, waiting for JJ to relax.\n\nJJ sighed and kissed Ashley's forehead, then pulled her hand up to kiss and suck her fingers clean. \"Goodnight, baby.\"\n\n***\n\nJJ was the first one up the next morning, a raging craving for a smoke no longer able to be ignored. She rolled carefully out of bed, crouching on the balls of her feet to let her equilibrium settle. Moving slowly she pulled a nearly empty pack of cigarettes and lighter from her bag, slipped her shoes back onto her feet, and snuck out the tent door. \n\nEarly morning sun greeted her, the woods peacefully quiet. She walked to the cold fire pit and with a sigh pulled a cigarette out of the package and lit up. She closed her eyes and exhaled. One week was as long as she could ever go before the need for another smoke got to her. JJ scratched at the back of her head, irritated with her lack of self-control, with the craving of her body for nicotine. \n\nShe stood and smoked the first down to the filter, lighting a second when the first was done. She watched the smoke drift away, thoughts of the future rolling through her head. \n\nJJ was so deep in thought she didn't hear the tent zipper, or the footsteps behind her. She almost jumped when Amy's tall frame appeared next to her. ",
        "\"Oh, hey.\" JJ covered, flicking ash into the pit. \n\n\"Morning.\" Amy murmured, her long arms folded casually over her chest. \n\nNeither butch said anything for a while, Amy quietly watching the woods and JJ's smoke. JJ didn't know what to say, her thoughts jumbled. \n\n\"It's really good to see Ashley so happy.\" Amy finally broke the silence. \"She never said anything, never seemed depressed, but it couldn't have been easy to be the only single one of the group. All the rest of us living our lives, making plans with significant others. I was getting the sense she was lonely.\" \n\nJJ wrinkled her nose, the idea of Ashley being lonely and sad not sitting very well. It bothered her, on an elemental level. JJ flicked more ash, unsettled. \"How long had she seemed lonely?\"\n\nAmy shrugged her thin shoulders. \"Becs and I haven't been around for a while, but maybe the last year or two. Her messages just seemed lacking her usual spunk.\"\n\nJJ tossed her cigarette into the fire pit with a disgusted sound in her throat. She raked a hand through her hair, frustrated. Ashley was too good a person to ever be lonely or upset. JJ knew she wasn't to blame, didn't need to right the wrong, but it bothered her. \n\n\"I just wanted you to know. She's such a good friend, but I don't feel it's my place to try and tell you to treat her right. I do think you should know she's changed since you came back. For the better. It makes me happy to see, Becs too.\" Amy looked over with a small smile. \"Ashley was the first one we officially came out to, despite it being obvious to everyone.\" \n\nJJ looked up at the taller girl, surprised. \"Same. I mean, Ashley was the first person I ever said the words 'I prefer girls' to that didn't react in horror or whatever. Pat my head and tell me to wait a few years, I'd be less confused then.\"\n\nAmy chuckled and fell quiet again. JJ was treated to an old memory, sitting in a small tent, admitting to liking girls and hearing Ashley defiantly tell her everyone else was full of shit. JJ smiled, remembering the determined look on Ashley's face when she'd said that. It had felt so good to hear, to know her best friend wasn't rejecting her.\n\n\"Im headed to the bathroom. I can't be away too long or Becca steals all the blankets.\" Amy touched JJ's elbow and turned, making her way to the restrooms just up the road. \n\nJJ stood for another minute, then returned to the tent. She felt better, but knowing Ashley had ever been lonely still bugged her. Curling up around Ashley's sleeping body JJ cuddled close and kissed her cheek.\n\nShe got another hour of sleep, max. Everyone woke when the sun rose high enough to heat up the tent. Breakfast was made, dishes cleaned, and real clothes put on. The entire group pitched in to pack the cars and take down the camp. All too soon they were on the road. \n\nJJ followed Brenda out of the campsite and onto the highway that would take them home. Chloe dozed against the passenger window and Ashley thumbed through the music, picking the next song. \n\nAfter they passed the small rural shop that was the last place to stop before Sierra Falls JJ asked Ashley to turn her cell phone back on. She'd turned it off and left it in the glove compartment, not concerned with having it while they camped. \n\nAshley pulled the device out and powered it back up. \"You've got 80% on your battery.\"\n\n\"Sweet. How's your phone? There's a charger port in the glove box if you need it.\" JJ changed lanes behind Brenda to pass a slower trailer.\n\nAshley checked her phone, but was distracted by JJ's phone pinging and buzzing with missed notifications. Even Chloe noticed, raising her head and mumbling \"S'that mine?\" \n\n\"No, not your phone. Back to bed.\" Ashley patted Chloe's knee and picked up JJ's phone, intending to put it in the cup holder.\n\n\"Go ahead and check 'em. Most of them are probably social media anyways.\" JJ shrugged. \n\nAshley swiped past the lock screen and pulled down the notification bar. 45 unread texts and 12 missed calls, along with emails, tweets, and Facebook notifications. \"Damn, you're popular. I don't get 45 texts in a week. You also have 12 missed calls. The rest are email and, like you said, social media.\" Ashley looked over at JJ, not sure if she should go through the messages. \n\n\"No voicemail? Odd. Who called?\" JJ asked, looking away from the road for a second. \n\nAshley selected the missed calls and frowned. \"Veronica called nine times. There's two calls from Margaret and one from Clarice.\" \n\nJJ sighed and ran a hand through her hair. \"Go ahead and check the texts.\" \n\nAshley closed out the calls and opened the messages. She didn't like this at all. Veronica had again sent the majority of the texts, while Margaret sent the rest. Why was this woman so determined to get a hold of JJ? What could they possibly have left to talk about? Didn't she understand that JJ had moved on? With an unsettled stomach Ashley opened the messages from Veronica and skimmed through them. \n\n\"Veronica wants to know when you'll have time to talk face to face. Lots of stuff about why are you avoiding her. Asks if you're so scared to see her again you're willing to avoid this forever. What the hell, JJ?\" Ashley set the phone down and looked up at JJ, anger sparking through her. \"I thought you said this wasn't something to worry about. That it was all a mess, for no reason. What is there left to discuss with her?\"\n\n\"Nothing. I have nothing left to say to her.\" JJ sighed and looked over at Ashley, frustrated that this had to come up now. \"She wanted me to go back to San Francisco when the house was done because that was my original plan. Maybe she still has feelings for me, or regrets how we left things. I don't know.\"\n\n\"You could just talk to her. Apparently you're ignoring her.\" Ashley winced inside at how nasty the sarcasm sounded.\n\n\"Ashley, I've been ignoring her because the last time I answered her call all she did was rage about how I lied, how I don't care anymore about friendship. Supposedly, I care about how much pussy I can get.\" JJ glanced at Chloe, hoping she stayed asleep, if she even was. \"Talking to her over the phone is pointless. You read the texts, you see how quickly she jumps from rational to angry. She's not really crazy, just led by extremely strong emotions. It's what made her such a good model, those emotions just under the surface.\" \n\n\"So there's nothing between you two anymore.\" Ashley clarified, hurt she even needed to say it.\n\nJJ pulled off to the shoulder, rocks kicking up under the truck. JJ threw the truck into park and clicked the hazards on before she turned to Ashley. \"Do you really think I'd start a relationship with you if there was still something between Veronica and myself? Do you think I'm that sort of a person? That relationships are just meaningless things to be tossed around whenever I feel like it?\" \n\nAshley swallowed and leaned away from JJ, shocked at the raw emotion on her face. She knew instantly that her own momentary uncertainty and vulnerability was not warranted. JJ may have been a player in years past, but Ashley knew she'd never cheat. It had been silly to think so, even for a second. \n\nJJ seemed to be reading Ashley's mind. \"I might have played around a lot, but I never made promises to anyone that I didn't keep. I never started anything with a girl unless it was clear it ended the next morning. I don't cheat, I don't lie. I told you this shit with Veronica was stupid and didn't mean anything because that's the truth. She is an old friend, one who I care for, but I never loved her. We ended things years ago and that's where I left it. Ended. Done. She's gotten her panties in a twist because I came home and found you again. Heaven help me, I can't tell you why she thinks we need to hash shit out again.\" JJ reached for her cigarettes and lighter, but Ashley stopped her with a hand on her arm.\n\n\"JJ, I'm sorry. I knew you said it was meaningless and I believe you. Her messages just seemed so suggestive, like there's something between you that I can't see, it made me angry. It hurt to think that maybe I've actually been floating on a cloud and not seeing what was in front of me.\" Ashley swallowed again, hoping she wasn't about to start crying. \"I had a second of doubt and you didn't deserve it. I'm so sorry.\" \n\nJJ sighed and sat back up, pulling Ashley to her. \"It's okay. I didn't mean to yell. Sorry baby.\" JJ kissed Ashley's head, breathing in the sunscreen and sunshine.\n\n\"I think you need to call her and set up a talk.\" Ashley whispered. She tightened her arms around JJ, hoping her suggestion kept the waters calm.\n\n\"Yeah. Probably. We'll work that out when we're back home.\" JJ tipped Ashley's face up to her, kissed her nose, and then scooted back behind the wheel. \n\n\"And you all wonder why I just have fuck buddies. None of this drama, no thank you.\" Chloe shook her head, looking from Ashley to JJ who both chuckled, relieved to have the tension broken."
    ],
    "authorname": "DarkFang",
    "tags": [
        "dating",
        "camping",
        "lesbian",
        "lesbian sex"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/jj-and-ashley-ch-08"
}
{
    "title": "The First Time I Noticed Ch. 07",
    "pages": [
        "Alexis and Ian face their greatest challenge. Can their love survive? \n\n*\n\nMy apologies for the long delay, but here at last is the final chapter. \n\nIf you haven't yet read the previous chapters, you might want to do that now before you read on. For those who haven't, Ian and Alexis are a brother and sister who discovered each other while sharing a weekend alone at a very private family lake cabin. \n\nIn this chapter, Ian and Alexis return home and try to continue their relationship while living in their father's home and confront a new, even greater challenge. \n\nAll characters are over 18.\n\n**********\n\nI pulled into the long driveway and parked outside the garage. We were home. \n\n\"Ready for this?\" I said to Alexis. \n\n\"As ready as I'll ever be,\" she said. \"Let's get our stuff.\" \n\nIt was about 7:00 p.m. on Sunday evening. Being early June, we still had at least a couple of hours of daylight left. My father, Edward William - William to everyone but my mother, who called him Bill - would be up and either working in his study or having a drink on the deck. He liked to sit outside in the evening and relax with a drink and a good book. \n\n\"Hello!\" I shouted.\n\n\"Back here!\" called my dad. \n\nHe was on the deck. I stepped into the great room. The windows were open and I could feel a cool summer breeze blowing off the river and through the house. The property wasn't anywhere near as large as what we had at the cabin, but it was big for the city, and on the Mississippi. The house itself, of course, dwarfed the cabin. \n\n\"We're going to just put our stuff away and we'll be right out,\" I said. \n\n\"Hi daddy!\" said Lex. \n\n\"Hey Lex!\" said Dad.\n\nWe hauled our bags to our rooms. The house was a large, prairie style home designed by a student of Frank Lloyd Wright. My dad bought it from the original owner, who had it custom built. Our rooms were on the upper floor on opposite sides of the stair landing. We tossed our bags into our rooms and met back on the landing. \n\n\"Remember, Lex,\" I said. \"Whatever happens, I love you more than anything. It's all going to be okay.\" \n\n\"I love you too,\" she said, \"but you have to remember to let me do all the talking about stuff we bought, and about things he still hasn't heard that he wants to buy us.\" \n\n\"I'll trust you on that, Lex,\" I said. \"But remember, we still have a bet about those tickets for your birthday and I'm looking forward to collecting.\" \n\n\"I remember,\" she said. \"Now kiss me, quick. Dad's waiting.\" \n\nI kissed her and it took all the self-control I could muster to let it be just a kiss. As soon as our lips met I was reminded what a challenge that simple act would be. I felt the heat radiate from our lips and the electricity we shared raged through my body. Resisting her was unbearable, but I stopped kissing her somehow. I held her in my arms and told her once again that I loved her. \n\n\"I love you too, Ian,\" she said. \"Let's go.\" \n\nWe went downstairs, crossed the great room, and stepped out onto the deck. Our dad was sitting with a book. A drink sat next to him. It looked untouched. \n\n\"Hey,\" I said, stepping outside. \n\n\"Hi kids,\" he said. \"Grab yourselves a drink or something if you want, then tell me about your weekend.\" \n\n\"Okay, daddy,\" said Lex, \"but first I need a hug.\"\n\nAlexis stepped over and gave our father a hug and a kiss on the cheek. \n\n\"Thanks, Lexi!\" he said. \n\nI hadn't completely noticed before how much his face lit up when she was around. Maybe, after the past couple of days, I understood her effect on us better than I had before. Whenever she was near, I felt just like he looked at the moment she kissed him.  \n\n\"So how was the weekend?\" \n\n\"Beautiful,\" said Alexis. \"We had a great time. Ian almost crashed the Hobie cat once!\" \n\n\"How's that?\" he said, looking at me suspiciously. \n\n\"What?\" I said. \"I did not. And she distracted me!\" \n\nShe had, but I couldn't explain to my dad that she distracted me by flashing her pussy at me on the boat. \n\n\"Did she,\" he said. \"How'd you do that, Lex?\" \n\n\"I was just kidding,\" she said. \"I was just telling him your Japanese golfer joke.\" \n\nHe didn't have a Japanese golfer joke. She had lifted a scene out of a Harry Potter movie. \n\n\"Don't remember ever telling a golfer joke,\" he said. \n\nOf course he didn't. He hadn't told a golfer joke or any other kind of joke that I could ever remember. Maybe he was a different person at the office, but at home he was quiet and reserved. Almost stoic. \n\n\"I probably heard it somewhere else,\" she said, quickly covering her tracks. \n\n\"What else did you two do,\" he said, \"aside from not crashing sailboats?\" \n\n\"Not much,\" I said. \"Hung around the cabin, mostly. We took the canoe out Friday and the cat on Saturday, then Sunday we hiked up to that spot on the ridge.\" \n\n\"I love that spot,\" said my father. \n\n\"And I'm mad that you never took me up there,\" said Alexis. \n\n\"Don't blame me,\" he said. \"Ian asked you loads of times. You always said no.\" \n\n\"Well,\" she said, \"it's beautiful anyway.\" \n\n\"I don't see any bags, Lex,\" said Dad. \"Didn't you do any shopping?\" \n\n\"Not really, Daddy,\" she said. \"We went into Grand Marais on Saturday and stopped in Duluth at the mall and down in Canal Park, but I didn't really get anything.\" \n\nWhat the hell was she on about, I wondered. She had spent hundreds at the Duluth Pack store alone, plus wherever she went in the mall, and at the trading post in Grand Marais. This was a weird tack, but I told her I'd let her handle the shopping part, and I did. \n\n\"What\"?\" he said. \"Why the hell not? I told you to get yourself whatever you wanted up there and you come home empty handed. What good is having money if you don't spend it, Lex?\" \n\n\"Okay,\" I said, looking at my dad. \"That's it. Who are you and what have you done with my father? I mean, whatever happened to financial responsibility?\" \n\n\"Financial responsibility doesn't mean 'don't spend money,' Ian,\" he said. \"It means don't spend money you don't have. Lexi understands. Don't you Lex?\" \n\n\"Of course, Daddy,\" she said. \"And I was just kidding. I got some stuff.\" \n\n\"Oh,\" he said, grinning. \"That's better, then.\" \n\nWhat the actual fuck was my first thought, and then I remember that Alexis had told me this would happen. \n\n\"Did you go over budget, Lex?\" said my dad. \n\n\"Not even close, Daddy,\" \n\n\"See?\" said my dad. \n\n\"You had a budget?\" I said to Alexis. \n\n\"You don't seriously think I'd send her off with a blank check, do you?\" said my dad. \"Even I don't have that kind of money.\" \n\n\"Daddy!\" said Alexis. \"Don't be mean.\" \n\n\"I'm sorry, Lexi,\" he said. \"Just kidding. I know you always behave, and I do have that kind of money.\" \n\n\"Why do you just assume it's all me, Daddy,\" she said. \"Some of this is Ian's, too.\" \n\n\"Sure,\" he said. \"And if Ian spent fifty bucks this weekend, you probably spent five hundred.\" \n\nThat wasn't a bad guess on his part. I had a couple of books, she had - well - I don't know what all she had. There were mystery packages from the mall in Duluth. And all of this still didn't include his very expensive bag. It was going to be fun watching a real master at work over the next few minutes. She opened with a giggle. \n\n\"Actually,\" she said. \"You're probably about right.\" \n\n\"Okay then,\" he said. \"Let's see it.\" \n\n\"Okay daddy!\" said Alexis. \n\nThe whole \"daddy\" thing just killed me. She never called him daddy when we talked about him. In fact, the only time she ever used that word was when she was showcasing what she did with his money. Oh well, back to the show. \n\n\"I'll show you Ian's things first,\" she said, digging in the bags. \"There isn't much. He got these two books. One of them's about Crazy Horse-\" \n\n\"The Sandoz bio?\" said my dad.\n\n\"Yeah,\" I said. \"How'd you guess that?\" \n\n\"I recommended it,\" he said. \n\nHe was right! I thought it had been a classmate, but it was my dad all along. He was a remarkably well informed man. \n\n\"What else?\" said my dad. \n\n\"That's about it, daddy,\" said Alexis. \"There's a Boundary Waters book too.\" \n\n\"Really, Ian?\" he said. \"Why do I bother sending credit cards with you guys if you're not going to use them?\" \n\n\"You didn't send one with me,\" I said. \"Only Lex.\" \n\n\"Would you have used it if I gave you one?\" he said. \n\n\"Probably not.\" \n\n\"The prosecution rests,\" he said. \n\n\"Don't go all lawyer on us,\" I said. \"You're the best attorney in town, it's not fair.\" \n\n\"I never fight fair,\" he said. \"I fight to win.\" \n\n\"I have more stuff to show you,\" said Alexis, \"if you two are about done.\" \n\n\"We're done,\" we said together. \n\n\"Good,\" she said. \"I got this cute hiking outfit. See?\" \n\nShe was still wearing it. She normally changed clothes about ten times a day, but had been wearing this outfit all day. I suppose that had been for my benefit. Every time I looked at her I remember what we did when she put it on - or rather when she took it off. She did a little spin to show dad the whole thing and then, facing him, she bent down to point out her socks. \n\n\"We even got socks, see Daddy,\" she said, running her hands around her ankles and then sliding them up her calves. \"Ian helped me pick it all out. Even the special socks.\" \n\nShe turned around then to look at me. \n\n\"Thanks Ian,\" she said, and she winked. \n\nI wanted to spank that cute little ass she was showing off just for teasing me again, but I was helpless. There was nothing I could do but concentrate on maintaining my composure. For some odd reason I couldn't explain, a thought popped into my head about what my dad was thinking watching her blatantly sexual display. Was he, as her father, somehow immune to the effect she had on me - that she was still having on me. \n\n\"Then we got another outfit,\" she said. \"This one is pants instead of shorts, and the shirt has roll-up sleeves. Ian said that would be better if there are bugs.\" \n\n\"Bugs?\" he said. \"Where? What's with the hiking stuff anyway?\" \n\n\"That's where you come in, Daddy,\" she said. \"Ian thought it might be fun if the two of us went backpacking in the mountains this summer. I want to go to Idaho. What do you think, Daddy? Can we go?\" \n\n\"You two are both adults now,\" he said. \"You don't need my permission to go backpacking. I can help get you guys outfitted, but of course you can go.\" \n\n\"That's why I asked, Daddy,\" she said. \"We'll need some gear. I need boots and a backpack and - well - I don't even know what else we need.\" \n\n\"Idaho, huh?\" he said. \n\n\"Yeah Dad,\" I said. \"I was thinking maybe the Sawtooths or Selkirks. Lex does need a few things, but mainly we'll need to borrow the Jeep. My car can't handle forest roads.\" \n\n\"Take the Jeep if you need it,\" he said. \"I own four cars and can only drive one. The Sawtooths are beautiful, by the way.\" \n\n\"You should come with us, Daddy,\" said Alexis. \n\nI stared at her in dumbstruck horror. The whole point was to be alone for a week, and she just invited him along. \n\n\"That would be wonderful, honey,\" he said. \"But I have a full caseload. I won't be able to get away for more than a few long weekends up north this summer.\" \n\n\"That's too bad, Daddy,\" she said. \"But it did remind me of something. Ian wanted to go canoeing, too. In the Boundary Waters.\" \n\n\"Wow,\" he said, \"I'd love to do that too.\" \n\n\"Really, Daddy!\" she said. \"Can you? That would be awesome - all of us together!\" \n\n\"Sorry, sweetie,\" he said. \"I wish I could, but you two should definitely go.\" \n\n\"That's too bad, Daddy,\" she said. \"We'll miss you, but we'll take loads of pictures and video you can feel almost like you were there.\"\n\nI had to bow to the master. In a matter of seconds my sister had not only talked my father into paying the lion's share of the cost of two vacations, but had left the impression that she wanted him to come along. I was both marveling that it had worked, and panicked that it might blow up in our faces. \n\n\"Sure, Lex,\" he said. \"There's just one thing, though.\" \n\nOh oh, I thought. Here we go. My dad could be kind of oblivious to what the two of us were up to, but he didn't get to be a successful attorney by being stupid. He was getting suspicious, I knew it.\n\n\"What, Daddy?\" said Lex. \n\n\"Why the sudden interest in backpacking and canoe camping?\" he said. \"You've always been kind of a city girl. Wilderness camping is pretty rugged.\" \n\n\"Ian told me all about it,\" she said. \"I think I can handle it, and it's a chance for us to spend more time together this summer. You know how the summers just fly by.\" \n\n\"If it means you two are going to keep getting along this well,\" he said, \"I'm all for it. And you know you can always go buy whatever you need.\" \n\n\"Oh, thank you Daddy!\" she said. \"You're the sweetest Daddy ever!\" \n\n\"Wow, Lex,\" he said. \"You're really laying it on thick. Alright then, what else did you buy?\" \n\n\"Oh Daddy,\" she said. \"I can never fool you, can I?\" \n\nI took a real effort not to snort out loud just then. Can never fool him? She was playing him like a fiddle. I couldn't be sure if he had no idea, or knew perfectly well what she was up to but was powerless to stop her. I was leaning toward the latter, knowing how it felt to be under her spell. \n\n\"I got a couple of other little knickknacks at the trading post, she said. \"Nothing big or expensive, just a couple of candles. And I have this bag.\" \n\nShe produced a Victoria's Secret bag from somewhere inside the generic mall bag. Now I knew where she went while I was at the bookstore. Seeing the bag, my first thought was that it could be interesting seeing what was in it. My second thought was that I was terrified she might actually show us. I was still feeling a bit aroused from her little trick with the socks. She had the body of a Victoria's Secret model, and I sure didn't need to watch a private fashion show with - of all people - my dad. He recognized the label as quickly as I did. \n\n\"It's probably best if I don't see what's in there,\" he said. \"What's the occasion, anyway? Is there I new boyfriend I want to hear about?\" \n\n\"No,\" she said. \"Sometimes a girl wants to feel sexy just for herself.\"\n\n\"Of course, Lexi,\" he said. \n\nMy mind wandered then for a while. She did have a new boyfriend. Me. How nice would it be if I could just say that out loud, and walk over and kiss her and tell my dad hey - meet my new girlfriend - your daughter. This was insane and still unstoppable. I could no more walk away from Alexis than I could detach my own arm and leave it behind. But here I was, a few feet away, and I couldn't kiss her, I couldn't touch her, I couldn't even tell her I loved her in front of my father. It was only now that I was beginning to realize what living this lie was going to be like. \n\n\"You okay Ian?\" said my dad. \"You look a little...unsettled.\"\n\nDear God, I thought. Was I really that transparent? I didn't dare even look at Alexis. I felt as if there was a giant, blinking neon sign over my head, flashing 'I'm fucking my sister' in glaring red lights. \n\n\"No, sorry Dad,\" I said. \"I was just thinking about how much I've missed both of you over the last year. It was harder than I thought it would be. I've even missed our little trust fund baby over here.\" \n\nI was a shitty liar, but while that wasn't an honest answer to my dad's question, it did have the benefit of being the truth. \n\n\"I know just how you feel,\" he said. \"I really missed you both last Thanksgiving, and Christmas and spring break just seemed so short. I'd fly you both home every weekend if you had the time.\" \n\nIt hit me just then that I was going to lose my bet with Alexis. She warned me. I had to give her that. She warned me and I scoffed. Oh well, the payoff wasn't exactly a sacrifice. I was going to \"have to\" lick her pussy. Oh, the humanity. I knew what was up next. The kill shot. \n\n\"It's funny you should mention that, Daddy,\" said Alexis. Daddy, again. It just seemed so transparently shameless, but it worked. \n\n\"What princess?\" said my dad. \n\n\"Are you seriously shitting me, Dad?\" I said. \"Princess?\" \n\n\"Oh, please,\" said my dad. \"Don't pretend she doesn't have the same effect on you.\" \n\n\"What effect is that, Dad?\" I said. Christ, I knew perfectly well what effect she on me. All I could do is hope it wasn't the same effect on my dad. That would be - well - I didn't even want to think about that. \n\n\"You know perfectly well I'm a sucker for the whole 'daddy's little girl' shtick,\" said my dad. \"Even when I know she's doing it it's hard to resist.\"\n\n\"Daddy!\" said Alexis. \"You talk like I'm just doing it all for show.\" \n\n\"Okay,\" I said, \"just stop. Both of you. It's all too much. Lex, just tell Dad what you want.\" \n\n\"You take all the fun out of things, Ian,\" said Alexis, but she looked my way and gave me a little smile. There was a twinkle in her eye that somehow told me I was playing along perfectly. If I had, I'd only done so accidentally. \n\n\"So, Dad,\" she continued, \"I was thinking that this is my last year in college-\" \n\n\"You're not going to grad school?\" said my dad.\n\n\"Let's say it's my last year as an undergrad then,\" she said. \"And my birthday falls in the middle of the fall term.\" \n\n\"Yeah,\" said my dad. \"You may be shocked to learn that I know your birth date. I was there at the time, you know.\" \n\n\"Oh Daddy,\" she said, \"you're such a card.\" \n\n\"Good God, Lex,\" I said. \"Can you please get to the fucking point?\" \n\n\"Ian!\" said my dad. \n\n\"Sorry, Dad,\" I said. \"It's just getting awfully deep out here.\" \n\n\"Fine,\" said Alexis. \"I want a birthday party.\" \n\n\"You'll be in New York,\" said my dad. \"I'll send a card.\" \n\nFuck yeah, I thought. There's still hope. Those were the exact words I told her he would say. \n\n\"Aren't you funny, Dad,\" said Alexis. \"I want a real party, here. You should fly Ian and me home for a long weekend so we can all be together.\" \n\n\"So we can all be together?\" said my dad. \n\n\"Well,\" she said, \"I wouldn't exactly object if you wanted to get me birthday presents.\" \n\n\"Naturally,\" he said. \"Couldn't we just have a party when you come home for Thanksgiving?\"\n\nOh yeah, I thought. My exact words, again. I almost started getting hard thinking about the blow-job Alexis was going to owe me, and damn, she could suck cock like a virtuoso.\n\n\"But Daddy,\" said Alexis, \"it's not the same.\" \n\nOh oh. Here it came. \n\n\"Thanksgiving is almost two months after my birthday,\" she said. \"I've had to spend three birthdays all by myself. I should be able to spend my last birthday in college with my two favorite people!\" \n\nShit. Or maybe not. I could see the writing on the wall. I wasn't going to be getting that blow-job, but it wasn't like eating Lexi's pussy was a hardship. Still, she had to deliver two tickets. Two. Hope springs eternal, they say. It did for me. \n\n\"So you'll pay for my ticket?\" she said. \n\n\"Sure, baby,\" he said. \"I'll fly you home for your birthday and we'll have a nice party. With presents.\" \n\n\"Ian too?\" she said. There was still a chance. He could say no. \n\n\"Of course, Lex,\" he said. Who was I kidding? As soon as I saw her work her magic on my dad I knew I was going to be paying off that bet. \n\n\"Hey Ian,\" said . \n\n\"What?\" \n\n\"I win!\" \n\n\"Win what, Lex?\" said my dad. \n\n\"Oh, nothing, Dad,\" said Alexis. \"This weekend I told Ian I wanted him to come home for my birthday and he said he couldn't afford it. I bet him you would fly us home and I won.\" \n\n\"Bet him what?\" said my dad. I sat on the edge between complete terror and morbid fascination, wondering how she was going to get us out of explaining our bet.\n\n\"Oh, nothing, Daddy,\" she said. \"He has to take me to the movies on Tuesday. If he had won we were going to ask if we could use your tickets for Tuesday's Twins game.\" \n\nThat was easier for her than I thought. \n\n\"One other thing,\" I said, hoping to move along before he asked anything else about our bet. \n",
        "\"What?\" he said. \n\n\"We both want to come home for Thanksgiving, too,\" I said. \"We were kind of hoping you'd pay for those tickets. We both want to fly out to see Mom for her birthday in October and I can't afford to pay for both.\" \n\nI should have let Alexis handle this, but I didn't dare risk continuing that conversation about our bet. \n\n\"Sure,\" he said. \"I'll pay for your tickets, and you don't have to worry about getting to Los Angeles, either. I'll get those, too.\" \n\n\"Ah,\" I said, dumbfounded. \n\n\"Daddy?\" said Alexis. It was the first, and in all likelihood the last time I saw her shocked about spending our father's money. \n\n\"I, ah,\" he was actually stammering. I had never seen this before. \n\n\"Dad?\" I said. \"What's wrong?\" \n\n\"There's absolutely nothing wrong, Ian,\" he said. \"I had hoped to tell you this news later, but I suppose now's as good a time as any.\"\n\n\"What news?\" said Alexis. \n\n\"You guys remember that merger I worked on last year?\" he said. \"After it went through, I not only made a lot of money, but I also made senior partner.\" \n\n\"We know that,\" said Alexis. \n\n\"That allowed me to pick up the really lucrative cases,\" he said. \"And last winter I worked on a big product liability suit. It finally paid off.\" \n\n\"Sure,\" I said, \"so you're worth a few bucks now, right.\" \n\n\"More than just a few,\" he said. \"The merger was worth nearly eight million dollars.\" \n\n\"Eight MILLION?\" said Alexis. \"Wow. What was your cut of that?\" \n\n\"That was my cut, Lex,\" said my dad. \"The settlement on the liability case was a lot bigger.\" \n\n\"How much bigger?\" I said. \n\n\"It was nearly eighty-seven million,\" said my dad. \n\n\"Jesus!\" I said. \n\n\"Wow,\" said Alexis. \"And you're a senior partner now. How much of that is yours as senior partner.\" \n\n\"Once again, that was my cut,\" said my dad, \"Between those two cases alone I'm worth over ninety-five million dollars now. And I wasn't exactly broke before those paid off.\" \n\nLex and I both stared at him in stunned silence. My dad was worth close to a hundred million dollars. The money Lex had spent over the weekend really was like pocket change to him now. \n\n\"Ah...\" I said, then just stopped. I was completely speechless. \n\n\"There's more,\" he said. \n\n\"More?\" said Alexis. \n\n\"The case I'm working on this summer is worth close to ten times that much for the firm,\" he said. \"And I have no doubt at all that we'll win. It's only a matter of how much.\" \n\n\"Holy fuck,\" I mumbled. \n\n\"Language, Ian, but yeah,\" said my dad. \"That's what I thought when I saw the check. I celebrated by buying four season tickets.\" \n\n\"But you already had season tickets,\" I said, \"on the first base line. What did you do with those?\" \n\n\"I gave them to your uncle,\" he said. \"You know he loves baseball.\" \n\n\"You you gonna retire?\" said Alexis. \"You could live forever on that much money.\" \n\n\"It's not about the money, Lex,\" he said. \"The work I do is important. A lot of people's lives were ruined in the accident that led to that liability suit. As lawyers we can't fix their injuries, but we can get all their medical care paid for and give them a chance to live a good life and take care of their families. Lots of kids will get to go to college because of my work.\" \n\n\"I never thought of that,\" I said. \n\n\"And I don't plan to keep all of what's left,\" he said. \"You two are both millionaires, now, of course, but-\" \n\n\"What?\" I said. \n\n\"I've transferred some money to each of you,\" he said. \n\n\"Some money?\" said Alexis. \n\n\"A few million. Each. I'll...ah...get you all the details in the morning,\" he said. \"We'll head downtown. I have tax and finance guys you can talk to. They'll explain how to get the money and the best ways to invest it and what not. I'll setup something in the morning.\" \n\n\"You're totally serious, then?\" said Alexis. \"You're not just...just...fucking with us?\" \n\n\"No, Lex,\" said my dad. \"I'm not just fucking with you. You're both millionaires. If you invest wisely and don't spend like drunken sailors, you'll be independently wealthy for the rest of your lives. And of course I won't live forever. You'll inherent whatever I'm worth, eventually.\" \n\n\"Not for a long, long time, I hope,\" I said. \n\n\"Me too,\" said my dad. \"There will be more for you two when this next case pays off, which could take years, by the way. But I also plan on giving a lot of it away. I can make a real difference with this much money. Did you know, for example, that the ALS foundation only has about fifteen million a year to spend on research?\" \n\n\"Jesus,\" I said. \"It's hard to get your head around it - how much money that is.\" \n\n\"Yeah,\" he said, \"and we haven't even counted the possible earnings from my new case yet. That's just what's already been paid.\" \n\n\"I don't know what to say,\" said Alexis. \n\n\"For now, Lex,\" said my dad, \"let's just say you can fly home, or to your mom's place, whenever you want.\" \n\n\"Wow,\" I said. \"I'm...overwhelmed.\" \n\n\"Yeah,\" said Alexis. \n\n\"I know it's a lot to take in,\" said my father. \"For now, what do you say about having dinner to celebrate?\" \n\n\"I could eat,\" I said. It had been nearly four hours since we'd had our late lunch at Grandma's in Duluth. \n\n\"Hey, wait!\" said Alexis. \"I nearly forgot. We got you a present, Dad!\" \n\n\"Really?\" he said. \n\n\"Yeah,\" said Alexis. \"I didn't have time to wrap it, so just close your eyes until I tell you to open them.\" \n\nShe disappeared into the house somewhere and returned with the expensive bag she got for my father in Duluth. Or was it still expensive? I wasn't sure I knew what that meant any longer. My father had given my sister and I each a portion of his earnings, and even though that portion was a modest percentage of the total, it was, at least for me, an unimaginable sum of money. \n\n\"Okay Daddy!,\" she said. \"You can open your eyes now.\" \n\n\"Wow!\" he said. \"Thank you Lexi. I've been wanting one of these for years, and these bison leather bags are just beautiful. Come here and give me a hug!\" \n\nShe ran over to him and hopped on his lap like she was still twelve. I heard a little grunt when she landed, but he never stopped smiling at her. She hugged him, then kissed him on the cheek, then hugged him again, and finally just rested on his shoulder. I sat watching her and was transported back in time a decade to when she really was only about twelve. She had always been his little girl. Now he could really spoil her, but I was beginning to realize that in her own way she was as rational and responsible as I was. While I was fretting over price tags, she was just thinking about making our father happy. That was her nature. She made everyone around her happy because making everyone happy was important to her, and I loved her for it. \n\n\"Okay you two,\" said my father. \"Go get ready for dinner.\" \n\n\"Where are we doing?\" said Alexis. \n\n\"It's a surprise,\" he said. \"Just dress nice. After all, we're celebrating.\" \n\nWe both left to go get ready. It had been a long day and I needed a shower. I quickly cleaned up and grabbed a clean pair of jeans from my closet. Then I remembered that my father had told us to dress nice, so I dug around a little longer and found a gray pinstripe suit in the back of my closet, then picked out a shirt and tie to go with it. I was about to step into the shower when there was a knock at my bedroom door. \n\n\"Lex?\" I said, opening my door. She was wearing a bathrobe. \"What?\" \n\n\"Can you believe what Dad was telling us?\" \n\n\"It's a little overwhelming,\" I said, \"but yeah. We're both worth millions. I don't know what to think.\" \n\n\"I do,\" said my sister. \"All that money is making me horny!\" \n\n\"Seriously, Lex?\" I said, wondering if I was more alarmed or aroused.\n\n\"Yes,\" she said, stepping into my room and closing the door behind her. She dropped the robe and was naked beneath it. \n\n\"We don't have time,\" I said. My alarmed side was speaking. \n\n\"You'll have to be quick, then,\" said Alexis. She looked down. \"Looks like you're almost ready to go now.\" \n\n\"God help me,\" I said. I was almost ready. \n\n\"Let me help instead,\" she said, and she closed the gap between us and took my rapidly swelling cock into her hand, gently stroking it while she met my lips with hers. Apparently we were going to find the time for this, somehow. \n\n\"We'll have to be quiet,\" I said. My alarmed side was still speaking, but my aroused side had taken over. \n\n\"Maybe you should stick something in my mouth to shut me up,\" said Alexis. My sister dropped onto her knees in front of me and stuffed my cock into her mouth. It was heavenly. Warm and wet. She wasted no time with gentle preliminaries and opened with her best effort, swirling her tongue around my shaft and taking my head deep into her mouth. She took me back, back, back until she had swallowed all of my head and part of my shaft into her throat, then bobbed up again until my head was just at her lips, but as she did she replaced her tongue with her hands, twisting and gliding on my spit soaked shaft. She had barely started, and I could already feel my cock starting to tingle. \n\n\"Jesus, Lex,\" I said, \"that's fucking amazing what you're doing to my cock.\" \n\nShe popped her head up and off of my cock. I actually moaned a little in frustration when my cock left her mouth. \n\n\"Good,\" she said, \"but it better not be too amazing. I have plans for this beast so don't you dare come in my mouth.\" \n\n\"Whatever you say, sis,\" I said. \"But before you get back to that, let's get on the bed.\" \n\nI took a couple of steps back and flopped back onto the mattress, but instead of just following me up and swallowing my cock again, she climbed over the side and threw a leg over my head, then took my cock in her mouth. Her pussy was right above my face, and the view was spectacular. I had an up close look at my sister's beautiful pussy and ass. She stopped sucking again. \n\n\"Waiting for something?\" she said. \n\n\"Ah,\" I said, \"no, I just like the view.\" \n\n\"Get busy,\" she said. \n\nI didn't argue with that either, I just grabbed a pair of ass cheeks and pulled my sister's pussy down to my mouth. I could still feel her working her magic on me, but now I had her delicious pussy to distract me and didn't feel like I was going to come any second. I licked and sucked on her pussy greedily, and what I was doing seemed to be working because in no time she began to produce a trickle of sumptuous cream. As I focused my attention on her clit, I could feel the vibrations from her moans reverberate through my cock, making me swell even further. I had to break off my attention to her clit. \n\n\"Lex,\" I said. \"You have to stop or I'll come.\" \n\n\"Uh uh,\" she mumbled, and kept going. Whatever plan she'd had before had apparently been tossed out the window, because she redoubled her efforts on my cock. Again I grabbed her beautiful ass - one perfect cheek in each hand - and pulled her pussy onto my face. I felt my release was just moments away and concentrated on her clit again, hoping to bring her to climax when I reached mine. \n\nBut her plan was still in effect. Just when I felt I had reached the point of no return, the stopped sucking, licking, twisting, and stroking. She wrapped her hand around the base of my cock and squeezed. She squeezed hard. It wasn't hard enough to hurt, but it was hard enough to stop me from coming. I however, didn't stop. I couldn't stop. I kept at her, licking and sucking on her clit, and lapping up the creamy juices that were flowing freely from her pussy. \n\nShe was sitting up on me, leaving my cock, thankfully, alone. I don't think I could have taken so much as the gentlest of rubs without coming, but I wasn't about to give her the same treatment. I managed to lift her off of me for a moment. \n\n\"Play with your tits for me, sis,\" I said, and quickly put my mouth back to work on her pussy. \n\nI couldn't see her hands, but I could tell where they were. She was playing with her nipples, pinching and twisting them. It was like there was a direct line from her nipples to her pussy, because with each twist and turn of her nipples her pussy contracted and another droplet of juice was squeezed out. I lapped it up hungrily as I kneaded my sister's beautiful ass cheeks when finally I felt her thighs squeezing my head and a gush of cream flowed from her. I kept lapping at her, licking up every drop of her delicious nectar, and then sucking on her clit to release even more of her essence. Again I felt her go rigid, and heard a muffled moan. Still she rode me, and still I persisted, not stopping my onslaught until she came again, this time collapsing on me, exhausted in ecstasy, but not yet done. \n\n\"Roll me over,\" she said, \"and fuck me 'till you come.\" \n\nI did. She sleepily rolled off of me and I spun around and climbed on top of her, then slipped my still throbbing cock into her soaking pussy. Tight, wet, and warm, it was a phenomenal sensation being inside my sister. On top of her now, my hands and mouth found their way to her supple breasts and I relished in the feeling and taste of her firm flesh. Gently at first, and then with increasing vigor, I slid my engorged cock in and out of her while she sluggishly moved under me. \n\n\"Harder,\" she said faintly, still limp and passive, but my hands and lips on her breasts, and the relentless motion of my distended cock were reviving her. \n\n\"Harder!\" she said, roused and attentive. She was moving more vigorously, matching my motion with her own. I could feel my release coming, and there was nothing to stop it this time. \n\n\"So close,\" I managed to mutter. \n\n\"Harder!\" she said, fully aware and alive now and meeting my thrusts energetically. \"Come in me, Ian, come in your sister.\" \n\nThen she pulled my head to hers and kissed me. I lost all awareness of anything but her when our lips met. It was like a lightning bolt passed through me, warmth and electricity passing through our lips and radiating out through my body. For a brief moment, I forgot about the overwhelming sensations in my cock and groin as her kiss took hold of my consciousness. Then that wave of energy bounced through my body and refocused back at my groin, and I came in a staggering burst of energy. My balls contracted and I sent surge after surge of cum into her pussy as I felt her throbbing in one, final, glorious climax of her own. Her pussy grasped my cock as I continued expelling my cum into my sister. Her throbbing slowed as mine did, and my thrusting slowed as my orgasm subsided, until eventually I was just resting within her. My still firm cock pulsed gently inside her as we both slowly regained our senses. At last our breathing returned to normal and we once again became aware of our surroundings. I placidly eased my cock out of her and slid over to lie next to her on the bed, spent and satisfied. \n\n\"Holy fuck, Ian,\" she said after a moment. \"The things you do to me. I lost track of how many times I came.\" \n\n\"Me too,\" I said. \"You were amazing, but where we are is coming back to me now.\"\n\n\"I know,\" she said. \"I have to go get ready.\" \n\n\"Yeah,\" I said. \"You do.\" But neither of us moved. We were both just a little bit too content. \n\n\"Dad's waiting,\" I said at last. \n\n\"I know,\" she said. \"I'm up, I'm up.\" \n\nShe got up. \n\n\"I'll see you downstairs in a bit,\" said Alexis. \n\n\"Okay sis,\" I said, smiling. \"And thanks. I'll see you soon.\" \n\nShe grabbed her robe on the way out and ran back to her own room and her own bathroom. All I could do was savor the sight of her perfect ass as she left the room, then head for my own bathroom and a quick shower. Fortunately, even though I felt like we had been lost in time, we had really only been together for a few short minutes. Somehow, when I was with her, time lost all meaning. It was delightful and yet dangerous. Times like this, when what seemed endless turned out to only be minutes, were balanced by times that seemed to fly by when hours had passed. It was those latter cases that created the risk of someone - like my father - coming to look for us. There was, in any case, no time to dwell on time. I quickly showered, dressed and went downstairs to meet my father and wait for Alexis.\n\nMy dad had gotten dressed quickly and was ready and waiting when I arrived. He was wearing a well tailored suit. We weren't exactly ready for the Red Carpet, but we cleaned up okay and looked moderately refined while we waited for Alexis in the spacious living room. We were chatting about school in New York and Oregon when she arrived, and her appearance stopped our conversation in mid-sentence. \n\nShe was wearing a black one-shoulder mini dress with a cap sleeve. It fit her body like a second, sexy skin. The hemline was high, but not too high, and at the end of her astonishing legs were a pair of black patent leather shoes. Around her neck hung an asymmetric necklace that looked like it had been knitted with copper thread. It balanced the one-shoulder dress perfectly. Her long, wavy hair had been pulled back into some kind of loose bun or braid. I'm not sure exactly what it was. She was, in short, the most beautiful thing I had ever seen. My father stepped next to me to whisper something in my ear. \n\n\"Close your mouth, son,\" he said. \n\n\"Huh?\" I stammered. \"Oh. Right.\" \n\nI closed my jaw, but couldn't take my eyes off of Alexis. \n\n\"What?\" she said at last, seemingly oblivious to the effect she had on both of us. \"You said to dress up, didn't you?\" \n\n\"We're, um...\" my father was stammering. The man was a trial lawyer. He was used to taking stunning and unexpected news as if it was exactly what he expected to hear. It took a lot to set him off balance. \n\n\"Just a little...overwhelmed,\" I said. \n\n\"Is it too much?\" said Alexis. \"I could change into something more casual.\" \n\n\"NO!\" \n\nMy father and I both said it together. I practically shouted and even he was a little loud. It broke the spell, and a second later we were all laughing. \n\n\"Sorry, Lex,\" said my father, finally. \"Sometimes I still think of you as my little girl. My eyes and my brain weren't working together there for a second.\" \n\n\"How's the back?\" she said, and she turned around. \n\nI had been sincerely hoping she wouldn't do that. She was sexy enough from the front, and just imagining what her butt would look like in that dress had my mind reeling. I couldn't help myself, and I looked anyway. She hadn't exactly just turned around. She had struck a pose, kind of turned mostly away, but was still looking back over her shoulder at us. I hadn't noticed it before, but there was a fine line of silver beading that started on the neckline in the front, then expanded to cover most of the shoulder strap and sleeve. In back it expanded dramatically, with the beads spread over a sheer back that swept down and across her body to her opposite hip. Below the shoulder, the sheer fabric curved in with her waist, then swept back out again toward her hip, then rode a wave back across her above the rise of her ass. \n\nSomehow I managed to tear my eyes away from her to glance at my dad. Maybe I was hoping he wouldn't notice that my pants were tenting. What I saw was him slowly closing his eyes. He took a deep breath, exhaled, and then opened them again and gave his head a little shake. I felt his pain, that much was certain. No man could look at her and not be enthralled. \n\n\"Is it okay, daddy?\" said Alexis. \n\nShe actually sounded a little concerned. I knew she had to be aware of the effect she was having on me. Could she really be oblivious to the effect she must have had on our father? \n\n\"Yeah, baby girl,\" he said. \"It sure is. I was just reminded of how much you look like your mother when she was your age. She was truly beautiful, but couldn't hold a candle to you.\" \n\n\"Daddy,\" she said. \"You're so sweet.\" \n\nShe walked up to him and wrapped her arms around him in a hug. Knowing what having her body pressed against mine felt like, I felt a strange mix of jealousy that it wasn't me and also sympathy for my father. Even if she was his daughter, he couldn't fail to see and feel how stunning she was. ",
        "\"And look at you, Ian,\" she said, turning my way and stepping next to me. She ran her hand down the lapel of my jacket, then ran both hands over my shoulders. \n\n\"You look dashing,\" she said. \n\n\"I think that's code for dull,\" I said. \"What do you think, Dad?\" \n\n\"It is not!\" said Alexis. \"You look really handsome.\" \n\nShe turned to our father. \"And so do you, Dad! I love a man in a suit and tie. You both look so sophisticated.\"\n\n\"Now that we're all agreed that we'll be the talk of the town,\" said my father. \"We should go. Our car should be waiting.\" \n\n\"Our car?\" I said as we all made our way to the front door. \n\n\"I had a limo sent over,\" he said. \"I wanted to celebrate, so I don't want to worry about driving home.\" \n\n\"You mean like the one I had for prom?\" said Alexis. Her date and a few friends had all pitched in on a stretch limo for the evening. \n\n\"Not exactly,\" said my father as he opened the door. \n\nI stepped out to see, parked at the top of our driveway in front of the door, a classic Rolls Royce in silver. It appeared to be 1960's vintage, but I knew nothing about Rolls Royce cars, or any cars from the 60s as far as that went. The driver stood next to the back door wearing a black three piece suit and a chauffeur's hat. \n\n\"Good evening, everyone,\" said the driver, opening the back door as we walked down the steps. \n\n\"I feel like I've stepped onto a movie set,\" said Alexis. \n\n\"You look like you've stepped onto a movie set,\" I said. \n\n\"You first, son,\" said my father. \"Lex can sit between us.\" \n\n\"Sounds cozy,\" said Alexis. \n\nI climbed in, Alexis followed, and my father slid in next to her. The driver closed the door and walked around to front. \n\n\"Where to, sir?\" he said to my father as he got in. \n\n\"The Nicollet Club,\" said my father. \n\n\"Right away,\" said the driver, and began making his way down our driveway. \n\n\"Really?\" said Alexis. \"That's the hottest restaurant in town. You must have made reservations weeks ago.\" \n\n\"No need,\" said my father. \"I've been handling the owner's legal work since he opened.\" \n\nDinner was exceptional. The restaurant had earned its reputation and was good, not just trendy. It was also good that our father had asked us to dress nice. Even Alexis, stunning as she was, didn't look out of place. Of course, that didn't mean she wasn't still the most beautiful woman there. We spent most of dinner going over our plans for the summer and fall. Later, Dad surprised us when he suggested that we both consider quitting our summer jobs. We didn't need the money and could take the time to travel, perhaps extending the trips we had already planned or adding others, or just working with his financial advisors and learning the ins and outs of stocks, bonds, and investments. He made a good point that by simply investing our money wisely we could earn more than we could ever collect in wages at a summer job. I had to admit there probably weren't many millionaires slinging around bags of grass seed at the home store. \n\nEventually dinner was over and we returned home in the same incredible car. While my father had already been able to adapt, for Alexis and I it was all new, exciting, and a little overwhelming. When we got home, we all changed into more casual clothes and went back out to the deck to mull over our new reality. \n\nMy dad asked Alexis to mix him a drink and told her to get one for herself and for me as well. He said it was good for us to let loose now. In the morning we could start fresh with clear heads, but tonight was the time to celebrate. Ever the lawyer, he rambled on about investments again, reminding us that if we invested wisely - and he had just the right people lined up to help us do that - that we could live well without needing to ever again answer to a boss we didn't respect. \n\n\"But you're still working,\" said Alexis. \n\n\"I am,\" he said, \"but I admire the people that I work with. I'm also a senior partner now, so I direct my own work and I can hand off the parts of it I don't enjoy. It's still work, but it's fulfilling, and that's what I want each of you to find for yourselves. Naturally, the money you have available means you can chart any path you like now.\" \n\n\"What do you mean?\" I said. \n\n\"I mean this affects your education as well,\" he said. \"If you're happy with what you're doing then that's great, but if you picked a path because it was a way to earn a living and not because it was your passion, then you can change course.\" \n\n\"I hadn't thought about that,\" I said. \n\n\"There's probably a lot of things this money means that you haven't thought about,\" said my father. \"The people I've arranged for you to see tomorrow will go over a lot of it, or at least the financials, but there are other things they can't really help you with.\"\n\n\"Like what?\" said Alexis. \n\n\"Dating, for one,\" said my father. \"Your wealth is going to add an aspect to it that has never been there before.\" \n\n\"You mean Ian will be able to get dates now?\" said Alexis. \n\n\"Oh shut up,\" I said to Lex. \"I get plenty of dates.\" \n\n\"Play nice, you two,\" said my dad. \"What I mean is that once people find out you're rich, it'll be harder for you to know if they want you for you, or for your money.\" \n\n\"I hadn't thought of that,\" said Alexis. \n\n\"No doubt you were already getting plenty of attention, sis,\" I said. \"I don't think you needed to be rich to get dates.\" \n\n\"Actually,\" she said, \"I haven't really dated much lately.\" \n\n\"Why not?\" I said. It wasn't that I wanted her dating anyone now, but I was a little curious why she didn't have a boyfriend. \n\n\"I get asked often enough,\" she said, \"and I go out now and then. It's just never turned into anything serious. I guess I just haven't found the right guy yet. Besides, I have you two here to lavish attention on me.\" \n\n\"Maybe so,\" said my father, \"but not necessarily all the kinds of attention a young woman needs.\"\n\n\"God, Dad!\" said Alexis. \"We are not going to talk about my sex life.\"\n\nThank God for that. This was a topic I really didn't want to breach with my father. \n\n\"Okay,\" said my father. \"Just don't pretend you don't have one and I won't ask for details. I'm not some Victorian relic, you know. Hell, your grandparents were at Woodstock.\" \n\n\"Alright,\" I said. \"Can we please go back to talking about school now?\" \n\n\"Yeah,\" said Alexis. \"I really don't need a picture in my head of Nana and Gramps doing it.\" \n\n\"Fair enough,\" said my father, \"but you're not the first generation of people to think about sex. How do you think you got here? Hell, how do you think I got here?\" \n\n\"Just stop, okay!\" I said. \"I can know all that without having to actually picture it in my mind. Now about this school thing.\" \n\n\"What about it?\" said my father. \n\nI didn't really care that much about school at that moment, but at least we weren't still talking about sex, or my parents having sex, or my grandparents having sex. \n\n\"Maybe I did go into engineering for the money,\" I said. \"I'm not sure anymore.\" \n\n\"A year ago I never would have said this,\" said my father, \"but if you want to take some time off and think about it, I wouldn't object.\" \n\n\"Really?\" said Alexis.\n\n\"Really,\" said my father. \"Even for you, Lex. I know you're a year away from finishing, but it's never too late to change your course in life, and now you don't have to worry about the cost of doing it. Anyway, neither of you have to make any decisions tonight or even soon. You have all summer to think about it, and your real financial education will start tomorrow. But for now, I've had a long day, too much to drink, and I'm going to bed.\" \n\n\"Okay, Dad,\" said Alexis. \n\n\"Alright then,\" I said. \"Goodnight. I think I'll probably sit up a while or maybe take a walk. My mind is kind of reeling right now and I don't think I could sleep.\" \n\n\"Me either,\" said Alexis. \"Can I walk with you?\"\n\n\"Sure,\" I said. \n\n\"You two have fun,\" said my father, getting up and heading into the house. \"I'll see you in the morning.\" \n\n\"Come on, Lex,\" I said, getting up and offering her my hand. \"Let's go.\" \n\nShe took my hand in hers and we walked off the deck and around the side of the house to the street. Once we were safely away Alexis broke the silence. \n\n\"I don't have any idea how I feel about any of this,\" she said, \"but I do know one thing.\" \n\n\"What's that?\" I said. \n\n\"We aren't going to have any trouble getting together now,\" she said, \"at least not on weekends.\" \n\n\"That's for sure,\" I said. \"Are you going to stay in school?\" \n\n\"I don't know,\" she said. Then she hesitated, and went on. \"I mean, yes, I am. I don't know if I still want to teach English, but I want to at least finish my degree. How about you?\" \n\n\"I honestly don't know now,\" I said. \"Dad said I could take some time off. Maybe I could move to New York. We could share an apartment.\" \n\n\"I can't believe I didn't think of that,\" said Alexis. \"This really changes everything, doesn't it.\" \n\n\"It changes a lot,\" I said, \"but not everything. We still can't tell anyone about us.\" \n\nShe let go of my hand just then. \n\n\"I...I forgot,\" she said. \"We're right in our own neighborhood. Someone could see us.\" \n\n\"I don't care about that, Lex,\" I said. \"We're just taking a walk and holding hands. It's not that crazy, even for a brother and sister. The only person I really care about is Dad.\"\n\n\"I hate lying to him,\" she said. \"But there's no other way and I won't give you up.\" \n\n\"I won't give you up either,\" I said. \"We'll make it work.\"\n\nWe walked quietly for a while, both lost in our thoughts of how our new situation would change our lives. We had two big hurdles. The first was finding a way to be together. Our new money solved that problem. Finding a way to keep our relationship secret was a bigger problem. \n\nAnd in between these thoughts was Alexis. While my head spun trying to make sense of my new life, my hand was still touching hers, and her touch was as electric as ever. I would get lost in thought, then I would feel her hand in mine and look at her. And when I looked at her thoughts of everything else faded into the background. She was devastatingly beautiful, I was hopelessly in love, and I couldn't look at her without losing track of where I was and what I was doing. At last we came to a small, neighborhood park. \n\n\"Lex,\" I said. \"Let's duck in here for a minute. I need to collect my thoughts and I need a minute with you where I don't have to walk and chew gum at the same time.\" \n\n\"Distracted, are you?\" she said. \n\n\"You know I am,\" I said, \"always.\" \n\n\"Okay,\" she said, smiling. \"There's a bench over there.\" \n\nIt was perfect. The park was quiet and secluded, and the bench was screened from the street by nearby shrubs and trees. We walked over and sat down together. \n\n\"I can't stop thinking about being with you all the time,\" I said. \"And I want to kiss you so bad right now.\" \n\n\"What are you waiting for?\" she said. \"Nobody can see us here.\" \n\nShe was right. I wrapped my arms around her and kissed her. I could feel the soft, warm summer breeze flowing over me as the warmth of her lips flowed into mine and radiated through my body. It was as electric as ever. Then I remembered where we were, and stopped. \n\n\"Lex,\" I managed to mutter. \"I...I'm not sure I trust myself to do this here. Just a moment kissing you and now I want to touch you, too. To feel every bit of your body.\" \n\n\"I want more than that,\" she said. \"Touch me, just for a moment. Then we can go.\" \n\nI brought one hand down from her shoulder and gently cupped her breast in my palm. I could feel the hardness of her nipple and squeezed. She gave up a small moan and I covered her mouth with a kiss to quiet her. Again I felt the warmth of her lips and felt the energy run straight to my groin. My cock was swelling, my chest was heaving, and I was losing myself in the sensation of her body in my hands and her lips against mine. \n\n\"Get on my lap,\" I said. \"I need to feel your ass.\" \n\nShe swung a leg across my lap and straddled me. My cock was tenting my shorts and I could feel the pressure of my head against her pussy. I reached around her and grabbed her ass, caressing those perfect cheeks. Our lips never parted, and my head began to reel. \n\n\"Ian,\" she said. \n\n\"Mmm,\" was I could manage as a reply. \n\n\"Ian!\" she said. \"We have to stop.\"\n\n\"Uh huh,\" I said. \n\n\"Seriously,\" she said, but she was grinding on me now. \"We...we can't do this here.\" \n\n\"Where then?\" I said. \n\n\"Let's go home,\" she said. \n\n\"Dad's home,\" I said. \n\n\"We'll be quiet,\" she said. \n\n\"Um,\" I said. \"Okay.\" \n\nI was almost in a frenzy at that point. My cock was throbbing. She had told me we needed to stop but she was still grinding on me. I wanted to rip her shorts off and fuck her right there in the park, but I knew how completely insane that was. What we were already doing was a terrible risk. I had to make her stop while I still could.\n\n\"Lexi,\" I said. \"Get off.\" \n\n\"Good idea,\" she said, and she ground her hips against mine harder than ever. \n\n\"No,\" I said. \"You have to stop now, while I still can. God, I'm so fucking hot for you. Please get off of me.\" \n\n\"I don't want to,\" she said. \n\n\"Me either,\" I said, and then I simply stood up. She dropped her feet to the ground as I stood up and was standing in front of me. Somehow, my hands were still on her ass, squeezing the beautiful globes of her cheeks, and we were kissing again. She broke the kiss. \n\n\"Take my hand, Ian,\" she said. \"Hold my hand and let's walk home.\" \n\n\"Okay,\" I said, and reluctantly removed both hands from her ass and took one hand in mine. My cock was throbbing, but in spite of it I just held her hand in mine and began walking out of the park toward home. \n\n\"I thought you were going to fuck me right there on the park bench,\" said Alexis. \n\n\"So did I,\" I said. \"I just don't even understand what you do to me. I can't ever get enough of you. My cock is aching for you.\" \n\n\"Don't talk about your cock,\" she said. \"I can't take it. My pussy is already soaked. I'm using all the self control I can muster not to drop my shorts right here.\" \n\n\"Let's hurry home,\" I said. \n\nWe all but ran the few short blocks we had walked on the way out. We quietly made our way through the front door and made our way up the stairs to my sister's room. She shut the door hard behind me when I followed her in. \n\n\"Careful,\" I said quietly. \"We don't want to wake Dad.\" \n\n\"We don't even know if he's asleep,\" she said. \n\n\"That's true,\" I said. \"You should go check.\" \n\n\"You're right,\" she said, and she charged out of the room. I heard her feet on the stairs and again as she tromped across the house to the master suite. Seconds later she came running back, taking the steps two at a time on the way back up. I had pulled off my shirt while she was away and tossed it aside. \n\n\"He's out,\" she said as she put her hands on my chest and walked me back to her bed. \n\n\"Thank God,\" I said, sitting down on the edge of the bed. \n\n\"I like your new shirt,\" she said, \"now let's get these off of you, too.\" \n\nShe unbuttoned my shorts and pulled them down along with my boxers. My aching cock bobbed in front of her as it sprang free from my shorts. I kicked them away and was naked before her. \n\n\"Has it really only been since before dinner?\" I said, watching her stare, transfixed, at my cock. \n\n\"Seems like forever,\" she said, then she knelt before me and took my cock into her mouth. She seemed almost frantic in her effort to get me aroused. It didn't take much. After just a minute or two I felt like I was already close to finished. \n\n\"Mmm,\" she said. \"That was a good warm up.\" \n\nIf that was a warm up, I had no idea what might be next, but I could only imagine it would be spectacular. The first thing I needed to, however, was to get her clothes off. \n\n\"Strip, sis,\" I said, wanting her naked as quickly as possible. She didn't exactly follow my directions, but what she did was even better.\n\n\"Strip?\" she said. \"Really?\" \n\n\"Ah,\" yeah,\" I said, wondering what she had in mind.\n\nShe stood up then, turned around and walked over to her desk, dropped her phone in a docking station, and started a song. I don't know what it was, but it had a slow, driving rhythm, and she started to dance to it. \n\n\"This what you had in mind?\" she said. \n\nHer hips were spinning hypnotically. It was like she was doing a hula hoop dance in slow motion, or a belly dance, except she was just wearing skin tight shorts and a T-shirt, and the T-shirt was on its way off already, leaving her doing mesmerizing spins and twists wearing just the shorts and the bra she must have had under the dress earlier. \n\n\"Like watching your sister dance?\" she said, her hips still twisting and swaying. I couldn't manage more than nodding yes. \n\nShe kept going, facing me just for a moment so I could see her unbutton her shorts and unzip them, then she spun around again and stopped, facing away. Her hips still swaying, she slid her shorts down over her ass just for a moment, revealing the panties that matched her bra. Then she pulled them back up again. The shorts hid nothing of her tantalizing shape, but all of the sexy panties as she continued her dance. Again she spun around to face me, this time shimmying the shorts down over her hips to reveal the front of her panties. She danced closer to me, her hips still gyrating, but when I reached out to pull her toward me she backed away, pulled up her shorts, and spun around again to face away from me, treating me to another stunning view of her ass, still dancing to the sexy beat of the music. \n\nThe next time she revealed the back of her panties there was no shimmying or slow reveals. She stopped just for a moment, bent at the waist, and dropped her shorts all the way to floor. Stepping out of them she continued her dance in just her bra and panties. They were both black and lacy, and the panties were little more than a thong. The bra covered a little more, but was in the same sexy black lace. I didn't know why I was such a pushover for lace, but Alexis had figured it out and worked it for maximum effect, and I was helpless to do anything but gawk at the sight of her lace-covered ass as it swayed before me. \n\nMy cock was throbbing, insanely hard, and desperately craving attention. I started to absent-mindedly stoke myself while watching her, but she stopped me straight away when she turned around. \n\n\"No touching,\" she said, still dancing for me. \"Your cock is for me now.\" \n\nShe turned her back to me again, then reached around and unclasped her bra, dropping it to the floor. Her bare back was before me. I knew what was on the front side and my mind raced imagining her firm, perfect breasts, bobbing gently out of my sight. She turned around to face me but with her hands covering her breasts. \n\n\"Show me, sis\" I said quietly, and she did. \n\nShe dropped her hands to her sides and caressed her own hips and belly, leaving her beautiful breasts exposed for me. \n\n\"All of it,\" I said. \n\nI was beyond waiting now. My cock was throbbing. I felt if she kept her dance up much longer I might come just from watching her. She spun back away again and slowly worked her panties down past the cheeks of her ass, and then to the floor, but she never stopped her dance so that all the while her cheeks were moving in hypnotic little circles. Eventually her panties made it to the floor and, kicking them away, she was as naked as I was. \n\n\"You're unbelievably beautiful,\" I said. \"Get over here.\" \n\nFinally she did what I asked. She closed the gap between us and straddled my lap. My cock was trapped between us and was impossibly hard. I was groping her frantically, unable to decide if I wanted to spend more time with my hands on her tits or her insanely sexy ass. She stood up a little then and scooted forward. \n\n\"Fuck me now,\" she said, \"and hard. I need you inside me.\" ",
        "Her pussy was hovering over my cock and she dropped onto me. In one movement my cock was buried balls deep in her pussy and I could feel the walls of her pussy squeezing on my shaft. She had teased me so relentlessly with her dance that I thought I might come the second I entered her, but I regained control of myself just enough that I could focus, at least for a time, on pleasing my sister. We thrashed together like that for a few minutes and I could feel myself slowly approaching my release when she asked me to stop. \n\n\"What?\" I said.\n\n\"Let me get on the bed,\" she said, and she crawled onto all fours next to me and looked back over her shoulder.\n\n\"Well?\" she said. \"Waiting for something?\" \n\nI wasn't. I was just too stunned by her amazing ass to move at that moment. I just stared at her momentarily. She was the sexiest thing I had ever seen. \n\n\"Need a cock,\" she muttered, and that snapped me out of my trance. \n\nI climbed on the bed behind her and slipped my cock back into her pussy. Looking down at the beautiful sway of her back ending at her ass was nearly enough to send me over the edge, but I pressed on, wanting not just to please my sister, but also to savor the moment and the beautiful vision before me as long as possible. \n\n\"Play with your tits for me, sis,\" I said, knowing what that did to her. \"I want to play with this.\" \n\nI slipped a hand past her perfect ass, around her hip, and slid a finger on either side of her clit while my cock kept pounding her pussy. She gasped when my fingers made contact, and I knew she was getting close. \n\n\"Pinch your nipples, Lexi,\" I said. \"Keep playing with those perfect tits for me so I can keep watching my cock hammer your pussy between your perfect ass cheeks.\" \n\n\"OH!\" she said. \"Don't stop.\" \n\nShe was grinding her ass back against me harder and harder as I pushed harder into her. She grunted each time I bottomed out in her, and whimpered a little each time I drew back, moving far enough away that I barely had the tip of my cock in contact with her, then finally moaning when I shoved forward again, splitting her with my throbbing cock. \n\n\"Gonna come soon,\" she muttered, thrashing wildly in front of me. \n\n\"Do it,\" I said, \"come on your brother's cock, Lex.\"\n\n\"Oh God, Ian,\" she said. \"Coming...\"\n\n\"Come for me, sis,\" I said, still relentlessly pounding her with my cock and rubbing furiously on her clit, when she tensed before me, then gasped, and came. I could feel her pussy throbbing and grasping on my cock, and nearly came myself, but she collapsed onto the bed as her orgasm subsided, and I slipped completely out of her. \n\n\"Mmm,\" she said, \"put that back in. You're not done yet, are you?\" \n\n\"No,\" I said, \"but I will be soon.\" \n\nShe was completely prone on the bed. I shoved forward between her legs, searching again for her entrance. When my cock had again found its way to the opening of her pussy, she stopped me. \n\n\"Wait!\" she said. \n\n\"Wait?\" I said. \"I can't. Please. I need to be in you.\" \n\n\"A little higher,\" she said. \n\n\"Huh?\" I said. \n\n\"The other one,\" she said. I was still entirely confused and desperate to get my cock back in her. \n\n\"Jesus, Ian,\" she said. \"Stick it in my ass.\" \n\n\"Oh, God,\" I said. I wasn't expecting that. \"You sure?\" \n\n\"Yes,\" she said. \"Just...um...go slow.\" \n\n\"Okay,\" I said. \"Ready?\" \n\n\"Yeah,\" she said. \"Do it.\" \n\nI did. I worked the tip of my cock to her back door and pressed forward as gently as I could. There was resistance at first, then the head of my cock pushed through. She was insanely tight. I thought I was going to come right as I entered her. \n\n\"More,\" she said. \n\nI pushed forward again, and slowly and gently buried more and more of my shaft in her ass. The tightness I had felt on the head of my cock worked down the shaft until again I felt resistance, and I stopped. \n\n\"Oh, God,\" she said. \"That's so hot. Fuck my ass, Ian, but be gentle.\" \n\nI began slowly and easily working my way in and out. With each movement I thought I might come, but was somehow able to hold off for a few thrusts in and out. \n\n\"This is incredible, Lex,\" I said. \"I don't know how long I can last. You're so tight.\" \n\n\"And I feel so full,\" she said. \"Don't stop. Go slow, but don't stop.\" \n\nMy mind was reeling. I was fucking my sister's ass. Her beautiful, perfect ass. And it was incredible. It was warm and unbelievably tight, and more than I could handle. I felt my orgasm coming quickly. \n\n\"Gonna come soon,\" I said, and I pushed in again. \n\n\"It's good now,\" she said. \"You can fuck me harder.\" \n\n\"God, Lex!\" I said. \n\n\"Come on baby,\" she said, \"fuck my ass.\" \n\nI thrust forward again, a little harder this time, and she grunted, but encouraged me again to keep pushing. Slowly at first, but gradually faster and faster I worked my cock in and out of her. I could feel my balls tighten, and my cock was tingling from the base of the shaft all the way to the tip of my head. \n\n\"Almost there, sis,\" I said. \n\n\"Do it, Ian,\" she said. \"Come in my ass.\" \n\n\"Oh God,\" I said. \n\n\"Fuck me hard and come in my ass,\" she said. \n\nShe was actively thrusting back into me now, and I was driving nearly the full length of my throbbing cock into her when I felt my balls contracting. \n\n\"Coming,\" I muttered, and thrust hard into her. She groaned as my cock let loose a torrent of cum. Spurt after spurt filled her from behind until at last I collapsed on top of her, exhausted and spent. We were still locked together. She was on the bed, face down, and I was on top of her, my pulsing cock still inside her even as my erection gradually subsided. Eventually, I softened and my cock slipped out of my sister's beautiful ass. The whole experience seemed at the same time blissful, insanely hot, and completely unexpected. \n\n\"Wow,\" I finally managed to say. \n\n\"Yeah,\" said Alexis. \"Wow.\" \n\n\"I, ah...\" I stammered. \"I didn't see that coming.\" \n\n\"Me either,\" she said. \"I mean...I didn't think of it until just when I told you to put it in there.\"\n\n\"Really?\" I said. \n\n\"Yeah,\" she said. \"Did you like it?\" \n\n\"God, yes,\" I said. \"I've never experienced anything like it.\" \n\n\"Seriously?\" she said. \"Was that...\"\n\n\"My first time?\" I said. \"Yeah, my first time. Did you like it?\" \n\n\"Um...\" she stammered. \"Yes. That was the first time for me, too.\" \n\n\"Really?\" I said. \n\n\"Yeah,\" she said. \n\n\"Lex,\" I said. \n\n\"What?\" she said. \n\n\"I love that you're willing to do anything with me,\" I said. \n\n\"I am,\" she said, \"because I trust you. Whatever we do, I know you won't ever push me past where I'm willing to go.\" \n\n\"I love you too much to do that,\" I said. \n\n\"And I love you too,\" she said, \"but...\"\n\n\"But what?\" I said. \n\n\"You should probably get back to your own room now,\" she said. \"If you stay, you're going to get comfortable with me and then fall asleep, and that'll be hard to explain in the morning.\" \n\n\"You're right, of course,\" I said. \"But I hate that I can't stay here. I loved sleeping with you at the cabin.\" \n\n\"Me too,\" she said, \"and I know we'll be able to do that again. It just can't be tonight.\" \n\n\"I know,\" said. \n\nI got up and gathered my clothes that I had scattered around the floor, then turned to leave, but stopped at the door. \n\n\"I love you, Alexis,\" I said. \n\n\"I love you too, Ian,\" she said. \n\n\"See you in the morning, sis\" I said, and I stepped out into the hall and closed her door behind me. \n\nThe house was silent now, and I made my way back to my own room. Our day, our weekend, was finally over, and it had been the most astonishing experience I'd ever had. In the morning I was going to wake up to begin a new phase of my life. The only problem that remained was to figure out how we could be together and stay together. I undressed and climbed into bed with that on my mind and a longing for my sister in my heart. \n\nI woke the next morning refreshed and eager to discover what my father had planned for us. I quickly showered and dressed for a casual day at the office, deciding at the last minute to throw on a sport coat over my khakis and shirt. After I dressed, I met my father in the kitchen. I got started on breakfast when my sister breezed into the room in a mint green sleeveless dress. \n\n\"Morning Lex,\" said my father. \"Don't you look like a breath of fresh air this morning.\" \n\n\"Thanks, Dad,\" she said. \"And is that a new suit you're wearing?\" \n\n\"It is,\" he said. \"One of the other partners finally got around to setting me up with his tailor.\" \n\n\"Looks good,\" she said. \"Give me a few minutes to grab something for breakfast and we can go.\" \n\n\"Okay by me,\" said my father. \"I'm still reading the paper anyway.\" \n\nWe all quickly finished up and then piled into my father's Ford. He could afford any car on the market now, but was dedicated to buying American made products, cars included. We made our way through Monday morning traffic to his downtown office, where he ushered us into a conference room and introduced us to the team of advisors he had assembled, then went off to attend to his own work. \n\nAlexis and I spent the day talking about banking, investments, and taxes. Both of our heads were still swimming a little from having taken in so much new information. My father had been nothing if not thorough, but it was all a little more than I could absorb in one day. In the afternoon, we caught an early ride home. \n\nWhen we got home we both headed for the deck. I suggested that we grab a couple of beers from the fridge and Alexis thought that was a good idea. She looked as overwhelmed as I felt. We both took a seat in the shade and sipped at our beers while we considered our new situation. \n\n\"My head is spinning,\" I said at last. \n\n\"I know,\" said Alexis. \"I just can't get my head around all of it. Do you have any idea what you want to do next?\" \n\n\"No,\" I said, \"but something occurred to me when we left early that I can't believe I hadn't thought of before.\" \n\n\"Yeah?\" she said. \"What's that?\" \n\n\"We're going to be home by ourselves every day,\" I said. \"All summer long.\" \n\n\"Wow,\" she said. \"You're right. We'll have hours alone together every day.\"\n\n\"We have a few hours alone together right now,\" I said. \"Got anything you'd like to do this afternoon.\"\n\n\"Yeah,\" she said. \n\n\"What?\" I said. \n\n\"Let's go inside,\" she said. \"We can try your room this time, and we don't even have to be quiet.\" \n\nI followed her in, watching her hips sway in her dress. Green was suddenly my favorite color. Following her up the stairs was even better than following her through the first floor, and we were both practically at a run by the time we reached the upstairs hall. She opened my door and I followed her in. \n\n\"Now,\" she said, \"what did you have in mind?\"\n\n\"First,\" I said, \"You look sexy as hell in that dress. I hardly dared to look at you all morning.\"\n\n\"You look good too,\" said my sister. \"But you know I'm a sucker for a guy in a suit.\" \n\n\"It was just kind of a whim,\" I said. \"But I'm glad you like it.\" \n\n\"I do,\" she said, \"now let's get that damn thing off of you.\" \n\nI quickly shucked my coat and started unbuttoning my shirt, but as I did I saw Alexis lifting her dress over her head. \n\n\"Stop,\" I said. \n\n\"What?\" she said, dropping her dress back into place. \"Why?\" \n\n\"That dress is beautiful on you,\" I said, \"and it deserves better.\" \n\n\"It's just a dress.\" \n\n\"Turn around,\" I said, stepping next to her. For once, thankfully, she didn't argue and just turned around for me. I could hear a little swoosh as she spun around. \n\n\"We have all afternoon,\" I said. \"There's no rush, and sometimes I like a slow unveiling.\" \n\nThere wasn't a zipper on the back. It was a row of buttons starting at the neckline and going past her waist. I started unbuttoning them one by one. After a button or two, I saw that she was wearing a lacy bra also in mint green. She knew my weakness for lace. I snuggled in, my cock was already straining against my khakis and the bulge in my pants found its way between her cheeks. \n\n\"Mmm,\" she said, \"that feels promising.\"\n\n\"All in good time,\" I said as I continued working my way down the line of buttons. Unbuttoning the last button, I could see the top of the matching panties, and the beginning of the curve of her beautiful ass. I worked my hands into the opening in the back of her dress and reached around to cup her amazing breasts. \n\n\"Do you know how hot these make me?\" I said. \n\n\"Almost as hot as you rubbing your cock against my ass makes me,\" she said. \n\n\"Whose cock?\" I said. She was starting to squirm. \n\n\"My brother's cock, Ian,\" she said. \"I like feeling my brother's cock against my ass.\" \n\n\"That's better,\" I said. \n\n\"And how about you?\" she said. \n\n\"How about me, what?\" I said as I started massaging her boobs a little more attentively. \n\n\"Do you like having your big cock between your sister's ass cheeks,\" she said. \"Because it sure feels like you do. It feels like you'd like to get your clothes off and spring that monster loose.\" \n\nShe had a point there. I was starting to really grind against her and my cock was starting to throb. The little game had about run its course, and I think Alexis had taken the lead. \n\n\"Well,\" she said, \"do you?\" \n\n\"Yes,\" I said. \n\n\"Yes what?\" she said. \n\n\"I want to get my clothes off and shove my cock in your pussy,\" I said. \n\n\"Where?\" she said. \n\n\"In my sister's hot, wet, tight pussy,\" I said. \n\n\"That's better,\" she said.\n\n\"But first,\" I said, \"this dress is sexy as fuck on you, but it's gotta go.\" \n\nI dropped the dress off of her shoulders and it fell to the floor at her feet. All that was left was the bra and panties, and her ass looked spectacular in the panties. Lexi's ass. Lace. A killer combo. \n\n\"Like what you see?\" she said, turning to face me. \n\n\"God yes! Now let's get this off you,\" I said, reaching around her for the clasp on her bra. \n\n\"Not just yet,\" she said. \"First these.\" \n\nShe quickly unbuttoned my shirt, took it off, and did the same with my pants, leaving me in just a pair of boxers. My cock was obscenely tenting them, but Lexi just looked down and licked her lips. \n\n\"That looks tantalizing,\" she said, snaking a hand between us and gently stroking my erection over my boxers. \n\n\"Let's get this bra off before you do anything else,\" I said, reaching around her again. This time she didn't stop me, and I released the clasp and removed the bra, revealing her stunning breasts. \n\n\"These are so amazing, Lexi,\" I said. \"I just can't get enough of them. I want to touch them all the time.\"\n\nI stared, transfixed, at her stunning beauty.\n\n\"What's stopping you now?\" she said. \n\nI realized I'd been just standing there, and gently took each one in hand again, first squeezing and then brushing my fingers over her nipples. \n\n\"God,\" she said, \"it's like there's a direct line from my nipples to my pussy. Each time you touch them my clit tingles too.\" \n\n\"Then let's get these off of you too,\" I said, grabbing her panties and tugging them down past her knees. By the time I got them to the floor, I was kneeling with my face in front of her pussy and could see her lips glistening. She smelled amazing, and I knew how good she would taste. I couldn't resist, and grabbed her by the ass, pulled her into me, and bathed her pussy with my tongue, licking up the drops of her moisture that were there. \n\n\"Oh God,\" she said. \"That feels so good, but I need you inside me right now. Get up.\" \n\nReluctantly, I did, and she grabbed my boxers and tugged them to the floor. Now she was on her knees in front of my raging cock. \n\n\"Can't resist,\" she said, and dove onto my cock, taking half of it in one gulp, then bobbing and taking the rest. \n\n\"Oh, Lexi,\" I said, \"if you want me inside of you, you better stop that soon. We both know how good you are at this.\" \n\nShe actually looked a little crestfallen as my cock popped out of her mouth. \n\n\"I do enjoy that,\" she said, standing up. \"But at the moment I have a more important purpose for my brother's stiff cock. Get on the bed.\" \n\n\"Okay,\" I said, but she wasn't waiting for me. She just shoved hard and I stumbled backward, ran into the bed, and fell onto it. She leapt onto me like a puma, straddling me and nestling her hips over mine. \n\n\"Ready?\" she said. \n\n\"For you, sis,\" I said, \"always.\" \n\n\"Good,\" she said, \"because I need my brother's cock in me right now.\" \n\nWith that, she scooted forward until the end of my cock found the entrance to her pussy, then settled backward as I slid inside of her. \n\n\"Finally,\" she said. \"I need this so bad right now.\" \n\nShe began working her hips back and forth, grinding against me more than bouncing up and down. The sensation was amazing, and even though I already felt like I couldn't last long, I risked reaching up to take hold of her breasts, alternately massaging them and then toying with her nipples. Each time I tweaked a nipple, I could feel her pussy squeezing my cock. I touched her, her pussy squeezed me, my cock tingled, and I touched her again. With each cycle, Alexis ground against me a little more energetically and I knew it would soon be too much for me. \n\nReluctantly, I let go of her breasts and grabbed hold of her ass. If I had somehow been thinking that would help put off the approach of my orgasm, I was mistaken. With one touch I remembered what her ass did to me, and I began meeting her animated grinding with more intensity of my own. \n\nThat's when she put us both over the edge. \n\n\"I love you so much, Ian,\" she said, and then she wrapped her arms around me and kissed me. It was like a lightning bolt running through me. I could feel the electricity in my lips and then flowing through me, finally reaching my groin, where it collected as I gasped and thrust forward into her with an explosion of energy and of cum. It came - I came - without warning, but with a staggering intensity. Time after time I could feel my balls contracting as I erupted into my sister, and with each explosion I could feel her contracting against me. After a time, as my senses were slowly restored, I could hear her gasping and saw her chest heaving as she worked to catch her breath. \n\n\"I love you too, Lex,\" I finally muttered, \"but Sweet Jesus that was intense.\" \n\n\"I know,\" she said breathlessly.\n\n\"When you kissed me it was like a bomb went off,\" I said. \n\n\"For me too,\" she said. \"Somehow, this just keeps getting better, like we're somehow becoming more in sync with each other.\" \n\n\"I know,\" I said. \"It's perfect. You're perfect.\" \n\n\"You're so sweet,\" she said, \"for a dorky brother.\" \n\n\"Hey!\" I said. \n\n\"A sexy, dorky brother!\" she said. \n\n\"That's better,\" I said. \"Also, you still have your sexy, dorky brother's cock in you.\" \n\n\"I do,\" she said, \"and it feels good in there.\" \n\nShe wriggled a little against me, and I was a bit amazed to find myself feeling aroused again. \n\nThat's when our world ended. \n\nThe door opened. \n\n\"Ian,\" said my dad, \"you in here?\" \n\n\"Dad!\" \n\nOh God, no. \n\n\"Oh, God, Ian,\" he muttered, \"I didn't realize you weren't alone. Sorry.\" \n\nHe hadn't yet realized who was in bed with me. \n\n\"Daddy?\" said Alexis. \n\n\"Alexis?\" said my dad. \n\nI watched in horror as the realization of what he had walked in on dawned on his face. We all stopped for a moment, frozen in time. \n\n\"Oh, Christ,\" said my dad. His expression had changed from one of disbelief to something else - something I couldn't quite fathom. He stood there for what seemed like forever, but was in reality only a second. And we were still motionless on the bed. Our feet were to the door, so it would have been impossible for him not to see that my cock was still in her pussy. Both of us were too stunned to even have the presence of mind to cover up. \n\n\"Dad,\" I said, \"I...\" \n\n\"Just stop,\" he said. \n\n\"Daddy?\" said Alexis. \n\n\"Both of you just get dressed and meet me in the kitchen,\" he said. \"We'll talk there.\" ",
        "With that, he left, closing the door on the way out. \n\nI stared at the door for the longest time, wondering how I was going to escape from the complete destruction of my new life. We would probably be disowned. Separated. Sent off to military school or something. Finally I looked at Lexi and found her in tears. \n\n\"Lex, I...\" I muttered. I had no idea what to say to her. \n\n\"Ian,\" she said, sobbing, \"whatever happens, just know that I love you.\" \n\n\"I love you too, Lex,\" I said, \"and even now I don't regret what happened between us. \n\n\"Neither do I,\" said Alexis. \"But our whole world just ended. What's going to happen to us?\" \n\n\"I honestly don't know,\" I said. \"Let's get cleaned up and go downstairs. There's no way to avoid it now.\" \n\n\"I'm just afraid we'll never see each other again,\" said Alexis. \"I can't bear the idea of being apart from you.\" \n\n\"Alexis,\" I said, \"somehow we're going to find a way. Don't ask me how, or why. It's just a feeling.\" \n\n\"More like wishful thinking,\" she said. \n\n\"Maybe so,\" I said, \"but I'm going to hope for the best anyway. It's all I can do now.\" \n\n\"I guess we'll find out soon enough,\" she said. \n\n\"That we will,\" I said. \"Now get showered and dressed and meet me in the upstairs hall in ten minutes.\" \n\n\"You're going to take time to shower?\" she said. \"Dad's waiting downstairs.\" \n\n\"Are you going to go down there smelling like sex?\" I said. \n\n\"Good point,\" she said. \n\n\"It's probably best if you put on something frumpy,\" I said. \n\n\"Okay,\" she said. \"See you in ten.\" \n\nTen minutes later I was waiting in the upstairs hall when Alexis stepped out of her room wearing a pair of sweats and a T-shirt. Even in that outfit she couldn't help but look sexy. Her wet hair hung down her back and for a moment it reminded me of seeing her in the shower. \n\nThen I remembered why we were there. \n\n\"I feel like a death row inmate walking the last mile,\" said Alexis. \n\n\"Then give me your hand,\" I said. \n\n\"Won't that be bad salesmanship?\" she said. \n\n\"The train has already left the station, Lex,\" I said. \"There's little point in trying to hide it now. Also, I could use the support, too.\" \n\n\"Okay,\" she said, and she took my hand. We walked down the stairs and into the kitchen. My father was sitting at the table with a bottle of Courvoisier Cognac in front of him and three full glasses. \n\n\"Have a seat and a drink,\" he said. \"You're going to need it.\" \n\n\"Dad,\" I said, \"I...\"\n\n\"Stop,\" he said. \"Just save it for later. I want to say what I'm going to say without being interrupted, so please just keep whatever you want to say to yourself until I'm done.\" \n\n\"Dad?\" said Alexis. \n\n\"Until I'm done,\" he repeated. \"Can you do that?\" \n\n\"Ah, okay,\" I said. \"Sure, Dad.\" \n\n\"Both of you?\" he said, turning to Alexis. \n\n\"Until you're done,\" said Alexis. \n\n\"Okay then,\" he said. \"Here goes.\" \n\nHe upended his glass and downed it all, then poured himself another. He sat silently as we waited, like he had a story to tell and didn't know where to begin. He took a sip, then spoke. \n\n\"First,\" he said at last, \"you're not going to be disowned, or sent off to boot camp, or anything like that, so please relax a little.\" \n\n\"But...\" I started to say. \n\n\"Uninterrupted,\" he said. \"Remember.\" \n\nI didn't say anything. I just shut up and waited. \n\n\"I'm sorry I walked in on you,\" he said. \"I know we all expect everyone who lives here to respect each other's privacy, so I shouldn't have just barged in, and for that I apologize.\" \n\nThis was certainly not what I was expecting. I looked at Alexis and she looked as confused as I felt.\n\n\"Nevertheless,\" he continued, \"I think we can all agree that what I walked in on is something no father should see. He certainly doesn't want to see his daughter having sex...or his son, for that matter. A lot of us dads never quite get completely past thinking of our kids as our little girls and our little boys. You grew up so fast, and sometimes it's hard to remember that you're both adults now. You're adults with...adult needs...so while I suppose I knew the two of you weren't virgins, I tried not to think about either of you having sex, and certainly tried not to think about you having sex with each other.\" \n\nI couldn't figure out what he was getting at. He'd said he tried not to think about us having sex together. Again I looked at Alexis, and again she looked as confused as I was. My dad took another sip of his Courvoisier, and continued to do so as he told us his story. \n\n\"Still,\" he said, \"I suppose that even if it wasn't inevitable, I should have seen it coming, or tried to do something to prevent it. I don't know.\" \n\nHow he could possibly have seen this coming was beyond my imagination, but I kept my promise and just waited. \n\n\"I hoped that we had dodged a bullet when you went off to different schools,\" he said, \"but I suppose it was inescapable, given the history.\" \n\n\"History?\" I said, forgetting myself. I was beyond confused now. \n\n\"Be patient,\" he said, \"and remember your promise. This is hard enough as it is. I'll answer all of your questions. All of them, but not until I'm done.\" \n\n\"Anyway, yes,\" he said, \"history.\" It seemed as if he was talking to himself as much as to us. \"How could this not happen to you two? And it all comes back to me. Let me ask you both one question before I go on, and please answer honestly.\" \n\n\"Okay,\" we both in unison. \n\n\"Did this all start this weekend?\" he said. \"At the cabin?\" \n\n\"Yes,\" I said. I was about to start explaining what happened - to somehow take responsibility for it, but he cut me off with a wave of his hand.\n\n\"Lex?\" he said. \n\n\"Yes, daddy,\" she said. \"This weekend.\" \n\n\"Of course,\" he said. \"It follows.\" \n\nHe seemed lost in thought again, looking down into his drink. Then he upended that glass, poured another, and seemed to straighten up and looked at us both. \n\n\"That cabin,\" he said, \"as you know, has been ours since before you were born. About 25 years ago, not long after I got out of school and started working, I got some time off and arranged for your mother and I, along with your aunt Lisa and her husband, to spend a long weekend there. The place was even more rustic then than it is now, but we had all been there before and enjoyed the solitude.\" \n\nI knew the feeling. The cabin and the property were almost magical. I could always feel the tension melt away when I was there. \n\n\"At the last minute,\" he said, \"your mom had to bow out. There was an emergency at work. Today we could probably push those jobs onto someone else, but not then. I called Lisa and told her your mom couldn't make it, but I would still be there and we could make the best of it. She said she'd meet me there with her husband, so I drove up to open the place and got everything ready, but when she arrived, it was just her. Her husband had also had an emergency at work and couldn't make it, so it was just the two of us. Me and my sister, all by ourselves with an easy going, fun weekend at the lake ahead of us. We had plenty of food, and plenty of beer and booze to keep us going. \n\n\"The first night went by well enough. We had dinner and a few drinks, then went to bed. When we got up in the morning we had breakfast and then went to just lie in the sun for a while. She walked out wearing this skimpy red bikini, and that's when it happened. That was the first time I noticed...how attractive she was. She's still a beautiful woman, and works hard to stay in good shape, but she was really stunning then. I watched her just soaking up the sun and I found myself getting aroused.\" \n\nI looked at Alexis and now she looked as stunned as I was. \n\n\"Then she sat up and said 'I hate tan lines,' and pulled off her bikini top. It feels indecent to admit it now, but all I could think of was how insanely hot she was. Her breasts were lovely. Smallish, but perky and firm, with all the freshness of youth. I can't even believe I'm saying this, but her body was just amazing.\n\n\"Then she took off her bottoms, too, and rolled over onto her stomach. Her ass was just glorious. Almost as nice as yours, Lex. I sat there for - well, I don't know how long - just staring. She finally looked at me and said 'like what you see?' I looked down and was horror struck to find myself sporting wood. It was plainly obvious, tenting the front of my swim trunks. I sat there for a second, trying to think of a way to explain getting hard for my own sister, then finally just decided to go with honesty. \n\n\"I just told her, 'yeah, Lisa. I can't help it. You have a fantastic body and you're beautiful. I'm sorry, but it's true.' Then I just sat there, hoping she wouldn't hate me. \n\n\"Then she said 'that's okay. I think it's kind of sexy that you're getting all hot for me, but now that you've seen everything of mine, I think it's only fair that I get to see everything of yours.' I should have said no. It could have ended right there, before it began, but something inside me just couldn't stop, wouldn't stop. I stripped for her and stood there, my erection standing in the sun in front of her, and she sat up and took it in her hand.\" \n\n\"Oh my God,\" Alexis stammered, and she upended her drink. I did the same. \n\n\"Yeah,\" said my dad. \"Those were my very words. I won't go through the rest of the details. Suffice it to say one thing led to another and we ended up exploring each other, sexually, but the real turning point was when we finally kissed. It was...\" \n\n\"Electric,\" said Alexis.\n\n\"Yes,\" he said. \"It makes sense somehow that it would be the same for you. I'd been with a few girls, but that kiss was indescribable. Like I'd been hit by a lightning bolt. I lost all control.\" \n\n\"Wow,\" I muttered. \n\n\"Well,\" he said. \"You can see now why I'm not exactly shocked by what happened, or angry. I guess I can...empathize. Anyway, that's the story. You can ask any questions you want now, within reason. I'm not going to describe the sex in detail, but I'll answer any question as honestly as I can.\" \n\n\"Dad,\" I said, \"you just described our first morning at the cabin almost exactly as it happened to us. I woke up on the beach looking right at Lexi's...\" \n\n\"My ass,\" she said. \n\n\"Yeah,\" I said, \"and I was just transfixed. You can guess the rest.\" \n\n\"You and Lisa?\" said Alexis. \"When did it end?\" \n\n\"It didn't,\" said their father. \n\n\"What?\" I said. I poured myself another glass. \n\n\"Not exactly,\" he said. \"It did for a long time, but now we still get together a few times a year. She's divorced now and so am I, so nobody gets hurt anymore.\"\n\n\"Is that why you and mom got divorced?\" said Alexis. \n\n\"In a way,\" he said. \"She knew. I couldn't lie to her, so I told her when we got back. I said I'd understand if she wanted a divorce, but she said she could accept it, and she did for a long time, but eventually it got to be too much for her, and unfortunately, she found comfort with Lisa's husband. That's what ended both of our marriages.\" \n\n\"Won't Aunt Lisa be upset that you've told us?\" said Alexis. \n\n\"She already knows,\" he said. \"Years ago we discussed what we would do if what happened to us happen to you - if it was...I don't know...some kind of inherited thing or something. We agreed I'd be honest with you. I called her as soon as I came down and told her today was the day. She was less upset than I would have thought. I think she felt this was invevitable.\" \n\n\"I'm speechless,\" said Alexis. \n\n\"Needless to say,\" he said, \"I expect that this story will never leave this room.\" \n\n\"Of course,\" I said. \n\n\"I'll never tell another soul, daddy,\" said Alexis. \n\n\"So what do we do now?\" I said.\n\n\"Whatever you want,\" said my father. \"Except for me knowing, nothing has changed. I can't say I'm exactly happy about it, but I can't deny to the two of you what I wouldn't deny to myself. If you make each other happy, I can accept that.\" \n\n\"We do, dad,\" said Alexis. \"I can't bear the idea of being away from Ian. He's just everything to me.\" \n\n\"And you feel the same way, Ian?\" he said. \n\n\"God yes,\" I said. \"I can't begin to describe how much I love her, or what being with her is like. She's like no other woman. We seem to be able to somehow know exactly what the other needs.\" \n\n\"I understand that better than you might think,\" he said. \"The sex with Lisa...it was like we could read each other's thoughts. Anyway, I won't interfere with the two of you being together, but I do want to make a few things clear.\" \n\n\"What things?\" I said. \n\n\"First,\" he said, \"you absolutely cannot get pregnant. You're both smart enough to know what that could mean for a child.\" \n\n\"We know,\" said Alexis. \"I'm on the pill, so we're safe.\" \n\n\"Just be sure to be extra cautious,\" he said. \"Next, you have to be extra cautious outside this house as well. We're not wealthy enough to be celebrities exactly, but we'll probably be traveling in wider social circles now, so be careful. People you don't know may know who you are. You can't pretend to be completely anonymous anymore.\" \n\n\"I hadn't thought of that,\" I said. \"We'll be careful.\" \n\n\"Finally,\" he said, \"and this really is just a personal favor to me.\" \n\n\"Okay,\" I said. \n\n\"Try not to flaunt it too much around me at home,\" he said. \"At least not right away. Even with everything I've told you I'm still trying to get my head around all of this. Until I get used to this, I'd rather not watch you making out on the sofa.\" \n\n\"Deal,\" said Alexis. \n\n\"And in return,\" he said, \"I promise never to walk into your room again without knocking and waiting for an invite.\" \n\n\"Thanks,\" I said. \n\n\"I assume you'll want to be moving into one room?\" he said. \n\n\"I, ah, well,\" I said, \"I guess we haven't thought about it. Lex?\" \n\n\"Could we maybe do a little remodeling, daddy?\" said Alexis. \n\n\"What do you mean?\" said my father. \n\n\"Well,\" she said, \"if anyone's ever over, it would probably be best if we still had separate rooms, but maybe we could connect them somehow.\" \n\n\"I'll get an architect on it tomorrow morning,\" he said. \n\n\"Really?\" said Alexis. \n\n\"Really,\" he said. \"We don't need to worry about the budget now, and I do want you two to be happy, so we'll get someone over here and get your rooms exactly how you want them. Make up any story you want about why you want it done, or none at all. The people I work with are discrete.\" \n\n\"You know,\" said Alexis, \"she could move in here now.\" \n\n\"What?\" I said. \"I mean, who could move in?\" \n\n\"Aunt Lisa,\" said Alexis. \"I mean, everyone involved knows everything now, so there wouldn't be any secrets, and the two of you could be together and be happy. Everyone would just think you're two siblings that want some companionship.\" \n\n\"I honestly hadn't thought of that,\" he said, \"but it's brilliant. You'd make a good attorney.\" \n\n\"That really is brilliant, Lex,\" I said. \n\n\"Hey dad?\" said Alexis. She looked a little apprehensive. \n\n\"You said you'd answer all of our questions honestly, right?\" \n\n\"Yes,\" he said, \"and I expect you may have more as this all sinks in.\" \n\n\"What's on your mind, Lex?\" I said. \n\n\"Remember when you said Lisa looked a lot like I did when she was younger?\" said Alexis. \n\n\"Sure,\" he said. \n\n\"Do you ever think of me that way?\" she said.\n\nMy father sat frozen for a long time, just staring into his drink, and I thought he might decline to answer. Then he took another sip and turned to my sister.\n\n\"I said I'd be honest,\" he said, \"and I will be. Yes. I have. You're my daughter, but you're incredibly beautiful and sexy and you remind me so much of my own sister that I just can't help it. It really hit me yesterday when you came down in that amazing dress you wore to dinner. I saw you, and I thought of Lisa, and thought of what we did together, and then thought of you again, and God help me it just came over me. That was really the first time I noticed you...in that way. What man could help but notice you? What man wouldn't want you? I hope you don't hate me.\" \n\n\"Of course I don't hate you,\" she said. \"Remember you're talking to someone who's having a relationship with her brother.\" \n\n\"Right,\" he said. \"Of course. But I suppose you two will want to spend some time together and mull all this over. I'll leave the two of you alone up there. There's some take-out in the fridge if you get hungry. That's what I was coming up to tell you when I walked in on you. I left work early and picked it up on the way home. I, ah, I hope I didn't interrupt anything.\" \n\n\"I'm sure we can pick up where we left off,\" I said. \n\n\"Ian!\" said Alexis. \n\n\"I'd kind of rather not think about that right now,\" said my father. \"I've already got thoughts and images in my head that I'm having trouble dealing with.\" \n\n\"Sorry,\" I said. \"Wasn't thinking.\" \n\n\"Come on,\" said Alexis, reaching for my hand. \"Let's go upstairs. I think Dad needs some time to collect his thoughts anyway.\" \n\n\"Sure do,\" he said. \n\n\"Okay,\" I said. \"Later, pop!\" \n\nLex and I made a beeline for the stairs and quickly reached the top. \n\n\"Your place or mine?\" I said. \n\n\"Yours,\" she said. \"I really do want to pick up where we left off. Thinking about Dad and Aunt Lisa doing it is making my horny.\" \n\n\"Yeah,\" I said, opening my door and letting her in. \"And I suppose thinking about Dad thinking about you is also making you horny.\" \n\n\"Yes,\" she said, a bit shyly. \"He must have seen everything when he walked in earlier. Now he'll have that image in his head forever.\" \n\n\"Yeah,\" I said, \"an image of your sexy ass. Now get those sweats off so I can get another image of your sexy ass into my head.\" \n\n\"He saw my pussy with your cock in it, too,\" she said. \n\n\"Wouldn't mind seeing that again,\" I said, and I grabbed her T-shirt and pulled it over her head. She wasn't wearing a bra. \n\n\"No bra,\" I said, \"that's a time saver.\" \n\n\"You're incorrigible,\" she said as I pulled down her sweats. \n\n\"Another time saver,\" she said. No panties. I was kneeling in front of her again, just as I had done earlier, with my face inches from her pussy. \n\n\"You're wet,\" I said. Like before, her lips were glistening. \n\n\"I was starting to get wet when Dad started talking about fucking Aunt Lisa,\" she said. \"God that's hot.\"\n\n\"You are one crazy, kinky girl,\" I said, giving her pussy a little lick to clean up the cream that was coating her. \n\n\"God that feels good,\" she said. \"Let's get these off of you.\" She pulled my T-shirt over my head. l got up and she pulled my sweats down, revealing a pair of boxers with a large tent in the front. \n\n\"That looks like it's tasty under there,\" she said as she dropped to the floor. Her tongue quickly went to work the second she had my boxers out of the way. She swirled around my shaft, coating it and then working her hands in behind her tongue, quickly squeezing and stroking the shaft as her mouth found its way to my head. She quickly engulfed it and then began working her talented tongue around the head inside her mouth. It was warm and wet and completely fucking amazing. In what seemed like just seconds I was hard as steel and aching to get inside her pussy. \n\n\"I need you on the bed, sis,\" I said as I picked her up from the floor. I carried her to the bed and set her on it, then crawled between her legs. I needed a taste of her delicious pussy and got right to it. \n\n\"You're awfully good at that,\" she said, \"but don't be too long. I need you inside of me.\" \n\n\"I won't be long,\" I said, \"I just need to pay off that bet.\" \n\n\"Oh God,\" she said, as my tongue found her clit. I swirled my tongue around her, then worked in my lips to suck on it. While one hand found its way under her ass, the other found her pussy. She shuddered softly as I worked a finger into her, then a little harder as I worked in another. All the while my mouth kept up my relentless attack on her clit. Before long I had to divert attention from her clit to lap up the juices that were beginning to flow from her pussy, and I quickly devoured each delicious drop. ",
        "\"Oh God, that's good,\" she said, and with each lick she gasped and squeezed my head between her sumptuous thighs. I pulled my fingers out of her pussy to clear a path for my tongue, and reached up and shoved my cream coated fingers into her mouth. As she licked them clean, it was like each pass of her tongue was on my cock instead of my fingers. In the few seconds it took her, I was throbbing, but kept my mouth focused on her pussy and moved my hands to her breasts. \n\nShe nearly crushed my head between her legs when I first touched her nipples, and with each touch she squeezed her thighs together and another bit of heavenly cream would flow onto my tongue. I squeezed her breasts harder, pinching her nipples, and redoubled my efforts with my tongue. It was too much for her and with a groan she crushed my head between her thighs and released a flood of her nectar. I lapped it up greedily as she descended from the height of her orgasm.\n\nIn time, her breathing settled, her flow slowed, and she somewhat sleepily said \"cock.\"\n\nI moved up onto her and slipped my cock into her welcoming pussy. It was soft, warm, wet, and still quivering slightly from her orgasm. It was everything I needed, and I gently began working my way in and out of her. My hands were still on her perfect breasts, and I lowered my head to give her a soft kiss. \n\n\"You taste like pussy,\" she said. \n\n\"Is that a bad thing,\" I said. \n\n\"Not at all,\" she said. \"Kiss me again.\" \n\nI did. Again and again. With each kiss she became a little more alert and energetic, and I matched my efforts with hers. Before long I was thrusting hard into her, and she was thrusting her hips up to meet mine. \n\n\"I like my brother's cock in me,\" she said, and I could feel her starting to gently squeeze my cock with her pussy. \n\n\"That's two of us, Lexi,\" I said. \"I like my cock in my sister's pussy.\" \n\n\"Good,\" she said, \"now fuck me hard and fill me with your cum.\" \n\nWho was I to refuse? I stepped up my effort, and pushed harder and harder into her, thrusting wildly. I knew I didn't have long. \n\n\"Come on, baby,\" she said. \"Come in me. Come in your sister!\" \n\n\"I'm going to, Lex,\" I said. \"I'm going to fill you with my cum. Your brother's cum. Are you ready?\" \n\nI was ready. On the edge. \n\n\"I'm ready!\" she said. \"Do it!\" \n\nI did. I exploded into her again, and again, and again, and felt her pussy throbbing on my cock as her chest heaved below me. \n\n\"I love you so much, Lexi,\" I said, and I kissed her as I emptied myself into her pussy, but instead of a lightning bolt hitting me, I felt a warm glow start at our lips and spread throughout my body. I settled onto her as my orgasm subsided, and wrapped my arms around her, kissing her lips, her face, and her neck. We snuggled together, soaking in the warmth and the love we shared. \n\n\"God Ian, I love you more than I can describe,\" she said, \"and now we can be together.\" \n\n\"I feel as if a great weight has been lifted from us, Lex,\" I said. \"What's happened is more than I could possibly have hoped for. I have everything I wanted and more.\" \n\n\"You're everything I want, Ian,\" she said. \"You're everything I'll ever need.\" \n\nWe cuddled together. I don't know for how long. I had never felt more loved, or more at peace. \n\n\"Think it would be safe for us to hop in the shower?\" Alexis asked at last. \n\n\"I think so,\" I said. \"And if it turns out it's not, that's okay too.\" \n\n\"You're impossible,\" she said. \n\n\"Nothing's impossible now, Lexi,\" I said as she sat up on the edge of the bed. Dear God she was beautiful. \"But I do have to ask you something?\" \n\n\"What's that?\" she said. \n\n\"That thing with Dad,\" I said. \"Why did you ask him if he thought of you 'that way'?\" \n\n\"First,\" she said, \"I suspected he did. Girls notice, you know. Hungry eyes and all that.\" \n\n\"Okay,\" I said, \"and...\"\n\n\"Second,\" she said, \"maybe the idea of a daddy-daughter thing makes me hot.\" \n\nShe got up, struck a pose, and gave herself a swat on her perfect ass. \n\n\"He even said I had a nice ass,\" she said, and she walked into the bathroom. \n\n\"He never said that,\" I said. \n\n\"He said Lisa's ass was glorious,\" said Alexis, \"then he said 'it was almost as nice as yours, Lex.'\" \n\n\"Holy shit,\" I said, \"he did, didn't he?\" \n\n\"Yup,\" she said. \"Looks like the apple doesn't fall far from the tree. You're an ass man just like your father.\" \n\n\"Too true,\" I said, following her into the bathroom. \n\n\"Now get in here and wash mine,\" she said. \n\nMaybe the shower wouldn't be safe after all. \n\n**********\n\nI hope you've all enjoyed this final chapter and the rest of The First Time I Noticed. Thank you to all who have been reading along, and especially to those who have voted or left comments. I appreciate them all. "
    ],
    "authorname": "Jose_Rick",
    "tags": [
        "brother",
        "sister",
        "brother-sister",
        "incest"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/the-first-time-i-noticed-ch-07"
}
{
    "title": "She's a Wild One",
    "pages": [
        "The following madcap group sex fantasy was posted in conjunction with the April Fools 2019 contest.\n\n***\n\nIt was a phrase that Chris first started hearing the moment he had started to date Brielle. \"She's a wild one.\" Even now, on the verge of their wedding, he still occasionally encountered this response when meeting someone who had known his fianc\u00e9e during her college years.\n\nUpon receiving his introduction, they would reply, \"Oh-- Brielle!\" A moment of silence would follow. Then some variation of \"She's a wild one!\" would escape their lips while curling into a sly grin, as if they were privy to some indecent knowledge of her past life that he was not.\n\nChris had long since asked Brielle about it. She'd laughed it off and blamed it on an \"experimental phase\" that she implied was no different than what a lot of people go through when they become independent and a little wild for the first time in college. \"But that's over now,\" she had added. \"Mostly...\" Brielle had winked at him when adding the last word as if to suggest that maybe they might explore their kinky sides together.\n\nTruthfully, it didn't bother Chris at all. He'd long been envious of people who were able to break out of their shells more than he ever had. He reasoned, \"Why shouldn't I be able to attract someone sexually adventurous?\" Secretly, he had hoped it might rub off on him.\n\nIn fact, Brielle was enchanted by Chris' shyness and comparative inexperience with his sex life. She soon relished any opportunity to draw out his secret kinky side in the bedroom. It was part of what made their relationship work. She immensely enjoyed dragging him into the \"dark side\" as she called it and, frankly, he didn't mind. Their relationship was the most thrilling one he'd ever had. She was his fantasy girlfriend, turned real.\n\nIt was no surprise, then, that Brielle enjoyed joking about the potential of his upcoming bachelor party. It was as if she wanted to give him license for one last hurrah. \"He's a wild one!\" Chris imagined people saying of him, just like they had said of Brielle. However, this was the briefest of fantasies, before he returned to his usual introverted demeanor and dismissed any such ideas as a world unfortunately not meant for him.\n\nIf anyone was destined to disagree, anyone who could make his bachelor party as raunchy as possible just to embarrass him, it was Chris' childhood friend, Mike Scanlan.\n\n***\n\n\"What's uuuuup!\" Mike exclaimed upon seeing Chris enter La Casa de Los Tacos. He jumped out of his seat, swung his hand through the air to connect with Chris' and then gave him a chest bump. \"We just crushed some Tecates and then Marisol ordered a margarita. What do you want? Another round of cervezas?\" Chris nodded and watched Mike spin around to search for the waitress, then sat across from Marisol and smiled.\n\n\"Hey man!\" she exclaimed. The waitress arrived to briefly take Mike's order.\n\n\"How's it goin'? This looks like a fun party!\" Chris replied.\n\nMarisol laughed. \"It's always a party when queso is involved!\" She took a chip and gave it a swipe through a bowl of yellow cheese flecked with bits of green and red.\n\n\"Speaking of parties, are you ready for your fucking bachelor party?!\" Mike exclaimed.\n\nChris threw his arms up. \"I told you, I don't need a real bachelor party. No stripper or anything. Just throw something together with drinks and food. You can invite Marisol and everyone else.\"\n\nMike groans. \"Loosen up, dude. The stripper wouldn't just be for you.\" He started grinding the table jokingly as if to indicate what he was looking forward to doing to her. Marisol giggled.\n\n\"I'm serious, I don't need that. I'd be fine just hanging out,\" Chris chuckled.\n\nMarisol pulled away from the icy, neon green drink she held to her lips. \"This is Mike you're talking about. Do you seriously think he's gonna pass up an opportunity to hire a stripper and pretend as if he's gonna get some?\" Chris smirked at her. She turned to Mike. \"And if you do get a stripper, don't forget it's Chris' special day. Don't hog all the T 'n A for yourself.\" She winked at Chris as if to emphasize the good deed she just did for him.\n\nChris felt himself turning a mildly reddish hue. He still wasn't wholly against the idea, especially since Brielle truly didn't seem to care. He just found it intimidating and embarrassing to think about having an erotic encounter in front of his closest friends.\n\n\"Look at him, he's already turning red!\" Marisol laughed. \"You're so cute when you're bashful,\" she joked. Marisol took another sip of her drink and eyed him seductively.\n\nIt reminded Chris of the time she had dragged him to a store on spring break after freshman year at state college to buy a new bathing suit. She'd teased him the same way, clearly being a source of delicious amusement for her.\n\nHe remembered it vividly:\n\nMarisol and Chris had popped into the swimsuit store along the shopping strip near the beach the moment it opened while their friends were still getting breakfast. He had observed that it was clearly designed for tourists, as was the whole main drag, catering to eighteen-to-twenty-somethings escaping with their college friends to enjoy the warm tropical breezes of a Mexican resort and copious amounts of irresponsible drinking.\n\nNeedless to say, he was looking forward to the same.\n\nMarisol flipped through bathing suit after bathing suit. Each time, she held it up to her body and studied his face, saying things like, \"How does this one look?\" or \"Is this one hot?\" Chris felt a touch of shyness watching her act like she was taking on and off each bathing suit in front of him.\n\nSoon she dragged him to the fitting room, which was little more than a tight, sectioned off space with a ratty curtain pulled across it. She slipped inside, carrying a selection that she was excited to try on. While she changed, Chris' attention wandered over to a couple that arrived to use the adjacent fitting room. He could instantly tell they were an item, the way they fawned all over each other in an obvious manner.\n\nChris observed the boyfriend out of the corner of his eye. After a few moments, the man opened the curtain slightly and peeked inside. Chris heard the girlfriend gasp. She peeked out and glared at her boyfriend for the stunt he had just pulled. \"There are other people here!\" she said.\n\n\"So?\" he replied.\n\n\"So... you're the only one that gets to see me changing... But not right now.\" She smirked, cast an embarrassed look at Chris, and yanked the curtain shut again, making a loud grating noise in her boyfriend's face. He grinned with pride and turned to catch Chris' expression but Chris quickly looked away.\n\nMarisol peeked through the curtain and thrust out the swimsuit she had just tried. \"I don't like how this one looks. Can you hand me that red one I just had?\" Chris accepted the swimsuit and nodded. He wondered if she was standing there naked inside that little space for changing. As he grabbed the item from her, he took several looks at the slit of the partly opened curtain but there was just no way that he could see anything.\n\nMoments later, he returned with the red swimsuit she had requested. Chris took a wide swing around a rack to return at an angle that might give him a split second to see inside the fitting room. For a moment, he thought he saw the reflection of her bare bottom in the mirror opposite the curtain but the glimpse was so fleeting that it did nothing but leave him even more curious and frustrated than before.\n\nMarisol took the swimsuit from his hand and said, \"Okay, one sec.\" He listened to the shuffling inside, trying to picture in his head the way the stretchy fabric was gliding up over the warm bronze landscape of her body, the way it might be sliding over her nipples to tightly contain her breasts.\n\nHe found himself suddenly distracted when the girl in the next changing room finally came out. She giggled when her boyfriend reached around and squeezed her butt from behind. Chris was both disgusted and jealous at the same time. She swatted her boyfriend's hand away and gave Chris another embarrassed look, but it seemed obvious that they were both titillated by his presence. He wanted to pretend Marisol was his girlfriend, even if he couldn't put on the same show in front of that couple.\n\nMarisol finally emerged with her suit on. \"How does it look? she asked. He gave her a look up and down. Chris noticed immediately how rigid and pointy her nipples were, pushing back against the thin fabric. The faintest glimpse of a camel toe could be seen. He decided not to tell her but took as curious a look as he could without giving himself away.\n\n\"It looks great,\" is all he could muster, followed by an awkward silence. Their eyes briefly met in that wordless space. He panicked, realizing that she might have just understood that she turned him on.\n\n\"Oh yeah?\" she finally replied, cracking a smile. \"You like my sexy bod?\" She took a sarcastic spin in a circle, showing off her goods, briefly flashing her butt which wobbled cheerfully despite being cinched tightly into the swimsuit that clung to her body.\n\n\"Yeah! Hot damn!\" he laughed, hoping to distract from his obvious arousal with a comic display of amusement. She laughed.\n\n\"Too Baywatch?\"\n\n\"Nah.\"\n\n\"This one's expensive though...\" she mumbled, eying him as if wanting Chris to justify the purchase she was about to make. He knew what she wanted from him at that moment, so he reassured her about all the years of usage she would get out of it. Marisol appeared satisfied and began to back into the fitting room again. \"It's too bad there isn't just a nude beach nearby, 'cuz it would save me a lot of money,\" she mumbled, without expression.\n\nChris was taken aback. \"Wow! I've never been to one. Do you really go to those?\"\n\nAs Marisol reached for the curtain, she paused abruptly and gave him a look of amused surprise. \"Don't get too excited, there! I was just kidding!\"\n\nChris felt himself looking embarrassed and gullible in front of her. She closed the curtain slowly. The look she gave him lingered on his face as long as it possibly could have. She seemed wickedly pleased with herself for the manner in which she had just tripped him up.\n\nHe remembered that look perfectly. It was burned into his retinas.\n\n\"Uh, Chris?\" he heard Marisol say. He snapped back to the present, finding a beer and a taco suddenly sitting in front of him.\n\n\"Sorry,\" he mumbled.\n\n\"Anyway, as I was saying,\" Mike said, \"You guys totally should have come. That was the best day of our entire spring break.\" Chris was surprised to hear that they were reminiscing about the same trip he had just recalled. \"Blake and I snuck into this weird Mexican titty bar while you guys were still out shopping or something.\"\n\nChris began to inexplicably panic that they had just heard his private thoughts, a nervous reaction he always had when he was feeling guilty about where his mind had wandered.\n\n\"That was just in the morning!\" Marisol chirped. \"Later, we had an awesome time on the beach. Besides, what do I need to go to a Mexican titty bar for? I'm half-Mexican. I can check out Mexican tits in the mirror every morning when I shower.\" She snorted at her own joke.\n\n\"Yeah, well you could have saved me the trip if you weren't being so selfish with 'em!\" Mike exclaimed. They all laughed.\n\n\"Yeah right. Like I totally need to be ogled by another thirsty gringo,\" she snickered. Marisol turned to Chris. \"Well, maybe Chris, if he weren't getting married.\" She batted her eyelashes at him with a comic playfulness.\n\nChris smiled at Marisol. Secretly, he wondered if there had ever been any real attraction there. She sucked cutely on her straw while watching his eyes until it crackled and hissed with the sound of completion.\n\n\"Ah, fuck,\" she said, glancing down at the glass with a pout. \"Well, the margarita talk has been fun, but I gotta go.\"\n\n\"So soon?\" asked Chris.\n\n\"Yeah...\" she sighed, pulling out a wad of bills to pitch in for the drinks. \"I gotta run home and then I work later.\"\n\n\"All right.\"\n\n\"But count me in on that whole bachelor party thing-- stripper or not!\" With a grin, she shuffled quickly past the table and headed out onto the street.\n\n***\n\n\"Pwahahahaha!\" Brielle exclaimed, launching into a laughing fit. \"You think Mike is gonna listen to you?\" Chris chuckled. They'd been talking about mundane wedding planning details for a while until they took a break and the topic of his upcoming bachelor party came up. \"Or are you just telling me this so that you're off the hook for whatever you really planned with him?\" A devilish grin suddenly appeared on her face.\n\n\"No really, I told him no strippers!\"\n\n\"Listen, whatever you don't want me to know about, that's fine. I want you to have that one last hurrah. I would have said, 'As long as it's nothing I wouldn't do,' but that's not saying much!\" Chris laughed. \"All that matters is that you walk down that aisle with me a month from now, okay?\"\n\n\"Okay,\" Chris said, resigned to the fact that it was a losing battle. Instead, he decided to have a little fun. No matter what he did or said to Brielle, she was impervious to his teasing but it always resulted in some fun, sexy banter between them. \"So let's see. What if things get a little rowdy and a policewoman shows up to tell us to turn down the music,\" he mused.\n\n\"I'm listening...\" Brielle said, resting her chin in her hands.\n\n\"Only, she decides I need to be taught a lesson...\" he added with a grin.\n\n\"Oooh. Well, I think you'd deserve it then. You've been a bad boy, after all...\"\n\n\"Hmm, okay... Say she wants to handcuff me and demonstrate how well she knows her way around a nightstick?\"\n\nBrielle snickered, \"Well, good for her. Then she's also got you booked on indecent exposure!\"\n\n\"You really don't care what goes on?\" Chris laughed.\n\n\"Nope!\"\n\n\"What if the whole thing erupts into a wild orgy?\"\n\nBrielle rolled her eyes and got up from the kitchen table for a glass of water. She leaned over the sink in a suggestive manner, sticking out her rear end in an exaggerated way. \"Well, look. This is my last chance to step aside and let you break you out of your shell,\" she said, glancing back at him with a playful wink. \"If I can't do that, how can I expect us to ever meet some other kinky couples to play with?\"\n\nShe took a long sip of water and strolled casually out of the room. The lingering grin on her face suggested just how satisfied she was with her ability to tease Chris. He rolled his eyes and smirked.\n\n\"Very funny,\" he mumbled.\n\nDismissing her joke, Chris returned to his real apprehension. To the same degree that Brielle seemed entirely unconcerned about any last minute sexual escapades, he remained full of worry about the potential awkward way it might play out with Mike involved, in front of all his friends.\n\n***\n\nWhen the day arrived, Chris felt mildly anxious in a way that he didn't want to feel toward hanging out with the old gang. He drove out to Mike's house early. Within seconds of his arrival, he had a beer in his hand and the gauntlet had been thrown down for a marathon video game challenge. It was Mike's favorite activity. Chris liked having at least one friend who would never really grow up. Whenever he needed an escape from the pressures of life, Mike was always there to remind him not to take everything so seriously.\n\nAfter several rounds, the doorbell rang and it was clear that company would start arriving. Mike paused the game and pulled himself up off the floor where they had positioned themselves in front of the large screen tv. Moments later, Chris heard Marisol's voice in the foyer. She strolled into the room with Mike, then ran over to Chris and gave him a big bear hug.\n\n\"Is it sinking in yet that you're getting married?!\" she exclaimed.\n\n\"If it hadn't yet, I think you just squeezed it into me,\" Chris joked as Marisol released the tight grip she had on his body.\n\nWhen Chris looked back up at the screen, Mike's character came out of nowhere and blew him away. \"Dammit, that was my last life,\" Chris said.\n\n\"Oops, looks like it's my turn then,\" said Marisol, snatching the controller from him.\n\nThe doorbell rang again and Chris hopped to his feet to greet the new arrivals. As soon as Chris opened the door, Kat thrust a bag into his chest. He heard the clatter of beer bottles. \"Time to get druuuuunk,\" she exclaimed in a mocking \"bro\" voice. She waltzed past him and entered the foyer.\n\nBlake came up behind her. He was always the best-dressed of the group, wearing a bespoke suit and flashing his expensive watch. He worked at a local bank branch as a credit analyst and liked to milk his position for all it was worth.\n\n\"What's up!\" Blake said. Their palms slapped together. \"I heard you refused the stripper, so I've nominated Kat to fill that spot.\"\n\nBehind him, Chris heard Kat laughing. \"Whatever. After enough tequila shots, anything goes,\" she joked.\n\nChris closed the door and turned to watch them taking off their shoes. Kat was wearing one of her typical tight-fitting t-shirt that accentuated her breasts. The reason was obvious. It had been long-established common knowledge that Kat had the most gorgeous, perfect pair of breasts ever crafted. They had literally been a constant topic of discussion at school growing up. Her chest was the measure by which all others were compared, even if few people Chris knew actually got a chance to see them.\n\nChris' judgment was no different. They were sensational: A perfect plumpness. Slope. Movement. Even the hint of her nipples that she liked to show off for attention suggested that something magical blossomed beneath.\n\n\"Cat got your tongue?\" she asked, glancing up to call out his quiet observation. This was her favorite pun, on account of her name, and she often used it to make him self-conscious.\n\n\"Just imagining what your pole dance routine would be like,\" Chris shot back with a smirk. She grinned at him.\n\n\"You'd actually make a great stripper,\" said Blake as they walked into the living room. Mike was still hammering away at his video game controller, almost oblivious to their presence. Marisol was aggressively tapping buttons trying to fire a massive rocket launcher at Mike's head.\n\n\"Um... okay? Why do you say that?\" Kat replied, fishing a beer out of the bag she'd handed Chris.\n\n\"I mean, you're a yoga instructor. That must give you mad stripper moves,\" he laughed.\n\nKat snickered, \"Ha, maybe. I'm more in it for the hot men and great sex.\"\n\n\"I'm glad I know you well enough to know that you're not kidding.\"\n\n\"And yet you've never come to my class! I thought you liked yoga girls,\" she said with a teasing grin.\n\n\"Yeah... but I eat way too many double cheeseburgers to not make an ass out of myself there,\" Blake sighed.\n\n\"Aww... yeah, just look at what happened when Chris tried it,\" Kat said with a twinkle in her eye. She turned to Chris and added, \"Right? I remember you found it really, really... hard.\" Chris stared back at her, receiving her knowing look with caution. However, there was no evidence that she'd ever told anyone about that little incident. Rather, she held it close to her chest as if she might need it one day to threaten a favor out of him.\n\nIt happened just two years ago:\n\nIn a moment of self-deprecation, Chris passively mentioned how much extra weight he had gained over the holidays. He admitted his desire to make exercise a New Year's resolution. Kat cheerfully piped up, offering him a discount on one of her classes. Chris had gone to yoga a few times before, years earlier, but found it hard to keep up. He wondered if having a friend as the teacher would make it a better experience this time.\n\n\"Sure, I'd give it a shot,\" he said enthusiastically.\n\nThat weekend he went downtown to the studio for a morning class. What struck him immediately was the startling assembly of attractive young women that gravitated to the class. Their bodies were varied but they all had a desirability about them that he decided seemed perfectly uniform for the type of girl that got up early on the weekends to work up a sweat. He felt mildly intimidated. They all appeared to know one another, chatting excitedly, casting sideways glances at the new guy whom they did not recognize, peeling off layers of clothing until their bodies bloomed under tight-fitting stretchy material.",
        "While they arrived in fewer numbers, the men who attended the class were much the same. The ones with long-strengthened bodies made him feel insecure, especially due to the amount of attention the women gave them. He saw them as if they were strutting about like roosters, commanding this small niche of beautiful girls with testosterone-fueled confidence.\n\nChris hid in the corner and set his mat down behind a row of cute women. They acknowledged his presence, briefing turning and smiling at him as they set up their own mats. He smiled back, his heart beating, as they turned back around and sat down. Their butts were perfect. They were also a perfect distraction.\n\nKat waltzed in and welcomed everyone enthusiastically. She caught sight of Chris and her face lit up. \"Oh, hey!\" she said with a wave as if surprised he actually showed up. Chris felt a surge of pride as he received glances from around the room. For a brief moment, she made him feel important.\n\nThe class began with a brief meditation which Chris welcomed as a means to try to relax, given that he was mildly afraid that he was about to make a fool of himself. As Kat then began leading the class through yoga poses, Chris found himself transfixed on the girls in front of him. They bent this way and that. Stretched to the left and to the right. They stuck their asses up into the air for downward dog and let their breasts bulge and dangle beneath their bodies, squeezed into their colorful yoga tops. He justified observing them as a means to follow along, though he couldn't help but feel aroused by every little detail of their moving, limber bodies.\n\nHe also observed that he was not the only one. There seemed to be a soft sexual tension lingering below the surface and spreading about the room. The hot guys with muscular bodies cast excited looks at the girls they knew. The girls stole secret looks at the men who caught their fancy. There was an unspoken, albeit respectful, degree of curiosity that never went too far and made Chris feel less guilty about the simmering desires he was feeling.\n\nIt wasn't long before Chris inevitably became aroused. He felt hidden enough to let it happen securely, first starting as a tingle, then a partial erection that began to ebb and flow in accordance with the movements and display of bodies before him. It continued to develop, growing stronger and stronger the more he felt capable of getting away with it.\n\nKat finished a sequence of sun salutations before she left her mat and began moving around the room to make corrections. After adjusting a couple of students toward the front of the room, she eagerly made her way to Chris. Kat indicated that she wanted to show him how to squat deeper and stick out his butt. He followed suit, feeling anxious about his boner which threatened to make itself more visible down the side of his leg.\n\nJust as Chris thought he might make it through safely, she made it worse. With a sigh, she circled around him to help guide Chris closer to the floor. She jokingly whispered, \"I know for a fact that you have a good ass, so don't be so embarrassed about showing it off!\" Chris glanced back at her, startled to receive such a comment in class. His eyes came face to face with her gorgeous cleavage which bobbed happily about as she practiced the squat with him and rested her hand on his back.\n\nIt was the straw that broke the camel's back. Between the beautiful woman touching his body and the girls sticking out their behinds right in front of him, Chris popped a boner so massive that it pulled the fabric away from his crotch and strained painfully against his clothing.\n\n\"Here, I'll help if you adjust your stance,\" he remembered her saying as she rose out of the pose and circled back around to his front.\n\nKat's body moved right up against his leg as she reached down to move it wider. She had only intended to touch his thighs to move them further apart, and normally that would have been a safe zone, but she could not have known that it was currently invaded by a particular appendage that was about to cause him the embarrassment of a lifetime.\n\nWithout warning, her hand slid along his thigh and met with the firm protrusion of his erect penis. At first, it did not register what she was feeling but he saw the moment when it struck. Kat's eyes popped open and her jaw dropped, then twisted into a grin. She didn't yank her hand back. Rather, she slid it back along the stiff shaft of his cock until it glanced off his thigh.\n\n\"Ohh-kay. I can see you're having a good stretch after all,\" she whispered.\n\nWith a laugh she swung her hair back and spun around, making haste toward the front of the room again. When she returned to her station and turned back around, he saw that her wild grin had not left her face. In fact, it seemed to amuse her for the remainder of the class as he continued performing pose after pose, brooding about the mortifying discovery she had made and how much she seemed to be laughing at him for it.\n\nAn embarrassing boner story was pretty much his worst nightmare...\n\nThe doorbell rang.\n\n\"Oh! There's Sienna,\" said Kat.\n\n\"I'll get it,\" Chris said, wandering out of the room and down the hallway to the front door. He opened it up and found Sienna standing there. She looked just as she always did; leaning to one foot with a nervous smile, a wealth of cautious curiosity stored up behind those big brown eyes. Her long, curly hair aimlessly drifted down over her shoulders as if unsure where exactly to flow.\n\nHe'd always found Sienna cute, even if she projected insecurities about her curves. She had a great body though, and more importantly, whenever she was alone with Chris she would open up and come alive with a spirited personality that always brought a smile to his face.\n\n\"Hey there!\" she blurted out upon seeing his face.\n\n\"Hey, welcome!\" said Chris as he swung the door wide open to invite her in.\n\n\"Happy... bachelor party!\" she said as she passed. \"I don't know what you're supposed to say at these things. I've certainly never been to one before.\"\n\n\"Well, this one is tame. Usually they're pretty crazy.\"\n\n\"Oh, I know,\" she said, seemingly relieved that she was well-acquainted with the small group of friends in the next room. \"I was expecting, like, some women dancing around and rubbing their boobs in your face.\" She giggled.\n\n\"Yeah... I'm not gonna say I'm not imagining that too,\" he said in an attempted joke.\n\nSienna laughed. \"I respect your honesty!\" She gave him a tender smile. A twinkle of past sexual curiosity lingered there for a moment before she responded to calls from Kat and Marisol, rushing to greet them in the living room.\n\n\"Sorry I'm late guys,\" Sienna said, skipping from person to person to offer each one a hasty hug.\n\n\"Yo, where's the food?\" Blake said, observing an empty folding table that had been set up by the side of the room.\n\n\"Oh, right--\" Mike exclaimed.\n\n\"I'll get it,\" Chris said, gesturing to him to stay where he was. For some reason, Chris felt like he had to keep himself occupied at his own \"bachelor party\" -- even if just to vent the anxiety simmering away at the back of his mind.\n\n\"I'll help,\" said Sienna as she set down her bag.\n\nChris and Sienna gathered the bowls of chips and salsa, crackers and cheese, and other goodies that Mike had left half-prepared in the kitchen and carried them out to the table in the living room. Sienna arranged them nicely. Chris chuckled at her displeasure with the way he set them there randomly. She preferred to set them equidistant from each other and from the edge of the table.\n\n\"When you're finished being a Virgo, why don't you grab a drink,\" Chris joked. She giggled and grabbed a beer after rotating one more bowl forty-five degrees.\n\nChris took a plastic fork and tapped it loudly against his own drink until everyone looked up at him. \"Hey-- so... I just want to thank you guys again for throwing this party and just, you know, being here and being such good friends for so long. I'm really excited that you're all coming to the wedding. It's gonna be awesome, of course! Um. That's it. Now get drunk, do something stupid, and blame it on me!\" He raised his glass.\n\n\"Hear! Hear!\" shouted Marisol. They all cheered and raised their glasses to toast him, took a sip, and then went back to carrying on.\n\n\"Now enough of this wishy-washy bullshit,\" Mike laughed. \"Let's get this party really started!\" He went to the stereo system and cranked the dial, turning the music up louder.\n\nChris grabbed some chips, scooped up some salsa, and took a bite with a loud crunch. Sienna smiled and did the same, crunching down hard as if to compete with his loud chomp. \"Oh, it's like that, is it?\" he laughed, crunching on another as if it was a game. He had always liked hanging out with her. She was introverted like he was but they brought out the best in each other.\n\nChris briefly slipped back to his most vivid private memory of Sienna; an unspoken close-call that they'd never shared with anyone else, nor discussed with each other since the night it occurred.\n\nIt happened when they were still in college:\n\nChris had driven out to Sienna's apartment to hang out and they ended up walking down the street to a local bar she liked. They drank and laughed and played darts together late into the evening. By the time they wandered back to Sienna's apartment, she suggested that he not drive back home after having so many drinks. Chris assured her that he was okay, pointing out that her couch wasn't even well suited for someone to crash on. However, Sienna wisely insisted that he stay. To his surprise, she meekly stated that it was okay if he wanted to crash on her bed since it was big enough for two. He had felt a glimmer of excitement at the prospect.\n\nHowever, fueled by alcohol, a night of merriment, and growing hunger, neither was ready to sleep. Sienna had suggested watching a movie, instead. While she went to make them popcorn, Chris sat on the couch in the living room still grappling with the one she had suggested. It was a sexy French art film called \"Cinq \u00e0 Sept\" that had been receiving a great deal of attention for its explicit scenes of unsimulated sex. Chris had read a review and intended to eventually see it himself. He wondered if Sienna knew that it was rated NC-17, that it contained a fair bit of full frontal nudity, both male and female, as well as shockingly explicit displays of sexuality between the two lead characters as they experienced a steamy love affair.\n\n\"I'm gonna get changed for bed!\" Sienna had squealed while rushing off again as if thinking of the situation as a spontaneous sleepover. Minutes later, she returned wearing an oversized t-shirt and fuzzy socks but no pants. The shirt covered her panties but it was clear that she had removed her bra for bed. Sienna's large breasts wobbled loosely under the thin fabric as she hurried back into the room.\n\n\"You can change too if you want. Be right back, I'll get the popcorn!\" she exclaimed, turning back into the kitchen to retrieve their snack as it finished popping.\n\nChris wondered what she meant by her suggestion that he change. What else could he do besides take off his jeans and hang out in his boxers? He supposed it wasn't weird since she had done the same. He slipped them off and waited for her to return, nervously hoping that she wouldn't be surprised to see him there in his underwear.\n\nShe had noticed but gave no reaction other than her typically shy demeanor. However, Chris was more interested to observe how she would react to the film's content. As the movie progressed, he spent the entire time thinking about the most explicit moments, anxiously wondering when they would arrive. Thankfully, a thick fleece blanket gave him the security that the passing states of arousal that came and went would go undiscovered by his couch-mate.\n\nWhen the male protagonist's long, thick cock finally made its dramatic appearance on screen, Chris glanced over at Sienna. Awkwardly, she had the same impulse and they locked eyes for a moment. Startled, she zipped her attention back toward the screen. Before long, they were sitting side-by-side watching an intensely erotic sex scene. It was long, passionate, and extremely graphic, filled with groaning, straining bodies and the heated exchanges of sweaty flesh.\n\nChris felt a heavy tension building between him and Sienna as the screen flashed with shots of stiffened, crimson nipples, a brazenly erect penis, even a beautiful, hairy European pussy being delighted by a long red tongue. Sienna sat there clutching an empty bowl, trembling, afraid to look away and risk connecting with Chris again.\n\nBefore they went to bed, Sienna professed a critical need to pee and rushed to the bathroom. Chris waited for some time for Sienna to return before going himself. That's when he discovered them sitting there, balled up in her hamper. He'd never forget that moment he realized what she had done that caused her to take so long in the bathroom. Sienna's light gray cotton panties were there, soaked, the crotch area exhibiting a large dark patch where moisture had saturated the fabric through and through.\n\nChris didn't even need to fish them out to smell how intensely fragrant they were with her natural scent. It reached his nose over by the toilet. Chris struggled to urinate, unable to prevent a throbbing erection from developing, swept up in the shocking discovery of her private odors and the evidence of the secret pleasure she had just experienced sitting there next to him.\n\nHe finally managed to get his erection down enough to safely exit the bathroom and rejoin Sienna. There they crawled into her bed and lay side by side on their backs, staring at the ceiling in the dimly-lit room and reflecting on what they had just watched together; two friends who had never been intimate before, deeply engrossed in the sight of two aroused, entangled bodies. For a long time, he listened to them both toss and turn, knowing neither was able to sleep. It frustrated him, knowing that they were both driven to such a state of intense arousal and able to do something about it together -- yet somehow unable to act.\n\n\"Why can't we just have casual sex, as friends?\" he wondered, believing whole-heartedly that she lay there probably thinking the same thing. The experience was right there in front of them. All they had to do was cast off the sheets. She would see how secretly erect he was beneath them as his boxers tented dramatically. She would excitedly yank off his underwear with the sudden urge to delight herself with the sight of his physical arousal. He would slide her t-shirt up and over her head to drown himself in those great big breasts that had distracted him all night. He longed to slip off her panties and discover the fountainhead of all that pleasure that she had shamefully discarded earlier.\n\nAs the night wore on, they brooded there in silence, their thoughts still reeling with desire and sitting on the precipice of a momentous shift in their friendship. And yet, nothing happened. \"Because,\" he thought, \"Nothing like that ever really happens.\"\n\n\"Guys, let's play some game or something,\" suggested Kat, snapping Chris out of his daydream. \"What do you have?\" she asked Mike.\n\n\"Um, a bunch. They're over there,\" said Mike, pointing to a pile of games near Sienna.\n\nSienna wandered over and began reading out names. \"How about Twister,\" she concluded.\n\nBlake perked up. \"That's always interesting when you're drunk!\"\n\n\"Okay,\" Sienna laughed, pulling it out of the stack.\n\nIt had been ages since Chris had played Twister but it seemed like an amusing idea. Before long, they found themselves in a ridiculous configuration, leaning and stretching over one another, trying hard to balance despite their tipsiness. Mike flicked the spinner and watched it zip around in a circle. \"Right hand, red,\" he called out to Marisol.\n\n\"There's no way,\" Marisol giggled, trying to reach for a red dot. Out of the corner of his eye, Chris saw Sienna's arm slip out from underneath her, then the loud smack of a body hitting the plastic sheet beneath them. There was a quiet wince. Laughter.\n\n\"Sienna's out!\" barked Mike.\n\n\"Come on, it's right there,\" groaned Blake, glancing at the spot Marisol struggled to reach.\n\n\"I'm trying! I'm giving it two-hundred percent!\" she exclaimed.\n\n\"Why do you always say that? Two-hundred percent,\" he asked.\n\nMarisol wobbled as she flung her hand forward and managed to land it close enough to the target. \"It's just a private joke,\" she explained, panting. \"White people see me as one-hundred percent Mexican. Mexicans act like I'm one-hundred percent white. So I just consider myself a two-hundred percenter.\" Everyone laughed.\n\nAs the game went on, Chris found himself enjoying the casual banter of old friends and the concern about what Mike might have arranged for his bachelor party slowly drifted from his mind. However, it wasn't long before he found his unease back on the rise.\n\n\"Ooh, I just felt someone touch my butt,\" said Kat.\n\n\"Sorry-not-sorry!\" laughed Blake.\n\nKat snickered. \"Ah, the perks of drunk Twister... It's a good thing we never did this in high school 'cuz who knows what might have led to...\"\n\n\"Damn, yeah. I wonder why none of us have ever hooked up with each other.\"\n\n\"Are you just asking that because I have my boobs in your face right now?\" Kat laughed.\n\nBlake replied, \"... maybe.\"\n\nAll of a sudden, Kat landed a doozy that surprised them all. \"You know...\" she said. \"I almost offered you a blow job once senior year of high school.\" Everyone erupted into laughter.\n\n\"What the fuck!\" Blake said, suddenly wobbling and struggling to regain balance.\n\n\"I'm serious. You were with Alicia at the time, so I didn't. But, you know, we were at that age where we were all learning how to do it and comparing notes.\"\n\nSienna, now standing off to the side as an eliminated player, said, \"Um, we were?\" Marisol shot her a look and laughed.\n\n\"Stop it!\" Blake said, laughing and starting to lose his balance again. \"You're just trying to make me fall!\"\n\nKat laughed, \"No, I'm really serious!\"\n\n\"Why didn't you tell me then?! I broke up with Alicia.\"\n\n\"Well, I was with Aaron by then.\"\n\n\"Guys!\" Marisol said, laughing hard enough to start losing balance herself.\n\n\"But wait...\" Blake said, not willing to let the matter go. \"We need to talk about this. How--\"\n\nThe doorbell rang again. Chris perked up suddenly, unsure who that would be, now that all his closest friends were here already.\n\n\"Oops! Saved by the bell!\" laughed Kat.\n\nEveryone collapsed to their hands and knees and started standing back up as Mike hurried over to the front door. Moments later he strutted triumphantly into the room, leading a mysterious young woman behind him. He turned and presented her.\n\n\"Everyone meet Elektra. Now it's a fucking bachelor party!\" Mike announced enthusiastically.\n\nChris and all his friends stopped what they were doing and turned to look. A loud \"oooo\" arose, then branched off into laughter. Chris' heart sank. Just as he feared, Mike had hired a stripper.\n\nElektra was tall, with silky, dark hair cut into a bob. She looked like a provocative French escort but had a sternness to her expression that read almost dominatrix. Her long, tan trench coat swept along the floor as she breezed confidently into the room. Then, in a flash, she undid the belt and flung it open.\n\nEveryone's laughter was doubled as Elektra emerged from beneath her trench and flung it onto a chair with one smooth motion. Chris stood there trembling as his eyes traveled up her dark, thigh-high boots. She wore an onyx caged crop top with a matching skirt that looked like a lacework of leather straps winding inward toward a tiny triangle that just barely covered her pubic mound. When she turned slightly, he saw that her ass was completely exposed, except for one thin piece of butt floss that was tucked neatly into her crack.",
        "Elektra cast a sharp look across the room as if assessing the crowd but did not utter a single word. Expressions ranged from excitement, to embarrassment, to amusement, to horror.\n\n\"Jesus, Mike! I said no strippers!\" Chris chuckled nervously.\n\nElektra turned and locked eyes with him. The dark mascara closed in upon her eyes as if she were devouring her view of Chris like a slowly closing venus flytrap.\n\n\"Oh man...\" Marisol was saying, while Blake gave Mike an enthusiastic fist bump. Chris saw Sienna's quiet look of absolute astonishment.\n\nKat, on the other hand, seemed positively amused. \"Let's see some titties!\" she blurted out, pumping her fist in the air to mock the guys' juvenile display of sexual excitement. Without warning, Elektra turned and headed straight for Chris, knowing full well who her victim of the evening was.\n\n\"Oh, goddammit. Mike--\" Chris groaned the moment she snatched his hand and tugged him forward, clearly without any interest in a display of protest. He glanced nervously at the girls. Marisol couldn't stop laughing. Kat was bobbing her head up and down to the music with simple delight. Sienna simply had her hands over her mouth.\n\nAs Chris found himself dragged out into the room and put on display, his anxiety doubled and then tripled. He could feel his heart thumping in the cavity of his chest as if it were trying to break free. The sheer panic and embarrassment he felt, not knowing how he might be humiliated, caused his knees to weaken.\n\nElektra, on the other hand, was perfectly in control. Her stern silence and painful grasp seemed to indicate that he was about to do anything she wanted him to do, whether he liked it or not. He felt intimidated and resigned, observing how her body became instantly in sync with the music that Mike had been playing, finding the beat perfectly suited for her routine.\n\nElektra's hair whipped playfully against Chris as her body arched quickly backward and then slowed to a crawl as she rolled down his. She began to use her ass strategically, flaunting it when she wanted to coax his interest visually, then stimulating him physically when she wanted to grind against his body and still have her hands free to attend to other things. Her movements were well-choreographed, seductive, and sexy; a playful assortment of bumps and grinds, surprising shifts in rhythm, and artful gestures that involved her whole body.\n\nHowever, as Elektra continued to shimmy and sway, Chris' mind wasn't on her performance. It was on his friends whose expressions of astonishment seemed to burn right to his core and inflame his growing embarrassment. It seemed to still be sinking in what they were watching.\n\nThen, all of a sudden, Chris heard a snap and one of Elektra's leather straps popped free. This drew a response from her audience which she seemed to thoroughly enjoy. She spun about Chris' body, skillfully using it like a stripper's pole, somehow unsnapping one strap after another with such covert movements that it was near impossible to detect where and how or when she did it. With each audible pop, she threatened the complete disintegration of her flimsy top. Everyone in the room seemed to be waiting with bated breath for an inevitable unveiling.\n\n\"Go Elektra! Go Elektra!\" Marisol started singing, getting Kat to join in.\n\nAs the performance continued, Chris remained there, tense and stiff, playing the role of a toy for Elektra to play with, a rigid center point of bashfulness to feed off of and punctuate the shock of her gradual disrobing. However, it finally led up to a moment of his eventual involvement.\n\nElektra's top was seemingly held together by a thread. With a sensual glide up his body, she grasped his hand and drew it closer to her chest...\n\nChris' heart beat resoundingly into Elektra's back as she arched against him, thrusting her chest outward toward the captive audience whose hoots and hollers seemed to act like a powerful fuel for her. She brought Chris' finger to the final remaining strap, gently flicking it back and forth with a teasing motion. Then, without warning, Elektra rolled her head back and nestled it into Chris' neck. Her eyes darted upward to meet his and a small smile crept across her face. She drove his finger against the underside of the strap and popped the last concealed clasp. Chris looked down in astonishment as two gorgeous, perky breasts popped free, sending Elektra's flimsy top sailing to the floor.\n\nChris quickly averted his attention from Elektra's sprightly nipples to catch the celebratory cheers of his friends, except for Sienna who remained beet red and appeared to be choking on a laugh. He felt his body weaken and could barely stand upright anymore. However, the dance was not over. Elektra continued to swarm about his body, her breasts now taking the place of her ass as the primary instrument deployed to spark his desires.\n\nElektra's body seemed to coil around his like a serpent, skillfully tickling him with the hardened nubs of her pink nipples and greedily devouring his obvious shyness with her eyes. Then she gave him one last hard grind against his groin before reaching again for his hand and driving it down to her own pelvic region. There he made contact with another clasp. With a flick of the wrist, she forced him to release it, setting off a chain reaction.\n\nEveryone gasped with surprise as her skirt made a brief rattling sound and all the straps were triggered at once. The entire thing unraveled and fell to the floor in one heap, leaving Elektra completely nude, her hips widening as she began to squat and rub her body against Chris'.\n\nChris quickly absorbed the wild expressions on his friends' faces as they looked down between her legs in disbelief. Chris followed their eyes, over the cheerful protrusions of Elektra's wobbling breasts and down to her smooth mound where a clean-shaven pussy presented itself for all the world to see.\n\n\"Oh my god! I can't look at this! She's naked!\" Sienna shrieked. Marisol stood beside her in complete hysterics at Sienna's innocence while the guys raised their drinks high in the air, delirious with frenzied approval of Elektra's exquisite body. Chris wanted to enjoy what was happening, just as they were, but his anxiety about being an unwitting participant in the show caused him to wish for it to end. His only comfort was the assumption that it was almost done, now that Elektra had nothing left to remove.\n\nWhat he didn't realize, was that she was only just getting started.\n\nChris reacted with a jolt as Elektra began to pull his shirt upward. He grabbed it but she slapped his hand away. \"No!\" Marisol gasped as her eyes widened and she exchanged a look of shock with Kat.\n\n\"Shit. What--\" Chris mumbled. However, Elektra won the exchange with her quiet ferociousness, yanking his t-shirt up and over his head until he was left standing bare-chested in front of his friends.\n\n\"Oooh,\" the girls droned in unison. Mike and Blake both laughed and seemed to be enjoying the girls' reactions. As embarrassed as the three of them looked, their glances were not lost on Chris. He caught Marisol biting her lip as her curious eyes darted down over his abs and out across his arms.\n\n\"Is this supposed to be a show for the boys or the girls?\" Kat snickered. Chris cast her a half-serious dirty look. She stuck her tongue out at him. \"You stand there and take it, bachelor boy,\" she said, seeming pleased with herself.\n\nChris felt Elektra's hands gliding across his chest, her movements exaggerated and comical as she began to show off his body in a way that would maximize their enjoyment and amusement. All of a sudden she tweaked one of his nipples. Caught off guard, he reacted with a startled, \"Ow!\" and threw his hands over his chest.\n\nHe soon realized that this was just a means of getting him preoccupied while she moved to the next stage of his humiliation. Distracted by the brief pain, Chris was barely conscious of Elektra's swiftly executed task: undoing his pants. She then quickly jerked to the ground, leaving him defenseless with only a pair of boxers and two socks left on his body.\n\nChris' friends lost it.\n\n\"What is she doing?! What is she doing?!\" Chris shouted at Mike. \"I'm not the stripper, she is!\" Mike couldn't respond because he was too busy trying to prevent beer from shooting out of his nose.\n\nElektra twirled about Chris' body, her movements full of soft brushes of skin-on-skin and a playful seduction. She spun behind him and wrapped her arms around his body, causing him to feel how much his own body was shaking. He gasped as he felt the hard poke of her nipples pressing into his back. The gasp turned into a yelp as he felt her hands slip lower, toward his boxers.\n\nAll of a sudden, Elektra tucked a finger into his waistband and drew it out slightly, then lurched forward and peeked inside. \"Jesus!\" Chris shouted, slapping his hand over his waist to close the gap. No one had seen anything, at least no one besides Elektra, but he already felt like his legs were about to give way under him.\n\nAs Chris' group of closest friends began to shriek at what Elektra had just done, the stripper opened her mouth wide, flattened her palm, and covered her mouth as if she was amazed at what she had seen inside. As the room erupted into laughter, Elektra began fanning her face frantically.\n\n\"Um... Mike...\" Christ started saying as he clutched his boxers tightly.\n\n\"Chill out man,\" Mike said between swigs of beer. \"She knows what she's doing.\"\n\nMike's reassurance did little to calm Chris' nerves, however. Elektra floated back in front of his body. While this blocked him from view, she reached for his hands and raise both arms up into the air until they stretched outward to either side. He didn't dare move them after she placed them there. So long as she didn't move from that spot in front of his body...\n\nElektra began grinding against Chris' groin. He felt like he was disappearing into a tunnel inside his head. All sound became distorted. All he could see was shocked expressions, laughing faces, twinkling eyes, drunken merriment at his expense. Worse, her bare ass felt amazing against his crotch. She expertly found his half-swollen shaft, dangling beneath the soft cotton. She knew exactly what she was doing as she guided it in between the crack of her butt, gyrating slowly as if aiming to jerk him off in the space between her cheeks.\n\nIt got exactly the rise out of him that she intended.\n\nChris' panic reached its peak as he felt himself begin to swell and harden. He was getting an erection precisely as swiftly as Elektra decided he should. He imagined her moving on to the next part of her routine, leaving him defenseless with wildly tented boxers for all to see.\n\nAs the music continued to thump, and his heart followed suit, Elektra did the unthinkable. She threw her hands backward and grasped the waistband of his boxers at either side. Chris quickly dropped his arms but she strategically thrust out her elbows back to block him. In his mind he begged her for mercy-- but with a gulp, he felt her do exactly what he feared. She dropped his boxers straight down to the floor. Elektra's lithe, nude body was all that stood between him and total, absolute embarrassment in front of all his friends.\n\nAs a loud, \"Whooooa\" emanated from Chris' friends, he felt his newly-freed, stiff cock spring upward and smack against the soft padding of Elektra's bare ass. She gave no reaction to the feeling of his bare penis. Instead, she resumed moving against it, grinding one way and then switching directions and moving the other way.\n\nChris' cock throbbed angrily against her soft, spongy flesh. He could barely look his friends in the eyes. With just a brief glance at Marisol, he already knew what she was thinking, shocked that just on the other side of this strange woman's body her oldest friend's penis was completely out and sandwiched into her naked buttocks.\n\n\"I can't believe she just did that!\" Chris heard a female voice say.\n\n\"Go Chris!\" he heard someone shout.\n\nHe didn't want to look. He wanted it to be over. He desperately wanted his erection to fade. However, the mixture of fear and excitement seemed to make it surge harder than ever.\n\n\"Don't worry, she's not gonna reveal the goods,\" Kat chuckled before taking another gulp of beer.\n\n\"Oh my god, I'd die--\" Sienna squeaked.\n\nElektra watched their banter with great interest. It seemed almost like she was savoring the expression of their disbelief. Strangely, Chris felt Elektra's foot winding around his. It was an odd sensation. Almost like she wanted to play footsie. However, what followed was something Chris could never have prepared for, no matter how many times he might have tried.\n\nElektra's eyes briefly narrowed, then she threw Chris' entire world into disarray. With one quick swing of the hips to the left, she threw her entire body to the side. The jerking movement was so forceful and sudden that all Chris could process at first was the sight of her loose breasts swinging wildly out of the corner of his eye.\n\nChris' cock quickly unsheathed itself from the cavity between Elektra's butt cheeks and shot upward. He felt a rush of cool air sweep between his legs as she rendered him completely exposed to all those gathered before him. Chris' massively erect penis gave a stiff bounce in the air as it reached its zenith and steadied itself, pulsing with a raw and unfiltered arousal.\n\nFor a moment, there was complete silence. Then someone choked on their drink. The realization of what had just happened crashed into everyone at once. Chris was instantly aware that he had five sets of familiar eyes fixed squarely on his dangling balls, his long, thick shaft that jutted outward into the room, and the swollen, ridged head of his cock.\n\n\"Ohhhhh my gooood!\" Sienna screamed. Marisol's jaw hung open. She was stunned into silence. Kat started laughing, briefly glancing over to see Mike and Blake falling all over themselves with laughter and congratulations, then back toward the object that protruded so dramatically from Chris' body.\n\nFrantic, Chris had already begun attempting to seek shelter. His arms and legs just didn't seem to go anywhere. Elektra had a powerful grip on them. He realized what the game of footsie was all about. Her leg locked his in place and prevented it from moving an inch.\n\nWith one solid bump of her hips against his, Chris felt a jolt sweep through his body, reaching his cock and sending it swinging comically back and forth like a fleshy metronome. He felt himself make a noise but he didn't recognize it. It sounded like a dying animal. Finally, Elektra granted him mercy and threw herself back in front of his body.\n\nSienna had thrown her hands over her eyes but immediately spaced her fingers apart thereafter to peek through. \"Oh my god! Oh my god!\" she kept repeating. She glanced to the side, red-faced, sharing the same look of horror and amazement as her friends offered her. With his arms finally freed, Chris quickly recovered and threw his hands between his legs and bent partly in half, using Elektra's body as a screen as completely and thoroughly as possible.\n\n\"Guys! I just saw Chris' penis! I - can't - even--\" Sienna continued to shriek, her embarrassment finally collapsing into laughter.\n\n\"That's so fucking funny!\" Marisol exclaimed, throwing her head back and howling with laughter. \"He has a huge boner!\"\n\nThe show continued as Elektra moved Chris backward to a chair. With his hands clutching himself as best as he could, Chris crab-walked along with her until she forcibly sat him down. She pulled his hands away from his crotch, causing his erection to spring up into the air again. He tried to cover himself again but Elektra grabbed his hand forcefully and yanked it away. Then she grabbed his cock and began to squat down in front of him.\n\n\"I can't see anything!\" yelled Kat, whose view was now obstructed by Elektra's.\n\n\"Haha, Kat...\" Marisol laughed.\n\n\"This is amazing!\" Blake shouted.\n\nKat and Blake hurried off to the side to get a better view of what was going on. Mike quickly replaced his beer and followed, hooting loudly.\n\n\"Seriously guys?\" Sienna asked incredulously, amazed that they had gone in for a better look.\n\n\"Holy...\" Blake blurted out as Elektra began to lean in.\n\n\"Wait, I gotta see this,\" said Marisol, finally relenting to her curiosity.\n\n\"She's sucking his-- guys, she's sucking his cock!\" shouted Kat. Marisol scrambled off to the other side of Chris and Elektra. Sienna threw her arms up and quickly followed. She peeked over to find Elektra's red lips wrapped around his swollen shaft.\n\nChris glanced around in bewilderment, then down at his penis, then locked eyes with the girls who were observing his intense moment of crisis with an odd fascination as if he were a caged animal at the zoo being forced to mate. However, he felt suddenly swept up in the undeniable pleasure of Elektra's manipulations as he sunk deep into the warm cavity of her mouth. All he could focus on was his own heavy breathing and the sound of wet smacking.\n\n\"What the fuck-- Mike! Is she... Did you hire a stripper or a prostitute!?\" exclaimed Marisol. Mike was in hysterics and couldn't answer.\n\nChris felt like he was hyperventilating. Inside he felt like running. He was in need of escape. However, the bobbing of Elektra's head, the smooth gloss of her wet tongue, and the mesmerizing wobble of her loosely hanging breasts were too much to bear. He looked around the room again. The girls stood to either side. They were all staring at his upright cock; slick, pulsating, glossy with saliva as it suffered Elektra's urgent suction.\n\nElektra paused for a moment, listening to the voices around her with amusement, then she became theatrical, taking a brief lunge toward Chris' testicles and letting her tongue lash out. She began to drag it with an excruciating slowness up the long length of his thick shaft.\n\n\"Okay... She's licking his--\" Sienna mumbled to herself. She covered her face again but then opened her palms like a book and resumed watching. Suddenly, Chris groaned with pleasure as his cock sunk back into Elektra's mouth. Everyone was silenced and gazed at him in wonder.\n\n\"Wow... okay, so apparently he's feeling pretty good about the whole thing...\" Marisol snorted.\n\n\"I mean, shit. Wouldn't you?\" snickered Kat.\n\n\"What I want to know is when do I get a turn?\" Blake asked with a mock irritation. All the girls turned to him and laughed.\n\nElektra perked up when he said this. Chris' heart leaped into his throat. He knew now to suspect something was coming whenever she reacted like that. With a sinister grace, Elektra slid his cock back out of her mouth, sending it wavering back and forth. She stood up, rolled her head around as if getting a kink out of her neck, shook out her arms, and then casually waltzed over to Sienna. Elektra grabbed her by the hand and tugged her forward.\n\nSienna flipped out immediately. \"No. No! No fucking way! What is she doing?!\" she shouted as Elektra dragged her out toward the chair until she was standing next to Chris.\n\n\"Uhh...\" said Marisol, suddenly startled.\n\n\"Innnnteresting,\" said Blake.\n\n\"Relax! It's his bachelor party, not yours. She's just giving you a closer look I think,\" laughed Mike. In fact, it was hard to know what Elektra was planning. She hadn't said a single word the entire time.\n\n\"Yeah, you said chill out last time and look what happened...\" Sienna snapped back, flush with fear.\n\nElektra positioned Sienna directly next to Chris. Sienna looked down at him, then at his lap where his penis was still sticking up into the air. Her eyes darted out across the room until they connected with Kat.\n\n\"Guys...\" Sienna whimpered. \"His... it's like... right there next to me.\" She continued to whine and shift about nervously as Elektra resumed the erotic dance she had performed on Chris earlier. She moved like a cat, slinking about Sienna's tense body with a wicked curiosity of a predator toying with a mouse before going in for the kill.",
        "Then, all of a sudden, Elektra went for Sienna's shirt. Sienna quickly grabbed it. \"No way! No way!\" she shouted. \"I'm not letting her strip me in front of you!\"\n\n\"Come on!\" Mike hollered back, as Marisol and Kat exchanged worried looks.\n\n\"No!\"\n\n\"it's Chris' bachelor party! You have to. Your entire friendship has, like, led up to this moment.\"\n\nSienna laughed at his comment, despite fighting for any remaining sense of decency and privacy. However, Elektra managed to get the shirt off and left her standing there in her bra. Chris looked up at Sienna, trembling, startled by the sight of her heavy breasts squeezed into two smooth, pale blue cups. She quickly clutched at them and looked like she couldn't decide if she wanted to laugh or cry.\n\nBlake threw his arm around Kat. \"In the words of one of my best friends... let's see some titties!\"\n\nElektra studied Sienna's face as she danced around her. Like a frightened deer, Sienna remained frozen in place with eyes as wide as saucers. Despite what she had just cruelly done to Chris, exposing him in front of his oldest friends, Sienna's mind still refused to believe the Elektra could really do anything so outrageous to her. It was all a trick, she told herself. After all, Chris was the guest of honor, not her. It was--\n\nSienna's frantic train of thought was interrupted as she felt her bra unsnap and her arms forcibly flung out to the sides. Sienna felt the cups of her bra pop off. It all seemed to happen in an instant. She felt the sudden rush of air. The exposure of her nipples. The weight of her loose breasts as they sprang free and bobbed in place, in front of everyone's prying eyes.\n\n\"Noooo!\" she wailed as she bent in half, laughing uncontrollably. Chris watched as the nervous laughter erupted from her throat, causing her whole body to shake. She struggled to contain her large breasts as they wobbled all over the place.\n\n\"Yeeeeah!\" Mike roared.\n\n\"Oh my god, you're such an asshole!\" Kat shouted at him.\n\n\"What? She's enjoying it. Look...\"\n\nElektra smiled and walked back in front of Sienna. She searched Sienna's eyes, then lifted her chin. Sienna rose back up again. They appeared to have a wordless exchange. It was as if Elektra had hypnotized her. With a sigh, Sienna weakly removed her hands from her breasts and allowed them to drop to her sides where they continued to tremble. Elektra stepped to the side and allowed Sienna to bear her breasts fully to everyone.\n\n\"This is so humiliating...\" Sienna said with a nervous smile. \"Ugh... fine... you can all look...\" She glanced down nervously at her own body as if shocked to see her own reddish nipples poking outward from the soft globes of her breasts. She turned to the side and saw Chris sitting there, equally embarrassed by his erection.\n\n\"Happy bachelor party...\" she grumbled, followed by a nervous chuckle. He smiled meekly at her. Marisol and Kat burst out laughing. Elektra seemed pleased and became active again. Chris realized what was happening as Elektra began to wind her arms around Sienna's body.\n\n\"Mike...\" Sienna began saying, her face turning a brighter shade of red than it had ever been before. She looked like she was about to explode with embarrassment but equally on the verge of laughter. As she spoke, she said her words decisively. However, strangely, Chris could tell she wasn't really putting up a fight, afraid as she was.\n\n\"If she so much as touches my panties,\" Sienna continued, \"I'm going to kill y--\"\n\nTaking another cue for maximum mischief, Elektra abruptly yanked down Sienna's panties. Chris' eyes shot down between her legs. There he was shocked to find himself observing a thick, dark mass of unruly pubic hair that sprang from her underwear. From his close vantage point, he could see the two thick outer lips of her labia, already swollen with telltale arousal and covered in a soft fuzz.\n\nSienna gasped loudly and threw both hands over her hairy crotch. She froze like that, cupping her groin while her breasts squeezed between her forearms and bulged outward. Chris felt his arousal fully renewed, pulsing wildly at full mast.\n\nBlake appeared delighted. \"Oh my god, look at her bush!\" he laughed.\n\nSienna shot him a defensive glance to the side. \"Well-- I mean... I didn't shave! How was I supposed to know that some stripper was gonna yank down my underwear in front of everyone today!\"\n\nChris could tell that she was now delirious with embarrassment but her body was also full of signs of intense arousal. Elektra grabbed Sienna's arms and pulled them away from her body, then wrapped them around herself and pressed her lips to Sienna.\n\n\"Mmmmph!\" Sienna said, only able to muster a muffled sound as their two naked bodies inched firmly together.\n\nA loud \"ooooh\" arose.\n\n\"Wow, that's hot...\" added Blake.\n\nMarisol, who had been mesmerized with what was happening, swatted Blake. \"Oh my god, you guys are such douchebags...\" she giggled. Then she covered her mouth to suppress the amusement that she felt bad about revealing in the face of Sienna's struggle. Slowly her eyes traveled back down to Chris' lap as if to gauge his physical reaction to seeing Sienna in that state.\n\n\"What the fuck? You smacked me for checking out Sienna and then you start staring at Chris' cock!\" Blake laughed.\n\n\"I was not!\" she shouted back in protest.\n\n\"You were...\" Kat said with a smirk.\n\nMarisol sighed. \"Okay, fiiine. But it's... you know... kinda hard to miss like that.\" Chris noticed she was blushing. For the first time, he felt a spark of excitement observing his friends' reactions. He found himself wanting to believe that the girls were enjoying the sight of his body. As horrible as it was to admit to himself, he also felt slightly better that he was no longer the only one suffering embarrassment.\n\nBlake resumed laughing, feeling victorious for pointing out Marisol's hypocrisy. However, he was soon silenced as Elektra set her eyes squarely on his and advanced in his direction. \"Um. Okay wait now...\" he said, backing up slightly.\n\nMarisol crossed her arms. \"Ha! Let's see how you like it!\" she exclaimed, realizing that he was next.\n\n\"Okay, shit. I take it all back!\" Blake mumbled, holding his hand out defensively as Elektra drew nearer.\n\n\"Nope! Sorry. Your turn!\" Marisol snickered. Kat gave her a high five. Mike joined in and high fived each of them.\n\nAs Blake made a weak attempt to ward off Elektra, Sienna turned and exchanged a look with Chris. She gritted her teeth in a humorous display of anxiety. He smirked and rose to his feet. For a brief moment, they faced each other. It felt awkward, confronting each other's nudity so directly. He could feel her intense awareness of her hairy pussy so starkly on display in front of him. He felt the same tension with his erect penis reaching outward just inches from her body. The sexual tension was so overwhelming that they could do nothing but turn away and watch Elektra dragging Blake into the center of the room.\n\n\"I thought you were on my team!\" Blake was yelling at Mike.\n\nPerforming his best Yoda impression, Mike replied, \"Calm you must be. Teams are the path to the dark side. Good Jedis perceive only nudity.\"\n\n\"Don't make me get all Vader on your ass!\" Blake snapped back. Kat rolled her eyes at their buffoonery.\n\n\"Yeah, cut the Star Wars bullshit,\" Marisol chimed in. \"In the words of one of my best, friends-- Let's see some cock n' balls!\" Caught in mid-sip, beer briefly erupted out of Kat's nose. She struggled to regain her composure as she wiped her face and listened to the laughter unleashed all around her.\n\nBlake looked pathetically resigned to what was happening as Elektra performed her magic on him next, slowly building up his arousal before plucking items of clothing from his body. It wasn't long before he stood there in his boxers, bulging dramatically. A hush fell over the girls.\n\nElektra squatted down in front of his body, grabbed his underwear, and began to slowly move them downward, centimeter by centimeter, dragging out the reveal ceremoniously. Finally, a little bit of neatly manscaped pubic hair emerged, followed by the start of his shaft. Finally, his cock sprang free and bounced dramatically in front of Elektra's face. She grinned and gave him a quick tug, then stood up and spun him slowly in a circle for all to see.\n\nKat and Marisol stood side-by-side with a look of devilish satisfaction on their faces. They looked down and curiously examined Blake's erect penis as he frowned and stepped in a circle until Elektra had rotated him back to his starting position.\n\n\"You guys, this is fucking awesome!\" Mike howled.\n\n\"I know! Seeing Blake shit-faced and embarrassed is worth every bit of my own embarrassment if I have to--\" Marisol began. She couldn't even complete her sentence before Elektra strolled right up to her with a wry grin. She grabbed Marisol's hand and started to drag her toward the center of the room. \"Ohhh fuck, here we go...\" Marisol whined. For someone who was previously so amused by Blake's misery, she tensed up rather quickly.\n\nChris had only just begun to absorb the seemingly momentous experience of seeing Sienna, one of his closest female friends, in a state of complete nudity. He'd barely had time to acknowledge how the event was playing out and that both Marisol and Kat would soon follow. As he watched Elektra's next victim enter the spider's web, his mind raced with the sexual curiosity that raged inside him so long ago, seeing Marisol in those tight-fitting swimsuits and the tantalizing hints of her naked body.\n\nElektra seemed to grow stronger by the minute, feeding off the fear and excitement she stoked with her mischievous intentions that seemed less the work of a stripper and more like a sex fiend hell-bent on the complete corruption of society for her own amusement and pleasure.\n\nShe seemed to assess the size of Marisol's generous bust, yanking off her top in a manner uniquely geared toward maximizing the erratic wobble that her breasts would achieve, overflowing as they appeared to be from her simple white bra. Her shorts went down next and displayed with dramatic flair the way her skimpy panties sunk into her curves, from the plump firmness of her round ass to the softness of her inner thighs where a meager stretch of fabric gave itself over entirely to a textbook expression of camel toe.\n\nChris felt his blood pumping through his body, the fierce, almost painful throb of his erection that, despite being fully developed, somehow wanted to expand beyond the limits he knew of his own physicality. Marisol glanced in his direction, giving him a meek look that seemed uncharacteristic of a girl who had always been so flirtatious with him. Now that protective wall she hid behind was vanishing.\n\nMike swung his beer upward and finished it with a guzzle, then slammed it down on the nearby table. He cracked his knuckles and grinned at Marisol. \"This is gonna be better than the Mexican titty bar,\" he laughed. She smirked and shook her head at him like he was a naughty child.\n\nMarisol felt her bra pop off and her two large breasts bounced free. \"Oh-- shit!\" she exclaimed, giving a startled reaction. She quickly squeezed her eyes shut. Her body started to shake as the laughter began to bubble up inside, until finally her whole body shook with a belly laugh. Chris stared at her in disbelief, shocked by the sight of her wide brown nipples that wobbled from side to side with the tremors of her weighty breasts.\n\nAs she opened her eyes again to face the expressions of the delighted friends around her, Elektra sunk lower, running her hands over the smooth contours of Marisol's body like she were an exquisite goddess carved from solid marble. Grasping Marisol's panties, she began to peel them down slowly, bit by bit, until it traveled over the secret pocket of her femininity.\n\nMarisol's black pubic hair was cropped close to her delicate skin, like a fine layer of stubble moving with an even fluidity toward her labia. Her lips were pronounced and generous with their disclosure of her sweet, pink inner flesh that peeked out seductively. Chris gazed at her gorgeous, faultless vulva and could almost feel the satiny softness it possessed. She looked over at him with a mixture of guardedness and keen interest in the stinging desire that seemed to have overtaken him.\n\n\"Okay, I gotta get in on this shit,\" Mike groaned. He stepped forward and began to peel his shift off. This surprised Elektra. He had stolen her job, after all. She started toward him, reaching for his pants as if to reclaim her duties but he promptly filled her hands with his discarded shirt. She seemed perturbed but paused for a moment and then took a step back.\n\nChris wondered why she chose not to pursue an aggressive approach with him. Instead, she claimed Kat who giggled and stumbled forward, just as gung-ho about taking this leap as Mike was. Both Mike and Kat appeared to share a certain camaraderie as they pursued their nakedness together. Elektra resumed her amusement as she danced about Kat's perfect body and slowly shed it of clothing while Mike did a teasing, mocking version of his own strip routine.\n\nAs they both laughed and carried on, Chris felt himself easing up. Even Sienna seemed to be taken by their jollity and appeared to have lost consciousness of her own embarrassing state for a moment. Marisol and Blake stood side by side, cheering on Kat and Mike with an equal lack of concern for the dangling, protruding bits of their own bodies.\n\nWhen Elektra unveiled Kat's breasts, there was a brief hush in the room. They bounced free with a precocious spring, then danced about with a spirited frolic that could only be described as expressing her own ebullient nature; a body reflecting a person with an unending passion for life itself. Chris, Mike, and Blake were awestruck. Her boobs bobbed into place with a simple, sloping perfection that was everything the legends foretold and more.\n\nKat, keenly perceptive of their enchantment, seemed to be preening. She snickered at the way Mike's own clumsy, drunken striptease had been instantly derailed. Kat lurched forward, full of riotous laughter as she yanked his underwear down with a sinister impatience. She leaped back with glee as Mike's penis sprang out and swung wildly through the air, swollen with the same ardor that gripped both Chris and Blake.\n\nMike laughed and lurched back toward Kat for a vengeful tickle. Kat burst into a fit of giggles again as she contorted her body to avoid Mike's fingers. Her cheerful breasts jostled about playfully, as she became increasingly animated. Elektra took the opportunity of her defenselessness to tug her panties down, revealing a perfectly smooth, shaven pussy. Her impish, rounded outer labia was divided by a clean, pinkish slit that seemed no less perfect and exquisitely feminine as the rest of her body.\n\nElektra stood back in satisfaction as their playfulness seemed to catch like fire on kindling and spread throughout the room until everyone was giddy with the shock and excitement of their mutual nakedness. Elektra had so skillfully plunged them into the depths of individual humiliation that there was nowhere to go but up, into the wild, erotic embrace of their collective erotic experience.\n\nMarisol and Sienna made their way to each other and gawked at the sight of each other's bodies again, falling all over each other with glee. Chris overheard Sienna whisper, \"I can't believe we're standing here looking at their boners!\"\n\n\"I know!\" laughed Marisol as they turned and eyed the array of stiffly bobbing penises surrounding them.\n\nBlake arrived with shots of tequila and started handing them out. Pumped up on adrenaline and nervous energy, they were gladly received by everyone in the room. \"Guys...\" he began as if starting a toast. \"I find myself standing here, making good on all the promises the adolescent-me ever made to myself. Enjoying one set of puss n' boobs after the other. And I just want to say... thank you for giving me the best day of my life!\"\n\nEveryone started laughing, took their shots, and then cheered.\n\n\"Thank Chris! It's his bachelor party!\" Mike exclaimed.\n\n\"Yeah! Chris-- boy did you luck out! You got not one but six strippers!\" Marisol laughed.\n\nMike added, \"Right. Chris told me to not get a stripper but he said nothing about six!\"\n\nThey all burst into hysterics. \"Hey look, Moe, Larry, and Curly!\" Blake chuckled, observing the girls' pussies as they stood in a row and pointing to each one in succession.\n\n\"You idiot,\" giggled Marisol, \"Curly didn't have curly hair. He was the bald one, like Kat.\" She pointed to the hairless slit between Kat's legs. Kat struck a mock stripper pose that flashed her smooth vulva in the most intimate way possible.\n\n\"Let's see... what do the guys' dicks look like?\" mused Kat.\n\nMarisol joined her in studying their cocks. \"I think they're cute. They're like... huge drawbridges that have risen up to temporarily halt a couple of shriveled tumbleweeds.\"\n\n\"What?!?\" Kat laughed, nearly choking on her own laughter.\n\nSienna began to grow red again. \"I love how you're all just standing around talking about each other's private parts,\" she chuckled.\n\nMarisol began to reply, unaware that Elektra was still far from done executing her plans. \"It's kinda fascinating to see someone's body after you've known them so long and...\"\n\nAs she listened to Marisol, Sienna suddenly felt her hand being grasped and tugged to the side. Chris turned to catch the sight of Elektra stepping behind him, dragging a bewildered Sienna with her. He felt the sudden warmth of Elektra's body as it moved up against his back. Then, out of nowhere, he felt an unexpected contact of soft skin that made him almost leap out of his own.\n\nMarisol abruptly stopped talking and gasped. The group was once again hushed as Elektra guided Sienna's hand between Chris' legs and wrapped her fingers around his thick, pulsing cock.\n\n\"Um... oh my god... guys-- guys!\" Sienna shrieked as Elektra moved her hand slowly up and down the full length of Chris' hard shaft. As everyone's laughter began to bubble over again, Sienna fell limp, letting Elektra take complete control, afraid to show any shred of evidence that her scandalous manipulations where anything but a task being forced upon her.\n\nSienna looked up at Chris who smiled meekly at her, unsure how to react. \"Oh my god... I'm so sorry...\" she mumbled. \"I can't believe she's m-making me touch your penis...\"\n\nKat laughed, \"He's clearly enjoying it...\"\n\nSienna let out a sudden laugh and then searched Chris' eyes as if trying to determine if this was true. \"Don't get any ideas. You're just lucky it's your bachelor party,\" she giggled. Chris kept smiling at her. For a moment, they got stuck in each other's eyes. Sienna felt a flutter in her stomach as she realized that she was just covering up her arousal and that he knew it.\n\nElektra spun around to Chris' front and adjusted Sienna until she faced him squarely. Then she began to guide Sienna downward. Sienna suddenly dropped to her knees and gasped. \"What?! Does she want me to...\" She blinked in disbelief at Chris' aching, distended cock sprouting outward toward her face.\n\n\"Ohhhh my god!\" Marisol hollered.\n\n\"Seriously. What kind of stripper is this?\" Blake laughed.\n\nKat seemed to be especially taken aback by Elektra's implication. She was instantly quieted, then glanced over at Blake, studying his amused reaction to what had just occurred. She let out a sudden sigh. \"Fuck it,\" she said. Everyone turned to look at her. Kat took a deep breath in and charged forward toward Blake whose face softened into an expression of confusion.\n\nShe confidently strolled right up to Blake and gave him a brief, hard stare in the eyes. \"I shoulda done this a long time ago, anyway,\" Kat muttered. Then she squatted down in front of him, grasped his erection, and plunged it into her mouth. Within an instant, her head was bobbing back and forth, smoothing taking him inside with an urgency that suggested it was long overdue.",
        "If it weren't for the rapid thump of the music blaring from Mike's stereo, it would have been possible to hear a pin drop. No one quite knew how to react to the turn of events. Marisol gawked at Kat with wide eyes. Sienna remained kneeling in front of Chris, her head angled sharply to the side to stare in horror at Kat and Blake. Mike stood there frozen with a beer clinging to the tip of his lips.\n\nChris felt himself go pale, wondering how much more of a circus his quiet bachelor party would turn into. Finally, Mike slowly lowered his beer and turned toward Chris. He broke the shocking silence with a shout. \"Hey, Chris!\"\n\n\"Wh-what?\" Chris mumbled.\n\n\"Surprise! This isn't your bachelor party!\" he laughed.\n\n\"What the fuck is it, then?\"\n\n\"Welcome to your first orgy!\" Mike blurted out before enthusiastically returning the beer can to his lips.\n\nEveryone seemed to react at once. It was a mishmash of gasps, and murmurs, and questions. Marisol's voice seemed to rise above them all. \"What the fuck are you smoking, dude?\" she exclaimed.\n\n\"Don't look at me!\" he chuckled, pointing to Elektra. \"She started it!\"\n\nElektra grinned and looked down suddenly at Sienna. Startled, she began opening and closing her mouth as if trying to say something. Elektra ran her fingers through Sienna's hair and turned her face back toward Chris' protruding erection.\n\nExasperated, Sienna mumbled, \"Wh-wh-what-- no... I-can't...\"\n\nYet Sienna had never let go of Chris cock. He felt her tighten her grip nervously. It felt good. She stared at the tip of his penis, then up at his face, then back toward his body. Chris felt her hand trembling violently and could hear her breathing rapidly. Her jaw began to tremble as she became suddenly transfixed with his warm, swollen appendage beating at the core of her fist. She seemed to be at war with herself, captivated at the invitation but also struggling to make sense of it and the feelings developing inside her body.\n\nSienna took one last look up at Chris' face, her lips still wet and quietly trembling. It seemed as if she was asking him permission, full of shame for wanting to follow Elektra's instruction. Chris couldn't believe what was happening. After he said nothing, she slowly advanced toward his body until contact was made. Sienna took his penis and began to carefully glide it inside her mouth, letting it slip over the warm, wet plane of her flattened tongue.\n\n\"Oh-my-god, oh-my-god, oh-my-god,\" Marisol said, staring at the two couples in shock. She took several steps backward until her butt bumped into the table and then stood there with her hands over her mouth.\n\nChris' entire world was shattered. The sensation of being taken deep into Sienna's mouth, the way she got to know his body at that moment so intimately and unexpectedly, sent him reeling. He felt a shiver shoot through his body as he felt himself sliding back and forth through her mouth with increasing speed.\n\nAs if needing to check in with how he was feeling about it, Sienna frantically searched upward for his eyes until they connected. He knew instantaneously that their friendship, and the friendships he had with all his friends, had forever changed, even before she said a word and revealed her growing passion. Even before he saw Marisol cautiously approaching Mike's body, as if feeling left out, astonished with her own actions as she found herself reaching down to cup his balls and massage them gently in her hands.\n\nSienna stopped sucking him for a moment to whisper as if out of breath, \"You're so hard...\" She handled his cock as if it were a strange artifact which captured her imagination. \"I can't believe I'm... sucking your cock... Chris...\" He could hear the exasperation in her clumsy words, the total scandal written across her face. She seemed almost delirious.\n\nShe plunged him back inside and Chris groaned. He could hear Blake and Mike groaning as well. As he squinted his eyes and dizzily looked around the room, he could see only heads darting back and forth, he could only hear a symphony of slurping and sucking sounds.\n\n\"Sienna...\" Chris moaned.\n\nShe pulled him out again, seemingly still desperate to tell him how she was feeling. Her jaw was still quivering, she ran her nose alongside his long, swollen shaft still left glossy by her saliva. \"I love your smell so much,\" she continued with a sense of astonishment. He watched her suddenly kiss the tip of his penis, following it with several more along his throbbing shaft until she whimpered and took him back inside, cupping his balls to massage them gently as she hungrily devoured his cock.\n\nThe room fell eerily quiet. All wisecracks and idle banter had ceased. What remained was a panoply of quiet sucking sounds, sideways glances, and an awkward shared disbelief. However, it was as if, with one simple action, Elektra had set off an avalanche of suppressed curiosities, fantasies, perhaps even secret flames. Each of them needing a mere lit fuse to set off an explosive powder keg that had been lying there in wait for years of coming of age together. And yet, at first, no one dared to speak a word of acknowledgment about the turn of events, afraid to be the first to offer their opinion on it.\n\nNearby, Marisol let Mike's cock pop out of her mouth and then teasingly dragged her tongue along the surface of his scrotum and up along his shaft, just as Elektra had done to Chris. She suddenly started to giggle. \"I can't believe I was once embarrassed to sit next to you in health class during sex ed because they showed us a picture of male genitals, and now I'm actually licking your balls,\" she said.\n\n\"Yeah it's come full circle,\" Mike laughed. \"This is exactly what I was imagining you doing in that class.\"\n\n\"Haha, somehow I don't doubt that.\"\n\n\"Like you weren't just as horny back then,\" he added with a grin.\n\n\"It's true...\" she replied with a smirk \"I fantasized about fucking each of you at one time or another. I'm sure we all did.\" Blake proudly raised his hand. Chris was astonished at how nonchalantly both of them had spilled the beans on their secret fantasies about one another.\n\nKat chimed in, \"Sienna, remember that night you slept over my house and we were talking about that kid, Oliver?\"\n\nSienna shrieked, \"Shut up! Shut up!\" as if she was afraid of what Kat might reveal next.\n\nKat laughed. \"I remember what you confessed to me--\"\n\nMarisol cut her off. \"Oh my god, did you guys fantasize about Oliver!? So did I!\"\n\nSienna added, \"He was so cute with his glasses. Why did he ever get contacts?!\"\n\n\"Damn, and I thought the guys were bad!\" Blake chuckled.\n\n\"Well... I'll show you what I fantasized about...\" Kat said, calmly. With a sly grin, she pushed Blake back onto the soft carpet.\n\n\"Oh fuck...\" Blake muttered as she began to climb atop his body. Everyone watched in amazement as she reached down and grasped his cock, angling it up toward her body and sinking down onto him until it smoothly entered her body. She began to grind her hips slowly, using exaggerated motions that made her tight, round bum squeeze and release in alternation. Then she transitioned into a spirited ride, bouncing up and down on his body with enthusiasm. Kat ran her hands up through her hair and arched backward, extending her chest forward and emitting a playful laugh.\n\nChris watched his friend's thick cock rapidly sink into her body and slide out again, causing his tight sack to wobble each time the pressure of her body bore down on his. He caught his expression; one of absolute wonder and enchantment at the joyful bounce of her perfect breasts that she exhibited proudly and with obvious flair. He grasped her body and they fucked like it had been a long time in coming.\n\nWhen Chris and Sienna turned to face each other again, in acknowledgment of what they'd both been observing, Chris couldn't help but wonder if they were facing the same situation.\n\nSienna's voice was barely audible, straining on her own emotion, but she managed a quiet, \"Do you...\" He realized that, though she didn't quite finish her sentence, Sienna just said the one thing that he had been so desperate to hear so long ago while lying there next to her that night after the movie.\n\n\"If you want to...\" he said, nervously. Then he felt guilty for dumping all the pressure on her and changed his answer to, \"Okay.\"\n\nChris watched Sienna's chest swell as she received his response. Then she laid back, presenting her body to him with cautious and silent anticipation. He inched his way forward toward her body as he separated her legs. She tensed up and eyed him nervously as he observed her hips opening to present him with the most intimate and vulnerable view of her body he could imagine. Her sex was wild and hairy, her labia fleshy, moist, and fuzzy. He reached out and separated her lips with his fingers. She blossomed for him. A satiny pink emerged, glistening and quivering at his touch.\n\nHe felt her tremble and sigh, becoming ensnared in the desperate look she gave him. With an expression of comfort and reassurance, he connected with Sienna while stroking her delicately, feeling his fingers becoming moist and slick. Her breath quickened as he began to rub her in circles. An intensity in her face grew until he could see that she could bear no more.\n\nChris stopped abruptly and, saying nothing, eased his hips forward to position himself between her legs. He glanced down briefly to guide himself to the pink, gaping hole surrounded by dark thatch, and then pushed forward. Returning his eyes to hers, they observed each other's building crisis as they felt the mutual bliss of his cock entering her body.\n\nAs Chris began thrusting, he became mesmerized by Sienna's look of longing, the sway of her heavy breasts, the clammy wetness of her inner thighs. Each time his pelvis pounded against her mons, he could briefly feel her damp humidity against his body. Sienna's pubic hair had gathered into warm, slick clumps. He found himself disoriented by the earthy funk of her body's generous lubrication. It was the same odor he'd detected in the bathroom years ago. The one that had bloomed from her body in response to the film they had seen.\n\nMemories of that evening came rushing back, along with all the fantasies it had inspired. He felt the need to confess.\n\n\"Remember that night I crashed at your place and we watched that French movie?\" he sighed. As if she knew exactly what he was going to say, Sienna's eyes shot open wide and she began to nod quickly. \"I noticed when I went to the bathroom... how you changed your panties...\"\n\nSienna inhaled suddenly and seemed to hold her breath. At first, Chris worried that he'd embarrassed her by revealing his knowledge of what had happened to her body. However, he felt Sienna begin to urge her hips against his with a frantic, jerking motion. If she was anything other than turned on by his admission, it was certainly not apparent.\n\n\"Chris...\" she mumbled.\n\n\"Yeah?\" he said, as their bodies continued to grind passionately together.\n\n\"I need to-- Tell me what you were thinking that night? I really need to know...\"\n\nChris knew they had passed the point of no return. Not just in the way their relationship had so quickly become physical but also to the degree that their thoughts would now be completely exposed as well. \"I could smell you...\" he moaned, \"I could tell how horny you were...\"\n\n\"Ngh!\" she squeaked, aroused by his secret knowledge of her shameful desires. \"I... I wondered if you...\" Sienna could barely speak, struggling to maintain her composure in order to finish her train of thought.\n\nChris began to fuck her even harder. Sienna's wide, pink nipples jolted back and forth with an even rhythm as he watched his cock plunge through a thick forest and into her creamy depths. \"I couldn't stop thinking about what it would be like if we... you know. But I wasn't sure if you felt that way. I mean, I didn't want to mess up our friendship,\" he continued to confess.\n\nSienna couldn't stand it any longer. She gazed up into his eyes, shaking uncontrollably with emotion. \"Chris... I was lying awake all night. I couldn't sleep...\" she whimpered. \"I couldn't stop thinking of-- imagining us fucking. Oh god, I wanted us to fuck so badly... I soaked my second pair of panties and was afraid you'd know!\"\n\nChris laughed. Sienna's face suddenly lit up with a smile. The outpouring of emotion caused her to giggle with the intoxication of release. \"Ugh, I wanted you so badly,\" he added.\n\nSienna moaned. \"Yes... I wanted to feel you inside me... I was so wet. I wanted you to make me come and then fall asleep in your arms, naked.\"\n\n\"Fuck, why didn't we!?\" he asked, pounding her frantically. The sound of her squelching body conveyed the maddening desire of her body for his. Her beautiful, unique aroma enveloped them both.\n\nShe grasped for him frantically, tugging him closer, begging him to coax out more and more of her pleasure. He grasped her breasts, moaning helplessly as they jostled in his hands. \"You and me...\" she sputtered between gasps for air, \"We're a lot alike... No confidence!\"\n\nThey both laughed and drove their bodies together, filling the room with the sounds of their grunts and raw hunger. \"Mmmh! Chris!\" she cried out. \"Yes... I'm gonna... ngh!\" Sienna's body seized up in a fit of crisis. She clutched at his body as if in pain before hers began to quake with rolling thunder. Chris could feel her body flooding him with the powerful release of everything that had built up over so many years and it felt wonderful.\n\nSienna collapsed in exhaustion, her hair plastered to the side of her face, her lower lip hanging half open, still trembling as her warm breath crossed over it. Her head rolled over to seek his eyes as he pulled up alongside her. \"There's a guy I like now... I want to do this with him. I need to do with him what I didn't have the courage to do before with you,\" she whispered, suddenly taking on a serious tone.\n\n\"Do it,\" Chris said sharply. \"Life's too short.\" A smile widened across both their faces.\n\n\"Thank you,\" she whispered back. She leaned over and gave Chris a soft kiss on the cheek.\n\nChris pondered what that thank-you meant. He realized that fucking each other didn't just bring closure to a long-lost opportunity between them. It was a much needed moment of transformation for them both. Something to push them toward their sexual potential. At that moment, they were uniquely suited to teach each other that it was never too late to take a leap of faith that seemed so terrifying. If they could do it, at long last, then she would be able to do it with whomever it was that she was pining after.\n\nHe saw that something had changed in her expression. He was genuinely happy for her.\n\nChris soon realized that in the time he and Sienna had spent together, the situation had evolved all around them. Elektra had retired to the couch to watch her handiwork with cryptic interest. Kat was delivering sassy remarks as Mike began eagerly eating her pussy. It was clear that partners were going to be traded. Before long, Sienna approached Blake with an apparent desire to practice her newfound sexual confidence. Moments later, she was in his arms, riding him in his lap, laughing excitedly at the strength he exhibited, bouncing her joyfully on his cock as her buttocks slapped against his thighs. Chris marveled at her transformation.\n\nMarisol approached Chris with quite the opposite determination as Sienna had done. Without even asking, she climbed eagerly atop him. He noticed something different in her eyes. Not a hesitant, anxious desire. Instead, she looked like she was on a mission both to enjoy the opportunity that presented itself and to ensure that Chris would enjoy it too.\n\nHe watched her laugh and grasp his cock, giving it a playful squeeze to feel its deep throbbing. She claimed it as if it belonged to her. \"Oh god,\" she groaned, rolling her head briefly backward, \"You have such a beautiful cock!\" She rubbed it happily, fascinated by his length and girth and the response to her touch.\n\nChris chuckled. Seeing him so delighted only made her more excited. She slapped it a few times against her vulva. The loose flesh of her labia was already sodden and slippery from her previous activities. As she began to rub his hard shaft against the opening of her vagina, she gave him a fiercely desirous look and said, \"Mmm, I love the feel of your hard cock against my pussy...\"\n\nChris was startled by the verbal expression of her craving, especially after his experience with Sienna. However, it began to drive him mad with an eagerness to penetrate her. He examined her beautiful vulva, the way her smooth, cropped fuzz seemed to channel inward toward the widening pink slit crowned with an already budding clit.\n\n\"Ugh... Marisol...\" he groaned, impatiently wrestling his cock from her grasp and rubbing his swollen head briskly between the folds of her labia. She narrowed her eyes and seemed to hiss with delight as he forced himself through her opening. He felt her expand to receive him and his cock suddenly sunk deep into her body, zipping smoothly against the warm, lubricated inner walls of her body.\n\n\"Mmmm... yes,\" she exhaled. Marisol placed her hands on his chest and locked eyes with Chris as she began to hump his body with the same mirth that he'd always admired her for. Again and again, she scooped her body forward with a long, undulating rhythm that drove his cock deeper and deeper into her body. He felt her warm inner walls sliding against his body, applying pressure to his straining girth as if she used every muscle of her body to massage his cock.\n\n\"Oh god-- fuck me,\" she growled as if angry with him for taking so long to reach this stage of their relationship.\n\nChris moaned, completely disarmed by the pleasure he derived from her body as it moved with a serpentine rhythm to milk his aching cock. \"Jesus... Marisol...\" he muttered. \"I can't believe we're doing this...\"\n\n\"It's about fucking time,\" she snapped. He laughed. \"I've only been waiting for this, for like, forever!\"\n\n\"Really?\"\n\n\"God-- you're such an idiot, sometimes!\" she laughed.\n\n\"Huh?\"\n\nShe rolled her eyes as she began to spring up and down on his cock, driving it upward through her tight pussy with an amused exhilaration. \"Come on Chris... are you that clueless? I've been hot for you since like the day we met. You just never seemed to care.\"\n\n\"Wait. Hold up. You have?\"\n\n\"Why do you think I was always joining the after school clubs you were in? I fuckin' wrote you notes with a little heart on them, like every day.\"\n\n\"I thought that's just how you always signed your name!\"\n\nShe rolled her eyes. \"I even dragged you shopping for bathing suits that one time. I mean, hello! I knew you were peeking and trying to see me undress. I freakin' tried on those bathing suits naked for that reason! Do you even know how unhygienic that is!\" Chris started laughing.\n\n\"Anyway, don't get me wrong. I'm not bittersweet about you marrying Brielle. You're actually great for each other. But if I'm gonna be completely honest, I'm glad we have this chance together before you tie the knot; when I can make you completely mine just to know what it's like.\"\n\nWith this, she began to fuck him with an aggression and intensity that he could barely withstand. \"Oh fuck...\" she wailed, grinding his cock ambitiously. \"I'm so wet... ngh... Does that feel good?\"\n\n\"Yes!\" he groaned.\n\n\"You like that?\" she continued with a wicked grin. The tenacious suction of her body polished his throbbing cock until it felt like it was on fire, tingling so fiercely that he feared he might explode inside her at any moment.\n\n\"Marisol--\" he moaned. \"I feel like I'm gonna--\" He briefly tried to ward her off.\n\nShe wasn't listening to him. \"Mmmh-- Chris!\" she continued. \"Don't stop! It feels so good... make me come!\" Marisol suddenly seemed drunk and lost in a haze, bouncing frantically upon his body. Her crisp brown nipples shimmied back and forth as her body engaged his like a jackhammer. \"Please... please...\" she repeated.",
        "Chris felt a fear rising inside him as he ached for release but fought against it with everything he could muster.\n\n\"Fuck! Yes! Chris! I'm coming!\" she shrieked. She jerked her hips erratically, desperate to drive him to her absolute depths, to make him feel the shiver erupting from within; an intense, rippling orgasm that swept outward and engaged her entire body. She fell forward, clutching for his body for support as she repeatedly seized up with passion. He felt her cling anxiously against him, the soft mound of her buttocks quivering as she continued to spasm in his arms.\n\nThen she lay limp, burying her face in his chest and sighing happily. He felt her eyelids flittering against his skin, her hot breath flowing across his nipples. Finally, she pulled herself up and gave him a dizzy look. A smile emerged, followed by a laugh.\n\n\"You okay?\" she asked, amused by his own bewildered expression.\n\n\"Yeah... I almost came!\" he laughed.\n\n\"Oh! Well, I'm glad you saved it. Just in case, I dunno, you think there should be a next time,\" she joked. Marisol winked at Chris and gave his hand a tender squeeze. With a grunt, she pushed herself up onto her butt and then stood up, briefly struggling to regain her balance. Chris gazed at her in wonder as she smirked, then turned around and began to wander off, wagging her rear end sarcastically behind her.\n\nBefore Chris could process what was going on, Kat appeared out of the blue as if she had been awaiting her turn with him. \"C'mere bachelor boy,\" she said with a grin.\n\n\"I can't believe you just did that!\" Chris laughed.\n\n\"Did what?\"\n\n\"Gave Blake a blow job out of the blue. Now look what you caused!\" He gestured at the free-spirited fucking taking place around them. Mike had just claimed Sienna for himself and Marisol now had her eyes set on Blake.\n\nKat chuckled, \"Don't worry... don't worry. I've got something for you too.\"\n\n\"Ha, I didn't mean it like that.\"\n\n\"Didn't you?\" she replied with a sly grin.\n\nKat strolled straight up to Chris and grabbed his hands. As if knowing exactly what he wanted to do, she pulled them to her chest and placed them squarely on her perfect breasts. Chris felt their warm roundness filling his hands, her hardened nipples poking against the clammy centers of his palms. He gave them a soft squeeze. They compressed in his hands, then sprung back to their lovely firmness, reconstituting their superior shape.\n\n\"I have an idea,\" she said, enjoying his expression of awe. Kat set Chris down on one end of the couch and knelt down in front of him. She took his cock and fed it into the cavity between her breasts, then squeezed them together and began to massage him back and forth. \"Mmmm...\" she said.\n\nChris leaned back in a state of bliss, extending his hard cock through the tight channel between her boobs, watching her bounce them up and down, driving his shaft enthusiastically through the chasm of her cleavage. She leaned in toward his penis, watching his thick, reddish cockhead blooming from her bosom and sinking back down again. She inhaled deeply, then laughed.\n\n\"Geez. The only person that smells more aroused than you right now is Marisol! You still smell like her.\" Chris chuckled at her comment. \"Ah, I had almost forgotten the extra perks of an orgy,\" Kat added. He couldn't believe the way she talked so casually about the scandal of group sex that had erupted between them. He wondered if she'd ever done it before. If any of his friends had, it would have been her.\n\nAs he sat there, draped lazily over the couch, intoxicated with the extreme pleasure of having his throbbing cock squeezed and massaged by the most perfect pair of breasts he'd ever seen, he felt a sudden burst of excitement and sexual prowess. He simply didn't care anymore. He didn't care about his embarrassment being stripped in front of his friends. He didn't care about the awkwardness between them as they revealed their long-hidden sexual urges.\n\nAll he cared about was embracing the sudden outbreak of lust that was flourishing between them and to enjoy it for all it was worth.\n\nChris quickly assessed Kat's lithe, yoga body, estimating his abilities to try something he had only seen in porn. He pulled himself free from her jostling breasts and reached under her legs. Kat squealed and threw her arms around his neck as he pushed himself forward and attempted to lift her into the air.\n\n\"Chris!\" she laughed. \"Wow. Bachelor boy's getting into the spirit!\" she exclaimed as he scooped her up into his arms and stood up.\n\nKat's legs wrapped around his body and he felt her feet rest against his butt. He bounced her up and down a couple of times, adjusting her position until he could lower her onto his engorged cock. He felt it parting her smooth, hairless slit with ease and plunging itself into the slippery interior of her body. Her vagina expanded wide to receive his upright penis as she gazed straight forward into his eyes with merriment and surprise at his sudden actions.\n\nChris groaned as he began to bounce her up and down on his cock. Before long, he felt the warm, slick emissions of her body glazing his cock as it dug hungrily through her body as if reaching for her deepest recesses.\n\n\"Ngh... you feel exactly as good as I've always imagined...\" she moaned.\n\nChris laughed. \"As if you've fantasized about me before...\"\n\nShe seemed surprised. \"What are you talking about? Of course I have!\" she giggled, breathing rapidly and brimming with excitement at the way she rebounded upon his swollen member.\n\n\"Seriously?\"\n\n\"I heard what you and Marisol just said... If we're all gonna confess something here, I'll tell you something about that yoga class you took.\" She tightened her arms around his neck, drawing herself closer to his body, springing happily on his cock and letting her dynamic tits recoil against his body. He felt her nipples brushing against his and shivered with pleasure.\n\nShe continued, \"I spent so long after that trying to picture what your dick looked like under there that I can still remember exactly how it felt through your shorts. I memorized the sensation of feeling you growing there, aching with frustration. If I could have, I would have dropped your shorts and taken care of your need right then and there.\" Chris grinned at her in amazement. \"Let's just say I've called one of my favorite dildos by your name more than a few times...\"\n\nThere was a mischievous sparkle in her eye as she confessed this to him as if her goal was to turn herself on by exposing this information as much as it was to turn him on.\n\nChris had spent his entire life looking at Kat with sheer awe. Awe that he'd since only felt for Brielle. The fact that she fantasized about him sent him reeling with a confidence boost like he'd never felt before. He suddenly realized that he felt the way Sienna must have felt with him earlier. There was Kat, so genuine in her affections, her desire for his body suddenly crossing the gulf of doubt that lay between them.\n\nIf Kat, someone he held on such a pedestal, felt this way about him, then maybe it wasn't so unusual that Brielle, the love of his life did too. He suddenly felt the desire to let go of his insecurities and just enjoy the bliss that life sometimes gave him.\n\nChris swung Kat around and took a few steps back toward the couch, then dropped her gently onto it. With no pause in the action, he continued to fuck her frantically, entranced by the sight of her breasts and the wild springing action he could trigger with his forceful thrusts. She watched his eyes, delighting in the way he devoured the sight of her dancing nipples.\n\n\"You can come on my tits if you want,\" she giggled.\n\nSuddenly, Elektra sprang from the couch. She approached them both, wagging her finger back and forth. With a smirk, she tugged at Chris' arm until he relented and pulled out of Kat. Kat laughed with surprise and watched as Elektra reclaimed Chris for herself, pulling him onto the couch and getting onto her hands and knees. Bewildered, Chris watched as she stretched her ass out to him, inviting him to enter her from behind. Kat snickered and headed off to find Blake again.\n\nElektra widened her legs and rotated her hips to open them toward his body. Chris watched her puckered anus emerge, followed by her hairless pussy that began to stretch and widen as if inviting him inside. Her labia had thickened with arousal, in anticipation of his entry. She turned and gazed back at him. Gone was the dominant vixen playing her wicked tricks. Now she wanted his revenge in the form of his own, punishing indulgence.\n\nHe gave her pussy a quick rub, widening her lips further and presenting himself with the deep portal to her body. Then he eased forward and sunk his cock inside, feeling her warm, eager embrace. He began to slowly grind his hips back and forth, watching her body greedily devour him, then started pumping into her harder and harder until she sprang repeatedly off his advancing body.\n\nFor a while, Chris pondered the whole casual sex thing occurring around him, marveling at how comfortable and natural it had become due to being built upon a closeness and friendship that had developed over such a long time. He dwelled on the new dimensions that were opening up to them, all of a sudden. Knowing the parts unseen. The secret smells and tastes and sensations that now could be shared. The new language of communicating their long-nurtured feelings. However, in the back of his mind, he also wondered what it would all mean to him, being on the verge of marriage.\n\nHe couldn't worry about that now. This was supposed to be his one last hurrah, after all.\n\nChris returned his attention to Elektra's sumptuous ass as it recoiled against his body, the slight ripple of her cheeks coinciding with the powerful thrust of his cock as it drove back and forth through her dripping pussy. He groaned loudly, realizing that he was quickly reaching the same limit of his pleasure that he had earlier with Marisol.\n\nTurning away in an attempt to regain control, he saw Sienna standing across the room, laughing into her hands. On the floor in front of her, Kat sat beside Blake, frantically jerking him off. \"I'm gonna win!\" she exclaimed.\n\n\"No way!\" laughed Marisol, who sat beside Mike, tugging his cock. Chris laughed at their race to see who they could make come first, or conversely, which of the guys could hold out the longest.\n\nAll of a sudden, Chris heard an unfamiliar whisper. \"You can come inside me, it's okay.\" He did a double-take and saw Elektra glancing back at him with a smile. Her head lolled about lazily, depicting a welcoming attitude toward the sensation of her own pleasure, delivered by a complete stranger.\n\n\"Wha-what? I can't do that, I'll make you--\"\n\n\"No really, that's all taken care of,\" she said reassuringly.\n\n\"O-okay...\" he sputtered with understanding, yet bewildered by her unexpected first words. He grasped her ass and began to pound her mercilessly, groaning loudly as he neared the point of no return. Her pussy began to squelch loudly, becoming increasingly fragrant and wet with her free-flowing juices. He watched her breasts swinging madly beneath her chest as she began to whine and then cry out in pleasure.\n\n\"Yes...\" she moaned. \"Fuck me, Chris... Come for me. Fill my pussy!\"\n\n\"Jesus... mmmh!\" Chris groaned, unable to withstand any more. He felt a swelling sensation rising inside him, a tremendous pleasure like a tidal wave, threatening to obliterate him. Then it struck like thunder. A powerful force flowing through him in waves, surging through his cock. He began to see stars as he felt himself pumping a thick stream of cum into her body, again and again, each time urging him to expend himself completely until nothing remained of him but a placid bliss.\n\nElektra threw her head into the couch cushion and screamed with pleasure as she erupted with her own orgasm, issued in response to the sensation of his cum squirting inside her in powerful jets. Chris quickly recovered from a momentary loss of consciousness to find himself staring at the long shaft of his cock relaxing to a slow thrust. It was smeared with a sticky white film that clung to her sopping labia and began to drip down her inner thigh as it oozed from her body.\n\nChris sat back in exhaustion, letting his hard cock sluice from her body, releasing a viscous trail of ejaculate. He heard his friends groaning and glanced over at them. Blake and Mike were wincing and struggling to maintain control of their writhing bodies as the girls' fists shot up and down the full length of their upright cocks.\n\nKat shot a quick smirk over at Marisol. She suddenly seemed to have an idea. Reaching down between her legs, Kat quickly wiped herself and returned to Blake's cock, her fingers now shiny and mucilaginous. She briskly resumed stroking his cock with her own juices as an additional lubricant. Within an instant, Blake began to shiver and jerk his hips.\n\nA thick geyser spurted from his cock, squirting high into the air and landing with a splash on his thigh. He grunted loudly as he released another spurt, followed by another. Kat laughed with glee at the sight of his wild ejaculations. Nearby, Marisol gasped as Mike began to come, erupting like a volcano until her fist was coated in semen.\n\n\"Told you!\" Mike groaned, \"I win...\"\n\nBlake, still catching his breath, muttered, \"Fuck that. We clearly both won.\" The girls laughed.\n\nAfter a brief recuperation and cleanup, everyone remained equally animated. Elektra was offered a drink which she gladly accepted, drinking it in still total silence from a chair across the room while watching the rest of the show through the narrow squint of her eyes.\n\nThe way they acted around each other was instantly transformed, becoming a sort of idyllic camaraderie, openly embracing their state of undress, letting it all hang out without a care in the world about seeing each other's private parts. Certainly not after what just transpired. They laughed, resumed drinking, and carried on in the nude, not just with the kind of casual friendship that Chris usually enjoyed, but somehow even deeper than that. After all, they had nothing left to hide, nothing remaining left unshared between them, neither physically nor emotionally.\n\nAll the baggage Chris had discussed with Sienna, Marisol, and Kat had melted away. It was insignificant now. They'd broken through it. It was just a bygone hurtle in the awakening of a complete expression of their deep friendship. Sienna's life was about to become unstuck thanks to him. Marisol had been given the closure she needed for an old flame she still carried. Kat had helped him realize his own self-confidence and worth.\n\nHowever, amazingly, he found himself desperate at that moment to return to Brielle's arms.\n\nChris laughed as he spontaneously recalled Charles Dickens', Christmas Carol. It was as if he'd been visited by three spirits who then returned him to reality, somehow able to give more of himself to the ones he loved than he ever had before. Rather than feeling confused by what he had just done, he felt renewed and revitalized, ready to move on to a new chapter of his life.\n\nThe party eventually began to die down as the alcohol began to take its toll. Chris watched his friends get dressed and begin to leave, offering him a parting congratulations, sealed with hugs and kisses that felt more natural and unguarded than ever before. Finally, he found himself alone with the two people who had triggered the whole afternoon of shenanigans: one of his oldest friends and a mysterious, mute stripper.\n\nMike twisted his face. \"Fuck, I have to take a serious piss. I'll get more beer, too.\" He hurried across the room and through a doorway. Chris heard him shout from the other room, \"Set up Mario Kart! I'm gotta beat your ass. I won't have a chance to do it anymore after you get fucking married.\"\n\nWith everyone finally gone, Elektra wasted no time in strapping herself back into the seductive undergarments that lay about in shambles. It was amusing how easily they could be pieced back together after such a ceremonious disjunction. As Chris gave a small hop and tugged his boxers back on, Chris observed with a sense of wonder at how quickly the flair Elektra previously performed every action with was now gone, replaced with movements that were as plainly purposeful as his own.\n\nIt was just a job for her, after all. As much fun as she had been, he was not unaware of that fact.\n\nShe cast him an upward glance as if feeling pressured to acknowledge his awkward silence. \"Had fun?\" she asked, simply.\n\n\"Oh, so you do talk, I didn't just imagine it earlier!\" Chris laughed.\n\n\"Yes,\" she replied with a smirk. Elektra finished lacing up her boots and stood back up. She took a few steps forward and extended her hand. \"Samantha,\" she said.\n\nHe smiled and gave her hand a shake. \"Thanks for trusting me with your real name,\" he laughed.\n\nElektra shrugged and added, \"It's no secret that I'm a stripper.\" She paused for a second as if realizing she wanted to clarify something. She shook a finger back and forth between the two of them and added, \"Just for the record. I don't normally perform the extra services. -- That's for special clients only.\"\n\nChris raised an eyebrow. \"Well, thanks! I don't know what Mike did to convince you I'm that special but I'll take it. To be honest, I can't imagine how he could even afford to pay you what this must have cost. He doesn't even have a steady job. He's lucky his parents even got him this place.\"\n\nElektra yanked her trench coat off the rack and then turned to look at Chris. She peered at him oddly. \"Pssshhh!\" she hissed. \"I hate to break it to you but your friend didn't arrange squat. I wouldn't do a favor like this for a guy like that, even if I had known him all my life.\" She rolled her eyes and with one smooth swing flung the coat around her shoulders.\n\n\"Huh? He didn't hire you?\"\n\n\"Nope. Surprise! ... I guess? He was just asked to arrange your party and text me a time and place.\"\n\n\"Uh... So someone instructed you both to do all this?\" She made an affirmative clicking sound and winked at him, then stepped toward the door. Chris rushed after her. \"Who?!\" he asked.\n\nElektra opened the door and stepped out onto the landing. She turned and smiled at him. \"Sorry. I've got explicit orders not to say.\"\n\nShe finally gave him a sympathetic look upon seeing his face fall. Elektra sighed. \"Just an old friend. We used to... um... work together. That was a long time ago. Anyway, it was fun.\" Elektra gave him a brief squeeze on the hand.\n\nChris watched her head down the steps then make her way to the end of the driveway where her car was parked. It beeped and flashed its headlights as it unlocked. When she reached the driver's side door, she opened it and looked up, surprised to see Chris lingering there. She paused for a moment.\n\n\"Hey,\" she called out. Chris became suddenly alert. \"It's funny. You seem so sweet and innocent. I never would have thought--\" Elektra didn't finish the sentence. Instead, she left him one parting comment. \"Who knows? Maybe this is their way of coaxing out your wild side.\" She began chuckling as she got into the car and drove off.\n\nChris froze in the doorway, watching the car roll down the street until it vanished. Elektra's last words rattled around in his brain, refusing to be absorbed. It was a familiar sort of comment. One that he couldn't quite fathom could possibly be connected to the one person that he knew it had sometimes been used to describe...\n\nChris closed the door and wandered aimlessly back into the living room, still reeling from the exchange. His heart began racing. He didn't know whether to start feeling anguished about what he'd just done behind Brielle's back, or if he needed to pursue a new suspicion of her being behind it all along.",
        "As if on cue, Chris felt his phone buzz in his pocket. He pulled it out. A text message from Brielle had just arrived. He opened it.\n\n\"How'd it go, baby?\" it read.\n\nChris quickly sat down on the couch, staring at the message in disbelief. His face glowed in the aura surrounding the brightly lit screen. A mixture of emotions struggled to find their way to his face. -- Surprise. Excitement. Confusion.\n\n\"Good,\" he sent back, unsure what to say.\n\n\"Yay! NOW you're ready to be my husband...\" he received next. He stared at it for several moments.\n\nAs if reacting with amusement to his silence, a second message popped up.\n\nBrielle had sent a single emoji: a smiling face with devil horns. Its wicked smile perfectly reproduced the one that so often came to her face...\n\n***\n\nIf you enjoyed this fantasy, please consider clicking a star to vote and check out the other April Fools contest submissions! Happy April Fools Day to all!"
    ],
    "authorname": "SolarRay",
    "tags": [
        "drunk",
        "friends",
        "group",
        "humiliation",
        "orgy",
        "party",
        "prank",
        "reluctance",
        "stripper"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/shes-a-wild-one"
}
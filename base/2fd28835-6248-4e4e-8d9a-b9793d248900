{
    "title": "A State of Grace Pt. 05",
    "pages": [
        "Here's Part 5! I once again want to thank my editor, gungurl_300blk, for her time and trouble. How she puts up with my lousy spelling and grammar, I'll never know, but I'm grateful nevertheless. I also want to give all of you readers out there a HUGE thank you! You are the reason I keep writing! As always, those who are interested are encouraged to read the Author's Note at the end of the story. Enjoy! - CM \n\n*****\n\n\"KEVIN!\" I cried, barely able to stop myself from shaking him.\n\nSuddenly, a pair of strong hands gripped me beneath my arms and lifted me away from my brother.\n\n\"NO!\" I screamed, struggling.\n\n\"Stop it, girl!\" came Chris's voice. His tone was commanding; it left me feeling as if I had no choice but to obey. \"Hannah needs room to work!\"\n\nIt was only then that I noticed Hannah kneeling by Kevin's side, examining him. She looked behind me.\n\n\"Britt, hand me the trauma kit! Beth, hold the light for me! Chris, keep a firm hold on her in case she loses it!\"\n\nA chorus of acknowledgments rang out, and I realized the children were behind me as well. A moment later, Hannah's blonde twin girls stepped into my field of view. One of them handed Hannah a large brown backpack that had a paramedic emblem on it. The other girl held a big police-style flashlight, which she switched on and pointed at Kevin's abdomen. \n\nHannah unzipped the backpack, and it opened up to reveal a huge selection of medical implements, vials, and a few IV bags. As I watched, she withdrew a stethoscope and applied it to my brother's chest, stopping to listen in several places. Next, she took his pulse, then she pulled out a blood pressure cuff and used it. After she finished with that, she hit me with a serious look. \n\n\"Gracie, honey, he's passed out,\" she said. \"I know it looks bad, but it's actually a good thing.\" \n\n\"What?\" I asked. \"How so?\"\n\n\"It's one of the ways our bodies deal with high levels of pain and stress, and he had to have really been hurting! Better that he avoid feeling this while he can,\" Hannah explained. \"I won't sugar coat things: Kevin's in a bad way. However, he's not in immediate danger of death. We can take a minute to get some things done here!\"\n\n\"If I let you go, will you stay out of the way?\" Chris asked.\n\n\"Yes,\" I said, quietly.\n\nChris released me, but he stayed close to me just in case. I didn't blame him one little bit. I'm embarrassed to admit that for a moment, I was dangerously close to panic! I watched as Hannah carefully traced her way around Kevin's wounds, frowning in concentration. After a moment, she glanced over at the twin who'd brought her the trauma bag.\n\n\"Bethany, help me turn him on his side, please!\"\n\n\"Yes, Mom!\" she replied, moving to assist her mother.\n\nI couldn't help but note, as I watched them work, that neither child was acting afraid. Showing a strength I wouldn't have guessed she had, Hannah rolled Kevin's limp form onto his side. Bethany supported Kevin's head and made sure he didn't roll completely over. Hannah carefully examined every inch of Kevin's back, even taking his shorts down to look lower. She frowned, apparently not liking what she saw.\n\n\"Damn,\" she said, softly.\n\n\"What?\" I asked, dreading the answer.\n\n\"There are no exit wounds,\" Hannah said. \"With a handgun, that's not all that uncommon. With a rifle, it's practically unheard of! Chris would you-\"\n\nChris was obviously thinking along the same lines. Before his wife had finished her sentence, he had unslung the compact rifle Kevin had taken from one of our attackers, and ejected the magazine. He stared at the ammunition for a moment before looking back up at Hannah.\n\n\"These are frangible rounds, Hannah,\" he said, quietly.\n\nHannah closed her eyes briefly, and winced.\n\n\"Damn!\" she said again, with more emphasis. \n\n\"What...what else is wrong?\" I asked, fearfully.\n\n\"Frangible rounds are bad news,\" Chris said, simply. \"You really don't need to know the details, just please take my word for it.\"\n\nHannah and Bethany gently lowered Kevin back down flat. Hannah then pulled out two of the IV kits and started a line in Kevin's right arm.\n\n\"I'm giving him some blood expanders, and some broad-spectrum antibiotics,\" she said as she worked. \"But, we'll need to be extra careful with moving him.\"\n\nShe handed the IV bags to Bethany, who put away the flashlight so she could hold them up. The child looked down suddenly and frowned. \n\n\"Dad, he's got a pistol!\" she said.\n\n\"Okay, honey,\" Chris replied. \"Go ahead and secure the weapon.\"\n\n\"Yes, Dad,\" she said.\n\nTo my utter astonishment, the little girl reached down, plucked Kevin's pistol out of its holster, and unloaded it with deft, practiced motions! Having unloaded and checked it, she handed the weapon and the magazine to her father. \n\n\"Uh, excuse me for asking, but how old are you girls?\" I asked.\n\n\"We're twelve,\" Bethany said in a matter-of-fact tone.\n\n\"And a half!\" Brittany chimed in.\n\n\"I've never met kids your age that know how to handle firearms and help injured people! I'm very impressed!\" I praised.\n\n\"Mom and Dad have taught us all kinds of stuff!\" Brittany enthused. \"We both like shooting! When I grow up, I want to be a sturgeon!\"\n\nChris stifled a laugh, and Hannah smiled.\n\n\"That's surgeon, honey,\" she said after a moment. \n\n\"I'm gonna be a nurse like Mom and Aunt Jennifer,\" Bethany confided.\n\n\"What do you think about an ambulance?\" Hannah asked Chris softly. \"Medically speaking, we have the time, and the ride would do him less harm.\"\n\nChris sighed and rubbed a hand over his face. \n\n\"I don't think so,\" he said. \"With an ambulance, we'd also get the police. That's especially true when you're talking about gunshot wounds!\" \n\n\"Okay, so why is that a problem?\" Hannah asked.\n\nInstead of speaking, Chris again unslung the compact rifle Kevin had taken. He held it out so Hannah and I could see the left side of the receiver. There, stamped into the metal, were the words \"Military/Law Enforcement Use Only,\" and right below that, \"Property of Highland, IN Police SWAT.\" \n\nMy blood ran cold. I remembered Kevin saying that the HPD Chief's name was on Trent's list of clients, but the true meaning of that fact hadn't really sunk in - until now!\n\n\"My God!\" I whispered, horrified. \"They were cops?\"\n\nChris nodded his head affirmatively. \n\n\"Oh yeah, they were cops,\" he said, firmly. \"I know that clown over there.\"\n\nHe gestured at the body that was sprawled out on the ground nearest to us.\n\n\"I don't know him well, but I do know him. He's the team leader for one of the two SWAT teams the HPD has. He's a member of my gun club. He's also an overbearing as...uh, jerk. Besides the two guys in suits, there were also two uniformed officers that showed up right before all the shooting started, although you might not have seen them, Grace,\" he finished.\n\n\"Yes,\" I said, slowly, as I thought back. \"I do remember seeing them, actually.\"\n\nHannah gazed at her husband, deeply alarmed.\n\n\"But, the hospital is always full of police, too!\" she said. \"If we can't trust them, how...\"\n\nShe broke off her sentence and sat back on her haunches. She looked back and forth between me, Chris, and Kevin.\n\n\"He's going to need surgery to get the bullets fragments out and to repair any damage to his internal organs. Otherwise, he might contract peritonitis, or even worse,\" she said. \"There's no avoiding that! We'll need a surgeon and an operating room.\" \n\n\"You can't do it?\" I asked.\n\n\"No,\" she said, flatly. \"I can stitch small wounds, but this kind of thing requires a bona fide surgeon.\"\n\n\"Then we have no choice,\" I said. \"Call an ambulance, then get yourselves out of here. You have a family to protect, and you've already done more for us than I could ever repay you for!\"\n\nNeither Chris nor Hannah moved a muscle.\n\n\"Go on!\" I urged them. \"You have a family to protect! I'm not going to have you risk yourselves or your kids for me and Kevin! That's not right! Just let me borrow your cell phone long enough to call 911!\"\n\n\"Mom, Dad, I don't wanna leave them,\" Brittany said.\n\n\"Me either,\" Bethany echoed. \"It isn't right! They're in bad trouble, and we can help!\"\n\n\"For better or for worse, we're already involved up to our noses, anyway,\" Chris stated. \"We were in the park when that Charger pulled in, and I'm pretty sure they ran our plates. When the shooting started, they knew we hadn't left, so they knew there were potential witnesses close at hand. They knew we'd all seen their faces. They opened fire anyway!\"\n\nChris shared a look with his wife, then looked steadily at me.\n\n\"I'm pretty sure you can put those facts together and figure out what they mean for yourself.\"\n\nHe was right, of course. There could only be one reason they weren't worried about witnesses, and that would be because they planned to take care of the problem before they left. Of course, they never planned on there being any resistance to their murder plot! The thought of murdering a whole family wouldn't bother people like them in the least; not if it meant they had a chance of staying out of prison! \n\nHannah and Chris shared another look; the silent communication between the two of them was of a kind you only see in couples who've been together for a long time, or who have a very strong bond with one another. The moment they reached a decision was obvious.\n\n\"I'll go get the truck,\" Chris said.\n\nHe looked at me and held out the rifle. \n\n\"Do you know how to use one of these?\" he asked.\n\n\"Kevin tried to show me how to use his AR-15 a couple of times, but I'm more comfortable with a handgun,\" I told him, and showed him my Smith & Wesson Shield that still rode in its holster. \n\nHe nodded his head, silently thanking me for my honesty. Then to my surprise, he turned and handed the rifle to Brittany, who took it and cradled it expertly.\n\n\"You have the overwatch duty, Britt,\" he said quietly. \"When I come back with the truck, I'll let you know it's clear by blinking the lights twice. If I don't do that, you'll know something is wrong, and that you need to run. If you absolutely have to shoot, keep it on semi-auto only. Understood?\"\n\n\"Yes, Daddy!\" she said.\n\n\"Off you go, then,\" he said. \"I love you - all of you!\"\n\nBrittany touched her father's hand lovingly, then dashed off into the treeline and started climbing a sturdy old oak. When I turned back to look at Chris, he was already moving rapidly away from us, heading toward the entrance to the bike trails.\n\nHannah continued to tend to Kevin while Bethany held up the IV bags.\n\n\"You have a truly amazing family, Hannah. Thank God you were here!\"\n\nShe smiled up at me and shook her head. \n\n\"I'm glad for you and Kevin, but for myself, I wish I'd stayed home!\" she said.\n\nBethany giggled, and I laughed too, in spite of the fear and tension.\n\n\"Yeah, me too!\" I agreed. \n\nI sighed and rubbed a sore spot on my right hip. Hannah saw the motion and looked at me with a frown.\n\n\"Come here for a sec, Grace,\" she said. \n\nI did as she asked. I was startled when she abruptly unfastened my capri pants and tugged the right side down and away from my hip.\n\n\"Hannah? What the-\"\n\n\"Some of this blood is yours, Grace!\" she said, silencing me.\n\nShe took a sterile wipe from her trauma kit and scrubbed around the sore spot. I hissed at the sudden sting. Hannah worked for a few moments, cleaning the area thoroughly with the sterile wipe. She examined me, then her tense facial expression eased.\n\n\"It's just a light scrape,\" she said, as she finished her examination. \n\n\"I fell a couple times on my own, then Kevin knocked me down,\" I said. \"It probably happened then.\"\n\nHannah nodded her head in agreement as she applied some antibiotic ointment to the scrape and covered it with a bandage. As I pulled my capris back up and fastened them, I gazed lovingly down at him. Hannah caught that look.\n\n\"Grace, Kevin is going to make it!\" she said.\n\n\"He covered me with his body when the shooting started,\" I said. \n\nI looked Hannah in the eye, wanting her to understand.\n\n\"He literally put his body between me and all those flying bullets! He knew what was probably going to happen to him, but he did it anyway!\"\n\nI knelt once more by Kevin's side and tenderly caressed his sweet face. \n\n\"What have I done in my life to deserve that kind of love and sacrifice?\" I asked. \"What makes me worth so much to him that he would give everything for me?\"\n\n\"He's gotta love you an awful lot!\" Bethany said. \"I bet he loves you more than anything in the world!\"\n\n\"'Out of the mouths of babes!'\" Hannah paraphrased, grinning at me. \"She's right, you know, Grace. That kind of love isn't really something a person earns. It's something that you're given, and it's the most precious gift you can ever give or receive!\"\n\nThe way Hannah was looking at me, I could tell she knew that Kevin and I were lovers as well as siblings. Chris most likely knew as well, though they'd both refrained from saying anything. \n\n\"The only thing you can do is return that love, freely and unconditionally,\" she said, softly, looking into my very soul with her bright green eyes. \"I know that because I have someone who loves me to the same degree, just as I love him. I recognize that same, unconditional, selfless love between you and Kevin. Never let go of that, Grace, because there is nothing more rare or precious in this world!\" \n\nKevin stirred, and Hannah instantly put a hand on his shoulder to keep him from thrashing around too much and injuring himself further.\n\n\"Grace,\" he whispered, fitfully.\n\n\"I'm here, Love,\" I said, soothingly, stroking his sweaty brow. \"I won't leave you!\"\n\nHe settled down; the physical contact seemed to soothe and relax him. Hannah looked up at the bag of blood expander, noting how much remained. Her lips thinned with concern, but she said nothing. Suddenly, we heard the sound of an approaching vehicle. I turned to see a red 4-door pickup truck coming towards us! It stopped a short distance away. To my relief, the headlights blinked twice. \n\n\"That's the signal!\" Hannah said, her relief plain.\n\nSeconds later, I heard a light thumping sound as Brittany dropped down out of the tree and ran over to us, the rifle held at low-ready. \n\n\"Ready, Mom?\" she asked, not taking her eyes off the truck.\n\n\"Yes,\" Hannah replied.\n\n\"Okay,\" Brittany said and waved one hand over her head. \n\nAt her signal, Chris got out of the truck and approached. Brittany put her weapon on safe and held it out to her father.\n\n\"Keep it secure, for now, Sweetheart,\" he said. \"I'll need to carry Kevin and lift him into the back seat. I want you to ride in the bed of the truck with your sister and the dogs. Once I close the tailgate, break the weapon down and hide it in the toolkit. Understood?\" \n\n\"Yes, Daddy!\" she said.\n\n\"That's my girl!\" he said with a fierce grin. \"Alright, Kevin, let's get you moved. Keep those IV lines straight, Beth!\"\n\n\"Yes, Daddy!\" Bethany said, keeping an eagle eye on the plastic tubing. \n\nChris lifted Kevin into his arms and carried him toward the truck. Bethany kept the drip bags elevated and the lines straight, while Hannah got into the back seat of the truck to help pull Kevin's torso into place. Things went much more smoothly than I thought they would; Kevin was quickly placed on his back on the big bench seat, his head resting in Hannah's lap. Once settled, she took the IV bags from her daughter and hung them from the garment hook. \n\nChris smiled faintly and patted Kevin's leg.\n\n\"You're just about the only guy in the world I'd let put his head in my wife's lap!\" he joked. \"Come on, Grace, you're up front with me.\" \n\nChris hurried to the back, making sure his daughters and the dogs were settled in the bed of the truck, then he closed the tailgate and the door of the cap. Then, he hopped into the driver's seat. I buckled my seatbelt out of habit as he shifted the truck into drive. \n\nChris drove carefully, keeping the truck exactly at the posted speed limit. Strangely, we didn't encounter a single police car until we reached Community Hospital. Once we were there, we saw a lot of them! Chris pulled into a spot at the far edge of the parking lot and parked. He turned in his seat and looked back at Hannah.\n\n\"What do you think, baby?\" he asked.\n\n\"I'd say head for the ER entrance, except...\" her sentence trailed off, and she gestured helplessly at the collection of police cruisers gathered in the lot.\n\n\"Can Kevin hold out for another few minutes?\" I asked Hannah.\n\nShe eyed the level of fluids in the IV bags with unconcealed worry, but she finally nodded her head.\n\n\"Yes, but Gracie, there's a hard limit to how long we have!\" she said, urgently.\n\n\"Okay. I'll need to borrow someone's phone,\" I said.\n\nChris dug into his pocket for a second, then handed me his cell phone. I took it and dialed Crystal's number. \n\n\"Hello?\" came Crystal's voice after several rings.\n\n\"Hey there, girl!\" I said, in bright airy tone. \"No need for you to ask who this is, cause I'm pretty sure you know, right?\"\n\nThe line was silent for a few seconds, then Crystal's voice returned.\n\n\"Well hey there, yourself! I was starting to wonder when I'd hear from you again! So how's it hangin'?\"\n\n\"Normally, I'd say hard as a rock, but unfortunately that isn't the case right now. In fact, things are kind of lame at the moment, and I need some help pretty badly! But, just my luck, the closest place I can get help is just full of bacon, and you know I'm a strict Vegan!\"\n\nThere was silence on the line yet again, lasting somewhat longer this time. When Crystal's voice returned, it was full of real worry.\n\n\"Aww, girl! I'm sorry to hear that! I tell you what, though, I have some friends over here at my place who can help you out. If you like, they could be there pretty quick, and do something about all that bacon!\"\n\n\"I knew you'd come through for me!\" I said. I thought quickly, then noticed the Chevy emblem on the steering wheel. \"You'll find me wearing a red bow tie, out in the boonies. Please hurry, time is really not a friend of mine!\"\n\n\"You've got it, babe! TTFN!\"\n\nThere was a soft click as she disconnected the call. I handed the phone back to Chris and closed my eyes.\n\n\"What was that all about?\" Hannah asked, confused. \"I mean, I know you had to be using some kind of code but was that some kind of Valley Girl crap?\" \n\n\"I was talking to my friend, Crystal,\" I said. \"We don't have any kind of prearranged code, so I had to think on the fly. Still, I'm certain from the way she responded that she understands what's happening. Hopefully, the FBI - the real FBI, I mean - is on the way. When they get here, they'll escort us in.\"\n\n\"Well, since we appear to have a few minutes,\" Chris said, \"How about you tell us what the hell is going on?\"\n\nSo, I proceeded to tell them the whole story. I didn't leave out a single detail, even when it involved Kevin and I being intimate (and the lack of surprise on their faces confirmed my guess that they already knew about us). They were, however, shocked and utterly horrified when I told them about Trent and his 'business dealings.' Hannah looked like she was going to get violently ill. Chris looked like he was going to get violently...well, violent. \n\n\"That's...that's...monstrous!\" Hannah whispered vehemently.\n\n\"Thank God Kevin already killed the bastard,\" Chris growled. \"If he hadn't, I'd do it myself, this very day!\"\n\nI then explained about Crystal calling her contacts in the FBI, and about them sending in a SIRT team. I filled them in on Kevin's suspicions about the cell phone tracking, and then the resulting pursuit and gun battle.\n\n\"What about the bit about finding you in the boonies wearing a red bow tie?\" Hannah asked. She looked a little dazed at everything she'd just been told.\n\n\"Oh...well, I needed to give them a way to find us once they got here,\" I said. \"I figured they'd guess a 'red bow tie out in the boonies' meant a red Chevy at the edge of the parking lot.\"",
        "Chris chuckled lightly.\n\n\"That was pretty clever, for an off-the-cuff code!\" he praised. \"Good going, Grace!\"\n\n\"I wouldn't say it's good going until they get here and find us,\" I said, looking nervously out the windows. \n\nAs things turned out, we didn't have that long to wait! Chris was the first to see them. Three black Suburbans, one silver Suburban, and no less than six Indiana State Police cruisers! They rolled quickly into the parking lot and paused. Chris looked at me and raised an eyebrow in question. I nodded my head. He snorted, reached down, and blinked the truck's lights twice. \n\nInstantly, the whole entourage headed towards us. The State Police cruisers formed a barrier between us and the rest of the lot, while the Suburbans moved in close. As I guessed, Crystal and her 'personal assistant' got out of the silver one, while several men in dark suits got out of the other vehicles. I slowly opened my door, keeping my hands clearly visible.\n\n\"That's her! That's Grace!\" Crystal said.\n\nOne of the unfamiliar men approached me and showed me a small wallet that held a badge and FBI credentials. They sure looked like the real thing to me, but in the interests of full disclosure, I wouldn't have known if they were fakes, anyway.\n\n\"I'm Special Agent Paulson,\" he said.\n\n\"I'm Grace Richmond,\" I said.\n\nI then proceeded to tell him what had happened at the park, making sure that he knew the West family had played a vital role in keeping Kevin alive. I also mentioned that they had witnessed part of the attack. Crystal went dead pale when she heard about Kevin's injuries.\n\n\"No, God, please!\" she whispered, horrified.\n\n\"Alright, I understand the situation,\" Special Agent Paulson said. \n\nHe spoke briefly into a concealed radio mic, then gestured at Chris.\n\n\"Sir, if you will please drive your vehicle to the ER entrance, we will escort you and make sure no one bothers you or your family. We will need to take statements from you before you leave, though.\"\n\nThe next several hours - and days, for that matter - were a frenzy of activity! I would later find out that over half of the officers on the Highland Police Department were suspended, pending charges. Several of them were jailed, and the remainder were made to wear tracking anklets. Of the officers that remained on duty, all were being watched carefully for any sign of wrongdoing. \n\nSimilarly, the County Sheriff's Department had undergone a similar examination. In that case, though, only 6 deputies (including the chief deputy) were suspended, pending charges. Additionally, several very powerful and/or influential members of the community were arrested. \n\nI also found out that our house - well, Aunt Lily's house, really - had been burned down to the ground. It was feared initially that we had been in it at the time, and Crystal and Kayla had been terrified, grieving wrecks, until my phone call. Special Agent Paulson's team found the secret room in the basement, or rather, what was left of it. Unfortunately, the computer was completely destroyed. You can imagine their astonished joy when I calmly reached into Kevin's old rucksack and pulled out his portable hard drive. Of course, I told a little white fib in the process...\n\n\"Trent made backup copies of everything. He was even more paranoid than we thought he was,\" I told them.\n\nPlease understand, I'm not in the habit of lying to Federal Agents - not even a lie of misdirection! But since we'd already been through so much, and I wasn't sure if the fact that Kevin had cloned the hard drive would violate some obscure evidence collection law, I decided on the spot to imply that the backup had been made by Trent. \n\nAll of these things were secondary to me, though. I didn't leave that hospital - not even once! - for the next week. I stayed there, keeping track of Kevin's progress. Nothing else mattered. Not school, not my upcoming exams, nothing!\n\nI waited the long, unbearable hours through his surgery, then his recovery period, until he finally opened his eyes! Fleur and Elizabeth, Chris and Hannah, and Crystal sat with me whenever they could. They were keeping a vigil over me as much as they were Kevin. Mom and Dad came back from Las Vegas. They arrived the evening of the same day Kevin woke up. Grandma and Grandpa, not wanting to crowd us unduly, stayed home.\n\nWhen Kevin's eyes fluttered open at last, I was the first thing he saw (fortunately, Hannah had made arrangements for me to get a shower and some clean clothes. Otherwise, he probably would have passed right back out again!) \n\n\"Grace,\" he said his voice a harsh croak. \n\n\"I'm here, love,\" I said, lovingly, squeezing his hand. \"I'm right here!\"\n\n\"Are you okay?\" he asked.\n\nI giggled a little hysterically. Elizabeth gave me a worried glance, but Fleur rested a calming hand on her shoulder.\n\n\"Kevin, honey, I'm fine!\" I said, wiping a tear from my cheek. \"We're all much more worried about you!\"\n\nKevin grimaced.\n\n\"I feel like I've been shot,\" he muttered. \n\nHe grinned crookedly up and me, and I favored him with a wan smile. He stirred uncomfortably, and I moved quickly to rearrange his pillows.\n\n\"How long was I out of it, and how are...things?\" he asked, tentatively.\n\n\"You were out for about 36 hours or so,\" I told him. \"They deliberately kept you sedated for the first day after your surgery because they needed for you to hold very still. After the first day, they stopped the drugs and left you to wake up on your own.\" \n\nKevin looked down at himself, lifting the sheet so he could see his lower body. After a moment, he looked back up at me with a silent question.\n\n\"There won't be any permanent impairment, love!\" I reassured him. \"The bullets did some soft tissue damage that will hurt like the fires of Hell, for a while, but it will heal. There was no nerve or spinal damage!\"\n\nLooking relieved, he settled back down against his pillows, again.\n\n\"Fortunately for you, you were in excellent physical condition before this happened to you!\" came Hannah's voice from the door.\n\nShe smiled and stepped into the room, crossing over to check Kevin's IV drips, and his vitals. When she finished, she tenderly patted his shoulder.\n\n\"That made a huge difference in how your body dealt with the trauma done to it. It will also help you recover a good deal faster than someone who is more sedentary,\" she told him. \"Speaking of which, you'd better relax while you can, because sometime tomorrow, they're going to make you get up for a little while!\"\n\nKevin groaned, and Hannah chuckled sympathetically.\n\n\"I know, hon, but it really is necessary!\" she said. \"Trust me: if you follow the Doctor's orders and stick with the program, you'll be out of this place before you know it!\" \n\nAfter she finished her work, Hannah stepped across the room to speak with Fleur and Elizabeth, leaving Kevin and I a semblance of privacy. \n\n\"I meant what I said, back in the park, Kevin,\" I said, softly. \"I want a child with you!\"\n\n\"I know you did, Grace,\" he replied. \"I meant my answer, too! If you're truly ready to take that next step, then we'll do it! I want to be a father. I didn't plan on it happening until after I had my degree in hand, but if you truly feel that the time is now, then that's good enough for me!\" \n\nI took his hand in mine and held it against my cheek (I couldn't embrace him because of the drainage tubes stuck in his abdomen.) We stayed like that in loving, companionable quiet for a while, before Fleur and Elizabeth stepped over to the bed. I smiled at them and released Kevin's hand, standing to let them visit for a while.\n\n\"Mon Dieu, you had us worried, Kevin!\" Fleur exclaimed. \n\nElizabeth, her eyes still a little red and damp, nodded her head in wordless agreement. After a few minutes, she spoke.\n\n\"Mom has been up here a couple times to sit with you,\" she said, \"but she had to leave a little bit ago to meet with the insurance claims adjusters. That's why she isn't here.\"\n\nI was about to remind Elizabeth that Kevin didn't know what had happened to the house yet, but Fleur skillfully steered her girlfriend away from the topic. They both chatted with Kevin for a little while, each of them squeezing his hand and reassuring themselves that he would recover. \n\n\"We have a little announcement to make,\" Elizabeth said then, smiling over at Fleur.\n\n\"Oh?\" Kevin asked. \"I could use some happy news! Tell me!\"\n\n\"Well, I'll be telling all of you, since we haven't told anyone else yet. Not even Mom!\"\n\nFleur grinned like a madwoman as Elizabeth extended her left hand and showed us all the beautiful diamond engagement ring she wore!\n\n\"Fleur and I are taking the next step!\" she cried, happily. \"We're getting married!\" \n\n\"Oh!\" I exclaimed, reaching out to take my cousin's hand so I could see her ring.\n\n\"Oh yeah!\" Kevin agreed, bumping fists with Fleur. \"Way to go, you two!\"\n\n\"Congratulations!\" Crystal said, also looking at Liza's ring. \"That ring is stunning, Elizabeth!\"\n\n\"It sure is!\" Hannah agreed.\n\nElizabeth smiled warmly, preening a little under the outpouring of affection. Fleur continued grinning more widely than the Chesire Cat.\n\nThen suddenly, from the doorway, there came the sound of a man clearing his throat. We all turned at the same time to see Special Agent Paulson standing there with two other agents, and a man who looked familiar, but whose name escaped me at the moment. \n\n\"Excuse me, folks, but I need a word with Kevin and Grace,\" Special Agent Paulson said.\n\nI was surprised to see a look of revulsion pass over Hannah's normally compassionate face. I wondered what the FBI agent had done to get on her bad side, but then I realized her sour look had nothing to do with Paulson! It was for the man next to him, the one I faintly recognized. \n\n\"Of course,\" Hannah sighed. \"I'll be back in a little while, Kevin.\"\n\nShe squeezed his hand, touched my arm gently, and then withdrew. Special Agent Paulson glanced around the room. Paulson looked expectantly at Fleur and Elizabeth, who hadn't moved a muscle.\n\n\"Uh, ladies, we need the room, please.\"\n\nThe words were spoken politely enough, but no one would ever mistake them for a request. Fleur and Elizabeth (Fleur especially) looked rebellious, but when it became clear that Paulson was serious, they got to their feet.\n\n\"We will return soon, mon frere,\" Fleur said, gently kissing Kevin's cheek.\n\n\"You'd better,\" Kevin said weakly. \"I seem to get into trouble every time you leave!\"\n\nFleur surprised us all with a giggle! I've never heard one from her before! She shook her head ruefully at Kevin.\n\n\"Oui, certainment, Kevin!\"\n\nElizabeth also kissed Kevin's cheek, then the two of them stepped out. Crystal, however, kept her seat. Mr. Andrews kept his place next to her, his suit jacket unbuttoned and his hands folded across his belt buckle. It was a relaxed-looking pose, but I'd had enough experience by now to realize he was anything but relaxed. He was a quiet, unassuming man, Mr. Andrews was. But in spite of that, he projected the aura of a man holding the leash of a vicious dog, needing only the least little excuse to turn it loose. \n\nPaulson eyed the two of them, clearly thinking of asking them to leave as well. More than Mr. Andrews' presence at her back, the briefcase Crystal held in her lap seemed to convince the Agent not to try to remove her. \n\n\"Mr. Richmond, we haven't met yet. I'm Special Agent Paulson, FBI,\" Paulson said, holding up his credentials where Kevin could see them.\n\n\"Special Agent Paulson,\" Kevin acknowledged with a polite nod. \"Please, call me Kevin.\"\n\n\"Thank you, Kevin,\" he replied, with a polite smile. \"In that case, call me John.\"\n\nJohn gestured at the man who was vaguely familiar to me, and I felt another surge of irritation that I couldn't recall his name.\n\n\"This is-\"\n\n\"Terence Segan the Third, senior partner in the law firm of Segan, Ferrell, and Hughes,\" Kevin interrupted him. \"And until very recently, a hopeful candidate for the District Attorney's slot, unless my memory fails me.\"\n\nKevin favored Segan with a smile colder than dry ice. \n\n\"I believe Grace and I also know Matthew, the eldest of your two children,\" he said.\n\nOnce again, my blood turned to ice water in my veins. That's why I recognized him! I had met Matt's father on only two occasions. Both times, the man had been in a hurry and hadn't cared who his son was socializing with at the moment. \n\n\"I would ask why the younger Mr. Segan isn't here to visit as well, but I understand he's been detained with more pressing matters!\" Kevin said, maliciously.\n\nMr. Segan's face darkened with anger, but he glanced at the two FBI agents at his back and reluctantly abandoned the idea of retaliating...for now, at least. \n\n\"Interestingly enough, again if memory serves, you were the attorney that represented my cousin Jack a few years ago,\" Kevin continued. \"Fine job, that! I do think it's a little odd that the senior partner of one of the state's most prestigious law firms would personally take a case like that in the first place. That's not to mention the fact that you lost rather spectacularly! It makes one ask some rather interesting - and pointed - questions about you, doesn't it?\" \n\n\"You certainly make some interesting points, Mr. Richmond!\" Segan replied in an oily tone. \"Unlike me, you'll at least find a warm welcome when you leave here. You may even find the home fires still burning!\"\n\nHe delivered this last bit with an evil glare. Since I hadn't had time to fill Kevin in on all that had happened, though, his jab didn't have the effect he'd desired. Paulson, on the other hand, was less than amused.\n\n\"If you still want this plea deal, I strongly suggest that you keep your mouth shut until someone asks you a question! Got it?\" \n\n\"Of course, Special Agent Paulson,\" he replied, quietly. \n\nI was hit with a rush of anger! This bastard had worked out a plea deal! That Motherfucker! More than anything, I wanted to reach for his throat! I guess it was a good thing that hospital security had made me lock up my pistol. There was real chance that if I'd had it at that moment...well...\n\nKevin looked just as upset as I was. Crystal's face was cool and professional, but her eyes met mine, and in those eyes, I saw compassion. There was also just the barest hint of a bitter 'I told you so' expression. Well, she was entitled to it if anyone was. After all, she'd warned us this would happen. But why, why did it have to be this oily, slimy snake! \n\n\"Mr. Segan here has agreed to testify against his fellow conspirators in return for special consideration,\" John Paulson said, nailing Segan with a stern look. \"He's already provided some very helpful information and steered us towards some victims we hadn't known about. Also thanks to him, we've been able to set the wheels in motion to get your cousin, Jack, released from prison.\" \n\n\"Which is a better deal than my son got!\" Segan sneered angrily. \n\nPaulson gave him a quelling look, and one of the other agents casually rested a hand on the attorney's shoulder. \n\n\"Your son is not the issue here, Mr. Segan,\" Paulson said, his tone even colder than Kevin's had been. \"He decided to follow in his father's footsteps, and it ended badly for him. Unfortunately for him, he doesn't know anything I'm willing to bargain for. Oh well, you've heard the old saw about having to break eggs to make omelets, and whatnot. Cope with it!\" \n\nPaulson returned his attention to Kevin and me. \n\n\"In spite of the fact that the house fire destroyed your Uncle's computer, Miss Edwards was able to recover a perfect clone of his hard drive. She was also, through her own resources, able to uncover a great deal of valuable information from the dark web. With all that, plus the testimony of Mr. Segan, we have enough to nail the whole lot of these bastards to the wall!\"\n\n\"House fire?\" Kevin asked, with a blank look on his face.\n\n\"Uh,\" Paulson began, haltingly, \"Has no one discussed this with you?\"\n\n\"I've only been awake for a couple of hours, now, John,\" Kevin said.\n\n\"Oh, I see,\" Paulson said, uncertainly. \"In that case, I'm sorry to inform you that, at some time during the afternoon of your trip to the park, the house where you were living was burned down to the foundation.\"\n\nHe gave an awkward, uncomfortable gesture of sorrow.\n\n\"It was the clearest case of arson my team has ever seen. The perpetrators did it in broad daylight and used two different kinds of accelerant. I'm afraid there's nothing left of the structure itself, or your car, which was in the garage. Your safe survived, though. Your cousin is storing it for you.\" \n\nPaulson gave us a wry smile and shook his head. \n\n\"I'll bet if you take some pictures and send them in, the folks at Liberty Safes will pay you to use them for an advertising spread!\"\n\nKevin chuckled, and I smiled too. Then, Kevin shrugged.\n\n\"In the end, it's all just stuff, and stuff can be replaced,\" he replied. \"My family is alive, Jack is getting released from prison, and I'm being told that I'll make a full recovery. You guys are here, taking care of business. All things considered, things could be so much worse! I don't have a liquor license, so I won't give my whine!\" \n\nPaulson chuckled, shaking his head again. Kevin reached out and took my hand, looking into my eyes, not caring who else was in the room.\n\n\"This,\" he said, looking at me, \"Is what truly matters!\"\n\nPaulson cleared his throat, looking uncomfortable. Segan sneered nastily, and Crystal smiled sweetly at us. \n\n\"Yes,\" Paulson said, gruffly. \"Yes, well, I'm glad you have that attitude, Kevin. It will certainly do you good. I, or one of my agents, will be deposing you sometime tomorrow. Additionally, once the trials begin, you'll be a material witness. Because of that, we were originally going to provide you with a protective detail. However, Miss Edwards has informed me that her company is already providing that service to you, as of yesterday. I know the quality of her people, so I'll leave you in their very capable hands. In the meantime, if you need anything, here's my card.\"\n\nHe handed me a card with his name and contact information.\n\n\"We'll be in touch, folks,\" Paulson said.\n\nThen, with a wave of his hand, he left the room, followed by his agents and his tame 'witness.' A few moments passed, then I sat down next to Kevin. He sighed, still holding my hand. Then he looked at Crystal, his expression curious.\n\n\"'Your company?'\" he asked her. \"What did Paulson mean by that, Crystal?\"\n\nCrystal shrugged self-consciously.\n\n\"Well,\" she said, \"I've had such a good experience having my own protective detail over the years, that I started exploring what it would take to launch another business. It turns out that there are all sorts of people with the necessary skills floating around, looking for work. There are a lot of veterans, not just of the military/Special Forces, but also from the State Department's Diplomatic Protection Group, the Secret Service, and others.\"\n\nCrystal turned and smiled at Mr. Andrews. \n\n\"They know how to be vigilant, and attention to detail is a way of life for many of them,\" she continued. \"I have the means to pay them very well indeed, as well as make sure they attain the necessary state and federal licenses.\"\n\n\"We even have vision and dental!\" Mr. Andrews chipped in, with a rare smile.\n\nCrystal smiled up at him again, before continuing.\n\n\"So, at the tail end of last year, I launched another company, Edwards and Edwards Services,\" she said, proudly. \"So far this quarter, it looks like we'll actually turn a profit our first year! There are lots of people, from famous athletes to actors, to CEOs, who would like someone on their staff who can offer protective services at a reasonable price!\" \n\nCrystal stood up and walked over to us, seating herself in the chair on the other side of Kevin's bed. She tenderly took the hand that wasn't holding mine.",
        "\"You'll never know what I felt when I heard about the fire,\" she said, quietly, tears rolling freely down her cheeks. \"Kayla and I were complete, total wrecks!\"\n\nShe paused to wipe her eyes, before continuing.\n\n\"Then Gracie called me, right out of the blue, and I was so relieved...that is until I heard what she had to say. I had another really bad moment, but I didn't totally lose it until I got the SIRT team out to you! I called the Director over at Edwards and Edwards that very evening and arranged for a detail for you and Kevin. Free of charge to you guys! The FBI agents I work with are good, don't get me wrong, but I trust my own people more. Besides, when I told them about what had been happening here, there were people actually volunteering for the job!\"\n\n\"You're joking!\" Kevin exclaimed.\n\n\"No, actually, she isn't!\" Mr. Andrews said, lightly. \"I'd do it in a split second if I wasn't already committed to protecting Miss Edwards.\" \n\n\"You see?\" Crystal said. \"These people are quite simply some of the best in the world at what they do! Everyone wins! The clients receive the peace of mind of knowing they're protected, my employees get the security of steady work with benefits and excellent compensation, along with the knowledge that the boss is one of them!\" \n\n\"I thought you were the boss?\" I said.\n\nCrystal laughed and smiled. \n\n\"Oh no! I don't know the first thing about running that kind of business!\" she said. \"I'm just the majority shareholder. The boss is the former head of the Secret Service Presidential Detail under President Bush (41). He runs the day to day operations. I do, however, personally make sure the people who work for me are taken care of. Happy employees are dedicated employees. Besides, it's the right thing to do!\" \n\nKevin looked at her with profound respect.\n\n\"Yes, it most certainly is the right thing to do,\" Kevin said, quietly. \"Crystal, I don't know how we can ever repay you for all-\"\n\n\"Don't,\" she said, laying a finger across his lips. \"You two are my family! I have no one else, other than my daughter. When I thought the two of you were dead, it was...\"\n\nHer voice trailed off and she turned her face away from us for a long moment. She composed herself quickly though and continued. \n\n\"I should have made arrangements for you the second I learned just how deep the rot went, but I was complacent. Well, not this time! This time, I'm taking the same precautions with you two that I take with Kayla and me,\" she said, firmly. \n\nShe turned to her bodyguard.\n\n\"Mr. Andrews, would you please ask Mr. Bradshaw and Miss Oreza to step in for a moment?\"\n\n\"Of course, Ma'am,\" he replied with a smile and a respectful nod. \n\nHe spoke briefly into a radio mic hidden beneath his lapel, and a moment later, two people stepped into the room. One was a very fit-looking man, with salt-and-pepper hair and a neatly-trimmed beard. He looked to be in his late 40's, or possibly early 50's. He was around 5'10\" or so, and one could tell he had a well-muscled physique under the charcoal grey business suit he wore.\n\nThe other person was a lovely Hispanic-looking woman. I guessed her to be around Hannah's age (mid 30's). She was also very fit-looking, with short dark hair and the most expressive pair of eyes I've ever seen. She was roughly the same height as me and had a very toned, athletic figure, which was accentuated by the beige pants suit she wore. \n\nBoth of them looked cool, professional, competent, and absolutely deadly! That sense of lethal intent wasn't in the way they dressed. It wasn't in the way they groomed themselves, either. Rather, it was something implied in their stance and carriage. They both projected an unmistakable air of 'do not fuck with,' that would make Mike Tyson take a respectful step back! \n\n\"Grace, Miss Oreza will be your primary Protective Officer,\" Crystal began. \"Kevin, Mr. Bradshaw will be yours.\"\n\nCrystal opened her briefcase and took out a pair of matching heart-shaped pendants. They were nicely made, but fairly ordinary at first glance.\n\n\"Wear these around your necks,\" Crystal said. \"If you need help, squeeze them until the back plate lights up. Help will come running!\"\n\nKevin and I took them and put them on. \n\n\"Excuse me, Miss Edwards,\" Mr. Andrews interjected. \"Your daughter's dentist appointment is in less than 30 minutes.\"\n\n\"Thank you,\" she said. \"Speaking of my daughter, she's really anxious to come up and see you. Would that be okay with you both?\" \n\n\"Oh yes!\" Kevin said, grinning. \"Just be sure she knows to be easy with me. I've had enough soft tissue damage to last me the rest of my life, okay?\"\n\n\"Of course!\" Crystal said, smiling warmly down at him. \n\nShe came around the bed and wrapped me up in a firm embrace. I felt her shoulders quaking just a little bit. I tenderly stroked her hair and squeezed her tightly in return.\n\n\"Ssshhh, it's okay, Crystal! We're fine! We're a family, and we're fine!\" I said, soothingly.\n\nI have known for a while now that Crystal, for all her strength and intelligence, still has some deep vulnerabilities. I was seeing one now - perhaps her greatest one! Her fear of finally being completely on her own, without any connections to anyone else. Kevin too sensed her suffering. \n\n\"Hey,\" he said, gently.\n\nHe took her hand again and squeezed it strongly. \n\n\"Gracie and I are alive, and we are all going to work together to make sure we all stay that way! Alright?\"\n\nCrystal pushed back from me and gave Kevin a watery smile.\n\n\"I know we will,\" she said, softly. \n\nShe shrugged and wiped her eyes. \n\n\"But you guys have to promise me you won't get into any situations like this again!\"\n\n\"Don't worry, Ma'am,\" Miss Oreza piped up. \"We will make sure they don't!\" \n\nCrystal smiled and thanked the two of them. Then she returned her attention to us.\n\n\"I love you both, very, very much!\" she said, quietly.\n\n\"We love you too, Crystal,\" I said quietly.\n\nKevin nodded and smiled his agreement. Crystal then took her leave, with Mr. Andrews quietly accompanying her.\n\n\"We'll give you folks some privacy,\" Mr. Bradshaw said, in a mild tenor voice.\n\n\"Thank you, both, so very much, for keeping watch for us!\" I said, sincerely. \"I'll sleep so much better tonight, knowing you're there.\" \n\nBoth of them offered us genuine smiles.\n\n\"That's what we do, Ma'am,\" Miss Oreza answered for the both of them. \"That's what we do!\"\n\n*****\n\nAuthor's Note:\n\nAfter reading a ton of emails and comments both public and private, I have decided that there are far too many loose ends to tie off in a single chapter...unless I wanted to make it 30 or 40 pages long! I figured most readers are unlikely to sit through a story that long, so I decided to space things out some. Besides, doing it that way will give me the time and the space to resolve some of the 'side issues,' as one commenter referred to them.\n\nThere was another email (unfortunately, I accidentally deleted it, so I can't reply privately) that I wanted to address in particular: When this story arc ends, I fully intend to keep writing about Kevin and Grace! As long as you readers keep telling me you want to hear more, I'll write more! I just feel like I wrote at the end of \"My Saving Grace,\" that the different stages of their lives together should be broken up into their own sort of thematically self-contained units, for want of a better term. I think it keeps things organized if nothing else. Plus as an added bonus, picking titles for new story arcs lets me indulge in a little wordplay, which by now is something you all know I enjoy! \n\nSo, enjoy this chapter! I wish all of you the very best!\n\n- Carbinemaster"
    ],
    "authorname": "carbinemaster",
    "tags": [
        "romance",
        "brother and sister",
        "action",
        "adventure",
        "suspense"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/a-state-of-grace-pt-05"
}
{
    "title": "Jack's Righteous Gig",
    "pages": [
        "Author's Notes:\n\n'Jack's Righteous Gig' is the seventh story in the saga of Jack Danner. Minimal effort is made in this tale to explain the backstory, so it is highly recommended you read the first six stories in the following order:\n\n<ul type=\"disc\"><li>Jack's New Job</li><li>Jack's New Position</li><li>Jack's Daily Grind</li><li>Jack's Wage Slavery Parts 1 &amp; 2</li><li>Jack's Snow Day</li><li>Jack's True Calling</li></ul>\n\nAll characters engaging in sexual relationships or activities are 18 years old or older.\n\n********\n\nJack's Righteous Gig\n\n********\n\nChapter 1\n\nJack tasted the metallic tang of blood as he struggled to slow and calm his breathing. He closed his eyes to ride out the pain in his side. Once he got control over his gasping again, he opened his eyes and risked a glance down at the spot where the pain was centered. The red stain was spreading. Damn.\n\nHe'd been running through the dense jungle since dawn, and so far, he'd managed to avoid capture. Granted, he'd been shot when he raced through an ambush point. They hadn't hit anything vital, so he still had a chance. If he reached the river, he was free.\n\nHe had two teams after him. He'd gotten cocky, thinking his speed would be enough, but one of the teams had that attribute as well. The ambush he'd run through had been theirs. He'd barely managed to escape, and once he got some distance on them, he pushed himself beyond anything he'd done before to stay out ahead. His endurance, while exceptional, couldn't last forever, and they'd just about caught up, trapping him within view of his goal.\n\nTaking a lesson from Gee and Bal, Jack did the unexpected.\n\nHe went up.\n\nNow, despite Jack's human origins, his current anatomy was no longer well suited to climbing around in the canopy of trees. When the Altarian virus altered his DNA, his body changed in strange and wondrous ways to include genetic features of a species more at home running across open grasslands. After the last time these genes activated, Jinnae, his Altarian doctor, dragged him into the hospital and did a head to toe review of the changes he'd undergone. She was concerned that the changes continued to happen when he should have stabilized.\n\nAside from his hair color changing from blond to deepest black, the newest addition was an augmentation of the tendons and ligaments in his feet. It was so subtle the doctor almost missed it. He was just grateful the change hadn't left him with hooves. That said, his modified feet were much better suited to running, so he wasn't going to complain.\n\nWith his long legs, broad chest, strong arms, and his extra-wide neck, which supported a fortified cranium sporting two deadly fourteen inch black horns, he should have been running full out across a savannah, not struggling to push his bulk upwards through dense foliage.\n\nFrom his vantage point in the canopy, he could see both teams now hunting him below, cautiously picking their way through the dense greenery, watching for an ambush. They were almost invisible, but he knew they'd be on him in a flash if he made a sound.\n\nSucking air in slowly, he desperately looked for a means to escape. He was too close to give up now.\n\nHe looked around for something to use as a weapon but quickly realized how stupid that thought was. They were four to his one, these were trained combatants, and his fighting skills were minimal by comparison.\n\nNo, escape was his only option.\n\nLooking below, his adversaries were almost to the river's edge. Jack eased himself forward through the treetop branches, his horns getting caught every few feet. How was he going to get from fifty feet above the ground to the river, which was just forty feet away horizontally? If he climbed down, the moment he left the upper canopy, he'd be visible.\n\nHe realized he was just inches from the top of the leafy layer, so he pushed his head up and cleared the branches. Ahead he could see the gap in the trees caused by the winding river. He wished the canopy surface was firm enough to run across, but that was just fantasy.\n\nHe spotted an odd tree at the river's edge ahead, taller than the others, with its top branches projecting almost horizontally. From the tips of these branches sprouted long vines which hung down to rest atop the surrounding canopy. The vines grew broad leaves in clumps to steal the rays from the other trees. One of the vines was passing close by, so he carefully reached out and pulled it closer. It seemed pretty strong. Bracing himself carefully in the swaying branches, Jack pulled his utility knife from his pocket and discovered the super-tough vine wouldn't cut. He tucked the blade away as he contemplated the vine.\n\nThen he got the craziest idea.\n\nIf it didn't work, he could die.\n\nIf it did, he'd escape and live to see another day.\n\nAs most of his crazy ideas typically failed, he put this one aside as he took another survey of his options.\n\nFive minutes later, he was back to his crazy idea.\n\nCarefully inching his way back down to the bottom of the canopy, he was still forty-five feet from the ground. A potentially fatal distance to fall should he lose his grip. He looked towards the river and saw a gap through the tree trunks he could use.\n\nChanneling his best Johnny Weismuller, Jack unleashed a mighty Tarzan call. The sound seemed to come from everywhere as it bounced off the surrounding trees. He took a two-handed death grip on the vine he'd dragged down through the canopy and leapt out into a gap between the branches.\n\nTime slowed as he burst clear of the leaves hiding him with nothing but open air beneath him. As he plummeted towards the ground, he wondered why he thought this crazy idea would turn out differently.\n\nSuddenly, the vine in his grip tightened as the slack was taken up. He began to move in an arc, accelerating and swinging towards the river.\n\nTree trunks flew past on either side of him, reminding him that his path might end against the side of one of these pillars.\n\nHis weight increased as the pendulum swung closer to the ground, and it was all he could do to hang on.\n\nTree trunks near him took hits as the enemy tried a few wild shots to take him out. By now, he was moving too quickly for their shots to be accurate.\n\nSeconds before his vine reached it, Jack saw the stout branch from the vine tree at the water's edge. He swung in under the branch, but the pendulum's arc ended there, as the vine he clung to curled upwards suddenly, flinging Jack free like the crack of a whip. He was airborne and cartwheeling madly over the river.\n\nHe landed headfirst with a loud smack midway across the river and quickly went deep, but he was so dazed and dizzy he couldn't tell which way was up. He relaxed his body and let a little air out. The bubbles tickled his chin and neck, so he knew he was head down. He paddled himself upright and kicked his way to the surface. The moment he broke through to the air, his collar was grabbed by two hands, and he felt himself being tugged towards the shore. He let his muscles go limp as he was done.\n\nGee and Bal pulled him into the shallow water at the edge of the jungle and looked down at him with almost unreadable expressions.\n\nThere were definitely some emotions he could read.\n\nIncredulous anger. Yeah, that was there. Fear too. The rest flashed by too quickly.\n\nGee finally found her voice. \"What were you thinking? Were you thinking?\"\n\nBal just glowered at him.\n\nJack sighed wearily and smiled up at them. \"I made it to the river, so I won,\" Gee growled and stomped off into the greenery. Bal followed with an angry glance over her shoulder.\n\nJack looked up at the blue sky, and for the first time since the exercise began, he let himself relax and enjoy the scenery. It truly was a gorgeous day in the jungle.\n\nAdina and Zaina suddenly dropped from above into the water on each side of Jack to frantically check him for injuries. Zaina tugged his shirt up to see the angry looking welt on his side where the paintball she'd fired grazed him. The red paint on his shirt was fading in the water, but it looked like it was going to leave a stain.\n\nAdina gently slapped his shoulder. \"You frightened us! First with that crazed roar, then when you fell from the upper branches-\"\n\n\"How did you get up there?\" Zaina blurted, interrupting her sister. \"There are no lower branches on any of the trees this close to the river!\"\n\nJack looked over his shoulder back at the trees and was surprised to see she was right. Aside from a few sparse branches on the vine tree, none of the other trees had any lower branches, just tall, smooth-barked trunks. He'd have had no luck in climbing down from the canopy at all.\n\n\"Huh. Well, I found a tree much further back which I could climb, then I stayed in the canopy to make my way closer. I knew you guys were about to catch me, so the only place I could go where you might not see me was up.\"\n\nGee burst out of the jungle to glare down at him from the shore. \"So you admit you had no idea there was no reasonable way back down to the ground when you climbed up there!\" She'd been close by, listening in.\n\nJack sat up with a sigh and turned to face Gee. He untied the black bandana he'd wrapped around his neck to hide the gleam of his slave collar and wiped his face with the wet cloth. \"This morning, you told me I needed to prove I could protect myself while escaping from an abduction. You said I don't take these threats seriously and insisted I treat the test as if it was real. You two were armed with shock sticks, and the twins had paintball guns, so there would be pain for failing. I acted as if my life was on the line. That's what you got. Nothing less than maximum effort.\"\n\nGee held his eyes for a few moments. \"Why didn't you stop when Zaina shot you?\" she asked in a quieter voice.\n\n\"She grazed me. It wouldn't have been a critical injury with a real weapon, so I treated it as such,\" he explained.\n\nBal pushed through the dense grasses. \"What was that horrible scream?\"\n\nJack snorted and drew scowls from the Altarians. He controlled his expression. \"That wasn't a scream. That was a Tarzan yell.\" The two former agents glanced at one another wearily. \"It's from an old Earth story about a man who grew from a baby to an adult living in the jungle, raised by gorillas. When he became an adult, he would make that call to let all the creatures of the Jungle know he was coming. To shake them up.\" He grinned. \"In this case, to confuse and disturb my captors. I'd say it worked.\" Jack stood and climbed out of the river with the twins following him onto the shore.\n\nBal stepped right up to glare up at his face. \"We were disturbed because of your falling from the treetops while screaming!\"\n\nJack reached out to pull Bal and Gee against his chest. He kissed their heads as they struggled to free themselves. He knew they could easily break free, but they were going through the motions. They needed the assurance of his hug to settle their nerves.\n\nThe moment Jack released the Altarians, they stepped back, and Adina and Zaina were in their place getting hugs as well.\n\nWhen everyone settled down, Jack turned to each of them. \"My apologies for frightening you. This exercise was very intense. It was almost guaranteed to create some stressful situations. Thank you for your honest efforts today.\" He received reluctant nods from the group.\n\n\"Was it fun?\" Zaina asked, pointing to the vine.\n\nJack smiled at the young female. \"I was too frightened to enjoy it.\"\n\nHe looked to the Altarians. \"Do either of you have any water?\"\n\nGee handed him a small squeeze bottle. Jack raised an eyebrow at the minimal amount of water they carried. Still, it would do.\n\nHe poured some water in his mouth, swirled it around, and spat out the bloody water. He instantly had Bal tilting his head down while Gee opened his jaw and peered in his mouth intensely. She relaxed and gestured for Bal to release him, which she did.\n\n\"What the hell?!?\" Jack barked.\n\n\"When did you cut the inside of your cheek?\" Gee asked calmly.\n\nHe scowled at her. \"I fell while running. Tripped on a root, hit the ground, and bit it.\"\n\nThey nodded, and Gee pulled out a comm. She called in the transport to pick them up. It would be there in fifteen minutes.\n\nJack finished the water and handed the squeeze bottle back. Gee tucked it away in an inner pocket. As she walked away, he settled himself down on the grass with his back against a tree and relaxed.\n\nHe'd been living on Chuuruthia with his family for twelve years. The planet had been a haven for the Danners, especially the children. The education they received at the schools was second to none, the class environment was exceptionally civil, and they'd made many friends.\n\nThe only one with travel restrictions on Altaria was Jack, so the rest of the family got to visit and stay overnight with their family there. Mostly though, they spent their time on Chuuruthia.\n\nThe twins were eighteen now and as tall as Gee and Bal, taller than their mother. They'd reached adult height and were in peak physical condition. While Gee and Bal continued to train them, they'd surpassed their teachers in strength and speed. The masters were very pleased with their students, though right now, Zaina was getting a talking to for her attempt to shoot Jack during his swing to freedom. Jack knew better than to interfere and pretended not to hear.\n\nHe was incredibly proud of them as he was with his other children.\n\nOf course, living in a house with a bunch of teenagers had its challenges.\n\nThe twins weren't too much trouble except when Doug got home from Altaria, where he apprenticed at the Embassy working with his 'Auntie' Karrel. She'd switched from Trade Commissioner to Ambassador when Jack had been forced to leave the position... and the world.\n\nThe use of the term 'Auntie' came from Jack as Altarians didn't use such relationship terms. Karrel found it mildly annoying yet amusing, so even a serious boy like Doug liked to use it, from time to time.\n\nAt the end of each day, Doug would meet his mother, Aaros, and sister Zoe at the Gate Terminal on Altaria to come home to Chuuruthia, where they lived with Jack in his large mansion atop the hill. Or inside the hilltop as that's how the Chuuruthian's built their homes, integrated with nature, not dominating it.\n\nAaros and Jack's daughter, Zoe, who was now 12, shared her brother's unique black and white coloring but in broader stripes, so the twins weren't as dazzled. She attended school on Altaria to make it easier for her mom to drop her off and pick her up each day on her way to and from work. They were very close.\n\nThe twins eagerly awaited Doug's arrival as both were more than a little infatuated with him. Truth be told, he seemed rather fond of them as well. Jack, SennLann, and Aaros were keeping a close eye on the three.\n\nEmily, Diana and Jack's daughter, was proving she'd inherited her mother's beauty and body shape. Her long blonde locks came from her father's original hair color, and his height may have assisted her growth. At six-foot, she towered over her Chuuruthian friends and her siblings.\n\nExcept for Joseph, the boy Jack and Eve rescued from the Allsa Komanae home planet. He was growing into his biological father's height, and they expected in the next couple of years he'd shoot up a few more inches to slip past Emily.\n\nWhere his blonde sister had discovered an affinity for music, singing like an angel and pulling the most beautiful tones from instrument after instrument, Joseph liked to dye his hair black to match Jack's new coloring and had an artist's soul. He'd gone through a phase where he constantly painted, producing work after work, which Eve had shown in galleries on Chuuruthia, Altaria, and even Earth.\n\nThese days Joseph was working with the medium of glass, and his pieces were in high demand. The work made him happy, so Jack and Eve were thrilled.\n\nEmily and Joseph had an affinity as the only human children in the family and were very close.\n\nNot all of his kids were currently living on Chuuruthia with Jack. Some only came to visit now.\n\nKarrel's Alexander was nineteen and back living with his mom on Altaria. He worked at a law firm, studying to be a lawyer. His goal was to modernize some antiquated laws like the one that kept his father from visiting Altaria for more than a few hours. Brief weekend visits to see Alex and his sister, twelve-year-old Rebecca, wasn't enough.\n\nElissa's son Maximilian was 19, and daughter Gwendolyn was 18. Both moved back to Altaria, and their mother's home, after their schooling. They now involved themselves in the family business, Royal business.\n\nMax was a broad-shouldered, barrel-chested prime specimen of male Altarian. With his horns and royal dynasty, he was highly sought after by Altarian females. Thankfully, he didn't let this popularity go to his head. If anything, he was a little too oblivious to their attention.\n\nGwendolyn was working closely with her mother and showed signs of the Queen's calm, even temperament. Wisdom would come with time and experience.\n\nLeffera's firstborn, Lillian, was now 19 and training to be a doctor on Altaria. She was dedicating her life towards finding a cure to the chronic condition her mother suffered after the birth of Lillian's brother, Benjamin, who was now 12.\n\nLeffera and Benjamin lived with Jack. Following in his sibling's hoof prints, Ben attended school on Chuuruthia.\n\nWhile not immediately life-threatening, Leffera's condition caused her mental and physical lethargy. Jack discovered that he could temporarily alleviate the symptoms with a few nights of cuddling and a little frisky-time. He understood he wasn't a cure, and he was only one man. There were thousands of females who suffered from this thankfully rare postpartum ailment. He'd been able to help stabilize her condition for the past twelve years, but she wasn't getting better.\n\nTheir ride interrupted his thoughts as it arrived with a whooshing sound as it finally swooped in over the trees and dropped down to hover at the water's edge. Adina and Zaina jumped into the vehicle and quickly moved into the rear seat. Jack followed them in with Gee and Bal bringing up the rear. The Altarians settled on the bench seat next to Jack as the vehicle rose back into the sky to fly them home.\n\nJack felt Gee gently leaning against his arm, so he lifted it over the back of the seat so she could cuddle against his right side. Then, with his right hand, he reached over and began massaging the muscles at the base of Bal's neck. He heard her sigh with pleasure, and her muscles began to loosen.\n\nHe struggled to keep the smile from his lips. Even after all these years, these two preferred to hide their emotional connection with him.\n\nIt made these little private moments that much more intimate and special.\n\nChapter 2\n\nCallosephia was a hot, desert world with its drinkable water hidden deep underground. A few salty seas covered small areas of the surface, but the rest was sand. This desert surface wasn't suitable for Altarians, and most Altarian citizens would have been in favor of abandoning it... except for who wanted it.\n\nThe planet was well within Altarian space and a significant distance from the border of their aggressive neighbor, the Sanosians. Truthfully, the desert-dwelling race would have made better use of the planet, but due to its location, the Altarian's had no choice but to set up a colony to protect their claim.\n\nThe Sanosians made no effort to hide the fact that they coveted the planet. To them, from space, it looked like a glass orb of swirling colors, each representing a separate and distinct type of sand. They'd tried, again and again, to convince the grass eaters to hand over the planet, but the Altarians always refused.",
        "The members of the initial Altarian colony looked for some way to find value in the planet to justify the cost of their living there. It was a geologist who discovered the world had a remarkable quantity of sand types in very pure states. She was also an artist and found the quality of the silica sand was perfect for creating the most exquisite art pieces and durable industrial glass. Processing plants were designed on Altaria, then the components for them were manufactured on several Altarian colonies and shipped piece by piece through the Cargo Gates to be assembled on Callosephia.\n\nOnce the plants went into production mode, they ingested the raw sand and filtered it into its base components. This process created some of the finest colored silica sands available. As an export product, it became highly sought after by artists and designers of high-end architectural projects. There was even a group on Earth that began importing it for their Sand Mandalas.\n\nOver the subsequent years, the Sanosians continued to try to find ways to make the Altarians let them inhabit the planet. They'd even requested permission to set up vacation resorts on the world of sand, but a particular human diplomat working for the Altarians thwarted that toehold by rejecting the request.\n\nLarrisha had been the colony leader for almost fifty years, and next year, she'd be moving back to Altaria to retire in comfort in a little bungalow overlooking the ocean... or a lake. She wasn't fussy as long as it wasn't an endless expanse of sand. The next phase of her life had to include water and lots of it. She was old and tired, but generally happy. Her time on Callosephia had been good, with only the smallest of disturbances by the Sanosians.\n\nUntil today.\n\nJessa, her second in command and the Colony's next leader, was leaning on her desk, pointing to the dot on her screen as it approached the planet. They had an unwelcome guest looking to make an unscheduled and unsolicited stop on their world. Larrisha already sent notice to Altaria. There was no response from the ship, but its transponder indicated it was an automated Sanosian commercial shipping transport. None of the members of that race would be on board as the Gate Network members would see that as a prelude to invasion.\n\nThe second in command was almost a polar opposite of Larrisha. She was young, passionate, fit, and energetic. She also had light, cream-colored fur that matched the color of the local sand. Larrisha's darker fur made her easier to see, so she teased her second in command that leaders needed to be seen as well as heard. To combat this, Jessa wore the brightest, most garish color gowns she could get her hands on.\n\nThe Altarian Queen's office notified them that they'd contacted the Sanosians and learned that the incoming freighter had drifted off course, and they weren't able to regain control. It was supposedly carrying livestock in stasis containers, food for the Sanosians. They claimed the ship would break apart and burn up in the atmosphere. They'd reportedly already jettisoned the engine core of the vessel so it would be on battery power until it hit the upper atmosphere.\n\nAs they didn't have any Altarian security officers on the planet, Larrisha and Jessa would be taking a skimmer out to a safe vantage point to ensure nothing made it to the surface. They were leaving Milli, the office coordinator, in charge until they got back. They'd remain in touch with her while they were in the field.\n\nThe ship was a large one, and since they'd prematurely ejected the engine core, they were no longer able to use its energy to blow the ship into smaller bits, which would burn up quickly in the atmosphere.\n\nIt was beginning to become apparent the Sanosians intended to have the ship reach the surface in one piece.\n\nOnce they had a fix on exactly where it would fall, Larrisha and Jessa boarded the small two-person skimmer. Jessa flew it out over the desert dunes in the direction of a long stony ridgeline which overlooked the future crash site. Larrisha prepared her camera to catch the evidence. She was highly suspicious of how their reptilian neighbors were handling this.\n\nThe crash site was a reasonable distance from the colony but still closer than Larrisha was comfortable with.\n\nSpeaking of comfort, Jessa flew the skimmer uncomfortably fast for the leader, but she trusted the younger female's superior skills.\n\nEven with the excessive speed, it took some time to reach the ridge overlooking the distant valley where the ship would come down. They'd be able to see the debris land from here safely.\n\nLarrisha aimed her camera at the coordinates where the incoming debris would begin to show. A minute crept by then two.\n\n\"Did we get the coordinates, right?\" she asked Jessa.\n\nJessa was already contacting Milli, and her expression was grim. She looked up sharply, so Larrisha followed her gaze and gasped, seeing a dark shape begin to fill the sky above.\n\nSuddenly, she was thrown back against her seat. Safety straps shot around her body to keep her in her chair as supports inflated on the headrest. Jessa pushed the throttle on the skimmer past the safety zone as she desperately tried to put some distance between them and the dropping ship.\n\n\"It's coming down whole? Is that a controlled descent?\" Larrisha shouted to Jessa above the screaming sound of the skimmer's redlined engine.\n\nJessa yelled her answer back. \"Milli said it changed from freefall into a partially controlled descent as we approached the ridgeline.\" They jerked to the left and dropped into a shallow notch racing down the slope at breakneck speed. \"Main engines are offline- it's using auxiliary engines to slow its descent. Not meant for use in gravity- only docking maneuvers!\" The skimmer shot out of the notch to race forward along the floor of the valley. She risked a glance upwards. \"Ship's venting gas, a lot of it- to keep it level and slow it down maybe? It seems to be... tracking us!\"\n\nLarrisha slammed against her harness as Jessa jerked the vehicle to the left to avoid a large chunk of metal, which broke free from the ship above and fell to the sand before them. Then they were shooting forward again. The colony leader looked upwards once more and couldn't help but compare the ship to an enormous foot trying to stomp them flat. She watched its movements and saw its sudden shift to the left as the massive oblong shape began to fracture from the stresses of dealing with gravity for the first time.\n\n\"RIGHT!\" she screamed and slammed into her harness once more as Jessa veered the skimmer to the right. The massive shadow descended faster and faster. Then it was behind them as a deafening explosion of noise, sand, and wind struck the skimmer from behind and tossed it, spinning wildly, into the sky.\n\nWhen Larrisha regained consciousness everything hurt, but the pain in her left ankle was incredibly sharp and intense. She opened her eyes and saw she was upside down dangling from her seat harness. The bubble roof of the skimmer was gone, and the nose of the vehicle was buried in the sand.\n\nHer legs were dangling down to rest on the sand, but her left one was disappearing into a toothy maw rising from below. She screamed as it suddenly bit down and crunched through the bone.\n\nAnd her hoof was gone.\n\nJessa hit the release on her harness and dropped out of her seat onto the sand, screaming in rage as she drove a jagged piece of metal where the mouth had been. The sand erupted as something underneath thrashed, squealed in pain, and splashed a pink liquid on the ground around them. Then it went still.\n\nLooking at the expression of horror on Larrisha's face, Jessa quickly reached into the storage behind the seat and pulled out an active bandage pack. She pressed it over the ragged stump of the older female's left leg and activated it. The covering wrapped around her wound and immediately gushed foam over the end of the leg. This would numb the nerves and seal the severed blood vessels.\n\nShe looked to her senior officer but saw she'd passed out once more. Immediate crisis over, she grabbed her comm and tried to reach Milli, but there was too much electrical interference from the wreckage of the ship behind them.\n\nWhatever that thing was that came out of the sand to attack Larrisha, it wasn't native to Callosephia, so that meant it came from the ship. A ship that was supposed to have Sanosian livestock in stasis. The creatures were clearly no longer in that state! They were under the sand, and they ate Altarians!\n\nJessa unbelted Larrisha and carried her out from under the skimmer. The area around them was littered with big chunks of the shattered transport ship.\n\nHearing a hissing sound behind them, Jessa jumped onto one of the metal plates and avoided having her ankles bitten off. Luckily, the beasts didn't like leaving the sand.\n\nThen she saw tentacles reach tentatively out of the sand to touch the metal surface as if hunting for them. Carrying Larrisha over her shoulder was beginning to wear her out. She couldn't put her down as she'd likely get dragged onto the sand. A sob slipped out as she looked at the moving sands and realized the number of creatures hiding just under the surface.\n\nBright flashes lit up the area around her as the sand exploded with writhing and flailing limbs. Then it went quiet.\n\nJessa looked up at the top of a dune and saw four black-furred Altarian security officers, two driving two-seat skimmers like hers and two on single-rider vehicles gliding down towards her. One two-seater pulled up next to her, and she gently laid the colony leader on the seat and strapped her down. The skimmer moved away as the second one glided closer to pick her up.\n\nShe made it stop next to her destroyed vehicle so she could reach out to collect Larrisha's camera, which was resting on the sand. For just a moment, she worried about something biting her hand. Then they were on their way back to the colony.\n\nJessa scanned through the video on the camera and saw Larrisha had captured the ship's course changes to catch them. Proof the destroyed transport wasn't in freefall.\n\nShe leaned back against the seat and closed her eyes. She was only beginning her term on Callosephia.\n\nShe prayed this was as exciting as it would get.\n\nChapter 3\n\nRikki-Tikki-Tavi emerged from the mirrored surface of the Gate into the cold vacuum of space. This wasn't a surprise or reason for alarm. As a first contact expedition leader, it often set the location for the first Gate high above a newly discovered planet's surface. As a Tik, the conditions of space were no danger to the mechanical being. As long as it was near a body with a gravitational field, any Tik could propel itself with ease.\n\nThe planet below was a gas giant detected at the far extent of the Allsa Komanae's region of space. The nearby supergiant star was beginning to threaten the world. Rikki had come with his team to determine if any sentient life forms inhabited the gas giant and could be saved.\n\nRikki's other teammates came through the Gate and gathered around the leader as the Gate closed. The team had two seniors and ten newly instantiated Tik. Shiny and free of any dents, scratches, or marks, these younglings were eager for life experiences. For most, this would be their first.\n\nThe star threw off an abundance of free power, so they were in no danger of running out of energy. Rikki sent a data spurt to the gathered Tik to take up positions and begin passive scanning for any unnatural energy output from the planet's surface, searching for signs of intelligent life. Only after a complete survey could they begin active scanning.\n\nRikki's second in command was Tootie, who'd done three previous missions with Rikki. They took their position at one third and two thirds the distance between the poles and the remaining Tik spread out in a line top to bottom. They'd be able to read the entire planet in a few passes around. The Tik at the equator set the pace, which meant the Tik at the poles went much slower. This led to boredom, which meant it was up to Rikki and Tootie to keep their minds on the task and feed their insatiable curiosity. It wasn't long before the questions began and they always started the same way.\n\nThe Tik were all connected by line of sight tight beams to not pollute their readings from the planet. This connection allowed them to communicate and share data feeds. The brief lags in the signal let Rikki and Tootie identify the speaking Tik.\n\n\"Rikki-Tikki-Tavi, how did you get such a complex name?\"\n\nRikki was ready for the question. It wasn't surprising to it that the Tik at the northern pole asked it. Its path was slow, and there was a lot of magnetic interference making its ability to take readings almost impossible. The southern pole was calmer for some reason.\n\n\"8809, I was given the name by a youngling from the human race. She was living on Sheega's World out in the Orellian territories.\"\n\n\"Humans live with Orellians?\" a voice asked incredulously.\n\nRikki recognized that was their southern pole reading Tik.\n\n\"Yes, 3334. Humans with the will to explore the Gate Worlds are less xenophobic than the majority of the species on their homeworld. Now back to my story. The young female was in a hospital recovering from an explosion that took her parents from her. All she managed to save from their dwelling was an ancient book of stories. Before the accident, her parents would read from the book to help her get to sleep, but now they were gone.\"\n\n\"Could she not read the stories to herself?\" 3334 asked.\n\n\"She was very young, but she'd had lessons and knew how to read. Unfortunately, her injuries took her ability to see. I learned how to hold the book, and I read stories from it to her at night. She was right; it did help her sleep. I managed to contact a Chuuruthian surgeon who specialized in optic nerve regeneration. She came to Sheega's World-\"\n\nTootie interrupted this time. \"A Chuuruthian on an Orellian world?!? She wouldn't survive their rough treatment!\"\n\n\"I didn't say she traveled there alone! She was escorted by a huge, scarred hybrid male named Grenville McKree and his human female mate Annazelle McKree who had the most remarkable body art. The Orellians seemed nervous around them, so the surgeon was left alone. The couple was very sweet-natured, so I don't understand the Orellian's behavior,\" Rikki said pensively.\n\n\"Did the McKree's give you your name?\" 8809 asked.\n\nThis brought Rikki back to the present. \"No, it was the young female I read to. She used her hands to see me in her mind and said my tentacles reminded her of the cobra snakes in one of the stories I read to her. As I controlled the snakes, I had to be the brave mongoose Rikki-Tikki-Tavi. I was most honored when she named me.\"\n\n\"What happened to the young human female?\" 4003 asked as it rushed around the equator.\n\n\"The McKree's adopted her once the surgeon restored her vision with new artificial eyes. She sent me a picture.\" Rikki shared the image over their link.\n\n\"Ohhh, I like her new eyes! They glow like ours!\" 3334 exclaimed.\n\n\"Rikki- something's strange. InvestigatinggggEEIIIEEEE-\" the signal suddenly stopped from 8809.\n\nRecording their current positions, every Tik changed course to rush up to the north pole to see what happened to 8809.\n\nRikki was surprised to see a flash of sparks emitting from a space of absolute darkness. There was a large object hovering in the northern magnetic pole of the planet. The object's edges were impossible to see against the pure black of space.\n\n8809 was a sparking mess. When it left formation to fly up over the pole, it must have accelerated quickly. The damage to it indicated it collided at high velocity with the dark shape and punched through the surface to get tangled in a highly reflective mesh under the black. All 8809's lights were off. It was dead. Suddenly and cruelly dead.\n\nRikki felt sorry for the new Tik, but this discovery gave it a new duty.\n\nThen it saw 8809's shell slowly pushed outwards. They watched as the black surface gradually repaired itself and gently pushed the dead Tik away from the surface. Tootie reached out a tentacle to pull 8809 to its side.\n\nExtending a tentacle to touch the smooth black surface where 8809 perished, Rikki felt a draw on its energy, so it pulled back. Shining lights on the surface made no difference as the light was absorbed. The only way to determine the scale of the object was to view the gas giant behind it. Rikki had to move farther and farther from the planet until the dark shape was visible before the planet's vast orb as a colossal black cylinder with rounded ends. It was pointing one of those ends directly at the planet's magnetic pole. Rikki wondered at the purpose of such a vast spacecraft if that's what it was.\n\nSummoning the others, Rikki organized a scan of the object with minimal energy. They circled it and slowly made their way down its seemingly featureless surface.\n\n\"Rikki, I've found something,\" 3233 announced, and all of the Tik went to 3233's position. They'd reached the midpoint of the cylinder. Rikki looked to where the new Tik was pointing a tentacle. There was a round plate of a lighter material. Small but visibly different.\n\n\"Based on the location, I believe this may activate an airlock. If it is, I'll take a team inside and attempt to find the purpose of this vehicle, for that's what I believe it is. Tootie, take 1221, 4993, 7272, 9101, and 8809's body. Move to the edge of the horizon. If we do not return in one full cycle, go back through a Gate and make a report.\"\n\n\"Understood.\" It left with 8809 still clutched to its side, and the other four Tik followed without comment. Rikki knew they would have preferred to go inside as well, but the senior Tik made the calls.\n\nOnce Tootie sent an indication they were in place, Rikki had its team move back, and it reached out a tentacle to touch the round plate. Nothing happened, then it noted a softer spot in the center of the plate. It inserted the tip of its tentacle. There was a definite sensation of mechanical movement. After a moment, a larger portion of the outer surface retracted, and an airlock was behind it. Rikki entered, and the five newbie Tik's with him quickly joined their leader. 3334 was closest to the outer door, so it pressed a similar button on the inside of the door to close it. Once it appeared to be sealed, Rikki pressed the button on the inner door. There was no delay this time, and it moved aside. Rikki moved inside and found itself in a wide corridor running in both directions. There were inner airlocks at intervals in the hallway, but all the closer ones were currently open. In the distance, in both directions, he could see the large doors were closed, blocking access to the ends of the ship.\n\n\"The interior is not pressurized. Hard vacuum only. No internal gravity. Minimal energy readings. Some lighting but again, minimal,\" Rikki stated for the record. Tik recorded everything. As long as it survived this mission, what was encountered here would be available to all Tik.\n\n\"Which way should we go?\" 3334 asked. Rikki noted it was the least hesitant to speak up. If that was a positive attribute had yet to be determined.\n\nRikki turned to the group. \"Where do you believe the command center is?\"\n\nThe junior Tik talked between themselves as Rikki waited. It was surprised to see 3334 wasn't dominating the discussion, but when they turned back to their leader, it was 3334 who presented the group's answer.\n\n\"We believe it will be in the center of the ship. This allows it to be close to this doorway and protected in the core of the ship.\" 3334 seemed almost eager to see if they were correct.\n\n\"Let us see if the builders of this vessel agree with your logic. We will need to find a cross corridor leading towards the core of the ship.",
        "\"I see one!\" 4003 blurted and headed off down the corridor towards the front of the ship. A short distance away, there was indeed a cross corridor going towards the center of the cylindrical vessel. Rikki looked further down the hallway they'd been gliding through and got a better view of the formidable-looking airlock door blocking access to the front of the ship. As they wouldn't be investigating the ends of the vessel, hopefully the center would yield some answers.\n\nRikki made them stop at the intersection. \"Tell me if you find anything of interest about the corridors we are traveling through.\"\n\nThe group looked each way and ran measurement scans to see how identical they were. Nothing of interest was registering with the group. Then 2765 reached out a tentacle and ran the tip along the surface of the floor they hovered above. The others looked at it then followed suit.\n\n\"2765, what did you find?\" Rikki asked.\n\nThe shiny Tik glanced at 3334 then faced Rikki. \"It's not smooth. There are definite ridges and valleys on the surface. There is a slight give to the material as well.\"\n\n\"Like sand under the waves at the edge of an ocean. Rippling sands,\" 9898 offered.\n\nRikki paused as it looked at 9898. \"That was lovely. You've been to the beach?\"\n\n\"Yes. I like sand,\" 9898 replied.\n\nRikki could understand that. \"A close match to the texture I recalled as well. Now, why would the floor not be smooth?\" it asked its team next.\n\nThe new Tik conferred once more, and 3334 gave their answer. \"Familiarity? Most lifeforms seem to prefer textures they are most familiar with.\"\n\nRikki contemplated that answer, and it seemed to fall short of explaining the practical aspects of the textured surface.\n\n\"So, its purpose is to make those who travel over its surface feel emotional comfort? Might it have some practical value as well?\" it suggested.\n\nThey conferred once more briefly, then 3334 replied. \"Yes, it probably does, but we don't have enough information regarding the beings to make an accurate guess.\"\n\nRikki indicated its acceptance of their answer, and the group made their way inwards. Rikki extrapolated the sheer size of the ship they were inside and wasn't surprised when they came upon a wide airlock at what had to be the midpoint of the cylindrical vessel.\n\nIt examined the large door and extended a tentacle to touch its surface. It paused as it felt minute vibrations transferred through the surface, potentially indicating activity in the room beyond.\n\n\"An airlock door has closed the corridor behind us!\" 2765 noted.\n\n\"Ahead of us as well!\" 3334 blurted. Gasses began to fill the enclosed section of the corridor.\n\nThen gravity returned.\n\nThe Tik automatically compensated with nothing more than a momentary dip in position.\n\nRikki turned to the group behind it as it moved away from the door quickly. The others responded immediately except 4003, which moved closer to reach out a tentacle to feel the door.\n\n\"First-contact protocol-\" Rikki began, but the large door snapped up into the ceiling showing a bulky being standing in the opening. It was holding something in its hands, which 4003 immediately discovered was a spear as it stabbed deep into the Tik's body. The being's attack unluckily ruptured the Tik's armored energy cell, which unleashed its charge directly back through the shaft of the metallic spear. The corridor lit up with a blue-white flash. The being made a wailing noise as the energy cooked it instantly.\n\n4003 crashed to the floor quite dead, soon followed by the being which flopped loosely to the deck, in a similar condition.\n\nThe Tik froze as they looked closer at the fallen being. It wasn't like any alien race they'd encountered to date, and the Tik maintained an extensive compendium of living and extinct races they'd studied. Every Tik was presented with this knowledge just after their instantiation.\n\nIts head was surrounded by a wide oval hood of muscle which blended into its broad shoulders. Two strong arms suspended from the shoulders on either side of its body, ending with a group of short tentacles for gripping objects, such as a spear.\n\nThe torso slimmed at the waist then seemed to stretch on and on. The far end of this being was still inside the room behind it.\n\nTo top off its surprising appearance, its entire body was covered with iridescent scales in a mottled pattern.\n\nRikki was staring at the two dead sentient beings in the hallway in shock. What a tragic beginning to a first contact event!\n\n\"Rikki-Tikki-Tavi, is this a cobra?\" 3334 asked quietly, reverting to their leader's full name to draw attention to the kismet of their situation.\n\nIt wasn't lost on Rikki that the new being before them did share some strong physical characteristics of Earth's cobras. Still, it was better to ignore that comparison.\n\n\"This is a first-contact protocol situation. I will take point and will attempt to remedy this unfortunate beginning. Be on your best behavior and follow the protocols as my secondaries,\" it sent to the group.\n\nThey waited until they saw the body of the dead alien begin to get tugged back to the other room. Once it was out of view, Rikki extended a tentacle and gripped 4003's shell and pulled it back to the group at the same speed.\n\nA second being moved out into the hallway with a spear in its grip, but this one wasn't pointing the weapon at them. It was just holding it point up.\n\nRikki moved forward slowly with two tentacles extended to a length that matched the being's arms.\n\nIt stood facing the Tik but remained silent as it passed its large eyes over the mechanical life form's body. Finally, it spoke. Its language was a series of soft snaps and clicks.\n\nRikki was thrilled to hear a sample of its language as it would quickly adapt to the translators once they thoroughly analyzed it.\n\nThe Tik leader responded with Universal, the oldest common language the Tik knew, but the being didn't respond.\n\nThen the being shocked Rikki as it spoke with an ancient dialect the Tik never expected to hear again.\n\n\"You Mahrell Drun tools or weapons?\"\n\nRikki made a leap of faith that these beings weren't friends of the extinct race as it hadn't collected friends. It responded with the same, now dead language. \"We are friendly. We are not allies with Mahrell Drun or their descendants, the Allsa Komanae. They are all dead.\"\n\nIts hood flared as the being dropped the point of the spear to a horizontal position, directed at Rikki. \"LIE! Mahrell Drun, not die! Never die unless by our hands!\"\n\nRikki wasn't sure what to make of that, but the Tik was more confident these beings were not allies of the dead race. \"How long you sleep?\" Rikki asked. This question seemed to unsettle the tall being. It spoke over its shoulder, and they waited for a tense period while one of its team members did something out of view.\n\nA second being came into the doorway, but its hood was utterly deflated. It was also not carrying a spear. It spoke quietly to the first, which turned to stare at it. After a moment its hood shrank as well. It turned back to Rikki. \"We sleep long, long time. Far longer than expected. Comparative time unit?\"\n\nRikki was pleased they were entering the advanced stage of first-contact protocols. Having a common language would speed this along. They seemed advanced scientifically. \"Half-life of radioactive isotopes?\"\n\nThe second being nodded and went back into the room to return in a moment with a portable display. It showed Rikki a chart of elements which Rikki projected against the wall side by side with the Tik's table of elements. It quickly cross-referenced the known elements and extrapolated the time units. It shut off the projector before turning back to the two beings. \"Our standard celestial cycle is roughly equivalent to 1.5 of your cekt. How many cekt were you sleeping?\"\n\nThe second being glanced at the other and received a flick of the eyes.\n\n\"7,375 cekt.\"\n\nRikki looked at the seemingly healthy life forms that spent 4,917 years in suspended animation. \"That is a significant achievement as none of the known suspension technologies available would have preserved their subjects for so long. How many survived?\"\n\nThey glanced at each other once more. The leader spoke this time. \"All survived. You have not fully answered my question.\"\n\nRikki expected to get back to this. \"My name is Rikki. We are Tik, an independent and sentient race of mechanical beings. We seek life to ensure it is preserved and protected.\"\n\n\"The opposite of the Mahrell Drun,\" the leader said.\n\n\"Yes,\" Rikki offered.\n\n\"My name is Lorrem. We are the Ishilon. I offer sympathy for your dead caused by my underling. This language is not suited to such sentiment,\" the leader finished with a snap, then looked around at nothing in particular as if struggling to deal with something emotional.\n\n\"If you provide a lexicon for your language, we can create a matrix for Universal, a language all races in the Gate Network use as a common trade language.\"\n\nThe commander nodded to one of the technicians behind it. Rikki motioned for 9898 to assist.\n\nLorrem's hood flared out with its sudden anger. \"I cannot believe they are all dead! They were ageless, and outside of mishap, they could be expected to live on endlessly! It makes no sense!\" it raged.\n\nRikki projected an image of the Allsa Komanae homeworld, which was taken by the researchers authorized to be on the planet. The video showed a central square where most of the dying members went when they felt their biological matter disintegrating. \"Roughly 25 cekt ago, the last Allsa Komanae perished. The last Mahrell Drun Prime perished a short time before that.\"\n\nThe leader made a terrible and loud crunching noise as its eyes went very wide. \"That is a short time ago, considering how long we slept! To have missed our chance to avenge our people by that short a time is beyond my ability to accept!\"\n\nRikki watched the muscular being struggling with its rage. It looked to the other large male who was also making angry noises.\n\n\"How did they die?\"\n\nRikki turned to see a third being joining them in a hallway that now seemed too small to contain this group. The Tik team leader made an immediate assessment based on the new arrival's body language, the body language of the others in its presence, and its slightly larger size that this new one was probably their actual leader. Rikki suspected it was female.\n\n\"It was Jack!\"\n\nRikki turned to look at 3334 in surprise. The young Tik broke protocol and a few laws with that excited shout. It shouldn't have even known about Jack's involvement. Rikki tight beamed a command for silence to the now contrite youngling then turned back to the recent arrival to continue.\n\nThe female Ishilon was much closer now, and her large golden eyes panned over the Tik's shell to return to the primary optic sensor. \"Who are these Jack? They must be a race of powerful beings to have taken out our adversaries.\"\n\nRikki found himself in an unpleasant situation because of that blurted sentence.\n\nDeflect.\n\n\"My youngling spoke out of turn and without context. The Mahrell Drun Prime and the Allsa Komanae were defeated by an association of three different races-\"\n\n\"Jack. Explain.\"\n\nRikki felt an almost tangible pull from those gold eyes, which remained focused on his optic. She had a formidable will! It couldn't avoid the answer without jeopardizing the work it'd done so far.\n\nDownplay.\n\n\"One member of this association was an individual named Jack Danner. He is a human, a member of one of the association's races.\" It paused as that wasn't entirely truthful. \"He's actually part Altarian now, that's another race involved in the association-\"\n\n\"These Altarian's can take over the bodies of other races?\" the female asked in concern.\n\n\"What? No! That's not what I meant. Jack has a distinctly unique genetic makeup, which allowed an Altarian disease to merge new genes into his genome. His status as a Hybrid was unknown until the Altarian gene's activated.\"\n\nA shudder rippled through the female's body. \"Is Jack a carrier of this disease, and was that how he killed the Mahrell Drun?\" she asked.\n\nRikki was floundering. \"No! It only changed him and only in relatively small ways. He's healthy and isn't contagious. As I said, he was only one element of a large effort to put an end to their evil ways.\"\n\nThe female gave Rikki an evaluating look. \"If Jack is a Hybrid, the Mahrell Drun would have been very interested in him. I think perhaps you are not telling the complete truth regarding Jack Danner's involvement in the demise of our adversary. The Mahrell Drun set our neighbors against us, and by the time we discovered who the true enemy was, we were drawn into a war neither of us could afford. They were irrational and would not listen to the truth. In the end, they eradicated all life on our homeworld, and almost wiped out our colony world as well.\"\n\nShe sighed painfully. \"You're unaware of the sacrifices we made to be here. Only the strongest amongst us were able to travel on this ship and leave the ruins of our colony. Our remaining citizens perished on that blighted world, but they died knowing their sacrifice would directly lead to the Mahrell Drun dying by our hands!\"\n\nShe reached out a hand to pull Rikki closer still. \"Now, tell me everything about Jack Danner.\"\n\nRikki saw the pain in the eyes of these beings, reflecting their knowledge of the debt they owed the ones they left behind. It couldn't imagine what it must feel like to suddenly discover those debts could never be repaid.\n\nIt considered her request and determined there was only one course of action.\n\nDisclosure.\n\nChapter 4\n\nJack walked in his front door and slowly came to a stop as he took in the mouth-watering scent of home cooking. A content smile spread across his face. \"Honey, I'm home!\" he bellowed, as the house was huge.\n\nGee and Bal followed him in and gave him another weary look at his volume level. They headed off to put their equipment away and to get cleaned up. Jungle time was over.\n\nThe twins entered next and stopped to get a kiss and a hug. He flinched a little when Zaina's arm brushed across the welt on his side. They both looked up at him contritely.\n\nJack put a fake look of disbelief on his face as he looked to Adina. \"I can't believe Zaina shot me!\" he said pitifully.\n\nAdina burst into giggles as Zaina cried out in outrage.\n\nHe grabbed Zaina in a bear hug and cuddled her as she beat her fists on his chest for teasing her. Adina bounced in to get a hug as well, and he gave them both another kiss on the cheek before they headed off to their room. \"Bad papa!\" Zaina tossed back over her shoulder, but he could see her smile.\n\nJack was very pleased with himself as that last bit had been another test for the girls. Earlier in their lives, when he'd do something to give them opposite emotions, the discordance in their emotional states would destabilize their link. Now, they were able to isolate their emotive states to maintain stability. He never told them he was testing them. Truthfully, he didn't tell anyone, but he was pleased to see their progress.\n\nDiana walked into view, and Jack's libido woke up, and his heart filled with warmth. She always managed to take his breath away and give him butterflies. Tall, curvy, and gorgeous, she towered over the Altarians of their previous home and the Chuuruthians of their current one. Living on Chuuruthia clearly agreed with the brunette beauty as it seemed like she hadn't aged at all in the intervening years.\n\nAs well as being a gift to the eyes, she'd also defended her family like a lioness. Twelve years later, the terrible scars were still there to see. Not all of them were visible, however. She was still haunted by the memories she lost when she'd stopped breathing after the attack. Jack gave her all the love and attention she needed, and that helped her significantly.\n\nToday, she was wearing one of her favorite Altarian dresses, which did nothing to hide the savage-looking scars on her throat.\n\n\"Hey baby,\" she purred in her gravelly voice, which was another present from the attack. Diana had chosen not to go under the surgeon's knife for the limited improvement they offered her.\n\nJack thought it was damn sexy, as did SennLann. The deep rumble made the Phem Kalos female tingle with lust. He knew she wasn't home from her trip to Phem Kalos, where she was visiting their Queen. They'd become besties.\n\nJack pulled Diana into a hug then kissed her tenderly.\n\n\"Mmmm, that was really nice! How was your trip to the jungle?\" she asked.\n\n\"Me Tarzan, you Diana!\" he grunted as he bounced his eyebrows at her.\n\nShe grinned and patted his chest. \"Down Tarzan. Dinner is ready. Go get cleaned up. Eve made a delicious casserole from an old family recipe.\"\n\nJack's eyebrows went up as Eve was an orphan of unknown origins. She had no family that they knew of. They didn't even know what planet she was from!\n\nDiana made a rumbling sound, which was her chuckle. \"My family recipe, silly!\"\n\n\"Oh! Of course!\" Jack said, feeling silly indeed.\n\nDiana gave him a peck on the lips and pushed him toward the hall leading to the master bedroom.\n\nJack sped up his steps as he was famished.\n\nAfter a quick shower, he pulled on shorts, a button-down shirt, and slippers then headed for the kitchen. He spotted Emily walking ahead with one of her Chuuruthian friends. He struggled to recall this one's name then spotted the tell-tale spots on her ears. The race had such lovely ears, but the patterns were distinct. This was Rasha, the giggler. He rushed forward silently to scoop the two young ladies into a hug. \"Hello, girls!\"\n\nBoth squeaked in surprise at his sudden appearance. Then their behavior veered in different directions.\n\n\"Dad! Stop doing that! How can someone so freaking big move so quietly?\" Emily complained.\n\nRasha was a mess of giggles, large eyes, and trembling whiskers. The multiple gold rings dangling from both of her large tufted ears happily jingled as they moved. The Chuuruthian resemblance to Earth's Caracal cats was strong with her.\n\nHe remembered now that this friend might have been a little infatuated with him. It was just a youthful crush. He caught the look of frustration on his daughter's face and sent her an apologetic look.\n\nEmily rolled her eyes, then tugged free of her dad's arm. \"Come on, Rasha. Let's get a seat where lunatics can't accost us.\"\n\nJack gave Emily a surprised look, but the teen was purposefully keeping her gaze averted. She was mad and now embarrassed in front of her friend. \"Sorry,\" he said.\n\nRasha was looking between father and daughter in embarrassment.\n\nJoseph chose that moment to rush out of the dining room towards them. \"Dad! Glad you're home! Can I ask you about something? Oh! Hi Rasha! M.L.E.\" Joseph used his phonetic pet name for his sister as he saw the frown on her face. Jack saw a softening of her expression before his son tugged him away.\n\nJack looked at Joseph and saw a hint of anxiety. He frowned in concern. \"What's up? Is something wrong?\"\n\n\"Sorry Dad, you need to give Emily extra space for a while. She's going through... stuff,\" his son said quietly.\n\nJack blinked at his son. \"That lacked some pertinent information.\"\n\n\"She can't talk to you about it. Hardly talks to me about it, but I think she's lonely. Like... she wants a boyfriend.\" Joseph said hesitantly.\n\n\"She hasn't turned eighteen yet!\" Jack exclaimed in outrage.\n\n\"Dad, she will be in less than a week. This is why she can't talk to you,\" Joseph sighed\n\nJack went still. \"Right.\" He thought for a moment. \"Can she talk to her Mom?\"\n\n\"I think she tried, and her reaction was the same as yours,\" Joseph replied.\n\n\"Oh. Is there anyone Emily's interested in?\" Jack asked.\n\nJoseph's expression became pained. \"She's only attracted to humans, and there aren't any here.\"",
        "\"There are at the Trade Commission office,\" Jack suggested then immediately reconsidered his workplace. Way too uncomfortable. \"Never mind.\"\n\nJoseph just nodded, then his expression became hesitant once more. \"This brings me to the second point I wanted to discuss with you. An art gallery wants to do a showing of my glass art pieces. Mom's not in favor, but I think it would be an excellent opportunity for Emily and me to meet people. Art galleries bring in a good group of people.\"\n\nThe gears were turning in Jack's mind. An art gallery showing of Joseph's art. Emily needs to meet people. Emily is only attracted to humans. Humans mostly stick to Earth. \"Where on Earth is the art gallery?\"\n\nJoseph nodded, understanding his father would catch on quickly. \"In Paris, France.\"\n\n\"Ah, well, that's certainly better than some places it could be,\" he sighed.\n\nJoseph's expression brightened. \"Does this mean you'll talk to Mom?\"\n\nJack sighed as he realized this was what Joseph wanted from the start. \"After dinner, let's sit down and go over the details. I'm not opposed to the idea, but trips to Earth can lead to grief.\" He saw Joseph was watching his hand, which was unconsciously touching the slave collar. He pulled his hand down and wrapped an arm around Joseph's shoulder to guide him to the dining room.\n\n\"You know I'm grateful you were there on Allsa Komanae to save me, don't you?\" Joseph said quietly.\n\nJack looked at him in surprise then pulled him into a tight hug. \"You and your Mom are the best things that came of that time, and I don't regret it for a second.\"\n\nJack felt another pair of strong arms wrapping around them and looked down to see Eve smiling up at them. \"I came to find you two as dinner is on the table.\"\n\nJack released Joseph and leaned down to kiss Eve tenderly.\n\n\"Augh, get a room!\" Joseph groaned, drawing a chuckle from his parents.\n\nJack followed them into the dining room and saw everyone currently living in the home, and Emily's friend Rasha, already seated. He kissed Zoe then Ben on the head as they were his youngest kids. Then he nibbled/nuzzled Leffera's neck as he passed behind her making her let out a surprised yelp. This drew chuckles and exasperated sighs in equal measure.\n\nDinner time had begun.\n\n-=-\n\nAaros and Diana shooed Jack, Eve, and Joseph away from the dining table so they could discuss the invite. Jack led them to his office, and once there, Joseph forwarded him the invite message he'd received as Jack sat at his desk, activating the large wall mounted display to show the message.\n\nEve caught Jack's attention. \"I spoke to Hellna and asked her to check into the background of the gallery and the organizers. She did and found nothing of concern. Then I asked Cha'Risa, but she found nothing either. They seem legitimate.\"\n\nJack smiled at Eve's vigilance at protecting Joseph. He looked at the invite again and saw the gallery was in one of the wealthier districts of Paris. He set up a connection to Earth's web and searched for the event. His eyebrows went up as he saw the artist invite list. There were some big-name artists from Earth as well as a few artists who lived off-world. The thing was, all of the artists were human.\n\n\"So, the point of the show is to celebrate human creativity and the effect of environment on the artist's work?\" Jack quietly asked as he pondered how this might be spun to cast a negative light on the off-worlders. There always seemed to be a negative angle.\n\n\"There are so many amazing artists coming to this! I'd love to meet them!\" Joseph gushed.\n\nJack and Eve shared a glance. They wanted to protect him, but they couldn't deny what a great opportunity this was for him. Jack could see Eve's concern and acceptance. They were on the same page as they always seemed to be.\n\n\"We need to work out who's going to go with you as protection,\" Jack said, and Joseph whooped with joy and jumped up to kiss and hug his parents.\n\nOnce Jack settled his son down, he held his eyes. \"I'm not messing around here. With such a high profile event, there's lots of room for things to go wrong.\"\n\n\"Gee and Bal would go,\" Eve said.\n\nJack shook his head. \"I think as this event is so human-centric, it might be better to have human security. Maybe Leo and Maxim?\"\n\n\"We can ask them at the barbeque party this weekend,\" Eve said.\n\nJack nodded with a smile. He'd promised himself he'd keep in touch with the people who made a difference in his life, and he'd been pretty successful with that while living on Chuuruthia. Of course, his new home was party central with all the required amenities, including extra rooms for party goers to crash in afterward. The big conversation pit in the living room under the glass dome for stargazing was particularly popular for that. Looking up at unfamiliar star patterns did crazy things to your mind. The breakfasts Jack served the mornings after were also a big hit.\n\n\"Will do. Now, how many people does the invite say you are allowed to bring?\" They looked and saw it said three. \"Leo, Maxim, and Emily.\"\n\nEve looked to Jack in surprise, so he took her hand in his. \"This is an artist invitation. We'll see if we can get on the guest list. If they allow non-human guests.\"\n\nShe shared his concern about the potential bias against off-worlders but put her faith in Jack to find a way. She looked at her son. \"You want to bring Emily?\"\n\nHe nodded at her. \"It's on her birthday, so that would be my present for her.\"\n\n\"Please go ask Diana to join us. Then get Emily,\" Jack said to Joseph.\n\nOnce Joseph was on his way, Jack pulled up the art gallery website and looked into ordering tickets. He found himself being redirected to a contact page for off-world guest requests. He glanced at Eve, whose face showed her concern. He pressed the button to call. Moments later, the screen opened a window showing a slim man with a fringe of hair and a thin mustache. His slightly oversized eyes widened as he saw who he was speaking to, and his mouth dropped open.\n\n\"Ambassador Danner!\" he exclaimed, his eyes immediately going to the tall black horns.\n\nJack winced as he hadn't had that title for over a decade, but it was how he was referred to on Earth. His fan club there was still quite active and growing in numbers. They even sent him monthly newsletters. He'd read in one that they were actively campaigning to get him reinstated. That thought brought a grin to his face.\n\n\"Just Jack Danner or Trade Commissioner Danner, if you prefer.\"\n\n\"Ah! Yes. What may I do for you today?\" the man said.\n\n\"I was hoping to be able to buy some tickets to the art show my son has been invited to. Joseph Danner.\"\n\n\"Yes, the glass artist! He does such beautiful work!\" the man gushed.\n\nJack gestured for Eve to move next to him to be in the picture. The man's eyes widened once more. \"Joseph's mother and I couldn't be prouder.\"\n\n\"Mother?\" the man muttered in confusion.\n\n\"Adoptive mother, of course,\" Eve insisted in annoyance.\n\n\"Exactly. As I said, we would like to purchase tickets to the show,\" Jack concluded.\n\n\"I- I- I don't-\" the clerk began to answer when a hand landed on his shoulder. Another man, whose face they couldn't see, leaned in to whisper in the clerk's ear briefly. Then he left.\n\nThe clerk looked off-camera then turned to face Jack with a smile. \"Two tickets, then?\"\n\n\"Five, please,\" Jack politely said as he did his best to hide his apprehension. With Gee and Bal along, he'd feel much better.\n\n\"Certainly! The transaction should be on your screen for review and acceptance.\" He was all business now.\n\nJack looked at the price displayed on his desktop screen and accepted it. The payment went through.\n\n\"Thank you, Mr. Danner. I'm issuing your tickets now.\"\n\nJack saw the five invites appear in his message box. \"I've received them. Thanks.\"\n\n\"Anything else I can do for you today, Mr. Danner?\" the clerk asked. Diana walked in with a curious expression.\n\n\"No. Thank you,\" he responded, and the clerk nodded and immediately disconnected. Jack blinked at the blank screen.\n\nHe turned his attention to Diana. \"You know that art gallery showing Joseph has been invited to participate in?\"\n\n\"Yes, but not where it is,\" she replied.\n\n\"Paris, France on Earth.\"\n\nDiana blinked in surprise. \"Oh, that's pretty significant. But Earth?\"\n\nJack shared her concern, but he wasn't willing to give up access to his home planet.\n\n\"Eve and I are going to ask Leo and Maxim to be security.\" Diana nodded and relaxed a little.\n\nJoseph arrived with Emily, who was wearing an annoyed look on her face. He clearly hadn't told her why he'd brought her. Rasha was following with an interested smile.\n\nDiana took one look at Emily and turned to Jack. \"No!\"\n\nEve walked over to Diana and took her hands. \"Jack and I will be going as will Gee and Bal-\" She paused as she recalled Jack ordered five tickets. She glanced at Jack, who nodded. She looked up into Diana's worried green eyes. \"There's an extra ticket for you if you want it.\"\n\nDiana pulled her hand back. \"I'm not going there! Never again! And Emily-\"\n\n\"Is an adult. That night will be her eighteenth birthday,\" Jack said, standing. He looked to the others. \"Can we have the room for a moment, please?\"\n\nOnce they cleared out, Jack pulled Diana into a hug. \"I never meant this to be an ambush. I just found out about the showing and learned that Emily is lonely. She'd like to meet a boy and fall in love. But there are very few human boys here to meet. Unlike her Mom, she's attracted to more traditional looking mates.\" Jack looked into Diana's sad eyes. \"She's going to be carrying the baggage of her unusual family her whole life. We have to be as supportive as we can be to counterbalance that, or she may grow to resent us.\"\n\nDiana rubbed her face against Jack's chest. He heard her mumbling something.\n\n\"What was that?\" he asked.\n\nShe pulled back to look him in the eye, but she was pouting. Jack had to restrain himself from kissing that lower lip. She must have seen his flare of lust as she smiled slightly before giving her head a shake. \"I want her protected! I can't go.\"\n\nJack recalled her visit to Earth with him seven years ago. They'd gone to New York City to do a little shopping, and somehow word got out that they were there. A well-organized group of religious fundamentalists used the Gate Network to gather in NYC and launched their attack. Instead of shopping, Jack and his group found themselves running for their lives.\n\nDiana had been terrified as the crowd screamed vicious insults at her for fornicating with the devil himself! She was called the Whore of Babylon, Jezebel reborn, and the seductress Lilith! She'd received a few cuts and bruises from thrown debris, but it was her nerves where the real damage was evident.\n\nWhile Gee and Bal had kept them alive, they'd only managed to escape with the assistance of local law authorities. The same authorities who'd failed to respond until the fire department arrived to put out the fires the fanatics set around the building they'd taken refuge in.\n\nHe understood Diana's reluctance to go back.\n\n\"If Maxim and Leo aren't available, I'll ask Cha'Risa to recommend someone. As Eve said, Gee and Bal will be there too.\n\nDiana took a deep breath and let it out. \"Ok. But... what if she meets a boy and falls in love. What if she wants to stay with this boy? On Earth!\"\n\n\"We'll deal with each crisis as it comes,\" Jack said and kissed Diana's forehead. She nodded.\n\n\"You can come in now!\" Jack called out.\n\nEve opened the door and led the rest inside. Joseph looked to Jack hopefully and received a nod. He turned to his sister.\n\n\"Would you like to join me in Paris, France, when I go there for a gallery showing?\" he asked her.\n\n\"Earth?!? We're going to Earth?!?,\" she gasped.\n\nJoseph grinned. \"No, the Paris, France on the Woo homeworld! Yes, Earth! Happy Birthday!\"\n\nEmily made a high pitched squealing noise and leaped into her brother's arms. Then she rushed over to hug her Mom and Dad.\n\n\"You're going to have a security escort as that's a mandatory requirement because of having me as a Dad,\" Jack said.\n\nEmily nodded excitedly then looked over at her friend. She turned to look at Joseph. \"Can Rasha join us?\"\n\nJoseph looked to Jack then back to Emily. \"I only have four invites. You and I and the security team.\" Emily looked at her father.\n\nJack was watching Diana, who gave her head another small shake. \"I have five invites. Rasha could come with us if it's ok with her parents. Considering the nature of the show, it might be better for her to stay close to us.\"\n\nRasha made an odd sound Jack had never heard a Chuuruthian make before. He could have sworn it sounded like a mixed growl and purr. Chuuruthian's did neither.\n\nThe petite being flashed an embarrassed and desperate glance to her friend who covered it up by rushing to her, grabbing her hand and pulling her from the room. Emily called out a thank you as they fled.\n\nJack looked between Diana and Eve, getting a shrug from the tall brunette and a tilt of the head from the petite grey-furred female. He looked at Joseph, who just had a happy smile on his face. \"We'll talk to Cha'Risa, Leo, and Maxim at the BBQ to work out the details.\" He looked back at Diana. \"Will SennLann be back from Phem Kalos for the party?\"\n\n\"Yes, and she's bringing Nann too. I think my Tik boyfriend Ray will be there too,\" Diana said with a smirk. She was aware of the intimate memories he'd shared with the Tik and the ongoing infatuation Ray had with her. Thankfully Diana remained blissfully unaware that these memories had likely been shared amongst millions of Tik by now.\n\nHe could only smile and nod. He was never going to live that one down.\n\nChapter 5\n\nTonka hovered far above the planet's surface, drifting along in its geostationary orbit above what they'd identified as the largest city. Tonka's partner, Eellooee, was a short distance away, scanning all electromagnetic waves for hints that the Tik had been observed. So far, nothing.\n\nAs Tonka had a little personal time available, it looked at its options. Its art project could use some attention, but it needed some inspiration to finish it.\n\nIt had also received some encrypted files the last time it was on Chuuruthia. While there, it underwent a scheduled assessment. It achieved a higher level, which gave it sufficient clearance to receive these files. Most were small, but one was huge! Its curiosity made it want to open it immediately, but it was cognizant that some of the factors in its assessment were judgment and patience. The files would wait until a better opportunity.\n\nHere, far above the planet with plenty of time available to review them, the opportunity presented itself.\n\nRestraining the urge to open the large one first, it ordered the files by size, smallest to largest, and opened them one by one. They were mostly experiences of other Tik undergoing deeply profound emotional moments or traumatic events. It made sense to Tonka that these would only be given to Tik, which had sufficient emotional stability and maturity to assimilate the experiences. It personally felt stronger for having integrated them.\n\nThen it reached the last file. Its size was still daunting. To ingest this much data was going to take a noticeable amount of time.\n\n\"Eellooee, I'm opening a rather large data file. Will you need assistance for an interval?\" it tight beamed to the other Tik.\n\nThe partner split its attention to respond. \"Not for a daily cycle, at least. How large is this file?\" it asked curiously as experience files typically loaded quickly. It'd never received an advanced warning for this activity before.\n\nTonka couldn't share the file as it was encoded only for it. But it sent Eellooee the specs on the file.\n\nThe abnormally large size of the file caught Eellooee's full attention as it paused its EM scan. \"This is a single experience file? What could it be?\"\n\nTonka realized Eellooee was not likely to receive the file for some time as it was still too young. It had years of maturing to undergo before it did. \"I won't know until I open it, and I won't be allowed to tell you afterward. I find the size a little daunting too. You will need to be extra vigilant while I incorporate it.\n\n\"I will,\" Eellooee replied.\n\nTonka picked up the distinct impression of wistfulness from its partner. There was nothing it could do about that, so it pushed that aside as it looked inwards to the file.\n\nIt triggered the extraction and was immediately presented with a prompt.\n\n\"The experience file you are about to incorporate contains the personal and private perceptions of Jack Danner. You are not authorized to disclose anything regarding the experience with any being other than Jack Danner, and only if he personally requests it. Before incorporating this data, do you agree to the above conditions?\"\n\nTonka was stunned. The experience file contained perceptions from a being outside the Tik Collective! That was supposed to be impossible! A non-mechanical entity at that! Tonka had no way of describing how intensely exciting this thought was, and it paused as it realized it would be obtaining an entirely new perspective on the world.\n\nIt suddenly realized how valuable this data was and how privileged it was to receive it.\n\n\"I agree,\" Tonka responded.\n\n\"You may open the file now, or if you feel you are not ready, you may terminate the action and request the file at a later date. As with all experience files, there is no penalty for not incorporating it as you have been assessed as meeting the requirements.\"\n\nTonka wondered how many Tik turned down the offer to see through another being's optical sensors. Then it thought this would make for an excellent test of a Tik's maturity, to dangle such a prize and suggest they could accept it later at no penalty.\n\n\"Understood. Open the file now.\"\n\nThe universe exploded in vectors no Tik had ever perceived or even imagined. Tonka felt the awe BassDrop experienced, then the Tik's perception faded under the onslaught of Jack's unique senses.\n\nSo much input!\n\nAnd emotions! So powerful and so many! Tonga felt himself being carried away on the tide of experiences Jack bestowed upon BassDrop.\n\n\"Tonka! Tonka! Are you functioning?\"\n\nThe Tik reached out its arms above its head and stretched as it yawned. Its nose felt a little itchy, so it rubbed at it.\n\n\"Tonka! You are making odd movements. Have you malfunctioned?\" Eellooee asked in concern.\n\nThat tone got through, and Tonka's perceptions snapped back into focus. \"I- am well. Apologies. The experience file was... intense. It took some time to readjust my perceptions. Has there been any change in the communications from below?\"\n\nStill showing signs of unease, Eellooee gestured a negative. \"Communications remain constant and uneventful.\"\n\nTonka noticed the light had shifted considerably. It checked its internal clock, and eighteen hours had passed. \"Oh! My apologies. I didn't realize how long I was ingesting the data package.\" It would take a few days for this much data to merge and become available for direct access. It'd just had a... taste of the content. Tonka smiled as that phrase seemed to have a meaning for it now.\n\nBest to get back to business. \"Details on the original survey?\"\n\n\"We discovered this planetary system between the Jool and Qui Qui Qui territories while scanning for gravity wells along a recorded course found in an old ship's log from an Allsa Komanae raider. The Jool and Qui Qui Qui were both neutral towards the Allsa Komanae until the Jool discovered the Allsa Komanae stealing resources from their moons and asteroid fields. The Allsa Komanae also used the route to get to the outer regions of Altarian space. The Jool closed off the route.\"\n\nTonka was pleased by Eellooee's matter of fact delivery. \"Who claims this space?\"",
        "\"It's neutral territory between the Jool and Qui Qui Qui regions of space though not close to either. Now that we've detected an intelligent, technological advanced race living on the system's only life-sustaining planet, the local region will belong to them. While there are a few communication satellites, I've detected no sign of space travel capabilities. The Jool and Qui Qui Qui will be notified of their new neighbor if they were not already aware.\"\n\nTonka pondered on that last point. \"The Jool must be unaware as the planet below still contains life. The Jool tend towards aggressive military action when confronted with incursions, even this far from their home system. Our notifying the Jool will protect the inhabitants below, as attacking them would cause the Jool to lose Gate access. The Qui Qui Qui are unpredictable, and their intentions undecipherable. Their preference to avoid interacting with others means they don't explore, so they are likely to be unaware and won't visit when they learn of them.\"\n\n\"Yes, I concur,\" Eellooee replied. \"May I present the findings of my culture study I've made based on the intercepted transmissions?\"\n\n\"Yes, please,\" Tonka said with enthusiasm.\n\n\"The planet below hosts one homogeneous culture based on a tiered ranking system. It seems to be based on some form of merit system. The inhabitants show a remarkably high level of civility. That's not to say I was unable to find examples of violence. I've seen reports of public executions. Some, after a form of court trial, and others on the spot by members of their security force. These never devolve into civil unrest. I can find no sign of any conflicts larger than police actions. Individuals may perform violent acts, but society as a whole remains peaceful.\"\n\n\"Their base language has been relatively simple to translate from the broadcasts I've picked up. There are signals dedicated to educating their young. I'll share the lexicon with you now.\" Eellooee sent a tight beam file transfer to Tonka, who incorporated it into its translation files. There may be nuances missing, but this would be suitable for first contact.\n\n\"That's very promising! Thank you!\" Tonka remarked, and Eellooee was delighted.\n\nTonka and Eellooee waited for morning to come to the capital city below and went over first contact protocols. Tonka determined the best time for them to descend and meet the people of this world would be when the sun was directly overhead, as this would give them a little extra security. First-contact was a tricky time.\n\nFinally, the hour arrived, and they began their descent. They kept a steady pace, listening for chatter on the EM bands that would indicate they'd been observed.\n\nTonka had chosen a large courtyard in front of the largest structure in the capital city to make their introductions.\n\n\"I believe we have been spotted,\" Eellooee noted as several signals began to include very excited yet terse conversations.\n\nThey watched the civilians in the courtyard below quickly disperse as chrome armored beings guided them out and took their place. Likely the police force Eellooee spoke of earlier. They formed a circle around the spot where the Tik would arrive.\n\nTonka guided them in until they were hovering above the paved surface, roughly head height with the beings facing them. It noted that the chrome armor almost completely hid any identifiable features of the person within. The exception was the grey horns on either side of their head, which curved down and forward to point deadly tips at whoever they faced. They were all pointed at the Tik for now.\n\nThere were height differences as well, but in general, when ranked amongst the other races of the Gate Network, their size was slightly below the average.\n\nEveryone remained still for a moment as they regarded each other. As no one stepped forward to identify themselves as the senior officer, Tonka proceeded with his greeting. Their language felt odd to use as it was filled with honks and growls, but the Tik had no trouble emulating it.\n\n\"Hello. We are Tik. We are an independent and sentient race of mechanical beings. We seek life to ensure it is preserved and protected.\"\n\nThe group shifted uneasily, and then two parted to allow a single being to enter into the circle to approach them. It was wearing a white sleeveless gown with a high collar. Finally, Tonka got a closer look at the facial features of one of the natives. Grey furred, the grey horns growing out of its temples to curve down and forward. It had large pale grey eyes and a wide and leathery-looking black bar for a nose. It had black lips in a broad mouth, the points of two fangs could be seen resting on its thick lower lip. Its ears were broad, furred triangles with white tufts.\n\nAs it walked closer, Tonka could see its hooves with two broad toes below the hem of the long gown.\n\nSomething was tickling Tonka's mind. Something familiar. It pushed the distraction back.\n\n\"I am Assessor Herrall Lekk, Fifth Level. What is the purpose of your unauthorized visit?\" the being said with what could only be called a haughty tone. It looked unimpressed by the shiny visitors from space.\n\n\"We discovered your planet referenced in a ship's log from an Allsa Komanae raider ship. As a race, they were known for crimes against most other races they encountered. This ranged from the theft of system resources to genocide. We're here to offer a greeting as galactic neighbors, and if you are interested, we will offer you access to a Gate so you might join the community of the Gate Network,\" Tonka said politely.\n\n\"The Nareshk were not aware of the existence of the Allsa Komanae, nor have we had any dealings with them. We have no need of a Gate, nor do we desire to join this Network,\" Herrall stated categorically.\n\n\"I see. May I then infer that a fifth class Assessor in your society has the authority to handle first contact protocols and make decisions for the planet?\" Tonka asked politely.\n\nThe being's expression became angry then smoothed away as it became aware of the scrutiny of the chrome armored beings surrounding them. It turned this neutral expression towards Tonka. \"I will arrange a meeting between you and Assessor Dren Milo, First Level. Please remain here until the Assessor is available to see you.\" It turned to leave.\n\n\"What is your estimation for this waiting period?\" Tonka asked.\n\nThe Assessor stopped and looked back in annoyance. \"The Head Assessor is a very important and busy person. He will be available when he is available. Please recall that your visit was unscheduled and unsolicited.\"\n\n\"Understood. We'll wait for the meeting in geo-synchronous orbit. When ready, form another circle like this one, and we'll return.\" Without waiting for a response and ignoring the being's indignant sputtering, Tonka lifted into the sky with Eellooee close behind.\n\nOnce they were back where they'd begun their descent, they turned a lens towards the courtyard. The maximum zoom they had barely detected the gathering of chrome armored beings, but it was enough. The circle was breaking up as they dispersed.\n\n\"Has that ever happened before,\" Eellooee asked.\n\n\"Has what ever happened?\" Tonka asked.\n\n\"I was expecting curiosity, interest, or excitement. Even fear or distrust would have been an expected response, but disdain?\" the younger Tik said in surprise.\n\nTonka agreed that it was odd, but he'd seen it before. \"If a race considers itself complete and the pinnacle of evolution, they often resent evidence to the contrary. Belief is a fragile thing. The stronger the belief, the more desperately people will cling to it, and the more resistant they may act towards those presenting opposing evidence.\"\n\nEellooee considered this for a moment. \"Is that why we returned to space? Shouldn't we have demonstrated trust to assure them of our good intentions?\"\n\nWords rose unbidden from the new experiences in Tonka's mind. \"Trust in Allah, but tie your camel,\" it said to its partner.\n\n\"What?\" Eellooee exclaimed.\n\nTonka snorted at the surprise in its partner's voice. Then it realized the words weren't particularly well suited for this situation and wondered why they popped out at all. \"Apologies. Some of the information in my recent download is leaking out as I haven't had time to digest it yet.\"\n\n\"Digest?\" Eellooee remarked in puzzlement over the odd choice in words.\n\nTonka took a firmer control over its vocabulary. \"I will use this time to integrate the information more completely. Please keep an optic on the meeting place and notify me when they gather again.\"\n\n\"Yes, Tonka.\"\n\nThe team leader heard the unease in Eellooee's voice, but there was little it could do to ease the other's mind outside of performing the data integration and being more vigilant about its treacherous tongue.\n\nTongue?\n\nTonka began to feel a little uneasy too.\n\nChapter 6\n\nRikki floated in space and pondered how this simple mission had become so complicated. All its team of Tik had to do was scan the gas giant below them for life as the nearby sun was exhibiting signs of destabilizing. That sounded simple enough.\n\nTheir discovery of a spacecraft parked in orbit over the planet's gravitational pole skewed the mission entirely. It had gone from finding potential lives to preserve to saving actual lives. The ship's propulsion engine was non-functional, and now it was trapped in the gravitational field of the gas giant.\n\nRikki sent Tootie and 1221 through a Gate to report their situation to the senior Tik on Chuuruthia. They took the dead bodies of 8809 and 4003 with them. They were to return with more Tik to assist with taking the enormous ship through a Gate. Rikki also needed to know which planet they were taking the Ishilon ship to orbit above.\n\nWhile they waited for Tootie to return, Rikki brought all of the remaining Tik outside the ship. They measured the vessel by ringing it and creating a mesh of tight beam signals from each Tik to all of the others. As they moved in unison from tail to nose of the ship, they managed to get an accurate assessment of just how vast it was. While the others weren't experienced enough to know what this measurement meant in terms of its Gate requirements, Rikki hoped Tootie returned with many, many more Tik. The ship was more massive than anything they'd ever had to move through a gate.\n\n\"Rikki? Can you hear me?\"\n\nThe Tik realized Sultessa Sahhahr, the leader of the Ishilon, was broadcasting to it from the ship. \"Yes, I can hear you.\"\n\n\"One of my technicians picked up a strange reading from the sun. A distinct and significant change in output,\" she reported.\n\nRikki turned it's optics towards the sun and ran through an array of filters to measure the energy output. It froze when it saw the flare. It was larger than anything it had seen before. They'd missed the early warning signs?! Damn!\n\n\"All Tik to me! NOW!\" it broadcast and moved to the tail end of the ship as quickly as possible. When it stopped and turned around, it could see the others rushing up the length of the vessel to join it.\n\n\"Sahhahr, are your ship's shields sufficient to protect against a Coronal Mass Ejection of this magnitude?\" Rikki asked as it blurted a data package to the display inside the ship. There was silence for a moment, then quiet talking. Then she was speaking to Rikki once more.\n\n\"No. Not unless we shut down power to everything except the shielding. We can't do this because of the life support on the sleep chambers. The ship won't survive, and neither will we. Can you do anything?\"\n\n\"One moment please,\" Rikki responded as it tracked the incoming Tik. It no longer had time to wait for Tootie to return with help. They had mere minutes before deadly waves of highly charged particles slammed into them. Conscious of the ramifications of its decision to take a shipload of refugees to an unsuspecting planet, it made a decision. \"We're going to move the ship,\" it told Sahhahr then disconnected.\n\nRikki did a quick check on the team, and all were present.\n\n\"Due to the scale of the ship, I'll need all of you to assist with opening and maintaining a tethered Gate large enough to pass over the vessel. Understood?\" Rikki asked the group as they gathered at the tail end of the colossal ark. It didn't share with them that they didn't have enough Tik to do this safely. It needed to be done.\n\n\"We've never maintained a tethered Gate before,\" 3334 stated for the group.\n\nRikki gazed at them, ever conscious of their limited time. \"The only difference is you don't anchor the Gate to space coordinates. You anchor it to the tip of one of your tentacles. We move the Gate once it is activated. When the ship is through, we drop the tether and the Gate anchors there. Then we pass through ourselves and close it.\"\n\nRikki didn't bother checking on the progress of the sun's ejected coronal mass. It had to ignore all safety regulations and protocols as there was no choice. \"I'll set the coordinates and activate the Gate. It's going to take a lot of energy to hold a Gate this large open and move it. You must not release the tether, so I will maintain your connections once tethered. You will feel a tremendous strain, but I will monitor your power levels. 3334, 2765, 9898, and I will position ourselves at the four corners. 3233, 4993, 7272, and 9101, you will each position yourselves at a midpoint between the corners.\"\n\nRikki's group rapidly moved outwards to form the four corners of the Gate. After the briefest of hesitations, the others took up position midway down each side. All were connected by a low power tight beam, to assist with maintaining their positions. They looked towards the planet to assure they had an unobstructed view without the ship extending beyond the borders of the Gate.\n\nRikki roughly estimated they were positioned sufficiently far apart, set the destination coordinates it'd chosen, and activated the Gate. A vast mirror snapped into place between them. Initially, it rippled oddly then went smooth. This was the largest Gate ever produced, and Rikki immediately felt the drain on all of the Tik. They would have to move quickly.\n\n\"We're going to move at double our normal speed for tethered Gates! Maintain signal lock with me and let me set the pace,\" Rikki broadcast. It felt their nervousness and fatigue.\n\nAs the ship was pointed nose first to the planet, they moved towards the surface in unison, pushing the vessel through the mirrored surface.\n\nInside the vessel, Sahhahr's technicians were watching the control boards to see if the Gate was causing any strain on the structural integrity or was affecting the ship's systems. They relaxed a little as they saw it didn't affect the vessel at all. One of the technicians was tracking the oncoming energy wave and shook his head to Sahhahr. At the current rate, they weren't going to make it.\n\nAs the Tik pushed forward approaching the front of the ship, the wispy leading edge of the energy wave began to hit the planet's magnetic field, and colors flared below them. The drain on their energy started to spike. 9101's levels suddenly dropped dangerously low, so Rikki untethered it and told it to go through. The remaining Tik immediately felt the additional load pull at them. \"Fifty percent faster!\" Rikki signaled them. It felt their dismay, but the speed increased as sparks began to leap between the Tik and the Gate.\n\nRikki felt each surge through its connection to the others and felt their pain, but it couldn't let them stop. Instead, it pushed harder. 4993 suddenly went limp, but Rikki was ready and immediately untethered it to cut the drain on it. Rikki sent a quick message blurt to 3233 to collect the unconscious 4993 before it went through.\n\nThe moment the ship's nose disappeared, Rikki released the others. \"Get through now!\"\n\nThe mirror locked in place as Rikki supported the vast Gate on its own. It felt its emergency reserves drain rapidly. The exhausted Tik rushed to pass through as the planet below them flashed brilliant and chaotic colors more intensely. 3233 and 4993 were the last two to get through before a wave of raw energy carved across the torsos of 3334 and Rikki.\n\nBefore the leader lost consciousness, it seized 3334 with a tentacle, pushed it through the mirror, and collapsed the Gate.\n\nIn its state of oblivion, it missed the torment of its torso burning on the opposite side by a second wave.\n\nChapter 7\n\nJack loved to throw Barbeque parties. There'd be music and dancing on the patio under the lights and stars. He'd serve drinks he'd found in his travels to other planets and some from Earth. Best of all, there was always great food!\n\nHe'd have two large grills going, one for vegetarians and one for meat-eaters. Separate tools were used for both, and there were no shared surfaces, which eliminated the possibility of cross-contamination.\n\nDue to his ambassador training, he was sensitive to the natures, cultures, and dietary requirements of his guests.\n\nThis weekend's party was going to be his best yet! He'd been in touch with Tanz from Chrystan, and she was going to arrange for a large number of Skrahak steaks to be prepared for him and collect a few crates of delicious fresh vegetables from the hydroponic gardens in Boones Falls. He'd do an overnight visit to say hello to her and the royal couple and collect the food in the morning.\n\nAnother reason it was going to be especially enjoyable was the special dessert he was working on... if his Chuuruthian botanist and business partner, Wazzan, had success with his latest batch of their experiment.\n\nHe hadn't told anyone yet, but he'd hired a singer to come to play a short set at the party. Meagan Lane wasn't as big a celebrity now as she'd been when he first met her, the night he'd been abducted and spirited off to Allsa Komanae, but she still had an excellent voice and was backed by a great band. He was looking forward to seeing the surprise on his guest's faces.\n\nWhile the party was occupying his attention, today, he was visiting Queen Elissa on Altaria. She hadn't told him what she needed to speak to him about, but he'd find out soon enough. He'd try to catch up with his kids while he was there.\n\nHe finished his breakfast and tidied up the kitchen as he listened to the faint sound of the wind chimes out on the patio. It was still very early, and most of the others were still asleep. He seemed to need less sleep these days.\n\nLooking out the living room window, he admired the way the rising sun began the paint the cottage atop the hillside across the valley. It was a pretty little building.\n\nEvenings, his place was painted by the colors of the sunset. One more way his place was perfect for parties. The sunsets on Chuuruthia were gorgeous!\n\nHe grabbed his jogging backpack and his runners as he made his way outside. Gee and Bal wouldn't be joining him on his trip to Altaria, so he thought he'd get in a little run. He'd get a shower when he got to the Queen's office. He had a change of clothes in his pack.\n\nHe sat in one of his patio chairs and laced up his shoes. They were beginning to feel a little tight due to the recent changes to his feet. He'd have to check in with his doctor to confirm the gene alteration was done.\n\nSlipping on the running pack, Jack jogged down the hill, taking his time, letting his muscles warm up. By the time he reached the valley floor, he was able to stretch out his stride and let his muscles do their thing. Soon, he was loping along at a comfortable stride, eating up the distance between his home and the Gate Terminal. The wind pushed back his long black hair as the morning's first Ray's poked through the trees to warm his face, and he enjoyed the bliss. There weren't too many other souls up and out this early, and fewer still took the opportunity to run. Chuuruthian's had excellent metabolisms that naturally prevented obesity and maintained fitness. Lucky bastards.",
        "Too soon, the Gate Terminal came into view as did the office complex tucked into the beautiful forested park. All buildings on Chuuruthia were lovingly integrated with their natural settings. Altaria did this as well but not to such an extreme degree. When Jack first moved to this planet, he often found himself hunting for the entrances to the office buildings.\n\nThe Altarian Trade Commission office was nearby, but he was officially on vacation, so he wasn't allowed to visit.\n\nHe jogged into the Gate Terminal and walked up to the agent at the counter. The female Chuuruthian at the terminal was new and young, as well. She was obviously stuck with a midweek overnight shift. It was one of the Tik's unbreakable rules. The personal Gates at the Terminals must be manned by live personnel. No automation or remote access allowed.\n\nShe looked pretty tired, but she livened up when he showed up.\n\n\"Mr. Danner! You're up early!\" she said brightly.\n\n\"Just getting a jump on the day, and please call me Jack,\" he replied with a smile.\n\nShe preened as her whiskers trembled. \"Destination?\"\n\n\"Altaria, to visit the Queen,\" he replied.\n\n\"Ah, send her my regards,\" the young female teased.\n\nJack's smile widened. \"I certainly will if you tell me your name.\"\n\nThe clerk's eyes went wide, and her jaw dropped open as Jack waited. Finally, she realized he seriously wanted her name. \"Miccali,\" she squeaked out of her tight throat. She tapped some keys on her console. \"Gate 1.\"\n\n\"Thank you, Miccali. I'll pass along your good wishes to the Queen when I see her. Have a lovely day!\" Jack said with a wave as he turned to leave.\n\nHe smiled all the way to the Gate and passed through the mirror surface onto Altaria. He never stopped appreciating just how incredible this technology was.\n\nHe approached the agent's desk and was pleased to see a male Altarian working there. Likely working the unpopular overnight shift as well, but working none-the-less! The clerk's face split with a wide and thrilled grin.\n\n\"Ambassador Danner!\" he exclaimed.\n\nJack gave him a surprised look. \"I'm not-\"\n\n\"You will always be Ambassador to us! You opened our eyes to our self-imposed inequality and showed the way for us to regain our dignity and purpose. We were meant to stand beside our females, not wallow in self-indulgence. We thank you for that!\" the male gushed.\n\n\"Oh! Well, thanks!\" Jack mumbled.\n\n\"I'm Thesson,\" the clerk said, thrusting a hand towards Jack, who gripped and shook as the male's smile widened. \"I want you to know that we are behind young Alexander's efforts to revoke that law which banished you from living on Altarian soil. We've learned the Queen is unofficially behind our cause as well.\"\n\nJack smiled. His banishment had been going on for twelve years, yet these guys still held out hope.\n\n\"We want you reinstated to your rightful role as Ambassador as well!\" Thesson asserted.\n\nJack grinned. \"That's really nice of you... guys. How many are in your group?\" he asked curiously.\n\n\"At last count, we were just four members away from ten thousand!\" Thesson said with a thrilled smile.\n\nJack paused in surprise. He'd been expecting maybe twenty to thirty members, not ten thousand! \"That's amazing! And you've all joined the workforce?\"\n\nThesson nodded bashfully. \"We don't have the training to take on positions of higher authority, but we're trying to be supportive members of society.\"\n\n\"That's awesome! Really! Anything you can do to make the lives of those around you a little better, that's what it's about! I'm very impressed and proud of all of you!\" Jack gushed and vigorously shook Thesson's hand once more. The male looked so happy. Tears were coming to his eyes, so Jack released his grip. \"I'm here to see the Queen, and I'll be sure to let her know how impressed I am with you and the group- does it have a name?\"\n\n\"STAMPEDE, Stand Tall Altarian Males, Professional Employment Delivers Equality,\" Thesson said with pride.\n\nJack froze as his first impulse was to burst into laughter. Thesson didn't deserve the disrespect that laughter might imply. He called upon his rusty Ambassador skill set to bring an expression of pride to his face. \"Queen Elissa is likely already aware of your efforts, but I'll definitely lend my backing to the group.\"\n\nThesson's eyes were visibly glassy now. \"Th-th-thank you, Ambassador Danner! That means so much!\"\n\nJack nodded, and with a wave, moved towards the exit before Thesson completely lost his composure.\n\nHe stepped outside and took a deep breath of the fresh air. He loved Altaria and missed living here. Dawn was arriving, and Jack smiled at the idea of being able to enjoy the magical time of day twice in one day. As the two planets had identical size and spin rates, the Chuuruthian Gate Terminal he'd entered was purposefully built where it was to closely match the time of day at the Altarian capital's Gate Terminal.\n\nJack knew he had a few hours before his meeting with Elissa, so he picked a direction and began to jog. He missed this too. Altaria had the most awesome path system! He jogged then picked up his pace until he fell into his comfortable rhythm once more. The path flew by under his feet as he enjoyed the scenery and the cool morning air. There was almost no one on the pathway, so for a bit, it felt like he had the planet to himself.\n\nSoon enough, he heard the tell-tale buzz of groundskeepers working on the lush parkland he was running through. Coming around a corner, he spotted a group of seven Altarians working on a section of the garden. Two female workers were operating the heavier equipment as five males planted, trimmed, and gathered the trimmings. They all turned to watch as he approached, so he decided to stop to say hello. He was seriously interested in getting an impression of the new dynamic of an Altarian mixed-gender workforce.\n\nHe noted the males were all looking to the females who were likely to be senior in level. One female appeared to be much older than the other workers, so Jack slowed his run to a jog, then a walk, and stopped before her. She eyed his horns then looked him in the eye.\n\n\"Are you the one who killed my GowGow tree?\" she asserted.\n\nJack's eyebrows rose. He remembered the event, but he had no idea anyone claimed the tree and held a grudge for its demise.\n\n\"Years ago, I accidentally knocked one down. I was running and had to leap off the trail to avoid hitting some... pedestrians. I collided with the tree instead. I'm terribly sorry, but it was an accident,\" he admitted.\n\nThe old female glanced at her male coworkers. \"Maybe you should have hit the pedestrians instead.\" With a sniff, she went back to work.\n\nThe younger female was a lovely chocolate brown with cream-colored spots. She beamed an excited smile at Jack, so he smiled back. \"Don't mind Wawnsa. She only likes plants. I'm Teelie,\" she said. Jack nodded and shook her hand. \"This is my squad. Drann, Gretz, Hallison, Yuuta, and Jerrn.\" Each of the males excitedly stepped forward to shake his hand.\n\n\"It's great to see you guys working on the gardens! I'm very impressed!\" Jack said, encouragingly. Teelie gave them a fond smile.\n\n\"We don't see you too often on Altaria anymore,\" she said.\n\nJack shrugged. \"I broke an Altarian law, and my punishment was to never live on Altarian soil again. I'm following both the rule and the spirit of that law. I was asked to ensure the people knew I was no longer living here. That means no daily appearances. I restrict my visits to special occasions. That's the way it's been for twelve years, and I guess that's the way it will have to be for the rest of my life. Don't get me wrong. I love Altaria, and I can't get enough of running through these beautiful gardens and paths. I miss living here, and I miss the people too. Chuuruthia is amazing, and the people there are charming, but I fell in love with Altaria first. It will always hold a special place in my heart.\"\n\n\"Do you regret breaking the law?\" Yuuta asked.\n\nJack looked to the young male's earnest expression and shook his head slowly. \"No. I regret the necessity, but that wasn't in my control. Not only was my family at risk, but Altaria was too. I had to defend both. That meant stepping outside of the diplomatic arena. That lost me the honor of being Altaria's Ambassador. While I only played a token role in the revolution on Phem Kalos, my... interference with another planet's governing while being Ambassador broke Altarian law. When I returned to Altaria, I came back to face justice and accepted the judgment.\" He saw the next question on their lips. \"Yes, I'd do it again.\"\n\nThey all smiled at him, so he felt at ease with asking them a question. \"How did you fellas end up becoming a squad?\"\n\nIt was Drann's turn to speak. \"We applied for jobs with the Altarian Labor Minister. They've had to open a new office to find work for males like us. As we have no formal training nor the required scholastic record, we could only get maintenance work. I've heard others had success in more technical jobs because they got training before they applied. We're learning on the job.\"\n\n\"How do you like the work?\" Jack asked.\n\nJerrn sighed. \"I'm so tired by the end of the day, but I feel a strange sense of satisfaction when I look at the work we've done.\"\n\nJack grinned at him. \"I had a landscaping job when I lived on Earth. It's hard work, but it's also an art. You're creating beauty.\"\n\nSome of the males blinked at him then looked around. Soon they were all wearing satisfied smiles.\n\nJack felt the itch to get back to his run. \"It was great talking to you. I'm going to be speaking with the Queen later today, and I'll be sure to let her know how impressed I was with the team!\" He waved as they cheered, and then he was underway once more.\n\nThe path rushed by under the pounding of his feet as he let them guide him. His appointment with Elissa wasn't for some time yet, so he just enjoyed himself.\n\nMore people were out on the path system, and he had to keep his eyes open for those who weren't paying attention. More than a few Altarians waved happily at him, and he had to stop for one group of students who begged him for a photo. He picked up his pace after that, and fewer people tried to stop him.\n\nWhen he finally became aware of his surroundings again, he realized he was close to Aaros' family home. She'd been renting it out to a family of Harruushans. Namely, Dann and Juul's family. He turned to run by the house to see if anyone was home. He knew they had a restaurant here on Altaria, which was more popular than the one they'd operated in Ghan, the capital city on Harruusha. He wasn't sure if they would have already headed off to work.\n\nDann wanted to get their mother off a planet that consumed its inhabitants with its barrage of energy from their sun. So far, this experiment was showing promising results. The matriarch was still going strong five years longer than what she could have expected on Harruusha.\n\nHarruushan couples who conceived children on Altaria and its colony worlds were delighted to discover their litters were smaller, with a new range of two to four kits. None of the litters reached the previous maximum of ten kits. The extra energy of their home planet's sun seemed to enable the higher birthrate, but the normal levels of energy from the suns above their new homes had an immediate and beneficial impact.\n\nDann and Juul were still working as Harruushan Diplomats, and still working on finding additional planets willing to take the remaining population from Harruusha. After seeing how well the Harruushans blended into Altarian society, Queen Elissa accepted close to fifty million refugees who were spread out amongst dozens of planets of the Altarian Empire. More were planned, but there were almost 3 billion more on Harruusha who needed to find new homes. It was slow going, but the results they were experiencing on the Altarian planets made it easier to sell the idea of accepting refugees. Where their birthrate on the home planet frightened off prospective hosts, now that threat was eased.\n\nJack also knew the Tik were working on finding suitable planets for them by scouring their records and ramping up their scans for gravity wells in space.\n\nThe race of mechanical beings was also working on a proposal to repurpose the Allsa Komanae homeworld and Allsa One to house the races the Allsa Komanae displaced or otherwise harmed.\n\nTo date, these two planets remained off-limits to the Tik and everyone not on the research teams. There was more than a little suspicion amongst the other members of the Gate Network that the research team had completed their work years ago but were maintaining exclusive access for their own purposes.\n\nJack jogged up to the front door of the home and pressed the button to announce himself. Moments later, the little screen next to the door lit up with an image of Juul. She was home, at least.\n\n\"Eeeeeee!\" she squealed excitedly, and the screen went dark.\n\nJack blinked at the screen and wondered if he should press the button again. Suddenly, the front door flew open, and Juul leaped out to crush herself against his body. She nuzzled his neck then kissed him almost feverishly.\n\n\"Juul! I'm all sweaty from running!\" he managed when he pulled back from the kiss. He recalled her visit to his place a week ago with her brother. Juul had been extra affectionate that night, as well.\n\n\"I like it!\" she giggled, green eyes flashing with delight. She kissed Jack's forehead as she was taller than him.\n\nDann arrived and smiled at Jack. \"Sorry about my clingy sister. Is, uh, Diana isn't here, is she?\"\n\nJack barely managed to contain a snort. \"No, she's at home. I just came to Altaria as I have an appointment with the Queen. I had some time, so I thought I'd go for a run. Then I happened to find myself in your neighborhood.\"\n\nJuul made an odd surprised sound, and her smile dropped away, and she stiffly stepped back from Jack. Dann looked to her cautiously. \"What's wrong?\"\n\n\"Nothing,\" she said tersely, then looked past Jack to see a taxi landing in the driveway. \"Our ride. We have to go.\"\n\nJack's eyebrows went up at Juul's abrupt mood change. He looked to Dann, but the brother was being dragged away by his sister. The tall Harruushan flashed Jack an apologetic smile as he was pulled into the taxi. It rose and accelerated away at high velocity. Odd!\n\nAbandoned at the front door, Jack watched the siblings disappear then turned to face a smaller version of Dann standing in the doorway. Maybe a brother or cousin. Jack was about to say hello when the door closed.\n\nSuch a weird encounter. He'd have to speak to Juul when she returned to see if it was anything he said or did.\n\nJack walked out to the pathway and began again but adjusted his course to take him back towards the core of the city. He still had time, but his visit with Juul made him feel a little off. He just wanted to meet with Elissa and maybe talk it over with her. Perhaps she would see him early.\n\nThen he wanted to go back home to his family.\n\nThe run back to the Queen's office building didn't take too long, though the route was much busier with the morning commute. He heard a lot of excited chatter and calls of support as he wove his way through them.\n\nHe entered the grounds through the guarded side entrance after he showed his ID. He thought it funny to need ID when his horns were enough of a give-away.\n\nWhen he exited the side corridor into the central courtyard, he saw a large group of young Altarians on the other side of a large fence. They were chanting something but exploded into cheers as Jack slowed to look at them. He'd never seen so many male Altarians in one place! The majority was still female, but this was a lot of males!\n\nHe waved, and the noise increased. He couldn't get over how loud they were. Turning back towards the steps leading into the building, he climbed to the landing and smiled at several stern-faced security officers, guarding the doors. He thought he heard something familiar, so he turned back to the gates and froze as he could now see thousands of young Altarians filling a sizeable outdoor space beyond the fence. He stood in shock as he spotted his sons Alex and Max and his daughter Gwen in the front row. He rushed down the steps and crossed the short distance to speak with them through the bars.\n\n\"What's all this?\" he asked Alex, who was grinning widely.\n\n\"You couldn't have timed your speech better!\" the young male grinned.\n\nHe shook his head then dipped forward to kiss Gwen's cheek through the bars and shook the hands of his sons. \"What speech?\"\n\n\"You spoke to some gardeners this morning. One of them recorded your words and sent the recording to several news outlets. It's gone viral! I took advantage of the upswell of interest in your case, and Max and Gwen sent out old school flash mob invitations to several popular message boards.\" He gestured to the huge crowd behind them. \"I submitted my bill to the court demanding they institute a period of limitation on the penalty for the law you broke. Ten years. If we can't get the law removed from the books, we can at least demand an adjustment of its term.\"\n\n\"I'll keep my fingers crossed for that!\" Jack said with a grin.\n\nHe glanced at the doorway and saw Elissa's secretary, Marina, gesturing to him with a cross look on her face. Uh oh. He smiled at his kids. \"It was great seeing you three. Are you coming to the barbeque party this weekend?\"\n\n\"Yes!\" they all chimed in with smiles.\n\n\"Great! See you then!\" Jack turned and rushed back to the stairs and climbed to the top. He stopped to look back at the crowd who roared another cheer. He waved to them and blew them a kiss. The volume increased, and Jack laughed happily. Altarians could always surprise him. Typically such a quiet and civil group, there was hidden passion there.\n\nHe went inside, and the secretary took one look at his sweaty body and pushed him towards the washrooms. He closed the door, stripped out of his running gear, and took a quick shower. Once he was dry, he slipped on his clean clothes from the backpack and stuffed his running gear inside. He slipped on his sandals from the bag and left the washroom to follow the secretary to see Elissa.\n\n\"Will she be able to see me early?\" Jack asked.\n\n\"Early? You're her only appointment this morning due to your interview!\" the female griped.\n\nJack gave her a cautious look. \"Interview?\"\n\n\"Your little radio stunt with that group of Stampeders! Then Alexander followed up by submitting his bill, and Elissa's children spread the news of it on every social media channel. Everyone is talking about it! There's talk of a general strike if the bill doesn't get accepted. Now the Queen has to cancel her meetings and deal with this!\" the female exclaimed.\n\n\"Oh.\"\n\nMarina sent him an exasperated look. \"Yes, oh.\" She ushered him into the large corner office and shut the door behind herself.\n\nElissa was speaking to someone, so Jack remained quiet. Something Marina just said finally trickled into his brain. She said Stampeders when referring to the groundskeepers. They hadn't mentioned affiliation with the group, but he supposed one or more of them must have been, maybe all of them. As Marina was aware of their name, it seemed they were having some impact on society.\n\nThinking a little deeper on this, he realized that if the bill managed to pass, these Stampeders could claim to have made it possible, being the instigators. That would give them even more clout in society. The name would have gravitas! He wondered if Alexander was a member of the group! And Max!\n\n\"Never a dull moment, but that's what I've come to expect from the man I love.\"\n\nJack came back to the moment at the sound of Elissa's voice. He smiled at her as she came around her desk to get a hug.",
        "He pulled her into his arms, and she seemed to melt to fit perfectly against his body.\n\n\"Mmmm! You're so warm this morning!\" she sighed with happiness.\n\n\"Oh! Well, I've been out running for hours,\" he suggested.\n\nShe pulled back to look him in the eye. \"Running. That's all you've been doing?\" she asked with a raised eyebrow.\n\nHe smiled self-consciously. \"OK, I stopped to talk to a group of male groundskeepers. I wanted to see how they were integrating with the workforce. Oh, before I forget. A sweet Chuuruthian Gate Terminal worker named Miccali sends her regards, and an Altarian Gate Terminal operator named Thesson also sends his regards.\" Elissa's eyes twinkled with delight. Jack continued. \"Thesson said he was part of a group called STAMPEDE. Hilarious name, but I've never heard of them. How have I never heard of them?\"\n\nElissa frowned slightly. \"Because we banished you from the planet.\"\n\nHe sighed with fake anguish. \"Ah, yes. There is that.\"\n\nAt her quiet gasp, he pulled her closer as she made gentle sounds of protest. He chuckled. \"I'm teasing! I know you had no choice, and I don't hold grudges. I love you!\"\n\nShe pouted as she looked him in the eye once more. \"Your children must love you too as they are causing quite a noise over this.\"\n\n\"You know how much I love them!\" Jack said, fondly. She nodded with a smile.\n\nElissa sighed and pulled back from Jack. \"I'm going to have to call an emergency session for the government ministers because of the threat of a general strike. The Empire is a complex machine that needs all of its parts moving in unison to keep it from grinding to a halt. A general strike would be extremely costly.\" She looked at Jack, but he was just smiling.\n\n\"It could happen this time,\" he said with a strange glow in his eyes.\n\nShe nodded and bit her lip, struggling to contain her excitement.\n\nHe rescued that lip by kissing her passionately. She moaned into the kiss and grabbed his ass with both hands. He almost snorted in amusement but moved Elissa to her couch instead.\n\nHe had a Queen to take to Heaven and back.\n\nIn their passion, he completely forgot to ask her what she originally wanted to speak to him about.\n\nChapter 8\n\nTonka came out of his meditation, feeling a gentle tap on his shoulder- shell! He frowned to himself then sighed as he had no face to frown with. Then he- it realized it was thinking of itself as a male. That was a little concerning!\n\nThe new experience file with all of Jack Danner's experiences and sensations was still giving it issues. Maybe even more so, now that it'd had time to integrate the file entirely. The perceptions were too intense and threatened to overwrite its Tik reality. It'd have to speak with the Tik elders after this mission.\n\nIt turned its optic to Eellooee and saw the Tik gesture down towards the planet.\n\n\"They're back?\" Tonka said as it checked its internal clock. Another day had passed. Huh. \"Shall we go see if they are ready to speak?\"\n\n\"Are you operating at full capacity?\" its partner asked.\n\nTonka stopped to examine Eellooee. \"Have I done something to give you the impression that this is not the case?\"\n\nEellooee hesitated. \"During the file integration, you transmitted... sounds. Sounds I've never heard a Tik make.\"\n\nTonka tried to recall what that might have been. During integrations, short term internal memory was disabled to prevent the confusion of recording the memory of recording a memory. It was an unpleasant feedback effect. \"What did it sound like?\"\n\n\"I know it's not possible, but it sounded like a biological creature experiencing sexual intercourse,\" Eellooee said incredulously.\n\nTonka flashed to a memory.\n\nHe felt gentle fingers touch his lips, and his eyes opened. There was Diana, reclining next to him, pushed up on one elbow gazing down into his eyes, with love in hers. She flipped her ebony hair back over her shoulder as a smile slipped onto her lovely lips. She leaned over him and kissed him tenderly.\n\nTonka snapped back to the present, and time seemed to have frozen at that moment. \"I'm fully functional,\" it stated with a carefully modulated voice. It saw Eellooee begin to relax. \"Let's see what they're up to.\" They started their descent.\n\nInternally, Tonka was deeply shaken. It knew what romantic love felt like between biological lifeforms. He- it felt the rich emotions himself for Diana. Tonka was surprised by the intense need he felt when he thought of her. Love, desire, and LUST! Woo! That last one was spicy! Better to concentrate on love.\n\nJack was a man who loved strongly and widely. There were many he loved.\n\nThey were getting closer, so Tonka pushed his memories into the background and put on his game face. He sighed. He needed to speak with the elders. No! It needed... it, not he!\n\nThe chrome guards were there again, circling the same section of the courtyard. Just inside this circle, two white garbed being stood waiting for them.\n\nTonka and Eellooee slowed their descent and hovered at head height to face the new officials. Assessor Herrall Lekk, Fifth Level, was not one of the two similarly dressed beings.\n\nWhile both were grey-furred, one gave the distinct impression of age. Tonka made the intuitive leap. \"I am Tonka, and this is Eellooee. We are Tik, an independent and sentient race of mechanical beings. We seek life to ensure it is preserved and protected. Am I addressing Assessor Dren Milo, First Level?\" it asked, facing the elder.\n\nThe being bowed and gestured to its younger companion. \"I am. This is Assessor Makrus Relius, Ninth Level.\"\n\nThe Tik dipped forward to emulate the bows they received.\n\n\"I must begin by notifying you that I demoted Assessor Herrall Lekk to Sixth Level. How he reacted to your presence reflected poorly upon the Nareshk,\" Dren Milo stated with a grim look on his face.\n\nTonka bowed once more. It was picking up cues that the two Assessors were male. It gestured with a tentacle toward the chrome guards. \"Are these beings Assessors as well?\"\n\nDren smiled indulgently. \"No, these are members of the Balance. They are charged with ensuring the citizenry follows the Code of the Righteous, always striving to advance themselves through the ninety-nine base levels to become one of the Balance. Before they can become an Assessor, they must work their way up through the nine levels of the Balance to become a ninth level Assessor. Makrus just became an Assessor a few days ago. He's risen through the ranks quickly with no demerit points at all! We've never seen such a perfect example of a model citizen! Remarkable!\"\n\nMakrus was modestly smiling though Tonka thought there might be a little smugness as well. He seemed especially proud of his perfect score.\n\nTonka was picking up an odd vibe from Dren, as well. While the senior Assessor said he was impressed with the other's perfect score, there seemed to be some tension in the older being that the younger one was oblivious to.\n\n\"When I interviewed Lekk, he mentioned you found our planet based on coordinates written in a space-faring ship's log?\" Dren asked.\n\n\"Yes, the Allsa Komanae had raider ships they would use to hunt through space. They would steal resources from planets, moons, and sometimes they would steal citizens of those worlds. Perhaps they took some from here?\" Tonka suggested.\n\nDren then made a strange noise. It was a cross between a cough and a honk. Tonka watched the senior in surprise as a memory pushed itself to the front of its mind. He went still.\n\n\"That's quite impossible,\" Makrus said quietly as his superior continued to laugh. Dren gestured for Makrus to continue explaining. With a nod, he did.\n\n\"Every citizen is registered at birth. They are vigilantly tracked throughout their lives, tallying their merits and demerits to assess where they are in the rankings of the Code of the Righteous. Under normal circumstances, every citizen undergoes an annual assessment to determine if they've advanced to the next level. As there is a reward for advancing, citizens are encouraged to track their merits and apply for an assessment early. If they pass the interview, they may advance. If they don't pass and it's determined that they are abusing the Code of the Righteous, penalties are levied. There are no Nareshk citizens we aren't aware of, and none can simply go missing.\"\n\nEellooee looked at his frozen partner and asked the next obvious question. \"Please pardon my ignorance, but what about accidental deaths or those caused by criminal activities?\" it asked, and both Assessors smiled.\n\n\"Accidental deaths are extremely rare, and in those cases, the bodies are always found. Rarer still is crime. Citizens found to be chronic demerit collectors are terminated to prevent that infection from spreading. This is one of the duties of the Balance,\" Dren explained. \"None of our citizens has gone unaccounted for. These Allsa Komanae couldn't have stolen one of our people-\"\n\n\"There was one!\" Tonka blurted as it came out of its daze. The senior Assessor's laugh had triggered a cascade of memories from Jack Danner's experiences. When Tonka visually examined the beings before him and linked in the honking exclamation, he had to conclude they were as close a match as the Tik had ever found for Eve, Jack Danner's partner from the Allsa Komanae homeworld.\n\nDren frowned at Tonka. \"We just explained the impossibility-\"\n\n\"My apologies. I don't have a perfect image of the being in question, but we know she was abducted at a very early age. She spent the entirety of her life as a slave on the Allsa Komanae homeworld, but we couldn't match her to any known race. She bears a very strong resemblance to your race, including how you sound. Let me project the image I do have.\n\nTonka pulled up the memory and captured two stills. One was of her entire body, and the other was just her face. Unsure if there were sexual taboos involved, it blurred out the breast and groin areas on the full-body image.\n\nIt projected the images on the white stone of the courtyard. The two Assessors leaned forward to peer at them. They shared a troubled look then Dren turned its attention back to the Tik.\n\n\"This being bears a strong resemblance to our race, but a face to face meeting would be required to confirm it. We would have to match its DNA to ours, and if it was one of our race, we could identify its parentage,\" Dren suggested skeptically.\n\nTonka suddenly realized it wasn't sure if Eve even wanted this. It had gotten caught up in the excitement of a mystery the Tik had been tasked to resolve. \"I will convey this to her to see if she is willing.\"\n\nThe two Assessors looked at the Tik in confusion. Tonka decided to move forward with the standard first contact protocol process. \"Aside from the Allsa Komanae, which you've indicated you were not aware of, have you encountered any other races?\"\n\nDren made a sharp cutting gesture. \"Your arrival in our skies was our first encounter with life from beyond our world.\" The senior looked upwards. \"Is your vessel in space above us with others of your kind?\"\n\n\"No, the Tik don't require spacecraft to travel from planet to planet,\" Tonka explained.\n\n\"Then, you're able to navigate through space with your mechanical bodies? That's quite the feat,\" Makrus exclaimed.\n\n\"We don't travel through space. We're able to open Gates that allow us to move directly from the surface of one planet to another instantly. The Tik are the only ones with the ability to do this. Before you can make use of this technology, you must apply for access to the Gate Network. As part of the application, you'll be asked to follow a set of conventions for peaceful coexistence with the other races of the Gate Network. If you agree to follow these conventions and your application is accepted, your planet will be granted one or more Gate Terminals. The Tik manage the Gate Network and operate the Cargo Gates in the Terminals. You will be expected to provide personnel to operate the Personal Gates. You will set your planet's policy on acceptable visitors, and this policy will be sent to every other Gate Terminal so they will be aware of the policy. The Tik ensure the Gates are not used for military purposes. They are for trade and personal use only,\" Tonka explained.\n\n\"We could restrict the Gates not to allow anyone on our planet?\" Dren asked.\n\nEellooee was a little surprised by that. \"Yes, you could, but if you do, you will find no other planet will accept visitors from yours.\"\n\n\"So how many planets do these Gates connect to?\" Makrus asked.\n\n\"Thousands,\" Tonka said. \"You don't have to decide now. We're just here to make the offer now that we're aware of your existence. You can set a time interval for us to leave and return to learn your answer then. You can also refuse now and set a time interval for us to return to see if you've reconsidered. No one is forced to join the Gate Network. If you don't feel it offers you value, then you don't need to join. The Tik believe in distributed populations to ensure survival, but we won't attempt to force it upon anyone.\"\n\nDren looked to the younger Assessor. \"There is still the matter of the potentially stolen citizen. It is a matter of honor and righteousness to ensure every member of our race is protected by the Code.\"\n\nMakrus nodded with a flare of conviction on his face. \"It must be done.\"\n\nDren smiled, but it didn't reach his eyes. \"I can think of no one else I'd trust to do this.\" Makrus puffed up with pride.\n\nTonka felt uneasy about his attitude but acknowledged it was its fault in mentioning Eve. \"I will immediately bring the matter to her attention and present her with your offer to confirm her identity.\"\n\nDren seemed dissatisfied with this but nodded. Makrus looked a little upset he wasn't going to meet her right now.\n\n\"How much time would you like before we return?\" Tonka asked.\n\n\"Four days,\" Dren said with no hesitation.\n\n\"Until then,\" Tonka said and tight beamed instructions to Eellooee. A small Gate snapped into being behind them, and the younger Tik went through immediately, followed by Tonka, who collapsed the Gate behind itself.\n\nEellooee looked around and saw they were on Chuuruthia. It relaxed. \"I believe we should first go to speak to the elders. Your behavior on this mission has been erratic, and I'm concerned. Something in the data file you integrated has resulted in odd behavior.\"\n\nTonka found himself- itself hesitant to return to the Tik headquarters. It was highly likely the mission would be assigned to another Tik. He- it was the one who divulged the existence of Eve to the Nareshk. He had to speak to Eve himself. To apologize and set things straight. He looked to Eellooee. \"Agreed. Our participation in this mission is over. It will be handed off to other Tik to complete. Please report to the Tik Enclave to submit your mission report. I will join you there.\" He immediately left and flew in the direction of the Trade Commission office. He heard a brief exclamation from Eellooee then the other Tik flew off towards the Enclave. Tonka wasn't sure how much time he would have to speak with Eve before Eellooee's report triggered a response from the Elders to seek him out. He knew where Eve was, so he altered his course and accelerated to give himself time to speak.\n\nHe reached the park and slowed as he flew over the pond and followed the slope up to the Eastern peak. Jack's home was here. When he reached the front door, he hesitated as he was experiencing a strange sensation of d\u00e9j\u00e0 vu. He reached out a tentacle and pressed the announce button. Moments later, a voice called out.\n\n\"Hello? Who is it?\"\n\nTonka gasped as Diana's voice strummed across his heart.\n\n\"Hello?\"\n\n\"A-apologies. My name is Tonka. I'm a Tik, and I have information on a possible location of Eve's home planet.\"\n\n\"What?!?\"\n\nTonka sighed as that was Eve's voice!\n\nThe intercom went quiet, and moments later, the door pushed open to show the two females standing in the doorway. If Tonka had a jaw it would have dropped as he stared in wonder at the two beauties. He could see it now. They were practically glowing with loveliness.\n\n\"Please come in,\" Eve offered and stood aside.\n\nTonka moved into the home, and Diana smiled at him. He swooned slightly, dipping as his senses wobbled.\n\n\"Are you ok?\" Diana asked gently.\n\n\"Yes, my apologies. It was... a busy day.\" Tonka felt silly using that excuse, but the taller woman seemed to accept the answer immediately.\n\nEve led them into the living room and set up three chairs by the window facing the valley. The late afternoon sun was beginning to poke inside the window, so the glass was tuned to cut out the heat and some of the brightness. They settled in.\n\nTonka allowed himself a moment to gaze upon the two females. Then he got to business.\n\n\"Yes, right. My partner and I were tasked with investigating coordinates found in an Allsa Komanae raider ship's log. We found a planet in the neutral zone between the Jool and Qui Qui Qui territories. It's a single habitable planet orbiting around a yellow sun with moderate radiation. The inhabitants showed no signs of space travel but had launched communication satellites. We went down to the surface to make first contact and found a race of beings who look like this.\"\n\nTonka projected the much clearer images he'd taken of Dren and Makrus.\n\nEve gasped, and her eyes went wide. These two looked like her. It was the first time she'd ever seen anyone whose appearance matched hers.\n\n\"They have offered to test your DNA to confirm if you are a member of their race and to confirm your parentage. They keep extensive records on all of their citizens,\" Tonka offered but something in how he said it must have caught Diana's ear.\n\n\"How extensive? Invasive?\" she asked.\n\nTonka was momentarily lost in her green eyes then returned to the moment. \"I don't know if I'm qualified to classify it as invasive. Their society appears to be based on a point system with tiered ranks. Ninety-nine base levels all citizens from birth must traverse to rise in social standing, nine levels where you maintain the safety and security of their society and enforce something called the Code of the Righteous, then a final nine levels where your task is to assess the rest of society to ensure they are following the Code.\"\n\n\"Doesn't that make you feel all warm and fuzzy,\" Diana remarked with a grim expression.\n\n\"It certainly raised some red flags for me,\" Eve agreed. She looked at the Tik, which seemed to be swaying ever so slightly. \"Are you certain you're ok, Tonka?\"\n\n\"Huh? Yes! Yes, I'm well. Thank you!\" the Tik answered quickly. \"I am, or was, to go back in four days to get their answer on whether or not they will be applying for entry into the Gate Network. I indicated to them I would ask you if you were interested in confirming your genetic match.\"\n\n\"Why wouldn't you be going back, Tonka?\" Diana asked quietly.\n\n\"Um, reasons.\"\n\nDiana reached out a finger and ran it down the side of the Tik's chassis as Eve watched in surprise.\n\nTonka made a noise like a quick intake of breath then sighed as her finger traced its way down its side. Diana leaned closer to the Tik. \"You've been given Jack's memories, haven't you,\" she purred breathily, her lips almost touching its chassis.\n\n\"I- I can- I can neither confirm nor deny this happened.\" The non-disclosure rule, which prevented Tonka from discussing the file with anyone but Jack, was firmly in place.\n\nWide-eyed, Eve reached out a hand and placed it on Tonka's other side.\n\n\"Oh! Oh my!\" Tonka gasped as pleasure rushed through its mind.\n\nEve looked at Diana. \"What's going on?\"\n\n\"Jack shared his memories with the Tik somehow. We're in there. I thought it was only with Ray, but it seems those memories are making the rounds.\" Diana dropped back into her chair with an angry thump as Eve leaned back into hers more slowly."
    ],
    "authorname": "BurntRedstone",
    "tags": [
        "harem",
        "romance",
        "science fiction",
        "sci-fi",
        "sci-fi romance",
        "science fiction romance",
        "drama"
    ],
    "category": "NonHuman",
    "url": "https://www.literotica.com/s/jacks-righteous-gig"
}
{
    "title": "Sex Education Ch. 03",
    "pages": [
        "After a weekend of posing nude along with three equally nude and beautiful women, I spend the next two weeks working and replaying the enticing visions of naked women. I would not call it time wasted.\n\nDeidre calls me on a Thursday and asks if I could come out for the weekend. She wants to do some solo work with me as well as some finishing touches with just Mim and Ruthann since Crystal had to work.\n\nI offer to drive and pick up the women, including Chrissy, who decides to join us, and we arrive at Deidre's a little before 7 on a Friday night.\n\nWe meet in the kitchen and Deidre has a manicotti supper waiting.\n\nAfter cleaning up, she asks if I will go with her to the studio. The others stay by the fire to read or play board games.\n\nThe studio is cool so Deidre turns on the gas fireplace and says I can pose next to it. \n\n\"I'm going to be doing details of your erection,\" she says and then starts giggling. \"God, that sounds awful when I hear it out loud.\"\n\nI laugh along and start to strip from the waist down.\n\nDeidre places a high-back chair behind me and I can lean against it as if it were the mast. As Deidre adjusts some lights and arranges her easel and supplies, I stroke myself to try to get hard.\n\nI'm about half-way there when she is ready to begin.\n\n\"Trouble?\"\n\n\"Sometimes he's a bit shy,\" I say.\n\n\"May I?\"\n\nDeidre has not touched me since the massage and the thought of it alone gets me three-quarters of the way.\n\nShe is dressed in jeans and an oversized denim shirt with a white turtle neck showing underneath. She's wearing thick socks and moccasins.\n\nStanding in front of me, she takes me in her hand. Her grip is strong and the skin rougher than her daughter's. She looks up and smiles.\n\n\"Why should others have all the fun?\"\n\nShe slips her other hand on my balls and gently massages them. In short time I am hard with even a bit of moisture at my tip.\n\nDeidre notices and wipes it with her finger, smearing it back on my shaft.\n\n\"Mac, thanks for doing this,\" she says as she strokes me. \"You are the best model I can imagine. I know it must not be easy to pose nude and then I add the pressure to ask you to be erect. Not many guys would go along with this.\"\n\nI shrug and say, \"Well, I was a bit intimidated at first.\" Then looking at this extremely attractive woman with her hand on my dick, I add, \"It does have some upside to it.\"\n\nDeidre continues to gently stroke me, inducing the beginning of pressure in my balls. \"Uh, think I'm ready to go now, Deidre.\"\n\nShe grins and releases me as I have achieved the goal.\n\nShe takes her position behind the easel. She sketches in silence for a long time, moving her gaze from my groin to the sheet. She asks me to turn a little one way or the other. I have to stroke myself a few times to maintain the erection.\n\n\"The thing is, Mac, since you are not circumcised your tip is slightly different from a cut penis. I want to make it clear that you are intact, just as our Odysseus was.\"\n\nDeidre moves a chair in front and sits with her eyes dick level. She now has a small pad in her lap and is drawing a series of quick takes of my glans. She runs a finger down the underside of my shaft and I shiver. \n\n\"Could you hold this up a bit more, Mac?\"\n\nI pull my erection toward my stomach. She sketches details of my balls. A couple times she reaches to them and holds them in her palm while drawing with her free hand.\n\nAs she is doing this, a voice calls out from the doorway.\n\n\"Sorry to interrupt.\"\n\nDeidre continues to hold my balls and we look up to see Mim standing there with just a towel wrapped around her.\n\n\"Going for a hot tub, didn't know if you two were ready for a break.\"\n\nMim's eyes travel to my erection and Deidre's hands on my balls. Smiling, she adds, \"Of course, it might be best to continue what's at hand.\"\n\nShe turns and heads out.\n\n\"God, I hope she doesn't think that...\" Deidre pauses searching for the right word.\n\n\"That you were holding my balls in your hand,\" I offer.\n\nShe blushes and turns her head up to face me. Her eyes light up with amusement.\n\n\"Yeah, that's it.\"\n\n\"Probably noticed,\" I add, \"but I'm sure she knows it's all for art's sake.\" Pausing, I continue, \"Right?\"\n\nDeidre can't hold my gaze. \n\n\"Well, let's call it a night and join them. Ok?\" she says.\n\n\"Sure.\" I realize I have never seen Deidre naked think she will probably go nude in the tub. I surprise myself by how much I am looking forward to it. My dick gets harder.\n\n\"Well, you can go along, Mac. I'll grab some towels from the bath, get ready and join you.\"\n\n\"Or,\" I say.\n\n\"Or, what,\" she asks.\n\n\"Or, you can undress here and we get the towels together.\"\n\n\"Oh, I don't think...\"\n\n\"No need to think,\" I say. I reach out and undo the top three buttons of her denim shirt. \"Just do it.\"\n\n\"Uh, well, ok.\"\n\nSlowly her hands move to her shirt to release the remaining buttons and slip it off. I can see the points of her nipples pushing through the cotton fabric. Deidre bends and slips off her mocs and socks. Standing she undoes her jeans and shimmies out of them. She is wearing black bikini bottoms. Her legs look as long as Ruthann's and are equally shapely and toned. \n\nSighing she grabs the bottom of her turtleneck and pauses.\n\n\"I have not undressed in front of a man in a while.\"\n\n\"Just like riding a bike. It'll come back to you,\" I say as I admire her figure.\n\nShe giggles and pulls it off. I stare at her breasts. They are shaped like Ruthann's but are slightly rounder and bigger. Instead of Ruthann's puffy pink tips, her nipples are dark and hard. Her stomach is not completely flat like a young girl's but is certainly not flabby. I can tell she must work out. Her arms are tight and her waist narrows before flaring to wide hips.\n\nDeidre tugs down her bikini bottoms revealing a dark and thick bush that is trimmed to a rectangle. I notice a scar running across the top of her pubic area and assume that Ruthann was a C-section.\n\n\"God, stop staring,\" she hisses. \n\n\"I can't help it. I like what I see.\"\n\n\"Jesus! This old body?\"\n\n\"How old are you?\"\n\nLaughing out loud, she says, \"Is that politic to ask?\"\n\n\"I only do so because if I did not know Ruthann was your daughter, I'd say you were in your early thirties.\"\n\nDeidre blushes and her entire body turns pink. She always seems such a self-assured woman that I am surprised by her reaction.\n\n\"44\" she whispers.\n\n\"Deidre, you are beautiful. Truly! Beautiful and sexy.\"\n\n\"You're just saying that to make me...\"\n\nI move close, slip my hand behind her neck and bring her face to mine. She has a strange look in her eyes as I move my mouth to hers. I kiss her. Softly at first, then with some force. Her eyes remain open, searching mine.\n\n\"I am saying it,\" as I pull back, \"as a man with a hard-on looking at you.\"\n\nI kiss her again and this time she responds, melting her body to mine. My erection pushes against her stomach, her breasts burrow into my chest. I slip my hands on her rear and pull her tighter. She grinds against me as her tongue searches my mouth.\n\nI am surprised as I realize how much I have wanted to do this with her. Almost from the moment I saw her, I've experienced a sexual desire, but have not let it escape its cage. Now, the monster of desire is breaking free. My blood is pumping heat through my body.\n\nSlowly we pull back and look at each other.\n\n\"Well, that was unexpected,\" she says.\n\n\"Maybe.\"\n\n\"What do you mean 'maybe'?\"\n\n\"I mean you were playing with my dick and balls. That can have an effect.\"\n\n\"Art,\" she says smiling. \"Simply, art.\"\n\n\"Ok. Well, let's get to the hot tub before art becomes porn.\"\n\nWe head for the bath to grab towels. I fall a step behind.\n\n\"I can't believe you're checking out my ass,\" she calls over her shoulder.\n\n\"Definitely worthy of checking,\" I say.\n\nShe gives it a wiggle, grabs two towels and we move toward the spa.\n\n\"What about my...\" I look down at my hard-on.\n\n\"They've all seen it before. Come on.\"\n\nWe push out into the chilly night. Mim, Ruthann and Chrissy are soaking and chatting.\n\nThey turn and look at us.\n\n\"Aye, Mac, I think the posing is over and you can relax now. If you get my meaning,\" calls out Mim.\n\nAll the women laugh.\n\n\"Sometimes it takes a while to relax after such an intense artistic experience,\" I deadpan.\n\n\"Got ya,\" she says, \"Mind we aren't complaining.\"\n\nDeidre and I lower ourselves into the hot water. I am between Mim and Ruthann. Deidre is opposite me and Chrissy is next to her.\n\nWe soak in silence.\n\n\"So what's the plan for tomorrow, Dede?\" asks Mim.\n\n\"Well, I want to work on the big canvas. There is some shading and details that I'd like to capture. We can work around Crystal not being here.\"\n\n\"Chrissy can take her place,\" offers Ruthann.\n\nWe all look at the blond.\n\n\"God, I don't know,\" she says softly.\n\n\"I think we can do it without Crystal,\" says Deidre. \"So, you're off the hook, Chrissy.\"\n\nRuthann lays her hand along my shaft and softly runs it up and down. I take in a deep breath. She looks at me and smiles. With the bubbles of the spa hiding her action, she keeps lightly stroking me while her mother is a few feet away.\n\nHer hand feels fantastic, but my mind is telling me to be very careful. Having Ruthann help keep me hard while we all are posing is one thing. Having her hand on me now is definitely crossing a barrier.\n\nI take her hand and ease off my erection. She resists at first, but then concedes. She holds my hand and pulls it to the inside of her thigh, nearly touching her dark patch. If I move my pinky finger less than an inch, I will be rubbing her pussy. Ruthann opens her legs wider.\n\nI squeeze her thigh and remove my hand. My mind is as foggy as the mist rising from the spa. \n\nAfter a while Ruthann and Chrissy say they've had enough. Ruthann kisses my cheek, squeezes my erection one last time, and climbs out. They stand by the side drying off. I marvel at the two young, nubile bodies. I try to banish the nasty thoughts. \n\nI yelp as a foot lands in my crotch.\n\n\"You ok, Mac?\" asks Ruthann.\n\n\"Uh, sure, just had a little spasm. Probably from holding a pose too long.\" I try to keep my voice calm as now two feet cradle my dick.\n\n\"Night all,\" calls Ruthann. She and Chrissy leave.\n\nDeidre is giving me a foot fuck under the water. I hope the timer doesn't go off to kill the bubbles and expose her actions to Mim.\n\n\"Well, I should be going along as well.\"\n\n\"No need to rush,\" I say.\n\n\"Oh, I think the stars are moving about the sky into a new alignment,\" she says. \"I best be on my way before they are in order.\"\n\nI feel her hand on my thigh. Slowly her fingers creep toward my crotch. She smiles as she feels Deidre's feet.\n\n\"Yes, a very good time for me to be running along.\"\n\nShe runs her hands over her friend's feet clamped around my erection. Her one hand comes to rest on the tip of my penis that extends up from Deidre's feet. Deidre's feet move aside and Mim runs her fingers up and down, ending with a caress of my balls.\n\n\"Mac, I am never one to stand in the way of the force of nature.\"\n\nShe kisses me softly on my cheek and slips her hand off my tip after giving it a gentle squeeze.\n\nI watch her body, sleek from the water and bathed in moonlight, emerge from the tub. She stands still and I look up into her blond bush. I cannot make out detail in the light, but my heart flutters as I take in her naked beauty.\n\nAs she walks away, Deidre begins to work her feet more aggressively. \n\n\"God, I almost came when you touched me,\" I croak.\n\n\"I take that as saying it felt good.\"\n\nI nod and grin.\n\nDeidre looks over my shoulder. \n\n\"They've all gone back,\" she says. \"Let's get out.\"\n\nI stand and she moves through the water. Kneeling, she takes my hard-on in her mouth. I moan.\n\nAfter a few seconds, she releases me and stands. \n\n\"Let's go to my room.\"\n\n\"Deidre, are you sure?\"\n\n\"Mac, I am very sure. And, since you are about to fuck me, I think you can call me Dede.\"\n\nForgoing any clothing we race through the house and into her bedroom. \n\nShe closes the door and comes into my arms.\n\n\"I want you, Mac. I've wanted you ever since I saw the tape. I wanted you the second you walked into my house. I wanted you even more when I touched your cock. When you kissed me tonight, it was all I could manage not to fuck you right in the studio. I want you to fuck me now. But, we can stop right now and I will never mention this again. I will never let it stand between us.\"\n\n\"Is this just some physical reaction?\" I ask.\n\n\"True, you are an attractive man. And, I am a horny woman. Add to those two facts that I have been looking at your fabulous boner for days makes this a perfect storm of eroticism.\"\n\n\"So, am I just a hard cock?'\n\nDede shakes her head vigorously.\n\n\"No, honestly. Now, that I've gotten to know you, I want you even more. We all like you very much.\"\n\n\"We?\"\n\n\"Yes, me, Ruthann, Chrissy and Mim.\"\n\n\"And, they know?\"\n\n\"Know that we are here?\"\n\n\"Yes,\" I say.\n\n\"I've not said anything, but I think they have their suspicions. Does that bother you?\"\n\n\"I don't know. I haven't had time to think.\"\n\n\"Are you worried what Mim will think?\"\n\n\"Why should I?\"\n\n\"Oh, God, Mac, we all know you are like half in love with her.\"\n\n\"You do. I mean all of you, even Mim?\"\n\n\"Yes, we're not blind. The way you look at her, how you smile when you see her walk in, how you talk to her.\"\n\n\"Guess I'm not so subtle.\"\n\nDede laughs.\n\n\"But, she won't even go out...\"\n\n\"Mim doesn't date.\"\n\n\"I know she told me. I can't figure out why.\"\n\n\"I can't say.\"\n\n\"Can't or won't?\"\n\n\"Either way, it would not be my place.\"\n\nI pause and think this is a strange conversation between two naked people who have already committed to screwing each other. Still, I need to push it one step further.\n\n\"Does she like men?\"\n\n\"What? You think she's gay?\"\n\n\"Not really, but you never know.\"\n\n\"One thing I can say is she is no more gay than I am.\"\n\nI look at this incredible naked woman in front of me. My erection throbs and I come to my senses. My hormonal senses, that is.\n\n\"Of course, I have no idea how gay you are.\"\n\n\"And, what do you intend to do about that.\"\n\n\"Conduct a deep and penetrating inquiry.\"\n\n\"Then, please by all means begin.\"\n\nI pull her to my arms and we kiss. Slowly, then let our passions build through this most basic human contact. Our tongues taste and explore each other as our bodies push hard together.\n\nI back her to the bed and reach around to throw the top covers to the floor. We fall onto the sheets keeping our mouths locked on each other.\n\nI move my mouth to her neck and ear. Dede purrs and I move to the other side. Slowly I work to her right breast. It is small enough to take into my mouth. Dede moans approval as I play my tongue over her nipple while sucking the entire breast. Releasing it, I concentrate on just her nipple, which is now rock hard. She lifts her back pushing her breast to me. After flicking and licking, I catch the nub between my teeth and bite. She curses and grabs the back of my head and pulls me toward her. With her nipple between my teeth, I pull back and stretch her breast. \n\n\"Fuck, that feels so good,\" she breathes.\n\nI release it and pay equal attention to her other breast.\n\nDede is moving underneath me, thrusting with her hips. I slide my hand up the inside of her thigh and find her moisture already running down toward the sheets. Kissing my way down her belly, I lick her navel. I cover her C-section scar with mini-kisses.\n\nHer hands push against my shoulders, urging me south.\n\nI spread her legs, lift her butt to slide two pillows underneath, and lie between her.\n\nI begin at her ankles and make small kisses, licks and bites up the inside of her leg. She urges me on with little groans. I repeat the process on her other leg, finally pausing at the top of her thigh to bite against the stretched muscle and ligament.\n\nI can smell her aroma. It is strong and sweet-smelling.\n\n\"God, lick me there, Mac. Please. Now.\"\n\nKnowing I've teased enough, I press my tongue to the bottom of her slit and slowly lick to the top. \n\nShe screams.\n\n\"Well,\" I say with her sound echoing in my ears, \"if the others had any doubts before about what we might be doing, they are now dispelled.\"\n\n\"Fuck them,\" she rasps.\n\nI swirl my tongue around her rigid clit. Pulling back the hood to completely expose it, I pull on it with my lips. Dede moves her mons up toward my face as hoarse gasps escape her lips.\n\nHer lips have spread showing the deep pink of her interior. Her interior lips are now hanging down. I take each one by turn in my mouth and pull on them. Next, I kiss and softly bite her outer lips. Dede is muttering a series of \"yes, yes\" and squirming.\n\nI place her legs over my shoulder and they fall onto my back, further lifting her butt. I run my tongue from her moisture-rich pussy to her little pink anus. I rim it with my tongue and she again cries out.\n\nI lick back up and bury my tongue inside her vagina. She is bucking hard against my face. I slip one, then two fingers deep inside, feeling the walls of her vagina clinch around them. I search and then find the magic spot. I massage with my fingers and take her clit between my teeth. Holding it still, I use my tongue to abuse its tip as my fingers ply her G-spot.\n\nDede is bucking hard and then gives in to her orgasm. She cries out, and her body jerks for several seconds. I can feel her orgasm around my fingers trapped deep inside her.\n\nShe is still breathing hard as I retract my fingers and sensing a stream of her essence easing out. I move up on my knees, rest her legs straight up on my shoulders. Tossing the pillows aside, I place my tip at her still spread hole.\n\n\"Do you want me to use a condom?\"\n\n\"No, fuck me hard, now.\"\n\nI push in with one continuous motion.\n\n\"Oh, God,\" she says.\n\nGiving her no time for adjustment, I start long hard strokes.\n\n\"If you want to fuck,\" I think, \"then let's fuck.\"\n\nDede is riding with me on every stroke. She is pulling her nipples and pushing her pubis against mine. She is becoming more vocal.\n\n\"Dede, you're going to raise the roof.\"\n\nShe grins and then pulls a pillow over her mouth.\n\nI can sense her intensity increase and pound harder. She bucks one last time and I feel her contract around my dick. She screams into the pillow and I feel a wet stream running down my balls.\n\nI have not cum yet. I pull out and flip her onto her stomach. Pulling her hips up I look with wonder and lust at her dripping pussy and pink rosebud.\n\nI grab her hips and slam my dick back into her. She screams.\n\nI am now pounding her, my balls slapping her pussy hard with every thrust. He pussy is oozing all over. I run my thumb along the bottom of her pussy and coat it with her juices. Remembering how she massaged my prostate, I place my thumb at her opening.\n\nShe cries out in a raspy voice, \"No. I can't take it.\"\n\nI plunge my dick deep inside and push my thumb past the first ring of resistance of her ass. \n\nDede just says, \"Ohhh.\"\n\nI can feel my orgasm rising quickly. I am going at a fast pace, pounding and pounding. My thumb is up to its limit and I am moving it back and forth.\n\n\"I am close, Dede. Where...\"\n\n\"Cum inside me. Do it now. I'm cumming.\"\n\nI stroke a few more times and now my balls are tight and ready to explode. I push as deep as I can with my dick and thumb and the waves of pleasure overtake me. I keep shooting inside Dede and she is screeching into the pillow. I feel her spasm as her body shakes and then collapses flat on the bed. I am still inside, but begin to soften.\n\nReluctantly I pull my dick and thumb out. Pulling her on her side I spoon her from behind.\n\n\"As good as it looked?\"\n\n\"You bastard,\" she says, pulling my hand to her breast. \"I have never been fucked like that.\"",
        "\"Well, Madam Artist, let me say, you inspire me.\"\n\nShe laughs softly and we both drift into sleep.\n\nTwenty minutes later I feel Dede stirring.\n\nI kiss the back of her neck and gently fondle her small breast.\n\n\"Awake?\"\n\nShe responds by pushing her butt back into my crotch.\n\n\"I need to pee,\" I say.\n\n\"Me, too, and clean up a bit.\"\n\nWe roll out of bed and walk to the attached bath.\n\nI stand at the toilet as Dede uses the bidet gently removing the remains of our lovemaking.\n\nI wash my hands and dry them. Finishing she offers to clean me.\n\nStanding by the sink, Dede uses a washcloth to wipe my dick with warm water. Then, dropping to her knees she plants tiny kisses up and down the shaft.\n\n\"You keep doing that and I won't be responsible for the consequences.\"\n\nDede looks up and grins. \"Then, let's move to the bed and discuss specific consequences.\n\nAvoiding the large wet spot, we cuddle on one side of her king-sized bed.\n\n\"Mac, thanks for before. That was special. It's been a while since I was with a man. And, God, that was worth the wait.\"\n\n\"I think you're just not remembering all that well.\"\n\n\"When it comes to fucks,\" she says, \"I have an excellent memory. This was special.\"\n\nI kiss her.\n\n\"Dare I ask if there is anything left in reserve?\"\n\n\"Oh, I think there is more than enough,\" I respond.\n\n\"Mac, that was so intense and strong. Without sounding demanding, do you have a slow and steady speed?\"\n\nI chuckle.\n\n\"What?\"\n\n\"I love how direct you are. It is so refreshing to have a woman say what she wants. And to answer you, yes.\"\n\nWe kiss for a long time, letting our fingers softly explore each other. Dede takes my soft dick in her mouth and coaxes it to life.\n\n\"Later, she says,\" holding my hard-on in her hands, \"if there is a later, I would love to just make love to you with my mouth.\"\n\n\"In that case, Dede, I promise you there will definitely be a 'later'\"\n\nI slowly work my way up and down her body, covering every inch with kisses and nibbles. Dede seems to enjoy the time I spend on her compact butt.\n\n\"Before, when you used your thumb,\" she coos, \"that was the first time for me.\"\n\n\"And?\"\n\n\"I liked it a lot.\"\n\n\"Enough to explore more there later?\"\n\n\"Thinking about it,\" she said with a small laugh, \"if there is another later.\"\n\n\"Sounds like lots of 'laters' building up.\"\n\n\"Mmm,\" she whispers as I run my tongue around her pink rosebud, \"I know and I'm already looking forward to later.\" I push hard against her butt hole with my tongue. She moans and raises her ass to my tongue.\n\nI turn her onto her back and position myself over her. As my tip rubs against her thigh, she takes hold of me and moves me up and down her slit, rubbing it around her clit. Soon, my glans is wet with her fluid.\n\n\"Ease it in, Mac, I'm a tiny bit sore.\"\n\n\"We could stop.\"\n\n\"I'm afraid I'd be driven to murder.\"\n\n\"Well, easy does it, then.\"\n\nI split her lips and her breath catches in her throat.\n\nRemaining still, I lower my head to kiss her lips. She returns my kiss and we let our tongues play. I appreciate that she does not hesitate to offer me her tongue even though I had just rimmed her. Dede is an adventurous lover and I shake with anticipation of exploring more with her.\n\nI slip another couple inches in, accompanied by a soft cry.\n\nI look into her eyes. She is all anticipation.\n\nI increase the pressure until each of our pubis meet.\n\nKeeping most of my weight on my arms and knees, I allow my chest to rest against hers.\n\nWe kiss again.\n\n\"This feels so good, Mac.\"\n\n\"Yeah, I can't get over what you're doing with your muscles. It is so hot and intimate.\"\n\n\"Can we roll to our sides and stay this way for a bit?\"\n\nI nod and move, pulling her along with me.\n\nWe are face to face as our sexes meld as one.\n\n\"You're not too big...\"\n\n\"Is that a complaint?\" I tease.\n\n\"God, no. I mean I was a little worried. You do have a large dick, but it's not grotesquely big. It fills me more than any I've had. I didn't know what to expect since no other guy has been this size.\"\n\n\"Have there been many?\"\n\nDede grins, \"Hell of a question to ask as your cock is inside me.\"\n\n\"Don't have to answer,\" I say. \"I'm enjoying being in you and being able to talk. Usually the talking, what there is, occurs after it's over.\"\n\nI move in and out slightly and Dede pulls my ass to keep me tight.\n\n\"Well, besides my husband, who was a spectacularly lousy fuck, there have been exactly four others. One before I married and three since my divorce.\"\n\nShe contracts her vagina walls and I close my eyes to savor the sensation.\n\n\"How about you?\"\n\nI kiss her. Her breath is both hot and sweet. Her lips are soft and pliant. She is an extraordinary kisser.\n\n\"Well, before I married Mandy there were a few, well, more than a few. I haven't counted in a while and must admit I had a bit of a wild streak when I was in my early twenties. Then, with Mandy, well, we didn't cheat, but sometimes the boundaries got wide.\"\n\n\"Meaning swapping?\"\n\n\"I never cared for that term, I think of it as couples together. I didn't enjoy it as much as she, but never complained. There were two couples we liked. We'd go on weekend trips, stay in the same room. Stuff like that.\"\n\n\"Was Jennifer involved?\"\n\n\"No. Some people you probably don't know and whom I am not going to mention.\"\n\n\"Fair enough. So was it just watching each other or what?\"\n\n\"Both, with a lot of \"or what\".\n\nI slowly move in and out a couple inches. Dede smiles and clinches her vaginal walls around my dick.\n\n\"We'd be with the other spouse, I would be fucking the wife, Mandy with the husband. Or, sometimes I would watch Mandy with the guy and the girl.\"\n\n\"Never, you and the guy?\"\n\n\"No. Have no interest in that.\"\n\n\"Did it bother you to see her screw another guy or another girl?\"\n\nI pump Dede a couple times and she pushes against me.\n\n\"Oh, I guess I never really saw the attraction of being with a couple. I mean it was different screwing a woman other than my wife. But, I loved Mandy and was not really looking for this sort of adventure. As far as her and another woman, it was hot at first, but again, I was wondering why we were doing it.\"\n\n\"Can I get on top now?\"\n\nWe roll so that I am lying on my back and Dede is stretched out on top of me.\n\n\"Did that lead to the break up?\"\n\n\"In a way, it did. Mandy seemed to want more and I was wanting to pull back. Finally, she decided to move to California with this other couple and they would live as three.\"\n\n\"Must have hurt.\"\n\n\"At first, it did. I put a lot into our marriage. Worked hard to make it work, you know? But, if someone wants something so basically different, you just have to let it go. I have no hard feelings toward her, nor do I have any love left for her. I hope she's happy, but I doubt it. I think Mandy will always be looking for the next best thing around the bend.\"\n\nDede sits up and rides slowly up and down my shaft.\n\n\"And since Mandy?\"\n\n\"Well, that's two years and, including you, I'd guess that there have been, let's see, two.\"\n\n\"No shit. I'm the second woman you've been with in two years.\"\n\n\"Yep. Hope I'm doing ok.\"\n\nDede grinned widely, \"So far, so fucking good.\"\n\nShe pumps some more.\n\n\"So how long since the other woman?\"\n\nI tweak her nipples.\n\n\"Over a year, maybe closer to two years.\"\n\n\"God, I thought I was bad in not having a man in over a year. What a shame.\"\n\n\"Hey, don't make me out to be a monk. I was busy. Have the garage, some friends, Sam and my Aunt. I don't complain.\"\n\n\"Oh, Mac, I didn't mean you, I meant all the women who have lost out on this.\"\n\nShe begins riding me more vigorously, building up to a fast pace. I respond by thrusting my hips. I work one breast with my hand and use the other to play with her clit.\n\nShe is grunting at the end of every thrust and then doubles her speed. \n\n\"Oh, this one is going to be huge,\" she cries.\n\n\"Pillow?\" I offer.\n\n\"Too late,\" she says hoarsely.\n\nDede wails long and loud. I know it must fill every corner of the large house. She thrashes hard on my cock and plants her hands on my chest to give her extra leverage to bounce up and down. Her vagina is squeezing me like a vise.\n\nWith one last gasp, she collapses on my chest, tears running down her cheeks and wetting my shoulder.\n\nI haven't cum and enjoy being hard inside her.\n\nDede rests her head on my chest, occasionally tilting her head to kiss me. I remain hard but don't move, just let it rest in her warm moistness.\n\n\"Mac, I am really happy, but really wasted. I know you didn't cum this last time. Would you think me the biggest bitch, if we just went to sleep?\"\n\n\"Can I hold you and keep my dick inside while you sleep?\"\n\nDede looked up at me. I think I see a tear. \n\n\"How the fuck did Mandy let you go?\" She sighs and nestles her face into the nook of my neck. I pull the sheet and comforter over us. I lightly stroke her back, savoring the curve of her rump in my palms. In a few minutes, Dede is breathing deeply with her mouth slightly open. I kiss the top of her head and drift asleep, my dick nestled in her special place.\n\nI awake in the middle of the night. My soft dick has retreated from its nest. I ease Dede onto her side and cuddle behind her, my hand resting on her breast. \n\n\"This is a real woman,\" I think as I close my eyes.\n\nMorning arrives with a soft knock on our door.\n\nDede is still sleeping, as I ease myself off the bed and open the door, letting it hide my nakedness.\n\nRuthann is standing there with a breakfast tray. She's dressed in sweat pants and a big sweater.\n\n\"Hi,\" I say.\n\n\"Thought you guys might like some nourishment. I certainly think you need it.\"\n\nI blush and ask, \"You heard us?\"\n\n\"Yeah, Mac. We did along with most of the houses on Long Island Sound.\"\n\n\"Only on the Sound?\" comes a voice behind me.\n\nI turn to see Dede sitting up in bed, her breasts glowing in the morning light.\n\n\"I was thinking the entire east coast,\" she says while stretching.\n\nRuthann takes the tray to the bed and I let the door close behind her.\n\nAs I head to the bed, I notice Ruthann checking out my dick. I wonder why this attraction since she has certainly seen it quite a bit.\n\nClimbing in next to Dede, I pull the covers up over my lap. Ruthann sets the tray over her mother's lap. I realize I'm famished and craving coffee. I pour a mug from the carafe and pick up a buttered English muffin covered with orange marmalade. \n\n\"Mmm,\" Dede says after sipping the rich, dark coffee. \"Thanks, sweetie, this is nice.\"\n\n\"My compliments,\" I add.\n\nRuthann beams.\n\nWe eat and drink in silence. I'm enjoying the nourishment and still buzzing with a sexual high.\n\nRuthann takes a sip of her coffee and glances back and forth at her mother and me.\n\n\"You guys look really good together,\" she says.\n\nDede takes a long sip of her coffee.\n\n\"Mac, could you give us a few minutes?\"\n\nI see a mother-daughter talk looming.\n\nI slip out of bed, grabbing some clothes along the way out of the bedroom. As I close the door, I hear Ruthann softly say, \"That's an awesome ass, Mom.\"\n\nBack in my room, I crawl into bed. I wake some time later and realize I'm starving. Ruthann's breakfast in bed was never finished since she and Dede ended up talking.\n\nI pull on my jeans and a sweatshirt. With just thick socks on my feet, I paddle down to the kitchen. Mim's sitting at the counter eating a poached egg on toast.\n\n\"Looks good,\" I say.\n\n\"Sit and I'll fix you one.\"\n\n\"You don't have to...\"\n\n\"I'm not much of a cook, but a good Scottish lassie knows how to coddle an egg.\"\n\nShe takes the last bite of her food and begins to prepare mine.\n\nToasting bread she lays two poached eggs on top. She hands them to me along with a cup of strong black coffee.\n\nI dig in and savor the simple flavors.\n\n\"Where is everyone?\"\n\n\"Chrissy and Ruthann have taken themselves out for a hike down toward the Sound.\"\n\nI sip the coffee. \"And, Dede?\"\n\n\"Ah, now it's Dede, is it,\" she asks with a twinkle in her eye.\n\n\"Well, uh, yes, I guess it is.\"\n\n\"And, I take it that the howling last night is at the root of this new familiarity?\"\n\nI can't tell if Mim is teasing or if she is really upset. I now realize that by professing a desire for her and then jumping in the sack with a woman whom she calls a \"kindred soul\" might appear a bit shallow and crass.\n\nI am trying to find some words that will not sound totally asinine. I fail and just keep my mouth shut.\n\n\"Anyway, Mac, Dede appears to still be abed. I wonder if she is feeling all right. Maybe something got into her? What do you think?\"\n\nI want to explain. I want to justify. I realize, however, that there is nothing to justify. I went to bed with a beautiful woman and we had fantastic sex. Mim had made it clear that such an act was not in our future. So, why was I feeling ashamed? Hell, I'm not ashamed.\n\n\"If I were to speculate, Mim, I would say that Dede is enjoying the luxury of sleeping in after what I hope was a night of outstanding passion.\"\n\n\"Amen,\" comes a voice from the doorway.\n\nWe turn to see Dede. She comes forward wrapped in an oversized robe, stopping next to Mim and across the kitchen island from where I sit. She reaches for my coffee cup and takes a long sip. It's such a simple gesture, but one so full of significance. Dede is stating that we had shared something grand and she doesn't care if Mim knows.\n\n\"Morning, Luv,\" says Mim.\n\n\"Morning, Mim.\"\n\nThe two women look at each other. Dede opens her arms and Mim slides into them. They embrace. Breaking apart, they kiss gently on the lips and hug again.\n\n\"Can I fix you a bite of breakfast,\" asks Mim.\n\n\"That'd be delightful.\"\n\nI'm not sure what I just witnessed. I'm sure it was not a sexual embrace and kiss, although it was quite intimate. It is way deeper than the flesh. I begin to understand what Mim meant about kindred spirits. She and Dede connect on a deep plane. \n\nDede walks around and sits on a stool next to me. I kiss her lips and she kisses back.\n\n\"Thanks for giving me a bit of time with Ruthann and the chance to catch a few more minutes of sleep.\"\n\n\"No problem,\" I say. \"I caught a nap, myself.\"\n\nI watch Mim as she works at the stove. Her bottom is snuggly outlined by her jeans. I recall its naked beauty. I also remember how beautiful Dede was standing nude in front of me. I'm driving myself crazy.\n\n\"Problem with Ruthann?\" asks Mim as she places the plate with egg and toast before Dede.\n\n\"Ah, the tortured mind of a teenager,\" she sighs.\n\nMim freshens my cup and sits across from us.\n\n\"Want to talk?\" says Mim.\n\n\"I think we need to,\" answers Dede looking at me.\n\n\"Ruthann has been my rock,\" she said. \"I know a mother is supposed to be the support for her daughter, and I truly think I am that for Ruthann. But, without her I would have let my sanity and self-respect slowly dissipate. This may be difficult for you to hear, Mac, but I hope you will keep an open mind.\"\n\nI slip my hand over hers and squeeze.\n\nDede continues.\n\n\"Mim has heard some of this, but she is such a dear that she won't mind my repeating myself.\"\n\n\"No, indeed, Luv.\"\n\n\"Mac, you know that a divorce is hard, even if everyone recognizes it is for the best. No matter how you rationalize it, there is the specter of failure present in any divorce. I know you expressed some of that when you spoke of Mandy.\n\n\"When my husband left me to go fuck boys, well, that knocked me down hard. I don't know if I would have felt better if he had preferred some young blond with huge tits, but I was totally destroyed to learn he'd prefer a male to me. Of course I had my anger. And, that was a good thing because it helped me get the best settlement from him and his patrician family. Anger goes away, though. In its place I only had doubt and despair. I was feeling completely sorry for myself. One day as I lay around the house wallowing in pity, I looked out the window and saw Ruthann playing by herself in the yard. \n\n\"It hit me like a bullet. There was my life and I was turning my back on it. I pulled on my jacket and went out to play with her. Ruthann probably thought I had lost my mind. I had hardly spoken to her in weeks and now I wanted to kick a soccer ball around with her. It didn't happen all at once, but we were able to take baby steps back toward each other. I opened up and told why I was feeling so awful. She told me she felt as if it were her fault her father and I split.\"\n\nDede pauses to wipe her eyes on her sleeve. She blows her nose with a tissue Mim passes to her.\n\n\"We made a pact to always be honest with each other and to be there for each other. We've honored that pact. So, my daughter became my best friend while I still kept my role as mother. It's sometimes a delicate balancing act. I know I could not go on without her.\n\n\"So, the few times I have been involved with a man, Ruthann seems to think that maybe I'll make a commitment to him. She is both happy and frightened. Mostly, she quickly realizes that there is little to be frightened about since there was no way that I was going to marry anyone of those men.\"\n\nDede pulls her robe tight around her and drinks some coffee. Mim refills her cup and clears the dirty dishes. Dede spends some time just looking into the dark liquid.\n\n\"So, one day Ruthann calls and said she met the most fantastic man and I should meet him because he'd be perfect for me. She also said he had a hard body and, now I quote, \"a gorgeous cock.\" Most mothers don't want their children to be their matchmakers and all mothers do not want their daughters to be checking out a prospective date's equipment.\"\n\nWe all laugh a bit.\n\n\"Yeah, she was talking about you, Mac. I followed up with Mim and learned that you indeed seemed to be a nice guy.\"\n\n\"And, I was able to confirm the initial evaluation of the gorgeousness of the aforementioned body part,\" adds Mim with a smile.\n\n\"So, for a while all I heard was Mac this and Mac that. So, when I got that commission and spoke to Mim, she suggested that you would be perfect for my Odysseus. Ruthann and Chrissy were in total agreement. I said I would need female models as well. Ruthann volunteered on the spot. Then, after you were at the dance, the volume tripled in singing your praises. The girls loved dancing with you and talking with you.\"\n\nMim is making another pot of coffee. She speaks over her shoulder. \"I think I might have added a bit of fuel to the fire. I explained to Dede how much fun we all had together. Of course, I was obliged to add that what was pushing up under that kilt would probably serve as a worthy recommendation for you as Odysseus.\"\n\nWe each top off our cups and sit in silence. Dede plays with her spoon on the granite of the counter.\n\n\"So, this morning when Ruthann brought us breakfast, I knew she was letting her imagination run at full speed. That's why I asked you for some privacy when she said we looked good together.\"\n\nI tell her I understand. I inwardly recall how much attention Ruthann seemed to give my exposed dick.\n\n\"I told you we committed to be honest with each other,\" says Dede. \"So, I was honest with Ruthann. I told her we had wonderful sex.\"\n\n\"I think that came as no surprise,\" interjects Mim. \"We all do have ears, you know.\"\n\n\"I guess I might have been a mite expressive,\" says Dede.\n\n\"A mite,\" agrees Mim as she smiles at her friend and then winks at me.\n\n\"Anyway, and Mac please understand what I'm saying, I told Ruthann that I had no intention of marrying you. I explained that sometimes a great night of sex is just that\u2014one special experience. She said that of the men I've dated that you are the coolest and she would be fine with us being together.\n\n\"So, after discussing my sexual adventure, we edged into to discussing her own sexuality. Ruthann is a virgin. Watching me help you to orgasm that first day was the closest she's been to sex. Now, comes the difficult part.\"",
        "Dede takes a deep breath and stretches her back, trying to release tension. \n\n\"Ruthann admitted, after a bit of going around the barn, that she would like to lose her virginity. She would want it to be a special experience. Doing it with Robbie, she admitted, would probably not be all that special. She wanted to have sex that made her scream as I did.\"\n\nDede turns and kisses me. She laces her fingers into mine.\n\n\"She said since I probably was not going to marry you, she'd like to make love with you. She wants you to be her first.\"\n\nWhen people say that a silence fell across a room, that's what happened in Dede's kitchen. I swear I can hear my own heartbeat. Mim appears as shocked as I am. \n\n\"Dede, I don't think I...\"\n\n\"Mac, don't say anything right now,\" she says.\n\n\"Bit of a mixed message there, Dede,\" says Mim.\n\nDede nods. \n\nMim continues. \"First, she says she'd be happy if Mac were her step-dad and then she says she'd like to shag him.\"\n\n\"I know,\" says Dede. \"Ruthann has had issues with adult males since her father left. She is suspicious of them and, at the same time, is yearning for a steady male influence in her life. She senses confidence in Mac, as well as a genuine concern for her as a person. So, I can understand her fantasy of having Mac in our lives. I also know she has a burgeoning sexual drive. Mac is also handsome and is endowed with admirable male qualities\u2014of a physical nature. He is also the first man she has openly seen in a sexual context. So, to sum up, she's a confused girl who is trying to become a woman.\"\n\nMy mind is reeling. I genuinely like Ruthann. I think she is smart, funny, honest and quite attractive. I also like her mother, evidenced by the raucous night of sex we enjoyed. I'm not sure I could initiate a girl half my age into sex, nor am I sure that is proper. Yet, the thought of holding her, touching her young body and helping her open up to the joys and rewards of sex is strongly appealing. \n\nI can still feel the touch of her hand on my erection in the hot tub and how she was so tender moving up and down. I recall how smooth her thigh felt and how powerful was my impulse to slide my finger into her pussy. I realize I must have drifted off as I see Mim and Dede staring at me.\n\n\"What do we do?\" I ask.\n\n\"Nothing,\" says Dede. \"At least 'we' do nothing. Please do not even hint that you know anything about this conversation. I will continue to talk with Ruthann. I'm sure we will come to an understanding.\"\n\n\"Are you considering allowing what she wants?\" prompts Mim.\n\n\"I have no idea. I mean, like most mothers I would want my little girl to remain a virgin and safe. I know that is unrealistic and it is at the point where the decision is out of my control. Ruthann is nineteen and she will ultimately choose her sex partners.\n\n\"On the other hand, I recall my first sexual encounter. God, I'm amazed I even tried it again. Is that how yours went?\"\n\nMim smiles and looks back and forth between me and Dede.\n\nShe lets out a rough laugh. \"It was absolutely wretched. Painful, embarrassing and quick. I never knew what people were so loony about when they talked about sex. And, an orgasm? To me it was purely a myth.\"\n\n\"Exactly,\" says Dede. \"So, maybe I should allow\u2014no, that's not the right word. Maybe I should just step aside and let her make her own decision. At least if she went with Mac, I know she would find out why people crave sex. And, she would not have to wonder if she had an orgasm.\"\n\nDede leans in and kisses me tenderly. I respond and slip my arm around her shoulder.\n\n\"Mac, last night was simply incredible. If Ruthann could experience that...\"\n\nDede pauses and looks at Mim.\n\n\"Mim, dear, please indulge my crudeness for a moment.\"\n\nMim smiles and nods.\n\n\"If Ruthann could experience the tender and slow part of last night, not the 'fuck-my-brains-out' part, then she will start out on her sexual journey on the right foot.\"\n\n\"Fuck-my-brains-out?\" Mim says with a wry look.\n\n\"Oh, yeah,\" says Dede. \"When we first started last night, it was raw and wild. It was also exactly what I was seeking. But, then we went slower. Mac was extremely tender and gentle. I still came like a freakin' gusher, but it was sweet.\"\n\nMim appraises me. I hold her stare. Is she thinking which approach she and I would try? Or, more likely, is she thinking I'm the usual male savage.\n\nBy silent agreement, we stop our conversation as we hear the girls coming back from their walk. I excuse myself and head upstairs.\n\nI shower and make my way to the studio where Dede is working on details of Mim and Ruthann. I strip and take my place between them. \n\nDede says I don't need to be erect right now. She works on getting the angles right where our bodies touch. We chat idly while Dede sketches. Chrissy is sitting along the side, working on her iPad. She occasionally looks over and smiles at me.\n\nAround 2, Dede calls it a day. We dress and enjoy a light lunch. While Mim, Ruthann and Chrissy are gathering their things, I take Dede aside.\n\n\"Will I see you again?\" I ask.\n\n\"We still have some work to do on the painting,\" she replies.\n\n\"You know that's not what I meant.\"\n\n\"Do you want to see me?\"\n\n\"Yes.\"\n\n\"So, let's talk this week,\" she says and kisses my cheek.\n\nI pull her into a hug. She responds and we kiss tenderly.\n\n\"Mac, I could get used to you.\"\n\n\"Is that a problem?\"\n\n\"There's a lot going on right now.\"\n\nI kiss her, letting my tongue slide between her lips.\n\n\"So?\"\n\n\"Mac, call me this week, ok?\"\n\n\"Sure.\"\n\n\"And...\"\n\n\"Yes,\" I reply.\n\n\"Think about what we discussed about Ruthann.\"\n\n\"I thought we were talking about you and me getting together.\"\n\n\"We were,\" she says and hugs me tighter. \"But, I did say there was a lot going on.\"\n\nWe hear footsteps coming our way and break apart.\n\nRuthann and Chrissy come into the kitchen, followed in a few seconds by Mim.\n\nWe make our good-byes and soon are on our way back to Barton Hills. Mim and I talk about cars and the girls doze in the back seat. After dropping them at the school, I drive to Sam's place.\n\nLetting myself in, I find her in the kitchen making brownies from a mix.\n\n\"Hey, Cuz, how'd it go?\"\n\nI dip my finger in the batter and enjoy the chocolaty taste.\n\n\"Got a beer and an hour?\"\n\n\"Hmm,\" Sam murmurs, \"Sounds serious.\"\n\nShe digs out a couple beers. As I sip mine, she pours the batter in a baking dish, pops it in the oven and sets the timer.\n\nWe make our way to the living room and settle on the couch.\n\n\"How's Crystal?\" I ask.\n\n\"She's great. But that's not what's on your mind. Talk to me, Mac.\"\n\nI take a long drink and then relate what happened over the weekend.\n\n\"So the sex with Dede was good?\"\n\n\"Great,\" I say. \"And, we really had fun just being together. I'd like to see her again.\"\n\n\"You mean to fuck her?\"\n\n\"That and more. I'd like to see what develops.\"\n\n\"And, as you say this you are wondering if you should fuck her daughter?\"\n\n\"You make it sound crude.\"\n\n\"Oh, excuse the shit out of me. Ok, you want to have sexual relations with her mother and deflower the lovely Ruthann. Is that better?\"\n\nI sigh. \"Still sounds creepy, right?\"\n\n\"You said it, Cuz.\"\n\nThe buzzer goes off and Sam goes to take the brownies out of the oven. She returns with two new beers.\n\n\"Need to let the brownies cool. So, what are you going to do?\"\n\n\"Not a clue. And, then there's Mim?\"\n\n\"Mac, don't you think you're in enough shit. Don't pile more on.\"\n\n\"I know. It's just that I could really fall for her.\"\n\n\"Fall for her? Christ, Mac, that sounds like a bad romance novel. Besides, it's pretty fuckin' clear you already have 'fallen' for her.\"\n\n\"Ah, shit, Sam. I am so fucked-up.\"\n\n\"Well, as a single woman, may I give you some advice on how to deal with a relationship problem?\"\n\n\"Absolutely.\"\n\n\"Chocolate.\"\n\nShe laughs and jumps up to run into the kitchen.\n\nI follow and admit her advice is good. We enjoy the rich taste of the chocolate treats.\n\nI leave a short time later, feeling better, but not having decided anything. I need to make things happen. \n\nI really have no clue on how to manage this situation. I decide to remain open to all possibilities. Hell, I wish I knew what I really wanted to happen. \n\nMaybe I can create an opportunity as we near the Christmas holiday and school vacation time. If I can continue to keep Mim close to me and continue to have her enjoy my company, maybe I can overcome her reluctance to consider intimacy. But, if she doesn't budge on her resolve to remain just friends, should I see Dede? But, it's not fair that I consider her a fallback. If I am interested in her I should pursue it. Forget Mim, concentrate on Dede. But, Ruthann is going to be around when I am with Dede. Forget Mim, forget Dede, take Ruthann as a lover.\n\nI sit in my house looking at the fire dancing in the hearth. How did I ever get into this spot? More importantly, how am I going to get out of it?\n\n(To be continued)"
    ],
    "authorname": "orie",
    "tags": [
        "nude modeling",
        "nude hottubbing",
        "oral sex"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/sex-education-ch-03-1"
}
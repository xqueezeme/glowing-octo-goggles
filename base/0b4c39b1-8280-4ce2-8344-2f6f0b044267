{
    "title": "The Sex Survey Ch. 01",
    "pages": [
        "Disclaimer: Like all lit stories this one would fit in multiple categories. This story has threesomes (M/M/F), exhibitionism, and lots of light bondage. If those aren't your thing, stop now and find another story.\n\n*****\n\n(Thomas)\n\n\"Wow,\" I said. \"Who the hell is that?\"\n\nMy best friend Dean looked up and followed my eyes to where I was looking. \n\n\"Oh her, that's Sgt Alanza, she's hot as fuck, she's actually been in the battalion longer than you. Works in admin.\"\n\n\"Damn, how'd I miss her?\"\n\n\"She was on deployment when you got here and got back right after you left on your deployment.\"\n\nI nodded, our deployments were for a year each so we could technically have been in the same battalion for two years without actually ever having seen each other. On top of that our battalion numbered more than 1,200 Marines in multiple companies so it was easy for a person not to know at least half the people serving.\n\nStill, it was hard to imagine this girl not being known by everyone. We were on a grassed area next to one of the main gyms on base. It was roughly the size of three football fields. Our battalion was about to do an annual Olympic games style physical training session. There was more than 500 people here from the battalion, all fit Marines with their customary swagger but even so this girl stood out. She reminded me of Vanessa Hudgens but better, she was a hand width shy of six feet tall with a ponytail of long black hair that went to the middle of her back, she had a balanced swimmer's physique with obvious muscle tone. She was wearing tight pink spandex booty shorts and a black sport bra encasing C size boobs, she wore black athletic shoes and knee-high pink socks with white unicorns on them. Her eyes were large, liquid blue, and exotically slanted, giving her a natural sultry look, and her skin was darkly tanned with lighter tan lines peeking out from her outfit. \n\nI watched her from a distance the rest of the day but through bad luck never had an opportunity to go talk to her. I recognized a friend from her group though so I made a mental note to talk to her and find out more information. \n\n*****\n\nMy professor had a boring voice, which really sucked because I found the subject interesting but he delivered the content in such a monotone steady voice that it was hard to concentrate. As usual I was reading different chapters from the textbook while he was talking. \n\nOne page caught my eye, like and commonality. \"The results of the meta-analysis indicated that both actual similarity and perceived similarity had a large effect on attraction overall. In other words, when participants in research studies had actual things in common with partners and were more similar to them, they found that partner more attractive. Also, when participants simply thought that a partner was similar to them, even when they were wrong, they found that partner more attractive too.\" \n\nInspiration struck me, I needed information. I needed to find out what I had in common with Sgt Alanza. The question was, how? \n\nMy bachelor degree was business with a minor in marketing. I took psychology as an elective because I liked it and I wanted to specialize in understanding people to better help business. I figured by combining a little mind analysis into everything I could get ahead of the game. I'd recently created a survey for customers of a business, the first step in figuring out what the customer wanted. A lot of businesses offered the same type of gimmick, if you look on the back of most fast food receipts, you'd find a coupon survey that gave you free food or whatever for giving them info. That's what I needed to do, I had to form a survey and get Alanza to take it. I needed to know what her interests were, that way I could figure out how to talk to her. \n\nHow would I get her to take the survey though? I needed somebody else to help, then I an idea. Alanza has been at the games with a woman I already knew. I could use a web service to host a survey, offering a gift card for completing it. If I could get our mutual friend to complete it, she might be willing to recommend it to Alanza.\n\nPerfect! Now I needed to create a survey.\n\nI spent the next few days creating a comprehensive questionnaire, I included everything, hobbies, goals, sexual desires, career paths, etc. I showed it to a fellow grad student and had him help me edit the questions, I told him it was for my thesis. Even as I said that I realized I wasn't lying, this project would be ideal for my thesis. No matter what happened, success or failure, I'd at least have a good school project to run.\n\nIt took two weeks before I was ready to act. Now to start playing some Jedi mind tricks. I contacted my friend and casually asked her for a favor. We met at lunch and I told her I'd give her $25 restaurant gift card to complete a survey I'd created for school, she laughed when I told her about it but agreed. I figured somebody like Alanza would stand out since they were both sergeants in the same section. I asked her if she knew anybody else that might be interested and she mentioned a fellow female sergeant that she worked with. I made sure to tell her about the gift card, I'd created a setting that allowed me to send her the gift card only after my survey was complete.\n\n\"It'd be really great if you could get her to take the survey too.\"\n\n\"Do you need to meet her?\"\n\nCasually I said, \"Naw, just get her to fill it out, I don't need to know who it is.\"\n\nA day later I had my friend's survey, I decided not to read it, but I did save the information to my computer just in case. Now all I had to do was wait. \n\nAnother day passed and I checked my inbox, I had an email from my survey service. I saw that the email was from alanza_usmc.\n\nPerfect, she'd filled out the survey.\n\nIt was hard to contain my excitement, I felt like a teenager that had just gotten his girlfriend topless for the first time. I opened up the survey and read her answers to the questions provided. \n\nWow!\n\nI was in love. I really needed to go through all the questions but at a quick glance this was the girl of my dreams. On key things she was perfect for me. She was into sports, she was athletic, she liked to hike and ride motorcycles. I'd answered my own survey and then charted everything, we had multiple crossings of the same interests. In so many ways we were close, but the real goldmine of information was her sexual interests.\n\nQuestion: Are you an exhibitionist? \n\nAnswers started from, \"I'm a nun,\" to \"They're lucky I wear clothes to work.\" She'd picked the latter. Underneath that were specific exhibitionist behaviours, her answers made my jaw drop.\n\nSkinny dipping by self: All the time.\n\nSkinny dipping with others: Not sure why I even own a bikini.\n\nWilling to go to topless or nude beach: See above.\n\nWear thong bikini: That's all I own. Seriously, I refuse to have any other tan lines on my ass!\n\nStrip poker: Is there another kind of poker? Been there, done it, will do it again.\n\nNude pictures: Playboy should pay me I've taken so many.\n\nNude selfies: My exes could publish an illustrated karma sutra book, EACH! \n\nOther exhibitionist tendencies: I like to wear flowing skirts on windy days and consequences be damned. Also, bra's suck! \n\nIt got better as I continued to read, in the sexual activities portion I made up she really let loose.\n\nThreesome: Done with another girl, really want to have two guys!\n\nLesbian sex, give or receive: Both.\n\nBondage: Love it.\n\nWays you like to be tied: Spread eagle, hogtied, chair tied, in a car, in public, with multiple people.\n\nGagged: Ballgagged is sexy.\n\nBlindfolded: On occasion.\n\nFavorite sexual positions: Doggy style.\n\nI'd put forth multiple pages of questions that she'd answered, but the most important ones were the last ones.\n\nBased on compatibility would you be interested in contact regarding this survey: Yes.\n\nWould you be willing to be interviewed: Yes. \n\nI blew out a long sigh and leaned back in my chair as I read the final questions.\n\nI had to take my time to try and figure out the best way to approach her. I had the information I wanted, now to determine how to use it. In the end I decided that I needed to have an in-depth conversation. That afternoon I went out and bought a prepaid cell phone. I wrote an email and told her if she was interested in further contact about the study to text her name to the number I gave her. \n\nI put the cell phone next to my bed and tried to forget about it; she would either text me or not. Thinking about it would only drive me nuts. I went to the gym and then had dinner. After that I went back to my room and stripped to take a shower. As I was rinsing, I heard the ding of a text message. Since my personal cell phone was always on vibrate, I knew it had to be her. My heart beat a mile a minute as I finished showering and dried off. I tried to stay calm as I wrapped a towel around my waist and walked toward my nightstand. \n\nThe moment of truth. I picked up the phone and saw a one-word text, Alanza. She did it, she actually responded. Now was the most critical part.\n\nMe: Hello, this is the coordinator of the study, are you still interested in an interview?\n\nSeconds later I got a response.\n\nAlanza: Very, it sounds like a lot of fun.\n\nMe: There are a few rules. We can do this at any place of your choosing but you will be blindfolded, I don't want you to be biased by the interviewer.\n\nI wanted to talk to her in a truthful situation and gauge her responses compared to my own and go from there. It was a haphazard approach but I figured even if this ended in catastrophe, I could learn from it or it'll make a hilarious bar story. \n\nAlanza: No problem, anything else?\n\nMe: It will be video recorded. \n\nAlanza: I figured. I don't have to be naked or anything do I?\n\nWhat the fuck? Did she just ask that? What the hell would make her think she wouldn't wear clothes? I thought furiously about anything I may have said in our email or otherwise to have her ask that. Other than the whole sex survey itself, I couldn't think why. Was I putting out a creepy vibe? I'd have to watch out for that.\n\nMe: No, you can wear whatever makes you comfortable. \n\nIn seconds she responded.\n\nAlanza: Perfect, any other restrictions?\n\nMe: Nope.\n\nAlanza: Sounds like a blast. When do we do this?\n\nWe sent a few more texts confirming the logistics of when and where. She decided that her own apartment would be more comfortable to her and she had a free night on Thursday, two nights from now. I agreed to meet her at her place at seven p.m.\n\n*****\n\nThis is crazy. \n\nThis is crazy. \n\nThis is crazy. \n\nI kept repeating to myself as I walked to her door. I had a small tripod for my cellphone in one hand and a large purple bag used for bottles of Crown Royal. I stood in front of her apartment and swallowed. Without further hesitation I rang the bell. I knew if I waited, I'd probably call the whole thing off. \n\n\"Come in.\"\n\nI let out a breath I hadn't even realized I was holding and opened the door. I peeked inside as I was entering and saw her standing in the middle of her living room with her back to me like I'd requested. \n\nHer apartment was small and tasteful, decorated in a modern style. A charcoal colored couch sat in front of a black glass TV stand with a wide screen television on it. A small counter made of dark wood separated the living room and kitchen dining room. A speaker and an iPhone sat on top with black and chrome appliances in a line next to it. \n\nEyes closed, Alanza stood straight with her hands to her sides as I entered. A light from the side highlighted her glossy hair flowing free around her shoulders. Neither of us spoke for a minute as I studied her and the apartment. In silence I looked at her, I noticed her hands were clenched. As if sensing my scrutiny, she shifted and put a hand on her hip drawing my attention to the long-sleeve turtleneck grey knit dress she wore that barely came to mid-thigh with a pair of thigh high black suede boots with three-inch heels. She was elegant, sexy, and would drop jaws in public, and I could tell from her smile she knew I was checking her out and the effect her outfit had on me.\n\n\"Well,\" I said.\n\n\"Well,\" she replied.\n\n\"Here we are.\"\n\n\"Yes, here we are,\" she said, her voice high, her body tense as she stood there.\n\n\"I admit I'm a little nervous,\" I said.\n\nShe gave a small bark of laughter, \"You're nervous? How do you think I feel?\"\n\nI laughed, \"True.\"\n\nAt those statements the tension eased out of the room and she visibly relaxed.\n\n\"Why don't you blindfold me and we'll talk.\"\n\n\"Then we'll see how it goes from there?\" I responded.\n\n\"Exactly. It's not like you're asking me to be naked or anything.\"\n\nThere was that comment again, strange.\n\nI walked behind her and placed a hand on her shoulder, she put her hand on mine. I held it there for a while so we could get accustomed to one another, she seemed to understand this and didn't move. Finally, I took a black silk sash out of my bag and wrapped it around her head twice then tied off the ends. I waved my hand in front of her.\n\n\"Can you see anything?\"\n\n\"Nothing,\" she whispered, turning her head back and forth for a few seconds. \n\n\"I really can't see anything,\" she said with growing awe, her voice betraying her excitement. \"Not going to lie, I was a little scared about this. I mean who knew what could happen, but I figured it was just an interview, it's not like I was going to be naked or anything.\"\n\nShe reached out a hand and waved it around until she contacted my body, she stretched her fingers in exploration for a second, then rested her hand on my chest. \n\nShe swallowed, opened her mouth, then closed it, I waited a few seconds until she could find the right words.\n\nI glanced around looking for a chair but when I asked her which one to get from the kitchen she said, \"Go down the hallway to the bedroom, you'll find a chair in the corner.\"\n\nI did what she said and came back a minute later with a dark wood Victorian style walnut chair with deep blue padding on the seat and back.\n\n\"Wow, impressive chair, it's very sturdy.\"\n\n\"You've read my survey, I like bondage. That's what I bought this chair for. It was the last of a set so I got it super cheap. I've only let a few people know what I got it for, most people just think it's a cool chair I use in my bedroom.\"\n\nThe chair was heavy and all hand-carved with solid armrests and a high back with crossbeams between the legs. I placed it in the center of the room and guided her to it.\n\nI stepped back and set up my tripod, I was using my phone as the camera since the ones nowadays were almost as good as professional. After making sure everything was good, I sat on her couch.\n\n\"I do have a requirement for this interview,\" she said. \n\n\"And that is?\"\n\n\"I will answer all your questions truthfully, but I get to ask questions too, and you have to be completely truthful. If I ever think you're lying to me the whole thing is over.\"\n\nI mulled it over for a few seconds, \"I suppose that's fair. What are you going to ask me?\"\n\n\"Not really sure, I'll figure it out as we talk.\"\n\n\"Well then, it looks like we have a deal.\"\n\nI grabbed another chair from the kitchen and put it next to the tripod. I made sure she was in focus and all of her was on screen then I hit record on my phone.\n\n\"State your name.\"\n\n\"Ariana Alanza.\"\n\nWe spent some time getting standard biographical data, she asked me questions about myself but didn't ask my name, just what I did, (Marine Sergeant, like herself), what I was in school for, (bachelor in business, minor in psychology) my age, (24, she was two months older). Favorite Disney movie, Beauty and the Beast. That one was random but halfway through the first questions she'd asked me mine and refused to go farther until I answered. I'd told her Beauty and the Beast and she'd screamed and said hers was the same. I also told her I loved Aladdin and she admitted she did too. Apparently, I'd passed a test because she told me if I'd answered wrong, she would have kicked me out of her place. She loved Disney and I told her I was a Star Wars geek. Finally, I got to the heart of the interview. \n\n\"You stated you're an exhibitionist, tell me about that.\"\n\n\"I noticed in high school that I liked to tease and show off. I've always had a hard time with jealous boyfriends because I wear short skirts and sheer blouses.\"\n\nContinuing, \"One of my favorite things to do when I'm bored is to wear a short tennis style skirt on windy days and then go out. I like to go to the park and just walk around. I've had my skirt fly up on so many occasions I can't even count. I always wear a thong underneath and I make sure it's a different color than my skirt so that it stands out, then it's obvious whoever saw me saw my panties.\"\n\nAs she talked, she uncrossed and crossed her legs, I caught a flash of a pink satin panty with black lace. For the briefest of seconds, it seemed like she paused during the move, was she trying to flash me? It would seem to be impossible for her not to know I'd caught a glimpse right then.\n\n\"Does that happen a lot?\"\n\n\"Yes, I always look around after I feel my skirt fly up, my eyes go wide and I pretend that I can't believe it just happened. I pretend I'm checking to make sure nobody saw, but in reality, I'm checking to see who actually saw.\"\n\nContinuing, \"It's easy to spot them, their eyes are glued to my ass, even if they're with their girlfriends or whatever. I pretend to be embarrassed and walk the other way.\"\n\n\"Any of them ever talk to you?\"\n\n\"A few, I've done it so much that a few of the braver ones have talked to me. I shared my number with a couple and I dated one a few times.\"\n\n\"How'd that go?\"\n\n\"Terrible, he was the insanely jealous type. By the third date he was already telling me what to wear and stuff, wanted me dressed like a nun.\"\n\n\"Idiot.\"\n\n\"Exactly,\" she said. \"My turn, so what started this survey?\"\n\n\"My professor was droning on about commonality and like and I had an idea. At first it was just a stupid random thought. I imagined what it'd be like to interview a date beforehand. How much easier would it be if you didn't waste time with people you wouldn't be compatible with?\"\n\n\"You aren't kidding there.\"\n\n\"Right,\" I agreed. \"So I decided to do a study on commonality and then to see if I could match people based on their answers.\"\n\n\"Ahh, so how many people have agreed to interview?\"\n\n\"Only you so far, but I just started.\"\n\nTechnically this was not a lie.\n\n\"Have you found a match for me?\"\n\n\"There is one person who you match more than 90% so far.\"\n\n\"Really? Sounds like I'd like to meet him.\" \n\nLaughing, \"He's interviewing you now.\"\n\nHer mouth dropped open as she sat in stunned silence, \"Wait, seriously?\"\n\n\"I'm as surprised as you, who knew there would be somebody so compatible with me?\"\n\nThe next two hours flew by as we talked about everything, she repeated all the information on her survey confirming her likes and dislikes, for most of her questions she asked me about my turn-ons. \n\n\"Do any of your friends know about this side of your personality?\" I asked. \"Do they know you're doing this interview?\"\n\n\"One girlfriend knows everything, and a few guy friends have commented that I'm a bit of an exhibitionist but I just laugh about it. They know I don't mind being around them in my underwear or less but they don't know how much it turns me on.\"\n\n\"What did your girlfriend think about this interview?\"\n\n\"She thought it was weird at first but I told her, 'It's not like I have to be naked for it.' and I knew I could leave when I wanted to. After she read my answers, she admitted it was interesting and she understands why you'd want to interview me. She wants to hear all about it afterward.\"",
        "Once again as she talked, she crossed and uncrossed her legs, this time I was sure she paused slightly while moving. \n\nThinking quickly, I decided to test her, I asked, \"Next question, do you want to take off your clothes?\"\n\nEven with the blindfold I could see the shock on her face, she was momentarily speechless. \n\nWhen she was finally able to speak, \"Uhmmm, wha... wait, what?\"\n\n\"You heard me. It's a simple question really. Do you want to take off your clothes?\" I asked. \"I told you this was a psychology study, and while I'm not the best in the world I do pay more attention than most. You're a self-admitted exhibitionist. You like to take and send nudes and flash your panties to strangers. You've mentioned being naked for this interview three times, and you've flashed me your panties multiple times during the interview.\"\n\n\"I... I didn't...\"\n\n\"Didn't what? Flash me? Talk about being naked? Why are you blushing? Is that excitement or embarrassment? Please tell me that I'm wrong, please tell me I've completely misread you.\"\n\nShe stared forward for a while. I stayed quiet while she processed everything I said.\n\n\"Will it be recorded?\"\n\n\"Do you want it to be?\"\n\nShe nodded yes, \"I'd like to see it. I want a copy for myself.\"\n\n\"Easy enough.\"\n\nShe stood up, \"I have an idea,\" she whispered.\n\n\"I'm listening.\"\n\n\"I want you to strip.\"\n\nShe held her breath as she waited for my answer.\n\n\"Excuse me?\"\n\nAgain she swallowed, moving forward she held out her hand until she touched my chest, \"I'm not backing out, I just think I should get to touch you first. I want to know what you look like.\"\n\n\"So to speak,\" I said.\n\nShe laughed, another soft seductive sound, her fingers strayed across my chest, I could feel their heat through my shirt. \n\n\"Yes, so to speak.\"\n\nI nodded yes then realized she couldn't see the motion, \"I agree.\"\n\nI set down my stuff and lifted my black Metallica t-shirt over my head. She kept her hand on my chest as I tossed the shirt on her couch.\n\n\"Wait,\" she said. \"Let me do the rest.\"\n\nI didn't reply but stayed perfectly still, seconds later she reached her other hand over to me and trailed her fingers along my chest. I could smell fresh soap and vanilla scent from her, her hair looked beautiful as it moved free around her body. Her fingernails were about a half inch out and perfectly manicured with dark blue nail polish. \n\nAfter exploring my chest, she slowly walked around me, using the tips of her fingers and nails to trace patterns around my upper body, while stray strands of her hair caressed my skin. \n\n\"Nice... muscular but not overboard... smooth, no hair...\"\n\nShe traced my arms upward to my neck, then up to my face.\n\n\"What color are your eyes?\" she asked.\n\n\"Brown,\" I lied. I actually had emerald green eyes, but they were unusual enough that she might know who I was or at least suspect and I wanted to keep her from accidentally guessing.\n\n\"Clean shaven... \"\n\nA finger crossed my lips.\n\n\"Soft...\"\n\nI parted my lips and let the tip of my tongue touch her finger. She gave a sharp intake of breath and paused, after I didn't move, she continued caressing my face and ran her fingers through my hair.\n\n\"Military haircut... good strong features... what color is your hair?\"\n\n\"Black,\" I whispered, letting out a low growl when her fingers ran over my scalp and through my hair. This part was true, it was doubtful she'd know who I was from that information.\n\n\"Mmmmm, he likes that... good boy...\"\n\nShe kept running her fingers through my hair for another minute.\n\n\"Clean smelling... slight hint of cologne... citrusy... I like it...\"\n\nShe left my head and traced down to my jeans, her hands went around my waist feeling my pants.\n\n\"T-shirt and blue jeans... simple...\"\n\nShe unbuttoned my jeans and slid them down my legs dropping to her knees as she did. Her hands traced everywhere and I could see she wasn't wearing a bra because her nipples were pressing against the dress betraying her own excitement. \n\n\"Nice legs... strong thighs... very sexy...\"\n\nShe ran her fingers along the waistband of my underwear, even momentarily cupping my shaft.\n\n\"Hmmm, briefs, not boxers, but not normal whiteys, good package...\"\n\n\"They're black,\" I said.\n\n\"Mmm-hmm, sexy, good choice...\"\n\nShe shifted and stroked my dick up and down a few times through my underwear.\n\n\"Good size...\"\n\nWithout warning, she hooked her fingers into the waistband and tugged my briefs down to my knees. My cock sprang free rock hard and inches from her lips. She caressed it a few times and then ran her fingers around me again.\n\n\"Very nice... 'scaped, with just a little fuzz... I like that...\"\n\nShe trailed her fingers to my sides then grabbed my hips and turned me around, I awkwardly shifted with my pants around my calves.\n\n\"Nice ass... firm...\"\n\nShe patted me and then gave me a tight squeeze with both hands.\n\n\"Bitable...\"\n\nWas all I heard before I felt a sharp nip on my backside. I flexed and hissed as she laughed at my reaction.\n\n\"I'm going to say you like that.\"\n\nShe reached around to my front and felt my cock, somehow it had gotten even harder. \n\n\"Yep, that's a definite trigger, good to know,\" she said.\n\nGrabbing my hips, she turned me back around before pulling up my clothes and working to fit me back in place. \n\n\"I'll let you get the buttons,\" she said while standing.\n\nI nodded and fumbled with my pants before I realized I'd made the mistake of nodding again.\n\n\"Yeah,\" was all I managed to whisper. I was as worked up as I'd ever been. I let out a long breath and regained my composure.\n\nQuick to tease me she asked, \"Having problems?\"\n\nClearing my throat, \"My pants are a little tight right now.\"\n\nShe'd regained her confidence with that little show she'd put on and now she seemed to feel more in control. I'd have to remember that.\n\n\"Is it your turn now?\" she asked.\n\n\"I guess it is.\"\n\nStanding up straight, she said, \"I'm ready when you are.\"\n\nI reached out to finger her dress, I was determined that two could play the game she'd started. I traced a finger to her nipple and grazed it. Given how rock hard it was and pressing out we both knew it was an indicator of her own arousal. She'd was breathing heavily through her nose and froze as I grabbed the bottom of her dress and raised it up, she lifted her arms as I brought it above her head and off letting it fall to the ground. Goosebumps formed on her tanned skin and she let out a sigh. Her tits had perfect small triangles of lighter skin showing that she liked to tan. \n\nI paused to let her get adjusted to her feelings.\n\n\"You okay?\"\n\nShe nodded her head.\n\n\"You ready to continue?\"\n\nShe swallowed and nodded again.\n\nI stepped back to admire her body. She looked stunning wearing only thigh high boots and black and pink lace satin panties. \n\nI dropped to my knees and she let out a small whimper as I hooked my fingers into her underwear.\n\n\"You sure you're okay?\" I asked.\n\nShe nodded, and with a small snort said, \"Just had a crazy thought is all.\"\n\n\"Anything you want to share?\"\n\n\"Just what my friend is going to say when I tell her about this.\"\n\n\"That should be interesting.\"\n\n\"Tell me about it.\"\n\nI slid the fabric over her hips, and she sucked in her breath as my fingers touched her skin.\n\nTrying to lighten the mood, \"Did I mention I have a thing for thigh high boots?\"\n\n\"Most men do, do you want me to leave them on?\"\n\n\"Is that professional to ask that?\"\n\nShe chuckled, \"Not sure how professional we're being right now anyway.\"\n\n\"Point.\"\n\nWhen I pulled them past her mound, she reached a hand out and placed it on my head slowly curling her fingers through my hair. I finished taking her panties to her ankles but held them there as I studied her. Her pussy was shaved with tight lips; a slight wetness betrayed her excitement. Finally, I gave them a tug indicating she could step out of them. \n\nI took her hips and guided her around like she'd done to me and saw her back had a thong tan line. Like her front, her back was darkly tanned but she had a white stripe across her ass proving that she really did only wear thong bikinis. Interestingly, her bottom tan was more sharply defined than her tits, making me suspect she tanned topless at least half the time. \n\nWhen I stood up, she asked, \"Is that all?\"\n\nI could hear the expectation in her voice, I could easily see the whole scenario was turning her on. With my hands on her hips her breathing was noticeably harder. \n\nI had to resist the urge to reach out and stroke her pussy, the soft skin and glistening wetness was almost irresistible. She fidgeted a few seconds making me look up into her face to see her biting her lip with an uncertain look on her face.\n\n\"I'm getting a little self-conscious here. You haven't said a word the whole time you undressed me. A girl could begin to think you weren't impressed.\"\n\nWith a start I realized she was right. The whole scene with me she had let me know her thoughts and complimented me, it had lifted my self-esteem. I hadn't considered she might want the same type of ego boost. \n\n\"My apologies, it is unforgivable to allow you to think for a second that you're anything less than perfect.\"\n\nI reached out a finger and casually stroked her sex, up one side of her lips and down the other, the soft skin was perfectly smooth, she waxed, not shaved. \n\n\"You are a work of art, I love the softness and smoothness of your skin, your lips are sexy and inviting.\"\n\nI moved my fingers to trace the muscles of her thighs and calves.\n\n\"The muscles in your legs are perfect, the firmness and definition are sexy.\"\n\nStepping behind her I trailed my fingers across her ass, she shuddered as I put both hands on her thighs and dropped them first down then up her legs. I cupped her butt and gave it a gentle squeeze.\n\n\"It's obvious you work out and your body is amazing.\" \n\nMoving back to the front I let my fingers cross her back, sides, then belly; she tilted her chin up as I used both hands to brush, then lift her heavy boobs. I'd been mistaken in my first impression, I thought they were C sized, but feeling and seeing them they were grapefruit sized and definitely in the D category. She opened her mouth seeming about to say something then closed it again as I cupped them, feeling their weight and tight firmness. I used my thumbs to caress her nipples, then drew my hand back and gave each one a gentle pinch.\n\n\"Your tits are awesome, I love how responsive they are, they're hard as diamonds right now. Does that mean you're enjoying this?\"\n\nShe was flushed and flustered as she answered, \"Trust me, you'd know if I wasn't enjoying this.\"\n\nI laughed at her good nature, \"Yes, I suppose I would.\"\n\n\"And as much as I enjoy giving you a working commentary on your body, I suppose we should get to business,\" I said.\n\nWe each took a seat again and I asked, \"Favorite sexual fantasy?\"\n\n\"Threesome with bondage, but I want a devil's threesome.\"\n\n\"That's two guys, right?\"\n\n\"Yep, I want two guys to have their way with me, I want to be tied up and let them do whatever they want to me.\"\n\n\"What else do you like?\"\n\n\"Well I told you I love bondage, it's so sexy when a man ties you up in your panties. I like to struggle as he overpowers me. I get excited by the idea of two men overpowering me, holding me down and tying me up.\"\n\n\"Any particular way you like being tied?\"\n\n\"They're all fun, as long as I'm helpless. Being hogtied is a real turn-on or spread-eagle.\"\n\n\"You mentioned being gagged, do you find that exciting?\"\n\n\"Very, just like being tied but even more so. If I'm tied, I can still talk, yell at the person, scream, but if I have a ballgag or my panties shoved in my mouth I'm truly helpless. There really is nothing I can do.\"\n\n\"Seems like you have a little fifty shades of gray in you.\"\n\n\"Oh my god, those movies annoy the shit out of me.\"\n\n\"Why?\"\n\n\"The girl in it is so stupid. I'd love to find a guy that tied me up like that, especially that third movie where she's tied standing. It'd be awesome to be tied like that.\"\n\n\"Sounds like you need to find a kinky billionaire.\"\n\n\"God save me, he was just as annoying in those movies. Look, I like a good spanking when I'm tied, I don't even mind my ass red and a little rough, but I don't want him to thrive on my pain. Plus, that dude was too jealous, when she was topless on a beach and he got mad, that was just stupid. The bondage in the movies was hot, but the attitudes about them were just ridiculous.\"\n\n\"I agree with both those statements. What is it about bondage that you like?\" I asked.\n\n\"If it's done right, it can be sexy as hell. It should go one of two ways, either it's all about me, or it's all about him. I'm good with either as long as I'm not always ignored.\"\n\nContinuing, \"If a guy ties me up, gags me, then uses me for his own pleasure, that can be hot. If he wants to keep me tied and use me like a little fucktoy, use my mouth anyway he wants, I'm good with that, but the flipside is occasionally when I'm tied it needs to be about me.\"\n\n\"Go on.\"\n\n\"I need to be tied up and then he spends all his time, uses all his focus on me, goes down on me, makes me cum. Hell, get creative, use a feather and tickle me till I'm begging to suck your dick to make you stop. Talk dirty, make me talk dirty, tell me you won't stop until I talk dirty to you. That's what I want. Use ice cubes to make me scream, then gag me and use them again. Gag me and make me glare at you with hate as you spank my ass bright red, then fuck me until I cum multiple times. Take pictures of me and tell me how you're going to show your friends unless you can cum on my tits. Then show them to your best friend anyway, and tell him to let me know so I blush bright red when I see him.\"\n\n\"Dear god that's so hot,\" I said.\n\n\"Really, it doesn't bother you?\"\n\n\"I love tying a girl up and I've even had a few enjoy it but never met somebody so obviously into it. It's taking every ounce of will to not... never mind.\"\n\n\"Not what?\" she asked. \"You want to tie me up right now, don't you?\"\n\n\"I didn't say that.\"\n\nShe was grinning like mad so I knew she was teasing me but my dick got harder at the thought of tying her up. I had been about to say it but I was trying not to be creepy. It was just so hard not to push the lines because she was so easy to talk to. I'd never met somebody that was so compatible with me or as easy to get along with. I was positive she felt it too but I had to keep reminding myself not to fuck this up by going too fast.\n\n\"Let's do it,\" she whispered.\n\nAnd all thoughts of moving too fast flew out the window along with any self-control I had.\n\n\"You mean tie you up?\" I asked.\n\n\"Fuck no, what kind of pervert are you? Who the fuck do you think you are?\" she said severely.\n\nMy heart hammered, \"Oh shit, I'm so sorry,\" I stammered. \"I just wasn't sure what you were talking about and I...\"\n\n\"Gotcha.\"\n\n\"I... uh what?\"\n\nLaughing she said, \"Of course I meant tie me up, god I wish I could have seen your face.\"\n\nMy heart was still pounding a beat but I shook my head and sighed in relief, \"I'll admit, you got me on that one. Jesus I really thought you were pissed.\"\n\nShe slowed to a small chuckle, \"Priceless.\"\n\n\"For the record, that kind of shit would get your ass spanked bright red.\"\n\nShe grinned at me, \"Maybe next time sexy.\"\n\nWe stared at each other for a minute as we sensed something happening.\n\nClearing her throat, \"If you go into my bedroom nightstand, you'll find some rope in the drawer.\"\n\nStanding, I went to check it out. Coming back out a minute later holding soft red cotton rope I tossed the bundle to the ground at her feet.\n\n\"You sure about this?\"\n\n\"Impress me,\" she said. Lifting her chin, her chest rising and falling, she murmured, \"If you're rope game is weak, I'll know you're full of it about everything else.\"\n\n\"Challenge accepted.\"\n\nI bent over and grabbed the rope.\n\nShe had her hands on the armrest but I wanted different, I moved one hand to the side of the chair by her hip, leaving her arm straight down, then wrapped the rope around her wrist a few times and then around the wood back support beam and tied it off. I repeated it with her other hand, then I took a longer piece and wound it through her arm and over the shoulder like a backpack strap, behind the chair and over and under her other arm the same way; making a figure eight with the rope looping her in front and the chair behind. This forced her to sit up straight as I tightened and tied the knot behind her. She tested her bonds as each new tie made her more helpless. Moving to the front I pushed her legs to the sides of the chair and then tied each ankle to the legs the same way I tied her hands, with multiple loops around the ankles then more around the wood. This let the bondage be firm but not damaging or hurtful. To finish I looped sashes around her knees and pulled them tight against the support beam of the armrest keeping her legs spread and sex on display. When I finished, I stood back and watched her test everything.\n\nShe gave sigh of deep satisfaction as her chest rose up and down and her head lolled while she tried to move each limb and couldn't. \n\nAfter a minute, \"Wow, I'm very impressed, most men can't do bondage that well and it's annoying. It's either too hard, too soft, or they just don't know what they're doing.\"\n\nContinuing, she swallowed then flexed her hips, \"This is perfect, do you even know how much of a turn-on this is?\"\n\n\"I'm getting an idea from your behavior,\" I whispered, I reached a thumb out to stroke her lips and her tongue gave me the smallest lick. \n\nThe next few minutes she stayed quiet as I watched her test her bonds, biting her lip, twisting her hips and chest. Tugging against her hands and feet. \n\n\"Everything good?\"\n\n\"You have no clue how badly I want to be touched. I don't think I've ever been this aroused.\"\n\n\"That's almost criminal.\"\n\n\"Tell me about it,\" she said. \n\nWe both sat for another minute as the implications of what we just did sunk in. \n\n\"Are we going to continue?\" I asked.\n\nShe swallowed and nodded.\n\n\"You said you like to skinny dip, tell me about it.\"\n\n\"I love skinny dipping with friends, I've done it with boyfriends but I prefer to do it with regular friends. There's something exciting about being naked in front of people that don't usually see you naked.\"\n\n\"What's the craziest time you've been naked in front of friends?\"\n\n\"Besides now?\"\n\nI laughed, \"Yes, besides now.\"\n\n\"This one time I went hiking with three male Marine friends, we walked all morning and then stopped at a lake for lunch. It took them by surprise when I went swimming. I stripped next to them like nothing was out of the ordinary and then went into the water.\"\n\n\"Wow, that's crazy, I'll bet they loved it.\"\n\nLaughing, \"Yeah, you should have seen the look on their faces when I took off my clothes. I'd been planning it all morning.\"\n\n\"Really?\"\n\n\"They told me the route we were going on went by the lake and semi-secluded back trails.\"\n\n\"Were you worried other people would see?\"\n\n\"Worried? I was hoping.\"\n\n\"So how'd it happen?\"\n\n\"We stopped for a lunch break around noon, there was a picnic table. We all had brought small packs with lunch stuff, one of the guys made an off-hand comment that we should have brought swim suits. We were hot and sweating and the water looked so cool. As soon as he said it, they all grinned, I figured somebody would make some comment about going swimming anyway so I just hopped up from my seat and took off my shoes and socks. I'm sure they thought I'd just go wading or something at first, but then I hiked my sport bra off and pulled my shorts and panties off in the next few seconds. I looked over at them and you should've seen the looks on their faces, priceless.\"",
        "\"I'll bet.\"\n\n\"Anyway, right after I got in the water then they stripped and followed.\"\n\n\"Did they try anything?\"\n\n\"No, I think they were all embarrassed to try something in front of each other.\"\n\n\"Probably.\"\n\n\"They did get some pics though.\"\n\n\"You let them?\"\n\n\"When I got out of the water, I cleared the picnic table and laid out to dry. I put my sunglasses on and let the sun warm me up. I closed my eyes but when they got out, I could hear them moving around, I peeked and one was taking pictures of me with his cell.\"\n\n\"You didn't say anything?\"\n\nLaughing, \"I asked if he wanted me to turn over.\"\n\n\"He said please, so I flipped over and went back to resting. After about thirty minutes, I got up and dressed, then we hiked back home. I was a little annoyed, if I'd waited another ten minutes two more guys would've passed by us.\"\n\nLaughing, \"So you would've wanted the strangers to see you?\"\n\n\"It would've been hot.\"\n\n\"Nothing else ever happened?\"\n\n\"About a month later one asked me out and we went on a date but we just kissed and never went out again. Throughout dinner we realized we didn't have anything in common, there were no sparks. He's still a friend though and we occasionally hang or whatever.\"\n\n\"Wow, you are something else.\"\n\n\"Look, I like making love as much as the next girl. I don't want kinky sex every day, maybe not even every week, but I do want it. Most of the time it's slow lovemaking and caresses and tender touches, but there has to be some wild, grab my hair and fuck me now and again. Nothing is worse than a boring lover.\"\n\n\"I agree.\"\n\n\"You don't think it's too much?\"\n\n\"Nope, not even a little. Anything else?\"\n\n\"I love sexy tan lines, I make sure I have dark tan even during the winter. I make sure my tits have perfect white triangles and my ass has a g-string tan line.\"\n\n\"Why is that?\"\n\n\"I love bending over while wearing pants and letting guys see my panty peeking out but the tan line always gets their attention. I've had multiple guys comment on it. I'll wear shorts during spring and summer and if they see my tan, they always ask about it.\"\n\n\"Is that all you wear? What about places that don't allow it?\" I asked.\n\n\"If I go to a water park or something with kids, I wear a Brazilian style. Not quite a thong, not quite a full bikini, but if I go to beach or anything and kids aren't a factor, yes, all I wear is a g-string or thong. I don't care, I've gone to company beach parties in a thong.\"\n\n\"Nobody has ever said anything to you?\"\n\n\"Oh, they say all kinds of things,\" she laughed. \"But if you mean has anybody told me to stop or put on something else, once a commander said he didn't think it was appropriate but I pointed out it's bull. We had guys wearing briefs and that was okay but me in a thong was wrong, no way am I agreeing with that. I threw enough of a fit that he let it drop.\"\n\n\"Sign of the times.\"\n\n\"Exactly, I should be able to dress however I want. If you can't handle it, that's your problem, not mine.\"\n\n\"For the record, I'm falling in love. Tell me something else.\"\n\nShe laughed, \"I like to surprise my man with dirty talk.\"\n\n\"Explain.\"\n\n\"I do cuss, I drop f-bombs and other things when I'm mad, but I only use certain words when I'm talking dirty. I don't like being crude in public but I do like teasing my man. I'd like to be at his or my family's house for holiday dinner and as they're watching television, I want to whisper into his ear that I want to fuck him.\"\n\n\"Wow.\"\n\n\"Stuff like that, I want to be in line at the movies with the crowd talking and nobody paying attention and casually tell him I want to suck his dick.\"\n\nI had to shift in my chair after that comment, my pants were suddenly a size too small.\n\n\"My turn,\" she said.\n\n\"Go ahead.\"\n\n\"What do you want in a girl?\"\n\n\"Honestly?\"\n\n\"Yes.\"\n\n\"A girl exactly like you.\"\n\n\"Really?\" she asked doubtfully.\n\n\"I can hear the hesitation in your voice.\"\n\n\"It's just that most guys think a girl like me is a slut.\"\n\n\"Perhaps, but I think they're stupid. Do you think you're a slut?\"\n\n\"No, because I don't want to have sex with everyone or random strangers, I just like a few key things,\" she said her voice rising. \"I shouldn't be looked down on because I want guys to admire my body. I spend too many days a week working out and obsessing over my diet for this body. I should be allowed to show it off any damn way I want.\"\n\nShe was panting after her rant.\n\n\"Touched a nerve on that did we?\" I asked.\n\nSmiling, \"I guess we did.\"\n\n\"Well, you have nothing but my respect. I think everything you told me so far is hot. Hell, if you were with me I wouldn't even care if you went showing off and skinny dipping when I wasn't around.\"\n\n\"It wouldn't bother you if I came home with a story like the one I just told you?\"\n\n\"The only thing that would upset me would be why I didn't get a copy of the pictures.\"\n\n\"Last question,\" I said.\n\n\"Shoot.\"\n\n\"Why did you do this? This is taking crazy to a whole new level. I get showing off. I get maybe agreeing to be interviewed, possibly even in your underwear, but naked, tied up by a stranger? Come on, I'm here and I don't believe this is actually happening.\"\n\nShe laughed, \"I know what you mean,\" she said. \"But what can I say? I don't know what came over me. Pick a reason, bad breakup, the moment, it sounded like fun, they're all true. At any moment I was ready to call it quits. If you had said one wrong thing, if any moment it'd felt off. I would've bailed, but everything clicked, one after the other and I've had a blast. This is definitely going to be a memory that lasts a life time.\" \n\n\"Fair enough,\" I said. \"We're at the end, but before I untie you, I want to know if you want me to take off your blindfold.\"\n\n\"I've been thinking about that this entire time. Part of me wants you to take of this blindfold and spend the night having crazy kinky sex with me, but part of me is really enjoying this. It's a fantasy come true and I don't want it to stop. Whenever I see another sergeant I'll always wonder if it was you, in my mind I can imagine all sorts of sexy things and while I think you'd live up to my expectations I can't know for sure. If I don't see you, I can always imagine. Maybe we will one day but for now I want the fantasy.\"\n\n\"I can understand that.\"\n\n\"But I would like to keep texting you.\"\n\n\"Deal.\"\n\nI stood up and moved to her, \"Before I go though...\"\n\nI bent and kissed her, her mouth immediately locked onto mine. She met my passion with her own fierce energy. Our tongues teased and played with each other, she strained against the ropes as I put a free hand between her legs and stroked her pussy. She moaned into my mouth as her tongue slid across my teeth. I broke away and she sat there panting.\n\nQuickly I loosened all her bonds enough so that she could get free on her own, then I grabbed my gear and left.\n\n*****\n\nA week later.\n\nAlanza: You still here?\n\nMe: Of course.\n\nAlanza: Send me nudes!\n\nMe: With face?\n\nAlanza: Not yet, just body.\n\nMe: Was about to work out.\n\nAlanza: Perfect, send them afterward. I want to see you sweaty.\n\nAlanza: And make him hard too.\n\nMe: You don't ask for much do you?\n\nAlanza: I'll send you back some.\n\nHow could I argue with that? \n\nI did what she told me and after I worked out, I sent some nudes front and back to her.\n\nAlanza: God you're sexy! Love the tattoos too.\n\nI had a Celtic cross tattooed on my right arm and samurai warrior underneath cherry blossoms on my left. \n\nMe: Thank you, and my pics?\n\nA minute later my phone beeped, she'd sent me two pics. One had her hands cuffed to the bed and she was completely naked, I could see her tits but her legs were clamped together and shifted so I couldn't see her pussy. The other was in the passenger seat in a car in a Taco Bell parking lot wearing just her panties, she was leaning back and had one leg pulled up into the seat. She was wearing a big smile in both of them. \n\nMe: Holy!\n\nAlanza: Lol. You like?\n\nMe: Yes I do. Who took them?\n\nAlanza: Had a friend take them for me, he was very excited to handcuff me.\n\nMe: Who were these for?\n\nAlanza: You, told him you were a good friend on deployment and you needed motivation.\n\nMe: Really? You did these since we interviewed?\n\nAlanza: Yes.\n\nMe: That's hot.\n\nAlanza: Thank you. It was a threefer, I get to be naughty with a friend that hasn't seen me naked yet. I get to send you some sexy pictures, and I get to see if you are how you say you are or if you're the jealous type. \n\nMe: The only thing I'm jealous about is that I would've made sure to cop a feel as I took the pics.\n\nAlanza: Yeah, that happened, lol.\n\nMe: No way.\n\nAlanza: Lol, yep.\n\nAlanza: He was a little bad when he handcuffed me.\n\nMe: What'd he do?\n\nAlanza: Grabbed an ice cube and used it on my tits, I was ready to kill him.\n\nMe: Lol.\n\nAlanza: Said my nipples should be hard to make the pics look good. I was trying to get free but he was straddling my legs.\n\nMe: That's hot. \n\nAlanza: I was a bit turned on, he played with my tits for a few seconds afterward \"to warm them up.\"\n\nMe: You didn't say anything?\n\nAlanza: I gave him the raised eyebrow and \"seriously\" look, but he was being very funny about it and despite the feel he wasn't too sexual, it was in good fun kind of thing. Which is even hotter.\n\nMe: I agree.\n\nAlanza: I figured as long as that's all he did it was all good.\n\nMe: Lol, that's so cool.\n\nAlanza: Course he made me promise to have you return the favor if he ever deploys!\n\nMe: Gladly.\n\nAlanza: It really doesn't bother you? You're not jealous?\n\nMe: Nope, just incredibly turned on. Does that surprise you?\n\nAlanza: A little. I did it mostly to get an honest reaction from you.\n\nAlanza: Wanted to make sure you weren't just saying things you said at the interview because you thought I wanted to hear it.\n\nMe: I'll prove it to you.\n\nMe: How badly do you want your devil's threesome?\n\nAlanza: It's my Everest. \n\nMe: What are you doing Saturday?\n\nAlanza: Nothing.\n\nMe: Do nothing at the mall. Be there at noon, dress sexy as you want. Park in back corner, when you get out of car keep head down and play with phone.\n\nAlanza: Why do I have to keep my head down?\n\nMe: Only if you don't want to know who we are. If you do, look up and you'll see us.\n\nAlanza: K\n\n*****\n\n(Alanza)\n\n\"Apple\" was my safe word, he'd given it to me during our texts earlier this week. If I was gagged, he said to snap my fingers. I was practically giddy from excitement as I got ready. \n\nI'd woken up and put in a two-hour workout this morning, I knew I had a great body but still I wanted them to be impressed, I wanted everything perfect. \n\nI felt like a teenage girl that wants her first time to be magical. I smirked at how ridiculous that seems now, in our youth, girls want it all romance and candles and soft lights and blah, blah, blah. My first was a cute boy on our prom but strangely I barely remember the actual incident. I remember the hotel, the fancy clothes, the getting naked, then it all goes blank. I don't even remember if I enjoyed it or not.\n\nDespite the stupidity of my teenage self, I did want to remember this experience, I wanted every detail etched in my memory. The only thing I was unsure of was if I wanted to know who they were. \n\nI was torn on that matter, I'd felt his body and it was sexy as hell. He'd also texted me that his friend was the same type and that they were both good looking. I believed him but what if I was disappointed, what if I looked and both just didn't do it for me? Would I stop? \n\nThis was a perfect chance, I had no idea if he was as good as he said but so far, he'd been incredible. When he tied me up and the way he'd touched my body, it still sent shivers up my spine. I debated all the ways I could do this, go with it and never know who it was, that idea was hot but also left my curiosity forever unsatisfied and I wondered if it would drive me crazy eventually. \n\nSee what they look like and hope for best, that way was 50-50 that I'd be happy or disappointed. Or I could go through with it and then see what they look like, at first thought that seemed a good idea but the more I thought about it I hated that one. If they were awesome and then I saw them and they didn't live to my expectation I'd have ruined this great experience. \n\nIn the end I decided to let their skills speak for them. If they did what they said they'd do to me and made this the sex of a lifetime I'd keep them anonymous. If I had to snap my fingers or say apple, I'd see who it was.\n\nAfter my workout I took a long shower and primped my body, I waxed, tweezed, combed and made sure everything was perfect. My pussy was smooth as silk, my hair was in place and flowing, my makeup was on point. Then I put on a pair of sexy black g-string panties, they were about the size of a postage stamp with a sheer front. I debated on what else to wear, it was a little chilly so I wasn't sure if I should wear a mini-skirt or jeans. I decided on the skirt, I figured I wouldn't be outside long anyway. I had a gray suede skirt with a long sleeve black blouse that had an open V to almost my belly button, a bra was not an option with this top. I completed it with a pair on thigh high black suede boots with stiletto heels. \n\nAt 11:30 I did what I'd been told and drove my black Ford Explorer to the mall. I pointedly didn't look around at cars or try to see if anybody was loitering about, I wanted to give them a chance to live up to my dreams. I parked at exactly noon and checked myself one last time. Then I got out of my vehicle and shut the door, turning I kept my head down and played with my iPhone. My heart was pounding as I tried to think of anything simple to do on my phone. It was impossible, all I could do was blankly stare at the screen. \n\nThen I realized something. I sent a quick text.\n\nMe: What do I call you?\n\nAfter a minute, I heard footsteps easily making their way behind me and I had to resist the urge to look.\n\n\"Give me the phone, stay still, and keep your head down,\" a voice whispered. \"Call me Chip. I interviewed you.\"\n\n\"Call me Dale,\" another voice said. It was obvious they were both trying to disguise their voices. That made me wonder if I knew them in even a casual way. \n\nI did what he said and handed it behind me, then didn't move. I thought about the names for a second. I knew he did it because of the Disney love we both had but it almost seemed too silly for what we were about to do. I was about to ask them to change them when a random thought crossed my mind about them being more like stripper names. That brought a smile to my face, I realized that I could live with it because it reminded me of both, sexy strippers and my cute Disney characters. Chip had already shown me he had a sense of humor during our interview and was still sexy. The more I thought about it, the names were perfect.\n\nStrong hands grabbed both wrists and pulled them behind my back, at the same time black silk covered my eyes and wrapped around my head twice before I felt it being tied off behind my head. I could smell the same clean citrusy scent that I had days ago in my interview. I gave a quick tug on my arms to see if I could break free but the hands that gripped me never broke and I barely moved an inch. This excited me more; they were taking this seriously. I gave another twinge and was rewarded with the other two hands grabbing my arms. They twisted and pushed me against the hood of my car and locked my hands behind my back, the soft silk was wrapped snuggly around my wrists. I gritted my teeth and started to struggle and twist to get free.\n\n\"Let me go,\" I snapped, shifting my shoulders. \n\nThey didn't say a word but kept tying me up. I was thrilled, I'd have been disappointed if they'd obeyed me. I wanted the full experience, I wanted to be taken against my will.\n\n\"Assholes,\" I muttered as they finished tying my hands. I flexed and couldn't find the knot or any give, it would take me hours to get free even if they left me alone. I was pulled away from my car and turned around.\n\n\"Let me...\" was all I got out before I felt a ballgag slip between my lips. I moaned as they buckled the strap, locking it in place.\n\nI heard, \"Get the car.\" \n\nI heard footsteps walk away, a car pulled up and the ding, ding of a door opening while the car was running. I tried to get away again but they both held me tightly. I was lifted off the ground and put face down in the back seat of a car. I smelled new car leather as both doors opened and they moved to either side of me to work. I squirmed but it was only for show and they worked quickly to secure me. The one behind grabbed my ankles crossing them then bringing them behind my back and more silk was wrapped around them. The one in front reached down and hooked the bottom of my skirt and tugged it to bunch up at my waist exposing my ass. \n\nA flush went through my body as my hardened nipples pressed into the leather seat. I moaned and felt a quick slap on my ass.\n\n\"Behave,\" Chip said.\n\nI gave them the finger and they both chuckled. They'd finished tying my feet together and Dale worked another sash between my bound feet and hands. After he looped it, he pulled it tight forcing me into a tight hogtie. I sagged against the seat in defeat as they finished making me helpless. The two of the them did some weird thing with the seatbelts and I felt them looped around my body and clicked in place. Then each went out the side doors as I squirmed to test my bonds. \n\nAfter a minute of struggling and hearing them laugh I was still firmly hogtied and strapped to the seat. I couldn't get free or even move around on the seat. I was perfectly helpless.\n\nI loved every second of it. \n\nIf they could feel my body, they'd realize my nipples were so hard they ached and I was as wet as I'd ever been. If I hadn't been gagged, I'd be begging for sex right now.\n\nAs they closed the doors and drove to wherever they were taking me I flashed to the first time I'd been tied. It'd been a hogtie, just like now. \n\nI was 19, just out of my military training at my first duty station. I had a boyfriend who was cute as hell but kind of boring, all he wanted to do was play video games. I was on his bed in his barracks room, reading a book while waiting around wearing a gray midriff tanktop and white cotton thong panties. \n\nA quick knock and the door opened to reveal his best friend, Dillon. He wasn't quite as good looking but he was fitter and more outgoing, he was always doing something outdoors. He had brown hair and eyes with a USMC tattoo down his right arm, and was wearing khaki shorts and a black tanktop.\n\n\"Oh shit,\" he said when he saw me, I'd just started to develop my exhibitionist side so he'd seen me at the beach in a thong bikini but this was a little more intimate.\n\nI'd never showed off in my panties before and the thought excited me. \n\nI raised an eyebrow, \"Why'd you even knock if you were just going to walk in?\"\n\n\"Habit I guess, just coming to get back some gear I left here.\"\n\nHe gave me a onceover, focusing for a second on my underwear. He looked into my eyes and an understanding passed between us. I decided to tease him a little. I rolled over facedown crossing my ankles behind my butt pretending to read my book.\n\n\"Feel free to get whatever you need. I'm just waiting for him.\"\n\nA few seconds went by before, \"You do know he went out with his sergeant, right?\"\n\nI looked over my shoulder to find him staring at my ass. I cleared my throat, blushing, he looked into my face as I asked, \"No I didn't, why?\"\n\n\"I think he needed to take him into town to pick up his car from a shop. I'm pretty sure they won't be back for a few hours.\"\n\nI closed my book, \"Well damn, no wonder he hasn't texted me all day.\"\n",
        "Dillon nodded.\n\n\"Thanks for letting me know,\" I said.\n\nHe nodded again and opened one of the wall lockers and pulled out a backpack. Tossing it on the ground he pulled a few more things out and tossed them down. Finally, he closed the locker and took a knee and started grabbing gear and stuffing it in the backpack. There was a lot of outdoor stuff like a compass and flashlight, but my attention was caught by some white cotton rope.\n\nI'd had a fascination with bondage since my early teens but had never been able to act on it. It felt weird to ask a boyfriend to tie me up and the few subtle hints I'd thrown out were never picked up on. \n\nOn a whim a decided to test Dillon and see what his interests were.\n\n\"So what's that for?\"\n\nHe looked up at me. I tilted my head and eyes toward the rope, \"You use that to tie your girlfriend up?\"\n\n\"If she gets bad enough.\"\n\nMy jaw almost dropped, I hadn't expected an answer like that. \n\n\"Oh yeah. What's bad enough?\"\n\n\"If she gets uppity or doesn't do what I tell her.\"\n\nMy heart was pounding, he was talking the way I wished a guy would talk, but was he for real?\n\n\"Yeah right, you wouldn't even know what to do if a girl needed to be tied up.\"\n\n\"Is that what you think?\"\n\nI rolled my eyes, \"Yeah, that's what I think.\"\n\n\"Keep it up, I'll prove I know what to do.\"\n\n\"And how would you do that?\"\n\n\"I'll hogtie your little ass right now.\"\n\n\"You wouldn't dare.\"\n\nHe barked a laugh, \"Not only would I dare, I'd rip your shirt off and gag you with it, then take pictures for a memento.\"\n\nFor a second my eyes widened, I was stunned. It was a fantasy come true but I definitely couldn't tell him that. I wondered if I could push him to do it.\n\n\"Now I know you're bluffing.\"\n\n\"Why do you say that?\"\n\n\"What makes you think I'd let you do that?\"\n\n\"What makes you think you could stop me?\"\n\nI swallowed, \"You'd be too worried about your best friend.\"\n\nHe grabbed the rope and stood up, \"You going to tell him?\"\n\nI was spellbound, I couldn't think of anything to say, words wouldn't form in my mouth. I shook my head no. \n\nAs if in a dream he reached over and grabbed my book from my fingers, I was breathing hard as he took my hand and put it behind my back. He reached for my other arm but I pulled it away to the corner of the bed. Looking up into his face he shook his head at my defiance, straddling me he held my arm behind me then reached for my other wrist.\n\nI struggled a little as he brought both hands together behind my back and looped the rope around my wrist a few times. I still remember the soft texture against my skin. I was worried he'd tie me too tight but he kept the rope snug without cutting off my circulation. I don't know if he'd had any experience but he was perfect. I strained against the ropes as he shifted and started looping more rope around my ankles. No words were spoken as I lightly struggled against him. He seemed to understand my needs perfectly.\n\nAfter tying my ankles, he rolled me over and hooked his fingers into the collar of my shirt, a quick jerk and he ripped my shirt apart exposing my tits, I sucked in a breath, then he ripped the shoulder straps too. Pulling it off, he rolled it tight and slipped it between my lips. Whimpering, I tilted my head as he tied it behind me. Standing back, he admired me afterward. Wriggling I tested my bonds to tease him, he reached out and stroked my nipples one after the other then traced down to my panties, caressing my mound through the fabric. I blushed at the wet spot that had formed through the cotton but he ignored me and took out his phone and snapped some pictures of me. I made sure to put on a good show for his camera by moaning and squirming. \n\nAfter a minute he rolled me over and got another piece of rope. Looping it around the wrist ties and then bringing it to my ankles he forced them together behind my back, I put all my strength in resisting but with the leverage of the rope my wrists and ankles were slowly drawn together. He finished with some more knots and stood back. This was the first time I was helpless and half-naked in front of a guy and I was on fire. I'd have let him do anything to me at that moment. I couldn't say anything so I just whimpered and squirmed as he took more pictures. Running his fingers across my ass he rolled me over to stroke my tits and pussy through my panties. After 30 minutes or so he loosened the ropes enough for me to get free and then left without a word. \n\nNeither of us ever mentioned it but the next time we saw each other but we both had knowing smiles. \n\nNow I was hooked on bondage forever, and I wondered if he'd ever do anything again. \n\nA few weeks later, my boyfriend was taking me away for the weekend but Friday night he was going to hang out with his friends. I was relaxing in my room in red leggings and a matching zip-front sport bra when there was a knock on my door. I opened it to find Dillon.\n\n\"Hey, the hot water is out, mind if I use your shower?\"\n\nThis was a little weird but I just nodded and let him in and closed the door. He had a small bag he dropped by my bed as I turned to face him.\n\n\"Wait, how is your hot water out and you want to use my shower? The barracks have the same hot water heater.\"\n\nHe shrugged, \"Caught.\"\n\nMy eyes went wide as I realized what he was about to do. Reaching out he grabbed me and tossed me onto my bed. I was so surprised I didn't struggle but I did get immediately turned on. My nipples got hard and as he met my eyes he reached into his bag and pulled out some rope. Licking my lips as he moved toward me, I put up a fight as he pinned my arms to the bed. We wrestled in silence as he held me down then tied my arms to either corner of the bed. I glared at him as he reached forward and unzipped my bra, exposing my tits, smirking at me as he gave them a little pinch. \n\n\"I brought a gift,\" he said as he reached into the bag and pulled out a ballgag. \n\nStraddling my legs, he pushed the gag toward my mouth. I accepted it willingly as he slipped it in place. This was my first time with a ballgag and I was intrigued. I ran my tongue against it, testing it, to see if it stopped my words. I shifted my head back and forth seeing how well it was held in place. Our eyes met as he scooted back down my legs, pulling my leggings and red g-string panties off in one bold move. \n\nI groaned and cursed into the gag, to my delight I was barely audible no matter how I tried. He tied my legs to either corner exposing me spread-eagle. Once again, my body exploded into fire and desire as I was so brazenly naked. My pussy was on complete display for him and there was nothing I could do to stop it, not even yell.\n\nHe stood back and admired his work, I kept up my struggling and trying to talk through the gag as he once again took pictures of me. When he stopped we both looked at each other.\n\n\"I really do need a shower,\" he said.\n\nI watched as he stripped naked and went into my bathroom. I was insane with passion. As I heard him shower, I struggled. If I could've gotten free, I would have joined and most likely raped him. When he finished, he came back out and dressed, my attraction to him soared as he stood shirtless in jeans with his hair still tousled and damp. \n\n\"You really do enjoy this huh?\" he said as he stroked my mound, tracing my tightly trimmed black pubic hair. His fingers ran over my pussy and touched my clit making me groan, I pushed my hips as he tested my wetness. Frustrated I cursed into the gag as he withdrew.\n\nContinuing, \"I know, I know, it's frustrating, you have no idea how bad I want to have sex with you.\"\n\nI shrieked into the gag and gave him my best \"Really\" look.\n\nLaughing, \"Maybe you do. I know we've crossed a line but I feel it's not quite a betrayal yet. I don't want to confess or anything but I can't go any farther, at least not while you're together. So I'm not going to do more. I'm going to get dressed and leave but the gag is yours, a present from me. If you're ever free and I'm around, expect to be tied up again.\" \n\nThat was the last time it happened. He was right, even though we didn't have sex we definitely crossed a line and I felt guilty after that. I did learn about myself and was thankful for the experience. I broke up with my boyfriend a few days later. I decided I never wanted to settle, and even though he was a nice guy we just didn't have much in common, he had no spirit of adventure. I wanted to hook up with Dillon but by then the military sent him off to a school for 12 weeks, and when he got back, I was gone to a different school for four months so we just never connected. \n\n*****\n\nWe arrived to wherever it was they were taking me.\n\n\"Is it clear?\"\n\nA second later, \"Yes.\"\n\nThey unclipped me from the seatbelts and then undid the hogtie but left my wrists and ankles tied. Standing me up on the side of the car one grabbed my ankles and the other grabbed my shoulders and they carried me into a building. I could smell the ocean as they opened a door and brought me inside. I heard a window open and felt a fresh breeze. I knew I was in a hotel room by the ocean. One of them undid the gag and offered me a small drink of water. I took it and cleared my throat. \n\n\"Please don't tell me anybody saw you carrying me into the room with my skirt hiked over my ass,\" I said.\n\n\"I think they'd say something about you being tied up before your bare ass would get their attention,\" Chip said. \n\nFair point. \n\nTwenty minutes later I was tied to the bed spread eagle, ball-gagged, and utterly naked. They'd been gentle but firm as they took off all my clothes. Even while untying me they'd never gave me a chance to get free. They'd done it slowly, lifting my shirt over my head and then each holding an arm as they untied my wrists only to slip my clothes off and retie them to the corners of the bed. My skirt was off with my panties around my ankles before they'd even untied my feet. They'd stretched my legs wide before they retied them to each corner, I tried to struggle but it'd been useless as they each were able to use their entire body to pin my legs. \n\nThey slid the gag back in and I felt them step back and focus on me. I was stretched tight to each corner of the bed. I tested each rope and couldn't gain any leverage or slack. My nipples were hard, my pussy was wide open and I was getting wetter by the second. Chip said he was going to put on some music and I heard, \"Call Me\" by Shinedown start playing as he moved to the bottom of the bed. \n\n\"Beautiful,\" Chip said as I felt his tongue lick the length of my mound.\n\nI groaned, this spurred him on as he traced his tongue up one lip and down the other, his tongue was magic as he probed me, licking, teasing, moving inside me making me struggle and moan.\n\nDale's body moved next to me on the bed. His hand traced my nipples and moved back and forth across my stomach. My head lolled as the experience of two men washed over my body. \n\nArousal, desire, and heat built in me, I pushed my hips up into his face, my chest shuddered and my nipples ached as the other continued to play with my tits. Fingers traced up and down my thighs as my body twisted back and forth and I cried with passion into my gag. I dug my nails into the bed trying to reach for anything as pressure built up from all the sensations. I was on the edge of overload. \n\nHis tongue touched my clit and I burst, all my energy released as my body went taut. Fingers pinched one of my nipples and a tongue circled my clit making the wave pulse and ride higher. Barely I recognized that I'd been screaming into the gag as my body rode the wave of pleasure. Their bodies shifted, I was exhausted and couldn't move even if I wasn't tied down. They moved back and I sensed they'd only changed position. \n\nI was wrong, I could move, if only to struggle and strain. Once again, I pulled against the ropes that held me down. They didn't give me any chance to recover as I felt a new tongue began to work my pussy. I could easily tell the difference, they had different strokes, different pressure, but the pleasure was just as intense. I thrashed as a new orgasm shot through my body. \n\nPressure landed on the bed and a body lay beside me. While Dale used his tongue to tease my clit and drive me wild, Chip kissed my tits, sucking and licking my nipples, teasing them with light nips, bringing my excitement right back to my previous high. \n\nFuck my life. It was an hour and four orgasms before they stopped taking turns. I was beat as I lay on the bed soaked with sweat. They hadn't even fucked me and I was done. Jesus Christ they were good. \n\nThe gag was undone from my mouth and water carefully put to my lips, I took small sips. I felt Chip move onto the bed between my legs. I could tell the difference between them now, Chip had a slighter taller and bigger body with a citrusy scent. \n\nAs I wondered what would happen next, he slid inside me. I gasped as he went his full length into me and held there. I pulled uselessly at the ropes as he kissed me. My tongue met his and he slowly moved back and forth. I frustratingly tried to wrap my legs around him but couldn't as he took his time pushing into me. His slow pace was maddening but I actually built to another orgasm in record time. \n\nThis was unreal, I should be passed out, yet the situation was such a turn-on that every time they touched me, I built to orgasm faster than I'd ever done in my life. \n\nAt least they were just as turned on. In a few minutes' Chip erupted into me causing my own matching orgasm. \n\nI wasn't given a break, less than a minute went by before Dale moved between my legs and started having his way with me. His technique wasn't as smooth, it was more raw. I could tell he cared more about his own passion than my pleasure. He was a good kisser though and he kept his lips locked onto mine as he thrust inside me energetically. \n\nAfter they each had me, they took a break and then untied me. I don't think I'd ever been more tired, used, or satisfied, but thinking I'd get a breather had proved wrong. In seconds they'd retied my hands behind my back and then tied my feet together, I was put on my knees and found myself giving back to back blowjobs. \n\nDespite my exhaustion I wanted to show them I was as good at giving oral as they had been with me. Even without my hands I sucked and licked and gave my best effort and both of them came. When I felt Chip pulsing, before I could move, he grabbed my hair and held me in place while he came in my mouth. I thought Dale might do the same but when it was his turn he pulled out and came on my tits. \n\nAfterward, they'd untied me and took me to the shower to clean me up. Chip said he was going to order room service before we got in the shower. I stayed blindfolded and relaxed as they took turns washing my body under the warm water. \n\nAfter the shower a knock came on the door. They led me to open it and get our food stark naked. \"Holy,\" was all I heard from the busboy and both men laughed from behind me. I gave a big thank you then closed the door behind me after wheeling in a small car with our food. The men cleared some area and I sat Indian style on the bed as I ate a grilled ham and cheese sandwich and fries. \n\n\"Well that was fun,\" I said.\n\nA small chuckle, \"That's an understatement.\"\n\nWe all laughed and spent the next few minutes talking about being in the Marines and funny boot camp stories but nothing about our situation. I heard a phone buzz and asked about it. \n\n\"That's nothing,\" Chip said. \"We've been taking pics of you all day and are sending some to your phone.\"\n\nMy mouth dropped, \"Really?\" I whispered.\n\n\"Yes,\" Dale said.\n\nBoth men chuckled, \"You know it's so easy to see when you get turned on, your nipples get so hard and your voice drops to this throaty whisper.\"\n\nI swallowed but didn't say anything, I reached up and touched one of my nipples, it was very hard. Another little laugh and I dropped my hand.\n\n\"That does bring up something, all the pics we've sent you so far have our faces cropped, do you want any normal ones?\"\n\nI waited a minute to collect my thoughts, neither one said anything. Coming to a decision I explained the choices I'd thought about the night before.\n\n\"Makes sense,\" Chip said after I finished.\n\n\"Have we lived up to your expectations?\" Dale asked.\n\n\"More than, which I why I want you two to be anonymous. I'm going to remember this for the rest of my life, I want to be able to imagine anybody.\"\n\n\"If that's what you want,\" Chip said. \n\nI nodded, \"But I do want to feel Dale.\"\n\nI stood off the bed and then felt a body move to me, \"Here I am.\"\n\nI reached out and traced his body the same way Chip and I had done days before. I gave the same type of commentary and was impressed, both had strong, fit bodies, solid features, and were well endowed. \n\nAfterward I stepped back, \"What now?\"\n\n\"Now for the finale,\" Chip said.\n\nThey moved me back to the bed and put me on all fours. I was sore and tired but I was instantly aroused as I understood what was about to happen. The bed moved as they positioned themselves, one in front and one behind. Dale's dick brushed my lips and I opened my mouth, at the same time I felt the Chip move into me from behind. They each pushed into me their full length then paused a moment to let me adjust. \n\nI assumed it was as new an experience for them as it was for me as we each sought to situate our body. Chip moved first, he put both hands on my hips and gently moved back and forth, I moaned as his dick throbbed. Dale was gentle as he flexed his hips, I appreciated that since I was unsure how to match all three of our rhythm's. It wasn't as difficult as I thought and we quickly moved our bodies into sync. \n\nAt first, I was so concentrated on pleasuring them I wasn't able to work myself up, but after we all meshed, my own excitement skyrocketed again. \n\nI was in awe, this was the perfect fantasy. Just like all guys wanted two girls to rock their world, most girls wanted the reverse. I was in heaven, Chip was steady and pulsing as he rode me from behind, his hands alternately stroking my ass and holding my hips. He reached a hand underneath and rubbed my clit and whine escaped me. Dale was just as good, he held my hair in a ponytail while he ran a finger on my cheek and reached down to stroke my nipple. Electricity ran through my body and my every nerve was raw, the audacity and sexual energy were amazing as we each fell into ourselves. \n\nA mini orgasm shot through my body and my hips bucked, Chip held on tight as I wiggled my ass. A sharp slap and a \"Down girl!\" sent me into overdrive and almost gave me another orgasm. I bobbed on the cock in my mouth, now both hands were holding my head back. I could feel the need in each of them. \n\nWe kept it up for a while, just as I felt us all building, \"Change,\" was all I heard before they shifted and left me. In seconds they switched positions and were back inside me. I could taste my juices on Chip's dick, he throbbed in my mouth and I lifted a hand and put it on his hip, using it to balance myself I lifted the other one and put it on the opposite side. Now I was gripping him and bringing my head back and forth in steady strokes as he held my hair. Dale gripped my ass tight as he plunged into me repeatedly. Our speed grew as each of us built to climax. \n\nSensing the finish, I clenched my body, sucking harder. I moaned as Dale broke first, with a cry he filled me. My own orgasm shattered my body a second later and my body locked. Chip kept pumping into me and suddenly his dick throbbed and his warmth gushed into my mouth. Our muscles strained against each other as the climaxes took forever, mine coming in gentle waves that slowly receded matching the beat of Chip's throbbing cock. \n\nI woke hours later to silence. I lifted my head from the pillow and felt around, no bodies, no sound, I was alone. I felt a little sad as I took off my blindfold, it was somehow a letdown to not say goodbye. I was lying on a rich burgundy comforter, I looked around the room, it was an expensive suite with all dark wood and a balcony with a view to the ocean. Night had settled and the full moon was rising, I saw a note on the dresser with a $50 next to it and my mood brightened.",
        "\"We didn't want to wake you, you looked to beautiful. We did take some pics though, they're on your phone, lol. The room is paid for, there is money for Uber and morning breakfast room service. You are extraordinary! \n\nSincerely, Chip & Dale.\n\nPS- I really hope you text me. I would like a night with you by myself, Chip.\n\nI knew this wasn't the end, I still wasn't sure what I wanted but I would definitely get with Chip again.\n\nI looked at the pics they'd sent to me, quickly downloading them to my own camera roll and then scrolling through them. Wow, there were some very sexy pics, they had pics of me hogtied in the car, tied spread-eagle, tied on my knees front and back, more of those while giving a blowjob to either man. I could see their full bodies in those pics and damn, they were impressive. There were multiple shots with them actually in my mouth, that sent a warm feeling through me knowing there were pics out there of what was very obviously me tied up and giving a blow job, one of those pics must've been taken with a timer because both men were standing there as I deep throated Chip. A few of me sitting cross legged and eating, then on the bed doggy style. The last few were of all three of us in the last position. Not sure how they did that, the angle didn't change so they must have set the camera up but I had no idea how they took multiple pics. Anyway, it showed each of them at both sides of me. I loved them all, now I'd have a keepsake from this night. \n\n*****\n\nThe next week I had to go out of town for Marine training but I texted Chip the whole time. I sent him nudes every day and made sure to show him what panties I was wearing. He returned the favor but never included his face. I was sad I didn't know anybody at the training well enough, I really wanted to send him some creative nudes and it would have been sexy to use a guy friend to take them. \n\nI agreed to meet him again but decided to wait for Valentine's Day in two weeks. \n\nHe got the same hotel and room, at the appointed time I knocked on the door and it opened a crack. I waited a second and came inside.\n\n\"I'm in the bathroom,\" he called out. \"Do you want me to blindfold you or do it yourself?\"\n\nI'd decided to still keep it anonymous, \"I'll do it.\"\n\n\"Sash is on the dresser.\"\n\nI picked it up and quickly blindfolded myself. I'd come to the hotel room wearing a full-length coat and the same thigh high boots as our last encounter, he'd told me how much he loved them and I'd even taken some nudes with them for him. \n\nI told him it was safe to come in and I faced the bathroom. As I heard the door open, I undid my coat and let it drop to the floor.\n\nIt was all I'd worn besides the boots.\n\n\"Oh dear lord.\"\n\nI smiled, \"Something wrong?\"\n\n\"Not at all.\"\n\nThe first time he'd kept my boots on and rode me missionary on the bed, I knew he was turned on but I didn't realize how much until a minute into our session I grabbed his ass and moaned \"Papi\" and that was the end of our first session.\n\nThe next time he was back to his previous stamina as he took me doggy style, and the last time I rode him for an hour before we both came in mind-numbing ecstasy. \n\nAfter the last he finally agreed to let me take the boots off. \n\n\"Like those do you?\" I whispered as he unzipped them and tossed them on the ground.\n\nA small laugh, \"That obvious?\"\n\n\"Only to a trained observer,\" I laughed. \n\nWe spent the rest of the night making love, fucking, and everything in between. We took multiple showers to clean our bodies from our marathon sessions. The next day ended the same as we went our separate ways. He left and I took off my blindfold. I let out a small bark of laughter, on the dresser were two 18-inch plush Disney Chip and Dale stuffed animals.\n\nA small note was attached to one. \n\nOriginally, I was only going to give you the Chip doll from me but \"Dale\" threatened me with violence if I didn't give one from him too. Hope to hear from you soon!\n\nMy heart was heavy but I knew what I had to do. I had gotten early orders and was leaving to my next duty station in two weeks. I didn't want to let him know, I didn't know how he felt but I was already attached. I didn't see how it could possibly work since I was now going to the opposite side of the country. I didn't want to have drama or prolong it so I decided to end it there. I texted him I'd be out of town and unable to text or write for a few weeks, I knew he'd assume it was for security, something common in the military. The next week I went to the phone company and had my number changed, by the time he realized what was wrong I'd be out of town. At this point I had a great memory and I hoped I would be the same in his mind. \n\n*****\n\nTo be continued...\n\nNote: Comments always appreciated. "
    ],
    "authorname": "storm_usmc",
    "tags": [
        "hotel",
        "military",
        "mmf",
        "panties",
        "skinny dipping",
        "survey",
        "thong",
        "threesome",
        "tied"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/the-sex-survey"
}
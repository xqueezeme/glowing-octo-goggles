{
    "title": "Tybalt and Juliet Ch. 15",
    "pages": [
        "I suppose it's natural for all mothers to worry how their children will cope at university - mine was no exception. Even though I'd always been a very independent child, Mum somehow doubted my ability to survive in one of the most civilised cities in England. She was convinced I'd starve, freeze or otherwise blunder my way into catastrophe within a week of arriving in Cambridge.\n\nSo, at the end of June, she'd worked out a three-month plan to 'domesticate' me - teaching me how to cook, wash, clean and iron (not that I was lacking in any of those skills) and trying to keep me away from any farm duties. We'd struck a compromise deal, whereby I'd cook the evening meal for the family on the days when I was working the early shift at the Campsite (maybe two or three times a week) and I'd make a half-arsed attempt at doing my own laundry (at least some of the time). Recovering from my injuries after the attack had called a temporary halt to Mum's scheming, but I was pressed back to my chores as soon as I returned to work.\n\nI enjoyed cooking. I hadn't been a novice at the start of the summer by any means, but having a regular commitment of preparing a meal for my parents (sometimes joined by my girlfriend) had given me an opportunity to hone my abilities and to experiment a little. As working at the Campsite and then at the Stables had turned to routine, I found (to my mother's delight) an opportunity for creative expression in my food. Dad was less thrilled; he was a man of simple tastes and preferred the traditional carb-laden British stodge to the more exotic dishes that I placed in front of him.\n\nBut despite my 'newfound' culinary prowess, Mum somehow still doubted the remainder of my domestic skills. We'd very nearly come to blows the weekend before I was due to leave, when she'd accused me of intending to go to university with only two pairs of jeans and a few faded t-shirts. She'd dragged me up to Kingston for a six-hour shopping marathon, to make sure I was \"fully ready for the winter\" (whatever the fuck that meant). I was met with a withering stare when I protested that I was sure they had clothes shops in Cambridge and that I could buy what I required when the need arose.\n\nMum's machinations aside, it had been a very quiet few weeks; all my friends (including Amy) had left for uni in mid-September and their departures had been followed by a flurry of photos on social media as they threw themselves headlong into the excesses of Freshers' Week. Everyone was drinking, dancing, partying - except me; my life was on hold as I waited for my term to begin.\n\nI say 'all my friends', but there had been one exception - that was Billy; his term at Durham didn't start quite as late as mine, but he'd left for the north of England at least a week after everyone else.\n\nI'd been unsure what to do about Billy ever since the attack. Clearly Amy and I owed him a great debt of gratitude for what he'd done that night, but it wasn't as simple as pretending we were suddenly best friends. Apart from having been at the same school for the previous seven years, seemingly we had nothing in common. I was apprehensive about going for a drink or a meal with him - what would we talk about after the first ten minutes of banal pleasantries?\n\nBy chance, Jackie (my boss at the Stables) was the one to provide the solution; as a birthday treat, her husband had bought her tickets for the theatre, but the date ended up clashing with a hospital appointment for her mother and so she offered them to me instead. Had my girlfriend been around, we'd have undoubtedly gone together but, to my cynical mind, this was a perfect way spend the time I owed Billy, without having to converse.\n\nWe met outside the auditorium with about fifteen minutes to curtain up and went straight through to take our seats. He was a little nervous and we'd exhausted the small talk on our preparations for uni by the time the house lights dimmed. I was steeling myself for more awkward chat as the evening progressed.\n\nDespite my misgivings, the evening was a great success. There were two one-act plays on the billing - both comedies - well acted with witty scripts. We were both roaring with laughter within minutes and, by the intermission, Billy was a completely changed person - fully relaxed and enjoying himself. The conversation between us flowed easily, so easily in fact that the two of us decided to grab a quick drink together before getting the train home.\n\nThe other person I'd met up with, was Charlie. I'd worked with him up at the Campsite, but he'd stayed on into September when I'd switched over to the Stables. He was also a Cambridge undergraduate, studying engineering, and would be going into his second year as I started my first. We'd talked quite a bit about what to expect and he'd put some of my anxieties to rest. If everyone at Cambridge was like Charlie, I was going to get on just fine.\n\nI dawdled through the farmyard, saying goodbye to the animals for the last time. I wouldn't see them again until early December - that seemed a very long way away. I glanced at my watch; it was about quarter past three. Mum had ordered me home from the Stables for half past, so that she could supervise my packing for uni. I was dreading the next few hours - I could see the two of us quickly falling out. Still, I thought, it would distract me from thinking about the court proceedings.\n\nI rounded the corner of the barn. There were two cars parked in front of the farmhouse. I'd been expecting Mum to be home from her work already, but alongside her vehicle was the black Audi belonging to my girlfriend's mother.\n\nI froze. Jenny wasn't supposed to be here until early evening. Why was she here now? Had something gone wrong in court?\n\nI opened the gate into the garden, heading for the back door. I peered through the window, expecting to see two people sitting at the table, but the kitchen was empty. Had Mum taken her into the sitting room, I wondered. I crept round to the side of the house. The window was ajar - I'd be able to hear what they were saying. Feeling a little guilty, I slid down beneath it, straining to listen in.\n\n\"Jake'll be so relieved,\" Mum was saying. \"He was really worried about having to appear as a witness. That'll be a big weight off his shoulders.\"\n\n\"I think it would have been a surprise if Richard had pleaded 'not guilty',\" Jenny replied. \"But there was always the chance that he'd try to contest the charge. It wouldn't have been fair to Jake to tell him that a 'guilty' plea was a foregone conclusion.\"\n\n\"And the other case, the student in the nightclub?\" Mum asked.\n\n\"So he's pleaded 'not guilty' for that one,\" Jenny replied. \"To both charges - the sexual assault and actual bodily harm.\"\n\n\"'Not guilty' to both?\" Mum asked incredulously. I couldn't believe it either.\n\n\"I know,\" the lawyer answered. \"If I'd have been his defence barrister, I'd have advised a 'guilty' plea to the ABH. But from his point of view, pleading 'not guilty' to the sexual assault is probably the right move; the prosecution will have a tough time proving the motive.\"\n\n\"So Richard's gone back to the Young Offenders' Institution?\"\n\n\"Yes,\" Jenny replied. \"The trial won't be until January, so technically he'll still be on remand. He won't be sentenced for Jake's case until then.\"\n\nThere was a silence as Jenny's news sank in. All I could hear was my heart thumping in my chest.\n\n\"Does Amy know?\" asked Mum.\n\n\"Not yet. She's got lectures this afternoon. I'm going to phone her this evening. She doesn't know the hearing was this morning.\"\n\n\"Oh,\" Mum said. There was another pause. \"You know Jake's going to see her tomorrow, on his way to Cambridge?\"\n\n\"Yes, I did know that - it'll be good for them to see each other,\" Jenny replied. There was a pause. \"And you're going to take all his stuff up on Sunday?\"\n\n\"Yes, Alan and I both wanted to see where he'd be living. And there wouldn't be room in the car for the three of us. We're going to head off tomorrow afternoon and then stay with some friends half-way.\"\n\n\"Oh that's nice,\" Jenny replied. \"Is he nervous about going up?\"\n\n\"I don't think so. I can normally tell if he's worried, but he doesn't seem to be. One of the other lads up at the Campsite is there already - he'll be a second year I think, so Jake'll know at least one person. They went for a drink together last week. And then his College has given him a student mentor and they've been in touch on Facebook. But I think he's just impatient to get there now; he's been kicking his heels round here for three weeks and seeing photos of everyone else enjoying themselves!\"\n\nThere was the sound of tea being stirred.\n\n\"And how's Amy finding London?\" Mum asked.\n\n\"I think she's settling in quite well. It's a big change for her living in a city, but she's finding her feet and she seems to be making friends.\"\n\n\"Have you seen her since she moved in?\"\n\n\"No, not since we took her up,\" Jenny replied. \"I was hoping she'd come home for a couple of days during Reading Week - the end of October, but she's got designs on going to Cambridge instead!\"\n\nThe two women suppressed an embarrassed laugh.\n\n\"That'll be around Jake's birthday,\" Mum observed.\n\nThere was a slightly awkward pause. I was about to slip round to the kitchen to noisily announce my return from the Stables, when Jenny spoke again.\n\n\"I know it's difficult working things long-distance,\" she said quietly, \"but I hope they stay together. Jake's been so good for Amy, she's really become so confident over the last six months. He's such a responsible young man, you must be so proud of him!\"\n\n\"Oh thank you,\" replied Mum. \"Yes I am really proud of him. And we love Amy too - she was very shy when we first met her, but we've always known how bright she is and she's got such a wonderful bubbly personality!\"\n\nI felt myself blushing, but didn't really want to hear any more. It was fine for our mothers to gossip about our relationship in private, but I didn't want to listen to their speculation. Amy and I would work things through ourselves.\n\nI made my way round to the back of the house, feeling the relief already sinking in as I prepared my surprised response to the news about Ritchie. I opened the door and stepped into the kitchen.\n\n\"I'm back!\" I called.\n\n-\n\nI met Amy outside the exit from King's Cross tube station in central London.\n\n\"Hello lovely!\" she cried as she threw her arms around me. She gave me a big kiss on the lips.\n\n\"I brought you these,\" I said, presenting her with a bouquet of red roses.\n\n\"Oh Jake, they're beautiful!\" she smiled excitedly. She hugged me tightly again.\n\nShe looked up at me.\n\n\"You've had a haircut,\" she said dismayed.\n\n\"Sorry,\" I replied. \"Mum insisted. Apparently I wouldn't be able to find a barber's in Cambridge!\"\n\n\"But your beautiful golden curls - they're gone!\"\n\n\"Don't worry, they'll regrow,\" I replied, laughing.\n\nWe took the bus up to her halls of residence. Amy chatted all the way - she was bright, lively and the most confident I think I'd ever seen her. I'd been a little concerned over the summer that London would be too big for her, that she'd be overwhelmed by the city, but three weeks in, she was thriving.\n\nShe'd been assigned accommodation in an apartment with five other female students, all first years, about fifteen or so minutes by tube from the main campus. Each of the girls had their own bedroom, but the bathroom and kitchen were shared between six. On the ground floor of the block, there was a canteen which served breakfast and supper (although not lunch) and there were some communal facilities, including a laundry room, for the three hundred or so residents.\n\n\"The food's not very good,\" my girlfriend confided as we took the elevator up to her floor.\n\nAmy's bedroom was a little smaller than I'd expected, and not just because she'd crammed it full of the stuff she'd brought from home. The bed was along the left-hand wall, and beyond that a washbasin. The desk was next to the window, which looked out over a central courtyard. There was a very small chest of drawers, a wardrobe and two chairs - but that was it. By the time I set up my air mattress on the floor, there'd be almost no carpet visible.\n\nI set my bags down and draped my coat over one of the chairs, then turned to embrace my girlfriend. Amy wrapped her arms around me and squeezed me tightly.\n\n\"Oh Jake, I've missed you so much!\" she cried.\n\n\"I've missed you too,\" I replied, giving her a kiss on the top of her head.\n\nShe slid her hands down my back and grasped my buttocks with both hands.\n\n\"I love this bottom so much,\" she smiled.\n\nI bent down and cupped her face in my hands and kissed her tenderly. Amy moaned a little into my mouth as I slid my tongue passionately over hers\n\nWe broke apart and stared joyously into each other's eyes.\n\n\"Did you bring your costume for tonight?\" she asked.\n\nI nodded. \"Yeah, it's here. I hope it's OK,\" I replied.\n\nI reached behind me for my holdall, pulled out the top hat and placed it on my head.\n\n\"I found a green waistcoat and then there's a cravat to wear with one of my white shirts,\" I explained, showing her the various garments. \"Oh and I made a cloak - I bought the material from a charity shop.\"\n\nI looked anxiously at her, seeking her approval. This was my first student party and I wasn't really sure how elaborate the costumes would be.\n\nAmy nodded enthusiastically. \"That's perfect; I think you'll make a great Wizard!\" She hugged me again.\n\nHer eyes fell to the bouquet of roses that she'd laid on the bed. \"I ought to get these in water,\" she said thoughtfully. \"I'll have to go and hunt in the kitchen for something. I don't have a vase.\"\n\n\"Should I come too?\" I asked as she picked up the flowers and walked towards the door.\n\n\"No, it's OK,\" she said. \"I'll only be a minute. I think there's a jug I can use.\"\n\nThe door closed behind her. \n\nI walked over to her desk and peered into the courtyard below. Amy was lucky that her room wasn't on the side of the building that overlooked the road, but I imagined it could still get quite noisy at night.\n\nMy eyes fell to the row of cards on the windowsill. One was from me, the card I'd given her after she'd received her exam results. The next two were from her family (one of which was a home-made one from the twins). Then there was a fourth at the end of the row, with a picture of two horses on the front - horses I thought I recognised.\n\nI felt a momentary twinge of guilt as I picked up the card to see who'd sent it.\n\n\"Dear Amy,\" it read.\n\n\"I wanted to write to wish you all the very best as you start your undergraduate course and to thank you for all that you've done at the Stables this summer. It has been a joy to watch you grow and I have received so many wonderful comments from customers about you - the children love you! \n\n\"As you know, it's been a difficult few weeks for me after my mother's stroke. I did think about closing down the Riding School for a couple of weeks, while I focused on sorting out her affairs, but I was so fortunate that you were able to take charge and to run everything in such a capable way. Not only were we able to honour almost all of our existing bookings, but we accepted many new ones as well. That is testament not only to your hard work, but also your incredible natural abilities. There are very few teenagers who would be able to step forward in the way that you did.\n\n\"For you also, this has not been the easiest of summers. I know there were times when you found it hard to face the world - I would have in the same situation. But you came through all the challenges with your head held high, stronger and more confident than ever before.\n\n\"You are an exceptional young woman, loved and respected by everyone who meets you and I know that you will be an excellent undergraduate student. Please do come back and visit us when you get back from university in December and know that there will always be a job for you here whenever you need it. \n\n\"With much love and my very best wishes, Jackie.\"\n\nI felt a lump in my throat. Jackie was right - my girlfriend had changed so much in the preceding six months. I was so proud of her.\n\nI put the card back down on the windowsill, not wanting to be caught prying - Amy wouldn't be gone much longer. \n\nAs I turned around, I caught sight of a framed, black-and-white picture, on top of the chest of drawers. I hadn't noticed it before; it was hidden from the entrance to the room by the wardrobe. It was a photo of a young man, stripped to the waist and wearing what looked like jodhpurs, captured in the act of forking a pile of straw, seemingly oblivious to the camera. The background was dark, it was clearly taken in a barn somewhere, but the strong light shining from the left side caught the muscles on his chest and arms perfectly - it must have taken forever to set up the shot.\n\nI picked up the frame. I was beginning to feel a little jealous - the photo was tasteful enough, but I was a little offended that my girlfriend felt the need to keep an image of a semi-naked man in full view of her bed - what did he have that I didn't? \n\nI peered at the lad; he was looking down and his face was partly in shadow, you couldn't really see his features. His hair was light and curly, and he seemed to be a similar height to me, but a heavier build.\n\nHe did look a bit like me - maybe that was it; Amy had found a picture that she could pretend was of her boyfriend - that was alright wasn't it?\n\nI peered closer; the boy's torso was angled away from the photographer, presenting his left arm to the camera. I did a double take: There was a faint line running down his bicep, slightly curved at the bottom - it was the same shape as my scar. Was that me? No, it couldn't be! But it was! When had she taken it? \n\nI heard the sound of the door opening and I looked up sharply. Amy was entering the room, carrying the roses in a makeshift vase.\n\n\"I had to cut up an old plastic bottle from the recycling,\" she was saying. \"I'll get something better later on, but this'll do for now. These look beautiful!\"\n\nShe looked up at me and saw the photo in my hand. The colour drained from her cheeks; the look on her face was obvious - she hadn't meant for me to find it.\n\n\"Is this me?\" I asked gently, tilting the frame towards her.\n\nShe nodded, unhappily, looking down at the floor. \"I'm sorry Jake, I just needed a reminder of you - of your body.\" She shook her head. \"I'll throw it away, I'm sorry, I shouldn't have taken it.\"\n\n\"No, I love that you've got this,\" I said softly. \"I really do. And it's an amazing photo.\"\n\n\"You do?\" she asked hesitantly.\n\nI nodded. \"But when did you take it? It's at the Stables right?\"\n\nAmy blushed. \"It was the first day you worked with me. You'd got back from taking those students out for a hack. I put the horses away and I came back to give you a hand to finish mucking out. But there was a crack in the wall and I peeked through and I saw you and I watched you for a bit and then I thought maybe I could take a photo with my phone and, well, I did.\"\n\nShe placed the flowers on the desk behind me and put one arm round me.\n\n\"I love that you've got this,\" I said again. I kissed her on the top of her head.\n\nWe looked together at the photo for a few seconds, then I set it down on the chest of drawers.\n\nI turned. Amy was looking up at me anxiously, searching my face for signs of disapproval, desperate to believe my reactions were true.\n\nI was flattered, of course I was flattered, but Amy hadn't stuck the photo in a frame to massage my ego.\n\nWe'd been separated for three weeks. Yes, we'd talked every night by video call, but in my naivety, I'd assumed that would be enough while she settled into her new life.\n\nBut it wasn't enough - for either of us, not by a long chalk. The first thing she'd done when we'd reached the privacy of her room was to squeeze my butt. And then, when she'd been trying to explain the photo, she'd said she wanted to be reminded of my body. That's what had been missing - the physicality of our relationship - and now I realised how much I'd missed it too. ",
        "The romantic walk that we'd planned on Hampstead Heath could wait - now was the time to honour her, to share myself with her, to satisfy each other in the ways that our own hands and fingers never could.\n\nI reached down and cupped her face, holding her jawline lightly with my fingertips. Our lips met and we kissed tenderly, letting our tongues entwine in a teasing caress. Amy cupped my cheeks in her small hands as I slid mine down her sides to her hips. Her cry of surprise as I lifted her, became a gasp of delight as she realised what I was doing. She wrapped her legs around my waist and moaned as she felt her breasts press against my chest through our clothing. \n\nSilently I turned around, taking a few steps backwards until my calves were against the side of her bed. Then, I lowered the two of us, until I was sitting on the duvet. Amy slid forwards a little pressing her crotch against mine. She could feel how hard I was - I knew it! Her eyes sparkled with delight.\n\nLittle hands and little fingers dived under the hem of my top, sliding over my abs and pecs, testing the smoothness of my skin and the firmness of the muscles beneath. Shy, excited smiles as she began to undress me, cries of appreciation as my chest was revealed.\n\n\"I've missed you so much,\" she groaned as she showered my torso with kisses.\n\nMy turn to unwrap what I'd been missing for so long - I pulled her sweater and shirt over her head as she raised her hands for me, then bent her backwards so I could bury my face in her chest. She reached behind to unclasp her bra, then shrugged it away, releasing her pert breasts for my delight and adoration.\n\nAgain I stood, lifting her up as I turned to lay her out lengthways on the bed. She smiled eagerly as I crawled between her open legs. I pressed my forehead against hers and stroked her cheek as I gazed lovingly into her eyes.\n\n\"I love you so much,\" I whispered.\n\nI ground against her, letting her feel my steel against the white heat of her core.\n\n\"You're so hard!\" she squealed delighted.\n\n\"You turn me on so fucking much,\" I growled.\n\nOur mouths attacked each other again, frantic kisses, wrestling tongues. Amy's hands roamed over my back and through my hair, desperately trying to pull me even more tightly against her.\n\nHer whimpers of protest became moans of delight, as I broke free from her clutches and slid down the bed, worshipping her breasts in a frenzy. Her nipples were hard, rock hard - throbbing acorns of desire, aching for the soothing caress of my tongue. I pulled each bud with my lips, sucking hard, watching for the moment her eyes glazed over with pleasure. Blindly, her hands went to the back of my head again, directing me as I worked my magic.\n\nMy mouth slipped lower, across the perfect flatness of her stomach to the waistband of her jeans. I paused, with my fingers on the brass button, looking up at her, seeking her permission to continue, hoping she wouldn't say no. She nodded anxiously and propped herself up on her arms to watch as I unfastened her trousers. I stood up off the bed to slide them from her legs.\n\n\"Jake,\" she whispered. \"Can you shut the curtains? We don't want people seeing in.\"\n\nBare-chested I leapt to the window, slid the drapes across in front of the glass and switched her desk lamp on.\n\nI turned to see Amy kneeling up on her bed, clad in only her panties. Her face wore a radiant smile and her skin glowed in the soft, warm light that bathed the room.\n\n\"You're beautiful,\" I marvelled.\n\nMy girlfriend tilted her head, little shyly perhaps, and held her arms out to me. I crossed back to her and took her hands in mine. We watched each other for a few seconds, silently pledging each other our love. I stroked her hair away from her face, as she bent forward to plant a soft kiss between my pecs. Her eyes slipped lower and she ran her fingers wantonly across my bulge.\n\n\"He's so big!\" she whispered, delighted. She planted a kiss on the denim, pressing her face against my hardness.\n\n\"I like your belt - very smart,\" she teased as her hands reached for the buckle. Mum had made me buy it, not that I'd admit that to my girlfriend (or to anyone else for that matter).\n\nShe slipped the jeans from my hips and I bent down to remove them for her, hopping awkwardly as I freed my legs. I turned back to her and she reached out a hand to lightly trace the outline of my cock through my white boxer briefs.\n\n\"Oh Jake!\" she sighed.\n\nShe planted another kiss on my bulge, then slipped her fingers under the waistband and pulled my underwear down. My erection sprang out - hard, red and angry - aching for the tenderness of her touch.\n\nAmy gasped with delight. \"I've missed your willie so much!\" She placed a gentle kiss midway along the shaft. \"He's just fantastic!\"\n\nDrops of pre-cum were leaking from my glans. She gathered some with her fingers and played with the silky threads, smiling up at me with glee. I watched her eyes sparkle as she opened her mouth and licked the webby stands.\n\n\"Mmmmmm,\" she murmured in approval.\n\nMy cock throbbed in anticipation; there could be no doubt what she wanted to do to me. I bent down and kissed her, letting my tongue tease hers, tasting myself on her lips.\n\nHer hands reached behind me, grasping the globes of my buttocks, pulling me closer. Amy sighed with delight as my aching steel slid between her pert breasts. She squeezed me even tighter, feeling the fit of our bodies together. I stroked her hair lovingly as she nuzzled the wispy blond curls on my chest.\n\n\"That feels so good,\" I smiled.\n\nShe pushed back a little and cupped her breasts, pushing them together against my cock. I rocked my hips slowly, sliding my length through the soft channel of her bosom.\n\nAmy looked up at me in delight.\n\n\"I love it when you do that,\" she sighed.\n\nGently I stroked her cheek, then ran my thumb over her lips. She opened her mouth and suckled on it, we both knew what was coming.\n\nShe tilted her head a little and brushed her hair behind her with her hands. Then, looking me straight in the eyes, she pressed my erection against my abs and licked from the base to the tip.\n\n\"Fuck Amy!\" I cried.\n\nI shook with delight as the warm wetness of her mouth slid over my head. She swirled her tongue around me, soothing my raw redness with that tender act of love. I wrestled with my urges inside my head, trying desperately to suppress the orgasm, so long awaited. She was bobbing her head now - it would be so easy to surrender to the release that boiled in my balls, to cum in her mouth, to callously claim her with my seed.\n\nBut I didn't want that. I loved her. I wanted to honour her with my body, to share my climax with her, to prove that I felt as sincerely and deeply about her as I had the first time we'd had sex.\n\nAmy's movements were becoming bolder as she gripped my buttocks more tightly. The tip of my cock vibrated with her moans as she pressed me insistently against the back of her mouth. \n\nHer eyes begged me to rock my hips, to push gently into her mouth, to claim her as my own. Obediently I began to thrust, but gently, watching as she closed her eyes in grateful surrender. Her hands pulled me deeper as I fucked her mouth - sliding me repeatedly down her throat. She was getting a little loud, filling the room with her moans and retching. I had a sudden shot of panic - how thick were the walls? I didn't want concerned flatmates banging on her door.\n\nI ripped my hips away from her and sought her mouth with mine, stifling her groan of despair. We kissed deeply. She mewed with passion as her hands grasped my slick erection and clumsily worked me.\n\nI reached under her arms and lifted her upwards against me. She wrapped her arms and legs around me, clinging limpet-like to me. Her swollen breasts crushed against my chest as my cock prodded insistently against her panties. I nuzzled the side of her head.\n\n\"Please Jake,\" she whispered into my ear. \"I need you, I need you now!\"\n\nGently I lowered the two of us to the bed, letting Amy's back sink into the duvet. I pushed up a little and stared deep into her eyes, then with another quick peck on the lips, I kissed my way downwards. \n\nThe tell-tale dark patch on her white panties betrayed her excitement; I could smell the heady scent of her arousal as I reached my goal. A deep guttural moan escaped her throat as I pressed my nose against the cotton, nuzzling the soft flesh beneath. She gripped my head tightly through my hair, pulling my lips closer to her wetness.\n\nI hooked my fingers under the elastic and slid her knickers down, marvelling at the silky smoothness of her legs. Again, I crouched forwards, ready to ravish her with my tongue, but she caught my cheeks and pulled me up her body, meeting my mouth with a kiss. She held me there as I slipped my arm between us and parted her fleshy folds with my fingers. We both held our breaths as I began to spread her juices across her labia, straining to hear over our thumping heartbeats.\n\n\"Can you feel how wet I am?\" she asked. \"That's all for you. All for you Jake. You make me so horny.\"\n\n\"Yeah, yeah? You like that, you like that?\" I pressed my forehead against hers as I stroked her sex faster.\n\nAmy's hands scrabbled between us, catching my cock as it bobbed against her abs. She squeezed tightly and began to work me.\n\n\"Fuck Jake. I've missed your cock so much!\" she moaned.\n\nAmy hissed as I circled the entrance to her vagina, pushing her hips up to capture my fingertip. Her eyes pleaded in silent desperation as I teased her, her hands gripping me ever harder.\n\n\"You're so wet and open for me!\" I gasped.\n\nTentatively I pushed inside, up to the first knuckle. Her pussy was a furnace - hot, wet and tight. Sightless, she threw her head back into the pillow, a loud cry escaping from her throat.\n\n\"Fuck Amy, I've missed you so much. I love you, I really do,\" I babbled.\n\nShe whimpered as I pushed deeper, burying my middle finger all the way inside. Her channel was slippery with her juices - four weeks of waiting, her body was desperate to reclaim any part of me. \n\nI bent my head and kissed her nipples in turn, soothing the hard buds with my tongue. My cock pulled from her grasp as I slipped lower. I wanted to taste her, she knew that was what I wanted.\n\nHer eyes flashed open; she caught the back of my head and hauled me upwards again. \n\n\"Please Jake,\" she begged breathlessly. \"Get a condom. Get a condom.\"\n\n\"You don't want me to..?\" I asked, my voice trailing off. If she'd gone down on me, it seemed right to do the same to her.\n\nMy girlfriend shook her head decisively. \"No, just get one - quickly! I need you in me.\"\n\nI leapt to my holdall and pulled out a foil packet, then turned to feast my eyes on my girlfriend's naked body as she lay open on the bed for me. Amy was beautiful, there was no doubt about it. My cock jolted in anticipation.\n\nI tore the packet open with my teeth and placed the condom at my tip. Amy stretched out her arms towards me.\n\n\"Please Jake,\" she begged. \"Let me, let me.\"\n\nI took two paces towards the bed, offering myself to her. She knelt up and pulled me against her body, pressing my cock into the channel between her breasts. \n\n\"You have the most marvellous willie!\" she moaned. \"He's so big and thick and hard and urrrgggghhhh!\" she shuddered.\n\nShe ran her fingers through the wispy light curls on my pecs.\n\n\"Fuck, Jake - this chest!\"\n\nI stroked her cheek tenderly.\n\n\"Would you like to take a photo?\" I asked, surprising myself with a question I'd never thought I'd ask.\n\nAmy looked up at me in disbelief, like a child presented with a big jar of candy.\n\n\"Can I?\" she asked.\n\n\"I want you to,\" I replied.\n\n\"Like this?\" She looked down at my cock and then back up at me.\n\nI nodded.\n\nShe got off the bed and retrieved her phone, then fished in the pocket of my jacket for mine.\n\nShe hopped back onto the mattress and began to kneel up, but changed her mind and instead lay down on her back. I let her pull me on top of her so that I was straddling the lower half of her rib cage. It was a bit like rehearsing for a play, working out how best to stand, which angles would work the best. She unlocked her phone and handed it to me.\n\n\"You take it Jake, you take it.\" She propped herself up and gripped my penis at the base, so she could make the angle a little flatter. \n\nThe image of my rigid cock appeared on the screen, nestled in the valley between her breasts. I took a few shots with my glans at slightly different heights.\n\n\"Let me see, let me see!\" she pestered impatiently.\n\nI held the screen so we could both check it. Cock and breasts - nothing else - no faces.\n\n\"That looks amazing,\" she smiled, her eyes sparkling. \"Now take one for you.\"\n\nI repeated the process then set my phone down on the bedside table. \n\nAmy placed the condom over my tip, then rolled it down my length. She picked up the bottle and coated me liberally with lube. \n\n\"So big, so hard!\" she whispered.\n\nI adjusted my position on the bed and crawled between her legs. She reached up and caressed my cheek as I lowered my body to hers.\n\n\"You ready?\" I asked, as my glans nudged against her sex.\n\nAmy nodded. \"I want you so much. I love you Jake.\" \n\nShe drew her legs upwards and outwards, opening herself, positioning me so I could settle closer to her.\n\nPerhaps I was expecting an awkward tightness as I pressed into her - as if somehow my girlfriend had reclaimed her virgin status in the four weeks since we'd last had sex. But, as I pushed tentatively forwards, she rotated her hips, and I slid smoothly inside.\n\n\"Woooooaaaaaahhhhh,\" she gasped as I buried myself to the hilt.\n\nI looked anxiously into her eyes and stroked her dark curls.\n\n\"I didn't expect you to go in all at once!\" she whispered.\n\n\"Is that good?\" I asked tentatively.\n\nAmy nodded. \"I feel so full. It's so wonderful having you inside me again. It's been so long!\"\n\nI smiled gently. \"You feel so good around me,\" I replied softly.\n\nWe held still for a minute or so, luxuriating in the connection between our bodies. I gently stroked her hair as she ran her hands over my back and shoulders. I kissed her lovingly on the cheek.\n\n\"Can I see?\" she asked.\n\nI pushed myself up on my arms, so we could both look down to where we were joined.\n\n\"That looks amazing,\" I whispered.\n\nI dismissed the temptation to suggest another photo; there'd be plenty of opportunities for that in the future.\n\nI withdrew a little and we watched as my glistening, jacketed rod emerged from inside her. We smiled at one another, then cautiously I pushed again. Amy whimpered in delight as I slipped inside her.\n\nLong, slow strokes - always watching the concentration etched on her face as I slid in and out. I bent my head to kiss her forehead and she looked up at me, eyes shining with love.\n\nMy thrusts became stronger, sharper, faster, eliciting a squeal on each stroke as I drove forwards. Amy was bending upwards, covering my face and my chest with kisses as I held myself above her.\n\n\"Uh, uh, uh!\" she cried, trying to pull me ever deeper.\n\nI pushed up a little further, bringing my torso almost vertical, forcing a slower pace. I watched her breasts shuddering with my thrusts as she ran her fingers across my chest. Her jaw was set in anguished concentration, but her eyes sparkled with joy and love.\n\n\"Fuck that's hot,\" I cried.\n\n\"I'm getting close,\" she yelled.\n\n\"Yeah you gonna cum for me? You gonna fucking cum for me?\"\n\nI collapsed down onto her as I felt her orgasm began to surge within her. She was tensing up, throwing her head back as her eyes glazed over. Sweat was streaming off me as I pounded into her. I could feel the red heat of my own climax rising.\n\n\"I'm cumming, I'm cumming!\" I roared.\n\nSlam. Slam. Slam.\n\n\"Uh... uh... Aaaaarrrrrrrggggghhhh,\" we cried in unison as I buried myself deep within her one final time, pouring my cum into the condom. Her pussy clamped hard around my cock, as her body spasmed beneath mine. \n\nAmy gripped me tightly, wrapping herself around me, enveloping me in a secure embrace as she crushed her breasts against me. I nuzzled her hair as the aftershocks pulsed through her.\n\nShe released me and I rolled to the side to lie on my back as she stroked my chest.\n\n\"That was phenomenal! You are fucking amazing,\" she sighed. \"I came so much.\"\n\n\"Yeah, it was amazing - I love sex with you! I really do.\" \n\n-\n\n\"Are you nervous about tomorrow?\" Amy asked.\n\nWe were walking across Hampstead Heath, a mile or so from her halls, crunching through the fallen leaves, as we admired the views across to the City and Canary Wharf.\n\nI shook my head. \"I don't think so,\" I replied. \"I just wanna get there - feels like I've been waiting so long.\"\n\nMy girlfriend nodded. She'd been chatting away enthusiastically about everything she'd done and all the people she'd met in her first three weeks of uni. I'd felt a little pang of jealousy, my life had been stuck in a rut while she'd settled in.\n\nDid it feel like things were different between us? I'm not sure. Certainly, Amy had a new life in London that I wasn't a part of, at least not yet. Maybe that it was an early sign that our relationship was changing, something we'd have to get used to being together long-distance - we wouldn't be able to share our day-to-day lives so easily.\n\n\"What about your parents?\" she asked. \"How's your mum been this week?\"\n\n\"She was a nightmare to be honest,\" I said with a wry smile. \"But she calmed down after your mum came and told us about Ritchie.\"\n\nI hadn't meant to bring Ritchie up, neither of us really wanted to talk about him. Not that it would upset me or Amy if we did - it was just that there didn't seem much more to be said. Whatever we thought about him, his life had been changed by an alcohol-fuelled burst of jealous rage; that was a tragedy far deeper than the scar on my arm.\n\n\"What about your dad?\" Amy asked, breaking the silence.\n\n\"I dunno,\" I replied honestly. \"Dad just goes very quiet when he's worried about something, but I think he's been OK. And they've just hired a dairyman to help out, so he'll be a bit of company - and he needs training up - Dad likes doing that.\"\n\nAmy gave a smile and took my hand in hers. We sat down together on a bench beside the path.\n\n\"And your mum?\" I asked.\n\n\"She's been fine,\" my girlfriend replied. \"I was expecting a lecture about looking after myself, working hard, not drinking too much, looking after my money, staying away from nasty boys...\" she pulled a face at me. \"But no, nothing. She drove me up, helped me unload my stuff, then we went and had coffee - and off she went. That was it!\"\n\nI laughed.\n\n\"It's not been the easiest few years between Mum and me,\" she said ruefully. \"She was always very protective of me, a bit suffocating.\"\n\nShe paused.\n\n\"I had to fight her to go out with you...\" she said quietly, \"...at the beginning,\" she added.\n\nI nodded, giving her the space to say what she wanted.\n\n\"She didn't trust me to choose the right boyfriend. The only thing that saved you was the fact you'd got into Cambridge - that and James' mum telling her how wonderful you were.\"\n\nI attempted a laugh.\n\n\"I think she convinced herself that you were just a study-buddy - we weren't really in love,\" she continued. \"She thought it would all fizzle out after exams.\"\n\nI nodded - maybe I'd felt the same to begin with.\n\n\"I think it was when she saw the CCTV of the attack,\" my girlfriend continued. \"And she saw how you and I reacted when Ritchie appeared - I think that impressed her - a lot. She's seen hundreds of videos like that, but no one's been reacted as calmly as we did.\"\n\n\"Do you feel you've proved yourself to her?\" I asked.\n\nAmy grimaced a little and turned to look out at the view of the City below us. \n\n\"Maybe,\" she said slowly, \"maybe she can think of me as an adult now.\"",
        "I smiled and put my arm around her.\n\n\"You know she gave me a good luck card - your mum?\" I said.\n\n\"Yes, she asked if she could,\" Amy replied. \"She didn't write anything embarrassing, did she?\" She looked up at me a little suspiciously.\n\n\"No, it just said 'Dear Jake, good luck for your studies at Cambridge, from Jenny, Rob, Tom and Ben' - that was it, nothing else.\"\n\n\"That's a relief,\" she said.\n\nI smiled quietly, but said nothing more. Amy laid her head on my shoulder and I pulled her closer against me. We watched the wind pick up a pile of fallen leaves and playfully spin them around in a spiral.\n\n\"Was that OK earlier with the photos?\" I asked hesitantly, breaking the silence.\n\nShe thought for a second or two. \"Yes,\" she said slowly. \"It's really nice that we can trust each other like that.\"\n\nIt was a glib response and she knew it - there was a slight nervousness in her voice - deep down she wasn't sure we'd done the right thing either.\n\n\"Were you OK with it?\" she asked gently.\n\nI nodded slowly, but I wasn't entirely comfortable. The horrors of revenge porn had been clearly explained at school; we'd been left in no uncertain terms that naked photos and videos were a bad idea, no matter how much you loved the other person.\n\nBut Amy and I were different, weren't we?\n\n\"I think if we both know they're being taken and we're happy and they don't show our faces, it's OK,\" I replied, trying to steer a middle path. \"And as long as they're passworded so no one else can look at them, I guess it's fine.\n\n\"I dunno, it'll just be nice to remind myself how sexy you are, if I haven't seen you for a few days,\" I added.\n\nI felt my cock begin to stiffen as the images stored on my phone swam into my mind. \n\n\"It kinda turns me on to think of you looking at them,\" Amy said. \"And I can lie in bed and do the same and think how lucky I am to have a boyfriend like you. And I can touch myself and, well...\"\n\n\"Make yourself cum?\" I teased gently.\n\nAmy gave a shy, embarrassed smile and nodded.\n\n\"Jake, I love you,\" she said. \"I love your personality, your intelligence, your sense of humour, the way you care for animals and for your friends. But I also love your body, how you make me feel, how you turn me on, how we make love together. And maybe sharing a few photos that no one else will ever see, is part of that.\"\n\nShe kissed me on the cheek.\n\n\"Come on,\" she said. \"Let's get back. I need to introduce you to everyone - they're all dying to meet you!\"\n\n-\n\nThere was a party at the Student Union - we were going with Amy's flatmates. I forget the exact theme, but we each had to dress as a film character. Often the occupants of a shared apartment would coordinate their costumes, and Amy and her friends had decided to go along as characters from the Wizard of Oz. I wasn't the only guy - one of Amy's flatmates was bringing along her boyfriend, whom she'd dressed as Scarecrow.\n\nAmy was going as the Wicked Witch of the West. I wasn't sure how they'd divvied up the parts, but I knew that she'd have wanted it. Early on in our relationship she'd told me that if she did any acting at university, one of the things she'd like to do would be to play a villain, as I had as Tybalt. She could pull off the angelic Juliet and would undoubtedly be a good Dorothy as well, but I think she was more drawn to complex, darker characters where there was a little more scope to be creative.\n\nWe changed in the privacy of her room. Our costumes weren't particularly elaborate, but Amy had a lot of make-up to apply as she transformed into her character. Of course, I was ready in less than a minute and was left to watch appreciatively as my girlfriend flitted around the room in nothing but her black satin bra and panties. She did spend an inordinate amount of time laying her clothes out before actually putting them on, which seemed to have the sole purpose of tantalising me with the sight of her ferreting in her wardrobe in just her underwear.\n\nI helped her to apply the olive-green paint over her face, neck and the back of her hands, then stepped back to allow her to put on black lipstick and black eye shadow to create the full wicked. We abandoned the fake wart after several failed attempts to stick it to her chin, but her acrylic claws went on so easily, I wondered if they'd ever come off. \n\nI tied the long cloak round her neck and handed her hat and broomstick to her, then stepped back to take a photo.\n\n\"Give me your best cackle!\" I teased.\n\nWe posed together for a selfie, then Amy picked up her keys and handed them to me to put in my jacket pocket. \n\n\"Ready?\" she asked.\n\nI nodded.\n\nShe walked over to the door and I followed behind her. She paused for a second, resting her hand on the handle, then looked back at me over her shoulder.\n\n\"I want you to fuck me tonight,\" she hissed. \"Hard!\" \n\n-\n\nThe two of us crashed back into Amy's room at around one in the morning - both very drunk and very, very horny. We'd been all over each other in the elevator going up to her floor and I'd only just managed to stop her diving her hand into my trousers before we made it to her door.\n\nI pulled her tightly to me and we kissed, running our hands frantically over one another. I thrust my hands under her top, grabbing her breasts roughly in my palms.\n\n\"I fucking love these tits,\" I growled, bending forwards to kiss her.\n\nAmy pulled her head away from me, making me momentarily lose my balance as I leaned into her. She placed both hands on my chest, and shoved me backwards, taking advantage of my intoxicated instability. I yelled in surprise as I toppled onto the bed behind me.\n\n\"What the fu...!\" I gasped as my head hit the pillow.\n\nShe stretched upwards with her hands, crooking her splayed fingers in her finest Wicked Witch pose.\n\n\"Now my pretty,\" she screeched, giving her best cackle of the night. \"Can you imagine what I'm going to do to you?\"\n\nI played along, trying to push myself over to the corner of the bed against the wall, feigning terror.\n\nShe stalked towards me, then knelt between my legs as she ran the claws of one hand down the front of my shirt. She turned her wrist with a flick, then pushed my jaw upwards with a green finger.\n\nAmy was in charge and alive in a way that I'd never seen before. My cock throbbed in anticipation; I nearly came there and then.\n\nShe gave me a single peck on the lips, then straightened up and started to undo the buttons of my shirt. I reached up to untie the fastenings of her cloak, but she batted them away.\n\n\"All in good time, my little pretty,\" she cawed. \"Why, my party's just beginning!\"\n\nI leant forward to let her pull the shirt over my head, which she flung behind her theatrically. Then she pushed me back downwards and began kissing across my chest, her tongue sweeping around my nipples. I gasped as she took each into her mouth and bit gently with her teeth.\n\nShe reached up and put her hand firmly across my throat so I couldn't move, then snarled into my face. For a dispassionate observer, this was frankly fucking ridiculous, a nineteen-year-old student, dressed as a witch, pretending to scare her six-foot boyfriend, but for me it was fucking hot. I'd never been so turned on in my life.\n\nStill fully clothed, she retreated down the bed, and ran a green finger along my bulge.\n\n\"That's a pretty big spear in your pocket, Mr Wizard!\"\n\nShe pounced on the button of my trousers and ripped them from me. My boxer briefs followed in short order. My penis sprang angrily out at her, demanding her attention.\n\nAmy bent lower and licked along my length. I gasped and thrust my hips upwards towards her face, desperate for more. She grasped my cock and peeled back my foreskin, pinching me a little with her sharp green claws - the right amount of gentle pain.\n\nHer eyes flashed in delight.\n\n\"How does it feel my little visitor?\" she screeched.\n\nI gave a strangled grunt, staring mesmerised as she extended her pink tongue and licked from the base of my rod to the tip. The warm, wet cavern of her mouth looked even more inviting, surrounded by her black lips and olive-green skin. \n\nAnother languid lick from bottom to top, followed by a cackle of delight as my penis jolted in her hands. She bent her head and kissed my scrotum.\n\n\"Such beautiful balls,\" she crowed. \"And they're mine, all mine.\"\n\nI growled in frustration, willing her to take me in her mouth.\n\nShe crawled up my body, running her tongue over my abs and between my pecs. I offered my lips for her to kiss, but instead she snarled into my face, eyes wide with wicked excitement.\n\n\"I've got you just where I want you, my pretty!\" she hissed.\n\nShe slunk away again, raking her claws through the soft hairs on my chest. She settled between my legs and picked up my shaft once more, examining me from every angle. There was a moment's pause, then she opened wide and sank all the way down.\n\n\"Fuck!\" I cried in surprise.\n\nShe looked up at me, her green face half-buried in my dirty blond pubes, her eyes flashing in their dark sockets. She held still for two seconds, then ripped her face away, letting my cock slap back onto my abs.\n\n\"Fuck Amy,\" I gasped, \"that's so hot.\"\n\nSilently she stood up, legs either side of my hips. She fixed me with a wicked stare and pulled at the drawstring around her neck. The cloak slipped from her shoulders and onto my knees. She pulled her top over her head, slipped the skirt from her hips and reached behind to release her bra.\n\nMy mouth hung open as I watched my girlfriend slide her hands up her body, cupping her breasts and squeezing her nipples, giving me a show.\n\n\"Fuck! So sexy,\" I whispered.\n\nAmy extended her hand towards me and beckoned with a green claw. Obediently I knelt before her and worshipped her breasts with my mouth. She moaned helplessly as I flicked my tongue over her tight buds and grasped her buttocks firmly in my hands.\n\nI hooked my fingers into the top of her tights and looked up at her face, seeking her approval. She gave the slightest hint of a nod and I slid them down her legs. Her hand went to the wall to steady herself as I helped her to release her feet from the stretchy fabric.\n\nCautiously I began to kiss up her legs, feeling the silkiness of her skin under my fingers. I moved higher towards black satin panties. The sweet scent of her arousal was overwhelming, she'd be dripping wet, I knew it.\n\nI dipped my fingers into the waistband and pulled her knickers downwards, exposing her glistening flower to me. I helped her to step out of her underwear, then kissed delicately up the inside of her leg, sliding my hands over her smooth, graceful curves.\n\nSuddenly a gnarled hand grabbed my hair and pushed my head against the wall. Amy swung her legs either side of mine, presenting her pussy to my face. \n\nI gazed in fascination at her delicate womanhood, peaking from behind her dark pubic hair, opening into a perfect diamond - a flower in full bloom. Her lips were moist and swollen with her arousal - even in the dim light of her room, I could see the delicate folds glistening with her juices. Cautiously I moved my head forwards and placed a gentle kiss on the soft down of her mons. I looked up at her, seeing reassurance and approval.\n\n\"Come on Mr Wizard,\" Amy hissed. \"I can't wait forever.\" \n\nI reached forwards and ran my tongue up the length of her exposed slit.\n\nAbove me, she hissed in delight. I lifted my head to smile up at her, but she grabbed my hair roughly and guided me back to her beauty again.\n\nEncouraged, I flicked my tongue again across her lips, savouring the sweet, metallic taste of her nectar. My girlfriend moaned as I made contact once more. She was going to be loud - she was always loud when we did this.\n\nI felt around for the top she'd discarded earlier and handed it up to her. She folded it and placed it in her mouth to stifle her cries.\n\nI closed my lips over hers and pulled softly. Her body shook and she wheezed into the t-shirt.\n\nShe began to buck her hips as I continued to tease her, her breaths becoming shorter and more frantic. As her movements became more intense, I felt the brush of her clitoris against my upper lip. I held still, offering her my tongue for her to thrust against, letting her direct me to where she wanted me to go.\n\nI pulled back and pressed my head against the wall, looking up at her. She smiled weakly, her mouth still stuffed with the t-shirt. Slowly I lifted my hand to my mouth and coated my middle finger with my saliva, making it clear what I wanted to do. Amy's eyes widened in anticipation.\n\nAnother kiss on the plump swell of her mons, then, holding her gaze, I reached forwards to stroke her slit with my moistened digit. She nodded imperceptibly as I ran the tip around the entrance to her vagina. \n\n\"Just really gently,\" she whispered, straightening her back and taking a deep breath to suck me inside.\n\nHer eyes closed as I pushed into her; the warm velvety wetness of her channel closed around my digit.\n\n\"Does that feel good?\" I asked cautiously.\n\nShe nodded. I was all the way in now, my other fingers were curled against her. She watched as I reached up to run my lips softly across her stomach, murmuring her approval as I sank lower to plant loving kisses on the inside of her thighs. I blew softly across the downy, dark hairs of her mons. Little sparks flew through her body - I could feel little shockwaves as her vagina convulsed around my finger.\n\nLightly Ilicked across the top of her clitoris, looking up at her all the while. Amy took a deep intake of breath as I started to move my finger inside her, making tiny, beckoning motions against her G-spot. She was still tight but becoming wetter - hotter and wetter. I licked her clit again. Another moan sounded above me.\n\nSuddenly, without warning, her pussy clamped sharply around me. She arched her back, stretched her neck out, and collapsed forwards against the wall, panting.\n\n\"Wow Jake,\" she gasped. \"You made me cum so hard.\"\n\n\"Yeah?\" I asked, starting to slowly withdraw my finger.\n\nShe reached down and grabbed my hand.\n\n\"No, keep it there, keep it there,\" she insisted.\n\nShe closed her eyes and pressed her forehead against the wall. I watched the rise and fall of her ribcage as she breathed in and out, as I planted gentle kisses on her mons, inhaling the spicy aroma of her climax.\n\nAmy pushed away from the wall and looked down at me.\n\n\"Your cock is looking very tempting from this angle,\" she said excitedly.\n\n\"Yeah? You wanna ride?\"\n\nShe nodded. \"Lie down Jake. I'm going to impale myself on your dick!\"\n\nI slid my finger from her and she stiffened as the contact between us was lost. She stepped off the bed to let me lie down on my back and picked up a condom from the drawer of the bedside table. I opened my legs and she knelt between them, offering me the foil packet.\n\n\"Can you do this?\" she asked, giving an embarrassed half-laugh. \"It's not going to work with these nails!\"\n\nI unrolled the sheath over my erection and held myself so that she could coat me with lube. She gave it a long look, thinking hard.\n\n\"You OK?\" I asked.\n\n\"Yeah,\" she replied, waking from her reverie.\n\n\"How d'you wanna do this?\" I asked. \"Should I...\"\n\n\"I'm gonna go on top,\" she replied assertively.\n\nShe crawled forwards with her legs either side of my hips and gave me a quick kiss on the lips.\n\n\"Fuck, I love you Jake!\" she whispered, reaching down to grasp my throbbing erection. \n\nHer small hands rubbed my length against her sex, positioning it at the opening of her channel. I looked up, holding her gaze as she sank slowly down onto me, the whites of her eyes shining brightly from her witch's mask.\n\n\"Ooooohhhhhh, so big, so deep!\" she sighed as her buttocks came to rest on my thighs.\n\nI took her hands in mine to steady her as she leaned forwards to see where her greedy lips had swallowed me whole.\n\n\"That looks so good,\" I whispered.\n\nAmy looked up at me again, her black lips cracking into a wide smile. She raked a horned finger up my torso between my pecs and pressed it up into the underside of my chin.\n\n\"You're mine, all mine!\" she cackled.\n\n\"Yeah! Whatcha gonna do to me?\"\n\n\"I'm gonna ride you,\" she hissed, \"I'm gonna ride you till I make you scream!\"\n\nMy cock jumped inside her and she squealed in delight.\n\n\"Oooh, I think you like the sound of that Mr Wizard!\" she growled, gritting her teeth as she began to rise.\n\nEntranced, I watched as my shaft emerged from within her, glistening with her juices. Her delicate lips pulled at my hardness, reluctant to release me as they slid upwards. She held herself with my tip just inside, then began to descend once more.\n\nI ran my hands up her body to cup her breasts as she reached the bottom of her stroke - they always seem so full when I'm inside her. Amy began to grind against me making a circular motion with her hips - something she hadn't tried before.\n\n\"That feels good,\" I whispered encouragingly.\n\nAmy nodded, surrendering to the fiery heat that was taking hold inside her. I gathered some spittle to soothe her dark nipples and caressed them with my fingers. Her channel snatched at me as I pinched the tight buds, eliciting another sharp yelp of pleasure.\n\nShe adjusted her position again, leaning back to hold my ankles with both hands, placing her feet flat on the bed either side of me. Slowly she began to rock back and forth, displaying her sex in the full bloom of her arousal as she slid along my weapon. I propped my torso up on one arm, to release the pressure a little on my cock, and reached forward with the other to lightly stroke her.\n\n\"That's so hot,\" I marvelled.\n\n\"You feel so good inside me,\" she moaned, quivering at my touch.\n\nI pushed myself upright and ran my hands under her back, helping to direct her movements, letting me sink deeper into her furnace.\n\n\"Pullmeup, pullmeup!\" she whimpered.\n\nI helped her raise her body, so we were both upright, face-to-face, sitting on the bed, held in union by my steel, which she gripped so tightly.\n\nHer lips fell on mine with a frenzy and she stabbed my mouth with her tongue. Her fingers ran through my hair as I tried to match the rhythm of her grinding hips, with little thrusts of my own. Her moans were growing ever louder, little high-pitched mewing yelps were issuing from her throat as we kissed.\n\nAmy's body tensed, clamping down on my cock as she shuddered in ecstasy. She flung her head back, filling the room with a silent scream then slumped forwards against me, panting deliriously.\n\nShe placed a soft kiss on my chest.\n\n\"I love you so much,\" she whispered.\n\nShe ran her fingers through the soft hairs on my pecs.\n\n\"I'm making you all green,\" she laughed. \n\nShe kissed me again on the lips, then with an imperious stare, pushed me down so I was lying back down on the bed. Her leering face loomed over mine and she grabbed my jaw in her claws.\n\n\"Now fuck me Jake,\" she snarled, \"or I'll stuff a mattress with you!\"\n\nI lifted my knees and placed my feet flat on the bed, so I could push up into her as she held herself above me. I started slowly, exploring the length of her channel with bold, purposeful strokes, feeling each fold and furrow as I probed. She clenched tightly each time I withdrew - we were working together, melding our souls as we connected through our bodies. \n\nGradually, I built my pace, driving upwards as Amy controlled my angle and depth. She gripped my shoulders tightly, hanging on for dear life as the sounds of our flesh slapping together filled the room. Faster and faster I pounded as her cries became deeper and louder.\n\n\"I'm gonna cum, I'm gonna cum!\" she yelled.\n\nShe flung herself backwards as the earthquake thundered through her. Her body convulsing around my cock as she pushed down on me as hard as she could. Then she fell forwards, onto my chest, exhausted, gasping for breath. I flung my arms around her as she quivered and shook, luxuriating as I held myself in the white heat of her core.",
        "I listened as her heart slowed and her breathing became softer.\n\nMuffled grunts and yelps were sounding through the wall as another amorous couple got it on - Scarecrow doing Dorothy next door.\n\nI kissed Amy's cheek and nuzzled her hair.\n\n\"Sounds like we've got competition,\" I murmured.\n\n\"Uh?\" groaned Amy through the haze of her post-orgasmic glow.\n\nI nodded my head in the direction of the neighbouring room. The two of us listened as Dorothy urged her man on. Memories of sleeping over at James' house, with Stijn and Rachel going at it in the guest bedroom, flooded back to me. Except now I was one of the ones waking the dead.\n\nMy girlfriend gave a half-embarrassed smile.\n\n\"Are we that loud?\" she asked.\n\n\"Only on round two!\" I replied, lifting my hips and sliding deeper into her.\n\n\"Ooohhhhhh fuuuuuucccccckkk,\" Amy wailed.\n\n\"You ready for more?\" I asked.\n\nShe nodded. More muffled shrieks came through the wall; Scarecrow was grunting now - it wouldn't be long. \n\nAmy smiled again. The cacophony of screams and roars grew louder, accompanied by the vigorous knocking of the wooden bedframe.\n\nThen silence.\n\nAmy and I looked at each other and giggled.\n\n\"Not bad,\" she teased, \"but you're so much better!\"\n\nShe kissed me on the lips, then rocked forwards, offering her breasts to my mouth. My penis slipped from her pussy and landed on my abs with a soft slap. She shuddered as I flicked my tongue over her rock-hard nipples.\n\n\"Soooo gooood,\" she whispered.\n\n\"I think we should show them we've got more in the tank!\" I laughed.\n\nAmy nodded. \"I don't want her thinking she's got the best boyfriend!\"\n\nShe rolled off the bed and extended a hand to pull me up too.\n\nI squeezed her against me, pressing my erection against the flatness of her stomach. We kissed passionately, our tongues writhing as our hands frantically clutched at each other's bodies. \n\n\"Give it to me Jake,\" she panted. \"Give it to me hard. I want you to fuck me hard and fast!\"\n\nShe turned and climbed onto the bed on all fours, supporting herself on her forearms, with her butt high in the air.\n\nI stepped forwards and bent to kiss her back, running my hands under her to cup her breasts. \n\nShe reached for me between her legs and, catching my cock in her fingers, she positioned me at her opening. \n\nSlowly I slid into her furnace, watching as my condom-clad dick slowly disappeared from view. With a final sharp flick of my hips, I sheathed myself to the hilt. Amy moaned as she gripped me tightly inside. Lovingly I stroked her back as she adjusted again to my size.\n\nCautiously she began to rock, forwards and backwards, not far, maybe a couple of inches at the most. I held still for the first dozen strokes then, following her rhythm, I started to thrust. Amy turned, looking back over her shoulder, scarcely managing a weak nod of encouragement through the fog of her desire.\n\nShe crouched lower, arching her back, burying her face in the pillow, giving me a better angle to drive more forcefully into her. I brought my hand down hard on her right buttock, the sound ringing out through the room; Amy screamed with delight.\n\n\"Yeah, you want me to fuck you?\" I growled through clenched teeth. \"You wicked, wicked witch?\"\n\n\"Yeah, Jake, fuck me. Fuck me with your big wizard stick!\"\n\nI was merciless, my blood was up. The time for tender lovemaking was past - I hammered into her with the sensitivity of a pneumatic drill. I might have been a Cambridge nerd, but I could rut like the greatest stallion. \n\nBeneath me Amy balled the bedsheet in her fists, whining and whinnying as she surrendered to my charge. A barrage of abuse poured forth from my lips; Toto the dog would've been scared shitless; Scarecrow and Dorothy were left for dust, swept away on a tornado of fury.\n\nI grabbed Amy's hair tightly and pulled her upright to attack her black lips with my own. I stabbed my tongue into her mouth, a vice-like grip on her jaw, then flung her forwards again, flattening her into the bed as I hammered ever harder. The sounds of our fucking filled the room and the courtyard below, why no one called Security I will never know.\n\n\"I'm cumming, I'm cumming,\" she panted.\n\n\"Yeah, you gonna cum for me, you gonna cum for me!\" I urged.\n\nSuddenly she tensed, throwing back her head and splitting the air with a scream as her body clamped hard around my penis.\n\n\"Fuuuuuucccccckkkkk!\" she yelled again, slumping forwards and sinking into the duvet. She shuddered as her full force of her orgasm erupted within her. \n\nStill inside, I lowered my body to hers, letting her feel my feel her weight on her back, protecting her in her vulnerability, calming her as the aftershocks coursed through her. Sightless, she grasped my hand in hers and pressed the knuckles against her lips, as I gently stroked her hair. My heart pounded with love as she gently weakened her grip on my cock and her breathing slowed.\n\nA calm stillness returned to her room.\n\nAmy made to turn over and I pushed up from her, giving her space to roll onto her back. I held myself above her and bent to kiss her, a long deep sincere kiss, tongues gently sliding over one another as we gently shared our love. \n\nWe broke apart and stared into each other's eyes. I smiled; there were traces of face-paint above her chin and beneath her jaw, but her make-up was mostly gone, the pillow beneath her now green - the real Amy revealed to me once again.\n\nShe reached between us and trailed her hand down my body, following the ridges of the muscles beneath my skin. I felt her fingers close over my penis, still hard and slick with her juices. She rubbed the thumb over the teat at the end of the condom.\n\n\"You didn't cum?\" she asked, a little despairingly.\n\nI shook my head.\n\n\"Jake, how on earth have you not cum?\" There was a note of frustration in her voice. \n\n\"'Cos I'm your fucking wizard and I've got a magic cock,\" I said.\n\n\"But Jake, you gotta cum, I need you to cum,\" she moaned.\n\nI reached between us and parted her lips with my fingers.\n\nShe shook her head. \"No Jake, please, I can't take any more - I just need you to cum.\"\n\nI straightened up and looked at her as she lay beneath me. \"You want me to cum?\" I asked, as I stripped away the condom.\n\nAmy nodded and reached forwards, pulling my thighs so I sat astride her body. I reached across for the bottle of lube and her eyes widened as my cock bobbed in front of her black lips - her lipstick had proved remarkably resilient.\n\n\"I still can't believe he fits inside me,\" she gasped. \"But it feels so good when he does,\" she added quickly.\n\nI squirted a little lube onto my shaft and let her spread it along my length. The liquid made a little squelching sound as she ran my foreskin over my glans. Lovingly I stroked a stray curl away from her face as she worked me with both hands.\n\n\"Jake,\" she whispered, \"can you take over? Make yourself cum!\"\n\n\"Yeah, you want me to cum?\"\n\nAmy nodded. \"Yeah, cum on my face, Jake. I want you to cum on my face!\"\n\nI grasped my rod and began to stroke. My girlfriend looked up at me, eyes wide with excitement, watching as I set my jaw as my pace increased. I leaned forwards, bracing myself against the wall with my left arm, preparing to direct my eruption.\n\nMy right hand was a blur now - I was pumping faster, the heat rising within me as my muscles strained.\n\n\"Go Jake, go go go!\" Amy called in encouragement. She'd reached down her body with her arm - she was touching herself - I could tell.\n\nI threw my head back and roared as my climax exploded through me. Ropes of cum spattered across her face, covering her with my seed. Beneath me Amy shrieked in delight as her own orgasm enveloped her.\n\n\"Fuck!\" I bellowed, slumping forwards even further, offering my cock to her. \n\nObediently she lifted her head and cleaned my glans with her tongue, greedily dragging her lips over my manhood. I bent to kiss her, tasting my semen inside her mouth.\n\nHer head fell back onto the pillow and she flung her arms outwards in total surrender.\n\n\"Fuck Mr Wizard,\" she sighed, exhausted. \"You've melted me with your cum!\"\n\n-\n\nWe woke late the following morning and made love again - gently this time. I lay behind Amy as she lifted her leg and placed my condom-clad cock inside her. I nuzzled her hair and whispered sweet nothings in her ear as I played with her breasts with my hands. Then she pushed me up and rolled onto her back, so I could continue on top. She hooked her feet behind my butt and pulled me into her, softly encouraging me as we rocked together.\n\nWhen it was over, I got up to throw the condom in the bin. I looked back at her pale body on the bed, her eyes closed, her arms splayed outwards. The rumpled sheets beneath her were stained with green face-paint and the room was heavy with the smell of sex. The image of the innocent schoolgirl singing so angelically in that Christmas Concert less than two years before, flashed across my mind. Here she was now, my Amy and the woman she'd become. The woman I loved. The woman I love.\n\n-\n\n\"Where did your parents stay last night?\" asks Amy as we enter King's Cross station.\n\n\"A village just outside Royston - they've got old friends there,\" I reply. \"It's twenty miles from Cambridge at the most.\"\n\n\"And they're going to meet you at your College?\" she asks.\n\n\"Yes, I'm going to message them when the train gets to Cambridge, then I'll go to College, get my room key, get my paperwork sorted - then they'll rock up with the rest of my stuff. Mum and Dad'll both get to see where I'll be living - there's not room in the car for the three of us.\"\n\nI select a single ticket from the machine and pay with my debit card.\n\nI look up at the departure boards: 'Cambridge Platform 10'.\n\n\"Not nine and three quarters,\" my girlfriend observes wryly.\n\nWe walk a few short paces towards the ticket barrier, avoiding the long line of tourists queueing for a photo with the infamous luggage cart.\n\n\"Well this is it,\" I say, trying not to choke up. \"This is goodbye for a couple of weeks. I'm going to miss you so much!\"\n\n\"I'm going to miss you too,\" Amy says quietly. \"I can't wait to see you for your birthday!\"\n\nWe hug each other tightly.\n\nI kiss her on the cheek.\n\n\"I'll call you this evening,\" I promise.\n\n-\n\nWe'll step away from Jake and Amy, as they embrace in front of us. We've followed them for so long and through so much, but for now, our journey together ends here. \n\nAround them the busy concourse of King's Cross is thronged with people. No one gives them a second glance - they are just another pair of loved-up teenagers, bidding each other farewell.\n\nWe walk quietly away, glancing up at the glass roof of the station, idly watching the sun as it filters through the panes. Maybe in a few years we'll be in a caf\u00e9 in London or a pub in Cambridge, and we'll recognise the young couple sitting down at the table next to us. We'll pretend to read the newspaper, but we'll strain to listen as they talk excitedly of their futures together.\n\nWe turn and look back for one last time. Jake has gone through the ticket barrier and is about to board. He blows his girlfriend a kiss, then waves and vanishes inside the carriage. A whistle sounds and we watch as the train slowly starts to move off, carrying the farmer's son to his new life as a Cambridge undergraduate.\n\nAmy does not turn until the taillights have disappeared. There are tears in her eyes; she's trying very hard not to cry. She takes a few deep breaths and, in her mind, recalls her lines, learnt long before:\n\n\"Farewell, farewell! Parting is such sweet sorrow,\n\nThat I shall say farewell till it be morrow.\"\n\nTHE END\n\n*****\n\nAuthor's note\n\nSo, after 165,000 words, 15 chapters and 52 weeks of drafting and redrafting, this is where I must leave the tale of Jake and Amy. It's been a good year and I've really enjoyed rediscovering the fun of creative writing - something I haven't done since I was 16. Although undoubtedly there were times when the process frustrated me, I've had an overwhelming sense of achievement as the story has built. I'd urge anyone who's considering doing the same, to jump in and go for it - you won't regret it!\n\nHuge thanks to all my readers - it's been really humbling to know that so many are engaged with the story and have been eagerly awaiting each instalment. A very big thank you to all those who have commented publicly or who have messaged me directly - you have been overwhelmingly supportive in helping me to develop my writing. Finally thank you to the other Literotica authors, whose stories have inspired me to pick up my pen.\n\nI would like to write more in the future, and I do have some ideas in my head (if not yet on paper). I would like to pick this story up again at some point, once our heroes are a couple of years into their university courses... \n\nBut in the meantime, I'd be grateful for any feedback you'd like to give on the series: What's worked well, what hasn't? Are there any parts that have been particularly exciting or boring? Have I missed any opportunities to introduce humour or suspense? What did you think of the characters and plot? And, perhaps most importantly, did the story turn you on? Your comments will be invaluable as I strive to improve my work.\n\nThank you again for all your support and I hope that you and your families stay safe and well through these challenging times.\n\nSpindleTop"
    ],
    "authorname": "SpindleTop",
    "tags": [
        "college",
        "costume",
        "farm",
        "first love",
        "party",
        "student",
        "teenager",
        "university",
        "wicked witch of the west",
        "wizard of oz"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/tybalt-and-juliet-ch-15"
}
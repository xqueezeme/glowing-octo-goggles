{
    "title": "There and Back Again Ch. 107-108",
    "pages": [
        "A/N: I'm sorry about the mess with the previous chapters over Christmas. Somehow I uploaded the wrong chapter and it took half a dozen messages and reposting the chapter 3 times -- each of which takes about 4 days to be approved or refused -- before I could convince them to fix it. But it's done, and we're moving on -- the final battle approaches!\n\nIn response to some reviews: yes, this will continue into Awakenings and DA2, though obviously some things have changed -- it's going to go seriously AU from here. I'm contemplating Inquisition, so it's possible I'll make it there too. But things will be different -- Sierra won't be living in Kirkwall or working directly with the Inquisition, so it won't be in nearly as much detail as Origins was, fair warning.\n\nAlso -- these chapters have been posted as quickly as they have been because this site was catching up on a backlog of chapters already published elsewhere. It is now almost caught up. Once it does, updates are going to slow down dramatically -- like one chapter every 2 weeks, not 2 chapters every week. Just so you all know.\n\n********\n\nChapter One Hundred Seven: Aftermath\n\nAfter the Landsmeet, things moved quickly. Cailan -- it's really weird to call him that again -- moved into the Palace, and offered rooms for the Grey Wardens, our companions, and Nathaniel, so we all transferred from Eamon's. It was nice, having more space and not having multiple people crammed into one room. It was also nice to no longer pretend that we weren't married -- Alistair and I were given a large, lavish room in the family wing near Cailan's rooms, and Aedan and Zevran were next door. Everyone else had their own rooms down a long corridor, and he assigned us a small dining room where we could meet and share meals.\n\nDenerim's Palace was enormous, but surprised me somewhat with its utilitarian style. The walls and floor were mostly stone, nicely done and sometimes painted, but there were no marble frescoes or whatever else I might have expected in a royal palace. There were beautiful tapestries on some of the walls depicting moments in Fereldan history, few of which I recognised, but most of the walls were bare except for sconces.\n\nI supposed I shouldn't have been surprised -- in the game, Fereldans were always described as practical and not overly ostentatious, unlike the Orlesians. The only thing that made the palace truly grand was the scale -- it was, by far, the largest building I'd been in, on Earth or on Thedas.\n\nThere were multiple guest wings, no less than four enormous ballrooms, half a dozen huge dining rooms and many more small ones. There were sitting rooms, map rooms, gardens, armories, and rooms just for displaying statues of famous Fereldans. And all of them were done in a lovely, but minimalist style. However, the bedrooms had beautiful, thick rugs, and beds so soft you could get lost in them, and the family wing had bathing rooms attached to every bedroom with tubs and soaps and bottle after bottle of sweet smelling shampoos. If they'd only had indoor plumbing, it would have been perfect; as it was, my little shower head worked marvelously, and the staff were thrilled not to have to haul hot water -- especially given how frequently I tended to bathe.\n\nCailan fired most of the upper-level staff that had worked for Anora, providing some sort of severance package, then had Kallian help him replace them with qualified Alienage elves, for the most part. Blake stayed on as his manservant, of course, and there were chamberlains and seneschals and Maker knew what other sorts of staff that I didn't even try to get to know that Cailan hired. I met the maid responsible for cleaning our rooms, a young, nervous elf named Noni, and the three responsible for serving food in the Warden dining room, and figured they were probably the only ones I needed to know by name.\n\nDuncan put Loghain and Wulf through the Joining the night of the Landsmeet, and both survived. Both were given rooms at the palace, which surprised me, but Loghain was apparently to be invited to the strategy meetings and having him stay somewhere else just didn't make sense. Cailan apparently treated him as though he didn't exist most of the time, which was probably for the best, though I heard that one night there had been quite a bit of yelling coming from the direction of Loghain's room. No one knew what, exactly, was said, but apparently Loghain was much subdued after that.\n\nPersonally, I avoided Loghain like the plague. Most of my friends had seen some horrible things done at his behest, but I'd seen Thedas with Cailan and Duncan dead. Despite knowing, and approving, of his conscription, I still wasn't sure I'd be able to avoid getting into it with him, and one way or another, that wasn't going to end well. We were supposed to be hiding my origin from him -- we didn't need him telling the Orlesians when he was transferred to Jader -- so staying away seemed the best policy. And Aedan wouldn't even tell me the things he said -- like any explanation for the stupid things he'd done since Ostagar -- because he figured I'd be unable to resist going to talk to him.\n\nDuncan had apparently offered the Joining to Kallian, but she declined. I learned that Cailan had been talking with her and had her convinced to stay and work with him to improve the lives of the elves in the Alienage; I wondered if she'd eventually end up as Bann instead of Shianni. Her temperament might be better suited to it, actually...We hadn't seen Shianni at all since our visit to the Alienage, and I wondered what she would do if she didn't become the Bann.\n\nAedan, Alistair, Duncan, Cailan, Loghain, and Eamon spent most of the next few days closeted in meetings to determine the strategy for fighting the darkspawn; the rest of us were left to our own devices, for the most part. Some of us accompanied Kallian to the Alienage again, recruiting fighters for the King's new military unit, The Night Elves, named after the elves who'd fought with Maric and Loghain in the rebellion; Leliana dragged me to the market district to window shop for shoes; we had Master Wade make a set of armour for Wulf which was far superior to his old, cobbled together junk. Boring, but necessary.\n\nA messenger came to the Palace one night for Wynne -- Gorim's wife was giving birth, and the midwife was concerned it wasn't going well. Leliana and I accompanied the mage as we hurried to the small house in the Market District, willing to help in whatever way possible. Wynne disappeared into Riana's room, leaving Leliana and I to console an overwrought Gorim. We heard talking, and then a rather loud argument; the midwife, a chubby middle-aged woman with an impressive scowl, stormed out and left the house, cursing mages to the Void. Leliana and I exchanged fearful glances, interrupted by Wynne bellowing for help.\n\nSoon I was boiling a large pot of water and scouring cupboards for clean towels and linens, while Leliana went into Riana's room to aid Wynne. They did something -- I couldn't have said what, for which I was thankful -- and Riana screamed like the world was ending. I had to hold Gorim back as he tried to throw himself at the closed door, talking quickly and trying to convince him that Wynne had everything well in hand. I wasn't sure I believed it myself, but it seemed to calm Gorim some and he slumped back into his chair.\n\nAt Wynne's shout I grabbed the water and a huge armful of clean linens and went in, shocked by the blood pooled on the bed and splashing down onto the floor. It looked like someone had been murdered, and violently at that. Leliana was holding Riana down, a strip of leather between the dwarf's teeth to bite down on; Wynne had what looked like one entire arm up inside Riana, the aura of healing magic suffusing the room. I set down my items, uncertain how to help, just as Wynne slumped and fell heavily to her knees, pulling a very bloody arm out of the petite woman.\n\n\"Got it,\" she sighed, looking happy though incredibly weary, then levered herself to her feet and began scrubbing her hands in the hot water, while I used towels to soak up some of the blood. When Riana squealed again, Wynne turned back, tiredly, and bent over the end of the bed again.\n\n\"Push now, my dear. You can do it.\"\n\nAnd Riana did; her face screwed up, in pain or concentration I couldn't be sure, and suddenly Wynne was holding a tiny, bloody, squalling infant. Riana collapsed back in relief, and spat out the leather strip, holding out her arms for her baby; Wynne carefully tied the cord and cut it, wrapping the baby in a towel and handing it to the exhausted mother.\n\n\"It's a girl.\"\n\nRiana's face transformed as she beheld the tiny girl, who'd stopped screaming to snuffle adorably at her mother's chest; her skin was still slightly purple, her head cone-shaped and irregular, but it was the most beautiful thing I had ever seen. The three of us went to work cleaning up the blood and other fluids, then Wynne ran a quick scan over Riana's belly and the bundled baby, declaring both to be healthy.\n\nLeliana stayed with Riana and the baby, and I accompanied Wynne to talk to Gorim.\n\n\"They are both fine,\" she said, and Gorim took a big breath of relief. \"The baby was turned the wrong way, but I was able to turn her; unfortunately, it caused significant bleeding. I've healed her, and she's safe now, but she lost a lot of blood. She's going to be tired, and need a lot of help for a few months. And she should eat red meat, or liver if you can get it, to help her build her blood back up.\"\n\nGorim promised to find her liver for every meal if that was what it took, and then he bolted into Riana's room to see her with his own eyes. Wynne followed him with an indulgent smile, and I grinned as she took the baby from Riana, tightened the blanket around her, and handed her to a very awkward-looking Gorim.\n\nI just about said 'awwww' out loud, but managed to stifle it; watching Gorim's face was seeing someone fall completely in love at first sight. He may not have been her biological father, but that didn't seem to matter; he was smitten. His expression passed through a variety of emotions, from frank fear, to love, to a fierce protective instinct, and Wynne actually had to encourage him to loosen his grasp a little. It was adorable, and all four of us women exchanged pleased smiles.\n\nAnd then Revan wandered in, rubbing his eyes irritably and scowling at the lanterns. When he saw his little sister, however, he was all smiles, and he climbed into bed beside his mother as they very carefully placed the baby in his arms. The same array of emotions crossed his little face as Gorim's, and I had to wipe away a tear as he declared he was her big brother and would protect her forever.\n\nThe three of us finally left, leaving the little family to sort itself into some sort of routine.\n\nI had only one real chance to talk to Cailan before I left Denerim with the Wardens, leaving Cailan behind. Alistair and I found him in a small sitting room we'd taken to using when we wanted to talk privately amongst ourselves, and if I hadn't known better, I would have sworn Cailan was hiding in it.\n\n\"Cailan?\"\n\nHe flinched and spun away from the barely ajar door, where he'd been peeking out at whoever was in the hallway outside; we'd come in through another door leading off the hall nearest the Warden dining room.\n\n\"Uh, hi!\"\n\nI saw his eyes flit guiltily back towards the door, and stepped past him, putting my eye to the crack between door and jam. Blake stood there, a polite smile glued to his face, as an angry-looking red-headed woman glared at him imperiously.\n\n\"I demand to be brought before the King immediately, do you understand me?\" Her voice was loud, shrill, and extremely annoying, and I adjusted my age estimate down as her voice reverberated through the hallway. Not a woman -- a girl. \"I will not be treated this way! I was robbed, I say, right in the market...\"\n\nBlake deftly led the woman away, and her voice thankfully receded as she followed him down the hallway to the sound of his polite rejections.\n\n\"Thank the Maker,\" came Cailan's voice at my back, and I turned away from the door to see my brother-in-law on his toes, watching the same scene over the top of my head. \"I thought she'd never leave.\"\n\n\"What was that all about?\" Alistair inquired, as he held his hand out to me and I ducked under Cailan to take it. He pulled me securely against his side, wrapping his arm too casually around my shoulders; I rolled my eyes and he flushed before turning his attention back to Cailan.\n\n\"Habren Bryland,\" Cailan complained. \"She's been coming up with one excuse after another to speak with me. What she expects me to do about being robbed in the market before the Landsmeet, I have no idea. Honestly, who keeps a tiara in her handbag anyway?\"\n\nI pinched my lips together, trying not to laugh; I had a good idea who had stolen that tiara, and Cailan didn't need to know. He continued muttering angrily, unaware of my inner amusement.\n\n\"Well you are the most eligible bachelor in Thedas at the moment, your Majesty.\" Cailan grimaced, and I grinned. \"I'm not sure why you're surprised. Just think of all the shopping she could do if she were queen!\"\n\nCailan shook himself like a wet mabari, shuddering in horror. \"Can you imagine it? The country would be bankrupt in a week. Though perhaps I could convince her that the darkspawn have the best Orlesian silks...she'd probably annoy them to death -- or at least into running away from Ferelden.\"\n\nAlistair guffawed, and Cailan smirked before running a hand through his hair ruefully. \"I'm lucky you found Blake, Sierra. I don't know what I'd do without that kid. He's cute and innocent enough to lie straight to someone's face without being caught. Habren will find herself out on the street before she knows how she got there.\"\n\n\"You'd better not be throwing that child to the dogs, Cailan. He doesn't deserve to be shouted at because you're ducking the nobles you don't like.\"\n\n\"Honestly, no one's given him any trouble. I watch. And he seems to think it's all fun and games, really.\"\n\n\"Has he done it to Eamon yet?\" Alistair's expression was amused.\n\nCailan actually giggled. \"Twice. Funniest thing I ever saw.\" Cailan sank into a chair, and only then did I notice the dark circles under his eyes. Someone hasn't been sleeping any. \"So what can I do for you two? You found me, after all.\" He winked.\n\nI relaxed and sat in a nearby chaise, while Alistair curled up at my feet, his head in my lap, eyes closed as I stroked his hair softly. \"Nothing. We weren't even looking for you; Aedan and Duncan are supposed to meet Alistair here. I just came along for the ride.\"\n\nAlistair opened one eye a crack while Cailan seemed to try and puzzle through my Earth vernacular. \"Since we found you, though, how are you doing? You look tired.\"\n\nCailan scoffed, clearly planning to ignore the question, until he saw Alistair and I both watching him seriously. He sighed. \"I don't sleep well,\" he confirmed. \"Bad enough we're having a Blight without all the idiotic politicking everyone keeps doing. I thought I was supposed to be the foolish one? Compared to them, I look more constant than Anora.\"\n\nI winced at the mention of his ex-wife's name; the Grand Cleric hadn't waited long to annul that marriage, and Cailan was officially single again. \"Have you made any decisions yet?\"\n\nI didn't have to explain further; Cailan wasn't married to her any more, but he still hadn't decided what he was going to do with her. He'd mentioned exile in the Landsmeet, but so far she was still on house arrest in her old rooms in the Palace.\n\n\"Nevarra,\" he finally answered, just before I'd given up hope of an answer. \"I have a few contacts there. A friend of my father's, a widower who's already got heirs, needs a political-minded wife in his bid for power within the nobility. He has large holdings for her to run, and she could work her way into the women's circles in Nevarra City, help him harness the rumour mill. It's far away from here -- and from anyone who might have thoughts of using her to foment rebellion. I already offered it to her, and she seems...accepting. Maybe even pleased. It's better than she expected from the man-child she believes me to be -- she thought I was going to have her killed to assuage my ego.\"\n\nI frowned thoughtfully. Truly, it seemed better than she deserved after all she'd done, but I couldn't fault Cailan for not wanting to execute or ruin a woman he'd once loved. It seemed cruel to place her fate in the hands of the one she'd hurt the most.\n\n\"How does Loghain feel about that?\" Alistair's tone was almost defensive, and I could picture him taking Loghain aside and chewing him out if he'd been a jerk about it.\n\n\"Surprised, mostly. Relieved, I think, and while he isn't happy, he's not made an issue about it either. Maybe I really am growing up, if I can avoid fighting with Loghain about even that.\" We all chuckled.\n\n****\n\nWithin a couple more days, Duncan had us moving again, leaving Denerim behind. I was sad to lose my cushy bed, but strangely glad to have a purpose again. We were to establish a command post near where we hoped to engage the horde before it reached Denerim, and form patrol routes between the mages, elves, dwarves, and Fereldans who were slowly assembling to form our army. And then, the armies were to combine and train. Loghain's plan was for mages, archers, and close-range fighters to be interspersed with each other, divided into small units that could be mobile and responsive, linked by fast-moving messengers, and the mages were all to be taught a spell that sent a small flare into the sky, in different colours for different messages.\n\nEach mage would be accompanied by one or more templars, which was the only reason they'd been given permission to play such an important role; to my surprise, Knight-Commander Greagoir, who had accompanied those who'd arrived from Kinloch Hold, argued passionately with the Grand Cleric to provide Chantry oversight to allow the mages more freedom and influence.\n\nWe had sent Morrigan off to find the three dwarves and direct them to us, and she flew off in bird form with a caw. We'd left Gorim in the city with his wife and new daughter; he promised to catch up with us in a month or so, once she'd started to feel better. I wanted to encourage him to stay and be with his family, but he'd promised Sereda to act as a liaison between the two dwarven groups -- the Warrior Caste and the new Military -- and the Fereldans, so I knew he'd come regardless.\n\nThe weather, finally turning from winter to spring, was suddenly disgustingly rainy, and every single thing anyone owned at the camp was immediately covered in mud. I was grateful that it wasn't so cold, but disgusted by the conditions at camp. People were eating, sleeping, and training in the mud and rain, and sickness started to spread among the gathered troops. Loghain soon had crews of men felling trees and building raised platforms for the tents to be pitched on, and had a roof built over an area that served as a mess hall; between that and the healers, who worked tirelessly with the troops, the illness was halted before we'd lost more than a handful of men.\n\nThe next month was busy. Every day more people arrived -- elves, dwarves, mages, templars, and the first groups of the Fereldan army. The Wardens who were not patrolling the edges of the Wilds were divided among the groups, teaching the various armies tactics, as well as how to avoid becoming tainted. Our companions were divided with them, so each Warden had at least one helper. I was assigned with Alistair, of course; it felt really weird teaching experienced fighters anything, given how new I was to fighting, but the tactics we'd used successfully for months against darkspawn were relevant no matter how skilled the fighter. Emissaries first, then ranged and stealth fighters take out archers while melee hold the front line. There were several small skirmishes between darkspawn raiding parties and one or two of the units, and the groups handled themselves well, with few casualties and no one tainted.",
        "There was a small group of mages who Wynne had been working with in Redcliffe while the rest of us had gone to Orzammar, and they continued to train together instead of being separated into the other units; they were going to be the part of the core team that would help ground the Archdemon, aided by the dwarves with bola launchers who also arrived partway through the month. The mages had been training at combining their magic -- the concept was well-known in healing, but seemed to be a new development in offensive magic -- and they had managed to greatly increase the range and accuracy of frost spells and paralysis.\n\nThe bola launchers were a revelation; they were mobile, mounted on little two-wheeled carts that could be pushed around like wheel-barrows, and each was accompanied by two dwarves trained in their use. They looked a bit like someone took two ballistas, turned them sideways, and mounted them side-by-side. There were both the traditional bolas I had described originally, but also weighted nets that could be launched -- however, they'd made some changes in design. Instead of rope, they were now made of a thin, supple chain, and instead of rocks tied to the end, the weights were made of what looked like concrete poured right around the end of the chain. They were much too heavy to throw by hand, and apparently the only way to separate the weights from the chain was to shatter the entire ball. The launch was powered not only by kinetic energy, but also by some sort of controlled explosion, giving them the range required. I guessed it was Lyrium, given the race of the man who'd designed them. The dwarves with the launchers and the mages immediately began working together, target training on clumps of ground levitated by other mages. I felt confident that if the Archdemon came down close enough to breathe fire, they'd be able to ground it.\n\nThe dwarf in charge of the launch crews, as they called themselves, approached me shortly after their arrival to present me with a small, heavy chest from Dallard, my business partner of sorts. Opening it later in our tent, I was stunned to find over 100 gold sovereigns, along with a note explaining that he'd sold more units to Sereda than he thought, and had also started selling them to Nevarra. There'd been several high dragon sightings in Orlais and the Free Marches, so he promised more gold, as soon as he had more units built.\n\n\"I married rich!\" Alistair exclaimed with a grin. \"You're going to be glad to have that when you find out how little coin your husband gets paid as a Grey Warden.\"\n\nI slapped his shoulder, and he laughed and kissed me.\n\n\"I should send it to Soldier's Peak, see if Levi Dryden will stay on as my seneschal, and get him started on the serious renovations.\"\n\nIn the end, I sent Levi a message, nervous about carrying around that much gold but unwilling to hand it to an unknown messenger. One of the Fereldan army leaders had access to ravens trained to carry messages; I hoped they didn't frighten Levi too badly, or have an awkward run-in with Shale and the Golem army we expected any time. The reply took several days, and Levi assured me the he would be pleased to act as my seneschal for the time being, and he would have someone, a Dryden cousin, pick up my little lockbox and take it to Soldier's Peak safely. Without other options, I agreed. It took only two weeks for the messenger to arrive by horse, take delivery of my little lockbox, and leave again.\n\nFinally the three dwarves caught up with us, and Oghren, Faren, and Bel began working with both the dwarven armies and the rest of the Grey Wardens. Oghren was practically glowing, wearing the first real smile I'd seen on his face since we'd met; he'd cut down drastically on his drinking, and began gaining reluctant respect even from the warrior caste dwarves for his skill and hard work training the groups on tactics. He'd been approached by several of the former casteless to train them as berserkers. Knowing he wouldn't be interested in any emotional response, most of us exchanged nods and didn't mention it, though I admit I had to spent some time teasing him about 'forging the moaning statue' and other ridiculous innuendos I could remember from the game, making him actually blush.\n\nMorrigan was back as well, and with Dariel -- who was now an efficient bird messenger when required -- had begun teaching a handful of the other Dalish mages how to shapeshift into birds. We were hopeful they could serve as messengers. She didn't even complain about being asked, and I wondered if Aedan had already had the conversation with her, or if she'd actually just agreed. I'm not asking which; I like my ass un-burnt, thank you very much.\n\nChapter One Hundred Eight: Preparation\n\nBy the end of a month training and integrating armies on the plains of the Southern Bannorn and the Southron Hills, we were joined by Cailan, along with Eamon, Teagan, Nathaniel, and a large contingent of nobles whose troops we'd already assimilated, as well as Keeper Lanaya, Kardol of the Legion of the Dead, and Queen Sereda herself. The ruler of Orzammar leaving the city for the surface was no small event; it had been centuries since a Dwarven monarch had been seen on the surface. And many of the Deshyrs followed her, half out of curiosity, the rest out of obligation. The new military caste, made up largely of former casteless, was astoundingly well-disciplined, and outshone the grumbling, complaining warriors in almost every way.\n\nIt was weird, being left out of the decision-making for the first time in so long; Aedan and Alistair attended the strategy sessions with Duncan and Loghain, but the rest of us had to wait until they returned to fill us in. The large groups of nobles, dwarven and human alike, had been forced to choose representatives, instead of everyone attending every meeting. I was actually grateful not to be included, however, after hearing Aedan and Alistair describe the shouting and complaining between all of the various parties involved; it sounded like every board meeting I'd ever attended, and I didn't miss that aspect of my job back on Earth in the slightest.\n\nI'd managed to keep avoiding Loghain, both on the road and once we'd established camp, until one night after a particularly bad strategy meeting. He followed Aedan back to his tent, which happened to be next to the one I shared with Alistair, still deep in discussion with his fellow Wardens. Busy cleaning mud off my armour, I didn't notice his arrival until he was practically standing next to me, and I flinched, scrambling to my feet.\n\nAedan took one look at my face, which I guessed was pale with anxiety, and proceeded to drag Loghain away from me, to the former Teyrn's confusion. I heard Aedan hiss something at him, probably instructions to shut up, if I knew Aedan, as Loghain asked what was wrong with me. I couldn't hear the rest of the discussion, to my relief, and I wondered whether Aedan had changed his mind about explaining my background to the taciturn warrior.\n\nI soon learned that indeed he hadn't, when Loghain approached me one day as I sat, alone, cleaning my armour after a brief encounter with a small party of raiding darkspawn. He walked up deliberately, and unless I wanted to obviously snub him by standing up and walking away, I was forced to wait and see what he'd say.\n\nI remained seated, refusing to even make eye contact, never mind glance around to look for backup. I won't give him the satisfaction of seeing me look vulnerable. \"Yes, Warden?\" I hadn't meant my tone to come out so harsh, and I winced.\n\nLoghain wrinkled his brow, looking perplexed. \"Do I know you, your Highness?\"\n\n\"Ugh, don't call me that.\"\n\n\"It is who you are, though, is it not?\" I shrugged noncommittally, so he continued. \"What shall I call you, then? Lady Theirin?\"\n\n\"My name is Sierra.\"\n\n\"As you wish. But you didn't answer my question, Sierra. Do we know each other?\"\n\nI looked up at him, rolling my eyes. \"You expect me to believe you can't remember?\"\n\n\"Well, I hoped I had forgotten something. To my surprise, most of your companions have been relatively pleasant; your brother, who has more reason than most to despise me has been almost welcoming, compared to your avoidance and open hostility. I'm not as young as I once was, and I couldn't figure out why I bother you so, particularly, if we had never met.\"\n\nI looked back to my armour. \"Killing my parents wasn't enough reason?\" I asked in a deceptively mild manner.\n\n\"That was Rendon Howe, Princess. I had nothing to do with that.\"\n\n\"Right. Because Howe would totally have slaughtered an entire castle, including children and servants, knowing that the King would have his head when they returned from Ostagar.\"\n\n\"I knew he had evidence of treason committed by your father. I did not know he would kill everyone. He was supposed to arrest your parents and bring them before the Landsmeet with his proof.\"\n\n\"And yet, when he disobeyed your orders, you punished him by allowing him to claim the Teyrnir as well as the Arling of Denerim? You definitely showed him.\" I snorted in disgust. \"I notice you don't deny that he was aware that Cailan was meant to perish at Ostagar.\"\n\n\"By the time I learned of his actions in Highever, I had no choice. The nobility had turned against me, and I needed him.\"\n\nDoes he think I'm stupid, not to notice he avoided the question twice? \"You needed him in order to start a civil war and try to make a grab for the throne? Ah, yes, I understand. Now I forgive you.\" I suppressed a grin as I watched an angry-looking Zevran creep up behind the heavily armoured Warden.\n\n\"To-\" He stopped and sputtered, face red. \"You do not understand the threat-\"\n\n\"If you say one word about Orlais, I will allow my friend, behind you, to eviscerate you, as he so clearly wants to.\"\n\nLoghain stopped and spun, hand reaching for the pommel of his sword, only to find Zevran's dagger pressed against his jugular, a feral grin on his face.\n\n\"We meet again! Zevran Arainai, assassin and former Crow, in case you've forgotten. At her service, just so we are clear, yes?\" The elf winked at me, and I grinned briefly.\n\n\"Zev, put it down. The Warden and I were just having a light conversation. No need for bloodshed.\"\n\n\"Are you certain? I haven't assassinated anyone in days. My hands are itching, cara mia.\" He lowered the dagger with a flourish, and stepped around Loghain to sink to the ground beside me. \"If you insist, then. What are we talking about?\"\n\n\"Warden Loghain was attempting to understand why I might be hostile towards him.\"\n\n\"And the attempted assassination of your beloved and your brother wasn't reason enough?\"\n\nI grinned at Zevran as Loghain shifted uncomfortably. \"Actually, I don't hold that against him too hard -- it brought you into our lives, after all.\"\n\n\"True. And what would you do without my awesome self?\"\n\n\"Exactly. Now, planning to sell elves as slaves to Tevinter, on the other hand...\"\n\nLoghain raised his eyebrows, startled. \"I didn't...\"\n\n\"Just because they weren't successful, doesn't mean you didn't try, Loghain. I know about Caladrius. Another idea of Howe's that you were only too happy to go along with, I suspect?\"\n\n\"I...You...How...?\"\n\nIt was vastly amusing watching Loghain, of all people, speechless, and I had to laugh at his stuttering. \"Talk to my brother, Warden. If he chooses to tell you about my background, then come back and we can discuss things further. For now, allow me to say that I don't just dislike you. I hate you, utterly and completely.\"\n\nZevran cleared his throat. \"I think you should know that we are watching you, yes? If you do a single thing to make me doubt your intentions, to hurt any of our friends or family, I will gut you like the pig you are. Yes?\"\n\nI nodded enthusiastically and squeezed Zevran's arm. I had played the game enough to know that Loghain wouldn't betray the Wardens, but his explanations for his actions had always seemed...lame. And I'd changed some things. Especially knowing he was to be transferred permanently to Orlais, it was possible he'd do something desperate or stupid.\n\n\"Your Highness,\" Loghain whispered, the look on his face hard to read. \"Believe me when I tell you that, regardless of my past actions, I am fully committed to the Grey Wardens. I did not understand, before. And your brother would say I neither asked nor listened, and he's not wrong. But I do understand, now. Commander Duncan tells me you know about the dreams -- I've had them too. I would not do anything to endanger the Grey Wardens, knowing what I know now.\"\n\nHe stared earnestly at me for a moment, before bowing and turning to walk away. I was left feeling confused, off-kilter. I didn't like not knowing what he was thinking, worrying about the consequences of my presence in Thedas. I turned to Zev for reassurance, to find him biting his lip, looking after the retreating back of the former Teyrn with a puzzled expression. When he caught my gaze, he shrugged expressively, and I slapped his shoulder.\n\n\"You're not helping to reassure me, Zev.\"\n\n\"I know, cara mia. I know.\"\n\nI sighed and went back to cleaning my armour.\n\nFinally, after almost two months camped in the rain in the southern Bannorn, Shale and Caridin showed up. And the golem army they'd brought was far more impressive than what they'd predicted before we left Orzammar.\n\nIn the Deep Roads, wandering into Thaigs and hallways that no one but darkspawn had seen in centuries, the Paragon and our friend had found dozens upon dozens of inactivated but functional golems, bringing them to the surface for the first time since they'd been forged. They hadn't even begun work on Shale's goal of freeing them from the slavery of the control rods Caridin had created for them, but they would have plenty of subjects to work on when the Blight was over.\n\nThey approached the camp not from the west, as we expected, but from the south, through the Korcari Wilds. In their travels, the two sentient golems had unearthed lost maps and forgotten tunnels, and managed to find the routes the darkspawn were using to come to the surface; through cleverness and pretending to be deactivated when outnumbered too badly, they had followed part of the gathering horde right to us.\n\nThey brought interesting news, however: they had seen the Archdemon, and the beast was, at best estimate, a few days behind them on its way to the surface.\n\nThe news of the Horde's movements and the imminent arrival of the Archdemon galvanized the armies and its leaders like nothing else could have. The complaining nobles stopped whining and took directions from Duncan, Loghain, and their monarchs; the separate army units that had been formed marched to their designated locations to wait. The golems would stay together, the need for the control rods making splitting them up prohibitive; the rest of the various combatants were mixed into their battalions.\n\nThe strategy was relatively simple, though I suspected there were many complexities I was not aware of or just didn't understand: a large contingent would wait, for all appearances completely alone, in each of the likely locations where the horde and the Archdemon could appear. When they were spotted, messengers would be sent, by air and on foot, and the rest of the divided armies would arrive in their battalions from multiple different directions at once, coordinated by ravens, shape-shifted mages, and coloured magic flares. The unit responsible for grounding the dragon -- the mages and bola launchers -- would travel with the bulk of the Grey Wardens and our companions, who were to be divided into three groups that would head to where they were needed to confront not only the Archdemon, once it was down, but also the darkspawn Generals we expected to accompany the horde.\n\nFinally, Cailan, Sereda, Keeper Lanaya, Knight-Commander Greagoir, the Revered Mother, and myself, surrounded by a small army of nobles, messengers, raven handlers, a few mages, and some templars, would travel as a group, staying to the rear of the conflict, ready and able to give orders and divert the various battalions depending on the progress of the battle. I was quite certain the only reasons I was included in the illustrious group of muckety mucks were to keep me out of the battle --whether I had Alistair or Aedan to blame for that, I couldn't be sure -- and to babysit Cailan in case he decided to engage in some moronic heroics. I was pretty sure he'd stay put; after feeling humiliated by being manipulated by Loghain, he'd developed some new-found wisdom. I hope.\n\nThere was a battalion, led by Teagan, going to defend Redcliffe against the feint we expected, who would join the rest of the armies once Redcliffe was safe.\n\nTwo nights before the expected start of the conflict, Duncan pulled Alistair, Aedan, and I in to one of the larger command tents to talk.\n\nWe all made ourselves comfortable, ignoring the handful of portable camp stools in favour of sitting together on the ground as though we were still at camp, travelling alone trying to unite armies against the Blight.\n\nDuncan looked unusually solemn as he stroked his beard thoughtfully. \"We need to talk...about the future of the Wardens once I am gone.\" He held his hand up, forestalling the objections the three of us were about to start shouting. \"You all know as well as I do that I will not outlive this Blight. Were it not for the imminent battle, I would already have gone on my Calling. If I have my way, it will be I who strikes the killing blow against the Archdemon -- no one else need die for this. We need to face the reality that I will not be leading the Grey Wardens once the Blight is over.\"\n\nMy brother, my husband, and I, as a group, subsided into pouty silence, and Duncan forced a smile. \"I am honoured by your regard, truly, but that is not what we need to talk about.\"\n\nI looked up, wondering what exactly he did want to discuss.\n\n\"First of all, you are the most senior of the Fereldan Grey Wardens. It will be between you two to rebuild the Grey Wardens in Ferelden and deal not only with the Mother and the Architect, but defend against the Thaw as well.\"\n\nAlistair twitched. \"But Riordan...\"\n\n\"Will be returning to Orlais, should he survive. As will Conrad and Dougal. Despite their temporary defection, they are not Fereldan Grey Wardens. Loghain is not the only Fereldan who is suspicious of Orlais; they will not be tolerated here permanently, even should they wish to stay, especially not in a leadership role. Nor do any of them wish to take on that role. Whoever commands the Wardens when the Blight is over will be a powerful figure in Ferelden, regardless of nobility or birthright. Between Cailan's regard and the respect earned if we successfully end a Blight faster than anyone in history, the Warden Commander will be a visible, influential person.\n\n\"No, I'm afraid it falls to you two. For what it is worth, I am sorry to leave either of you in this position.\"\n\nAedan and Alistair shared despairing looks, and I giggled. \"You look like someone's just told you that you only have a week to live, not that you have been granted positions of power and privilege.\"\n\n\"Easy for you to say, sister.\"\n\n\"Hey! I'm already the stupid steward of Soldier's Peak and a sodding princess, I'll remind you. Warden Commander seems fairly benign by comparison.\" I stuck my tongue out at Aedan and the three men chuckled.\n\n\"To return to my point,\" Duncan sighed, rolling his eyes at my antics, \"one of you will be named Warden Commander. I suggest you might want to figure it out in advance.\"\n\n\"You aren't going to choose your successor? I thought that's how it was done.\" Alistair looked confused, but less panicky at the concept of leadership than he could have.\n\n\"I think the two of you are more than capable of determining what is best on your own.\"",
        "Aedan and Alistair shared another meaningful look, and my brother raised one eyebrow. Alistair nodded, and they turned back to Duncan in unison. \"We'll share it.\"\n\nAedan continued, \"Can we be co-Commanders? We can share the administrative duties, take turns leading in the field and remaining behind to hold the fort. We can figure out the details later.\"\n\nDuncan smiled proudly. \"That's what I hoped for, to be honest. I suggest Sierra, as technically the third-most senior Warden, as a tie-breaker should you fail to find agreement on important decisions. I will write my recommendations up and send them to Weisshaupt immediately.\" I scowled, and Aedan took the opportunity to stick his tongue out at me. I laughed.\n\n\"There's something else we need to discuss, however.\"\n\nThat sounded ominous. Aedan tilted his head curiously while Alistair frowned, recognising Duncan's tone as being more serious.\n\n\"We need to discuss relations between the Fereldan Wardens and Weisshaupt.\" Duncan rose, pacing back and forth across the small tent, three sets of eyes watching him attentively. \"Cailan has some concerns, echoed by Loghain, about the politics at Weisshaupt, and what they will mean for the Grey Wardens left in Ferelden after the Blight.\" He turned to me. \"Do you know anything about that?\"\n\n\"Very little. There was an expansion to the game, starting six months after the Blight, describing the events with the Mother and the Architect, but there was very little said about Weisshaupt. They sent a rather unpleasant woman to be a treasurer of sorts, which struck me really as a way of trying to assert some control, but that was all. And the next game mentioned the Grey Wardens almost as an afterthought -- it was about the problems in Kirkwall with mages and templars and Qunari. There was supposed to be a third game, eventually, but I honestly don't know if it's been released yet. All that I know about Weisshaupt, really, was in a book written about your trip into the Deep Roads with Maric and Fiona, and it didn't leave me with a favourable impression. The reaction to Riordan's request for aid hasn't improved that any.\"\n\nDuncan nodded. \"I would like to disagree, but I have to admit I am also worried.\" He sat down abruptly again. \"There are some ways in which Loghain was not wrong. The fact of the matter is that Weisshaupt has always treated the Fereldan Wardens as subordinates of those in Orlais. My orders, messages from Weisshaupt...all of them come through Orlais. I have always had far more contact with Commander Clarel than directly from Weisshaupt.\n\n\"I have fought that, tried to keep the influences of Orlais on us to a minimum -- and Clarel has no desire to be involved in Ferelden, which helps -- but I have been thwarted at every attempt to change things. When I've sent communications directly to the First Warden, or have recommended that politically, allowing my orders to come through Orlais is a bad idea, I've been ignored or reprimanded. I requested that they send Grey Wardens from Nevarra, Antiva, or the Free Marches instead of Orlais when it became clear the Blight would be in Ferelden, but they refused and offered only those from Orlais, which were, of course, blocked by Loghain.\n\n\"Even recruiting more Grey Wardens has been difficult -- they would routinely withhold Archdemon blood when I requested supplies. Before Ostagar, I had enough blood to perform perhaps one last Joining ritual. They claimed it was due to concerns that I would alienate the nobility if I recruited too freely, but there were plenty of good potential recruits who wouldn't have ruffled any feathers.\"\n\n\"So what is it you want us to do?\" Alistair looked profoundly disturbed.\n\n\"King Cailan has suggested, and I don't disagree, that once the Blight is over, ended without the help of the rest of the Order, that the Grey Wardens of Ferelden declare themselves as separate from Weisshaupt. He has promised to provide tithes in the form of coin, supplies, and accommodations at Soldier's Peak indefinitely. In return, he has made some sensible requests to have the Wardens work with Ferelden's armies, especially the scouts, to increase our access to intelligence on the darkspawn's activities, and requested that we set up small stations throughout the country as watch posts and to foster improved relations with the people. He has recommended to Queen Sereda that Orzammar should have a more permanent Grey Warden presence, and suggested an alliance between Fereldan and dwarven Grey Wardens, as well as amending the treaty we currently hold so that Orzammar will provide aid only to the Fereldan Wardens. The Dalish have already agreed to such an amendment, and asked only for communication between the clans and the Wardens.\"\n\n\"Would Weisshaupt even accept that?\" Aedan's brow was furrowed in thought.\n\n\"They wouldn't have much choice, especially if we were backed by the Fereldan nobility and army. The worst they could do is refuse aid in future against the next Blight, but as we've seen, they can already do that, not to mention that it is unlikely the next Blights will begin in Ferelden anyway -- it is far more likely they will be requesting aid from us. We could offer an alliance, treaties and the like, and we will have some leverage, once this Blight is ended, after all.\"\n\nAedan looked confused, but I immediately understood. \"Archdemon blood.\"\n\nDuncan nodded. \"Blood, bone, scales...the last Blight was four hundred years ago. While they still have some stores of Archdemon blood, I imagine their supply is running low. We will have the only access to a fresh source. Which is another thing we need to discuss later.\"\n\n\"So you think we should do this? Declare our independence, and hold the Archdemon blood hostage for their agreement? Can we even do it, be Grey Wardens, without Weisshaupt's support?\" Alistair looked like he felt ill, and I couldn't blame him. I could only wonder what sort of ripple effect such a massive change would have on the Thedas that I had originally experienced only through games.\n\n\"I think you must. I don't see the Fereldan monarchy accepting the hypocrisy we've seen -- the politics, the control tactics, refusing to acknowledge Ferelden as its own entity -- and continuing to support Grey Wardens if we're still part of the Order. I don't even want to think about what Weisshaupt's reaction will be to Avernus' altered Joining formula. I have sent a messenger with the new formula and what we know about it to all of the Warden Commanders in Thedas, as well as Weisshaupt -- they aren't going to be happy about it.\"\n\n\"Duncan! You rebel!\" I couldn't help but be impressed.\n\nWe spent another few minutes discussing the processing required for Archdemon blood. It was certainly something I hadn't known about from the game, and I was sure if Duncan hadn't survived, the blood would have gone to waste. There were supplies needed, and only a Grey Warden could do any of the harvesting -- the risk to anyone else who came too near the extremely tainted substance would be enormous. Aedan and Alistair secured Duncan's agreement to inform the rest of the Grey Wardens about the process, just in case. Aedan also insisted he would offer the others a choice between remaining with the Fereldan Grey Wardens or being transferred elsewhere if they'd prefer.\n\nWhen offered, not one wanted to leave.\n\nThat night, Alistair and I desperately made love in our tent; when we finished, as we cuddled together, something would set us off and we'd begin again. It probably wasn't the healthiest way of dealing with our fear, and the grief we knew we would be confronting within a few days, one way or the other, but it was all we had, and it was enough just to be together in every way.\n\nI was woken from a dead sleep sometime later by Aedan rapping stiffly on the fabric of our tent. Knowing he wouldn't be able to hear my reply, I squirmed out of a confused, drowsy Alistair's arms, slipped into a nightgown, and stuck my head outside of the tent.\n\n\"What is it?\" It was raining again, and I was irritated not only to be wet and cold, but also awake instead of sleeping soundly with my husband.\n\n\"Have you seen Zevran?\"\n\nI rolled my eyes. \"Aedan, believe me, I haven't left this tent for hours. I've seen no one but Alistair.\"\n\n\"I can't find him. Sten and Oghren are also missing, as is Duncan.\"\n\nAlistair pulled a tent flap aside, crawling over me to stick his own head out. \"They're missing?\"\n\nAedan looked absolutely inconsolable. I sighed. \"Give us a minute to get dressed.\"\n\nAlistair and I scrambled into our armour haphazardly, tumbling out of the tent a few moments later. The three of us closed our eyes, trying to feel if there were any Grey Wardens in directions we didn't expect. I could feel those I expected -- the three Orlesians and our junior Wardens -- but Duncan was apparently outside of my range. Alistair and Aedan found the same thing.\n\nWe searched the camp, and finding nothing, headed to Cailan's encampment within the nearest battalion. We split up to better cover the ground, and I'd reached the southern edge of the battalion's tent city when I caught a momentary sensation of the taint further south. Unable to determine, in that brief moment, whether it was Grey Warden or darkspawn, I fingered my daggers, debated my options, and headed out past the last row of tents. The sensation grew as I walked, and within fifty steps I was certain that what I felt was no raiding party; it was Duncan, but he wasn't alone. Anxious, remembering what had happened in the Deep Roads, I followed the taint further from camp, into the woods and to a small clearing.\n\nI gasped, covering the last hundred feet at a run. I could see Duncan, looking unharmed, with several darkspawn corpses at his feet. I could feel two more Grey Warden signatures that I didn't recognise, which was strange, given we weren't missing any other Grey Wardens, but what had me tripping over myself to hurry was what, or rather who, was standing next to Duncan. I could see white-blond hair, bronze skin, and long, elegant ears. It was Zevran.\n\nAnd he was holding a chalice.\n\n\"Stop!\" I shouted, and the elf paused as he raised the chalice to his lips. I stumbled, falling to one knee, before leaping back to my feet. I got perhaps twenty feet away, near enough to see Sten and Oghren lying in the mud, and to hear the elf's words.\n\n\"I must, cara mia. Tell Aedan...tell him I am sorry.\" And then he lifted the chalice, before I could stop him, and drank. His eyes rolled back and he screamed, once.\n\nI reached him just in time to catch him as he fell, and unprepared as I was, I crumpled to the ground, the unconscious elf in my arms weighing me down. I settled him to the ground, scrambling to check his pulse, but my Warden senses told me what I needed to know before the throbbing under my fingertips reassured me: he had survived. And so had Oghren and Sten, from the taint I could feel resonating from their blood.\n\nI looked up at Duncan, holding the chalice with a sad, wary expression on his face. \"Aedan may never forgive you.\" I looked back down at the Antivan, smoothing back a lock of hair that had fallen across his face.\n\n\"I know.\"\n\n\"Then...why?\" I stood, glaring at my honourary father.\n\n\"He forced my hand.\" Duncan sighed, his frown deepening. \"He volunteered. They all did. And when I refused, he threatened to tell Grey Warden secrets to anyone who would listen. He knew, Sierra. Knew he could die in the Joining, knew he could die killing the Archdemon. He wanted to be ahead of Aedan in the kill priority. He told the others that Aedan, or you, could die trying to kill the Archdemon, and they all insisted they Join.\"\n\nI sighed. I feel like I should have seen that coming. \"I'll kill him myself, if Aedan doesn't.\" I looked at the unconscious forms in a rough semi-circle around Duncan and sighed again. \"You had to do this in the middle of nowhere?\"\n\n\"Zevran's idea. He didn't want to chance Aedan stopping him.\"\n\n\"Of course.\" I rolled my eyes in exasperation. \"I'll go get the others to drag them back to camp.\"\n\nI found Alistair, first, frantically searching for me, worried I'd disappeared as well; I brought him with me to find Aedan, Faren, and Bel, insisting they follow me but not telling them why. I led them to the clearing, stepping aside to allow them to see what I'd seen and draw their own conclusions. It took a moment, the chalice now nowhere in sight as a visual clue, but the sensation of extra Grey Wardens in the clearing couldn't stay unnoticed for long, and as a group, the four of them gasped.\n\n\"No!\" Aedan fell to his knees beside Zevran, pulling the elf's unmoving form into his arms.\n\nI dropped to my knees beside my brother, arm around his shoulders. \"He lives, Aedan. I checked before I came to get you. He's going to be fine.\"\n\nAedan shuddered and turned his face into my shoulder as Alistair checked on Sten and Oghren, confirming what I already knew -- they'd all survived. Thank God for Avernus...or I suppose I should thank the Maker.\n\nEasing Zevran back down to the ground, Aedan stood and squared his shoulders to Duncan, scowling. \"How could you?\"\n\nHe took one step towards the Rivaini before I was in front of him, hands on his arms, hoping to circumvent the explosion I knew was coming. \"He volunteered, Aedan.\"\n\n\"Doesn't matter. He should have refused!\" He waved his arm in Duncan's direction, almost shaking me off.\n\n\"He did. And Zevran threatened to tell all of Thedas the secrets he's managed to ferret out.\"\n\nAedan practically growled. \"So let him! We are separating from Weisshaupt anyway. What's the difference?\"\n\nI had no good answer for that one, even though I suspected he didn't really mean it. Fortunately, we were saved from an ugly confrontation by a moan and a shudder from the elf in question; Aedan immediately dropped to a knee beside him and gathered the semi-conscious assassin in his arms. \"This isn't over,\" he threatened, and Duncan just nodded sadly. Aedan scooped Zevran up and headed off towards the camp. I hope Zev can convince him not to murder Duncan...\n\nI turned to the two dwarves, and gestured to a sleeping Oghren. \"Could you...?\"\n\nFaren sighed. \"Why not? Isn't the first time, won't be the last...\" He and Bel each grabbed an arm and hauled, dragging their red-headed friend back to his tent.\n\nAlistair looked at Sten and whined. \"Why do I have to carry the Qunari? He's heavy!\"\n\nI pulled Alistair's shoulder until he leaned down towards me and I could whisper in his ear. \"How about because there's a reward?\" He looked at me, confused, and I waggled my eyebrows in an Oghren impression. \"What, you're going to let Duncan claim it?\" I punctuated my innuendo with a flick of my tongue over Alistair's sensitive earlobe, smirking as he gasped. I released his shoulder and leaned over Sten's prone form. \"Come on, you big baby, I'll help.\" In the end Duncan and I both had to help carry all eight feet of hornless kossith back, depositing the big man in his own tent.\n\nI turned to Duncan. \"I get it with Zevran, but why did Oghren do it? Or Sten? Did they say?\"\n\n\"I'll let them tell you themselves. In the morning.\"\n\nHe looked so sad, I stepped in and gave him a hug, kissing his cheek gently. \"Goodnight, Duncan.\"\n\nAnd then I was dragged into our tent by Alistair, where I proceeded to give him his reward, and then some."
    ],
    "authorname": "ElyssaCousland",
    "tags": [
        "fantasy",
        "fanfiction",
        "dragon age",
        "modern girl in thedas",
        "romance"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/there-and-back-again-ch-107-108"
}
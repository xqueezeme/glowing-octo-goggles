{
    "title": "Felicity Ch. 41",
    "pages": [
        "Chapter 41. Barbara\n\nAs I was leaving the resort parking lot I saw a woman sitting in her car with a look on her face that worried me. I circled around and stopped next to her. I was not surprised she had not noticed. \n\nShe had a gun on the car seat next to her. \n\nI tapped the window and startled her but she did roll down her window.\n\n\"Listen, I'm sorry to interrupt what you intend to do but I have a couple of pointers for you to consider. One, if you use that gun while in the car it will get messy enough to be impossible for any one to want it.\n\nTwo, have you checked your insurance policy to see if it pays off for suicide? Most don't. That was what stopped me. I may have been a worthless bum then but I wanted my son to have something from me when I learned my insurance would not pay. So I started hanging around the toughest parts of town hoping some one would kill me but every bad guy could tell I did not have any money.\"\n\nShe saw my concern with the gun but did not react when I opened her car door. I did not want her to be too worried about me so I leaned back on my car leaving her to choose whether to close her door or leave it open. The woman got out of her car but left her gun still inside, best case scenario so far.\n\n\"What did you do?\" she asked.\n\n\"I got a job as a janitor in a flea bag motel. Men would bring their mistresses in and on the way out they would give me 'you never saw me here' money.\n\nI cleaned up and dressed better and got a job at a better hotel and took up room service meals. I got good tips but best of all I had access to a computer.\n\nListen, I was on my way to eat dinner. Are you hungry?\"\n\nHer expression told me she did not need to say yes. I opened my passenger door. She got her purse and locked her car before I helped her into mine. I did notice that she put her gun in her purse. \n\nAs I drove to a downtown restaurant I continued my story.\n\n\"Anyway I used the computer to find a better job and I was soon working for the tourist office as a clerk. My job was to set up ads for places that wanted to advertise. Most advertisements were plain vanilla taken from a catalog. \n\nOn my own I went to a few places that were not members and convinced them to join.\n\nI designed ads for my new clients specifically for them.\n\nThey were happy but the tourist office was not, they fired me.\n\nThis place we are going to has an all you can eat fish special tonight and I love fish. They have other stuff too if you don't like fish.\"\n\nShe was suddenly worried about her appearance and pulled down the mirror on the visor.\n\n\"Do you have a comb or hair brush?\"\n\nI opened my console and handed her a brush and some wet wipes.\n\nShe did the best she could but ended up removing all her make-up. She still looked frustrated.\n\n\"I can stay here until you eat your fish and be happy with anything you bring out for me.\"\n\nI answered, \"This is casual place; most people in there are wearing shorts and t-shirts. We may be overdressed,\" \n\nShe no longer had that look of impending doom in her face and was a beautiful woman. She was going to make me look good. \n\nI told her just that and she giggled.\n\nI went around and opened her door.\n\nThat evening's crowd had every type of human being there scarfing up on the fish. I knew most and decided to introduce her to some people.\n\n\"What's your name?\"\n\n\"Barbara.\"\n\n\"I'm Bill. Glad to meet you.\"\n\nI introduced her to a playhouse manager and an actress, a Harley riding dentist and her husband, an insurance agent that would not get on a motorcycle. Two friends, a fashion storeowner and her manager/lover, asked us to sit with them. \n\nI asked Barbara if she was offended by the thought of eating with lesbians as I pulled out the chair for her. \n\nMy friends gave me the finger.\n\nBarbara sat as she blushed but said nothing. I asked her if she wanted fish and she nodded yes. I rose my arm and spread two fingers and fifty seconds later we each had a basket of fish and a plate of sides.\n\nThe couple at the table, Emma the storeowner and Judy the manager, asked Barbara if she had ever met lesbians before in her life. She shook her head no; she had most of a fish in her mouth and could not speak.\n\n\"Are we what you thought lesbians look like?\"\n\nAgain a vigorous no and after she swallowed she said, \"I may have met lesbians before but none that were out, so to speak. You two look like women that would run a fashion store. You also look like you are very happy with each other. I am happy when anybody is.\"\n\nThe ladies smiled then smiled again when they got their second baskets of fish. Barbara had already finished hers and was attacking her sides. I raised my hand and she got another basket of fish. \n\nTwo beers were brought to us but the expression on Barbara's face had me placing one beer in front of Emma and asking the waitress to bring Barbara a sweet ice tea,\n\n\"He is trying to seduce you,\" Judy said to Emma.\n\nEmma answered, \"He will need to order many more before he would have a chance.\"\n\nI wadded a napkin and threw it at her and they broke into giggles before attacking the fish again. I got my second basket of fish and Barbara asked the ladies where their shop was. \n\nThe ladies answered and Barbara asked, \"How long have you had the shop?\"\n\n\"We have been there four years, it used to be a feed store.\"\n\n\"I would like to visit your store sometime, both of you look adorable in your outfits.\"\n\n\"Good, make him bring you over and spend a lot of money.\"\n\nBarbara did not know what to say at first until with an innocent looking expression she asked me, \"You are paying for this dinner aren't you?\"\n\nThe ladies cracked up and I had to smile, it was a great line. \n\nBarbara was an intelligent lady\n\n\"Hey, Wederman. You need to give her ten minutes. She is funny,\"Judy yelled to the playhouse manager.\n\n\"A funny comedian would ruin you reputation Paul. Don't do it.\"\n\nThat had been Gary, manager of a slightly upscale bar in the same neighborhood.\n\nSoon wadded up napkins were flying through the air until the owner/chef Doris yelled, \"If anyone throws another napkin they will have to pick them all up!\"\n\nHer fury was fake as usual as were our claims of innocence.\n\nEveryone pointed to everyone else and resumed devouring fish. Ruthie and Sean came in and kissed their way to a table. I introduced Barbara and Ruthie kissed her lips. Her stunned expression was priceless.\n\nEmma and Judy gave Sean the usual passionate kisses. Ruthie first got pecks on the cheeks then passionate kisses.\n\nBarbara's expression was exactly what you would expect if you unknowingly wandered into Neverland.\n\nBarbara eventually decided that three baskets were enough fish but I had room for another basket, my third. Emma and Judy had also quit after three but were enjoying their drinks. I had ordered a second beer for Emma. Judy wadded up a napkin to throw at me but received a glare from the waitress and just dabbed her lips with it. \n\nAs soon as the waitress turned she threw it at me but missed and it landed by the waitress' feet. She turned in mock fury but Judy pointed at Ruthie that was now at a table behind her. Ruthie had a mouth full of fish and silently implored her husband Sean to defend her. He pointed at Ruthie and got his shoulder punched in return. The waitress tried to keep her angry face but that is impossible to do when you are giggling.\n\nThe ladies decided it was time to go and kissed me on the lips then semi-surprised Barbara with kisses on the lips. Judy whispered to her, \"Did you like them?\"\n\nA wide-eyed Barbara nodded yes.\n\nShe watched as my friends picked up the napkins on their side of the table then kiss everyone on the way out. Judy's kiss to Ruthie included biting off a piece of fish Ruthie was putting into her mouth. Judy easily got out of the way of a wide right cross.\n\n\"Honestly, I can't take the child anywhere,\" Emma said.\n\nJudy was almost a year older than Emma.\n\n\"Ready to go?\" I asked Barbara as I picked napkins around our table. Barbara quickly joined me and I kissed my way out as I introduced her to others. All the women kissed her lips. She seemed to enjoy Clara's kiss a lot, she had closed her eyes. Her kiss to Fiona came with a signs of recognition. Fiona gave her a grateful kiss when Barbara did not make a signs although her smile gave her away.\n\nI took her hand and as I walked us to my car and I asked, \"Where do you live?\"\n\n\"In my car.\"\n\n\"Well tonight you will have a bed. I will finish my story later.\"\n\nI opened her car door and helped her in. I drove us home and showed her my spare bedroom then went to my room and got her a couple of t-shirts for her to wear.\n\n\"Take a shower. There is shampoo in there and there are new toothbrushes in the top drawer. If you are still awake after that come join me for the news.\"\n\nI did not see her again until I was ready to go to work the next morning.\n\nShe hurried to me and said, \"I'm sorry, I meant to join you last night so you could have me but I fell asleep when I laid down for a minute. I can be ready in three moments.\"\n\n\"Stay, watch TV and cook anything you want. The office closes at three on Fridays. I will see you then.\"\n\nShe was stunned until she flew into my arms and kissed me hard then headed to the coffee pot crying. \n\nI worried about her emotional state.\n\nShe was a short woman with short black hair. My first impression was that many people would confuse her for a teenager but if you looked closely her face showed the experiences of time. She was gorgeous with an athletic body, a fine ass, and very fine tits.\n\nI had taken her gun out of her purse and took the bullets out the previous night and put it back. I also took her car keys and stopped by her car before going to work. I took everything she might need out including a small suitcase. Her car looked like it needed help so I called the Toyota dealer and had them come get it.\n\nWork that day was intense but that was good, it postponed my decision on what to do with Barbara. I knew she would be staying with me for three days so I had time.\n\nShe was very happy to get her make-up bag and suitcase that afternoon. I showed her where the washer and dryer were and she ran a load of clothes. \n\nShe told me that last night had been her best and most fun date ever and kissed me repeatedly.\n\n\"Why didn't just come to the bed and take me last night?\"\n\n\"I don't take advantage of people in tough circumstances. I will not until you have a paycheck and that is if you still want me then.\"\n\n\"But I want you now.\"\n\n\"How did you end up in this mess?\"\n\n\"I fell for a con artist. I bought a house for us and put it in his name He left me two months ago taking all my credit cards. Two days later there was a for sale sign in front of my house.\n\nI finally accepted he was not coming back and called the police and although they were very sympathetic they said it was his house and he had the right to sell it. \n\nI turned him in for stealing my credit cards and was reminded he had his name on them too. \n\nI have tried to find him but he is apparently not even in the country. \n\nI was evicted from my house three weeks ago and have been living in my car since.\n\nI have no job skills and no one will give me a job.\n\nThe resort I was parked in turned me down for a job as cleaning lady.\n\n\"Your husband?\" I asked since she wore a wedding band on the ring finger of her right hand.\n\n\"He died fifteen years ago, never wanted me to work. \n\nThe bastard came into my life a year ago promising I would be his queen.\n\nI couldn't even get a job cleaning the thrones in a hotel.\n\nBy the way, I doubt I would have been able to pull the trigger last night. When you came to me I was hoping you would be a deranged killer. Instead you were Prince Charming and treated me to a fabulous night. Again thanks.\"\n\nShe gave me a long soft kiss then said, \"And I do want you. Borderline need you. I want to feel like someone wants me because of me but I worry that the only thing attractive about me had been my money.\"\n\n\"Well you can count me is as wanting you even if you don't have money. What would you like for dinner?\"\n\n\"Anything except fried fish.\"\n\n\"I know a Greek place.\"\n\n\"Perfect.\"\n\n\"Do you like Greek food?\"\n\n\"Don't know, never had it before.\"\n\nI smiled and said, \"Get dressed.\"\n\nShe was still wearing my t-shirt she had worn last night and as she walked away she lifted the hem and showed me a very fine bare ass.\n\nI audibly moaned for her benefit and she giggled.\n\nShe liked just some of her dinner that afternoon but I did stop and got her a couple of empanadillas. \n\nOn our way out of town I drove her by my office and told her I worked there but not that I owned the ad agency; I didn't want her to know that. It had occurred to me she might treat me as her lover had treated her. \n\nI would have a report on her Tuesday morning.\n\nI drove by Emma's place and stopped to make rude comments as they locked down the shop. Barbara rolled down her window and Judy went to her and gave her a long kiss, long enough for Emma to walk around and swat her butt. Judy came to my side and kissed me as Emma kissed Barbara.\n\n\"We are going to the playhouse tonight. Join us,\" Emma said.\n\n\"I saw it last week. We are headed to the House of Blues to see Blackberry Smoke before their price goes up.\"\n\n\"They're in town? OMG Emma, we have to go!\"\n\n\"But we have tickets to the play.\"\n\n\"And you got them for free. I will treat you to the show tonight.\"\n\n\"Well, OK.\" Suddenly they were in my car and Judy said, \"Go.\"\n\nThey called and had tickets waiting for them at the will call window just as I did. \n\nEmma, Judy and Barbara talked all the way into the city. I heard Barbara say she was visiting me and would be staying at my pleasure. \n\nShe got all the lascivious ribbing she earned with that remark.\n\nI tuned them out after she also said that she learned we were going to a rock concert at the same time they did. It was me the subject of ribbing then with Neanderthal being the term of choice.\n\nIt was a one-hour drive but we were early and went to the bar. I asked Barbara if she felt she could handle a drink and she suggested we share a beer. We did but she drank very little of it.\n\n\"Beer is an acquired taste, let me get you what Judy likes.\"\n\nJudy liked Sweet Red Wine and Barbara managed to drink the whole glass although it took her nearly half an hour to do so.\n\nThe band gave a spotty performance, some good, some just noise, and a few exceptional numbers. I lowered my expectations for their future, as I had to do with The Fall Out Boys. \n\nHowever Judy really loved them, Emma appreciated them, and Barbara was confused by them. I guessed she was a country and western fan. I later learned she mostly listened to classical music.\n\nI got each of them a concert t-shirt.\n\nMy concert souvenirs were the ticket stubs; I had well over fifty of them in a scrapbook.\n\nAfter I dropped Emma and Judy at their car Barbara and I were assaulted with passionate kisses then we went home.\n\nWe took separate showers and I went to bed. Three minutes later Barbara gets in bed with me and says, \"No sex. Just cuddling.\"\n\nI was fine with that but my cock wasn't. It wanted Barbara badly.\n\n\"You may need to masturbate.\"\n\n\"Yeah.\"\n\nI went to the bathroom and managed to ejaculate in just over a minute.\n\n\"You must have really wanted me.\" She said.\n\nI growled as I got in bed and turned away from her very fine body. She turned towards me and put her hand on my ass and said, \"Good nightzzzzzzzzzzz.\"\n\n\"Well fuck, I really like her,\" I thought.\n\nSaturday morning was at times agonizing, at times fun, and at times confusing. Fun was cooking breakfast together. Every time I added anything to the food she added more. In retaliation I slipped a pad of butter in her hand then squeezed it shut. She kissed me as she caressed my face with her buttery hand.\n\nAgonizing was when after we ate breakfast she loaded the dishwasher, every time she bent over I could see her bare ass and pussy. She put everything in the washer one at a time, in slow motion.\n\nConfusing was when she began to cry as she kissed me then ran into her room and closed the door.\n\nI left her to her emotions and went out to water my plants.\n\nWhen I came back in she was wearing shorts and a blouse with sneakers.\n\n\"Could you take me to my car please?\"\n\n\"It's at the Toyota dealer and will not be ready until Tuesday.\"\n\n\"What are they doing to it?\"\n\n\"Everything that should have been done ages ago, belts, fuel filter, cabin filter, oil filter and on and on.\"\n\n\"Fuck. So I'm stuck here until Tuesday?\"\n\n\"Unless you wish to stay in a motel.\"\n\nShe began to cry and went back to her room.\n\nA voice in my head said, \"Listen dumb ass. She wanted you to tell her you wanted her to stay with you.\"\n\n\"Oh, right,\" I answered the voice.\n\nJust before I opened her door the voice came back and said, \"Of course it could be her period just started.\"\n\n\"Oh.\"\n\nI reached for the knob then thought better and knocked on the door.\n\n\"Come in.\"\n\n\"Would you like for me to go to the store for you?\"\n\n\"Yes please, Tampons, heavy duty please.\"\n\nI began to leave then turned and kissed her softly then left.\n\nI brought back two kinds of tampons and some Midol pills and handed them to her. A few minutes later she came out and loaded the washer then went and got a glass of grapefruit juice and sat on a kitchen chair. She took a pill then stared into space for a while.\n\nI sat next to her but gave her a bit of time.\n\n\"I thought I would have you tonight. Hell I thought you would not even make it through the morning. Being a woman is tough.\"\n\n\"Yes, I understand. It's even harder when they hear things but interpret them wrong. I don't want you to go to a motel. I don't want you to leave Tuesday. I was giving you alternatives not suggestions. Get comfortable here. If you are not ready to look for a job next week then fine, another week comes after that one.\"\n\nShe looked at me with astonished eyes and began to cry again but that time she was kissing me as she cried. \n\nAfter a few moments we got more coffee and sat at my patio table watching the butterflies and bumblebees work my flowers.\n\n\"Can we stay home tonight?\" she asked.\n\n\"Of course.\"\n\n\"Can I sleep on your bed tonight.\"\n\nI guess I had a confused look in my face because I had no idea how to answer that question.\n\nShe giggled and said, \"No I don't want to swap beds. Yes I want to sleep with you. And yes it will only be sleep. Oh, and kisses. \n\nI understand if you are worried about the safety of your mattress but if you want me on my bed I still want you with me.\"\n\n\"My bed,\" I said and kissed her.\n\nWe sat in silence for a while until I asked her what kind of she job she wished to have.\n\n\"Travel agent but those jobs are disappearing and they seldom get to go on trips anymore. Fashion designer but I can't draw and can't sew.\"\n\n\"Model?\"\n\n\"I'm too old and too short for that.\"\n\n\"You could do happy housewife or traveler or miserable Mom with the flu. You could also get your wish to travel a bit.\"\n\n\"Those jobs are on the other two coasts, not this one.\"\n\n\"There are a few around but you would need an agent and a portfolio.\"\n\n\" I don't need an agent and I don't have the money for a portfolio anyway.\"\n\n\"How do you feel?\"\n\n\"Much better, thanks.\"\n\n\"I'll get my camera.\"\n\n\"What?\"\n\nI got my camera and had her pose amid the flowering esperanzas. Her black hair, black blouse and the abundant yellow flowers provided a fine contrast.\n\n\"Look like you just love being in Cancun.\"\n\n\"I have never been to Cancun.\"\n\n\"This is exactly like it is there. You are in your private patio in your hotel. Your naked husband is taking your picture.\"\n\nHer facial expressions were priceless and I hoped I had captured all of them.",
        "\"Do you have other blouses?\"\n\n\"Yes.\" \n\n\"What other colors?\"\n\nRed, tropical pink, lavender, yellow.\"\n\n\"Bring them out when you change out of the black one.\"\n\nI photographed her with her lavender blouse against the bright red roses but she got too close to it and it grabbed her. I had to go rescue her and as I did my arm pressed her tits. She did not react to that, well, she did kiss me.\n\nI asked her to put on the red blouse and she did so right there, she was bra less.\n\n\"Wait, wait, wait,\" I said then ran to her and kissed each nipple and her lips.\n\n\"OK.\"\n\nShe was giggling when she put on the blouse. I took pictures of her among blue plumbagos.\n\nWe repeated the sequence with two more blouses and two more flowers then we quit when I saw she was out of gas.\n\n\"Go take a nap on our bed,\" I said.\n\nShe nodded then heard the 'our bed' part and gave me the most fabulous kiss I had ever been gifted with.\n\nI went to my home office and uploaded the pictures on my computer and edited them. She looked fabulous in each and I had to force myself to assume my professional persona.\n\nI chose the best commercially worthy for each blouse color, put them in an album and sent it to my office. I then printed an album of all the rest. I gave it a cover page then put a plastic binder and spine on them.\n\nI put the album on the coffee table and joined her in bed. I did not get an erection that time.\n\nShe was in the bathroom of her room when I got up. I made a fresh pot of coffee and broke out the almond cookies.\n\nBarbara joined me and put a little bit of water in her cup then swallowed a pill. She followed me back outside with her coffee.\n\nShe ate an almond cookie in silence then said, \"Being a supermodel in her period sucks.\"\n\n\"Sorry, we can wait until you can pose nude the next session.\"\n\n\"Right, who would look at them? Old Geezers Monthly?\"\n\n\"Hey, I subscribe to that. Speaking of which, how old are you?\"\n\n\"Guess.\"\n\n\"Between thirty eight and forty two.\"\n\n\"Exactly. My guess is you are the same age as me.\"\n\n\"You are correct.\"\n\n\"When will you have the pictures ready for me to see?\"\n\n\"As soon as we move to the living room.\"\n\nShe stood and headed that way with the coffee but I decided to stay with my coffee and cookies.\n\nTwenty minutes later she came back out and said, \"I have never been as pretty as the woman on those pictures.\"\n\n\"That is difficult to believe since you are the same woman. I did do some editing but none on you. \n\nYou had bumblebees all around you by the esperanzas by the way. I was impressed that you were able to ignore them. \n\nDid you notice you looked sexier as we went on?\"\n\n\"Gee, I wonder why that would be?\"\n\n\"A really good photographer.\"\n\nI raised her shirt, kissed each nipples then her lips.\n\nShe punched my shoulder then kissed me. We held hands as we finished our coffee and the cookies.\n\n\"Pizza tonight?\"\n\n\"Yeah, that would be good.\"\n\n\"At about six?\n\n\"Six thirty?\"\n\n\"Meat lovers?\"\n\n\"With extra olives and onions.\"\n\n\"I will go order it from my computer.\"\n\nWe had finished two thirds of the pizza when Emma and Judy barged in. \n\n\"Ooh, pizza,\" they said as they picked up the two largest slices but still had the decency to kiss us before they stuffed their mouths with it.\n\n\"Why are you here?\" I asked.\n\nJudy said, \"Bechas we wart two com to the brdwlk wit ss.\"\n\n\"Oh, sure, now you say that,\" Barbara said.\n\nAgain I was impressed by Barbara's quick mind and sense of humor.\n\n\"What she said was we want you two to come the resorts boardwalk with us,\" Emma clarified.\n\n\"We can't. Barbara is indisposed.\"\n\nJudy said, \"Well get her disposed, off. Wait. That did not sound right.\"\n\n\"It's that time of the month.\"\n\n\"Yes, that's why we want you come alomg with us.\"\n\n\"I'm having my period!\" Barbara quietly screamed.\n\n\"Well you said that like it's a proud accomplishment. We can all do that too,\" Emma countered.\n\n\"I can't.\" I said.\n\nThe three murderous glares made me go sit on the recliner.\n\n\"Hey, that means you are useless to him tonight and I'm not,\" Emma said to Barbara as she sat on my lap. \n\n\"Huh?\" Judy said.\n\n\"Huh?\" Barbara said.\n\nThey looked at me and I said, \"Hey, I'm not indisposed.\"\n\nEmma kissed me ravenously and Barbara yelled, \"Unhand him you witch!\"\n\nEmma put her hands in the air but continued the kiss. It was not much of a kiss as we were trying not to laugh.\n\n\"If you don't stop kissing him I am going to run stake through your body and roast you over fire as if you were one of those big things.\"\n\n\"What big thing?\" Judy asked.\n\n\"You know they live in Hawaii. One works for an insurance company.\"\n\n\"A pigeon?\"\n\n\"I will roast you like a pigeon, Wait that's not right.\"\n\n\"A donkey?\"\n\n\"No, No.\"\n\n\"This pizza is good,\" Judy said as she got the last piece.\n\n\"It has ham, sausage, bacon. Wait, that's it! I know the name of the animal.\"\n\n\"What?\"\n\n\"Sausage.\"\n\nEmma and I had been losing the battle for a while but that pronouncement broke everyone up. We could not stop laughing for about five minutes then when we calmed down Barbara gave Judy a quizzical look and asked, \"Sausage?\"\n\nIt took another five minutes before we settled down again.\n\n\"Bring us a bottle love,\" Emma asked Judy.\n\nThe two lived across the street one house down in our subdivision. Barging into my home was not a rare occurrence.\n\nJudy came back with a bottle of Sweet Red Wine and handed it to me so I got up and went to the kitchen to open it. I got me a beer and filled three coffee mugs with wine and returned to the living room. \n\nAnd no one was there. \n\nI quick search later I discovered them in Barbara's room.\n\n\"No, we sleep on his bed,\" I heard Barbara say.\n\nI went back to the living room and placed her new portfolio on the coffee table then sat on my recliner. When they came back Barbara quickly tried to snatch it away but Emma got it first and opened it.\n\n\"Oh, I thought these would be candid photos, you know candid photos, nudge-nudge, wink-wink. But this is your modeling portfolio. How boring,\" Emma said as she inspected every picture.\n\n\"She looks sexier as the pictures go on. I wonder why.\" Judy commented.\n\n\"A very good photographer,\" Barbara said.\n\n\"And what did this very good photographer do between wardrobe changes?\" Emma asked.\n\nBarbara walked to me and raised her shirt and said, \"He kissed each nipple and then my lips.\"\n\nI did just that.\n\nThe ladies rushed at Barbara and each had a tit in their mouth before she could lower her shirt. I threatened them with the empty pizza box and they backed away snarling at me.\n\nFor the next fifteen minutes they spent their time trying to sneak Barbara's shirt back up as I kept threatening them with the pizza box. \n\nAfter the wine bottle was empty our visitors decided to go on to the ladies biker bar and as they left Barbara lifted her shirt and allowed each to kiss a tit. \n\n\"Hey, those are for me,\" I whined.\n\n\"You need to practice your sharing skills,\" Emma said then gave me a very fine kiss. Judy's kiss was borderline passionate then she gave Barbara an all out passionate kiss. Emma dragged her away as Judy extended her arm towards Barbara.\n\nBarbara was giggling as she left for her bedroom as I cleaned up and turned the lights out. \n\nThere would be no pizza for breakfast; it was all gone.\n\nEmma, Judy and I had kissed often and flirted constantly, they were my best friends. I had seen them topless and nude. \n\nJudy had an outrageous sense of humor that Barbara apparently shared\n\nThey were also very good judges of character and they obviously loved Barbara.\n\nI took a shower and when I went to bed I found a freshly showered Barbara there. I turned off the lights and joined her.\n\n\"She said, \" Women kissed my tits tonight. You have corrupted a na\u00efve old broad. Thank you.\"\n\n\"You are welcome. Tonight was perhaps my best night ever but the truth is my favorite part was the improvised comedy skit. You were terrific and so was Judy.\"\n\n\"That was fun but I had to re-dress afterwards, the laughing made a mess.\"\n\n\"That was what I figured.\"\n\nShe turned to face me and I learned she was only wearing panties. I took my t-shirt off and hugged her tits to my chest as I kissed her. \n\nI loved her tits on my chest and I loved kissing her and continued to do so even after she was asleep. Oddly enough I never got an erection.\n\nShe was in her bathroom when I got up that next Sunday morning. I did my thing in my bathroom and made coffee and fried sausage patties and hash brown potatoes before she had a chance to \"help\" me. I served us on the patio table.\n\nShe came out wearing shorts and nothing else. I kissed her nipples and lips before we began to eat. We did not speak but did kiss through our second coffees.\n\nAs we watched the bumblebees she reached into my boxers and pulled out my cock. She began a long and slow masturbation that ended when I sprayed the underside of my patio table with my cum. She did not release my cock until it was dead.\n\n\"Thank you,\" I said.\n\n\"Anytime,\" she said.\n\nAt noon we dressed and went out to the resort and sat on the balcony and stared at the sea as she drank a glass of sweet red and I drank a beer. A young waitress stopped by just long enough to say hi to Barbara. \n\nI didn't ask.\n\nWe kissed on occasion but mostly she asked about the people she had met at the fish restaurant. She apparently had a great mind since she remembered everyone there that night.\n\nWe spent the rest of the day flipping channels between baseball games. We kissed a lot. \n\nI had become very fond of her but I still held back. I was anxious to receive the report on her.\n\nJudy and Emma called early that evening and they talked to me for thirty seconds and to Barbara for an hour and a half. I was very happy it was not the other way around.\n\nI picked up to go boxes of shrimp linguini from a nearby Italian restaurant and we ate as we watched some TV then went to bed early.\n\nShe gave me a blowjob that night. It started out as a handjob but ended as a blowjob with my cum in her mouth. I kissed her as soon she slid back up to me and she seemed to really appreciate the kiss.\n\nWe fell asleep in each other's arms.\n\nI had to go to work the next day. I had her drive me there so she could have my car available to her. She brought me lunch and kisses at noon and was waiting for me before five. I left before five.\n\nShe had steaks for us and we ate on our patio. After we put away the dishes we took a beer and a wine back out. \n\n\"I need to pay you back for the steaks,\" I said.\n\n\"No you don't,\" she said. After a period of silence she added, \n\n\"I am madly in love with you if you were wondering. Your concern for my safety floored me and the way you treat your friends and how they treat you told me you are a good man.\n\nYou may be the first man that did not quickly become a prick to me in a long time. I have been hungry for such a man.\n\nI was eager to fuck you but you turned me down because you did not want to take advantage of me. That made me feel special.\n\nI fell in love with you the night the girls were here. I felt safe and wanted on your bed even though I was not very useful to you.\n\nI think you fell in love with me that same night.\n\nYour report tomorrow will tell you my tale of distress was false. \n\nI am an FBI agent stationed in the city. I was at the parking lot after meeting a man I met on the Internet and had already arrested him for stalking the twelve-year-old girl he thought I was. The actual girl lives here; the girl at the resort that patted my shoulder is her big sister. Your police chief Shawna suggested to the family we lure him down. I was involved because he came from another state.\n\nOr I should say I was an agent, I resigned this morning. \n\nMy assignment made me crazy. I had to work hard that night not to shoot the bastard. The face you saw on me that night was as I was debating my decision to quit.\n\nI am a widow, my husband died in the line of duty fifteen years ago. I am ready for you.\n\nMy report on you told me your story was false too. You own the agency you supposedly slave for and even though you once lived with a woman for three years you have never been married and have no children.\n\nEmma and Judy are exactly what they appear to be by the way and I am very glad they are going to make a wish come true for me. Neither Fiona or Ruthie is are what she appears to be but I'm sure you knew that.\"\n\nI nodded yes before she continued.\n\nThe playhouse is not making any money but Paul Wederman is a multi-millionaire and has the money to keep it running for as long as he wants. \n\nThe chef Doris and her husband were delinquents sent here at a sort of boot camp. They are doing well. Everyone else is, as they appear to be. Did I tell you something you did not know?\n\n\"No. The people I socialize with are not at all secretive with their close friends.\"\n\n\"I am hoping all will be my friends.\"\n\n\"They already are.\"\n\nShe smiled and kissed me then said, \"This where you say you are madly in love with me.\"\n\n\"I love you madly. Let's get married.\"\n\n\"OK.\"\n\nThat was the gist of the conversation that day. That evening we watched the news, brushed our teeth and went to bed. We kissed and cuddled.......and cried. We were forty years old and had at last found our true love. \n\nThe report on Tuesday told me what she had already told me. \n\nWhen her period ran its course we made love for an entire day and night. We fucked hard and fucked tenderly everyday for a month. \n\nAll my friends loved her and many came with us to Las Vegas for our wedding that Fourth of July. Judy was the maid of honor. Emma was my best man. None of our friends found that odd.\n\nShe met Ruthie's stage persona and was an instant fan.\n\nShe alerted the casino security about a scam someone was pulling off. \n\nWe went to the Cirque shows.\n\nEmma and I gave Judy and Barbara two hours to make love to each other. Emma and I went to Emeril's restaurant at the Pyramid while they played. They devoured us when we got back.\n\nMy sales dept. had found places to use Barbara's photos on ads.\n\nMine was the small ad agency in town. The resort, the B&B's, and most restaurants and clubs collaborated and printed a magazine each month extolling our town and listing coming events. Barbara had ad photos on each issue each month. \n\nOur tourist office gave the address of all who inquired about our town to me and I sent latest copy of the magazine to them. That part of my story to Barbara was true.\n\nA few months later Barbara found herself smiling on an ad for a Cancun hotel in Travel and Leisure magazine. It was the first photo I had ever taken of her. \n\nMy friend Jimmy had the large ad agency in town and did ads for TV and slicks. I had given him a copy of Barbara's portfolio after he saw her in an ad for our Italian restaurant. He found that job for her. The Cancun resort wanted her on all their ads.\n\nI gave Barbara the check for her fee. \n\nShe immediately fucked the hell out of me. \n\nWe were still in my office.\n\nWe seldom missed the 'all you can eat fried fish' nights and she became friends with all there. We added the all you can eat legs and thighs to our places to eat. We loved that too. We always went on dates weekend nights. \n\nAs a part time model Barbara made as much money as she had as an FBI agent.\n\nEmma and Judy barged into on our home on a regular basis. Judy and Barbara made love on occasions, Emma and Barbara more rarely. \n\nEmma and me fucked even more rarely as the other two consumed each other but we were never all naked in the same bed. Emma would wait until they went to my bed then led me to my second bedroom and we made love there. \n\nWe were always dressed when the other two emerged from the bedroom. \n\nThey knew of course.\n\nFunny, before they partnered Emma had been the gay one.\n\nBarbara and Judy did the occasional stand up routine in the theater and were always the highlight of the shows. The four of us did the writing and settled on Barbara being the irate one and Judy being the ditzy one.\n\nBarbara soon felt this was her town and loved everything and everyone in it. Everyone loved her, sometimes literally. Ruthie and Carly and Jana loved her more than once.\n\nThen we met some aliens and the town moved.\n\nSomehow our lives didn't change."
    ],
    "authorname": "jjcolejr",
    "tags": [
        "romance novella",
        "love story"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/felicity-ch-41"
}
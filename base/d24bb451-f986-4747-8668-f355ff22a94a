{
    "title": "Anniversary Gift",
    "pages": [
        "As I lay here in aftermath, my crotch still wet, but sated, I cannot help but think what a wonder Erik is. I came and came with him without him fucking me at all. That is not an unusual phenomenon; however, this time the circumstances were downright extravagant.\n\nA few weeks ago, he and I discussed our fantasies, what we thought of when we masturbated. We'd only been sleeping together a couple months, though not infrequently during that time. He told me about his peeping tom fantasy, where the girl invites him in to 'help.' I told him with no little blushing that I wanted to try out the new harness-friendly double-ended dildo I'd seen on my favorite toy website. I also told him that while I'd be content to try it out on him, I'd really love to try it with a girl.\n\nErik, being male, threw me to the bed and fucked my brains out with the hard-on this gave him. He said nothing more about it until earlier tonight, our six month anniversary; he said, 'demi-year'. Apparently the gifts for a half of a year are silicone and leather. He handed me a box containing a brand new harness, the leather straps shiny with connecting rings and buckles, the double-ended dildo I'd lusted for, and a strawberry lollipop (which was the website's trademark gift, oddly enough).\n\nThe dildo itself was a new style, the basis of its appeal. Rather than being simply straight or curved with a flared cock head at either end, it was shaped like a check mark. One end was an egg-shaped vaginal plug (for me) and, after exiting my body, it curved sharply up and forward to press against my clit and part my (shaved) pubic lips. It fit through a harness to keep it all in place, and showed as an erection. It was a lovely, ingenious bit of work. The shaft that would rub against my clit was ribbed just slightly and my panties instantly dampened thinking about it.\n\nErik smiled at me, kissed me, and whispered how much he wanted to see me properly outfitted... but that it had to wait. Disappointed but intrigued, I sucked on the lollipop, licked it, and otherwise gave it head until Erik would relent. He has amazing control. I put the harness and dildo in the bedroom for later.\n\nGood thing it's out of sight, I thought, for while Erik turned on the stereo and flipped through the CD books to fill the disk changer, I answered the knock at the door. I didn't recognize the girl but Erik stepped up behind me and greeted her fondly.\n\n\"Mandy, how great! You're here!\" \n\nNot so great, I thought. Barry White crooned through the speakers and I wanted to get it on.\n\n\"Amanda, this is Elise. Lise, Mandy, your second gift. Your gift of flesh.\"\n\nMy eyebrows furrowed and I looked straight at him. \"Excuse me?\"\n\n\"She's a friend of mine from way back. Mandy has agreed to help you try out your other present. If you agree, of course.\"\n\nI gave the girl a second look, soon salivating at the thought of touching her, licking her... wait, those were Erik's naughty suggestions he whispered in my ear. Not that I disagreed.\n\nMandy was close to my age, somewhere in the indecipherable mid-twenties. She had pale brown hair with blond streaks in it that fell straight past her shoulders. She wore simple makeup on a naturally wholesome, pretty face. Innocent looking -- I wouldn't have guessed her the type to be up for sport like this.\n\nShe was shorter than me, though lots of girls are being that I'm five foot eight. I would place her at five foot three or four and while she was lithe, I wouldn't have quite called her petite. Lovely, plump enough to be soft, while still slim enough to wear hip huggers to show off a captured bead ring in her navel. She had handful-sized breasts, unrestrained, pressing forth soft nipples into the fabric of her chopped off T-shirt. Very cute, overall.\n\nI felt Erik's hand squeezing my butt to remind me that, while not as utterly adorable as Mandy, I was not lacking in attractions. Tall and built, muscled and well able to climb up my six foot five inch boyfriend, I have wide hips and long legs and flexibility from yoga. My hair is a pale strawberry blond that they can't even make a dye for. It's the most feminine part of me excepting my breasts. They, according to Erik, just begged for lavish attentions. He sucked on the large pale nipples, kneaded the flesh that overflowed even his large hands, bit, marked, laced and clamped my breasts until my juices flowed down my legs whenever possible.\n\nThe three of us sat down to chat a bit before we began, Mandy and myself on the sofa and Erik in the opposite chair, watching. \n\n\"Mandy, what exactly did Erik tell you?\" Well, blunt, but I had to know.\n\nShe smiled soft, friendly. \"He told me you had a fantasy about being with a girl. He thought I would suit for type and...\" She faltered.\n\nErik stepped in. \"Mandy and I have known each other since freshman year at college. We've had some partners in common before. She was a friend of one of my ex-girlfriends. Mandy was invited to play with us a time or two. Eventually that girl and I broke it off, but Mandy and I kept in touch.\"\n\n\"Just friends, mind you. I've more same-sex oriented with an open mind towards males joining in. Makes me very desirable as a third. And I enjoy it, as well.\"\n\n\"But tonight, I didn't ask her here for a threesome. I just ask that I watch.\" He had a wicked glitter in his eye and I shivered. For me. She was for me to play with. I looked again at Mandy, who seemed closer than she had been. Was she shifting closer, or was I?\n\n\"Never say I'm one to waste an opportunity.\" Still, it was hard to know where to begin. Silence followed, a bit awkward.\n\n\"I'd like to see you dance together,\" Erik whispered, as if he was afraid we'd say no. I held out my hand to her, feeling easy with Erik in charge. She took it, her fingers soft and slim in my firm ones. Since I was taller, her arms came up around my neck and mine went around her waist like a guy's. Mandy's head came to rest on my shoulder, her breath warmly caressing my neck. I fought the urge to sweep up one hand and fondle the breasts that pressed against my body just below my own. We swayed together for a while. Once I glanced back at Erik and he rubbed the obvious bulge in his Dockers appreciatively. I smiled and nuzzled my face down into her neck. She smelled faintly of jasmine body spray.\n\nMandy's hands slid over my shoulders and lightly, caressing, down my arms. I tightened my arms a little, pulling her close again and looked into her face. She smiled and tilted up her chin a bit. A bit awkwardly, even nervously, I leaned in for the first time to kiss a girl.\n\nOur lips touched, her breath cool on my lips and faintly minty. It wasn't much different than kissing a guy but so much softer. No stubble or chapped lips. Just fine, soft, full lips caressing mine. Very nice, I thought.\n\nMandy ran her tongue across my lips first. My mouth opened and our tongues touched with more than a spark of interest. Our kissing had all the excitement of kissing a new lover for the first time but with an added hint of (at least for me) taboo-thrill.\n\nMy left hand (nearest to Erik) slipped up to fondle one of those lovely, firm breasts (mine being two cups larger, sat heavier than hers so I could rightly admire them). Instead of an over-the shirt squeeze, though, my thumb slipped up inside her short shirt and found her bare nipple while the rest of my fingers caressed the rather exquisite globe through cotton jersey. I felt the nipple contract into a tight raspberry as I circled my thumb around it. So this is what Erik feels when his hands cover my breasts. This is how thrilling it feels. Making Erik's nipples contract was similar but there wasn't as much soft tension in the flesh surrounding his hard little beads, just flat disks of pale brown flesh that wrinkled over his pecs. I'd not realized breasts could feel so singular until I'd felt someone else's.\n\nShe moaned when I moved my lips from hers to take the nipple into my mouth. I caught Erik's lazy grin out of the corner of my eye as I lifted the edge of her shirt, baring the pale pink peaks of her breasts. A quick flick of my tongue and a cool whisper of breath hardened the other nipple into a tantalizing berry before I set to work exploring and playing with the first.\n\n\"I like this,\" I breathed, running my hand down her stomach, stopping to finger the belly button ring.\n\n\"I like this too, Elise,\" Mandy said, deliberately misunderstanding that I meant the piercing. \"You're a very sexy girl. I already want to do this again.\" And her hands began to unfasten my shirt buttons. \n\nMandy let my shirt drape open, framing my pale skin with the black fabric. She ran one finger lightly down from my collarbone to the cleavage created by my emerald green bra. Just that move, coupled with the hungry look in her eyes, made my breath catch.\n\nErik came to stand near us and slipped my shirt down and off. I heard his breath hasten as he barely touched my skin, as if he suddenly found me all the more sexy at this moment; he couldn't believe his luck. Mandy stripped off her shirt and shook out her long hair in one movement, but when I reached back to unfasten my bra, she stopped me. Her arms came around my waist, so different from a man's. They were cool and smooth, not hot and hard and muscled. Her expert fingers plucked open the hooks on my bra and pulled it off with her lips and teeth. Erik took this as well, and then moved back a bit. \n\nMandy began to explore my breasts with her hands, one on each. One nipple she squeezed, the other she flicked with her thumb as she weighed my breast in her palm. She leaned in, nuzzling between my breasts, her hair tickling my nipples, taking in a breath of my perfume. Her hands slipped down my sides, unzipping my dress pants as she began to nip and suck at my breasts. My nipples stayed hard until she finally moved her mouth to them, the curves of my generous breasts covered in little pink love bites. \n\nI kicked off my shoes and let my pants slide down over my hips and slip to the floor. All I was left in was green lace panties and garter-less thigh-high nylons. Mandy moved back to appreciate the picture for a moment before returning to my breasts, pulling one nipple in wide-open-mouthed, suckling it with her tongue pressing it against the roof of her mouth like a baby. After she let it slip from her lips, pulling back and sucking rather firmly until it popped from her mouth, the nipple was dark red and the aureole was a deep pink. As she repeated the process, I tangled my fingers in her long hair. Her ministrations drove pulses straight between my legs until I squirmed a bit to try and press my legs together. I gasped this time when she bit the nipple hard before letting it from her grasp. She smirked at my reaction, calmly slipping her hand down over my hip. \n\nBefore she could snag down my panties, I knelt down in front of her and undid the button and zipper of her jeans. I licked around her belly button and played with the ring with my tongue and I pushed the jeans off her hips. I nuzzled her belly and felt the fuzz of pubic hair beneath my chin, not panties. \n\n\"Oh, you're naughtier than you appear.\" We disposed of her sandals and jeans but I didn't sit back to admire her nudity. Something drove me to taste her, to know the taste of a woman in a way totally different from kissing Erik after oral sex. I licked the creases where her legs joined her body, following them down to the line of hair but stopping before I touched it. I nipped at the soft flesh of her thighs where they came close together. I buried my nose in the closely trimmed dark blond hair and licked the very edge of the hidden slit. I felt her shiver and she pulled away. \n\n\"I think we'd be more comfortable in the bedroom.\" \n\n\"Yes, definitely.\" That was Erik. He was down to his boxers. His hard cock had found its way through the slit and was bobbing in fresh air. We went in a line to the next room, Erik's fingers snapping the top elastic of my panties. He'd managed to get them to my knees by the time we made it the seven steps into the other room. \n\nI kicked the panties off, baring my shaved pussy, then guided Mandy to sit on the edge of the king-sized bed. I put one leg up on the bed beside her and without instruction, she slipped down the nylon, stroking my thigh, my calf, kissing my knee. I switched legs, only this time my leg crossed her lap, my groin much closer to her face. She scooted forward a bit, placing a tender bite on my inner thigh. The nylon slipped off but before her tongue could do more than lap up the slightest trace of excitement from my swollen, bare lips, I moved away and gestured her back farther on the bed, to lie down. She smiled and complied, her knees parted and lifted and ready for me. I dove forward, barely noticing Erik lying beside us to watch closely, stroking his cock with a lubed hand. \n\nMy tongue wasted no time parting Mandy's lightly furred lips. I delved into the slit in front of me as if she tasted of chocolate. Nibbled the lips, sucked them, stroked my tongue between them to just brush teasingly against her hidden clit. I couldn't lap up enough of her musky juices. I could taste her moans and gasps. I liked especially hearing the little pleading whimper as I touched her clit so lightly with my tongue a second time, a third time.\n\nNever having seen a clitoris so up close -- only mine in a mirror -- I examined it and lavished attention on it. I knew how tantalizing the first sweet touches felt when I was excited and loved making Mandy writhe as she felt the same pleasures. It was so lovely, the pink hood hiding its bundle of nerves that swelled and tried to push their way out. The two inner lips, so tiny, private in comparison to the outer labia, flanked the opening pooled with juices. I dove in that pool, tasting, my head swimming with desire.\n\nI fucked her with my tongue, feeling ridges and texture to the tunnel walls that pulsed and squeezed. My upper lip still pressed against the sweet clit, softening the pressure of my teeth, rubbing as, mouth wide open, my tongue invaded her time after time. Swirling my finger between my pussy lips, careful to only collect lubrication and not touch my clit, I gently probed her vulnerable and unexplored anus with a slick finger.\n\nMandy cried out, \"Oh, God, yes!\" as my finger entered her ass to the second knuckle. Dizzy with accomplishment and exertion, I felt her tense, her thighs tight around my head, my tongue tight to her clit as she grabbed my hair and bowed up, nearly sitting. More juices flowed out of her, drenching my lips, flooding down over my finger in her ass and making it slick for me to fuck her with my finger. The heady scent of her was all I knew at that moment.\n\nWith a little moan, she relaxed, fell back to the bed to let the pulsing surge through her body. Her grip on me with her thighs eased and she shifted up and away an inch.\n\n\"That is the sexiest thing I've ever had the pleasure of seeing.\" I rested my head on one splayed thigh and looked at Erik. He rolled to his back beside us, cum splashed liberally over his chest. After we both rested a minute -- Mandy's eyes were still closed -- Erik got up and cleaned himself off with a wet washcloth. Then he slapped my ass with a sharp crack and told me I wasn't done yet.\n\n\"Stand up, Elise.\" He knelt down in front of me, the harness in his hands. \n\n\"Elise, turn around.\" This was Mandy. Now she knelt on the floor in front of me and Erik behind. As Erik started strapping and fitting the leather, Mandy began to lap at my pussy. Looking down, the sight of her head between my thighs weakened my knees more than the explosions of pleasure in my pussy.\n\nMandy had to move while Erik tested the straps that would secure the dildo inside of me. It ran from the O-ring that would hold the dildo, down between my legs and up through my ass crack. I suspected he'd tighten it that little extra and parted my legs for it. Once he was convinced the fit was just perfect, he handed Mandy the dildo and unbuckled the strap. Her fingers slid into me instead. I put my hands on her shoulders to balance my wavering self. I'm sure she found me more than satisfactorily wet; if she'd touched my clit, I'd have come that second.\n\nWhile Mandy slipped the main length of the dildo through the O-ring held by three straps at the front of the harness, Erik licked at me from the back. His tongue teased my pussy's opening, swept back along and into my anus. He nibbled at my butt cheeks and helped Mandy insert the short egg-shaped end of the dildo into my channel. The third strap was soon secured and what might have been uncomfortable rubbed all the right places.\n\nMy new erection bobbed and swayed as I took a couple of steps to model it for them. It pressed and rubbed inside and outside at the same time. Erik fell back with a low groan and I noticed his cock sticking straight up again.\n\nMandy walked forward on her knees. Her fingers dug into my buttocks, brushing against the straps. Her lips and tongue found all the little nooks the straps didn't cover. She even licked the purple silicone until it gleamed with saliva.\n\n'She's giving me head,' I thought, and each movement of her lips on my purple cock moved the shaft inside me, sending sparks of pleasure through me.\n\nShe stood and I kissed her lips again while pushing her back to the bed. We stripped all the covers off and onto the floor and lay together on the cool sheets. I tongued her mouth like I was fucking her and her hands roamed over my flushed skin. She grasped the dildo and pulled it until it rubbed my clit just right. I made her stop, though. I couldn't wait to sink this cock into her. The very thought made me mad with lust. I pushed her on her back and thrust my knee between her legs. Mandy obliged me, spreading her legs, cradling my hips between her thighs. Even more than the feeling of that ribbed silicone rubbing my clit with every motion, the sensation of being held between her thighs, my breasts dangling down against hers, her hands around my waist urging me to fuck her, brought me over the edge and I cried out. I shuddered and nearly fell on top of her. She crooned softly and held me and as the intense swell lessened, I kissed her.\n\nThe bonus of not being male hit me and I lifted myself to see where to put this lovely cock I'd been gifted with. She was still gloriously wet, but I nudged the head of the dildo in slowly, luxuriating in the utter magnificence of it. I watched between our bellies as it slid into that luscious pink canal, stretching the lips apart with the width of the dildo. When I masturbated, I always loved using a mirror to see my makeshift dildos enter me, fuck me. I enjoyed it no less now, watching my new erection enter Mandy.\n\nThe dildo end inside me rubbed a bit as I slowly slid the length inside Mandy's slick, soft pussy. When the tip reached the end of the tunnel, the ridges against my clitoris let me know. I pulled back -- the process reversed, first the firm rub as the dildo caught in the harness then began to pull out of Mandy's pink folds, then the more gentle bumps and jostles as her heart beat, thighs clenched, and any other minute movement wiggled the silicone that connected us so intimately.\n\nI repeated the process, enjoying the feel, examining the minute details of where the dildo was rubbing her precisely, which angle worked. I shifted a bit, adjusted my thrust, then told her all the dirty little ideas streaking through my head.\n\n\"I'd love to fuck you doggy style after this. I want to see that pretty ass before me, slap up against it.\" I reached down with one hand and squeezed a fleshy cheek. \"Or should I make you ride me? Your breasts would bounce so nice.\" I shifted my hand. Mandy moaned as I twisted one nipple. My hips' steady movements quickened. The lovely sounds of fucking -- the squeak of the bed, the wet squelch of cock and pussy, rough breathing, (Erik's breathy 'oh god's next to us), filled the room.",
        "I slowed my movements, being deliberate again, then slid my knees up under her thighs, kneeling, legs spread and resumed my rocking motion. Nice position to watch the dildo fuck her, very nice. The position also opened my pussy wide and the dildo rocked inside me. Wetness dripped from me, made the leather slip and rub in the crease of my ass. The silicone itself was so drenched with my juices that it would have long since slipped right out of me if not for the tight harness.\n\n\"I love watching it disappear inside you. God, Mandy, you have a hot pussy.\" I stroked her clit as I slid in and out and in again. But a new urge overtook me and I slid my hands over her spread thighs, over her knees (tickling the backs of them momentarily), down her calves until I grasped her ankles. Pausing, I repositioned her legs over my shoulders and leaned forward again until I could nearly lick Mandy's lips. The position was awkward for a few thrusts but with Erik's hand on my ass, I got the angle right and quickened the pace again.\n\n\"Faster, fuck me faster!\" Mandy's one hand clutched the sheets, the other above her head bracing against the headboard. I began to pound down into her upturned pussy, echoing the cries from her mouth. The dildo rubbed inside me, tormented me. I could feel the passion a man felt, the lust, the driving need to fuck as I pushed her and myself towards climax again.\n\n\"Fucking you is so good. Oh god, I love to fuck you. I want to lick your pussy when you come, lick you clean, make you come again. I wanna fist your pussy so I can feel inside you, feel you tight around me. I wanna fuck your tight little ass, too..\" and on until I heard Erik practically crying for me to climax, for us to come, that his dick couldn't take it.\n\nI slipped a finger down and touched Mandy's clit, slipped my finger in the juices, rubbing. My thrusts, though, became short and quick as I struggled not to lose focus on her as I fucked myself to climax. I lost the battle, shuddering and gasping, a wordless cry. Mandy was brought by my fingers on her clit more than the thrusts, but I felt her come against my fingers, her clit and surrounding pink tissue convulsing as she screamed out.\n\nWatching her flushed face relax, letting her limbs drop, feeling my own arms and legs tremble from the unaccustomed strain -- I felt enthralled again. My pussy was sated for now, but I still wanted to lick her clean. Mandy moaned softly as I dropped between her legs and started licking at her lust-coated lips. She whimpered when my tongue touched her over-sensitive clit, so I left it alone and just soothed the rest of her pussy with gentle licks. I had to rest to let my heartbeat return to normal, to let the shivers in my arms and legs cease. \n\nI moved back up her body to lie beside her, between her and Erik's hot, cum-spattered body. He was mumbling to himself. I kissed him with Mandy's taste still strong on my mouth and he groaned and pushed me away. \n\n\"If I get hard again, I'll rub myself raw.\"\n\nI grinned at him while I unbuckled the dildo harness so I could lay down more comfortably. Mandy snuggled up close to me and I pressed up against Erik on the other side. She and I kissed each other, lazily exploring with tongues and fingers. \n\n\"Can we get together again sometime?\"\n\n\"Oh, yes, Elise.\" Mandy tucked some of my hair behind one ear. \"I told you when we started that I already wanted to do this again. You can fuck me anytime. Perhaps we can try some of my ideas, too.\"\n\n\"What ideas do you have?\"\n\nShe told me lots of stories in sexy whispers, one having to do with the dildo in my ass, Erik in my pussy, one with the both of us ass to ass with a regular double ended dildo, one with Erik's cock straight in my pussy while she sat on his face.\n\nI heard him groan behind me on this last one. The leaning tower between his legs proved he'd been eavesdropping.\n\n\"Perhaps we should try one of those ideas out right now.\""
    ],
    "authorname": "kelouisa",
    "tags": [
        "female bisexual",
        "dildo",
        "voyeurism",
        "cunnilingus",
        "brunette",
        "redhead",
        "ffm",
        "strap-on",
        "lesbian first time",
        "oral"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/anniversary-gift-10"
}
{
    "title": "Any Chance We Could Ch. 34",
    "pages": [
        "This chapter is not meant to stand alone. Please begin at the first chapter to appreciate this tale.\n\nSaturday, October 27\n\nHazel awakened at 4:30. She took off her heels leaving the hose on and pulled the blanket back over them both. I feel alive she thought and as she tried to get back to sleep she replayed what she felt by letting her sexuality flow more freely as Evie'd encouraged. She recalled various statements from the Reverend and confirmed that Evie was right as tonight and last night were powerful sexual moments. She wondered where it could all go if she really let herself be free to follow her repressed desires and her remaining conflicts. What would be the effect on Emerson, will he still love and respect me if I act like a slut sometimes? I said a lot of things in the heat of passion and know what, I still feel they were my true feelings. I'd really like to enjoy lots of sexual interaction with our long term friend Scott and his houseful of beautiful women. For Emerson to make love to our daughter might be a defining moment in my sexual awakening. I'll call her, no I need to see her face when I talk to her. I'll call her and go over there. I guess I can't call her now, but first thing. I wonder if Emerson would enjoy me in hose like Scott enjoys his women. I think he would from the conversation Thursday night. I'll do it, I'll do it to please him, I'll do anything to please him, I'm sure that's in the Bible. I'm sure that he'd return the attention and care.\n\nWhen she awoke again there was bright sunlight shining in their window and she felt Emerson's hand caressing her nylon clad leg that was across his thighs, she said \"I love you, Emerson and I'm going to live to please you and hope you want to please me as well. I'm sure that's in the Bible and you'll return the attention and care.\n\nI feel more than a little enmity towards the aunt and minister who mentored me in my youth. They were wicked, dried up, old, vengeful people. I'm so lucky that you chose me to be your wife and I'm going to spend the rest of my life making up to you for the last twenty years of you being denied by me. I want our sexuality raised to whatever heights you desire.\n\nLast night I awoke at four thirty and went over what I'd said in my passion. I wondered if it were only the passion and that I said a lot of things that I thought I might regret in the sunlight. But you know what, I don't, so here goes a daylight affirmation.\n\nI want you and Kim to have a full sexual relationship if you both desire one. I still want to be there when you do, but I don't have to be. If you have the opportunity to enjoy Veronica's body or any of Scott's women, take it. Again I'd like to be there to enjoy it with you, but I don't have to be. I'd like to hear about it though if I don't happen to be there. I'm not comfortable enough to let you fuck another woman just yet, nor am I ready to be fucked by another man. You may eat another woman and I'll let another man eat me. If a woman wants to blow you, enjoy , again I'd like to be there to learn. I'm willing to let another man pleasure me short of penetration with his cock, if you're willing to let me. If you and Kim do have sex, I'll learn how to blow you. I've never had a cock in my mouth, but I'm willing to give it a go. I love you so much, so very, very much and feel so much happier and content. How do you feel, my love?\"\n\n\"Hazel, I've always been happy, ecstatic in fact, that you allowed me to be your husband, and yes I agree that our sex life has been the pits for a number of years. Perhaps, like Scott, I took out my passion in my work. I've never been unfaithful to you, never. Veronica and her open sexuality really appeals to me. I'm glad that it does to you as well. Let's pee, shower and eat some breakfast and continue this conversation. We have so much to talk about but my bladder will explode if I don't empty it.\"\n\nThey showered together, a new event in their relationship and each enjoyed the others ministrations of cleansing and touching. As they dried each other, Hazel asked, \"I want to dress for your fetishes and desires, will you tell me what's suitable. If I don't have it, I get it before dinner tonight.\"\n\n\"I don't think you realize it Precious, but you have an incredible body. Full rounded breasts, an ass to die for, and incredible legs. High heels make your ass even more delectable and help tone your legs. You have a gorgeous back and your longer hair is becoming. Could I shave your pussy? I'd like to see your slit in all it's splendor. If you don't like it, it'll grow back. Wear stockings whenever you feel they're appropriate, or from the time you get up until the time you go to bed. It doesn't make a lot of difference what kind, pantyhose under shorts would probably work, garter hose or thigh highs under skirts. Let's go eat breakfast nude. Well not completely nude, would you wear a pair of three inch heel pumps?\"\n\n\"You haven't asked much of me darling, yes, whatever excites you,\" replied a radiant Hazel.\n\nEmerson had gotten the coffee started as Hazel was drying her hair and she came into the kitchen, nude in pumps. She twirled around in front of him and asked, \"Like?\"\n\n\"Look at me, my dick's straight out and it's not because of something I read in the morning paper.\n\n\"It's not a dick, it's your cock. It's your love tool. Veronica taught me the difference between cocks and dicks. Kids and insecure men have dick's. Real men like you and Scott have cocks,\"\n\nHazel walked to him, spread her legs slightly and captured his cock between her thighs and against her labia. \"You couldn't do that with a 'dick', but you can with a 'cock'. Ask Veronica or any of the girls, they've all played with Scott's cock.\"\n\nAfter breakfast and putting the dishes in the dishwasher Hazel sat on Emerson's lap and while he fondled her breasts she called their daughter. \"Morning, Kim, it's Mom. ... Did I wake you? ...Just up huh, stay out late last night?... Can I come by, I've something I want to talk to you about? ... No nothing bad, something special. ... Can I put up anything from BreadCo for you on the way over? ... Sure, and two coffees. ... Half an hour? ... See you, love you, Hi to Gwen. ... Bye.\"\n\nThey went into the bedroom and Emerson sat on the bed as Hazel dressed in her pearl g-string and a sheer white bra. She pulled on a pair of light tan VS pantyhose explaining to Emerson that she'd change to garter hose when she got back home She pulled on a new short khaki skirt that stopped mid-thigh, a light crimson colored sweater top and put on a pair of two and a half inch red slides. After brushing her hair and applying lipstick she asked Emerson, \"How do I look?\"\n\nHis response was \"Good enough to eat.\"\n\nHazel replied with a grin and a shake of her hair, \"Then you shall as soon as I get back. Wanna shave me this afternoon?\"\n\nHis cock was almost straight up in the air when Hazel wrapped her hand around it and stroked him a few times, kissing him and saying, \"Don't lose that thought, be back by noon I suspect.\"\n\nAfter picking up the bagels and coffee Hazel mentally rehearsed what she was going to say to Kim, it had to be a bit more subtle than \"Wanna fuck your Dad?\"\n\nGwen greeted her at the door and with an apprehensive look on her face invited Hazel in and at the same time casting an admiring glance over Hazel's new persona. Last night's dress was revealing, but now Hazel looked subtly but ever so sexy. Hazel lightly kissed Gwen's lips. Gwen involuntarily licked her lips as Hazel handed her a coffee and walked past her to the kitchen where she saw Kim sitting on a stool.\n\n\"Hi, Mom, what brings you out this morning?\" asked Kim a bit warily.\n\n\"I didn't get a chance to talk much with you last night and I guess you were in the lounge when we left. Did you enjoy your Dad's hand on your thigh? A sexy thigh I might add. I wonder if he enjoyed it more than Scott? Would you like him, Dad, to touch you again? Think he might like to? Would you like to take it further?\" asked Hazel.\n\n\"This doesn't seem like the third degree, but what're you getting at Mom?\" asked Kim.\n\n\"Oh, shit, so much for subtle. Would you like to sleep with your father? If you do, I approve and I know he wants to. There I said it, now the ball's, so to speak, in your court,\" grinned Hazel.\n\nKim gulped and asked, \"How in the world did my sleeping with Dad come up and why do you approve? You fought my living arrangements with Gwen from the very beginning, now it's okay to do Dad? What's with you?\" asked Kim with a furrowed brow.\n\n\"I guess that wasn't too slick either, was it?\" asked a concerned Hazel\n\n\"No, it wasn't. I get the point but why?\" continued Kim.\n\n\"Last week, ... Wednesday, I had a four hour meeting with the minister who's going to marry Scott and Veronica. It was arranged by Veronica and was the culmination of many conversations I've recently had with her, ... Veronica. I've been vexed with anti-sex demons it seems all my life. My bitch aunt, and my worthless minister interpreted the Bible as one where God's gonna getcha. Evie, the minister, sat with me and we looked at the oft quoted Bible verses that they used and they said no such thing. She counseled me to cast them off, and become the kind of woman I wanted to be. A loving wife and mother, sexually as free as Veronica. To please my husband, to please you and gain pleasure in the process. I know you don't want to hear about my sex life, but I now have one. I enjoy sex, I love it, I love Emerson. Last night Veronica let him feel and kiss her tits. Am I concerned? No, I'd love for Scott to return the favor,\" Hazel stopped for a breath.\n\n\"How did my sleeping with my father come up?\" she said glancing at Gwen recalling last night's conversation. \"Did someone tell you?\"\n\n\"Yes, your father did. When I asked him if he enjoyed your bare thigh he said he had and explained that you encouraged him by pushing up your skirt with his hand. So, are you interested? If you are, as I said a few minutes ago, you have my blessing. I'd like to be there if you bed one another, but I don't have to be,\" smiled Hazel.\n\n\"Wow, I think I'd like too. Scott kinda brought that out in me when were discussing him sleeping with his daughters. Remember the time I went over with you and they weren't there? As I left I asked if I could call him?\" asked Kim smiling. \"Well I later had a conversation with Katrina and while Scott and I were on the phone he had his hand in her bra and she blew him. A few days later Gwen and I went to their house for dinner and had amazing sex with Veronica and both girls, really amazing. During that phone call Scott propositioned me and with Gwen's approval I spent the night in their bed. That was the first time I went to the club with you and left in such a hurry. I didn't get home until after noon on Saturday. He was, is an amazing lover, totally focused on the woman he's loving. So, yes, I'd like to fuck Dad, put simply, and I'm glad you don't have any objections,\" finished Kim taking a breath. Gwen had come up behind Kim and put both her hands on Kim's shoulders.\n\n\"Scott was the second man I've had sex with, the first one was a kid in high school who came all over my pubes so maybe he doesn't count. Gwen is going to make him her first man. Heard enough about my sex life yet? \"asked Kim.\n\n\"Kim, I do love you and so does your father. We both love Gwen for loving you,\" said Hazel as she embraced and kissed Kim.\n\n\"Thanks, mom. I meant it last night when I said you looked sexy. You do right now. You've pretty legs and nice tits, I guess that's where I got mine?\" As she leaned back from Hazel she pulled her hands under her mother's armpits and lightly grazed Hazel's breasts.\n\n\"Oh, nice. Feel free to do that again anytime, both of you,\"\n\nThe ice having been broken Hazel was invited to stay awhile. During the conversation Kim asked if the high heels were new, she'd never seen her in high heels growing up. Had rarely seen her in skirts or hose until recently. She again complimented her on her 'new' look. Gwen stood to get a glass of juice and asked Hazel if she wanted one. Hazel accepted the offer and Gwen set full glasses in front of both Kim and Hazel and put hers on the counter before standing behind Hazel. She put both hands on her shoulders and kissed the top of Hazel's head. \"Thank you for accepting us,\" she said.\n\nThen she slid her hands down the front of Hazel's sweater and cupping her breasts and lightly squeezed them. They said simultaneously, \"Umm, feels nice\" and Hazel leaned back against her. Gwen continued for a few minutes before withdrawing her hands and sat down. Kim was beaming by the time Gwen sat.\n\nThey chatted for another hour before Hazel said she needed to be going, had some shopping to do. As Kim and Hazel kissed, Kim put her hands against her mother's breasts and said \"I agree with Gwen, they're nice. I'll bet uncovered they're nicer. And I'd like you to be there when Dad and I make love.\"\n\n\"You two work out the details, I'll be topless for you. Gwen too, if you wish.\" responded Hazel before kissing Gwen. Hazel floated out to her car and Kim and Gwen embraced, deeply and meaningfully kissing as the door closed.\n\n##\n\nMary Claire dressed in one of her new maid uniforms, a rather modest number wearing semi-sheer black leggings that ended in a lace hem above her ankles and three inch black suede pumps greeted Dave at the door. \"Halloween costume, just being sexy, or?\" he asked.\n\n\"I'm the new maid, and you are?\" she asked under her eyebrows.\n\n\"Well, I'm 'hard Dave', I was just 'Dave' before you answered the door,\" he laughed. \"Call me when you wear garter stockings with that and I'll come right over,\" he said\n\n\"Oh, my, now that's an incentive,\" she replied. As her eyes looked him up and down, \"I'll be sure to let you know.\"\n\n\"I'll bet my oldest daughter Joy would like one of those 'uniforms' to wear for her husband and other special occasions. Where'd you get it?\" he remarked\n\n\"Veronica, my mistress bought it for me, ask her,\" she replied.\n\nDave thought I'll bet Evie'd like to see Corinne in something like that as much as I would. I'll have to mention it to her next Thursday.\n\nWith revised blueprints under his arm and with a broad grin on his face Dave walked into the dining room and found Alyssa spreading some of her work notes and sample books on the diningroom table. \"I hope these don't mar the surface,\" she remarked gently setting down two of the bulkier sample books.\n\nVeronica replied, \"Don't worry about it, we're replacing it with an antique dining room set I bought in Carmel.\" Reaching into her purse she beamed with pride as she started to lay out the pictures, \"Here are four pictures.\"\n\n\"Wow, what a gorgeous set. The details in the woodwork and the inlay look to be exquisite. The hutch is stunning.\" Alyssa was clearly impressed. \"Do you know its history?\"\n\n\"It was made in New England somewhere between 1830 and 1850. Apparently the set arrived in California from Boston in 1851 to adorn the home of a man who struck it rich in the gold rush. The set was later bought by a railroad tycoon and was handed down from one generation to another. The dealer bought it in an estate sale when the tycoon's great grand-daughter passed away. The moment I saw it, I fell in love with it.\"\n\n\"It's beautiful. Can I borrow a picture so I can make adjustments to the d\u00e9cor of the dining room?\"\n\nVeronica passed her two pictures noting, \"They'll be shipping the set after we return from our honeymoon. Now on to other matters, do you have some things to show me?\"\n\nAlyssa opened a sample book and began to thumb through some pages to one with a post-it note, as she stopped at the section she'd wanted Veronica to see, Dave remarked, \"If you want to have it shipped this Monday, I have access to a small warehouse where we can store it. We'll move it here before you return.\"\n\nVeronica nodded her head saying, \"How thoughtful, yes I'd like that.\" Then reaching in her purse produced a sheet of paper and gave it to Dave. \"Here's the receipt, I think it has everything you need to know.\"\n\nAs Alyssa was explaining the layout and scheme she was suggesting for the kitchen Veronica leaned over next to her with one hand on the back of Alyssa's chair. The detail she wanted to see was small and her face was right next to Alyssa's, so close that her hair was brushing Alyssa's cheek. Veronica asked a question and when Alyssa turned , her nose lightly brushed Veronica's hair and her lips softly grazed Veronica's cheek.\n\nAlyssa pulled her face back a bit as she turned her shoulders. As she answered the question their faces were less than a half foot apart and the two women focused their eyes on the other's. After Alyssa finished her answer, neither said a word for what seemed to be a few minutes but was only about ten seconds. The breath of each woman was filled with the scent of arousal which clearly communicated their mutual desire.\n\nVeronica noticed the desire but also the hesitation as Alyssa unconsciously wet her lips. Veronica surmised she could be reluctant to take the initiative with a client. Veronica briefly dreamed that if they kissed it would be electric. Veronica sensed that this was not the moment to do anything other than to say and do things to show her level of interest with the hope of their desires being fulfilled another day.\n\nHer eyes widened a bit as she smiled and momentarily touched Alyssa's hand to give her assent. As Alyssa turned back to the book, Veronica with her mouth almost touching Alyssa's ear quietly breathed \"You are a lovely, sensuous woman. Would you like to play sometime?\"\n\n\"Yes. These cabinets come in three solid woods, Cherry, Maple and Oak, and three different veneers. I'd suggest solid Cherry because it ages so well. There are also wheeled servers to match. Would you like a quote on a configuration? I know it'll give you plenty of storage and counter space. When we last talked you asked for granite counter tops and stainless steel appliances and range hood. Is that still your choice?\"\n\n\"Yes, I need sturdy counter tops that will stand abuse again and again. I have a thing for a handful of hard tools,\" said Veronica as she glanced at Dave and me as she slowed down on 'a handful' to make it sound like 'a hand full'. Alyssa followed her eyes, broadly smiled and nodded her head in understanding.\n\nAs Dave and I stood up at the end of the table and began to move out to the deck Alyssa turned to look at Veronica, and said in a low voice,\" Until recently I've never been with a woman, but not because I wasn't interested.\"\n\nVeronica replied in a low voice, \"The girls play as well. Are you interested in them too?\" Then in a normal voice for Dave and me to hear as we walked by, \"Yes I'd like to see a configuration in Cherry and granite. What's the lead time?\" I suspected that like me, Dave had heard every whisper taking place between the two women while we were at the other end of the table.\n\n\"Cool, most definitely. If I enter the order by Wednesday, it'll be installed before you return from your honeymoon,\" replied Alyssa.\n\n\"Let's continue and I'll have Dave prepare a preliminary change order if necessary before you leave today. Would you like to bring the configuration sketch and pricing say at four Tuesday? If you'd like to stay for dinner, you're more than welcome too. I could wear something special for you and after dinner we could enjoy dessert on Bryce Field. You're more than welcome to enjoy the evening and stay the night if you wish. All our beds are very comfortable\n\nKatrina happened to be in the kitchen watching and overhearing the normal voice part of the interchange and with a stirring in her loins knew that her Mom had just propositioned Alyssa. With her classes on Tuesday and Thursday at 1:30, she reminded herself to be home by four -thirty on Tuesday. She also made a mental note to tell Ashley so her lover could be home for the fun too.",
        "As Alyssa's eyes then focused on the two men on the deck, she grinned, \"I must compliment you, Veronica, in your taste in men.\"\n\n\"Scott is a handsome man, a wonderful caring and generous man. He's also a great lover,\" smiled Veronica.\n\n\"I've noticed how you look at Dave. He is a hunk,\" Alyssa nodded.\n\n\"That he is. I wonder what he'd be like between the sheets?\" Veronica replied.\n\n\"He's a fantastic ride,\" Alyssa grinned.\n\n\"Ohhh really,\" laughed Veronica. \"So he cheats on his wife.\"\n\n\"Who said he cheats. I was with both of them last night.\"\n\n\"So when you said you hadn't been with a woman until recently, last night ...?\"\n\n\"It was my first experience,\" Alyssa finished for Veronica. After a pause and with a wide grin she continued, \"All round it was a fantastic experience. You'd like his wife, the two of you seem to be of similar minds.\"\n\nVeronica replied smiling mischievously, \"Of like minds you say. Hmmmm that's interesting.\"\n\n\"Will Scott be included in dessert?\" broadly smiled Alyssa.\n\n\"Be assured that he will,\" Veronica replied.\n\nJust as Dave and I came back inside Mary Claire appeared out of the hallway on the side of the kitchen in her maid uniform with a few changes from an hour or ago. She was now wearing white garter stockings with the entire welt and garter clasp showing below the hem of her very short skirt and she was perched on a pair of black patent four inch high heel pumps. \"Do I get to call you now,\" she asked Dave while batting her eyelashes.\n\n\"Oh, yes you do, Mary Claire,\" said Dave as he paused to drink her in.\n\nAs we got out of her earshot he said to me, \"Don't worry, I don't get involved with the family of an active client. I know she's not legally a member of your family but I think of her as a one just the same. If she calls me after we've closed out this project, I'll take her call. Okay?\"\n\n\"Yes of course, she's a lot of fun.\" I replied.\n\nWe covered a few other points and I did a mental note dump to him. I walked out to his truck with him and as I shook his hand, he said, \"I hope we can see each other socially after this job is done. I think our wives would get along.\"\n\nAlyssa had gathered her books and notes and Katrina was helping her out the door as Dave was headed down the driveway. \"Bye, Alyssa, see you soon?\"\n\n\"Tuesday afternoon, she replied with a broad smile.\n\nKatrina and I walked back into the house with our arms around each other's waists, but by the time we got in the door my hand had slipped to her ass and we slipped into as deep kiss as the door swung shut.\n\nMary Claire left her uniform on as she and Veronica prepared a light lunch and I couldn't help but notice how 'touchy feely' they were with one another. Veronica's hand spent an inordinate amount of time on Mary Claire's barely covered ass. God, I love my life. I thought.\n\n##\n\nHazel stopped at the Walgreens on the way home and purchased an electric razor with trimming attachments. She checked at the pharmacy and picked up Emerson's new prescription for daily Cialis.\n\n##\n\nA few minutes before three o'clock dressed in a pair of low rise sailor pants and a loosely fitted and deeply scooped neck tank top Cheryl arrived with her daughter Beth. I'd not seen her dressed so alluringly. Her top had a lace insert at the neckline and a banded bottom that extended below her waist and hugged her nicely rounded ass. Since the bottom hem of the pants stopped just below mid calf it was apparent she was wearing hose along with sling back black patent flats. And as I stepped back to allow her to be greeted by Veronica, I grinned that her hose were seamed with a Cuban heel.\n\nAs Beth came in behind her I was pleasantly surprised by how she'd filled out since I'd last seen her at a company picnic just before she went to college over three years ago. As she entered the house Beth's gait was more womanly. She looked amazing in the floral shell top and the below the knee full peasant skirt worn with hose and mid-heeled slides.\n\n\"Oh wow. Is this gorgeous sparkling young woman the same awkward teenager? College sure has been good to you, Beth. You must be beating off the boys with a stick,\" I smiled.\n\n\"Why thank you Mr. Appleton,\" Beth glowed.\n\n\"It's Scott,\" I replied. \"And this is Veronica, my fianc\u00e9e.\" No sooner had I introduced Beth to Veronica when there was an excited squeal from Katrina as she ran down the stairs to hug Beth and rush her back up to her room.\n\nAfter watching the two young women dance up the stairs, Veronica invited Cheryl to the kitchen. She still needed to finish up a few things for dinner. Deserted, I quietly moved off to sit on the deck and finish reviewing some specs on the new bedroom and bath that were going to flank southeast side of the pool. Dave had told me that it would have it's own hot water system. And when he'd made a note to boost the capacity of our current system he'd suggested that if a solar system was added to both as well as for the pool that we'd have inexpensive hot water throughout the year. I'd read about solar heaters a few month's back on a business trip and gave him the approval to use his judgment to install other green technologies including solar electric panels and small wind generators.\n\nAfter Cheryl sat on a kitchen stool she crossed her legs. Veronica's practiced eyes noticed that the tightened pant leg revealing a garter clasp bump above mid-thigh. Veronica said to Cheryl, \"You're wearing garter stockings aren't you?\"\n\nCheryl grinned, \"Always do if I'm wearing hose. I hate pantyhose. I love the comfort of stockings. What was the tip off, the clasp bump on my thigh or the Cuban heels?\"\n\n\"Both,\" replied Veronica. \"If you've known Scott for fifteen or so years I guess you know he has a fetish for hose and heels.\"\n\n\"He mentioned it at lunch yesterday when an errant breeze lifted my skirt. And I kinda remember his ex mentioning it and laughing about it and saying she refused to pander to him. It could be another reason she's his ex along with the same-sex affair she had,\" frowned Cheryl. \"Scott was devastated by her having sex with another woman.\"\n\n\"It wasn't Marty having sex with another woman that was the issue,\" Veronica kindly informed her.\n\n\"Oh, that wasn't the rumor around the office,\" answered Cheryl.\n\n\"It has her cheating and other dynamics that destroyed their marriage. Scott doesn't mind his women having sex with a woman,\" Veronica stated.\n\n\"Are saying that you, ah, that you have sex with ... and Scott doesn't ... .\" Cheryl started to ask quietly before Veronica teasingly cut her off and refocused the conversation.\n\n\"Well, I love him for the hose fetish. When me met and had our first date he pointed out how much he liked stockinged legs. Since then we, Ashley, Katrina, Mary Claire and I have worn hose almost all the time. We but them by the case. We like how he enjoys them on us and probably tend to go overboard with teasing him with up-skirts. We love the reactions we all get, and the affection he gives us. I'm confident he wouldn't love us less if we didn't, but he's so much fun to tease and arouse that we're not about to change,\" explained Veronica.\n\n\"Interesting. My husband John, who's going to soon be my ex really didn't seem that interested.\" She paused as the young women rushed through the kitchen and out onto the deck their heels clicking on the hard surface. \"Maybe occasionally he was, but fourteen or fifteen years ago I began wearing them simply for my own comfort and pleasure. Beth has worn them since she was fourteen or fifteen. In fact, she's wearing them now. I brought a skirt along just in case the pants weren't appropriate. Would you mind if I changed and teased him a bit too? I don't have any heels with me, but I think these sling-back flats are appealing, do you?\" asked Cheryl.\n\n\"Cheryl, there are a lot of things about you that are appealing. You're pretty, have a nice personality, cute full ass, and lovely eyes and hair. Please feel free tease him. It'll probably do you good to get the attention of a man, especially Scott, since you won't be his employee of his after Tuesday,\" noted Veronica. \"And yes, I like the flats.\"\n\n\"Goodness, you won't mind. It won't make you jealous or mad at me?\"\n\nVeronica took four steps over to her, leaned down and hugged her before smiling, \"Heavens no. Scott and I have a wonderful, deeply loving and sharing relationship. I'll enjoy it as well.\"\n\n\"So you're saying you're into women too and Scott doesn't ...?\" asked a wide-eyed Cheryl.\n\n\"Yes, all the women in this house seem to be bi. And before you ask, Scott not only doesn't mind ,his male ego isn't threatened when his woman can find satisfaction and pleasure from a female lover. Besides, he often gets to share,\" grinned Veronica.\n\n\"I've never been with another woman. I've heard it can't be compared to being with a man, but have never had the opportunity to 'comparison shop' if you will. What's it like.\"\n\n\"Rather than trying to explain it to you, why don't you come to bed with me, us, sometime?\"\n\n\"Who's us?\" asked Cheryl again wide-eyed.\n\n\"It could just be Scott and I, or maybe one or more of my four daughters, whatever you might desire.\" replied Veronica taking a sip of her chardonnay she'd poured earlier.\n\nBefore replying, Cheryl gulped her remaining chardonnay down. Then in a rising voice asked \"You take Ashley, Katrina, and Mary Claire to bed with you and Scott?\"\n\n\"And Cindy when she's here,\" matter of factly replied Veronica.\n\nAfter mulling the information and pouring a refill of wine, Cheryl asked \"Is it fun? I wonder if Beth would be interested, she's not a virgin anymore. And I'm sure as hell not getting anything from my husband. Scott fucks his own daughter, and your daughter Ashley?\"\n\n\"Not yet, but certainly knows how to otherwise pleasure them and make love to them,\"\n\n\"But he fucks Mary Claire and Cindy and you don't mind, what do you do while he's doing that?\" she gasped.\n\n\"Sometimes I only watch and diddle myself. Sometimes I watch then participate before I make love to my fianc\u00e9,\" simply replied Veronica. \"I don't have a set response, I go with the mood of the moment.\"\n\nIn somewhat of an alarmed voice Cheryl asked, \"You said, 'not yet' about your daughter and his daughter. Does that mean you expect that he will and you're okay with it?\"\n\n\"Yes it'll happen. Both would make love to him right now if they knew I approved,\" smiled Veronica as she raised the glass for another sip.\n\n\"Oh my word,\" gasped Cheryl as she took another large sip.\n\nAfter she finished her small sip, Veronica added, \"Not only will it happen, but I want it to happen and I'll be there. I'm holding them off so it'll happen in a special way at a memorable moment in our lives.\"\n\n\"My God, I would never have imagined. I feel like I've stepped into another world. I feel like I've been missing a lot of pleasure in my life. I'm going to have to think about what you've said.\" Her stuttering and tone indicated that she was shocked.\n\n\"Do you know that one of my greatest desires is to have my hand guide his cock into my daughters while my other hand holds theirs, and to watch their faces when they experience his hard hot cock for the first time.\"\n\n\"Ohh, myyy,\" Cheryl whispered.\n\n\"You realize that I've told you this in confidence, only to be shared with Beth and my family,\" said Veronica. \"Though I don't really know you, I trust you because Scott implicitly trusts you and I'm confident in his judgment.\"\n\n\"Of course, and I can be trusted,\" she said with a tone of pride. Finishing her second glass of wine she breathlessly continued with a gleam in her eyes, \"I think I'll go change into my skirt and then go out on the deck and join the kids and Scott.\" After taking a few steps Cheryl turned to ask, \"What kind of hose are you wearing?\"\n\n\"When you come back I'll show you unless you want to see right now.\"\n\nCheryl responded, \"I'll wait. God this is exciting, I haven't been this aroused in the last five years.\"\n\nA moment later when Cheryl came back in holding her denim skirt Veronica was waiting at the foot of the stairs. She invitingly said before preceding her up to their bedroom, \"I'd like to show you something.\"\n\n\"Wow, what a bed!\" exclaimed Cheryl as they entered the bedroom.\n\n\"We affectionately call it Bryce Field,\" smiled Veronica as she took a seat on the edge of the bed.\n\n\"Should I go into the bathroom?\" hesitantly asked Cheryl.\n\n\"I won't bite, at least not now. Why not change right here?\" grinned Veronica as she stood and hiked up her own skirt to reveal her bare thighs above the lace tops of her thigh highs. \"You know, I think I'll put on garter hose as well, no sense in missing an opportunity to arouse Scott is there?\"\n\n\"What if someone comes up?\" asked Cheryl.\n\n\"Sweetheart, we've spent many a day in just tops, stockings and heels. Sometimes we're even topless. I'm proud of my body,\" stated Veronica as she pirouetted before her new friend.\n\n\"Your girls as well?\" Cheryl was wide-eyed as well.\n\n\"Of course, Scott and I make love every day, usually more than once. And usually with the door open if we do it in here. We've made love in almost every room of this house, including the deck.\"\n\n\"Well, okay,\" sighed Cheryl as she unfastened her pants and pushed them off her hips. As she bent over to pull them over her shoes, Veronica moved behind her to admire her nicely shaped ass split by a red G-string.\n\nGulping, Veronica remarked, \"I hope, God I wish, you'll come to bed with me. I'd like to spend some time enjoying that luscious ass of yours. I love your full ass. Oh ... I hope I'm not too brash.\"\n\n\"God no, I feel wanted for the first time in years. This G-string is soaked.\"\n\nVeronica had to fight the impulse to pull Cheryl to her and kiss her and caress her ass. She walked into the closet and chose a pair of taupe stockings then bent over a drawer of her lingerie chest to retrieve a garter belt knowing full well that Cheryl was eyeing her.\n\nAs she sat and rolled her thigh highs down and pulled on her stockings she watched Cheryl step into her skirt and zip it. It was just below mid-thigh length and did cover the welt of her stockings, but not by much. Cheryl then sat in the chair and watched as Veronica hiked her skirt up to her waist and fastened the garter belt. She pulled her G-string down a bit which made Cheryl gasp.\n\n\"What?\" asked Veronica.\n\n\"You're a natural, natural blonde, how sexy. Beth and I began shaving when she turned fifteen.\"\n\n\"Scott likes us all natural, trimmed a bit for bikinis, but leaving an edge of hair outside our panties is pretty much of a turn-on for him.\"\n\n\"Being shaved'll turn him off?\" asked Cheryl.\n\n\"Hasn't in the past when we've been with bare pussy women,\" grinned Veronica as she threaded the straps of the garter belt under the panties and pulled them back up. \"Besides, variety is nice.\" She pulled on her stockings fastened them , \"Let's go join them, shall we?\"\n\nThey stopped to grab their wine glasses in the kitchen, and Cheryl said, \"Wait a minute, I want to say something to Beth.\" She opened the sliding door a bit and asked Beth to come into the kitchen.\n\n\"Nice look Mom. When did you change?\"\n\n\"A few minutes ago. I just want you to indulge me this afternoon and evening. You father's affairs have left me feeling lonely and needy. Just follow my lead if you want but please don't admonish me. I need this. Okay?\" she earnestly asked Beth.\n\n\"Of course. Which affair? He's been seeing Connie's mom for at least four years, and Alex's mom before that. I thought you knew and were looking the other way. I think he's seeing another lady too. I wondered when you'd break out and begin to think about your own happiness. I had figured Dad's short fuse and jealousy kept you from playing the same game. Did you talk to her Mrs. Bryce?\" remarked Beth.\n\n\"Ah ... yes, and it's Veronica and Scott, please.\"\n\nMother and daughter spent a few minutes hugging one another as they assured each other of their mutual love and understanding. Cheryl confirmed that John was also having an affair with another young woman at his office as well as in Boston. Beth added some information that she knew about her father's affair with Connie's and Alex's mothers. From the look on Cheryl's face I sensed that her love for her husband had more or less died years ago and what had remained was now dead.\n\nI watched Veronica walk towards me as I leaned my butt on the covered edge of the hot tub. As she stood next to me with her arm around my waist as I quietly said, \"I thought Cheryl came in pants. She's got nice legs doesn't she?\"\n\n\"She did, but she changed to the skirt. If you think her legs are nice, you should see her cute full ass,\" whispered Veronica. \"Would you like to share her if I can get her into our bed?\"\n\n\"Wait, let me mull that over,\" I whispered back as Beth and Cheryl walked across the deck. \"After Monday she won't work for me, so have at it. When have I ever turned down a pussy you've brought to bed?\"\n\n\"Just checking,\" my love teasingly asked.\n\nCheryl introduced herself to Mary Claire who had just come downstairs now wearing her usual short skirt and three inch slides with hose. Her top was tight and scooped revealing her abundant cleavage.\n\nAshley and Katrina were sitting at the umbrella table and Beth rejoined them. I don't think Katrina had seen Beth since Marty and I'd separated.\n\nAs Cheryl walked toward Veronica and me it was apparent to her that I was looking at her legs. \"Like 'em, Scott. You seemed to enjoy them in your office Thursday and after the breeze yesterday.\"\n\n\"I do, when and why did you change. I though you came in pants?\" I asked even though I knew the answer.\n\n\"I threw a skirt in the car just in case because you hadn't said what to wear. I noticed that everyone else was in skirts, so I changed. Do you mind?\"\n\n\"Of course he doesn't. You have very sexy, nicely toned legs. I like the seams and the Cuban heel ... a lot,\" responded Veronica. \"Let's go sit for a few minutes before I finish some of the food. Handsome, you can get the fire going. We're going to have steak.\"\n\n\"Cheryl, I want to thank you for the limo last night, it was much appreciated and we enjoyed the trip. Is it on a company card?\" I asked.\n\n\"No, it's on one of John debit cards, let the bastard pay for it,\" she frowned.\n\n\"I can't do that. I'll give you a check Monday, but again thanks for the thought,\" I said as I leaned down and lightly kissed her cheek.\n\nBoth lovely ladies seemed to give a bit of extra wiggle to their asses as they walked to the settee. Before I turned to get going on the charcoal grill, they both sat and while looking at me exaggeratedly crossed their legs and pulled their skirts up a bit to reveal their stocking welts. I grinned and raised my beer bottle in a recognition salute. With the salute Cheryl lifted the hem of her skirt to briefly give me a look at her stocking top and bare thigh.\n\nKatrina was sitting at the table in a position to see what was going on and she quietly told Beth to turn around and look. All four were now focused on the leg show with Beth having the broadest smile. \"God, that's great, she needs to be admired,\" remarked Beth.\n\n\"Mary Claire why don't you go get Dad's camera from the den,\" suggested Ashley.\n\nWith a questioning look Beth asked, \"Do all of you call him Dad?\"\n\n\"No, just me and Katrina. Mary Claire and Cindy still call him Scott. After they're married next month he really will be my Dad. Besides I feel that I've known him all of my life. I love him deeply. \"\n\n\"Did you know him before he started dating your Mom?\" asked Beth.\n\n\"No. I didn't know Katrina either other than just as another softball player. Now we share a bedroom and bed and refer to each other as sisters.\"\n\nBeth asked, \"Sharing a bed, does that mean you two are ... that you two are ... you know?\"",
        "Taking Ashley's hand, Katrina responded, \"Yes, she's the love of my life.\" Ashley and Katrina looked into each other's eyes for a moment. When Ashley nodded, Katrina continued, \"We love each other very much. She's my partner and I'm hers.\"\n\n\"Wow, I'm happy for both of you,\" smiled Beth sincerely.\n\nMary Claire returned with the camera and was attaching the flash as she walked over to me. \"Can I use it,\" she asked.\n\n\"Be my guest sweetheart,\" I grinned as I busied myself loading the charcoal chimney.\n\nAs she squatted and began focusing she said, \"Okay ladies, time for a leg show. Who's going to be the most daring? Cheryl, you and Veronica are included. You too Beth. Legs only, keep your tops on. We'll let Scott's erection be the judge.\"\n\nAt that comment Cheryl blushed a bit and asked Veronica, \"Does this go on often?\"\n\n\"Yes it does. We all enjoy each other and aren't ashamed to show it. Not so much in public but in this house most any form of dress and sexy behavior is accepted and enjoyed,\" replied Veronica as she put her arm across Cheryl's shoulders.\n\n\"Hmm, I like your touch Veronica,\" purred Cheryl as the flash went off.\n\n\"Cindy's coming through the kitchen now. Let's get her in this,\" said Ashley.\n\nAs Cindy came out onto the deck in scrubs, Mary Claire said, \"Lover you're just in time for beautiful, daring legs pictures. Oh, that's Beth Babcock and her mother Cheryl, and I think they're going to participate as well.\" Cindy continued to Veronica, warmly kissed her and shook Cheryl's hand, then came to me and pressed against me kissing me with lots of tongue. She proceeded to kiss Mary Claire before walking over to the table and deeply kissing Ashley and Katrina.\n\n\"Hi, Beth, nice to meet you.\" Instead of shaking her hand Cindy lightly kissed a surprised looking Beth on the lips. \"Now what's up? Leg pictures you said. Tops on or off? If on do I need a bra?\"\n\n\"Go be sexy,\" said Ashley. \"Shortest skirt, tightest top, stockings and heels, winner gets ... what does the winner get Mary Claire?\"\n\n\"Oral gratification by Scott, how's that sound?\"\n\nCheryl remarked, \"Does that mean that only Veronica will win?\"\n\n\"God no, everyone's eligible, even you and Beth,\" replied Mary Claire.\n\nCheryl glanced at Beth who imperceptivity nodded her head and smiled.\n\n\"There are plenty of stockings in my closet, get whatever you need,\" Veronica offered.\n\n\"She'll be back in a few minutes. Drinks anyone while we wait?\" asked Mary Claire. Katrina got up, took requests before she and Mary Claire went into the kitchen.\n\nTen minutes later all three young women came back onto the deck with drinks for everyone. Cindy clearly was in the shortest skirt and in three inch heels. The garter clasps were visible as she walked to the umbrella table. She also had on a sheer top. Her nipples visibly tenting the fabric atop her dark quarter size areolas.\n\n\"Oh, my, she looks yummy,\" whispered Cheryl to Veronica.\n\n\"That she does,\" replied Veronica as she looked adoringly at Cindy.\n\nKatrina asked that she be first as she strode to the lounger. She initially sat on the end with her legs demurely together, then crossed them as she drew her skirt up. She then hiked her skirt up to her waist and straddled the lounger with her legs apart. She asked, \"Does the skirt have to stay on?\"\n\nCheryl who was becoming aroused by Katrina's show muttered, \"No.\"\n\nVeronica turned and looked at Cheryl and asked, \"Are you sure? That means all of us'll probably take 'em off.\"\n\n\"Yes,\" she replied. Then looking at her daughter asked, \"Beth will you?\"\n\n\"This is going to be fun, yes,\" she smiled.\n\nWith that Katrina stood, pushed her skirt down showing her G-string and amazing ass. After kicking the skirt aside and evening up her stocking tops she turned slowly with her hands on her hips to give not only time for Mary Claire to get pictures but to put on a good show for our two guests. As she completed the turn for a second time Katrina put on leg up on the lounger so Mary Claire could get a pussy shot.\n\n\"Who's going to judge this?\" timidly asked Beth.\n\n\"Hmm, good question,\" replied Mary Claire. \"When I'm done we'll go into the den, put them on the big screen. Everyone will have three votes. Does that work?\"\n\nEveryone murmured yes, and Mary Claire said, \"Next.\"\n\nCindy stood and walked toward Veronica and Cheryl. Mary Claire photographed her as she walked across the deck tugging the hem of her skirt up as she approached the settee. Reaching it she put one of her high heeled feet on the cushion between Cheryl and Veronica and slowly worked her skirt up to her waist. After gracefully rotating on her planted toe a bit she slowly unzipped her skirt then while looking into Cheryl's eyes dropped her raised leg allowing her skirt to fall to the deck. As it dropped and she shimmied out of it, Cindy gave Cheryl a bright alluring smile. She gave a wink to Veronica before striking several legs-apart poses with her hands on her breasts then on her ass as she faced away from Mary Claire. Before turning away, Cindy leaned forward and gave a surprised looking Cheryl a tender kiss on her lips and said, \"I hope I'm making you wet.\"\n\nCindy leisurely bent with her ass towards Mary Claire and picked up her skirt. As she walked away I noticed that Cheryl's breathing had become more rapid and her eyes continued to watch her. As Cheryl watched Cindy Veronica whispered something to which she nodded.\n\nAs Ashley stood and pulled up her skirt to adjust her stockings, Veronica pulled Cheryl closer to her and with the crook of her elbow behind Cheryl's neck she slid her fingertips under the neckline of the top.\n\n\"If you're going to touch me let me help,\" offered Cheryl in a low voice to Veronica as she sat up a bit and moved closer to Veronica. \"Oh, that's nice. Get inside my bra, yeah, like that. Umm.\" Cheryl lifted her right leg and put the bottom of her foot on the settee and dropped her left hand to Veronica's lap and began dragging her nails over Veronica's bare thigh.\n\nI tapped Mary Claire on the shoulder and nodded towards Veronica and Cheryl. \"Zoom in on that,\" I told her.\n\nAshley turned to Beth and said, \"Do you want to go with me to get some darker hose, mine are too light for pictures.\"\n\n\"Sure, to a store you mean,\" asked a puzzled Beth.\n\n\"No, Mom's closet. She must have a hundred pair of stockings,\" replied Ashley. \"Mom don't pose until we get back.\"\n\nWhile they were gone Mary Claire stood by my side and we reviewed her work so far. I kept my hand firmly on her ass as she made sure her breast was firmly pressed against me.\n\nVeronica kept her fingers in Cheryl's bra and was obviously moving them on and around her nipple based on Cheryl's smiles and 'oohs' we could all tell that she was enjoying my fianc\u00e9e's touch Just as Ashley and Beth came back on the deck, Cheryl turned her head toward Veronica and they very gently but deeply kissed. Mary Claire was quick enough to get the shot.\n\nAshley sat, kicked off her heels, unfastened and rolled down her nude stockings and replaced them with a dark tan pair that were seamed and had a darker welt top. She stood, stepped into her shoes, pulled her skirt back down and said, \"ready.\"\n\nBeth had started to lift her skirt as soon as Ashley had sat. She likewise kicked her slides off, unfastened her pale cream stockings and began putting on a pair of barely black seamless sandal foot stockings. Mary Claire zoomed and captured the whole process.\n\nAshley dragged her chair further out on the deck and initially sat with her legs crossed then turned sideways in the chair and gradually raised her skirt. She then lifted one high heeled foot to the arm and slowly spread her legs to allow Mary Claire to shoot directly up to her crotch. She stood, unzipped her skirt, turned her back to me and shimmied her skirt down revealing the thin string up the crack of her ass. Bending over enhanced the view as well as tightening her calves. She straightened up put her hands on her hips a slowly turned through a complete circle so no angle of her delightful legs and ass would go unnoticed.\n\nBeth smiled nervously as Ashley dragged her chair back and said \"I guess I'm next. I've never done anything like this before, please don't laugh.\"\n\nBeth was six feet tall in her bare feet so with her two inch slides she was almost as tall as me, easily the tallest woman on the deck. She walked out to the middle of the deck and sat on the edge of the lounger and slowly crossed her legs and raised her skirt to mid thigh, uncrossed her legs and raised the skirt in small increments as she gathered her nerve stopping at tops of her stockings. She then scooted back on the lounger. Gaining confidence turned and lay down with her hair hanging off the low end put her legs together against the back and then let her skirt fall all the way back down her thighs to gather at her crotch. With poise and grace she spread her legs widely apart and looked at us. Her legs were beautiful, nicely toned, she had to be an athlete. She then brought her legs together again and stood and began unfastening her skirt.\n\n\"Besides softball what sports do you play Beth?\" I asked\n\nAs her skirt puddled at her feet she answered with a bright smile, \"In high school I played softball, basketball and ran track, my legs show it, and so does my ass.\" As she turned to show her tight ass with the G-string between her checks, she said over her shoulder, \"At Wash U I play softball, basketball and volleyball.\"\n\nAfter slowly turning completely around she bent her knees and squatted to pickup her skirt and while squatting extended one foot towards us and spread the other one wide. I noticed that she was shaved and wondered if Cheryl was as well.\n\nSo far none of the ladies had put their skirts back on, the day having warmed a bit more than expected. Ashley walked over, hopped up on the hot tub cover and wrapped an arm around my waist. Putting her head on my shoulder smiled, \"Love you, put your hand on my leg please,\" Not being one to turn down any of my children's requests I switched my beer to other hand and complied.\n\n\"Damn, your fingers are cold, move 'em next to my pussy and I'll warm 'em up,\" gasped Ashley. I complied and she squeezed her legs together and contentedly sighed.\n\n\"I have a question,\" said Cheryl. If the winner is going to get pleasured by Scott, to an orgasm I hope, does second place get to do that to Scott?\"\n\n\"I was hoping for several first place winners anyway,\" I said.\n\nMary Claire chimed in, with \"What a good idea. Thanks Cheryl.\"\n\nBeth came over to Ashley and me and leaned back against the hot tub next to Ashley. She asked Ashley, \"If I win will he eat me? I've never done that before, my boyfriend won't even though I've asked him too.\"\n\nBefore Ashley could reply, I chimed in with, \"That's too bad, he doesn't know what he's missing. Ask Veronica how tasty a young pussy can be. I'd love to taste you and pleasure you, win, lose or draw.\"\n\n\"Is he good at that?\" she asked Ashley.\n\n\"Mom, Katrina, Mary Claire, Cindy and I certainly think so. We don't call him super stud for nothing,\" she replied.\n\n\"My turn?\" asked Veronica as she took her hand out of Cheryl's top and stood.\n\n\"Oh, yes,\" said Cheryl with a sigh.\n\n\"Sit all the way back and spread your legs Cheryl,\" instructed Veronica. As Cheryl did Veronica put her foot between Cheryl's lower thighs and gradually began to raise her skirt. As she inched it up Cheryl's eyes were drawn to Veronica's pussy and she involuntarily put her hand under Veronica's leg and lightly touched her bare thigh above the stocking top. \"Touch me with your nails,\" Veronica invited. \"Ohh, shit. Look at the goose bumps,\" she sighed. Mary Claire had shifted to take in the pussy view that Cheryl was enjoying.\n\nVeronica then put her raised leg down, unzipped her skirt and let it drop. \"Touch my ass,\" she said as she bent over with her butt directly in front of Cheryl. Cheryl's hand slowly moved across Veronica's smooth cheeks\n\nAfter about twenty seconds Veronica then stood and slowly turned to face As their eyes focused on the other's she bent towards her and softly but deeply kissed her with her hand caressing Cheryl's breast. As Cheryl was returning the kiss she reached out with both hands and caressed Veronica's bare thighs above the stocking tops.\n\n\"God, that's hot,\" remarked Beth. \"Do you think she'd kiss me like that?\"\n\nAshley smiled, \"Your mother or Veronica?\"\n\n\"Veronica of course.\" A momentary look on her face indicated a new thought had just been planted.\n\n\"Absolutely,\" grinned Ashley.\n\nAfter breaking the kiss with Cheryl ,Veronica with her legs slightly spread slowly turned for Mary Claire's benefit.\n\n\"Mom, come over here for a sec,\" asked Ashley.\n\nVeronica walked toward me slowly and seductively, and stopped in front of me. \"Beth wants you to kiss her,\" I smiled.\n\nVeronica turned towards Beth and with her hands on the tall girl's waist wordlessly pulled her toward her tilted her head up a bit and with an open mouth began a deep tongue kiss with both hands moving to Beth's bare ass. As the kiss continued she moved one hand up to squeeze Beth's left breast. Beth began moaning and after a few moments Veronica broke the kiss and turned Beth around to face her wide-eyed mother. From behind she put a hand on each of Beth's breasts and gently caressed each handful while her mother watched from about eight feet away. As Beth turned her face and kissed Veronica, she pulled back slightly to ask Beth, \"What would you like for desert in bed tonight?\"\n\n\"Oh, God, more with less clothes. Is Scott going to help serve?\" replied Beth.\n\n\"If you wish I'll bet he will. Ask him.\"\n\n\"Will you Scott?\"\n\n\"Of course, I'm hoping your Mother would like some of the same,\" I replied.\n\n\"Yes, yes,\" was Cheryl's response as she stood from the settee. \"Do me now, include Veronica in my pictures.\"\n\nVeronica released Beth who melted into my side and raised her lips to mine. Her arms went around me and mine slid to fondle her ass.\n\nAs I opened my eyes after breaking the kiss, I looked over to see Cheryl standing as Veronica had with her foot between Veronica's legs with Veronica hands all over Cheryl's ass under her skirt. Cheryl really has wonderful legs, I thought. After a few minutes Cheryl dropped her foot and her skirt and as she turned I couldn't help but admire her full rounded ass that was as good on display as Veronica had described. After Cheryl completed two erotic turns, she sat next to Veronica waving her hand in front of her face remarking \"My, my, that was probably the hottest thing I've ever experienced. With you touching me and Scott watching me, I almost came.\"\n\n\"\"I think I can take care of that later,\" sighed Veronica.\n\n\"Don't tease, just say you will,\" pled Cheryl.\n\n\"Oh, don't worry, eat a good dinner, you're going to need your strength,\" grinned Veronica.\n\n\"Katrina will you come in the kitchen and help. Scott start the fire. Ashley take drink orders and Scott do you think it's warm enough to eat out here?\" queried Veronica. Then glancing at everyone else she continued, \"Leave your skirts off if you're comfortable, if not put them back on.\"\n\nBefore asking for drink preferences Ashley turned toward me, put her hand down the front of my shorts and kissed me while fondling my cock. As she broke the kiss and pulled her hand out she asked Beth \"Do you want a glass of wine?\"\n\n\"Sure,\" replied Beth,\" and another kiss from your father, please.\"\n\n<br /> \"I'll get the wine.\" As Ashley turned to gather drink orders I pulled Beth into my arms and kissed her passionately while caressing her ass. After breaking the kiss pulled her back against me and with both hands under her blouse caressed her full pliable breasts through her bra. She ground her ass against my now hard cock and moaned. \"Will we you do me later,\" she asked panting after we broke the kiss.\n\n\"I can only hope,\" I replied grinning.\n\n\"Okay, you've both kissed and groped each other, but only Veronica has kissed me. Can I have a turn?\" asked Cheryl as she approached us.\n\n\"Umm, let me think about that while I start the fire,\" I smiled.\n\n\"My fire's already started,\" she said while wrapping her arms around my neck and with an open mouth began kissing me and grinding her pussy against my erection.\n\nI returned her kisses while our tongues entangled my right hand gently massaging her ass. \"Mom, do you think we can get his cock into us tonight,\" I heard Beth ask.\n\nAfter breaking the kiss, Cheryl responded, \"Let's do our damndest.\"\n\n\"Be careful what you wish for,\" I laughed.\n\n\"Mom, I'm going to leave my skirt off, okay?\" asked Beth.\n\n\"Whatever you wish, you couldn't pay me enough to put mine back on.\"\n\n\"I've got to start the charcoal fire, so we can eat before we eat. So if you don't mind I'm going to do that,\" I said as I leaned over to kiss each lady. Cheryl lightly touched my cock as she returned the kiss.\n\nKatrina remarked to Veronica as they watched my fondling of Cheryl and Beth, \"Two more for his ... our harem. I can't believe how much I enjoy seducing another woman. I can hardly wait to get between Beth's legs, and Cheryl's too for that matter, and taste the sweet fruits of our seductive labors.\"\n\n\"I agree fully on both. I wanna to eat them after handsome has filled them with his cum,\" said Veronica as she absently caressed Katrina ass. \"I'm so happy I met you and Scott. Seduction is such a fun game to play with him, and with you too my sexy daughter.\" Veronica leaned over to give Katrina a short kiss and then smiled at her as they were finishing dinner preparations.\n\nMeanwhile, Beth stood by my side drinking a glass of wine and touching my arm or my back. Just as I proclaimed that the fire was ready handed me another beer. While Beth and I cooked, Ashley and Mary Claire set the table. As the meat was cooking Cindy drifted over and stood talking to us with her arm around Beth's waist. \"Do you have any brothers or sisters?\" Cindy asked.\n\n\"Just a brother, Maxwell. Max. He's eighteen and a real hunk. ... Or that's what my girlfriends tell me. A couple of them have admitted to wanting to jump his bones.\"\n\nAshley walked up just as Beth was speaking and asked, \"Is he really? Have any of your girlfriends gone out with him? Have you seen him naked? Would you go out with him?\"\n\n\"He's my brother. Yes I've seen him naked, we share a bathroom and I'm sure he's seen me completely undressed as well. He has a nice package, a lot nicer than my current boyfriend. None of my friends have gone out with him come to think of it, maybe because he's three or four years younger than them.\"\n\n\"Well, would you go out with him, say if you were going to a performance or something that you had bought the tickets for, and your date called at the last minute saying he'd just broken his ankle. Rather than waste the tickets would you ask him to take you?\"\n\n\"Hmm, perhaps, he is nice looking. Tall too, as tall as you Scott,\" she said turning to me.\n\n\"Would you kiss him, let him put his arm around you, put his fingers in your hair,\" continued Cindy.\n\n\"Eww, I don't know. ... He is good looking. ... Maybe I would perhaps if we were in a situation that turned me on as much as I am now. Though I do though remember just last summer Mom, Max and I were lying around the pool talking and talked about Dad always seeming to be out of town. We were lying on loungers, Mom and I side by side with Max in one perpendicular to our heads lying on his side. It was hot and we were seriously catching rays. Both of us were on our stomachs with our tops untied, when a sprinkler head at the edge of the deck broke and showered us with cold water. We both screamed and sat up, tops forgotten. Max cursed and jumped up as well and ran over to the spraying head, put his foot on it and told me to turn off the main valve at the end of the deck. I had forgotten that I was topless and did as asked. When I walked back up the deck Max was staring at me with a huge tent in the front of his loose trunks. Mom was topless as well watching both of us with her hands on her hips.",
        "\"Max. Have you never seen bare breasts before?' Mom asked.\n\n'Yeah, I have, but never four as gorgeous as yours and Beth's.' he smiled.\n\n'You really think so?' asked Mom. 'Or are you hoping we'll leave our tops off?'\n\n'Yes, I really think so and would you really do that?' he asked.\n\n\"I will if you will,\" Mom playfully said to me. We spent the next hour or so topless in front of Max both hoping that he'd think the wet spot on the crotch of our suit bottoms was from the spray. A week later we noticed him reading on the deck and purposefully took off our tops and joined him wearing just shorts. He was flabbergasted and tented his shorts for the next three hours or so, I guess he beat himself off in his bedroom after we went inside. I haven't been topless in front of him since, nor has Mom to the best of my knowledge, but those were awesome times that I wish could have gone on for a lot longer.\"\n\n\"How exciting, maybe Cindy or Mary Claire would like to go out with him,\" interjected Ashley.\n\n\"Is he a virgin?\" asked Cindy.\n\n\"I don't know. Is that a problem if he is?\" responded Beth.\n\n\"No, this family has a way of dealing with that. So, no,\" responded Ashley.\n\n\"Who's a virgin?'\" asked Mary Claire.\n\n\"Beth's brother, Max,\" I replied.\n\n\"Is he nice? Is he good looking,\" asked Mary Claire looking at Beth.\n\n\"I think he probably is, why?\"\n\n\"Cindy or I could probably make a happy man out of him and have fun in the process,\" responded Mary Claire looking at me. I nodded my head assuring her that if the opportunity arose she could bed him.\n\n\"I don't satisfy you anymore?\" I asked with a faux pout.\n\n\"That's not it at all, you're a very satisfying lover, Scott. I just thought we could spread around what you've done to us, help him be a better lover for his next woman,\" answered Mary Claire, as her hand playfully danced along my arm\n\n\"You've slept with Scott?\" gasped Beth.\n\n\"Yeah, we all have, except that Ashley and Katrina haven't had intercourse with him. Lots and lots of pleasure, but not intercourse.\"\n\n\"Hmm, perhaps, no not perhaps, I'm sure he'd enjoy either, both, you and Cindy,\" replied Beth to Mary Claire. \"I'll give you his cell number before we leave.\"\n\n\"How long until the meat is ready?\" asked Veronica as she walked across the deck unzipping her skirt. I guess she'd put it back on to work in the kitchen.\n\n\"Five minutes, maybe a few more. God you've the sexiest legs I've ever seen,\" I said.\n\n\"Thanks handsome, considering you're surrounded by women half my age in garter belts , stockings and high heels. I truly love you,\" she said as she lightly kissed me. \"Should I continue to encourage Cheryl and Beth to spend the night?\" she whispered in my ear after breaking the kiss.\n\n\"If you do, I'll not complain,\" I whispered back.\n\n\"Consider them encouraged,\" she responded in a normal tone of voice.\n\nWe were sitting around the table finishing our wine when Mary Claire asked if we were ready for the judging to begin. With affirmative nods all around Veronica suggested that all the women change into sheer tops with no bras. I would have to wear some loose sweat shorts. Katrina took Beth by the hand and led all the young ladies to her bedroom and Veronica did likewise with Cheryl. I followed my woman and her new friend up the stairs openly admiring their essentially bare asses.\n\nVeronica began removing her blouse and Cheryl lifted her arms and with her eyes invited me to pull her top up and off. After Veronica removed her bra she stepped closer to Cheryl, said \"Turn\" and unfastened her bra. As Cheryl's bra slid down her arms her magnificent breasts came into view. They were very nicely shaped, probably large B cup with darker erect nipples and areola. Veronica wrapped her arms around Cheryl and kissed her with lots of tongue. In seconds each was caressing the other's back and ass.\n\nAs Veronica broke the kiss she said \"If we don't calm down a bit and get back downstairs handsome is going to fuck us both.\"\n\n\"And that's a problem why?\" grinned Cheryl.\n\n\"Because you both are spending the night in our bed and we can do that later, that's why,\" replied Veronica.\n\n\"If we're spending the night, and I want to, very much, I need to call Max and tell him we won't be home.\"\n\n\"Use the cell on the nightstand and I'll get us some blouses. Change handsome, let Cheryl see what she's getting later,\" instructed Veronica.\n\nCheryl was reaching for the phone while keeping her eye on me and as I pulled down my shorts and boxer briefs my cock sprung out. Cheryl gasped \"Oh my\" and promptly fumbled the phone. Her face flushed as she was picking it up. Veronica came out of the closet holding two filmy blouses and a pair of red satin boxers. She laid the pale blue one on the bed and began to put on the creamy one. Poor Cheryl seemed undecided which one of us to watch so I walked over and stood next to Veronica with my hand on her ass.\n\nIt took Cheryl three tries to dial the number and when Max answered she told him that she and Beth were going to stay here tonight and that they'd be home in the morning. She listened for a minute as he related that he'd be home all evening, his on again off again girlfriend was off again probably permanently this time. He asked what she and Beth were going to do and Cheryl told him that they were going to play some games and just enjoy themselves. He responded with if you need another player I'd like to join in. \"Oh honey, that's a nice offer, I'll let you know in a while.\"\n\nShe related the other half of the conversation as she put on her blouse. Veronica and I looked at each other with raised eyebrows and I spoke first. \"Do you think Mary Claire and Cindy might be interested?\"\n\n\"Cheryl, would you and Beth be embarrassed if he saw both of you dressed like this or the rest of the ladies as well?\" asked Veronica.\n\n\"Yeah, probably for awhile, let's ask Beth when we get downstairs,\" she said with a concerned voice but mischievous look.\n\nWe were in the den before the rest and I sat between Cheryl and Veronica with a hand on each woman's thigh and they on mine. As the five vixens came into the room I swear that my cock got the hardest it's ever been. I'd seen the breasts of my four many times but Beth certainly held her own. They were all absolutely stunning in g-strings, garter belts, hose and heels. Cheryl was the exception in flats but the seamed stockings balanced that. \"Sweetie, come here a minute, I need to ask you something,\" said Cheryl as she led Beth into the hall.\n\n\"Max says he's home alone tonight, the ever wavering Judy, wavered away tonight. I told him were we going to play games and he asked if he could join us. How would you feel about him seeing you dressed as you are?\"\n\n\"Better question, Mom how about you?\"\n\n\"He's a big boy, in more ways than one I'd say, and maybe he'd enjoy himself and perhaps we could too when were all home,\" Cheryl smiled.\n\n\"Sexually play with Max, both of us?\" asked Beth in a rising voice.\n\n\"Sure why not, my sex life has been non-existent for the last four or five years and I don't notice you hopping up and down about yours,\" Cheryl explained.\n\n\"But what if he tells one of his friends?\" asked Beth.\n\n\"We'll tell him that if he does it'll never happen again,\" responded Cheryl.\n\n\"Okay, I guess so. I hope he doesn't freak out. Are you going to call him or should I?\" asked a now broadly smiling Beth. \"I know, let Mary Claire call him.\"\n\n\"Guys, here's a conundrum,\" announced Beth as Cheryl resumed her seat next to me. Katrina was sitting next to Veronica and Cindy and Ashley were in the wingback chairs which they had moved to either end of the coffee table. Mary Claire was standing with the remote in her hand. \"My brother wants to know if he could come over, his girlfriend dumped him again and he says that this is the last time he'll put up with her doing that. It's about time too. Judy is such a bitch.\"\n\n\"Would we have to get dressed?\" asked Ashley.\n\n\"If you, or any of you feel that you'd have to get dressed, then I'll tell him no,\" said Cheryl. \"This evening is about us. Besides I'd like to see his reaction to Veronica and me, mature women, you know.\"\n\nI spoke up, \"If he understands that Katrina and Ashley are off limits for intercourse and that if any of you tell him no it means no. Veronica has an abiding interest in young pussy, maybe she'd like to see what a young cock looks like. Mary Claire and Cindy, what do you think?\"\n\n\"Since you're the only man we've been with I wouldn't mind a bit of experimentation, no offense Scott,\" smiled Mary Claire.\n\n\"None taken,\" I smiled.\n\n\"Well then, I'll call him and tell him where we are and what the ground rules are and if he agrees I suppose we'll see him in thirty minutes or so. Anybody have a cell handy?\" asked Cheryl.\n\nCheryl called, only took two tries this time to get the number right. \"Max if you'd like to join us you can but here are the conditions. We're wearing sheer blouses and are topless under them. ... Yes both Beth and I as well as the other five women. There's just a whole lot of sexual freedom here so if one of us says no to something you want to do it means no and move on. ... You are to tell no one about this evening, especially friends or most importantly your father. ... Yes, I'm leaving your Father. ... You may freely discuss it with Beth and me tomorrow or whenever but no one outside this house is to ever hear about it. ... Yes, very casual dress. Wait a minute, honey\"\n\nBeth was holding up her hand for Cheryl to pause and when she did she asked, \"Mary Claire do we give him a vote?\"\n\n\"Sure why not?\" Mary Claire replied.\n\n\"Okay Max, do you agree?... Are you sure? ... Okay get going we're about to judge a stockinged leg contest and we'll wait for you,\" smiled Cheryl as she pushed the red button. \"I hope this isn't a mistake. More wine anyone?\" she asked as she stood.   \"I think it'll be quite exciting, a room full of young pussy and now a young virile cock,\" giggled Veronica.\n\nCheryl and Veronica cuddled against me while Mary Clair and Katrina squeezed Beth between them on the couch next to Veronica. Katrina was kissing Beth while Mary Claire had her fingers between Beth's legs doing nice things, I assumed. Cindy had moved to Ashley's lap and her legs extended off the side of the chair as they kissed and Ashley played with Cindy's small delectable breasts.\n\n\"Are you still going to fuck us tonight, Beth and me, or will Max inhibit you?\" asked Cheryl.\n\n\"No, he might inhibit you, but not Veronica or me,\" I responded.\n\nWhen the door bell rang Mary Claire disengaged from Beth's pussy and walked to the door. She opened it and extended her hand, \"Hi, I'm Mary Claire Peters and you're ... absolutely gorgeous. Please come in, take off some clothes and stay awhile,\" as she pulled him in the door he managed to close his mouth.\n\nHe was a nice looking young man and as I stood I noted that he was as tall as me, I shook his hand saying, \"I'm Scott Appleton, this is Veronica my wife and the beauty with the long dark hair is Cindy Monroe. She's sitting on my daughter Ashley's lap and on the other side of Veronica next to your sister is my other daughter Katrina. We're just getting ready to judge a daring leg contest we had this afternoon and Mary Claire will explain the rules,\" as I sat down.\n\nVeronica whispered in my ear, \"Your wife? I really really liked the sound of that handsome.\"\n\n\"Okay, the unedited pictures will loop until I stop them, write down three names on your cards and I'll tabulate the winners by the number of votes each gets,\" said Mary Claire as she picked up cards and pencils from the sofa table and began handing them around. \"Max, sit in the wingback chair and I'll sit on your lap like Cindy is on Ashley. Take off your shirt, pants and shoes, your underwear is optional. I'll tell you the names as they loop since you just met everyone. Oh, something to drink before we start?\"\n\nMax choked out \"No thanks\" as he was quickly undressing down to his boxers While furtively looking at his mother and sister. I noticed his cock was desperately trying to escape through the fly. Been there, understand it.\n\nAs he sat Mary Claire lowered herself onto his lap she saying, \"Give me your card and pencil and put your free hand on one of my gorgeous breasts.\n\nHe looked at his sister behind Mary Claire's back for an instance and asked, \"Beth are you alright with this?\"\n\n\"Sure, you've seen our tits before, now watch the screen and I assume you know who to vote for,\" she remarked with a raised eyebrow and responded to Katrina's kiss.\n\nEach picture was on a five second delay and as the Katrina series began to flip across the screen Mary Claire commented, \"That's Katrina ... My, my there's life in this cock under me,\" and scooted a bit out on Max's lap to nearer his knees. She then reached down and freed his cock from its confines. Wrapping her hand around it she said. \"Ladies we have a beautiful cock in play, you'll have to check it out.\" Then in a lower voice to Max, \"Say 'now' if you're going to cum and I'll let you do it in my mouth.\"\n\n\"Oh God, now,\" Max whimpered.\n\nMary Claire was off his lap in a flash and after few moments he was spent and she released his softened cock.\n\n\"I'm sorry,\" he sheepishly muttered.\n\n\"For what, that was quite tasty. You've got all evening ahead and I'll bet we can get you to do that a few more times,\" she said as she climbed back on his lap. \"Put that hand back on my tit, undo a few buttons if you want. I guess you'll have to catch Katrina the next time around. Now Cindy.\"\n\nAs the Cindy pictures splashed across the screen you could hear Max's breath rate increase. \"Now Ashley,\" announced Mary Claire.\n\n\"God all three have been so hot I think my dick's going to explode,\" Max exclaimed.\n\n\"Try to keep a lid on it you've got your sister, mother, and Veronica to go after Ashley. She's a gorgeous natural blonde isn't she?\"\n\n\"God,\" moaned Max.\n\nMary Claire pushed pause, stood up and said \"Beth come here. Keep Max company while you show your stuff.\" Beth shot her Mom a questioning look and Cheryl mouthed 'Go'.\n\nBeth eased herself on Max's lap while Mary Claire sat next to Katrina. \"Can I touch you?\" asked Max.\n\n\"Yes. You can put your hand inside my blouse ,\" she said while she unbuttoned three of the five buttons.\n\nMax slid his hand inside the blouse and gently and hesitantly palmed his sister's hardening nipple. \"Oh, that's nice,\" she murmured.\n\n\"Everybody comfy?\" asked Mary Claire as she pushed the Play button.\n\n\"You have an almost bare pussy,\" Max murmured. \"Can I touch it too?\"\n\n\"Not yet, maybe later, be patient with me,\" she whispered.\n\n\"K\" he replied.\n\nThe interchange did not go unnoticed by the adults. Cheryl began to unbutton her blouse. \"Getting hot in here,\" she said to no one in particular.\n\nHe was still during the Beth show, but his breathing got ragged and his hand tightened on his sister's boob. Beth reached down and fondled his woody through his boxers.\n\n\"I don't need to tell you who this is do I?\" asked Mary Claire.\n\n\"Mom, I've never really looked at your legs, They're very erotic in the stockings,\" commented Max\n\n\"Did you know I wear garter hose whenever I wear stockings? Think about that the next time I pass you in the house on my way to work. I'll bet you'd like to touch wouldn't you?\"\n\nMax just groaned. \"Pause it a minute Mary Claire,\" said Beth. When it was stopped she turned a bit and took Max's face in both her hands and gave him a long open mouthed kiss. \"That was the best kiss I've ever had except for Scott,\" moaned Beth.\n\n\"Well I haven't kissed Scott, but it was the best I've ever had,\" smiled Max. \"We need to do that more often, I've wanted too for the last three or four years.\n\n\"Start, Mary Claire,\" said Beth.\n\n\"Mom! Jesus when did you get so fucking, ... er excuse me, ... hot?\"\n\n\"Son, I've always have been 'fucking hot'. It took a conversation with Scott to open me up. Speaking about opening me up, caress my tits, Scott.\"\n\n\"That's quite a steel pipe you're pushing against my side bother dear. Do you know how to use it?\" asked Beth.\n\n\"Gonna teach me, sister dear.\"\n\n\"If she doesn't I'd sure as hell'd like to,\" growled Mary Claire.\n\n\"And that's you ... Veronica. What legs, you are the most beautiful woman I've ever seen!\" exclaimed Max.\n\n\"He's a man of superlatives, after my heart,\" said Veronica.\n\nAs the show looped back to Katrina Mary Claire reminded everyone to begin thinking about who to vote for and moved back to in front of Max and Beth, \"Can I have him back?\"\n\n\"Sure, the night's young and he's as hard as a rock!\"\n\nMary Claire straddled Max's legs settled her ass near his knees, unbuttoned her blouse pulled it open and asked \"See anything you like. Nipples perhaps? You already know how soft my lips are. I had them wrapped around your dick just awhile ago.\"\n\nMax put his hands on Mary Claire's hips and leaned forward and gently sucked a nipple into his mouth. He then lightly teased it with his teeth. \"Oh, my, you've learned something from someone haven't you.\"\n\n\"Well Judy apparently was good for something, she taught me how to treat her tits. Like it huh? \"\n\n\"And what else did she teach you, how to fuck?\" grinned Mary Claire.\n\n\"She couldn't make up her mind, so we never did. Would you like to teach me?\"\n\n\"Later, perhaps. Can you wait if I don't do it now. This house is full of beds and there's a hot tub on the deck.\"\n\nCheryl turned and lay across me and began kissing Veronica while I caressed her bare tits. Cheryl broke the kiss for a second and said, \"Touch me Scott\"\n\nI took my other hand and ran it up her leg and pushed her g-string aside and began touching her clit and pushing a finger inside her. She was moaning so loudly that Max asked Mary Claire what was going on.\n\n\"He's probably finger fucking her while she's kissing Veronica. Would you like to be in his position?\"\n\n\"Yes, and no, that's my mother, but she's so sexy and I don't think she'd want me too,\" Max replied.\n\n\"Yeah well, she's doing it in front of you and you're the only man in her life when your Dad's out of town fucking somebody else's wife, so try her sometime, Beth too . I think she'd like to fuck you just like I'm going to fuck you. Would you like to fuck Cindy too.\"\n\n\"Yeah, what about Katrina and Ashley?\"\n\n\"Not available, touch only, no penetration.\"\n\n\"Why?\"\n\n\"Because Veronica says so, don't get too greedy or your hopes up. There are four of us who'll probably fuck you if you're interested you lucky man. How about later Cindy and I'll take you to bed and give you a good lovin'?\"\n\n\"Oh my God, did I die and go to heaven?\" Max exclaimed.\n\n\"No. You didn't have too you just met me,\" replied Mary Claire.\n\nAs the pictures were looping for the fourth time Mary Claire announced that it was time for voting.\n\nShe collected the cards, stood behind the couch at the sofa table and began tabulating while Cindy walked over to Max, bent over and began kissing him and stroking his dick with her nails.\n\nAshley walked over to Katrina and Beth, knelt in front of Katrina and pushed her legs apart with her hands. Katrina hooked one of her legs over Beth's leg as Ashley spread her labia and pulled her g-sting aside. With the flat of her tongue she began licking her sister. Beth looked down, her eyes widening at the sight before her.\n\nAs Katrina began to push back against Ashley's face she inserted one then two fingers into Katrina and with curled fingers found her g-spot. Quickly Ashley brought her sister to an orgasm. Katrina moaned as she kissed Beth who was lightly caressing her tits. Ashley sat back on her heels with her fingers still in Katrina a she came down smiling at the two faces above her.\n\n\"God damn that was hot, you must do it often,\" gasped Beth.\n\n\"We do. It's a great form of cardiac exercise,\" grinned Ashley.",
        "\"I've never done that to a woman nor had a woman eat me. I think I've been missing something. Can you show me how it's done?\" pleadingly asked Beth.\n\n\"Oh, will we ever,\" sighed Katrina who had just regained her breath.\n\nMary Claire stood and moved to the center of the gathering.\"Okay, we have a winner, rather winners,\" announced Mary Claire. Pausing for dramatic effect, \"The winners are ... Beth, ... Veronica ... and Cheryl. Presenting the prizes is Scott!\"\n\n\"Max, have you ever tasted a woman,\" I asked.\n\n\"No, Judy wouldn't let me,\" he said sheepishly.\n\n\"I thought so. I think my wife'd like to teach you how to do that while I pleasure your mom and your sister. I can assure you that she's an excellent teacher and after learning from her your skills will be invaluable to the women in your life.\"\n\n\"Did I speak out of turn lover?\" I asked Veronica in a low voice.\n\n\"Heaven's no, I was just thinking the same thing,\" she replied.\n\n\"Well, according to the game's referee, Mary Claire, it's going to be my joy to pleasure all three winners. Since my wife is going to be occupied, Beth, Cheryl who would like to be first?\"\n\n\"I will, I will,\" they answered simultaneously.\n\nGrinning, \"Cheryl it is.\"\n\nVeronica and Cheryl moved a bit apart so they could spread their legs. \"Max, kneel in front of Veronica,\" I said.\n\nHe walked around the coffee table, knelt and immediately leaned forward heading for Veronica's pussy. She intercepted his move with the flat of her hand on his forehead, saying, \"This isn't a race, it's going to be a slow journey and I want you watch my husband for a few minutes before you start doing the same thing he does.\"\n\n\"Red-faced, he muttered \"Sorry. Just anxious.\"\n\n\"I know, no harm done, now watch Scott.\"\n\nI lifted Cheryl's right foot, slowly removed her shoe and one by one lightly nipped each toe and licked her insole. As I was doing that my fingers were slowly moving up her leg until I got just t above the knee. I then slowly caressed her calf back down to the foot. I gently set her foot down and repeated the same thing on her left foot and leg. Cheryl was groaning as I did this. I proceeded to run my hands from her knees up the inside of her thighs gradually spreading her legs apart.\n\nVeronica said, \"Now Max, try what he did.\"\n\nI was caressing the inside of Cheryl's bare thighs but not touching her pussy and she was arching her back trying to get her pussy nearer to my fingers. I looked over and watched Max as Veronica smiled and occasionally said, \"Oh, that's nice.\"\n\nI slid my hands to the outside of Cheryl's thighs and moved them up past her waist to her breasts, Veronica continued to guide Max with her words and hands. A minute later Cheryl finished unbuttoning her blouse, and pulled it open as I began caressing her breasts. I leaned closer and sucked and nibbled on each nipple to an increased volume of groans.\n\nVeronica followed Cheryl's lead unbuttoning her blouse just as Max's hands reached her waist. He gently caressed her breasts and lightly sucked and nibbled her nipples. \"Oh, Max, that feels nice, you've done that before haven't you?\" He nodded his head saying \"yes\" around a nipple.\n\nI kissed Cheryl's stomach down to her navel, swirled my tongue around in it and started to pull her G-string down. She raised her butt and closed her legs a bit as I slid it down and off.\n\n\"That's right, Max, pull them down slowly. Now come back between my legs and kiss my bare thighs. That's nice. Now gently make contact with my pussy. Use the flat of your tongue to begin licking me. Oh, that's my clit, did you feel it with your tongue?\" asked Veronica.\n\n\"Yes\"\n\n\"One of your goals is to stimulate my clit and if you move your tongue down a bit you can use your thumbs to spread my lips and lick there. Oh, yes ,right there, right there. Just where your tongue is now is my vagina, curl your tongue and gently probe the opening.\" Seconds later she continued, \"Yes, there, gently. If you want you can try to push your tongue in. Oh, God, like that. Now move back up to my clit and lick it with little tongue flicks. Now take a finger and gently insert it into my vagina and when it's in, curl it a bit and find my G-spot. It'll feel different on your finger tip. Oh, right there, now suck my clit, Christ you're gentle. Just like that, just like that. Pull your finger out. Let me rest a few moments and then put two in and slowly move them in and out. Uh, Uh, Good, Uh, now suck a bit harder. Put your other hand under my ass and squeeze. \"\n\nVeronica was arching her back, pushing her pussy hard against Max's face when she nosily came and with a large exhalation of breath said, \"Nice, Good, keep your tongue there, no now it's too sensitive, keep your fingers in but stop touching my clit.\" Max did as she instructed while Veronica calmed.\n\n\"Max, come up here, let me kiss you. I want to taste my juices on your lips.\" Max straightened hi s back and their lips met. The kiss became prolonged and obviously included a lot of tongue.\n\nAs they broke the kiss, Max asked, \"Thank you Veronica, I guess I did okay, huh.\"\n\n\"You certainly did, now it's going to require a lot of practice to keep doing that well.\"\n\n\"Come practice on me,\" said Mary Claire sitting in one of the wingback chairs.\n\nAs Max was walking towards her I turned back to Cheryl's pleasure and Veronica winked at me as I went back to kissing Cheryl's navel. \"I think he's going to want to practice at home,\" Cheryl remarked as I began licking around her clit. \"A lot.\"\n\nHer bare cunt felt different than my women's, maybe they'd like to shave, I thought. As I continued to tongue her pussy I felt her arching her back to push herself into my face. I backed up just a bit and licked and nibbled the inside of her thighs, not enough to leave marks though. As I began hearing her saying, \"Oh\" I returned to her spread labia and licked down to the asshole, tonguing it a bit as she really raised her hips, saying, \"God that feels good, really good.\" I pushed a finger into her vagina and continued up to her clit and licked and began sucking it. I swirled my finger around, pulled it out and coated her asshole with the juices and applied pressure. \"Oh my, yes, yes,\" she panted.\n\nI pushed my thumb into her vagina, and a second finger up her asshole to the second joint and sucked and nipped her clit. She exploded into an orgasm, bucking her hips, both hands on my head, squealing her delight.\n\n\"Oh, my God, oh my God. Veronica will you let him do this to me after you're married?\"\n\n\"Of course,\" was Veronica's simple reply as I straightened my back and gently pulled my fingers out with a popping sound. Cheryl leaned forward, wrapped her arms around my neck and kissed me as deeply as her son had Veronica.\n\nI looked over to Beth as she wiggled with a hand between her legs. Just then I heard Mary Claire loudly come. When I turned my head they were deeply kissing. I noticed Cindy had her blouse and g-string off and was sitting with her legs spread. As Mary Claire broke the kiss, she softly said to Max, \"Go to Cindy and thanks, I think you're a natural. Judy will never know what she missed.\"\n\nI excused myself to wash my hands and brought back two new bottles of wine which Katrina began opening before walking to fill everyone's glass. \"I guess Max's spending the night too?\" I asked Cheryl.\n\n\"If he's drinking he's not driving, I'm under the impression at neither Cindy or Mary Claire will mind.\n\n##\n\nAfter Hazel got home and they had both shaved her pussy then they spent most of the early afternoon at Saks and Macy's as Hazel did a major overhaul of her lingerie wardrobe. She also bought several everyday dresses and a few cocktail dresses that stretched the limits of her new exhibitionism. When they got back home and had carried all the purchases into the bedroom Hazel announced that she was going to give Emerson a fashion show and he was to undress to watch it. Several times, twice actually, the show was interrupted so Hazel could have Emerson stuff his rigid member into her.\n\nEmerson mentioned that tomorrow they were going to go out and buy a few video cameras and tripods to record their play and lovemaking. \"Ooh, maybe Kim and Gwen would want to sometimes operate them, or Gwen and I can when you fuck Kim.\"\n\nRight after dinner Hazel called Kim and when Gwen answered Hazel asked her if she and Kim would like to come by tomorrow for drinks and a BBQ. Much to Gwen's delight at being asked she accepted and agreed to be there sixish with Kim. Their evening ended with Hazel in garter stockings and high heels and Emerson in silk boxers watching some adult shows on U-verse. After a love-making session on the couch they fell asleep in bed with Emerson softening in her.\n\n##\n\n\"Beth how may I pleasure you?\" I asked with a grin.\n\n\"I think I'll have whatever Mom had, but I'll bet you could make me come just by loving my boobs.\"\n\n\"Well I don't think Mary Claire set a limit on the number of orgasms, so I'll start there. Take off your blouse, please,\" I lecherously grinned as I sat next to her. Veronica and Cheryl were arranged with Cheryl's legs across her lap as she leaned back against the arm of the couch to watch her daughter and me. Veronica's hand was lazily stroking the inside of Cheryl's thigh with the side of her hand against her labia.\n\nI put one arm around Beth and began outlining her nipples with my fingernail. She shivered and cooed as I did that. I shifted a bit after a few minutes and began to gently knead each breast and pinch her small but now quite hard nipples. I kissed each nipple, then took each in turn into my mouth and lightly nipped them as I sucked. I moved my hand and caressed her stomach, tilted her chin and kissed her while pinching her nipples. Her breathing quickly became ragged. I continued to play with her breasts. Two minutes later she came with a low growl and wrapped her arms around me. After breaking the kiss she pulled her face back a bit and said, \"You're going to ruin me for any man my age. You know that don't you?\"\n\nI dropped my hand to the inside of her bare thigh and said, \"That's not my intention, but if your Mom puts you up for adoption make this your first stop.\"\n\nI looked up seeing Cindy with her legs on Max's shoulders and with one hand was pulling his head deeply between them with the other pinching her nipples. Wait 'til she comes I thought. Cindy began coming with her usual loud screams and grunts, poor Max thought he had hurt her and was looking up at her with astonishment. She wrapped her legs behind his neck trapping him until she quieted and came down. Looking at him she cooed, \"I guess I should've warned you, I'm noisy, must be my Slovak roots. Sorry, but God you felt good.\"\n\n\"Whew, I thought you were hurt,\" he grinned.\n\nVeronica was kissing Cheryl. Her fingers were busy inside her new friend's vagina. Mary Claire had moved to the coffee table to watch Veronica pleasure Cheryl .She was caressing her own bare breasts as she watched them.\n\nAshley was sitting in the wingback chair with Katrina straddling her legs facing her,, kissing her and playing with Ashley's magnificent breasts. Ashley's fingers were in Katrina's vagina and I could tell that they were massaging Katrina's G-spot by the way her hips were rotating,\n\nI knelt in front of Beth, raised her foot and sucked each toe after removing her shoe. I repeated what I had done to her mother but I pulled her to the edge of the cushion and put her legs on my shoulders to open her up some more. I thoroughly licked her slit and when tonguing her ass hole got pretty much the same reaction that Ashley and Cheryl exhibited. \"Want something in there,\" I softly asked.\n\n\"Yes,\" she quietly replied.\n\nI wetted my finger in her vagina a few times and spread a lot of moisture around her asshole. As I was licking and applying pressure with my tongue she began to breathe raggedly. I gently but firmly put my first finger in her vagina, my second finger in her asshole slowly slid into the second knuckle and I massaged her clit with my thumb. With my other hand I caressed her breasts and kissed the back of her knee. Her hips began to dance up and down and around. She began gasping and whimpering, \"So damn good, so damn good, deeper move your fingers, all of them,\" as she tossed her head back and forth. She then became still, opened her eyes, looked at her Mother and said, \"Put me up for adoption.\"\n\nOut of the corner of my eye I could see Max playing with Cindy's breasts as he carefully absorbed what was happening to his sister less than ten feet away. I glanced over and smiled. Cindy was quietly giving him pointers.\n\nBeth looked at me and tried to lean forward to kiss me but her legs got in the way. \"Well, this is a Hobson's choice, I want to kiss you but I don't want you to pull your fingers out.\"\n\n\"Tell me when you're ready, the bus'll have to wait,\" I replied with a smile.\n\nKatrina and Ashley were mutually masturbating each other and they came with a series of groans.\n\nMary Claire suggested a hot tub telling Max that \"it would blow him away,\" referring to something other than the 'beauty' of the setting.\n\nAshley looked over at Beth and me and asked, \"Is Dad's finger in what I think it's in?\"\n\n\"It is, and I like the way it feels,\" replied Beth. \"I never thought I'd enjoy a finger up my ass, but WOW! It feels a lot different than I thought it would, its feels really good.\"\n\n\"Well, I have a butt plug that you may be interested in taking for a trial spin,\" smiled Ashley.\n\n\"Ooh really, I've been curious to try one. I'm releasing you Scott, you may kiss me when you're out,\" she said with a big grin.\n\nI pulled my fingers out and we kissed passionately with lots of tongue entanglement for a long time.\n\nAfter breaking the kiss, I sat on the couch between Beth and Veronica. Beth promptly wrapped her hand around my cock through my shorts. After ten seconds she let go and put her hand under my shorts and grabbed me again. \"I've got to have this in my pussy tonight. You haven't changed your mind have you?\"\n\n\"Of course you can, he'll love to fuck both you and your Mom,\" beamed Veronica.\n\n\"Let's go to the tub,\" said Mary Claire taking Max's hand.\n\n\"I don't have a suit,\" he said.\n\n\"Suit, we don't need no stinking suit. You've been up close and personal with me, Cindy and Veronica, you've seen everything but Katrina's and Ashley's pussies, not to mention both your sister and your Mom. What's left to hide? Tell you what you undress us and we'll make it worth your while,\" grinned Mary Claire.\n\nMary Claire, Max and Cindy lifted the cover off. Mary Claire checked the thermometer and turned on the jets before turning to Max and Cindy, \"Well?\"\n\nMax eased off Cindy's blouse and fiddled with the garter clasp before asking, \"Show me how this works.\" Cindy bent over and slowly showed him how to hold the rubber part of the clasp while she slid the metal part off. He then imitated what she had done and unfastened the back then the other leg and started to pull the stockings down. Cindy said, \"Wait, like this.\" She rolled the stocking down to her knee. She smiled at Max and let him finish after taking off her shoe. As he started to roll the other one down, he leaned in and kissed her pussy and gave it a little lick. \"Oh, nice, you're catching on.\"\n\nKatrina came out and stood next to Mary Claire while he undressed her. Max also took advantage of kneeling in front of Mary Claire to kiss her and lick her as well. His technique wasn't yet smooth, but he was a quick and eager learner.\n\nKatrina said \"Wait\" and knelt in front of Max and pulled his briefs off, freeing a very nice looking dick. She glanced up at him, grinned, and slowly moved her head forward to kiss the head of his cock. She stood and let Max take off her blouse, stockings and garter belt. \"Please kiss and lick me now please.\" Max kissed her and with his hands on her ass, thoroughly licked her.\n\n\"Let's get in. Wanna eat me too?\" asked Katrina.\n\nBath and Ashley were out next. Max stepped in front of them and beamed, \"I'm the official undresser, may I perform my duties?\"\n\n\"Of course,\" they both replied. Max undressed Ashley then Beth kissing and licking them both. Beth responded to the lick, \"I hope you don't consider this a one-time thing little brother, I sure as hell don't.\"\n\n\"Good, I agree. I wonder what Mom'll think?\"\n\n\"We'll talk about it, okay?\"replied Beth kissing him.\n\n\"Anyone else coming out?\" asked Cindy.\n\n\"It'll probably be a while, as I passed by the den Cheryl was in the corner of the couch being eaten by Mom as Dad was pounding into Mom from behind . If you listen carefully you may hear their moans and groans. When they stop I guess they'll join us,\" explained Ashley.\n\nKatrina asked, \"Why were you two the last ones out?\"\n\n\"I took her upstairs to show her the butt plug,\" explained Ashley.\n\n\"Does she have it in?\" asked Max.\n\n\"No, it's on the nightstand next to Bryce Field.\"\n\nIn response to the puzzled look on Max's face, Ashley explained that was the name for the giant bed in her parent's bedroom.\n\n\"It's getting cold, let's get in,\" said Cindy.\n\nMary Claire and Katrina sat on either side of Max and Cindy and Ashley on either side of Beth. \"Well Max and Beth what do you think so far?\" asked Ashley.\n\n\"Awesome, hope we're invited back ... soon,\" responded Beth.\n\nKatrina stood out of the water and sat on the edge of the tub with one leg behind Max and the other still in the water. \"Well, Max show me what you learned this evening.\" Max promptly turned and began to gently lick Katrina's pussy and soon was sucking on her clit. She had an orgasm when he first put a finger into her, and another one when the second one was added. \"Too sensitive, please stop.\" She softly said.\n\nAs he pulled his fingers out she said, \"Nailed the g-spot lesson, that's for sure.\"\n\n\"Hey Beth, ever blow your brother?\" asked Ashley.\n\n\"No, why.\"\n\n\"Do you want to?\n\nShe beamed lustfully, \"That can't be a real question. Of course.\"\n\n\"Cindy, change places with Max, Beth move over let him sit between us. Okay, sit on the edge, spread your legs Max. If we don't catch you in our mouths try to point it at the deck, Dad doesn't like come in the water. You've swallowed haven't you Beth?\" asked Ashley. \"You have blown a guy before, haven't you?\"\n\n\"No to both, but I'm a quick study,\" replied Beth.\n\nAshley began to lick Max's dick and asked Beth to join her. They both licked opposite sides. Ashley then took him in her mouth just past the crown and bobbed up and down a few times before showing Beth the sensitive spot on the underside just at the crown.\n\nBeth took Max in her mouth with her tongue pressed to the sensitive spot and then sucked about three inches of him into her mouth before pulling back. \"Will he come just from sucking,\" she asked.\n\n\"No, you'll probably need to jack him a bit. Make sure he's wet when you do this or you could hurt him,\" as Ashley demonstrated. \"Tell us when you're close, okay?\"\n\n\"Mmm, I think just knowing it's Beth is going to make me come soon.\"\n\nAshley sucked and jacked him briefly, the nodded to Beth to take over. Beth began laving his head as she took him in her mouth and just held his dick. She bobbed up and down and Max said, \"Ohh, now, Beth.\" With that he began squirting in her mouth. As she felt it filling her tongue she pulled back but kept the crown in her mouth and began swallowing. When the pulsing stopped, she pulled back and let him drop out of her mouth, smiling she stood up and kissed him. \"Good stuff, interesting texture, a bit salty, but nice.\"\n\nMary Claire spoke up from the other end of the tub, \"I thought so too, got a nice dick on him. Let's see if he really knows how to use it when he recovers.\"\n\nI walked out onto the deck just as the cycle ended, my semi-hard cock leading the way. \"Now there's the perfect cock,\" said Cindy.",
        "\"Beth can I talk to you for a minute?\" I asked.\n\nShe stepped out of the tub and walked to me and in a low voice I said, \"Veronica would like you to join your mother and I in bed soon, would you?\"\n\n\"Oh, are you gonna fuck me?\"\n\n\"\"That's my desire, yes.\"\n\n\"Now!\"\n\n\"Yes,\" I replied.\n\nGiving a faux frown she said, \"If I have too. ... Yes, of course.\"\n\nAs Beth headed for the table to grab a towel I told the rest of the girls\" since Katrina and Ashley will be spending the night in my bed, Mary Claire, Cindy, and Max you could use their bed. Unless, of course, Max wants a bed to himself, then he could use the spare bedroom.\"\n\nMary Claire, always the shy one said, \"Max, do you know how to fuck? Wanna learn from Cindy and me?\"\n\n\"I can't refuse an offer like that and I'll bet I don't even have to ask my Mom,\" he replied.\n\nI walked back into the house with Beth at my side asking, \"Should I get my clothes?\"\n\n\"Heels maybe, I don't expect you'll sleep in your skirt and top.\"\n\n\"Okay, heels it is.\" She walked back out to the deck to retrieve her shoes before she went upstairs.\n\nVeronica was still in the den in hose and heels picking up a bit. \"Don't bother. We'll do it in the morning. Did Cheryl go up already?\" I asked.\n\n\"Yes. Can I ask, no tell you something?\" smiled Veronica. Without waiting for my response she said, \"I want to get Max's dick in me. Mouth and pussy. Not tonight, but sometime, perhaps when you're fucking Beth or Cheryl. Even if you're not doing them it wouldn't happen without you being there. Perhaps my young pussy fetish is really a youth fetish.\"\n\nI wrapped my arms around her and pulled her to me, kissing her, and when I broke the kiss I said, \"Of course you may. You know that I'll share you as you share me. Se he's on the list with Dave and Emerson, huh? I'm glad you didn't want to try him tonight, I think Cindy and Mary Claire are going to get him into their pants.\"\n\n\"Oh really. In the girls' bedroom?\"\n\n\"Yes, Ashley and Katrina will be joining us when they come in. Let's go warm the bed shall we.\" I turned the lights off and Veronica and I went hand in hand upstairs.\n\nWhen Beth reached the bedroom Cheryl was just coming out of the bathroom. \"Mom, I just did something I've never done before,\" she paused and with her head slightly downcast continued quietly, \"I sucked Max's cock and let him come in my mouth. I swallowed it ... and ... I want to do it again... soon. ... Are you disappointed in me?\"\n\nCheryl smiled as she hugged her daughter. \"Nope, I'm not.\" Still grinning she looked into Beth's eyes, \"Tonight has been a watershed moment for me ... for us. Truthfully, as I was washing my face I was just thinking your brother has a dick that's as nice looking as Scott's. Would you be disappointed in me if I tell you that I'd like to fuck him and also for him to come in my mouth?\"\n\n\"Ohh, a new meaning to 'close-knit family'. Beth Laughed. \"So it's alright if he fucks me too, maybe after we get home tomorrow? Poor Dad, I guess he's not going to be missed, huh?\"\n\n\"You haven't done anything with him have you?\"\n\n\"Dad? Nope never interested.\"\n\n\"What about Greg, your boyfriend?\" asked Cheryl\n\n\"Who? I think he's out of the picture after today. We kind of fucked three times, but he couldn't hold off for more than a few seconds after entering me the first inch.\"\n\n\"Good, I didn't think he was good for you for a lot of reasons. Do you think you'd like to learn how to eat me and let me love you like that too?\"\n\n\"Mom that sends shivers down my spine just having you ask.\"\n\n\"Who's got shivers,\" I asked as I touched the recording button on the way into the bedroom.\n\n\"Me,\" replied Beth. \"Mom wants to teach me how to pleasure her and Max already taught me how to blow him. This has got to be the wildest and most fun filled day of my life.\"\n\n\"I hope it's not the last,\" I smiled.\n\nVeronica walked over to Cheryl, put her arms around her and pulled her to her. Bare breast to bare breast. \"I'm glad Scott invited you over today, and I hope we see a lot more of each other in the future, all three of you, but now let me love you a bit more.\" She led Cheryl to the bed pulled the covers back, climbed onto the mattress and while kneeling with her arms outstretched to Cheryl said, \"Please join me.\"\n\nCheryl entered Veronica's arms. They knelt there on the bed embracing and kissing.\n\n\"Do they give you any ideas?\" I asked Beth setting on the edge of the bed and swinging my legs up then opening my outstretched arms.\n\n\"Oh, just a few,\" replied Beth as she started to kick off her shoes. \"Leave them on,\" I said as she climbed into my arms and I engulfed her mouth with mine.\n\nI began to caress her breasts with one hand as the other explored her ass as we kissed. She lay down next to me and put her leg across my groin. I moved my hand to her pussy and she opened to legs to me. \"Get that cock inside me,\" she panted.\n\nI rolled to my side and straddled her on my hands and knees and suddenly felt a hand wrapped around my cock. \"May I do the honors?\" asked Cheryl. As she caressed Beth's slit with the end of my cock Beth spread her legs a bit more and I lifted each leg to get between her legs. Cheryl guided my Cock into Beth's wet hole and then let go. I began a series of short strokes entering her about a quarter of an inch or more on each one.\n\nAfter I was in about an inch and a half she began saying, \"Oh my God, Oh my God, more, deeper, God, go deeper, now please,\" spreading her legs more.\n\nI pulled back leaving just the head in and as she began to whimper, \"No, not out,\" I lifted her legs so that the backs of her knees were on my shoulders. I then began to enter her more deeply with each stroke. She began to pant, \"Oh ... oh ... oh ... that's good, that's heavenly,\" and as I reached her cervix with my balls hard against her ass she shuddered and came moaning, \"Ohhhh ... Fuck that's so ... God Damned ... good. \" As she came I felt the walls of her vagina grip me tightly and undulate around my cock. As she came down she flopped her arms out from her sides, opened her eyes and heatedly demanded, \"Kiss me, you wonderful man, that's three times tonight you've made me come.\"\n\nAfter I broke the kiss I was still inside her, \"Try for four?\"\n\n\"Could we?\" she gasped. \"I want to try something, is Ashley's butt plug still on the nightstand?\"\n\nI looked over and affirmed that it was and asked \"\"Why?\"\n\nBoth Cheryl and Veronica were watching us now having heard the plug request.\n\n\"I want to be on top and have the plug in my ass while I fuck you. When you ate me evening with fingers in my ass and pussy it felt so good. Can I?\"\n\n\"Of course. It looks like your Mom and Veronica are interested in watching. There's lube in the drawer.\"\n\nBeth stood next to bed turned down the light on the nightstand and knelt next to me holding the butt plug in one hand and the lube in the other. \"Will you put this in, I've never done one before.\"\n\n\"Neither have I\" came a simultaneous response from the two women at my side.\n\nI wasn't going to tell them that this was new to me too. \"Get on your hands and knees,\" I instructed with a confident tone as I unscrewed the cap on the lube. I squeezed a dollop on my finger and liberally coated her asshole. When she complained of how cold it felt, I playfully and lightly slapped each of her ass cheeks. I liberally coated the plug and then said, \"Lower your shoulders to the bed and arch your ass up as much as possible. That's right. I'm going to put my finger in first to get some lube inside you and then I'll push the plug in.\"\n\nI slowly pushed my finger all the way in with a few 'Ohs' from Beth. After pulling my finger out I put a bit more lube on the plug and began to gently work it in. \"Are you alright?\" I asked. It was an unnecessary questions, she was already pushing back against the plug. Her asshole was slowly expanding and a minute later it was fully seated in her.\n\n\"It's in, I feel so full, good but full,\" she moaned. I lay back down. She carefully straddled me as she reached back to make sure the plug remained fully inserted. Then she guided my cock into her and she lowered herself onto it.\n\n\"Oh, I feel stuffed up. This feels so damned good,\" she groaned with delight as she raised and lowered herself on my cock. As the frequency of her motions increased she leaned forward to kiss me and at that very moment Ashley and Katrina joined us.\n\nFor me it was a wonderful experience too. I could feel the tapered tool massaging my shaft. Her already tight pussy was so excruciating yet fantastically tighter.\n\n\"Ohh,\" Ashley squealed,\" Is she fucking Dad with the plug in her ass?\"\n\n\"Yes, replied Veronica, \"and she seems to like it ... a lot! And from the expression on your Dad's face he likes it too\"\n\nAfter several minutes she cried \"Come in me, come in me.\" Increasingly she was panting between kisses. I was ready to come and the only thing that had kept me from coming earlier was that she had occasionally paused her stroking to bask in the feeling.\n\n\"Pill, I assume\" I heard Veronica ask Cheryl. \"Yes,\" was the mumbled reply I heard.\n\nAs she moved with more determination I felt the pressure from the plug against the spot on the underside of my cock. I was about to come from the stimulation of stroking in and out of her. She was not moving rapidly but that extra stimulation without any pausing caused me to explode into her.\n\n\"Oh God, Scott, that feels incredible, you filled me up,\" she gasped as she became still and lay on my chest with a sheen of perspiration between us.\n\nI was still inside her when she reached back and attempted to pull the plug out. There was too much lube on the outside for her to get a grip. Ashley grabbed a tissue and grasped it saying, \"Beth relax now, and I'll pull it out.' Beth groaned as Ashley slowly extracted it and took it into the bathroom. Beth sat up and pulled off me and then with a contented look on her face rolled next to me.\n\n\"Dad, let me lay there,\" Katrina said. I lifted myself over Beth as Katrina climbed onto the bed and proceeded to begin licking and sucking my come as it oozed out of Beth. \"That feels so nice,\" Beth dreamily said as she basked in the feeling of being well sated.\n\nAshley returned from putting the plug in a cup full of hot water she scrambled over Veronica and Cheryl to take my softened cock into her mouth. \"Beth tastes good on you,\" she grinned.\n\n\"Yeah, she does taste good, so does her mother, maybe later you can find out first hand,\" I grinned.\n\nVeronica took my lubed hand, spritzed some sanitizer on it and wiped it dry with a tissue. \"Good to go again,\" she said.\n\nAfter ten to fifteen minutes of attention I started to become erect again, Veronica asked Cheryl, \"Wanna ride him like Beth.\"\n\n\"Anyway he wants as long as he's inside me, it's been a long, long time since I was properly screwed by something other than my fingers or a toy. Come on Scott let me get on top,\" she grinned sitting up on her knees.\n\n\"Oh good ,\" said Veronica, \"I get his face, and he's still dripping out of me from the fucking he gave me on the couch.\"\n\nCheryl straddled me and promptly began bouncing up and down to get me inside her. She was still very wet from Veronica eating her and watching me fuck her daughter so in no time at all I was fully inside her. In seconds she was moving with determination on my shaft.\n\n\"Ohh, you feel good, I'd forgotten how nice a real hot flesh and blood cock feels. Yours feels especially nice, ... nice and filling. Ohh, I think you just touched bottom, let's try to do that again,\" she proclaimed with delight as she pulled up and swiftly lowered herself. \"Umm, there again,\" she gasped.\n\nIt was about then that Veronica straddled my face and I began to lick her very wet pussy. From the synchronization of their movements I could tell Veronica was probably kissing Cheryl and probably mauling her tits too. Periodically I felt the women slow down, and sometimes stop to kiss, by what I later saw on the recording, with greater intensity each time.\n\nWithin fifteen minutes or so, Cheryl announced that she was close and that's when I felt a slick finger in my ass. That did it, I came, Cheryl came, and a few seconds later, Veronica came.\n\n\"Awesome .\" I heard a female voice say. \"A trifecta.\"\n\nVeronica rolled to my side, Cheryl fell on my chest and began to kiss me and the finger left my ass. \"You could be habit forming, that was nice, very nice,\" she cooed happily.\n\nVeronica said, \"He is the best, and he's all mine to love and to share.\"\n\n\"Did you like my finger in your ass Dad?\" asked Ashley. \"I saw Erin do that and saw your reaction, thought you might like it again.\"\n\n\"I did,\" I gasped.\n\nKatrina got Cheryl to lie down next to me and carefully proceeded to clean her out to Cheryl's delight. \"We'll have to do this to one another Beth,\" she sighed.\n\n\"Ashley, turn and let me pleasure you while you suck me. Give me some lube sweetheart,\" I said to Beth and stuck my hand out. I smoothed it over Ashley's crack and asshole and gently inserted my thumb.\n\n\"Oh, good, Dad, in and out, in and out.\" moaned Ashley. \"I love it.\"\n\nAfter ten or fifteen minutes Ashley started shuddering and came, as she lifted her mouth off my cock she said \"You aren't going to come are you.\"\n\n\"Sorry, no, three times a day seems to be my limit,\" I said as I gently pulled my thumb out of her asshole.\n\n\"Well that first time was about seven thirty, so three times in three hours is probably phenomenal,\" remarked Veronica. \"Anyone want to shower, use a toothbrush before we turn off the lights. I have a small box of wrapped toothbrushes for any guest.\"\n\nEveryone took Veronica up on the toothbrush idea, no one showed any interest in showering . Katrina turned off the lights and the camera before she snuggled on my left side with Beth on my right. I kissed each of them passionately and said \"Good night\"\n\nAshley went into her bedroom and returned shortly. She climbed in next to Cheryl, who was cuddled into Veronica. Raised up on her elbow, she looked at me in the dimmed light to quietly announce, \"Mary Claire and Cindy have just fucked the life out of Max and he's sound asleep between them.\"\n\nI don't think any of us were awake more than a few minutes after Ashley returned.\n\n*\n\nDear readers, I hope you're continuing to enjoy this tale of a family and their lovers. I've a long way to go before I finish but future chapters may be published sooner in the months ahead. I'll put the submission date on my bio page and they'll usually be published three days after that date. I'd appreciate comments and if you have some ideas you'd like me to incorporate, please tell me and I'll consider them. I try to respond to all emails unless they're cranky. I'd still like to especially hear from any female readers. Any thoughts on how to publish character pictures would also be appreciated."
    ],
    "authorname": "Reindeer58",
    "tags": [
        "hose",
        "heels",
        "incest"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/any-chance-we-could-ch-34"
}
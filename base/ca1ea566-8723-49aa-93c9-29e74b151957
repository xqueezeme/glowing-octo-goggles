{
    "title": "A New Alexandra Ch. 09",
    "pages": [
        "Alexandra swiped a down jacket from the living room couch, shaking it out.\n\n\"Tsk tsk,\" said Kira, mock-chiding her. \"You're starting to act less like a guest and more like someone who lives here.\"\n\nAlexandra bit her lower lip. \"Well, I've spent every night here since...what, Sunday? I've got a third of a closet of clothes here, a toothbrush, shampoo...so, uh, yeah, I'm starting to feel less like a guest.\" She zipped the coat, sound of the zipper covered by Kira donning her own overcoat.\n\n\"Gonna be colder than an ice cube in the Arctic out there tonight,\" said Kira. She opened the door, stepping into the hallway. \"Careful on the carpet. The condo association had a shitfit once when my old cleats scuffed it up.\"\n\nAlexandra looked at her shoes, a pair of black-and-green turf cleats fresh from the box. \"Seriously? Even turf cleats?\"\n\n\"My place has decent floors. This thing,\" she said, gesturing to the worn wall-to-wall fabric, \"Probably cost twenty bucks for the whole building. In 1975, I'd guess.\"\n\nAlexandra had never looked closely at the carpet. Kira was right: it was a brownish-orange monstrosity that put the bare in threadbare. \n\n \n\n\"And they got mad at you for scuffing this thing? How did they even notice?\"\n\nKira pressed the elevator button for the underground parking garage. \"I had an old neighbor. Old as in former, but also old as in once had dinner at the White House when Truman was President. She hated me. Hated me. You can imagine why,\" she said, interlacing her long fingers with Alexandra's.\n\n\"Used to complain to the condo board about everything I did. Miss Manning left her muddy boots outside in the hallway. Miss Manning's pop music can be heard in my unit outside approved hours. I cannot imagine what Myrtle would have said about last night.\"\n\n \n\n\"Miss Henderson makes Miss Manning cum far too loudly, for unreasonable lengths of time, and at wholly inappropriate hours,\" said Alexandra, adopting the same mocking tone.\n\nThey stepped out of the elevator, headed yet again for Kira's decade-old Jeep Wrangler.\n\n \n\n\"The chances Myrtle said the word 'cum' even once in her life are about the same as those of the Pope opening Christmas mass at St. Peter's next month by spreading his arms and saying 'Assfucking. We gather for this sacred mass to celebrate the practice of assfucking.'\" \n\n\"Miss Henderson talks too loudly about how wet her cunt is, how big Miss Manning's tits are, and she does this at the breakfast table.\"\n\n\"The College of Cardinals has decreed that, in lieu of communion wafers, we'll be handing out condoms at this mass.\" Kira paused. \"For the assfucking.\"\n\nBoth women doubled over in laughter as Kira started the engine. I'm so glad she has the same sense of humor I do, thought Alexandra. The same awful sense of humor.\n\n \n\n\"Hey,\" continued Kira, \"You actually did say that stuff at the breakfast table, didn't you? About my tits, I mean.\"\n\n\"Mhm. Today, in fact.\"\n\n\"And I thought I was a fan of morning sex,\" said Kira. \"And had a dirty mouth.\"\n\n\"Says the woman who just had the Pope extolling the virtues of anal sex and responded to my breakfast commentary by literally telling me to eat her cunt while she finished her pancakes.\"\n\n\"They were some good pancakes,\" said Kira.\n\n\"It was some good cunt.\"\n\nKira coughed. \"Well, seeing as I can't get your mind out of the gutter and on to the task at hand, do you actually want to talk about this team we're playing, or just show up and wing it?\"\n\n\"Fine,\" said Alexandra. Actually, I wouldn't mind showing up and winging it in a recreational indoor soccer league, but apparently this team is so serious that they have game plans.\n\n \n\n\"OK, so just to warn you, you won't start. We can sub whenever we want when the ball is out of play. We play that by ear.\"\n\n\"Any opportunity for pancakes?\" I fucking know how and when to play soccer, even indoor. \n\n\"Fine,\" echoed Kira, passing a slow-moving truck. \"Team we're playing tonight is good. It's a bunch of alumni of one college program. Wisconsin-Whitewater, Wisconsin-Stevens Point, one of them. You get the...uh, point. Bunch of five-nine, twenty-something blonde girls with an idea what they're doing and who aren't afraid to use their elbows.\"\n\nAlexandra crossed her legs, staring at the highway lights. \"So, what you're saying is you'd fit in.\"\n\n\"I've five-ten, thank you. And if I had a Wisconsin accent, I'd probably jump off a bridge. Seriously, you'd think these girls had never left the Central time zone their entire lives.\"\n\n\"So?\" said Alexandra.\n\n\"Half of them are named Madison, and the other half are named Emily or Emma. They piss me off.\"\n\n\"Well, that part I understand,\" drawled Alexandra. \"I'm sure they like your accent, too.\"\n\n\"Wait, what? I have an accent?\"\n\nAlexandra covered her mouth with her palm. \"Kira, I...\" Don't say \"I love you, but...\". Just skip that. \"Yeah. I knew you were from Texas before you told me. It's not much, but it's there.\" She paused. \"And just so you know, I do like it.\"\n\n\"You've distracted me.\"\n\n\"Last weekend, you were literally giving me a striptease while I drove you back from the airport,\" said Alexandra. \"I don't think you're one to complain about distractions.\"\n\n\"Fine, my accent, tell me more.\"\n\n\"You have a little bit of a Texas drawl. Especially after you drink. I like it, especially when I drink.\"\n\nKira drove, eyes fixed ahead. I hope she's not mad, thought Alexandra.\n\n\"I'm glad you like it,\" she said, finally. \"Ever since I went to college, I've been fighting it. Seriously, the judgments people make about women with Texas accents...\"\n\n\"False modesty,\" said Alexandra. \"I'm from Pittsburgh. 'Go Stillers, ya fehkin' jag-off!'\"\n\n\"Wait, do y'all really talk like that?\"\n\n\"Me? Hell no. Some of my friends back home, absolutely.\"\n\n\"I withdraw my objection,\" said Kira.\n\n\"So, these lovely ladies with their annoying voices against whom I get to make my Chicago-area recreational indoor soccer debut. Is there anything I need to know other than that you don't like them?\"\n\n\"Unfortunately, yes,\" said Kira. \"We'll be a bit shorthanded tonight with the holiday next week. We'll play 2-1-2, so everything runs through Luc\u00eda. Keep the ball on the ground as much as possible, and use the sideboards. When we need to flood the midfield, it's a forward dropping back to the wing, not a defender going up. Defense first.\"\n\nYes, I know how to play soccer, Alexandra' mind repeated. \"Sounds good,\" her mouth said.\n\n\"OK, now back to my accent and how hot you find it,\" laughed Kira.\n\n--\n\nMost of what Kira said turned out to be accurate. Their opponents were almost uniformly tall and blonde, and after pulling on a blue jersey, Alexandra started the game as one of only three substitutes.\n\n\"So, New Girl, you're a defender?\" The nameless teammate was an inch shorter than Alexandra, with a chestnut ponytail and the rapid voice of someone used to hurried communication.\n\n\"That and midfield,\" Alexandra replied.\n\n\"Useful,\" she said, tone softening. \"I'm Meg, and she's Shannon. We're both primarily forwards.\"\n\n\"Alexandra,\" she said, extending a hand. \"Nice to meet you both.\"\n\n \n\n\"You too,\" said Shannon. Five-three, one-forty, but fit. Looks like she could run through a brick wall, thought Alexandra. \"We'll probably all sub on together, so you'll just switch in for Kira or Mette, whichever one wants to come off first.\"\n\n\"Works for me.\" All three women turned back to watch the action. Alexandra tried to follow both sides' tactics and ball movement, but her eyes kept flicking back to Kira.\n\n \n\nShe's quite good, Alexandra thought, wondering why she had doubted that her girlfriend -- a former Division I collegiate player -- wouldn't be. She watched as Kira flawlessly tracked attackers, stepping into passing lanes and nodding headers back into midfield for Luc\u00eda to initiate attacks. And damn, she looks sexy as hell doing it. The running had activated her leg muscles, calves bulging under her long socks.\n\nFocus, Alexandra. Soccer. The game turned into a blur, though: Kira, fighting off an attacker's elbow with a fierce one of her own. Kira, threading a pass that turned into the game's first goal.\n\n\"Subs now,\" said Luc\u00eda, reaching for a water bottle. \"Good to see you again, Alexandra.\" So she remembers me. When Kira and I ran into her on the street. After we'd had sex in a bookstore.\n\nAlexandra stepped onto the artificial grass pitch and adjusted her shin guards. A hand landed on the small of her back.\n\n\"Hey,\" said Kira, catching her breath. \"You're on for me. Stay left; Mette's got her side. Their subs are much weaker than their starters, so be aggressive.\"\n\n\"You...\" Alexandra stopped. No point talking to her girlfriend's back.\n\nPlay restarted. The ball found Alexandra immediately, an overhit pass that she controlled and fed forward to Luc\u00eda. Then came a contested ball down the sideboard. Alexandra had pulled ahead of her opponent and cleared the ball when an elbow blasted her ribs, slamming her into the boards. Bitch, this is a hockey rink, but it's not hockey.\n\nAnother long ball came to Mette on the opposite side. Under pressure from two attackers, her tall, pale teammate flicked the ball across, leading Alexandra into the midfield. Fluid. Perfect pass. Also, hottie alert. Yikes.\n\nAttack. Middle's open. Luc\u00eda stayed to her right, and Alexandra drifted left with the ball, forcing the outnumbered defenders out of position.\n\nThere. The ball was off her left foot, headed diagonally ahead for Shannon, who blasted it into the top corner, past a helpless goalkeeper. Run through a brick wall? Fuck that, she could kick a soccer ball through a wall, too.\n\n \n\nA yell of excitement came from the bench, Kira's voice among them.\n\n\"Hey, nice ball, New Girl,\" said Meg, giving Alexandra a quick one-armed hug. Others followed. When Alexandra caught Kira's eye on the bench, she received a beaming smile and a wink in response.\n\nThe goal seemed to break the ice, both in the game and in Alexandra's relationship with her teammates. She played most of the match -- some on the left paired with Mette and some on the right paired with Kira.\n\n\"You're on the wrong side of the bed,\" whispered Kira during one stoppage in play. \"Might punish you for that later.\"\n\nPlease do, Alexandra thought, the idea never quite leaving her mind through an entire sequence of play. By the time eight minutes remained, her team had a solid 8-3 lead and Alexandra was again resting on the sideline. The ball launched over the boards and out of play.\n\n\"Hey,\" said Luc\u00eda, appearing in front of Alexandra. \"You play mid too, yeah?\"\n\n\"Yeah.\"\n\n\"Good, go do it,\" said the black-haired woman, hopping over the boards as if she hadn't been running almost continuously for nearly an hour.\n\n\"New girl!\" chorused Meg and Shannon. Alexandra blushed. If this is the worst the hazing gets, I can handle it. But seriously, I must be playing alright. Midfield in a 2-1-2 is a big task.\n\n \n\nIt turned out to not be such a big task. Mette and Kira fed passes into open space and Alexandra used her speed advantage over Madison/Emily/Emma to take it from there. Only two solid saves from Madison the goalkeeper -- whose name apparently really is Madison -- kept the score as it was.\n\nThen, with one minute remaining, Kira headed a long ball back into midfield, perfect for Alexandra to run onto. She elbowed past a flatfooted opponent -- fuck you, Emily -- and flashed glances left at right at Meg and Shannon.\n\nThe defenders split, tracking the forwards. Fine. Fuck you too, Madison, she thought, winding up and blasting a low shot towards the right corner. The ball smashed into the netting.\n\nNine-three, and game fucking over, Alexandra thought.\n\n\"Nice shot, slut,\" she heard whispered in her ear, arms briefly around her waist. Mmm, Kira smell. Ugh, not here, not now, not that feeling. \n\nThe rest of the team surrounded her, congratulatory hugs and taps on the head.\n\n\"Africa, you did the damn thing!\" said Meg, extending a congratulatory fist-bump.\n\nAfrica? thought Alexandra, tapping hands.\n\n\"Sorry,\" laughed Mette, casting Meg a sideways glance. \"We do Mean Girls quotes around here. It's kind of a requirement.\"\n\nQuick, quick! Mean Girls quote, now! Come on, Henderson. Ah, got it. \"On Wednesdays, do we wear pink?\"\n\n\"Oooh, she's a keeper,\" replied Mette. A little bit of an accent. Somewhere foreign. Tall. Dark hair, ice-blue eyes. Gorgeous. No, Alexandra. Just no! Finish the game.\n\n \n\nShe did, closing out the match with a shot that goalkeeper Madison just managed to block before the referee -- where the hell was he when I was getting elbowed in the ribs? -- blew the final whistle.\n\n \n\nA moment later, fingers teased the small of her back.\n\n\"Hey,\" said Kira.\n\nAlexandra turned. Did anyone else see that? \"Hey. Nice pass.\"\n\n\"Nice finish. Although I already know quite well that you finish nicely.\" She paused long enough for a blush to spread across Alexandra's face. \"Anyway, when we win, we get drinks after.\"\n\n\"In sweaty soccer gear?\"\n\n\"Sometimes. Usually not. Most of us live closer in, so either we go somewhere in the Loop or to someone's house,\" said Kira.\n\n\"And?\"\n\n\"Tonight it's Mette and Meg's place. Which is lucky for us, as they live like eight blocks away.\" Another hesitation, a stare over Alexandra's head. \"I told them I'd tell you the address. Didn't promise you'd show up. Didn't...\"\n\n\"I'll come, stupid,\" said Alexandra. \"I appreciate that you don't want to out me to people I don't know, but I'm your girlfriend, for God's sake. I'm not shying away from that. Besides, I think Luc\u00eda already has the idea.\"\n\n\"True,\" said Kira, green eyes flashing. \"But the chance of Luc\u00eda going from Evanston to our 'hood and back for alcohol -- which she doesn't drink -- and conversation, which she doesn't especially like, are about the same as these chicks letting you walk out of here and never playing again. Which is to say, zero.\"\n\n\"Oh?\"\n\n\"Yeah. Welcome to the team, Alexandra. I love doing that to you.\"\n\n \n\nYou and your double fucking meanings, Kira. \n\n--\n\nKira adjusted the rearview mirror and started the engine. \"You were fantastic,\" she said. \"Like, it's weird that we've been dating for a while, we're both soccer players, and I had no concrete idea how good you are. I'm impressed. Seriously.\"\n\n\"Same,\" said Alexandra. \"I don't think you were out of position once. Did they score with you out there?\"\n\n\"Nope, all three were with you and Mette out there. And I'd put two of those on Wally before blaming any on you.\"\n\n\"Wally?\"\n\n\"Allison -- the goalkeeper's -- last name is Wallace. Having 'Wall' or 'Wally' as a nickname isn't so bad when your job is to stop shots.\"\n\n\"Fair.\" They were on their way, heater taking effect. Alexandra noticed it had been cranked to its maximum level.\n\n\"It's a fairly long ride,\" said Kira, making eye contact. \"I thought we could make it a little more...interesting.\"\n\n\"Interesting,\" repeated Alexandra. She felt her body tighten, an involuntary response to something in Kira's voice.\n\n\"You remember last weekend.\"\n\n\"I do.\" You sat in the passenger seat. Did a striptease on the way back from O'Hare. Left me so wet I assumed I'd left a wet spot on the driver's seat.\n\n \n\n\"How did it make you feel?\"\n\n\"You know damn well how it made me feel,\" replied Alexandra. \"I hadn't seen you in two days and you're over there unbuttoning my shirt from the passenger seat.\"\n\n\"Mhm,\" said Kira. \"Made you want to finger yourself when you were driving, didn't it?\"\n\nAlexandra nodded. She's got that look in her eyes. The one that says \"I'm in charge now.\"\n\n\"Well,\" said Kira. \"You're not driving now.\"\n\nAnd you're not unbuttoning my shirt or giving me a writhing striptease, either. \n\n \n\n\"You want me to...\"\n\n\"Yes,\" said Kira. \"Alexandra, remember the things you say to me when we fuck. Things like 'I'm your slut,' perhaps?\"\n\n\"Yes.\" Alexandra's heartbeat quickened.\n\n\"Are you?\"\n\n\"Yes.\" No hesitation. \n\n\"And I've told you I was going to push you to be more daring sexually, because that's what we both want?\"\n\n\"Yes.\"\n\n\"Why do you want it?\" The Wrangler's engine thrummed as Kira navigated through Saturday night traffic. Despite the near-freezing air outside, Alexandra felt hot. She cranked the heater all the way for a reason. A lump formed in Alexandra's throat.\n\n\"I want to be a better girlfriend for you. A hotter, sluttier version of when we met.\" It's like she flips a switch. A minute ago we were talking about soccer. Now I'm getting turned on. Quickly.\n\n \n\n\"You're already that. But you still want more?\"\n\n\"God yes. I want so much more.\"\n\n\"Put your money where that slutty little mouth is, Alexandra.\" They were stopped at a red light, no car alongside. \"I'll put the Gaga mix back on. Make yourself cum before we get home and I have a special surprise for you tonight. Do it naked and I have surprises for you tonight and tomorrow.\"\n\nAlexandra checked over her shoulder at the traffic around them. The Wrangler's windows were tinted, but were they dark enough?\n\n\"If you're looking around and wondering if the windows are dark enough, you've already made your choice, haven't you?\"\n\n \n\n\"Yes.\"\n\n\"By the way, they are. No worries some Wisconsin bitch in her Civic is going to see you.\"\n\nNot sure I'd mind that much if they did, Alexandra thought. A couple of them were right in my wheelhouse. As is at least one of my teammates.  A mental image flashed. Two. At least two of my teammates. \n\nAlexandra took a deep breath, turning sideways in the seat. Pulled her shirt off, tossing it by her feet. Her pulse quickened. It still makes my heart race every time I take my clothes off in front of her.\n\nShe stared at Kira, who pretended not to notice. Alexandra pulled off her cleats, then her socks, tossing her shin guards onto the growing pile. Last came her shorts, sliding down her legs and pooling at her feet.\n\n\"So, you going to turn on the fucking music yet?\" She heard the edge in her voice. Yes, fuck you, I do want to do this. \n\n \n\n\"Depends,\" said Kira. \"You going to take off your fucking underwear?\"\n\nOh, right. Alexandra shimmied her hips. The fabric slid down her legs, landing on the pile. The bra followed.\n\n\"Good girl,\" said Kira. Music started, bass thumping. Alexandra spread her thighs, opening them towards Kira. Fuck. I'm already wet. Not sweaty. Sticky. Slick. Turned-on. \n\n \n\nThe Lady Gaga mix coursed through the sound system. Alexandra's mind replayed Kira gyrating to it, rubbing her body on Alexandra's.",
        "Without thinking, she'd unhooked her seatbelt. Alexandra fingered herself, her well-lubricated hole easily accommodating two fingers. She closed her eyes. \"Alejandro\" was on; Alejandra, Alejandra, her mind echoed.\n\nThe Jeep stopped. Traffic light. She opened her eyes.\n\n\"Enjoying yourself?\" Kira's lascivious glare traveled down Alexandra's body. Alexandra moved her hand aside, showing her girlfriend the slick, smooth sex. \"I'll take that as a yes. Want to enjoy it a little more?\" Her voice barely carried over the music.\n\n\"Yessss.\"\n\n\"Open the center console. There's a tube of lipstick.\"\n\nThe light changed and Kira looked away. Alexandra began fingering herself again, biting her lower lip. Her free hand drifted to her chest, twisting a nipple between thumb and forefinger.\n\nLow moans escaped her as the world simplified itself: the thumping of a Lady Gaga bass line; the thrum of the engine; one hand rolling her nipple while two fingers of the other buried themselves inside her.\n\n \n\nI can't believe I'm doing this, she thought. If you told me last summer I'd be finger-fucking myself in a moving car with my girlfriend, I'd look over my shoulder and see if you were talking to someone else. Now I'm doing it and loving it.\n\n \n\nAlexandra pinched her other nipple while grinding her palm into her crotch. The flash of brief pain combined with the extra stimulation, unleashing an extra burst of sexual energy. Only the stereo covered the squelching emanating from between her legs.\n\n \n\nThe music's volume lowered. \"No, seriously. Lipstick, center console.\"\n\n \n\nAlexandra opened her eyes. \"So?\" she hissed.\n\n \n\n\"We're almost home. You want to win the bet, don't you?\"  \n\nYeah, and I was doing pretty well before your interruption. They stopped at another light. Kira glared at Alexandra, opened the center console, and pulled out a small gold tube.\n\n \n\n\"It's not lipstick, Alexandra.\"\n\nOh.\n\n \n\nOh. She wants me to win this \"bet.\"\n\n \n\nKira pressed on the bottom of the tube. The stick buzzed, vibrating between the tips of her slender fingers.\n\n\"Go for it. I gotta drive.\"\n\nAlexandra pressed the tip of the vibrator first to her stomach, feeling the surprisingly powerful buzz just above her waist.\n\nA new rush of wetness surged between her legs. And I thought I was soaked before, she thought. Instinct took over and she slid the tip downward slowly, inch by inch until she felt the vibrations on her clit and around her pussy.\n\nHoly shit. Yes. Fucking yes.\n\nHer back arched as Alexandra's free hand again rose to her chest. \"Fuck...Fffff...mmmm.\"\n\n\"Louder, slut. I want to hear you.\" Kira's voice had lost all softness. And I love it when she's that way.\n\n \n\n\"FUCK!\" Alexandra spread her legs wide, her right heel landing on the dashboard. The vibrator pressed directly on her clit, sending pleasure signals through her whole body.\n\n\"Unnnnnnhhhh!\" Her back muscles ached as the tiny toy drove her toward the peak of pleasure. Blood rushed to her center, muscles contracting in ecstasy.\n\n \n\nSuddenly there was a hand under her ass, squeezing tightly. Alexandra opened her eyes. Kira wasn't even looking at her. She's just squeezing my ass like she owns it. Fuckkkkk.\n\n \n\nThe Jeep rounded a corner. Alexandra braced her body against the door, head thrown back, pressed against the cold windowpane.\n\n\"Harder,\" she said, loud enough to be heard over the music.\n\n\"I'm sorry,\" said Kira. \"What was that?\"\n\n\"My ass. Your hand. Harder.\"\n\nKira slackened her hand. \"Say please, slut.\"\n\n\"Pleeeeease,\" Alexandra groaned. So...fucking...close. \"Please squeeze my ass harder, Kira. Fucking please...\"\n\nThe hand clamped down on Alexandra's cheek, nails digging in. A jolt of energy surged through her body. Even with her eyes closed, stars swam across her view.\n\n\"One minute, Alexandra. Time to cum, slut.\"\n\nAlexandra's hips lifted, her body shaking. Only her hand remained steady, grinding the tiny vibrator against her aching clit. The orgasm hit all at once: her body spasmed; she bit her lip; she screamed through her closed mouth.\n\nKira raked her nails down Alexandra's ass.\n\n\"FUCK! YES! YESSSS!\" she yelled.\n\nThe nails reached her thigh as the wave of pleasure crashed over her. She gasped for air, muscles inside her squeezing with every ounce of energy. The stars in her vision became fireworks, then faded to black.\n\nOne more turn of the wheel and they entered the underground parking area.\n\n\"Close one,\" said Kira, turning off the music. \"But you're a winner. Now put your clothes back on, you absolutely gorgeous little whore. We have someplace to be.\"\n\n--\n\nAlexandra's legs were still wobbly when she exited the elevator. Even in her post-orgasmic fog, the horrendous hall carpet retained its usual charm.\n\n\"Wait here,\" said Kira, once inside the apartment. \"I'll get the shower started. You've earned it.\"\n\nInstead, Alexandra walked to the kitchen and ran a glass of water. Her hands shook as she sipped it, mind replaying what she'd just done. Jesus, what has happened to me? It's like this button got pushed within me and it's everything I can do to prevent myself from begging for even more. \n\n \n\nShe shed her clothes on the way to the bathroom. Kira stood in the doorway, a bemused look on her face.\n\n\"You've got the first shower. I'll heat up something to eat for when you come out.\"\n\nOh, right. Food. Yeah, after playing soccer and...well, that activity in the car, I probably should eat something before going to an event that will involve alcohol.\n\n \n\nThe shower refreshed Alexandra, but it also brought practical anxieties. What would she wear? How would she and Kira interact at the event -- underplay their relationship, or come clean to the team? What if the women just plain didn't like her? These were, after all, Kira's friends.\n\nAnd then there's Mette. Who is apparently married to Meg, but who I still can't keep my mind and eyes off of. Just what I need, another crush.\n\nShe stepped out of the shower. Hurriedly toweled off. Thought about drying her hair but was distracted by the kitchen smells.\n\nKira had tossed two plates of gnocchi onto the table, a jar of pesto between them.\n\n\"Needed something quick.\"\n\nAlexandra didn't bother to respond, shoveling the sauce-covered potato pasta into her face as fast as possible.\n\n \n\n\"Uh, guess I was a tad hungry.\"\n\n\"Me too,\" laughed her girlfriend, wiping sauce off her chin. \"And if you don't want your hair to freeze to your head, you might want to dry it.\"\n\n\"Can I borrow your hair dryer?\"\n\nKira rolled her eyes. \"For fuck's sake, Alexandra. You don't need to ask. Yes.\" She stood up, clearing the plates.\n\nAlexandra stood in the kitchen again, guzzling more water. Better. \n\n \n\nIn the bathroom, Kira's head was under the showerhead, her long fingers shampooing luxurious honey-blonde tresses.\n\n\"Kira?\"\n\n\"Yes, dear?\" Far cry from \"slut\" or \"you absolutely gorgeous little whore,\" Alexandra thought.\n\n\"What's the dress code for this thing?\"\n\n\"I bought you something. Your side of the bed.\"\n\n\"Is that one of these mysterious surprises?\"\n\n\"Nope. Just some things you'd look good in. Now go dry your hair while I wash mine, missy.\"\n\nNeatly folded on her side of the bed were a cream-colored sweater and a pair of black jeans. My normal brand and size, just a new color. Girl does details. Next to the pile sat something completely unexpected: a pair of black heels. Nine West, per the label. Chunky heel, but other than that mostly a series of straps, including one around the ankle. Wow. Um. Not the kind of thing I've worn before, and those things are what, four inches high?\n\n \n\nShe removed a bra and thong from her drawer. Sweater thick enough for a black bra underneath?\n\n \n\nYes, it was. Warm, soft. Cashmere, and most importantly, opaque. The jeans fit as expected: perfectly. Alexandra took a deep breath and slid the shoes on, buckling the ankle straps.\n\nFuck. They actually fit well. She's going to expect me to wear them. \n\nThe shower stopped.\n\nOh, right, I actually need to dry my hair.\n\n \n\nAlexandra took off the shoes. Walked to the bathroom carefully, the sudden return to normal posture disorienting.\n\nKira stood outside the shower, dripping. \"I see you found the outfit. Like it?\"\n\n\"Yes.\"\n\n\"Including the shoes?\"\n\n\"Yes. I think.\"\n\nShe flicked on the hair dryer. \"We're sharing this. What does 'I think' mean?\"\n\n\"Means that I'm not absolutely sure yet. But I know I want to give them a shot.\"\n\n\"Good girl. I know you'll look amazing. The jeans look...mmm.\"\n\n\"I know. They feel like that too,\" said Alexandra.\n\nKira slid her hand into the tight back pocket. \"Now shut up. Let's somehow get our hair dry so we're not the last people there.\"\n\n--\n\nA snow flurry had begun while they were inside.\n\n\"Jeez, cold out,\" Alexandra said, cinching the belt on her jacket. Breath steamed in front of her face.\n\n\"Buckle up, buttercup, it's not even Thanksgiving. Speaking of, when are you flying home?\"\n\n\"Tuesday night. You?\"\n\n\"Wednesday. I'll drop you off,\" said Kira.\n\n\"No need. Flying from Midway, so I'll just take the bus over.\" Midway, convenient to class and my apartment, from back when I hadn't basically moved in with Kira. \n\n \n\nKira stuck out her lower lip. \"It's going to be weird not seeing you.\"\n\n\"Yeah.\" Alexandra clomped along the sidewalk gingerly, unused to the height of the heels. \"I'm considering telling my parents.\"\n\nKira laced an arm through her girlfriend's. \"About?\"\n\n\"You. Us. Me.\" Meaning, \"I am considering coming out to my family and telling them that I'm dating a woman.\"\n\nKira said nothing for a long while. It was different walking arm-in-arm now, most of their height difference erased by the shoes.\n\n\"I came out at Christmas, five years ago.\" Kira said, blowing a cloud of hot breath into the night sky. The air smelled of chestnuts, roasted by a street vendor somewhere nearby. \"My mom was pissed. I was glad to get the fuck out of there the next day and not see them for six months after that.\"\n\n\"So you're saying...\"\n\nKira stopped. She kissed Alexandra's lips softly, her hand lacing through her girlfriend's hair. A warm sensation spread through Alexandra. Such a perfect touch. Perfect timing.\n\n \n\n\"I'm only saying that's what worked for me. In fact, if your parents aren't going to take it well-\"\n\n\"They aren't. Him, at least. I don't know about her. Let's just say my father believes every one of the Catholic church's teachings on homosexuality.\"\n\n\"Yeah,\" replied Kira. \"My mom's pretty conservative, too. Point is, Thanksgiving was my original plan too, but then I realized if I did it then, I'd be right back there in a month and she'd still be raging.\"\n\n\"Let's walk,\" said Alexandra. I hadn't thought of that perspective. Now, concentrate on not turning an ankle on this cracked sidewalk. \"And talk about something else. Tell me more about our hostesses.\"\n\nKira exhaled deeply again. \"Mette and Meg are the relationship I thought I always wanted,\" she said. \"The life I thought I always wanted.\"\n\n\"Meaning?\"\n\n\"Well,\" said Kira, stopping at a black door. \"You're a big girl. See for yourself.\"\n\n \n\n--\n\nMette and Meg's place turned out to be a three-story rowhouse. Brick exterior, light wood floors, minimalist d\u00e9cor. Most of the team had already gathered, spilling out of the open-plan kitchen and into the living area, where a fire flickered in the gas-fed fireplace.\n\n\"Drinks are in the kitchen,\" said Meg, taking Alexandra's jacket. She'd replaced her soccer uniform with a navy tunic dress and black tights, and she whizzed around the gathering with the efficiency of someone accustomed to hosting gatherings.\n\nKira split off halfway to the kitchen, catching a hug from Allison -- Wally, Alexandra's mind filled -- and leaving Alexandra alone.\n\nNice place. White cabinets, dark counters. Large kitchen island covered with all manner of drinks, alcoholic and otherwise. Wine glasses hanging from a rack above.\n\nAlexandra pulled one down and removed the cork from a half-full bottle. Tannat, the label read. Never heard of it. But it's dark red and someone else is drinking it, so...\n\n\"So, New Girl, welcome to my house.\" Mette had snuck up behind her.\n\n\"Thank you,\" said Alexandra. Wow, um, she's...stunning.  Even in her heels, Mette towered over Alexandra. Her dark hair was down now, a razor-sharp bob just below her chin. Same ice-blue eyes.\n\n\"Don't let me stop you. So, you're a red wine drinker?\"\n\n\"I am,\" said Alexandra. \"Usually the bolder, the better.\"\n\n\"You'll like that one, then.\" There is indeed a hint of an accent in there. And her name, Mette? \"You played really well today, so if nobody else did, let me welcome you to the team.\"\n\nAlexandra beamed. \"Thanks. It's great to be...here. Um, your house, I mean. It's beautiful.\"\n\n\"It should be, considering what we paid to renovate it.\" She was wearing a poncho-style sweater, red wool with a blue cross outlined in white. Big bold eyebrows, no-nonsense hair, thought Alexandra. Tight lips, just like during the game. Not a smiler. \"So, tell me. Outside of soccer, what do you do for fun?\"\n\nAlexandra poured the wine. Glad she didn't ask me what I do for work. \"I'm a runner. I like to travel when I can, I guess. I read a lot, especially in winter.\"\n\n\"Read what?\"\n\n\"Murder, mostly.\" She waited for a reaction from the taller woman and got one: a small, tight smile. \"Violence in dark settings. Crime fiction.\"\n\nMette laughed now, her smile broadening to show glittering white teeth. \"Well, now you're speaking my language, even if a fair amount of the crime fiction from dark settings I read is written in Norwegian. What are you reading right now?\"\n\n\"The most recent Jo Nesb\u00f8, actually.\" Oh, duh, Alexandra. Her sweater is a fucking Norwegian flag. \n\n \n\n\"Yep, very dark. But very atmospheric, at least in Norwegian. Although I must say, sitting here in Chicago reading about winter in Oslo is actually hoping for a small upgrade, isn't it?\"\n\n\"Don't know,\" said Alexandra. \"Never been there.\"\n\n\"Oh, it's beautiful in the winter, said Meg, sliding up and placing her fingertips on her wife's arm. \"Dark all the time, grey when it's not, and with some tropical-like winds off the fjord!\"\n\n\"So, like Chicago?\"\n\n\"I like you, New Girl.\" Clearly not her first glass of wine, competent hostess duties aside, thought Alexandra. \"But no, Oslo winter is much better. And there's skiing nearby. Skiing beats frozen, empty cornfields in my book. So, I hope my wife was not giving you too much of a hard time?\"\n\n\"No, actually we were talking about books. Specifically, the ones I read that you hate,\" replied Mette, returning her spouse's touch.\n\n\"Oh, no,\" said Meg. \"New Girl. Don't tell me you're one of those.\"\n\nDrunk, snarky, flirting? Alexandra's mind circled back. \"I am, sorry to inform you.\"\n\n\"But at least you have great taste in shoes. Nine West, right?\"\n\n\"Wow, yeah,\" said Alexandra.\n\n\"Ignore my wife, Alexandra. Meg spends about half her salary on shoes. She's probably got three pairs of that same shoe in her closet and only knows she has two.\" Mette stepped casually away from the island. \"Come on, no need to stand by the bar.\"\n\n\"So, online or...where do you shop?\" asked Meg.\n\n\"Actually, Kira got them for me,\" Alexandra responded. They were in the living room now. Flat-screen mounted on a bare brick-wall. Tasteful, subdued art. Once exception: a large reproduction album cover. The Eminem Show.\n\n\"Told you,\" said Mette, winking at her wife.\n\nOh. \n\nShe spoke to Alexandra next. \"So, how long have you and Miss Manning been seeing one another?\"\n\n\"A...about a month.\" Her eyes searched the room. Found Kira near the front door, arms crossed while Wally talked with her hands.\n\n\"And she's already introducing you to friends. You two must be doing well.\"\n\n\"I... I think so.\"\n\n\"I know so,\" said Mette. \"I've known Kira for, what is it? Six or seven years? Six, I think. And she has literally never introduced me to anyone she was dating.\"\n\n \n\nA lump formed in Alexandra's throat. \"Well, she didn't exactly introduce me as...\"\n\n\"Honey, please. As soon as you walked into the gym tonight, it was completely obvious.\"\n\nObvious how? And can Kira please come over here and save me? \n\n\"Anyway, what do you want to know about Kira Manning that she's not likely to tell you?\" asked Mette, a flash in her eyes.\n\n\"What's her family like? Honestly, not what she'll tell me to avoid scaring me.\" It had slipped out without any thought.\n\nMette and Meg exchanged a glance. The poster. Mette and Meg. M and M. The Eminem Show. \n\n \n\n\"Kira's dad is Ken Manning,\" began Mette. She tucked a sheaf of dark hair behind her ear. More friendly that way, thought Alexandra. \"He used to be my boss. He's now the managing partner of a major law firm's Houston office. Not the same firm I work at nowadays, but that doesn't matter. Ken's also the former general counsel of an oil company and was almost nominated to be Secretary of Energy. He's an absolutely brilliant lawyer and yet an incredible mentor.\"\n\n\"And her mom?\"\n\n\"I don't know her as well. Only met her a couple times at firm events. But Patty is a former Miss Texas and hasn't worked a minute in her life, which probably tells you what you need. Do you know Houston well?\"\n\n\"Not in the slightest,\" said Alexandra.\n\n\"Huge, sprawling city. The single nicest neighborhood is called River Oaks. That's where Ken and Patty Manning live.\" In other words, they are rich. Very rich. \"Each year, our firm had a summer associate event hosted at a partner's house. My summer, it was at the Mannings'.\"\n\nMeg looked on with a bemused expression, as if a punchline was coming.\n\nMette landed it. \"Alexandra, their kitchen is the size of this entire floor. Their pool is the size of this entire floor. I know everything is bigger in Texas, but I swear, that is the nicest house I've ever seen.\"\n\nAlexandra caught her breath. It had been obvious enough that Kira had some means; the casual, nothing-to-it gifts had tipped her off. But this image didn't match with a woman who drove a decade-old car and lived in a one-bedroom in a building with carpeting from the Nixon administration. What am I supposed to make of all that?\n\n\"Anyway,\" Meg added, winking, \"probably plenty more Nine West in your future if you want it, lady. Or, you know, Ferragamo. Aim high, right?\"\n\n\"Meg.\" Mette's tone was flat. \"Kira's family has money. Don't get New Girl here thinking Kira herself is made of Benjamins.\"\n\nAlexandra laughed, trying to defuse the situation. \"I don't. I...well, I'm a middle-class girl from Pittsburgh, so I'm not even sure what Texas-style rich is, let alone expect it to come my way anytime soon.\"",
        "\"Good girl,\" said Mette. A shiver went down Alexandra's spine. She says that exactly the same way Kira does. Same intonation. Except when Kira says it, I'm usually eating her out. Or promising her something. Something boundary-pushing. \"But now that I've told you something you wanted, do you have any secrets about Kira that you think her friends might not know?\"\n\nBesides that she has a girlfriend who needs another drink? \"Um, do you know about the art skills?\"\n\nMette cocked her head. \"No. I don't. T-\"\n\nMeg cut in again. \"Wait, you remember that drawing she has on the wall of her place? Of the airplane?\"\n\n\"Not really,\" said Mette, long fingers running through her stick-straight hair.\n\n\"It's a 737.\" She turned back to Alexandra. \"I fly them. Yes, I know her brother does too. Different airlines. Anyway, you're saying she drew that?\" Huh. A lesbian couple. Lawyer and a pilot. Eat that, 1950s, thought Alexandra.  \n\n\"I am.\"\n\n\"Drew what?\" The touch on the small of Alexandra's back was as unmistakable as the voice. Kira.\n\n\"Your girlfriend was just telling us about your art talent,\" said Mette, teeth gleaming. Maybe I need to re-evaluate the no-smiling thing. \n\n\"The plane. On the hallway wall,\" Alexandra said. \"And yeah, I kinda spilled the beans. Sorry.\"\n\nKira wrapped an arm around her and kissed her cheek. \"Why would I be upset? Not telling someone something isn't the same as being embarrassed about it or anything.\" You mean like coming from one-percenter wealth? \"Anyway, yeah. I draw. Sketch, really.\"\n\n\"What she means, ladies, is that Kira carries a sketchbook and pencils in that giant-ass purse all the time and sketches something amazing at least once a day.\" It was a true statement: Kira had left her sketchbook out the prior night. Alexandra had paged through it, amazed at the skill and range of drawings.\n\nMette cocked her head to the side. \"Huh. I didn't know lawyers were allowed to do anything interesting.\"\n\n\"I'm a law student,\" laughed Kira, arm tight around Alexandra. \"I still need to graduate before I can work on boring y'all to tears.\"\n\n\"She'll take some beating,\" said Meg, nodding to her wife. \"But she's got some other virtues.\"\n\nNow Mette blushed deeply, crimson cheeks at the obvious innuendo. \"So. More wine, ladies?\"\n\n--\n\nKira and Alexandra had one more glass each before making their excuses and beginning the walk home.\n\n\"It was nice to meet all of them socially,\" said Alexandra. It had gotten colder, the snow beginning to stick.\n\n\"Want to call an Uber?\"\n\n\"Nah. I can make it.\"\n\n\"Famous last words. But yeah. They really liked you, all of them. Even wavy-arms Wally.\"\n\n\"I talked to her for like five minutes, and she was shitfaced.\"\n\n\"That's the best way to talk to Wally.\"\n\nNeither of them said anything for a moment.\n\n\"What'd you think of Mette?\" Alarm bells sounded in Alexandra's head. Something off about that tone. \n\n \n\n\"Um, she was nice.\"\n\n\"No, really.\"\n\nA car passed, driver throwing a cigarette out the window into traffic.\n\n\"Why?\"\n\n\"Because Mette Riis doesn't like anyone. Anyone. Except for Meg and possibly me. But she was looking at you like you were the greatest thing to walk into her life in years. What did you say to her to get that effect?\"\n\n\"I told her I liked books.\"\n\nKira threw her head back in laughter. \"Sometimes you don't get it, Alexandra, do you?\"\n\n\"Um. I guess not.\" My ankle's starting to hurt. Can I ask her to stop for a minute?\n\n \n\n\"You have that rare gift of being able to find common ground with anyone. To talk to anyone, get them to open up. Even if you seem to never use it, it's there. It's amazing. It took me like six times meeting Mette before I ever saw her smile.\"\n\n\"She has a beautiful smile,\" said Alexandra.\n\n\"She does. She's an extremely beautiful woman, actually, in my view.\"\n\n\"Mine too.\" Talking without thought again, Alexandra. Going to get you into trouble. \n\nKira stopped walking. She looked at the sky. Took Alexandra by the hands.\n\n\"Remember what we talked about on the way over?\"\n\n\"Which part?\" Only three more blocks. Ow.\n\n\"I said Mette and Meg are the relationship I always wanted.\"\n\n\"Yes. They're awesome together.\"\n\n\"They are. Mette and Meg were the relationship I always wanted. Until I met you, Alexandra.\"\n\n\"That's --\" A snowflake landed on Alexandra's tongue, cutting her off. Kira took a deep breath. Looked away. Looked back into Alexandra's eyes, the emerald green of her own bright and watery.\n\n\"What I'm really bad at trying to say, Alexandra, is that I love you. I fucking love you.\"\n\nSnapshots, thought Alexandra. Memory is just snapshots of moments in time. And this one? Snowflakes falling, a cold Chicago night, my lips about to meet Kira's again? Yeah, this is one I'm going to remember a long while.\n\n \n\n\"I love you too, Kira.\" She smiled. \"Fucking love you, even.\"\n\nThere was snow in both women's hair before they broke the kiss.\n\n--\n\nAlexandra hung her coat in Kira's hall closet.\n\n\"Oh, I tell you I'm in love with you and you finally hang up your clothes?\" teased her partner, wrapping her arms around Alexandra's waist.\n\n\"What, you don't prefer them on the floor?\"\n\n\"Some of them,\" came the whispered reply. Alexandra felt her hair swept aside, a hungry kiss on her neck. \"Remember that you earned a surprise earlier tonight?\"\n\n\"Mhm.\" I won't tell her that I would have done it anyway, let her watch me get myself off in her car while she drove. \n\n \n\n\"Good. Wait here.\"\n\nAlexandra stood in the hallway, tingling sensations running throughout her body. Surprises from Kira tended to come in only one species -- sexual -- and thus far every one had been overwhelmingly pleasurable. Her girlfriend disappeared into the bedroom. The rest of the apartment radiated silence and darkness.\n\n\"You can come in now.\"\n\nHer feet clunked across the hardwood floor, heels echoing. Kira stood next to Alexandra's side of the bed. She pointed at the floor.\n\n\"Under the bed. It matches my side now,\" said Kira. \"I thought now was a good time to present it, given your fun with the lipstick one earlier.\"\n\nAlexandra bent down and grasped the plastic object, weighing it in her hand. Of course I've seen the one under Kira's side of the bed. She's hardly one to hide it.\n\n \n\n\"Hitachi Magic Wand,\" said Kira. \"Rated the #1 sex toy on the planet since...oh, ever.\"\n\n\"I've...heard of them,\" managed Alexandra. It was already plugged in. \"Thank you.\"\n\n\"You're welcome. Just promise not to make me obsolete. If I wake up in the middle of the night and hear a buzzing sound, Alexandra, you are going to be in so much trouble.\" There was a glint in her green eyes, looking down at Alexandra. Just try me, it said.\n\n\"What sort of trouble, my love?\" She stood straight, looking Kira in the eyes.\n\n\"Oh, I don't know. Perhaps exactly the sort you're constantly on the edge of asking for. Begging for.\" She stepped towards Alexandra. \"Another glass of wine before we...continue our evening?\"\n\n\"Please.\" Continue our evening. It's already ten-thirty. I like the sound of this.\n\n \n\n\"Then please pick a bottle from the kitchen and pour us a couple glasses. I'll follow.\"\n\nAlexandra selected a bottle of cabernet sauvignon, opened it, and poured two glasses. She waited. Pulled out her phone.\n\n\"Kira?\"\n\n\"Just a minute,\" came the response.\n\nFine. Alexandra Googled the wine -- GOTT, the gold label read -- and chuckled. Yeah, Rich Texas Girl. Grad student with a rack full of fifty-dollar wines that we drink like they're water. \n\n \n\n\"Ahem.\"\n\nAlexandra nearly dropped her glass when she looked up. Kira was no longer wearing a polite sweater. Or flats. Or much of anything. Rather, her long hair flowed just over the top of a black corset, lace at the bottom showing her tanned skin underneath. High-cut underwear came next, followed by lace-topped thigh-highs and stilettos, all also black.\n\n\"Sorry,\" she said, picking up her glass and ignoring Alexandra's hungry look. \"It's a bit of a challenge to put on a corset solo.\"\n\n\"Do I still have to drink this wine?\" Alexandra's skin flushed. Her eyes fixed on Kira, taking in the contrast between the black fabric and her honey-blonde hair.\n\n\"You do. And I'd rather you do so in something a little more appropriate. You're wearing the usual underneath that?\"\n\nAlexandra nodded. The usual. Meaning the matching bra and thong that I owned two pairs of when I started dating Kira. Now I own eleven. I think. \n\n \n\n\"Good, then.\"\n\nThe sweater went off first, sliding over Alexandra's head in a curtain of brown hair. She looked up at Kira, who nodded.\n\n\"Put them back on after,\" said the blonde, sipping her wine.\n\nAlexandra understood. She wriggled out of the jeans. Folded them neatly with the sweater. Stepped back into her heels and buckled the straps.\n\n\"Better. Cheers,\" said Kira.\n\nThey clinked glasses. Dark liquid swirled as Alexandra stood toe-to-toe with her partner.\n\n\"There are some times I don't quite believe this is happening to me,\" Alexandra said. \"A month and a half ago... well, let's not go there. Let's just say I know what I'm most thankful for this year.\"\n\n\"Yes?\" Kira raised her glass, sipping. God, those soft, kissable lips. I used to just be jealous of women with lips like that.\n\n \n\n\"You. Meeting you. Does tonight count as meeting your friends?\"\n\n\"Yes.\" Another sip of wine. \"And more important, you liking them and them liking you.\"\n\nAlexandra took her turn to drink. There was more to this.\n\n\"I wasn't wrong about Mette liking you, by the way.\"\n\n\"Oh?\"\n\nKira strutted off to the bedroom. Alexandra's eyes followed her, hips swinging as she walked, and then the opposite view as she returned.\n\n\"Here,\" said Kira, holding out her phone.\n\nMette Riis, said the top of the text-message conversation. Below it, conversation about soccer logistics. But the very bottom, two words from Mette, no context.\n\nMette: She's perfect.\n\nAlexandra stared. Handed the phone back to Kira. \"She said she'd never met anyone else you've dated.\"\n\n\"That's right. Funny, nobody else I've met could kick ass on a soccer field, make me desperately horny, impress my friends, and then stand in my kitchen drinking nice wine in her underwear and heels -- making me desperately horny again. And that's without going into the fact that you're fucking brilliant. Can't imagine how that got you to the top of the pile.\" She smiled. \"Oh, and you're a filthy little slut. That's...kinda important.\"\n\nKira stepped forward, brushing Alexandra's hair aside. With her own heels, she towered over Alexandra again.\n\n\"You don't think so?\" Her fingers traced Alexandra's side, from her bra to the very top of her hip.\n\nI know I am. Alexandra said nothing.\n\n \n\n\"Good girl.\" She pulled back slightly, but her voice stayed low. \"Now that we've admitted we're in love, does that up the trust factor?\"\n\n\"Yes.\" Another big swig of wine.\n\n\"Good. I'd like to try something new with you tonight.\"\n\n\"I'm game.\" Just the phrase 'something new' from her mouth makes my pussy start to gush. I hate that. I love that.\n\n\"Good girl. I love that we have this wine tradition. A glass when we come home.\"\n\n\"Sometimes a bit after,\" said Alexandra, winking jokingly.\n\n\"Sometimes,\" said Kira. \"Do you prefer how I'm dressed for it tonight?\"\n\n\"God yes. Kira. Seriously, you look...\" She really didn't have a word. Not even gonna try. \n\n \n\n\"I like it too. I was wondering if you'd like to make it a little more regular. For you too.\" She raised her glass.\n\n\"Regular?\"\n\n\"Like, say, nightly.\"\n\n\"Nightly. Every night?\"\n\n\"Every night,\" said Kira. \"If it's convenient, of course. Obviously, we might need to buy you a little more lingerie. Or a lot more. But as our relationship matures, I want to make sure we never lose the sexuality. Because face it, this is who we are: in-your-face, fiery, slutty sexuality.\"\n\n\"Wine and lingerie. Every night,\" said Alexandra.\n\n\"One glass. And heels, at least for you. Your legs, at that party? Good lord, Alexandra.\"\n\nShe stood, feeling the room's air on her barely-clothed body. Her heart thumped in her chest, hormones racing. Damn, I hate that my body is giving me away again. I feel like I'm about to soak through my underwear.\n\n \n\n\"Yes.\"\n\n\"Yes?\"\n\n\"Let's do it. Every night, we get home, we change, we pour a glass of wine, we talk about each other's days while we try to keep our hands off each other,\" said Alexandra.\n\nKira grinned. \"Finish that wine. That wasn't the something new. But it does involve your hands. Or not, as the case may be.\"\n\n\"I'm ready,\" replied Alexandra, before savoring the last of the fruity, full-bodied wine.\n\n\"No, you're not,\" said Kira. \"But that's quite alright. Take my hand, love.\"\n\n--\n\n\"Comfortable?\" Kira's voice had taken on its familiar, commanding bedroom air.\n\n\"Yes.\" Alexandra stood, back to the bedroom door. Her hands were restrained in soft cuffs, held above her head by the taut nylon straps.\n\n\"You look beautiful like this, you know.\" Kira stood back in the room, appraising Alexandra from every angle. Alexandra had put her hair into a bun, but otherwise remained the same.\n\n\"As do you.\" Thanks to the mirrors Kira had installed several weeks back, Alexandra could see every angle of her girlfriend's body. The muscles in her back were tight, and her calves tapered down to the narrow stiletto heels.\n\nShe approached Alexandra, heels clicking on the floor.\n\n\"But do you feel beautiful?\"\n\n\"Yes, said Alexandra. You make me feel more beautiful than I ever have in my entire life.\n\n \n\n\"Good. And you trust me.\"\n\n\"Completely.\"\n\nKira was against her now, her large breasts grazing Alexandra's chest. Hands tracing up her sides again, unguarded by her arms.\n\n\"You liked that I picked your shoes for tonight. Suggested your entire outfit.\"\n\n\"Yes.\" Why is this making me wetter than anything else tonight? God, my knees are getting weak.\n\n \n\n\"Why?\"\n\n\"I...I wanted to look hot for you.\" A hand rounded her hip, finger hooking into her thong. A shiver went down her spine.\n\n\"I like that answer.\" I do too. \"Do you want to do that more often?\"\n\n\"Do what?\" You shouldn't tease her like you don't know.\n\n \n\n\"Let me pick your outfits. Especially,\" she gestured around her, \"in our bedroom.\"\n\nOur. Don't think I missed that. Our bedroom. \n\n \n\n\"I think so.\"\n\nThe back of a hand, running over her abs. Tension in response. \"Yes or no, Alexandra.\"\n\n\"Yes. I trust you.\"\n\n\"Good. I have a question for you.\" This one softly, breath hot on Alexandra's cheek.\n\n\"Yes?\"\n\n\"Last week, you picked me up. Wore a flannel shirt and Chucks. Your idea, or someone else's?\"\n\nThe soft brushing of lips on her cheekbone. A breath again. Silence.\n\n\"I thought so,\" said Kira. \"Katy?\"\n\n\"Katy.\"\n\n\"She has great taste.\" She tastes great, too. No, not the time for sarcastic retorts. \"Don't you agree?\"\n\n\"I felt different dressed like that.\"\n\n\"Clothes are a fantastic way of expressing yourself, aren't they?\"\n\nKira stood back, letting Alexandra see her full length. Heels, stockings, skin, underwear, corset. Shoulders. Long, luscious tresses.\n\n\"Yes,\" said Alexandra.\n\n\"And mine say?\"\n\n\"Confidence. Sexuality. Power.\"\n\n\"Good. Yours?\"\n\n\"Underwear and four-inch heels, arms restrained above my head? That says 'slut' to me.\" And I like that it does. Thank god for the thong. Otherwise I'd have cunt juice running down my leg.\n\n \n\n\"How do you feel about that, my love?\"\n\n \n\n\"I love it.\" Alexandra could hear the change in her voice. Breathy now.\n\n\"Good,\" said Kira. She tilted her head to the side. \"You'll like even more next time, when it's a lingerie set and six-inch heels.\"\n\nFuck. Wow. I've never worn anything more than three inches before tonight. Next week, she's doubling that. And...I like it. \n\n \n\n\"Won't you?\"\n\n\"Yessss.\"\n\n\"Good.\" Kira strutted around the room, regarding Alexandra from every angle. Bent over next to Alexandra's side of the bed. \"I think it's time that we break this in, isn't it?\"\n\nAlexandra felt her breath shallow. \"You're going to...\"\n\n\"Yes. Honey, don't even pretend this doesn't turn you on.\" She approached, holding the vibrator. \"I can see the wet spot. Stand with your feet apart, please.\"\n\nKnees weak, Alexandra moved her feet apart slightly. Kira inserted her hand, massaging over Alexandra's thong.\n\n\"Mmm,\" Alexandra moaned. I need her. Badly.\n\n \n\nThe kisses began behind Alexandra's ear, running down her neck. Kira's free hand traced Alexandra's backbone, then came around to rest on her hip. She closed her eyes. Kira's lips brushed her shoulder. Skirted the top of her breast. Alexandra felt hot breath through the lace top of her bra.\n\n \n\nAnd then a pause. An absence of body heat next to her. No soft lips on her eager skin.\n\nOh. She has to plug it in.\n\n \n\nThe hum started a second later, a low buzz somewhere to Alexandra's right.\n\n\"And now the real fun starts,\" whispered Kira in her ear. A finger traced her collarbone, then between her breasts. Kira paused long enough to slide it underneath Alexandra's bra, brushing her left nipple.\n\nAlexandra gasped. The hum was lower now, by her hip. Kira's body blocked her from seeing its source.\n\n\"Good girl. This is the lower setting. Let's see how you do with it.\"\n\nThe Magic Wand's head touched Alexandra's body, buzzing changing tone when it contacted the lace of her thong. Her body jolted. So much different from that little lipstick vibe earlier.\n\nShe let out a moan. The vibrations, even through the barrier of her underwear, sent pleasure through her whole body. Her hands clenched far above her head, pulling on the restraints.\n\n\"Look at me, Alexandra.\" Voice even, tone commanding.\n\nAlexandra's eyes focused on Kira.\n\n\"If I offered to take your hands down and hand you this vibrator, what would you say?\"\n\nThe buzzing moved upward, closer to her clit. Alexandra moaned again.\n\n\"Hmmm?\"\n\nI can't fucking think, let alone talk. \n\n \n\n\"No,\" Alexandra croaked out.\n\nThe hum stopped. The vibrations disappeared. I can actually feel my cunt dripping, Alexandra thought. And that's the word for it. My cunt.\n\n \n\n\"Why not?\"\n\n\"Because I'm yours, Kira. I want this. Just like this. You know that.\"\n\n\"I do.\" Kira nibbled on Alexandra's earlobe. \"I just like hearing you say it sometimes. Do you want more?\"\n\n\"Please,\" gasped Alexandra. Only without the vibrations do I realize how close I was to cumming, and that was with it outside my underwear.",
        " \n\n\"You'll have to do a little better than that, slut.\" The vibrator -- still off -- rubbed the outside of Alexandra's sex, tracing her lips. \"Tell me why you deserve more.\"\n\nAlexandra sucked in air, eyes fixed on Kira's.\n\n\"Because I've been such a good slut for you, Kira. I showed off for you in the car...\"\n\n\"You did.\" Kira's fingers replaced the vibrator, then slid inside the thin fabric. Alexandra shivered. A single finger worked its way down the wetness, pushing her labia gently apart. \"And I can expect more of that?\"\n\n\"Fuck yes, you can.\" The finger entered her. Alexandra's body tightened in response. \"You know what a slut I am, Kira.\"\n\n\"Are you?\" Kira's breath hot against Alexandra's ear, a second finger sliding into her with the squelching sound of too much wetness.\n\n\"God yes. You've made me like this.\"\n\n\"Like what?\" Cold air now where her panties had been, hands sliding down her legs.\n\n\"A perfect little lesbian slut, Kira. Your little fucktoy.\"\n\n\"Oh, is that what you are?\" Kira's tone was light now, as if she were discussing nothing important. Her fingertips rested on Alexandra's mound. She can tell how hard I'm breathing, Alexandra thought.\n\n\"Yesss.\" The buzzing restarted.\n\n\"I've always wanted one of those. And you, such an intelligent, innocent-looking woman.\"\n\n\"Fuck you, Kira.\" The words escaped too fast. \"You want me to look like a fucking slut, I'll look like a fucking slut for you.\"\n\n\"Look at me, Alexandra.\" Same as before. The vibrations brushed her skin just above the fingers. Fuckkkkkk.\n\n \n\n\"Remember that you earned two rewards earlier?\"\n\nAlexandra nodded.\n\n\"The second one is a mani-pedi we're going for tomorrow. Only one thing.\"\n\n\"What?\" The fingers moved, replaced by the head of the vibrator. \"Mmmm...fffff...\" Right fucking there. God. And this is the low setting? Kira's tongue traced the top of Alexandra's ear.\n\n \n\n\"A choice for you, Alexandra.\"\n\nEnough fucking choices. Just make me cum. Alexandra's knees grew weak, her thighs and abs contracting. Her arms strained against the straps, jerking her body upward.\n\n\"Do you want to pick your color tomorrow, or do you want me to pick?\" Kira hadn't moved her head. Her breath was hot on Alexandra's neck as the blonde woman awaited her answer.\n\nAlexandra's pussy gushed, the Hitachi now aimed squarely at her clit. Not \"pussy.\" \"Cunt.\" My cunt. The pleasure-pain feeling of an approaching orgasm slammed into her. Muscles contracted in her core, in her legs, in her arms.\n\n\"Well?\" The vibrator stopped. \"You or me?\"\n\nAlexandra glared at her. \"You know the fucking answer.\"\n\n\"Oh?\" Kira raised one eyebrow in mock surprise.\n\n\"You. I want you to pick.\"\n\n\"Good girl.\" Kira kissed the side of her neck. \"You're going to look so sexy.\" And \"sexy,\" to you, is hardly subtle. You in your fucking corset and thigh-highs, teasing me right on the edge of an orgasm. \n\n \n\nKira leaned her body into Alexandra's. Her breasts pressed against Alexandra. I want to rip that fucking corset off her. But I can't. My hands...are tied up.\n\n \n\nWaves began to synchronize through Alexandra's core. Her back arched, sweat beading on her skin.\n\n\"Unnnh. Unnnn...\". Moans transitioned to bare grunts. Her eyes slammed close. God, so close. \n\n \n\nThe vibrator stopped. What. The. Fuck.\n\n \n\n\"Do you want to know?\" Kira hissed into her ear. \"What your nails will look like by this time tomorrow?\"\n\nAlexandra bit her lip. Her midsection sat on the edge of spasms. Poised to explode. I probably can't talk, but I can nod. So she did.\n\n\"Red. Same dark red as that lipstick you wear. French manicure, white tips.\" The vibrator's head pressed hard on Alexandra's clit. Fuckkkk... It stopped again. Fuck you, Kira. I was literally three seconds from cumming. \"Yeah, I know. French manis are so fucking last decade. So sue me. I love them on gorgeous, slutty women. Like you.\"\n\nMore vibrations. Alexandra felt sticky juices flowing, leaking down her thigh.\n\n\"Pleeeeease, fuckkkkk...\" This time the vibrator did not stop. Instead, the noise changed. Higher-pitched. The sensation did, too: it slammed into Alexandra's body, overwhelming any resistance.\n\n\"FUCK! AHHHHHHH!\" Alexandra screamed as her body contorted in orgasm. Everything from her abs to her calves clenched tightly. Her hips jutted forward, pressing hard against the stimulation.\n\n\"GAH! AAH! FUCCCKKKKKK!\" Her arms pulled with all their might, muscles tensing against the restraints. \"Eeeeeeeeeee!\"\n\n\"AH! FUCK! CUMMINNNNNNG1\" The high-pitched yell punctuated her orgasm's crest. Alexandra's head turned to the right, eyes locking on Kira's.\n\nThe blonde grinned, turning the vibrator back down to low, then off. Alexandra's legs collapsed as her exhausted body came down.\n\nShe felt a hand on her back, holding her upright.\n\n\"Easy there.\" Kira's voice had switched to soothing. Her lips brushed Alexandra's. Kissed her tenderly.\n\nAlexandra heard Velcro being pulled. One arm dropped to her side, then the other. Wow. I didn't realize how lightheaded I had gotten. \n\n\"Let's get you off your feet, lover.\" Kira's hand took hers, ushering her to the bed.\n\nAlexandra's head swirled. Not with organized thoughts, but with the muddled unclarity of post-orgasmic glow. She lay on her side, Kira's arm wrapped around her, breasts pressed into her back. She interlaced her fingers with her girlfriend's, memories flashing back. Dark red. French manicure.\n\n \n\n\"You meant that, didn't you?\" Her voice was barely a whisper.\n\n\"What?\"\n\n\"About my nails.\"\n\n\"Yes,\" said Kira, kissing Alexandra's neck. \"You trust me enough?\"\n\n\"I do.\"\n\n\"Good, because I meant something else, too.\"\n\n\"What?\" asked Alexandra.\n\n\"That I love you.\" Her hand squeezed Alexandra's. It's these moments that are incredible to me, she thought. Relaxing in her arms, feeling her warmth. Smelling her scent mingling with mine.\n\n \n\n\"I love you too.\" I'm on your bed, wearing a bra and heels, nothing else. And I love you. I want more of this, so much more of this.\n\n \n\n\"I'm so excited to be with you, Alexandra.\" Another kiss on the side of her neck. \"I didn't mean for this to happen so fast, but I'm happy it did.\"\n\n\"Same.\" I didn't mean for this to happen at all, Alexandra thought.\n\nKira's fingers squeezed hers again. \"You ready for another glass of wine?\"\n\nAlexandra groaned. \"Yes. But only if I don't have to move.\"\n\nKira laughed. \"You've just spent the past however long unable to move, and you want more of the same?\"\n\nAlexandra rolled over. \"Yes, please. With wine.\"\n\nShe kissed her girlfriend's lips, savoring the familiar taste. Just like this. With wine.\n\nI hope you're all enjoying this story so far. If you are, please leave a comment, a rating, or send some feedback privately. It's the acknowledgement from y'all that makes this most rewarding. Stay safe and I can't wait to bring y'all the next chapter. ~BE \n\n \n"
    ],
    "authorname": "Blair_Erickson",
    "tags": [
        "college lesbian",
        "high heels",
        "lesbian",
        "lesbian bdsm",
        "lesbian submission",
        "lingerie",
        "restraints",
        "submission",
        "vibrator"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/a-new-alexandra-ch-09"
}
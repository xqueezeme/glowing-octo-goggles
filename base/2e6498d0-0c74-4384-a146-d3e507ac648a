{
    "title": "A Handyman's Memoir Ch. 16",
    "pages": [
        "There wasn't much work to do at Julia's house the next day, so I took care of a couple of small jobs for other customers in the morning and got to her place after lunch. A buddy called me while I was there to see if I wanted to go to a music club that night to see a good band. I thought Julia would enjoy it, but she seemed exhausted. The first part of the week had taken a lot out of her, especially the previous night's art class experience, and she needed some quiet time to rest up. I thought about calling Ally, she had been to the club with me and enjoyed it, but I decided to take a night off from the ladies and just meet my friend Mark there. I put the final coat of joint compound on Julia's walls, and we sat out on her porch and relaxed the rest of the afternoon.\n\n\"So what are your thoughts about last night,\" I asked.\n\n\"I still can't believe we did that!\" she said excitedly. \"But I loved it! It's hard for me to fathom just how much I loved it. It gives me goosebumps just thinking about it. God it was exiting!\"\n\n\"Yeah, I feel the same way,\" I said. \"It was amazing. I mean I've been in 'group' situations before, but last night felt totally new and different. It was mind blowing.\"\n\nWe both sat quietly for a moment, running through it all in our minds.\n\n\"So did you call any of the girls yet?\" she laughed.\n\n\"Ha! No, I don't work quite that fast,\" I said.\n\n\"Don't let Chloe slip away,\" she said. \"I don't know if I've ever seen such a beautiful young woman.\"\n\n\"Maybe we should invite her over here some evening,\" I said.\n\n\"I think you're the main focus of her attention. She might be more comfortable with you alone to begin with. After that we can share,\" she said with a mischievous twinkle in her eyes.\n\n\"Wow, my lover is telling me to go fuck another woman. You're full of surprises Julia,\" I said, shaking my head.\n\n\"Mmm, that sounds nice, you calling me your lover,\" she said with her eyes closed, letting the thought sink in for a moment. \"You know, I'm old enough and wise enough to know exactly the situation I'm in, and I'm very happy with it. Like I said yesterday, you've given me a huge gift. You could leave me tomorrow and I'd still be thrilled with where you've taken me.\" She thought for a moment and continued. \"Maybe it's got to do with me living 42 years without ever experiencing a male-female relationship. Now that I'm finally in one, jealousy just doesn't seem to enter into it. I think I'm as surprised as you. I like it though. I just want life to roll on . . . with lots of pleasure and no conflict. Fuck her silly if you want too Steve. Just come back and do the same to me . . .\"\n\n\"Like I said, you're amazing,\" I said. \"I've got a friend named Chrissy that reminds me a lot of you. I bet you two could be fast friends.\"\n\n\"Is she a friend or a lover?\" she asked with a little smile, gazing deep into my eyes.\n\n\"A lover,\" I said. \"An extraordinary, wonderful woman, like you. And as hard as it is for me to believe, she's 53 years old. If you meet her you won't believe it either.\"\n\nI had been through enough already with Julia to know she was ready to hear more, so I told her about Chrissy and Ally and Nicki, and the wild times at Penny's camp with Mary and Johnny and Bix. Julia was enthralled.\n\n\"Wow,\" she said, shaking her head, \"I just can't believe how full of life the rest of the world has been while I've been sitting at home dead for the last 20 years. You do know you're gonna have to invite me to Penny's next time right? If you don't invite me, I'll never forgive you,\" she said with a big smile, paraphrasing what Chloe said the night before.\n\n\"Oh, Penny'll eat you up. And Mary too. They both love the sexy girls. Prepare to be eaten alive,\" I said.\n\n\"Ooof! I'm getting hot just thinking about it,\" she said, fanning her face.\n\n\"Come to think of it, Mary kinda looks like a more mature version of Chloe. She's a stunning long-legged redhead with a body right out of the pages of Playboy. Better actually, because Mary's tits are real,\" I laughed. \"Getting the two of them together might just explode my poor little brain.\"\n\nAfter a few silent minutes, with Julia and I both mulling over the possibilities in our heads, I changed the subject.\n\n\"I don't want to bring the conversation down too much, but have you given any thought to what happens if your two worlds collide? I mean you're a respected author of children's books, right? And now you're into public sex and orgies...\"\n\n\"Yeah. It actually flashed through my head while we were 'on stage' last night,\" she said, and she thought for a moment. \"You know, I think I'd just move on. There's lot's of different kinds of writing I've always wanted to do. My success sort of has me stuck there in that genre, but maybe it's time to try something different.\" She thought some more and smiled. \"I'd love to see the looks on the faces of some of those stodgy colleagues of mine if they knew what I did last night. Just showing up at the next conference with my new look is gonna blow some minds . . .\"\n\n\"Maybe you'll blow somethin' else while you're there,\" I said with a wink.\n\n\"Ha Ha!\" she said playfully, and then her mind started working. \"There is one guy that's really attractive . . . a few of the women are always hitting on him, but he never goes for it, as far as I know. Funny thing is he often hangs out with me, maybe because I don't hit on him and I'm not threatening . . . I wonder if my new look will change anything . . .\" Her voice trailed off in deep thought.\n\n\"I'm guessing he'll have his cock in your mouth within an hour of laying eyes on you,\" I said.\n\n\"Oh my God!\" Julia exclaimed, and she blushed crimson red. \"I hadn't really taken a moment to think of all the possibilities until now. I mean it's been such a whirl-wind the last few days. And it's just been you so far. But I guess other men might actually find me attractive now . . . those two boys last night seemed to . . .\"\n\n\"You're damn right they did. And they would have if you were fully clothed too. You've got that mysterious something that guys are attracted to. I have no idea how you managed to hide it so well the last 20 years, because you're oozing with it,\" I said. \"You should write a book on your transformation, that's what you should do,\" I laughed.\n\n\"Oh boy, I wouldn't know where to start,\" she said.\n\n\"Or you could write erotic books. That'd be fun,\" I said.\n\n\"Ha! I don't have enough experience for that yet,\" she said.\n\n\"I don't know, I think you've got enough for a few good stories already. Check out the Literotica website sometime. Even if you don't want to write that stuff it's lots of fun to read,\" I said.\n\nHer eyes got big and she ran in to the house. She came out and handed me her laptop and sat down beside me. \"Show me,\" she said.\n\nI brought up the website and showed her the 'Author Awards' section to get her started with some good stuff. \n\n\"I have a feeling you're gonna like this. Just remember to eat and drink and go to the bathroom once in a while,\" I said laughing, and I put the computer on her lap.\n\nIt was late in the day and time for me to head home to get cleaned up for my night out, so I gave her a kiss and left her with her new portal into the wide world of sex.\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nThere was a good crowd at the club when I arrived. I located my friend Mark and we got some beers and staked out some space near the stage. It was still a few minutes to showtime and most people were still milling around the bar, so we managed to get nice and close. Mark clicked beer bottles with me and pointed to the sweet ass on a girl not far in front of us.\n\n\"Holy shit, that's perfection right there buddy,\" he said.\n\nIt certainly was, and it also had a familiar look to it, especially with the long red hair cascading down to it. The girl turned her head a little and it was most definitely Chloe, talking to two girls I didn't know. \n\n\"Hi Chloe,\" I said, loud enough to be heard above the recorded music.\n\nHer beautiful head swiveled around as if in slow motion, and her face glowed when she saw me.\n\n\"Steve!\" she yelled, and she just about jumped into my arms.\n\nI looked over at Mark and winked at him as I hugged her, and he just shook his head.\n\n\"Chloe, this is my friend Mark,\" I said, and she gave him a big hug too. I'm pretty sure it made his day.\n\n\"You didn't call me yet. I was getting worried,\" she said.\n\n\"Nothin' to worry about sweetheart,\" I said.\n\n\"I hope not,\" she said. She looked like she wanted to say all kinds of nasty sexual things, but she held back with the other people around.\n\n\"So how do you two know each other?\" Mark asked.\n\nI jumped in before Chloe could say anything. \"Chloe's an art student at the University, and I did some work where she was taking a class,\" I said. I looked at Chloe and winked.\n\n\"He's in the process of sweeping me off my feet,\" she said as she hugged me again.\n\n\"Well I don't know what you're waitin' for buddy,\" Mark said with a smile, and he clicked my beer bottle again.\n\nMark's bottle was empty already and he offered to make a bar run. He asked Chloe if she wanted anything.\n\n\"I'll take a beer. I turned 21 three weeks ago, in case you're worried about serving a minor,\" she laughed.\n\n\"Nope, couldn't care less. A beautiful girl asks me for somethin', I'm gettin' it for her, no questions asked,\" Mark said.\n\nWhen Mark was gone Chloe put her body against mine and looked up at me with her big green eyes.\n\n\"Are you and Julia gonna make me scream tonight?\" she asked. I could feel her breath quicken.\n\n\"Just me sweetheart. Julia thinks you and I should be alone the first time. And yes, I'm gonna make you scream. Many, many times. The neighbors might call the police,\" I said, and I lowered my head and kissed her for the first time. It was an electric kiss, and our tongues danced wildly together. \"You wanna stay and watch the band first? We've got all night right?\"\n\n\"All night,\" she said with lusty eyes. \"And all morning...\"\n\nMark came back with three cold beers, and the band took the stage to great whooping cheers. The crowd quickly filled in around us, which provided cover for our wandering hands. Chloe stood in front of me, with her perfect ass grinding against my hard cock. We each had a beer in one hand, and one hand free for roaming. Her's spent half the night squeezing and stroking my cock through my thin shorts. I came pretty close to cumming more than once, but somehow managed to avoid embarrassing myself. At one point she unbuttoned her shorts and slid my hand in. I didn't keep it there long because some of our near neighbors were catching on and watching, but damn, the girl was hot.\n\nThe band was great, but we beat it out of there before the encore. Chloe didn't have a car, so she rode with me in my truck back to my place. As soon as we pulled away from the curb she had my shorts open and my cock in her hand.\n\n\"I dreamt about your beautiful cock last night...\" she said as she engulfed it with her hot mouth. \n\nThe feeling was so intense I had to pull over to the side of the road. With people walking by on the sidewalk and cars whizzing by, I came explosively in her young eager mouth, and she sucked down every ounce of my hot cream.\n\n\"God! How fucking beautiful is this thing...\" she said quietly as she licked me clean. I took a few deep breaths and pulled back out into traffic.\n\n\"Jesus Chloe, do you have any idea how spectacular you are?\" I said, still breathing hard.\n\nShe smiled up at me with those big green eyes as she carefully tucked my softening cock back in to my shorts. \n\nThankfully my house wasn't too far away, and soon we were ripping at each others clothes and tumbling into bed. Her body was magnificent, even better than I had imagined. Creamy skin covered in freckles. Perfect bikini tan lines. Soft and luscious d-cup tits with big sexy nipples so hard you could hang a coat hanger on them. And that ass . . . oh my God that ass! When she bent over, her puffy, pink, cleanly shaved pussy stuck out between those perfect ass cheeks and beckoned my like nothing I've ever seen before. Sheer perfection, and it was mine that night.\n\nWe had no sooner gotten undressed when my cell phone buzzed with a text. Now normally in that situation, with the world's sexiest college girl naked in my bed, I would have ignored it, but I had a funny feeling it was Julia. I mentioned it to Chloe and she encouraged me to have a look at it.\n\nJUST TOOK BATHROOM BREAK NO FOOD OR WATER YET HOPE U R ENJOYING SHOW\n\nI laughed and told Chloe that I had shown Julia an erotic story website and I knew she would be obsessed with it all night.\n\n\"I'm gonna tell her you're here,\" I said. \"That'll give her something even hotter to think about. Who knows, maybe she'll even write a story about us. She's a writer you know.\"\n\n\"Oh my god, that'd be so hot!\" Chloe said.\n\nI typed out a reply and sent it...\n\nCHLOE IS HERE SHE WAS AT SHOW ALMOST HAD SEX IN MIDDLE OF CROWD\n\nAfter a few moments we had Julia's reply...\n\nOMG DONT USE HER UP I WANT SOME 2\n\nChloe took my phone and her thumbs were a blur on the tiny keyboard...\n\nHI JULIA CANT WAIT 2 SEE U AGAIN I WANT 2 MAKE U SCREAM LIKE STEVE DID\n\nThere was a long pause this time, and then we got a reply...\n\nU JUST DID SWEETHEART\n\n\"Oh my God! She's so hot!\" Chloe said with wide eyes and a huge smile, and she typed back...\n\nSTEVE CAME IN MY MOUTH IN HIS TRUCK HES SO HOT I CANT STAND IT\n\nAnd Julia's reply...\n\nOMG U GO GIRL WISH I WAS FLY ON WALL\n\n\"It'd be so much fun if she could watch us, don't you think?\" Chloe said with a wicked little smile. \"Do you guys Skype?\"\n\nWe didn't, but after a 20 minute phone call to Julia the tech savvy Chloe had us hooked up. Julia was in bed, and it looked like she was naked. She had probably been there all evening reading dirty stories. Her hair was messy and she looked very sexy on the somewhat jumpy video on the computer screen. I put my lap top on a high dresser right next to my bed, and Chloe and Julia chatted for a few minutes as I adjusted the view.\n\n\"Stand back Chloe, I want to look at you,\" Julia said, seeing Chloe's perfect naked body for the first time. \"Oh, you're so beautiful Chloe. Steve's the luckiest man in the world tonight.\"\n\nAs she was saying those words I embraced Chloe from behind, my hands roaming from her smooth belly up onto her soft, magnificent tits. Both the girls moaned loudly as I pinched Chloe's hard nipples and kissed her neck. This was indeed going to be fun.\n\nChloe pushed me down on the bed and licked her way up my inner thighs to my balls. She was on her knees on the floor between my legs, and I could see her glancing toward the camera to make sure Julia had a clear view of what she was doing. My cock was as hard as steel when Chloe lowered her mouth onto it, sucking me in inch by inch, her long golden red hair tickling my thighs. She was inexperienced, and only got about half of me in, but it felt hot and wet and glorious as she worked me in and out of her steaming mouth and stroked the bottom half of my shaft with her wet hand. My head was turned so I could watch Julia watching us, and her face was riveted to the screen.\n\nAfter a few wonderful minutes I sat up and pulled Chloe up onto the bed. I pushed her down on her back, pinned her wrists down next to her shoulders, and kissed her hard. I was hovering above her, and I moved my body so that my throbbing cock slid between her pussy lips. Up and down it slid as I kissed her, both of us moaning into each others mouths, and then I kissed my way down to her soft freckled tits. \n\n\"Oh yeah!\" she moaned as I took a big hard nipple into my mouth and twirled it between my tongue and teeth. I pinched the other one with one hand and slid my other hand onto her wet pussy and she screamed out when I slid two fingers into her and pressed my thumb across her clit.\n\n\"Ooohhh! FUUCCKK!\" she yelled, as her back arched high of the bed and her body shuddered with her first beautiful orgasm of the night.\n\nA mere second or two later I heard Julia moan loudly and I looked to see her head bobbing fore and aft and her eyes rolled back in her head. She was in the middle of a big one too, and I wondered if she had gotten her dusty old dildo out of storage. Chloe watched the laptop screen as the girls both caught their breath. \n\n\"Steve's so sexy he can make two girls cum miles apart,\" she said to Julia, and the girls both laughed through their heavy breathing.\n\n\"Are you gonna put your cock in her now Steve?\" Julia asked seductively. \"I can't wait to see you put your big cock in that beautiful girl.\" \n\nJulia's heavy breathing and the tinny sounding laptop speaker made it sound like an obscene phone call. It was very cool and sexy.\n\n\"I'm gonna put my cock in her right now Julia,\" I said, looking deep into Chloe's eyes. \"It's gonna go deeper inside her than anything's ever gone before. And she's gonna scream so loud, you'll be able to hear her from your porch.\" Chloe's eye's were wide and burning with lust.\n\nChloe and I could hear Julia's heavy breathing as I positioned myself and lifted Chloe's long legs up against my chest and over my shoulders. I slid my hands down her thighs and she was covered in goosebumps. She was still on her back, her soft freckled tits spilling off either side of her, jiggling like jello with every movement. My rock hard rod was poised at her entrance and her gorgeous little pussy looked small next to it. I spit on my hand and smeared it on my cock and across her pussy lips, making her groan.\n\n\"Do it baby! Do it!\" she said loudly, and she smiled and looked lustily at the camera. Those were the same words Julia yelled in my ear, spurring me on to fuck her brains out in front of the class the other night. I plunged my big cock about four inches into her, and her eyes got huge, still staring at Julia.\n\n\"Oh my God!\" she gasped, as I pulled all the way out and then thrust in again, about six inches that time.\n\n\"Ooooohhhh!\" she grunted, expelling every bit of air in her lungs, looking at me with her eyes even bigger. One more thrust and I was in balls deep. I started a slow fuck, and her pussy felt incredible, even better than I had imagined.\n\n\"Oh my GOD! . . . You feel so . . . fucking huge! . . . Oh shit! . . . Oh yeah! . . . Oh God I love it!\" she cried. \"I fucking love it!\"\n\nI held her legs tight to my chest as I pumped into her at an increasingly rapid pace, my balls slapping her ass and her tits oscillating wildly as she clutched at the bed sheets and grunted like a wild animal. We went at it that way for a long while, nothing existing in the world but the pure pleasure of the moment. I could see an orgasm starting to build in her gorgeous body, and as her back started to arch up off the bed she grabbed her tits in her hands and squeezed them hard. I was slapping into her with everything I had, and she cried out at the top of her lungs as she came, even more violently than I expected. It was a magnificent sight, and after she crested the peak I pulled out and came in a gush all over her belly and those beautiful freckled tits. She lay there almost unable to move, but soon her hands found my sticky cum and she smeared it all over herself and slowly rubbed it into her glistening skin.\n\nThere was silence in the room for a few moments, and then I was surprised by Julia's voice. I had forgotten all about her.\n\n\"Jesus Christ Steve. I told you not to use her up and save some for me,\" she said, scolding me and giggling a little.\n\nChloe let her exhausted head drop sideways so she could see Julia, and she laughed quietly through her heavy breathing. \"There's plenty more for you Julia . . . I want to do this all the time . . .\" she said dreamily.\n\n\"Welcome to the club girlfriend,\" Julia said, and they both giggled.\n\n\"Oh shit!\" Chloe exclaimed, as she realized I was now laying on my stomach and sliding my tongue up her steaming hot pussy. I tasted her sweet honey nectar for the first time and she groaned loudly.",
        "\"I'll talk . . . to you later Julia . . . Steve's taking me . . . on another trip,\" she said between quick breaths.\n\nI slid my tongue between her puffy engorged pussy lips and swirled it around her now hyper-sensitive clit. She cried out, and I reversed my trail down through her lips to the spot I love on a woman, that smooth tender spot between her pussy and asshole, and then I licked her asshole and pushed my tongue into the tight hole. I worked my way back up to her clit and quickly brought her to another orgasm, this one more controlled but just as beautiful.\n\nChloe held my head in her hands as I looked up at her from between her legs, my face shining with her pussy juice. She turned her head to the camera and said quietly, \"Oh my God! Is there a sexier man in the whole wide world Julia?\"\n\n\"I don't know Chloe, but I'm pretty sure there's not a sexier woman in the world than you right now,\" Julia said.\n\n\"I agree,\" I said.\n\nJulia laughed. \"You agree with me, or with her?\"\n\nI laughed. I got up and straddled the still flat-on-her-back Chloe, putting a knee either side of her head. She reached up and grabbed the hard shaft bouncing right above her face, and with her delicate hand she guided me into her mouth. Her other hand found my balls, and I was soon on a trip of my own. I was facing the camera, and as I looked into it Julia held up her rubber dildo for me to see, smiled a wicked smile, and then from the look on her face I knew she was using it. She and I were both moaning as Chloe slurped on my cock. I was reaching the boiling point, and I suddenly wanted to fuck Chloe from behind. She was disappointed when I pulled out of her mouth, but squealed with delight as I rolled her over and lifted her ass.\n\n\"Oh my god! I've never done it this way, and watching you and Julia do it the other night was the sexiest thing I've ever seen in my life. I was hoping you'd do me this waaAAYYY!\" she shrieked as I plunged into her. \n\nI was in no mood for taking it easy, and I fucked her hard and long. She came three times, and I didn't stop. I slowed down a little each time, but I never stopped. I slowly ratcheted up the pace after each orgasm, and fucked her hard until she vibrated and screamed again. Over and over. Her long golden red hair was matted down and stuck to her sweat covered back, and sweat dripped off her swaying tits. \n\n\"Oh my God oh my God Oh my God!\" she breathlessly grunted like a beast as I continued to pump into her.\n\n\"Can I . . . can I cum . . . inside you Chloe?\" I managed to ask her between gasping breaths.\n\n\"YES! YES!\" she screamed, \"CUM INSIDE ME YOU FUCKING ANIMAL!\"\n\nSomehow I had enough energy left to fuck her even faster and harder than before, and we both cried out at the top of our lungs as ecstasy swept over us both in a rapturous explosion, my cock spasming as I came deep inside her belly. Her orgasm seemed to never end, her whole body spasming uncontrollably, and then suddenly the energy drained from her. Her sweaty thighs slipped from my grasp and she collapsed flat and exhausted on the bed, moaning deeply with each exhale.\n\n\"Oh my god,\" she whispered over and over.\n\nI collapsed next to her, pulled our sweat-soaked bodies together with my arms and kissed her. \"You're amazing Chloe,\" I said.\n\nAfter she gathered her senses, her tired eyes twinkled. \"I was worried I wouldn't be good enough for you, to inexperienced, you know? I'm glad you liked me,\" she said.\n\n\"Oh Chloe,\" I said, \"that was as good as it gets. You took me to the stars sweetheart.\" I kissed her again and then kissed one of her beautiful freckled tits. \"Everything about you is perfect. And the way it feels when I'm inside you . . .Mmmm . . .\" I moaned as I nibbled on her hard nipple, \" . . . it's heaven.\"\n\nChloe was moaning quietly now, and her soft hand was slowly bringing my sticky cock back to life. \n\n\"You're getting hard again,\" she said, sounding surprised.\n\n\"How could I not with you in my arms,\" I said.\n\nAfter a few minutes of gentle caressing she rolled me on my back and said, \"I want to try something else you and Julia did. It looked so sexy...\"\n\nShe turned around and swung her leg over my head and lowered her pussy to me. It was red and puffy and well used, and it looked sexy as hell. I plunged my face into it as she lowered her body, and she took my quickly stiffening cock into her mouth. I could hear Julia moan again.\n\n\"Are you watching us Julia?\" I asked as I lapped up Chloe's pussy juice. \"Do you have that big rubber cock inside you?\" All three of us were moaning loudly now, and Chloe's body tensed and vibrated once again.\n\n\"I can't believe how many times you've made me come,\" Chloe said, looking back at me with wild eyes.\n\nShe put my cock back in her mouth and took a few more slurpie sucks, and then she got up and straddled me cow-girl style and lowered her well-fucked pussy down onto my wet cock once again.\n\n\"Oh fuck! You fill me so good. God it goes so fuckin' deep,\" she said.\n\nShe lowered her head and kissed me hard as I slowly fucked up into her and her big freckled tits rubbed on my chest. She rose up, pinned my wrists down next to my shoulders and started gyrating her hips up and down. I lay still and looked up into her big green eyes as her hips picked up speed.\n\n\"Oh Jesus Chloe!\" was all I could manage to say. The sight of her hovering above me and those glorious tits swaying above my face as she fucked me was too much. I was her slave.\n\n\"I want you to cum, my big sexy man,\" she said as she slid her pussy up and down on my red hot cock. \"I wanna feel that big cock cum inside me again!\"\n\nShe still had my arms pinned and she was gasping for breath as all her youthful energy fucked me with her wildly gyrating hips. She lowered a salty, sweat soaked tit into my eager mouth and I started thrusting my cock up into her as I came hard, both of us grunting loudly with the last of our breath. She ground her tit hard into my mouth as I came, and just about smothered me before she rolled off, both of us gasping for oxygen.\n\nAfter a few quiet moments of heavy breathing Julia spoke up. \"You know Chloe, he's quite a bit older than you. You really should take it easy on him.\" They both giggled. \"And,\" Julia added, \"you're wearing me out too. My pussy's so sore I can barely touch it anymore.\"\n\n\"I wish I was there to kiss it and make it better,\" Chloe said seductively.\n\n\"Me too Julia,\" I said breathlessly. \"Me too.\""
    ],
    "authorname": "riverboy",
    "tags": [
        "redhead",
        "younger woman",
        "coed",
        "female masturbation",
        "exhibitionist",
        "voyeur"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/a-handymans-memoir-ch-16"
}
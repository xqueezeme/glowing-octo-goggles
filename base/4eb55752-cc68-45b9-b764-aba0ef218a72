{
    "title": "The Hot Wife Photos Ch. 03",
    "pages": [
        "The chronological order of my stories is now listed in WifeWatchman's biography.\n\nFeedback and constructive criticism is very much appreciated, and I encourage feedback for ideas.\n\nThis story contains graphic scenes, language and actions that might be extremely offensive to some people. These scenes, words and actions are used only for the literary purposes of this story. The author does not condone murder, racial language, violence, rape or violence against women, and any depictions of any of these in this story should not be construed as acceptance of the above.\n\n*****\n\nPart 9 - Making Amends \n\n5:15am, Thursday, September 24th. I did not want to get out of bed, having had inadequate sleep, but I had to do what I had to do. I swiftly dressed in gym clothes, putting my uniform for the day in the suit bag to protect it, with accoutrements in the pockets of the bag.\n\nAt Police Headquarters, I headed to the men's locker room, where I donned the body armor and a football helmet. I left the red crowbar locked in the locker with the suit bag, and took the orange one that I used for practice. Then I went into the gym, hearing the clanging of iron and female grunts and groans.\n\nIn the boxing ring, Cindy and Joanne were going through some drills. They were also attired in body armor and football helmets. Mostly it was Cindy attacking and Joanne defending. Cindy was clearly venting some anger. I would give her the opportunity to vent some more.\n\nI walked up to the ring. The women saw me and stopped fighting.\n\n\"Okay, I think I'm done.\" said Joanne, very astutely. She left the ring and went to the locker room. Meanwhile, I got into the ring. \n\n\"Defend yourself, Ross!\" I yelled in the Klingon tradition as I went into the attack, as I always did whenever Cindy and I got our morning exercise this way.\n\n*CLANG!*\n\nIron struck iron as we battled, thrust and parried, circling and feinting, then engaging in several rapid series of blows. Cindy was attacking harder and harder, really letting me have it. I stayed on the defensive, but on purpose, just parrying her attacks, watching and learning and remembering how she liked to attack. \n\nIt was several minutes before she caught on that I wasn't trying to take advantage of the openings she was allowing me... all traps, of course. So she changed tactics and slowed down herself. Then I feinted as if to attack and she came at me with the martial arts blow, trying to kick me square in the chest. I moved out of the way, then had to parry her vicious backhand blow.\n\nAfter several more minutes we were both tired, so I called the halt. We climbed out of the ring, leaning back and half-sitting on the side of the raised ring.\n\n\"Feeling better?\" I asked.\n\n\"Not really.\" Cindy said. \"But you were right. I was wrong to say that in front of subordinates and the perp.\" She wasn't changing her mind on being suspicious of those that take the Fifth, but we were moving past that.\n\n\"And in front of the Police Chief,\" I said, \"who is not in your corner as it is.\"\n\n\"Yeah, I know.\" Cindy said, wincing. \"By the way, who is going to be in charge for me while I'm in Paulina's class?\"\n\n\"Oh, Teresa and Tanya can handle their divisions.\" I said. \"And by the way, if this case is not solved, you can wait until the next class at the Academy in six weeks. But you are going, eventually.\"\n\n\"Sounds like you think it will be solved.\" Cindy said.\n\n\"It's not all that hard, at least as far as the murder is concerned.\" I said. \"It's the burglary that I'm wondering about. Okay, let's get cleaned up and get some coffee...\"\n\nPart 10 - Realities and Hypotheticals \n\n\"This is Bettina Wurtzburg, KXTC Channel Two News!\" shouted the lovely redheaded reporterette at precisely 7:00am, Thursday, September 24th. \"Channel Two News has learned that Christopher Washburn was arrested yesterday on assault charges. Washburn is the husband of Emma Washburn, who was found murdered behind the Ladies Auxiliary Clubhouse this past Monday.\"\n\nI was barely paying attention as Bettina said \"In other news, Channel Two News has learned that the Town & County Council has formed a Study Group to work out new solutions for the Public Safety Department's rank structures. Members of this Study Group include Councilpersons Carnes, Colby, and Westboro, as well as Sheriff Allgood, the Police and Fire Chiefs, and the Public Health Officer. The EMS services are not represented on the Study Group, as the Fire Department objected to separate EMS representation.\"\n\n\"Hoo boy.\" I said. \"Another fire to put out, pun not intended. That EMS situation is going to become a real problem one of these days.\"\n\n\"Why would they want to mess with the rank structure?\" Joanne Cummings innocently but astutely asked. That caused me to do a double-take as the implications of that hit me.\n\n* * * * * * * * * * * * * * * *\n\nAt 8:00am, we had a meeting in Classroom 'E', attended by myself, Captain Ross, Lt. Perlman, Detectives Cummings and Washington, and Master Technician Mary Mahoney Milton.\n\n\"Sir,\" said Mary to start things off, \"I've been able to confirm that the photograph was auto-uploaded. The FB account is named 'Emma Hot Wife', and it appears that the phone uploading to it is a burner phone, not Emma's phone that we found in her home. It may be one of the other phones we found, but Myron is going to have to confirm that.\"\n\n\"That's good.\" I said. \"What about that photo of Emma in front of the clock?\"\n\n\"Auto-uploaded at 8:01pm last Sunday night.\" said Mary. \"Looks to be legit.\"\n\n\"So,\" I said, \"what you're telling me is that we can say that Emma was alive at 8:00pm Sunday night. That means that Cassie, Sean, and Chris all have alibis. I might add that Marlena and Ryan have alibis, too.\" Mary nodded.\n\n\"Okay, ladies,\" I said, \"this just got more interesting. Cummings, Washington, what do y'all have?\"\n\n\"Sir,\" said Joanne, \"I've been following up on the victim, Emma Washburn. She and Chris married nearly 10 years ago, and have lived here in Town for six years. He's been deployed off and on for several years. Everyone who has known Emma and Chris have said they were a loving couple, no arguments that anyone knew of, and no issues.\"\n\nJoanne continued: \"Chris and Emma have no real debts, and they have about $2000 in savings in the J.P. Goldman Bank. The only anomaly in their bank accounts was a cash withdrawal by Emma of several hundred dollars about three weeks ago, just before the Labor Day holiday. Where that cash went to or what it might have been used for, we have no idea yet. Chris has a credit card, but has only used in in Alaska for basic things up there.\"\n\n\"Did Emma have a job?\" I asked. \"Did she do any part-time work?\"\n\n\"Not that I can tell, sir.\" said Joanne. \"There were no direct deposits to her banking account, and no other deposits that might be work-related checks. She gave cooking classes for the Ladies Auxiliary Club and a couple at First Baptist, but as far as we can tell she wasn't paid for those. Word is that she is a top-level cook and could be a professional chef if she really wanted to.\"\n\nAfter Joanne wrapped up, I turned to Theo. \"What about Cassie?\"\n\n\"Sir,\" said Theo, \"she was married for twelve years and then her husband left her for another woman. She had a good divorce attorney and did pretty well in the divorce, getting the house and child support for Sean, but one interesting thing was that the payments were cut in half when Sean turned eighteen. They'll continue until he's 21, unless he moves out of the house permanently or if he gets married.\"\n\nTheo continued: \"Cassie works as a professional photographer, and does irregular work such as seasonal staffing during holiday times. About two weeks ago she applied at City Hall for a business license... for a catering business.\"\n\n\"Ahhh,\" I said. \"Emma's a chef and Cassie does photography. That'd be a great business for them together: catering and photography for weddings and other events.\"\n\n\"Yes sir,\" said Theo. \"Cassie has avoided any large debts but is barely solvent. She's a member of First Baptist Church, attends services more often than not. She is liked by those who know her, but she has no very close friends except for her neighbors Emma and Marlena, and their sons.\"\n\n\"What about Sean?\" I asked.\n\n\"Not much on him.\" Theo said. \"Football player on the high school team. Hangs out with other jocks, dates the cheerleaders, also has dated a few college girls with his buddy Ryan. Doesn't have an official job, but always seems to have at least some cash on him.\"\n\n\"Wonder how he's making that?\" asked Tanya musingly.\n\n\"Any ideas, Theo?\" I asked.\n\n\"No sir.\" said Theo. \"If he's doing something illegal, we don't have anything on it.\"\n\n\"All right. You and Joanne are doing a great job on these cases.\" I said. \"Meanwhile, there's nothing new from the FBI, and I'm waiting on Myron and Mary to give us more details from those various cellphones we recovered, as well as Cassie's cellphone.\" \n\n\"Oh, that reminds me,\" said Tanya, \"Cassie called the Duty Desk last night. She wants her phone back.\"\n\n\"She ain't getting it back yet.\" I said. \"Tanya, make sure our warrants to keep it are in order, and if there's any problem, ask Paulina to get us a fresh one. But no matter what, we have to keep that cellphone.\"\n\n\"Yes sir.\" Tanya said, making a note on her pad.\n\n\"So,\" I said, \"did Chris get a new lawyer?\"\n\n\"Yes sir.\" said Tanya. \"Guy from Succup & Payne, P.C., which are personal and family lawyers. A Mr. Gibson Stelling, I believe.\"\n\n\"Okay, let's call him and tell him I will be interviewing Chris Washburn at 9:00am.\" I said. \"No, Washburn can't speak, but if this attorney is doing his job, he'll be able to speak for Chris.\"\n\n\"What do you want to find out from him?\" Cindy asked.\n\n\"Anything I can about what happened to Emma, and why she took that beating that she did.\" I said.\n\n\"I'm not expecting an admission that he did that to her himself.\" Cindy said drily.\n\n\"Neither am I.\" I said, cryptically. That got two pairs of Angel Eyes peering at me, and confused looks on the faces of my young Detectives...\n\n* * * * * * * * * * * * * * * *\n\nAt 8:30am, I had a very angry Cassie Sanderson in the lobby of my Police Headquarters. I told Cindy that we would just have to do this the formal way.\n\n\"Hello, Mrs. Sanderson,\" I said, appearing in the lobby. \"Would you please step into this room?\" I was indicating Interrogation-A.\n\n\"I came here to get my cellphone.\" said Cassie angrily. \"You Police have it, and I want it back.\"\n\n\"That is what I want to discuss with you, ma'am.\" I said. \"Now if you'll please step in here, I'll explain everything.\" Cassie was clearly unhappy, but finally complied. Once in Interrogation-A with the door closed, Detective Cummings came through the other door, from the Police side, and sat down beside me.\n\n\"Mrs. Sanderson,\" I said, \"I am going to read you your legal rights.\" I proceeded to do so from the card, then asked if she understood the rights.\n\n\"Yeah, but why are you reading me my rights?\" asked Cassie. \"Am I a suspect or something?\"\n\n\"You are a person of interest in the death of Emma Washburn.\" I replied. \"I just want to make sure we follow things according to the letter of the law. I want to ask you some questions about Emma's death, as well as the burglary of your home. Would you like a lawyer to be present?\"\n\n\"I just want my cellphone.\" said Cassie.\n\n\"We have taken that into custody under a warrant.\" I said. \"You will not be getting it back until we're through with the portions of our investigation that pertain to it. Are you willing to answer some questions? And would you like a lawyer?\"\n\n\"Oh, go ahead and ask.\" said Cassie.\n\n\"First,\" I said, \"when was the last time you saw Emma?\"\n\n\"Sunday afternoon,\" Cassie said. \"I took a few photos of her.\"\n\n\"Did you see the bruising on her face and upper body?\" I asked.\n\n\"Yes.\" said Cassie.\n\n\"Did Emma say how she got those bruises?\"\n\n\"As I said before, I remarked on them,\" said Cassie, \"and Emma said it was nothing, and to not worry about it. It was obvious to me she did not want to discuss it, so I didn't say anything more. I figured her husband did it. I put some pancake makeup, like movie actors use, over the bruises and we took our pictures.\"\n\n\"Had Emma ever mentioned her husband hitting her before?\" asked Joanne.\n\n\"No.\" said Cassie. \"And that was the first time I'd ever seen her with any marks like that on her.\"\n\n\"Mrs. Sanderson,\" I said, \"do you know of any reason why her husband, or anyone else for that matter, would want to physically assault Emma?\"\n\n\"No, I don't.\" said Cassie, matter-of-factly. \"I'd speculate she and her husband got into a fight, but I don't know why.\"\n\n\"So you left her at your home when you left for church?\" I asked.\n\n\"Yes.\" Cassie said. \"I told her she could clean up before going home, or that she could stay the night if she wanted. She wasn't home when Sean and I got back that night, so I assumed she went home.\"\n\n\"Do you know how Emma died?\" Joanne asked.\n\n\"I saw on the KXTC website that she'd been murdered.\" said Cassie. \"It's pretty shocking. I'm not sure of any details, though. The article was pretty vague.\"\n\n\"True enough.\" I said. \"Mrs. Sanderson, are you aware that your son Sean was having a sexual affair with Emma?\"\n\n\"Yes.\" said Cassie. \"The photo sessions got a little steamy, and I know Sean penetrated Emma a couple of times.\"\n\n\"Are you aware of other times they had sex? Off camera?\" I asked. \"Or that they were dating?\"\n\n\"Uh, I never saw where they were together or going out... beyond the photography sessions.\"\n\n\"Do you know of anyone else that Emma was having a sexual affair with?\"\n\n\"Sean's friend Ryan might have had Emma.\" said Cassie. \"But I never saw them together, so I don't know for sure. I don't know of anyone else, though. And Emma never talked to me about things like that, she never confided in me.\"\n\n\"Were you and Emma going to start a catering service?\" I asked, as if out of the blue.\n\n\"Uh, we had talked about it.\" Cassie said. \"I was laying some groundwork for it, but Emma hadn't committed to doing it yet.\"\n\n\"I see.\" I said. \"What about Sean? What does he do for money?\"\n\n\"I... I... \" Cassie stammered. She stopped, then said \"I don't want to be uncooperative, but I think I should ask to have my lawyer present.\"\n\n\"That's fine.\" I said. \"I'll send in an officer to help you make the phone call. While you're waiting, Detective Cummings and I will step out of the room for a few minutes.\"\n\nWe went into the anteroom, where Cindy and Officer Lydia Green were waiting. \"Officer Green,\" I said, \"please attend Mrs. Sanderson while she uses the phone to call her attorney. Don't allow her to leave I-Alpha except to use the restroom, and escort her there if she needs to go. Captain, Detective, come with me.\"\n\nWe went down the hall past Vice, MCD, and our offices, then along the back hall and the various offices, classrooms and breakroom to Interrogation-2, where Chris Washburn and his lawyer, Gibson Stelling, Esq., were waiting.\n\n\"Hello, gentlemen.\" I said. \"This is Detective Cummings and I am Commander Troy, as you know. I understand that Mr. Washburn has taken the Fifth, but I would propose talking to you, Mr. Stelling, in a discussion of 'hypothetical' situations. I have a few questions here, written on this sheet.\"\n\nTalking about 'hypotheticals' was a way to get around Fifth Amendment invocations without violating the suspect's rights... hypothetically. I hated 'hypotheticals', but in this case I needed information more. Ergo, I played the game.\n\nThe questions on the sheet were as follows:\n\nHypothetically, how did Emma get the face and body bruises?\n\nHypothetically, was Emma having a sexual affair with other men? How many, and, hypothetically, who?\n\nHypothetically, was Emma considering leaving her husband?\n\nHypothetically, who would have reason to harm Emma, and why?\n\n\"I'll need a moment with my client.\" Mr. Stelling said.\n\n* * * * * * * * * * * * * * * *\n\nAfter we were seated in I-2, Mr. Stelling said \"Hypothetically, my client does not know how his wife got the bruises. He might hypothetically have asked and was hypothetically told that it was nothing and she would not say more. He thinks that it's a hypothetical possibility that Cassie or Sean Sanderson could've done that to Emma.\"\n\nStelling continued: \"Hypothetically, my client's deceased wife might have been having a hypothetical sexual affair with Cassie Sanderson's son, Sean. He does not know of any other such hypothetical situations, but can't rule any out.\"\n\nStelling read from his notes, then said: \"Hypothetically, my client is unaware of any hypothetical situations where his wife was considering leaving him. Also, my client cannot think of any hypothetical situations where someone would want to harm his wife, unless there was something going on with Mrs. Sanderson or her son of which my client was unaware. My client was stationed far away, and so would not have any hypothetical knowledge of any hypothetical situations in this Town.\"\n\n\"Okay.\" I said. \"Well, if your client can come up with any hypothetical situations that can help me solve his wife's non-hypothetical murder, please let me know.\"\n\n* * * * * * * * * * * * * * * *\n\nBack to Cassie, who now had Mr. Fowler with her as her attorney in I-Alpha.\n\n\"My client wants to cooperate,\" said Fowler, \"but she will not answer any questions about her son. She does not want to give erroneous information, only to later be accused of lying to Police.\"\n\n\"I'm not worried about that.\" I said. \"We can always arrest Sean for suspicion of murder, haul him in here and question him for hours and hours. We certainly don't need anything from Mrs. Sanderson.\" I was pleased that Joanne held her face expressionless when I said that. Cassie Sanderson was not so stoic; a look of shock appeared on her face at my menacing words.\n\n\"I will be representing him, also.\" said Fowler, rescuing Cassie from my scare tactic. \"And I will not allow you to browbeat my clients. Yes, your reputation precedes you, Mr. Iron Crowbar, and I will not brook your shenanigans.\"\n\nI smiled. \"I have no idea what shenanigans you are talking about, Mr. Fowler,\" I said, \"unless my sterling record of successes and getting legitimate confessions or convictions is considered to be 'shenanigans' by the hopelessly inept defense lawyers in this County.\" Fowler was steaming at the deliberate insult. Joanne broke down; she began giggling.\n\n* * * * * * * * * * * * * * * *\n\n\"Hi, Sean.\" I said as Sean was escorted into Interrogation-B with Mr. Fowler as his representation. \"I just have a few questions for you, but I am first going to read you your rights from this card.\" I read Sean his considerable Constitutional rights, and he said that he understood them.\n\n\"Sean,\" I said, \"you probably know by now that Emma was murdered. I'm sure you understand that your relationship with her has to be investigated as part of our case.\"\n\n\"Yes sir.\" Sean said. \n\n\"So let me ask again if Mr. Washburn knew of your relationship with his wife.\" I said.\n\n\"Like I said before,\" said Sean, \"I don't know what or how much Emma told him, but when he got back last week, he told me that he really liked the pictures of Emma and me, and he wanted me to keep doing them. He said he was cool with me kissing her and with the sex pictures, too.\"\n\n\"Whoa.\" I said. \"He said he had pictures of you and Emma having sex?\"\n\n\"Er, no,\" said Sean, \"he didn't say that. I thought he meant our simulated sex poses. But like I said, I don't know what Emma sent him, so she might've sent pics of her sucking my cock or a penetration shot, if my mom got any of those.\"\n\n\"I see.\" I said. \"Sean, your mother's income is from her photography work, is that right?\"",
        "\"Yes sir.\" Sean said. \"She was getting child support from Dad, too... until a few months ago, when I turned eighteen.\"\n\n\"Do you know the arrangements of that child support?\" I asked.\n\n\"No sir.\"\n\n\"Were you ever thinking of moving out, away from your mom?\"\n\n\"Uh, no sir.\" Sean said. Was that the slightest change of facial expression? I thought to myself. Just the slightest change in his eyes?\n\n\"What about money, Sean?\" I asked. \"What did or do you do to make money?\"\n\n\"Uh, nothing, really.\" Sean said.\n\n\"Sean, we know you've been spending some money, and your mother doesn't have much.\" I said. \"So how are you getting money?\" At that point, the legal beagle Fowler leaned over and whispered something to Sean.\n\nSean then said \"I'm not selling drugs or any bad shit like that, but I don't think it's something I can talk to the police about.\"\n\n\"Sean,\" said Fowler out loud, \"at this point I think you should conclude this interrogation and say nothing more.\" Sean looked over at me as if he didn't want to stop, but he had his orders...\n\n\"What do you think, Joanne?\" I asked my young Detective as we walked back down the hall after the interview.\n\n\"Everyone clams up when Sean's job or income is brought up.\" Joanne said. \"I don't want to assume anything, but that has to be important...\"\n\nPart 11 - Lunchtime Meetings \n\nCaptain Cindy Ross received a text message on her personal cellphone at 11:45am. She went to the Commander's office, into which she was immediately admitted.\n\n\"Sir,\" she said, \"I need to take a long lunch and take care of a couple of errands.\"\n\n\"Sure.\" I said. \"Keep your radio with you, though. I've got a lunch meeting with the Chief, and I don't know when I'll be back. If we get a break on the Washburn case, they'll need to be able to get you on the radio.\"\n\n\"Yes sir.\" Cindy said. \"By the way, do you have any idea what's going on with this case? It looks like all the persons I'd call suspects have alibis, so is there anyone else to consider? And the burglary took place a couple of nights later, and I can't help but think it's related.\"\n\n\"I've got a few roadblocks in my mind, as well.\" I said. \"What I'm not seeing is the motive for Emma's murder.\"\n\n\"If it's related to the burglary, I can see that.\" Cindy said. \"And if her husband did it as a crime of passion, I can see that.\"\n\n\"We'll talk more about it this afternoon.\" I said. \"I think we're going to have to move on it soon.\" That got Cindy peering at me, but she said no more as we left the office.\n\n* * * * * * * * * * * * * * * *\n\nCindy walked along the street that went east-west and was north of the Downtown and Courthouse Square areas. She saw two old ladies on a bench near the road. Across the street was a strip mall. On the right side of the strip mall, she saw the empty space that had been Nathan Allen's campaign headquarters.\n\n\"Why, hello Captain Ross!\" said Old Mrs. Boddiker. \"How are you doing today? Do you know my friend, the Widow Athena Jones?\"\n\n\"Yes, I do know her.\" Cindy said. \"And I'm doing very well. And you ladies?\"\n\n\"We're enjoying this warm sunshine before the weather turns.\" said the Widow Athena Jones in her scratchy voice, a few gray curls of hair escaping from under her nondescript light blue shawl. \"Please, have a seat with us.\"\n\n\"I can only stay a moment.\" Cindy said. \"Anything interesting to see from this bench?\"\n\n\"Oh, the traffic is very interesting.\" said the Widow Jones. \"People rushing from one place to another, not taking time to consider where they are, what they are doing, yes?\"\n\n\u2028Cindy smiled. Then the Widow Jones got to the point. \"Over there in that strip mall, on the left side, are the offices of Planned Parenthood for the Town, County and University. Many women go there for reproductive services.\"\n\n\"Oh yeah.\" Cindy said. \"So what's significant about them? Any protests by the Pro-Lifers recently?\"\n\n\"Oh no,\" said Mrs. Jones. \"But some very interesting people have gone into that place in the last few weeks. May I suggest... that you determine if that young lady that was murdered last Monday was a... patient there.\"\n\nCindy almost gasped, but held her face set and firm. \"I'll certainly see what I can find out about that. If you ladies will excuse me, I'll be on my way.\" With that, she got up and took leave of the ladies.\n\n\"Such a nice lady.\" said Mrs. Boddiker. \"And so accomplished. It takes a woman like that to keep a man like the Iron Crowbar in line.\"\n\n\"Ye-es.\" said the Widow Athena Jones. \"He is indeed a man that bears watching... but not as much as the man we are watching...\"\n\n* * * * * * * * * * * * * * * *\n\nI had changed into plain clothes. I was wearing my gray suit with black mock-turtleneck shirt. My badge was affixed to my belt and my gun was in its shoulder holster under my left armpit.\n\nChief Harold Bennett rode with me in my Police SUV to the Country Breakfast Diner. On the way, we discussed the case, and I got him up to speed on possible suspects.\n\nAt the Country Breakfast Diner, they were serving their lunch buffet. We went through the line and headed to the private back room. Somewhat to my surprise, several other people awaited us: Town & County Councilpersons John 'Jack' Colby (owner of this restaurant), Kelly Carnes, and Pastor Raymond Westboro. Also present were Sheriff Daniel Allgood and Fire Chief Patrick Quinlin.\n\nIt was no great feat of deduction to see that I had been invited to an 'informal' meeting of the Council's 'Study Group'.\n\nAs we ate, everyone discussed seemingly innocuous things: the Fall Festival coming up in October, the University's football team and the three high school football teams, some questions about the Emma Washburn case that weren't very deep, and general family chatter. I realized that this was the beginnings of the political 'game', and I let my mind enter what I called 'the zone', to best be ready for the serious business that would soon come.\n\nAfter lunch was over, with Daniel and myself making sure to get large second helpings of food, everyone settled into the business of this meeting.\n\n\"Commander,\" said Councilwoman Kelly Carnes, \"we've asked you here to get your input on the Study Group's work. With your deductive abilities, we're wondering if you've figured out yet what we're doing.\"\n\n\"I have no idea.\" I said, realizing I'd been asked to sit at the center of the table so that everyone could hear me, \"but I'd hazard a guess that it's about rank structure of the Police Force, especially with respect to the Detectives.\"\n\n\"I told you.\" said Jack Colby, grinning at Pastor Westboro, who nodded.\n\n\"I promise, I didn't tell him.\" said Chief Bennett.\n\n\"Oh no, no one told me.\" I said. \"But I've heard the rumblings, and I'm not unaware. I'm also very much aware of the issues between the Fire Department and the EMTs, which is a much worse situation.\" Fire Chief Quinlin grimaced as I said that.\n\n\"I'm sure it is, Commander,\" said Pastor Westboro, using his most soothing pastoral voice, \"but we'd like to confine our discussion with you to the Police Force, over which you have such considerable influence.\" I could not argue with that, I thought to myself. And my opening effort to attempt to solve the EMS problem had been rebuffed.\n\n\"Don,\" Daniel Allgood said, using my first name to show that he was on my side, as well as showing the others that his and my status as brothers-in-law was not being set aside, \"how would you describe the current Police Force rank structure?\"\n\n\"It's a two-tier system.\" I said. \"As you all know, it was put in place when the Town and County merged their governments and public services. One of the tiers is the Uniformed Officers, and the other is the Detectives. It evolved that the Detectives are more like military Warrant Officers, while the Uniformed Officers are like Enlisted personnel.\"\n\n\"Would you say this system is the common structure of police forces?\" asked Kelly Carnes, who I could tell was the de facto leader of the Study Group.\n\n\"Yes and no, ma'am.\" I said. \"The TCPD, and in fact all of the Public Safety Department, has a more rigid rank structure than many jurisdictions, but in actuality the two-tier lines are there in some way or another in virtually every Police Force of any appreciable size.\"\n\n\"And of course,\" I continued, \"there are ranks, like Sergeant and Corporal, and there are of course Lieutenants and Captains. The 'Commander' rank is actually not all that common; usually Departments will just have some 'Assistant Chiefs' and such, then Captains. The Atlanta Police Department as a rank of 'Major'. By the way, I'm not giving up the 'Commander' title, so don't even think about that.\" There was some laughter in response to my half-humorous tone of voice.\n\n\"We would not dream of doing that.\" said Sheriff Allgood, a bit severely. \"But where are Detectives within other Police Forces?\"\n\n\"What we're asking,\" said Kelly Carnes, \"is 'What is a more typical structure of police departments?'.\"\n\n\"There's different ones.\" I said. \"It's still ultimately two-tier with Uniformed Police and Investigators, though. Some places, like San Francisco, have 'Inspectors'. You may remember the 'Dirty Harry' movies.\n\n\"More common, though,\" I continued, \"is to have 'Detective-1', Detective-2', and so on. There are Detective Sergeants over them, and then a Lieutenant over the bunch. Our structure of a Vice Lieutenant and MCD Lieutenant is common, as far as that goes. Big cities will have separate divisions for Homicide, Robbery, Sexual Assault, and so on, but we're not that big. In some places, ranks are a bit fluid: a 'Detective-3' does not formally outrank a 'Detective-1', but would be respected for experience and knowledge.\"\n\n\"And a 'Detective-1' would not outrank a Sergeant, or even a Uniformed officer at a similar pay grade?\" asked Jack Colby.\n\n\"It would depend on the particular jurisdiction, and how the structure was set up.\" I said. \"Let me put it this way. If you go into City Homicide, you'll see Detectives in plain clothes at their desks, one or more of them being a Detective Sergeant, and a Lieutenant in an office nearby. If you go into City Vice, you'll see Detectives in plain clothes at their desks, one or more Sergeants, Lieutenant in a nearby office. Uniformed officers will rarely be seen in those areas, except to bring in perps in custody to interrogation rooms.\"\n\nI continued: \"If you go into Midtown, you'll see the same thing with respect to Detectives... but you'll see Uniformed Officers stationed in the same buildings, walking the same halls. Our Headquarters is like Midtown's, but our Precincts are like the Uniformed City Police stations.\"\n\n\"Commander,\" said Pastor Westboro, sitting back as if the question were casual, but his peering eyes giving away the seriousness of the question, \"would you say the current system is the most efficient? Or can we do better?\"\n\n\"With respect to the Detectives, the current system works very well.\" I said. \"We have Detective Apprentices, which don't outrank Sergeants, and we have Detective, Junior Grade, which we call 'J.G.', that are like Corporals. They're called 'Detectives', but it's about the same thing as other places. The full Detectives are given responsibility, they are in charge of investigations and need a certain level of authority to get their jobs done.\"\n\n\"The New York Police Department isn't structured this way.\" said Kelly Carnes. \"And they're one of the biggest and most experienced in the world. Do you think your Department is better than theirs?\"\n\n\"Why, I most certainly do think the Town & County Police Department is the very best in the world, and I'm proud of them, thank you very much.\" I replied, shooting down the implied insult. I noticed Jack Colby grinning, and Chief Bennett and Sheriff Allgood nodding at my defense of my Police Force.\n\n\"I would add this.\" I said. \"The NYPD may not, but the Los Angeles Police Department does makes differentiations in their Detective ranks, though not with Warrant Officer bars like we do. They use Sergeant stripes with diamonds like Army First Sergeants. But it's very similar to our own structure when all is said and done.\"\n\n\"Commander,\" said Pastor Westboro, \"what is your opinion on the Precincts. How has that worked out?\"\n\n\"There have been some positives and some negatives about Precincts.\" I said, treading carefully. \"It's been good in that Patrol Officers get to know their areas, get to know the people in the areas, and what's going on. On the flip side, it's still almost too small a County for three full precincts, and we're still ironing out communications issues and dividing manpower and equipment.\"\n\n\"My point to the question, Commander,\" said Westboro, \"is that you were opposed to Precincts, but now that they are in place, they seem to be working well for you. At least that is what your Police Chief has reported to us. Is he wrong?\"\n\n\"He's my boss, he's never wrong.\" I said, drawing some laughter as I deftly avoided creating strife with Chief Bennett. \"But like I said, there are ups and downs to Precincts, and I still think we're too small a jurisdiction to really justify them.\"\n\nWestboro got to his point: \"But despite your opposition to Precincts, the world did not fall down when they were instituted. If we were to... streamline the Police rank structure, would that really be a burden?\"\n\n\"In answer to that, Pastor,\" I said, \"I am going to be politically incorrect amongst you politicians. What is going to end up happening is that we will still have the same or very similar structure as we have now. After you guys study the structures of large cities like New York and L.A., small towns like Hillside, Westphalia and Eastphalia, and the various Police Forces within our State... whatever you decide to do will still have us end up with essentially the same thing. What I don't want, and won't brook very easily, is y'all doing anything that demoralizes my Police Force, especially the really excellent Detectives I have working for me.\" \n\n* * * * * * * * * * * * * * * *\n\nCindy Ross practically ran into Headquarters after tearing into the parking lot in her Police SUV. She hurried down the hallway to the office of ADA Jenna Stiles, which was situated along the back wall of Police Headquarters, on the other side of the Main Conference Room from the Chief's office suite in the back left corner.\n\nJenna was in her office going through stacks of papers with her assistant Gor-don. Cindy knocked on the half open door and said \"ADA Stiles, can I speak with you? It's business, and it's urgent.\"\n\n\"Uh, sure, Captain.\" said Jenna. \"Gor-don, go ahead and take these papers to my office in the Courthouse. We're ready to go with these cases.\" Gor-don collected various collapsible file folders of papers and carried them out, glaring harshly at Cindy for intruding.\n\n\"What's it about, sweetie?\" Jenna asked as Cindy closed the door behind Gor-don.\n\n\"I know you've worked with the Planned Parenthood people before, giving them legal advice and all.\" Cindy said. \"And you're in contact with them in preparation for whatever political career you decide upon.\"\n\n\"That's true.\" said Jenna. \"So what's up?\"\n\n\"Do you have anyone inside there you can contact to get me some information?\" Cindy asked. \"I need to know if a woman had an abortion there recently. I don't want to go through the hassle of getting a warrant to do it formally, and then only to have them tie it up in Court for weeks on end.\"\n\nJenna considered it. \"I think I can ask one or two people there to discreetly look up something, but only to confirm it, and 'off the record', as it were. Who do have in mind?\"\n\nCindy replied \"Emma Washburn... the woman that was murdered earlier this week.\"\n\nPart 12 - Rumors and Innuendo \n\nAs I entered Police Headquarters from the side door that served the fenced-in employee's parking lot, Lt. Teresa Croyle fell in beside me, and we walked down the hall together.\n\n\"Can I speak with you in your office, sir?\" she asked.\n\n\"You certainly may.\" I said. I had felt tension in the air as soon as I'd walked into the building.\n\nOnce inside, I had Teresa sit in one of the comfortable 'hot seat' chairs in front of the office as I sat in my comfortable Command Chair behind the desk. \"What's up?\" I asked.\n\n\"Sir,\" said Teresa, \"My Vice Detectives are acting like cats in a room full of rocking chairs. Julie told me that there are rumors going around that they're going to change the rank structure and demote all the Detectives. Is that true, sir?\"\n\n\"Wow, that traveled fast.\" I said, more to myself than Teresa. I saw the look on her face and said \"Look, let's not get ahead of ourselves, here. I just found out about the Study Group at my lunch meeting. They are talking about the rank structure, but they can't demote anyone without cause even if they wanted to. You saw how the Police Union was about Sharples? Can you even imagine what they'd do if the Council tried to demote all of the Detectives?\"\n\n\"Sir, that's not a denial.\" replied Teresa.\n\n\"Actually, it is.\" I said. Just then, there was a knock on my door and Lt. Perlman bounded in.\n\n\"Is this about the rank structure?\" I asked, seeing the look in her eyes. She nodded.\n\n* * * * * * * * * * * * * * * *\n\nAt 4:00pm the meeting of all of the Detectives was held in Classroom 'J'. I was going to nip this shit in the bud without delay.\n\n\"Okay guys,\" I said, sitting in a chair on the raised part of the floor in the back of the room as the Detectives sat in the school-style desks. \"This meeting is to dispel the rumors you've been hearing about the rank structure. I can't talk openly about what little I know. But I can tell you that none of you will be demoted, and you will certainly not lose your pay grades... unless you whack me upside the head with a crowbar or something.\" No laughter. \"That's a joke, guys. Lighten up, they don't get any better.\"\n\n\"Anyhoo,\" I said, \"the Police Union would scream if the Council messed with any of you... and then the Council would have to deal with me. Okay?\"\n\nDetective Julie Newton raised her hand. \"Sir, are they going to split us up and assign us to Precincts?\"\n\n\"Over my dead body.\" said Lt. Tanya Perlman, her normally cherubic face looking dark and menacing.\n\n\"No, guys, you are not getting away from me that easily.\" I said. No laughter... tough audience today. \"Seriously, guys... that's the one line they know they can't cross as long as I'm the Commander of this Police Force--\" I saw ADA Jenna Stiles peek her head in the door.\n\n\"Captain Ross,\" I said, \"ADA Stiles has some information for you.\" Cindy turned and saw Jenna, then got up and went into the hallway.\n\n\"Guys,\" I said, \"the bottom line here is to not worry about the rumors. If the Council does do anything, it'll be weeks, months even. I'd rather watch glaciers moving than have to watch these politicians take action on anything.\"\n\nJulie Newton raised her hand again. \"Sir,\" she said, \"Precincts were always a rumor, then all of a sudden they were there.\"\n\n\"Look,\" I said, \"I cannot sit here and tell you that the Council won't do anything. But I can tell you that none of you will be negatively affected, that you'll be working from right here in Police Headquarters, and that our jobs haven't changed. Do not let this b.s. affect your morale. And to boost that, I will bribe you with doughnuts tomorrow morning, okay?\"\n\n\"Three boxes, Commander.\" said Joanne Cummings. That got a big laugh. What does she have that I don't, I thought to myself... besides a beautiful face, a smoking hot body, and an innocence that belies her tremendous abilities...\n\nCindy came back inside. \"Commander, I hate to break this up, but we've got something on the Washburn case...\"\n\n* * * * * * * * * * * * * * * *\n\n\"Yep,\" Cindy said. \"Emma had an abortion a little over two weeks ago. She was about two months pregnant.\" The pertinent MCD people were in Classroom 'E' with me and Captain Ross. ",
        "\"So that's where that cash Emma took out went to.\" said Tanya Perlman.\n\n\"This is good information, Captain,\" said Theo Washington, \"but I'm not seeing where it helps us with these cases, especially the burglary.\"\n\n\"Oh, it helps us tremendously.\" I said, my voice musing. I was halfway to a reverie. \"It clears up a lot of things, particularly with regard to the motive for Emma's murder.\"\n\n\"Care to share this clearing up of things?\" asked Cindy. \"I'm not seeing where this fits in. I'm not even seeing who could've murdered Emma, much less any clue on the burglary.\"\n\n\"Tell you guys what.\" I said. \"I know what I always say about theorizing, but I want you to do that now. Tell me what you're thinking about these cases. Nothing is off limits, this is just a conversation. I want to see where you are on this. Who wants to go first?\"\n\n\"I'll go first.\" Tanya said. \"I've looked at all those photographs and videos. I didn't see anything except a couple of shots of Emma and Sean having oral sex, and some closeups of penetration. I can see where Emma's husband might get upset and even violent over those, even though he seemed to like them.\n\n\"However,\" Tanya continued, \"Sean is apparently the father of Emma's aborted baby, and if Sean found out about that, he might've gotten angry that his baby was aborted and he took it out on Emma.\"\n\n\"So who murdered her?\" I asked.\n\n\"We've simply got no proof on either Sean or Chris.\" said Tanya. \"Nor anyone else, for that matter.\"\n\n\"You're wrong there.\" I said. \"Okay Theo, forget I just said that. What's your thinking?\"\n\n\"I've been looking at the burglary more than the murder, as that was assigned to me.\" said Theo. \"I think something was caught on Mrs. Sanderson's photographs, something none of them realized was on there, but whoever broke into her house knew it and took all the pictures, videos, computers, cameras, etc., that might've contained that information.\"\n\n\"That's a very good thought.\" I said. \"Did you see anything in any of the photos?\"\n\n\"No sir.\" said Theo. \"Unless the people in the background while Emma and Sean were on their dinner dates are part of the issue.\"\n\n\"That'll be a bear, trying to identify all those people, then having to investigate them to see if there's any connection to Emma or Cassie.\" said Cindy.\n\n\"And it'd likely be a waste of time.\" I said. \"So Theo, any ideas who did trash the house?\"\n\n\"No sir.\" said Theo. \"I guess Mr. Washburn might have done it, but I don't see why. I'd say it was outsiders, but who and why... you'll have to tell me, sir. I know I've missed something that you've seen.\"\n\n\"You've seen everything that I have.\" I said. \"Indeed, all of you have. But I've not just seen... I've observed! Okay, Joanne... what say you?\"\n\n\"Sir, I was thinking about the interviews with Mrs. Sanderson, Sean, and Mr. Washburn.\" said Joanne. \"Mrs. Sanderson... Cassie, if I can call her that... was constantly subtly suggesting that Chris Washburn was involved. And Chris was implying that Cassie was involved. Chris went over to Cassie's in a drunken state and tried to kick the door down, and I wonder if he thought Cassie or Sean was behind his wife's death. In any case, I get the feeling Cassie and Chris don't like each other very much.\"\n\n\"Good thoughts.\" I said. \"And a very astute observation that Cassie and Chris don't like each other. I agree with that.\"\n\n\"And there was something else, sir.\" said Joanne. \"We talked about it, but I'm still having trouble getting my head wrapped around it. Cassie stopped talking when you started asking about Sean's income, and she wouldn't discuss it. Their lawyer threw up firewalls about that, also. I was thinking that was really strange, and maybe it has something to do with the case. Maybe what's on the pictures or videos has to do with whatever suspicious thing he's doing to make money.\"\n\n\"Very good.\" I said. \"Very good. Let me throw up these caveats, though. First, Sean does not need to burgle and trash his own house if there's something on a video or picture. He can look for that at leisure, then destroy it when he finds it. I would also ask how that ties into Emma's murder.\"\n\n\"Someone knew something.\" Cindy said. \"Maybe Emma knew something she wasn't supposed to. The perps beat the truth out of her, then they killed her.\"\n\n\"Wouldn't they want to kill Cassie and Sean too, then?\" I replied. \n\n\"Maybe they were going to when they broke in.\" Cindy replied. \"But they weren't there, so the burglars just took all the photography and videography stuff, and a few extra things either they wanted or thought they could sell.\"\n\n\"And they waited two days after killing Emma to burgle the house?\" I asked. \"That seems rather... lazy of them. So who killed Emma, Crowbar 2?\" I asked.\n\n\"Must be outsiders.\" said Cindy. \"Cassie, Sean, and... I'm sorry to say... Chris all have alibis, though I know what you think of those.\"\n\n\"Indeed.\" I said. \"If they didn't have that photograph of Emma auto-uploaded to Facebook, we'd be having entirely different conversations, wouldn't we?\" That got Cindy peering at me.\n\n\"Okay, Crowbar 1.\" my partner replied. \"Time for you to spill it.\"\n\n\"Better than that,\" I said, \"I'm going to perform a little exercise. I think I have proof, but I'd like something a little more solid. Here's what we're going to do...\"\n\nPart 13 - The Sting \n\nAt 6:30pm, I headed to the house of Cassie and Sean Sanderson. Cindy was riding with me in my Police SUV, as we were keeping two-man control of the evidence I was bringing to the house. The police convoy behind me contained Joanne and Theo, Tanya, Sergeant Rudistan and Sr. Patrolman Morton, and Crime Lab Technicians J.R. Barnes and Christina Cho, both with cameras to record the lecture I was about to give.\n\nComing into the greatroom, I noticed that the mantle clock had been restored to its original perch on the fireplace mantle. I set about putting all the cellphones collected as evidence on the long side table against the wall where the TV had been mounted, as well as an easel and a piece of cardboard covered by a cloth.\n\n\"Ah, everyone, come on in.\" I said. Cassie and Sean came in, accompanied by their pastor, Raymond Westboro.\n\n\"Ah, Commander, twice in one day I'm running into you.\" he said. \"I was in Spiritual discussion with Cassie at the church when she got your call.\"\n\n\"I asked the Pastor to come with me.\" said Cassie. \"And I called Mr. Fowler, of course.\" Indeed, Mr. Fowler was also present.\n\n\"That's quite all right. This bit of police business might interest you, Pastor.\" I said. \"Okay, Rudistan, bring Mr. Washburn in.\" Rudistan did so. Chris Washburn had an ankle monitor on, and Rudistan removed his handcuffs. Everyone sat down in the chairs brought into the room from other parts of the house.\n\n\"Okay, everyone, thank you for coming.\" I said. \"I brought you all here to discuss the unfortunate death of Emma Washburn. There are some discrepancies in the case that I'd like you to help me resolve.\"\n\nI took the cloth off the cardboard on the easel, revealing an enlarged photo of Emma in front of the clock. The image was also a mirror-image of the photograph I'd taken of that important photo while gathering evidence during the initial burglary investigation.\n\n\"Okay, folks, this is the photo of Emma that was uploaded to Facebook.\" I said. \"As you can tell, the clock behind Emma says four o'clock--\"\n\n\"Wait, that's not right!\" said one of my observers. \"The original uploaded photo said eight o'clock!\"\n\n\"No, this is the photo.\" I said. \"And it says four o'clock, so in reality, none of you have an alibi for the time involved.\"\n\n\"You're full of it.\" said the observer, who got up, grabbed the cellphone in the flower-print sleeve from the table, quickly entered the code, then showed me a photo. \"That's the uploaded photo! The clock says eight o'clock. You've got this picture backward! You see?\"\n\n\"Oh yes, I see...\" I replied.\n\nTo be continued.\n\nYou have all the clues. Who murdered Emma Washburn? Why? And what led the Iron Crowbar to an (upcoming) successful arrest? Answers next chapter!"
    ],
    "authorname": "WifeWatchman",
    "tags": [
        "hot wife",
        "big cock",
        "mystery",
        "crime drama",
        "police drama",
        "photos"
    ],
    "category": "Non-Erotic",
    "url": "https://www.literotica.com/s/the-hot-wife-photos-ch-03"
}
{
    "title": "Beginner's Guide to Buying Porn",
    "pages": [
        "How well I remember my first experience with porn. I was just a teenager, maybe 15 or 16, and we went to my friend's basement with his dad's old Honeywell 8mm projector, some cigarettes, and no idea what we were actually going to see.\n\nWhen the lights went out and the film came on, there was this rather old, somewhat overweight lady in a doctor's office, where she appeared to be getting a physical. I say appeared because there was no sound of course, and you could only infer from his white coat, stethoscope and exam table that this was the case.\n\nBefore long, he had his stethoscope, then his tongue on her nipples as she stroked his hair. Talk about doctor-patient privilege. Before long, she was giving him oral pleasure, he was returning the favor on her (very hairy) pussy and they were fucking on the exam table. He never took of his coat, or socks and shoes for that matter. His cock was twice the size of mine for sure, leaving me self-conscious for many years to come. Speaking of which, when he came, he pulled out and shot all over her, which I did not understand at all.\n\nWe were in heaven, no longer just teenage boys, but suave young men well versed in the intricacies of the adult film universe. By the time we were finished with that story, the guys in school heard we had watched an academy award worthy adult film with the most gorgeous women doing the filthiest things that we had only dreamed of. Not a ten-minute silent film featuring a quickie-fuck by some past-her-prime hooker shot in someone's rec. room.\n\nThat was my initiation into porn, and it was so auspicious that I didn't see another one for ten years.\n\nTen years later, while a copywriter at a small ad agency, an art-director and porn enthusiast lent me a video that he recommended. It was the original Taboo, starring huge-breasted Kay Parker as a young mother who ends up in an incestuous relationship with her teenage son, some big sticked guy who I still don't know. Kay Parker was a big star at that time, and this was a good, professional film \u2013 not video, film \u2013 with a good plot, music and hot sex.\n\nSo I brought this tape home to our apartment, and my young bride and I popped in into the VCR. She had never seen a porn, or adult video, and had absolutely no idea of what to expect. Neither did I really. I certainly didn't expect what happened.\n\nThe movie came on and the plot took its time to develop, which made it watchable and fun. Not as good as a mainstream movie, mind you, but good. There was buildup and anticipation. Then the sex started happening. This was no longer amateur hour, since many of the early porn writers and directors came from the world of conventional. You could see the desire in their eyes, the sweat on their bodies, and hear their voices moaning, begging, cumming, albeit obscured by music. Of course, the pussies were still hairy but at least this was pre-silicone. Kay's tits were real, and they looked and moved like it. And she didn't moan like she was having a baby cow, she writhed and groaned with authentic passion. When she performed oral, she didn't just look at his eyes and swallow him like salami. She worshipped that cock, she rubbed it all over her face like it was her prize before she sucked it like her favorite lollipop. Of course the guy still pulled out and came on her flat stomach.\n\nThis was hot, I mean hotter than anything I'd ever seen. I couldn't take my eyes off the screen. My wife seemed to just take it lightly, unaffected. She's far from conservative, but she's no sex addict (like me!) either. She didn't dismiss it as silly or perverted, nor was she staring with her tongue hanging out like a rabid dog \u2013 at first. But as the sex got hot and hotter, so did she. As his cock slid in and out of her and her head swayed from side to side as her giant tits shook, I could see my wife's tongue licking her lips and her hand brush her crotch a little more than casually. As her pussy started to buzz and her nipples tingle, she began fondling her own tits and squeezing her nipples with helpless lust. Within a few minutes, we were having balls to the walls, wet sucking and fucking sex all over the room. She sucked my cock with a fervent gusto, moaning and twitching as I sucked her swollen clit until she just exploded, screaming my name. Then we fucked like two rabbits in heat, shaking the furniture and soaking the upholstery with cum and the pussy juice streaming out of her.\n\nWas I hooked on porn? What do you think?\n\nMore, I needed more! My buddy lent me some of his other videos, many of the classic films of the time. John Leslie's Talk Dirty to Me and 1001 Erotic Nights. Vista Valley PTA, Amanda By Night, Beyond Desire, Chameleon, Seven into Snowy and more.\n\nI'm not claiming that we watched porn every night, not at all. But we did enjoy these films every few weeks and they definitely enhanced our sex. You just can't watch hot sex with good looking people and not be stirred by it.\n\nThese were really the best films of their day and unless you're a great fan of shaved pussies and fake boobs (they're OK with me!) they still stand the test of time, bell bottom pants and colorful satin shirts aside. The sex seemed to make sense as an overall part of the movie, as opposed to the later films, where the plot was a thin device to string the sex scenes together. It seemed as though the focus of the sex was how great it felt, as displayed on the actor's faces. Today, so much more of the sex is what I call gynecology, where the camera seems literally inside the girl's pussy for 15 minutes.\n\nAt that time, pornographic movies took more than two days to make, and there were therefore far fewer choices. Once we went through my friend's supply the trouble began. \n\nI went to the few video stores that had an adult section tucked into the back somewhere, and prayed no one I knew saw me. I rented my videos based on the box covers and the enticing packaging. The videos we saw were generally and genuinely awful. Terrible plots, if any at all. Annoying, distracting, repetitive rock music \u2013 and I'm a rock music fan. My wife was not turned on by a chunky chick with a pimply ass being fucked by some skinny twerp with a big dick and an equally pimply ass. Followed by more scenes of the same. All looking like they were filmed by the light of a 40 watt bulb in my basement. Yuck. Our interest waned fast. Obviously the video store buyers did not know how to buy good porn.\n\nThen I saw ads for adult videos in Penthouse or Playboy Magazine. This truly seemed like a better plan. I wouldn't have to stand at the counter renting 'I Cream of Jeannie' when my next-door-neighbor walked in to rent the latest Disney Video and discuss the PTA meeting.\n\nBuying was a far more expensive way to go, though, as most videos were in the $29-39 range. But hey, it's only money right? Right \u2013 and far too much of it was wasted money. They, too, were selling what was probably cheapest for them to buy or had very little knowledge of what was good porn. The box covers looked great, the descriptions were inviting, but the product was generally disappointing. There were some exceptions, such as anything with Dyanna Lauren, who is so pretty it made me want to cry. Face of an angel, eyes like two blue icicles, body just too good to be true and that voice\u2026or Celeste, who also has an incredibly lovely face and breasts a mountain climber could appreciate. Nevertheless, at those prices, I still wanted consistently good product.\n\nOnce the Internet became wildly popular, I found that it was and still is a superior way to purchase adult video and DVD. First, there's the privacy of it, since no one can see you at home on your computer at 3:00am feverishly looking for just the right porn and stroking your\u2026wait, maybe that's \u2013 just me? Second, since there are many companies selling the product and they are all essentially distributors, you can shop for the lowest price for the same product. Third, you can get more information on a product before you order it. There's no shortage of information on the Internet. For example, if you want to see what videos Dyanna Lauren (there I go again), Tori Wells, Taylor Hayes, Juli Ashton, Annette Haven \u2013whoever your favorites are or become- are in, you can easily search a seller's offerings.\n\nAs for me, I didn't know what movies I wanted to purchase as first, and was frustrated at buying those that sounded a lot better than they were. And the sheer tonnage of videos/DVDs is just overwhelming. Whatever category you like; straight, gay, lesbian, couples, singles, gonzo, wall-to-wall, fetish, bondage, anal, compilation, big tits, small tits, cum shots, incest, young, mature, black only, oriental, how-to, how-not-to, why-not? my mother, your mother, my father and your mother, fisting, vibrators, dildos, blowjobs only, schoolgirls in uniform, interactive, greatest scenes, professional, amateur, professional with amateur, husband and wives, wives with other men, gang bangs \u2013 whatever your desire, it's available, believe me. But where to start?\n\nThat's when I discovered www.rame.net. Rame is a free website that rates adult videos just like any reviewer rates movies you may want to see in the theater, and gives a wide variety of other valuable information as well. Instead of having just one reviewer as a newspaper may, rame has a large number of reviewers on the site, so that one person or many reviewers may review a video or DVD. These different point of views become important, because reviewers have different tastes like everyone else. Some may like a video with more plot and rate those higher, while others may only be interested in the action, and may not like a video with more character development or arty approach.\n\nMany, though not all reviews will use a star system, giving usually one through five stars for the different aspects of the film, such as the sex, plot, technical proficiencies such as lighting, music, attractiveness of the stars, etc. \n\nRame's search engine is incredibly helpful because it lets you search for films by their title, or tell you what videos your favorite stars are in, then gives you a link to read the review of that video. It even gives you shopping information, so you know where you can buy the product online and shop prices, which are usually quite close to one another.\n\nNot every video/DVD is reviewed, but the good ones usually are, so this site can save you a lot of money and wasted time. Nothing's worse than looking forward to a video/DVD you've ordered, then finding it has perhaps one or two good scenes out of an hour and a half. It's happened to me too many times.\n\nBy the way, most of the reviewers are experienced professionals and good writers. The reviews are packed with information, so you know just what you're buying, and many reviews are a lot of fun to read, as well.\n\nI'm not suggesting that rame is the only review site on the Internet, I'm sure it's probably not. In fact, AVN (Adult Video News) magazine also features reviews of videos/DVDs online for free. AVN is the trade publication of the adult video industry. It gives news, interviews, adult video award information, trends, product information and lot more, created for the adult video and paraphernalia (vibrators, lubricants, anal beads, clothing \u2013 you name it) retailers, reviewers, industry executives and stars, and dedicated video enthusiasts. Its reviews are designed to guide retailers where a product would fit in. In the case of a video, what market it would satisfy and under what section to stock it. By section I mean couples, wall-to-wall sex, fetish, etc. \n\nAVN is a great magazine, seriously written and produced by professionals and a publication whose scope and quality would be the envy of any industry trade journal. Their website is also top notch and a wellspring of information. If you want as much information as possible on the industry, directors, stars, trends, etc., a subscription might be a good idea. But for the 'casual' video enthusiast, a subscription to their magazine, though never a waste, might be a little overkill if all you want is reviews and an occasional snippet of information on a favorite star or upcoming release. For that, simply visit the AVN website.\n\nTaking a step back for a moment, for sheer volume and quality of reviews, rame is as good as it gets in my book. Their reviews are usually long and detailed, giving me as much or more information with which to make a decision. They also usually give a long list of vendors who have good reputations. I've never had a problem with any of them.\n\nOK, let's backtrack a bit. You may be saying, \"The review sites sound fine if I have some idea of what I'm looking for or like a particular star or director, but what if I don't know any of that yet?\" Are you saying that? I'm glad you did. There's nothing wrong with being a beginner.\n\nThere is not to my knowledge, which is by no means all encompassing, a site that breaks down videos into different categories. There are worthwhile Internet sellers, such as Good Vibrations that break down the videos they sell into different categories for you. But there are tons of other titles in each category that they don't carry.\n\nBefore I begin more specific tips, I want to make one point clear, because it answers the one question people ask me all the time, which is, \"why aren't adult movies just like regular movies, only with more explicit sex scenes?\" It's a question I used to ask myself early on and has a simple answer. Making a mainstream movie takes many months and requires literally hundreds of people, from technicians to known, \"bankable\" actors. A movie today can cost between several million to tens of millions or more to make \u2013 and many still lose money. Adult videos don't cost nearly that much to make \u2013 and can't. They would never, ever recoup even of fraction of that kind of investment. It's a nice thought, but it just can't be done.\n\nConsidering the budgets and time constraints that adult video producers &amp; directors endure, the product they offer is darn good. In terms of talent, many of the adult actors and actresses, including Randy Spears, Herschel Savage, Dyanna Lauren, Taylor Hayes, Mike Horner, John Leslie, Ginger Lynn, Mark Davis, Melissa Hill, Steven St. Croix, Tony Tedeschi, Jon Dough, Jonathan Morgan, Kaitlyn Ashley, Steve Drake and many others I haven't listed are good enough to star in mainstream productions, if only those markets were open to they. Sadly, they usually aren't, and porn stars and directors usually stay within their industries, with some exceptions, such as Nina Hartley, Tracy Lords and Ginger Lynn. So don't look for the production values, special effects, musical scores and overall polish of big-budget blockbusters, and you may be pleasantly surprised by some videos anyway. \n\nThat said, here are the most useful tips I can give you in finding the type of porn you can enjoy, no matter what category it happens to be.\n\n<LI>If you want good, general couples porn, look for the directors who make videos (and by that I mean DVDs as well) that cater to this market. These include but are not limited to Candida Royalle, who makes softer XXX, Paul Thomas, perhaps the best ever, certainly today's most prolific director of plot-driven porn, Brad Johnson, a veteran porn star himself and popular director, Veronica Hart, Andrew Blake, for highly styled movies with a lesbian bent and some of the most stunning women in the world, Michael Ninn, who also makes incredibly moody videos with superior technical aspects and gorgeous women having hot sex. I'm sure I have left out more names than I've included, but you'll get the hang of it.</LI>\n\nIf you go to the rame site and put Paul Thomas in the search engine in the performer category, you'll find a list of the many movies he's directed (as well as many he starred in as a younger man). Included there are Nothing to Hide - Justine 2, Bobby Sox, Bad Wives, Comeback and a long list of sensational videos. \n\n<LI>Look for the stars you grow to like and reward them by seeing their movies, just as you would any other actors. Who are the biggest female stars in the business now? It changes year to year and is most certainly a matter of taste, but I'd have to say Jenna Jameson (Flashpoint, Conquest, Dreamquest, etc.) Taylor Hayes (Jeckyll &amp; Hyde, Masseuse 3, Fade to Black) Dyanna Lauren (Bad Wives, Ancient Secrets of the Kama Sutra, Censored) Brianna Banks, Terra Patrick, Sydney Steel, Juli Ashton, Asia Carrera, Chloe, Devon, Raylene, Stephanie Swift, Julie Meadows, Keri Windsor, De, Serenity and many more. There are others that I like a lot, like Racquel Darian and Celeste, but I think they retired. </LI>\n\nWho knows why you may like one star more than another? It's certainly a matter of personal taste. Maybe you like the way they look, the sound of their voice. Maybe they remind you of an old flame or unrequited crush, like a teacher or friend's mother. Maybe its their expression while they make love, or the sexy things they say. These are the things that do it for me \u2013 or don't do it. There's nothing worse, in my opinion, than a drop-dead gorgeous girl who looks like she's being tortured when making love, judging by her expression. Or girls who shout, hoot and whoop so much they must be Terret's Syndrome sufferers. You may like that and hey, to each his own. I don't like girls who are dead silent either, I just prefer a somewhat realistic approach to what they say and do during sex.\n\n<LI>Often, stars will 'retire' and come out of retirement more than once. So once you find a performer who you like to watch have sex, look for their movies. Many stars have, I'm not exaggerating, as many as several hundred movies to their credit. Marc Davis has been in over 1,000 movies and still has his cock intact. They may not have been the main star in all of them, especially their early videos, but it's fun to see how they've changed and, usually, become even hotter. As for men, some get older and fatter while some, like Randy Spears and Alex Sanders, seem to stay in incredible shape, which must be a lot of work.</LI>\n\n<LI>You can also shop by video title, then read the review to see if it's any good. For example, when you see movies titled \"Begging for Feet, \"Anal Injury, \"Adventures in Bondage, \"Runaway Butts, \"Screw My Wife Please, \"Swallow My Pride and \"Gang Bang Cum Shots,\" what do you think they are going to be about? These specialized films usually don't feature the biggest stars, but can have some wild, adventurous and totally inappropriate sex \u2013 my favorite kind! Again, with thousands of titles available, many will not be reviewed. This is especially true of compilation titles, those with sex scenes only \u2013 of which there are, God, probably millions by now. For these, you pay your money and take your chances, if you wish.</LI>\n\n<LI>Check out the studio. It's not quite like MGM and Warner Brothers, where every studio makes any type of movie. Adult studios often develop niches. Vivid and Wicked usually make couples-oriented, plot driven porn. Private is known for making films on foreign soil, often dubbed, with lots of anal loving, beautiful sluts, if you like that sort of thing (pant, pant) while other studios, such as VCA, Sin City, Caballero, Evil Angel, Hustler Video, and too many more to mention vary the content. Now, this does not mean that a studio like Vivid makes strictly couples films and not specialty hard-core films, those with blowjobs only for example, because they absolutely do. Making money is making money and you give the public what they want. But a known couple's director like Paul Thomas works for Vivid (at this time), so they have a large catalog of couples oriented films. While a company like Anabolic is better known for anal offerings (don't you just love the way that sounds?) Many directors, work for one studio at a time on a contract basis. So Michael Raven films are for Sin City while and Veronica Hart directs for VCA. </LI>",
        "<LI>Most if not all studios have a website, usually www.theirname.com or just look it up on a search engine. But I want to tell you, some can be more trouble than they are worth. There are tons of annoying pop-ups advertising different memberships that enable you to see photos or videos on your computer, just like thousands of other porn sites on the internet. But those sites that are good give you a comprehensive list of what they sell and even sell them, though often at higher prices than you can get them for elsewhere.</LI>\n\n<LI>I'm not one to disparage a person's tastes, but if the specialty films you're looking for involve children or actual pain and suffering or worse, you're on your own. I want nothing to do with that kind of trash and neither should you.</LI>\n\n<LI>Aside from the studio websites and retailers you'll find on the net yourself or through rame, another avenue for purchasing adult video is ebay. Yes, ebay. They have an adult section under their \"everything else\" category. You have to establish you are an adult first by giving them a credit card, but believe me it's completely secure. On ebay, you are not able to search for a title, but can browse through different categories, such as straight, lesbian, etc. Many of the videos/DVDs are new, while others have been watched by the original purchaser. Like everything else on ebay, you are bidding and the highest bidder wins. Just don't get caught up in the excitement of bidding and pay more than you should. You can get some very good deals on ebay, especially for compilations.</LI>\n\nHere again, I warn you that box covers and descriptions are frequently better than the actual video, so be cautious and read the review before bidding, if one is available. I've sold a lot of videos/DVDs on ebay and have been pleased. I've also purchased some real crap in my time, not ebay's fault. There are even some ebay \"retailers\" who offer hundreds of titles \u2013 many you've never of. They can be of every different variety. All I'm saying \u2013 it boils down to this \u2013 if you waste money on disappointing product, you may get turned off to the worthwhile videos, and that would be a shame. Stick to the good stuff at first, and if you can get great deals on some other titles and want to take a shot, go to it.\n\n<LI>If you're looking to turn your lover on, don't just stick with what you think he or she would like. You may be wrong. A straight-laced heterosexual girl may be overwhelmed by a scene of two women getting it on, trust me! So may that bank manager husband of hers. More men and women have been turned to mush by the sight of two gorgeous women licking each other's pussies than you can imagine. In fact, it is so arousing that most straight porn has at least one or two girl-girl scenes in it. All I'm saying is - experiment.\n\nMy favorites? I have to again admit that there are so many out there that I haven't seen, but you don't want to hear that. Well, some of my real favorites include:\n\nFade to Blue (with Juli Ashton)\nFade to Black (with Taylor Hayes)\nDinner Party (with Celeste and Mark Davis)\nSearch for the Snow Leopard\nNothing to Hide, Justine 2 (great!!)\nChameleon (with Torri Wells) also, Chameleons 2, with Diedre Holland\nEyes of Desire\nElements of Desire\nBad Wives (Dyanna Lauren &amp; Mellisa Hill)\nAmanda by Night\nTalk Dirty to Me (John Leslie)\nTaboo (Kay Parker \u2013 wow!)\nUndressed to Thrill \nBorderline II (Celeste)\nFlashpoint (Jenna Jameson)\nMasseuse 3\n\nOK, let's summarize for a moment before you run off to the Internet or store. You can choose your video by the star, the studio or the subject \u2013 or all three. But you should not choose it based on the box cover alone or you will usually be disappointed.\n\nIf you want couples oriented porn, you can choose Vivid, Femme, VCA or others that cater to this market. You can also choose based on the director, such as Paul Thomas or Veronica Hart, since they generally stick to the same type of films.\n\nIf you want sex scenes and nothing but, there are many 4-hour compilation tapes that will keep you happy for hours on end. This is another way to save some money. If you really have the hots for a star, let's say Dyanna Lauren! (hey, it's my article), see if they have an interactive DVD. They are usually called My Plaything or Virtual Sex with (name of star). These DVDs let you sort of simulate having sex with the star by choosing the action (oral, intercourse, etc.), the position, and even the nature of the star (saying warm and fuzzy things or slutty things). If you like the idea of a porn star looking in your eyes and begging you to fuck her silly, these are fun, at least for a while.\n\nRead the review of a movie before you buy, if one is available. www.rame.net is one great place, and they seem to be quite objective. Opinions on a feature may vary, but if they're all good or all bad, it's an important indication. The reviews usually have enough detail to help you decide on your own if the video is for you.\n\nWell, I certainly hope that I've been helpful to you. I do think that porn is a great way to get fired up, learn some new positions and sex acts and spice up your sex life overall. With such an incredible variety to choose from and so many places to get it, including ordering over the Internet and having it delivered to your door, there's something for nearly every interested adult. Good luck, enjoy, and as always, email me with any comments or questions."
    ],
    "authorname": "BatsandGlamour",
    "tags": [
        "paul thomas",
        "john leslie",
        "ginger lynn",
        "fun read",
        "mark davis",
        "randy spears",
        "kay parker",
        "fade black",
        "search engine",
        "long list"
    ],
    "category": "How To",
    "url": "https://www.literotica.com/s/beginners-guide-to-buying-porn"
}
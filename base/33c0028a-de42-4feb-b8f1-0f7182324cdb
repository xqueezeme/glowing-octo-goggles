{
    "title": "What a Shortstop Does Ch. 11-14",
    "pages": [
        "Dear Reader, \n\nWelcome to part 3! Read parts 1 &amp; 2 to properly enjOy. As always, your feedback is read (and re-read) and greatly appreciated! \n\nxo Kate\n\n_\n\n \n\nChapter 11: Ballet\n\nThe first two weeks of December were hectic for school. Exams loomed just a few days away and the student body was generally feeling the pressure. Carly's procrastination had caught up to her and she was downright snippy, while Sarah dealt with the studying by consuming large amounts of popcorn and caffeine. Rehearsals for the ballet were every night with Sundays reserved for the grueling technical rehearsals. Sarah saw Ro when she could, which mostly meant quick kisses in the parking lot, her dorm, or at the auditorium door when she brought her food during those long days.\n\nThey continued to text constantly, sometimes late into the night while Ro waited in her dressing room or Sarah poured over revisions on her papers. It was a lonely two weeks. But with all the extra studying, Sarah was feeling confident she'd at least scrape out passing scores. The Nutcracker opening night was a success, heralded as \"magical\" in the student paper. And with a ticket reserved for Saturday, Sarah was excited to see it herself.\n\nSarah gave her name to the woman at the ticket counter while David and Carly waited just off to the right for her to come back with the three tickets Ro had put aside for them. Sarah was grateful they'd agreed to come so readily. She wasn't sure how she'd feel about sitting in a theater surrounded by strangers who certainly knew a lot more about the ballet than she did. The bouquet of flowers she'd bought at the greenhouses in town were clutched probably too tightly in her hand.\n\nAs they entered the theater, Sarah felt excitement in the air like electricity. The little kids settling in their seats positively vibrated with it while more than a few of the adults seemed to feel it as well. The curtain glowed a deep red with stage lights above and intricate plasterwork around the outside. It drew your eye, demanding your attention as the hum of voices rose and fell. An usher guided the trio to their seats. Ro had clearly picked the best, close without being right up to the stage and on an aisle so they wouldn't be squished in the center of the row. David and Carly slid in leaving the aisle seat for Sarah.\n\n\"Ya know, I've been here three years and never set foot in this theater,\" David said conversationally as he opened the paper program they'd been given.\n\nSarah smiled, \"It's beautiful isn't it?\"\n\n\"Oh look! There's Roisin's name! And here too!\" Carly took the program out of David's hands to peruse it on her own. \"And Kate's! Wow, there's a lot of dances in this ballet.\"\n\n\"Yeah, Ro said she has three costume changes. Actually, for one of them, she has to strip it off in the wings. She doesn't have time to go back to her dressing room.\"\n\n\"I bet you know exactly how quickly she can take clothes off, huh?\" Carly wiggled her eyebrows suggestively and elbowed Sarah's arm off their shared armrest.\n\nSarah just rolled her eyes. The first and only time she'd watched Ro take clothes off, or helped her, had been that evening in their dorm when they got back from Thanksgiving break. Since then, exams and rehearsals had conspired to keep them clothed and apart. She wondered where Ro's dressing room was and if she was in there right now, slipping into a pair of pale pink tights. Her body would be bent gracefully as she slid the translucent fabric up her tight thighs-\n\nSarah's thoughts were derailed by the dimming of the lights and excited shushes from the audience. Music swelled below the stage as the pit orchestra trilled into the classical notes. She stowed the flowers across her lap hoping the blooms wouldn't be squished before she could give them to Ro.\n\nOf the opening music, Sarah recognized some of the pieces. Pieces often heard in the background of commercials around Christmas time. An omnipresent voice rang out through the swell of the music, welcoming them to the ballet and reminding them to silence all cell phones. Sarah triple-checked that her's was on silent.\n\n\"Now sit back, relax, and enjoy Western Ballet Company's rendition of The Nutcracker!\" The crowd applauded politely as the orchestra swung into full volume and the curtain slowly made its ascent.\n\nThe set beneath the curtain was an elaborate mansion ballroom. Sarah knew Roisin came in dressed as a party guest and did a short waltz. Her eyes scanned the stage for the deep green gown Ro had described. Men and women filtered in while the music playfully greeted each new dancer. Children galloped and pretended to play around the adults.\n\nA green shimmer caught Sarah's eye entering from the right and Ro stood tall and proud with a man on her arm and a child running ahead of them. The scene was...odd. Sarah tried to remember the fantasy, the story, but seeing Ro tote around a little family stirred something strange inside. Not jealousy, but just a feeling of wrongness. To avoid thinking about it, she poked Carly and pointed to Ro. Carly nodded and giggled as she watched the party scene unfold.\n\nThe mice and soldiers descended on one another as the story progressed through Act I. Sarah smiled at the shrieks of delight from the children in the audience as fake cannon fire blasted across the stage. Then the music shifted as the scene, and the Nutcracker, began to change. The toy-like mask fell away to reveal a beautiful, blond male dancer while the little girl, Clara the program called her, dotted the set with enthusiastic spins and leaps. The pair alighted into a wheeled carriage as snowflakes began to fall from the rafters above the stage. Real-life snowflakes, dancers dressed in white tutus and crowns, filtered onto the scene from every direction. Sarah again looked for Ro. She spotted her girlfriend with her dark hair and pale skin slide to the front of a row of snowflakes gently turning and stretching on their toes.\n\nSarah's face went hot.\n\nShe'd seen Ro dance. She'd watched her dance at a party, twirl around the room to a favorite song, line dance with a friendly crowd, and even rock in Sarah's arms...but this. This was something foreign and enchanting. Ro moved with strength and purpose. Her muscles rippled in her legs, her back, her neck, as she turned with utter control on the tips of her toes. Those long legs Sarah had appreciated from the start were tense and shimmering white under the lights. Her arms moved intentionally but with grace from one pose to another. She was fluid and solid at the same moment. Sarah's heart pounded and her fingers clenched on her thigh as she watched this beautiful woman glide across the stage in time to the slow, tinkling music.\n\nOut of the corner of her eye, she felt Carly's gaze on her. Carly smiled ruefully. Sarah simply shook her head. Unwilling to move her eyes from the scene.\n\nRo's line of snowflakes stretched across the stage before curving around the rolling carriage. Sarah couldn't figure out how they were moving so quickly, yet not separating their legs. Then they bounded. Ro's body let loose like an arrow from a bow, shooting away faster than Sarah's dazed eyes could follow. She leapt, then leapt again. Her long legs coiling and unfurling in time to the music. Sarah forgot to breathe.\n\nThen the curtain lowered. The snowflakes continued to escort the carriage as their heads, then their middles, and eventually their legs were covered by the beating, red velvet.\n\n\"Wow,\" was Carly's first word to her as the house lights came up, \"your face is like...really red.\"\n\n\"Shut up,\" Sarah breathed.\n\n\"Yeah, Sarah, do you need some water or something?\" David was laughing.\n\nSarah ducked her head and pressed her hands to her cheeks. Carly and David thankfully left the teasing at that. The three got up and stretched for the intermission, talking about their favorite parts and the unique costumes of the ballet.\n\nAfter just fifteen minutes, the lights began to dim again. The redness in Sarah's face had yet to fully subside and she now had another whole act to go.\n\nThe second act began with more music Sarah recognized. The Nutcracker and the little girl danced, then, Sarah knew from the program, the Sugarplum Fairy emerged. Sarah watched as the exaggerated greetings and slow dances progressed through the lullaby-type music. Antsy to see Ro again, she lifted the program right up almost to her nose to see. Ro was listed under the Arabian (Coffee) dance with another name. Her leg started to jiggle a little with impatience to watch Ro. Carly chuckled next to her.\n\nFinally, the \"sweets\" dances began. The first, Spanish, was a dance with three ballerinas who wore dark browns and golds and waved glittering fans around as they danced. Their tutus bounced with each jump and Sarah again found herself focused on the power and control of their muscles as they appeared to move without effort. Then the Spanish dancers bowed and exited as the next set entered. Ro.\n\nSarah sucked in air.\n\nRo's costume was very different from the white tutu she wore as a snowflake and not even on the same plane as the elegant party gown she first wore for the waltz. This one was two pieces, giving the audience a full view of her miraculous abs. The top was small, red, and shimmery. Sarah guessed it was some kind of satin the way it caught the lights. The bottoms hung on her hips and flared out in sheer fabric before gathering back at her ankles like a genie. She was barefoot.\n\nThe other dancer was dressed the same. Two women in red and gold, bare feet and bare midriffs.\n\nMusic started from low in the pit, swelling slowly and deeply as Ro and the other woman began to move. They bent around each other, arms raised, hands flat. Their limbs intertwined and suddenly, Ro's arm gripped the other woman's abs as she inverted herself, head inches from the stage floor. It looked effortless, but Sarah saw the ripple of muscle in Ro's arm holding the other woman aloft.\n\nGently, they folded and both were on their knees, facing each other. They stretched for one another and legs shot out sideways to provide counterweight to the pose they sank into. The music fueled the movement. Sarah forgot to breathe again. For three agonizing minutes, she watched Ro bend and twist and balance into poses she'd only ever dreamed about (and some she definitely hadn't). Sarah tried to focus on the artistry, the athleticism of the poses, but her mind wandered to Ro bending that way for her.\n\nThe final curl of the deep notes swept up from the pit as Ro and her partner bent backwards away from each other. Their hands touched the smooth floor as their feet remained planted, toes touching. Then in a trill of woodwinds, both dancers sank to their elbows, lifting their feet from the ground over their heads. It reminded Sarah of a scorpion the way their feet pointed at each other as their eyes connected below. They held the pose through the end of the song without wavering until the music died.\n\nAs they rose and made their bows, the audience was enthusiastic. A loud whistle echoed through the theater along with the thunderous applause. Sarah wasn't sure, but she thought she saw Ro glance their direction as she left the stage. She knew where they were sitting, she'd chosen their seats after all.\n\nSarah admired how the Nutcracker and girl sat through all the dances in lofty thrones at the back of the stage. They were committed to the act. Sarah would have been a jittery mess sitting on a stage so long. The other performers danced to music of varying speeds and themes. The costumes fit with the heritage and sweet they represented. She particularly enjoyed the Russian dancers leaping higher and higher to the breakneck pace of the music. Then, Ro was on stage again.\n\nThis was the quick turn around she'd described to Sarah. Though she tried not to picture her in the wings behind a curtain pulling off the top to the Arabian costume and shimmying out of those flowy pants.\n\nNow, her costume was much more traditional. Pink tutus and pink tights with white and baby blue stripes along the bodice adorned the four women who took the stage. The music was some of the most well-known to The Nutcracker, at least in Sarah's opinion. The flutes the ballerinas held were a representation of the flutes which instructed them from the pit. It was happy music. The dancers hopped and twirled beautifully.\n\nRo held a soft smile on her face as she spun on her toes and held her mock-flute aloft. The pink tutu bounced with her bending knees as she moved with the other women, perfectly in sync. Sarah could again appreciate the shoulders and arm muscles that looked graceful yet strong through every turn of their bodies.\n\nRising and falling off their toes, the ballerinas hopped from place to place, sometimes quicker or slower with the flutes trilling in the pit. Ro's legs held Sarah's attention as she flew to the front. All the dancers spun, froze, spun, and sank into poses with a cymbal crash. The audience applauded more politely, but less enthusiastically, with this dance than they had with the Arabian.\n\nMore dances and more acrobatics filled the rest of this sugared-up world and the ballet began its conclusion with another dance from the Sugar Plum fairy, which Sarah found beautiful, but not as enthralling as watching Ro. Then the Nutcracker ushered Clara back to her world and the whole plot was wrapped up in a nice little bow with the young girl awakening on Christmas morning to a repaired nutcracker and a beautiful memory of a dream. The curtain fell on the scene, but rose soon after for the curtain call of all the dancers.\n\nSarah spotted Ro, back in her Arabian costume for the final bow. That was an image she'd have a hard time getting out of her head.\n\nWhen the curtain fell the final time, David, Carly, and Sarah rose and stretched.\n\n\"Well, not bad for ballet, not that I want to make a habit of coming.\" David lifted his arms over his head, shaking out his shoulders.\n\n\"I liked it. It was beautiful!\" Carly pinched the underside of his arm before he could get it down and laughed. \"Sarah liked it too, didn't you?\" She raised her eyebrows suggestively.\n\n\"Yes, it was beautiful. But I agree, don't think I'll make ballet a regular entertainment choice.\"\n\n\"Yeah, we'll see about that,\" Carly rolled her eyes.\n\nThe doors to the lobby were thrown open and people milled about everywhere, waiting for their dancers to emerge from the dressing rooms. First to come out were excited kids, those who'd been party guests or clowns during the sweets numbers. Next, came the older students. They filtered into the crowd in street clothes, only standing out due to the amount of stage make-up globbed on their faces. Sarah finally caught Ro among a group of about six dancers filing out of the dressing room area.\n\n\"There she is!\" She grabbed Carly by the elbow who snatched David's hand and they threaded their way through the crowd. Ro lit up when she saw them approach.\n\n\"Hi!\"\n\nAs they reached each other, she gave Sarah a peck on the cheek. Sarah smiled and held up the, thankfully, not squished bouquet. \"Great job, Ro!\"\n\n\"Aw, thank you, babe!\" Her grin was dazzling as she took the flowers. Sarah's heart did a stutter step at the pet name. She fixed them all with a gaze. \"So, what did you think? How was your first ballet?\"\n\n\"Wonderful!\" Carly gushed, \"It was so beautiful. I want to wear a tutu now!\"\n\nDavid looked horrified, \"No.\" He said emphatically, almost pleadingly.\n\nThe three women giggled.\n\n\"I'm just kidding. But really, it was magical. Thank you for including us in the tickets!\"\n\n\"Anytime,\" Ro smiled and slid her hand into Sarah's.\n\n\"Okay, come on my aspiring ballerina, let's leave these two crazy kids,\" David wrapped his arm around Carly's waist and gave Sarah a wink. \"We're going back to my apartment. You can get an escort back to your dorm or...wherever?\"\n\nRo laughed, \"I'll make sure she gets home safely, sir.\"\n\n\"Not a minute past eleven, young lady!\" David shouted over his shoulder as he and Carly extricated themselves from the throng of people and steered towards the front doors.\n\nSarah turned back to Ro, \"He teases because he cares.\"\n\n\"Of course,\" Ro laughed again. She looked gorgeous like this, happy, giddy almost. Her dark hair was pulled and slicked back into a full bun, though a few rogue curls were attempting to break free. The full face of make-up was a bit much, the dark eyeliner, bright rouge, and red lipstick were definitely for the stage, but it didn't look bad. \"Come on,\" Ro squeezed her hand, \"I want to introduce you to some people.\"\n\nShe pulled Sarah through the thinning sea of audience members over to the group of dancers she'd entered the lobby with. There were four women and two men, Sarah noticed one of the women was the other Arabian dancer.\n\n\"Hey everybody, this is Sarah, Sarah, everybody.\"\n\n\"Hi,\" Sarah gave what she hoped was a confident smile and a little wave with her free hand. Ugh, why had she waved?\n\n\"So we get to officially meet! Hi, I'm Devin. We sorta met at the Halloween party, but I was drunk.\"\n\n\"So was I,\" Sarah chuckled.\n\nDevin laughed loudly, \"Yes, is there any other way to celebrate Halloween? Oh. My. God. Did you bring her flowers? Rosheeeeeeeeeen, you're both so cute!\" Devin talked almost as fast as Carly.\n\n\"Hi Sarah, I'm Gwen. It's nice to finally meet you. Ro talks about nothing else.\" Ro rolled her eyes at the other woman. She'd been the other Arabian dancer.\n\n\"Nice to meet you, Gwen.\"\n\nThe others introduced themselves and Sarah recognized some of their names from Ro's stories. They all asked Sarah what she thought of the ballet, if this was her first, which dance was her favorite. Of course she tried to answer all their questions with a steady gaze and just the right amount of flattery, but this last query made her weight shift.\n\n\"Uh- the, uh, Arabian dance,\" she stuttered.\n\nDevin threw his head back as he laughed, Gwen fixed her with a wicked smirk, and the others smiled good-naturedly.\n\n\"Okay, thank you assholes. Now we're going to go. I'll see you for the matinee tomorrow. When's call?\"\n\n\"One o'clock.\"\n\n\"Don't get hurt showing Sarah the finer points of the Arabian. We need you tomorrow!\" Devin's laugh followed them out the door and into the dressing area.\n\n\"I'm sorry about them,\" Ro peeked at Sarah as she dragged her to her dressing room. \"They promised they'd be on better behavior.\"\n\nSarah chuckled, \"It's fine. Where're we going?\"\n\n\"My dressing room, I need to grab my bag, then we can go...to your dorm?\"\n\n\"Yeah, yes. That sounds good.\"\n\nRo led her through a double doorway and down a short hallway to a series of rooms with names pinned to the doors. She pulled Sarah along all the way to the end where a door with two names stood closed. \"Roisin Daly\" and \"Gwen Peters\" were scrawled on a piece of yellow paper affixed to the door. Ro pushed it open.\n\nIt was a small room taken up mostly by a long counter and huge mirror. There were those classic dressing room lights framing the mirror, but they were currently off. The room smelled of hairspray and makeup and feet. Sarah said so.\n\nLaughing Ro wound her arm around Sarah's waist, \"Yeah it does. Let me just grab my stuff.\" She gave her a quick peck on the cheek and gathered up some things before leading them out a side door to the alley.\n\nChapter 12: New Experiences \n\nThe night air was positively freezing as they darted through the parking lot to Ro's car. With red cheeks and noses, they crawled in and turned the heat up. It was a short drive around the campus to Sarah's dorm. In the summer it would have been a nice twenty minute walk from the auditorium, but as winter gripped the campus, it was better to drive.",
        "\"So, what did you really think? Do you like ballet?\" Ro smiled but kept her eyes on the road as they drove.\n\n\"Yeah, I did like it. It was...more athletic than I was expecting. But really beautiful too, ya know?\"\n\nRo's smile widened, \"Yeah, I do. Would you come to another?\"\n\n\"Of course. Although, I prefer when there's lots of dancers, or like, when you're on stage. The duets with the Nutcracker were a bit long.\"\n\n\"Pas de deux,\" Ro corrected, \"And yes, I think so too.\" She paused, \"So you really liked the Arabian, huh?\"\n\n\"Holy shit, Ro. I didn't know you could do that! It was amazing. Where did you learn to bend like that? Can all of the dancers do that?\"\n\nShe laughed, a deep belly laugh and glanced at Sarah, \"No, not everyone can, that's why Gwen and I got the role. I did a lot of gymnastics along with dance. And the stretching every night helps.\"\n\n\"Yeah, yeah I bet.\" Sarah couldn't look Ro in the eye as she once again pictured the way she'd bent in half at the end of the dance, abs shimmering in the lights.\n\nThey pulled up to Sarah's dorm lot and Ro shut off the car. \"Can I come up?\"\n\n\"Of course.\"\n\n\"Sarah,\" Ro turned and caught Sarah with a meaningful look. \"I want to have sex with you.\" She stopped, giving that a chance to sit between them.\n\n\"I want to have sex with you too,\" Sarah responded quietly.\n\n\"But I don't want to rush you!\" Ro put a hand on her knee. \"I just- I want you to know that when you're ready, I'm here.\"\n\n\"Okay. Thanks.\" Sarah wasn't sure what else to say at the moment. If she thought about it, she was ready. She wanted Ro and was comfortable around her. But they'd only been officially dating for six days. Well, Sarah thought, we've been hanging out for close to three months. Most people probably had had sex before three months. Why did she care anyway? It didn't matter what other people did or thought, right?\n\n\"Sorry, I just wanted to...put that out there. No pressure. Can I still come up with you? We can just watch a movie or something?\"\n\n\"Ro,\" Sarah fixed her eyes on Roisin's, \"will you stay the night with me?\"\n\nThe warm smile that smoothed out the gathering worry lines in Ro's face made Sarah's heart pound faster, \"I'd like that a lot. Yes.\" She leaned over the center console to kiss Sarah lightly on her lips.\n\nHer dorm was warm after the blasting cold of the parking lot. They hurried in, pulling off wet shoes and Ro setting her bag on the floor. Sarah closed and locked the door while Ro went to shower off the stage make-up, glitter, and sweat. A chill ran up her spine as she heard the shower kick on. Ro was naked in her bathroom. Get it together, Sarah! If this goes as planned, she'll be naked in your bed before too much longer. The thought did not help her get it together at all. She pulled her phone from her pocket and texted Carly.\n\nS: Um...don't come back to the dorm tonight, k?\n\nCarly didn't respond so Sarah assumed she was already busy with David. She hoped they stayed at his apartment all night or that Carly would check her phone before she came back. There was no telling with those two. Carly really liked her own bed and really hated David's 'stinky' bathroom, so sometimes he'd drop her back off at two in the morning so she could enjoy her own space. Sarah crossed her fingers that tonight was not one of those nights. She heard the shower shut off as she changed into leggings and threw her slacks in the basket.\n\nRo came out a few minutes later in a blue long sleeve shirt and gray yoga pants. Sarah could tell she was not wearing a bra. Her nipples poking through the athletic fabric were perfect and distracting. She swept her wet hair up into a loose bun and smiled at Sarah.\n\n\"Ugh, thank you. I feel human again.\"\n\n\"Anytime. It must be a pain to scrub that much makeup off after every performance.\"\n\n\"It is. I have industrial strength makeup remover in my dance bag. That stuff could peel paint off a car!\"\n\nSarah laughed.\n\n\"So, movie?\"\n\n\"Maybe we could just listen to some music?\" Sarah suggested, unsure if that was something Ro would like.\n\n\"Yeah, that sounds great. I actually have a new playlist, just some stuff that's new, some that's not.\" Ro dug her phone out of her bag as Sarah turned on her bluetooth speaker. It beeped to confirm the connection, then Ro hit play.\n\nSarah pulled a couple flavored waters out of her minifridge and handed one to Ro, \"Are you hungry?\"\n\n\"Not really.\" She sank to the couch and opened her drink, taking a long swig that had Sarah distracted by her throat.\n\n\"So which dance is your favorite? In the show, I mean,\" Sarah asked as she folded herself onto the opposite end of the little loveseat.\n\n\"Oh, hmm,\" Ro leaned back on the arm. \"I like the snowflake number. It's so smooth and just looks beautiful with all of the white. I guess my favorite one to watch is the Russian. It's so energetic. Even as a short dance, it's completely exhausting. Those jumps are not easy.\"\n\n\"Yeah, I liked that one too. That crazy jump-turn thing the guys were doing? Nuts.\"\n\nRo chuckled, \"Definitely.\"\n\nThe music changed and Sarah found herself listening to the calm instrumental as the singer's voice wove in quietly. Ro had good taste in music and liked a wide variety, but this was more subdued than most of the stuff she played normally. Had she chosen it just for Sarah? For when they decided to...? She glanced at Ro. The other woman was resting, eyes closed, her head tipped back against the corner of the loveseat where the arm and back met. Her arms were draped gracefully out next to her, the drink still in one hand. Besides the rise and fall of her chest, the only part of her moving were her feet on the coffee table which were twitching to the beat of the music. Sarah took a swig of her water and found her courage.\n\nShe slid towards Ro and let her fingers trail up her leg from her shin over her knee to her thigh. Ro smiled and sighed.\n\n\"That feels nice,\" she murmured without opening her eyes. So Sarah did it again. And again. Ro peeked out under heavy eyelids.\n\n\"I like this song,\" Sarah said simply.\n\n\"Me too.\"\n\nShe leaned into Ro's space more and her girlfriend pulled her close, wrapping an arm across her back as they settled. \"Good song to have sex to.\"\n\nThat got Ro's attention. She sat up straighter and opened her eyes fully to fix Sarah with an uncertain look, one eyebrow raised. \"I guess. Is that what you want to do right now?\"\n\nSarah thought for a second, \"Yes.\"\n\nRoisin's body instantly changed. Her relaxed state coiled back tight. She pulled her arms in and sat forward to the edge of the couch. \"Sarah, what I said before...I didn't mean to pressure you about tonight. I just wanted you to know that it's on the table. That that's something I want, eventually.\"\n\n\"I know, but I kinda want it now,\" Sarah shrugged. \"Is that okay?\"\n\n\"Fuck, of course it's okay! Are you sure though?\"\n\nSarah leaned in, pressing an eager kiss to Ro's neck, \"I'm very sure,\" she whispered as she ran her nose along the smooth, pale skin up to her ear.\n\n\"Wow,\" Ro shuddered. \"Yes, okay, can I- do you want-\"\n\n\"Just kiss me, Ro.\"\n\nThey set down their waters and started slowly. Soft kisses that they'd done a dozen times while hands pulled each other closer. Ro slipped her tongue forward and things began to heat up. Suddenly, Sarah couldn't get close enough to her. She climbed into Ro's lap and pressed her body down. Ro's hands came up to run along Sarah's back then lowered to grip her ass playfully. Their tongues wrestled as their lips met and parted over and over. Sarah let out a low moan when Ro sucked her bottom lip into her mouth and ran teeth gently along it.\n\nHer hands grabbed at Ro's shirt, hiking it up higher and higher as they kissed. Ro ducked to help as Sarah pulled it up over her head, leaving her amazing tits on full display. Sarah dove for them.\n\n\"Shit, wow,\" Ro's breath caught as Sarah sucked a nipple and massaged the other.\n\nRo was pressed back flat onto the sofa with her hands threaded in Sarah's hair while she attacked her nipples with her mouth and hands.\n\n\"Bed?\" Sarah asked as she came up for a breath.\n\n\"Yes,\" Ro gasped.\n\nSarah took her own shirt off as they moved to the bed revealing a bright orange bra underneath. She was glad she'd shaved and chosen a cute bra. While she was sure it was more important who she had sex with the first time, she was glad it would still be a good how. \n\nRo grinned and reached for her as she fell backwards onto Sarah's bed. Her fingers gripped the colorful bra and squeezed as Sarah descended onto her. Immediately, their lips found one another again. Their kissing turned hungrier, more sharp, as they ran hands over exposed flesh. Sarah massaged Ro's breasts as she slipped her mouth down her neck. Ro arched into the contact and moaned as Sarah let her tongue brush over a nipple.\n\nEager hands on her back told Sarah that Ro was trying to unhook her bra. After a second, she was successful as she felt the release of tense fabric and the bra fell forward down her arms. Sarah chucked it across the room and resumed her sucking of the underside of Ro's left breast. Ro's hands ghosted over Sarah's exposed tits where she could just reach them as Sarah bent over her.\n\n\"Pants?\" Ro's hands wandered to Sarah's waistband, thumbs tucking in before slipping them down just an inch.\n\n\"Not needed,\" Sarah breathed.\n\nTaking her cue, Ro slid under Sarah, pulling her leggings down and off. Sarah had to hitch onto each knee as Ro yanked. The leggings flew to the floor to join the other clothing. Then, Sarah wrapped fingers into Ro's waistband and looked expectantly. Ro nodded then wiggled to let her slip them off. Her underwear was lacy and black, just the kind Sarah expected. Their lips crashed together since Sarah didn't know what else to do as the lacy panties made her head swim.\n\n\"Lie down,\" Ro shifted and guided Sarah to lay on her back. \"Still good?\"\n\n\"Very,\" Sarah gasped as Ro's thigh came into contact with her own underwear between her legs.\n\n\"Good. I want to make you come for me.\"\n\nSarah groaned at that. Ro was eager and knew what to do with her thigh muscles as she gave Sarah the friction she needed. Her hands massaged her nipples and rushed over her exposed abs. Their tongues were completely tangled together as Ro's hands settled their movement onto Sarah's hips where her white panties gripped her muscles.\n\n\"Off?\" She looked for permission.\n\n\"Off!\" Sarah moaned enthusiastically.\n\nRo's hands were quick in removing the thin white fabric that was all that separated Sarah's heat from Ro's thigh. \"Fuuuck, you're gorgeous,\" Ro keened as she exposed Sarah for the first time.\n\nSarah blushed furiously and felt it from her face to her chest. She kept her pubic hair neatly trimmed with a small strip of short, dark hair in the center. Ro's eyes roamed her body unabashedly.\n\n\"What do you like?\" Ro asked, catching Sarah's eyes as she tried to hide a little.\n\n\"I- I'm not sure?\"\n\n\"Do you want to show me how you masturbate?\" Ro raised an eyebrow, \"That can help me.\"\n\nSarah felt her blush deepen, but nodded and moved her hand. Ro slid back on her heels, ducking to avoid bumping her head on the upper bunk, and watched Sarah slowly begin to touch herself.\n\nThe feeling of doing this in front of another person was odd, but Sarah was so turned on, she found a little confidence buried somewhere to show Ro what she liked. Her fingers brushed down her clit gently, then she placed her ring finger and middle finger on either side of it, massaging close, but not directly on the bud of nerves. She moved in slow circles then up and down. Next, her middle finger slipped into her wetness and out. Ro's eyes were transfixed by the movement and the wet slick that followed Sarah's finger out of her folds.\n\n\"Okay,\" Ro sounded winded, \"I can do that.\" Gently, she eased Sarah's hand away from her clit by pulling her wrist. \"Let me do that.\"\n\nSarah nodded and closed her eyes tight. Overcome with stimuli.\n\nStrong, slim fingers brushed over her clit before settling around it. Ro bent forward and her lips connected with the hard flesh of Sarah's stomach. Sarah's insides fluttered. The feeling of someone else's hand in charge of her pleasure was completely foreign and amazing. She peeked out to see Ro adjust her hold and position a finger over Sarah's slit. The anticipation caused her breathing to catch. Then, slowly, Ro's middle finger entered her vagina. Sarah's eyes slammed shut again.\n\n\"God, you're so fucking wet, Sar.\" The long finger in her pressed and stretched. Sarah had never felt anything so amazing. That is, until Ro twisted her hand and pressed a thumb to Sarah's clit. Her eyes flew open.\n\n\"Oh, fuck!\"\n\n\"Good?\" Ro smiled ruefully.\n\n\"So good, just like that.\" Ro kept up the motion of fingering her and circling her clit while Sarah's hips rocked almost involuntarily to the pressure. She felt her orgasm build far faster than she'd expected.\n\nHer touch was gentle but insistent on Sarah. Ro's mouth found nipple again as she slid up her body. The hot, wet kisses her mouth was leaving on her torso and breasts was distracting in a beautiful way from the hand between her legs. Sarah arched into any contact she could, eyes squeezing shut then flying open with a particularly deep thrust.\n\n\"Yes, holy shit, like that!\"\n\n\"Yeah? You like it hard, baby?\" Ro did another good thrust causing Sarah to arch all the way up with her hips. \"Perfect. Sarah, you're gorgeous. Come for me. I want to see you lose control. Let my fingers make you come.\" Ro's dirty talk was breathy and excited. Sarah couldn't stand up to it, she felt her peak coming quickly. A deep press onto her clit was all it took. Her orgasm rocked around Ro's finger and she felt the other woman's free hand grab a breast as Sarah came, both of her own hands wrapped around the wrist of Ro's penetrating hand.\n\n\"Holy fuck. Fuck, Ro. Wow.\" Her less than eloquent phrases were praise in themselves as Sarah settled back onto the bed and slowed her breathing.\n\n\"You look wonderful right now,\" was Ro's only reply as she gingerly removed her soaked finger and brought it to her own mouth, \"You taste wonderful too.\" The way Ro licked Sarah's slick off her finger was completely obscene. Some of her curls had come loose from her bun and they framed her face as her eyes sparkled with mischief.\n\n\"You're going to be the death of me.\"\n\n\"Aw, don't say it like that,\" Ro scrunched up her nose and leaned over Sarah, \"I am going to make you fall apart again, though. Is my mouth okay?\"\n\n\"Damn, Ro,\" Sarah whined.\n\n\"I'll take that as a yes.\" Ro grinned, shoved Sarah back down, and bent her face between her thighs. Her tongue licked broad strokes up Sarah's cunt, tracking strings of wetness with it. Sarah shuddered as Ro's breath fanned her clit. The pale hands holding her thighs began to push them apart further as Ro licked deeper. Sarah could feel her tongue bury into her folds and almost cried out, but bit back the sound.\n\n\"Don't hold back, Sar. I want to hear you.\"\n\n\"Dorm,\" was all Sarah could get out in a harsh breath.\n\n\"Eh, they've heard it before. Besides, it's kinda hot knowing your whole floor will hear exactly what I'm doing to you.\" Ro's tongue lapped at her clit and Sarah positively growled at the feeling. Her legs twitched a bit at the oversensitivity that was slow to fade. \"Just relax,\" Ro encouraged as she pulled Sarah's thighs up over her shoulders and sank forward, \"Let me make you come again.\" Her arms wrapped around Sarah so her hands splayed across her stomach, holding her thighs in what was effectively a double headlock. Her tongue slipped inside, the deepest it had gone yet, and Sarah swore.\n\nHer second orgasm was slower, building deep in her stomach while Ro lapped and sucked between her legs. Sarah couldn't keep her eyes open as the feeling burned in her from Ro's mouth. She felt a finger press at her entrance again, but it waited. Opening her eyes, she caught Ro looking at her expectantly.\n\n\"There you are. This okay?\" She teased the finger at Sarah's hole.\n\n\"Yes, please,\" Sarah gasped.\n\nRo smiled and plunged the finger in, Sarah's back arched and her eyes snapped shut. The licking and sucking on her clit resumed, punctuated by the penetration of Ro's finger. It was too much. Sarah keened and twitched.\n\n\"Look at me, Sar,\" Ro pleaded.\n\nSarah did, and the sight of Ro between her legs, face slick with Sarah's arousal sent her over the edge. She convulsed and coiled as Ro continued to pump into her with the rhythm slowed a bit to drag out Sarah's pleasure. Her fingers threaded through Ro's hair and held her in place.\n\nAs the wave of oversensitivity gripped around her clit, Sarah used that hold to gently guide Ro off of her. Her breathing came fast and heavy, but she was slowly uncoiling inside.\n\n\"Come up here,\" she whispered and Ro obeyed. Her mouth and chin was covered in Sarah's juices and her lips were swollen from the sucking. She wiped her hand on her own thigh as she rose up to where Sarah was pulling her. They kissed. Sarah tasted herself on Ro's mouth and the idea was hotter than the reality. Once they pulled apart a bit, she leaned off the bed to reach a clean towel in the tote under her bed. Handing it to Ro, she smiled sheepishly.\n\n\"You're beautiful when you come, did you know that?\" Ro said conversationally as she wiped Sarah's slick from her face and hands. Sarah blushed deep red.\n\n\"Uh, th- thanks.\"\n\nRo chuckled. Offering Sarah the towel, \"Do you want to, uh, clean up? You should go to the bathroom soon too. Number one rule, pee after sex.\"\n\nSarah shivered. She'd had sex.\n\n\"Yeah, I'll go clean up in there, just toss the towel in the basket?\"\n\nRo nodded, \"Okay.\"\n\n\"And take your underwear off,\" Sarah called from the doorway feeling confident now that she had a moment, \"You're overdressed!\"\n\nShe could hear Ro's laugh through the bathroom door.\n\nWhen she was cleaned up and drier between her legs. Sarah slipped out of the bathroom a little nervously. Being completely naked in front of Ro had been one thing in the heat of sex, but standing in her room with the rope lights glittering and her on full display was another. Her hands covered her body subconsciously as she approached the bed. What she saw stopped her dead in her tracks.\n\nRo was lying on her side with her head propped up on her hand and eyes locked on Sarah. She'd taken off her underwear to reveal a perfectly smooth mound that disappeared between her pale, taut thighs.\n\n\"Hello gorgeous,\" Ro chimed when Sarah slid onto the bed.\n\n\"I could say the same. Wow, Ro.\"\n\n\"Aw, thanks,\" Ro kissed the corner of her mouth and folded herself around Sarah. She hummed contentedly as they wrapped together.\n\nSarah let herself be held for a few minutes before interrupting the cuddle, \"Ro...\"\n\n\"Hmm?\"\n\n\"Do you- uh, do you want me to...?\"\n\n\"At some point, yes, if you're comfortable with that. But I'm good if you're not ready. This was about you tonight.\"\n\n\"But, I want it to be about you too. I want it to be us,\" Sarah said quietly.\n\n\"I mean, I'm not going to say no, Sarah,\" she laughed breathily.\n\n\"Okay, should I just, just do what you did?\"\n\n\"You can, or you can just give me your thigh for a few minutes.\"\n\n\"Damn, Ro.\" It was Sarah's turn to laugh. \"Let's start with this-\" she bent down and sucked a pink nipple into her mouth and felt pleased when she heard Ro gasp.\n\n\"Yeah, that's- uh, that's a good starting point.\"\n\nSarah massaged the tit that wasn't in her mouth and used her free hand to grab at Ro's ass. She turned them to push Ro's back against the mattress as she reached under Ro's breast and started sucking more insistently. \"Do you like hickies?\" she murmured around the soft flesh in her mouth.\n\nRo nodded enthusiastically, \"Yes, just keep it right there,\" she panted, \"so my costume covers it.\"",
        "The smile that commandeered Sarah's face at that thought made it hard to keep sucking, but she powered through and got back to the breast in her mouth. Sarah had never left a hickey on anyone, nor had one left on her, but she got the general idea. Suck and nibble until a small bruise formed. She loved the idea of Roisin getting ready backstage tomorrow and finding her mark to remind her of tonight. After a few long seconds, she was fairly confident she'd marked Ro's pale skin. Her mouth slid down over her abs.\n\n\"Fuck, Sarah,\" Ro shivered as Sarah dipped below Ro's bellybutton.\n\n\"That's the idea here, babe. I'm going to fuck you.\"\n\nRo whined.\n\nHer smooth skin spread below her stomach to meet with sharp hip bones and a completely cleaned mound between. Sarah's hands found their way to her thighs and slowly spread them apart as she descended Ro's body. The scent of her arousal hit her as she parted those perfect thighs. Sarah caught a wet glisten as the low light shined on Ro's shifting form. She was wet.\n\nSarah wasted no time diving in. Her tongue lapped at the wet slit first, finding it hot, thick, and a little salty. Ro arched her back and her hands flew to Sarah's hair. Sarah smiled at the small \"oh\" she elicited as her tongue ghosted over Ro's clit. She teased around it and slipped back down to fuck her inside. This was quickly becoming Sarah's favorite position. There between Ro's thighs with her hot, wet pussy in her mouth, Sarah thought she understood how people could lie in bed all day having sex.\n\n\"Sar, fingers, please!\" Ro gasped above her.\n\nImmediately, she honored the request. She made a bit of a show of slicking up a finger with her own spit then spreading Ro's folds with her other hand. Ro whimpered as she teased her hole. The sound sent a shiver down Sarah's spine encouraging her to plunge into Ro's wetness. Her vagina felt hot, tight, and wonderful around Sarah. Completely familiar and foreign at the same time. She slowly pumped that finger in and out as she settled her lips on Ro's clit.\n\nRo moaned loudly.\n\n\"Are you going to come for me? Come on my finger, on my mouth.\" Sarah's dirty talk was inspired entirely by Ro's, she didn't think some of the stuff they say in porn was actually ever said in a real bedroom. It was working though, because Ro's fingers tightened in Sarah's hair.\n\n\"Yes, yes! Right there, fuck, yes Sarah!\" Pumping in the exact spot Ro told her, Sarah flicked her tongue over her clit and smashed her face in, using her teeth to support under her tongue as she aggressively licked Ro's nerves. It took only a moment of this for Ro to screech and come around her face. Her thighs jerked and her hips bucked gently as Sarah wound her through the orgasm.\n\nShe pulled off Ro's clit as she slowed and removed her finger to replace it with her tongue. Licking and sucking the slick from Ro was incredible. The taste was intoxicating as was the way Ro's breathing would hitch and release with every insertion of her tongue. Eventually, the fingers in her hair pulled her away and up.\n\n\"Come 'ere,\" a hoarse voice beckoned. Sarah relinquished her prize and rose to meet her girlfriend's eyes.\n\n\"You. Are. Delicious.\" Shit, was that weird to say? Oh well, it was out there now.\n\nRo giggled, \"Thank you. You are very good at that.\"\n\n\"Yeah?\"\n\n\"Hell yeah.\"\n\n\"I will gladly do that again. Anytime you want. Right now? Okay, twist my arm.\" Sarah played like she was going to slide back down. The laugh from Ro's chest was exactly what she was after.\n\n\"No! I'm good. I'm great. Soon though. I want more of that.\"\n\nSarah smiled and snuggled up to Ro who wrapped her arms over her shoulders. Her fingers traced the little hickey mark under Ro's left breast.\n\n\"That's my first hickey in a long time,\" Ro mused.\n\nSarah looked away sheepishly, \"It was my first hickey.\"\n\n\"What?!\"\n\n\"That's the first one I've given. Looks pretty good too. I guess I'm a natural.\"\n\n\"Wait, have you ever had a hickey?\"\n\n\"No, I-\" but Ro cut her off by flipping her onto her back and climbing on top. She straddled Sarah's hips with her still slick thighs.\n\n\"You've never had a hickey?!\" she shrieked.\n\n\"No. Shhhhhh, Ro. My neighbors-\"\n\n\"Well, fuck that!\" Then Ro pounced on Sarah. She sucked a spot on the base of her neck aggressively. The feeling was hot and sharp and went right to Sarah's groin. But Ro didn't stop there. She proceeded to suck and nip another spot under Sarah's jaw, then above her right nipple, then on her clavicle. Sarah had to fight her off her abs after a minute of enthusiastic nibbling.\n\n\"Ro, stop! I'm going to look like a bruised banana!\" Her hands fought for Ro's sides to pinch her ticklish spots.\n\n\"Okay, okay!\" Ro barked with laughter as her bare sides were attacked, \"Truce!\"\n\nThey lay there panting and giggling until Sarah's phone buzzed on the coffee table.\n\n\"I'm gonna go clean up,\" Ro wobbled off to the bathroom still smiling while Sarah searched for her underwear and grabbed her phone.\n\nCarly had finally responded. There were no words, only a series of inappropriate emojis and seventeen of the one that looked like the painting \"The Scream\" by Edvard Munch. Sarah smiled and simply sent back one of a taco. Her best friend would like that one.\n\nShe pulled on her underwear and dug a clean tank top out of her drawers as Ro came out of the bathroom. She'd taken her hair down and the spiral curls bounced as she walked. So did her tits.\n\n\"Wow,\" Sarah said barely above a whisper, \"I can't believe I get to have sex with you.\" Ro blushed pale pink.\n\n\"Same here.\" And she wrapped her bare arms around Sarah's ass for emphasis. \"Um, should I get going? I know you said you wanted me to stay, but is Carly coming back soon?\"\n\n\"No, actually she's gone all night. Did you- do you want to stay?\" Sarah pulled back to catch Ro's expression.\n\nRo smiled and her eyes twinkled in the low lights, \"I'd like that.\"\n\nSlipping back into her underwear and a borrowed t-shirt from Sarah, Ro was the perfect image of a post-sex woman. She lounged onto Sarah's bed dragging the blankets up around her. Sarah grabbed the remote and climbed in beside her.\n\n\"Tv?\"\n\n\"Sure,\" Ro snuggled up under Sarah's arm as she flipped through some shows on the new streaming platform to find a sitcom they both liked. As she chose the next episode, she propped herself up around Ro and let the other woman rest on her shoulder and across her chest.\n\nIt didn't take long for Ro's breathing to even out exhausted as she must have been from the performance and the sex afterward. Sarah's heart pounded as she tried to remind herself they'd done this. Snuggling wasn't new, just calm down and go to sleep. But a little voice in the back of her head pointed out everything was new tonight. And sleeping with her girlfriend in her bed was new. Waking up with her still there would be new.\n\nSarah relaxed as Ro's steady breathing brushed across her chest. New was scary, sure, but also wonderful.\n\n_ _\n\nWhen the morning light filtered into her dorm, Sarah knew it was cold outside. Something about the pale sunlight or the quiet wind told her winter was officially here. She snuggled deeper into bed at the thought, bumping a pair of smooth knees with her side.\n\nThe night before came flooding back, Ro's lips on her body, her finger buried inside, the taste of her. Sarah grinned and blushed as she remembered Ro sucking marks onto her neck and torso. Peeking over she saw Ro was still asleep, curled into her, but no longer draped over her. Sarah stretched and slipped quietly out of bed to use the bathroom. While washing her hands, she caught a glimpse of herself in the mirror.\n\n\"Fuck,\" she breathed. The mirror reflected back the state of her body. Two dark, bruising marks dotted her neck and another one on her jawline. She lifted her shirt to reveal three more, one on each breast and the last on her abs. Ro definitely knew how to give a hickey.\n\nShe padded back into the room, grabbing a water bottle from her dresser.\n\n\"Mmm, good morning.\" Behind her a tired voice groaned.\n\n\"Good morning,\" she was almost giddy at greeting her girlfriend for the first time so early. \"How did you sleep?\"\n\n\"Excellent.\" Ro tagged the T on the end harshly and scrunched her nose at Sarah. \"Are you coming back to bed? It's cold.\"\n\n\"Yes,\" Sarah offered Ro some water as she scooted back onto the bed. Ro took it gratefully and sat up to drink.\n\n\"How are you feeling?\" Ro asked when she handed the water back to Sarah.\n\n\"Great, you?\"\n\n\"Horny.\"\n\nSarah almost spit out the water she'd poured into her mouth. \"Oh?\" She sputtered.\n\n\"Yes,\" Ro wound her fingers up in the hem of Sarah's tank, \"I'd like to teach you about morning sex now,\" she almost growled.\n\n\"Is that different from night sex?\"\n\nRo thought for a moment before answering, \"Yes, very different. There's more energy. And more light, so I can see your expressions better.\" With that she climbed into Sarah's lap, straddling her thighs, and kissed her backwards into the pillows.\n\nSarah found she greatly enjoyed morning sex and learned more benefits of dating a particularly flexible dancer. By the time they were recovering on the bed, they were significantly more awake and warmer.\n\n\"Wanna shower?\" Ro asked after barely five minutes of respite.\n\n\"Yes!\"\n\n\"Shower sex is very different from night sex and morning sex.\"\n\n\"You have so much to teach me,\" Sarah grabbed Ro by the wrist and pulled her into the bathroom.\n\nThey let the hot water cover both of their bodies by holding each other tight in the stream. Ro slid herself onto Sarah's thigh and began grinding on her as the steam rose around them. Sarah increased the pressure by lifting her leg a bit. Their speed was slow and deliberate, marching toward orgasm incrementally. The first time Ro moaned into Sarah's wet shoulder, Sarah yanked her thigh away and replaced it with her hand. She spread fingertips toward Ro's folds and used the heel of her hand to press aggressively onto her mound.\n\nShe rocked them together, placing the weight of her body behind the heel of her hand as she ground it over Ro's clit. Her fingers inside curved back then straightened as she pushed further into Ro. Increasing the pace made Ro's face scrunch up and her moans come quick and breathy.\n\n\"Fuck, Sar, fuuuck!\" Ro came fast and hard, just as Sarah planned.\n\n\"Hmm...you're right. Shower sex is different,\" she smirked as she removed her hand and Ro leaned fully against her.\n\n\"That was really good,\" she gasped into Sarah's shoulder, \"Okay, I'm tired again, wash me,\" Ro threw her arms out dramatically and let Sarah hold her up. They laughed together in the hot spray.\n\nAfter drying off in the bathroom, Sarah wrapped her towel tightly around herself to step into the chilly room and find clothes for her and Ro. \"I'll find something you can wear for today,\" she called over her shoulder to Ro who was swishing some mouthwash, \"as long as I can take it off you later!\"\n\nShe went for her dresser, yanking the difficult to open top drawer and deciding which of her underwear would look hottest on Ro. A choking laugh behind her caused her to whip around.\n\n\"The hell-?!\"\n\n\"You defiled our shower!\"\n\nCarly was sitting on the sofa cackling with laughter while David covered his eyes and silently shook his head at Carly's glee.\n\n\"What the fuck you guys!\" Sarah felt her face burn hot and she gripped the towel tighter under her arms. \"Have you ever heard of boundaries?!\"\n\n\"Nope,\" Carly was still doubled over laughing. \"And neither have you. Our bathroom, Sarah, that we share?\" Her face was all mock seriousness that lasted a second before she was giggling again. \"We came to see if you want to go eat. I guess you already did though, huh?\"\n\n\"Ro, do not come out here! My deranged roommate and her socially inept boyfriend came to torment us!\"\n\nShe heard a squeak from the bathroom before the door snapped shut. \"You guys are sooo in for it,\" Sarah glowered at the pair.\n\nCarly's giggling subsided, \"Okay, sorry, I couldn't help it. Congratulations, really. Come meet us in the cafeteria? We'd love to hang out a bit.\"\n\nSarah rolled her eyes, \"Yes, fine, I'll ask. But she might not want to eat with you creepers! Now, out!\"\n\nDavid bounded off the sofa and grabbed Carly's wrist. \"Yup, gone.\" They bolted out the door, Carly still snickering.\n\nSarah groaned. \"Okay, the coast is clear.\"\n\nThe bathroom door cracked open, \"We're good?\"\n\n\"Yeah, they went back to the loony bin they belong in. Here,\" Sarah handed over a pair of underwear, yoga pants, and a sweatshirt. \"You can borrow these.\"\n\n\"Thanks, babe!\" Ro took the clothes and leaned out far enough to give Sarah a kiss. Then she disappeared into the bathroom to change.\n\n\"They want us to come eat with them,\" Sarah called through the door while she slid into a pair of jeans and a crewneck sweatshirt.\n\n\"Now?\"\n\n\"Yeah.\"\n\n\"Good,\" Ro came out of the bathroom drying her hair, \"I'm starving.\" Sarah's heart dropped into her stomach at the sight of Ro in her clothes. \"What?\" Ro froze sensing Sarah's eyes on her.\n\n\"Nothing, that's just, hot. You're hot.\"\n\n\"Thanks, Sar,\" a wide grin spread across Ro's face. \"Now let's go have lunch with your friends and discuss their boundary issues.\" She placed a light kiss on Sarah's cheek.\n\nChapter 13: Meeting the Family\n\n\"Sarah, stop Sarah! You can't give me a hickey. My parents are coming to the show tonight!\"\n\nAfter a week of sex, Sarah was starting to know what she liked. Giving hickeys and getting them turned out to be high on her list of musts.\n\n\"Fine,\" she grunted, \"I'll put it here!\" She ducked down and sucked a mark directly next to Ro's left nipple. Ro moaned underneath her.\n\nIt was Saturday, the first Saturday of winter break. Sarah had no classes, no homework, and nowhere else she'd rather be than in Ro's bed, on top of her gorgeous girlfriend. The dorms closed for break except to international students, so Sarah was forced to go home or shack up with Ro for a few days. Her parents didn't exactly know that's what she was doing, though. She just mentioned that some of the team was staying the weekend because they had tickets to the ballet. Sarah didn't feel the need to explain that \"some of the team\" really meant just her and Tara and that she wouldn't be staying with said teammates, but with her very hot girlfriend. Alone together in her apartment.\n\nThere's just some things your parents don't need to know.\n\nRo squealed as Sarah pulled away with a pop, sucking flesh with her. \"Everyone is going to see these when I have my quick change!\"\n\n\"Hmm...I kinda like that thought,\" Sarah gave her a wicked grin.\n\n\"Ugh, you're so dirty!\"\n\n\"You love it.\" And Sarah sucked more of Ro's tit into her mouth.\n\n\"Fuuuck.\"\n\nSarah loved this new-found privacy in Ro's apartment. Most of her neighbors were students who'd left for break and there was no fear of her roommate barging in since she'd gone home for two weeks. They were alone and free to explore each other as loudly and enthusiastically as they wanted.\n\n\"Want fingers?\" Sarah teased while waggling her tongue over Ro's nipple.\n\n\"Yes, yes!\" Her back arched and her hand grabbed for Sarah's wrist to shove in between her thighs.\n\nSarah chuckled, \"Okay, okay, let me do it. I'll make you feel so good.\" She pulled her hand out of Ro's grasp and gently massaged her arms to rest back on the bed.\n\nShe positioned Ro's legs on either side of her hips as she sank down on the mattress. Her hands brushed over smooth skin above Ro's knees and teased at the edge of her tight shorts. Pulling the fabric aside, she turned her palm up and extended two fingers into Ro. With her thigh anchored behind her hand, she practically lifted Ro up off the bed by her cunt.\n\n\"Oh, shit!\" Ro called as her hips left the bed and Sarah's fingers disappeared deep inside. She moaned as Sarah began to drag her fingers back out.\n\n\"Yeah? You like my fingers inside you?\"\n\n\"Yes, hell ye-\" Ro's voice was lost to Sarah pressing her fingers back into her dripping cunt. She used the force of her thigh to keep Ro's hips up, tugging her off balance more as she fucked her.\n\nRo's walls were clenching around her after just two more thrusts like that. \"Sar- I'm gonna come!\"\n\nSarah used her free hand to grab Ro's breast and pinch her nipple as she dragged the fingers from her other hand in and out of Ro faster. The shudder that rocked through Ro threatened to tip them both over, but Sarah held her down as she came. She didn't slow down as Ro's orgasm peeked, she kept the same pace until Ro's shudders became whole body convulses and her legs flailed wildly around Sarah's hips.\n\n\"Sarah, if you, I'm gonna-\" Ro couldn't finish her sentence before a gush of hot liquid sprayed across Sarah's hand, thigh, and up her forearm. The surprise of the squirt caused Sarah to stutter in her thrusting enough that Ro could pull back. She lowered her girlfriend to the mattress to recover.\n\n\"Fuck, Ro. I didn't know you could do that.\"\n\n\"It's, uh, only happened a couple times. Shit. Where did you learn that, Sarah? Seven days ago you were a blushing virgin.\"\n\n\"I wasn't blushing,\" Sarah scoffed, \"but I'm a fast learner.\" She leaned in to kiss Ro, but stopped just shy, \"And I had a great teacher.\" Instead of kissing her though, she pulled her wet fingers up to her mouth and sucked obscenely just inches from Ro's face on the juices she'd left there.\n\nRo gaped at her, \"What the fuck have I got myself into?\"\n\nSarah smiled, \"Hopefully a relationship full of really hot sex.\"\n\nLaughing, Ro wrapped her arms around Sarah's neck, \"Hot sex goes both ways.\" She pecked a kiss under Sarah's jaw and wiggled under her, using her arms to push Sarah up along the bed. Realizing what she intended to do, Sarah did blush a little, but she walked her knees up as Ro slid all the way down until her head was between them.\n\n\"Your turn!\" she announced before diving up into Sarah's wet cunt and clenching her arms around her thighs. The eager tongue hitting her folds set a shiver up Sarah's back and she had to grab for the headboard to hold herself steady above Ro's face. It was a good thing she held the headboard too because Ro's enthusiasm quickly overwhelmed her. She'd already been turned on from making Ro come and the hot tongue darting into her was coaxing her to her own climax. Ro sucked at her clit then dipped her tongue back in to lick up Sarah's wetness.\n\n\"You want to come on my face, babe?\"\n\n\"Fuck, uhng, yes!\" Sarah groaned as Ro pulled all her focus to her clit, pressing firmly with her tongue. The strokes became more insistent against her and the hands on her thighs tightened to pull her in closer. Sarah was going to come while sitting on Ro's face in Ro's bed, with slick still on her fingers from Ro's orgasm. The thought was too much and she began bucking her hips with her increased sensitivity.\n\nRo's tongue flicked away then resumed the pressured licking over and around her clit. The slight tease was enough, Sarah used every muscle in her thighs to control herself to keep from thrashing into Ro's head. The tension coiled and released as she orgasmed around her girlfriend.\n\n\"Mmm, you taste so good.\" Ro let off her clit and dug her tongue back into Sarah's dripping entrance. She slid in deep and sucked juices away.\n\n\"Fuuuck, Ro. That feels so good. Ah, ah! Okay, let me go!\" She gasped as Ro nibbled her teeth at Sarah's oversensitive clit.\n\nMercifully, Ro backed off and let Sarah collapse next to her on the bed. They laid on the bed with legs all tangled together staring at the ceiling and sighing contentedly. It was cool and quiet except for their breathing. The snow that had started falling earlier in the week was beginning to stick and blanket the world outside, muffling the street noise and turning the city white.",
        "\"Ugh, I should shower. I've got to have dry hair before hair and makeup tonight.\"\n\nSarah hummed her acknowledgement, but neither got up to move.\n\n\"You gonna make me breakfast?\" She turned onto her stomach to look at Sarah and bat her eyelashes comically.\n\n\"If you wanted breakfast, you should have left me with the use of my legs.\"\n\n\"Pleeeeease, Sar. As much as I love your pussy, I need to eat real food!\"\n\nSarah laughed at her pleading, \"Alright, alright. I'll go cook while you shower.\"\n\n\"You're the best!\" Ro gave her a quick kiss then popped off the bed and bounced to the bathroom.\n\n\"You have too much energy left!\" Sarah smiled at the giggle she heard in response then got up to find clothes.\n\nThey ate breakfast together, despite it actually being closer to lunch time when they'd finally emerged from the bedroom. Sarah tried not to think about this time tomorrow when she'd be packing up to go home for the holidays. There was nothing at home she wanted right now. They always did the same thing for Christmas and as none of it involved her cousins on her mom's side, she didn't have much interest.\n\nShe disliked helping with her mother's charity dinner because it caused so much stress. Flying to visit her grandparents was exhausting and there was no one to hang out with. She loved her dad's family, but being the only grandkid on that side was also a bit lonely. The real treat was this year her parents had received an invite to some swanky New Year's Eve party, so she would be ringing in the new year alone on her couch probably under a pile of red vines.\n\nSarah sighed.\n\n\"What's up?\"\n\n\"Nothing, just thinking about the holiday break. Not really looking forward to the rest of it. This was kinda the highlight.\"\n\n\"But aren't you flying to Arizona to see your grandparents?\"\n\n\"Yeah, but that's for three days and they'll just spend the whole time talking to my parents or asking me the same six questions over and over.\"\n\n\"Like what?\" Ro asked through a mouthful of egg.\n\n\"'How's school going, Sarah?', 'The softball team looking good this year?', 'What are you planning to do this summer?', 'Have you thought about applying to medical schools?', or my favorite, 'Got a boyfriend yet?'\"\n\n\"Hm...well, I guess you can always set them straight, er gay, on that last one. That would vary the conversation for a bit, at least make it more interesting,\" Ro laughed.\n\n\"Yeah, I think I'll pass on coming out to my parents and grandparents over Christmas dinner.\"\n\n\"That's fair. Have you thought about it though? Coming out in general, I mean.\"\n\n\"A little, I don't know,\" Sarah didn't look up from her plate.\n\n\"Well,\" Ro began carefully, \"All our friends basically know, right? Like, no one on the team or anything has brought it up and we've been hanging out for a few months now. And your cousins figured it out. What's different about the rest of your family?\"\n\n\"I-\"\n\n\"I'm not trying to pressure you!\" Ro suddenly cut in, \"I just want to understand.\"\n\n\"Thanks. Um, I don't really know. It's something I never thought about before. Outside of the extremely medical and detailed sex talk I got at twelve years old, I have never had a conversation about relationships with my parents. Now that I understand myself more, now that I know I'm gay, I guess I just don't know how to start that conversation.\"\n\n\"Okay, but whenever you're ready, I'll be here.\"\n\n\"Thank you.\" She leaned forward to kiss Ro.\n\nThey cleaned up and spent the afternoon lying on the couch with various sports or cooking shows filling the screen. Ro did some of her stretches which Sarah greatly enjoyed watching. It was nice just to spend the time together, not that the sex wasn't amazing, but so was just being herself with Ro around. They ate some snacks and had a popcorn catching contest. Sarah could catch popcorn in her mouth with astonishing accuracy and Ro thought it was the funniest thing to chuck pieces at her from across the room.\n\nAround 5:00, a loud knock on the door signaled Kate and Tara's arrival. They'd decided to have Kate come pick up Ro for call time and drop Tara to come with Sarah later for the show. The two women stumbled in when Sarah opened the door.\n\n\"It's fucking freezing!\" Tara yelled, shaking snow from her hair and stomping her feet on the rug.\n\n\"Grab your stuff, Roisin, we gotta go! It's going to take longer to get to campus, they haven't plowed all the roads yet.\"\n\nRo ran to grab her bags. She gave Sarah a kiss and handed over the apartment keys for them to lock up later. Bundled up, the two dancers trotted out into the snow which was quickly becoming ankle deep. Sarah made sure they got to the car before closing the door and joining Tara on the couch. They turned on a basketball game and quietly browsed their phones separately for a bit.\n\nTara cleared her throat, \"So, uh, how's things going with Roisin?\"\n\n\"Good, great really. We're official. Officially dating, I mean.\"\n\n\"Nice! Congrats,\" Tara's wide smile gave Sarah some confidence.\n\n\"Yeah, it's just...I'm not out, ya know? So that makes it a little complicated.\"\n\n\"Not really, dude. I mean, not here, not with the team. We've got your back no matter what,\" she stretched her long legs out and plopped her feet on the coffee table, \"Guess it's complicated at home then?\"\n\n\"How did you come out?\" Sarah blurted before they could dive into her home situation any further.\n\nTara chuckled, \"I was never 'in'. Apparently I told my parents in, like, kindergarten that this girl Ruth was really pretty and I was going to ask her to be my girlfriend. Of course they laughed it off as a little kid thing, right? But I just kept bringing home girls. Now they believe me anyway.\"\n\n\"Were they accepting?\"\n\n\"For the most part. I've got an aunt who says I'm going to hell, but I told her I knew that before I started fucking women so,\" Tara laughed and shrugged.\n\nSarah sat thoughtfully for a bit. How would her aunts react? What if her parents were fine with it, but her aunts were not? Would her mom choose her side over them? A whole new set of scenarios opened up in her head.\n\n\"You think your parents won't be cool with it?\" Tara asked quietly.\n\n\"I really don't know. We don't talk about that stuff. The deepest conversation I've had with my dad was about whether or not the use of replay review in baseball compromises the integrity of the game.\"\n\n\"Gotcha.\"\n\nThe silence stole over the room again, only interrupted by the sounds from the TV. After a while, Sarah got up and grabbed them sodas. Tara thanked her and they relaxed into watching and discussing the game until it was time to make their way to the theater. The snow made the drive slow, but not enough yet to be dangerous.\n\nFinding their seats was quick and Sarah remembered at the last minute to turn off her phone. When she pulled it out, she had a text from Ro.\n\nR: My parents want to take me to dinner tonight after. Do you want to come?\n\nS: As your girlfriend? Or just a friend?\n\nR: We can just say friend...but, like, they are gonna assume.\n\nS: Right, yeah, okay. \n\nR: Thanks, see you after!\n\nS: Break a leg! \n\nRo had taught Sarah pretty quickly that saying good luck before a performance was bad luck. She didn't get that specifically, but she understood superstitions well enough. A girl on her high school team refused to wash her shorts for a whole season after she was convinced they were the reason her batting average had improved.\n\nThe show was just as good as the last one Sarah saw. Now that she was familiar with it, she knew where to look to find Ro and which parts were her favorites. Tara too seemed particularly interested when Kate was on stage. They'd take turns pointing out their girlfriends in different places. When the Arabian number began, Tara smirked at Sarah's face.\n\n\"Did she show you that one up close last night?\" she whispered.\n\nSarah just elbowed her in response, never taking her eyes off the stage.\n\nAt the end of the show, she and Tara waited in the lobby for the dancers to appear. They chatted idly about winter break plans. Tara was staying in her house for most of it, but she did have plans to go home with Kate for a family Christmas party. Sarah talked about her Arizona plans and the lonely new years she expected.\n\n\"We're all usually back by New Year's Eve. I'm thinking about having a party, Kate wants to do some kind of silver and gold night thing. If you can sneak back early, you should come.\"\n\n\"Thanks, I'll think about it.\" Sarah was grateful for the idea. She wasn't sure how her parents could possibly object, but didn't want to get her hopes up too much.\n\n\"Hiii! What did you think this time?\" Kate appeared out of the crowd and pounced on them, wrapping herself around Tara.\n\n\"Beautiful as always, babe.\" Tara smiled warmly and slipped her arm around Kate's waist.\n\n\"Aw, thanks,\" she scrunched her nose up. \"Ro was right behind me, where'd she...? Oh. That's her parents, and one of her brothers. Maybe, Killian? I don't know, I can never tell them apart.\"\n\nRo was standing several meters away smiling at a plump black-haired woman and a tall, pale man. Another male, shorter, younger, and stockier than the other, stood to the side checking his phone. The woman who had her hands on Ro's shoulders was smiling and talking animatedly. Ro caught her eye and motioned for the three women to come over. Kate saw too and also seemed to log the terrified look in Sarah's eyes. She smiled encouragingly and led the way with Tara. Sarah tagged along behind.\n\n\"Mom, you remember Kate,\" Ro said as they approached. \"And this is Tara and Sarah,\" she turned to them, \"These are my parents and my brother, Killian.\"\n\n\"Hello, girls.\" Mrs. Daly smiled as she spoke and Sarah wasn't surprised to hear a gentle Irish accent. \"Great job as always, Katie. Your grandmother couldn't make it this evening?\"\n\nKate grinned, \"Thank you Mrs. Daly. She came last weekend. Too close to Christmas now so she's busy making fudge for her church.\"\n\nSarah noticed how Mrs. Daly's eyes caught on the way Kate's hand held Tara's. It was subtle, just a little tightness around her eyes, but maybe Sarah was just hyper-aware of her every reaction right now. Sarah caught Ro quietly pulling her father aside and whispering something. He nodded. She gave him a quick squeeze and turned back to the group.\n\n\"Well, we should get back, snow's starting to pile up,\" Kate wound her arm around Tara's waist, \"Have a safe drive and a great Christmas!\"\n\n\"You too, girls!\" Mrs. Daly smiled more genuinely.\n\n\"Sarah, Dad said it's fine if you want to join us for dinner!\" Sarah noticed the way this was actually directed more at Mrs. Daly than herself.\n\n\"Thank you,\" Sarah smiled nervously.\n\n\"I'll go get the car, Ma. The parking lot is probably covered in snow.\" Killian zipped his coat up and pulled the collar up to his ears.\n\n\"I gotta go start mine too, I can follow you all,\" Sarah prepped her coat for the walk outside too.\n\n\"I'll ride with you,\" Ro brushed her hand over Sarah's shoulder then thought about it and yanked away, \"I, uh, know the way.\"\n\nSarah nodded, ignoring the lump in her throat. Why were her nerves choosing now to rear up? She followed Killian out the front doors.\n\n\"So,\" he began as they stepped into the freezing lot, \"are you fucking my sister?\"\n\nSarah choked, \"Uh, Wh- I, I...\"\n\n\"It's fine if you are, just, ya know, 'I'll kill ya if you hurt her' and that whole thing.\" He smiled mischievously.\n\n\"Right yeah, uh, okay.\"\n\n\"I'm just teasing. Sarah, right? Brothers are supposed to look out for their sisters. But ours seems to have chosen to exclusively date women who I'd have a hard time punching.\"\n\n\"Sorry,\" Sarah blurted awkwardly. \"If I hurt her, you can totally punch me though. I won't dodge it.\"\n\nKillian threw his head back and laughed, \"Sounds good.\"\n\nClearing snow off the car took a few minutes, but when Ro climbed in and pointed the way to the restaurant, Sarah began to thaw out.\n\n\"Great job tonight.\"\n\n\"Thank you, it means a lot that you came twice,\" Ro rested her hand on Sarah's thigh, \"And that you're willing to come to dinner with my parents.\"\n\n\"Your brother asked me if we were fucking.\"\n\nRo's hand twitched on her thigh, \"That asshole! Don't worry, I'll deal with him.\"\n\n\"Nah, it's fine. We agreed that if I hurt you, he gets one punch.\" Sarah laughed at Ro's indignant face.\n\n\"My brother does not fight my battles for me.\"\n\n\"I know, but I don't plan on giving him a reason to either.\" Sarah dragged her fingers over the back of Ro's hand and laced them. They drove the rest of the way silently holding hands.\n\nThe restaurant was a typical chain place, a little slow for a Saturday night since most of campus had emptied. The friendly waitress took their drink order and left them menus. Ro's dad and brother had ordered beers, Mrs. Daly and Ro ordered iced tea while Sarah got water.\n\n\"Ya don't drink?\" Killian asked teasingly.\n\n\"I'm only 20,\" was Sarah's reply.\n\nKillian gave Ro a wicked look raising his eyebrow. But Mrs. Daly cut off any silent squabble the two siblings were about to start.\n\n\"What's your last name, Sarah?\"\n\n\"Golding.\"\n\n\"Ah, that's a unique family name. And what do you study?\"\n\n\"Exercise science-\"\n\n\"Sarah's going to be a doctor!\" Ro blurted out over her tea.\n\n\"Physical therapist, but yeah,\" she corrected.\n\n\"How wonderful! You must be smart. These two,\" she gestured at her kids, \"if they were smart, they'd be studying something that'll actually get them a job!\"\n\n\"Aw, that's not fair, Ma!\" Killian whined.\n\nDinner went well and Mrs. Daly only gave a tight nod when Ro mentioned that Sarah could take her back to her apartment. She hugged her parents, smacked her brother, and pulled Sarah away to the car.\n\nWhen they got back to the apartment, Ro went to shower the hairspray and stage makeup off while Sarah collapsed on the couch. Her mind wandered to home and her own parents. They'd be in bed already unless dad was working in the ER tonight. Tomorrow they'd have dinner together, ask about her semester, and tell her to get all her laundry done before Arizona. Should she slip into the conversation that she had a girlfriend? Would they ask about Ro? Would they want to know how they met? Or would it just be quietly acknowledged then the subject changed? She honestly didn't know, but the idea of telling them sent her stomach into knots so she pushed it away and focused on happier thoughts.\n\nSoftball practice would be in full swing when they came back from break. Sarah couldn't wait to get back into batting practice. Then her classes were far more interesting next semester now that she'd finished the prerequisites for her program. And there was Ro, who said she'd be on Sarah's side, who was willing to be patient while she figured things out.\n\nAlmost as if on cue, a brush of fingers over her face forced Sarah to open her eyes. Ro stood in front of her stark naked and glistening. She smiled softly.\n\n\"Tired?\"\n\n\"Just thinking,\" Sarah said thickly as her hands reached up to rest on Ro's hips.\n\n\"Want me to make you stop thinking?\" Ro asked with a raised eyebrow.\n\nSarah swallowed, \"Please.\"\n\nAt some point they dragged their exhausted bodies off the couch and made it to bed. They slept long and deep as the snow drifted silently outside the window.\n\nChapter 14: New Year's Eve\n\nSarah's drive home was a lonely two hours. She had put it off as long as she could, but by her mother's second text asking when she'd be home, she knew it was time to go. She kissed Ro long and sweet after packing. They tried not to be too sappy about it, after all, they'd see each other in about two weeks. Sarah brought up going to Tara and Kate's New Year's Eve party and Ro agreed that if Sarah could go, she'd come back for it.\n\nConvincing her parents to let her go back to campus early turned out to be easier than she thought. They felt bad for abandoning her on her last weekend home, but hearing she had a chance to head back to campus early to see friends seemed to ease their guilt. Convincing them she'd be safe and smart once there was a little more difficult.\n\n\"Where is this party?\"\n\n\"Tara's girlfriend's apartment. Tara will be there and some other teammates. It's going to be small.\"\n\n\"And you'll keep the drinking to a minimum?\"\n\n\"Mom, softball season. Of course, I'll be smart.\"\n\n\"Sarie is a smart girl, hon, she'll be fine.\" Her dad's only contribution to the conversation was to assure his wife she made the right decision in saying yes.\n\nSo that's how Sarah ended up back at Ro's apartment on the afternoon of New Year's Eve slipping into a silver tank top and gray leggings. Ro had wanted to do her makeup, so she also had silver glittery eyeshadow and dramatic winged eyeliner. Her blonde hair was curled and pulled half back into a sparkly clip Ro had from an old dance costume, the most she'd worn it down since Halloween.\n\n\"Okay, I'm not wearing the shoes, it's too fucking cold for that!\" Ro's voice carried from her bathroom. \"But what do you think?\"\n\nShe stepped into the room as graceful as always. The tight, gold dress dazzling in the bedroom lights. Her cheekbones, eyelids, and collarbones shimmered with gold highlighter. She'd also done winged liner but added glossy lipstick where Sarah just went with chapstick. Sarah followed the line of the dress away from her face, over her hips, and ending suddenly at the tops of her thighs. Her long legs stretched for miles under the dress, ending in pink fuzzy socks.\n\nSarah grinned, \"The socks pull it together. Perfect.\"\n\n\"Ya think?\" Ro laughed, \"I'm keeping 'em. They are too comfy.\"\n\nGrabbing their jackets and pulling on winter boots, they trudged out to Sarah's car. Kate's apartment was fairly close, so the car was just starting to warm up when they arrived. A line of cars outside told them that it might not be as small a party as they were thinking.\n\nIn fact, Kate's apartment was packed. The party decorations glimmered silver and gold as did the sea of bodies. They kicked their boots off by the door and stuffed jackets into the already bursting closet. Setting off in search of a drink, they found it wasn't as dense as they first thought, it was just most people had congregated in the living room where one of Kate's friends had plugged in his amps and set up a mock DJ booth.\n\n\"If they don't get a noise complaint tonight, I'll be shocked!\" Ro called over the din.\n\nThe kitchen wasn't much quieter. Tara had the blender out and was pouring ice into the already rotating blades, causing a fountain of shaved pieces to fly back out at her. She threw her head back and laughed, ice chunks falling from her hair.\n\n\"Ro, Sarah! I just invented an iced vodkachino! Come try one!\" Ro gagged and Sarah recalled her mentioning this drink at Thanksgiving.\n\n\"No thank you, insane bartender, I'd like to stay conscious tonight!\" Sarah patted her on the back.\n\n\"More for me!\" Tara cried.\n\nThey drank a milder mixer as they watched Tara craft her concoction. She laughed maniacally as she poured whipped cream over the whole thing. Sarah cringed at the thought of how much alcohol and cream she watched go into that blender. Tara was going to be ringing in the new year over the toilet if she didn't slow down.\n\nWith a light buzz, Sarah let Ro drag her to the dancefloor. As they moved together, she gripped Ro's shimmery hips and pulled her closer. The other woman let her take the lead and ground her hips to Sarah's rhythm. It was not so much dancing as foreplay, but it matched the music and they both had the buzz to blame. Out of the corner of her eye, Sarah noticed two of her teammates watching. Well, if Carly and Tara's big mouths hadn't passed it around by now, it was definitely out with this dance. She was out with this dance.",
        "To pull herself out of her own head, she pressed into Ro for a kiss.\n\nRo giggled, but kissed her back, \"You're handsy tonight.\"\n\n\"Is that okay?\" she asked, suddenly self conscious.\n\n\"Of course!\"\n\n\"I blame this dress,\" Sarah slid her hands up Ro's sides over the glittery material.\n\n\"Fuck, Sarah.\" Ro shuddered.\n\n\"Don't get drunk, okay?\" Sarah whispered, looking at Ro through her eyelashes.\n\n\"Okay?\"\n\n\"I want to fuck you tonight and that's only gonna happen if you're coherent.\" She brushed her lips against Ro's ear and smiled at the way the other woman shook and leaned into the tease.\n\n\"Shit. Should we just leave right now?\"\n\nSarah laughed, \"Just enjoy the party.\" She kissed the space on Ro's neck just below her ear. Her perfume was intoxicating.\n\nRinging in the New Year with a date to kiss was just as good as Sarah had imagined. She pretended not to hear the catcalls from her teammates as her and Ro's lips stayed connected well past the usual New Year exchange. They didn't stay long after the midnight kiss. Ro's tongue practically fighting its way down Sarah's throat let her know her girlfriend was ready to go home.\n\nThey thanked their hostess and booked it back to Ro's apartment, Sarah's hand halfway up Ro's dress before they got in the door. It was up and over her head before the door was locked behind them. Sarah pulled her own clothes off as they fought to the bedroom.\n\nTwo quick rounds didn't satisfy their appetite for each other. And while they each freely left little marks all over the other's body, they kept coming back for more serious touches. Sarah breathed heavily as Ro's fingers worked their way in and out. She was wet and felt it pooling underneath her. Ro's breathing was hitched and she had a look of deep hunger on her face as she watched Sarah writhe beneath her.\n\n\"You are so hot,\" she breathed in Sarah's ear before nibbling down her neck.\n\n\"Ro, holy fuck, yes. Right there-\" Sarah's breath was labored, her stomach and ass clenched tight as Ro brought her closer. \"More!\" She almost shouted as Roisin hit a particularly good angle.\n\nShe felt a third finger slowly work it's way in and the thought and stretch made her hips buck.\n\nThen, suddenly, a jolt of white pain split between her legs, \"Ouch!\"\n\nRo immediately pulled back, \"Sorry! I wasn't ready for that.\" She gently pushed Sarah's hips back down and slid her fingers out more. Then she froze. \"Uh, oh fuck, Sarah, I'm sorry!\"\n\nShe sounded terrified and completely backed off and away from her. Sarah pushed up on her elbows, confused at the loss of contact.\n\n\"It's okay, Ro, it was just a little-\" then she too froze, eyeing the small amount of blood on Ro's fingers. \"Oh.\"\n\n\"Shit, I'm sorry, Sarah! I didn't mean to- to hurt you! Let me, let me just-\" she bolted up off the bed and disappeared into the bathroom.\n\n\"Ro, I'm fine, it didn't hurt that much.\" But the sink running drowned her out. Sarah tensed her abdomen, the pain in her vagina was sharp and hot, but not unbearable. Ro came back quickly with a damp, warm washcloth and started helping Sarah clean up. Some of the blood had dripped onto the sheets.\n\n\"I thought you were ready, I didn't mean to shove so hard. Your hips just moved so fast. Shit. Shit. Shit. I'm so sorry, Sarah.\" Ro was barely speaking above a whisper, her face serious and withdrawn while she cleaned the blood. Sarah sat up further and stopped Ro's frantic hands.\n\n\"Ro. It's okay,\" she leaned in to catch the other woman's eyes, \"It really doesn't hurt that much. It was my fault, I jerked up, you were going slow. I'm fine, really.\" She released Ro's hands. \"Sorry for bleeding on your bed, though.\"\n\n\"Fuck, I don't care about that. Are you sure you're okay? Do you need, like- some tylenol or something?\"\n\nSarah flexed her muscles and rocked a bit to see how her body responded. She mostly felt the adrenaline leaving after the panic from the pain and blood. That just made her tired. The rest was a slight throbbing that felt sharper if she shifted too much. \"I'm okay. I think I just need a break for now.\"\n\n\"Of course.\" Ro wrapped Sarah in a hug, pressing her face into her shoulder. \"I'm so sorry.\"\n\n\"Stop apologizing. It felt really great until then.\"\n\n\"That's good.\" Ro still sounded upset. Sarah pulled them backwards to lay with Ro partially on top of her, she pressed her legs closed to hopefully stop any more bleeding. She wasn't sure how much to expect with this.\n\n\"I'm glad it happened with you,\" she whispered into Ro's hair.\n\nRo responded with a muffled hum.\n\nThey lay cuddled together for a few moments until Ro coaxed Sarah up and into the shower. They continued to hold each other in the hot water, kissing tenderly and ghosting hands over wet skin. Eventually, Ro climbed out to give Sarah a little privacy. When she wandered back into the bedroom drying her hair, Ro had changed the sheets and put on a pair of boxers and a tank top. Sarah found some clothes to pull on her still damp body then joined her on the bed.\n\n\"Good?\" Ro asked as Sarah cuddled in.\n\n\"Yeah, I'm good.\"\n\nThey turned on the tv and snuggled silently while a random show flashed on the screen. The atmosphere was comfortable, but still thick. Neither woman was completely relaxed.\n\nSarah opened her mouth, but Ro beat her there.\n\n\"I didn't realize it could happen like that,\" she said timidly.\n\n\"Yeah, I guess I just didn't really think about it. For lots of women it's not, like, a thing. It just never occurred to me.\"\n\n\"Are you still feeling okay?\"\n\n\"Yes, it's a little duller now, bleeding stopped.\"\n\n\"Good.\" Ro brushed her fingers up Sarah's arm, sending chills down her back.\n\n\"Um, do you- do you remember...I mean, did this happen to you?\" She struggled with the question.\n\nThe dancer let out a short huff, \"Yeah.\"\n\n\"Can I ask how?\"\n\n\"Yeah, I mean, it wasn't like a big deal, but it was with my second girlfriend. The one I met freshman year here. She was...into toys.\"\n\n\"Oh?\"\n\n\"Yup,\" Ro popped the 'p' on the word. \"It was a strap-on around the fourth or fifth time we had sex. We were kinda prepared for it to happen honestly. It was a pretty large dick. She tried to go slow, make sure I enjoyed it, but it still hurt like hell. We didn't use it again for a long time.\" She stared up into the ceiling, remembering.\n\n\"Would you ever use something like that again?\" Sarah couldn't look at Ro as she asked.\n\n\"With you?\"\n\nSarah's mind instantly flew to an image of Ro with black straps crossing her ass, turning to reveal a fake, full cock between her legs. Her breath caught at the mental image. \"Maybe?\"\n\n\"Only if you were one hundred percent up for it. I don't, like, have one. But if that was something you wanted to do, yeah, I would.\"\n\nNodding felt safest. She didn't want to say yes or no right now. Ro's arm dragged Sarah in closer and they tangled their fingers together. The commercial ended and opening credits for a popular superhero movie began playing. They settled in to watch, holding each other.\n\n\"You sure you're good?\" Ro looked up at her from where she was snuggling on Sarah's chest.\n\n\"Yes,\" Sarah sighed, \"hell of a way to ring in the new year though.\"\n\nRo giggled as Sarah pulled her closer, \"Happy New Year, Sarah.\"\n\n\"Happy New Year, Ro.\"\n\n \n"
    ],
    "authorname": "CreatingKate",
    "tags": [
        "ballet",
        "dancer",
        "first time",
        "lesbian",
        "lesbian sex",
        "romance",
        "slow burn",
        "softball"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/what-a-shortstop-does-ch-11-14"
}
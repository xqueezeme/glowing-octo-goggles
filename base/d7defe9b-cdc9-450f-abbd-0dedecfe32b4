{
    "title": "A Slave to the Servants Ch. 15",
    "pages": [
        "Here it is the answer to the question: Who's the Daddy?\n\nThanks to Steve150177 for his relentless pursuit of perfection. I think you all have seen the difference it has made.\n\nEnglish is in italics when it appears.\n\nAll feedback is welcome whether you liked it or not. Let me know if you have comments\n\nEnjoy! DW\n\n*************************************\n\nI had a free morning while my men worked in the sorting room. After I cleaned our apartment, I finished another blanket for the child. I talked to my unborn and sang to her all morning. Later, as I often did nowadays, I took a late morning nap.\n\nMy naps were restful, but they were full of dreams. My connection with my family was strongest then. It was like I spent that time in the sorting room learning more about the ore and whatever else was on their minds.\n\nAnything they thought about while I slept, I absorbed. If something was interesting to me I felt them concentrate on it. The experience made for strange, vivid dreams. I often woke confused, because I'd thought I'd been wherever I was dreaming about.\n\nAs usual, Evan's lips on my temple woke me. I had been deeply asleep.\n\n\"It is very strange,\" he informed me, \"we find that when you are tired, we are also. Once you have fallen to sleep, we no longer feel tired. Your sleeping clears our bond of that influence.\"\n\nI stared up at him as confused as he was. It was clear to my men the way we bonded wasn't normal. They were an amalgamation of one mind. Despite our obvious connection, I was still separate. It was very strange, but it wasn't like any of us understood.\n\n\"We are hungry,\" he told me as my own stomach rumbled.\n\nAfter lunch Nu-reeh had me sit with she and her Sisters while Damien and his Brothers worked off her debt to another family of women.\n\n\"They are fierce,\" Dinah purred watching my men battle and get fucked by the women.\n\n\"They are happy,\" Nu-reeh said and laid a clawed hand on my back.\n\n\"Your owners are valuable when they are like this, slave,\" Nu-reeh told me. \"Men that are unhappy wither and die.\"\n\n\"Yes, Mistress.\"\n\nShe continued with the odd lesson. \"Some men are happy here in the mountains. Rue and his Brothers will be happy here because they are allowed to learn new things, for instance. They will do well here. Other men are happy because they are allowed to enjoy us physically more frequently.\"\n\nNu-reeh pointed to my family. \"There are times when you will find a family will not be happy here, no matter what. Those men cannot be kept here in the mountains. Their anger infects the other men. They start fights. It is very disruptive.\"\n\n\"Yes, Mistress,\" I said remembering things I hadn't known.\n\nIn my mind, I saw that Damien and his Brothers had been trouble makers when they were first here. Until the first time they saw me, they had been very difficult and sullen.\n\n\"I foolishly used them as payment, so I could not send them back immediately. It was a mistake,\" Nu-reeh said. \"They found a way to make themselves happy, though, so I let them continue to visit with you. I had hoped it would be a permanent solution.\"\n\nDinah snorted and growled, \"They were never like this, though, all spirited and happy. Their energy is from a good place now. They will stay strong like this. However, I can barely tolerate having this slave near me.\"\n\n\"Damien and his Brothers need to be back at the compound, so they can be with their slave,\" Tosu said and the other women agreed. \"This is what makes them happy.\"\n\nDinah snorted looking disdainfully down at me. \"If Damien and his Brothers must keep her, at least let it be out of our sight.\"\n\nThe talking ended as a woman down in the ring speared Kein with a wing tip. He had been trying to play with her breasts. Dinah's disgust with me barely registered and I grinned at my men as Nu-reeh went down to protect her property.\n\nI continued to knit quietly as the mating went on. What Nu-reeh had said was interesting, but the collective was busy fighting and fucking. All I could really think about was what my men were doing down in the ring.\n\nAfter the mating, we were excited. My Men knew a great deal about the stars. Their memories of how to use them were powerful. They could help tell you time of year or guide you across great distances. Showing them to me would be fun.\n\nWe had permission from Nu-reeh, Damien had asked, so we could stay out all night. My men loaded up bags they carried on their backs and we set off. We had everything we needed, so we wouldn't have to return until morning.\n\nThe sun was setting as we got on our transport. Kein drove and we zipped away from our mountain home. My men had to control themselves. Cheering as they rode away would be dishonorable, but it's what they wanted to do.\n\nWe were going to their favorite lake. In the morning we may swim in the water. Tonight we would watch the moons rise together. It was going to be a wonderful night.\n\n\"No women!\" Bane said smiling.\n\nI patted my gravid belly and looked up at him.\n\n\"Well, you don't really count, Ciara,\" Kein told me, musing my hair. \"You aren't like them.\"\n\nNo, I wasn't like them. I was female, but I wasn't what they considered a woman. I was different.\n\nWe made it to their spot in record time, at least according to them.\n\nEvan and Christof set up our camp site while Damien, Kein, and Bane checked the perimeter. There were dangerous things we had to watch out for. I knew what most of them were thanks to Nu-reeh. Luckily the area around this lake was not usually inhabited by things that were troublesome.\n\nKein bounded back to us with a dead animal slung over his shoulder. We would eat it the way they enjoyed it tonight, roasted on a spit over the open flame. I watched curiously as my men prepared the carcass and set up the fire.\n\n\"I only camped outside a couple of times when I was younger,\" I told them as the fire started to gain momentum.\n\nI remembered staying at a camp ground a couple of times with relatives. We'd stayed in a trailer, so we didn't even really stay outside. We brought canned food and cooked it over the electric stove inside. There were bugs outside, so we sat inside and watched television. It was really like staying at home, only more cramped.\n\nMy men experienced my memories with me and grunted in amusement. The idea of a traveling lodging was funny to them. They'd never seen anything like that. The rest of it was just weird Earth culture. Sitting and talking around the fire was so much more enjoyable than what I described.\n\n\"This is much better,\" Christof said coming to sit beside me.\n\nI grinned at him and pushed at his shoulder with my own. Christof grinned and pushed back, bumping me against Bane. The physical contact was always reassuring. No matter what we were doing, we preferred to be together.\n\n\"You're missing the stars,\" Bane laughed pointing up.\n\nHe was right the sky was slowly darkening and the first glimmers were appearing in the night sky. Leaning back I watched as the first of the three moons rose.\n\n\"We won't see the ringed moon start it's journey into the night sky,\" Evan told me. \"It happens beyond that mountain over there. It will appear in the sky above that ridge after a third of the night has passed.\"\n\nFrom their minds and memories I had a sudden knowledge of the moons. My men timed the night sky by them. When they kept watch, they used the progress of the different moons to know how late it was. It was the setting of the ringed moon that woke Evan up every morning. They were so in tune with them, they felt them even when they couldn't see them.\n\nI thought about the moon on earth, it hadn't been nearly as predictable. The sun was useful and we timed our days off of that.\n\n\"Weird,\" Kein commented wrinkling his nose.\n\nThe meat was cooked and we ate heartily. They told me about the patterns they watched in the speckled blackness. Evan knew it better than anyone and his mind guided mine. I watched with fascination as the night sky unfurled before me.\n\nEventually, we ended up on our backs. My men set up their sleeping pallets so our heads were all together in a circle. I watched as they pointed out all the interesting things they knew about the glittering blackness.\n\nThe way the stars looked and the way they moved in the sky was predictable to my men. They told me all about it. Evan had spent hours learning the sky.\n\n\"I wonder,\" he said, \"where my breeder came from, the slave many generations back?\" he whispered.\n\nWe all wondered and none of us knew. I wondered what had happened to her.\n\n\"Why do you think she tasted things?\" he asked. \"What was the purpose of my gift where she was from?\"\n\nEvan's mind was full of questions. He couldn't imagine a world where they were all like him.\n\n\"You sound like Ciara,\" Bane teased lightly, but he didn't mind.\n\nThe questions were valid and they all wished they knew more about their Brother.\n\nI lay quietly watching the sky. Bane had stretched out on one side and Christof on the other. After a long while, I drifted to sleep. Vaguely, I was aware as the blankets were pulled over me and I was snuggly wrapped.\n\nWhen we slept outside like this someone always kept a watch. They each took a turn during the night. Through the eyes of my men as they protected their family, I saw every subtle change in the shimmering stars and changing moons. It was like I watched the sky all night.\n\nThe memories of my men spoke to me. I saw the countless nights they had sat and watched the beautiful vista. By morning I understood the way they tracked time and what subtle changes in the moons would mean.\n\nEvan woke me with his enthusiasm. As the ringed moon disappeared and the sun rose he was filled with the usual boundless energy.\n\n\"A swim this morning?\" he asked stripping.\n\nMy breath misted in front of me and I looked warily at him. The water would be freezing and the air wasn't much better. I'd be an ice cube.\n\nThe collective mind had me, though. We loved a morning swim. It was refreshing.\n\nBefore I realized it I was on my feet and stripping out of my warm cover. My men raced to get out of their clothes.\n\nThe air bit my nipples and the rocky ground dug into the soles of my feet. I was too happy to notice, though. This was a treat to get to do this. My family hadn't been able to swim here since we lived in the compound.\n\nWe plunged as a group off a small rocky ledge into the water. It was so cold I screamed when I came up for air. I grabbed at the edge and tried to pull myself out.\n\nKein was behind me laughing a second later.\n\n\"Hold onto my shoulders,\" he commanded turning away from me. \"I want to show you something.\"\n\nKein wasn't too cold, neither was anyone else. I concentrated on how they felt and ignored my own sensations. It made swimming like this fun.\n\nI grabbed onto Kein's back and he took off under the water. Fish swam by us as we darted through the reeds at the bottom. I watched the underwater scenery with wonder. Kein didn't surface until he needed air.\n\nEach of my men took a turn showing me the lake. It was amazing and I forgot about the cold. They could swim so fast and so deep, we went to places I'd never have reached on my own.\n\nBy the time they were done, I felt a little sluggish and sleepy. Damien looked strangely at me and pressed against my back. Quite suddenly he grabbed me and sprang from the water. I watched with detached amusement as my men stoked a roaring fire.  \n\n\"Wha's the hurry?\" slurred out of my mouth.\n\nThey seemed to be in a big rush as Evan pulled the water out of my hair with one of those magical cloths and Kein briskly rubbed my body. Bane lay me down on a pallet and then pulled my back tight to his chest. Damien lay in front of me and pressed solidly against my protruding belly, wrapping around it.\n\n\"Ciara,\" Damien said seriously, \"you can't just ignore what you are feeling. That isn't how this is supposed to work. It is a shared consciousness, but each individual is still responsible for their own part of it.\"\n\nI looked up at him and realized I was shaking.\n\n\"W-w-why am I-I-I moving like t-t-this?\" I asked them looking around.\n\n\"You are cold, Ciara, much too cold,\" Evan chided taking my shivering hand in his and rubbing it.\n\nChristof pulled a blanket out and laid it over the three of us while looking worriedly at me.\n\nNobody else was cold. This didn't make any sense and then I stopped focusing on them.\n\nIt hit me like a freight train. I was so cold, so very uncomfortable. The warm bodies on either side of me were the only good thing I felt.\n\nMoaning softly, I felt them press closer to me. Greedy for the warmth they provided, I didn't mind the feeling of almost being smothered as I snuggled closer to them.\n\n\"I l-l-like the w-w-water,\" I said softly. \"I didn't want to have to get out. We were all having fun.\"\n\nChristof sat and watched us a moment before he spoke.\n\n\"It isn't normal for a human to have this attachment to us,\" he said simply. \"That's probably why it doesn't work right for her.\"\n\nNobody else could have done what I just did, the internal dialogue told me. They couldn't disappear into the bond and forget their own feelings. It just didn't work that way.\n\nThey agreed with Christof. My family would have to be careful with me. I was having trouble with the bond.\n\n\"You'll have to be more aware, Ciara,\" Christof warned. \"I don't think you are supposed to be able to do this. You aren't doing it correctly. You will get injured this way.\"\n\nI couldn't disagree. They had a great deal more experience with this than I had. Grateful for their warmth, I just snuggled with them.\n\nAs I got warmer, I started to enjoy the press of warm flesh on either side of me. Since I was facing Damien I started to place kisses across his neck and chest.\n\n\"Hmm, and what are you doing?\" he asked, raising an eyebrow.\n\n\"Thanking you for noticing my distress,\" I said continuing to kiss in between the words.\n\nIt was novel being outside and pressed between their warm, masculine bodies.\n\n\"You're getting excited,\" Evan commented from beside us. \"You want us to have sex with you.\"\n\nI rubbed Bane's hip and pressed my ass against him. Yes, I wanted them, but I wasn't getting the same feelings from them. They didn't like to have sex outside.\n\nIn their memories, I saw the sanctioned matings. The women pressed them into the rocky soil and mounted them. The sun got in their eyes, their backs got sore from being pummeled to the ground, and other groups of women stood around watching. My men hated it.\n\nMy men liked my soft, smaller body. Being inside, on their comfortable bed, and in whatever position they choose made them happy. It was private and quiet. Using me in the bedroom was a rare delicacy, all pleasure and no pain. That was an uncommon experience on this world.\n\n\"It's not like that on my home world,\" I said feeling my arousal fade away. \"People have sex just about everywhere and anywhere.\"\n\n\"This is your world now,\" Damien reminded me, \"and sex in your current state brings you pain. What you want would not be good for you.\"\n\nThe rebuff didn't sting as bad as it could have. I looked into Damien's eyes and felt only his concern for me course through our bond. It wasn't that he didn't want me. He just didn't want to cause me pain. Sex outside, in his experience, was always uncomfortable. He and his Brothers would never do that to me.\n\nWe flew back to the mountain after we ate the morning meal outside. I was left in their rooms and they went to the sorting room.\n\nThe tutors came as usual and taught me more about language and numbers. I enjoyed the lessons, but disliked the tutors. They were rude. I had no problem seeing why Damien didn't like them. Despite how knowledgeable they were, they were very impolite.\n\nNu-reeh came for me in the afternoon and we flew in the mountains. She took me so far, I wasn't back before nightfall. The entire time she had me, she told me stories about the rest of the planet.\n\nFrom what she said it was a fascinating and beautiful place. There were drier areas, like we were in now, she preferred those. There were wetter areas, too, all rain and rivers. She wasn't as fond of those places. I just listened to her with rapt attention.\n\nDays passed and I had a certain familiarity with the procedure now. I was taught and trained, but no one bothered me. The frequent taunts of my tutors didn't even bother me anymore. My uncles had said far worse to me.\n\nDamien and his Brothers were a different story. When my tutors came and treated me badly, they more and more took the insults personally. If Damien was just angry before he stayed almost permanently furious now.\n\nHe fumed one afternoon after the tutors had left. Damien wanted to tell them what kind of punishment their commentary was earning them. They had no right to speak to me that way, I was as worthy as any of his Brothers.\n\nChristof and I tried to get Damien and the rest to see reason. Christof was almost pleading to calm his Brothers down. He saw that their anger would make them uncontrollable. It would make all of us the same way if we let the anger keep its hold.  \n\n\"They are speaking to her like she is a slave,\" Christof explained. \"They think Ciara is only chattel. Those men would do much worse if they knew what she meant to us. Can you imagine the reaction if they realized she had bonded to us?\" Christof asked trying to reason with Damien.\n\nIt would be like inviting trouble to tell them what I was really worth. I was a weak point in the carefully guarded family defense. If they hurt me badly enough, it would hurt my men.\n\n\"There are too many that would like to see us cringing on the floor to do that,\" Bane said pacing. \"They must not know how important she is.\"\n\nDamien's family was powerful and they had enemies here in the mountains. I sat alone and unguarded most days. It would be foolish to advertise me as their weak point.\n\nI felt bad. These were strong men, usually up to any task set before them. I hated to be their Achilles heel.\n\n\"Don't worry,\" Christof commanded pulling me to his chest. \"We are glad you are here. The weakness is a price we are more than willing to pay.\"\n\n\"Just don't let the comments affect you,\" I reasoned looking around. \"We know it isn't right, but it doesn't bother me. That's all that matters.\"\n\nDamien wasn't happy about the decision, but for now we would wait and watch.\n\nUnfortunately, we didn't have to wait long for the tutors to step over the line of what Damien was willing to tolerate.\n\nThe tutors had come as usual and we were sitting in the main area of my owner's apartment. Damien and his Brothers were in the sorting room. I had been practicing writing on a tablet in front of me. My hand was steady and the characters looked as they were supposed to now.\n\n\"Tell me, slave,\" one of them said. \"Do your Masters still use you? It appears like it would be difficult since you are so large and awkward.\"\n\nNo, they didn't really use me. Sex was too uncomfortable in my current state and my owners could not avoid feeling my discomfort. They used their hands or they took their time with the women in the afternoons, so they didn't feel particularly deprived.\n\n\"My Masters take what they need from me, Keeper,\" I said tactfully.\n\nIt was true. I was a friend and companion. My family felt happy in my company. They were glad I was in the mountains with them. Life was better this way.\n\n\"Liar,\" one of the men said coming around behind me.\n\nI felt the man's hot breath as he leaned down behind me. He ran his hands down my arms and spoke into my ear.\n\n\"I do not think they still use you, slave,\" he said. \"I believe they just coddle you like a little toy, much as Mistress Nu-reeh does...Although I fail to understand why.\"",
        "\"Perhaps we should use the slave for its purpose,\" one of them offered wickedly. \"Perhaps it would be a good lesson for Damien and his Brothers to learn to share.\"\n\nThey laughed at how fun that would be. Their Mistress had said not to touch me, but no one was here right now. Making Damien angry would be enjoyable.\n\nI tried to rise and was pushed forward. One of the men grabbed my breast and squeezed. Reacting like my Warriors were trained to, I balled a fist and slammed it into his face. It didn't faze him at all.\n\nThe man before me laughed at my attempt and nearly knocked me out with a swift blow to the head. As I staggered dizzily another of them landed a sharp punch on my protruding belly. Screaming, I wrapped my arms around my unborn to protect her.\n\n\"Unless you want more of that, you will do what we say,\" the leader growled.\n\nBefore I had my balance back the men had me bent over the back of a chair in the room. My big belly was pressed hard into the cushion and I felt a wave of intense nausea.\n\n\"As payment then for all of our wasted mornings with this stupid creature,\" one of them said.\n\nStill struggling hard, I felt the sweep of cold air on the back of my legs. My warm covering had been lifted to reveal my backside. I threw my elbow back slamming it into the gut of the man behind me. He grunted and laughed, but then he screamed.  \n\nI felt the man behind me suddenly ripped away from my body. White hot anger surged through me and I felt the desire to kill. Hands pushed me toward the wall and my family was throwing the tutors into the hall.\n\nDamien was going to kill them and nothing was going to stop him. The fighting was fast and brutal. My family beat my tutors into the floor for every indiscretion. Once they were satisfied Damien and his Brothers went for the weapons they needed. Remove their heads from their bodies and throw the corpses off the mountain was the decision.\n\n\"No, stop!\" I screamed running into the hall.\n\nThe commotion had attracted many men to the main hallway we were in. They were screaming bets and encouragement watching the fight. This was great entertainment.\n\nThe order from Damien was in my head to go back inside and be quiet. It took every ounce of mental determination I still had to fight the command.\n\n\"Stop, please!\" I begged. \"She doesn't want them dead!\"\n\nIf Damien killed these men I feared what Nu-reeh would do. I felt the anger Damien had and it was making him irrational. It was making all of them irrational.\n\n\"She will learn to live with it,\" Damien said raising his arm to deal the killing blow.\n\n\"ENOUGH,\" was the roar from the entrance to the hallway we were in.\n\nDamien's blade quivered in the air. I saw him falter as his eyes raised to the creature that had bellowed. Nu-reeh strode toward us and the compulsion to drop the weapons was undeniable.\n\nDamien's blade fell to his side and he dropped the man he had been holding. The tutor's head made a sickening thud as it hit the stone floor. The other men did the same thing as Nu-reeh came closer. She looked livid.\n\nThe yelling throng dispersed with amazing speed. They literally ran down the hall to escape.\n\n\"They attacked Ciara, Mistress,\" Damien said by way of explanation. \"They wished to use her. They hit her face and her stomach.\"\n\n\"My Sisters and I will deal with this,\" Nu-reeh said stoically and the rage just melted from us. \"You do not need to concern yourselves with punishment. We will do a much better job than you would.\"\n\nThe women could, we all agreed. They could punish a man until he wished to be dead. This issue would be taken care of.\n\n\"Yes, Mistr-\"\n\nThe polite response was cut off as the spasm radiated across my lower back. The cramp came out of nowhere. I was seeing double as I leaned over and grabbed the wall. It was like my insides were being twisted in a knot. I panted, unable to catch my breath.\n\nChristof's hands helped me to kneel on the floor and I heard Nu-reeh cursing. She picked up my tutors and literally flung their limp bodies toward the main entrance.\n\n\"You are not ready, slave,\" she said harshly. \"I am sure it is not time. You are stressed, now stop this.\"\n\nI was breathless as the pain released me and looked up into her threatening face.\n\nChristof knelt protectively beside me. He wasn't sure what I had to stop.\n\n\"Yes, Mistress,\" I whimpered holding my stomach.\n\nA moment later the cramp returned. It radiated from my lower back and I writhed trying to find a comfortable way to move. Water splashed to the ground beneath me as the contraction ended.\n\n\"What is that?\" Christof asked looking between my thighs.\n\nBetween my legs was warm and wet as I looked down. Through my translucent clothing it was easy to see the pool of bloody water beneath me.\n\nNu-reeh was really cursing now. There was so much more I needed to know. She hadn't gotten through half of my education. There was more she needed to do first. Nu-reh was furious at how far along I was before she knew.\n\nIn a fit of anger Nu-reeh slapped Damien.\n\n\"Why did you not pick better Keepers?\" she demanded as he stumbled back. \"They kept it a secret!\"\n\nThe blow had surprised Damien, but he'd received worse. My family prepared for a beating, still not understanding what brought on this fit of rage. They'd take whatever they had to in order to keep Nu-reeh's wrath from me.\n\nThe pain knotted across my lower back and I groaned leaning onto the wall. I did the breathing Rose had taught me to try to maintain composure. Now was not the time for weakness.\n\nThe sound got Nu-reeh's attention. She ordered my men to bring certain things from inside and put them in bags. While my men worked she stood glaring at me.\n\nChristof knelt at my side and stroked my back.\n\n\"What is happening?\" he whispered into my ear when Nu-reeh's attention turned back to Damien as my men returned to her with the requested items.\n\n\"It's coming soon,\" I told him. \"The cramping pushes the baby out,\" I explained as another wave of it swept across my lower back and into my belly.\n\nChristof picked me up at Nu-reeh's command and we walked briskly through the hallways. My natural curiosity had me wondering where exactly we were going. I tried to pay attention to the twists and turns, but the cramping kept distracting me. We had never been where we were going now.\n\n\"It's too fast,\" I whispered into Christof's neck. \"It takes hours and hours. This is too fast,\" I whined as the next series of spine wrenching clenching took me.\n\nNu-reeh answered me as we walked. \"It is one of us, slave, not one of you. She will fight her way out now that you have released the fluid around her.\"\n\nI laughed hysterically as my gut clenched again. Images of a hairy beast springing from my huge belly suddenly seemed funny. Perhaps she'd tear out of me and this would all be over.\n\n\"No!\" Bane shouted. \"You said it comes out the lower tunnel! Swear to me, Ciara, this doesn't tear from your body that way!\"\n\nMy owners were frantic and had stopped moving to surround me. They didn't know how to fix me if the baby tore out of me. Nu-reeh turned and grabbed me from Christof and walked faster.\n\n\"It comes out the tunnel, Bane. Do not be a nuisance. I am bringing you with me into the women's area. They will not tolerate any trouble from you men,\" she said.\n\nWe'd never been to the women's area, not even me. No one was sure why we had to go there. It would be crawling with...ugg, better not to think of what it would be like.\n\nWe came to a wall of rock and I looked up the steep incline. Just as I wondered where we go now, Nu-reeh took flight. She soared up with dizzying speed to an opening at the top.\n\nI watched behind her as my men scaled the cliff to follow her. They moved with the ease of mountain goats, but it was still slow going. It wasn't clear whether they would be able to scale the entire surface without help.\n\nNu-reeh called to her Sisters and asked them to go get my men. Dinah made an angry sound as was characteristic and Tosu just took off.\n\nThe women's area was massive. Fire pits were scattered around burning and shedding light. A huge, sunken pit seemed to be radiating heat throughout the space. Smaller caves dotted the perimeter of the room and went up the walls. Great, winged women flew into and out of the openings. Far above us the ceiling appeared to be missing allowing more light to spill in. Women were moving around in the space going about their daily lives. They barely noticed us.\n\nThe large cave Nu-reeh passed into was on the ground floor. Torches lit the area generously and I saw the walls were decorated with symbols.\n\n\"These are the quarters I share with Dinah and Tosu, slave,\" Nu-reeh informed me.\n\nThe walls around us were covered in intricate symbols. They ran in long lines down the walls. I recognized them as the family symbols the men wore.\n\nNu-reeh noticed my attention and looked proudly at the wall.\n\n\"Our men,\" she said inclining her head, \"those symbols represent the families under our ownership. They are spread over several villages and compounds; and of course, some are here in the mountains.\"\n\nTruly shocking, I thought. Nu-reeh and her Sisters could have their own compound it seemed.\n\n\"These,\" she said motioning her head, \"are the family symbols for young females under my care.\"\n\nIt was another list of families, perhaps twenty in all. Nu-reeh and her sisters ran a truly massive operation.\n\nI was laid on a large flat rock. I felt that it must be heated, because it was so warm under my back. Nu-reeh slipped my bloody, wet gown off my head and tossed it to the floor. My foot covers were also removed. I lay panting and staring at the ceiling as the next shuddering contraction ripped through me.\n\nI'd seen my cousin give birth, but I had no idea what I should be doing to help the birthing process. She'd had her head up so she could wrap her arms around her stomach and grab her legs to push. Laid flat on a rock, even with my knees bent, I couldn't get in that position. My inability made me want to scream. I felt like I would fail before I started.\n\nChristof was behind me suddenly. He raised me to lean against him between his legs, so I held the position I thought I should be in. Now I could wrap my arms around my stomach.\n\n\"Better, Ciara?\" he asked through the bond.\n\n\"Yes, thank you,\" I answered the same way as Kein wiped the tears off my face.\n\nWe sat like that and my men just watched me curiously as the contractions continued. It was such a strange sensation, they couldn't get over it. Pain was part of life, but this was unique.\n\nThe stretching and pressure on my lower half was like nothing they'd every experienced. They equated it to really having to use the lacquered pot, but that had never been like this. Evan paced nervously feeling uncomfortable with the sensation. Eventually Damien knew we had to get control of ourselves.\n\nThe pain would not break us. Knowledge of how to deal with discomfort and the ability to refocus my mind became forefront. My breathing deepened, as much as it could, and I felt steadier.\n\nTheir experience with pain somehow made it more bearable. Damien planned our breathing and kept us balanced. I was grateful and let my mind feel through them.\n\nNu-reeh passed in and out watching us, but otherwise just left us alone. After a while, she began to place her hand on my belly and tell me to push with the contractions. Otherwise, she was very nonintrusive, which I appreciated.\n\nThe pain began to grow quickly. The contractions came closer and closer together until I felt I was breaking apart. Even with the mental buffer it was awful and unfathomable. I pushed and screamed and suddenly it faded. Wet wiggling between my thighs alerted me something had happened.\n\nNu-reeh reached between my legs and lifted a a flesh colored mass into the air by a leg. Using a claw she sliced through the umbilical cord and Dinah seared the ends closed with a burning poker. I stared transfixed at my daughter.\n\n\"Give her to me,\" I croaked out reaching.\n\nNu-reeh held the wiggling infant and just seemed to be examining her. She used a rag to wipe the bloody excess off the girl. Suddenly, the baby screeched and hissed. Nu-reeh growled back and I screamed at Nu-reeh to give me my baby.\n\nChristof clamped a hand over my mouth and Damien stood between me and the giant woman. I would not be silenced and continued to scream past my gag. More than anything, I feared for the child's life.\n\nAs I screamed, so did the infant, fighting Nu-reeh for all she was worth. Finally, Nu-reeh laughed and brushed Damien away. She almost threw the bundle of flesh at me. I caught my damp shivering child and held her to my breast.\n\n\"Damien, take the rings out of the slave's nipples unless you want the girl to eat them,\" she said bluntly.\n\nKein reached for the rings and removed them while I tried to soothe the wailing little girl in my arms.\n\nShe was beautiful with a thick black tuft of hair over the crown of her head. Her flesh was otherwise milky white like mine. She had wings, small fleshy protrusions from her back that she couldn't seem to control. I stroked the area between them and they flopped around uselessly.\n\n\"Hello, Hannah,\" I crooned saying the name I had picked for her. \"Relax, Mama is here. You're okay now.\"\n\nThe screaming baby quieted some at the sound of my voice and she nuzzled my chest. I guided her mouth to a nipple and she latched on hungrily.\n\nThe rest of the room didn't matter for a moment. I was lost, counting five fingers on each hand and five toes on each foot. She had my mother's nose and a dimple on her left cheek. She was a perfect girl, wings and all!\n\n\"What's it doing?\" Kein asked.\n\n\"She is feeding,\" I told him simply.\n\nKein's fingers played over the nipple Hannah wasn't attached to and a drop of liquid appeared. He took it on his finger and licked it off.\n\n\"NO,\" Nu-reeh said sharply. \"That is not for you. Let the female feed there until she is full.\"\n\nI couldn't understand Nu-reeh. One minute it looks like she's going to kill the child and now she's protecting her feeding rights. It made no sense at all.\n\nMy lower back and belly contracted again. I grunted and strained, feeling something wet and warm slip from me. Damien reached down and pulled at the red mass.\n\n\"Is that a child?\" Bane asked startled.\n\n\"No,\" I groaned catching my breath. \"In my world it was called placenta. It attaches the baby inside of me.\"\n\nNu-reeh looked at it and then at me, \"Well, aren't you going to eat it?\" she asked.\n\n\"No, Ma'm,\" I answered as my stomach turned.\n\n\"Wasteful,\" she commented picking it up and sliding it between her jaws.\n\nThe wet slurping disgusted me almost as much as the grind of her teeth. I clutched at my daughter and closed my eyes willing the nausea to abate.\n\n\"Are you sleeping now?\" Evan asked curiously.\n\nI opened my eyes and he was right in my face.\n\n\"No, Master Evan, I felt nausea. I was just hoping it would pass.\"\n\n\"Really?\" Christof asked.\n\n\"I didn't feel nausea,\" Bane muttered from the side.\n\nWide, dark eyes opened and my little Hannah looked up at me. Grey eyes, black hair...I looked at her face and saw her father's strong features.\n\n\"She's Damien's,\" I said quietly and Nu-reeh came closer.\n\n\"How do you know, slave?\" she asked.\n\n\"The eyes, the hair,\" I said petting the baby. \"This is Damien's daughter.\"\n\nNu-reeh didn't seem convinced and wandered away.\n\nThe child sucked and pulled on the breast, watching me intermittently. Suddenly, she seemed upset. Her little fists balled up and she let out a wail.\n\n\"Mama, more,\" she cried and I sat too shocked to move.\n\nNu-reeh spoke next, \"You have another place to offer the child food, slave.\"\n\nI looked at Nu-reeh and looked at the baby. Automatically, I moved her to the other breast and she latched on voraciously.\n\n\"You only have two,\" Nu-reeh said, \"Hopefully, they produce enough.\"\n\nI was amazed. The little girl had said the English word Mama I'd used and the Paterian word for more.\n\n\"She spoke, Mistress,\" I sputtered out. \"She knows how to talk...\"\n\n\"Of course she knows how to talk,\" Nu-reeh said with a wave of her hand.\n\n\"Babies don't know how to speak, Mistress,\" I dumbly responded.\n\n\"Human infants may not speak, much like our males, but our females do,\" Nu-reeh said.\n\nHannah shivered in my arms and I forgot about the conversation with Nu-reeh.\n\n\"She's cold. I need a blanket for her,\" I said.\n\nDamien picked up the bag he had brought and pulled out one of my knitted blankets. Nu-reeh called him a nasty name and told him to give me one of the absorbent towels first. She ordered me to swaddle the infant's lower half with the absorbent piece.\n\nHannah screamed like a banshee when I took her off my breast. She was hungry she said, she begged for more to eat. I quickly diapered her and wrapped her in a blanket. Once she was back on the breast she was quiet again.\n\nThe only sound in the room was her noisy slurping and I started to be aware of my own discomfort. My lower half felt abused and broken. I shifted slightly and realized I was sitting in a puddle of fluid.\n\n\"May I have a towel to clean myself with?\" I asked sheepishly.\n\nMy men bustled around and wiped me off.\n\nThe healing cream was rubbed all over 'down there' despite my strenuous objections. Nu-reeh even insisted it be put inside me, which made me stifle a cry. I was tender, but the cream made it better.\n\nMy sore and softened belly was also treated generously with a different strange cream Nu-reeh gave Damien. The skin visibly tightened after the application. Such a strange, amazing substance, I wished I'd had it back on Earth.\n\nNu-reeh had made Damien come prepared. A large absorbent towel was slipped between my legs and tied around my waist, like a large diaper. She told him I was to wear something like this until the drainage stopped. My men didn't argue, but I could see they didn't understand.\n\nHannah observed everything as she sucked on my breast. It had been a hard day for her and I watched as her eyes slowly drifted closed. She stopped suckling and seemed to be resting. I put her tiny body across my shoulder and patted between her wings until she let out a belch.\n\n\"Good. Slave,\" Nu-reeh said sounding satisfied. \"You will feed her as often as she wants. Damien, put the cream on the slave's nipples, they will need care to keep the food supply flowing.\"\n\nDamien started to put the salve across my nipples and Hannah opened her eyes to watch him. When his hand got close to her, she hissed and spit. Damien looked at me and then at the angry little bundle I was holding.\n\nNu-reeh laughed at the scene and came closer to look at Hannah.\n\n\"She will make a fine woman,\" Nu-reeh appraised. \"No man may touch her, slave,\" she continued. \"Only you may hold her or care for her. Do you understand me?\"\n\nI remembered all the times Damien had asked the same question. Punishment always awaited me if I didn't follow the direction.\n\n\"Yes, Mistress, no man will touch her,\" I answered and watched Nu-reeh carefully.\n\n\"The other men here will be made to understand also, Damien,\" Nu-reeh said stretching out her massive wingspan. \"If any of you men touch the child, I will take your lives.\"\n\n\"Yes, Mistress,\" my men answered sounding a little shocked.\n\n\"I don't wish to have the slave in my quarters, so she and the babe will be moved back to your rooms. The slave will need plenty of food and water. Make sure there is an adequate supply in your rooms,\" Nu-reeh instructed.\n\nMy men answered in affirmation and watched as Nu-reeh approached Hannah and me. The big woman hoisted me in her arms and carried me out of her cave. We walked through the women's central area and there was great interest in my child.",
        "\"Well?\" the other women would say to Nu-reeh.\n\nShe always told them the same thing. The child appeared strong and healthy, but much too early. The wings were apparently not as defined as they should be. The women judged her maturity on that.\n\n\"Control your men,\" she kept saying. \"I will not tolerate trouble in this matter.\"\n\nThe other women agreed. The men must follow the new rule.\n\nWithout my outer layer I was chilled as Nu-reeh flew down to the main level. We made our way into the place the men stayed and I was very glad it was warmer. Nu-reeh sat me on my feet outside our chambers and told me to go inside.\n\nI hobbled in as I heard Nu-reeh's announcement. She would end the life of any man that touched the child. It didn't matter to her if it was intentional or not, my daughter would be the last thing they would ever touch.\n\nI felt weak and my insides still pained. I made it to a chaise by the fire pit and lowered myself into it, laying back. I was glad for my bulky diaper, it meant I wouldn't ruin everything I sat on. Holding Hannah close, I relaxed.\n\nDamien and his Brothers arrived after a long while. I must have drifted to sleep, but woke when they came in. After letting me sip on some water, they decided I needed to be cleaned up.\n\nKein drew a warm bath and they led me into that room. I stripped Hannah of her diaper and blanket. Christof took the bulky wrap off of me.\n\nAs I bathed Hannah, they bathed me. My men were fascinated with my daughter, but they never touched her. Christof's hand almost brushed her and Damien grabbed him before it happened.\n\n\"Caution,\" Damien warned patting Christof's shoulder.\n\nHannah woke in the water and touched at it as I rubbed her clean.\n\n\"Water, Mama,\" she told me splashing the clear liquid with a tiny hand.\n\n\"Yes, Baby Girl, that's right,\" I crooned still amazed she could talk.\n\nHannah told me about water in short, choppy sentences for many, many moments. My wonder continued to grow. Her language was mixed. She spoke both English and Paterian.\n\nThe facts Hannah gave me about water were accurate. She could drink it or swim in it. Fish lived in the water. The fleint were dangerous. Hannah spoke and spoke until she was being dried off.\n\nA hair raising howl erupted from her suddenly and she started to squirm. Instinctively, I raised her back to my nipple to let her feed. Her tiny hands kneaded my flesh as she sucked and pulled at the breast.\n\nShe dropped back to sleep and my men moved us to the sleeping chamber.\n\nMy stomach growled loudly. My men discussed it and then Bane and Kein bolted out of the room. I lay back exhausted and laid Hannah beside me in the bed. My eyes started to close and hands gently shook me awake.\n\n\"Nu-reeh said you must eat something before you rest today. She said you are to eat and drink frequently,\" Damien instructed me. \"The child has eaten and may rest.\"\n\n\"Yes, Master Damien,\" I answered groggily and he laughed softly.\n\n\"We are not Masters when it is just us,\" he reminded me as they helped me to stand.\n\nMy men wrapped me in a blanket for warmth since the main room was cooler than the sleeping room. They seemed content to care for me as they always had. I was glad to see the birth had not upset them too much.\n\nMy feet weren't steady and I leaned into Damien as I hobbled into the main room. Bane and Kein brought back a mountain of food on a large tray. Evan held me and we ate in silence.\n\nI felt a pang of pride when the pot of spicy cider was produced. The drink was in honor of a great happening. My daughter, despite all of my flaws, was considered worthy of this distinction. It made me happy to know the other women cherished her.  \n\nIt was quiet and peaceful in our little apartment. I could hear the men bustling around outside the door, but no one disturbed us. Despite the pain in my body, I felt more relaxed than I had in ages.\n\nKein had grabbed a couple of his favorite food and was crunching loudly. He looked to be enjoying the treat like he usually did. I watched him curiously and realized I didn't taste it.\n\nMy thoughts were my own again and I sat upright suddenly.\n\n\"You aren't in my head, Evan,\" I said.\n\n\"I was never in your head,\" he argued and offered me a bite of the thick meat they'd brought.\n\nI swatted his hand away in frustration. \"Is your bond all right?\" I asked genuinely worried.\n\n\"Yes,\" Christof said stroking my arm in a comforting gesture, \"but when the baby left you we felt our bond slip away from you. It didn't cause us pain and we are fine...\" he trailed off.\n\n\"Hannah must have been what bonded you to me...\" I said slowly.\n\n\"That is what Nu-reeh told us,\" Damien said.\n\n\"Eat this now,\" Evan demanded pressing food to my lips.\n\nI took the meat and chewed as Damien continued to talk. \"The females know what their female breeders know when they are born. They also know what their male breeders know, but the bond is tenuous. The women found when the human slaves carried a female of our species, the slaves temporarily bonded to the male breeder. It is how the young female learns.\"\n\n\"We were unaware,\" Christof said. \"Nu-reeh told us you must have had a very strong female to have bonded to us while we were in the mountains and you were in the compound. Our Mistress believes your child will be worthy of her kind, such strength should not be wasted.\"\n\nI was too tired to worry about it. My men fed me and put me in the bed next to Hannah. She was so lovely. I cooed and watched her as she rested.\n\n\"What is 'Hannah'?\" Christof asked me quietly.\n\n\"It was my mother's name,\" I told him. \"On my world it also meant Favored by God.\"\n\n\"That should be acceptable to Nu-reeh,\" Christof told me. \"She wanted to make sure you gave the child a strong name.\"\n\nIt stung that Nu-reeh had the power to name my child. I vowed that even if she changed the name I would always think of my little girl as Hannah.\n\nKein pulled a blanket over me and Bane lay down beside me.\n\n\"It is still early in the day, but Nu-reeh said you should rest,\" Evan said sounding disgruntled.\n\n\"Go,\" I smiled pushing at Bane, \"I have rested alone before. There are better things to do rather than lay in bed all day.\"\n\nEvan would be made insane if he had to stay cooped up in this room.\n\n\"I think I will stay,\" Bane sighed putting his head back on his folded arms.\n\nThe other men told me to rest and went quietly into the main room after closing the thick leather flap between the two rooms.\n\n\"She told you to watch me, didn't she?\" I asked Bane.\n\n\"Sleep, Ciara,\" he ordered.\n\nI turned to look at him and he looked back at me.\n\n\"Go to sleep,\" he repeated.\n\nI stayed quiet but watched him. He wasn't closing his eyes and he didn't look like a man trying to take a nap.\n\n\"Yes,\" he finally sighed. \"Nu-reeh wants us to watch you today. She said you would be weak. We are to provide what you need. Now rest or she will be angry.\"\n\nFeeling safe and protected, I did as he ordered.\n\nI slept soundly until Hannah decided it was time to eat. She probably alerted everyone in the cave system with her screeching. I was so surprised by the sound I stumbled out of bed thinking it was an alarm in the compound.\n\nStanding confused and bleary in the middle of the room, I just couldn't get my bearing fast enough.\n\n\"Ciara, we beg you to make her stop,\" Kein pleaded coming through the leather flap.\n\nBane was sitting up in the bed looking very amused at my confusion.\n\nI picked up the screaming little girl and guided her to a nipple. She had gotten herself too worked up and continued to scream. Damien and his Brothers looked more and more worried as the noise continued.\n\nSoftly, I sang to her as I sat at the edge of the bed. I didn't know songs in their language, so I sang in English. Hannah relaxed at the sound and calmed down enough to take what she wanted.\n\n\"I am jealous,\" Kein said flopping onto the bed and watching Hannah suckle.\n\n\"If you touch them now, Nu-reeh will probably cut your lips off,\" Bane commented.\n\n\"Let's not give her any ideas,\" Christof laughed sitting next to me.\n\nChristof watched Hannah over my shoulder.\n\n\"Not too close, Brother,\" Damien warned from across the room.\n\n\"I'm not touching,\" Christof protested, \"only looking. She never said we couldn't look at the girl.\"\n\nHannah opened her eyes and looked at Christof. She backed off the nipple and hissed loudly at him. I felt her tiny wings fluttering on her back. His presence irritated her severely.\n\n\"Hush, Hannah,\" I crooned. \"Christof is my friend. He won't hurt you. Take something to eat.\"\n\n\"Man,\" Hannah said simply and hissed again.\n\n\"Yes, man,\" I told her, \"not bad, though. He is a friend.\"\n\nSharp little eyes continued to watch Christof as she went back to the breast. The separation of the sexes was a deeply ingrained instinct here. It was so strange. I'd never seen anything like it before.\n\nIf it wasn't for my mother's nose squarely in the middle of her face, I wouldn't know Hannah was mine. Really, except for that and the milky white skin, she looked Paterian.\n\n\"Do the little boys talk when they are born?\" I asked the general group.\n\nNot the way Hannah talked, that was for sure.\n\n\"The young boys speak some when they are delivered to the Child Keepers, but not like her,\" Kein said watching Hannah. \"The Child Keepers also taught us about the world. We didn't know anything when we were born.\"\n\nDamien groused and Hannah turned her head to look at him. \"The females are even born stronger than us. No wonder things are like they are,\" he continued sitting down. \"Did we ever have a chance?\"\n\nHannah's scream caught all of us off guard.\n\n\"Feed it more!\" Evan demanded.\n\nOther things upset babies on Earth, like wet diapers and I had not checked Hannah.\n\n\"I need another towel like this,\" I pointed as I laid Hannah on the bed and took her diaper off.\n\nEvan quickly brought in a fresh towel and he cut it to the size I wanted hurriedly. Hannah's messy diaper was taken from me. Once she was clean and dry, she started to fuss again stating she was hungry, so I put her back on the breast.\n\n\"All she does is scream,\" Evan mourned.\n\n\"That's normal,\" I told him. \"It's worse with babies on Earth because they can't speak, so you never know what they want.\"\n\n\"She's going to kill us. I can feel it,\" Evan said flopping next to Damien.\n\n\"Who's going to kill you?\" I asked.\n\n\"Nu-reeh, she told us she would have our heads if anything happened to the girl. I'm sure she won't like all the screaming. We are dead men,\" he moaned.\n\nChristof laughed. \"She told us the child would call out when it needed things,\" he reminded them. \"She said we would be in trouble if the child was left wanting or was harmed. The girl is happy now. We must just help Ciara keep the child fed and happy.\"\n\nEvan grunted and Damien put a comforting arm around his shoulders. \"We have survived worse, I'm sure,\" he said.\n\nHannah sucked until she was full and then she was back asleep in my arms. I tried to put her down and she cried out.\n\n\"Perhaps you should hold her,\" Christof offered helpfully.\n\nI turned slightly and kissed his cheek. In return he leaned down and kissed at my shoulder.\n\nSlowly, I maneuvered myself back up the bed to lay down. Wincing and moving carefully I finally made it. I placed Hannah to lay over my upper stomach and chest.\n\n\"You are in pain,\" Christof appraised watching my face as I moved my legs around.\n\n\"Birthing is hard for humans and I'd never done it before today,\" I said trying to find a comfortable way to lay.\n\nThey brought in the cream again. The bulky towel between my legs was removed and they coated me in the healing salve. Kein took Hannah's time to rest as an opportunity and he was the one who coated my nipples.\n\n\"I miss them already,\" he sighed lingering on the sensitive tissue.\n\n\"If Nu-reeh catches you playing with Hannah's food source...\" Damien threatened while watching the main room.\n\nKein sighed and backed away, but I was pleased. He had used the name I had given our daughter. Hopefully Nu-reeh would not try to change it.\n\nChristof stretched out beside me and looked into the sleeping face on my chest. I looked down at Hannah, too. Dry and clean you could really see her resemblance to Damien. Her short tuft of hair was almost blue it was so black. The shape of her face also resembled his strong lines.\n\n\"You are right,\" he said, \"the hair is like Damien's. When they are open, her eyes also look like his. From what the women said that is a good thing. Damien made a strong daughter, she has survived well.\"\n\nI winced at the last statement and watched Christof closely. He stroked my cheek in comfort.\n\n\"She will live, Ciara,\" he whispered. \"We will help you. Rest now, though. When it is time to eat again we will wake you.\"\n\nWe had a late supper inside the apartment after Hannah was fed next. My men had a new warm outfit to put me into. Nu-reeh had given it to them.\n\nThe new outfit was still flowing, blue, and nearly see through. It was made of the thick warm fabric we were used to and it was stitched with their symbol. The main difference was the top. The front was made of several loosely overlapping panels. I could wiggle a breast out and feed Hannah and still stay inside my clothes.\n\nMy men grudgingly admitted they would not have thought to order such a thing. Nu-reeh was a wise woman. They would have to thank her for her foresight.\n\nI carried Hannah into the main room and felt much steadier walking. After several treatments with the cream my pain was greatly diminished. The space between my legs no longer throbbed and even my stomach felt better.\n\nChristof insisted on feeding me dinner, so I sat on his lap. He had said he wanted to make sure I ate enough. I thought it was just because he wanted to watch Hannah. He had always been the most curious Brother.\n\nTalons clattered on the floor and Damien went outside to see what was happening. The Brothers inside with me all sucked in a gasp suddenly, but they refused to tell me what was happening. Damien came back in looking shocked.\n\n\"Well?\" I asked rocking Hannah gently. \"What happened?\"\n\n\"They tortured the men that attacked you,\" Damien finally said. \"Nu-reeh claimed they assaulted Hannah when they touched you. She said that they made the girl come too soon. It was done to prove to the other men how serious the women are about the new female.\"\n\nI didn't know what to say. Obviously I appreciated Nu-reeh protecting Hannah, but I was a little surprised that she had abused the tutors.\n\n\"Those men were important to their owner,\" was all I could think to say.\n\n\"Not important enough,\" Christof scoffed. \"Their owners skinned their backs and pulled out their fingernails.\"\n\nI retched at the thought and fought to keep my stomach settled. Evan fussed at Christof for upsetting me.\n\n\"The women chained them in a place the other men would see them. They will be left there to suffer for several days,\" Damien said.\n\n\"But, I do not believe we should take Ciara there,\" Kein added looking worried.\n\n\"If Nu-reeh saw Ciara lose the food we gave her...\" Bane commented.\n\nThe general assessment was the same. Nu-reeh would be angry if she saw me vomit. Hannah and I would be spared seeing the mutilated bodies of my tormentors.\n\nWe were nearly ready for bed when the talons were outside the door again. Nu-reeh and her Sisters wanted to see us.\n\nI bundled the child up and walked out the leather flap with my owners. Thankfully, Hannah had chosen to be sound asleep in my arms. I knew my men feared Nu-reeh's reaction if the child had been upset.\n\n\"Have you been feeding her?\" Nu-reeh asked.\n\n\"Yes, Mistress, as often as she likes,\" I answered politely.\n\n\"She has made waste?\" Dinah questioned.\n\n\"Yes, Mistress, and I cleaned her.\"\n\n\"Have the men touched her?\" Nu-reeh asked.\n\n\"No, Mistress, my owners do not touch her and no other man has tried to,\" I told them quickly.\n\nThe women seemed pleased and had me unwrap Hannah so they could examine her. They were happy her little belly felt full and plump. Dinah commenting she must be well fed to be sleeping so peacefully. Hannah only murmured contentedly as the women checked her.\n\nTosu looked at Hannah's wings and warned me not to crush them if I insisted on wrapping her. She showed me how they should fold on Hannah's back. As the wings matured it would be more important they were folded correctly. I thanked her for the information.\n\n\"We have a great tolerance for cold, slave,\" Tosu said. \"I know humans do not. Our female young are usually born with fur to protect them. You may wrap the child for warmth. We believe her hair will grow in.\"\n\nDinah growled and made a spitting sound. \"Runen and his Brothers made the child come too early. I am sure the baby fur would have grown inside of you if the men had not interfered,\" she said.\n\nI didn't respond and only rewrapped Hannah in her blue blanket.\n\n\"You will take your meals in the main dining room with your owners,\" Nu-reeh told me. \"Take the child where you go. In the afternoons you will take her through the caves. Do you know your way around the caverns?\"\n\n\"Yes, Mistress, I know my way around most of them,\" I answered.\n\n\"The child, you call her 'Hannah', soon will feel too constrained if you try to keep her in your owners' apartments,\" Nu-reeh told me.\n\n\"Feel free to take her and let her explore. The men will not touch her. If they do, they know the punishment that awaits them,\" Dinah said harshly.\n\n\"As you wish, Mistresses,\" I said cuddling my little girl.\n\n\"I know how long your children stay with their mothers,\" Nu-reeh told me. \"The girls here need their freedom to grow and learn. Your daughter has all of her male breeder's knowledge and it should serve her well when she strikes out on her own.\"\n\nI wondered when that would be, but I remembered Damien's opinion on the subject. The women did not like to answer questions.\n\n\"I will give her any help I can, Mistress, for as long as I can,\" I said hoping that would be tactful and perhaps encourage Nu-reeh to speak.\n\nNu-reeh snorted, \"When the young female finally is strong enough to set out, I will tell you and she will leave. Our females are strong willed, they must be to survive. She will seek her own destiny within the next six moons.\"\n\nI breathed deep. Damien had estimated four hundred and twenty days when Ronal told us the same number. Too short, much too short, but I would do what I had to do for her. It seemed hard to imagine that in just six turns of the moon I would be ready to release my baby.\n\n\"You have been generous to help my daughter as much as you have, Mistress, thank you,\" I said my voice quavering slightly.\n\n\"You and the babe rest with our men, slave. Keep the child well fed,\" Nu-reeh commanded as the women turned and left.\n\nEvan's mood was triumphant when we stepped back in the apartment. Bane congratulated him with a pat on the back.\n\nMy mouth lifted involuntarily into a grin at their game. \"What did you bet on?\"\n\nChristof congratulated Evan before he answered. \"We bet on whether Nu-reeh would let us sleep in our own bed with the child. Bane said we would be told to sleep on the floor. He had said he laid on his own bed for the last time this afternoon.\"\n\nI shook my head and looked down at my sleeping baby. Six turns of the moon, that wasn't very long at all and I wasn't sure where she would go after that. From the way Nu-reeh talked Hannah would leave me, but I had no idea what the adolescent women did.\n\nMy eyes filled with tears as I realized how short my time with my daughter would be. I had no idea what would happen to her.\n\n\"Are you in pain?\" Damien asked worriedly.\n\n\"No, not physically,\" I sighed. \"I am mourning that my child will be taken from me in six turns of the moon.\"",
        "\"I don't think the female children are taken from the female breeder,\" Christof said sitting down. \"The way Nu-reeh explained it to us earlier today the young female will leave when it is time.\"\n\nIt didn't make any sense and Christof explained as best he could.\n\nAfter Nu-reeh took me, Tosu and Dinah talked to my men. They had wanted to tell me these things, but had not gotten the chance. Nu-reeh finished the story after she warned the other men to stay away from me.\n\nWomen were not like men. They were born with knowledge, they just had to learn to apply it and get stronger. My daughter would quite quickly become frustrated with limiting herself to just this mountain. She would want to get out and explore her world.\n\n\"The women of our race are the rulers of this entire planet. We considered ourselves well travelled to have seen a different compound,\" Kein said. \"As a young woman Nu-reeh went all over the world. She was not even born on this side of the great ocean, but found she preferred it here. Most powerful women do that: travel, find Sisters, and then earn funds to stake a claim on some men.\"\n\nChristof continued when Kein stopped talking. \"Your daughter will want to explore this planet before she settles somewhere. That is why Nu-reeh taught you how to survive in the mountains. She expects your daughter to travel and live in them for many turns of the moon.\"\n\n\"In the world she will find her strengths and become powerful,\" Evan said. \"That is how the women always do it.\"\n\n\"So strange,\" I whispered brushing my fingers across Hannah's tiny cheeks.\n\nI'd talked to Christof about how I grew up. They would know this was nothing like I was used to.\n\n\"It sounds strange to us, too,\" Damien admitted. \"We grew up as a family. We always depended on one another. To go out into the world alone...\"\n\n\"Why, why did Nu-reeh help Hannah? Especially if she expects her to go to some far flung place.\"\n\nMy men didn't understand my question. It was obvious to them. Nu-reeh trained Hannah because she was the offspring of one of her men. The fact I was the mother was irrelevant.\n\n\"Especially if she is Damien's,\" Christof said. \"Tosu said daughters from his line are impressive and so very rare. The women are glad they put the effort into training Hannah through you.\"\n\nThe day had been exhausting and I just sat staring dumbly at my men. I wasn't sure I had any emotions left. Eventually Damien clucked a tongue at my sleepy face and walked me to the bed.\n\nDamien took the first night sleeping next to Hannah. His Brothers all clasped him on the shoulder and wished him luck. He returned the sentiment and told them he had always cared for them. All the men said if this was their last night, they were glad to spend it together.\n\nI was absolutely confused as they said what seemed like good-bye to one another.\n\n\"What is wrong with sleeping next to Hannah? She is your daughter!\" I exclaimed sitting on the bed and watching their display.\n\n\"If he touches her, Nu-reeh will kill him,\" Evan said bluntly. \"We will not survive without our Brother.\"\n\n\"I will wrap her so that doesn't happen and nobody here would say anything-\" I started to say and Christof pointed to my sleeping daughter.\n\nI took a different tact. \"I'll put her on my chest to sleep. Is that better?\"\n\n\"You like to sleep on your side,\" Kein informed me. \"In the middle of the night you turn on your hip.\"\n\nStrangely observant, but it was still true.\n\nIn an attempt to find a solution I offered up the idea of a crib, but that wasn't how Nu-reeh had said to sleep. Instead, Christof and I built a barricade of blankets between Damien and Hannah. I could only imagine what the baby books at home would have said about doing that.\n\nWe lay down in our spots and my men's breathing evened out very quickly. I lay staring at the ceiling and thinking. So much ran through my mind, I didn't know where to start.\n\nIn the days I'd shared a bond with my family, I had thought whatever they did. With that compulsion gone, I could think clearly. For the first time in ages, I felt normal.\n\nThe day drifted through my head. It had been strange, stressful, and wonderful all at once. Parts of it were stranger than others, parts of it more stressful. I refused to think of the day my daughter would leave, that would break me.\n\nInstead, I thought about Nu-reeh and her entrance into the mens' living quarters when my owners almost killed my tutors. Damien had been ready to decapitate the man he was holding. It hadn't mattered that Nu-reeh didn't want him to do it, but he stopped when she said to.\n\nIt wasn't that he stopped because he wanted to, though. Damien and his Brothers were made to stop. Something outside of them forced their decision.\n\nMy eyes shot open when I realized. Nu-reeh had made them stop. That collective consciousness that pulsed between them; she had enforced her will on it. My men did not know. They weren't even curious about their sudden change in opinion.\n\nI looked over at my sleeping daughter and understood. The women here could control the men completely. It was done at such an intrinsic level the men weren't even aware of it.\n\nThat was how tiny unborn Hannah had learned about the world. She took over the mind of her father and examined his memories. I didn't control his dreams, she did. I was just along for the ride, so to speak.\n\nI wondered why the women bothered with all the pretense. They could have the men just line up and do what they wanted. What was the point of letting them do their own thing at all?\n\nNu-reeh didn't like her men broken and waiting on her explicit instruction. She wanted them to fight and make their own decisions. Nu-reeh only stepped in when the men would do something that would cost her, like killing another family.\n\nThe women could control the men, they just had better things to do. It was both shocking and terrifying in it's simplicity.\n\nI would have to tell Hannah, although I should probably ask Nu-reeh first.\n\nOn second thought, perhaps I should not tell Nu-reeh I understood. She may kill me if I knew her secret.\n\nWell, I decided, I had six turns of the moon. Hopefully, in that time I would figure out what I should tell little Hannah.\n\n*******************************\n\nDON'T FORGET TO VOTE!! Please ; )"
    ],
    "authorname": "DoctorWolf",
    "tags": [
        "sex slave",
        "birth",
        "alien11111",
        "outer space",
        "sci-fi",
        "science fiction"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/a-slave-to-the-servants-ch-15"
}
{
    "title": "Trans Summer",
    "pages": [
        "Summary: Trans woman and ex-student share a night of great sex.\n\nNote 1: The idea for this story came from the real Lucy.\n\nNote 2: This is a Summer 2021 Contest Story so please vote.\n\nNote 3: Thanks for Tex Beethoven for editing this story.\n\nTrans Summer\n\nFollowing a brutal year of teaching at an upscale high school in Boston during COVID, Lucy Reid was excited to take a break from her country and travel to central Mexico for a two-week getaway.\n\nThe recent few months had sucked away all of her energy as she'd gone head to head against the school board chair Annabeth Lee Chase (seriously... who needs to throw two first names in everyone's face) over starting a LGTBQ-plus club at her school. It wasn't her idea, but when she'd been asked to be the faculty advisor for the club by a couple of students, she happily agreed.\n\nIt was a fortuitous coincidence... or perhaps serendipity... since her students had no idea that Lucy had begun her life as Luke. Or that Luke had struggled through a very difficult time in high school. He'd been an effeminate boy, so of course he was bullied by his peers and never fit in. ('Of course' not because he deserved any such treatment, but because kids... and many other people actually... could often be insufferably cruel.) His Dad could never figure him out, since he didn't care about sports or trophy cars or anything else manly, but preferred to read and watch movies and so forth. His caring and perceptive Mom figured him out much more quickly, especially when she discovered some panties and pantyhose stored in his room... something he secretly liked to wear whenever he could. She never mentioned her discovery to anyone, but she did quietly begin fetching them from their hiding place and including them in her normal laundry duties. And once Luke realized she was doing it, he began routinely tossing them into his hamper with the rest of his laundry, although he never said anything either.\n\nTruth was, Luke found woman's clothing sexy. He loved the silky panties, and he really loved pantyhose. He loved the sheer softness of the hose, and how it made his legs look. He hated that due to societal expectations, especially in the South where he was being brought up, he could never wear them in public without being harassed or even beaten up... and those things happened often enough without his going out of his way to invite them.\n\nThe very day after his eighteenth birthday, he announced to his parents his intention to undergo gender affirming hormonal procedures. His Dad resisted the idea ferociously, as if his was the manhood being cast aside with such disrespect, and he took his son's decision to transition into a female badly, although after a few months, he simmered down and accepted his son's 'betrayal of his God-given gender', if only sullenly. That he accepted it at all was primarily thanks to Luke's mother's embracing her son-&gt;daughter's desire for happiness, and she was steadfastly there for him-&gt;her through those tough early days when almost all of his (now her) friends and relatives were outraged.\n\nTen years later, Luke, now Lucy, now twenty-eight, had flowered into an incredibly cute but plucky woman. A brunette, with perky B cup tits (from the hormones), and long legs always encased in nylons. Almost no one would suspect that underneath her cute attire slumbered a seven-inch cock.\n\nShe taught English, ran the yearbook, and in this crazy COVID year mothered the school's LGTBQ-plus club. A club that was sorely needed in this rich, overly pretentious community. Although perceived by her students and her colleagues as a sweet teacher to all her students, she wasn't anyone to be pushed around. After her early years of being bullied and never fitting in (having claimed for herself the feminine pronoun, along with the accompanying appearance, the very day she graduated from high school), she could rear up and become a real mama bear, and she was an outspoken advocate for any student who didn't receive the support he/she/they needed. She would stand up to administration, homophobic bigots, insensitive teachers, and cluelessly radical parents. She never set out to rock the boat... but if that boat got rocked inappropriately by someone else... well... she glared in their face and rocked it right back.\n\nUnfortunately, she was currently facing in her biggest rumble yet...Annabeth Lee Chase... the aforementioned school board chair... and the wife of a browbeating pastor who preached like a throwback to the Salem witch hunt era. The pastor claimed to preach the word of God. Lucy stated that the God she knew would never issue such hateful and destructive pronouncements.\n\nAnnabeth Lee was perceived by many as an ice-cold alpha bitch. Lucy even mused that if anyone should have a penis hiding underneath her dress pants (the woman never wore dresses) it should be her. She was a pastor's daughter, and now a pastor's wife, and she believed in true Christian morals. She, like her husband and her father before him, followed the Old Testament... not the New one, with all its forgiveness twiddle twaddle.\n\nAlthough Annabeth Lee was indeed a tyrant in public, someone you didn't want to fuck with, she was a complete submissive in the bedroom. Her husband was a dominant man, and he behaved very un-Christianly with her whenever the doors were closed and the blinds went down.\n\nAnnabeth Lee sucked cock daily... it was how she woke up her husband... always swallowing the load.\n\nBut no... Annabeth Lee always sucked cock at least twice a day... since she'd also visit him in his office at church so she could crawl under his desk to slowly worship his fat member, sometimes for over an hour, before he rolled back his chair, stood up, and issued forth her daily dose of organic facial cream, that she believed kept her looking young.\n\nAnnabeth Lee was never fucked in the pussy... not since they decided to stop having kids. Her husband considered artificial birth control a horrible sin, and he definitely didn't want any more children. So Annabeth Lee righteously took it in the ass... a lot. Occasionally he would just demand a blow job, or would roughly fuck her mouth while he watched porn (oddly, mostly gay porn), but usually he roughly plugged her ass and deposited his load in her butt. One couldn't get more righteous than that, could one?\n\nAnnabeth Lee also on a couple of dozen occasions, more frequently in the past couple years, had been spit-roasted. Her husband enjoyed sharing her with fellow men of the cloth. She hated herself for how much she loved taking cocks in her ass and mouth simultaneously.\n\nOddly... she loved all of it. She loved being used as a cheap slut. Portraying the ice queen all day in public was exhausting (even though she loved that too), so being told what to do, serving as a cum bucket for her husband and thus for the Lord (she'd been trained by her husband and subconsciously by her equally overbearing father that part of a woman's duty was to serve first her father (although not sexually) and then her husband (definitely sexually but in many other ways too), because they'd been sent to her as stand ins for the Lord).\n\nAll of this, of course, made her rampages about sexuality, gender identity, and pretty much anything else her church (read: her pastor husband) was against, rather ironic.\n\nEven though she was such a secret slut, she presented herself as very prim and proper in public, and she was outspoken about many morally corrupt things (in her estimation), such as a strip club in her district that she led a successful crusade to shut down, and a violent movie that she argued the city council into insisting it be made in a different city. And her current mission: to censure out of any visibility the growth of the LGTBQ-plus community... and thus protecting her (read: everyone's) children from being attracted by such sexual blasphemies.\n\n.....\n\nEnter a third principal into this story. Maddy Chase, the eldest child in her churchgoing family, who hadn't yet come out to her parents as bisexual. In fact Annabel Lee and her husband believed she was still a virgin.\n\nBut the truth was Maddy was quite the slut. She was a year older than her peers, and had already turned eighteen by the time she began her senior year. She lost her virginity to the minister of a church (and a close friend/colleague of her father's) in a nearby town. She was gangbanged on her prom night. She fucked a different guy every single night (and thus they were all both strangers and one night stands) on her three-week Europe trip this past summer... as well as enjoying her first girl-girl encounter in Paris.\n\nThus her sex life was a complete rebellion against her parents, the church, and the patriarchy. (Hardly anyone called it the patriarchy, it was simply understood by almost everyone... without any discussion... that men were in charge of everything because of Divine Right.)\n\nThen during her first year of college she really dove into exploring the pleasures of same sex play. She loved eating pussy, discovered that women ate her pussy way better than guys, that tribbing was incredibly hot, and wearing a strap-on and doing the fucking was pretty damn hot too.\n\nSo she preferred a woman going down on her to a man.\n\nShe preferred a real cock to a strap-on... although either one could get her off.\n\nShe enjoyed sucking cock and eating pussy equally... and she enjoyed swallowing cum and pussy juice equally... although if she had to choose, a gooey load of semen always went down smoothly. She always had liked salty things.\n\nShe loved fucking a pussy, and on a couple of occasions an ass... she loved being the top sometimes... it was such a wonderfully complete role reversal. Although, of course, she also loved getting fucked.\n\nIn an ideal world, she'd have a girlfriend with a cock.\n\nMaddy, wanting to piss off her mother and father, especially her mother, came home from college looking a lot different from her perky long blonde hair cheerleader look of high school. She now had a shorter, punky haircut... one with mismatching spikes spearing into the air... one that screamed how Maddy was flying her freak flag high.\n\n.....\n\nAll of which explains the backgrounds of these three women... Lucy n\u00e9e Luke, Annabeth Lee Chase, and her daughter Maddy Chase... whose lives would all collide, intertwine and change forever when the secretly transsexual Lucy encountered the secretly slutty mother and daughter on a reclusive resort island off the Pacific coast of Mexico.\n\nLucy was tanning, nursing a cocktail (her third of the day actually), enjoying the sun and silence, when a voice barked out, instantly sending an unpleasant chill up her back. \"You've got to be kidding me!\"\n\nLucy looked up to spy Mrs. Chase and her daughter standing before her. One of the women looked like she'd just discovered fire ants in her bed, while the other smiled warmly at her.\n\n\"Ms. Reid, it's great to see you,\" Maddy squealed, thrilled to happen upon her favourite teacher from her senior year.\n\n\"Just on a holiday,\" Lucy said, as Maddy (to her mother's silent horror) bent down and hugged her.\n\n\"How did you even afford this place?\" The always pretentious and happy to take a shot Annabeth Lee asked.\n\n\"All my hard work teaching and lending my support to other people's kids,\" Lucy replied, not at all intimidated by the bitch.\n\n\"Since we're all here, we should go for a drink,\" Maddy said, excited to see Ms. Reid, and knowing it would really piss of her mother only added to why it was a delightful idea.\n\n\"I don't think so,\" Mrs. Chase said disparagingly, not even trying to hide her repugnance at the presence of a teacher, and even worse, the teacher who was promoting filth in her community, at this high-end resort.\n\n\"That would be lovely,\" Lucy smiled extra wide, all the while staring down (even while looking upwards) the bitch Mom. \"It would be great to catch up with such a delightful former student and her charming mother.\n\n\"And I love what you've done with your hair,\" she added to Maddy, confident that the mother hated it.\n\n\"You were my favourite teacher, Ms. Reid,\" Maddy gushed, enjoying the sight of her Mom's cheeks going ruby red.\n\n\"Why thank you very much,\" Lucy smiled, turning her full attention to the very pretty nineteen-year-old.\n\n\"Let's go, Madelyn Heloise Chase,\" the mother said tersely, using her daughter's full name as a clear warning that she was in trouble.\n\n\"Yeah, yeah, Mother,\" Maddy responded, her emphasis on the word 'mother' the same she'd apply to 'whatever'. \"We're just checking in, Ms. Reid. Why don't you meet me at seven at La Sangria Sabroso?\"\n\n\"Sounds good,\" the teacher agreed, smiling widely at the peeved mother and the friendly daughter.\n\nMrs. Chase stalked away fuming, as Maddy waved adi\u00f3s to her teacher...a teacher she not only admired, but somewhat imitated her style.\n\nLucy waved back as she resumed sipping on her mai tai.\n\n.....\n\nLucy arrived at the cantina a few minutes before seven, since she hated being late.\n\nMaddy arrived a couple minutes after seven, following a fight with her Mom a couple hours ago, and another one as she was preparing to leave. Of course Maddy was an adult now, which she reminded her mother about a few times, had moved away from her childhood home, and now made all her own decisions... and if those decisions annoyed her mother, all the better.\n\nBoth women wore light colourful sundresses, and because it was summer and 99\u00b0 F. Lucy wasn't wearing her trademark nylons... although she'd brought a couple pairs along.\n\nMaddy pointed that out as Lucy rose to great her. \"No nylons? Aren't they your style?\"\n\n\"I brought some, but it's crazy hot here,\" Lucy said, flattered that Maddy had noticed, and had even remembered her in such detail. \"And besides, they'd be impractical, since I'm spending all of my time here barefoot.\"\n\n\"I guess,\" Maddy said, who wore them most days herself, but hadn't brought any to this remote island. \"It's a little warmer here than Boston, and you're right: I'm not wearing any shoes either.\"\n\n\"I did bring along a couple pairs,\" Lucy said, then wondered why she'd made a point of repeating that. It wasn't like there'd be any possibility of fucking an ex-student... although her seven-inch cock was hard in her panties as she admired the pretty coed.\n\n\"Good to know,\" Maddy said, sitting down. She'd always found Ms. Reid sexy, and that was even before she'd discovered her love of girls, and she'd sensed back in high school that Ms. Reid might be a lesbian, a notion that was reinforced when she went head-to-head with her mother over the LGBQT-plus club.\n\nLucy was a little flustered by the teen's tone and response, as she too sat down. She couldn't explain why, but she felt Maddy's demeanor was rather flirtatious.\n\nThey ordered drinks and food, then reminisced about when Maddy was still attending high school, and compared notes about their crazy COVID lives, and Lucy learned that Mr. Chase and the two sixteen-year-old twin Chase girls wouldn't be arriving for three more days, since the girls' baseball team had advanced to the state finals... much to everyone's surprise.\n\nMaddy then introduced a new topic by saying, \"So I guess you know my Mom really, really hates you.\"\n\n\"Yes, I am aware of that. I'm not her biggest fan either,\" Lucy shrugged, sensing Maddy's inherent approval of her attitude.\n\n\"I wouldn't worry about it,\" Maddy said. \"She hates anyone who questions her judgement, especially if they're in a lower task bracket.\"\n\n\"That isn't very Christian of her,\" Lucy joked.\n\n\"My mother is the least Christian Christian imaginable,\" Maddy responded with sharp bitterness. Although they lived in a large house, larger than most people who earned their living from the church, this summer she'd discovered the vent to her parents' room had a direct connection with the guest room in the basement, where she was staying this summer. So in the past month she'd heard everything. Her Dad's verbal sexual abuse. Her mother begging to be ass fucked. Both her minister father and her prim and proper mother using a lot of very inappropriate words.\n\n\"That's often the case,\" Lucy sighed, noticing the bitterness in Maddy's words, and having learned from her many years of suffering from other kids' abuse in high school, and more recently from ten years of advocating for the rights of sexual minorities, that the majority of people claiming moral higher ground than queer people had their own closets full of skeletons. Church-speak was very often a cover for acting morally upright (read: uptight and judgemental) in public, yet being morally corrupt in private. The irony was ridiculous, and it would be hilarious if it weren't so sad.\n\n\"Tell me about it,\" Maddy said, \"they tell me what not to do, and then they go and do it themselves. They're both hypocrites, especially my mother. She had no right to wage war against the LGBTQ-plus club.\"\n\n\"Change isn't easy for many people, especially religious types,\" Lucy said, since almost all her fights were against religious people who were stuck in a different decade, and even perhaps a former century.\n\n\"That's been my experience too,\" Maddy agreed.\n\n\"So,\" Lucy said, wishing to lighten this somewhat boring and depressing conversation, \"Tell me something you learned in college this year.\"\n\n\"May I be frank with you?\" Maddy asked. \"Even if it isn't something academic?\"\n\n\"Of course,\" Lucy said. \"Do you mean a life-changing experience?\"\n\n\"Exactly! I discovered I like girls just as much as I like boys.\" Maddy revealed, deciding to throw it out there, along with a not so subtle ulterior motive.\n\nLucy choked on her drink, some of it even dribbling down her chin.\n\nMaddy, loving the look of surprise on her former teacher's pretty face, aggressively stuck her bare foot between Lucy's legs to surprise her even further, but was herself surprised.\n\nLucy felt the teen's bare foot pressing against her cock. Her hard cock. Yes, it was certainly a surprise. Yet she felt more compelled to explain things than to push the foot away. \"In case it isn't obvious what your foot is feeling. I'm trans.\"\n\n\"You certainly are,\" Maddy said, her foot still resting against her ex-teacher's hard cock... which surprised her at first, but that emotion quickly shifted to excitement because of the possibilities... since as has been said, a hot woman equipped with a living cock was her fantasy fuck.\n\n\"I initiated my transitioning a single day after I turned eighteen,\" Lucy explained, noticing Maddy wasn't disturbed or repelled by the discovery. In fact her foot was still pressed against her cock, which was still hard.\n\n\"So you've always had a penis?\" Maddy asked, completely fascinated by this secret she'd just accidentally discovered. She'd been hoping to seduce her ex-teacher and enjoy some hot lesbian fun... but now the possible enjoyment had increased exponentially... while her foot still remained resting against the hard cock.\n\n\"Since the day I was born, and likely for a while longer,\" Lucy said, \"although I'm not sure about the details since I'm not a biologist,\" enjoying the pressure on her cock, although Maddy's foot hadn't begun moving since it had discovered her secret, and she hoped it would.\n\n\"Well, that is very intriguing,\" Maddy said, granting the unspoken wish by slowly beginning to rub her foot up and down the hard cock.\n\n\"I don't think your mother would approve of what you're doing,\" Lucy smiled playfully.\n\n\"I don't think the hypocritical bitch would approve of what I'm about to do next either,\" Maddy added, as she pushed firmly against Lucy's surprise cock before drawing her foot away. She briefly looked around, saw no one was looking their way, and quickly crawled under the table.",
        "Lucy's eyes went wide as she felt hands move up her legs along with the skirt of her sundress, and then felt her cock pulled out of her panties.\n\nMaddy was disappointed by how dark it was under the table because of the oversized tablecloth, although that meant it was unlikely she'd be caught. But she couldn't see her ex-teacher's cock at all clearly.\n\nLucy whispered, \"You probably shouldn't be doing thaaaaaat,\" just as she felt Maddy's mouth encompassing the head of her cock.\n\n\"You're right. I shouldn't be doing it unless it's between two consenting adults. Do you consent, Ms. Reid?\"\n\n\"Oh absolutely, knock yourself out! And if I'm lucky, you might knock me out too!\"\n\nWith enough said, Maddy started bobbing on the hard cock, impressed by its width and decent size... she estimated seven inches... and with its slight up curve it would really rock her world... inside her pussy or ass (just like her mother, she liked a little dirty sodomy, but unlike the two-faced harridan, she never went on about what a sin it was).\n\nLucy pressed both her hands against the tabletop as she received an under the table blow job. It had been a couple months since she'd ass fucked a fellow trans girl... the librarian at another school who was really freaky... Lucy having fucked her in a back room of the library on more than one occasion, even though it was open... the librarian loved to take her facial and then rub the cum into her face until it was almost invisible and return to work.\n\nBut this... right out of the blue... polite discussion one moment, a slight foot job the next moment, immediately followed by her cock being sucked... this was wild!\n\nUnbelievable!\n\nFucking amazing!\n\nAnd to top it off, Maddy was an amazing cock sucker. Her Daddy's minister friend had taught her how to worship a cock. How to deep throat. How to bestow pleasure by holding a cock balls deep in her mouth for up to a minute. How to stand out from the crowd by sucking on balls. How and why to save up and use extra saliva. To finger an ass while sucking a dick. To swallow. To take facials. To get face fucked. To suck cock in a dozen different positions.\n\nEven though in public the man bellowed on about sin just as much as her father did, she'd also sucked the man's cock under his desk during premarital counseling sessions; sucked his cock from under the podium while he lectured against the sins of the flesh; sucked his dick while he discussed theological nuances on the phone with her Dad (interspersed with some jokes that were so filthy that even her face went red); and she'd even sucked his dick in a public bathroom during his son's baseball game.\n\nFor Maddy, the thrill of perhaps getting caught was always an extra rush, and as she sucked her ex-teacher's big cock, her pussy was getting very, very wet.\n\nThe waitress came to the table and asked, \"How is everything, ma'am?\"\n\n\"Amazing,\" Lucy expressed her enthusiasm to the waitress and to Maddy.\n\nMaddy sucked faster and slightly less quietly, since someone was nearby.\n\nThe waitress left, and Lucy closed her eyes, tried to relax and just enjoy this amazing blow job.\n\nBut then, just as Lucy was close to busting a nut, the shrewish voice of Mrs. Chase broke her sexual reverie by demanding loudly, \"Where is my daughter?\"\n\n\"T-t-the bathroom,\" Lucy stammered, her eyes going wide and her guilt likely easy to see.\n\n\"I can't believe you took my teenage daughter on a date,\" Annabeth said with a glare. \"I'll have you fired.\"\n\n\"First of all, she's the one who invited me, and secondly she's an adult. And besides, it's just dinner and catching up,\" Lucy said, anger bubbling up inside her even as pleasure did too.\n\n\"Whatever!\" Mrs. Chase stormed away and Maddy sucked faster, hearing her Mom's self-righteous voice adding to her excitement.\n\n\"Your Mom, your Mom,\" Lucy moaned frantically but softly.\n\n\"I'm not coming out until you've fed me my dessert,\" Maddy insisted, then devoured the cock again.\n\n\"Oh fuck, Maddy,\" Lucy groaned, this hungry and obviously experienced teenager totally driving her nuts.\n\n\"Mmmmmmm,\" Maddy moaned, bobbing hungrily on the seven-inch cock.\n\nThe deep throat bobbing... the vibrations from the 'mmmmmm' being conveyed through Maddy's lips... added to this surreal situation... had Lucy nearing eruption. Added to the idea of coming in Mrs. Chase's daughter's mouth was extra encouragement. \"Then don't you dare stop, Maddy, I'm about to explode a load of creamy dessert right into your pretty mouth!\"\n\nMaddy continued bobbing using the extra saliva trick, and a few more deep throat hungry bobs later, she felt the promised warm, gooey dessert explode into her mouth.\n\n\"Fuuuuck,\" Lucy moaned, as she shot rope after rope into her ex-student's very experienced mouth.\n\n\"She's not in there,\" Mrs. Chase said, her arms crossed. Fortunately she only seemed belligerent about her daughter's whereabouts, but oblivious to Lucy's orgasm, which she must have seen, although obviously hadn't watched.\n\n\"Then I don't know what to tell you,\" Lucy said, as she finished depositing her load in the so-called missing innocent's mouth.\n\n\"I'd better not see you with her again, or else,\" Mrs. Chase threatened.\n\n\"First, Annabeth Lee,\" Lucy began sarcastically, taking courage from the blow job, the hints that this bitch wasn't as morally upright as she pretended to be, and their being here on holiday, all adding to her brazen approach.\n\n\"It's Mrs. Chase,\" Mrs. Chase corrected her tersely.\n\nLucy ignored the correction and said, \"First, Annabeth Lee, I'm pretty sure your daughter is legally an adult. Both back home, and here in Mexico.\"\n\n\"Yes, but...\"\n\n\"Don't interrupt,\" Lucy interrupted snappily.\n\nAnnabeth was shocked by this lowly teacher's rude behaviour, and yet she remained quiet.\n\n\"Second, I'm here on holiday, so I don't need to put up with being nagged by a bitch like you. I've already had to suffer through almost ten months of your inane bullshit,\" Lucy continued, winging it on a sexual high and still enjoying Maddy's surreptitious mouth slowly nursing her cock.\n\n\"I'll have you fired,\" she threatened again, her rage growing.\n\n\"On what grounds?\" Lucy asked.\n\n\"Insubordination.\"\n\n\"You're not my employer, and you don't even work for the school,\" Lucy pointed out, even though she knew this woman had a lot of power. \"You're no more than a bored and likely sexually frustrated housewife who wants to make everyone else as miserable as you are.\"\n\n\"I've never...\" Annabeth gasped, not accustomed to being talked back to like this by anyone.\n\n\"Never had much sex? Well, that would be a problem, wouldn't it?\" Lucy smirked, as Maddy listened from underneath the table, cock still in her mouth, cum warm in her belly, enjoying this conversation thoroughly, and turned on even more by Lucy's strong will of Lucy.\n\n\"Do not see my daughter anymore,\" Annabeth barked, and stormed off.\n\nAfter a moment, and only once the bitch was totally out of sight, Lucy announced, now wondering if she'd gone too far, \"She's gone.\"\n\nMaddy bobbed one more time, crawled out from under the table, and sat back in her chair. \"Thanks! That was delicious.\"\n\n\"I can't believe I just did that,\" Lucy said.\n\n\"You? I did most of the work,\" Maddy shrugged playfully.\n\n\"Okay, fair enough: I can't believe you did that,\" Lucy agreed. \"But I also can't believe what I said to your mother.\"\n\n\"I really loved when you implied she never gets any dick,\" Maddy said. \"And she didn't dare admit to you that she does.\"\n\n\"I did imply that quite openly, didn't I?\" Lucy sighed. \" Which means I'm so fired.\"\n\n\"Trust me, you're not getting fired at all,\" Maddy said.\n\n\"No? How?\" Lucy said. \"Your mother wields a lot of influence in the school system, and she never hesitates to use it if she's got it in for somebody.\"\n\n\"Yes, that's true,\" Maddy agreed. \"But I know all her secrets.\"\n\n\"Do tell,\" Lucy said.\n\n\"All in good time,\" Maddy smiled, formulating a very wicked plan. \"But first, I think we should go dancing.\"\n\n\"Oh, you do, do you?\" Lucy asked.\n\n\"Yes, I need to burn off some of the calories I just gained from my dinner,\" Maddy said. Then with a wicked smile, \"And from my dessert.\"\n\n\"I too could use some dessert,\" Lucy replied, enjoying the obvious innuendo, still stunned by what had just transpired, but deciding to go along with it. Maddy was hot, and legal, and her enemy's disloyal daughter... and those three qualities made her the perfect fuck.\n\nThey headed out and spent the next three hours drinking and dancing. Sometimes with guys, sometimes with each other... and as the night progressed, the alcohol loosened their already faltering inhibitions and they danced exclusively with each other... and their dancing was raw, sexual and liberating.\n\nEventually they left and found their way to the beach and strolled along, getting their bare feet slightly wet each time the remnants of a new wave sluiced up the sand to them, while Lucy told Maddy about her teenage years, how she'd always felt she was a girl, and was even more confused because she liked girls. She then described her take on her hormone treatments, and how she eventually felt she was the person she'd always wanted to be.\n\n\"So have you ever been with a guy?\" Maddy asked.\n\n\"A few,\" Lucy replied, or admitted actually, having learned she was a sexual enigma. She liked sucking cock, but she didn't like the taste of cum. She enjoyed getting ass fucked, but she preferred to be the one fucking the pussy or ass. Yet what she enjoyed the most was eating pussy. She couldn't explain it fully, but for starters it was so intimate, so tasty and such a sexual rush... and she wished she'd been brazen enough to crawl under the table earlier tonight and return the favour.\n\n\"We don't have a tablecloth, or even a chair, but it's pretty deserted out here,\" Maddy pointed out, and while still strolling, she took her former teacher's hand in hers.\n\n\"It is, isn't it?\" Lucy realized, warmth coursing through her from just having her hand held. Deep down, Lucy was a romantic... she could fuck the shit out of someone and love doing it... but like all girls, she particularly wanted to find love.\n\n\"I mean we're the only ones around,\" Maddy pointed out, stopping them both and turning to face Lucy.\n\n\"I can see that,\" Lucy smiled, as Maddy squeezed her hand.\n\n\"So have you ever had sex on a beach?\" Maddy asked.\n\n\"Can't say that I have,\" Lucy said, wondering whether the girl was inviting her not only to have sex, but to do it right here and now on the beach.\n\n\"Me neither,\" Maddy said, as she pushed her gently against a waist-high boulder and kissed her.\n\nLucy melted into the kiss, surprised by its intensity.\n\nMaddy slid her tongue inside Lucy's mouth and Lucy responded eagerly, sliding hers into her former student's.\n\nThe kiss lasted two, perhaps three minutes before Maddy, whose pussy had been constantly on fire ever since her shocking discovery of what was lurking underneath her ex-teacher's dress, broke the kiss and said point blank, \"I want you to fuck me.\"\n\n\"I'd love to. But first I want to taste you,\" Lucy countered, having become an amazing pussy licker during her sexual journey. Sure, she'd sucked some cock, but what she actively craved was pussy. She'd read books, participated in discussion forums and watched hundreds of lesbian videos (both back when she was physically a guy and ever since). She loved the smell of pussy. She loved the taste of pussy. She loved hearing a woman moan while she dined on her sweet pie. And of course she loved pussy cum in full flood.\n\n\"Mmmmmm,\" Maddy moaned, just knowing Lucy would have a magical tongue like most women she'd played with.\n\nLucy stood up and looked around. It was dark and extremely secluded. Lust overriding paranoia, she turned her ex-student around, gently draped her over the large rock and lowered herself behind the spunky teen, who generously spread her tanned legs.\n\n\"Let's get rid of these,\" Lucy said, as she brought her hands to Maddy's panties.\n\n\"Yes, silly me for wearing them in the first place,\" Maddy smiled, as she lifted up her ass and watched her former teacher pull her panties down... it was all so erotic, surreal, and fucking hot as fuck.\n\nLucy pulled them off and brought them to her nose. \"Mmmmm, you smell delicious.\"\n\n\"Yeah? Then wait until you taste me,\" Maddy said, having been told on many occasions she had a delicious pussy... although only once by a man.\n\n\"Well, these are nice and wet,\" Lucy said, and she stored them in the pocket of her sundress... Lucy always having pockets in her dresses... although this was the first time she'd used one for an ex-student's soiled panties.\n\n\"Pockets?\" Maddy asked.\n\n\"Always,\" Lucy smiled, as she leaned between the teen's legs and admired her pussy, with just a patch of pussy hair that helped trap the erotic bouquet for her.\n\n\"Lick me, Ms. Reid,\" Maddy purred, as she looked down at the pretty teacher on her knees before her.\n\n\"Indeed I shall, Ms. Chase,\" Lucy replied, both of them savouring that she used to be her student and she her teacher.\n\nThe teacher leaned forward and parted the pretty pink pussy lips.\n\n\"Oh yes, Ms. Reid,\" Maddy moaned, a rush of adrenaline coursing through her the moment her ex-teacher's tongue contacted her fevered pussy.\n\n\"You taste delicious,\" Lucy said, knowing many women were self-conscious about their taste, usually because some insensitive man had told them it tasted like fish.\n\n\"I know,\" Maddy said, not being conceited, just aware of her sweet tasting, addicting pussy. Her roommate often begged to eat it, even waking her up in the middle of the night by licking her; her feminist history professor had her come to her office every Tuesday after class to eat her out; and Mrs. Jacob, the dean's wife, texted her to come over to her house for 69's once or twice a week.\n\n\"Just stating the obvious,\" Lucy smiled, as she wriggled her tongue up and down the sweet tasting pussy.\n\n\"That feels really good,\" Maddy said, enjoying the teacher's tongue.\n\nAnd... for three or four minutes Lucy licked up and down, she wriggled her tongue back and forth, she swirled it like a tiny tornado... knowing variety would drive the girl crazy, while slowly invoking her inevitable orgasm.\n\n\"Oh God, Lucy, you're fucking driving me wild,\" Maddy cried out. She'd had had her pussy eaten a lot in the past year, by both inexperienced and experienced pussy lickers... young (a high school senior in her Daddy's church during Christmas break, her name was Eve because she was born on Christmas Eve, and well... Maddy gave her a great Christmas present on her birthday) and oldish (the oldest a seventy-seven-year-old grandma she'd met in an Uber of all things, and well...), but Lucy's oral pleasuring was unlike any of those.\n\n\"I want you to come all over your teacher's face,\" Lucy ordered as if she still was Maddy's teacher, as she moved the action up to the clit she'd been neglecting this entire time. She slid two fingers inside the very wet pussy. Lucy was not only an amazing pussy licker, but she also had the gift of finding a gal's g-spot; and knowing Maddy was close, she went for a double kill by flicking the clit while tapping on the g-spot.\n\n\"Oh my mother fucking God,\" the minister's daughter moaned loudly, as her clit was attacked and her g-spot, which had been stumbled across on a couple other occasions, was beaten deliberately and knowledgeably like a drum... instantly setting off fireworks both inside her body and her mind as she came.\n\nLucy pulled her fingers out and drank the nectar from this fountain of youth, the cum flooding out of the teen like a shattered faucet.\n\n\"Oh, my fucking God,\" Maddy repeated, the orgasm so intense her legs stiffened and she quaked uncontrollably.\n\n\"Such yummy cum,\" the teacher purred as she lapped it up, knowing that was far from the most profound sentence she'd ever constructed.\n\nFor another minute Maddy basked in her orgasm before she pushed Lucy onto her back in the soft sand. Maddy, desperately lustful for cock, pulled Lucy's panties down and straddled her male organ. \"That was wonderful! But now I need you inside me so bad!\"\n\nLucy watched the beautiful teen in the moonlight as she straddled her hard seven-inch throbbing cock and dropped herself onto it.\n\n\"Oooooooh, fuck,\" Maddy moaned as she began riding the cock.\n\n\"So good, baby,\" Lucy moaned, as with shock and awe, she watched the teen ride her ... still a little overwhelmed that she was having sex with Annabeth Lee Chase's daughter, and no matter who her mother was, the girl was adorable!\n\nOut in the open.\n\nHere in a foreign country\n\n\"Oh fuck, that curve on your cock really hits the spot,\" Maddy moaned while she slowly rode Lucy.\n\n\"Happy you like it,\" Lucy smiled. \"But I can't take any credit since I've always had it, even before it mattered.\"\n\n\"Mmmmmmm,\" Maddy purred, as she continued slowly riding Lucy, the beach and ocean totally dark except for a partial moon.\n\nFor a couple of minutes there was only the sound of the waves and the soft moans emerging from both women.\n\nLucy, even though she was thoroughly enjoying this slow cock milking, really wanted to fuck Maddy. The girl was so sexy. An ex-student. The bitch Mrs. Chase's partially estranged daughter. And... yet... there was something else going on... something she couldn't explain... somehow... this felt like more than just sex. She said, \"I want to fuck you.\"\n\n\"You want to fuck your ex-student?\" Maddy asked.\n\nLucy leaned up and kissed her tenderly. \"No, I want to fuck you.\"\n\n\"Mmmmmm,\" Maddy purred. Tonight's explorations had begun a little out of curiosity, a little out of spontaneity, and a lot to piss off her Mom... yet they'd evolved into something more than just a wild sexual encounter... which she'd had a lot of in the past year. \"How do you want me, Ms. Reid?\"\n\n\"First of all baby, we needn't be at all formal with each other; please call me Lucy,\" Lucy said as she lifted Maddy up in the air, her cock still lodged deep inside her.\n\n\"Yes, Luuuuucy,\" Maddy said, feeling the cock somehow wedge itself even deeper into her, and in awe of this pretty woman's strength.\n\n\"Secondly,\" Lucy said, as she slowly lowered her onto the soft sand, \"I want to look into your lovely, expressive eyes while I fuck you.\"\n\n\"Mmmmmmm,\" Maddy moaned, as she fell against the warm sand, looking up into her ex-teacher's eyes.\n\nLucy brought her hands to Maddy's wrists, pulled them over her head, and began fucking her.\n\n\"Ooooooh, I love a woman who knows what she wants,\" Maddy moaned, the angle of Lucy's cock stimulating her pussy really good.\n\n\"I want you,\" Lucy said, loving this position. She typically used this position when she was really going to pound a girl... but this time it was so she could admire Maddy and watch her pretty face enjoying her cock.\n\n\"I want you too,\" Maddy moaned, feeling a connection stirring with her former teacher.\n\n\"You're so beautiful,\" Lucy admired, as she slowly pumped her seven-inch cock in the tight pussy.\n\n\"So are you,\" Maddy said, as for the first time in her sex life she didn't feel she was getting fucked, but she was being made love to. Which confused her a little... she was accustomed to feeling very little attachment with her partners.\n\nFor a couple minutes, again the only sounds were the waves crashing on the shore and Lucy and Maddy's soft sexy moans. Lucy bent her head down to kiss her neck, tug on her ear, and finally kiss her long and passionately.\n\nMaddy wrapped her legs around the older woman, pulled her deeper into her, closer to her, and broke the kiss to beg, \"Harder, baby, fuck me harder!\"\n\nLucy obliged, accelerating her pace while she watched the lust in Maddy's eyes, the flush in her cheeks, and her pursed lips.",
        "\"Oh, fuck yes, Lucy, so good,\" Maddy moaned, her orgasm rising, as she held Lucy almost desperately, as close as she could.\n\n\"Come for me, baby, I want to see... and to feel... you come,\" Lucy said, having always loved seeing the complete vulnerability of a woman when she came. It was the hottest thing ever! She also loved the feeling of a woman coming on her cock, which usually triggered her own orgasm.\n\n\"Oh yes, really give it to me.\" Maddy moaned, her orgasm imminent as she closed her eyes and allowed the inevitable rapture to take hold of her.\n\nLucy watched Maddy's facial expressions as she slammed into her hard, wanting to get her off, and to take in her unique orgasmic face and listen to her unique orgasmic sounds (every woman has her own unique orgasmic faces and sounds).\n\nMaddy's orgasms always rode in on waves, and she repeated, \"Oh God, oh God, oh mother fucking God!\"\n\nLucy was slightly amused as she listened to this minister's daughter using the Lord's name in vain during her rapture. Maddy, as expected, looked so sexy and vulnerable as she came.\n\nAs usual, feeling her cock surrounded by pussy cum and feeling Maddy's convulsions on her cock, Lucy felt her own orgasm rising quickly. \"I'm going to come real soon,\" Lucy panted, trying to hold on and last as long as she possibly could.\n\n\"Come inside me baby, I want to feel you explode in my pussy,\" Maddy moaned, keeping her legs tightly wrapped around her sexy teacher.\n\n\"You sure?\" Lucy asked.\n\n\"Yes, yes, I'm on the pill, and I want to feel you shoot inside me,\" Maddy said, looking up into Lucy's face and indeed wanting to feel her cum explode inside her, something she'd only allowed a couple times in her life, but desperately needing to feel it now.\n\n\"Okaaaaaaay,\" Lucy grunted, unable to hold it inside herself anymore, and she exploded inside her pretty ex-student.\n\n\"Yesssssss,\" Maddy moaned, feeling the warm cum fill her up... having now taken loads in two of her three holes tonight... and planning to fulfill a trifecta at least once during this trip... she'd decided that tonight was only the beginning.\n\n\"So good,\" Lucy moaned, as she continued depositing her load in Maddy... just coming and coming!\n\n\"Mmmmmm,\" Maddy agreed as Lucy slowed down... completely spent from the two ball-draining workouts.\n\n\"You're amazing,\" Lucy said, looking down at a red-faced Maddy, who was wearing a huge smile on her face.\n\n\"Back at ya,\" Maddy said, leaning up and kissing Lucy.\n\n\"Shit, there's lesbians out here,\" a man's voice said ungrammatically.\n\n\"Just keep fucking moving, buster,\" Lucy ordered.\n\n\"Whatever,\" the guy said, clearly drunk.\n\nAs he staggered away, Lucy pulled out, stood up, helped Maddy to her feet and drew her in for yet another kiss.\n\nThey kissed for a couple of minutes, Maddy feeling a little bit of cum leaking out of her.\n\n\"So now what?\" Lucy asked.\n\n\"Would you like to join us for breakfast in our suite tomorrow?\" Maddy asked.\n\n\"It's already tomorrow,\" Lucy pointed out.\n\n\"Okay, would you like to come to my suite later this morning and have breakfast with my Mom and me?\" Maddy reworded, as she took Lucy's hand and they started wandering towards the water.\n\n\"How would your Mom feel about that?\"\n\n\"She'll hate it of course,\" Maddy said offhandedly, as they reached the frothy water gliding up onto the sand.\n\n\"I don't think I need to put up with her drama on my holiday.\"\n\n\"You may wish to reconsider. Want to fuck her?\" Maddy asked.\n\n\"Pardon?\" Lucy asked, hearing the question, but surprised.\n\n\"I'm serious,\" Maddy said. \"My Mom is a complete bitch as you very well know, but it's all just a smoke screen for who she is in the bedroom.\"\n\n\"Really?\"\n\n\"Yeah,\" Maddy said, telling Lucy something she'd never told anyone... but although this had only been one great night... she'd known and learned to trust this woman for over a year as her teacher... and tonight she felt a certain kismet, a certain connection that transcended logic, yet made her heart beat and her pussy leak. \"For instance, she's a completely submissive ass slut.\"\n\n\"No way,\" Lucy gasped, even though from some of her experiences and a lot of her reading of erotica (she particularly loved lesbian and transgendered erotica and porn) had taught her that often the more powerful the woman, or the bitchier the woman, the more submissive and kinky she was behind that fa\u00e7ade of propriety.\n\n\"Oh yeah, I have tons of audio where she's begging to be ass fucked, and her language is always so nasty,\" Maddy revealed, pulling out her phone to see it had collected over a dozen missed calls, all from her mother, plus lots of texts... mostly from her mother. She'd shut the phone completely down as they left the restaurant.\n\n\"Figures,\" Lucy said, shaking her head... she detested people, especially women, who acted one way in public, yet didn't actualize it at home.\n\n\"Yeah, apparently 'Mommy Dearest' has been calling and texting me all night.\"\n\n\"You should probably call or text her back and let her know you're alive,\" Lucy suggested.\n\n\"Yeah, I probably should,\" Maddy said, as she pressed the contact 'Bitch' on her phone, and switched it to speakerphone for Lucy's benefit.\n\nThey walked on the beach, hand in hand, the waves hitting their ankles as Maddy said casually, \"Hi, Mom. You called.\"\n\n\"I called? I've been calling and calling endlessly! Where are you? Where have you been?\" Annabeth Lee demanded, both relieved and angry at once.\n\n\"After dinner we went out dancing, and now we're taking a stroll on the beach,\" Maddy said, giving Lucy's hand a squeeze.\n\n\"Well, get your ass back to our suite right now,\" Annabeth demanded.\n\n\"We're making our way there right now,\" Maddy said, her casual tone at complete odds with her mother's aggressive one.\n\n\"We? Are you still with... with her?\" Mrs. Chase asked, using a clear note of disgust when she said the word 'her'.\n\nMaddy said, \"Yes, I'm still with Lucy. She's an amazing woman.\"\n\n\"Don't even start with me, young lady,\" The mother warned.\n\n\"Mother,\" Maddy said. \"I'm nineteen now. I'll hang out with whomever I want to. And I won't play along with your phoney Christian agenda.\"\n\n\"We'll talk about this in the morning,\" Annabeth said tersely.\n\n\"I'll be home soon,\" Maddy said.\n\n\"I'm going to sleep, so be quiet when you come in,\" Annabeth said, inwardly relieved her daughter was okay, and deciding to deal with her disrespect in the morning.\n\n\"I will,\" Maddy said, hanging up. \"I guess Mommy's mad at me.\"\n\n\"I could tell. And imagine how much madder she'd be if she knew what I just did to her sweet, precious and very obedient daughter,\" Lucy smiled.\n\n\"Yeah! And you haven't even plugged my asshole yet.\"\n\n\"You like it in the ass?\" Lucy asked, her spent cock resurrecting.\n\n\"I fucking love it,\" Maddy admitted. \"And your cock would fucking feel so good ramming me from behind!\"\n\n\"I think that can be arranged,\" Lucy said. Maddy seemed to be just as kinky as she was.\n\n\"May I ask you a blunt question?\" Maddy asked.\n\n\"Sure,\" Lucy nodded. \"I think we've established enough trust between us to allow blunt.\"\n\n\"Oh, shoot! But first, I meant to play this for you,\" Maddy said, pulling her phone back out and pressing Play.\n\n\"Yes, hammer my shit hole, sodomize me, fuck my asshole,\" Mrs. Chase begged, her voice clearly recognizable.\n\n\"Wow,\" Lucy said, her hard cock flinching as it waggled around tenting her skirt without her panties.\n\n\"Yeah, and as far as I can tell, she only takes it in the ass.\"\n\n\"Really?\"\n\n\"Yeah, I've listened in on them a couple dozen times, and it's always the same,\" Maddy said.\n\n\"You sinful slut, you're always tempting me with your whore hole,\" Mr. Chase sneered.\n\n\"Shit.\" Lucy said. \"That doesn't sound very Christian!\"\n\n\"No, the religious zealots are always the dirtiest fuckers,\" Maddy said, her tone again sounding resentful.\n\n\"So I'm learning,\" Lucy said, amused by all of this.\n\n\"So do you want to sodomize my mother?\"\n\n\"There have been occasions when I've imagined shutting her up with my dick.\"\n\n\"But not destroying her ass with your big cock?\"\n\n\"Well, I can't claim that thought hasn't also crossed my mind a time or two,\" Lucy smiled, having imagined drilling Annabeth Lee's ass while she stepped on her head to hold her down.\n\n\"It wouldn't take much to get her bent over and begging for it,\" Maddy said, the idea of watching her bitch Mom get sodomized quite a turn on. Especially if her sodomizer was one of those queer people she constantly railed on against. Lucy being transgendered was even more deliciously out there than if she were only gay!\n\n\"I can't imagine that happening,\" Lucy said. \"But I can also imagine it really being a blast!\"\n\n\"Mmmmmmm,\" Maddy said, surprisingly horny again... well, not all that surprising, truth be told.\n\n\"So what were you going to ask me before you began tempting me with your mother's ass?\" Lucy asked.\n\n\"Right,\" Maddy laughed. \"I get distracted easily.\"\n\n\"So what's your question?\"\n\n\"Well, I have a few of them.\"\n\n\"Ask away,\" Lucy said, curious what the questions were.\n\n\"These will be rather personal,\" Maddy asked, now a little unsure whether to ask them or not.\n\n\"You've sucked my cock under the table inside a crowded restaurant, we've made love on the beach and didn't even pause when some drunk wandered by, and you've offered to arrange for me to ass fuck your Mom,\" Lucy listed off their wild transgressions so far. \"I think we've swung the getting personal door wide open by now.\"\n\n\"Okay, I guess you're right,\" Maddy said. \"So as a transgendered person, do you like both guys and girls?\"\n\n\"I consider myself a pan switch,\" Lucy answered.\n\n\"Sorry,\" Maddy said. \"I should probably know what a pan switch is, but I don't.\"\n\nLucy smiled as they stopped walking and sat down on a bench together, still on the deserted beach. \"It's okay,\" she said. \"It takes a while to catch up with all the new lingo, especially when it keeps evolving all the time. Pan sexuality isn't much different from bisexuality. The difference being I like being with a man or a woman, which of course is bisexual, but I'll also have sex with a transgendered person. Hence the word 'pan', as in a 'panorama', which is open and expansive.\"\n\n\"Oh, okay,\" Maddy nodded. She then leaned in and kissed Lucy, \"So I guess tonight I've become pansexual as well.\"\n\nLucy kissed the younger girl back, and then agreed, \"Considering the company you're keeping, I guess you have.\"\n\n\"Do you suck cock?\" Maddy asked.\n\n\"Yes, I certainly do suck cock,\" Lucy nodded. \"I love sucking cock, and I love eating pussy. They're two of the great perks of being pansexual.\"\n\n\"I see,\" Maddy said, thinking how hot it would be to watch Lucy sucking a cock.\n\n\"But there's more. If I may be completely honest with you, I'm a switch. So I can be submissive to some people, and dominant with others. And when I suck cock, I love getting overpowered and being face fucked,\" Lucy revealed, leaning in to kiss Maddy. She then whispered in her ear, \"I especially love to be face fucked by a hot girl wearing a big, fat strap-on.\"\n\n\"Mmmmmmm,\" Maddy moaned, those nasty words making her pussy leak again. \"I have a couple of big strap-ons back home.\"\n\n\"Too bad they're not here on this island,\" Lucy said, kissing Maddy's neck. \"I'd let you fuck any of my holes you liked.\"\n\n\"So you take it in the ass too?\" Maddy asked, although that was pretty obvious, since she'd just said as much.\n\n\"Yeah, I love it in my ass,\" Lucy admitted, although she hadn't taken a cock of any sort except for a new toy she'd bought recently (a bad dragon) for months. \"I'm kind of a power bottom. I can have a lovely time taking some really big dicks.\"\n\n\"I see,\" Maddy smiled, already imagining ass fucking this hot transgendered person.\n\nLucy, sharing all her sexual links with her ex-student, trusting her implicitly, even though the girl's mother was her sworn enemy, \"I really love a dick up my ass while I'm on my back, so I can look up at the person pounding my ass and talk to them.\"\n\n\"I've never been ass fucked on my back, nor have I ever ass fucked anyone on their back,\" Maddy said, thinking it was a pretty hot idea.\n\n\"So, you like ass fucking people too?\" Lucy said.\n\n\"Yeah, I guess I'm a switch too,\" Maddy said. \"I can take a cock in my mouth, pussy or ass, or give it to a person all those ways too. Although I suppose in most situations I'm a bit more of a dominant than a submissive.\"\n\n\"Then you can dominate me anytime you want,\" Lucy smiled, kissing her again.\n\n\"Do you fuck guys in the ass?\" Maddy asked, completely captivated by this not so sweet and innocent teacher.\n\n\"Yeah, I'm constantly astonished at how many straight married men have a secret desire to suck cock and to get fucked.\"\n\n\"That's so hot,\" Maddy said, imagining Lucy pounding any of her Dad's Bible-thumping parishioners in the ass. Or even her Dad. That would be so hot!\n\n\"Yeah, I really love hearing a macho guy moaning like a bitch in heat,\" Lucy said. \"I've fucked a couple of football players, and they squeal like little sluts when I'm pounding them from behind.\"\n\n\"You nasty bitch,\" Maddy said affectionately, thinking of some of the wild adventures they could have together.\n\n\"One of my favourite things is to cum in a guy's ass so he can learn firsthand what it feels like to be a girl.\" Lucy continued, telling Maddy things she'd never told anyone. It was very liberating.\n\n\"You can come in my ass,\" Maddy smiled.\n\n\"I'm looking forward to that,\" Lucy said, having fucked cis women (women who retain the sexual identity they were assigned at birth) and trans people... of both persuasions... in the ass as well.\n\n\"So,\" Maddy asked, kissing Lucy as she did, \"Do you... have... a favourite?\"\n\n\"What do you mean?\"\n\n\"Boy, girl, transgendered?\" Maddy asked, assuming a guy who transitioned into a girl would prefer boys.\n\nLucy, as if she were able to read Maddy's mind, replied, \"Although many boys who transition do it because they want to have sex with boys, I did it because I wanted to be a fulltime girl, no matter what I was doing. Truth is, I prefer girls to boys. So in case it matters, you belong to my favourite category.\"\n\n\"I see,\" Maddy smiled, happy with that answer.\n\n\"Yeah,\" Lucy continued. \"I can get harder and stay harder when I'm with a cis woman or another trans girl than I can with a boy.\"\n\n\"Cis woman?\"\n\nLucy explained, \"Someone who was born a girl, and is now psychologically a woman and thinks of herself as such no matter if she's gay or straight. The same logic applies to cis men.\"\n\n\"So I'm a cis woman?\"\n\n\"You're a sexy as fuck cis woman,\" Lucy replied, kissing her again. Yes, she loved getting blown by Maddy, and loved fucking her, and loved sharing all her secrets with her, but she was also loving just kissing her. She felt a connection to her, and it was growing stronger the longer they spent together... which she knew was irrational, since Maddy was an ex-student, and also the daughter of the school board chair who already hated her, and the girl was almost a decade younger than she was... so that could be as three strikes against a possible relationship... yet she felt drawn to her nonetheless.\n\n\"And you're just a sexy as fuck whatever you are,\" Maddy said, as she straddled her. \"And I need you inside me again right fucking now.\"\n\nLucy pulled up her dress and watched as the pretty teenager faced away from her and lowered her pussy onto her very hard cock.\n\n\"I should mention my favourite thing to do is licking pussy or ass,\" Lucy moaned as Maddy began to ride her.\n\n\"Mmmmmmmm,\" Maddy moaned, both because she had a cock back in her pussy and because of Lucy's words.\n\n\"Yes, I can eat a pussy or an ass for hours,\" Lucy moaned, as Maddy wasn't really riding her cock, but was more like grinding.\n\n\"Oh fuck, I love your big cock,\" Maddy moaned, the up curve of the cock head driving her wild in this position.\n\n\"You can ride it any time you want,\" Lucy moaned.\n\n\"Be careful,\" Maddy moaned. \"I may take you up on that offer.\"\n\n\"I'll be your submissive cunt licker, your dominant face fucking, pussy pounding and ass drilling dominant, your intimate lover, or even your partner in crime if and when we play the field,\" Lucy said, offering far more commitment to Maddy than she usually did.\n\n\"Like double teaming a guy, seducing a girl, or ass fucking my Mom?\" Maddy asked, each of those things she'd love to do with this amazing enigma of a woman.\n\n\"Anything you want, baby,\" Lucy said, as she reached around and cupped the teen's tits.\n\n\"Next time we fuck, we need to do it in a bed where we can get naked,\" Maddy said.\n\n\"Yes, and where I can eat your pussy and your asshole,\" Lucy said, dying to eat this cute girl's butt.\n\n\"You're such a nasty hottie,\" Maddy moaned, everything Lucy said turning her on.\n\n\"I'd ass fuck your Mom, and then make her eat my sweaty asshole like a submissive lesbian pet would eat a pussy,\" Lucy said wickedly.\n\n\"Oh fuck, more,\" Maddy moaned, beginning to grind harder.\n\n\"We could double team that hot waitress from earlier,\" Lucy suggested.\n\n\"Oh, she was hot,\" Maddy agreed, imagining the cute waitress eating her pussy while Lucy pounded her from behind.\n\nLucy saw a couple in the distance coming towards them. \"We're about to have company.\"\n\n\"Let them come, and even stay and watch if they want to. I'm not stopping until we both come,\" Maddy said, since she was in a foreign country and unlikely to know anyone here... an ironic thought, since against all odds, she had her favourite ex-teacher's cock in her pussy at this very moment.\n\n\"That won't take long for me,\" Lucy said, Maddy's pussy tightening skills around her cock having her balls boiling.\n\n\"Come inside me, and I'll come immediately,\" Maddy said, getting a load in her pussy often being one way to trigger an orgasm for her, as she looked over and saw the two silhouettes still in the distance but getting closer.\n\n\"You want my big load?\" Lucy asked.\n\n\"Yes, yes, fill my pussy with your cum, Lucy, I want you to fill my holes this whole week,\" Maddy said, envisioning a bunch of wild sex with Lucy.\n\n\"Oh, fuck yes, here it comes,\" Lucy grunted, as Maddy's tight pussy milked her third load of the evening from her.\n\n\"Fuuuuuuuck, yes,\" Maddy moaned loudly, as the warm load erupting inside her triggered her own orgasm, and she collapsed onto Lucy.\n\nThey both sat there for a couple of minutes, savouring the afterglow of their orgasms. Two girls hand in hand, likely nineteen like Maddy, walked past them and gave them amused but friendly looks, likely thinking they were just another lesbian couple like themselves, with no idea Lucy had a cock, and it was still buried inside Maddy's pussy.\n\nOnce they were alone again, Maddy climbed off Lucy and said, \"I really should get back to my room.\"\n\n\"Yeah, I'm exhausted.\"\n\n\"Well, rejuvenate,\" Maddy said, pulling Lucy up from the bench and kissing her... cum oozing out of her pussy. \"This was just an appetizer.\"\n\n\"I'm not sure I can keep up with you,\" Lucy said, \"although I'm definitely willing to give it a go.\"\n\n\"Stop by my room for brunch, eleven o'clock,\" Maddy said.\n\n\"You're sure?\"\n\n\"Definitely,\" Maddy said.\n\n\"Okay,\" Lucy said. She was happy Maddy had some blackmail-worthy evidence against Mrs. Chase to fight back against the inevitable threat to her job that was bound to occur once they all got home. Or better yet, maybe they could obliterate that possibility tomorrow!\n\n\"In part because we have my Mom to fuck and humiliate,\" Maddy said.\n\n\"You really want to do that?\" Lucy asked, that seeming an entirely new level of kink, but also excellent for stabilizing her career.\n\n\"It's time she's put in her place,\" Maddy said, as they walked into the hotel together.",
        "\"That's true,\" Lucy agreed, yawning... she really was spent.\n\n\"Room 712,\" Maddy said, as they reached the lobby.\n\n\"See you there then,\" Lucy said.\n\nMaddy kissed her again, this time in front of the desk captain. She then whispered, \"I can't wait to take your cock in my ass.\"\n\n\"I can't wait to eat your asshole too,\" Lucy countered.\n\n\"I can't wait to see you balls deep in my Mom's ass,\" Maddy said.\n\n\"I can't wait to turn her into a submissive bimbo fuck toy,\" Lucy continued. \"Not to mention getting her off of my ass at school for good.\"\n\n\"Fuck, you're getting me horny again,\" Maddy said, as they approached the elevator.\n\nInside the elevator, Lucy pressed three, then as soon as the doors closed, Maddy dropped to her knees and sucked Lucy's cock. Not that she planned to get Lucy off this time, it was more of a goodnight kiss.\n\n\"You're insatiable,\" Lucy moaned.\n\nMaddy stood back up after just a few bobs and said, \"Shit, do I taste good.\"\n\nThe elevator stopped and Lucy agreed, \"You've got a perfect pie.\"\n\nMaddy smiled, and slapped Lucy's ass as she left the elevator. \"I had a lot of fun.\"\n\n\"Me too,\" Lucy said, as she turned and looked into her eyes as the doors closed.\n\nBoth women went to bed and crashed hard... both with wicked plans for what tomorrow and the rest of the week would bring.\n\nThe End"
    ],
    "authorname": "silkstockingslover",
    "tags": [
        "trans",
        "shemale",
        "teacher",
        "student",
        "public sex",
        "beach",
        "silkstockingslover",
        "voyueristic",
        "transexual",
        "summer"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/trans-summer"
}
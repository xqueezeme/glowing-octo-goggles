{
    "title": "Dwelling in Desire Ch. 15",
    "pages": [
        "Dismal.\n\nThat was the best way to describe our ride home. Once the sexual high had worn off a bit, I'd transitioned from horny beyond belief to wondering just what the hell I'd done. What was I thinking?\n\nIt was difficult to tell what Beth was thinking\u2014as if any man had any sense of what women were thinking. But it didn't take a genius to deduce what a dumbfuck I'd been. And how I might have hurt Beth in the process.\n\nShe hadn't seemed angry, during. At least not once things got really heated in the backseat. But at that point neither of us were really thinking with our heads.\n\nWould she hate me for exerting my control over her in the way that I had? I might have abandoned my Catholic faith decades ago, but it was not the same for her. Beth obviously still held significant respect for the church, or she would not have interrupted a weekend such as this to attend services.\n\nI needed to apologize.\n\nReaching over, I gently stroked her thigh, hoping she would understand.\n\nMy heart melted when I felt her tiny hand on mine. This girl was perfect. Beautiful, funny, honest, and innocent to a fault. I felt goodness and forgiveness radiate from her, even though I didn't deserve it.\n\nI kept my hand on her thigh until we pulled into the garage. Shifting into park, I paused, knowing she wouldn't move until I allowed it.\n\n\"I'm sorry Bethany,\" I muttered. \"I shouldn't have...\"\n\n\"It's okay.\"\n\n\"No, I don't think it is,\" I asserted. \"I wanted you so much that I didn't concern myself with whether I might be insulting you, or crossing a line.\"\n\nShaking my head, I continued, \"You're just so beautifully submissive Beth, and I let it go to my head. I hope you'll forgive me.\"\n\nI squeezed her thigh then, silently pleading, despite any attempt to keep my cool.\n\n\"I'm equally at fault,\" Beth whispered. \"I could have told you no. Perhaps I should have.\"\n\n\"Perhaps,\" I agreed, \"But I should've known better. I was an idiot, thinking with my dick and nothing more. I didn't realize how far I could push you without you pushing back.\"\n\n\"So I need to push back?\"\n\nI smiled weakly at her confusion. \"Sweet Bethany, you shouldn't have to push back. As your Dom, and as your lover, I should know your limits.\"\n\n\"But how can you know my limits?\" Beth reasoned. \"We've only been together a couple of days.\"\n\n\"Still...\" I shook my head, determined to punish myself.\n\n\"Curt, look at me.\"\n\nI looked, trying to keep the anger from my face, as I didn't want her to think it was directed towards her.\n\n\"Curt, what we did...I...it was...\"\n\nI could think of a million things.\n\n\"Hot.\"\n\n\"Hot?\" I laughed, thrown by her choice of words.\n\n\"Yes,\" she said as a smile tugged at her lips. \"It was wrong, and we definitely can't make a habit of it, but, yeah. It was hot.\"\n\nWhat the hell did I do to deserve this woman?\n\n\"Well, I still feel like I need to...I don't know, repent or something,\" I laughed, thoroughly enjoying her smirk as she shook her head at me.\n\n\"How about this,\" Beth offered, \"You can make us some eggs while I go and take a nice hot shower. Alone.\"\n\n\"That seems a tad harsh.\"\n\n\"We had sex at my church.\"\n\n\"Fine,\" I growled. \"Get to the shower then, little girl, before I change my mind.\"\n\n---\n\nI couldn't help but moan aloud as the water hit me. I'd been sticky all over, and tense from our passions in the back seat. Nothing could have been better than a hot shower. Except for maybe a hot shower with him.\n\nCurt's punishment was as much a bummer for me as it was for him. But he needed absolution, and it really was best that I shower alone. Maybe I could actually get clean, and stay that way for a while. Plus, the water bill was already bound to be obscenely inflated from our prolonged aquatic...conversations.\n\n\"Aahhh,\" I hissed as I ran the soap over my breast. Looking down, I saw the marks from Curt's teeth, where his canines had broken skin. The marks weren't too bad, but they were enough to make my eyes go wide. I shivered as I flashed back to that moment in the car, when he'd affixed his mouth to my flesh, and given me what I so craved. What I didn't even know I craved...until him.\n\nI shut the water off, determined not to prolong the shower any more than necessary. Drying myself quickly, I slipped back into Curt's robe before heading downstairs. The smell of first class cuisine filled the air, but it was different than before...\n\nEmerging into the kitchen, I looked curiously at Curt, who had a pan sizzling with smoke and grease in his grip. It smelled like...steak.\n\n\"So I take it then that 'steak and eggs' is also a type of egg?\"\n\n\"Hey Beautiful,\" he smiled that panty-dropping smile at me. I noticed his tie was gone, his top few buttons undone and his sleeves rolled up as he saw to the steaks. \"Actually yes, it is, but this is not steak and eggs. This is my special omelette.\"\n\n\"Jeez Curt, I don't know why you restrict yourself to breakfast dishes. You obviously know how to cook, if not how to bake,\" I giggled.\n\n\"Baking is a girl thing,\" Curt declared as he sliced the meat.\n\n\"Well that's very open minded of you,\" I smirked.\n\n\"Right?\"\n\n\"You're such a goof!\"\n\n\"So I've been told,\" Curt grinned, popping a sliver of steak into his mouth. \"Maybe I will spread my wings a bit, now that I have someone to impress.\"\n\n\"Yeah,\" I grinned. \"You can do breakfast, lunch, and dinner, and I'll handle dessert.\"\n\n\"Or you could just be dessert,\" Curt winked suggestively.\n\n\"Even better. Less work for me,\" I replied cheekily.\n\n\"Oh I don't know about that baby,\" Curt snickered. \"I think we can agree that our exchanges in the bedroom can be mutually exhausting.\"\n\n\"Mmm,\" I nodded, licking my lips from the mental image he'd painted.\n\n\"Come here,\" Curt ordered softly, as the mood went from light to serious in an instant.\n\nI approached Curt with caution, but felt my entire body relax when he pulled me close, wrapping me in his warm embrace and rocking me softly.\n\n\"I love you Beth. I'm sorry.\"\n\nI felt him squeeze me tighter as the final words escaped him.\n\n\"I know,\" I whispered before pulling back to look at him.\n\nCurt refused to release me, but I managed to reach up and put my palm gently to his cheek as our eyes met.\n\n\"I love you Curt. It'll take a lot more than...that to make me stop loving you. In the future, just promise me 'no church sex', and I promise to say 'no' more often.\"\n\n\"Well don't go out of your way,\" Curt teased, as was his nature. \"I love it when you say 'yes'.\"\n\n\"But I have to set boundaries,\" I insisted, relishing the familiar darkness simmering in his eyes as I sassed him. \"I can't expect you to respect my limits if I've declared none.\"\n\n\"And yet you can't declare limits if you don't know what they are. And you can't know what they are if I don't educate you.\"\n\n\"You want to educate me, Mr. Donovan?\"\n\n\"Yes,\" he growled, making me lick my lips. \"But first, why don't we finish breakfast? At this rate, it'll be more like brunch.\"\n\n\"Fine by me,\" I nodded, stepping grudgingly away from him as he returned to the stove to finish the eggs and stir the meat with peppers and spices.\n\nA handsome, sexy, sensitive, charming, funny, rich, well-endowed chef. Was all mine. And I all his.\n\nDid life get any better? I felt certain that it did not. Well, maybe but for one little detail, and I refused to push him on it.\n\nGod had a plan for us. I'd never been surer of it than I was now.\n\n---\n\n\"Uhmmuhhgud,\" Beth mumbled through a mouthful.\n\n\"Glad you like it,\" I grinned.\n\n\"Mmmm,\" she nodded, still chewing, a look of pure pleasure on her face.\n\nMy omelettes were pretty fucking awesome, I had to admit. Perhaps I should expand my horizons where cooking was concerned. If it put that look on her face, I definitely couldn't rule it out.\n\nThank Christ I'd thought to add steak to my cart yesterday.\n\nShe'd forgiven me. At least I felt that she had. But I had a long way to go before I forgave myself. The dumbfuck timing of my introduction of pain into our relationship was definitely not without consequences.\n\nHow would I revisit it without it being a source of discomfort? Emotional discomfort. Would it wreck our relationship?\n\nFucking idiot, I chastised myself over and over.\n\nI'd play soft for a while. Maybe take a step back into vanilla. It wasn't as if I didn't enjoy being with Beth, regardless of the flavor of our lovemaking.\n\nOnly time would tell whether I could keep the demons at bay long enough to repair the damage I'd done.\n\n\"Ufff! I think I need a nap Curt,\" Beth slumped in her chair when she'd finished.\n\n\"Hmm, a nap doesn't sound half bad,\" I purred.\n\n\"Maybe I should nap in the guest room then,\" Beth didn't miss my tone, or the implications.\n\n\"Like hell,\" I growled.\n\nBeth laughed, \"You just need to promise to stay on your side of the bed.\"\n\n\"For how long?\" I asked gruffly.\n\n\"Until I'm done napping,\" she answered simply.\n\n\"Those are rather strict conditions.\"\n\n\"Well, the kitchen is a bit of a mess. Perhaps you can busy yourself with that while I get some rest,\" she suggested with a sassy grin.\n\n\"Good point, Bethany.\"\n\nHer expression sobered then, at the way I said her name. So she did feel it\u2014the sexual trigger that had evolved over the course of our relationship. It affected her, just as surely as her pigtails affected me.\n\n\"Go on up and have your nap. I'll be there shortly.\"\n\nWe would see how much sleep she got, waiting for me.\n\nQuite honestly, I was game for a nap. And it was probably best that she be asleep when I went in, so she didn't encourage me\u2014not that I needed much encouragement where Beth was involved. But given the fragile state of things, I was probably less likely to interrupt her nap. Probably.\n\n---\n\nI surveyed the kitchen with mild satisfaction as I finished wiping down the counters. Cleaning up after breakfast had been more of an undertaking than expected, given my lack of attention to it the past couple days.\n\nThe pans were clean, the granite shone, and the sink was scrubbed and sanitized.\n\nThere was something about a freshly cleaned kitchen that felt...good. I wasn't exactly Suzy homemaker, but there was an undeniable the sense of pride and achievement a lemony-fresh kitchen instilled.\n\nIt'd taken at least thirty minutes, so Beth was likely asleep. My arousal had waned a bit, but I still worried that seeing her in my bed, asleep or not, would immediately rekindle my need to take her.\n\nBeth needed rest. Hell, I needed rest. Perhaps I should just crash on the couch for a while. Leave her be.\n\nBut I couldn't. She belonged in my bed, and I with her.\n\nPraying I could control myself, I headed upstairs to join her.\n\nA tender smile spread on my face as I saw her lovely blonde hair and the collar of my blue robe peeking out from beneath the covers. She was turned away from me, for which I was grateful. Had I looked upon her soft eyelashes resting on her cheeks, her lush pink lips, her creamy complexion, the rise and fall of her glorious breasts, I might have been undone.\n\nI shed my clothes before joining her under the covers, making sure to keep to my side of the bed, or what had now officially become my side. Cursing my stiffening cock, I squeezed my eyes shut and waited for the food coma to kick in.\n\n---\n\n\"Aahh,\" I groaned as I awoke to the familiar sensation of a hot mouth wrapped around me.\n\nAll I could see was a mass beneath the covers, hovering over my cock.\n\nMy sweet Bethany sucked, cupping my balls in her tiny hand, adoringly, aggressively. It was clear that she was not finished with me, and any anger from this morning had long since dissipated.\n\n\"Aahh, Beth,\" I choked as she swallowed me. \"Beth please...\"\n\nShe released me and crawled up my body, only to emerge from the covers and render me speechless with her beautiful blue eyes.\n\n\"I love you Curt,\" she said solemnly, before kissing me full on the mouth.\n\nHer kiss was thorough, aggressive, unyielding. A muffled moan escaped her as I wrapped my arms around her, pressing her breasts more firmly into me.\n\nShe fisted her hand in my hair and wrenched her lips free of mine, her eyes now sparkling with desire and longing.\n\n\"Take me,\" she ordered.\n\nShe didn't have to tell me twice.\n\nI rolled us both so she lay beneath me, and gently kneed her legs apart. In an instant I was inside her, adopting a slow intimate rhythm as I lovingly kissed and nibbled at her neck, savoring her little mews. I wanted her writhing in desperate need before I surrendered.\n\n\"Mmmm Curt,\" Beth whimpered, clutching at my back.\n\n\"Sshh,\" I soothed as I continued the relaxed thrusts.\n\n\"Curt!\"\n\n\"I know babygirl, just take it.\"\n\nBeth shivered and nodded before she relaxed her legs, and went limp beneath me. Her body had surrendered, but her mouth was insistent as she licked my neck, whispering soft pleases periodically into my ear, making me shudder.\n\n\"Nnhh,\" I grunted as I struggled to maintain my slow pace. I knew it wouldn't be much longer until I needed release. But Christ, her soft begging, her body totally submissive and open to me, it was pleasure I simply couldn't resist.\n\n\"Mmhhmm, please,\" Beth whimpered as her pussy clutched at me in excitement, anticipation of what she knew was coming.\n\n\"Sshh, relax baby,\" I cooed.\n\n\"Yes Sir...\"\n\nAnd again she was open.\n\n\"Give me your mouth,\" I ordered.\n\nBeth instantly obeyed, opening wide for me. I kissed her deeply, forcing her to take my tongue, and savored her squirming beneath me, eager and more desperate by the second.\n\nShe sucked at me, clung to me, milking my dick insistently as I neared my breaking point. I couldn't handle much more.\n\nReleasing Bethany from our kiss, I savored her wail of disappointment as I withdrew, nearly pulling free of her clasping cunt. I waited for several moments as she squirmed and whined before I relented. I penetrated her, all the way.\n\n\"Aahh,\" she gasped, her eyes going wide, her nails digging into my sides.\n\nI pulled out again, and thrust deep, bumping her cervix. I would plant my seed there. Soon.\n\nAgain I pulled back, nearly coming free of her, again and again. I taunted her until she practically growled at me.\n\n\"I'm close babygirl, are you ready?\"\n\n\"Please Curt, just fuck me!\" she threw her head from side to side in frustration.\n\nI chuckled at her desperation as I continued my lazy thrusts.\n\nLeaning in close, I whispered into her ear.\n\n\"I'm going to come inside of you Bethany...nothing between us...nothing.\"\n\n\"Aahhh yess!\" she hissed, wrapping her legs around me.\n\n\"I'm going to spray my cum inside you, deep in your cunt...\"\n\n\"Aaahhh! Aahh, please!\"\n\n\"Soon, you'll be pregnant Bethany. Very soon...\" I crooned, nearly pushing myself over the edge with my words.\n\n\"Nnnaahh!!\" she screamed, her pussy contracting over me as she came.\n\n\"Yeeesss,\" I hissed, as I gave in and began a furious pace.\n\nThe sound of her pussy rang in my ears, the smell of her enflaming me, making me wild. The image of her firmly rounded belly so vivid, so close...\n\n\"My baby...aaahhh...you'll have my bbaby...nnhhh...\" I growled through clenched teeth as I let instinct take over.\n\nRaw. Animal. Instinct.\n\nI let her have it, hard and fast, pounding and raging into her like I never would again. Tingling sensation buzzed through my ears, down to my toes and back, til it finally rested in my groin, and I knew it was time.\n\n\"Now Bethany, milk my cock! Now!\" I roared as I delivered a final mighty thrust.\n\n\"Aaahhh!!\" Beth screamed, her pussy clamping down tight upon me, making my eyes roll back as I pulsed.\n\nI struggled for breath as I fired off once, twice, three times, again and again as she whimpered and mewed. I trembled, breathing heavily into her neck.\n\nWhen the aftershocks had abated, I rolled, pulling her with me. My cock was still wedged in her, preventing my cum from seeping out for the moment.\n\nI couldn't believe it\u2014we'd more or less just had vanilla sex, and I was still floating on cloud nine.\n\nNothing. Nothing would ever be this good.\n\n---\n\nSweet heavens, his words, his...everything.\n\nI was totally limp, useless, yet filled with a new sort of energy. A determination to love Curt. To please him, and have his babies.\n\nPerhaps it was the sex high that was still very much present in the air as we lay side by side. Perhaps the sex was responsible for my sudden transformation.\n\nMy career, the whole foundation of our crossing paths, seemed but a distant memory. I wasn't ready to let it go, but I wasn't willing to compromise on my relationship with Curt either. My love for him was so thick, it seemed to drown my concern for anything else. But again, the sex. The hormones\u2014they had to be impacting my judgment.\n\nMaybe tomorrow, when he went back to work, I would be able to think straight.\n\nWait a second...\n\nDid I need to work? Did I need to, the way I thought I did? It was true that I had bills to pay\u2014bills I would never dream of passing on to Curt, but, he obviously wanted me here. For a while, if not forever.\n\nDid he want me to...move in? That would certainly help me out financially.\n\nIt was still so fucking surreal. He wanted me, to keep, and to have his baby.\n\nWould he want to marry me?\n\nI felt like such a silly schoolgirl thinking of such things. Curt was so...out of this world. It didn't seem like general social convention should apply to him. Just because he was trying to get me pregnant didn't mean he wanted to marry me, or that he needed to marry me. Heck, people had babies out of wedlock all the time, with no particular rush to make things legal.\n\nIt was my roots, and my faith, which were nagging at me. It wasn't Curt's fault that I had these hang-ups, and I refused to let them burden him, the way I feared they would burden me eventually, when my stomach grew. When I could no longer conceal the repercussions from the outside world.\n\nWhat would my parents think of me? And my church?\n\n\"What is it?\" came a gruff voice.\n\n\"Huh?\"\n\n\"Far too many thoughts are running around in that brain of yours Bethany,\" Curt growled. \"Tell me.\"\n\n\"I just...\"\n\nCurt waited patiently for me to continue, but I just couldn't. I didn't want to burden him.\n\n\"Nothing.\"\n\n\"Nothing hmm?\" Curt purred. \"I think we both know that's a huge load of horse shit, Beth. But I haven't the energy right now to punish you for lying. So what do you say we have a bath?\"\n\n\"Mmm, that sounds amazing, but I just had a shower,\" I mused.\n\n\"What? Did I not do a good enough job dirtying you up?\" Curt chuckled as he rolled toward me and began kissing my shoulder, licking along my collarbone and downward.\n\n\"Ahh,\" I arched and tensed as he neared the mark on my breast.\n\n\"Is it sore?\"\n\n\"Sore to the touch, yes,\" I admitted.\n\n\"I'm...\" Curt began, before shaking his head.\n\n\"What?\"\n\n\"I was gonna say I'm sorry for marking you, but that would be a lie. A fucking monster of a lie.\"\n\n\"You don't have to be sorry Curt. I'm not,\" I giggled. \"It was amazing.\"\n\n\"Yes.\"\n\nA few moments passed in silence, and he resumed kissing over my breasts, careful to avoid the red marks.\n\n\"I'll treat it after our bath.\"\n\nI nodded, and shivered as he captured my nipple between his teeth and gently nibbled.\n\nAaahh...\n\nSoft nibble, tender lick. Soft nibble, tender lick. Nibble, tug, nibble, tug...\n\nI couldn't help but squirm as he teased me, the puddle of his sperm under my ass beginning to grow warm again as it mingled with my fresh juices. Every time his teeth put just a little extra pressure on my nipple, I felt shocks race through me, each terminating between my legs, again and again.\n\n\"My sweet Bethany,\" he whispered into my flesh, \"I can't wait to taste sweet milk from your breasts.\"",
        "---\n\nThe way Curt bathed me made me feel precious. Fragile and priceless. I responded in kind, showing him without words how much he meant to me. How much I wanted this to never end.\n\nIt was only once the water had drained from the tub and he was dressing my wound that I found the courage to speak.\n\n\"Curt?\"\n\n\"Hmm?\" he mumbled as he applied the bandage.\n\n\"I...you had me pack, enough for a while. Are we, umm...\"\n\n\"I want you to move in Beth,\" he asserted as he stood.\n\nMy stomach flipped.\n\n\"So fast though?\" I blinked.\n\n\"Do you not want to stay with me?\" Curt raised an eyebrow.\n\n\"Are you kidding?\" I gawked, \"Yes, I want to stay! It's just...weird. I still can't believe you want me. And, you know, a baby. It's just so strange.\"\n\n\"But you want my baby.\"\n\n\"Yes Curt,\" I nodded. \"I do. But...\"\n\nBefore I could find the words, Curt hushed me with his mouth. I forfeited my breath, moaning in blissful resignation as he gave me his tongue. Anything. I would give him anything.\n\nI pressed my breasts to him, the brazen slut surfacing once again. My hand wrapped firmly around him, I began to stroke.\n\n\"No Beth,\" Curt breathed as he withdrew from the kiss.\n\n\"Why?\"\n\n\"You're sore. I've already pushed you way too much.\"\n\n\"But,\" I protested.\n\n\"And,\" Curt continued, \"We have all the time in the world.\"\n\nI blinked, quietly processing his words.\n\n\"Do you understand Beth? We have the rest of our lives, to enjoy pleasure, and pain together,\" he grinned. \"For now, let's just relax. Okay?\"\n\n\"Okay,\" I barely whispered.\n\nThe rest of our lives. The rest of our lives.\n\nWas he saying what I thought he was?\n\n---\n\nThe remainder of the afternoon was spent lounging on Curt's new sofa. It'd taken nearly an hour to find something worth watching that we agreed on, but we were united in the opinion that there was not much to choose from, even with an excess of five hundred channels.\n\nWe settled on Forrest Gump. I'd seen it a million times, but really, who gets sick of Tom Hanks?\n\n\"Lieutenant Dan, ice cream!\" Curt laughed at one of my favorite scenes.\n\n\"Ice cream sounds pretty good,\" I giggled.\n\n\"Well as it so happens, I was a bad boy at the store,\" Curt admitted.\n\nI grinned after him as he paused the movie and went to the kitchen.\n\n\"Fetch us some bowls little girl,\" he called from behind the fridge door.\n\nI produced the bowls and adored Curt's silly demeanor as he ran hot water over a spoon.\n\n\"So which do you want? Chocolate, strawberry, or...vanilla?\"\n\n\"Do I look like a vanilla girl to you?\" I laughed.\n\n\"Well, actually, you do look pretty damn vanilla,\" he snorted.\n\n\"Gee, thanks,\" I rolled my eyes.\n\n\"It's a compliment baby,\" Curt crooned as he came over to nuzzle at my neck.\n\n\"How is it a compliment?\" I protested, though I squirmed and bit my lip as his tongue teased below my ear.\n\n\"It's a compliment, because...\"\n\nI would have asked him to continue, had it not been for his hands gripping me, just below my breasts. My head fell back to rest against him, and I closed my eyes, just waiting for his warm firm hands to venture higher.\n\n\"Because I said so, little girl.\"\n\nWhat? What were we talking about?\n\n\"Mmm, okay,\" I murmured as he moved to scoop the ice cream.\n\nI didn't even care that he gave us both random scoops of Neapolitan.\n\nChocolate, strawberry, vanilla, who the fuck cared?\n\nWe resumed the movie, laughing, and crying\u2014well, I cried, at the appropriate times.\n\nIt wasn't until the credits that I noticed it was nearly sundown.\n\n\"Wow, the day's really gone?\" I shook my head.\n\n\"Day light is,\" Curt corrected. \"There's much fun to be had in the dark though, I promise.\"\n\n\"It's true,\" I agreed with a smirk. \"But as you so rightly pointed out earlier, I'm sore, and we have all the time in the world to have fun. We should just rest tonight.\"\n\n\"I did say that, didn't I?\" he growled.\n\n\"More or less, yes.\"\n\n\"Maybe you should tie my wrists again then, so I won't be tempted.\"\n\n\"Or perhaps you should tie mine,\" I teased, biting my lip when he looked at me, his eyes simmering with lust.\n\n\"I don't think so.\"\n\n\"What? You think I can't take it?\" I sassed.\n\n\"Take what exactly?\"\n\nHe had me there.\n\n\"Bethany?\"\n\n\"I don't know Curt, okay?\" I rolled my eyes. \"I don't know. And I'll never know until you show me.\"\n\n\"I will show you. Believe me Beth, I will show you everything. But not tonight.\"\n\nI must have looked genuinely sad, because Curt smiled and stroked my hair in assurance.\n\n\"And if you want sex tomorrow night, this old man needs a little time to recharge.\"\n\n\"Tomorrow night is a long way away...Daddy.\"\n\nCurt was the one to bite his lip then, the eyes that had simmered with lust now broiling with something akin to menace.\n\n\"Bad girl. Very bad girl,\" Curt growled as he shook his head in disapproval.\n\nI braced myself and waited for him to pounce, but he didn't move.\n\n\"What are you going to do...Daddy?\" I whispered sultrily, trying to get him to snap.\n\nBut his handsome features twisted into something almost unpleasant as he reached for the remote.\n\nI sat there curiously observing him as he scrolled through the free movies, and settled on none other than Rambo.\n\n\"There we go,\" Curt sounded smug as he hit play and hopped off the sofa.\n\n\"Where are you going?\" I complained, annoyed that he would turn on Rambo and then leave me alone with it.\n\n\"To order Chinese, silly girl,\" Curt chuckled. \"After all, I'm gonna need all the help I can get keeping my hands off you. Maybe if you're gassy it won't be so difficult.\"\n\n\"If you're gassy you won't have anything to worry about,\" I retorted. \"I'll sleep downstairs.\"\n\n\"Like hell,\" Curt grinned as he dialed the number.\n\n---\n\nIf she was gassy, she was a lady about it. I on the other hand, was applauding myself for my genius as I maintained my zone on my side of the bed.\n\nOf course I wanted her. Truthfully, I didn't know how I hadn't immediately spanked her after she'd taunted me with the D word. The little minx.\n\nIt was a while before she drifted off, and boy could I relate. I needed my energy tomorrow, for when I went to work, and even more importantly, for when I came home. I didn't know what plans she had for tomorrow, hadn't asked, hadn't thought to. But I assumed she'd be on appointments, or calls, or testing the physical capacity of her tiny car.\n\nI thought of that day, just last week, when I'd found Beth unloading the mountains of merchandise from her less than efficient vehicle. It'd been hilarious to watch, with the exception of course of her exhaustion. The memory of her tired face made me clench my fists in the sheets.\n\nNever. She would never look that way again. I wouldn't have it. I would get her a better vehicle, and I would get her some help. If she wanted to continue her career, that was fine with me, but I would not have her pushing herself too hard, especially once she was pregnant.\n\nWe needed to talk about that, my expectations regarding the pregnancy, the reality of it, and...long term plans. I wanted everything settled as soon as possible.\n\nIt clicked for me then, what Joe had said, about the urgency of getting things settled with Ruiz. If I was to take care of Bethany, I needed to ensure her safety, in all aspects. Her, our child, us. It made sense now.\n\nFor the first time in years, I felt inspired. Invigorated. Only this time, it was not born from rage. It was born from love. My love for Beth, and our child, filled me with determination.\n\nWe would be together forever. Nothing would challenge that. Nothing.\n\n---\n\nMorning Beautiful,\n\n \n\nI didn't have the heart to wake you. You're so beautiful sleeping. Help yourself to anything in the kitchen while I'm at work. I expect to be home around five, but I'll text you if I'm going to be later. I expect you to take care of yourself. Drive safe, make sure you eat, and be ready for me when I arrive home. \n\n \n\nLove, Curt\n\n \n\nPS: The wifi is s0007877888B. Network is CELTIC5.\n\n--\n\nReading \"Love\" by Curt's signature made me swoon.\n\nBe ready for him. I bit my lip as I read that line over and over. I was already ready for him. And it would be at least eight tedious hours before I saw him again.\n\nPulling the sheets from the bed, I brought them down the hall, as he had our clothes just two mornings ago. The thought caused a naughty grin I was glad no one could see\u2014unless Curt was watching through one of the surveillance cameras he had around this place. I hadn't even thought to ask him where they were located.\n\nAs I loaded the sheets into the machine, I laughed from the knowledge that we'd ruin them again tonight. But they needed to be washed. God only knew how many times we'd soiled them in the past forty-eight hours.\n\nI ran a \"heavy soil\" cycle, before going downstairs to the kitchen.\n\nCurt had greeted me every morning for the past three days with eggs and a killer smile, and I missed them now. The kitchen felt too empty, too lonely and quiet without him. I checked the pantry, and thankfully there was a box of Cheerios. I wasn't that hungry, but I knew it was best to eat, and he had essentially ordered me to do so in his note.\n\nSitting alone at the table, chomping on the bland cereal set my mind wandering. I reviewed the past few days in my head. What we had done, the commitments we both had made. And as I searched myself for doubt and remorse, I smiled when I realized I had none.\n\nSo what now?\n\nThe last thing I wanted after this weekend was to go back to work. Especially since nothing super exciting was on my schedule. What was on my schedule exactly?\n\nI padded through the kitchen to the hall, and into the guest suite where I'd left the suitcase and my purse.\n\nPulling out my phone, I saw one missed call and a voicemail. It was from an Unknown number, which I tended not to answer, but a voicemail was usually a good sign. Was it a job?\n\nMy body thrummed with the excitement that only a potential new project could invoke. I dug through my bag, finding a pen and memo pad, and played the message.\n\n\"Good morning, my name is Antonio. I understand you offer interior decorating services, and my wife and I would love to get your thoughts on how to furnish our estate in Lake Bluff. You may reach me at 773-381-1114. I look forward to hearing from you.\"\n\nEstate? Lake Bluff? \n\nLake Bluff was essentially another Glencoe. Or as close as it got to Glencoe on the scale of rich neighborhoods. If this was a job, and it went through, it could be a major opportunity. Possibly even larger than Curt's project.\n\nI dialed the number, and prayed he would answer.\n\n\"Hello?\"\n\n\"Hello Antonio? This is Beth Jenkins, returning your call. You wished to discuss my design services for your home?\"\n\n\"Ah, yes, thank you for calling Beth. Yes, my wife and I recently moved into a home in Lake Bluff, and need some help with furniture and such. Are you available to meet tomorrow? I leave town on business on Wednesday, and hoped we could meet before then. I do apologize for the short notice.\"\n\n\"Oh! No, not at all Antonio, let me see...\"\n\nI knew I had nothing scheduled tomorrow, but a generous pause was part of the act.\n\n\"Uh, yeah, I can fit you in tomorrow, in the afternoon?\"\n\n\"As early as you can fit me in would be appreciated.\"\n\n\"How about noon?\" I offered.\n\n\"Yes, that will do. My wife Maria will be joining us. She will have a lot more to say than I, I am sure.\"\n\n\"Of course,\" I laughed. \"Oh, and my fee is $125 per hour. Will that be alright?\"\n\nI hated asking that, especially with the wealthier clientele, but too many people expected things for free.\n\n\"Yes, that's fine.\"\n\nWhew.\n\nHe provided me an address, and we exchanged goodbyes. When I hung up, my heart was pounding.\n\nA new project! A new project!\n\nI squealed and happy-danced as I pulled my laptop from the oversized suitcase and opened it up. I logged onto Curt's wifi and pulled up my calendar.\n\nWednesday I had a paint consultation in Schaumberg. Thursday a kitchen consultation in Peoria. Friday, the home automation seminar.\n\nI had appointments this week, yes, but nothing of significant profitability.\n\nI needed to close this deal.\n\nDeciding to set up shop in the guest suite, I emptied the suitcase of my pertinent office supplies and files, and arranged them on the small but sufficient writing desk.\n\nI'd busted my butt to make this house beautiful, and I refused to screw it up with my messiness. Once I was satisfied with my workstation, I lugged Curt's suitcase upstairs and began to unpack my clothes into his closet, claiming an unused drawer in his dresser for my underwear and PJs.\n\nI frowned when I realized there weren't enough hangers to put away even half the clothes I'd brought.\n\nDang it!\n\nI guess I needed to buy some hangers.\n\nPulling my phone from my pocket I searched for nearby stores.\n\nGot it. Just south of Glencoe, no more than twenty minutes. Maybe I'd stop for some lunch, and pick up groceries too. I knew Curt didn't keep much in the house, and if our weekend had been any indication, we'd grow fat on takeout unless I cooked dinner.\n\nThe thought of greeting him tonight in a sexy apron, slaving over his stove, cooking for him, serving him, lit a fire inside me.\n\nI dashed down the hall to transfer the sheets to the dryer, then grabbed my purse and headed out.\n\n---\n\n\"So,\" Joe knocked as he entered, plopping himself as he usually did on the guest chair before me. \"Let's have it.\"\n\n\"What do you mean?\" I smirked.\n\n\"Don't fucking play games, Curt. What happened?\"\n\n\"It's done.\"\n\n\"Done?\"\n\n\"I'll have a ring on her finger tonight,\" I declared with a shit-eating grin.\n\nJoe wasn't an easy guy to catch off guard, so when his jaw dropped, I couldn't help but emit a full-bellied laugh.\n\n\"Whoa, shit,\" Joe gawked. \"I can't believe it! Congrats man.\"\n\n\"Thanks. I'm gonna take an early lunch to get a ring. Where did you get Kate's?\"\n\n\"Bartholomew's, down on West Randolph.\"\n\n\"Thanks Joe. You know, I've never bought a woman jewelry before. Hope I don't fuck it up too bad,\" I laughed nervously.\n\n\"Just ask for Mary Ann. She was very helpful when Kate and I selected her ring. And the selection is impressive.\"\n\n\"Terrific. And Joe, much as I hate to say this, you were right. I understand now why you wanted to change course, and I'm in full agreement.\"\n\n\"I figured as much.\"\n\n\"So are things ready?\"\n\n\"I had Margot courier over the papers. He should have received them Friday, but I was going to call this morning and see if there were any questions.\"\n\n\"Should we do that now? Have a conference call?\"\n\nI wanted this done.\n\n\"Yes, let's do it together. I think that would be best.\"\n\nI paged Margot, \"Marg, would you please get Mr. Ruiz on the line? And see that we're not disturbed.\"\n\n\"Yeah.\"\n\nI smirked and shook my head.\n\n\"So do we have to bring the old bag with us, in our new practice? Where will we go? Do we even need to leave?\"\n\n\"I suppose it will depend on how Ruiz takes this. It seemed, when I spoke with him last, that he wasn't upset. If anything, he was a little too civil.\"\n\n\"And if he takes it badly?\"\n\n\"As I said, he'll just have to deal. I'm not giving up my life with Kate, and now you with Beth. This is happening, whether or not he accepts it.\"\n\nJoe's words were certain, but on his face I could see traces of insecurity. It wasn't just his face either. It was his mannerism. He seemed...jumpy almost.\n\n\"Have we found another firm to absorb Ruiz?\"\n\n\"Yes, I've spoken with Jack, and he is definitely interested. I said I would connect them as soon as the non-disclosure agreement is finalized.\"\n\n\"Mr. Ruiz on line one,\" came Margot's scratchy voice through the intercom.\n\n\"Here goes nothing,\" I sighed as I opened the call.\n\n\"Ruiz, thanks for taking the time,\" Joe initiated, cool as a motherfucking cucumber.\n\n\"Not at all, not at all,\" Ruiz chuckled, and I noticed the air of civility Joe had mentioned. \"To what do I owe the pleasure?\"\n\n\"I have Curt here on the line as well. We had the papers sent over on Friday, and wondered if you'd had a chance to look them over.\"\n\n\"That I have,\" he paused. \"May I be frank, gentlemen?\"\n\n\"Of course.\"\n\n\"What has brought this about? I always felt that our arrangement was mutually beneficial, and your success on behalf of my family has never gone unappreciated.\"\n\n\"Yes, we both agree wholeheartedly that our business relationship has been a successful one. But Curt and I are entering a new stage in our lives. We want a change of pace. We've discussed it, and are agreed that a change of specialty is in order. Something less intensive, to suit us in our old age,\" Joe laughed, though it did not reach his eyes.\n\n\"I see,\" Ruiz drawled. \"And there's nothing I can do to change your mind?\"\n\n\"Afraid it's settled, my friend. You understand.\"\n\n\"Yes. Well, I won't pretend not to be disappointed. This is a very sad day for me, and my family. Will you grant me one request though, before I sign the papers?\"\n\n\"Name it, my friend,\" Joe looked at me, noticeably nervous, though his voice had never been calmer.\n\n\"Join us for dinner Wednesday evening. I will have the papers ready for you, and we can say our goodbyes properly.\"\n\n\"Excellent idea, we look forward to it.\"\n\n\"Yes, we'll see you then,\" I seconded.\n\n\"Goodbye my friends.\"\n\n&gt;Click&lt;\n\n---\n\n\"That one,\" I pointed at the glass, stupidly expecting Mary Ann to guess which ring I was eyeing.\n\nBut she smiled. She knew.\n\n\"You're a man of good taste. Superior taste, I must say. At three carats it's definitely not the largest, but I have to say the design is exquisite, the clarity unsurpassed,\" Mary Ann murmured as she pulled the stunning ring from the case for me to touch.\n\n\"Shall I adjust it now, or wait until she comes in to size it?\" Mary Ann asked.\n\nI inspected the ring, examining the size, slipping my pinky tip in just barely before declining.\n\n\"I'm sure this will fit, but if it does not, I'll bring her in. Maybe just a polish, and a nice case, and I'll be on my way.\"\n\n\"Right away Mr. Donovan. She's a lucky girl!\"\n\nI shook my head as Mary Ann disappeared behind the curtain. She didn't know how backwards she had it.\n\n---\n\n\"Mmmhhmm,\" I moaned in satisfaction as I checked the meatballs in the oven. It was a family recipe. Simple, but mouthwatering. I couldn't wait for Curt to get home and taste it. The timer read thirty minutes, which meant I had time for a quick shower before I started the pasta.\n\nI hurried upstairs with the items I'd purchased, and started up the shower. Waiting for the water to warm, I put my hair up and obtained my new razor from its packaging.\n\n\"Aaahh,\" the shower forced a less than virtuous moan from me.\n\nIt seemed I'd had more showers than should be legal in the past few days, but it was for Curt. I washed myself, and shaved, paying special attention to my bikini area. I wanted him to have unfettered access to what was his. What I had given him freely.\n\nI finished, then made a face, debating with myself.\n\nShould I? Would it be too slutty? Would he like it? Would he hate it?\n\nHeck with it.\n\nI gathered more foam and piled it on my mound, before carefully shaving myself entirely smooth.\n\nRinsing and shutting the water off, I all but ran to the mirror.\n\nSweet Jesus.\n\nI'd not seen myself this...naked...for years.\n\nI swallowed in nervousness.\n\nWould he freak out? Would it turn him off? I knew it was slutty, and I knew Curt wasn't into slutty. He was into demure and conservative.\n\nStupid Beth, stupid...\n\nWell, there was no turning back now. I'd just have to chance it, and deal with Curt's reaction head on.",
        "Knowing time was precious, I scurried to the master closet and selected a lacy white bra and panty set. If anything would compensate for how slutty I'd behaved, it would be these. They were as prim and proper as sexy could be.\n\nI could just see Curt's face, and it made my mouth water.\n\nDressing quickly, I employed my favorite blue skirt, a white blouse, stockings, and some gray ballet flats. Checking myself in the vanity mirror, I knew something was missing.\n\nHmm. Should I?\n\nYou're a total slut beneath those modest panties, why the hell not?\n\nResolved to bring Curt to his knees this evening, I fashioned a pristine pair of pigtails, twisting the ends with my fingers to give them a little curl.\n\nStepping back to give myself a final once-over, I tried and failed to suppress a cunning grin.\n\n&gt;Beep&lt;\n\n&gt;Beep&lt;\n\n&gt;Beep&lt;\n\nThe meatballs were done, and Curt would be home soon.\n\nShowtime.\n\n---\n\nI'd pushed myself at work, desperate to get home to Beth as soon as possible. I hadn't realized just how difficult it would be to be apart from her, even just for a few hours.\n\nI needed to see her, talk to her, touch her, and be inside her.\n\nAnd of course there was the ring I planned to give her.\n\nHow would I do it? I was a world-class fuck-up, or so I felt at times. I knew I could trust myself to be a total ass, and it killed me to think I might disappoint Beth.\n\nMaybe just textbook? Down on one knee?\n\n \n\nToo unoriginal?\n\n \n\nShould I call Margot?\n\nI laughed at myself as I briefly considered getting relationship advice from the old bag, but she could probably offer some valuable insight.\n\nFuck it. I could do this myself.\n\nI sped home, hoping the ache in my balls wouldn't impair my judgment.\n\n---\n\nAs much as I'd slaved over the planning and preparation of our first home cooked dinner together, I was most concerned with how Curt would react to my...ensemble.\n\nHad I gone too far?\n\nI gasped and jumped nearly a foot as I heard the garage door activate. Something in my gut told me that I'd indeed gone too far. But it was too late now to take it back.\n\nJust play it cool Beth. Innocent.\n\nI stood up straight, calm cool and collected, or so I hoped it would appear, and tended to the sauce.\n\n\"Mmmm,\" I heard Curt groan as he came in the door. \"What on earth is that divine...\"\n\nSilence.\n\nI inadvertently bit my lip before glancing over at him. He stood just inside the door, his shoulders squared, staring at me. His face was guarded, serious.\n\n\"I made my meatballs,\" I murmured as I turned back to the sauce, slowly stirring to avoid splatter.\n\nMy heart pounded when I received no response. I swallowed and stirred, my ears straining to hear any reaction from him over the sound of the fan.\n\n\"Everything's ready. If you wash your hands, I'll serve it up,\" I mumbled, unable to take the silence.\n\nI heard the water from the sink run for a few moments and him wiping his hands. Still, not a word. What was going on? Was he angry?\n\nI felt his heat behind me then.\n\n\"Bethany,\" Curt whispered into my neck, which thanks to these pigtails, was fully exposed and subject to Curt's mercy.\n\n\"Hmm?\" I half answered, half shivered.\n\n\"You look...\" Curt inhaled then, smelling me, or perhaps the sauce. \"Edible.\"\n\n\"Afraid I'm not on the menu tonight,\" I giggled anxiously before turning off the gas and facing him.\n\nHis carnivorous expression gave me instant chills, and I felt a distinct wetness between my legs.\n\n\"I beg to differ,\" he growled.\n\nMy hips jolted, when without warning, he pulled me against him and ravished my mouth. It was so fast. His lips, his tongue, the faint traces of his cologne, they all overwhelmed me. Not enough however to distract from the thickness which was now crushed against my belly.\n\nOh yes. He definitely liked the pigtails.\n\nDefinitely.\n\n\"Mmmm,\" I moaned in guilty satisfaction before pushing at his chest. It took a few tries to get his attention, but he finally released me.\n\nI touched my lips, which were probably swollen red from that...kiss. If one could call it that. It was more like an assault. An assault that I hoped I could have again later.\n\n\"The dinner's ready Curt,\" I explained breathily. \"Let's eat.\"\n\n\"Very well,\" Curt rasped. \"It does smell divine.\"\n\nI served up the salad, pasta and of course meatballs, and sat across from him at the kitchen table. No one actually used their formal dining room, and this table had more history for us. It felt more intimate.\n\n\"Mmmhh,\" Curt groaned as he tasted his first bite. I just stared, sitting there with my first forkful getting cold. I couldn't tear my eyes away from the look of utter pleasure on his face.\n\n\"Like it?\"\n\n\"Mmhhm,\" Curt nodded as he chewed then swallowed.\n\n\"Fuck yes I like it, Bethany. I'd eat this every night.\"\n\nHe was using my name again. That way. Was this retaliation of some sort?\n\nI turned my attention to my own plate and we finished our meal in silence\u2014but for the occasional groans of pleasure of course.\n\n\"Would you like seconds?\" I asked, realizing I'd been remiss in that when he'd finished long before me.\n\n\"Yes,\" was his stern reply.\n\nI wiped my mouth and rose to collect his plate, startled when he captured my wrist.\n\n\"Yes Bethany, I would like seconds. And thirds, and fourths,\" Curt purred. \"But you see, that would likely compromise my...energy, for anything else this evening. And I can't allow that. Do you understand?\"\n\nMy jaw had dropped slightly, my mouth watering from the coarse seductive timbre of his voice.\n\n\"Yes Sir.\"\n\n\"Good girl. Go brush your teeth and wait for me in the bedroom. I'll see to the dishes.\"\n\nI nodded, licking my lips.\n\n\"And Bethany,\" Curt called as I reached the doorway. \"I'll undress you.\"\n\nSweet Jesus.\n\n---\n\nSweet Jesus.\n\nI'd nearly lost my shit. The instant I saw her\u2014the pigtails, the skirt, the little red apron like a fucking target tied around her waist\u2014my restraint had been nothing short of a miracle.\n\nI felt...hazy as I rinsed our plates. Like a dense cloud of something was trying to keep me from immediately running upstairs and violating her.\n\nHow? How was I supposed to stay in control? I was only human, and she the ultimate seductress.\n\nDid she know? Did she know how this would affect me? The hair, the outfit...the goddamn naivety that constantly emanated from her.\n\nShe must know, to some extent. But I doubted very much if she could conceive the varying degrees of repercussions which were now ricocheting through my mind.\n\nFuck.\n\nMy brain was still foggy when I finished with the dishes, but I went to her anyway.\n\nObserving her sitting patiently, sweetly, and enticingly on the padded bench at the foot of the bed, I couldn't conceal a smile.\n\n\"Good girl. Stay.\"\n\nLittle bunny nod.\n\nI turned and went to brush my own teeth, determined to taste her purity tonight. I would taste it, before I filled it.\n\nAfter a thorough brushing, and a less thorough shave, I returned to the bedroom, smiling tenderly down at her. Her eyes were so wide with innocence, her pigtails so youthful and tempting.\n\n\"Daddy?\"\n\n\"Close your eyes Bethany.\"\n\nWhen she obeyed, I stripped, stowing the ring I'd pocketed in the top nightstand drawer before approaching her again, hard as I'd ever been.\n\n\"Open,\" I purred.\n\nShe immediately opened her mouth wide, her pink tongue presenting itself for my pleasure.\n\nGod. I'd meant for her to open her eyes, but this was undeniably tempting. Those luscious pink lips, full, pouty, and her hot tongue. Ready and eager to please me.\n\nFuck.\n\nReaching for her, I wrapped my hands in each of her pigtails, biting my lip as I heard her suddenly inhale.\n\nI fed her my cock\u2014just the tip, relishing the blissful silky texture of her lips wrapping around me.\n\n\"Suck Bethany. Suck. Don't take me deeper until I say.\"\n\nShe obeyed, though she put more than suction into her efforts. Her tongue caressed me, teasing at my frenulum, even probing slightly at my piss hole, making me hiss in desire.\n\n\"Deeper now. Take me deeper,\" I gritted, fisting my hands tightly in her hair, but letting her control the depth and pace.\n\n\"Mmmm,\" she mewed into my shaft, sucking like a good little slut as she took me slowly, as deeply as she could.\n\nI savored the occasional light gagging, her throat constricting over me as she tried.\n\n\"Ssshh, take your time baby. Relax your throat.\"\n\n\"Hmm, hmm,\" she replied, and I knew she was saying \"Yes Sir.\"\n\nHer throat did indeed loosen, the air from her nose raising goosebumps on my hips as she breathed and swallowed my cock.\n\n\"My balls Bethany, touch them.\"\n\n\"Mmmmm,\" came a beautiful hum through me, making my toes curl even before I felt her delicate hands begin to gently fondle my sac.\n\n\"Good girl. That's my good sweet Bethany,\" I murmured as I tugged slightly on her hair, willing her to take me deeper.\n\n\"Mmm, mmhhm,\" she nodded as she sucked. Yes Daddy.\n\n\"Nnnnhh,\" I grunted as I interpreted her sweet words in my mind.\n\n\"Yes baby, suck Daddy's cock. Show Daddy how much you love him.\"\n\n\"Mmmmmm...\" her head bobbed faster, she sucked harder at me.\n\n\"Deeper little girl...\"\n\n\"Nnngghh,\" she swallowed against me, making me clench my teeth.\n\n\"Enough,\" I released her hair quickly before she took me over the edge.\n\n\"Daddy?\" Beth panted as I pulled free of her mouth. She looked questioningly at me, obviously afraid she'd disappointed me somehow.\n\nCaressing her cheek, I reassured her. \"Baby, that was amazing. Too amazing. I really wanted to come down your throat just then. Truly, I almost did. But I need to save my cum. It belongs in your pussy, understand?\"\n\nLittle bunny nod.\n\n\"Stand.\"\n\nI took a deep breath as she obeyed and stood before me, clad in an outfit nearly as torturous as her Sunday dress. I swallowed and briefly wondered if this was all a dream.\n\nStepping forward, I began to disrobe her, starting with her white blouse. This one did not conceal her lust from me. It was thin, silky, and I could see her bra clearly through it, as well as her nipples.\n\nGod how I wanted to bite those nipples. To chew on them greedily as warm mother's milk flowed from them, filling my mouth.\n\nI salivated at the thought.\n\nAfter laying her blouse neatly on the bench, I admired her lovely flesh, so creamy and rosy at the same time\u2014the white lace bra a subtle contrast that suited her.\n\nSo angelic...so pure.\n\nI unhooked her bra next, savoring her intake of breath as the lace glided over her skin. The straps came free, the cups pulled free, and she was there, exposed, and clearly aroused\u2014the glimmer in her eyes honest, and demanding.\n\nI grazed a warm finger over her left nipple, drawing a shiver from her before I moved on.\n\nHer blue skirt was pleated, coming down only to mid thigh, and was probably one of the shorter ones she owned. It was perfect for this moment. She had dressed this way for me. And she'd known exactly what I wanted. What I needed. I needed her innocence. But I also needed her sexuality.\n\nI unzipped the skirt slowly, sensually, taking stock of each barely perceptible squirm. The material came loose and I eased it down her legs, biting my lip as I observed the lacy tops of her white stockings.\n\n\"Mmm, these are very nice...\" I whispered as I stroked the back of her leg.\n\n\"Aahh,\" Beth quivered.\n\n\"As are these,\" I kneeled before her now, tracing the edge of her lacy white panties adoringly. \"I think these will be my favorite. But you knew that already, didn't you Bethany?\"\n\n\"Sir, ahh,\" she gasped as I gently touched her lace covered mound.\n\n\"Shall I take off your panties now, Bethany?\"\n\n\"Yyyes, Sir,\" she nodded, though I detected the slightest trace of nervousness in her voice.\n\n\"Good girl,\" I praised.\n\nAs I had that very first night, I peeled her panties down, over her hips, and...\n\nHoly fucking shit.\n\nHer panties fell ungracefully to the floor at her feet as I stared.\n\nBare. Entirely bare.\n\nAs pure and smooth as I'd ever encountered.\n\nWhen seconds passed in silence, I finally looked up at her.\n\n\"On the bed.\"\n\nBeth obeyed quietly, taking position where she had lain in nights past.\n\n\"No, scoot forward, down towards the foot of the bed,\" I instructed.\n\nMy balls were aching, and I feared I would embarrass myself at any moment, but I had to taste her. The need had increased tenfold when I'd seen her ivory mound.\n\nI knelt on the bench, and pulled her by the waist til her knees waterfalled at the edge of the bed, her lovely toes grazing the bench on either side of me.\n\nOn second thought...\n\nAs close as I was to my breaking point, I had to push this further. It was warranted. She'd shaven her pussy for me of her own volition.\n\nI searched and quickly found the two unused ropes from Saturday, and proceeded to bind her. I wrapped the ropes around each foot post and gently tied her legs til they were forcibly spread.\n\n\"Are you comfortable Bethany?\" I asked seriously. \"Are they too tight?\"\n\n\"No Sir,\" she whispered. \"I like it.\"\n\n\"You're going to like it more, very soon.\"\n\n\"What are you going to do, Daddy?\"\n\nI grinned as I recalled her taunting me with those very same words last night.\n\n\"I'm going to eat you, baby. I'm going to tongue that beautiful bare cunt until you can't take it anymore.\"\n\nBeth's jaw dropped a few degrees, her eyes glazed.\n\nGod, she was the most beautifully innocent submissive a Dominant's mind could conjure. And she was real. And she was mine.\n\nSatisfied that she couldn't move more than to squirm slightly against the ropes, I knelt again on the bench, transfixed once more by her young, smooth, splayed pussy.\n\nMy cock throbbed, twitched, and cursed me. I didn't care. If I came all over this fucking bench, it would be worth it. I had to get my mouth on her.\n\nI leant forward, wrapping my hands under her delicate curves to savor her fertile female musk. Beth's soft whimper as I breathed on her was what finally did me in.\n\nNeglecting all regard for technique, I laved her with my tongue. I lapped at her folds, growling in satisfaction as I tasted her purity at last. I feasted on her, sucking her soft lips, delving between, hungry for the sweet nectar that flowed as her hips shifted and bucked against my face.\n\n\"Daddy!\" I heard her squeal over the hum in my ears.\n\n\"My baby, you taste so sweet,\" I growled. \"So fucking sweet...aahnnn...\" I groaned as I went back for seconds.\n\nI fed upon her, sucking at her, fucking her deeply as I could with my tongue, tasting her core til I was sure I'd go mad.\n\n\"Please Daddy, please!\" she begged, and I felt her hand rest on my head, applying a light pressure, hinting that she needed more.\n\n\"Do you need to come little girl?\" I rasped as I came up for air.\n\n\"Please,\" Beth shivered, humping her pussy up at me in desperation.\n\n\"Please what?\"\n\n\"Please, Daddy,\" she whispered, her eyes rapt with desire.\n\n\"That's a good girl,\" I purred before I moved back down and kissed softly but thoroughly over her bare pussy mound.\n\nHer ivory silk tasted exactly like heaven as I tongued her, teasing her more as she struggled against the ropes.\n\n\"Patience sweetheart,\" I soothed her.\n\n\"Mmm, Daddy,\" she whined. \"Daddy...\"\n\nThe sound of my name on her lips sent shocks through me, reminding me that I didn't exactly have all the time in the world.\n\nRelenting, I licked lower, starting just at her entrance, moving softly up through her peach, my tongue parting her lips til I reached her nub, and ever so softly grazed it.\n\n\"Hahh!\" Beth cried at the first touch.\n\nI started again at her hole, tracing the natural path upward, and more firmly this time, lapped at her swollen bud.\n\n\"Aaahh! Daddy!!\" she screeched and fisted her hands in the covers, her eyes shut tight.\n\n\"Sshhh,\" I breathed against her.\n\nI repeated the motion, again and again, each time applying just slightly more pressure on her clit.\n\n\"Fuck!!\" Beth hissed after a dozen or so passes. \"Curt, please!\"\n\nI couldn't hold it against her when she forgot my title. She was mad with desire. I knew the feeling.\n\n\"I'm going to make you come now Bethany. Are you ready?\"\n\n\"Yes! Fuck! Yes!\"\n\nTrue to my word, I parted her lips with my hands, and flicked her with my tongue. I provoked her engorged little bud, again and again, applying firmer pressure with each pass. She moaned like a whore, and I knew she was close.\n\nMy dick pulsed and I knew I needed to be inside of her in seconds or it would be too late.\n\nI sucked her clit firmly into my mouth then, grasping it lightly with my teeth before flicking it rapidly with my tongue.\n\n\"Gaahhhh!!! Curt!! Haahhh!! Ahhhh!!\" she screamed and squirted into my mouth.\n\nBut I wouldn't relent.\n\nI sucked and tormented her clit more, penetrating her with my fingers and forcing her orgasm to multiply.\n\n\"Daahhhh!!\" she cried continuously, her hands now full of my hair.\n\nMoments later, I released her and muttered hoarsely, \"My turn.\"\n\nI scooted forward on the bench and pulled Beth by the hips til her ass hung over the edge of the bed, her legs still bound and spread.\n\nWith not a second to lose, I thrust in, losing myself in her wetness.\n\nMy head spun as I plunged deep, rutting her like nothing else mattered.\n\n\"Fffuck!\" I roared, totally unhinged.\n\nI gripped her soft hips, sunk my claws in, pulled her to me as I went at her again and again. My balls tightened and I bit my lip, knowing this was it.\n\n\"Yyyesss Bethany!!\"\n\n\"Daddy!!\"\n\n\"Fffuck!! Haahhh!! Aahhh! Aaaahh!\"\n\nI exploded in her, came buckets as she cried out for me. My hips quaked and shuddered as I forced every last spurt deep into her womb.\n\nSweet Christ.\n\nI had Beth bound, impaled, and now plugged full of my semen.\n\n\"God, Beth...\" I gushed against her breasts as I came down from the high.\n\nWhen I could breathe again, I freed her legs, massaging them gently as her hands stroked tenderly through my hair. I didn't pull out, and I could tell she didn't want me to.\n\n---\n\n\"So, you liked it then?\" I asked him timidly.\n\n\"Liked what?\" Curt breathed, obviously still drunk from his orgasm, as was I.\n\n\"My, umm...\"\n\n\"Your bare pussy?\"\n\n\"Yeah. I wasn't sure if you'd like it.\"\n\n\"Fuck yeah I liked it.\"\n\n\"So it seemed,\" I giggled. \"Just making sure.\"\n\nCurt nodded dazedly as he lay beside me.\n\n\"And I take it I didn't disappoint?\"\n\n\"You never disappoint,\" I said matter-of-factly.\n\n\"Ha! Guess you haven't known me long enough then,\" Curt said darkly. \"What about yesterday?\"\n\n\"I forgave you for that,\" I reminded him.\n\n\"Yes, well let's hope I never need your forgiveness again. God knows I'll try.\"\n\nI nodded, reaching forward and touching his cheek.\n\n\"That's all I can ask.\"\n\nCurt gave me a look then, a new one I couldn't interpret.\n\n\"Stay,\" he ordered as he gently removed my hand from his cheek.\n\nHe rolled away from me then, totally and unapologetically naked as he rummaged through his nightstand for something.\n\nI licked my lips distractedly as I observed his truly mouthwatering behind. What did this man do to possess such an amazing body?\n\nBut my dirty thoughts were totaled as he turned to me, a small black box in his hand.\n\nWhat the ff....\n\n\"I imagine this is probably the worst way I could do this. God knows I'm a fuck up. But what you said, about accepting that I will try...hell, I just can't wait one more second.\"\n\nCurt crawled toward me on the bed, his face apprehensive. I simply stared at him slack-jawed, hoping he wouldn't take it the wrong way.\n\n\"I will try Bethany. I will try every fucking day. To make you happy. I will love you as much I know how, with all that I am, if you'll have me.\"",
        "I lay there, trembling, my mind awhirl. Here we were naked, and he was...proposing?\n\nThe pained look on his face was what finally snapped me out of it.\n\n\"Will you Beth? Will you marry me?\"\n\n\"Yes,\" I whispered. \"Curt, yes.\"\n\nI reached for him, my hand trembling in mid air.\n\n\"Thank Christ,\" Curt choked as he captured my hand in his, kissing it, pulling me from my prone position into his arms and holding me tight. So tight I could scarcely breathe.\n\nThere was nothing for me to do but cry, which of course only made him hold me tighter, stroking my hair as he tried to soothe me.\n\n\"Sweet Bethany, sshhh...\" he cooed as my sobs slowly subsided.\n\n\"I love you Curt,\" I murmured as I pulled back to look him in the eye.\n\n\"I love you too Beth,\" he smiled tenderly before taking my left hand and feeding a ring onto my finger.\n\nI shook my head as I stared at it. It was blinding. Stunning.\n\n\"You don't like it?\"\n\n\"Curt,\" I gushed. \"I love it. I love it!\"\n\n\"Again, thank Christ.\"\n\n\"When?\"\n\n\"When what?\"\n\n\"When should we get married, silly!\" I giggled.\n\n\"Well I have some business that needs tending to this week, but I'd say if you're okay eloping, how about next week?\"\n\nEloping. \n\nIt wasn't the worst idea, given the circumstances. But I'd always dreamt of walking down the aisle with my father.\n\n\"As much as I would love to take the easy road Curt, I think I need to tell my parents, get their blessing, and if they're in agreement, organize a traditional wedding at our family's church,\" I explained.\n\n\"Naturally,\" Curt nodded. \"I'm sorry, again. I wasn't thinking.\"\n\n\"You were thinking with your heart Curt,\" I smiled. \"And I love you for it. But I want to do this right.\"\n\n\"Whatever you want baby. Just tell me, and we'll do it.\"\n\n\"Next week then, I'll introduce you to my mom and dad.\"\n\n\"Great,\" Curt smiled, his eyes lighting up suddenly. \"You know, I'm pretty sure we play the Timberwolves next week. What do you say we all go see the game together?\"\n\n\"Curt, if that doesn't put you in my parents' good graces, nothing will,\" I grinned, bouncing excitedly on the bed before tackling him.\n\nCurt laughed as I forced him down on the bed, using all my body weight to do it, and it was still no easy task.\n\n\"I love you,\" I reminded him as I straddled his belly.\n\n\"I've noticed,\" Curt grinned, stroking my tummy affectionately.\n\nI reciprocated, putting my hand on his fuzzy chest, feeling his heartbeat.\n\n\"Make love to me Curt. Show me again.\"\n\n---\n\nTo be continued..."
    ],
    "authorname": "joodle",
    "tags": [
        "impregnation",
        "bdsm",
        "daddy dom",
        "ddlg",
        "bdsm romance",
        "bondage",
        "oral",
        "lactation",
        "adult breastfeeding"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/dwelling-in-desire-ch-15"
}
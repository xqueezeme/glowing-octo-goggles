{
    "title": "The Vampire and the Goth Ch. 14",
    "pages": [
        "After listening to Carlos talk about how Janek had beaten my sister so badly, it was hard to care about him being carried off by an angry werewolf. But for some reason, David thought I should give a shit.\n\n\"What do you want to do?\" David asked.\n\nI drew my hands through my hair. \n\n\"What do I want to do? Janek attacked my sister and her boyfriend. 600 years before that, he stood by and watched me get tortured and didn't help me. Instead, he killed my sire for stopping my torture and saving me. So pardon me if I don't feel too worried that he may have been carried off by a rogue werewolf.\"\n\nDavid raised an eyebrow at me. \"Really?\"\n\n\"Really. I couldn't give a shit if he dies, just so long as it's slow and painful,\" I said coldly.\n\nJadwiga stood up.\n\n\"He's my twin,\" she said angrily. \"And he's your brother too.\"\n\n\"No, he's not my brother. Not anymore,\" I said, with so much emotion I surprised myself.\n\nJadwiga looked like I'd slapped her. The pain of Janek's betrayal was written across her face, and yet she didn't want to hear any angry words about him. I tried to understand, but I couldn't because he had betrayed me, too.\n\n\"You don't understand, Stosh. He's my twin. He's half of my soul. He's -- \" then she broke down, sobbing. \"He's my twin brother! How could he do that to me, Stosh? How?\"\n\nI didn't know what to say to her, I just held her and started to tear up myself.\n\nEveryone was silent for a time, then David spoke up.\n\n\"He's the man who betrayed your sacred bond because he thought you'd betrayed him. He didn't give you a chance to speak for yourself. He didn't even ask you what was going on before beating you half to death. The fact that he's your twin makes what he did worse, but it would have been horrible anyway,\" David said.\n\nJadwiga looked at him, startled that he'd intruded on our conversation.\n\n\"You don't know what you're talking about,\" Jadwiga said angrily.\n\nDavid smiled gently at her and spoke in a soft tone. \"I do know what I'm talking about. I saw what your brother did to you. Stosh and I both had to give you blood because of how he treated you. If you had been human, he would have killed you. So, I'm going to give you my opinion, whether you like it or not. I've earned that right, at least.\"\n\nWe were quiet for a moment, and Carlos looked at Elizabeth. \"What's happening? Can you understand what they're saying?\"\n\nElizabeth shook her head. \"I don't know. David?\"\n\nDavid smiled. \"Jadwiga and Stosh are having a disagreement about their brother. And I'm giving my opinion because I'm a nosey nelly and I don't know when to shut up.\"\n\nJadwiga and I both chuckled uncomfortably, and Angus muttered, \"That's for damn sure.\"\n\nCarlos seemed to absorb David's words for a moment. Then he stood up and pulled Jadwiga into a strong embrace. \"Baby, I agree with your brother, and with David, I think. If Yanet ever touches you again, I'll kill him myself.\"\n\n\"You're a good man, Carlos,\" Angus said.\n\nJadwiga smiled. \"His name is JANEK, with a K, and I doubt you could kill a vampire.\"\n\nCarlos smiled and locked eyes with me. \"No, but I think I can get Sta -- no, STOSH, to help me.\"\n\nI smiled at Carlos. \"Absolutely.\"\n\n\"And you got his nickname right!\" Elizabeth said.\n\n\"Oh. That's a nickname? You mean there's more to your name?\" he said, a look of panic crossing his face.\n\n\"Oh my, yes,\" David said. \"His full name is Zdzis\u0142aw Wawryniec Szymanski.\" \n\nThe color left Carlos's face as David gave the least pronounceable name he could come up with. I had to turn my head to keep from laughing, while David continued with a straight face. Carlos sat back down with a thud.\n\n\"It's spelled just like it sounds, Z d z I s \u0142 a w W a w r y n i e c S z y m a n s k i.\"\n\nWhile he was spelling it out, my eyes caught Jadwiga's and we both collapsed in laughter.\n\nElizabeth smiled at Carlos. \"You know he's fucking with you, right?\"\n\nCarlos caught his breath and started to laugh as well.\n\n\"Okay, okay, so that's not really your name.\"\n\nJadwiga kissed him. \"God, you're so cute!\"\n\n\"No, that's not my name, my full name is Stanislav Szymanski. And our names really aren't that complicated. For instance, Wawryniec is just Polish for 'Lawrence,'\" I said, trying to be helpful.\n\nHis eyebrows shot up. \"Oh shit! You're Polish! All this time I thought you were Russian!\"\n\nFor some reason, that made all of us laugh even harder.\n\nDavid had tears coming out of his eyes as he said, \"And for the record, Angus is Scottish, not Irish.\"\n\n\"Well I knew that,\" Carlos said.\n\nAngus, still chuckling, said, \"And how did you know that, laddie?\"\n\n\"Because you sound like Shrek,\" Carlos said.\n\nEverybody collapsed into gales of laughter again.\n\nAfter we finished laughing, Angus' face grew serious.\n\n\"To be blunt, your brother may be a right bellend, but a rogue werewolf is a danger to everybody, and we need to take action.\"\n\nI sighed, knowing he was right.\n\n\"We should call Alpha Collier, the head of the local pack. He needs to know what's going on in his territory and he may be able to help us.\" Laura said from the dining room, where she had sat down with the plate Elizabeth made for her.\n\nAngus turned toward Laura. \"How well do you know Alpha Collier?\"\n\n\"I've only met him a couple of times, but I have his phone number. I'm sure that I can arrange a meeting, once I tell him that there may be a rogue werewolf in the area,\" Laura said.\n\nAngus nodded. \"That's a good idea. He may even be able to help us find him.\"\n\nI looked at Angus. \"Us?\"\n\nAngus stiffened. \"Yeah, us. All of us. You're not going to let David deal with this alone, are you?\"\n\nDavid turned toward Angus with an incredulous look on his face.\n\n\"David? You mean me? You expect me to find and stop a rogue werewolf?\" \n\nAngus nodded with a smile. \"Yes, you.\"\n\n\"Oh, I don't think so, skirt boy.\"\n\nAngus smiled at David and didn't say anything. David tightened his jaw, closed his fists, and said, \"No. What makes you think I'm going to do it?\"\n\nI laughed, watching David's internal struggle play out on his face. No one who is mated to a werewolf can refuse their mate once they've set their mind to something -- the connection is just too strong, even for people who aren't werewolves themselves.\n\nAngus continued to smile at David without saying anything. I could see the tension in David's shoulders as his jaws tightened. \"I'm not doing shit,\" he said roughly. Angus's smile never changed and he never said a word. Finally, David's shoulders slumped. \"Fuck. Fine. Let's go hunt a rogue. Goddamn it.\"\n\nI laughed, and David shot me a dirty look. \"You know I'm dragging you along for the ride, right?\"\n\nI shook my head. \"He's my brother. It's kind of my fault he's a vampire in the first place. I've been on this ride since the very beginning.\"\n\n\"How are you feeling, Sis?\" Elizabeth asked Laura.\n\nLaura smiled. \"I'm feeling much better, especially after Alex gave me some blood. I don't feel like I smoked a pack of old cigarettes anymore. Would you mind if I took a shower after I eat? My hair still smells like smoke.\"\n\n\"No problem. There should be fresh towels in the hall closet,\" I smiled.\n\nLaura nodded and went back to eating.\n\n\"Czy to kobieta, kt\u00f3ra pr\u00f3bowa\u0142a \u015bledzi\u0107 mnie w barze?\" Jadwiga said, asking me if Laura was the woman who tried to follow her out of the club before the fire.\n\n\"Tak, jest siostr\u0105 El\u017cbieta,\" David said. Elizabeth frowned when she heard her name. Immediately, I felt bad for her.\n\n\"Guys, it's rude to speak Polish in front of people who don't speak the language. Elizabeth, Jadwiga asked if Laura is the woman who tried to follow her out of the club, and David confirmed that she's your sister.\"\n\nElizabeth kissed me sweetly on the cheek. \"Thank you.\"\n\nI smiled at her as Jadwiga said, \"I don't mean to be rude, but I hope you can understand that sometimes it's just nice to speak with my brother in our native language.\"\n\nElizabeth smiled back. \"I get it, and I don't mind. In fact, I'm hoping you can help me learn to speak Polish. Maybe Carlos and I can learn together.\"\n\nCarlos raised his eyebrows. \"I suck at languages.\"\n\nJadwiga laughed. \"Vampires are patient. We'll teach you.\"\n\nI smiled, and then I had a realization. \"Jadwiga and I are native Polish speakers, but David learned Polish as a second language. I'll bet he can help us teach you Polish even faster.\"\n\n\"There you go with the 'us' again,\" David said, in mock exasperation. \"First you expect me to help you find a rogue werewolf, then you expect me to help teach someone Polish. What next?\"\n\n\"That's pretty much it,\" I said. \"For now.\"\n\nDavid rolled his eyes.\n\nJadwiga smiled. \"You're the one who wanted to be involved in our family drama.\"\n\nDavid rolled his eyes again as Angus cleared his throat and said, \"Speaking of rogue werewolves, we should talk about how we're going to approach the local alpha. Werewolves don't trust vampires, to put it mildly. So, since Carlos and Jadwiga are going to be doing most of the talking, Stosh should be there to act as a buffer.\"\n\nJadwiga smiled, and said, \"You're a werewolf celebrity, aren't you?\"\n\nAngus nodded. \"He's the vampire that killed his own to save some of ours, and who lived with a pack for almost 100 years. Everybody's heard of him.\"\n\n\"Actually, it was closer to 50 years,\" I said, trying to not sound like I was humble bragging.\n\n\"It's amazing, no matter how long it was. Every other bloodsucker thinks we're stupid dogs who are nothing but prey. But you stood up for us and you stood with us. That's really remarkable,\" he said. Then he turned to David. \"I'm sorry to use that kind of language.\"\n\nDavid laughed. \"It's true, though. Most vampires are bigoted against werewolves, including me, or at least I was. Stosh is different, so it's no wonder you guys love him.\"\n\nElizabeth put her arm around my neck. \"Plus, he's just a lovable guy,\" she said, as she kissed me on the cheek.\n\nIt was late afternoon when Elizabeth reached across the bed for me. The light coming in from the windows was just beginning to darken as she stroked my shoulders gently and moved her hands to run through my chest hair. She rolled me over and began to lightly nibble my jawline and throat, softly waking me up and turning me on at the same time. I didn't open my eyes to look at her, but I'm sure she could see my smile as she climbed on top of me. I could feel her naked breasts pressing up against my chest and she was kissing me in earnest now, trailing her lips from my hairline down my face, kissing my eyelids and cheeks, and brushing against my mouth.\n\nI cupped her face in my hands and held her to me, exploring her lips with my tongue and lightly teasing her mouth open. She began to moan softly and move her hips over my cock, which was now stiff and needed attention. I moved my hands to her head and combed them through her hair as I moved my pelvis to better work my cock inside her. Smiling, she realized what I was doing and sat up while I pulled her off me slightly and positioned myself. I was so hard it was almost painful, and as she sank onto my cock, I felt her velvet pussy open up to me, like a flower blossoming.\n\nElizabeth anchored her knees on either side of my hips and sat up, arching her back, and began to move onto me with a firm, steady rhythm. I cupped her breasts and tweaked her nipples as I felt her body squeeze and massage my cock. \n\nShe smiled down at me. \"I want more.\"\n\nI grabbed Elizabeth's shoulders and flipped her over until I was on top of her. I put my teeth on her throat lightly and I swallowed her blood as I began to thrust in and out of her moist heat.\n\nElizabeth's hips moved up to meet mine as we shared a throbbing rhythm that made it impossible for me to think of anything but the hot, wet squeeze of Elizabeth's body. My slow, relaxed strokes began to speed up and became more forceful until her body tightened and convulsed around me and I exploded into her. Her moans and cries made everything so much more intense. I remained deep inside of her until my throbbing subsided into light twitches. I rolled over and pulled her onto my chest.\n\n\"God how I've missed this, pi\u0119kna dziewczyna,\" I said, softly kissing the top of her head as she giggled.\n\n\"It's only been two days,\" she said.\n\n\"Two days is too long. What is it Angus says? Oh yeah,\" I said, putting on a broad Scottish accent. \"She's mah mate. Ye cannae expect me tae sleep wi'oot mah mate.\"\n\nElizabeth laughed. \"I love you, but that was the worst Scottish accent I've ever heard!\"\n\n\"Well, it's the sentiment that counts,\" I said, laughing with her.\n\nLaura had gone home and taken David and Angus with her. My apartment felt less crowded even though Carlos and Jadwiga were still there. As we stepped out of my bedroom and into the hall, the apartment was quiet except for the sound of what had to be a Polish lesson.\n\n\"Kocham Ci\u0119,\" a male voice said.\n\n\"Koh...ham chey yad-Wee-guh,\" Carlos said.\n\nI smiled. It was nice to hear him trying to learn our language, but the older brother in me wanted to mess with him. Elizabeth seemed to read my mind and she grabbed my hand. \n\n\"Don't give him too much crap. He's trying.\"\n\nI sighed. She had a point. \"Okay.\"\n\nI walked into the living room.\n\n\"Kocham ci\u0119 za du\u017cy facet!\" I said, with a big smile.\n\nCarlos rolled his eyes at me. \"What does that mean?\"\n\nI laughed. \"It means 'I love you too, big guy!'\"\n\n\"Please don't mess with me. I'm trying to impress your sister, Yad-wee-guh,\"\n\nI had to hand it to the guy. It's hard to learn a language over the internet, but he was trying. \n\n\"I can appreciate that. You've got the 'I love you' part pretty close, but the 'w' should sound more like a very soft 'v'. And don't pronounce the 'g' so hard. It should sound like 'yad-VEEH-jha'.\"\n\n\"yahd-VEE-juh,\" he said, smiling at me.\n\nI nodded. \"That's closer. It's going to take time, but you'll get there.\"\n\n\"Your sister's worth the effort,\" he said.\n\nI put my hands over my heart and fell on the couch in a fake faint. \"Boyfriend... too good! Can't handle... the worthiness!\"\n\nCarlos and Elizabeth laughed as she pulled me up and handed me some coffee.\n\n\"Thanks, babe,\" I said, kissing her.\n\nShe smiled. \"You should be thanking Carlos, he's the one who made a fresh pot.\"\n\nJadwiga came into the living room, sat on the arm of Carlos' chair, leaned over and kissed him. \"Kocham Ci\u0119 Karol,\" she said.\n\nElizabeth looked at me, \"Karol?\"\n\n\"It's Polish for Charles,\" I said.\n\n\"Kocham Ci\u0119, Jadwiga,\" he said, and she smiled in delight, and looked at me, \"He is getting so good!\"\n\n\"He really is,\" I said out loud, and kissed Elizabeth's cheek while whispering into her ear, \"...but you're better.\" She blushed and smiled at me. \n\nWhen we arrived at Laura's house, I found that Laura and Angus had really gone out of their way for the Alpha's visit. The grill on the deck was full, there were fresh flowers and plenty of beer. The house was full of the wonderful scents of baking bread and grilled meat.\n\nElizabeth was impressed. \"Wow! This is amazing!\"\n\nLaura smiled proudly. \"We decided to really turn it out tonight because Angus wants to make a good impression.\"\n\nAngus said, \"I've decided to move here to be with David, so I'll need to join Alpha Collier's pack.\"\n\nWerewolves are social creatures. Although werewolf packs don't usually share a den anymore, they still live close together and try to spend as much time with each other as they possibly can. The werewolf way of life is almost the exact opposite of how vampires live. The urge to be so close together seems uncomfortable to me, but if it makes them happy, who am I to judge?\n\n\"Congratulations!\" Elizabeth said with a happy smile and hugged both Angus and David. \"But why are you joining this pack? Why isn't David joining your pack?\"\n\nAngus said, \"David wants to stay in the United States. And werewolves can't live solitary lives. We need to be close to one another, and even if we don't share a den, we still spend a lot of time together socially. So I need to be accepted by the pack, and to be accepted by the pack, I have to be accepted by the alpha. If he accepts me, everyone else will fall in line.\"\n\n\"And apparently, having a vampire for a mate is considered something of a drawback. I can't imagine why,\" David said sarcastically. \"So, bring on the prime rib.\"\n\nI was confused. \"You know that David doesn't really live here here, right? That's why he's been staying in my apartment.\"\n\nAngus laughed. \"Marriage is full of compromises. There isn't a pack near me and werewolves are very social creatures, so if I can't live with a pack I at least have to be able to hunt and socialize with them often.\"\n\n\"Also, Angus isn't the only one who hunts. It turns out that David is something of a manwhore and already went through the male population of his city. He's moving so Angus doesn't have to deal with his conquests!\" Laura said, with a wink.\n\nDavid smiled sheepishly, but Angus laughed.\n\nElizabeth asked, \"Why would that bother Angus? Aren't werewolves kind of promiscuous before they find their mates?\"\n\nAngus said, \"We are, and I'm not worried about running into one of his old fuck buddies. He's the one who's worried about it, and embarrassed by it.\"\n\nDavid sounded almost shy as he said, \"I'm a changed man, but I've had a checkered past, and I'm ready to leave it all behind. I could use a fresh start. And why not move closer to my best friend while I'm at it?\"\n\n\"Are you going to move up to the pack lands? Or to the apartment building they own in town?\" Laura asked.\n\nAngus and I started to laugh, and David said, \"Oh no. Oh, God no. We're looking at a condo in midtown, near the park.\"\n\n\"Stosh, are they any openings in your building?\" Elizabeth asked.\n\nAngus laughed. \"We're going to need a little more space for visitors, and I need a place to run, even if I can't run as my wolf very often. We're looking for a place that's right off the park.\"\n\nDavid made a loud, exasperated sigh, but I could see the peace in his eyes. It made me happy knowing that he'd found someone that was good for him.\n\nPlus, I felt pretty sure I wouldn't have to help kill this boyfriend.\n\nAngus pricked up his ears. \"Alpha Collier just pulled up.\"\n\n\"Well, that's our cue. Bitsy, why don't you and David go downstairs? I've got some chick flicks we can watch. I'm going to act like a hostess for a minute, then I'll be down as soon as I can,\" she said, smoothing her cardigan as David and Elizabeth stood up to head downstairs.\n\nJadwiga said, \"I get why David's leaving, but why are Elizabeth and Laura going too?\"\n\nElizabeth laughed. \"Werewolves kind of freak me out. And Laura just broke up with a member of their pack, so...\"\n\n\"So I'm not going to make it any harder for Angus than it already is!\" Laura smiled.\n\nLaura opened the door and let in Alpha Collier and his Beta, Caleb Parker. Alpha Patrick Collier was a large man. He was nearly 7 feet tall and everything about him seemed designed to intimidate, except his face, which was so soft it was almost feminine. Patrick seemed to have a permanent half-smile, like the Mona Lisa. Other men would have grown a beard or cultivated a scowl, something to make themselves look tough, but it didn't seem to bother Patrick. I guess when a man is that big, he doesn't have to worry about people thinking he's weak.\n\nCaleb Parker, on the other hand, seemed to have a permanent frown. Like most werewolves, he was a large man, not as large as his alpha, but he still had a considerable size. He had piercing blue eyes and blonde hair that didn't seem to suit him at all -- he had the face of a brooding, borderline angry man, but his hair and eyes made him look more cute than scary.\n\nAngus greeted Patrick and Caleb by hugging each man and scenting their necks, a typical werewolf gesture that I was sure would have made David jealous. ",
        "\"What's all this?\" Patrick said. \"Is that grilled meat I smell?\"\n\n\"It is, and a lot of it, too,\" Laura responded. \"Angus thought that you would appreciate a good meal. We have bread and beer as well.\"\n\nCaleb gave a sarcastic smile. \"Michelle sends her regards.\"\n\nLaura didn't miss a beat. \"Tell her I say hi. Now my sister and Stosh's best friend are also visiting, so I'm going downstairs to hang out with them and to watch a movie. I trust you gentlemen will be okay without supervision for a while?\" she said, in a light-hearted tone.\n\n\"Aye, Lassie, thank you for the space,\" Angus said, as he kissed her cheek.\n\nAfter Laura left, Patrick turned to me with a grin and said, \"I take it you're the Polish werewolf lover?\"\n\n\"Well, I am Polish, and I count werewolves among my friends. You can take from that what you will. My name is Stanislav Szymanski, but you may call me Stosh.\"\n\nAs Patrick shook my hand, he turned toward Caleb and said, \"This is the vampire Dmitri is always bragging about knowing.\"\n\n\"Ah, okay,\" Caleb said, shaking my hand as well. \"You lived with his original pack for a while, correct?\"\n\n\"Not his original pack. His family had to move to Denmark during the Napoleonic Wars, and I came with them.\"\n\nCaleb said, \"You had to leave because you killed some vampires, right?\"\n\nI shrugged. \"Well, partly. But also, I was sick of Napoleon and his wars, and decided I needed a change.\"\n\nCaleb nodded.\n\nPatrick noticed my sister and her boyfriend. \"And here we have a vampire and a human?\"\n\nJadwiga stood up. \"Yes, sir. I'm Jadwiga Szymanski, Stosh's sister. And this is my boyfriend, Carlos Herrera.\"\n\nCarlos stood up to shake hands with Patrick and Caleb.\n\n\"So are you her thrall?\" Caleb asked.\n\nPatrick and Angus both growled at Caleb's insult, but Carlos seemed to take it in stride. \"No, sir. I'm her boyfriend. But since I live to see her smile, I guess you could say that I'm under her spell.\"\n\nWe laughed at that. Patrick slapped him on the back and winked. \"You've got to watch out for that P.O.P, son. Power of the Pussy. The Power of the Pussy has brought down many a good man!\"\n\nJadwiga had a pained smile pasted on her face and Angus winked at her. She was clearly made uncomfortable by Patrick's tasteless comment, but she wanted to make a good impression, so she took breath and ignored it.\n\n\"Gentlemen, we have a lot to discuss tonight. Why don't we have a bite first?\" Angus said as he ushered everyone out to the deck.\n\nDinner occurred, as most werewolf meals do, without a lot of talking. Patrick, Caleb, and Angus easily ate 7 pounds of meat while Jadwiga, Carlos, and I made small talk about the weather and local politics.\n\nAs soon as the meal was over, Patrick immediately turned to us and said, \"So Laura said that you believe there's a rogue werewolf in town.\"\n\nI looked at Angus and he nodded back at me, clearly meaning for me to start.\n\n\"Yes, I believe there is.\"\n\nPatrick and Caleb looked at each other and chuckled.\n\n\"And what makes you say that?\" Caleb asked.\n\n\"Because I was attacked by one,\" Jadwiga answered.\n\nPatrick and Caleb looked at each other again, but this time there were no chuckles.\n\n\"Explain,\" Patrick said.\n\nAs Jadwiga and Carlos told their story, Angus retrieved his \"go\" bag.\n\nWerewolves usually time their changes to make sure that they aren't going to be seen by humans. But unless a werewolf has the time and space to change out of their clothes first, the clothes that they're wearing on their human body shape will be shredded. That leaves the werewolf with two options -- walk around as a naked human or worse, as an extremely large wolf. Because of this, werewolves who live among humans usually carry a bag or backpack of clothes to change into when they shift back into a human shape. For some reason unknown to me, they call it a go bag. \n\nWhile Carlos finished talking about seeing a large, bi-pedal wolf carrying Janek out under an arm, Angus opened his backpack, obviously anticipating the next question.\n\nCaleb looked at Carlos for a long time. \"How can you be sure of what you saw? You said that the vampire had beaten you badly and you felt dizzy and sick even after you regained consciousness. So with all due respect, young pup,\" he said, in a condescending tone with no respect whatsoever, \"What makes you so sure you saw a werewolf attack your girlfriend and carry off her brother?\"\n\nBefore Carlos could respond, Angus stood up, holding a large Ziploc bag.\n\n\"This is the blouse Jadwiga was wearing when she was attacked.\"\n\nAngus opened the bag and pulled out Jadwiga's blouse. It very clearly had claw marks on the front and was thoroughly saturated with Jadwiga's blood.\n\nPatrick put out his hand. \"May I?\" he asked. Angus handed him the blouse, and he and Caleb sniffed the claw marks carefully.\n\n\"Just like the last time,\" Caleb said quietly, as Patrick nodded.\n\n\"What's just like last time?\" Angus asked.\n\nPatrick sighed. \"This isn't the first time we've seen clawed clothing in our territory.\"\n\nCaleb interjected. \"And those other times, there was also too much vampire blood to get the scent of the wolf that clawed it up.\"\n\nAngus looked confused. \"Other times?\" He shot me a worried look.\n\n\"Excuse me, am I to understand that this has happened before?\" I asked.\n\nPatrick looked uncomfortable. \"Yes, it's happened before. Not for several years though.\"\n\nI quoted Patrick's words back to him. \"'Not for several years though,'. Does that make some kind of difference?\" \n\nHe shrugged. \"Well, no...\"\n\nJadwiga clenched her hands into a fist. \"So who's doing it? And where's my brother?\"\n\nCaleb cleared his throat. \"With all due respect to your family, you should be aware that your brother may have invited this punishment. If he's been preying on our people then he must be stopped. We don't support vigilantes, but - \"\n\nJadwiga shook her head, saying, \"No. We live almost 1,000 miles to the north. My brother has never been down here before. He hates the climate and he and Stosh aren't on speaking terms. The rogue is mistaken about who he took.\"\n\n\"That's impossible. Werewolves are never wrong about things like that,\" Caleb said. \"If a werewolf took your brother, he did it for a reason.\"\n\nAll of a sudden, I had a realization. \"Carlos, your brother's a vampire right?\"\n\n\"Yeah. He's part of a coven here in town,\" Carlos said.\n\n\"Does he go over to your house often?\" I asked.\n\n\"Well sure. Just because he's a vampire doesn't mean we're not close... Wait.\"\n\nPatrick and Caleb looked at each other, and Caleb said, \"Even if he got the wrong vampire, what's that to us?\"\n\nI turned to Carlos again. \"How many people are in your brother's coven?\"\n\n\"We have over 100 members.\"\n\nPatrick's eyebrows shot up, and Caleb said, \"I've never heard of a coven that big.\"\n\n\"We're organizing to shut down Brother Humble, that anti-vampire preacher, and a lot of vampires want to help.\"\n\n\"Carlos is still human because he's a double-agent. He works for Brother Humble, but he's gathering dirt on him to bring him down,\" Jadwiga said proudly. \n\nAngus asked, \"How many wolves are in your pack?\"\n\n\"About 200 if you count the people living in the apartments in town,\" Caleb responded. Patrick looked nauseous.\n\n\"And here's another thought for you -- have you lost any of your pack to the vampires recently?\" Angus asked.\n\nPatrick leaned back and closed his eyes. \"We haven't lost any of our own to the vamps in almost 100 years.\"\n\nI asked, \"When was the last time you had someone go rogue?\"\n\n\"Since the last time we lost someone to the vampires,\" Patrick said.\n\nWe were all silent for a moment, doing the math. Werewolves love to breed, so the 200 wolves Patrick had in his pack no doubt included several children. Meanwhile, the vampires were all adults. Currently, they were focused on Brother Humble, but vampires love the taste of werewolves and a rogue werewolf who was targeting them would be just the excuse some would be looking for to go hunting.\n\n\"Fuck. This shit could start a war,\" Caleb said.\n\n\"I think it already has. The news tonight had a report about a body found near the river with large, vicious animal bites,\" Laura said, as she stepped onto the deck.\n\nPatrick ran his hand over his face and through his hair. Angus looked sick to his stomach. Jadwiga looked shocked. Meanwhile, Carlos pulled out his phone.\n\n\"Carlos? What are you doing?\" I asked.\n\n\"I'm calling my brother. If this is as messed up as you seem to think it is, I think our elders should meet with Patrick. Maybe it's time for vampires and werewolves to work together.\"\n\nCaleb scoffed. \"We don't work with vampires.\" Then he looked at me. \"I mean, we don't usually work with vampires.\"\n\nPatrick shook his head. \"He has a point, Caleb. If the coven sees that we've noticed this and we're willing to deal with it, maybe we can avoid trouble. Will you help us, Stosh?\"\n\nI smiled. \"I will. But I'm not the only one on your side.\"\n\n\"Yes, there's your sister as well,\" Patrick said.\n\n\"Not just my sister. There's also my best friend, who's downstairs.\" I looked at Angus, wondering if it was okay to say he's mated to a vampire.\n\nCaleb scoffed. \"How can you be sure your friend will be on our side? The rouge attacked your sister, so we can trust her, but other vampires? I'm not so sure.\"\n\nAngus nodded at Laura, and she smiled. \n\n\"I'll bring David up here and you can speak with him yourself.\"\n\nA few moments later, the sliding glass door to the deck opened again and David stepped out. Angus took his hand and kissed him.\n\nDavid looked surprised. \"Are you sure?\" he whispered.\n\n\"Aye,\" Angus whispered back.\n\n\"Gentlemen, I'd like to introduce you to my mate, David Freeman.\"\n\nPatrick and Caleb looked shocked. \"I -- I mean, our pack -- we've never had... Can vampires and wolves even mate?\" Caleb asked.\n\nI smiled. \"Apparently they can, because Caleb and Angus are mated.\"\n\nPatrick remained stoic, and I decided to use my leverage.\n\n\"David is my brother. You've asked for my help, and I'll give it to you but that means you also have to accept help from my sister and my brother.\"\n\nI was prepared to tell Patrick that he'd be a damned fool to not use all of the resources available to him, but I didn't need to. He grinned and stood up. \"Just because we've never heard of a mating between a vampire and a werewolf doesn't mean it can't happen. Congratulations, gentlemen, and welcome to our pack!\" \n\nPatrick hugged Angus and David, who looked overwhelmed.\n\n\"I've just joined a werewolf pack. Wow.\"\n\nI laughed. \"It's not so bad. They do love to hug though.\"\n\nAngus and Patrick laughed, but Caleb had a serious face.\n\n\"You know, some of our members are going to have a problem with this.\"\n\nDavid laughed. \"I'm a black man. I've lived through a whole bunch of really nasty bullshit. I can deal with a few people who have an attitude.\"\n\n\"Let's hope so,\" Caleb asked, with a skeptical frown.\n\nSuddenly, Carlos spoke up.\n\n\"Alpha Collier, I've got the head of our coven on the phone, and he'd like to have a word with you.\"\n\nPatrick's eyebrows shot up, but he took Carlos' phone.\n\n\"Patrick Collier here... Okay... It sounds like you know what we know... We don't know who's responsible for the assault on Carlos and his girlfriend, but we're very concerned and we need to address this before anything else happens... I agree we should meet on neutral ground to discuss the situation... Hold on for a moment,\"\n\nPatrick looked at Laura, and before he even had a chance to ask, she was nodding.\n\n\"Yes, it's okay to use my house as neutral ground tonight,\" she said with a smile.\n\nPatrick gave a relieved sigh. \"We're meeting at a human's house... There are three vampires here and three wolves... Okay, I'll have Carlos give you the address.\"\n\nPatrick handed the phone to Laura.\n\n\"Okay, the coven's leader should arrive here in an hour with Carlos's brother,\" he said. Then he turned to Carlos. \"That was good work. I appreciate your quick action on this.\"\n\nCarlos blushed. \"I'm happy to help. Meeting David and seeing how well he meshes with Stosh and Angus makes me hope we can turn a corner between werewolves and vampires.\"\n\nCaleb laughed. \"Well you're quite the dreamer, aren't you?\"\n\nPatrick looked at his beta, and said, \"That's how the future happens, Caleb - one dreamer at a time.\"\n\n \n"
    ],
    "authorname": "JosephineKuo",
    "tags": [
        "gay romance",
        "gay vampire",
        "gay werewolf",
        "vampire",
        "vampire lovestory",
        "vampire romance",
        "vampire sex",
        "vampire werewolf lovestory",
        "werewolf",
        "werewolf romance"
    ],
    "category": "NonHuman",
    "url": "https://www.literotica.com/s/the-vampire-and-the-goth-ch-14"
}
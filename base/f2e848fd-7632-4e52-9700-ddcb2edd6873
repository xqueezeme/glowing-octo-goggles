{
    "title": "Tied Up in Knotts Ch. 19",
    "pages": [
        "I woke up because my bladder was about to explode. I'd been so busy with Nash last night that...well, going to pee hadn't been a priority. When I tried to get out of bed, I was stopped by a set of strong arms and a deep groan of disapproval.\n\n\"I really have to pee,\" I said. Nash's arms only held tighter as he burrowed into my back. As much as I wanted to relieve myself, Nash refusing to let go was better. \"I'll be right back. I promise.\"\n\nNash let go and I hurried to the bathroom. I didn't even wash my hands for thirty seconds when I was done but I did manage a super quick brushing of my teeth.\n\n\"Oh jeez, you're freezing,\" Nash complained when I got back in bed but used his legs to warm mine. Then he rolled on top of me and used his whole body.\n\nHe took the blankets and tucked them around us, smiling at his handy work. God, he was gorgeous. Truly, there wasn't a man on the planet more attractive than him. And the way he looked as he tried to bundle us up, with his crazy blond hair all messed up and sleep wrinkles on his face. I was done for. I'd always been done for when it came to him.\n\nWhen he had us good and burritoed, he hiked my legs up so he was pressed against me in all the right spots. \"We're going to the store today, right?' he asked as he gently rocked himself against me, reminding me why we wanted to get to the store. As if I'd forgotten.\n\n\"Yes, first thing.\"\n\nNash bit his lip and smiled. My dick twitched. He smiled brighter. My dick twitched again. God, he was absolutely-out-of-this-world-insanely hot.\n\n\"It doesn't have to be the first thing. It can be the second thing.\"\n\nI thought I knew what he was implying but when I pulled him against me so we could frot a little, he shook his head all sexy-like and pulled away. \"I meant breakfast.\"\n\n\"That can be the second thing.\"\n\nNash leaned down and kissed me. \"Breakfast first, then store, then\u2014\" you know...\n\n\"Or...This first, breakfast second, store third, then\u2014\" you know...\n\n\"It will be better if we hold off until later.\"\n\nBut then he kissed me and I was sure that he changed his mind about breakfast being first until Nash lifted himself up.\n\n\"Let's go to breakfast.\"\n\nI groaned like a child. \"I don't want to.\"\n\n\"The sooner we eat breakfast, the sooner we can go to the store, and the sooner we go to the store, the sooner we\u2014\"\n\nI pushed Nash off me and was out of the bed so quickly I could hear Nash laughing as I jumped in the shower. When I got done, he was still lying in bed, beautifully naked.\n\n\"Up,\" I snapped my fingers at him. \"Time for breakfast.\" I grabbed his bag off the floor and threw it at him, making him laugh at my impatience.\n\nI didn't care. I was a warm-blooded man who'd been promised sex with Nash Cushman and I'd do whatever it took to make that happen.\n\nI was actually a little offended that he was being so casual about it. I mean, I was offended but not surprised. I knew I'd have to work on coming to terms with the fact that Nash would never desire me the way I desired him. It wouldn't be an easy task, even thinking about how unfair it was, was souring my perfect morning. Nash was still in bed, smiling, which was cute, except he was still in bed. He had not jumped out of bed and rushed to get ready as I had.\n\n\"Really?\" I asked, my irritation building.\n\n\"What?\"\n\n\"Nothing,\" I said, and I wanted to leave it at that but I didn't want to go the petty route. \"I have to come to terms with the fact that I will always want you more than you want me. And it sucks.\"\n\nNash sat up. \"What are you talking about?\"\n\n\"I embarrassed myself by how fast I got ready so we could go run the errand and you're still in bed.\"\n\nNash let out a deep breath and rolled his eyes. \"What would you have me do?\" he asked, then flipped the blanket back, revealing a very, very hard erection. \"Did you want me to get in the shower with you? Watch you get all wet and soapy? Then watch you dry off and get dressed? Then what? Go out and stand in front of your family like this? Because the Lord in heaven knows that doing those things wouldn't make this go away.\"\n\nOkay, so maybe he wanted me a little bit.\n\n\"Whatever,\" I mumbled, trying not to turn red out of sheer embarrassment/joy. \"Then get to it. I won't bother you.\"\n\n\"Oh nooo,\" Nash got out of bed and went straight to the door. \"We should go eat breakfast right now. No time to shower or get dressed. Then we can go to the store and come straight back.\"\n\n\"What are you doing?\" I laughed as he opened the door. I rushed forward and pushed the door closed. \"You're naked.\"\n\n\"I know, but we gotta go, now.\" Nash tried to open the door but I held firm. \"Excuse me,\" he scoffed. \"I'd like to go get condoms so I can have sex with this guy I really want.\" Nash leaned against the wall and looked at my brow, quietly asking if I was done being childish.\n\n\"Just go get dressed,\" I said, rolling my eyes for good measure.\n\nNash sauntered off, mumbling under his breath about how annoying men are. He grabbed some clothes and went to the bathroom. A few minutes later he came out with wet hair, still mumbling his annoyances.\n\nI went and wrapped my arms around him. \"I'm sorry.\"\n\nHe leaned back and cupped my face. \"You have nothing to apologize for. That insecurity comes from a raw and real place. You have every reason to feel that way. I'm just glad you told me because I want to know what I'm up against. And when I'm done dating the shit out of you, I want you to feel like we're on mutual ground.\"\n\n\"I want that, too.\"\n\n\"And you will.\" Nash stepped back and held out his elbow. \"For now, I'd like to ask you to accompany me to a light breakfast...if you know what I mean. Maybe some fruit or a little oatmeal. Then we could excuse ourselves and go for a drive. Maybe while we're out and about, we can run an errand.\"\n\n\"Then what?\"\n\nNash pulled me close, \"Then we can finally enjoy this shitty weather.\"\n\n****\n\nNash pushed me down the hallway, pressing himself against my back and laughing as we went. He was still hard and was doing a damn good job of making sure I knew it. Just before we rounded the corner into the kitchen, he shoved me. I stumbled into the kitchen where I caught everyone's attention.\n\nAnd I do mean everyone.\n\nAbby, Jane, Tia, and Jane's friend Mandy were in the kitchen packing stuff into tote bags. Cam and Sam were sitting at the nook feeding Penny. The twenty and under crew were at the big table eating. My brothers were outside with Rob and Lon cleaning up debris from the storm.\n\nNash came up beside me and looked around. \"What is everyone doing awake?\"\n\nI had no clue. It was still early, before eight. No one was usually up at this time. Nash and I usually had the kitchen to ourselves. Jane saw us first and looked relieved like we'd been holding everyone up.\n\n\"I was just about to come get you guys.\"\n\n\"Why?\" I asked. \"What's going on?\"\n\n\"We're going out,\" she smiled. \"We woke up to find the storm had passed so we're loading everyone up and getting out of the house for the day.\"\n\n\"I cannot wait,\" Abby added. Not everyone had been thrilled to be trapped inside. \"You guys should change. It's going to be hot today.\"\n\nNash and I had both worn pants and were holding our sweatshirts over our crotches.\n\n\"Do we have to go?\" Nash whispered so only I could hear.\n\n\"Grab some food and I'll check.\"\n\n****\n\nMy brothers stopped what they were doing and came to me the second I stepped onto the patio. They pulled me over to a few pool chairs that had been cleaned off and sat down. They looked like they had a lot to be proud about.\n\nLogan started, \"We know the last few days haven't been great so we decided to make up for it.\"\n\n\"We talked a lot last night and we're going to change how we treat you. It's killing us that we've done what we've done and it's led you to feel the way you do,\" Ryan said.\n\n\"We can't change the past but we can change the future.\"\n\n\"And that starts today.\"\n\n\"What does that mean?\" I asked.\n\n\"We planned a whole thing,\" Logan smiled. \"The whole day we're going to do things you love to do.\"\n\n\"We're going to start with a round of golf. It will be a little mushy because of the rains but we'll make it fun.\"\n\n\"Then we're going to go snorkeling.\" Logan smirked, \"We were going to go to the lava fields but we know you already did that.\" Ryan and Logan made weird, ogling faces, making me laugh.\n\nRyan recovered and continued to list the agenda. \"We found a bomb place for lunch.\"\n\nI looked at Ryan like the idiot he was. \"Don't say bomb, you're too old.\"\n\n\"Don't say bomb, you're too old,\" Ryan whined. \"We go out of our way to make this awesome day for you and this is how you treat me? Rude.\"\n\n\"You kind of deserved it,\" Logan said in my defense.\n\n\"I also found a bomb place for dinner,\" Ryan continued. Logan and I looked at each other and laughed. \"And then we're ending the night on a boat we chartered to watch the sunset.\"\n\nThey looked at me, waiting for my response. I sighed. \"You guys are doing it again.\"\n\nLogan looked shocked. \"What are you talking about?\"\n\n\"You decided what was best for me without consulting me. You overstepped.\"\n\nThey looked at each other and groaned. \"That wasn't what we were trying to do,\" Logan defended. \"We were going to spend the day inside anyway. We were just trying to do something nice.\"\n\n\"You two talked about it before deciding. Why couldn't I have been part of that?,\" I asked. \"For the record, you can do something nice for people and ask their opinion before doing it.\"\n\n\"C'mon,\" Ryan begged. \"This whole day is for you.\"\n\n\"I already had plans today.\"\n\n\"Like?\"\n\n\"The plans are mine and their validity isn't decided by you two.\"\n\nThey shared a silent conversation, at the end, they were both resigned to their fates.\n\n\"Okay,\" Logan said. \"We should've talked to you first and now we will suffer our punishment. We hope you have a good day. That's all we wanted to begin with.\"\n\nThey were genuinely bummed but I could also tell they were also being sincere. I had every right to leave my family to their devices while Nash and I snuck off but I appreciated their effort almost as much as I appreciated them admitting their mistake and not pushing me to go along with them anyway.\n\n\"What time are we leaving?\" I asked. Both Ryan and Logan eyed me suspiciously, then smiled.\n\n\"Seriously?\"\n\nI nodded, \"I shouldn't, but I appreciate you not pressing me. So yeah, I'll come with you guys.\"\n\nThey smiled and fist-bumped each other. Ryan looked relieved. \"We're going to have a good day. I promise. And if you want to do something, let us know. The most important thing is that we have a good day together. As brothers.\"\n\n\"And we won't do anything to push you and Nash together,\" Logan said, looking at Ryan in a way that told me I should be worried Ryan might have something planned.\n\nRyan punched Logan in the arm. \"I told you I wasn't going to do anything.\"\n\n\"Oh yeah? You just booked a sunset cruise because you thought the three of us might like it?\"\n\n\"Everyone will be there,\" he defended.\n\n\"Sure.\"\n\nRyan glared at Logan for calling him out.\n\n\"Don't do anything,\" I said. \"Let us happen naturally. I'm begging you.\"\n\n\"I'm not,\" he said. When both Logan and I looked at him disbelieving, he threw his hands up. \"I swear.\"\n\n****\n\nI walked back to the kitchen and joined Nash. Cam had finished feeding Penny while I was outside and Nash had taken their place at the nook. Nash had a plate of fruit and a small bowl of yogurt and granola for the both of us. I smiled. A light breakfast.\n\n\"Did you get us out of it?\" he asked.\n\nI shook my head. \"No, they planned this whole day. I think it's their apology and I didn't have the heart to tell them no.\"\n\nNash set his spoon down and crossed his arms on the table. \"I won't be upset because you want to spend the day with your brothers, repairing what happened. I'm glad they're doing this. I want you to have a good day.\"\n\n\"I was already going to have a good day,\" I said, barely looking at him in the eyes as I did. Sometimes I had all the confidence in the world when it came to Nash but mostly, I was a lost chicken. Not the alpha everyone claimed I was.\n\nNash leaned back and smiled. \"We'll be out and about. If we can squeeze in a quick errand, you can still have a good night.\"\n\n****\n\nRunning that damn errand proved more difficult than panning for gold in the Rockies. By fate we ended up stopping at a corner pharmacy minutes after leaving the house. I thought, yes, this is perfect. Except Cam was the one who had requested the stop and asked if I'd watch Penny. I made eyes at Nash and he knew what he needed to do.\n\nWhen he came back out, he shook his head. The kids followed him around like a rockstar and no matter how hard he tried, he couldn't shake them long enough to get what we needed.\n\nFrom there we split up. Half of us went golfing and the other half went shopping. Nash and I were in the golfing half only we ended up in different four tops. I was with my brothers and Rob while Nash was with Lon, Kayde, and JJ. Sam rounded out the last team with a few more of the younger boys.\n\nI was irritated when Nash and I got separated on the golf course. I was glad to be spending the day with my brothers, especially now that they were on their best behavior, but more than that, I wanted to be next to Nash. It was more irritating that Nash seemed to take it in stride. He gave me a look that told me not to worry and to enjoy the day. If my brothers noticed my irritability, they never let on. Of course, Nash noticed it because he caught me watching him more than I was watching my team.\n\nI think he thought it was funny, how much I was watching him. I thought it was irritating. I was annoyed at myself for getting caught up in him so quickly. I couldn't help myself. Everything about him drew me in. The way he interacted with my family, the kids, in particular, was everything. Kayde and JJ wouldn't leave him alone. I understood it. Nash made them feel relevant in a way other adults didn't.\n\nWhen we finished golfing, we went to meet up with everyone else. We parked near the shopping center. That's when I saw another store that I could get condoms and lube. I looked back at Nash motioned with my eyes. He smiled.\n\n\"I'm going to run into the store. I'll meet up in a minute,\" I announced as we got out of the van. No one seemed to look twice at me even though I felt as if a giant spotlight was on me. It wasn't until Nash said he'd join me that the plan went to shit.\n\nI glared at Nash as we walked down the street.\n\n\"What?\" He asked as if he didn't know that the six juniors trailing us because they wanted to be wherever Nash was, were putting a damper on our errand.\n\n\"Just keep them on the other side of the store.\"\n\nNash nodded and turned around so he was walking backward. He raised his hands as he addressed his following. \"Who wants to stock up on some candy?\" he asked, making the kids whoop. \"Perfect, follow me!\"\n\nThey followed him to the far side of the store and I gave them a second before I started speed-walking toward the sign that indicated personal care -- aisle seven.\n\n\"Whoa, slow down.\"\n\nI startled at Kayde's voice on my tail. I turned to see him trying to keep pace. I really hadn't realized what a hurry I was in. \"Why aren't you with everyone else?\"\n\nKayde Shrugged. \"I'm not really a candy guy plus I have football when we get back. It's not worth it.\"\n\n\"Still figured you'd rather hang out with them. From the sound of it, you're missing out.\"\n\n\"I'm good,\" he said as he followed me. \"I'd rather hang out with you. What are you getting anyway?\"\n\nI wasn't sure anymore. I sure as shit wasn't going to buy lube and condoms with my minor nephew. The aisle was right in front of me, I could see the stuff lining the shelf. Even though I couldn't get it right then, I hadn't given up hope that I could somehow make it work. Maybe I could just bore him into leaving.\n\n\"Deodorant.\"\n\nKayde seemed unphased as we went one aisle over. I stood in front of all the deodorants and read each one, took the cap off so I could smell one, put them back, grabbed another one, smelled it, then another, then another.\n\n\"What's the difference between deodorant and antiperspirant?\" he asked, uncapping one and smelling it just like I was doing.\n\n\"One is for smell and one is for moisture.\"\n\n\"Seriously?\" he looked impressed. \"I need one for moisture. I look like Mom but sweat like Dad.\"\n\nI laughed because it was true. Ten minutes later we both had a new stick\u2014deodorant for me, antiperspirant for Kayde. I could see Nash's group was at the checkout and figured time was running out.\n\n\"Looks like everyone is headed out. You can join them. I'm just going to cruise the aisles a little more.\"\n\n\"Nah, I'll wait.\"\n\nOf course he would. I walked the aisles. I went down aisle seven because I was a glutton for punishment. So many condoms, so much lube. But I'd be taking none of it home. Eventually, Kayde and I made our way out.\n\nI didn't even need to shake my head at Nash, he knew Kayde had been with me the whole time. He did laugh when he saw that we came out with pit sticks.\n\n\"We got the same kind,\" Kayde announced as if anyone cared. \"Old Spice except it doesn't smell like Grandpa and it has a werewolf on in.\" He then howled, the rest of the group joining in. Nash clapped his hands and laughed when I looked at the deodorant in shock. I hadn't even noticed.\n\nAs we walked to the shopping center, Kayde told everyone the difference between deodorant and antiperspirant. Nash held back and walked beside me. \"Don't worry, we'll get what we need.\"\n\n\"When?\" I asked. \"By the time we're done with the sunset cruise or whatever my brothers planned, everything will be closed.\"\n\nNash just laughed and bumped my side. We caught up with everyone else and ended up shopping for about an hour before we left for the next adventure. We'd snorkeled a few times and it never got old but sharing the experience with Nash made it great. Unlike golfing, we got to spend the entire time together. I don't know if it was the storm that had passed through or the fact that I was actually enjoying myself, but the water seemed more alive than ever before. We were there for hours and it seemed every passing minute brought something new.\n\nNash, of course, was a natural in the water and took the whole thing to a new level. I watched him as he took charge and led everyone on an underwater adventure and wondered how I could possibly deserve someone like him. Despite my lingering insecurities and reservations, I wanted to make it work.\n\nAfter snorkeling and before dinner, we had a little time to waste so everyone split off. The kids wanted to follow Nash but he, in a way that was firm but so gracious and kind, told them to fuck off. That's not what he said but I knew it's what he meant.\n\n\"We have one hour to run our errand with no interruptions,\" he said. \"The only problem is, we don't have a car.\"\n\nWe used Google and found a Target. We both agreed there was a good chance we'd run into someone there so we kept looking. There wasn't much but we did find a Costco and Nash assured me they had what we needed, plus, he'd get a discount. We started walking.\n\n\"Wolf deodorant, huh?\"\n\nI groaned. \"I had no clue. I just thought it smelled good.\"\n\nNash brushed against me, his fingers lingering on mine. I didn't get the impression he was thinking about holding my hand, simply letting me know he was there.\n\n\"I think the whole alpha thing is sexy.\"\n\nI looked at him. \"Yeah?\"\n\n\"Oh yeah.\" He was so casual about it like we were just walking and talking about who won the last Open. \"I think I'd like getting manhandled\u2014having someone take what's theirs.\"\n\n\"You think?\"\n\nNash shrugged. \"Lee was not dominant like that. He might've been the aggressor sometimes, but he wasn't an alpha and he definitely wasn't strong enough to toss me around.\"",
        "\"I could toss you around,\" I said like a fucking idiot trying to flex in front of the boy he liked.\n\nNash looked ahead and smiled. \"Yeah, I'm counting on it. What about you? Do you have a preference?\"\n\n\"I don't know,\" I answered honestly.\n\n\"Who was more dominant between you and Jason?\"\n\n\"Neither of us, not really. I guess at first it was him but then we both knew what we wanted and that was that. It was pretty mutual.\"\n\n\"So, no preference?\"\n\n\"I'd like it both ways, with you. I mean, I can see myself shoving you against the wall and having my way with you\u2014I've definitely thought about it more than once. But I've also fantasized about the opposite. Not to sound like a chick or anything but it would probably do me a lot good if you were, you know, assertive with me.\"\n\nI could've crawled in a cave and died admitting that I needed him to show me he wanted me but Nash didn't make a big deal of it even though I knew he understood. He simply took my hand and squeezed it. That little gesture of touch was such a big relief against my anxiety.\n\nI didn't realize we were already at Costco until Nash let go of my hand and pulled out his wallet. We went straight to the personal care section and Nash, he grabbed what we needed then hesitated.\n\n\"This is a really weird place to have this conversation but I need to get this off my chest. I'm under the impression that we're dating\u2014or that I'm courting you and earning the right to date you. We're obviously also planning on having sex. Then there's Jason. And I've been kind of nervous to bring this up but I need to know what this will look like. I'm not really okay with dating, in any capacity, someone who's in a relationship with someone else. I know you and Jason aren't serious or anything but you're still something. I guess what I'm asking is...this is a box of forty condoms, are you planning on splitting it between me and Jason?\"\n\n\"Not at all,\" I answered without hesitation. \"Forty for you. Zero for Jason.\"\n\n\"Does he know that?\"\n\n\"No, but there's not really anything to know about it. We're not dating. We're friends who sleep together. Slept together.\"\n\n\"But have you talked to him since everything happened?\"\n\n\"No,\" I admitted. I hadn't been avoiding it, it just hadn't been a priority. \"He called a couple of times but I was busy. When I called him back he was busy.\"\n\n\"Okay,\" he nodded, relieved. \"Like I said, this is a forty pack. We could've gone to Walgreens and got a three-pack or a nine-pack. But I picked here because I knew it was the biggest box available.\"\n\n\"Okay,\" I laughed.\n\n\"Do you get what I'm saying?\"\n\n\"That you want to have a lot of sex, with me.\"\n\n\"Well, yeah,\" he laughed. \"But I was thinking more along the lines that this box would last a while, as in, long term.\"\n\n\"Forty isn't really long term,\" I argued. \"Depending on how often we see each other, less than a couple of months. And that's if your dating skills are up to par.\"\n\n\"Do you want me to get this or not?\" he glared.\n\nI snatched the box from him and then grabbed a double pack of lube off the shelf. To say I was self-conscious as we walked to the checkout lanes is an understatement. The lines were backed up and everyone had carts full of stuff yet Nash and I were standing there with a giant box of condoms and a double pack of lube. There was no hiding what we were up to.\n\n\"I can't believe the condoms were $13. That's so cheap.\"\n\nNash put the stuff on the belt and laughed. \"What can I say, you're a cheap date.\" He then proceeded to use his employee discount to make me an even cheaper date.\n\nOne thing neither of us had thought through was that Costco didn't have bags, only boxes. If I hadn't been mortified enough standing in the checkout lines, we had to then walk back carrying the condom and lube for all the world to see.\n\n****\n\nAs we neared the meetup point, I started to panic. \"What exactly are we going to do with this stuff? If we're not going to hide it from everyone then what was the point of all this?\"\n\n\"Don't worry,\" he said as everyone came into view. The three separate passenger vans were parked on the far end of the parking lot. Not everyone was there but some were standing around while others were sitting on the curb. Nash handed me the two boxes. \"I'll distract them, you hide it under the front seat.\"\n\nI was dangerously close to having a heart attack when I opened the passenger door. I tried to shove the stuff under the seat only to realize there was no storage space there. I frantically looked around then shoved everything in the glove box. It was a tight fit. I shut the door and leaned against it, hitting my head on the top of the door frame. I can't say I was the most inconspicuous person that ever existed but I made it to the van without my family calling me out.\n\n****\n\nI was on cloud nine for the rest of the night. Not even my family trying to slyly push Nash and me together on the sunset boat ride could bring me down. Not even Nash eyeing me with those humorous blues\u2014laughing because I was in such a good mood\u2014could put a damper on my evening.\n\nWe ate, we laughed, we talked. It truly was an epic night and a great way to begin wrapping up the vacation. By the time we finished, it was late. I was in such a good mood I almost didn't care if Nash and I did do anything but lay in bed cuddling. Almost. When we shuffled off the boat, I could hardly get people in the vans fast enough.\n\nNash, Rob, and I were the only adults who hadn't been drinking which means we'd be driving the vans back. The three of us along with Abby and Roby's wife, Mandy, were standing between two of the vans, waiting for my brothers to finish up whatever they were doing.\n\n\"Abby,\" Ryan yelled from the distance. \"Can you grab me the parking pass from the glove box?\"\n\nI looked at Nash and froze, then jumped into action. \"I can grab it for him.\"\n\nBut it was too late, Abby had been standing closer and was already opening the door. I was torn between watching her discover the product of our errand earlier and looking at Nash in horror. I watched Nash as Nash watched Abby with wide eyes. Neither of us knew what to do.\n\nThe minutes felt like hours as we waited for her to react.\n\nI could hear her pulling the stuff out. Then a whispered oh my god and I knew my life was over. Yes, I was a grown man, but there was no way I'd survive my entire family finding that stuff.\n\nAbby slowly turned around and looked at us in pure horror as she held up the mega supply of sex related items. Then she looked at Nash. \"Have the boys been sneaking out at night?\"\n\n\"What?\" Nash looked at me in shock then back to Abby. \"No.\"\n\nAbby looked at the stuff in her hands as she tried to wrap her head around what was happening. Then she started freaking out. \"I think the boys did this. I think they're planning something. We have to stop them. This is unacceptable.\"\n\nI didn't know what to do but I wasn't opposed to letting the kids take the fall and I know that makes me sound like a terrible person.\n\n\"I'm going to ream their asses for this. When I'm done, they're going to be terrified every time they think of sex,\" she continued.\n\nAll I could do was stand there while they took the fall and silently pray for their souls. RIP boys'. But Nash had other plans. He put his hands on Abby's shoulder and shushed her. \"Do you really think that marching over there and yelling at them is going to change anything? The only thing you'll accomplish is breaking trust. You don't know whose these are. It might be theirs, it might not be.\"\n\n\"They're just kids,\" she whined. \"They're too young for this.\"\n\n\"They're at that age,\" he said. \"What were you doing at seventeen?\" Abby looked away, defeated. \"Why don't you let me go talk to them?\"\n\n\"Fine, but I'm throwing this crap away.\"\n\nNash looked at me, kind of amused that we couldn't catch a break, then ushered her away so she could throw it all in the dumpster.\n\nI didn't wait around to hear what anyone thought about the situation. I went straight to the van I was going to drive home, climbed in, and waited. Ten minutes later we were on our way home. There was a lot of chatter but nothing about what Abby had found. From what I could tell, Nash had all the boys in his van. I had no clue how he was pulling it off. Obviously, they hadn't bought the stuff, which was now in the deep, dark bowels of an alley dumpster.\n\nIt was past midnight when we got home. I went straight to my room, showered, and got ready for bed. Twenty minutes later, Nash came in. He silently put his jacket down, went into the bathroom, then came back.\n\n\"On your stomach,\" he said. I looked at him questioningly. \"You're tense and I happen to owe you a back rub.\"\n\n\"You owe me a back rub?\"\n\n\"From the hike the other day, remember? When I was the last one down?\"\n\n\"That wasn't a real wager,\" I said.\n\n\"It was to me when I made sure to come in last. Now take off that ridiculous shirt and roll over so I can pay my debts.\"\n\nI took off my shirt and laid face down on the mattress.\n\n\"Take off your pants, too.\"\n\n\"That wasn't part of the wager, I'm sure of it,\" I replied, smiling that he wanted me naked.\n\n\"Yet, you'll take them off anyway.\"\n\nHe was right. With his help, I took my pants off. Then Nash was straddling my butt as he massaged my back.\n\n\"Are you naked?\" I asked. I swear I could feel him bare against me but when I tried to turn and see, he pressed my shoulders into the mattress and began a deep, wonderful, rubdown. His hands were magic on my tense muscles.\n\nAll the stress I carried, dissipated as he worked my back.\n\n\"How'd it go with Abby?\" I asked. \"What did you say to her?\"\n\n\"We had a nice chat and she was calm by the end.\"\n\n\"And the boys?\"\n\n\"We had a nice chat on the way home.\"\n\n\"What did you say?\"\n\nNash scooted down so he was on my thighs as his fingers did this amazing thing to my hips and the top of my butt. I was in heaven. Despite myself, I'd been hard since the beginning which heightened the experience.\n\n\"We talked about relationships and sex,\" he said as he began to knead my ass.\n\n\"Yeah?\" I moaned.\n\nNash slipped his fingers between my cheeks and my whole body lit up. I raised my hips, trying for more. He massaged my crack, down to my balls, back up, kneaded my ass, then gave my crack more attention.\n\n\"Yeah, we talked about sex and how there's so much more to it.\" I felt a little lotion then he pressed his finger against my hole until he was all the way inside me. I moaned again and arched my back. I was so hard I could barely stand it. He moved his finger around while his other hand rubbed my taint. \"Making your partner feel like a million bucks is worth more than a quick release.\"\n\nNash pushed a second finger in. I was spineless as he worked me over. He had me in such a frenzy I couldn't even be mad that we couldn't have full-on sex. Which I wanted more than ever now that his fingers were deep inside me, teasing me. With his fingers still inside me, he pressed his body on top of me and whispered in my ear. \"Waiting is hard but the benefits are unmeasurable.\"\n\nHe held himself up on his elbow, pulled his fingers out, and pressed his cock against my ass.\n\n\"We don't have\u2014\"\n\nNash opened his hand and revealed an open condom wrapper just as he pushed inside me. I closed my eyes and gripped the pillow. He'd had me so keyed up yet relaxed that I had no problem taking him.\n\n\"Do you know how hot you looked,\" he said, his lips against my ear. \"Laid out on the bed? How hot you look under me?\" He gripped my hip with one hand and pressed into me further. \"But most of all,\" he pulled out and pressed back in, making both of us groan. \"Watching you today drove me insane. You being you drove me insane. Trying to buy condoms with you drove me insane. Knowing what was going to happen when we got home drove me insane.\"\n\n\"What almost didn't happen,\" I reminded him.\n\n\"I was never worried.\"\n\nNash started moving, pumping in and out. I moved so I was on my knees and Nash moved with me. His pace picked up but remained steady. His hands alternated between running up my back and gripping my hips so he could move me how he wanted.\n\n\"Turn over,\" he said, pulling out and moving back. I turned over and lifted my legs up so he could move back into position. The kisses were sloppy as he fucked me. I could feel his movements getting erratic as he came. He might've slowed down for a minute but it didn't stop him and the guy never went soft. And he never took his eyes off me. Not once.\n\nI was touching myself when I finally came. He came again, too. It was so intense, more intense than anything I'd ever felt in my life. He slowed until he was almost lazily moving inside me. I was sensitive but I didn't want him to stop. The longer he did it I could feel the tail tale signs of my own erection coming back.\n\n\"How are you still going?\" I asked. I know he for sure came twice but I think it might've been three times.\n\n\"I can't help myself,\" he laughed. He still hovered above me. He had little beads of sweat along his hairline and his face was sexy and flushed. \"You're so hot my dick won't go down.\"\n\n\"Do you think you can flip me over?\" I asked. I really wanted to feel him from behind again.\n\nNash pulled out and I turned around with my ass in the air. He applied more lube and then pressed back into me. I was sensitive and a little sore but aroused all over again. By the way his hands explored my body I knew he was doing more than just fucking me. I loved every second. I loved the way he was watching me and what he was saying through his hands.\n\nI could feel my orgasm building. Nash knew when I started touching myself again because he picked up his pace. It took a little while to get there since both of us had already cum, some more than others, but when we did, Nash had me pressed into the mattress with his arms wrapped around me and was mumbling affirmation in my ear.\n\nNash didn't seem in a hurry to get off me and I ended up falling asleep with him on top of me.\n\n****\n\nWhen I woke up, Nash was gone. I heard the shower shut off and then a moment later he walked into the room naked. His blonde hair had been towel-dried and his body was long and muscular. He smiled when he saw me watching him.\n\n\"Sorry, I needed a shower.\" He tossed the towel to the side, pulled the cover back, and straddled me. Nash took his sweet time settling on my lap, purposely moving super seductively and then smirking when he felt my reaction to his show. He was like a cat before a nap, stretching and moving his body until he found just the right spot\u2014and the right spot had his perfectly round ass hugging my dick.\n\nNash leaned over and kissed me then reached behind me and held up a condom and a bottle of lube. The same stuff we bought yesterday.\n\n\"I thought Abby threw it away?\"\n\nNash popped the cap and squirted some on his fingers then reached down and coated my dick with it, making it easy for him to slide against me. \"While you were pouting in the front seat, I was hiding the condoms and lube and making Abby think I'd thrown them away.\"\n\nI laughed. It was oddly cute and satisfying to think that goodie Nash smuggled condoms and lube back to the house so he could have sex.\n\nI ran my hands up his thighs and watched as he rocked against me. It wouldn't take much to push me over the edge if he wanted. He looked way too good above me. I was really enjoying it, thinking how easy it would be to get used to it, when I felt the bed vibrate. I reached under the pillow and silenced my phone. A minute later it was vibrating again so I silenced it once more. The third time, Nash laughed.\n\n\"Just answer it. It's probably your brothers asking why we're not at breakfast. Might as well tell them not to wait.\"\n\nI smiled and grabbed my phone, swiping to answer as I brought it to my ear. \"You can have breakfast without me, you won't die.\"\n\n\"Where's the fun in that?\"\n\nMy eyes shot to Nash. \"Hey Jason, I thought you were my brother.\"\n\nNash looked momentarily surprised but not totally bothered.\n\n\"Whaaaat?'' he mocked with the humor Jason was known for. It was the reason things with him were so easy. Nothing was ever too serious.\n\nThere was a moment of silence because I wasn't sure what to say to Jason while Nash was sitting on my lap, naked.\n\n\"I'm glad you answered,\" he said, finally. \"We've been playing phone tag since that weird thing that happened.\"\n\nI put the phone on speaker. I don't know why, it wasn't that I owed anything to Nash but, if the roles were reversed, I would've wanted the same courtesy extended. Nash smiled which told me he appreciated the gesture but then he rocked his hips and motioned for me to get the conversation on the road because he had plans that didn't involve Jason.\n\n\"Yeah, it's all good now. Everything's been hashed out,\" I said. Nash nodded his approval.\n\n\"That's good. I'm glad to hear that,\" he paused. \"So, I didn't know Nash was going on vacation with you. That was kind of surprising.\"\n\n\"Ryan invited him.\"\n\nNash lifted himself up, rolled a condom onto my dick, applied more lube, then pressed himself on my dick, slowly impelling himself. I used my free hand to push him, mouthing what the fuck are you doing?! He waved me away, go talk to Jason.\n\n\"I know you didn't want anything to do with Nash. I can't believe your brother invited him, that's low.\"\n\nNash looked at me, oh, you don't want anything to do with me? Though he was smiling because he knew that wasn't the case anymore. He continued to slowly press down and I bit my lip because he felt so good. But I flipped him off because the last thing I wanted to do was be inside Nash for the first time while Jason was on the phone.\n\n\"It wasn't such a bad thing after all. Nash and I are working things out.\"\n\nJason scoffed. \"Really?\"\n\nNash looked at the phone like it was the most annoying thing ever then rocked his hips as if proving himself to Jason. I closed my eyes and tried to breathe through the punishment.\n\n\"Penn?\"\n\n\"Yeah,\" I said, trying not to sound like I was in the middle of being sexed by a hot blond with a rocking body. \"He's making it up to me.\" Literally.\n\nJason sighed. \"I think this is a terrible idea. I don't think he should be able to waltz back into your life and take what he wants. Not after what he did.\"\n\n\"I appreciate your opinion but this is what I want.\"\n\n\"You want to go back to someone who dropped you like Macaulay Culkin's mom did in The Good Son?\"\n\nNash laughed silently at the dig then lifted his hips then dropped back down, making me bite back another groan.\n\n\"I do,\" I said, glaring at Nash.\n\n\"Where does this leave us?\" Jason asked.\n\nNash watched me, asking me the same question.\n\n\"Friends, I'd assume.\"\n\n\"Friends, huh?\"\n\n\"Of course,\" I said. I could barely think because Nash was stroking his dick. How he managed to ride me while staying seemingly present in the conversation was baffling. I just wanted to end the conversation. \"That's what we've always been. Listen Jason, I have to go. Can I call you back later?\"\n\nJason was silent for a minute then said, \"Yeah, sure. Talk to you later.\"\n\nI ended the call and tossed my phone. \"You're a real asshole,\" I said, grabbing his hips with both hands and pressing myself into him. He threw his head back and let me take control. Then I rolled us over so I was on top.\n\nNash was still smiling. \"I told you I could be fun.\"\n\n\"That wasn't fun,\" I scolded, pumping even harder as a punishment though neither of us seemed to mind. \"But at least the conversation is over.\"\n\nWe didn't last as long as the night before and we only came once. Nash was on his back with one leg draped over my shoulder, but it was amazing; leaps and bounds better than anything I had with Jason.\n\n\"You know the conversation's not over, right?\" he asked as we laid, tangled up in the sheets. It took me a second to figure out what he was talking about. \"You were not just a friend to Jason.\"",
        "But I was. Jason had said it many times. I told Nash as much.\n\n\"The man who was just on the phone had feelings for you,\" Nash continued. \"Maybe he didn't realize it until you made yourself unavailable, but he's definitely got an emotional boner for you. You're going to have to call him and have a proper conversation.\"\n\nI rolled over and pinned the sassy blonde to the mattress. \"I would've had a proper conversation except you were on my dick.\"\n\nNash smirked. \"I don't regret it.\"\n\n\"Were you jealous?\" I asked.\n\n\"No,\" he said, and he meant it. \"But this is new between us and I'm technically stepping on his toes, so maybe I was peeing a little.\"\n\nI looked down at the man who'd had my attention since I was in high school. \"This isn't new and Jason's toes are not in tripping distance.\"\n\nNash's eyes sparkled as he looked up at me and, for the first time, I saw the same deep affection I felt for him, looking back at me.\n\n\"I suppose it's not.\"\n\n****\n\nIt was late when we left the bedroom. After ten. Even though everyone was doing their own thing, it didn't stop them from staring at us. Most everyone was by the pool. It was our last full day before heading home and we'd spent the previous day out and about.\n\nThe teenagers looked like they were about to howl but one look from Nash and I could see them second-guessing themselves. I caught Nash's eye and he shrugged. I always knew he had some voodoo magic over them. I was convinced it was pure sorcery.\n\n\"Are you a witch?\" I asked as we ate breakfast. \"Do you have some sort of Jedi mind trick over them?\"\n\nNash laughed, loud and boisterously. \"No, but that would be great. They're good kids, that's all.\"\n\nIt wasn't all but I didn't press. When we finished up, we were ordered to go swimming. I couldn't say no when a certain redhead came in with her swimsuit and duck floaty.\n\nNash and I went back to our room to change but not before Ryan gave us a time limit and Nash a pointed look.\n\nBefore Nash went into the bathroom, he told me to wear my wolf swim shorts, as if there was any other option. He came out of the bathroom with a towel wrapped around his waist.\n\nEveryone clapped when we got to the pool just to embarrass me.\n\n\"So glad you two could join us,\" Cam hollered as we stepped onto the patio. It appeared everyone was at least semi clued into Nash and I. Our mutual late start hadn't gone unnoticed. Ryan and Logan eyed us from the pool but didn't say anything, they just winked and went back to sipping their beers.\n\nI dropped my towel and got a few whoops, but when Nash dropped his towel, the whole patio exploded. He was wearing a pair of speedos with kittens on them.\n\nThe teenagers looked like they were about to pass-out until Nash signaled for them to do whatever it was, they wanted to do\u2014which was to fill the air with wolf howls and cat meows. When they got their fill, Nash looked at them and smiled.\n\n\"Wasn't it worth the wait?\"\n\n\"Oh hell yeah it was!\" Kayde shouted back. His smile was pure joy. All their smiles were. And they were high fiving one another, celebrating. What? I didn't know. But the pure, unadulterated joy they were experiencing meant everything to me because I loved them and because Nash did that. Nash knew how to make everything good. He brought this light and this goodness with him. Yes, he had hurt me, but I knew he was more than that.\n\nThen he turned and presented himself to me, smiling, silently asking what I thought of his hilarious swim speedos. Words couldn't describe how I felt so I cupped his neck and kissed the shit out of him, in front of everyone. Because Nash was the fucking best."
    ],
    "authorname": "Mrsgnomie",
    "tags": [
        "gay novella",
        "gay drama",
        "drama",
        "romance",
        "gay romance"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/tied-up-in-knotts-ch-19"
}
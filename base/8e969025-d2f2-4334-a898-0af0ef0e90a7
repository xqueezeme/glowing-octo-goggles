{
    "title": "Freshman Orientations",
    "pages": [
        "When I started my senior year of college, the excitement started to set in. I was in the final stretch, before I'd finally go out into the world and make my mark. I felt just like one of the incoming freshmen all over again, with a whole new world laid out before me, full of infinite possibilities. Given this sense of my final year feeling a bit like my first, I started to enjoy watching the new students and observing their mixture of anxiety and enthusiasm. This was easy to do, given that I lived in a large dorm with the first two floors dedicated to freshmen, and the upper floors filled with a mix of upperclassmen.\n\nThe freshman girls were of special interest to me. They were on their own for the first time, ready to break free of their parents' control, hungry to experience life, and maybe even experiment a little bit. Their powerful, if hesitant, sexual curiosity was potent and visible. They tested the waters, sitting in the quad braless, knowing that they drew the stares of college guys secretly watching the free movement of their young boobs beneath tight-fitting t-shirts.\n\nOnce in a while, I went down to the second floor lounge to work on my laptop, surrounded by young women full of questions about a class they wanted to take, or what clubs were worth joining. I enjoyed sharing with them my experiences over the last three years, and feeding their excitement.\n\nIt was in that freshman lounge where I met Layla a year earlier.\n\nLayla was now a senior, like me, and had started mentoring the freshmen on the second floor during her junior year. As an RA, she lived on the second floor with them, offering all types of advice, organizing group activities, and generally helping them find their way through their first year of college. One afternoon, I happened to have just taken a seat in the lounge and poured myself a coffee from the communal coffee pot, when Layla walked in.\n\n\"Oh, hey Sean!\" she said, hurrying over.\n\n\"Hey Layla! What's up?\" I replied.\n\n\"Not much...\" she said, taking a seat with me. \"Just helping everyone get oriented.\" I could tell something was on her mind, because she was fidgeting nervously.\n\n\"Good. I remember how clueless I was back then.\" She stared at me blankly. I laughed and added, \"What?\"\n\nLayla started laughing. \"Um... I dunno how to tell you this.\"\n\n\"Just out with it,\" I said, becoming curious.\n\n\"Err... okay. Here goes,\" she replied. Layla then proceeded to tell me the shocking events that had happened the evening before.\n\n***\n\nVarious students from Layla's floor had gathered in the large common room of her suite. One of the perks of being an RA was the chance to live in one of the spacious, corner suites on each floor. It often served double duty as a comfortable setting for weekly meetings, where anyone who wanted to could show up to ask general questions, as well as receive announcements about things going on around campus or related to academic affairs.\n\nHalfway through the meeting, Layla had reached an awkward item on her agenda.\n\n\"Okay, next topic: sex,\" she said. The room filled with quiet giggles as young men and women exchanged looks and smirked at each other. \"I know, I know, laugh all you want, but it's important,\" Layla chuckled. \"I have to remind everyone that the health center is open and available as a resource any time any of you want to drop in and ask a question, meet with the nurse about any issues you're having, even... you know... pick up some free condoms.\"\n\nThere were more giggles. \"Let's not pretend that many of you aren't... um... making new friends on campus, so to speak,\" Layla continued, smirking at the red faces around the room. \"Or maybe you want to, but are nervous and have a lot of questions first. And that's okay. The point is- they're there to help, so don't be afraid to stop in and have a chat. It sounds like most people are not doing that, so I've been asked to remind you.\"\n\nA room full of embarrassed students nodded at her. One of the guys raised his hand. Layla called on him.\n\n\"Can they... uh... set me up with a study partner?\" he asked with a smirk. There were laughs around the room.\n\n\"A study partner?\" asked Layla.\n\n\"You know... someone that can give me some hands-on experience,\" he said, sarcastically.\n\n\"Oh! Ha-ha, I get it,\" said Layla, rolling her eyes. \"No, I'm quite sure they don't offer those services.\" She scanned her agenda, ready to move on. \"But don't get me started about what RAs have done about that in the past...\" she mumbled, not fully expecting anyone to hear.\n\n\"Haha, what does that mean?\" asked a girl next to her.\n\n\"Huh? Oh... nothing. Just... in the past, there have been some 'hands-on' stuff going on in the dorms,\" Layla laughed.\n\n\"I'm in!\" said a boy across the room.\n\n\"Me too!\" said another. The girls laughed at them, as more students volunteered.\n\n\"I'm sure you are...\" said Layla. \"Anyway, next topic.\"\n\n\"Wait, wait!\" said another girl. \"You can't just say that and not tell us what happened!\" The rest of the students began to beg Layla to explain.\n\nLayla sighed. \"Okay... I'll tell you, but understand that the school doesn't exactly condone this. It just happens sometimes, and they kinda look the other way. But... basically, some of the RAs have, in the past, arranged a sort of session where the freshmen can witness a frank... um.. demonstration. About sex.\"\n\nEyes opened wide around the room, and mouths dropped open. \"Like, what kind of demonstration?\" someone asked.\n\n\"Erm, well... they've brought some upperclassmen to a floor meeting to,\" Layla paused for a moment, amused at how her students were all on the edge of their seats, \"... to demonstrate how to practice safe sex together. And to, um, offer advice on techniques and stuff.\"\n\nThe students lost it. There was nervous laughter, as they turned to their friends, covering their mouths, or chattering about what they'd just heard.\n\n\"You mean they have sex in front of everyone?\" said the girl next to Layla.\n\n\"Yeah. A couple comes in, and engages in sexual intercourse, for educational purposes,\" Layla said, feeling somewhat embarrassed herself.\n\n\"When do we get to see that?!\" one of the boys exclaimed, prompting more uproar.\n\n\"Wait, wait, wait, I'm just telling you what's happened before, I didn't say we're doing anything like that,\" replied Layla, trying to calm down the room of sexually curious and astonished students.\n\n\"Why not?\" several of them asked. Both boys and girls seemed increasingly interested, albeit many still fully embarrassed by the idea.\n\n\"I dunno, it's just... as I said, you have a resource for th...\"\n\n\"Please!\" begged some of the more vocal, and unashamed students. \"You should set up something similar for us!\" The room was quickly divided into the sheltered, awkward students that were either horrified or embarrassed to hear the suggestion, and the students who were turned on by the opportunity to watch a live sex demonstration in their own dorm.\n\n\"Seriously? Are you guys really asking for this?\" asked Layla, immediately feeling stupid for asking.\n\n\"Yes!\" was the response from numerous students.\n\n\"Geez... okay... um. Let's take a vote. Majority rules. And even then, I'll have to think about it,\" said Layla. She put her hand in the air. \"Raise your hand if you want to have an instructional sex ed event, held here.\"\n\nTo Layla's surprise, virtually the entire room raised their hands. Even the shyest students, who initially seemed scandalized by the idea, sheepishly raised their hands halfway, revealing their interest in learning more about sex together, as a group. Seeing the overwhelming response from their peers, the crowd of students grew excited and chatted excitedly about how it might actually happen.\n\n\"Oh, wow... okay...\" said Layla, taken aback. \"I guess you're basically all interested.\" She sighed, realizing what she might actually have to figure out. After a few moments, she added, \"Okay. I'm going to think about it and see what I can do. No promises, but if you're all that interested, maybe something can be arranged.\"\n\nThat sealed it. Layla fruitlessly tried to make it through the rest of her agenda, but all any of the students wanted to do was to talk to each other about how they'd get to see a young man and women from their dorm come to one of their meetings, remove all their clothing, reveal their naked bodies, and then proceed to have wild, hot sex together in front of everyone. The idea was thrilling and set their imaginations on fire.\n\n***\n\nI gawked at Layla the entire time she narrated this event to me. When she finished, she gave me another blank stare, waiting for my reaction.\n\n\"Wow,\" I simply said. \"I'm kinda surprised, but also not really surprised.\" We both laughed. \"So what are you going to do?\" I asked. \"Are you really going to set something like that up for them?\"\n\n\"Yeah, I think so. I'll keep it hush-hush, but I'm working on it.\"\n\n\"Geez, okay. I'll bet you get a huge turnout,\" I said, smirking.\n\n\"Me too! You know how freshmen are. They've just gotten to college and all they want to do is have sex. Or tell their friends they did, even if they didn't. But I'm going to make clear this week that they'll only be allowed to attend if they're on good behavior, and are willing to handle it maturely. I already have a handful of troublemakers I'm not sure I'm going to let attend. You know...\"\n\n\"Yeah, gotta make sure they're all comfortable and that things don't get out of hand. Do you have any idea who you're going to get to perform the demonstration? I can't imagine that will be easy...\"\n\n\"Erm... yeah, sorta... That's partly why I needed to vent to you...\" Layla said, hesitantly.\n\n\"Whoa. You're not... are you thinking about doing it?\"\n\n\"Heck no!\" she said, laughing. \"I could never do that!\"\n\nI laughed, \"Okay, whew. I didn't think so!- But wait, why did you need to vent to me abo-\" Suddenly my heart skipped a beat. \"Wait- you're not asking ME, are you?!\" I blurted out. A handful of students in the room suddenly turned and looked at us, previously unable to hear what we were talking about.\n\n\"Um... maybe?\" Layla said with a nervous grin.\n\n\"Seriously?!\" I said. \"You want-\" It finally registered how loud I had become. I quieted down, whispering, \"You're asking me to have sex with someone in your dorm room while a bunch of freshmen watch?\"\n\n\"Y-yes...?\" she said.\n\n\"Uhh... wow...\" I replied, stunned. \"I dunno...\"\n\n\"Please? I honestly don't know who else to ask. It's like... not the easiest thing to go around just asking people out of the blue to have instructional sex in front of people.\"\n\n\"I don't know what to say,\" I said. Admittedly, I was turned on by the idea, but I was also terrified at the same time. Who knows how many freshmen would just be sitting there, watching me fuck someone. \"I mean... who would I even do it with?\" I asked.\n\n\"I'm not sure yet. I'll have to find someone and figure that out. But, I mean, I'm offering you the possibility to fuck some cute girl, with no strings attached! Isn't that exciting?!\" she grinned at me, hoping I'd take the bait.\n\nI laughed. \"Sure, I mean, obviously on a certain level it is. But, you know... in front of a whole bunch of people?\"\n\n\"Why not? It'll be fun!\" she nudged me repeatedly.\n\n\"Oh man. You're not gonna let it go until I agree, I know it...\"\n\n\"Nope!\" she said enthusiastically, realizing she might be getting somewhere with me.\n\n\"Do I get a say in the selection of my partner?\"\n\n\"You can veto, but I nominate,\" she said.\n\nI sighed. \"Fine. If it's someone that I approve of, I'll consider it.\"\n\n\"Okay, I can work with that!\" said Layla, relieved.\n\nAnd so it was decided. I was going to fuck some mystery girl in front of a bunch of horny college freshmen, and as the days went by it got no easier trying to wrap my mind around this.\n\nOne of the things I brooded endless about was who Layla would propose I do it with. I didn't have a girlfriend at the time, having just broken up with someone a couple weeks prior. The only girl I had dated since then, I hadn't talked to Layla about. I wracked my brain, trying to think of who she might choose, but I couldn't come up with more than distant speculation.\n\nWhat I hadn't realized was that Layla had taken to observing me closely. In the halls. On the quad. Whenever we crossed paths, she took an acute interest in who I might be interested in. I hadn't realized what she was doing, or how perceptive she really was, and so it came as a surprise when she finally made her selection.\n\nA couple days after she shared the shocking news with me, I happened to run into Layla on the edge of campus where a bunch of food trucks often lined up. They made a killing at meal times due to the student population, and both Layla and I frequented them. She joined me in line for fish tacos, and we caught up on the news of the day. At some point, I must have been distracted.\n\nIn the distance, I saw Valeska approaching. I was gobsmacked every time I saw her. She was tall, with a medium-brown skin tone, long, dark hair, and deep, penetrating eyes. I had no idea what kind of exotic ethnic mix she was, but the mystery drove me crazy. I could barely talk to her without sounding goofy. I tried every now and then, but always came away from it thinking I made a fool of myself. She often caught my gaze, but I dismissed any possibility of mutual interest as a pipe dream. Now here she was again, looking as sexy as ever, in a summery top with the back fully open.\n\n\"Are you listening?\" said Layla.\n\n\"Oh yeah, sorry,\" I had said, recovering. I should have realized that she knew where my attention had gone, but alas, I was not myself when Valeska was around.\n\nDays later, my phone started ringing. I answered, and Layla responded with a happy greeting. After some brief chit-chat, she got to the point.\n\n\"So... I think I've decided who to ask. Someone I know you'll be happy with. I've asked around, and... um... I got the sense that she might be willing to do it if you're her partner. Which is great for you, cuz, you know... I dunno if you knew that. That she's interested in you.\" I could tell Layla was rambling nervously, anxious to persuade me to go ahead with it.\n\n\"Wait, wait, back up,\" I said. \"Who did you pick? It's someone I know?\"\n\n\"Someone you want to know. You're always staring at her.\"\n\n\"Huh? Who??\" I demanded.\n\n\"That girl, Valeska, down the hall from you.\"\n\nThe moment she said her name, my heart started racing. A million thoughts ran through my head. How did she know I liked Valeska? How did she find out that she liked me? How did I not come to know this earlier? Layla proceeded to tell me how she'd been observing me, and figured it out.\n\n\"I wanted to pick someone you might have real chemistry with, at least. That way the sex is like, real. You know?\"\n\n\"... Yeah,\" I said, still stunned at what I was hearing. I didn't know what to say. I was still coming to terms with the idea.\n\n\"So- can I ask her?\" Layla said. I didn't answer. I barely heard her speaking anymore. \"Well?\" she added, getting nervous.\n\n\"Oh, uh... okay...\" I said. I felt like my heart was going to burst out of my chest. I began to worry that Layla would ask Valeska, and she would think I put her up to it, turn me down, and screw up a chance I only just learned I even had with the girl of my dreams.\n\n\"Okay! That settles it. I hope. We'll have to see what she says.\"\n\nThe following evening I was sitting at my desk in my dorm room, when there was a knock at my door. I got up, walked across the room, and opened it. There was Layla. Valeska was standing a little behind her, looking nervous. She gave me a slight smile when I appeared. I gulped.\n\n\"Oh, hey,\" I said, bewildered.\n\n\"Can we come in?\" said Layla.\n\n\"Sure-\" I said, opened the door wide. Layla and Valeska entered, and then sat on the edge of my bed. I went back to my chair and rolled over to them.\n\n\"What's up?\" I asked, even though I knew what Layla was there to talk about.\n\n\"So, I just wanted to get you two together, to ask you something. Sean already knows what it's about.\"\n\n\"You mean, you haven't asked her yet?\" I whispered to Layla, surprised.\n\n\"Err, no. That's why I brought her here,\" said Layla. I grew more nervous.\n\nValeska gave a nervous laugh. \"What's going on?\" she said, looking back and forth between the two of us.\n\n\"Um... so, I was asking around,\" said Layla, turning to face Valeska. \"And I found out from Rachel Tavares, and others, that you have a crush on Sean.\" Valeska started to turn red and glanced at me nervously.\n\n\"Seriously? They told you that?\" she whispered to Layla.\n\n\"Yeah. It's true, right?\"\n\nValeska looked at me again, nervously, then said, \"Um... well, geez, apparently everyone knows. So...\" She seemed mildly frustrated.\n\n\"I'm just gonna cut to the chase. You have the hots for Sean here, and I know he's totally got the hots for you. Neither of you are any good at hiding it. So, whatever. Now you know.\" She laughed.\n\nI smirked at Valeska. She smirked back. \"Okay... good to know...\" she said, still bewildered, but also clearly a little excited.\n\n\"So, that gets me to the real reason you're here.\"\n\n\"Which is?\" said Valeska.\n\n\"Well... I think the two of you should have sex.\"\n\nValeska stared back at her, dumbfounded. \"What?\" she said, suddenly laughing.\n\n\"Seriously. I'd like to two of you to have sex, cuz it would sorta help me out,\" said Layla, laughing as well. I couldn't help but laugh myself.\n\n\"I'm really confused,\" said Valeska, smiling. Layla then narrated the whole story all over again, for her understanding. When she finished, we all sat there, silently.\n\n\"Uhhh...\" Valeska said finally, turning red. \"So you're asking me and Sean to have sex together for the first time in a room full of strangers?\"\n\n\"I don't care if it's your first time or not, of course, but yeah. You know... Start with a little kissing maybe. Then some... uh... oral sex. Demonstrate how to use a condom. Penis inside vagina. Do your thing. Boom- done!\" said Layla, summarizing what she was proposing, rather bluntly.\n\nValeska and I exchanged frequent glances, neither one willing to speak first. I was wondering how she felt about the idea, and was sure she was wondering the same about me. It was a stalemate. I decided to speak up and break the silence with a question, without indicating any kind of agreement.\n\n\"What if, uh, they had questions and such, during...\" I tried to ask.\n\n\"Oh, I can explain what's going on, of course. You two would just need to, you know, do the nasty,\" she said, smirking. There was silence again. I realized this didn't help get us anywhere. \"So what do you say? Is it a yes?\"\n\nNeither Valeska nor I moved. We continued to exchange anxious glances. In that moment, I couldn't think of anything but how badly I wanted her to say yes, and move on to fantasize about fucking her. My cock was throbbing in my pants just thinking about it.\n\nLayla grew nervous, then said, \"Let me ask this. If there's a clear 'no' just say so.\" Neither Valeska nor I said no. We both continued to sit there, looking stunned.\n\nLayla continued, \"Okay! Then we have a deal. I'll figure out the date, and let you know. Maybe next week if I can manage it. And I'll make sure you're both as comfortable as possible. I'll bring the condoms, lube, whatever else you might want, just let me know.\" She talked rapidly, clearly relieved to have sorted the whole thing out.\n\nValeska and I sat there, terrified and wide-eyed, barely able to look at one another. \"Um... okay...\" she finally said, before glancing nervously at me. I surprised to hear Valeska say this. I wondered if she really meant it; if she was agreeing to the proposal.\n\n\"Yeah... okay...\" I added.\n\n\"Great! Okay- I'll leave you two alone then...\" Layla said, getting up. She scrambled out of the room as quickly as she could, as if afraid we'd change our minds. I got up and took Layla's seat beside Valeska.",
        "\"So-\" I said. I rubbed my sweaty palms on my jeans.\n\n\"Yeah...\" said Valeska.\n\n\"Uh... so... I didn't know you were interested in me,\" I said.\n\n\"Likewise,\" she replied. We exchanged nervous smirks.\n\nI realized I was fumbling the conversation, so I did my best to try to make small talk. We each told each other a little bit about ourselves. I learned that Valeska was an art history major. She wanted to become a teacher. We were into the same kind of music and food. Finally I asked the question I had always wondered about.\n\n\"What's your ethnicity, exactly?\"\n\n\"Oh, I get that a lot. My dad's family is from Russia. He was stationed in Hawai'i in the navy. That's how he met my mom, so I'm half Russian and half Hawaiian.\"\n\n\"Oh, wow, I was totally perplexed.\"\n\nValeska laughed. \"Yeah, I could tell,\" she said, grinning. Without realizing it, I started gazing at her; beautiful, exotic, and apparently crushing on me. I snapped out of it when she giggled.\n\n\"Sorry,\" I said.\n\n\"It's okay,\" she replied. After a moment of awkward silence, she addressed the elephant in the room. \"Can you believe we're actually doing this...?\"\n\n\"Nope, I can't say that I do,\" I laughed. I struggled to try to think of something to say next, but I was still tongue-tied. We just sat there, side-by-side, our bodies almost touching, neither of us quite knowing what to say or how to react. I glanced up at her, facing her directly, and started to say, \"Do you-\"\n\nBefore I could finish my sentence, Valeska leaned in close, closed her eyes, and planted a soft kiss on my lips. I felt a shiver run through my body. I pressed my lips against hers, and felt the warmth of her body as we moved closer. The kiss quickly grew passionate. I felt her tongue all of a sudden, and offered her mine. Soon they were entwined, and we were hopelessly lost in each other's kiss. She tasted sweet and her hair smelled like a market in some faraway land, full of roses and sandalwood incense. \n\nWhen our lips parted, I could tell from her eyes how badly she wanted to do that.\n\n\"I'm sorry, I interrupted you. You were about to say something,\" she chuckled.\n\nI laughed. \"I may have, but it's the darnedest thing... I've totally forgotten.\"\n\nValeska grinned, then said, \"Well... I'd better run. I'm supposed to meet a friend for dinner.\"\n\n\"Oh, okay. Go for it,\" I replied.\n\nValeska got up slowly. I could tell she wanted to say something, as she walked toward the door. Finally, she stopped and said, \"You can... you know... feel free to stop by some time. Just to chat or something, I mean.\"\n\nI smiled and nodded. \"Sure.\"\n\nShe smiled back, then left the room. I collapsed backward on my bed. My head was spinning. I didn't know how to process what was happening, and managed to lay there most of the night, in a state of bewilderment, fear, and excitement.\n\nI took Valeska up on her offer, and stopped by a couple times over the next few days. We talked, learning more about each other, but couldn't bring ourselves to address the fact that we were about to have sex. And not just have sex, but have sex for the first time... in front of a bunch of strangers. I desperately wanted to know how she felt about it, but was too nervous to bring it up, except in passing. I imagined she felt the same.\n\nBefore we knew it, the date was quickly approaching. A mere two days remained before the event Layla had planned. I wanted to know how many students would be there, but I was too afraid to ask. I wanted to talk to Valeska more about it, but our schedules didn't jive. The night before the day of the event, I could barely sleep. I took a shower, made sure I was perfectly groomed in my nether regions, and then spent the night laying on my bed, trembling, thinking about walking into a room crammed with giddy freshmen, waiting to see me take my clothes off and fuck Valeska, just like that.\n\nI couldn't tell if I wanted to hug Layla for getting me into this mess, or if I'd never forgive her for making me do this. Then I reminded myself that she wasn't making me do it. It was my own fault for agreeing, and that meant that deep down I really wanted to go through with it. Nervous arguments with myself like this continued for hours, until I finally wore myself out and fell asleep.\n\nSomehow I managed to get through the next day, albeit not without suffering a constant onslaught of dread and anxiety. I avoided the freshman floors like the plague, and mostly hid in my room, with little appetite, wondering how I would get through the experience. As the evening approached, I received a text from Valeska.\n\n\"Are you getting ready? I'm so terrified...\" she said.\n\n\"Yeah. Me too! I might need to go straight to a bar afterward to get smashed.\"\n\n\"Ha! Okay, see you soon...\"\n\nI felt a certain camaraderie with Valeska, knowing that she was just as terrified as I was, not knowing what to expect. I kept imagining over and over in my head what it was going to be like, seeing her standing there in front of a room full of students, and then having to strip down to her bra and panties. I imagined her removing her bra, and being able to see her breasts for the first time. I wondered what they would look like. But I couldn't fathom having to then make love to her on the spot. My fantasy kept getting interrupted by a feeling of queasiness.\n\nSoon it was time to leave my room and venture down to Layla's suite. I waited until the very last minute before I needed to go, pacing back and forth in my room, and feeling my heart pounding in my chest. Finally I went out into the hallway and made my way to the elevator. I took it down to the second floor and stepped out. Further down the hall I saw Valeska heading toward Layla's room. She turned and saw me, looking like she'd just seen a ghost. She waited for me to catch up.\n\n\"I don't know how I'm going to go through with this,\" she admitted, putting her hand to her face. I could see it was shaking.\n\n\"I know... me too, I feel like I'm gonna faint,\" I replied.\n\n\"Not that I don't want to... you know... fool around with you, but I can't believe we're going to do it in front of so many people...\"\n\n\"Yeah... maybe there will be fewer people than we think.\"\n\n\"I hope so!\"\n\nTogether we made our way anxiously to the end of the hall, where Layla's suite was located. Valeska knocked softly on the door. It opened, and Layla was standing there.\n\n\"Oh good, there you are,\" she whispered. \"Come on in.\" She seemed relieved, as if thinking one or both of us were going to chicken out.\n\nValeska and I entered the room. The moment we stepped inside, the butterflies in my stomach took hold. Just as I had feared, the room was chock full of countless young freshmen who quieted down the moment they saw us appear. I felt like a hundred eyes were on the two of us, as we followed Layla in. I found myself surrounded by young men and women, huddled together, sitting cross-legged, looking us up and down with wide eyes, giggling and whispering things to their friends, as they set their eyes upon the couple that they were about to watch get naked and have sex.\n\n\"So are you guys ready?\" We nodded to her. \"Did you... um... practice or anything?\"\n\n\"No, we haven't done anything. I think we're both nervous,\" said Valeska, with an anxious smile.\n\n\"Wait, so you haven't had sex at all yet? Have you even seen each other naked?\"\n\n\"Nope,\" I replied.\n\n\"Oh- wow,\" said Layla, surprised. \"So you're literally about to have sex with each other for the first time, okay.\" She pondered this as if it was exciting to her that she'd get to witness us discovering each other's nude body, and making love together for the very first time, given how badly she knew we desired each other.\n\nLayla lead us to the center of the room, saying, \"I set up this futon here for you. Will that be comfortable enough?\" We nodded slowly to her, unable to speak due to anxiety. \"I left a condom here on the pillow. Is there anything else you need? Just let me know.\" Layla seemed surprisingly nervous. I wasn't sure why, since she didn't have to perform in front of anyone, but I realized it must be awkward for her to have to lead a session like this nevertheless.\n\nWe sat down on the long red futon and waited for Layla to begin. Valeska and I exchanged looks, acknowledging the absolute terror in each other's eyes. Finally, Layla quieted everyone down, saying, \"Okay, now that everyone's settled in, we can begin.\"\n\nI glanced around the room, making eye contact with various young women who were staring at me. Girls from all corners of the country, across a range of different ethnicities, with all kinds of bodies, some attractive, bubbly, and outgoing, some quiet, nerdy, and shy. They stared back at me, clearly attempting to control and suppress their amusement. I could see them wondering about my body; their curiosity growing rapidly, fully aware that they were about to take a look at a boy's penis. I felt the way I felt when I was sitting in a doctor's office, anxiously awaiting a nurse who would arrive at any moment to stick me with needles.\n\nLayla began, \"So as you all know, we're going to have a demonstration tonight, for the benefit of those of you who may not have a whole lot of experience with sex and sexuality yet. My hope is that this will help to promote safe sex and give you a better idea what to expect whenever each of you feel comfortable enough to become sexually active.\"\n\nThe room was filled with quiet rumblings and soft chatter.\n\n\"I'd like to introduce you to Sean and Valeska. They are both seniors, and have agreed to perform the demonstration tonight for you.\" Valeska gave a slight, meek wave to the group. Some of the students waved back, or greeted us with quiet hellos.\n\n\"There's just a few ground rules I'd like to go over first. Chiefly, please be respectful. Sean and Valeska are here for your benefit. It can be very intimidating to do this in front of a group, so please honor their generosity by remaining silent through the demonstration, unless you have a question. If you have one, you can raise your hand, and then I'll call on you, individually, so you can direct your question to me and not them.\"\n\nThere were nods around the room.\n\n\"Now in a moment, I will ask them to start undressing. In case anyone is somehow not clear on what's going to happen, you're about to see them both completely nude. That means seeing a man's penis, and a woman's vulva and breasts. Your bodies may or may not look similar to theirs; we come in all shapes and sizes, and that's perfectly normal. They're going to demonstrate sexual intercourse for you. I want to be clear: if any of this offends or upsets you, now would be a good time to leave. If you become uncomfortable at any time during the demonstration, you are welcome to get up and quietly leave the room without any judgement. Is that clear to everyone?\"\n\nThere were more nods. The faces on the students around the room were filled with nervousness, disbelief, and excitement. I gulped, listening to Layla's words, which made apparent the brutal reality that Valeska and I now faced together.\n\nLayla turned to face the two of us on the futon, whispering, \"Okay, are you both ready?\"\n\n\"Yeah, I think so,\" we answered.\n\n\"Okay, great,\" she said, exhaling a nervous breath. She turned back to face the room, though still addressing us. \"Why don't you both stand up and we can begin.\" Valeska and I rose from the futon and faced the students, staring up at us wide-eyed and seemingly not breathing. \"Whenever you're ready, you can begin removing your clothes,\" she added, offering us a nearby chair to place them on when done.\n\nI glanced nervously at Valeska. She breathed in deeply, and I wiped my sweaty palms on my jeans. We shared a brief exchange of terror, before we started to slowly undress. It felt like an eternity as we both took our time, first removing our shoes, then our socks, and placing them carefully and deliberately off to the side. All the while the room full of students watched us with fascination and wonder.\n\nNext I removed my t-shirt and stood bare-chested in front of a group of young women who's gazes remained fixed in place on my body. After each article of clothing was removed, Valeska and I exchanged looks, checking on the status of each other, and trying not to move too fast or too slowly compared to the other. I watched as she pulled her t-shirt up over her head, and revealed her bra. Valeska's breasts seemed to bulge in their cups, and the sight of them only made me increasingly nervous.\n\nI slid my jeans down and stood there with only my boxers remaining. Likewise, Valeska slid her own jeans off, revealing her matching panties. We anxiously cast looks at each other's body. Valeska was unbelievably beautiful, standing there in only her underwear. Her body was perfect, with just the right amount of curves, well-toned, with smooth, creamy skin, a sexy, dimpled bellybutton, and a lovely, bulging chest. The freshman boys around the room were all gazing at her from the edge of their seats, as anxious as I was to see her with her clothes completely off.\n\nLayla studied my face nervously, as if worried I might pass out. I paused for a moment, realizing that Valeska had one more article of clothing to remove than I did. I decided to wait on my boxers. She realized I was pausing, and understood that she should go ahead and remove her bra. I stood there almost able to hear my heart thumping, as she reached around behind her back to undo the clasp.\n\nThere was an audible gasp in the room as Valeska undid the strap and pulled them to the front of her body, then allowed the cups to fall from her chest. I found myself transfixed, as I watched Valeska's beautiful pair of boobs spring free. They were gorgeous; full, and round, with deep brown, perky nipples that looked perfect for nipping and sucking. I found it cute that they were just a slight shade paler than the rest of her body. She cast a nervous look in my direction and saw me gazing at them, then tried to hide a subtle smirk that quickly formed on her face.\n\nFreshman boys and girls alike gawked at Valeska's freely wiggling boobies as she dropped her bra onto the pile of clothing forming at her feet and then turned back to face them nervously. She stood there shaking, fully naked except for a tight pair of panties, revealing an impression of the soft mound of her sex. I felt my penis begin to twitch and come alive at the sight of her body, including her side boobs sloping gently out from her chest, and desperately tried to keep control to prevent getting an erection too quickly.\n\nI knew the time had come. I was about to slip down my boxers and reveal my penis, in front of Valeska, in front of Layla, and in front of a crowd of strangers. I tucked my thumbs into the elastic waistband and looked over at Valeska. She grasped the waistband of her panties and we both took one last deep breath in. In unison, we slipped down our underwear and revealed ourselves fully nude before the room.\n\nAs my semi-erect penis flopped out, it caught surprised looks from young women throughout the room. There was an instant murmur as they covered their mouths, cast looks at their friends, attempted to suppress giggles, and began studying my genitals. I stood there feeling my lengthening, swinging shaft hanging down over my testicles, attracting non-stop attention.\n\nI quickly looked over at Valeska, and saw her finish sliding her panties down before stepping out of them. She stood back up, and I caught my first glance of her fully nude body. She turned her head to the side, and quickly shot a look down between my legs. For a moment, she gaped at my newly exposed penis, and then glanced up at my face. She studied my reactions as I quickly examined her beautiful pussy. She was freshly trimmed, with just a light layer of dark pubic hair covering her mound. I could see a slight, pinkish slit running through it, and I gazed in fascination at the delicate lips of her outer labia peeking through.\n\nAfter we briefly stared in fascination between each other's legs, we quickly scooped up our clothes and walked over to the chair that Layla had provided. Layla seemed awkwardly frozen, equally surprised by the sight of our bodies. She patiently waited for us to finish before adding any more commentary. I followed behind Valeska as she approached the chair and set her bundle of clothes down on it. I couldn't help but gaze down at her softly wiggling butt cheeks as she did this.\n\nShe turned back around to return to the futon, and almost ran into me. I glanced down at her jiggling boobs, as she awkwardly scooted to the side to let me pass and place my clothes beside hers. We both returned to the futon, and continued to stand naked before a throng of horny students, who couldn't seem to get enough of the shocking sight of our two, fully nude bodies.\n\n\"Ok-ay,\" said Layla, her voice briefly cracking. She paused for a moment, trying to collect herself. \"Sorry- wow. Okay.\" Everyone giggled. Valeska and I laughed nervously. \"Sorry, Sean and I have been friends for a long time, and I've never actually seen his penis.\" Layla had grown red herself, and looked as giddy as the freshman girls, who laughed with understanding.\n\n\"Keep it together, Layla,\" I thought, praying that she'd keep control of the situation and get us safely through this experience.\n\n\"Anyway, um... so, here they are, naked. In case that wasn't obvious enough. Uh. So, I'm sure you're all familiar with what a penis looks like. Or cock, shlong, dick, whatever you prefer.\"\n\nAll attention in the room turned to my penis. I felt an overwhelming sensation of excitement, seeing so many eyes fixed squarely between my legs, as if analyzing my curly pubic hair, the long shaft, and the thick knob of my head. The sight of the young freshman girls delighted by the sight of my penis grew so arousing that I suddenly felt the blood rushing southward, beyond my control.\n\nWithin a few moments, it was inevitable that I started to throb. With each pleasurable pulse I felt my cock begin to lift away from my body and rise bit by bit into the air, until it became a full grown boner. Excited laughter and squeals of embarrassment filled the room as the students watched my penis grow before their very eyes. I felt as if I was going to die. Even Valeska laughed.\n\n\"Well! That's called an erection,\" said Layla, with a humorous look on her face. \"That's precisely what's supposed to happen when a guy gets aroused. His penis becomes erect.\"\n\nThe girls in the crowd were especially losing it, giggling uncontrollably and falling onto each other. Layla worked hard to quiet them down. I was beginning to become increasingly turned on by the excitement of the students.\n\nShe added, \"Not that the guys need any introduction to boners. I'm sure many of you already have one of your own.\" She smirked at the group. The girls continued to laugh. Some of them took covert looks at their male friends' crotches to see if there was any evidence of this. Many of the guys shifted nervously, and I knew very well what they were indeed hiding inside their pants.\n\nLayla continued, \"It's less obvious when a woman becomes aroused, but her nipples may become erect, for example.\" Valeska looked down at her own breasts. I noticed that her nipples were in fact quite taut and erect. She seemed embarrassed as the room turned to examine them. Layla continued, \"And though you can't necessarily tell from the sight of her vulva, but as Valeska comes more aroused, her vagina will begin secreting a fluid that acts as a natural lubricant. This is what we refer to when a woman becomes 'wet' down there.\"\n\nValeska stood there stiff and anxious as eyes lowered all around the room to examine her pussy. I wondered if she was already wet.\n\n\"Of course the idea is that once Sean puts his erect penis inside her vagina, it will be properly lubricated for sexual intercourse. If extra lubrication is needed, you can buy synthetic lubricant. There are various kinds, and you might want to experiment and see which ones you like the best.\" Valeska and I exchanged nervous looks, hearing Layla remind us that we were about to make physical contact soon, and perform the act she just described. \"Before we move on, are there any questions?\"",
        "The crowd of freshmen stared at us, and at Layla. No one seemed to be willing to speak under the current circumstances. Finally, a guy toward the front grinned and raised his hand.\n\n\"Yes, a question- go ahead,\" said Layla.\n\n\"Will she let us... um... touch anything?\" he asked, laughing. Layla's eyes widened in shock, surprised he even dared to ask the question. She looked like she was about to snap back at him, but briefly looked at Valeska first.\n\n\"I... don't mind, I guess,\" Valeska whispered to Layla. \"If he just wants to, um, gently feel my boobs or something.\" I was shocked that Valeska was agreeing to this, but also turned on.\n\n\"Oh! Okay...\" Layla said in surprise. She turned to me. \"Uh... what about you?\" she whispered.\n\n\"Um... I guess it's okay,\" I said.\n\n\"To... like... touch your penis?\" she replied, making doubly sure she, and I, understood what we were talking about.\n\n\"Yeah,\" I said, \"You know, within reason.\"\n\n\"Okay...\" said Layla. \"Um, in that case, I'll let a few people who want to touch them do so. But listen up- remember that I'm expecting you to be respectful here. Gentle, brief touches only. If either of them are uncomfortable, we're moving on.\" I was proud of Layla for taking so much care in our comfort. The crowd nodded in agreement.\n\n\"All right. Well who wanted to... touch Valeska's boobs? I'll just pick a few of you.\"\n\nThe guys scrambled to raise their hand highest in the air. Layla seemed overwhelmed, but pointed to a few lucky guys. Valeska nervously approached the students, then squatted down in front of them. I watched as the first student chosen reached out and gently placed his palms against Valeska's chest and proceeded to gently squeeze her boobies. She looked at him nervously. I could see he was trembling with excitement as he felt them gently squish in his hands. A huge grin formed on his face as he briefly rubbed her nipples and felt them continue to harden at his touch.\n\nOne by one, a small handful of young men reached out and played with Valeska's boobs, bobbing them in their hands, gently squeezing them, getting to understand their firmness and warmth. The girls sitting nearby studied their faces, amused by what may have been the first time their male peers got to feel a pair of female breasts.\n\n\"Okay, that's good,\" said Layla, letting Valeska return to stand next to me by the futon. \"Okay, Sean? Can a couple girls feel your penis now?\" I nodded to her and approached the students. My stiff, swollen cock swung playfully in the air in front of my body as I took each step, and I saw their eyes growing ever larger as I got closer.\n\nThe girls squealed with laughter and volunteered each other to touch it, saying, \"Do it!\" and \"So-and-so wants to touch it!\" Layla chose a few girls and I moved closer to them. The first girl looked both excited and intimidated by my massive boner, but reached up, took a few fingers, and gently squeezed my shaft with them.\n\nHer jaw dropped and she began laughing. \"Oh my god, it's so hard!\" she giggled. Laughter ensued around the room. She grew bolder and began to wrap her entire hand around my cock, squeezing it gently. She ran her hand along the full length of my penis, then lifted and examined the head curiously. The other girls that had been chosen grew impatient and made it clear that they wanted a turn. They each reached out and began to play with my cock, lifting it, moving it left and right, peering closely at every detail as I stood there aching and throbbing in their hands.\n\nAs the laughter and excitement died down, Layla instructed me to go back to the futon, smirking at me. \"Okay, so- now that you're all intimately familiar with live, naked bodies, let's talk about sex.\" The moment she said this, I saw Layla growing nervous again, having to talk about an awkward subject.\n\nShe began, \"I can tell you, from experience, that sex is a whole lot better if you take your time. You might kiss for a bit, cuddle, you know...\" She realized Valeska and I were just standing there, so she motioned to us, as if to tell us to demonstrate.\n\nMy heart skipped a beat. This was it. It was about to become physical.\n\nValeska and I each took an awkward step forward, unsure who was going to approach whom. Finally she advanced toward me until our bodies were closer, the gap between us being the exact length of my erect penis, sticking straight out between us. We leaned in and began kissing. Awkwardly, at first, because of her awareness of my swollen member, but as soon as I wrapped my arms around her, we pressed up against one another. I felt the bliss of her warm, trembling, naked body against mine for the first time.\n\n\"This is called foreplay, and can really be anything you like it to be. Think of it as a way to start building the excitement between you and your partner. It's especially nice if you start by just stroking each other with playful touches. Sean might start touching Valeska's boobs. She might want to start stroking his penis.\"\n\nI gulped, knowing that we should start doing the things that Layla was narrating. I reached up and cupped Valeska's breasts. I felt her chest suddenly rise with an inward breath. She smiled at me, excited by the sensation of my hands on her soft skin, as they ran over her boobs, and brushed across her nipples, then squeezed them gently like the freshman boys had done just moments ago. I felt Valeska's trembling hand find its way down to my erection, where she wrapped her fingers around the shaft of my cock. Slowly she moved her hand back and forth along the entire length of my penis, while the crowd of freshmen watched with rapt attention.\n\n\"You can do this for however long you like,\" Layla explained, \"until you're ready to take the next step.\" She paused for a second, watching us touching each other. I could tell she was anxious about guiding us onward, but then she finally summoned the courage to continue.\n\n\"So, uh... I guess we can talk about oral sex next?\" She looked at us expectantly. We turned and looked at her, saying nothing, which she understood as approval to proceed.\n\n\"Okay, let's start with Sean,\" she said. She then turned to Valeska and whispered, \"Do you want to kneel down in front of him?\" Valeska nodded and did so. My huge erection extended out in front of her face, which she looked at with nervous excitement. \"So, it feels really good for guys to have their dicks sucked. Trust me, they ask for it all the time.\" The crowd laughed. \"But it takes a little practice, like anything else. The important thing is to just relax.\"\n\nShe turned to face Valeska. \"Valeska might start by teasing him a little. Kissing, or licking his penis.\" I watched as Valeska planted a soft kiss on my shaft and then on the head of my penis. The moment I felt her lips against my cock, I felt like my heart was going to burst with excitement. Then she ran her tongue up along the underside of my hard shaft and I felt a rush of unbelievable erotic anticipation building.\n\nLayla continued, \"While his excitement is building, Valeska can probably feel him begin to throb, which makes her more excited. She can probably smell how aroused he's getting. He'll probably have a heady, musky smell, kinda like pheromones, as his penis becomes increasingly engorged and swollen.\" I could see Valeska breathing in deeply as she continued to kiss and lick my cock, inhaling the aroma of my sexual excitement. \"And then, Valeska, when you're ready, you can take Sean's penis in your mouth.\"\n\nValeska looked up at me with a slight smile and I could see she was still trembling. I smiled back at her, and nodded. She reached forward and grasped my cock, then opened her mouth and began to glide it inside. I shivered as I felt it move smoothly over her warm tongue. I saw the girls in the room gawking, as their jaws dropped open. There they sat, watching Valeska begin to suck my swollen cock, like a lollipop, right in front of them. The guys stared intensely at her mouth as she swallowed me whole, taking me deeper and deeper inside. All the while Layla continued to explain how to be careful with one's teeth, which muscles to relax, and how to optionally manipulate the shaft with one's hand while sucking.\n\nOnce Layla determined that the demonstration was sufficient, she instructed Valeska to release my cock. It popped out of her mouth, slick and wet with her saliva. She gazed up at me with a look of hungry desperation. I could tell she'd begun to move past the initial period of fear and nervousness about this event, and was now fully gripped by a powerful, sexual excitement and lust. I returned the look and helped her to her feet.\n\n\"Okay. So next... At this point, Sean is hopefully excited to eat Valeska's pussy. But before we get into that, we need to have a little real talk about pussies in general. If there's anything that guys don't understand, it's female anatomy,\" she said, smirking. She turned to Valeska and sheepishly said, \"Would you mind sitting on the edge of the futon, and opening your legs so we can look at the different parts?\"\n\n\"Okay,\" said Valeska. Though I could see her tensing up and becoming at least a little bit nervous.\n\nI stepped to the side and let her sit at the edge of the futon, with her knees in the air. She moved them to either side, until she sat in front of the crowd, fully spread eagle. I sensed her nervousness and complete vulnerability, so I smiled at her and saw that it had the intended soothing effect.\n\nMany of the guys in the crowd adjusted themselves to get a better view of Valeska's pussy, spread wide open before them. I joined them in taking a look. Together we gazed between her legs, enthralled at the detailed view we were getting of her intimate places. Her smooth, trimmed pubic hair ran flush to her skin in one direction toward two pinkish lips, which were beginning to puff up slightly due to her intense arousal. A barely perceptible dusting of hair circled her labia. Valeska gazed down at her own pubic mound anxiously, awaiting further instruction, and probably brooding about what I and the freshmen thought about her body.\n\n\"So you're looking at Valeska's entire vulva at this point. That's everything that's externally visible to the naked eye- no pun intended. The two lips you're looking at constitute her outer labia, at the entrance to her vagina.\" Layla turned back to face Valeska, and whispered, \"Can you spread yourself open a little?\"\n\nValeska nodded and reached down between her legs, then took two fingers and spread herself open. I stared in amazement at the glistening, pink hole that she revealed. I knew what the male freshmen were going through, as they stared in wonder at Valeska's pussy. I could see how hard they were straining in their pants, as their own penises throbbed as hard and as relentlessly as mine. I knew the frustration they must have felt at being unable to do anything to release the pent-up sexual frustration that caused them to suffer in that moment. Valeska knew it too, as she examined all their faces, becoming visibly absorbed in their erotic fixation on her body.\n\n\"There you can see her inner labia,\" explained Layla, as she continued to point out the different parts of Valeska's female anatomy, until she finally said, \"And that little nub there is Valeska's clitoris. This is the most important part of her genitals, from a sexual perspective.\" She went on to explain the importance of it, its sensitivity, how to respect and pleasure it. The girls smiled in understanding, and looked amused at their male peers as they absorbed this important information.\n\n\"Valeska, if you'd like to lie back now, Sean can get started,\" Layla suggested. Valeska's eyes remained fixed on mine as she slowly laid back on the futon, adjusting herself until she was comfortable. Then she took a nervous breath and spread her legs open. I couldn't help but sneak another peek at the students that had gathered to watch. They were sitting there with stiff, taut spines, peering over the person in front of them, deeply absorbed in the sight of her spread pussy, or examining my reactions to her with a mixture of excitement and amusement.\n\nI turned back to face Valeska, who was giving me a look of nervous longing. As I got down on the futon and crawled between her legs, I found myself confronted with the most intimate and private part of her body. I gently caressed the sensitive inner part of her thighs, while gazing in wonder at Valeska's pussy. Her outer labia, covered with a light layer of brown pubic hair, was stretching open slightly. The wrinkly, pink lips of her inner labia began to peek through. I ran my finger gently over the hood concealing her clit, and felt its solid pressure resisting my touch. Her body tensed up at my touch, and she began to softly sigh.\n\nLayla suddenly began narrating, as if realizing that she had herself become as absorbed in what was about to happen as the freshmen around her. \"So Sean has started to caress Valeska, teasing her, making her crave his touch before he goes in. At this point, her pussy is probably starting to tingle. It's no doubt getting wet. Her clit is becoming increasingly hard and sensitive to the touch.\"\n\nI leaned in and inhaled deeply, enthralled by the sweet, feminine odor of Valeska's pussy, which I could see was indeed becoming increasingly wet. I felt the heat of her body radiating from her delicate skin as her hips began to shift beneath me in anticipation of my touch. I softly kissed her labia, then worked my way down along her tender, pink lips. I realized from Layla's sudden silence that I was running the show now.\n\nFinally, when I could see that Valeska could stand it no longer, I ran my tongue between her labia, giving her a long, slow lick. She instantly moaned and arched her back. My warm tongue worked its way up through her parted lips, collecting the first of her sweet juices.\n\nLayla continued, her voice starting to tremble with her own personal arousal at the scene, \"Now that Sean's... uh... had his first taste of Valeska's pussy, he's navigating it with his tongue, exploring every crevice. He's working his way toward her clit- but not starting there. He'll get there in time.\"\n\nThe freshmen leaned in, aroused, alert, and glued to the sight of my face buried in Valeska's crotch as she began to writhe at my touch. I could hear them whispering excitedly and giggling. I ran my tongue up and down along Valeska's wet folds, separating her lips and tickling every inch of her pussy all around her clit.\n\n\"Oh god, Sean...\" she whispered, as she began to press her hips gently forward. I glanced up toward her face, obscured by the rise and fall of her breasts and the dark, erect nipples standing at attention. A wide grin had broken out across her face and she moved her head gently backward overcome with a growing bliss. I sucked at her damp flesh, and then began to lick with increasing hunger, as Valeska became increasingly wet. As I eagerly ate her pussy, there was a just audible sound, like the wet smacking of lips.\n\n\"At this point you can obviously hear that Valeska's pussy is totally soaking, so Sean is doing something right.\" The crowd responded with more giggles. \"Every girl is different, so you have to experiment and see what she likes.\"\n\nI felt my cock throbbing and bobbing stiffly between my legs as I became increasingly absorbed in Valeska's creamy wetness, now dripping down my face and chin. I knew that everyone in the room could see it, and knew how turned on I was. She continued to moan louder and louder as I sucked and licked, enamored by her taste and smell.\n\n\"Oh fuck!\" Valeska groaned suddenly. The crowd laughed and began to murmur. \"Oh god, Sean!\" she said, lifting herself up on her forearms and gazing down between her legs, with a huge smile. \"Yes! Oh my god, I'm so wet!\" she blurted out, excitedly.\n\nI could hear her softly squeaking as I continued to build her excitement and pleasure. I ran my tongue in circles around her clit and felt her squirming more and more, then I flicked my tongue quickly across it.\n\n\"Fuck! Yes! Oh god, Sean... yes, make me come!\" she screamed. I could tell she was so caught up in the moment that she couldn't even think about the fact that strangers were listening to her.\n\nAs I continued to lick, I plunged my finger deep into her pussy, reached upward, and began stroking. She threw her head back, overwhelmed with the intense sensations, then ran her hand over my head, alternating between laughter and moans of pleasure.\n\n\"He's... um... Sean has... inserted a finger into her vagina... he's searching for Valeska's g-spot...\" said Layla, struggling to find words as she watched my partner squirming in a fit of intense pleasure. \"But he hasn't stopped stimulating her clit... consistency is key.\"\n\n\"Oh god, oh god, Sean!\" Valeska began screaming. \"Yes... that feels so good! My pussy is so wet you for! Make me come- oh god, please!\"\n\nThe students were beside themselves with excitement listening to Valeska crying out in so much pleasure, and seeing her bucking her hips uncontrollably as I coaxed out every bit of pleasure I could. Suddenly I felt her body tense up and she shouted, \"Oh my god! I'm coming, I'm coming!\" I felt a series of spasms course through her body and her warm juices flood my mouth.\n\nThe room was suddenly filled with the sounds of girls and guys clapping sarcastically, as others still covered their mouths in embarrassment at what they were watching; a senior girl having an orgasm in front of them.\n\nI pulled away from Valeska's pussy to find her sprawled out on the futon, breathing heavily and staring at the ceiling. A dark wet stain had formed between her legs. I wiped my chin and grinned at her until she made eye contact and gave a brief laugh. She mouthed, \"wow\" to me, silently.\n\nI looked up and saw Layla gazing at us, having completely forgotten what she was doing. I tried to subtly get her attention.\n\n\"Oh- sorry, okay. So Valeska just had her first orgasm by Sean. Um. And we can move on.\" She turned to face Valeska, and whispered, \"Can you open the condom wrapper?\" Valeska nodded, and reached over to grab the condom that had been placed on the pillow for us.\n\nLayla continued. \"So oral sex was exciting and stimulating for both Sean and Valeska. Now as you can see that there's no question that Sean's penis is fully erect, and he's aching to put it inside her vagina. She's become absolutely wet and wants to feel him inside her too.\"\n\nI sheepishly sat on the futon, unable to do anything about my cock, which stuck straight up in the air in front of my body. Everyone in the room was observing how incredibly engorged it was. Truthfully, I was so turned on by the experience we were having that it was almost painfully swollen; more erect than I'd ever been before.\n\n\"But before he can do that, the most important thing has to happen. You all know what I'm talking about.\"\n\nThe crowd spoke up, virtually in union, groaning, \"He has to wear a condom.\"\n\n\"Exactly. We're in the business of promoting safe sex here, so we need to make sure that Sean has a condom securely on his penis.\"\n\nLayla strolled over to the futon and squatted down, inviting Valeska over. Having come closer to my body, I could see Layla breathing quickly, and she was staring at my cock. She reached out and nonchalantly grasped it with her hand, which was trembling slightly. I jumped slightly, surprised that Layla herself had touched me also.\n\n\"Now that it's nice and hard, it will be easy for Valeska to place it over the tip of his penis and roll it down over his shaft like this.\"\n\nShe demonstrated the movement, as if she were doing it herself. Her eyes darted up briefly to meet mine, and then quickly returned to my cock. I couldn't help but feel like Layla herself was so turned on by the sight of Valeska and I pleasuring each other that she wanted to take advantage of the situation to touch my cock herself. Layla invited Valeska to take over, which she did, slipping the condom down over my penis.",
        "Layla stood back up and took a few steps away from the futon. \"Now they're ready for penetration. So Sean, whenever you like, you can go ahead and insert your penis inside her vagina.\"\n\nThe crowd of students, still frozen in silence and wonder, stared at us expectantly. A few of the guys glanced over at the girls, perhaps at the ones they secretly liked, anxiously wondering what they thought of this. I turned to face Valeska and we exchanged smiles. We both took a deep breath, and I leaned over to embrace her. We exchanged a few kisses.\n\n\"Ready?\" I whispered.\n\n\"Absolutely,\" she said with a grin.\n\nI laid Valeska back down on the futon, feeling her beginning to tremble again in my arms. She put her knees up in the air and I spread them apart. I took stock of her long, nude body; from her sparkling eyes, to her long hair, to the beautiful round boobs tipped with her dark nipples, and then down to the damp, pink slit between her legs, still visibly glistening with moisture. There was not a peep in the room while I positioned my pelvis in front of hers, and then grasped my hard cock and began to rub my swollen head through her lips.\n\nI heard Valeska begin to whimper softly, and saw her face grow serious. Finally, I eased my hips forward and we both watched as her tight, wet pussy swallowed my cock inch by inch until it sunk all the way inside. Her whimpers grew to an audible moan as she melted into the futon, feeling me penetrate deep within.\n\nThe students began to murmur again and produce soft gasps as they watched me leaning over Valeska, slowly beginning to grind my massive cock inside her pussy. She gazed up at me with wide, wild eyes, as if urging me to continue and take her further down the road of pleasure. For a moment I lost myself in the pure bliss of being inside her. Valeska's warm, wet canal squeezed and massaged my cock as it glided in and out, becoming shiny and slick with her juices.\n\nWorking through her own state of arousal, Layla narrated, \"Sean and Valeska are now h-having sex in the missionary position. This is the most common and basic position that you'll want to try. The woman lies on her back and the man is on top, so that they can face each other, look into each other's eyes, et cetera. The man can control the rhythm and speed of his thrusts, but it is also possible for the woman to thrust against him with her hips.\"\n\nI began to thrust faster, watching Valeska's reactions, and she was lost in my eyes. We gazed at each other as I repeatedly penetrated her, until she began to moan louder.\n\n\"Ngh, Sean... that feels so good. Oh god, fuck me...\" she groaned, to the delight of the students, who inched closer and appeared completely absorbed in the sight of our two naked bodies moving in unison. They leaned over each other, desperate to see in plain detail how her pussy stretched and received the full girth of my cock.\n\nI was overwhelmed by the sight, myself, as I gazed at Valeska's full, jiggling boobies springing back and forth in response to my thrusts. I gawked at the sight of her sloppy, wet, hairy pussy receiving my swollen cock, as she writhed in pleasure and continued to beg me to fuck her.\n\nThe students were shaking with excitement. The freshman girls sat straight up, erect and instinctively pressing their chests forward, in a full-on state of arousal. The freshman boys were transfixed by the sight of Valeska's heaving boobs, while their own massive erections strained helplessly against their pants.\n\n\"Oh my god, your cock feels sooo good,\" Valeska moaned, tossing her head back, arching her back, and sticking her boobs up in the air. I leaned down and buried my face in between them, then began to kiss and suck at her erect nipples. She screamed with pleasure as I began to fuck her harder, pressing her pelvis against mine and trying to take me as deep as I could go.\n\nValeska looked down frantically at my cock as it churned inside her, and breathlessly exclaimed, \"I want to ride that big fucking cock!\"\n\nI excitedly threw myself down on the futon and flipped her on top of me, where she pounced on my body. Valeska's long, soft hair fell down over me and she laughed. \"This is so hot!\" she whispered softly to me, \"I can't believe we're doing this!\"\n\n\"I know!\" I whispered back.\n\nShe grasped my cock and angled her body over mine, then sat down over my hips, letting it slide deep inside her once again. She whipped her head back, sending her hair flying, then looked down at me with a devious grin, her nostrils flaring, and her eyes full of lust. Valeska began to bounce up and down on my cock, leaning back slightly, and letting her boobies wiggle about in front of my eyes.\n\nThe students began to squeal again and exchange rapid comments as they watched how excited and spirited we'd become.\n\nLayla continued to grow as enthusiastic as the students were, as they watched us fucking wildly on the futon. She added with a laugh, \"Valeska's really getting into it!\" Everyone giggled. \"As she said, she wanted to 'ride his cock' so they're now having sex in the cowgirl position. The woman straddles the man and sits down on his penis so that it penetrates her, and she 'rides' it, so to speak. Here, a woman takes a turn being in control. As a bonus, by quickly moving up and down on his cock, he gets an exciting view of her bouncing boobs.\"\n\nValeska rode me tirelessly, laughing softly and gazing into my eyes. Together we listened to the soft sucking sound of my cock moving inside her pussy, which was now so wet that it was dripping down over me and adding to the existing stain on the futon.\n\nI overheard one of the freshman boys sitting closest to us excitedly whispering to his friend, \"Oh my god, I can smell her pussy,\" and I wasn't surprised. The distinct feminine odor, as well as my own musky odor of arousal, began to scent the air and had an untold effect on the raging hormones of the horny freshmen enthralled with our unabashed display of raw sexuality.\n\nHaving become suitably drenched, I gave Valeska a break and again flipped her over. She immediately got on all fours, instinctively knowing what I wanted next. She moved her knees apart and stuck her ass in my direction, letting her pussy spread open so that it sat there, oozing and messy, waiting for my cock. I drove my swollen member back inside Valeska's tight, pink canal and began fucking her hard from behind. She cried out in pleasure, as I sent her boobs swinging beneath her chest. The room filled with the sound of my pelvis slapping repeatedly against her wobbling butt cheeks.\n\n\"Mgh! Yes! Sean!\" she cried, over and over.\n\n\"You're so fucking tight!\" I groaned. I excitedly began to squeeze the sides of her soft, wobbling ass, which was starting to redden as I pounded it with force.\n\n\"Nnhh! Yes, I'm so tight for you! Fill my wet pussy with that hard cock!\" she whined. At this point I could tell she was clearly making herself more excited by being so vocal in front of the students.\n\nOne of the male students finally raised his hand and said, \"I have a question.\"\n\n\"Oh, okay! What is it?\" said Layla.\n\nThe boy turned and looked back at Valeska and I, absorbed in the sight of our two naked bodies, now sweaty and slapping together rhythmically. He was clearly aroused by the sight of her jiggly bits moving freely about as we continued to moan and grind together. Finally he joked, \"When can we have a turn?\"\n\nThe other students erupted with laughter. Valeska turned and looked up at him in surprise, and started laughing, then gave him a wink. He grinned back at her.\n\nLayla rolled her eyes, saying, \"Very funny...\" She smirked at him, and then at us. \"Oh, and by the way, this is doggy style, so Sean is taking Valeska from behind, which allows him to penetrate her deeply and really reach for her g-spot.\"\n\nI leaned close to Valeska and whispered, \"Fuck, I don't know how much longer I can last here.\"\n\nShe whispered back, \"Okay, go back to missionary and let's make you come.\" She flipped back over onto her back and flung her legs to the side. I thrust my cock right back inside her, then resumed thrusting. I gently cupped her boobs as they jerked and heaved against my palms, then I leaned down and we began kissing.\n\n\"I wanted you so badly,\" she whispered softly in my ear. \"As nervous as I was, I've been dreaming of this every night since Layla first proposed it.\"\n\n\"Oh, me too. You're amazing. Your body is amazing. This is like a dream,\" I admitted. We laughed excitedly together.\n\n\"Now fuck me baby, I'm going to make you come so hard you won't be able to walk for a week,\" she said, grinning.\n\nI sat back up and grasped her knees for leverage as I began driving my cock into her pussy like a piston. She began squirming frantically, almost instantly, as her pleasure rapidly increased. The room fell silent again, sensing that we'd almost reached our limit together, and waiting with bated breath for our final release.\n\n\"Oh fuuuuuck,\" she screamed, arching her back and accentuating the lively dance of her breasts. I continued to thrust with a frantic urgency, listening to the sound of her pussy squeaking with a juicy wetness.\n\n\"I'm going to come! I'm going to come!\" she shouted, grabbing my arms. She cast me a look of determination as she gritted her teeth and frantically bucked her hips in sync with my thrusts. \"Fuck, fuck fuck!\" she wailed, \"I'm comiiiing!\" I felt the spasms grip her body and shoot through her, head to toe, with a series of wild tremors.\n\n\"Oh my god!\" she exclaimed, as they finally relented. I continued to fuck her repeatedly, nearing my own orgasm.\n\n\"Oh god, I'm going to come too!\" I shouted, thrusting faster and faster.\n\nLayla sprang to attention. \"Oh gosh, okay, so Sean is about to ejaculate.\" She turned to me and whispered, \"Where? Inside her, or somewhere else?\"\n\nI sputtered, \"I dunno, where do you want?\"\n\nThe students, overhearing us, had all sorts of suggestions. The boys were the loudest, many of whom were screaming, \"On her boobs!\"\n\nSuddenly I felt the urge arising inside me and knew that I was going to blow at any moment. I yanked myself out of Valeska's soaking pussy and ripped the condom off, then started stroking myself quickly. Valeska scrambled onto her forearms, still huffing and puffing, out of breath from her own intense orgasm.\n\nShe gazed at my cock excited, then into my eyes, and then back at my massive erection as I pumped it in the direction of her boobs, which she thrust forward. I took delight in the huge smile on her face, and the anticipation of knowing that I was going to erupt at any moment.\n\nAfter just moments of aggressive stroking, I felt a sudden, tingly sensation shower down over my body, followed by a powerful orgasm. I moaned and jerked my hips forward as my cock suddenly began spasming wildly. There was an audible, collective gasp in the room as a thick spurt of semen ushered forth and splashed across Valeska's chest. I kept slowly stroking my cock and moaning as I squirted again and again, helplessly spraying her boobs with a seemingly endless torrent of warm cum.\n\nValeska laughed at the sight of my uncontrollable and sudden squirts making a mess of her body. The students began to cheer, applaud, and laugh, many turning red-faced again, shocked to see the sheer force and amount of my output, not to mention surprised to see a man coming in front of them in the first place. I myself was surprised, but the situation was so erotic and intense for the two of us, that I shouldn't have been.\n\nLayla was now chuckling at the animated students, frantically chattering with each other about what they just saw. She began to try to calm them down. I collapsed on top of Valeska and felt her wrap her arms around me, smiling softly into my neck. I could feel the sticky sensation of my own cum against my chest as her boobs softly pressed against my skin, but I was so spent that I didn't care.\n\n\"That was incredible,\" Valeska cooed into my ear.\n\n\"Yeah,\" I said, before we exchanged a series of loving kisses. I heard Layla speaking up finally.\n\n\"Wow. Okay. So if you're lucky, THAT is what sex will be like for many of you,\" she giggled, pointing to our naked bodies lying in a heap. The students continued to laugh excitedly and cheer. \"I'm going to let Sean and Valeska clean up, and then I'll take any more questions any of you may have.\"\n\nFinally the hands shot into the air and waved about, as students began to feel comfortable asking intimate questions about what they just saw.\n\nLayla turned to us first and said, \"You guys can use my bathroom if you like to wash up and get dressed.\" We smiled and nodded to her. She addressed the students again, saying, \"Everyone please thank Valeska and Sean for being such good sports and sharing this experience with us!\"\n\nThe students offered us all manners of congratulations and thank-yous, waving enthusiastically as we rose. I helped Valeska off the futon and accompanied her to the chair to pick up our clothes. We smiled and waved to the freshmen, then wandered into Layla's bathroom and shut the door. We could hear the murmur of students shouting over each other with questions for Layla in the other room.\n\n\"Oh my god, oh my god,\" Valeska repeated with a laugh.\n\n\"We did it! We made it through that!\" I said.\n\n\"I know! I'm so proud of us,\" she said, grinning.\n\nI wrapped my arms around her again and squeezed her tightly. We frantically sought out each other's mouth and began kissing. I could tell Valeska was turned on by my excitement, and I was turned on by hers. When we stopped kissing, I found some tissues and got them wet, then began helping to clean my cum off Valeska's boobs.\n\n\"Did you see their faces?\" she asked.\n\n\"Yes!\" I laughed, \"And all the guys had raging hard-ons watching you!\"\n\n\"I know!\" she giggled. \"I don't think you have any idea how many of the freshman girls were gawking at your cock though.\" I grinned.\n\nWhen I finished cleaning Valeska and myself, I disposed of the tissues and we stood there staring at each other, until finally we both burst out laughing again.\n\n\"That was the most erotic thing I've ever done,\" she concluded.\n\n\"Me too. Probably the most erotic thing I'll ever do,\" I added.\n\n\"Oh? Is that a challenge?\" she asked, giving me a sly grin.\n\nI laughed. \"If it is, I can't imagine what I'm in for.\"\n\nShe snickered, and we embraced again, this time remaining that way for some time. I didn't want to let go. I wanted to feel her naked body against mine forever. After all the fear and anxiety, I felt sad that the experience had even ended.\n\nBut I had to wonder... did she take that challenge thing seriously? If so, I could only imagine how exciting my final school year might be..."
    ],
    "authorname": "SolarRay",
    "tags": [
        "college",
        "young",
        "students",
        "sex education",
        "demonstration",
        "freshmen",
        "school",
        "dorm room",
        "voyeurism",
        "exhibitionism"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/freshman-orientations"
}
{
    "title": "Cricket Match",
    "pages": [
        "This is a sequel to 'Amy's makes a new Life' and 'After the game,' it doesn't matter if you skipped those, I'll cover what you need to know, but it would be best to check them out first.\n\nThis story is mainly about Sarah and what happens to her in the period after her international one-day cricket debut. It is told mainly from her perspective but occasionally, later on, her friend Olivia takes over the narrative.\n\nThe story includes sexual activity, but it is secondary to the events, so if that is not what you're after, look elsewhere.\n\nThe game of cricket features in this story, but you don't need to know anything about it, except that it's a team game, played with a bat and ball. There are three formats of the game; a 'test match' is played between countries and takes place over five days for men and four days for women, (I have no idea why). It is the purest form of the game. A one-day game takes place, as the name suggests, on one day and lasts for up to 50 overs for each team (that is 300 fair deliveries or balls). A T20 game takes just over three hours, each team receives 20 overs (120 deliveries) and it is fast and furious with games often taking place under floodlights. A new format of cricket, 'The Hundred' is being played in England for the first time in July/August 2021, but it's new and I've chosen to disregard it as we have no idea how it will work out.\n\nI hope that my words will provide you with enough detail to enjoy the story. There are lots of explanations on the internet if you really are serious about understanding the game of cricket - but don't do it! The term 'batsman' refers to the person holding the bat, it is not, at least in my stories, intended to be gender-specific. I use the terms batsman, batswoman and batter interchangeably as I feel most appropriate, if this offends you, oops!\n\nAll characters are fictitious and over eighteen when involved in anything sexual and all activity is consensual. The Bandit's cricket team is fictional. The England Cricket team referred to in this story is entirely of my own creation. Any resemblance to real people is accidental.\n\nNew Year\n\nThere was a sound somewhere in the house that sounded like a fire alarm or a fog horn, it was something strident and very annoying. I sat up only to realise that it was just the alarm on my phone. It also seemed like sitting up wasn't a great idea, because I felt my head spin, so I flopped back onto the pillow. That caused my brain to wobble violently inside my skull. I closed my eyes; it was all my own fault. I should have cancelled my alarm, there was no need to get up at 7 am, as usual, especially not when you've only been in bed for four hours and have had too much to drink, far too much.\n\nLast night I'd been out with some fellow university students, it was fun, so much fun that I forgot, or rather ignored my golden rule. Two drinks are enough, three if I was really determined to party and never more than that. For me, two beers alone are okay, more than two glasses of wine make me start talking, a lot! Some of what I say is funny, but I ramble all sorts of nonsense and my discretion filter goes to bed early leaving me exposed. I play cricket, I keep fit, very fit and I know that alcohol impairs my training regime. But it was New Year's Eve today, last night was an early celebration at a club in the city centre and, given the time of year, a couple of drinks shouldn't hurt. Except that I had about five, two beers, then two glasses of wine and a shot of something that I thought could be used to run my car. I wasn't one of those people who could drink all night, I was a lightweight and now I was paying for it.\n\nIt had been a mistake on many fronts. Tonight, I was celebrating with my friends Karen and Olivia and in four days I was flying out to Barbados, to play against the West Indies, on my first overseas tour with the England Women's Cricket team. I'd done a junior tour last year and I'd played my first one day and T20 games in the autumn. I was lucky to be picked for the full tour and this was not a great way to start.\n\nI washed my face and pulled on running gear thinking that exercise was the way to recover. I drank a litre of water before I set off. Normally when I'm at home I have a three-mile loop that I do every day, if I'm feeling good, I add a bit extra. As I set off, I decided that my two-mile route was much a better idea. Then stupidity set in again when I reached the halfway point, I turned left instead of right and that added another two miles to the run. The last half mile, normally where I sprinted a bit harder, almost killed me. I struggled up the three flights of stairs, didn't use the lift and almost had to crawl into the kitchen for coffee.\n\nI put the mug down on my bedside table and fell back onto the bed. I closed my eyes hoping that the Grim Reaper wasn't lurking underneath it waiting for me. I sipped the coffee, groaned again and was asleep seconds later.\n\n*****\n\nAlmost five years ago I'd first played cricket at school, discovered that I loved it and had some skill. The coach had identified it and I was good enough to be spotted by scouts. I'd played and trained with the junior England set up and last summer had played for the University and local women's teams including the Bandits who play the shorter forms of the game. That had resulted in me being selected for the One Day International team and I'd made my debut at the ground a quarter of a mile from where I was now lying.\n\nThe first time I attended a cricket match was about the same time I started playing and at that same ground. That was where Mum and I met Amy for the first time. Amy was single, having lost her wife a few years earlier. Mum was divorced, Dad had walked out on us when I was only seven. Mum and Amy became friends. Mum had no idea that she was gay before then and the two of them fell in love. We moved in with Amy a year later. They were a good match and loved each other very much. Living with Amy had been wonderful, I loved her as well, in my own way.\n\nWhen I woke up, I felt a lot better but I didn't smell very fresh, so had a long shower and that was followed by a huge pile of toast and more coffee. When Mum and Amy arrived home, I spent a little while with them before getting dressed, a pair of tailored trousers, a blouse and sweater, with pair of low heels. I packed a holdall with nightclothes and a change of clothes for the next day. I'm tall, 5 feet 10 inches, skinny with long blonde hair and I know that I'm not bad looking.\n\nMum and Amy had been invited to a party somewhere and I was staying over with Karen and Olivia, but first I had to drop in to see my grandparents. I collected two bottles of bubbly, boxes of chocolates and set off.\n\nGran and Grandad had been incredibly supportive of Mum and me, they were wonderful people. They approved of Amy and she, in turn, enjoyed being with them. Her parents had died when she was in her early teens and now, she enjoyed having parents again as an adult. I suspect that Grandad liked her all the more because she kept bringing him bottles of whisky, I just brought chocolates. I smiled when I thought about him, he'd had a dream as a young man that maybe his son would one day play football for England, then he'd had two daughters, who he loved to death, so much that his dream didn't matter to him. I remember the pride and pleasure he had when I told him that I'd been picked to play cricket for England, that was when he told me the story of his dream and he'd added, \"Football, cricket it doesn't matter, you've made my dream come true.\" I'd got immense pleasure from seeing him after my debut game and giving him the stump that I'd grabbed as a souvenir and which he kept safely, brandishing it occasionally when he wanted to brag in the pub. I spent two hours with them and promised to keep them up to date with what happened on my tour.\n\nIt was almost 9 o'clock when I arrived at Karen and Olivia's home. Well, where they lived, it was Karen's parents' home, but they were working in the middle east and Olivia was living with her. Karen had made a huge bowl of pasta and the three of us tucked in. I ate by far the largest portion and told them about the previous evening and the consequences of alcohol. \"The good thing is, I won't be troubling your stock this evening, soda water and lime for me and I brought my own. I also brought a couple of bottles of bubbly for midnight and I may have a single glass.\"\n\nOlivia smiled at me, \"You've never had much tolerance for booze, that's why we like being with you, you're a cheap date.\" We all laughed.\n\nWe chatted for another half hour before the other guests arrived. There were four of my former schoolmates, three girls and a boy, none of whom I'd seen for almost eighteen months. I was a bit surprised to learn that Katrina and Joe were a couple, they'd barely looked at each other in school.\n\nThere were another two couples, who Karen and Olivia knew from university and also a cousin of Karen's. We had music playing and sat in small groups chatting. I had to retell the story of my cricket exploits a couple of times and the story of how Olivia and Karen became a couple had most of them sitting with their mouths agape\n\nJust before midnight we cracked open the bubbly and handed around glasses, raising them as the bells rang out, well, as they sounded via the TV. There was a round of hugs and kisses, handshakes and lots of good wishes. There was a bit of dancing and a lot of laughter. I was pleased that I was here amongst friends.\n\nDuring the evening I'd watched Karen and Olivia closely, not to the exclusion of being a party pooper or some kind of weirdo. These were the two people that I was closest to, apart from Mum and Amy obviously. They knew almost all of my secrets, as I knew theirs, although maybe not as many as I once did. They'd always been close and since they'd told me of their new relationship, I'd been able to see how much they loved each other. That evening, however, I saw something else; they were even more comfortable with each other in company, never far apart, they touched each other a lot and I'd guess that most people wouldn't have noticed unless they were watching, as I'd been. It was almost as if they had moved to a new plane, a new depth of their love. I smiled, I was happy for them, I could have fancied either one of them if only I'd known they were interested in girls. But their relationship made me happy; I wasn't jealous of them, except that they'd found their special person and, although barely twenty, I knew that I wanted to find that same relationship and of that, I was jealous.\n\n*****\n\nIt was late when the others left and the three of us were alone. I headed to Karen's room, expecting to sleep there as I'd done so many times, but Olivia took my hand, \"Why don't you share with us? Like old times.\"\n\n\"But...\" I hesitated, \"The two of you, surely you don't want me, like a spare thing?\"\n\nKaren heard her, \"Don't expect anything except a cuddle, but yeah, come with us.\" We headed for what had been Karen's parent's room, which they now shared. I got a goodnight kiss, Olivia snuggled up behind me and Karen behind her. I slept well that night, it felt like old times, I felt loved and very happy.\n\nOver toast and coffee late the next morning, actually, it was closer to lunchtime, I asked them about their relationship. It was Karen who answered, \"For some reason, I was uneasy about the label, but I knew that I loved her and not how I love you or my folks. When you throw that unease away, the clouds clear and you can be free. I can't imagine not feeling like this about her, I know with a certainty that I want to be able to love her and wake up with her for the rest of my life. I'd like a family with her, to share her sorrows, for her to comfort me when I need it.\" She looked at Olivia and what I saw there was hard to describe, but it was love, total love.\n\n\"I'm jealous, well not of you two, but what you have, I'd like that. I can see how you feel and it makes my heart sing.\"\n\nOlivia stroked the back of my hand, \"One day Sarah, you'll find her. You're gorgeous, fit, clever and a nice person. It'll happen.\"\n\nThe Tour begins\n\nMy cricket gear was stowed, including several bats, gloves, hats and pads. Our playing and training kits were being sent separately, but even so; the 'coffin' was full. The 'coffin' used to be a long box that cricketers transported their kit in, so named because it resembled a coffin. Nowadays they were made of ballistic nylon, much lighter and shaped more like huge backpack, but the name had stuck. I laid out the clothes that I wanted to take, shorts, T-shirts, skirts, underwear, shoes and a few dresses for evening wear. A phone, camera, laptop, headphones and chargers were stowed in my shoulder bag, along with a couple of textbooks. I was going to miss a couple of weeks of classes and tutorials at university, but the staff were used to this and had set up things so that I'd be able to catch up when I got back.\n\nMum gave me a safety lecture; drink, boys and behaving myself. \"Boys?\" I asked.\n\n\"You never know.\" She replied.\n\n\"Mum, I think that I do. I'm not like you used to be, I've never had any doubt about who I prefer. I see how you two are and I doubt if love could ever be any better than what you have. I watched Karen and Olivia the other night, it almost made me cry they're so good together.\"\n\n\"Just be careful.\" Amy joined us and added her own words of wisdom, oddly very similar to Mum's.\n\n\"I've transferred money to your account, for emergencies. Remember what I told you last year, stand your round, don't go short. And one more thing...\"\n\n\"Stay in touch because you worry about me. I will I promise. Thanks, both of you. I'm excited and terrified at the same time.\"\n\n\"Take your chances when they come your way and learn from this experience.\" Amy hugged me as she spoke and I'm sure that she was blinking back tears.\n\n\"I doubt if I'll get much playing time, I'm the baby of the squad, but I'm still chuffed as hell to have been picked.\"\n\n\"They wouldn't be taking you for fun. Enjoy it.\"\n\nAs Mum left my room, I was sure that she was crying. I'd been certain that she loved me my whole life, despite all of the other issues we'd had and she'd done everything that she could to encourage and nurture me. Amy had joined in that process after they became a couple. I'm not sure I could have asked for any more.\n\n*****\n\nI loaded my cricket gear and suitcase into the van before giving Mum and Amy a hug. \"I love you both, take care of each other and I promise I'll be in touch regularly. Love you both.\" After their words of love and well wishes, they drove off. The other girls on the team were gathered in groups chatting and, even standing alone I could feel the excitement amongst them. One of the support staff checked on me and I joined one of the groups, listening to the chat until I realised that someone was standing close to me and I smiled when I realised that it was Hayley. \"Hey, Sarah, nice to see you. Excited?\" She asked.\n\n\"Excited, nervous, lots of feelings. All old hat to you though?\"\n\n\"I still feel the excitement at the start of a tour. Fancy sitting with me on the bus and the flight?\"\n\n\"Yeah, that would be great. Not sure who I'm sharing a room with yet.\"\n\n\"That would be me too. I thought it might help you and, as we're friends anyway, we should get on okay.\"\n\nHayley and I trained together regularly and we'd seen each other away from training, but really only for a coffee and not much more. I'd never really thought of her as a friend outside of cricket, just my hero, my role model and she was rather gorgeous. It pleased me and sharing with her rather than someone I hardly knew was good. I smiled at her, \"Great, do you snore?\"\n\nShe burst out laughing, \"No idea, but not when I'm awake.\" That made me laugh and gave me confidence that things would be good.\n\nWe chatted with our teammates and the support staff at the airport whilst we waited to board and didn't talk to each other much until we got onto the flight. Then it was nonstop, we discussed our parents, families, university, cricket, music, films, anything and everything until we'd eaten some pretty average airline food. We had a single beer each during the meal, but that was enough and suddenly there was a silence. I asked if she fancied watching a movie so we checked out the various channels and both selected the same film. There was no chat as we watched, but when it was done, we talked about the action, the characters and the plot. Hayley talked about her tactics as a bowler and what she knew of our opponents. The cricket talk was engaging and I'm sure I learned a fair bit, but only time would tell. I settled back into silence with a coffee and reflected, spending the next few weeks with Hayley seemed as if it would be easy and fun. She was a great cricketer and I hoped to be able to rely on her experience.\n\n*****\n\nThe hotel was set on a beach to the north of Bridgetown and all of the rooms were on ground level in lovely gardens. The reception area was open to the elements, full of plants and the whole place looked much more luxurious than I'd anticipated. As expected, Hayley and I were sharing a room and it was delightful, two double beds, a large bathroom, TV, sitting area and doors that opened onto a small patio. There was a small pool a few yards away and the beach fifty yards further on. It was dark, so it was hard to see what the beach would look like in the daylight. Hayley threw her bag on the bed nearest the patio doors and said, \"This looks lovely and I fancy this bed, any objections?\"\n\nI shook my head; I didn't care which bed I used and was overawed by what we had for the next couple of weeks, thinking that this would do nicely.\n\nWhen I got to bed that night, I was tired but happy. Hayley had been great company and I was pleased to be with someone that I knew. I fell asleep quickly.\n\n*****\n\nWe were both awake early and decided to have a quick run along the beach. We went about a mile and turned back. The area was amazing, with a beautiful blue ocean, clean sand and verdant vegetation, by the time we headed for breakfast I felt relaxed and eager to see what was next.\n\nNext was training. We started with a warm-up, then a vigorous workout and even though this was not unusual for me several times a week, it was tough going. After a break, we split into groups for practice; catching, fielding, batting and bowling. The hotel had set up some nets behind the main building and we took full use of them.\n\nWe stopped for a light lunch and plenty of rehydration, which we needed, it was hot and we were working hard. By the time we stopped mid-afternoon, sun bathing was the only option as we were all shattered. We ate dinner together as a group, the food was good and there was a terrific atmosphere. I fell into bed that night and slept soundly.\n\nThe next few days followed the same routine, one exception being a practice match with a local junior team.\n\nHayley is gorgeous and very talented, we rubbed along nicely, when not practising we spent our time together, I enjoyed her company and was grateful that she chose to spend so much time with a junior member of the team.\n\n*****\n\nThe coaches had organised a nice dinner, some music and asked us to dress up. It was a chance to let our hair down a little, even though it would not be a late night, before the game the next day.\n\nHayley had a fairly long dress in pale blue with short sleeves and it showed plenty of cleavage. She'd done her make-up and looked stunning. I wore a red halter neck dress that stopped mid-thigh and I stepped into a pair of heels, not something I wore very often, but they did great things for my legs and I knew this outfit suited me. Hayley whistled when she saw me, \"You scrub up nicely.\"",
        "\"So do you, come on, let's have fun.\" I hooked into her arm and we set off for the dining room.\n\nIt had been a lovely evening and I'd enjoyed myself, apart from one thing. Yvonne Green, one of the senior support staff, had caught me alone, when we were in the toilet and said, \"You do know that Hayley's gay, don't you? Be careful or people will talk and you don't want to get that sort of label.\"\n\nI was stunned, \"What sort of label? I don't understand.\"\n\n\"Well, you don't want people to think you're one of those lesbians.\" There was venom in her speech and I was too stunned to reply for a moment. I was about to tell her that I was already 'one of those,' when she flounced out of the door leaving me gasping for breath. I'd known that Hayley was gay, but thought nothing of it, I was as well, so why would it be a problem, but I realised that she disapproved.\n\nI put the whole conversation out of my mind and enjoyed the rest of the evening until we headed for our rooms just after ten.\n\nAlmost as soon as we entered the room Hayley said, \"You looked as if you had fun and you look lovely.\"\n\n\"Thank you, ma'am.\" I curtsied as I replied, giggling as I did so and then told her about the conversation with Yvonne. I'd stepped out of my dress as I finished the tale and was standing close to her.\n\n\"Maybe she has a point, maybe you don't want any gossip.\" It was an unguarded response that I'm sure she meant casually.\n\n\"I don't care about the gossip; I like you and I'm happy in your company and sharing a room with you.\" I smiled and so did she. Then I took another half step towards her, leaned forward and almost face to face said, \"Maybe we should give them something to gossip about.\" I have no idea where the bravery came from, but I leaned further forward and kissed her.\n\nIt took all of ten seconds for her to respond, but by that time something had tripped inside me, this was incredible, I felt as if I was on a cloud and the kiss was something hard to describe, so I'll settle for momentous. I gave it everything I had and Hayley responded in much the same way. I pulled back a little and felt myself tremble; I knew that I wanted more of that. Hayley looked at me, \"What was that about?\" I didn't get the chance to reply before she continued, \"Jesus, that was something special. I liked it, a lot.\"\n\n\"So, did I. I'd like more.\"\n\n\"What sort of more?\" Her eyebrows were up almost at her hairline and her eyes wide.\n\n\"Everything, everything that you have.\"\n\n\"You mean you want to sleep with me?\"\n\n\"I hadn't really thought about it until now, but yes, although I'd rather we had sex and not so much actual sleep.\"\n\n\"You're crazy, are you serious? How much did you have to drink?\"\n\n\"Two bottles of beer and yes, I fancy you. As I said, I hadn't thought about this until now, but I'd love to strip you naked, lie beside you and do things to you.\"\n\n\"What sort of things?\"\n\n\"Not sure, but sexy things.\"\n\nWe closed and kissed again, I unclipped her bra and brought my hands to her breasts, she sighed, \"If you keep that up, I can't be responsible for my actions.\"\n\n\"Please don't hurt me, apart from that...\"\n\nI pushed her back onto the bed and followed her down lying on top of her. She looked shocked but amazingly beautiful and very sexy, \"I want to make love to you and it's not alcohol, it's... I want you.\" I slid down and took her left breast between my lips and toyed with her right nipple using my thumb and forefinger, she squirmed and sighed but that didn't matter, I could feel how it was affecting her and she wriggled her hips. I suspect that it was a signal that she wanted more and in particular to be touched between her legs. I let go of her nipple and moved that hand to her mound and as soon as I touched the top of her slit, she almost melted.\n\n\"If you're teasing me....\" Hayley said.\n\nI didn't reply but slid down until I was between her wonderful thighs and I laid my tongue on her mound and licked, long and slow, stroking her belly with a free hand. These were uncertain waters for me, yes, I'd had sex with a couple of girls before, but they'd been my age and in the same inexperienced boat as me, now I had the most wonderful, beautiful, sexy woman at my mercy and I wasn't going to pass this opportunity, so I got to work. In fairness she wasn't hard to figure out, she squirmed and sighed providing all the information that I needed to satisfy her. I slipped my tongue inside her and her hips came off the bed to meet my mouth, she liked that! I slid a finger inside her and then nibbled at her clit, \"Fuck yes, fuck me, please Sarah, please.\"\n\nShe came and I kept going until she came again and went limp. I fell back onto my pillow with an arm wrapped around her and knew for certain that it had been something very special, something that I hoped could be repeated.\n\nI don't know how long passed, I just lay there with her hand on my leg and suddenly she was over me and two fingers were inside me. I looked up at her smiling face, \"That was the best sex I've ever had and now I want to please you.\"\n\n\"You don't have to do...\" My mouth and brain had stopped working. Something started in my toes, raced to my brain and back down to the junction between my legs and the second her tongue touched me I exploded like a balloon that had been over-inflated. I screamed and then it started again. I didn't scream as I came for the second time, I just sighed and fell back feeling more satisfied than I'd ever been or even thought possible.\n\n\"Thank you,\" I muttered as we gently kissed. \"That was the most wonderful thing ever, thank you. What...\" I hesitated.\n\nHayley interrupted, \"What happens now? I don't know, but that was special and tomorrow we have a game so I suggest some sleep and sweet dreams.\"\n\nWith that, I relaxed into a delightful slumber.\n\n*****\n\nThe first rays of the sun were peeking over the horizon and stirred me. Hayley was behind me, nestled with an arm over my hip. I cast my mind back a few hours, the kiss, the touching, the sex, the satisfaction and the love that I felt for her. Was this a one-time thing? Had it been a mistake? Would she have regrets? Was there a future for us and if so, what would it look like? She'd been my inspiration when I first picked up a bat, but I'd never expected to play for England or even play professionally. She was my hero and had become my friend and training partner and now, here on this trip, my what?\n\nThere was a time once, about a year ago, when I realised that it wouldn't take much for me to fall in love with her, but I'd dismissed the idea as stupid, one-sided, unrealistic and that it would get in the way of the future I wanted to try to achieve. Now we'd had sex, we'd kissed. Was there a chance and what would it mean?\n\nShe stirred, her hand moved, she muttered, \"Oh.\" I rolled over and she smiled as she spoke, \"It wasn't a dream then?\"\n\n\"No. Good morning, I've been awake about ten minutes thinking about last night, about us and what now. I'm scared.\"\n\n\"Don't be scared, Sarah.\" She leaned forward and kissed my cheek. \"I don't regret one second of it, it makes me happy, but I don't know what comes next and we need to talk, but first we have a game today. So, get that sexy bum into some clothes and let's go for a leg stretch.\"\n\nI felt my smile develop. She said that she didn't have any regrets and she was right, this, whatever it was, would have to wait.\n\nIt was game day, so we kept our beach run to a mile out, turned and came back, before some more stretches, a shower and into training kit before breakfast. There was little time to talk and what talk there was involved cricket.\n\nTest match\n\nI was on the list of twelve players for the game and the Coach had told me that she would make her decision about who to leave out when she'd had a look at the pitch. I thought that she was likely to choose Lisa and leave me out. As sad as I felt about that, I was pleased to have been named in the twelve and knew that I'd get on the field as a substitute fielder at various times during the game. I'd called Mum earlier to tell her and she promised to phone Grandad and let him know.\n\nDuring the warm-up, I did quite a bit of bowling in the nets to give the batters a feel. I did plenty of fielding practice because I knew that at some point, I'd been doing it. We were winding up when the Coach called me over. \"Looks like the wicket is going to develop for spin, you're playing Sarah, get ready.\"\n\nI wasn't sure whether to dance a jig, fall to my knees and offer up a prayer of thanks or burst into tears. I did none of those as Hayley patted me on the shoulder and said, \"Come on you, let's get ready. Congratulations.\" We raced to the changing room and I managed to fire off a text to Mum, before turning my phone off.\n\nThe whole team trooped out on the field and formed a circle, I wondered what this was about. I spotted Jane Burns, a former England captain, now a radio commentator and she was wearing her England blazer. The Coach held up her hand to ask for quiet before she spoke, \"Sarah Hardy makes her test debut today and with that, she gets her England cap. We always try to get a former player to present them and Jane Burns has agreed to do the honours, Jane.\" I was in shock; I'd never thought about this.\n\nJane stepped forward. \"Thank you, it's always a privilege and honour to carry out this task. Sarah, you've already played for your country in the short versions of the game, but today you make the leap to the highest form of cricket, Test Cricket. The presentation of your England Test Cap is a memory that will stay with you for the rest of your life and it marks a new chapter in your life.\n\nIt is a great honour to represent your country, so enjoy it, play your best, remember that your teammates are counting on you, that the public will be watching and that your opponents are your friends as well as your opposition, play the game within the spirit of cricket. Sarah Hardy, England International Test Cricketer, congratulations.\" She shook my hand and presented me with the cap. It was made of dark blue wool, eight panels with a peak and on the front, the three lions of England topped with a crown. I took it in my hands and raised it to my head. I was incredibly proud; I'd not been expecting this and I had to wipe away tears as I muttered a quiet, \"Thank you.\" Then I was on the receiving end of handshakes, slaps on the shoulder and many hugs.\n\nI made my way back to the dressing room where I sat for a moment staring at this thing in my hands. I'd wear it today and then I was going to keep it safe, I preferred a floppy hat or baseball cap in any case. It didn't seem real and I was brought back to earth as Hayley sat next to me, \"You okay, quite a moment, isn't it?\"\n\nI turned to her and replied, \"I didn't think about this and now I'm a bit overwhelmed. Thanks.\" She took my hand, which was on the bench between us and gave it a gentle squeeze. No one could have seen that gesture, but it meant the world to me, her smile melted me and I knew that the feelings I had for her were very real.\n\nI spent the morning near to the boundary, moving position as the bowler or captain directed and chasing down every ball that came my way. It meant total concentration, watching every ball bowled and every stroke played by the batswoman. As the bowler ran in, I took a few steps forward, being on the move was important, but on most occasions, there was nothing for me to do, except watch.\n\nThe crowd were close by, it was a women's game and therefore only about five thousand people were in the ground, but they were vocal and knowledgeable. When one ball came my way, I swooped on it, took in one hand and threw it back in one smooth motion getting it to land in the wicket keepers' gloves right over the top of the stumps. As I walked back to my position a young man in the crowd called out, \"Well done young lady, good throw.\" I looked up at him and he raised his pint of beer in a toast, smiling as he did so. His shirt marked him as a West Indies supporter and that was why I loved this game, he appreciated good play, but I'm sure that if I'd fumbled the ball, he'd have appreciated it even more.\n\nThe lunch break was twenty minutes away, I was looking forward to another cold drink and a seat when all of a sudden, this red ball was speeding towards me. It had been hit flat and was only about five feet above the grass as it got closer, it seemed that it was going to be just out of reach, I dived to my side, full length and threw out my right hand. The ball thwacked into the palm, my fingers closed around it and I tightened my grip as I hit the ground holding the ball clear of the turf as if showing the world some treasure I'd brought up from the depths of the ocean. Some of the crowd roared, some groaned, many applauded and then I was mobbed by my teammates as the batswoman made her walk back to the changing room. More slaps on the back, I was going to have bruises if this keeps up.\n\nFive minutes later Helen, the Captain, beckoned me and as I ran towards her, I wondered what she wanted. The idea that she was going to ask me to bowl was far from my brain, \"Okay Sarah, keep it full and tight, a couple of overs to get us to lunch.\" She handed me the ball and I stared at it as if I'd never seen one before as if it was a grenade and the pin had been pulled. I turned around and saw Hayley gesture to me, suddenly I was back to some sort of sense and I bowled a couple of test deliveries to her to loosen my arm and shoulder.\n\nThe first ball was a bit wide and the batter watched it as if she too thought it might be a grenade, but then she'd never seen me bowl before. The second one was a bit wide the other way and again she watched. My third one was straight and she played it with a soft bat so it rolled gently along the ground back to me. The next one caught her by surprise, it moved slightly off the seam as it bounced and she missed it. The next did the same thing and she played it away to mid-wicket, but there was no chance to take a run. My confidence was up, but that was soon dispelled as the next ball sped to the boundary to score four runs.\n\nI bowled another two overs before the interval and conceded another seven runs. One ball had fallen just short of a fielder and a potential catch. It could have been a worse start, but equally, it could have been better and I was grateful for the break to settle my nerves.\n\n*****\n\nThe afternoon session saw me once again patrolling the boundary for an hour and a half until Helen waved me over and threw me the ball. I bowled nine overs before the tea interval. I didn't take a wicket, but they didn't score many runs either, only seventeen, that was good and a low run rate frustrates the batters so they take more risks and my teammates bowling from the other end took three wickets during that period. I was pleased to get another seat and a cold drink during the interval. The sun had been relentless and the concentration required for fielding was tiring. I managed to close my eyes and clear my mind of everything, so much so that one of my teammates tapped me on the shoulder and told me it was time to go again.\n\nAs I walked out, I started heading to the boundary when Helen called to me, \"Sarah, take this end and keep it as tight as you did before tea, Hayley can go after them from the other end.\"\n\nThey took the odd run from me, but I kept it tight as requested. Hayley took more risks, more variations and they scored more freely from her, but she took another two wickets, only one to go. I was worn to a frazzle, I'd never bowled for this long and never in such heat, but I knew that there were only ten minutes to the close of the day's play and I kept my mind on the next ball and then the one after that, one at a time. I was sweating and rubbed my palm in the dirt to try and keep it dry, to stop it slipping from my fingers. Despite that the next one did slip, it flew, almost as if in slow motion, I dreaded my opponent heaving it to the boundary, but fate decreed that the strange delivery fooled the batsman and she clipped it back to the fielder at short mid-on not far away from me. Suddenly there was a roar, I'd taken the last wicket and the opposition innings was over. I got a few handshakes and more pats on the back as I wearily trudged off the pitch. I threw myself into a seat, grabbed some water, which I gulped down and closed my eyes, I was done.\n\nOnce an innings is completed there is usually a ten-minute break to allow the teams to get ready, for the new batsmen to get kitted up and for the new bowers and fielders to stretch and limber up. But as the end of the days, play was within that time, it was over for the day and I was pleased about that. I'd fielded well, taken a catch and a wicket from my bowling, not too bad for a debut at the highest level.\n\n*****\n\nBy the time we'd got back to the hotel, had dinner and a brief team meeting it was almost 9 pm. I fell back onto the bed, Hayley stood at the end of it looking down at me. \"Knackered?\" she asked.\n\n\"It's been quite a day, it's hard work, lots of emotion and...\" I wanted her to kiss me, but perhaps that wasn't going to happen, I had no idea.\n\n\"I'm going for a shower. You need to call your Mum and then we can talk, but an early night is a good idea.\" 'Yes, it is, especially if you'll hold me,' I thought.\n\nMum was so excited she could hardly speak and, even though it was after midnight at home, I heard a lot of chatter in the background, so I asked her where she was. \"Amy and I are at Gran's. Your Grandad has been listening to the radio all day.\"\n\n\"Is he there? Can I speak to him?\" The phone was handed over and he said, \"Hello.\"\n\n\"Did you hear all of it?\" I asked.\n\n\"Every word lass, every word. I shed a tear or two, I'm so proud of you, so proud I can't begin to explain it. I've got a picture of you in your cap printed off already.\" We spoke for a couple of minutes, then Gran, Amy and finally Mum again, before I hung up.\n\nHayley was sitting on the end of the bed and handed me a glass of something fizzy. \"One glass to celebrate the day, your debut, first catch, first wicket and your cap. Cheers.\"\n\nI took a sip, \"But there's also you and I and last night.\" This was the thing that concerned me most, I'd managed to put it out of my mind all day, but now it was there, at the front of my brain and getting bigger.\n\n\"We need to have a longer conversation and tonight is not the time. I know that's not ideal, so I'll say this. What happened was a surprise, but a good one, I have no regrets whatsoever, I'd like to repeat it and most of all I want to go to sleep whilst holding you and kissing you goodnight.\"\n\nI stared at my glass feeling a bit lighter, \"I'd like that too. I have no regrets, none except that we had to stop.\"\n\n\"Let's see where it goes for the next few days. I was worried that you'd want a change of roommate.\"\n\n\"No,\" I snapped, \"Never,\" I paused, it had sounded harsh, \"Sorry, I didn't mean to snap, I don't want to change anything, nothing. I'm bushed, I'm going to have a shower and turn in.\"\n\nHayley was in bed when I came out of the bathroom brushing my hair. I looked at her and she turned back a corner of the duvet which I stared at it, \"Is that an invite?\" I asked.\n\nShe nodded, I threw my brush onto a chair and climbed in next to her. She took me into her arms and kissed me, suddenly it was as if there was nothing else in the world except the two of us. When we stopped kissing, I looked at her, \"I was terrified that last night was going to be a one-off. I didn't want it to be.\"\n\n\"Neither did I. But now I want another kiss.\" She got her kiss and then sleep overtook me.\n\nDay two\n\nWaking up the next morning was similar to the previous day, except that I was the one wrapped around Hayley with an arm over her hip and my face buried into the nape of her neck. Something stirred her, \"I thought that I was dreaming, but it's not a dream, it is you.\" She pulled away to give herself enough room to roll over to face me. Nose to nose, eye to eye, we stared at each other. \"This is a nice way to wake up.\"",
        "I lifted a hand to stroke away a stray strand of her hair that partly covered one eye. \"I'd like to wake up next to you forever.\" It was said casually, but my next words were stifled as she spoke.\n\n\"Forever is a long time, but the way that I feel about you is almost overwhelming.\"\n\n\"Why? I'm not sure that I understand.\"\n\n\"I'm not sure that I understand either, but I've had this feeling ever since that first kiss, that I want to be with you as, I don't know, my girlfriend, my lover, my partner. It was all I could do yesterday to concentrate on the cricket, I kept thinking about you and us. It scares me.\"\n\n\"What scares you?\"\n\n\"How I feel about you, I'm in love with you.\"\n\nI gasped, \"But how, why?\" Her words shook me.\n\n\"I am, I think I have been for a while, I don't know, I can't explain it, but I know what I feel and it excites me, as well as scaring me.\"\n\n\"I didn't think about it yesterday whilst we were playing, I was terrified of screwing up. But in between times it was always there and I know...\" I hesitated.\n\n\"You know what?\"\n\n\"That I love you, I mean I'm in love with you, I have been for a while, I think. I probably was but didn't let it ever... I refused to acknowledge it because then it would have been real and I'd have to face the fact that it was stupid. You're older, probably wiser, famous, I'm none of those things.\"\n\n\"Older yes, by almost five years, wiser is doubtful, famous is a matter of opinion, but none of that matter, it's how we feel.\"\n\nWe kissed and for the first time in my life I felt something very special, that I could never put into words. I called to mind the words I'd spoken to Olivia and Karen just, was it only ten days ago, about wanting to find a special someone. I think that I've found her.\n\nRealising the time, we pulled on some clothes and set off for our run. When we got back, we fooled around in the surf for a few minutes before changing and preparing for the day ahead.\n\n*****\n\nBecause our team were batting it meant that most of us sat about on the balcony of the changing room and watched the play unfold. It was important for the next person who was to go in to bat to be kitted up with pads on, bat, gloves and hat ready, but it also gives you a sense of the play, how the wicket is behaving, the fielding positions the opposition were using and the light. All of these things were important for the next batters, but I was a long way down the order, so I watched to try and learn about test match cricket. Hayley and I didn't sit together, she had her ways on match days and although we spoke now and again, I was pretty much alone with my thoughts.\n\nI didn't think about the two of us very much, I didn't think that it would be very productive, neither of us knew how things would go. I spent an hour sitting next to our batting Coach who talked about techniques but she didn't talk about mine, saying that in the middle of a match wasn't the time to try new things, she was right, that would have been foolish.\n\nWe scored runs steadily, without any drama and only lost a couple of wickets before lunch. During the early afternoon, the runs came more freely, but we lost a couple more wickets and I realised that Hayley was walking out swinging her arms, helmet on, looking determined. I noticed her long blonde ponytail swing from under her helmet and watched her ass as she walked, smiling as I thought how nice it was to cuddle against. As I was batting at number eight, I thought it was a good idea to get ready myself, it would be embarrassing if two wickets went down quickly and they had to wait for me.\n\nThen it was the tea interval and I took my pads off again, only to strap them all back on again twenty minutes later. Things were going smoothly and forty minutes passed before a wicket fell and it took another half hour before I was suddenly up, pulling on my gloves and setting off. It was Hayley who had been trapped leg before wicket and she didn't look happy as we passed on the boundary. She muttered, \"Good luck,\" as we crossed.\n\nI didn't have any nerves as I'd walked out and it was only after the first ball, I faced had fizzed past me without my seeing the damn thing, that nerves set in. Suddenly I realised that I was batting in a Test Match for the first time in my life and that everyone was watching. I got a bat on the next ball, but no run. Then I realised that Grandad would probably be listening with his ear to the radio and that made me determined not to let him down, for some reason he was the one I most wanted to please, he was such a lovely man and so proud of me.\n\nI took a single and raced to the other end only to realise that it had been the last ball of the over and I was on strike again. I batted for fifty minutes until the close of play and had scored 24 runs, not great but it could have been worse. The problem was five minutes before the end another wicket went down and Helen came out as the last man, woman! She didn't score, but we were still there when stumps were called and we had a first-innings lead of forty, so far.\n\nHayley greeted me at the top of the steps with a bottle of cold water, a huge smile and a slap on the back as she said, \"Well done, you did great.\" Several other team members said similar things and Helen the Captain hugged me as she added her congratulations. I sat down for ten minutes, not moving except to sip my water, I was emotionally worn out.\n\nDinner was a quiet affair. We were casually dressed as usual and ate some very nice Barbadian stew washed down with a couple of bottles of beer. Half a dozen of us walked along the beach for half an hour letting the water lap over our feet and talking about the days play. I wanted to take Hayley's hand but didn't think that it would be very wise.\n\nWhen we got back to the main hotel buildings someone suggested another beer, but I declined, I was tired and felt worn down by the events of the day and knew that I had a call to make, so I excused myself and headed for the room. After another shower, the third of the day, I pulled on a T-shirt and phoned Grandad. We only spoke for five minutes, but he was full of praise and made me feel so good. Gran told me that he'd never moved from the radio all day and that she was also very proud of me. I asked her to call Mum, to assure her that I was okay. Then I climbed into bed and was out like a light.\n\nI felt the bed move as Hayley climbed in. I said, \"Hi,\" and she apologised for waking me. \"Don't be silly, I couldn't stay awake, but I would hate to have missed a goodnight kiss.\"\n\n\"You had a good day and I knew you were shattered, but I love your goodnight kisses so there was no chance of missing one.\"\n\nShe leaned in and our lips met. I was in heaven, no one had ever kissed me like Hayley. Suddenly I was wide awake and the two of us were wrapped around each other and it was turning me on. Hayley slid down the bed, between my thighs and kissed me down there, she slid a finger inside and touched a very special spot that had me coming in a few seconds.\n\nShe lay beside me smiling at me, \"You enjoyed that.\"\n\n\"I've enjoyed every touch, every kiss, every cuddle, everything that we've shared. Now I need to do something for you.\"\n\n\"There's no need you're tired, leave it...\"\n\nI shut her up with another kiss, annoying words like 'no need' were not what I wanted to hear.\n\nI slid down and assumed the position she'd been in and lapped at her, I used two fingers and thrust them in found her spot, \"Fuck yes, there, right there.\" And she came within a minute or two. I kissed her and was out again.\n\nDay three\n\nThe sun was shining, Hayley was holding me and I felt great the next morning.\n\nI strode out to the middle with Helen, pulling on my batting gloves as we walked. For the first few overs we only added a couple of runs, but then decided that we needed to get on with it and score runs more quickly. I've no idea why Helen thought that meant flinging the bat at every ball, but that's what she did and she wasn't a batter of any note, that's why she was at number eleven. After another wild stroke that went to the boundary for four runs, it occurred to me that things weren't going to last much longer. I was right, the next ball demolished her stumps.\n\nWe were all out and as I walked back to the changing rooms I laughed as I thought about that phrase. Cricket has a language and terminology all of its own. You don't need to know it as a spectator to enjoy the game, what difference does it really matter to the viewer if the ball went to deep square leg, deep mid-wicket or cow corner, the fielding positions I was most often covering. A side has eleven batsmen or women and there has to be two in the middle at all times, one at each end of the wicket. So, when ten wickets have fallen or batters have been got out, the innings is over and the team is 'all out,' but one batter is still 'not out' and that's how it's recorded on the score sheet. No wonder people get confused!\n\n*****\n\nAt the start of the second innings, I resumed patrolling the boundary and was called into action a few times. I watched as Hayley bowled, I admired her style, grinned as her ponytail bobbed when she ran in. Then Helen called me over, \"Sarah, tight, keep it tight and frustrate them, let Hayley do her stuff.\" There were forty minutes until lunch and my first couple of overs were tight. Hayley seemed close to taking a wicket every ball.\n\nI started my third over giving away a single. My next slipped between bat and batswoman's leg pad dislodging the bail from the top of the off-stump. I threw my hands up in appeal, not that it was needed, the evidence of the batter walking off was obvious. It was the first time I'd taken a test wicket by bowling my opponent. Lots of pats on the back and a few well dones. Hayley squeezed my shoulder and gave me a smile that pleased me more than all of the other congratulatory gestures.\n\nMy next ball was padded away, but it must have made my opponent decide what she was going to do next. She advanced down the wicket towards me and I held the ball for a fraction of a second longer than normal, she missed it completely, but Amy, our wicket keeper, didn't miss, she took it close to the bails, on top of the stumps and quickly dislodged them. The batter was two feet away from the crease and safety. I turned as the umpire raised his finger, the batswoman looked confused and I raised a fist in triumph, before I was almost beaten to death by my colleagues, oddly now, something to be welcomed. I was bashed and clapped, there were lots of smiles, a few laughs and one brief squeeze of the shoulder, the gesture I valued more than all the others.\n\nI realised that I'd now taken wickets, caught, bowled and stumped, three of a spin bowlers' main ways of getting batters out, just a leg before wicket now required.\n\nAfter lunch I was surprised that Helen asked me to take one end, I'd expected the quick bowlers to be in action. Between us Hayley and I bowled in spells from that end through until tea, leaving the medium pace and quicks from the other end. The tactic seemed to frustrate the opposition no end and wickets fell regularly.\n\nWe were into the tailenders soon after the tea interval and hoped to wrap things up quickly. In between my bowling stints, I was active in the field constantly and had been moved closer to the action, mainly at mid-wicket and I stopped a lot of runs being scored.\n\nIn my final spell, I delivered a ball that I hoped would spin or turn just a little, but for some reason, it deviated a lot and the batter stared at it as it flicked her pads. I turned around and asked the umpire if it was out. I could see him replaying the delivery in his mind before he raised a finger and now, I also had a leg before wicket.\n\nWhen the play finished, we had two wickets to take and were 130 runs in arrears. A great position and I hoped that the next day we could win my first Test match.\n\nIt was a nice evening, after dinner, most of the team sat around talking until a steel band started playing. That opened the flood gates, there was lots of dancing and we tried doing some limbo dancing. I was amazed that Hayley could limbo as well as she did, I was okay, but fell on my backside a few times and decided to sit it out.\n\nOnce again, we headed to our room and after undressing there was more kissing, but we were both worn out and Hayley fell asleep in my arms. Oh, how good would it be for that to happen every night I thought.\n\nDay four\n\nThis morning we were lying back-to-back, touching very closely. Maybe not as nice as being held but I'd settle for that. We had our usual run, breakfast and then set off to the venue for some practice.\n\nTwo wickets to get and it was normal to start the day with quick bowlers, but Helen decided that we would move all the fielders in closer and crowd the batters. I was much closer to the action, but I had to be even more alert, because there was far less time to react, although less ground to cover. I was busy right from the off and saved a few runs.\n\nThe last batswoman was at the crease and she drove the ball towards my position and set off for a quick single, although why she thought that was a good plan, I have no idea. Her batting partner realised the folly of her decision and shouted a very loud, \"No,\" which made her turn back. By now I'd scooped the ball up, turned and threw a fast flat throw to the wicket keeper, who took the ball and rattled it into the stumps. The batswoman was still a yard from safety and the umpire raised his finger. We'd done it and I was chuffed with that last play.\n\nIt had taken less than thirty minutes before we wrapped things up, now we were batting again and needed only 141 runs to win. I sat watching and realised that Hayley had dropped onto the bench next to me. She leaned over, \"That was some throw, you're pretty good at this.\"\n\nIt made me smile and I was even more proud than I had been. She placed her hand on mine which was once again on the bench between us and squeezed it. I enjoyed that and expected her to move it but she left it there making me feel all warm, giving me a sense of being cared for.\n\nI have no idea what got into our opening pair, but the way they played you'd think they wanted to get it over before lunchtime and raced along. Suddenly a complete miscue and a wicket fell which slowed things up and by the break, we'd added 59 runs.\n\nHelen completely missed the first ball after lunch and it shattered her stumps. It's amazing how many times after an interval or even a drinks stoppage, a wicket goes down. Two balls later the other opener went and I started to get nervous, thinking about having to bat. Helen called over to Hayley and told her to pad up.\n\nWhen the next wicket fell Hayley walked out looking purposeful and Helen told me that she wanted Hayley to go and play as if it was a T20 game, where different, more aggressive, tactics were employed. In a few deliveries,' it was obvious that she was going to finish this quickly or sacrifice herself. She scored fifty at breakneck speed but whilst the boundary shots were great to watch some of the near misses made me cringe. Then one went so high it had snow on it when it came down, right into the fielders' hands. She slapped the air with her bat, but when she slumped down next to me, she was grinning and said, \"That was fun.\"\n\nBy the time the tea interval was due we only needed eight runs and our opponents still had to take four more wickets so the Umpires consulted and agreed to delay the break. It only took another fifteen minutes before it was over and I squeezed myself with delight, I'd won the first Test Match I'd played in, Grandad was going to be beside himself.\n\nThe celebrations after the game included beer with our opposition and they went on late. A great thing about cricket is the friendship between rivals and the chance to meet and chill out after the game. We had a late dinner, but it was a day off the next day.\n\nI was lying on the bed waiting for Hayley and when she appeared, naked, she jumped onto the bed with her knees astride me. She held my wrists on either side of my head and leaned in to kiss. When she stopped, I smiled at her, \"Nice to have you to myself again. Being with the gang and partying is good but this is better.\"\n\n\"You know we can do both, party and then our time. Now, what are we going to do?\" Her grin was mischievous. I didn't answer but slid lower on the bed so that her opening was over my mouth. I flicked her lips with my tongue. \"Are you serious?\" she asked.\n\nWords seemed superfluous so I drove my tongue in and grabbed her ass pulling her down more tightly against me. My ministrations made her moan and writhe, she moved her hands, placing them flat on the wall behind the bed. I'd wondered if I could do this for long before I needed to move, but the feeling of power to excite her and make her orgasm was incredible, of course, the person on top might also feel like they have control. Those thoughts took up too much energy so I stopped them and worked on my girlfriend's pleasure.\n\nHayley eventually collapsed sighing and muttering, \"No more, I can't take any more.\" She lay down with her eyes closed for a few minutes before she stirred and asked if I was okay.\n\n\"I'm great, I loved that and I want to do it again.\" Her face fell. \"Not right now you idiot, but soon, I loved it and I think you might have enjoyed it.\"\n\n\"I'll say,\" she replied. \"Give me a minute and I'll be with you.\"\n\n\"No, don't move, let's just sleep.\"\n\nDay off\n\nI woke up with Hayley wrapped around me and I relished the feeling that she seemed to love me. Despite not having any training that morning I slipped out of bed and into running gear. \"Watcha kid? Run again?\" She asked.\n\n\"We have a free day and we're going to have fun, but a run will make us both feel better.\"\n\nGrunting she threw back the duvet and wandered naked towards the bathroom. I sat brushing my hair and watching her in the mirror. She was slightly stockier than me, no not stocky, she had a great figure, breath-taking, she had more developed muscles and more mass, if anything she was perfect and I was touch skinny by comparison. The sight of her ass as she disappeared made me feel something incredible, but it would be better to resist or we'd never get out of this room.\n\nAs we ran, I asked, \"Did you call me 'kid'?\"\n\n\"I did, I guess. Why, what's the problem?\"\n\n\"I'm not your kid, don't do it again, I don't like it.\" I wasn't mad, I was younger than Hayley, but for some reason, I didn't like the term.\n\nHer reply was, \"Okay Princess.\"\n\nThat made me laugh and I nearly tripped. That made her laugh loudly. We did our usual two miles, then showered and headed for breakfast, a big breakfast today, no training.\n\nThere were sail boats at the hotel and we decided that it would be fun, so we headed to the beach where we spoke to the person who organised the water sports events. He offered us two single boats or a two-person sail boat and we opted for the latter. For the next ten minutes, the guy explained what he thought we needed to know and the questions that Hayley asked made me think that she'd done this before. The idea of tacking went over my head, but I did understand the bit about righting the boat if it capsized and he made us practice. I was good at it and suspected that it would be useful, probably more than once.\n\nHayley took the tiller and we set off at quite a speed, the sun was bright and we'd slathered on the sun block, added sunglasses, hats and a T-shirt over our swimwear. It was quite exhilarating and I relaxed with my feet up enjoying the speed, then Hayley decided to change course. Now, it was my first time in a boat of this type, actually of any type except a ferry or a rowing boat, but even I realised that I was in a really bad position to balance the boat when it was turning at speed. She'd not given any warning or any thought to the process and over we went. I knew that practising getting the boat back the right way up would be useful and it only took me two goes, getting back into the damn thing took plenty of effort though.",
        "We set off at a gentler pace and I asked what had happened. \"I don't know, the guy said push the tiller handle thing and it would turn around.\"\n\n\"Well, it did, it turned upside down, you're not very good at this are you?\"\n\n\"Hey Sarah, that's not fair, it's my first time.\"\n\n\"What?\" I yelled, \"I thought you'd done this before, the way you were talking I was expecting Admiral Nelson or Francis Drake at the very least, now it seems I've got Captain Pugwash (a bumbling old UK cartoon character). I could be out here all day, stranded.\"\n\n\"Shut up, or I'll make you walk the plank.\"\n\nI laughed, \"We don't have a plank.\"\n\n\"No, but I could throw you overboard.\"\n\n\"You already did that!\" I laughed, I wasn't that worried and added, \"And here I thought you cared for me.\"\n\n\"If you criticise my sailing anymore, you're chucked.\" She paused before asking, \"What did he say about 'tacking', we're going to have to do that to get back, right?\"\n\nMy face fell. \"I assumed that you'd done this before and knew what you were doing. Looks like I might be swimming back.\"\n\n\"Best of luck with that, these are shark-infested waters.\" I tried not to laugh, there weren't any sharks in these waters.\n\nIt took a long time to get back, changing course trying to get the sail in the right place to catch the breeze. Hayley gave direction and I did as instructed. When I suggested a new strategy, it didn't go down well. I thought that I detected a hint of embarrassment from her. It was quite endearing and despite us not making much progress it made me love her a tiny bit more.\n\nWe swam in the sea and then chilled in the pool to get the salt out of our hair. A burger for lunch and Hayley brought me a drink. I realised that there was rum in the coke but didn't think much of it until I started gibbering rubbish. Hayley took my hand and we headed for our room, me talking ten to the dozen. I managed to get out of my swimsuit and she pushed me back on the bed. I watched as she pulled her clothes off and suddenly had this overwhelming desire to hold her.\n\nThat didn't happen, she kissed me then sucked on my nipples, but it was just enough to get me going before she manoeuvred between my thighs and ran her tongue over my slit and onto the clit. I asked her what she was doing, no idea why as I knew quite well and then I yelled something as she really got to work. Time passed, but I've no idea if it went slowly or quickly, my only thoughts were about the sexual crescendo she was causing and the orgasms that rolled on from one to the next, almost without pause.\n\nSuddenly she stopped, cuddled me and I knew nothing else. It turns out I'd slept for two hours. Hayley's arm was around me and she was reading. \"Hi, what happened?\"\n\nShe smiled as she looked down at me. \"I made you come and you fell asleep, too much rum.\"\n\n\"Too much fresh sea air, rum and good sex, thank you. You do know that I'm in love with you, head over heels.\"\n\nShe leaned over and kissed me, \"A few hours ago, you were slagging my maritime expertise and now you say that you love me?\"\n\n\"I do love you, even though you have no maritime expertise at all.\"\n\n\"I got you back, didn't I?\"\n\n\"There was a lot of luck involved in that. Can I kiss you?\"\n\nI didn't wait for an answer, but our lips only met briefly before I nursed on her breasts. She was a full cup size bigger than me and they were a perfect shape and very sensitive. It didn't take long before she was moaning and asking for more. I slid down and drew my lips to her nether regions. Until two weeks ago my experience was limited but now, I was working towards becoming a master craftsman, woman, who knows, I had other stuff to think about.\n\n*****\n\nThe following evening, after a day of practice and some swimming, the two of us were chilling out on sun loungers under a parasol, sipping soft drinks and chatting. Hayley was staring off into the distance when she asked me a question. \"Sarah, when did you know that you liked girls? It's personal and it doesn't matter if you feel uncomfortable, you don't have to answer.\"\n\nI took a deep breath, not because I didn't know the answer, not because I didn't want to answer, but I wanted to explain it properly. \"I always seemed ill at ease around boys and when other girls talked about them, I wasn't interested.\" I paused for a minute. \"There was never a point when I decided, I just knew, it's like I've always been like that, like this, and it's never bothered me. I've never shouted about it, I don't intend to either, but I won't ever deny it.\"\n\nHayley waited a few moments before responding. \"I mucked about with boy's a few times, it was okay as far as it went, never actual intercourse, but it felt wrong. I steered clear of them, then on my nineteenth birthday, one of the girls at my party went to kiss my cheek, missed and it was on the mouth. It took ages before we pulled apart and then we stared at each other for another few minutes before kissing again. I was hooked, we both were. It didn't last for long, but it told me that it was girls for me from then on.\"\n\n\"Can I ask, have you ever had sex with a guy?\"\n\n\"No, never and don't want to.\"\n\n\"I'm the same.\" I paused for a moment, \"Actually, I do fancy someone, she turns me on, makes my knickers damp, arouses me. I love kissing her.\" I finished speaking and I think that I'd managed to keep a straight face. She turned quickly and stared at me. I'm certain she was about to ask who when she started to smile and I started to laugh. I leaned over to kiss her; I was right it was wonderful.\n\nWe spent quite some time kissing, stroking and cuddling before it was time for dinner.\n\nDinner was lively with lots of laughter, the coach gave a speech afterwards and it was peppered with jokes and fun poked at most of the team members, although I wasn't on the receiving end of any stories. A couple of jokes were aimed at Hayley, but they were old stories about pranks that had backfired.\n\nWe all trooped off to our rooms for an early night, well apart from a group of about four girls who liked to party and they slagged Hayley, previously one of their regular party goers, for crying off.\n\nAs I was getting undressed, I asked her about it. \"I guess that you're usually one of that group? Didn't you want to go?\"\n\n\"I would normally go and, yes I have been known to party with them.\"\n\n\"You could have gone.\" I wouldn't have minded; she'd been friends and teammates with most of the girls on this tour.\n\n\"I could, but I didn't want to.\" She stared at me, \"I'd rather stay with you. I like being with you.\" With that, she turned away and headed for the bathroom and I smiled to myself, happy with what she'd said.\n\nI stood staring out into the darkness, facing the sea, the moonlight illuminated the tips of the small waves in the distance and my mind was blank. Suddenly, Hayley pressed her naked body against my back, her hands snaked around my waist and she gently kissed the side of my neck. I felt myself starting to flush, goosebumps appeared on my forearms and possibly elsewhere.\n\n\"It looks lovely doesn't it, the sea by moonlight?\"\n\n\"Yes, but there's an even more beautiful sight if only I could turn around to see it.\" I giggled, like a schoolgirl. My crush on Hayley had been that of a schoolgirl, but now I was an international cricketer, albeit a baby one, but I felt vulnerable, no, not that, I was being held and felt safe. I suspect that my vulnerability was coming from a concern about where our relationship was going, it wasn't very old but I knew that I was in love, really deeply.\n\nShe eased her hold and I turned around to see her smiling at me, eyes glinting, her breasts touching mine. \"Hayley, I... I feel so strongly about...\"\n\nShe smiled even wider, \"Shush, Princess. We both feel the same way about each other, but it's new. Don't try to get ahead of it, for the next couple of weeks we'll see how things go. I might irritate you.\"\n\n\"I doubt it, I love you. I know it's new, but how I feel is scary. Please let me kiss you.\"\n\nWe kissed, long luxurious and crazily good. I dashed to the bathroom and a couple of minutes later dived onto the bed from a few feet away causing Hayley to call me an idiot but smiling as she did so. Then she opened her arms and pulled me close. We kissed for a while and I lay with my head on her shoulder only to hear her soft purring, she was asleep and smiling.\n\nI smiled to myself. Who knew what would happen? But for now, I was where I wanted to be and content.\n\nOne Day Games\n\nTwo days after the Test Match we were back at the cricket ground for a One Day International. I loved playing cricket in all its guises. Test matches were slower, more thoughtful, batters had time to get used to the conditions before starting to play shots. Those conditions and the state of the wicket changed throughout the four days of play adding other dimensions. T20 was fast and furious, batters had no time to 'get their eye in,' it was off to the races from the start. The batters had to take risks and could afford to because there were only twenty overs and the bowlers often took a lot of stick, it was fun but furious. In an ODI there were fifty overs per side, so the batters didn't have to go hell for leather right away and the bowlers got the chance to try out some variations and so, it was my favourite form of the game.\n\nI took a wicket bowling, two catches and scored eleven runs with the bat. It wasn't awful, but not my finest game, oh, we lost by twenty runs. Hayley didn't fare much better and the two of us were pretty glum when we got back to our room.\n\nThe next morning, we were up early, no time for a run, just pack, a quick breakfast and off to the airport for a flight to Antigua. We arrived early and as the hotel wasn't going to be ready until mid-afternoon we headed off to Nelson's Dockyard for lunch. What I thought was a glass of fruit juice turned out to be a rum punch and there was more rum than punch. I gave half of mine to Hayley and wondered about the people in the Caribbean. They were lovely, welcoming, friendly folk, they always had a smile, served great food, nothing was hurried, but it seemed to me that they constantly wanted to get people drunk! We got to see some of the countryside and waved to the kids we passed on the way to our hotel. It was an all-inclusive resort and set close to the beach. Hayley and I were in a first-floor room with a small balcony.\n\nAt dinner that evening I was sitting next to Eve Myles, a batswoman and senior team member who also did a bit of spin bowling now and again. She asked me a question that caught me by surprise, \"Sarah, I've seen you looking at Hayley and caught her looking at you once or twice. Are you two a thing?\"\n\nMy head spun, I felt my cheeks and neck colouring up. \"No need to answer the look on your face tells me the answer.\" She smiled.\n\n\"Holiday romance, that's all.\" I know that she wasn't convinced, hell, I didn't believe it myself and I'd said it.\n\nWhen I reported on the conversation Hayley simply said, \"It's going to come out sooner or later, but it's best to keep it down low for now. Can I get a kiss please?\"\n\nWe kissed for a while, then made slow and gentle love before falling asleep in each other's arms.\n\nIt was back to practice the next day. During the afternoon, we went snorkelling, before an early meal and another early night with the girl I was loving more each day.\n\nI wasn't playing and although disappointed, not entirely surprised. The Coach wanted to make sure that all of the squad got a game and before the tour had set off, I'd wondered if I would play more than once. I did a lot of bowling in the nets before the game and felt that my small contribution might help the rest of the girls.\n\nI sat watching as our team batted and for a part of that time Hayley and I sat together, talking about the cricket. I love cricket, but watching when you know that you wanted to be playing was difficult.\n\nOur team had scored plenty of runs and then it was down to us to bowl. There were only a couple of us left watching with the coaches and I had time to think. As I watched Hayley move about the field, I giggled silently to myself as I watched her sexy ass. What was going to happen after the tour? I had no real idea, but I knew that I wanted more, I wanted her, I was madly in love with her. It wasn't just the sex, amazing as it was, it was the company, the chat, the cuddles and the fact that we seemed Sympatico. If it was just a 'holiday romance' then it had been wonderful, but I'd be gutted if that was it. I wasn't sure what she saw in me, I hope it was my good looks and dynamic personality, but Haley was gorgeous and could have anyone she wanted, right now that was me. I made a silent plea, 'please let it be like that in a few months.'\n\nMy mind had wandered and I'd lost track of the game when the Coach called me, \"Sarah, looks like Yvonne's gone over and sprained her ankle; Claire's already on. Get out there and save us some runs.\" Clare was our twelfth player that day, it was her who was doing the relief fielding when a player needed to leave the field. I was stunned and it took a second or two for her words to sink in. Suddenly I found myself running out towards the middle and being directed to the offside of the field into the cover position, not my usual spot.\n\nFor the next ten overs, the ball headed in my direction a couple of times every over. I saved plenty of runs and took a great catch, sadly it would go into the record books as caught by 'the sub' and not under my name. However, we won and I'd played a part.\n\nHayley had pulled something in her shoulder and spent much of the evening being treated, so I didn't see her until bedtime and I'd missed her. We chatted for half an hour and then I held her in bed, there was no question of anything more than that, as I didn't want to hurt her, but just lying with her made me realise that I wanted this very much.\n\nThe next morning, we were off early again, this time to Trinidad. A day's practice and we were into another game. I was playing this time and we batted first. Wickets fell steadily and there was a danger of us not lasting all fifty overs.\n\nHayley was still batting as I walked out. She met me near to the centre of the pitch and leaned in to whisper, \"Come on sexy, let's show them what the two of us can do.\" I stifled a laugh and took up position. The third ball sat up, begging to be hit so I swung hard and the ball connected perfectly with the bat and flew high and safe landing well beyond the boundary rope to score my first ever six. The two of us batted freely and runs came easily. At one point, as we passed each other, taking an easy single, she softly said, \"Can't wait to suck your nipples later.\" I nearly fell over with shock, but as I reached the end of the run I smiled and hoped that she wasn't joking.\n\nNeither of us lasted until the end of the innings, but we'd added quick runs and brought the score back up to one that we should be able to defend if things went well for us. The two of us bowled in tandem during the middle overs of the match and we were able to frustrate the batters and took wickets, well I took one, Hayley took three. I was positioned closer to the batters when fielding and stopped a few great shots, one I just managed to stop and threw in a return to get the batter 'run out' and I took a catch that was complete instinct. I saw it later on a replay and still found it hard to believe that I'd caught it.\n\nWe'd won and everyone was delighted. I felt incredibly proud of myself especially when the Coach caught me on my own and complimented me.\n\nWe shared dinner with our West Indian opponents and as the evening progressed there was lots of banter flying back and forth. After we'd finished eating, we sat chatting in small groups sharing a drink. Somehow, I'd got into a group of bowlers and the conversation was all about, grip, release points, delivery stride and other stuff that I'd spent a long time practising but which bored me rigid, especially when I saw Hayley smile at me across the large room and nod her head. I made my excuses, \"Really tired, sorry,\" and slipped away. Hayley was waiting just outside the bar and sipped her hand into mine as we headed for our room.\n\nWhen the door was closed, I turned to her and whispered, \"Thank goodness I've got you all to myself.\" We kissed, long and lovely, then I pulled back and smiled as I gently said, \"What was it you said earlier about my nipples?\"\n\n\"Aaah,\" was her only reply.\n\n\"It made me laugh and I nearly fell, imagine trying to explain that to the Coach, if I'd been run out.\"\n\n\"Let's get these clothes off and I'll try and make it up to you.\" It took about thirty seconds for us to get naked and she pushed me backwards onto the bed. As she lay, almost on top of me she said, \"Yes, very nice nipples, lovely in fact...\" The right one disappeared into her mouth. Further conversation wasn't required. It didn't mean that I was quiet, far from it, but screaming words and phrases like, \"oh yes, fuck me, that's... more please\" and lots of others doesn't count as conversation.\n\nHer fingers found their way between my thighs and then inside me, I was so turned on it felt amazing and I was close to orgasm very quickly. I slipped a finger or two inside her but I couldn't get my coordination going. I came several times before she showed me mercy. It took me a minute or so to recover and I slid down and licked her whilst also probing with my fingers.\n\nTwenty minutes after closing the door we lay in each other's arms, satisfied, sleepy and in love.\n\n*****\n\nTwo days later we were back again for an evening T20 game. It was a pitch that suited pace bowling and I was left out. It pissed me off a bit, but I consoled myself because I'd played a much bigger part of the tour than I'd expected. We lost and I had a quiet smile to myself in the knowledge that by leaving me out the Coach had screwed up. That wasn't true, but it made me feel just a bit better.\n\nHayley was angry that evening because she hadn't played well, the opposition had scored a lot of runs from her bowling and she'd been dismissed without scoring. \"I need a damn kiss, that won't make me feel any better about the game, but it might distract me.\"\n\nI moved over and gave her the requested kiss. I know for certain that it made me feel better and the way she reacted made me think she'd enjoyed it. That was confirmed when she pushed me back onto the bed and snarled, \"Get naked.\"\n\nThat made me laugh as I peeled my clothes off and in her anger and haste she got tangled up in her underwear and fell over. Seeing my chance, I climbed on top of her pinning her down. \"Now, I'm going to do things that will make you forget. Hush now.\"\n\nLots of kissing, first her mouth and then her breasts before I headed between her legs. Kissing Hayley was amazing, but being between her legs, licking, kissing, teasing and arousing her most private parts was truly a wonderous thing, I was so astonished that she wanted me there, me Sarah Hardy when she could have had her pick of partners. It made me as happy as I could be. I had to put my hand over her mouth to stifle screams as she came.\n\n*****\n\nWe seemed to be travelling every couple of days and now we were back in Antigua. I was in the team and happy about that. I didn't get to bat because our team played well and racked up a big score.\n\nSadly, our opponents also scored freely and I was a bit apprehensive when the ball was thrown to me. Although they scored a few it was far less than they had been doing. I didn't take a wicket, but when Hayley slapped me on the backside and said, \"Well done sexy.\" It made me smile. I took a catch and contributed to a run-out, so I'd done my bit. The game went down to the last two balls, they needed seven to win. I flung myself full length to stop the first and limit them to a single, they now needed a six from the last delivery. The ball flew fast, but fell short of the rope, only a four, we won by a single run.",
        "There wasn't much time for a celebration that evening as we were off early the next morning. Hayley and I decided to get most of our things packed and chatted as we did so. After a bathroom visit, I jumped into bed and as Hayley came to join me, I asked, \"You said 'Well done sexy,' do you think I'm sexy?\"\n\nShe rolled her eyes. \"Of course, I do, I wouldn't have spent the last few weeks making love to you if I didn't.\"\n\n\"In that case gimme a kiss, please.\" Our lips met. We'd kissed a lot over the last few weeks and it was always something quite wonderous. It seems weird that kissing another person, this beautiful woman could be so sexually satisfying. Making love, having sex, being intimate, whatever you call it was great, although that seems an inadequate adjective, but just kissing Hayley was special.\n\nWe spent a long-time kissing before we both fell asleep grinning.\n\nFinal game\n\nWe were back in Barbados for the final game of the tour, another T20 match. Hayley and I were in the same room that we'd shared before, one that held good memories for me, where it had all started and now, I hoped where it would all finish in the way that I wanted it to.\n\nOn the day of the game, I was slightly surprised to be playing and we'd lost the toss, so had to bat. I went in for the last two overs and managed to score eight runs. We'd reached a decent score, but it was clear that we'd have to play well to win.\n\nI was called upon to bowl the tenth over and my first ball went for a four. It pissed me off because I'd only missed my line by a fraction. My next ball was much slower than normal and the batswoman missed it by a mile, getting through the shot and having time to turn around to see the ball flip the off-side bail into the air. The next batter was confused by the spin and nicked the ball back to me. It caught me by surprise but I held onto it, caught and bowled, two in two. The next delivery went to the boundary and I kicked at the turf in frustration.\n\nI took two more wickets in the next three overs and another two catches in the deep. We'd won but it was another close call. Eight runs, four wickets, three catches and saving a few runs earned me 'Player of the match.' I nearly cried with joy and pride when they gave me a cheque. The amount was unimportant, the honour was priceless, the small medal was going to Grandad.\n\nIt had been an amazing experience, ignoring my relationship with Hayley. I'd played more than I'd dreamed possible and had done well. The two teams met in the Pavilion after the game and I bought a round of beers for all the players and coaches on both teams, that took care of the cheque. I spent time with a couple of the girls I'd played against the previous year on the junior tour and one of them was coming over in the summer to play in the T20 competition, sadly not for the Bandits, but maybe we'd get a chance to meet for a drink.\n\n*****\n\nWe were flying home the following evening, so although it was late when we went for dinner, there was going to be a bit of a celebration and a few drinks that night, followed by a long lie in the morning.\n\nI was pretty quiet over dinner and didn't drink any more alcohol. My thoughts were of the next few weeks and months, even the next few days. What would become of Hayley and me?\n\nIt was just after midnight when we got back to our room, most of the team were also lightweights when it came to partying and all of us were emotionally and physically drained by the tour. I pulled my shoes off, unzipped my dress and allowed it to pool around my ankles, then Hayley grabbed me around the waist, she nuzzled against me, \"We need to talk.\" It was a whisper, but she sounded light and not serious, then I turned and saw that her look was serious. I started to fret.\n\nI opened the door and sat on the patio in my underwear, it was a warm evening with no breeze and plenty of light from an almost full moon. Hayley sat opposite me and reached out for my hand which I gave her. I was shaking with fear. \"I'd hoped that I'd be able to help you and that we'd become closer friends on this tour. I never, for one moment, imagined that we'd become lovers. But we have been and I've no regrets...\" She hesitated and the panic started to rise until she spoke again. \"Sarah, I love you. I love you and want us to be a couple, girlfriends, lovers. I know this might be scary and you may feel different, but now I've put my cards on the table.\"\n\nSuddenly the weight that had been getting heavier for the last few days lifted, as did my gloom. I smiled at her, \"I can be your girlfriend? For real?\" She nodded and smiled that lovely little smile. \"I love you; I love you, yes. I was terrified that this was it, that it would end and I didn't want it to, I never want it to.\"\n\n\"I don't want it to end either. I don't know how long it'll last; does anyone ever know? Everyone starts a relationship with the best of intentions and some last a lifetime, some for a much shorter period, so I can't promise you how long any more than you can, but I want to be with you.\"\n\n\"But you're a star...\" I exclaimed.\n\n\"And you, my love are an international cricketer in test matches, ODI and T20. You'll soon be a star as well. You're already a star in my eyes.\" She grinned almost laughing.\n\n\"And you are a smooth talker, trying to get into my panties.\" She laughed and nodded, so I added, \"It's working,\" I pulled them down tossing them somewhere. She took my hand and escorted me to the bed.\n\nWe kissed for ages, all the time stroking and touching each other. I took a nipple into my mouth and nursed it as Hayley sighed. I paused as I heard her speak, \"I may need to keep you prisoner so that you can do that whenever I need it.\"\n\n\"Wherever, whenever, forever. I love you.\" And I did love her, I thought that maybe I'd been right, that I'd found my person.\n\nHome\n\nI tucked into a plate of beans on toast. I wanted something simple after weeks of careful, healthy food, it had often been quite fancy, but this was great. I drank a mug of sweet tea as I answered hundreds of questions, told tales and caught up with their news. I sat back, there was another story to be told, \"Mum, Amy, as you know I shared a room with Hayley for the whole tour.\" They nodded, looking puzzled, \"We're lovers, in love, she's my girlfriend.\"\n\nMum clasped her fist to her breast, \"You and Hayley? But...\"\n\n\"Yes, me and Hayley. She'd kind of agreed to 'look after' me and being friends anyway it made sense for us to room together. Then one night something happened and I leaned forward to kiss her. I have no intention of giving you the details, I'd guess that you could fill in the blanks. It was wild and full of passion, full of respect and love. We shared a bed for the rest of the tour, no, we didn't have sex every night, I think we fell asleep a couple of times.\" I laughed, they looked stunned. \"I'm mad about her, I love every part of her. She treats me as her equal, she laughs with me, she cares for me, you'd need to be crazy not to see it. I love her very much.\"\n\nWe talked for another couple of hours about all sorts of things, but now and again there was another question about Hayley and me. Eventually, I begged off, it was mid-evening, jet lag was still affecting me and I was in danger of falling asleep on the sofa, so I excused myself and went to bed. I was looking for my phone when it rang and I managed to talk to Hayley for another hour. During that time, she talked dirty and told me where to touch myself and what to do. It was erotic and something I'd never imagined myself doing, but she knew what buttons to push, or direct me to push and I came hard, but that used up the last of my energy and I slept well, dreaming dreams that featured two naked women exploring each other's bodies.\n\n*****\n\nThe following morning, I decided to stretch my legs and went for a two-mile run, collecting croissants on the way home. I ate with Mum and Amy and after a shower headed to see my grandparents.\n\nCathy and Eric were two of the nicest people to ever walk this earth, at least in my eyes. They had supported and loved me throughout my life and I know how proud of me they were. We spent a couple of hours talking about the tour and the games. I tried to give Grandad my England cap, but he refused it and simply wanted to pose with me as I wore it. He almost cried when I gave him the medal I'd received as 'Player of the match.'\n\n\"There's something else that I need to tell you.\" They smiled at me, they suspected that this was something big, you could see it in their faces. \"I'm not interested in boys; I've had a couple of girlfriends.\" I saw that they looked relieved, which threw me a bit.\n\nIt was Gran who said, \"We know love. We've known for a while and we don't care, as long as you're happy.\"\n\nNow it was my turn to be shocked, \"You knew?\" I asked.\n\n\"Yes, we did. Your Mum hinted at it. In my day such things were never discussed and your Mum falling in love with Amy shocked us, but look how happy they both are.\" She smiled at me and touched my knee. \"I assume you've found someone special?\"\n\nI took a deep breath, \"Yes I have. Hayley, Hayley Sharp, we're in love. It started on the tour.\"\n\nThere was no attempt to disguise their surprise and then Grandad laughed, \"Well lass, she is a terrific cricketer and absolutely stunning, I'd guess that the two of you look like quite a couple.\"\n\nI smiled all the way home, they seemed pleased for me and that was all that I could ask.\n\n*****\n\nWhen I got home, I took care of some chores, did some laundry, sorted out my e-mails and checked my bank account. My match fees were in the bank and that made me smile, I was now much more independent, not rich, but I could pay my way. I'd speak to Mum later about contributing. From conversations I'd had with Hayley, I knew that her fees, as an established player with a contract, were about double mine and that made me think about her, not that she'd been far from my thoughts all day. I missed her, after weeks of being constantly within touching distance it was odd and so I sent her a text.\n\nTwo minutes later my phone rang, \"Missing you too,\" were her first words. We chatted and partway through the conversation Amy arrived home and realising who was on the phone mouthed, \"Invite her for dinner.\" Hayley rang off immediately and I smiled, she'd be here in half an hour.\n\nAmy was making a mug of tea and touched my shoulder, \"This is your house, you can have visitors.\"\n\n\"Thanks, Amy. I've been paid, so I need to talk to you and Mum and paying dig money.\"\n\nAmy laughed, \"There's no need, I've always paid the running costs of the house, ever since you came to live here, your Mum pays for the food, the rest we muddle along. I don't think we want your money, but I'll talk to her.\"\n\nI loved Amy to pieces, she was an elegant, smart, generous woman and the love she shared with Mum was obvious. I grabbed her around the waist and pulled her to me, \"Ever since we first met you, you've been wonderful to us. Mum adores you and I see how you feel about her. I love you too, very much.\" I hugged her tight and planted a sloppy kiss on her cheek. I wasn't aware that Mum had heard the last part of the sentence and was now standing watching us.\n\n\"Sarah put her down, she's mine.\" I swirled around quickly, expecting to see her looking annoyed, but she was laughing.\n\n\"Sorry Mum, but just so you know, if you chuck Amy, I'm making a play for her.\"\n\n\"So much for the things you said about Hayley,\" she replied, as the doorbell went.\n\nMum turned to head in that direction and I brushed past her, almost knocking her out of the way. I flung the door open and there she was, my beautiful, wonderful, darling Hayley. I grabbed her with both arms around her neck and drew her into a wonderous kiss that seemed to last for a while until I heard Mum, \"Looks like you missed each other these last thirty-six hours. I suggest you come in Hayley and that way if she rips your clothes off at least the neighbours won't see.\"\n\nI was suddenly embarrassed and Hayley was laughing. When we reached the kitchen, I saw that Mum and Amy were laughing as well. Amy came over and put her hand on Hayley's shoulder, \"Welcome, nice to see you again and Sarah seems to think so as well. You had a great tour, congratulations.\"\n\n\"Thanks, Miss King, sorry to burst in like this, but I guess you know our story.\" We sat with drinks and Hayley told them the story from her perspective as I snuggled up against her, staring at her almost not able to believe that she was here and mine. \"I'd always thought that she was cute and I think that I'd been a bit in love with her for a while, but I didn't expect things to develop as they did. I'd hoped that maybe if we still liked each other by the end of the tour I could tell her how I felt and see where things went. But, she kind of took the lead.\"\n\n\"Are you sure about your feelings, you're both still young?\" My Mum still looked stunned by this thing.\n\n\"I'm old enough and have been about long enough to know how I feel. Sarah's still young and needs to be sure, I understand that, but she melts my heart.\"\n\n\"Mum, I'm sure. I'm sure in the same way that I was sure about you two.\" I burst out laughing and the three of them looked at me with raised eyebrows. \"Remember that the evening Mum and I met Amy was the same evening you introduced me to Hayley and her Mum. I knew the two of you were a good match, I was certain and I feel the same about this.\"\n\nIt was getting too late to make food so we ordered a Thai takeaway. Hayley and I walked the two hundred yards to the shop to collect it and held hands all the way there and back. It felt good, it felt as if it was the right thing to do.\n\nWe ate and talked, mainly about cricket until late. Then I remembered one more thing and told them about my visit to my grandparents. \"I tried to give Grandad my England cap, but he wouldn't take it, so I posed for a photo with him whilst I wore it.\"\n\nMum added, \"They called me this afternoon and told me all about it. They're so proud of you, so are we.\" She took Amy's hand and they both smiled.\n\n\"Do you mind if Hayley stays tonight?\" My heart was thumping, please say yes.\n\nMum and Amy looked at each other, no words were exchanged, but something passed between them and Mum eventually answered, \"No, we don't mind, but please respect this house and all of its occupants.\" I took Hayley's hand and sheepishly we headed for my room.\n\nWhen I got the door closed, she took me in her arms, said, \"That wasn't awkward was it?\" before laughing. I wrapped my arms around her neck and kissed her, long, luscious and very good. When I pulled back Hayley sighed and said, softly, \"I missed you last night. After all those weeks, the two of us sharing the same bed, last night was torture. It wasn't about the sex,\" she giggled, \"Well, not just about the sex, it was about the contact, the connection. At least tonight we get to share each other.\"\n\nI pulled her onto my bed. \"I've been terrified that it was over, I don't want it to be. I know I'm just a youngster, but there's something about the two of us that seems... I don't know, perfect?\"\n\n\"I've spent every spare minute thinking about us since we got home.\" She paused, I'd guess to collect her thoughts, \"I'm staggered about my feelings for you, I really, really liked you and hoped that we might get together, but somehow we seem to be perfect and I have this feeling that this is real and wonderful and that....\" She stopped.\n\n\"What? Finish that, please.\"\n\n\"That I've found my other half, my soul mate... I don't know how to explain it. I love you.\"\n\nI grinned, \"And I love you and I need the loo, so make yourself comfy.\" I had a thought, \"You use the bathroom here; I'll use another one. See you soon.\"\n\nI wasn't away long and re-entered my bedroom dressed only in a long T-shirt. I closed the door and turned to see Hayley lying back in my bed, my bed! Her hair was draped over the pillows she had the duvet pulled up over her chest. My smile broke into a huge grin.\n\n\"What is it?\" She asked.\n\n\"I can't believe that my hero is now my girlfriend and she's lying there in my bed.\"\n\n\"And she's lonely and needs a cuddle.\" The two of us were grinning as I dived onto the bed, reached over and kissed her. I started to kiss her and she returned with the same fervour that I was using. Without breaking contact, I slid under the covers and held her. She was naked and I had to break contact to get rid of my nightshirt.\n\nHands on breasts, fingers stroking thighs, lips on the neck, tongues on nipples, stroking of body parts and temperatures rising. Eventually, we switched around until my face was between Hayley's thighs and my mouth on her sex, her mouth on mine. Time passed, but I have no idea how long, I lost count of the number of times I came or how often I caused a spasm in Hayley. Some of mine were like a thunderstorm had struck, others were like a gentle wave lapping at my ankles, it was something special and satisfying. I fell asleep in the arms of my girlfriend, in my own bed, how wonderful.\n\nOlivia - Breaking news\n\nKaren and I were working hard at university, things seemed to be going well for both of us. My workload was quite heavy by comparison and although we tried to share our daily chores, Karen did more than I did and she was a great cook. No matter how busy we were, we always made at least two hours each evening for time together, enjoying each other's company, listening to music or watching mindless TV.\n\nEvery couple of days during that January and February, we got messages from Sarah and managed a few video calls. She was obviously enjoying herself and from the reports that we read, she'd played lots of cricket and done well. She mentioned that she'd been sharing a room with Hayley, who popped up in one of the video calls. It didn't occur to us that their relationship had changed.\n\nThree days after she got home, Sarah called to ask if she could visit.\n\nShe looked great, tanned, her hair a lighter blonde than it had been at New Year and as fit as I'd ever seen her. The smile stretched across her face as she bounced around on the sofa unable to sit still. \"Just before the first test match I was presented with my England cap.\" She tossed it to me. \"You only ever get one, a test match cap is a prized possession. I wore it the first day, but I prefer a floppy hat. I went to show Grandad yesterday. I tried to give it to him, but he wouldn't accept. He told me how proud he was and asked for a picture of me wearing it with him and Gran.\"\n\n\"He's such a lovely man and so proud of you, as he should be. It's an amazing thing and you played well.\"\n\nWe spoke about the tour and cricket, but it was obvious that Sarah had more she wanted to tell us. \"I sat with Hayley on the plane and we were sharing a room for the whole tour. I loved being with her, we laughed and got on really well. Then one evening after dinner, someone warned me that Hayley was gay and that there might be gossip. I laughed, I've known that she was gay for a couple of years and the girl who spoke to me didn't know that I was as well.\"\n\nI had a feeling that I knew what was coming. \"I told Hayley about that conversation when we got back to our room, she laughed at me. I said that maybe we should give them something to gossip about and leaned in to kiss her. I've had a thing for her for a long time, as you know, but I'd intended the kiss as a bit of a joke. What I didn't know was that she fancied me. I know now.\"\n\n\"So, you kissed?\"\n\n\"We did more than kiss. We did...\" she paused, \"we did everything, almost every night. I cried when we got home because we were apart. She spent the night last night at Mum's and will be there when I get home. I love her, I mean crazy love her.\"\n\nWe spent an hour chatting and it was obvious that Sarah was totally besotted with Hayley. I was pleased for her, but also had some doubts, things seemed to have moved very fast and as I thought about it, I laughed. One minute Karen and I were friends and a few days later we were sleeping together every night.",
        "I tried to speak about it when we got to bed, but Karen was nibbling on various parts of my body, mainly my neck and shoulders, but by the time that she reached my breasts she wasn't listening and I wasn't making much sense, she was performing her magic.\n\nKaren nuzzled and I held her as she teased me, thinking how lucky I was until she touched me between my legs and suddenly my mind was overtaken by one thing, the need to reach a climax. It took no time at all until an earth-shattering orgasm turned me into a quivering mass.\n\nIt took me some time before I was able to speak and move again. I stretched up onto my elbow and looked down at her, \"You are beautiful and seem to know just how to get me going. Now it's my turn to play.\"\n\nI slid down to work on her breasts and nipples before reaching between her thighs, inserting first one and then a second finger. She squirmed and sighed and when I felt her excitement reaching fever pitch, I slid further down to use my tongue. I licked, sucked and nibbled until she grabbed a handful of my hair, forcing my face into her as she writhed in ecstasy. As she relaxed, she slipped into sleep and I cuddled into her. She was my world and I loved her.\n\nSarah - University\n\nGetting back to university was strange, I had lots to catch up with, but first I had to give the rest of the course and my lecturers all the details of the tour. When I saw my workload, I felt daunted but I buckled down and worked late for the first two nights.\n\nI got a workout in each morning as soon as it got light, but I was in great shape so it was no trouble and helped to keep me focussed. I'd just finished a lecture, late on Wednesday afternoon and was contemplating what I'd have for dinner when my phone pinged with a message. It was from Hayley and there were only a few words, 'At your digs, hurry up. X'\n\nI threw my pack over my shoulder and set off at a brisk jog. It took me seven minutes and there she was standing by her car. The smile on my face must have been huge as she opened her arms and enveloped me. The kiss took a while and eventually I pulled back to breathlessly ask, \"What are you doing here?\"\n\n\"I missed my girlfriend.\" She smiled and my heart melted yet again, as it seemed to do every time she called me her girlfriend. \"I came down to the Performance Centre for a treatment session on my shoulder and then had a workout. The fact that you're here is just a coincidence.\" I knew that was a lie and felt so elated that she'd come over.\n\nWe went for dinner and then back to the flat I was sharing, \"Can you stay the night?\"\n\n\"I can if it's okay, if not that's okay too.\" She said the words but that wasn't true, she wanted to stay and I wanted that as well.\n\nWe made mugs of tea and chatted for about half an hour, but it was killing me. \"Hayley, being so close to you is driving me nuts...\"\n\n\"I'm too close?\" She looked puzzled and I knew why.\n\n\"No, you're just in touching distance. That's nice but I need to be closer, preferably very close and naked. Would you come to bed with me, please?\" I fluttered my eyelids in the hope of encouraging her, but she just laughed.\n\n\"That eyelid thing is cute, but you don't need to do that, I want to sleep with you. Actually, not just tonight but lots of nights.\" I headed for the bedroom shedding clothes as I went and threw myself, naked, onto the bed. Hayley stood there taking off her clothes more sedately and eyeing me up as she did so.\n\nI took her into my arms as she laid down and I kissed her, she kissed me. I hadn't been aware of what she was doing with her hands until I felt a finger on my mound and I let out a little gasp, that became a bigger gasp as she slid it inside. I was wet, soaking and very ready, so access was easy and she wasn't fooling around, this was urgent and forceful. A second and then a third finger was added as she pumped whilst still kissing at my neck, shoulder, arms, left breast. My mind was filled with excitement, pleasure and a sense of needed what she was doing, needing more, but overwhelmingly I felt contented that this was right.\n\nShe made me come and kept going, adding a fourth finger and in a low growl she muttered, \"One day I'm going to slide my whole hand inside you.\"\n\nMy first thought was, 'I doubt that it wouldn't go' and I was about to say that out loud when my second thought took over, \"Oh, yes that would wonderful.\" The idea made me come again and this time it hit me like a hammer and I passed out.\n\nHayley was muttering soothing words when I opened my eyes. \"That felt good, are you okay?\"\n\nI nodded and tried to get my speech working, but it didn't seem to make any sense so I stopped, took a deep breath and tried again. \"Yes, I'm good, great, couldn't be better. Thanks for coming to visit and staying over, you've made me feel very special.\"\n\nHayley leaned forward and kissed me, at the same time stroking my forearm and causing goosebumps. \"You are very special, that's why I'm here.\" She went quiet but I felt that she had more to say and waited. \"I feel so much for you, I've had affairs and... well, they never felt like this. I can't get you out of my head, in a good way.\"\n\nI rolled onto my side and then, pushing Hayley onto her back I lay half on top of her and went in for a serious kiss. She responded with fervour and I was enjoying the kissing so much that I kept doing it but got busy with my fingers, tracing imaginary designs on her torso, pausing now and again at points that made her quiver and then she pulled back from the kiss and almost snarled at me, \"Stop being such a teasing bitch. I need more!\" She demanded.\n\nI smiled as I slid between her thighs and went to work with my tongue and fingers. Delicate, almost teasing touches to start with and then I became more purposeful, using my fingers I found her spot and made her scream. I kept doing that and licked her as well as I could with a couple of fingers inside her. I felt her start to quiver, maybe it was a tremble, her legs twitched and she groaned. As her climax got closer, she trashed around, pulling on the bedclothes, pulling on my hair and making unintelligible statements until she yelled as she came. As she came down from her high, in the silence, I heard someone next door giggling.\n\nI held her as we both fell asleep; I'd never been so happy.\n\n*****\n\nI worked hard, gym or a run daily, studying until late each evening and I didn't do much socialising. Hayley and I got into a routine, she'd come down on a Tuesday or Wednesday and stay the night. I'd head home on Friday and we'd spend most of the weekend together. Sometimes I left late Sunday, other weeks before dawn on Monday.\n\nMy feelings for Hayley grew deeper and I was falling more in love with her as time passed. We discussed our feelings now and again and she admitted that she felt the same as I did.\n\nMost of the time when I was home, we would be at my place, well Mum and Amy's place. They didn't seem to mind having Hayley there and she became a part of the family. Occasionally we'd spend a night at her digs, but they weren't great and her roommates were annoying. Twice we spent a Saturday with Karen and Olivia, that was great fun and the four of us enjoyed cooking meals together. They treated Hayley as they treated me and that pleased me no end.\n\nCricket season\n\nWe were both pleased that the cricket season had started, hours of relentless practice was better than nothing, but it was all done to prepare for the actual games and now they'd started. I was playing with the university women's team and even played a couple of games in the men's team. Taking a bloke's wicket always made me smile, they didn't hold back when I was batting and I'm sure that it gave me more confidence.\n\nHayley had been attending England training, which I was excused from because I was still a full-time student. She was also playing for the county team. Soon I'd be able to join her when exams were over.\n\nOne weekend we'd decided to go out for a meal, something rare for us, but it was fun and another guest at the restaurant asked Hayley for her autograph so I teased her for ages about it. As we walked back to my place Hayley stopped suddenly and stared at a building. \"What's wrong?\" I asked.\n\nI hadn't seen the for-sale sign indicating a first-floor apartment. \"What is it? Are you thinking about a move?\"\n\n\"No, at least I wasn't, but that's handy.\" It was mid-way between my home and the cricket ground. I knew that she didn't like sharing or her current digs. \"If that's okay, it would be great and...\"\n\n\"And what?\" I asked.\n\n\"Well, you have a great home, but maybe...\"\n\n\"Are you suggesting that we could....\" I didn't finish.\n\n\"Live together when you're not at Uni? Yes, exactly.\"\n\nThere was a long conversation after we'd checked the details on the estate agents web site; it looked great.\n\nI was having lunch on Wednesday when Hayley called me. \"Any chance that you could head to your Mum's later. I'd like you to come with me to see that flat.\"\n\nI quickly thought about my afternoon before replying, \"I should be able to get away just after four, be there for about five if the traffic's okay.\"\n\n\"Can I call round to your Mum's?\"\n\n\"Of course, I'll give her a call. What time are we viewing?\"\n\n\"Six.\"\n\n*****\n\nMum was pleased to see me and a bit surprised that Hayley was viewing a flat, \"Is she thinking of buying?\"\n\n\"We passed it at the weekend, she hadn't mentioned buying before, but she hates where she is.\"\n\n\"So, nothing to do with her wanting a place for the two of you?\" Mum was grinning.\n\n\"I hope that's not why she's thinking about it, but...\"\n\n*****\n\nAs we reached the footpath and turned towards my home, she grinned at me, \"I want that place. It's perfect for me, a bit of TLC and it'll look great. I know that I can afford, I've checked.\"\n\n\"Are you sure about this?\"\n\n\"Yes. I'm sick of sharing, fed up with those two, I don't like sponging off of your folks and I want my own place. Maybe I could find someone who'd like to spend a couple of nights a week with me.\"\n\nI stopped in front of her and turned to face her. \"Hayley, be serious for a minute. Are you doing this for yourself or with some idea about us living together?\"\n\nShe looked equally serious, \"I want a place for me, but hope that it might be for us too. One way or another I want my own place and I can afford it.\"\n\nI leaned in to kiss her. \"Great. I'm not saying that I'll move in, but it would be nice.\"\n\n*****\n\nI didn't know that these things could move at such speed, but four weeks later the apartment was full of people, painting and decorating. Two weeks later my exams were done and I'd as good as moved in with her. Mum was sad, I could see it in her face despite her attempts to hide it. I wasn't always at Hayley's; we spent a couple of nights at my place each week. It was clear that Mum and Amy welcomed Hayley, so being there was fun and there were many evenings spent chatting and enjoying each other's company.\n\nIt was Hayley's place, but she'd done everything she could to make me feel comfortable and welcome. One evening, not long after I'd moved in, I was alone and walked about the place admiring how good it looked, when I noticed a photograph of us both that had been taken in Barbados a few months ago. Suddenly, I could feel tears forming and I sobbed, they were tears of delight and astonishment. Here I was sharing a home with a woman I was head over heels about and feeling very fortunate.\n\nI told Hayley when she arrived home and she laughed, \"I had the same feeling a few days ago. I can't believe how lucky I am to have you.\"\n\n\"Then take me to bed and show me.\" That was my reply. We let loose and enjoyed some wild and abandoned sex. There was a lot of screaming with pleasure and release. Lots of love, serious, committed love.\n\n*****\n\nThe T20 season was underway and I was a fixture in the Bandits team. I bowled my overs in the middle of the innings aiming to restrict the opposition from scoring too many runs. I wasn't a prolific wicket-taker that season, but that wasn't my role and I enhanced my reputation for fielding, often out on the boundary, because I was so fast across the ground and I had a great throw.\n\nMy batting was a bit more hit and miss, literally. A couple of times I was out very quickly, including one occasion where I was walking back less than thirty seconds after arriving at the crease. On other occasions, I threw my bat at anything that I could reach and scored a lot of runs quickly. The whole team laughed at the narrow escapes I'd had and several suggested that I should buy a lottery ticket.\n\nI loved it, I mean, I was in my element and couldn't be happier with how things were going both on the field and with Hayley.\n\nI played in the one Test Match that summer, two One Day games and two T20 matches for England. I'd done pretty well, scoring a few runs and taking some wickets. As a fielder, I'd saved a lot of runs, taken numerous catches and effected a few run-outs. Having done well on the international stage I'd cemented my place in the England squad, I wouldn't play every game, but I was always in the running.\n\nCricket was making me some okay money, I wasn't rich, but I had whatever I needed. A local car dealership offered me sponsorship, in the form of a decent car. There was no point denying who was using it, as my name was plastered across the back of it and my picture occasionally appeared in some local newspaper adverts.\n\nSadly, none of the England games were near to home so I couldn't get Grandad to any of them, but I know he was glued to the TV as I'd paid for a satellite subscription. Gran told me she loved when I was playing, at first because she had peace from Grandad and then she too couldn't stay away from the TV and loved sharing my games with him.\n\nThe Photoshoot\n\nHayley and I were at the cricket ground, having a gym workout and then spending an hour at the indoor nets. I was packing my kit into my bag when Maureen, the Club Press Officer, stuck her head around the changing room door. \"Sarah, Hayley, could you pop into my office before you leave?\"\n\nI never gave any thought to what she wanted and when she told us, well, I found it hard to believe. \"I've had a phone call from Hot Magazine, they'd like to do a feature about the two of you, combined with a fashion photoshoot, here at the ground.\"\n\n\"What?\" I didn't understand.\n\n\"The fact that you two are a 'thing' is becoming more common knowledge. They see a chance to shoot a feature about you and get you wearing some designer clothes. I'm not sure that you realise, you're two very attractive young women, you've sparked interest in cricket and it'll make a great story. It would pay well and be great for the club.\"\n\nThe conversation lasted a full thirty minutes and then we adjourned to Amy's to talk. We'd made no real secret of our relationship, although we didn't flaunt it. We agreed that it might be fun, but Hayley wanted to discuss it with the England set-up, she was after all under contract with them and I was still 'as selected.'\n\nTwo days later we agreed to do it.\n\n*****\n\nThe sun streaming through the blinds woke me and I rolled over. Hayley was lying on her side facing me with her long blonde hair somewhat tousled and spread across her pillow with one stray strand covering her left eye. I admired her, she was beautiful and sexy, but she was also such a lovely person, warm and funny, smart and caring. The fact that she cared for me and wanted me as her partner still amazed me. I felt a smile spread, not just across my face, but throughout my whole body.\n\nSuddenly, without moving or opening her eyes she spoke, \"Watching me sleeping could be regarded as perverted behaviour.\"\n\nI sniggered, \"Then I'm a pervert. I was thinking how lucky I was.\"\n\nShe opened both eyes and grinned. \"I'm lucky, I've got you. Sarah, I've never felt anything like this before as I've told you many times. Kiss me, please.\" She got her kiss, a long and passionate one.\n\nWe had our usual coffee and toast before walking along to the cricket ground for the photoshoot. Neither of us knew what to expect. I hadn't given it a great deal of thought and assumed that it would be a photographer, someone to do hair and make-up and maybe someone else. I was about to learn that I was very much mistaken.\n\nMaureen, the club Press officer, was waiting for us with Christina from the magazine and after a brief introduction they escorted us up to the visiting teams dressing room. What I saw stunned me, two chairs in front of two huge illuminated mirrors and a lot of people. I stood open-mouthed as Christina introduced me to Stew, the photographer, his assistant Cora, Zara the hairstylist, Serena for make-up, Sebastian and Gloria on wardrobe, Elizabeth the director and Julie who would get us anything that we needed. Suddenly, I felt scared. Hayley squeezed my hand and I saw from the look she gave me that it had taken her by surprise as well.\n\nOver the next hour, my hair and make-up were done as Christina chatted with us, asking questions and taking notes. Throughout that process I was being offered water, fruit juice, tea coffee, bagels, pastries, it never stopped. Serena said that she was done and I was astonished at the change that had been made, from a good-looking girl (I know, blowing my own trumpet) into someone who'd have looked right at home on a red carpet. I looked over at Hayley and suddenly my chest felt tight and I struggled to get a breath. The woman who I'd woken up with was now the most beautiful vision that my eyes had ever rested upon. She grinned and said, \"We look pretty good. Play your cards right and I could fancy you.\" I still couldn't quite believe it and was still breathless, so I just smiled.\n\nOur outfits for the first series of shots were just cricket whites. That was a surprise as well, white shirts, white trousers and cable-knit sweaters. It was like a throwback twenty years, except that these were white, not the usual cream and they were well-cut. We marched out to the middle of the pitch where some stumps had been set up and there, handed a couple of bats. The next twenty minutes were taken up with; left a bit, move your arm, look this way, look that way, smile, don't smile, touch her arm, hold the bat more this way. Eventually, it was over and as Hayley and I walked back I whispered, \"No wonder models get paid so much money.\"\n\nShe whispered back, \"But no one was bowling at eighty trying to knock your head off.\" I giggled, that was true.\n\nIt took another half an hour to fix our make-up and hair and change into two very nice dresses, both floral, light colours showing ample flesh. They were just the sort of thing you might wear for an afternoon at a fancy event, although I don't remember seeing many spectators that smart at any cricket game that I was ever a part of. It was down to the members bar in the pavilion where we stood with glasses of something, supposed to be cocktails and surrounded by lots of cricket memorabilia. There was more, look this way, smile, look that way, move your leg, flick your hair until eventually, they were all happy.\n\nThe next shoot was also in the bar, but this time we sat at a table, Hayley in a smart pair of tailored black trousers, a white blouse and a brightly coloured silk waistcoat. I wore a 'little black dress.' It was stunning and fitted me like a glove, it showed a bit of cleavage, plenty of legs and enhanced every attribute I had. More directions followed as each photograph was taken, the lights were moved a fraction, then more direction. The best part about this was being able to admire my beautiful girlfriend and she gave me a big smile whenever there was a pause in the snapping of the shutter.\n\nThe magazine had laid on a lunch, lots of fruit, sandwiches, nibbles and drinks. It provided a welcome break and we got to know a bit more about the clothing designer and how the eventual magazine layout would look. In between all of the activities, Christina kept asking questions to 'get to know us' in more depth.",
        "It was back for more primping before we donned baggy white trousers and linen shirts with simple low-heeled sandals. This time we were carefully draped over the large grass mower and the roller used by the ground staff. There was a lot of direction and at one point the director was physically moving our limbs when we failed to get the right idea. By now I was having difficulty stifling my laughter and that was causing Hayley to snigger. At last, the photographer said that he was happy and the two of us had to support each other as we walked back to change again. The make-up artist seemed unhappy that our tears of laughter had caused some damage to her work and she set about repairing the damage.\n\nThis time it was two long casual dresses, the sort of thing I could imagine an elegant woman wearing for cocktails after a day in the sun at the beach. We posed in one of the grandstands; on the stairs, sitting down, looking at each other, pointing at some imaginary event behind the photographer. This part was fairly easy as we'd been told just to do as we liked whilst they snapped away.\n\nThe final shot was to show two long elegant dresses. That meant that our make-up had to be redone more dramatically and our hair was styled and fastened up, mine in a sophisticated low bun and Hayley's was in a high bun with tendrils hanging loose about her neck. She looked utterly amazing and she gasped when she saw me, so I assumed that she approved of my appearance. The dresses were both floor-length, probably silk and two shades of cream, mine being the lighter of the two. The one I wore had spaghetti straps and Hayley's had wider shoulder straps, our arms were bare and although the dresses showed our figures, everything was suggestive rather than visible. I could imagine two bridesmaids wearing these dresses or possibly even a bride if she wanted something simple. Some bracelets were added before we were given a pair of ballet slippers and led out to the middle of the field. Again, we stood near a set of stumps and were asked to slip into some heels, vertiginous heels that I was sure would have the ground staff objecting if we damaged the surface.\n\nWe were given directions as they snapped away and by now, I was getting better at posing and relieved that we were nearly done, a day playing cricket was much easier work than this. The photographer asked us to turn and face each other with the wicket just in front of us. Hayley reached out to take my hand. I took it and stared back at her; she was beautiful. I have no idea how long we were like that or what directions we were given, I paid no attention to anything except the woman holding my hand. Eventually, I realised that it was done.\n\nAs we walked back to the changing area, I hooked my arm into Hayley's and whistled 'here comes the bride.' She told me to behave, laughing as she spoke. We changed back into our street clothes and managed to talk the magazine people into letting us have one of the outfits each. I'd thought about the last dress, but it wasn't very practical, so I opted for the little black dress. Hayley wanted the blouse and tailored slacks. I'd never thought that a pair of trousers could be sexy, but on her, this pair was something very special.\n\nAs we were getting ready to leave and saying our farewells, we chatted with some of the people from the magazine and right at the end the director jokingly said, \"If you ever decide to tie the knot, let us know and we'll cover it.\"\n\nMaureen had heard that and commented, \"I'm sure the club would host the event in the Sherwood suite.\" We both laughed.\n\nWe had fun that evening, retelling the story of the day to Mum and Amy. Later in bed, I kissed Hayley and then leaned over her chest on one elbow so that I could look at her. \"I loved doing that today it was fun and we looked stunning in that last outfit, I could almost imagine us at the altar.\"\n\n\"I enjoyed it as well. You looked damn sexy in that dress, now are you going to talk or what?\"\n\n\"Or what, I think.\" She smiled and I knew that she had made the same choice.\n\nWe kissed before embarking on a lengthy session of give and take sex until neither of us could give or take anymore.\n\n*****\n\nThe following week the magazine sent us the photos they planned to use and several others, they were stunning and I was very proud of them. Naturally, we showed Mum and Amy, then Hayley's parents. We didn't talk about it again as all of our time was occupied with playing a lot of cricket.\n\nTwo weeks later the magazine was published and we fielded lots of phone calls from family, friends and teammates. A couple of evenings later we were at Mum's house, sitting close together, as we usually did, watching TV. I wasn't watching what was on the screen, the magazine on the coffee table caught my eye and I picked it up. I leafed through the article and photos once again until I got to the main spread and the two of us in those long dresses. I casually said, \"Maybe we should ask to have those dresses for our wedding.\" I hadn't thought about what I was saying, beyond liking the dresses.\n\nHayley looked at me and casually replied, \"They're probably already gone and by the time we need them, they'll be out of fashion.\"\n\nIt took at least thirty seconds before we realised what we'd said. \"Wedding?\" I asked.\n\n\"You started it,\" she replied with a huge grin.\n\n\"How long would we have to wait?\"\n\n\"What?\" She looked surprised, \"You're still young and at university and...\"\n\nI joked, \"I see, you don't want me.\"\n\nAnother thirty seconds of silence followed before she broke it again, \"I hadn't thought about it, but yes I'd love to marry you.\"\n\nI glowed with delight, \"And I'd love to marry you.\" More silence until I asked, \"So, how long do we have to wait?\"\n\n\"Well, you have university, we've only been a couple for six months and....\" She tailed off leaving things hanging.\n\n\"I once joked about forever, I'm not joking now. I'd marry you tomorrow if I could and I'm certain about that.\" I was true, I had never been so certain about anything.\n\nShe smiled at me, \"I'd love to marry you too.\"\n\n\"Why don't we do it then?\"\n\n\"Because...\" she was thinking, \"Because it's soon and...\"\n\n\"Maybe not tomorrow, what about the end of the season?\"\n\n\"Are you nuts? Don't answer, I know you are. That's idiotic, but it would be nice.\"\n\n\"Then let's do it.\"\n\n\"Are you serious?\" she asked.\n\nUntil that point it had all been a bit light-hearted, that didn't make my feelings any less serious, but now... \"Yes, the end of the season.\" I waited for her reply with bated breath.\n\nShe smiled at me and slid onto the floor in front of me. She took my hand and I held my breath, \"Sarah Hardy, would you do me the honour of becoming my wife?\"\n\nI grinned, then smiled and said, \"Yes I would. I love you.\"\n\nI grabbed her as she muttered, \"And I love you too.\"\n\nIt was then that the door opened and Mum walked in, followed by Amy. \"Hi, wow it looks like you just proposed Hayley.\" She smiled.\n\nMy reply was brief, \"She did and I said yes.\"\n\n\"What?\" was Mum's response, full of incredulity and shock. She found a seat, which was wise as I thought she might fall.\n\nAmy looked stunned and also sat down. \"Maybe start at the beginning.\"\n\nWe told the story and they asked questions, before declaring that we were insane. They implored us to wait for longer, but the more questions they asked the more I knew that we were right. Eventually, I drew the discussion to a halt. \"We need to stop this. Hayley, please come with me.\"\n\nShe followed me to the bedroom in silence and we both sat on the bed with our legs drawn up under us. \"I know we've never talked about this and it all seems a bit sudden, but the more they talked, the more I thought about it and the more I think I'm right. But that all depends on how you feel, we have time, the rest of our lives, but, I'm sure.\"\n\nShe was thinking, I could see the gears in her brain whirring, she took my hand. \"It stunned me, in the last hour I've gone through the pros and cons. I know that I love you and I'm sure that I want to marry you, certain of it. I'd do it as soon as we can, but is there a need to rush?\" She paused and I remained silent. \"September would be great though.\"\n\nWe talked for another two hours before a long session of kissing and then we fell asleep.\n\nWe must have both woken up about the same time. Hayley looked at me and smiled. She said one word phrased as a question, \"September?\"\n\nMy reply was longer, but not much, \"September it is then.\"\n\nAmy and Mum asked another million questions and tried to talk us out of it over breakfast, but eventually, Amy said, \"Meredith, they seem to be determined and they love each other, let's just try to support them.\"\n\n\"You two are nuts, but I love you both and I can see that you love each other, congratulations.\"\n\nHayley's parents took just as long to come around and then we went to see my grandparents. I thought Gran was going to have a heart attack, but Grandad just stood up and grabbed us both for a hug. Now I needed to see Karen and Olivia, and I'd do that on my own.\n\nOlivia - A favour to ask\n\n\"Sarah's on her way, something important.\"\n\nKaren gave me a puzzled look and I simply shrugged. Ten minutes later Sarah was at the door bearing chocolates and a bottle of bubbly.\n\nWe made tea and sat in the lounge, but it was clear that Sarah was itching to tell us something. \"Okay, what is it? A new tour?\" I asked.\n\n\"No, it's bigger than that.\" That caught me by surprise, nothing was bigger than cricket for Sarah. \"You know the article in 'Hot' magazine?\"\n\n\"Yes, it was great, the two of you looked fab.\"\n\n\"When we finished shooting the last pictures, the ones in the long dresses, someone made a comment about weddings and us looking like bridesmaids or brides. It's bugged us since then and Hayley's asked me to marry her.\" Sarah was beaming. I felt faint.\n\nKaren recovered quicker than I did, \"What? Married? You've hardly been together for...\"\n\n\"Six months. I know, but I'm sure, I want this. We're planning on September and I need two bridesmaids.\"\n\nI burst out laughing before answering, \"I can't think of anyone suitable right now.\"\n\nKaren put a hand on Sarah's knee and, more seriously, asked, \"Are you sure, this sounds insane. I know you love her, but that's mighty quick?\"\n\n\"Never been more certain. I need you two, please.\"\n\nWe spent the rest of a long evening discussing her thoughts, our thoughts and her plans. When Karen and I went to bed that night we talked, \"So, what do you think?\"\n\nI closed my eyes for a moment, \"It's quick, way too fast, but you can't deny that she's head over heels for Hayley. I don't know Hayley that well, but I'd say that she feels the same about Sarah. Hayley is very smart, sensible and grounded. Look at the success she's had and she still seems down to earth. She's had a few rather attractive partners, but she's picked, Sarah.\"\n\nKaren was about to say something, but I got in first, \"The two of them look quite alike, they're striking.\"\n\n\"That is certainly true, but if you're suggesting that only two people who look alike are well suited, I might need to chuck you.\" We both laughed over that, but Karen added, \"I'm sure that Meredith and Amy will have had plenty to say. I'm happy for her and if it goes belly-up the two of us will be there for her.\"\n\n\"Yeah. I'd do anything for you and my folks, but she'd be next on my list. Plus, I fancy being a bridesmaid.\"\n\n\"I fancy you, but being a bridesmaid will be fun as well.\"\n\n*****\n\nThe wedding planning went ahead quickly. Sarah and Hayley seemed to be in no doubt that it was the right thing and it was clear that they were very much in love. They seemed as besotted with each other as Karen and I felt about each other.\n\nKaren and I were to wear identical dresses in ivory silk with matching shoes that Amy had promised to pay for. We didn't have a great deal of spare cash between us, but I wanted some special underwear and went down on my knees to blag some cash from Dad. He seemed reluctant to hand over money for fancy underwear, but Samantha stepped in and made me smile, \"Roger if you don't give her the money you and I are finished. This is important and you don't get it, it's a girl thing.\" The look on her face was deadly serious, Dad looked stunned, even more stunned when she followed up with, \"In fact double what she wanted, or else.\"\n\nSamantha turned to us with a grin, \"You need to forgive him, he's a guy and it's not his fault. I'm not your Mum and could never replace her, but I'd like to help you both if you'd like. But I'll also not be offended if you declined.\"\n\nSomething in what Samantha had said touched a nerve. I went over to hug her, \"Thanks for that, we'd love your help. You're not my Mum, but you're my dad's girlfriend and you're important to me, to both of us.\"\n\nThe following weekend Samantha came shopping with Karen and me. We were headed to a local lingerie shop and spent ten minutes browsing, but it wasn't going well. Samantha came over and whispered, \"They don't have the right stuff here. I have an idea; will you trust me?\" I looked at Karen and she shrugged.\n\nTwenty minutes later we were outside a lingerie shop that that was so upmarket that I'd never even considered looking in the window before. \"Sam, this is too much for us.\"\n\nShe looked at the two of us. \"First, you're going to your best friend's wedding and need the right things, second, you're a couple and this is appropriate for...\" The three of us blushed, \"Thirdly, I've never had kids, never had a daughter to play dress-up with and now I've got you two, not quite daughters, so indulge me, please.\" Karen and I looked at each other and she shrugged again.\n\nSamantha spoke to one of the staff and moments later the two of us were ushered into a large changing area, where we were surrounded by mirrors. Our busts were measured with some precision, with and without clothes. It was a bit odd having other people looking at and touching us, not erotic in any way, it was business for them. We showed pictures of our dresses and two minutes later a selection of underwear appeared in various shades appropriate to the dresses. We selected a set that we both liked and were fitted with bras. The assistants fiddled with the straps and when they stood back, I realised that this bra did amazing things, not only did I have a bigger cleavage but it was more comfortable and with more support than any I'd ever worn. Karen glanced at me and then back to her reflection, \"We're having these bras even if I have to get a mortgage. It's so damn comfy and we look amazing.\"\n\nThe assistants smiled and Samantha laughed, \"Actually you both look great. Pick a couple of pairs of pants and a garter belt to match.\" She then turned to the assistants and said, \"They also want another set, maybe black, red...\" She turned back to us, \"Let me do this, I've never had this much fun shopping for lingerie before.\"\n\nThat evening, when we were alone, we changed into our new lingerie, not the wedding sets, the, well sex sets. Mine was in purple and Karen's in black. We wore some very fancy stockings and when dressed stood facing each other holding hands. Then I started to cry.\n\n\"What's wrong Liv, why are you crying?\" She took my hands.\n\n\"I'm sorry, we look so very sexy. I can't believe that I'd ever look like this and I can't believe how good you look, I love you.\" My knees went and I made it to the edge of the bed.\n\nKaren sat beside me and wrapped her arms around me. \"It's okay. I love you too.\" She pushed me back onto the bed and lay holding me. We stayed like that for a while, just holding each other. I thought back; about twelve months ago the two of us were friends, as close as it's possible to be and then we realised that we were actually in love. From the moment I realised what it was, I was never in any doubt and Karen hadn't seemed to have any doubts either. We'd been very happy since that time and shared absolutely everything. I would never try to tell anyone that sex wasn't good because it was way better than I could ever have believed, but it was the whole thing. Little touches, a smile, a tiny gesture, they were enough. I wasn't sure that it could get any better, at least until I realised that a finger had slid inside my underwear and was now caressing my slit.\n\n\"Karen...\"\n\n\"Hush, my love. Leave me to do this.\"\n\nI have no idea how she managed to get so far down the bed without my realising it, but suddenly her hands were pulling down my panties and they disappeared somewhere. Then she licked the inside of my left thigh from knee to the junction and back down the inside of the right thigh. I guess that her finger had been inside me since she started licking but I have no idea where it was even though my senses were close to overload, there was tension in my torso and goosebumps on my arms. Karen moved her fingers in and out, gently but she knew what she was doing and then I felt her tongue caressing me alongside her fingers and I came with a whoosh, waves washed over me, warmth enveloped me and I sagged back incapable of anything and unaware of what was happening until I felt her lips on mine.\n\n\"Sleep now, my turn in the morning, maybe.\"\n\nSarah -- The wedding\n\nHayley was staying with her parents; I was staying with Mum and Amy and we'd agreed not to speak again until we met the next day. I set my phone down in the bedroom so that the temptation to call her was reduced and I headed to the kitchen. Karen, Olivia and Amy were sitting at the dining table whilst Mum was fixing some snacks. The wine was open and the first bottle looked as if it was suffering from some serious abuse already. The four of them were howling with laughter as Mum finished whatever she'd been saying.\n\n\"Hi, what's so funny?\"\n\nThe reply was simply more laughter. I poured myself a glass of soda water and sat down as Mum explained, \"I was telling them about the time you fell into the duck pond when a swan flapped its wings and scared you.\"\n\nI sipped my drink. \"That traumatised me and I still have flashbacks whenever I see a swan.\" That wasn't at all true, \"Now it feels like I'm being re-traumatised by my family, I may need therapy.\" They stifled their laughter for all of ten seconds before starting again and it was infectious, so I joined in. The next hour was spent telling stories about silly things that had happened to us.\n\nWe ordered and ate a Thai take away and the wine took another beating, tongues were getting looser. It was fun and I was enjoying things because I was stone-cold sober. I knew that too much wine was not a good idea for me and I didn't want to suffer. The others always seemed to be able to brush it aside and, on another day, I'd think it was unfair but not today, not this day. Tomorrow I was going to get married, I was excited and nervous.\n\nI must have been away in a world of my own until Oliva touched my arm and I heard her say, \"Earth to Sarah, is there anyone there?\"\n\n\"What, sorry, what is it?\"\n\n\"We've been watching you for the last minute, you were daydreaming.\"\n\n\"Sorry, I was thinking about tomorrow.\"\n\nOlivia laughed, \"Oh, we have a fair idea what you were thinking about.\"\n\nKaren turned to me, \"I'm sorry to get serious, but I need to say this now before I have any more wine. I know how much love Hayley and how you feel about her, I can see that she loves you too, but you've only been a couple for a few months. Are you absolutely certain you're doing the right thing? It might not be comfortable, but you could change your mind, it's not too late.\"\n\nI looked at the four of them, Mum was nodding just a little. \"I confess to feeling a bit nervous, but I don't think that's anything that other brides-to-be don't feel. As for marrying Hayley...\" I took a deep breath, \"I've never been more certain about it, not a doubt. I love each one of you, I hope that I'd do anything that I could for you if you needed help, but what I feel for Hayley is something that I can't explain.\"",
        "I sipped my drink before continuing. \"It could go wrong at some point, of course, it could, but if that happens then I'm sure you'll catch me and help me. I don't want it to happen, I want to live with and love her.\"\n\nAmy smiled at me, \"Sarah, the question had to be asked. I see how much you love her and I wish you all the best, but you're right, the four of us also love you and will be there for you if you need us.\"\n\nWith that the mood lightened, we put on some music and started dancing. At one point Amy started singing and we were a bit stunned, none of us knew that she could sing that well. We asked her to sing something else and she found the backing music for 'I will always love you.' She looked at me, \"Do you remember our first Christmas? The two of us played this and sang along.\"\n\nI nodded before she continued, \"I'm going to sing this for you, Sarah. Meeting you and your Mum changed my life, I was already in love with you by then and I still am.\" Amy wasn't Whitney Houston or Dolly Parton, but that didn't matter, it was beautiful and we were all pushing back tears. At the end, I cuddled her and Karen asked her to sing another one.\n\n\"The only other song I know well enough to sing is a favourite of Dee's.\" She turned to Karen and Olivia, \"That was my wife who died a few years before I met these two and I...\" Obviously, for some reason, Amy had forgotten that they knew the story very well.\n\nMum hugged her, \"Please sing it if it's not too hard for you.\" Amy sang 'The wind beneath my wings' and we were all sobbing before she got halfway through.\n\nMum gave her another hug, \"Well done, beautiful. I know how much you loved her.\"\n\nAmy looked at me, \"I hope things work for you and Hayley,\" she turned to Karen and Olivia, \"and for you two, you're lovely girls. I don't know what I did to deserve the love that I had with Dee and after she went, I assumed that I'd be on my own, but then I fell in love again, deeply in love with Meredith. I've had two such wonderful partners and if you're half as lucky as me you'll all be great.\"\n\nI wanted to call it a night and headed for my room just before eleven. I climbed into bed and sent a text. 'Missing you, I love you. Can't wait for tomorrow.' Five minutes later I got a reply, 'Missing you too, tomorrow we'll be married and I'm excited. Love you.' I smiled and hugged the phone to my chest.\n\nTen minutes later the door opened, Karen and Olivia, in nightshirts, stood there. \"Need some company?\" Karen asked.\n\n\"Might be the last chance for the three of us,\" said Olivia.\n\nMy smile was my answer and they climbed in beside me and I burst into tears. \"What's wrong?\" Olivia asked.\n\n\"Nothing. I'm lucky, I've got a great Mum, grandparents, Amy and two of the best friends anyone could ask for.\"\n\n\"And tomorrow you'll have a wife. I really wish you well.\" Olivia kissed me, a sloppy one on the cheek and Karen evened it up on the other side. We talked for a few more minutes before cuddling together as we'd done many times for the last ten years. My final thought was, that as nice as this was and as wonderful as these two are, I'd rather be with Hayley.\n\n*****\n\nFortunately, there were no hangovers at breakfast the next morning, but despite not having any alcohol all I could manage was toast and coffee.\n\nA friend of Mum's turned up to sort out our hair and make-up. It took a while to get through the five of us but we laughed and had fun whilst she did her stuff. My nerves had started, not because I was having doubts, I just wanted things to go smoothly.\n\nMum and Amy had gone to town on their outfits, beautiful dresses and new shoes, the whole shebang. Mum even wore a hat, Amy refused.\n\nKaren and Olivia wore identical dark ivory silk dresses, calf-length with full skirts, plenty of cleavage and long close-fitting sleeves. I was stunned at their beautiful and very sexy underwear.\n\nMy dress was a similar fabric, but a shade or two lighter. It was a sheath, with wide shoulder straps and a very full hem so that it flowed around my feet which were in heels and I'd had to put in some practice in these, they were so tall. I hadn't seen Hayley's dress, but I knew that it was very similar to mine, but with more embellishments. Our heels matched, that was important so that we were the same height. My hair was in a single French braid, fastened up at the nape of my neck with some small flowers woven into it.\n\nMy grandparents arrived right on time and Gran left in a car with Mum and Amy. The car returned ten minutes later for Karen and Olivia. They helped Grandad and me into our car before they left just in front of us.\n\n\"You look beautiful Sarah and I'm very proud of you. I love you very much.\" Grandad was beaming and looked incredibly smart in his tail suit and tie.\n\n*****\n\nThe car entered the grounds of the cricket stadium and slowly drove past the administration offices, around the rear of the Pavilion before coming to a halt outside the Sherwood Suite, where one of the Club staff opened the doors and helped Grandad out. Karen and Olivia were there to check my dress, not that there was much to fix. My friends were two good looking women and despite having only left them a few minutes ago I was amazed, they looked incredible, \"You two look stunning.\"\n\nKaren fixed the shoulder of my dress and quietly said, \"I always knew that you were gorgeous, but you look so happy and I don't think I've ever seen a more beautiful bride.\"\n\nI took Grandad's arm; he wasn't as agile as he once was and not that steady on his feet. We went through the door and were about to start along the aisle. There wasn't far to go, but after two footsteps Grandad faltered and looked horrified as he said to me in a whisper, \"Hold on lass, I need a second.\"\n\nFrom somewhere close by Graham Dowling stepped forward and said, \"Can I help?\"\n\nGrandad recognised him, let's face it, he was a hero to any English cricket fan and Grandad looked at him in awe, \"My legs aren't what they once were and I'm not sure I can make it. Sir, it would be an honour if the England Captain would walk my Granddaughter down the aisle.\"\n\n\"Nonsense, you can do this and I'll give you a hand. You need to give her away, but I'll help.\" With that, he took Grandad's other arm and helped him to the end of the aisle. We both smiled at Graham as he left us to resume his seat.\n\nI'd not paid that much attention to the guests as I'd been caught up with Grandad, but I realised that there appeared to be far more people than I expected. I'd caught glimpses of some familiar faces and realised that most of the England and Bandit's women's teams were present and a few of the men's team as well. I put it out of my mind, I had other things to think about.\n\nI turned to face Hayley and got a good look at her for the first time, I let out a small gasp, she looked stunning, her whole face was lit up and her eyes sparkled as she looked at me. Then she leaned forward a little and whispered, \"You look beautiful and I'm excited, I love you very much.\" Her hair was in a bun and also gathered at her neck, we were so similar.\n\nI smiled back at her and thought how wonderful this was, I was about to be married to my hero. \"I love you too, I'm excited and I can't wait to kiss my wife.\"\n\n*****\n\nI had a grin on my face the whole way through the service, I kept looking at Hayley and she kept looking back, we must have looked like two lunatics. Then I was told that I could kiss my wife. On reflection, I don't think I've ever seen a bride throw her arms around her partner's neck, drag her close and kiss her as ferociously as I did that day. It induced some titters from the gathering and that morphed into actual laughter. When we stopped kissing, I looked around, Amy was wiping tears of laughter away, Mum was bright red and Hayley's mum couldn't decide if she should be humiliated or amused. Her Dad was grinning and looked so proud of his daughter.\n\nI turned around to see our bridesmaids, Karen, Olivia and Carrie, Hayley's cousin, all smiling too. I opened my arms and pulled them all into a big hug and thanked them. We were surrounded by the other guests offering congratulations, it was family first, close friends and then the other attendees. It was at that point that we were told that the ECB (who administer cricket in England and Wales) and the local county team had suggested adding many of the current players to the guestlist for the ceremony. They were then off for a meal elsewhere at the ground and would be back later for the less formal bit and the dancing, after the reception meal. We'd invited a few of our teammates, those that we were closest to, but we'd limited the numbers conscious of the cost. Those who'd been 'added' were simply delighted for an excuse to party. I noticed Graham Dowling and his wife hanging back and pushed some others aside, whilst clutching Hayley's hand, to get to him. I grabbed him and planted a huge kiss on his cheek, Hayley caught the opposite side. \"Thanks for being here and what you did for Grandad was so kind.\"\n\n\"Well, I like the two of you and this event is something I was delighted to attend. You know, just because I'm well known, I'm still just a normal bloke who happens to be good at cricket, the same as you two. Your Grandad looked distressed, what should have been a very proud day for him suddenly looked as if it was going to become an embarrassment for him and I couldn't have that.\" He grinned, \"and I almost got to walk a beautiful woman down the aisle.\" Hayley slapped his arm, he looked offended, \"What? I could only do it for one of you and you're gorgeous too.\"\n\n\"Good recovery Dowling,\" laughed Hayley. His wife burst out laughing before adding her good wishes.\n\nPeople were swilling bubbly as we posed for photos, thousands of them, at least it seemed like that many. We also took a group shot with all the players behind a set of stumps, they weren't on the actual playing square, that idea had been knocked on the head, but they'd been set up nearer to the pavilion. I saw Bill, the Head Groundsman, loitering nearby supervising to make sure no one damaged a blade of his precious grass. He'd been here for many years and there was a joke that he was so proud of his ground that he hated people playing cricket on it because of the wear and tear it caused; that wasn't entirely true. He was the loveliest man and knew as much about cricket as anyone I'd ever met. When he looked over, I saw a little girl, maybe ten years old wearing a smart dress standing with him. I raised an eyebrow and he walked over. \"Congratulations to both of you, I'm proud to know you. This is Kirstie, my granddaughter, she wanted to come, she has something for you.\"\n\nWith that she stepped forward, looking hesitant holding a beautiful horseshoe with 'Good luck' on it. \"I think that you two are amazing. I'd like to play like you and I made this for you.\" She was so cute and I could feel my tears starting to form as I thanked her. As Hayley bent down to hug her, I caught the eye of the photographer and called him over. He took photos of the two of us with her and then with Bill. He tried to protest, but I told him not to be daft. A few minutes later I saw Graham Dowling holding Kirstie on his shoulders as Bill and he sank a beer.\n\nThe meal was great, the speeches mercifully short and humorous, it seemed like everyone was having fun. Hayley and I chatted with our parents, but for a lot of the time, the two of us had our heads together and giggled. She had her hand high on my thigh at one point and squeezed it, she thought that no one could see it underneath the table, but I caught sight of Helen, the England Women's Captain. She'd seen the gesture, she smiled at me and shook her head a little, laughing as she did so.eahHeather\n\n\"Leave that until later, you've been spotted.\" I giggled and slapped her arm.\n\n\"That's spouse abuse!\" She paused with a slightly red hue to her cheeks, \"Sorry, I thought it was safe. Later I'm going to do much more than grab your thigh.\"\n\n\"I bloody hope so,\" I replied.\n\nGrandad tried to apologise, but I told him that I was incredibly proud that he wanted to give me away and that we'd managed it. He grinned back at me saying, \"I didn't know that you were friends with him, he's a legend.\"\n\n\"I'm not sure that we're friends, but Graham's a lovely man.\"\n\nMum hardly took her eyes off of me, she seemed proud, amazed and bewildered all at the same time. I know she thought that we'd rushed into this and I'd spent hours trying to convince her that it was the right thing to do. She worried about me, but that's what mother's do.\n\nWhen the meal was cleared away, the dancing started and the other players who'd been partying elsewhere joined us. Hayley and I had the first dance, a real smoochy number, then I danced with Grandad, but only briefly, then Hayley's Dad, who asked me to be kind to his daughter. Once again Graham Dowling seemed to know what to do and he danced with Gran, Mum, Amy, Hayley's Mum and Gran, my aunt, Karen, Olivia, Carrie and then most of the female cricketers. He seemed to be on the floor constantly.\n\nHayley and I were whisked around by lots of the male players, most of whom we knew fairly well. It was pretty exhausting and mid-way through the evening I knew that it was time to go. Hayley and I were off to a fancy big hotel and spa, about an hour's drive away, for a few days, but we'd kept the destination quiet.\n\nAs we were getting ready to leave Karen and Olivia came over and gave us both a big hug. \"Thanks for what you did today, it wouldn't have been right without you.\"\n\nKaren smiled as Olivia said, \"The three of us are pals, we always have been and always will be. You both looked great.\" She turned and looked Hayley squarely in the eyes, \"We trust you to care for her, so be warned, but actually, we love you as well.\"\n\nWe hugged and kissed them, said our goodbye's, waved to the guests and climbed into the car. There were people on both sides of it and some of them followed us as we drove to the gates and then out of the ground, we waved from the rear window until they all disappeared from view. I turned to Hayley and put my head on her shoulder, \"I love you; this is the best day of my life, now I'm married to a wonderful woman.\"\n\n\"If you'd asked me about getting married a year ago, I'd have said that it was unlikely because I've never known anyone I could feel so strongly about. Then you kissed me and suddenly I knew that we were meant to be together. Can I get a kiss?\"\n\nThat was the first of many we exchanged that night.\n\nOlivia - A few days later\n\n\"Did you get a message from Sarah?\" I asked.\n\nKaren turned around and smiled at me as she continued to stir whatever was in the pot, \"No, I don't think so, but I haven't checked. What does she say?\"\n\n\"When Amy got home after the wedding, she got down on one knee and proposed. Meredith said yes.\"\n\n\"That's great, they're a lovely couple. When you think back, Meredith changed after meeting Amy and she always seems happier now.\"\n\n\"I always loved going over there, they're both wonderful.\"\n\nI went to change and got back just as Karen was plating the food. We talked about our day, but something was nagging at me. Something I couldn't put my finger on.\n\nWe cuddled up together on the couch in front of the TV and a few minutes later I got it. I turned to face Karen and she gave me a lovely smile, which changed to a puzzled look, \"What's wrong?\"\n\nI took a deep breath. \"What's wrong is...\" I hesitated, I started to cry and the words that followed came out in a rush. \"They're all married or getting married and we're not, we should be, we love each other. I want to be your wife.\"\n\nKaren's eyes and mouth opened wide, she muttered \"What?\"\n\n\"You heard. I'd love to get married, what do you think?\"\n\n\"I think that you're crazy, but I agree, so if you're asking, the answer's yes.\"\n\nWe kissed. \"I'm sorry, I never planned that.\" I slid onto my knees in front of her, \"Karen Church, will you marry me? It wasn't much of a proposal and there are no rings.\"\n\n\"And you're not Prince Charming, you're my Cinderella. I don't care about all that stuff and we can get rings. This is crazy you know that?\" She had a huge smile as she spoke, \"Olivia Hill, I'd love to be your wife.\"\n\n\"I love you.\" I was grinning.\n\n\"And I love you.\" Karen paused thinking, \"So are we going to be Hill or Church. Or keep our own names or go double barrel?\"\n\nI only needed a few seconds, \"I'd like us to be the same, why not Churchill?\"\n\nThree months later\n\nI reached the end of the aisle and smiled at the Registrar. Dad let go of my arm, I handed my flowers to Sarah and turned to face Karen; I've never seen anyone so beautiful; I didn't know that it was possible to feel so happy that I might explode. In a few minutes, I'd be her wife, then she grinned and mouthed silently, \"I love you, I'm so happy.\"\n\nThe end\n\nThank you for reading. I love to read your comments and ratings are appreciated.\n\nThere is a follow up to this story, set 23 years later, about Sarah, Hayley, Karen and Olivia. I give fair warning, there is a tragic event that will require tissues, but it ends well."
    ],
    "authorname": "sandy_paris",
    "tags": [
        "lesbian",
        "lesbian romance",
        "romance",
        "lesbian sex",
        "lesbian love",
        "love story",
        "wedding"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/cricket-match-1"
}
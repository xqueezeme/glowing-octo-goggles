{
    "title": "Mark of the Incubus Ch. 06",
    "pages": [
        "Author's Note: I will be posting other stories at least once or twice a week while still working on this story. I promise there are more chapters in the works for \"Mark of the Incubus.\"\n\n*****\n\nAgnes saw him. She knew it was him underneath that tree in the rain storm. She had to see him to be sure. Monday morning Agnes took the car down to the church. She held her breath as she came to the door. Agnes could hear her own heart beat... or was it James's that she heard. She wasn't even in the same room with him and already she could feel his sweat on her skin. The invisible hand print began to burn on her chest. \n\nShe had opted to wear a white sundress with her best underwear. Black sheer panties and a sheer black lace bra. The white cotton was a bit thin so one could still see the underwear outline but Agnes loved the feeling of the smooth soft fabric grazing against her aroused sensitive nipples. Before she even thought about knocking, Agnes could feel the burning gaze of James's whisky brown eyes. Then the door opened. His smiling face sending warm tendrils around her spine.\n\n\"Agnes,\" James spoke her name as if he was expecting her. She suddenly felt embarrassed for being late or too early... \n\n\"I need to talk to you about something, Pastor Abel,\" Agnes pleaded finally. James's devilishly defiant eyes watched her, caressed her body making Agnes shiver with both delight and fear. Even being in his presence Agnes could feel the hot liquid between her quivering legs and her nipples harden. \n\n\"In my office,\" James escorted her in where he offered her a chair. Agnes was glad for it as her body wouldn't stop shaking. After sitting down James circled round to face her. His whiskey eyes watched her intently.\n\n\"What's on your mind?\" James asked.\n\n\"You,\" Agnes blurted out. Realizing what she just said she placed her hand over her mouth. Her cheeks burned she was so mortified even though they have been having amazing sex in her dreams as well as in real life. \n\n\"I'm sorry I...,\" Agnes searched for something better to say but her mind was drawing a blank... well not a total blank but her naughty thoughts were distracting her. James held up his hand with a cheerful smile.\n\n\"It's alright, Agnes,\" his smoky brown eyes had Agnes spellbound. He looked at her the way Beau would look at her in home room in high school and when Frank would leer at her from across the room. James knelt before Agnes, his hands touching her knees which sent tingles to her core. \n\n\"I have a confession to make, Agnes,\" James spoke low, kneeling down before her, his voice husky with desire as his hands caressed her now quivering thighs. \"But you must first promise not to tell anyone. Do you promise?\"\n\nAgnes nodded, body tingling as James tenderly kissed her knee. His lips tickled her now tender flesh sending small tremors of heat to her vagina. \n\n\"I'm not exactly... from around here...,\" James said. \"I'm from way down south. WAY down.\"\n\nAgnes didn't understand. James's erotic touches were clouding her mind. Muddling her thoughts. She just wanted him to stick his tongue deep into her pulsating hot core again like he did in her dreams. To pierce her insides with his rigid flesh spear and set her aflame. \n\n\"You see, Agnes,\" James mourned. \"I'm a demon. An incubus actually. I feed on sexual energy.\"\n\n\"Wait... what?\" Agnes heart seized with fear. The warm tingles were replaced with an icy feeling crawling up her spine. This guy was a weirdo or something. Just her luck! \n\n\"Relax,\" James reached between Agnes's legs. He flashed a salacious grin as he felt her soaked panties and gently began rubbing her through the sheer fabric. \"Actually it was you who summoned me. Remember that ritual you and Michelle did?\"\n\nAgnes remembered that night. Mostly she remembered masturbating with much more enthusiasm as if she wasn't by herself. She had been transported somewhere. A maze underneath the cosmos with a man with no face. It was the best sex of her life. \n\n\"That was just a goof,\" Agnes breathed, gripping the chair as James moved the fabric aside then boldly licked her cunt glistening and ripe like a fresh peach plucked from the branch. Agnes gasped as she felt James's tongue dive between her smoldering folds. \"I didn't think it was real...,\" Agnes sighed in rapture. Her nipples grew rigid and tender. Her whole body began to hum as blood rushed to her loins. A warm feeling of lust washed over her. She opened her legs wider for the sinful pastor. Agnes felt a tiny jolt as he flicked that wicked tongue over her sensitive nub.\n\n\"It was real, Agnes,\" James raised his head, his mouth drizzled from her vaginal juices. Agnes didn't want him to stop. He kept his hands firmly on her trembling thighs. \"And so were those dreams...\"\n\n\"Oh God...,\" Agnes gasped. So many questions were swirling around in her head but lust fogged her mind as James kissed her confused lips. She tasted herself on his lips as he grabbed her waist and propped her up on his simple wooden desk. \n\n\"Not God...,\" James growled as he unbuttoned her white dress to see her luscious breasts stuffed into her sheer black bra. Agnes's nipples were stiff, poking through the fabric with arousal. They did so once she was in his presence. \"I'm the only god you pray to now, Agnes,\" James planted a smoldering kiss on Agnes's stunned lips setting her very soul on fire as her loins yearned to feel Abel's demon cock split her open, tear into her ripe cunt until she passed out or died from the pure ecstasy that he was making her feel right now.\n\n\"I marked you,\" James whispered through the kiss. \"That night I marked you and now you're mine.\" \n\nJames's tongue parted Agnes's trembling lips exploring her willing mouth. He tickled the roof of her mouth as she wrapped her legs around James's round waist, arms encircling his neck as Agnes felt his manhood bulging through his pants against her quivering wet sex. \n\n\"And that's not all...,\" James whispered seductively. No. Agnes didn't want to hear any more. She wanted him to take her on the desk right now. \n\n\"You know those strange things that have been happening? Your mother's migraine and the rain?\" James caressed her face. \"My power is your power so long as we are bonded... So long as you answer my needs.\" As if Agnes would refuse him. In this state she could refuse him nothing for the way he was awakening all of her sexual arousal. She was swimming in a sea of joy. But Michelle's voice of reason rang in her head. It was always at the worst possible time. \n\nWith a regretful groan Agnes held James back before he could assault her neck with his tender kisses. James's eyes grew dark at this resistance. \n\n\"What about when you were choking me in my first dream?\" Agnes breathed. James suddenly smiled wickedly as he said, \"That was a test to see if you would fully accept me. I wanted to see what you would do.\"\n\nSome of her common senses came back to her as Agnes tried to put a little more distance between her and the sex demon. \n\n\"By trying to choke the life out of me?\" she cried. \"Maybe some girls are into choking but I'm not.\" Agnes made to leave but James caught her roughly by the arm. Suddenly Agnes felt like she was being branded afresh. The mark on her chest began to burn as well. \"Stop it!\" Agnes ordered. James obeyed. \n\nAgnes fell a few steps back clutching her arm. James's flashing brown eyes suddenly dulled. His handsome face fell into one of remorse.\n\n\"I'm sorry,\" James nodded sadly. \"My intention is not to hurt you. Never you. Our bond is one of mutual benefit but you are truly in charge. You summoned me so you are the mistress/ I serve only you.\" \n\nFor a minute Agnes felt some sympathy. Would she be crazy to forgive him. Even Beau never physically hurt her unless she asked. Then there was that warm sick feeling of the thrill of James's hands on her. The pain melting into pleasure. Agnes would have melted into James's whiskey brown eyes, become drunk by the lustful looks he gave her.\n\n\"I need to go home,\" Agnes rushed out the door. \n\n***\n\nThe heat broke because of the rain. Tempers melted becoming more pleasant. Even Mary, Frank, and Mrs. Vanhorn were more cordial towards each other. \n\nEven work was more bearable. Especially so when Agnes saw a familiar face. A cute face she hadn't seen since high school graduation though it took a her few minutes. Agnes went to the table not seeing who it was at first. With a heavy sigh she whipped out her note pad, \"What would you like, hun?\"\n\n\"Agnes?\" \n\nAgnes looked up to see a guy her own age with friendly charcoal gray eyes set in a classically handsome face having an aristocratic jawline and amazing posture as if he were someone important. He was wearing a police uniform. \n\n\"It's me,\" he pleaded cheerfully. \"Nolan Colt.\"\n\nAgnes thought back. She remembered a scrawny nerd with glasses and a few pimples; his nose always in a book to hide from the world. His best feature was his smooth dark hair. It was always perfect. He must have used hair gel to always keep it unruffled and correct. \n\n\"Nolan?\" Agnes remembered then she smiled caught off guard. \"You look...\"\n\n\"Less like a nerd yes,\" Nolan laughed. He wasn't kidding. Nolan had built some muscles since Agnes saw him last. From his perfect jawline to the strong column of his neck that she wanted to nibble on that flowed to what Agnes could only imagine were a fine set of hard pecs and abs. \n\n\"No, it's just... I hardly recognized you,\" Agnes's heart fluttered. \"It's been so long. You do look amazing.\"\n\nNolan smiled, happy to have caused Agnes to blush. Her distinct indigo eyes that were always dreamy and full of dark secrets that made Nolan's heart thump every time he passed her in the hallway. The scent of her perfume would catch in his nostrils and linger making his pulse race. He could still smell it now. She wore the same perfume. Nolan gulped, loosening his collar a bit. \n\n\"Haven't seen you since graduation,\" Agnes sat down in the booth ignoring the other much more matronly waitress's judgmental looks. \n\n\"Not since that bonfire in the woods,\" It was Nolan's turn to flush as he spoke. It was all flooding back to Agnes in a rush of dark waves. She had broken up with Beau... again. He was necking prim Vesta up against an oak tree. Agnes wished they would both get poison oak. Then there was Nolan. Eager to please. Agnes shoved her tongue down his throat then tore off his belt, letting him come inside her as she rode him like a cow girl. It was only 10 minutes followed by a few minutes of puking. \n\n\"I'm so sorry,\" Agnes apologized. \n\n\"For what? I think I should apologize for making you throw up. Hope I wasn't that bad.\"\n\n\"No you were fine... But I used you,\" Agnes fiddled with her nails, cleaning what imaginary dirt she could find, avoiding Nolan's attentive gaze. \n\n\"You weren't in a great place,\" Nolan soothed. \"I always thought you were too good for Beau. He never knew what he had.\"\n\nAgnes looked up and smiled at him. They talked for a while until Agnes's boss barked at her to do her job. Nolan told Agnes all that he was doing. He left Paradise Falls to go to college then he entered a police academy and worked in New Orleans. Now he was back to take care of his sick mother. \n\n\"My dad died of cancer too,\" Agnes sympathized. Her eyes became rheumy making her even more beautiful. Nolan reached out and touched her arm. It was smooth and fair. Her freckles like constellations. Agnes's heart jumped at Nolan's touch. It wasn't as electrifying as James's but still it made her tingly and stoked a flame inside her. She wondered what sex with Nolan would be like now that he was buff and hot?\n\n\"I better get back before my boss calls me over again,\" Agnes flushed. \n\n\"When does your shift end?\" Nolan asked almost too quickly. Agnes smiled. \n\n\"A few hours,\" she said.\n\n\"I can give you a ride home,\" Nolan offered. \"If... if you want.\"\n\n\"I don't have the car so yeah I hate walking in the dark,\" Agnes's misty indigo eyes gleamed. \n\n***\n\nAgnes and Nolan talked the whole ride to her house. She wished it could have lasted longer. But the excitement wasn't to end with a car ride. Once Agnes walked out of the car she heard yelling and screaming coming from the house. Nolan followed Agnes as she ran through the front door. She found Frank towering over a frightened and beaten Charlie who was curled up on the floor.\n\n\"You mind your own business, you little cunt,\" Frank cried. \n\n\"Frank! Leave my baby alone!\" Mary cried holding a frying pan ready though she wasn't by Charlie's side to hit his attacker.\n\n\"What's going on down there?! Can't an old woman sleep in peace??\" Mrs. Vanhorn was hanging over the railing, her white hair wild and eyes glazed over with early onset cataracts. She waved her cane around frantically that would have poked anyone else's eyes out if they got too close. \n\n\"Your baby's a nosy faggot,\" Frank cursed. \n\nWithout thinking Agnes grabbed a vase then crashed it over Frank's fat gross head. Frank faltered then turned around, his eyes wild with rage. Agnes then circled around him and covered Charlie. She pried his face from his arms to see his bottom lip swollen and cut and a hideous black and purple bruise over his left eye.\n\n\"You okay?\" she asked him.\n\n\"You bitch...\" Frank bit out. Blood trickled down Frank's face from the wound Agnes inflicted. Agnes could feel her own inner fire flare wildly. A hell fire that no water could ever quench. In her blackest thoughts she wished Frank to die. She wondered if she had the power to make it rain, did Agnes have the power to kill? The whole house began to tremble at Agnes's evil thoughts. Glasses broke on tables without touching the floor. Clocks went out of whack. It was like a spontaneous earthquake set off by the high emotions of everyone there. \n\n\"What the hell?\" Mary cried as a picture of her and Louis fell from it's exalted place on the wall crashed to the floor, the frame shattering on impact. Frank's nose began to bleed. His brain felt like it was on fire. He held his head in his hands as his ears began to bleed as well. But then Nolan cried out...\n\n\"Enough! Hands up!\" Nolan was beside Frank, his gun up against the side of the bastard's fat red wet head, the safety off. He looked so heroic standing there with eyes that once looked on Agnes with kindness now bore into Frank with steely resolve. Cold and calculating. Then the house stopped trembling. Everything was eerily still. \n\n\"Hands behind your back,\" Nolan went on with handcuffing the son of a bitch. \"You alright, kid?\" Charlie didn't say a word. Agnes answered for him, \"He'll be alright.\"\n\n\"The punk attacked me,\" Frank cried defensively the shock of the mysterious earthquake and his bleeding nose and ears wearing off. \n\n\"That's not what it looked like from where we were standing,\" Nolan's voice became rough and harsh. Full of authority. Agnes would have happily opened her legs for Nolan at that moment if he wanted. She was a sucker for a man in uniform. Especially one who was brave enough to stand up to an ogre. The Nolan Agnes remembered avoided confrontation at all costs not that it did him any good. Agnes would still see him being stuffed into a locker or see him walking down the hallway his head and clothes wet and smelling like crap and piss. \n\n\"You sure you guys will be alright?\" Nolan looked to Agnes. She nodded. \n\n\"I'll see you tomorrow then,\" Nolan nodded, his face somber. Mary was left gaping as Agnes helped Charlie up the stairs and Nolan ushered big Frank into his patrol car. \n\n***\n\nAgnes cleaned Charlie up as best she could. Unfortunately this wasn't the first time Charlie was a victim of Frank's violence. It was just the first time a cop came to the house. Agnes tried calling Michelle but she wouldn't pick up. Perhaps she was asleep. Or maybe fighting with her grandmother as she often did. \n\n\"What happened this time?\" Agnes applied some iodine to the cut on Charlie's swollen lip that was now turning purple. Charlie sat in sullen silence for a while until he finally said, \"I caught Frank jacking off.\"\n\n\"Oh, Oops Baby,\" Agnes sighed. \"I figured he was.\" \n\n\"He was in your room doing it on your bed,\" Charlie said. Agnes froze. Then she went back to healing her baby brother's wounds.\n\n\"Gross,\" Agnes's nose crinkled in disgust. \"I suppose I'll have to burn the bed now.\" \n\n\"Burn the whole house for all I care,\" Charlie snapped. \"With him in it.\" \n\n\"You know... I just might,\" Agnes spoke coolly without thought. She was close to making Frank's head explode. She could feel it. If Nolan hadn't interrupted then Agnes would have made Frank's brain matter splatter all over the walls. Then she would have turned her rage towards Mary. She had a weapon in her hand but did nothing to save her child. She never lifted a finger. Always concerned about her own safety. \n\nAgnes couldn't sleep in her own bed after knowing what Frank was doing there. She snuggled up to Charlie in his bed. She embraced him, shielding her little brother like a cocoon from the icy winter. Agnes and Charlie lay in the dark in the glow of plastic planets and stars. Their father decorated all the kids's rooms with them. It gave them both comfort. Their father's spirit caught in the ghostly green glow of cheap dollar store toys. \n\n\"That earthquake...,\" Charlie whispered. \n\n\"Weird...,\" Agnes replied softly. \n\n\"Frank's nose was bleeding... and his ears.\"\n\nAgnes was silent. She knew Charlie wanted to ask her something but if it was said aloud it would sound insane. Agnes felt insane for thinking it but she summoned a sex demon that gave her super powers. That seemed more sane than staying in a place where she and the ones she loved were belittled and abused. Staying in a town that was slowly dragging her under. If she didn't fight then Agnes would be buried in this boring dirt forever. \n\n***\n\nMichelle finally called that evening, \"Bring Charlie to the quarry. I have a cousin in from the city. I know they'll get along.\" By get along Michelle meant gay of course. Since Charlie couldn't come out to other boys Michelle would often pimp out her cousin or the brothers of friends she made in Baton Rouge.\n\nParadise Falls wasn't just a name that the settlers came up with. There was a waterfall just outside of town in the forest. It was a great place for high school kids to party or hang out and... well a lot of other things teenagers love to do when their parents weren't around playing chastity police. Beau and Agnes would always fuck in the quarry beside the roaring falls. Out of ear shot. \n\nMichelle, Agnes, and Charlie weren't the only ones there though. As mentioned before there were always a few kids with a bon fire going on. Someone brought a boom box and was playing some Taylor Swift and Agnes drank a few beers with Michelle leaning against a tree watching the teenagers debauchery and be stupid with their keg stands and other alcohol acrobatics. Charlie went off with Owen, Michelle's 17 year old cousin. \n\n\"I wish Charlie could escape this place,\" Agnes mourned as she sipped her second Bud Light. \n\n\"Sorry I didn't answer your call,\" Michelle apologized offering Agnes a cigarette. Agnes took it then lit it up; it was all second nature to her. \n\n\"Grandma problems?\" Agnes puffed a cloud of toxic smoke into the summer air. \"Or boy problems.\"\n\nMichelle averted her gaze and said, \"A little of both. But it's nothing compared to your shit.\" She inhaled her cigarette, the end glowing red. Agnes watched her friend intently in the orange glow of the bonfire. The flames danced in her olive green eyes that were now unreadable. \n\n\"I can help you guys out,\" Michelle offered. \"If we pull some money together we can get an apartment in Baton Rouge. You, me, and Charlie living away from these religious freaks.\"\n\n\"I doubt we'd get away with it,\" Agnes poked a hole in Michelle's dream and watched it deflate with Michelle's expression. \"The only secret Charlie can keep is the big one but everything else... Frank always bullies him or Mary would guilt him into telling her.\" ",
        "\"You can't wait until he's 18,\" Michelle gave Agnes a little poke. \"Charlie may not last that long. Every day it's like he dies a little inside. He's sensitive. He's not built like you and me.\"\n\n\"I'm not sure about me either...,\" Agnes finished her beer. \"Did you find anything out about the masturbation summoning ritual?\"\n\nMichelle sighed, her green eyes stony, \"Nothing much but I did look up incubus. It's a sex demon.\"\n\n\"Duh... what else?\"\n\n\"Well nothing too specific,\" Michelle shifted against the tree. \"Just that repeated contact with an incubus can result in ill health or...\"\n\n\"Or?\"\n\n\"Death.\"\n\nAgnes was silent. She mulled it over in her mind, thinking back to how many times she'd slept with James. She never felt tired or sick. In fact she felt the opposite. She felt like there was a release of power inside of her. Agnes just thought that was euphoria or just plain sexual confidence. She felt like she could do anything after sex with James. \n\n\"Anything less dark?\" Agnes asked hopefully.\n\n\"Well...,\" Michelle took another drag of her of her cigarette that dwindled down with each puff. \"There was something about witches and familiars. Once a person makes a contract with a demon then that demon gives her power. But...\"\n\n\"Don't leave me in suspense.\"\n\n\"But the contract is binding,\" Michelle grew dark. \"Your soul belongs to the demon. He/she will give you all the power you want or desire but when you die your soul is dragged to hell and you become theirs for all eternity.\"\n\nAgnes did not like the idea of burning in hell for eternity. She trembled as she felt her insides clenched and writhed. She felt sick as she bent over and heaved. \n\n\"Agnes?\" Michelle rushed to her friend but Agnes held up her hand. \n\n\"I need to pee,\" she said then Agnes rushed away into the darkness away from the teenage hormonal cacophony of idiocy. \n\n***\n\nAgnes came to the quarry. The rush of the waterfall was static that cleansed her ears from idiot kids drinking and fucking. The night felt heavy on her shoulders. She couldn't breathe. Her body was on fire despite the chill of the summer night. Agnes looked into the wine dark water. It looked like an abyss that could swallow you whole.\n\nAgnes took off her clothes then dived into the black waters. Under the water there was a soothing silence. She stayed as long as she could before her lungs began to ache for some fresh air. Her throat burned with her lungs as she skin began to numb. Agnes was half tempted to open her mouth and just let the darkness consume her but the other half of her that held that iron will to live despite the pain and suffering she endured told her to stop being a bitch and resurface, take in a lungful of air and breathe damn you. \n\nAs Agnes broke to the surface the mark on her chest began to burn. He was near. \n\n\"Nice night for a swim.\"\n\nAgnes's heart rate increased as she recognized the silvery voice that would become husky with lust as he spoke her name. Agnes met James's dark, seductive eyes with courage though inside she was quivering with pleasure. He was wearing his pastor uniform. The white collar bobbed as his Adam's Apple moved. His lust caught in his throat at the sight of Agnes wet and naked. Agnes thought she saw James's eyes glow yellow.\n\n\"You found me...,\" she said. Agnes's pussy throbbed as she saw James smile.\n\n\"I will always find you, Agnes,\" James slowly began removing his clothes. \"I sensed your distress...\" James was bare from the waist up. The moonlight pale against his fair muscular body that made Agnes's mouth dry at the desire to feel him skin to skin. She wanted to feel his firm muscles against her bare soft skin. \n\n\"Not like I tweeted it,\" Agnes attempted to appear strong but James seemed to see right through her armor. \n\n\"You don't need to,\" James chuckled in good humor as he unbuckled his pants. He made it a show, filling Agnes with anticipation and excitement once he dived in to join her. \"I told you we're bonded now.\" Agnes's mark glowed at James's mention of it. \n\nAgnes held her chest feeling her hammering chest. Then she heard a splash. James had disappeared. Agnes turned around frantically ready to fight him off but James was too quick. Something grabbed her in the dark water. Before she could think Agnes felt James's hot mouth cup her tingling pussy. Goosebumps erupted all over her body and her nipples hardened into little brown erasers. Agnes's loins were on fire stoked by James's wicked demon tongue as it dove into her folds then flicked over the hood of her clit. \n\nAgnes jerked back as James's rough tongue played with her clit. A cascade of whimpers and small cries fell from her mouth. Then she felt James's lips travel upward along her mound, then her navel, until his dark head resurfaced. James held firmly onto Agnes's hips pulling her closer to his pelvis where she felt his rigid flesh hot against her quivering sex. \n\n\"Please stop...,\" Agnes pleaded as James caught one of her nipples into his sexy mouth. He nibbled on the brown nub, flicking his tongue over it sending tiny waves of pleasure through Agnes's every nerve endings. She bit her lip as James sucked in most of her swollen breast. He repeated this action on her other breast and Agnes couldn't help but dig her nails into James's muscular shoulders in approval. \n\n\"You want me,\" James whispered darkly as his warm lips touched Agnes's neck. \"You love it when I kiss you. When I fuck you. When I'm so deep inside of you that you come for hours. But most of all...,\" James breathed hotly into her ear that made Agnes melt into him. \"You love the power I give you.\"\n\nIt was all true. Agnes loved everything James did to her. But the fear still nagged annoyingly at her stomach that conflicted with the feeling of his smoldering iron erection pressed against her stiff clit. \n\n\"I don't want to go to hell,\" she whispered in fear. \n\nJames licked her cheek then kissed it. He squeezed her arse as he growled like an animal making her moan with longing. \n\n\"I don't blame you...,\" James whispered. \"But you won't go there for a long time.\" Agnes looked James deep into his dark hungry eyes that seared into her damned soul. \"Contracts between humans and demons is a symbiotic relationship. We share everything. Especially immortality.\" \n\n\"Really?\" Agnes paused. \"Michelle didn't read anything about that.\"\n\nJames smiled as if amused by some secret joke.\n\n\"There's a lot of things I'm sure your friend has never mentioned to you,\" he spoke the word friend with such wry humor that he made Agnes doubt Michelle for the first time in years. What could he have meant? But before she could ask Agnes felt James lift her up then bring her back down on his fiery rod of flesh. He sunk deep into her tender flesh as if piercing a tomato. \n\nAgnes heaved a long, ecstatic sigh as she felt James push inside her. It took a while, a few hard thrusts but finally Agnes took James whole. He was so strong that he didn't need any support as Agnes felt the twitching of his firm thighs slap against her tender ones. James held Agnes tightly as she swallowed his tongue, seeking hers out then dancing in a shared rhythm of lust. Agnes's muffled cries of passion passed into the night as James took his pleasure. \n\nAgnes thought she would die that very moment but what a way to die! She tangled her fingers in James's dark wet locks. She was no longer some solid but the very water around her. A pool of hot liquid dissolving into the cool waters. They floated locked in an embrace. James's stamina was inhuman. He remained hard for an hour even after he flushed his sizzling unnatural seed into her mortal womb. Agnes licked his neck, the taste of salty sweat and the distilled waters like honey on her tongue. She felt James shudder at the action.\n\n\"You made it rain,\" Agnes whispered though it was more of a statement than a question.\n\n\"You did,\" James chuckled. \"I told you. My power is your power.\"\n\n\"Can I kill someone?\" she asked. James was silent for a moment as if contemplating the idea. Agnes felt his body shake as she heard him chuckle. \n\n\"Anyone specific?\" he asked looking at her with some twinkle of pride. Agnes smiled, her sharp indigo eyes like an animal in the zoo just let loose from its cage that just discovered it's wild instincts were not dead but dormant...\n\n***"
    ],
    "authorname": "ErosinaScarlett",
    "tags": [
        "incubus",
        "horror",
        "magic",
        "erotic",
        "m/f",
        "demons"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/mark-of-the-incubus-ch-06"
}
{
    "title": "His Dream Girl",
    "pages": [
        "After finding out how Jacob feels about her, Emily's body begins to change, and Jacob can't help but notice that her transformation is conforming to his deepest fantasies.\n\nStory contains lactation, breast expansion, ass expansion, and male penis growth; all resulting in unrealistically huge assets. All characters are 18+.\n\n* * *\n\n\"Ugh, lab reports suck,\" Emily said before slumping over onto the table.\n\nJacob chuckled. \"Can't argue with that.\"\n\nThe two lab partners were sitting together in the school library, attempting to work on their AP biology homework, though at this point Emily wasn't above some idle distraction.\n\n\"Did you read that manga I showed you?\" Emily asked.\n\n\"Yeah...it was really cute for a while, but I kinda fell off of it when the love interest started getting all moody and aggressive.\" Jacob shrugged. \"Never really understood the appeal of those kinds of characters.\"\n\nEmily huffed in indignation. \"You just don't get it. There's nothing more romantic than a good kabedon.\"\n\nEmily glanced up at Jacob, who had gone back to writing in his lab book. He had a smile on his face, which Emily couldn't help but mirror. This was nice -- having a friend. From the very beginning of high school, Emily had just sort of sequestered herself into the background, not really interacting with anyone if she could help it. The throes of puberty certainly didn't help much, gracing her with terrible acne and not much else to compensate for it -- just a couple of modest C cups and...well...her urges.\n\nWhen she learned that Jacob Housley was assigned as her lab partner in biology, she intended to keep up her usual routine with group assignments: do all of it, none of it, or trade it off every other assignment. It had served her well for so long, but Jacob wasn't having it. He insisted they work together, unilaterally deciding that every Friday they'd meet in the library and work on that week's lab assignment.\n\nIt took a while, but bit by bit Emily opened up to her pushy lab partner, and found him to be a fun person to be around. She recently discovered that they shared an interest in manga and anime, and with that came the back and forth of recommendations as well as the subsequent discussions of shared enjoyment or scandalized disagreement. It was a bit sad to admit, but it had been the first time that she'd had any real fun with any of her classmates since she started high school, and she truly cherished it.\n\n\"Hey, Emily?\" Jacob asked.\n\nShe lifted herself off the table and sat up, furrowing her brow at Jacob's nervous expression. \"Yeah?\"\n\n\"Would you...maybe...want to go out?\"\n\nEmily froze. Jacob...wanted to date her? Was that a thing that could happen? Her breathing quickened and she felt a tingle between her legs. Mentally groaning, she urged her stupid body to calm down and tried to formulate a response.\n\nBefore she could, though, someone behind her laughed.\n\n\"I think you confused her,\" said the sickeningly familiar voice. \"Even pizzaface knows that you'd have to be completely desperate to want to ask her out.\"\n\nEven though Emily really should've been immune to it by now, the insult stuck inside of her like a parasite. Sometimes she wanted to ask Hannah Burton if she was trying to be a Mean Girl stereotype, but she would always just freeze up at every opportunity -- like right now, for instance. By the time Emily turned around, Hannah had already walked away -- her stupid, perfect butt swinging from side to side as she left the library.\n\n\"Fuck her,\" Jacob said, looking down at his feet. \"Dammit. I should've said something, but I just-\"\n\n\"It's okay.\"\n\n\"Anyway, um. Do you-\"<br> <br> \"No. I'm sorry.\"\n\n\"Oh.\"\n\nEmily could hear the disappointment in his voice.\n\n\"It's not because of what she said, right?\" he asked.\n\n\"No.\"\n\n\"'Cause I think you're awesome.\" A bit of red crept into his cheeks. \"And pretty.\"\n\n\"Thanks.\"\n\nEmily gathered her stuff and stood.\n\n\"Hey,\" Jacob said, a tinge of panic in his voice, \"we're still friends, right?\"\n\nEmily turned to him, trying her best to fake a smile. \"Yeah. See you on Monday?\"\n\n\"Sure...\" Jacob relaxed a little, but worry was still plain on his face. \"Sure. See ya Monday.\"\n\n* * *\n\nJacob zoned out as he watched Emily leave the library. He fucked up. He should've said something to Hannah -- seriously, pizzaface? -- but he'd been distracted by the stupidest fucking thing possible. The moment he had asked Emily out, he'd gotten inexplicably horny. He knew he was excited at the prospect of going out with her, but was he really that immature? Even after that horrible mood shift, he was still hard. God.\n\nHe didn't believe for a second that Hannah's insult had nothing to do with Emily's answer. It might have still been \"no\", of course, but she probably wouldn't have been so torn up about it without the bitch's input.\n\nOver the course of getting to know Emily, Jacob had realized that she had a pretty big complex about her looks. He didn't really understand it -- the only real point against her was the acne. Take that away and she'd be the prettiest girl in the school -- beautiful, olive-toned skin; dark brown eyes he could stare into for hours; and full, luscious, unbearably kissable lips. Sure, she didn't have his ideal body type, but that only existed in the realm of fiction. If he judged girls based on that he'd be single forever.\n\nHe took in a deep breath and sighed. There was still a bit of that smell from earlier lingering in the air. He had noticed it right before Hannah showed up, so it must've been her perfume or something. It...actually smelled really, really good. Like milk and honey, but way better. Not that he'd ever tell her that.\n\nJacob packed away his stuff and left the library. Although he worried that it would drive them further apart, he decided he'd ask Emily out again if the opportunity presented itself and there weren't any idiots around to put her down. Hopefully it wouldn't be as much of a train wreck as his first attempt.\n\n* * *\n\nEmily drove home on autopilot, barely paying attention to what she was doing in her depressed haze.\n\nHannah was wrong. Jacob wasn't desperate, he was just a good person. He'd somehow found something to like in an ugly, anti-social girl who had initially wanted nothing to do with him. He might have even been telling the truth when he said she was pretty, though she honestly couldn't understand how he could've come to that conclusion.\n\nShe knew he could do better than her. Jacob was fun and handsome, and while he wasn't exactly popular, he wasn't unpopular either. Once he got over her rejection, she was sure he could find a nice girlfriend who wasn't as ugly or boring as her.\n\nBesides, if they got together, he'd eventually learn about her...habits, and she wasn't really sure if she could handle that. He'd probably think she was a freak, and he'd probably be right to think it.\n\nShe finally broke away from her self-loathing as she pulled into her driveway and saw her parents loading up the SUV. They were getting ready to leave for their \"second honeymoon\", whatever that meant. Probably \"nonstop sex in a hotel room\", if she had to guess.\n\nHer dad waved at her as she got out of the car. \"Hey baby.\"\n\n\"Hey,\" she replied. \"Are you and Mama about to leave?\"\n\nHer mom walked out of the garage lifting two heavy suitcases like it was nothing. \"Can't wait to get rid of us, huh? We're almost ready. How was school?\"\n\n\"Fine,\" Emily lied.\n\nHer mom finished packing the car and wrapped her arm around her dad's waist.\n\n\"You sure there won't be any house parties while we're gone?\" her dad asked.\n\n\"No, Daddy.\"\n\nHer mom smirked. \"You don't have to lie to us, Emily.\"\n\nEmily rolled her eyes and once again wondered at two people in front of her. Michael and Jessica Tenner: the perfect couple in every conceivable way. They were both doctors who had met in medical school. Michael could easily be described as exceedingly handsome, even if he was a bit on the short side.\n\nJessica, though, was extraordinary. People were always surprised when they found out she was an anesthesiologist, since their first guess would always be professional bodybuilder. She wasn't too bulky, but she was built enough that she wouldn't be able to hide it even if she wanted to -- not that she did. Her muscles didn't detract from her bust either, her pectorals sporting two shapely G cup breasts. Add to that her general drop-dead gorgeousness, and you started to wonder if Amazons were really a myth.\n\nHonestly, if it weren't for a few incidental facial similarities, Emily would've thought she was adopted. There was a period in middle school where she seemed to start bulking up, but it didn't last very long, and she just went back to her normal figure in a week. She remembered it really upsetting her dad for some reason.\n\nJessica approached her, wrapping her in a tight hug. \"We'll miss you, baby.\"\n\n\"Yeah yeah,\" Emily replied, pulling away from her only to be hugged by Michael. \"I'll miss you, too.\"\n\nThey both got into the SUV, Jessica waving from the passenger seat.\n\n\"Don't wreck the house too bad,\" she said as they drove away.\n\nEmily waved them off, eager to have the house to herself. Hopefully being able to go all out without having to worry about being heard would cheer her up. She entered the house and made a beeline up the stairs and into her parents' room. She found the key to their expansive walk-in closet in its usual hiding spot, and, like always, marveled at its contents.\n\nThere was one thing above all else that made Emily certain that she was was her parents' daughter: her libido. She had been masturbating multiple times a day before she even knew what sex was. Then, one night in middle school, she found out what Michael and Jessica Tenner were \"playing\" every night in their bedroom. She had stared transfixed through the crack in the door, blown away at how something that big could fit inside of her Mama. That experience had actually led to a bit of confusion when she discovered pornography, since all the guys in it were so tiny. It wasn't until later on that she realized that her mother wasn't the only ridiculously endowed person in the family.\n\nIt wasn't long after that event that she had figured out where her parents kept their \"toys\", which brought her back to the present moment. Behind a huge rack of clothes was a veritable shrine to sex. A huge assortment of items lined the walls and filled the shelves: lingerie, bondage gear, cock rings, anal beads, strap-ons...there was even a disassembled sex swing sitting in the corner of the room. What Emily was interested in, though, was the shelf filled entirely with neatly-arranged dildos.\n\nFiguring she had all weekend to work her way up to the more intense sizes, she decided to start small, picking up a green, eight-inch vibrator. After washing it in the bathroom sink, she stripped naked and went to her bedroom.\n\nShe fell onto her bed and began teasing her clit. It never took her very long to get going, and in no time at all her juices were already overflowing and dripping onto the sheets. She brought the end of the vibrator to her slit, and this time she didn't imagine it belonging to some random porn actor, and instead pretended it belonged to Jacob. She imagined him laying over her, getting ready to penetrate her for the first time.\n\nHe'd be gentle, slowly inserting his rod to make sure he didn't hurt her. She gradually pushed the vibrator into her pussy, inch by inch, until it was fully inside her. She moaned in pleasure, her hips twitching upwards at irregular intervals.\n\nJacob would look deep into her eyes and ask her if she was okay.\n\n\"Mhmmm. Your cock feels so good in my pussy, Jacob.\"\n\nHe'd begin thrusting, still taking care to not be too rough. Emily pumped the vibrator with one hand while fingering her clit with the other.\n\n\"Harder, Jacob! Fuck me harder!\"<br>\n\nShe quickened her pace, thrusting the toy in and out of her as she imagined Jacob moaning in her ear. Her pleasure built to a crescendo.\n\n\"Cum inside me! Fill me up with your cum!\"\n\nShe came, her inner walls repeatedly clenching around the vibrator as she imagined Jacob pumping her with his sperm. She writhed in pleasure for nearly a full minute before relaxing, her breathing short and rapid in post-orgasmic bliss. She pulled the vibrator out of her pussy and brought it to her mouth, licking up her juices while pretending it was mixed with Jacob's cum.\n\nShe went on like this for hours, cumming around twenty times before she lost count. Her body never seemed to tire when it came to sexual pleasure, though she never really thought much of it. After all, it wasn't uncommon for her to hear her parents going at it all day.\n\nShe probably could've kept going all night, but she eventually decided it was time for bed and took a shower. After using the showerhead to get in one more quick orgasm, she washed herself off and went to bed.\n\nShe hugged her pillow as she tried to sleep, still feeling a bit down. A good masturbation session usually made her feel better, but this time there was a constant twinge of disappointment in the back of her mind. It was too bad that her imaginary partner would forever remain imaginary.\n\n* * *\n\nWhen Emily woke up she felt...different, somehow. Confused, she brought her hands to her face to rub the sleep out of her eyes -- and immediately froze. Her heart began to race as she desperately tried to feel for something that miraculously seemed to be missing.\n\nExcitement building, she rushed to the master bathroom and gasped at the girl staring back at her through the mirror. Her face was completely unblemished, covered in perfectly clear, silky-smooth skin. She ran her fingers across her cheek in wonder. Looking down, she found the rest of her body in the same condition -- absolutely perfect olive skin from head to toe.\n\nThat wasn't all, though. She was curvier. A lot curvier. It seemed she had gotten wider in all of the right places; her hips and thighs were noticeably thicker, and her butt had plumped up quite a bit as well. She groped her breasts, and they were definitely heavier, fuller -- about the size of a pair of grapefruits. Even her nipples -- which in the course of her examinations had become rock hard -- had grown longer and thicker.\n\nJust to be sure she wasn't hallucinating or something, she went back to her room and tried putting on some of her clothes. She was pretty sure her panties felt tighter, but she got clear confirmation of her growth when she tried to pull on one of her pairs of jeans. The denim stretched tightly over her thighs, and she really had to struggle to get the waist of the jeans past her hips and ass. When she finally managed to pull them fully on, she felt like her entire lower body was caught in a vice. She didn't even bother trying to do up the button, dismissing it as a lost cause.\n\nEmily could feel wetness soaking into her panties as she picked out a bra with mounting excitement. She slipped both arms through the straps with practiced ease, letting the cups slip under the curve of her breasts. That wonderful, unfamiliar tightness gripped her chest as she reached back and, with some difficulty, hooked on the back straps of the bra. She reached under each cup and adjusted herself as best she could, but there was only so much she could do. Her breasts were absolutely squashed into the too-small undergarment, flesh bulging outwards over the top of the cups. After admiring herself for a bit longer, she slipped on a red v-neck that, like the rest of her outfit, felt tighter than before.\n\nBy all rights she should've been terribly uncomfortable, but she was thrilled by the tightness hugging her body, as if she were about to burst out of her outfit at any second.\n\nShe walked back into the bathroom and gazed at herself in the mirror. She was...she was hot! Her hips flared out much wider than her waist, her ass was a perfect \"applebottom\", with her cheeks jutting outward at a sharp angle from her waist and thighs, and her breasts were skirting the border between \"big\" and \"huge\".\n\nTo top it all off was her perfect, clear face. Though, now that she thought about it, was she always this...good looking? Frowning, she studied herself closer, feeling the contours of her face. She didn't think her facial structure had changed at all. Putting aside all the changes to the rest of her body, was clearing up her acne really all it took to make her feel so...pretty?\n\nWas that what Jacob saw in her? Her heart fluttered at the thought of him. Maybe he'd ask her out again when he saw how hot she had become. Maybe...maybe she felt good enough for him, now?\n\n...Was that shallow of her?\n\nShe shook her head. She could worry about that later. Right now she really needed to get off. It had been a long time since she felt this horny. She pulled down her pants, exposing her dripping sex. As much as she loved the feeling of her tight jeans, there was no way she was going to be able to fit a hand down there without taking them off.\n\nShe cleared a space on the bathroom counter and climbed up, getting up close and personal with her own reflection. Standing on her knees, she leaned back and ran her fingers over her labia before attacking her clit. A shockwave of pleasure coursed through her, her nub seeming even more sensitive than usual. As she continued playing with it, she was starting to think that even it had gotten a bit bigger.\n\nFirst two, then three fingers inserted themselves into her eager pussy, pumping in and out of her as her thumb continued to rub at her clit. Deciding that she needed to get a feel for her new tits as well, she roughly pulled up her shirt and bra. Two big, beautiful breasts slipped out from under her clothes, bouncing hypnotically as they escaped the confines of her top. With the hand she wasn't using to finger herself, she grabbed at a nipple. As her fingers pinched at the hard pink nub, she let out a surprised and ecstatic squeak. It was so sensitive! She had never felt anything like it before!\n\nShe pulled her other hand away from her pussy and moaned as she pinched her other nipple. Reveling in the newfound sensations, she began groping and jiggling her new assets, all the while pulling and twisting roughly at her nipples. After only a few moments, her body rocked in orgasm, pleasure radiating out from her tits and suffusing itself throughout her entire body. She forced open her eyes and stared in awe at the curvy vixen in the mirror writhing in front of her.\n\nHer breathing shifted from helpless gasps to heavy panting as her orgasm ceased. She stared at her breasts in amazement. She didn't even know it was possible to cum with her tits! These changes to her body just kept getting better and better!\n\nThat thought brought her back to reality. What was going on with all of this, anyway? A late growth spurt? If so, then this had to have been the fastest growth spurt in history. She'd certainly never heard of anyone's breasts going from a modest handful to the size of grapefruits in one night. Should she be worried?\n\nLooking back at her reflection, she decided to just roll with it for now. All of the changes were positive, and she felt amazing. She may as well enjoy it.\n\n* * *\n\nEmily groggily opened her eyes, confused at her unfamiliar surroundings.\n\nOh, that's right. She had spent the entire day masturbating, pretty much confining herself to her parents' bedroom so that she could have easy access to their toy collection. She had no idea how many times she came, but she had worked her way up to an impressive twelve-inch dildo before finally collapsing in exhaustion on her mom and dad's bed.",
        "Yawning, she got up and trudged to her room, making a mental note to clean the toys that were still scattered all over the place. The first thing to catch her eye was the blinking blue light on her phone. She winced at the multiple missed calls and unanswered texts from her mom and dad.\n\nShe tapped on the last missed call, mentally preparing herself as she waited for someone to pick up.\n\n\"Emily?\" her mom answered.\n\n\"Hey, Mama. How's your trip going?\"\n\n\"It's going fine. Are you okay? You wouldn't answer your phone.\"\n\n\"Yeah, I'm okay. I just got caught up with something and forgot to check it.\"\n\n\"Oh, really?\" Jessica teased. \"I wonder what it could be that had you so distracted.\"\n\nAs Emily rolled her eyes, she heard a muffled voice in the background.\n\n\"Yes, Michael, it's Emily! She said she's fine.\"\n\n\"Sorry for worrying you,\" Emily said, twirling her bangs guiltily.\n\n\"It's okay, baby.\" Jessica replied, her voice sincere. \"Just make sure we can get to you, okay?\"\n\n\"Alright.\"\n\n\"Anyway, your dad and I were just about to leave for the beach, so we'll talk to you later. We love you.\"\n\n\"Love you, too,\" Emily said before hanging up.\n\nShe had briefly thought about telling them about her changes, but she decided to make it a surprise. She wanted to see the look on their faces when they found out that she had become just as gorgeous as her mom while they were gone.\n\nSpeaking of which, she had grown even more over the course of the day yesterday. Both her jeans and her bra were completely impossible to put on now, and it almost felt like she was wearing a thong when she stretched her panties over her hips and ass. She could still wear the shirt...as long as she was comfortable with baring her midriff and showing off a pair of very prominent headlights.\n\nShe was an utter bombshell. Each of her breasts were as big as her head, with inch-long nipples extending from three inch wide areolas. Even with those, though, she still managed to look extremely bottom-heavy -- with ultra-wide hips and thighs, and a huge, meaty bubble butt that jiggled with each step she took.\n\nShe hadn't grown much overnight, but that was probably for the best. As much as she would love to get even bigger, she wanted to find some clothes that she wouldn't just grow out of in a day.\n\nShe scoured her parents' closet for anything that might fit her, and eventually decided on a pair of her dad's sweatpants and a hoodie that was thick enough to hide the protrusion of her nipples. They were still pretty tight, but the way they fit over her body just made her look fat more than anything else. That was fine for now, though. She just needed something that wouldn't get her kicked out of a clothing store for being too scandalous.\n\n* * *\n\n32L.\n\nEven after coming back from her shopping trip, Emily couldn't help but stare at the tag on her new bra. There had been only one of that size at the specialty shop that she had gone to. Between that and the difficulty she had finding good-looking clothes that fit, it looked like Emily would be doing most of her shopping through custom orders from now on.\n\nShe thought back over her day and smiled. The woman that fitted her for her bra spent every other sentence complimenting Emily's figure, and when Emily had finally walked out of the clothing store with an outfit that had fit her correctly, she was constantly turning heads.\n\nShe was sexy. The word echoed in her mind and warmed her thoughts. She had never felt so good about herself in her life.\n\nShe decided that tomorrow she would apologize to Jacob for turning him down and ask him out. He had somehow wanted her even before all of this, so she was sure he would say yes.\n\nReady to celebrate, she took out the final toy she would use for the weekend. She hefted the giant black dildo in her hands and playfully licked up all fifteen inches of the shaft. She had only used it once before, and it had been one of the most intense experiences of her life. She was sure that her new body would only add to that.\n\nShe pressed the dildo firmly onto the living room's hardwood floor, securing it to the ground with the suction cup that was attached to the base. She gazed longingly at it, imagining it was Jacob's as he laid on the floor, waiting for her to ride him. She had to remind herself that it was extremely unlikely that Jacob was anywhere near this big, but a small part of her couldn't help but argue that it was at least possible. She knew that cocks that big existed, since she had seen one enter her mom all those years ago.\n\nShe stood over it and squatted down, her knees spread wide as she felt the tip nudge against her dripping pussy. She slowly lowered herself onto it, gasping as a shaft as thick as her forearm went inside of her. She leaned back on her hands as she neared the base, shuddering when the change in angle made her feel the end of the dildo press against the inside of her belly. She let out a high pitched moan as her big, soft ass fell onto the dildo's silicone balls.\n\n\"Oh god. Mmmn!\"\n\nTrying her best to keep balance, she began bouncing up and down, pounding her pussy onto the dildo as hard as she could. Her enormous ass jiggled all over the place, while her boobs bounced just out of sync with the rest of her body, pulling heavily at her chest as they swung and repeatedly slapped against her torso.\n\n\"Nnh! Yes! Yesyesyesyes!\"\n\nHer body went rigid in orgasm, and her insides repeatedly contracted around the dildo, trying desperately to milk it for cum that didn't exist. As she shook in ecstasy, she hoped that it wouldn't be too long before she could have Jacob pump her full of his seed, giving her needy pussy what it craved.\n\nShe went on like that for a couple more hours, only stopping because she had to wake up early for school tomorrow. After taking a shower, she laid down in her bed, hugging her breasts in her arms as she nodded off with a smile.\n\n* * *\n\nJacob was anxious as he waited for Emily to enter the biology classroom, wondering how he should act around her. What if she was still down about Hannah's insult? Should he compliment her looks? Would that be weird? Should he just pretend everything was normal between them? That didn't seem like the right thing to do, but...\n\nAs he agonized over Emily, he suddenly smelled that heavenly scent from Friday. His face twisted into a scowl. Why was Hannah here? She didn't even have this class.\n\nHe looked up...and his brain promptly shut down at the sight of the person walking toward him.\n\nIt was Emily. Somehow. Her beautiful -- and apparently now acne-free -- face was easily recognizable, but everything else...holy fuck. It was as if she had stepped right out of one of his wet dreams.\n\nShe wore a black skirt that looked like it was meant to end somewhere around her shins, but because it had to deal with such ludicrously wide hips paired with a similarly massive ass, it actually ended an inch or two above her knees. Her top was a simple white blouse that was simultaneously modest and mouth-watering. The cut wasn't low enough to reveal any cleavage, but it clung tightly to her chest, revealing every tantalizing curve of her...what, J cups? He had no idea -- he just knew that they were big.\n\nHe saw Emily smile out of the corner of his eye. \"Jacob?\"\n\nHe grimaced as he realized that he had just spent several seconds openly ogling her while she just stood there next to their lab desk. He was suddenly very aware of the uncomfortable erection straining against his pants, and he desperately hoped that Emily didn't notice it as well.\n\nHe looked up at her and tried his best to keep his eyes from straying downward, no matter how impossible that seemed.\n\n\"H-hey.\" His voice cracked! Fuck!\n\nShe covered her mouth, her melodic giggles ringing in his ears like bells. As she sat down next to him, he couldn't help but stare as her butt overflowed around the edges of the stool. She frowned, looking uncomfortable, but when she saw where he was looking, she smiled and shifted in her seat, her ass jiggling as she found a better position. He was glad they sat in the back corner, otherwise it wouldn't be just him getting such a good show.\n\nHe knew he should've looked away. The way he was staring at her had to be creepy as hell, but...she didn't look mad. She just smiled at him with a slight flush in her cheeks. She wanted him to look at her like this. He bet she wouldn't even mind if he smacked that glorious ass for being such a sexy little tease.\n\nHe blanched and quickly turned away, focusing on the front of the classroom. That would be the most idiotic fucking thing he could possibly do. Emily wasn't some piece of meat for him to salivate over. How shitty of a person was he for even thinking that?\n\nHis self-deprecating thoughts served to distract him for a little while, but a couple minutes after the bell rang to signal the beginning of second period, he couldn't help but obsess over that scent permeating the air. He looked around. No one else seemed bothered by it, though he did see a few glances dart toward Emily when she wasn't looking. Did no one else smell it? How was that possible? It was everywhere, filling his nostrils and seeping into his skin. What was it, anyway? Did Emily find out what perfume Hannah was using and get it over the weekend? Did perfume even get this strong?\n\nHe closed his eyes and took a deep breath, savoring it. In his state of arousal, the scent of milk made him think of his biggest fetish. He imagined suckling at Emily's teats as breast-milk flooded from her engorged nipples. She pulled him away and kissed him even as he slid his cock into her, her milk spraying in every direction as her basketball sized tits bounced in rhythm with his thrusts. They were growing, filling with even more milk than before. His hands were wrapped around her ass, tightly gripping her softness as he fucked her. Her breasts kept on growing and growing until they reached his ideal size -- so big that he'd never admit it to anyone for fear of being seen as nothing but a pervert.\n\nAfter a long while of daydreaming, he heard Emily shifting at his side. She looked agitated about something, but her features softened when he looked at her. She was absolutely perfect, her body pulled straight out of his dreams. True, he wished that her boobs were even bigger, but they were still big enough to drive him wild.\n\nEmily smirked as he stared at her. She leaned over the black lab desk, dropping her breasts onto the table, acting as if she needed the rest. He nearly came in his pants at the sight of her breasts squishing against the hard surface. He could even see the outline of her bra through her shirt -- her breasts plumping up slightly at the top edge of the cups. Damn, even a bra as big as that one couldn't contain her.\n\nThey were right there...he could just grab them and fondle them and suck on them, and he would be in heaven. There was nothing stopping him. Emily had her arms crossed around her waist and was looking at him as if begging him to take her.\n\nHis hand lifted slightly, but before he could go too far, the bell rung, snapping him slightly out of his trance.\n\nGod! They were in the middle of class! What was he thinking? Emily wouldn't want him to grope her. She turned him down the last time he saw her, for christs sake! The only reason she wasn't slapping him for gawking at her was probably because she had finally gotten over her image issues and was enjoying the attention. That was likely to change if he kept being such a creep.\n\n\"Jacob? Is something wrong?\" the angel sitting beside him asked.\n\nShe looked confused and a little upset. His heart raced. Did she realize what he was just about to do?\n\n\"N-no. You go ahead. I'll meet up with you in English.\" There was no way he could get up now. He was still rock hard, and he wasn't going to be able to hide it without adjusting himself.\n\n\"...Okay.\"\n\nHesitantly, she got up and walked out of the classroom, holding her bag behind her butt as her hips swung hypnotically from side to side. His manhood twitched when he realized that with her arms pulled back he could still see the outer curves of her breasts from behind.\n\nHe looked around at everyone else getting up to leave and realized that he had completely lost track of time. How long had he just been sitting there daydreaming? It felt like class had just started, but it had apparently been over an hour. He didn't even remember hearing the teacher talking.\n\nHe spent a minute trying to calm down, but it was no use. That smell was still lingering in the air, and it just kept reminding him of his fantasies. He adjusted himself when no one was looking and rose from his seat. As he got up, though, he caught a glance at the seat beside him and stared. A small puddle of wetness pooled around the center of the lab stool.\n\nHe reached a shaking hand to the seat that Emily had just been sitting in and dipped a finger in the liquid. He slowly brought it up to his nose and sniffed. The pure, concentrated form of the scent that had been plaguing him all period burned into his airways, leaving him dazed and unbelievably horny.\n\nWithout thinking, Jacob licked his finger, and his mind exploded.\n\nMilk and honey. Dripping breasts and dripping pussies. Big, wide hips and massive asses and pillowy lips and huge, gargantuan breasts that outweighed everything else and were full to bursting with sweet, delicious milk.\n\nHe needed to find Emily.\n\n* * *\n\nEmily stood in the bathroom stall, frowning at the stain in the back of her skirt.\n\nShe had already been getting wet from the furtive glances she had been receiving all day -- Hannah's shocked expression in first period was particularly stimulating -- but seeing Jacob just stare at her in obvious arousal had her absolutely drenched. This was easily the wettest she'd ever gotten in public. As it was, she might have to spend next period in the bathroom to wait for her skirt to dry out.\n\nAlso, both to her dismay and excitement, she was growing again. It seemed to only be focused on her breasts this time, and her bra was already starting to feel quite constricting. If she wasn't in public she would've been thrilled. The possibility of getting big enough to burst out of a 32L bra was awesome, but she didn't want it to happen while people were around. Okay, maybe a small part of her did want it to, but in the end her ego outmatched her id on this occasion.\n\nShe wouldn't mind it happening in front of Jacob, though. He obviously had taken a liking to her new tits. Or had he? One minute he was staring at them, and the next he suddenly looked angry and turned away. He did the same thing when he looked at her butt, too. Did she go too far with the teasing? She honestly couldn't help herself when he was so obviously enraptured by her body. He had seemed to like what she was doing...until he didn't.\n\nHer phone vibrated in her bag. It was a text from Jacob.\n\ncan you meet me behind the school?\n\nHer heart skipped a beat. Maybe he would try asking her out again? Maybe he'd even...no, probably not, but a girl could hope. She texted him back saying she was coming.\n\nJust before she left the stall, though, she heard other people enter the bathroom.\n\n\"I can't believe that little slut got a boob job,\" Hannah Burton said.\n\n\"It had to be more than that. Didn't you see her butt?\" replied her friend. Wasn't her name April or something?\n\nA third girl spoke up. \"I'm telling you, she'd have to get, like, full-on plastic surgery to get that kind of body, and no one can heal from that in just one weekend. It was probably growth hormones or something.\"\n\n\"If that kind of thing existed, then why would anyone get fake tits?\" April(?) asked sarcastically.\n\nHannah huffed. \"Either way, it's fucking gross.\"\n\n\"Yeah, I wouldn't mind having bigger boobs, but there's such a thing as too big.\"\n\nHannah laughed. \"And the stupid cow is flaunting it all around like she wants to suck every dick in the school. Fucking whore.\"\n\nTheir conversation went on like that until they eventually left the bathroom. Emily looked down at herself. Is that what everyone thought? That she had gotten plastic surgery or took some kind of drug to get like this? It...it shouldn't have bothered her, but it did. She'd been getting so proud of her body; she didn't like the thought of anyone thinking it was fake.\n\nWas that why Jacob had gotten angry all of the sudden? That he thought she was fake?\n\nShe suddenly wasn't feeling very confident about meeting him behind the school, but she had to go. It was the only way to find out how he felt about her.\n\nAfter the bell for third period rang, she left the bathroom. No one was in the hallways, but she held her bag behind her just in case. She went out the back exit of the school and saw Jacob in the distance. The sight of him sent another shiver through her womanhood, and to her surprise she felt a warm, tingling sensation around her nipples as well. That was new.\n\nHe was facing away from her, leaning his side on the brick wall of the school, his heel bouncing rapidly on the ground. Emily walked up behind him, but he didn't seem to notice.\n\n\"Hey.\"\n\nHe flinched and started to turn around, but then he stopped himself.\n\n\"I'm sorry. I shouldn't have called you out here,\" he said. His shoulders were tense, and there was a quality to his tone that she couldn't quite place.\n\nHe made to leave.\n\n\"Wait!\"\n\nEmily grabbed his hand, and they both froze. The moment her skin touched his, she felt the tingling in her nipples intensify and radiate throughout the entirety of her breasts. She let out a little whine of pleasure as she felt her bra snap, the cups falling away slightly so that her nipples were exposed to the inside of her shirt. She felt something warm and wet trickle down the front of her boobs.\n\nUnaware of her situation, Jacob pulled his hand away and turned.\n\n\"Emily, I...\" He trailed off, staring wide-eyed at her breasts.\n\nA hand was on her shoulder before she could say anything, pushing her back to the wall. Jacob pulled in close, his other arm slamming on the wall behind her. His chest was pressing against her breasts, and she could feel his rapid, shallow breathing.\n\nWas he going to do it? She felt wetness dripping down the inside of her thighs. He was so close that she had to look up to see his face. She tilted her head, ready for him to take her, but seeing his expression immediately dampened her mood.\n\nPure anguish. Something was terribly wrong, but she didn't know what.\n\n\"J-Jacob?\"\n\nHe pulled away from her as if she were on fire, and she thought she could see his eyes glistening before he turned away.\n\n\"I,\" his voice wavered. \"I need to go. I'm sorry.\"\n\nHe quickly went back inside, and she had no idea what to do.\n\n* * *\n\nWhat the fuck was wrong with him?!\n\nJacob stalked down the hallways, wiping at his eyes as his horror transformed into self-directed rage. The moment he sent that text he knew it was the wrong decision. What was he going to say? \"Hey Emily, I know you said you didn't want to go out with me last week, but now you're even hotter than before so can I fuck you?\" Fucking idiot.\n\nWhen she held his hand, he began to think that maybe she would hear him out...that what he was going to ask her wasn't completely fucking stupid, but then he saw her and she was...\n\nShe was beyond sexy, beyond beautiful -- her angelic face and full, parted lips a picture of feminine pleasure, her breasts exploding from the confines of her bra, her nipples forming giant tents in her shirt as they soaked the fabric in leaking breast-milk, revealing beautifully large, pink areolas. There was no single word good enough to describe her.",
        "And then he fucking assaulted her! Fuck!\n\nHe turned a corner and nearly crashed into someone coming from the opposite direction.\n\n\"Watch where you're going, dumba-pfft!\"\n\nIt was Hannah. Of course. He was starting to think this day couldn't get any worse.\n\nHe glared at her. \"What?\"\n\nShe stifled her annoying laughter. \"You happy to see me or something?\" she asked, looking down at his groin.\n\nHe felt heat rising to his face. He was still hard, and the bulge in his pants was clearly visible.\n\n\"And what's going on with your shirt?\"\n\nHe shoved past her. \"Fuck off. I'm not in the mood to deal with your bullshit.\"\n\n\"Oh, I bet this is good,\" she said as he walked away.\n\nIgnoring her, he turned into the nearest bathroom. Seeing that it was empty, he entered a stall and freed his dick. He began pumping it, hoping he would calm down after a quick orgasm, but as he did he noticed something crazy.\n\nHe was bigger. It looked like his penis had gained over an inch in length, and it felt quite a bit thicker in his grip. He grabbed his balls, and they felt much larger, each one about the size of a ping pong ball. He was hung like a porn star, which only served to increase his arousal.\n\nHe continued pumping, getting used to using longer strokes than he was used to. With his gaze focused downward, he could see the large twin stains on his shirt from where he had pressed himself to Emily's breasts. Feeling a mix of shame and undeniable lust, he pulled up his shirt, bringing one of the wet splotches to his face. He could tell that the smell was different from Emily's...other fluids. It seemed thicker, creamier. He stuffed some of the fabric into his mouth and sucked on it, wringing out as much milk as he could. His cock pulsed as a tiny bit of milk went down his throat. It tasted amazing, even with the acrid taste of his shirt threatening to overpower it.\n\nHe could only imagine what it would taste like directly from the source.\n\nWith that thought, he felt his body tense, building to climax. Realizing he forgot to get some toilet paper and that he wasn't in a good position to aim at the toilet, he cupped his hand in front of his penis before convulsing in pleasure. Wave after wave of cum erupted from his cock, each load blasting into his hand and dripping heavily into the toilet.\n\nHis orgasm lasted twice a long as it usually did, and as it died down into small aftershocks, he marveled at the amount of cum he had produced. His hand was covered in the stuff, and that wasn't even the bulk of it! He glanced down at his improved equipment in awe, before groaning in realization.\n\nHe was still hard as diamonds.\n\n* * *\n\nEmily had her arms wrapped tight around her breasts as she made her way through the halls to the student parking lot. The tingling sensation that had accompanied her sudden growth was -- though dulled -- still present, and she had a feeling that she knew what that meant. Breast-milk continued to leak from her nipples, soaking down her shirt in two wide streaks.\n\nShe had hoped she could get to her car before anyone saw her, but her luck today was continuing to be terrible.\n\n\"Ha! I knew I'd find you,\" Hannah said from behind her.\n\nEmily hunched over, holding herself tighter. \"Go away.\"\n\n\"Saw your boyfriend a second ago. He was pissed.\"\n\nEmily tried walking faster, but Hannah would not let up.\n\n\"Holy shit, are your boobs even bigger? Fucking gross. At least I can tell Sydney that her hormone theory was-\" Hannah had caught up to her and fell silent when she saw the front of Emily's breasts.\n\n\"Oh my god!\" She stopped for a moment, shocked, but just as Emily passed her Hannah's lips twitched upward into a predatory grin.\n\nEmily ran. Whatever Hannah had to say, she didn't want to hear it. Luckily, the bully wasn't trying to follow her, apparently having gotten what she wanted out of her.\n\nShe made it to her car and went home, leaking breast-milk the entire way. When she finally pulled into her driveway, she rushed out of the car and went to her parents' bathroom.\n\nShe took off her shirt, shuddering as she peeled the wet fabric off of her skin. Her nipples were extremely sensitive, with even the slightest brush of her fingertips sending pleasurable shocks through her tits.\n\nThey were so big; two basketball-sized orbs hanging down heavily to her belly-button. Despite their size, they looked perfect. They were round and perky, sagging just enough to form into two immaculate teardrops. Her nipples were huge; each one around two inches in both length and thickness with areolas that were over five inches wide.\n\nShe squeezed her breasts and quickly discovered how good it felt to be milked. Curious, she lifted her right breast to her mouth and suckled on her own nipple, nibbling on it as milk flooded into her mouth. It was thick, creamy, and delicious, and she couldn't help but want more. Only a few seconds of this was enough to send her into orgasm, and she felt her legs give out. She collapsed to her knees, letting her breast fall from her mouth with a long, pleasured moan. Her milk flow surged, with two large streams arcing from her nipples while dozens of tiny streamers sprayed from her areolas in every direction.\n\nAs her orgasm faded, her flow reduced back to a slow, continuous leak. Her breathing was ragged as she returned to awareness.\n\nIf she could just forget about everything else, then she would just want to keep getting bigger and bigger, but she couldn't get what Hannah said out of her head. \"Gross\". No one but a nympho like Emily could think that boobs this big were sexy. That look on Jacob's face...she didn't know what caused it, but it couldn't have been anything good. Did he think her boobs were gross, too?\n\nShe lifted herself up, careful not to slip in her milk. Her breasts were so heavy that they were starting to mess up her balance. She pulled a towel out of the bathroom closet and draped it over them so that more of her milk wouldn't drip onto the floor.\n\nShe took some dildos out of her parents' room and brought them back into the bathroom, dropping them into their large whirlpool tub. She delicately stepped into it and laid down, pulling the towel from her breasts and letting her milk flow freely. She grabbed a dildo and brought it to her pussy, gasping in pleasure as it entered her. She squeezed a hand around her nipple, pretending it was Jacob suckling at her teat.\n\nAs much as she hated herself for it, there was only one thing that could distract her from her depressed thoughts, and she could really use a distraction right now.\n\n* * *\n\nAfter the third orgasm, Jacob had figured that he wouldn't be able to calm down any time soon, so he left school early. After spending two hours locked in his bathroom, cumming who knows how many times, he was finally soft.\n\nHe opened a window after wiping himself off. The smell of cum permeated the room, and he desperately hoped it would air out before his parents got home.\n\nNow that he wasn't consumed with lust, he could recognize how strange everything had been from the moment that Emily had walked into the classroom. His mind had been so addled that he never even questioned how she'd grown so much. Now, though, he realized how utterly bizarre it all was.\n\nHe had a few theories about what was going on, but that could wait. Right now he needed to apologize to Emily for being such a sleaze.\n\nHe picked up his phone and tried to call her, sighing as he only got her voicemail. Hanging up, he instead tried sending her a text.\n\nHey Emily. I'm really, really sorry about how I acted today. Are you alright?\n\nIt was a shitty apology, he knew, but he just couldn't bring himself to go into detail over how much of a jerk he had been. He hit send, hoping she would get back to him.\n\nHe entered his room and locked the door before falling onto his bed. Looking down, he admired his new size. It looked big even while flaccid. He had measured himself the moment he got home, and at full erection he was sporting a hefty seven and a half inches, with two inch wide balls that apparently supplied an ungodly amount of sperm.\n\nIt seemed whatever was affecting Emily was affecting him as well, though only in one aspect. He couldn't find anything different about himself other than his junk.\n\nDid Emily know why this was happening? Either way, they would have to talk about it. It was definitely going to be awkward as hell, but he couldn't just ignore this. Hopefully he would be prepared for when he saw her tomorrow. He couldn't afford to go crazy like he did today.\n\n* * *\n\nJacob gazed at the empty chair next to him. Emily had never replied to his text, and now she had skipped school. He was starting to get worried. He'd like to think that her parents had taken her to a doctor or something, but he couldn't shake the feeling that that wasn't the case.\n\nThe bell rang, and Jacob absentmindedly left the classroom. As he made his way to his next class, he saw Hannah and her friends standing in the hallway, laughing about something.\n\n\"It was hilarious. The dumb bimbo literally had to carry her boobs just to walk.\"\n\nHer friends laughed as Hannah hunched over and pretended to carry a heavy load against her chest.\n\nJacob approached them and gave Hannah a glare.\n\n\"Seriously, what is your problem?\" he asked.\n\n\"Oh, hey, it's the boyfriend.\" Hannah smirked and glanced at his crotch. \"Aw, am I not doing it for you? Guess you only get off to cows.\"\n\n\"Fuck you.\" He walked away. These idiots weren't worth his time.\n\n\"How eloquent. Could you tell me something?\" Hannah said, voice raised so everyone in the hall could hear her.\n\nJacob took in a calming breath and just kept walking.\n\n\"Were you mad because you knocked her up, or because someone else did?\"\n\nHe stopped, fist clenching as he turned around. The volume of the conversations around them noticeably dimmed. \"What are you talking about?\"\n\n\"That's what you were pissed about yesterday, right? I mean, she's obviously pregnant.\"\n\n\"I'm pretty sure she isn't,\" he replied, already regretting rising to her bait.\n\n\"So how do you explain the milk leaking out of those ugly udders of hers?\"\n\n\"Even if she was pregnant, how is that any of your business?\"\n\nHe could tell that that was the wrong response, going by the way Hannah grinned in triumph.\n\n\"So she is pregnant!\" She turned to her friends. \"Think the kid'll be fucked up from whatever drug she's using to blow herself up?\"\n\n\"Are you a fucking psychopath?\" Jacob asked, seething. Several onlookers stared at Hannah as if they were wondering the same thing.\n\nHannah simply sneered and walked away with her lackeys following behind her.\n\nJacob left in the opposite direction, ignoring the murmur of quiet conversations that began to spread through the hall. He couldn't take it anymore. He needed to know if Emily was alright.\n\nHe exited the school and went to his car while trying one more time to call Emily. She didn't answer, so he started looking up addresses for any nearby Tenner residences. She had told him that she lived in White Springs, one of the ritzier neighborhoods in the area, so he didn't have to look very hard to find an address that fit the bill. \"Michael and Jessica Tenner\" were most likely her parents.\n\nAfter a half hour drive, he made his way into the suburb, admiring how big all the houses were. When his GPS had indicated that he had arrived at his destination, he turned into the driveway of one of the mini-mansions.\n\nHe looked in his rear-view mirror and saw that the red SUV that had been driving behind him for a while turned into the driveway as well. There was a man driving and a woman in the passenger seat. Emily's parents, probably. Well, this was awkward.\n\nThey both parked, and when he exited his car, he was met with two stunning individuals, though one was much more stunning than the other. No wonder Emily was so hot. God, her mom was built.\n\nLuckily he was able to keep his ogling to a minimum. Hopefully they didn't notice, as they already didn't seem to be in a forgiving mood.\n\nThe woman gave him a suspicious look. \"Can we help you?\"\n\nJacob suddenly found his shoes to be utterly fascinating. \"Uh, are you Emily Tenner's parents?\"\n\n\"We are,\" Mr. Tenner said.\n\n\"I'm Jacob Housley; one of her friends from school. Is...Is she doing alright? She didn't come to school today and she won't answer her phone.\"\n\nSome of the tension in their stances eased, though not completely.\n\n\"I'll go look for her,\" Mrs. Tenner said before swiftly making her way to the front door.\n\nMr. Tenner watched her go and turned back toward Jacob with a halfhearted smile. \"Sorry about that. We've been away from home and Emily hasn't been answering our calls since Sunday, so we're a bit worried.\"\n\nJacob furrowed his brow. \"How long have you been gone?\"\n\nThe worry on Mr. Tenner's face deepened. \"We left Friday evening. Why, did something happen?\"\n\n\"Uh, well...\"\n\n* * *\n\nEmily stood in the bathtub, leaning over at a ninety degree angle, letting her watermelon-sized breasts hang freely under her. She kept one hand on the side of the tub while the other milked her breasts, alternating with every squeeze. She wanted to do both at the same time, but at this point her boobs were so heavy that she wouldn't have been able to keep her balance in this position.\n\nShe couldn't believe she didn't think to try this sooner. She had spent hours last night masturbating in the tub, just letting her milk pour down the drain, wasted. After that she had slept in her room, which turned out to have been a horrible idea. Even the heavy towels she had slept on couldn't prevent her milk from soaking into her bed. Since then she had holed herself up in the bathroom, sitting in the large, open shower or lying in the bathtub. It was only half an hour ago that she thought to plug the tub's drain and fill it with her milk. The tub was really big, so it was slow going, but it had already gotten up to her ankles. At this rate, she should be able to bathe in her own breast-milk by the end of the day, which by her estimation was the sexiest thing ever.\n\nOh, she knew reality would come crashing down on her eventually. She could never live a normal life with giant, constantly leaking tits. She couldn't even understand how it was possible. Even when she milked herself as hard as she could, the flow would just never cease. Where was it all coming from? Anyway, she knew that once her parents got home, she'd have to deal with the harsh realities of her situation, but until then she was going to enjoy herself as much as she could.\n\nShe stood up and stretched, deciding to take a break. Even if she'd never run low on supply, her breasts still got a bit sore after such a long milking session. She carefully got out of the tub, being careful about her balance due to the unfamiliarity of her new center of gravity. After successfully extracting herself, she turned around toward the bathroom door and yelped.<br>\n\nHer mother was standing there in the doorway, grinning from ear to ear.\n\n\"Mama! This is, um.\" She tried to cover herself up, but she was so big now that it was an impossibility. After a few seconds fumbling with her tits, she instead turned around, her breasts swinging heavily at the sudden movement.\n\n\"This isn't...I just...\"\n\nShe felt her mother's body press against her back as two strong arms wrapped around her.\n\n\"Oh baby, you're so beautiful!\" Jessica rested her head on Emily's shoulder and chuckled. \"Figures you'd fall for someone the one time we're gone for a week.\"\n\n\"Huh?\"\n\n\"One second, baby. I need to tell your dad that you're okay.\" Jessica broke her embrace and exited the bathroom, leaving behind a thoroughly confused Emily.\n\n* * *\n\nJacob entered the house behind Mr. Tenner. As soon as he stepped over the threshold, he was overwhelmed by Emily's scent. He quickly held his nose. When Mr. Tenner turned to look at him, he put on the same strange smile that he had when Jacob had explained Emily's sudden growth spurt.\n\nMr. Tenner brought them both to the living room and sat in a recliner, inviting Jacob to sit on the couch next to it.\n\n\"So what's your relationship with Emily?\" the man asked.\n\n\"Just friends,\" Jacob replied, perhaps a bit too quickly. \"We're lab partners in biology, and we meet up in the library to do homework and stuff.\"\n\nMr. Tenner smiled. \"That's all?\"\n\nJacob shifted uncomfortably. There was no way he could tell the man that he was in love with his daughter. Talk about awkward. Then again, he didn't seem very upset by the idea. He almost seemed...wistful?\n\nLuckily Mrs. Tenner entered the room, saving Jacob from having to think up an answer.\n\n\"Emily's fine, honey,\" she said to Mr. Tenner. \"Looks like our little late bloomer finally took an interest in someone.\"\n\nShe looked at Jacob, and when their eyes met, she broke into a wide grin.\n\n\"And it seems we've got just the person she needs right now.\"\n\nThe beautiful woman strode up to him and grabbed his arm, pulling him toward the staircase.\n\n\"You're going to tell him, too?\" Mr. Tenner said. \"Shouldn't that be Emily's decision?\"\n\nMrs. Tenner stopped and turned toward her husband, hugging Jacob's arm in a way that didn't seem completely appropriate.\n\n\"I'm sure it'll be fine,\" she replied.\n\nThe man chuckled, rolling his eyes. \"If you say so.\"\n\nMrs. Tenner continued to guide Jacob up the stairs.\n\n\"Um, is it alright if I ask what the heck's going on?\" he asked as they entered an astonishingly large bedroom.\n\nThe strong, beautiful woman hanging off his arm smiled and shushed him. \"You'll find out. I'm going to explain things to Emily, while you stand next to the door.\" Her grin took on a hint of mischievousness. \"Come in when I tell you to.\"\n\n\"Uh, okay.\"\n\n\"By the way,\" she whispered in his ear, making him shiver. \"This,\" she pulled his hand away from his nose, \"isn't going to help much.\"\n\n\"Wha-\"\n\n\"Shh.\" She smiled and pointed at the open door up ahead.\n\nShe pressed a finger to her lips and winked before entering the room, leaving behind a thoroughly confused Jacob.\n\n* * *\n\nEmily tied the belt of the bathrobe around her waist. She was so big now that she couldn't fully wrap it around her chest or hips, but it at least covered up her nipples. She had put on the thong she had taken from her parents' closet yesterday to cover her lower body, but the thing was so minuscule that she wasn't sure if it was more or less embarrassing than just going without.\n\nShe was quite a sight. The robe wrapped completely around her midsection while the top and bottom of her body was bursting out of it. A deep chasm of cleavage ran all the way down to her waist, while two dark stains marked where her nipples were hidden. A tiny piece of triangular fabric just barely covered her slit, the thin material clinging tightly to the contours of her lower lips, with a small bump indicating the location of her swollen clit.\n\n\"I think you're going to find it hard to preserve your modesty with curves like that, baby.\"\n\nEmily turned to her mother, who was smiling warmly at her.\n\nEmily frowned in confusion. \"You're not...bothered by this?\" she asked, gesturing at her massively expanded body.\n\nJessica shrugged. \"What's there to be bothered about?\"\n\n\"I don't know! How about the fact that I grew over a dozen cup sizes in a matter of days?\" she said, voice rising. \"Or how about the fact that my butt's so big that I can't fit into normal chairs? Not to mention all of this!\" She pointed at the shallow pool of milk still sitting in the tub.\n\nShe tried to look down at her feet, but was unable to see past the globes jutting from her chest.",
        "\"I'm a freak,\" she said, her eyes stinging.\n\n\"Oh, baby,\" Jessica said before pulling her into a hug, Emily's breasts pressing heavily against her mother's muscular body. \"You're not a freak. You're a succubus.\"\n\n\"Huh?\" Emily asked, her tears stopping as her nascent breakdown shifted into utter bewilderment.\n\n\"You know what a succubus is, right?\"\n\n\"Like...a sex demon?\"\n\n\"Well, we're not literal demons, but sure!\"\n\nEmily pulled away from her mother, who was smiling as if this was the happiest moment of her life. It was completely ridiculous, but...it made way too much sense.\n\n\"And...that's why I grew so fast? How come I didn't gain any muscle like you?\"\n\n\"Because when a succubus wants to have sex with someone, she takes on the form of that person's deepest fantasy, and your dad is the one with the muscle fetish.\" She smirked. \"You nearly gave him a heart attack when you started bulking up a few years ago.\"\n\nEmily blushed intensely. \"Oh my fucking god.\"\n\nJessica continued as if Emily hadn't said anything. \"Luckily we were able to steer you toward porn before it became too much of a problem. You can only transform if the person you're sexually interested in is physically close to you, so it was a safe outlet for your desires.\" She brought her hand to her chin. \"It might've worked a little too well, actually, considering how long it took you to find someone.\"\n\nAfter Emily was done agonizing over her embarrassment, she finally understood the implications of what her mother had just said. If her body had shifted into the deepest fantasy of the person she's attracted to, then that meant...\n\n\"This is...Jacob's fantasy?\" she asked, once again looking at herself in the mirror.\n\n\"He sure likes his girls big, doesn't he?\" She chuckled. \"Can't say I blame him. You're gorgeous, baby, and you're boobs are still growing!\"\n\nEmily shivered, a jolt spiking in her core as she felt wetness between her thighs.\n\n\"How...how big am I gonna get?\" she asked, trying and failing to hide her arousal.\n\nJessica smiled. \"Why don't we ask Jacob?\" she said, turning to the doorway.\n\n* * *\n\nHe couldn't do it.\n\n\"I said, why don't we ask Jacob?\"\n\nHe couldn't go in there. He could taste Emily's essence in the air. There was no way for him to hide his erection, and he had no chance of calming himself down until he was away from her. It took all of his concentration just to keep himself from cumming in his pants.\n\n\"Oh, come out here, you big baby.\"\n\nBefore he knew what was happening, he was gripped by the arm and pulled bodily into the bathroom.\n\n\"Jacob?!\" Emily yelped.\n\nLuckily he managed to close his eyes before catching a glimpse of her. The taste had become stronger, and he could feel his arousal increasing. He didn't know what he would do if he saw her now, and he didn't want to risk anything.\n\nAfter a couple failed efforts, he managed to croak out weak \"Hey.\"\n\n\"...Are you okay?\" she asked.\n\n\"I...\" His cock twitched involuntarily, and he turned away in embarrassment. There was no way she didn't see that.\n\n\"He's like that,\" Mrs. Tenner said in a lecturing tone, \"because your sexual fluids give off a strong pheromone that specifically targets your partner.\"\n\n\"What?!\"\n\n\"They also act as an extremely potent aphrodisiac when ingested, with the added affect of increasing your partner's sexual stamina, virility,\" she paused, smirking, \"and endowment.\"\n\nWell, that explained quite a few things.\n\nHe heard Emily's breathing quicken. \"B-by endowment, you mean...\"\n\n\"It makes his cock and balls grow.\"\n\n\"Oh!\" Emily moaned.\n\nIt was too much. After hearing that breathtaking sound, Jacob's eyes opened against his will, and he was left reeling at the sight in front of him.\n\nShe was a goddess. Her breasts were massive, perfectly shaped teardrops that jiggled hypnotically with her every movement. They were just as wide as her expansive hips, obscuring her entire torso, including her upper arms. Two dark stains covered the front of the bathrobe that she was wearing, and he could clearly see the protrusion of her nipples. She was huge...but if she was growing to match his deepest fantasy, then-\n\nI'm a freak.\n\n\"I'm sorry.\" He turned away, quietly noting with shame that he hadn't even looked at her face. \"It's my fault you're like this. I should leave before it gets any worse.\"\n\n\"No! Please don't go!\" Emily said, grabbing his hand. She emitted a small, pleasured gasp when her hand met his, and it was all he could do to keep himself from turning around and...and...\n\n\"It's not just that, Emily!\" His breathing quickened. \"I want...I want to-\"\n\n\"What do you want to do, Jacob?\" Mrs. Tenner asked, not unkindly.\n\nThis was it. Maybe this would scare her off of him, like he deserved. He turned back to the angel holding his hand and made sure to look her square in the eyes.\n\n\"I want to fuck you, Emily! I want to fuck you so hard you can't even think straight! I want to...I want to make your boobs so big that you can barely hold them up! I-mmf?!\"\n\nBefore he could finish, he suddenly found her tongue in his mouth and the incredible softness of her body pressing against his in a tight embrace. All thoughts of letting her go evaporated from his mind as he tasted the sweetness of her tongue. Her kiss was frantic, and he couldn't help but reciprocate, letting his own tongue dart around hers as he marveled at the softness of her thick, luscious lips.\n\nHe brought his arms around her and held her even more tightly to his chest, and he could feel her milk surge as her breasts squeezed against him. They had escaped from the confines of the bathrobe, and he could feel her nipples poking him as they soaked the front of his shirt.\n\nHis hands traveled down her back until they were at her ass. He lifted what little of the bathrobe that actually covered her massive backside and roughly groped her. His hands sunk deeply into the soft flesh of her cheeks, their curves much too big to fit fully in his grip. He could feel them jiggle around his fingers with each desperate squeeze.\n\nKeeping his mouth to hers, he gently pushed her down onto the floor. He untied the belt from her bathrobe and pulled it fully open, letting him see her in all her glory. Her thong was still covering her pussy, so he ripped it off, snapping the strings easily. He pressed a finger to her lower lips while his thumb teased her clit. The nub was as big as a cherry, and it was obviously very sensitive. Emily writhed on the floor, her enormous breasts swaying as milk sprayed in every direction. After a couple of seconds her body tensed in orgasm. She laid there twitching for a full minute before relaxing.\n\nWhile Emily's breathing slowed, he brought the hand he was pleasuring her with to his mouth, once again savoring the sweet taste of her juices. He swallowed and felt a familiar tingle in his crotch. He pulled down his pants and watched in awe as his member slowly grew with each passing second while his balls ballooned at an even faster pace. When the tingling finally ceased, his cock was around nine inches long, while his testicles were the size of tennis balls.\n\n\"Jacob.\"\n\nHe looked down to find Emily staring up at him. She was squeezing her breasts, sending arcs of milk into the air.\n\n\"I need your cock, Jacob.\" Her right hand abandoned her tit and snaked its way down to her pussy, her fingers spreading herself open in invitation. \"Please.\"\n\nHe quickly took off his shirt and got on his knees, pressing the head of his cock to Emily's dripping sex.\n\n\"I'll just -- Mmm! -- let you two have your alone time.\"\n\nBoth Jacob and Emily turned their heads to see Jessica Tenner calmly leaning against the wall. The muscled woman casually pulled her hand from under her skirt and left the bathroom -- winking at them before closing the door.\n\n\"I need your cock, Michael! Please!\" they heard her laugh from behind the door.\n\n* * *\n\nEmily blushed at her mother's interruption, and she saw that Jacob was doing the same. They had been so caught up in each other that they forgot she was even there.\n\n\"My family's crazy, isn't it?\" she asked.\n\nJacob gulped, lifting his cock and letting it slide onto Emily's belly. It twitched, and she could feel a bit of precum ooze onto her.\n\n\"Yeah, but I'm not complaining,\" he replied. He was visibly trying to calm himself down, but it didn't look like it was working.\n\nHe moved his hand over her left breast, his palm hovering over her nipple. Smiling at him, she hefted her breast upward, pressing it into his hand. She let out a soft moan as he gripped tightly, milk spurting between his fingers.\n\n\"Is this really okay?\" He asked, panting. \"I was being serious when I said how big you were going to get.\"\n\n\"And I want it!\" Emily said. \"I want to grow for you! I can feel it. My breasts getting bigger and bigger -- heavier and heavier with milk. It feels amazing!\"\n\nShe squeezed her right breast, noticing that she could now only barely reach her nipple.\n\n\"It's starting to get harder to milk myself, though.\" She smiled at him. \"That'll have to be your job from now on. Milking me.\"\n\nShe stopped squeezing and lifted her other breast toward him. He grabbed onto it and squeezed both her nipples at the same time, making her sigh in pleasure. She reached both arms under her breasts and fondled his cock. He let out a loud groan, and whatever he was doing to hold himself back failed completely. He lunged at her breast, his mouth latching onto her nipple. She felt a tight pull on her teat, and her milk began to flow more than ever.\n\nAs he suckled her breast, she felt his cock pulse in her hands. It wasn't just her juices that made him grow! His manhood was lengthening by a few millimeters with each swallow of milk.\n\n\"Stop!\" she said, gently pushing him away from her breast.\n\nHe blinked. \"Shit! I'm sorry! It tasted so good, and you're so fucking sexy, and I just-\"\n\nShe pulled him into a short kiss.\n\n\"It's okay,\" she whispered as their lips parted. \"I just want you inside me while I'm being milked.\" She firmly stroked his cock. \"I'm not the only one getting bigger today, after all.\"\n\nHe smiled and spread open her thighs. Once again, he pressed the head of his cock to her entrance. She closed her eyes as he entered her, savoring the sensations of a real penis. She couldn't believe how much better it felt compared to her toys.\n\nWhen Jacob's pelvis met hers, he had gone completely still, save for the repeated twitching of his dick inside of her. Opening her eyes, Emily began giggling at the look of pure concentration on Jacob's face.\n\n\"Fuck!\" he said, his lips curling upwards into a strained smile. \"Stop laughing. I'm gonna-\"\n\nHe gave a low grunt as his body tensed, but before Emily could fully appreciate his O face, her own orgasm exploded into existence, taking her completely by surprise. Letting out a short, pleasured squeal, she felt her pussy tighten around his cock just before his cum exploded into her. She felt an intense, pleasurable warmth in her breasts, and for a split second they visibly expanded outward, jiggling at the force of the growth. Her pussy loosened and constricted in perfect sync with Jacob's spasms, and with each load of cum her breasts expanded just a tiny bit more.\n\nHer orgasm faded just after Jacob's, her insides squeezing him one last time for any leftover cum. She looked up and saw him staring at nothing.\n\n\"Holy shit,\" he panted. \"Succubi are amazing.\"\n\n\"I know right?! I'm even bigger now!\"\n\n\"That's not what I was...oh.\"\n\nHe looked down at her, wide-eyed, and ran his hands over her breasts, teasing her leaking nipples.\n\n\"You didn't notice?\" Emily asked. \"Your cum was making them grow.\"\n\nShe felt Jacob's still-erect cock twitch inside her.\n\n\"I was a bit distracted,\" he said, blushing.\n\n\"Well pay attention next time! But now it's your turn to get bigger. Let's switch!\"\n\n* * *\n\n\"Whoa!\"\n\nJacob braced himself as he tumbled onto his back and Emily's full -- and at this point, rather substantial -- weight fell on top of him. While he checked for any signs of a concussion, Emily sat up into a cowgirl position. Even sitting up straight, her boobs were big enough to rest comfortably over his chest.\n\nShe leaned down slightly, pushing her breasts closer to his face until they completely filled his vision. Pushing one breast to the side, she teased his lips with a thick, dripping nipple.\n\n\"Open wide.\"\n\nEager to comply, he opened his mouth and began to suck on her nipple. With every mouthful of creamy nectar he gulped down, he felt his nethers tingle and slowly inch further into Emily's body. She was slowly getting tighter and tighter as her milk increased his girth, and he had to spread his legs to accommodate his rapidly growing balls.\n\nEmily pulled away her left breast and replaced it with her right. Realizing that she'd feel better if neither of her breasts were being neglected, he grabbed the tit he had previously been nursing and milked it with his hand. Emily groaned and began to bounce on his cock, making her tits jiggle wildly on top of him while her plush ass continually slapped on his thighs.\n\nJacob somehow held out for several minutes, even as Emily's pace quickened and her moans grew louder. He couldn't believe how high she was getting with each bounce without his cock slipping out of her. By this point his legs were completely spread, and he felt his balls resting on the ground beneath him.\n\nAs he swallowed another mouthful of her milk, Emily fell down on his cock one final time and breathed out a long, high-pitched moan. Her pussy tightened hard on his cock, and he felt that impossible suction that had blown his mind the first time he came inside of her. He tried to hold on a little longer, but apparently Emily's body took offense to that and milked him even harder.\n\nHe bucked his hips, and the moment he shot his first load into her, Emily screamed in euphoria.\n\nHe felt the weight on his head suddenly increase as the nipple in his mouth gushed with so much milk that he couldn't possibly swallow it all, but even that wasn't enough to distract from what Emily was doing to his cock.\n\nHer insides were shivering so hard that it almost felt like they were vibrating! That, added with the intense contractions and suction, served to make him cum even harder. Each wave of pleasure seemed to last for a lifetime, crescendoing into a torrent of cum that Emily's body quickly absorbed. Her breasts expanded in bursts, as if they were massive water balloons and each load of cum was like a short blast of water from a faucet, jiggling wildly with every surge of growth. He was eventually completely buried under them, and all he could see was the undersides of her expanding tits.\n\nHe had no idea how long this went on for, and by the time their orgasms finally ended, Jacob was seeing stars. When he finally recovered -- and separated the two enormous breasts that were on top of him -- he was met with a blissed-out Emily. She had gone completely limp, her eyes unfocused and her body twitching at random intervals while she repeatedly let out soft, broken mewling noises.\n\n\"Emily?\" he asked, waving his hand in front of her face. \"You okay?\"\n\nShe mumbled incoherently.\n\n\"Huh?\"\n\nShe was slowly coming back, though she still looked a bit pleasure-drunk. \"I think...I just had two orgasms at once,\" she said dazedly.\n\n\"Somehow, I can believe that.\"\n\nThey stayed like that for a few moments, catching their breath.\n\n\"Think you can stand up?\" Jacob asked, somewhat recovered.\n\nEmily smiled. \"I think so.\"\n\nJacob moaned as he felt her lift off of his cock. His face became buried in her chest as she leaned over him, and after a surprisingly long moment of stimulation, his member slipped out of her. He felt his cock become enveloped in her cleavage as she dragged her breasts down his body, and as her soft skin slid down his thighs, his attention was immediately focused on the thing that was emerging from between her cleavage.\n\n\"Uh...Emily?\"\n\n\"Yeah?\"\n\n\"How the hell did this thing fit inside you?\"\n\nJacob heard her gasp, though didn't see what kind of face she was making due to the massive, pulsing rod that was dominating his view. At this size, he wasn't even sure if 'hung like a horse' was a strong enough comparison. His cock looked to be over a foot and a half long! At its widest point, he could just barely wrap one hand around half of his shaft. His hands traveled downward and rested on his melon-sized balls. He could only imagine how difficult it was going to be to walk with those things swinging between his legs.\n\nHe looked up to find Emily staring at him -- or at least a certain part of him -- in awe, and he couldn't help but do the same to her.\n\nEmily's breasts were now his ideal size. Sitting as she was, they were big enough to rest fully onto the floor, each one the size of a large beach ball. Her plump areolas were the size of dinner plates, topped off with nipples as large as his fist. They were leaking heavily, and the sound of milk splashing on the floor dominated the relative silence of the bathroom.\n\nJacob turned toward the door and saw that the puddle of milk was already soaking into the carpet in the next room. \"We should, uh, probably do something about your milk before we start flooding the house.\"\n\n\"What?\" Emily followed his gaze. \"Oh shit!\"\n\nEmily tried to quickly get up, presumably to get some towels to clean up their mess, but her breasts weren't even a foot off the ground before she pitched forward and fell on top of him.\n\n\"Oof!\"\n\nHe gasped, feeling Emily's face press against the underside of his shaft. He could feel her warm breaths quickening as she laid there, and after a few still moments, he felt her tongue slide over his skin.\n\n\"S-seriously, though, let's get you into the tub for now, at least.\"\n\nEmily jolted out of her trance. \"R-right!\"\n\nShe was a bit more careful this time, slowly lifting herself off the floor. When she stood at full height, her breasts hung all the way down to her knees.\n\n\"This -- huff -- is gonna take some getting used to.\"\n\nShe said it with a smile, but Jacob couldn't help but feel a pang of guilt at what his desires had done to her. Even disregarding the balance issue, she surely wouldn't be able to lift those things for an extended period of time. Honestly, he was surprised that she could stand up at all.\n\n\"Let me help you.\" Jacob stood, his cock bouncing up and down against his chest. He had to pull his massive balls out from between his legs -- he'd rather not have to waddle.\n\n\"Well, at least in some ways we're in the same boat,\" he said, walking up to her with his thighs pressed together. He blushed as his cock pushed into her cleavage. \"There's no way I'm ever going to be able to hide this amount of equipment.\"\n\n\"Fair point,\" she giggled, looking down at the pink dome poking out from the top off her breasts.\n\nJacob bent down and grabbed the bottom of Emily's breasts, lifting them up as best he could. They awkwardly shimmied toward the huge, circular tub and carefully stepped into it. Needless to say, there was a fair amount of jiggling involved.\n\nJacob lowered Emily's breasts and stepped back; milk sloshing around his feet.\n\n\"Were you...trying to fill the tub earlier?\"\n\n\"Yep!\" A teasing smile graced her face. \"Time to get back to it. Lay down.\"\n\nHe silently complied, lying down in the spacious tub with his back propped against the sloped wall. Emily turned around, giving him a phenomenal view of her backside. After being so enamored with her breasts, he had almost forgotten how breathtaking her enlarged ass and thighs were as well.",
        "He wouldn't be forgetting anytime soon, though, since she lowered herself into his lap, pressing her soft cheeks into his pelvis. A cornucopia of pleasurable sensations surrounded his penis as it slid between her thighs, up against her stomach, and finally into her cleavage. The tub was only barely wide enough to contain her massive breasts.\n\n\"Milk me.\"\n\nJacob spread his arms wide and hugged her tits from behind, happy to oblige.\n\n* * *\n\nEmily sighed happily as Jacob milked her. He had fallen into a soothing rhythm, firmly squeezing her breasts together for several seconds at a time before letting off for a brief moment and squeezing again. Unfortunately, her size prevented him from reaching her nipples in their current position, but this method was nice nonetheless. She maneuvered her arms underneath her breasts and grabbed his cock, giggling as she felt him twitch underneath her. The base of his shaft was pressed tightly against her pussy, and his balls were no doubt drenched in both her milk and her fluids.\n\nShe looked down and frowned. The head of his cock poked out of her cleavage, but it was too low to comfortably bring to her mouth. Deciding on the obvious solution, she rubbed at her slit in order to thoroughly lubricate her fingers -- only lingering on her big, sensitive clit for a few pleasurable seconds. She leaned her head back on Jacob's shoulder, and met his eyes. He was looking down at her with that wonderful look of...love, awe?...that she had quickly grown to adore. Satisfied with the wetness of her hand, she pulled it from underneath her breasts and held it in front of his mouth.\n\nHis cock twitched as he let out a little laugh. \"In for a penny, huh?\"\n\nHe tilted his head forward, letting her fingers enter his mouth. He moaned the moment her wetness met his tongue, and the pressure he was exerting on her breasts increased dramatically. He quickly began rolling his tongue all over her fingers, trying to lick up every drop of her wetness that he could get. His cock surged in size, becoming longer and thicker with each passing second, while his balls expanded underneath her thighs. It seemed that whatever succubus magic that resided in her bodily fluids was a lot more concentrated in her pussy than in her breasts, as it only took a few moments for him to grow several inches in length, easily enough to reach her mouth. She removed her hand before he could grow too far.\n\n\"Oh god. Emily.\"\n\nHe had gone glassy-eyed -- a look of desperate need plain on his face.\n\n\"Keep milking me.\"<br>\n\nShe grabbed his throbbing cock right below the head, while the arm that remained under her breasts hugged his shaft closer to her body. She turned away from him and brushed her lips against the tip.\n\n\"I'll take care of you.\"\n\nShe began pumping his shaft and brought her mouth to his cock. His head was nearly twice as big as her fist, so she could only mouth and lick at it, but judging by his grunts and the way he was bucking his hips, that was just fine with him.\n\nHer tongue swirled around the head of his cock. Precum was continually drooling from the tip, and licking it up sent small jolts through her insides. She stimulated her swollen clit by grinding her pussy on the base of his cock. Jacob dutifully kept milking her, and it wasn't long before she felt a second source of wetness reach her crotch.\n\n\"Emily!\"\n\nIt was clear what Jacob's strained voice was trying to convey, so she latched her mouth onto his penis as best she could as his body tensed up beneath her. His orgasm built and built for few seconds, and she used her entire body to tightly squeeze his cock in order to enhance it even further.\n\nJacob shook, and a massive jet of cum shot straight down her throat. The moment she tasted it, her own orgasm rocked through her. Her milk surged from her breasts at such a force that she could feel it splashing back onto her tits after hitting the opposite wall of the tub.\n\nHuge amounts of cum poured from between her lips, as she couldn't possibly hope to swallow it all down. Not for lack of trying, though. Jacob's cum was easily the most delicious thing she'd ever tasted, and she greedily gulped down as much of it as she could. With each powerful jet of cum, her orgasm peaked.\n\nAfter what felt like several minutes, the intensity of their orgasms faded until they were both left panting.\n\nEmily scooped up the some of the excess cum that had splattered onto her face and tits and licked it up with relish.\n\n\"So good.\"\n\nJacob chuckled. \"Glad you enjoy it.\" He cupped her cheek, turning her head to the side before leaning in for a kiss.\n\n\"Wow. That is good. Not as good as your milk, though.\"\n\nEmily smiled. The level of milk had risen by several inches just from her orgasm. Three or four more of those, and the tub would be filled completely. She returned to licking his cock.\n\n\"You are insatiable,\" Jacob said.\n\n\"Your job is to milk me, not complain,\" she said in mock offense.\n\nHe snorted. \"Yes, ma'am.\"\n\n* * *\n\nJacob sighed in contentment. Here he was, with the girl of his dreams lying on top of him, both of them literally bathing in her breast-milk. It was truly unreal, and even now he could barely believe it.\n\nAfter making Emily cum a few more times and filling the tub, he was finally able to calm down a bit, his massive cock softening slightly in Emily's grip. She still held it close, embracing it in the same way he embraced her, occasionally kissing the tip. To anyone else, they surely made for an absurd sight, but to him there had never been a more romantic moment in existence.\n\nThe bathroom door swung open. \"You doing alright in here, baby?\"\n\nSo much for that.\n\n\"Mama?!\" Emily made some sort of movement as if to cover herself, but how she expected to pull that off he had no idea.\n\nJacob turned to the sudden intruder, and-\n\nUh.\n\nWow.\n\nIt seemed he and Emily's dad shared some similarities in the area of favoring extremes. Since the last time he saw her, Jessica Tenner had gone from built, to stacked. Personally, he wasn't really into that, but he was sure that she was a walking wet dream to muscle fetishists everywhere, especially considering she was wearing nothing but a thong.\n\nEmily was wide-eyed. \"What the hell happened to you?\"\n\nJessica smiled, deliberately eyeing Emily's giant tits. \"Same thing as you. This is just how I get when your dad and I let loose.\" She struck a pose, her muscles bulging as they flexed. \"What do you think?\"\n\n\"It's definitely impressive,\" Jacob said, since Emily seemed to have been struck speechless.\n\nJessica smirked. \"That's right. You like your girls soft, don't you?\"\n\nShe closed her eyes, and suddenly her body began to change. Her muscles receded, losing their definition as her body smoothed out into gentle curves. Her ass and hips bulged outward, gaining a layer of softness that they previously lacked. Her breasts, which had already been as big as her head, exploded outward, growing so fast that it was mind-boggling. In no time at all, her body matched the same proportions as Emily's, and two streams of breast-milk began dribbling from her massive nipples.\n\nShe winked at him. \"This better?\"\n\nIt was. Holy shit.\n\n\"Wait. I can shape-shift however I want?\" Emily asked, some of her embarrassment giving way to excitement.\n\n\"Oh, no. It still has to be based on the desires of someone you want to have sex with.\"\n\nUm.\n\nJessica eyed him up and jiggled her breasts. \"Ever heard the term 'oyakadon', Jacob?\"\n\nUm!\n\n\"Oh my god.\" The embarrassment came back in full force as Emily buried her face into her palms.\n\n\"Anyway,\" Jessica continued as if none of this was remotely out of the ordinary, \"as long as you have a reliable source of cum, you can control your powers if you know how. It'll take a few days to teach you, but it isn't too hard.\"\n\nJessica's body changed again, her breasts rapidly shrinking until she was around the size she was when Jacob had first met her.\n\nJacob sighed in relief. It seemed his desires wouldn't be a burden on Emily after all.\n\n\"Does that mean she can reverse my growth, too?\" he asked. It would explain why he hadn't noticed anything unusual about Mr. Tenner earlier.\n\nEmily gasped. \"Why would you want to do that?\"\n\n\"I can do that right now, if you want,\" Jessica said, her voice lowering seductively as her hand went between her legs. \"But that means getting a taste of-\"\n\n\"No!\" Emily pouted, hugging his penis protectively. \"If anyone's going to do it, then it's gonna be me!\"\n\nJessica shrugged. \"Well, looks like you're gonna be stuck with a giant cock while I teach Emily how to control her powers. You okay with that?\"\n\nJacob smiled at Emily, who looked like a child whose favorite toy was about to be taken away.\n\n\"Sounds good to me.\"\n\n* * *\n\nEmily walked through the halls, enjoying the stares she was receiving from everyone around her. It was amazing how much a boost in confidence improved her school life. Even the harsh looks from Hannah couldn't bring her down, though it probably helped that Hannah's reputation had taken a nose dive after her last confrontation with Jacob.\n\nShe entered the library and spotted Jacob sitting in his usual spot. The moment she saw him, she lost control of herself. Today was her first day back to school, and this had been the longest time they'd been away from each other since learning of her powers. Her L cup bra stretched as it tried desperately to contain her swelling breasts, and she felt a bit of wetness on her nipples.\n\nTaking a deep, calming breath, she managed to halt her growth. She still had trouble shrinking back down while Jacob was near, so she'd just have to endure the tightness of her bra until she could get a moment to herself.\n\nShe saw Jacob gaze at her as she made her way to their table. She must've accidentally released her pheromones, judging by the dazed look on his face.\n\n\"Sorry,\" she said as she sat down next to him. \"I lost control for a second.\"\n\nJacob blinked before shaking his head.\n\n\"I know how you feel.\" He leaned over and draped his arm over her shoulders, pulling her in for a kiss.\n\nTheir lips parted, and Jacob smiled. \"I can't help myself. You're just too sexy.\"\n\nEmily's bra snapped, and she knew that they wouldn't be getting their schoolwork done anytime soon. "
    ],
    "authorname": "DocAutomata",
    "tags": [
        "big tits",
        "big ass",
        "big cock",
        "lactation",
        "milk",
        "breastfeeding",
        "breast expansion",
        "ass expansion",
        "penis expansion",
        "transformation"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/his-dream-girl"
}
{
    "title": "Anal Summer Ch. 08",
    "pages": [
        "This story is a work of fiction even though parts of it were inspired by real-life incidents. Any similarity to real people, living or dead, is coincidental. All the characters are 18 years of age or older. Do not read this story if it is illegal to read about explicit sex where you live.\n\nEdited by H.S.\n\n*****\n\nAs I entered the walk-in refrigerator in the basement of The Bistro, I was surprised to find Gemma there, and doubly surprised to see that she was topless. She looked amazing! Her ample breasts were dense and perky. The cold air made her brown nipples stand at attention, wrinkled and hardened to their sharpest, pointiest state. Her fit body was taut and her abdomen was flat and defined like that of the athlete she was.\n\nGemma was not startled at all when I walked in. She seemed to just look up and regard me as she normally would. I made no effort to leave or apologize for intruding on her, and I made no move to exit. I stood there and feasted on her. The vision of her: beautiful, exposed. Gemma started to pinch one of her erect areoles and stick out her tongue in a seductive way.\n\nShe slid her other hand up and down over her lower abdomen, then downward to the crotch of her black spandex pants. Gemna's black leggings were super tight and looked as though they were sprayed on her with an airbrush. The sheen of the material enhanced the features of her fit, swank body.\n\nGemma began to rub her pussy through her leggings the same way she had done the time I secretly watched her deep throating Big D's massive prick. As she stroked herself, I could see her middle finger separating the triangular mound of flesh that was her vagina through her spandex. When she started to get really into it, Gemma pulled her hand away away from her cooch and began to squeeze and caress her other breast. There she was, just groping and fondling her youthfully firm c-cup tits with both hands.\n\nI stood there joyfully befuddled by the display of beauty and sex. Gemma's masturbation through her tightly fitting pants had cause a frontal wedge that was enticing. It left something to the imagination and that somehow made it more erotic. She continued to meet my gaze and slowly ran her hands down from her bosom down her side and rib cage, caressing her ribs, then hips, clearly enjoying the the sensations she was treating herself to.\n\nFinally when her hands reached her hips she rubbed her hips and started to shimmy out of her shiny black spandex. I held my breath, frozen and suspended, in the heart-stopping thrill of the moment. Her clear, dewy smooth skin upholstered her perfect body frame. When her clothes were completely off, I could not keep my eyes away from her smooth, bald cunt. She was completely waxed, shaved, and as hairless as a porn star. I don't know if it was the cold of the walk-in or her youthful, athletic lifestyle but her vulva seemed taut and tense, the triangle of her pubic area and labia with a straight, rigid slit with just the hint of thin pink pussy lips ever so slightly flared open. \"So tell me, Larry, do you like what you see?\" she said in a sexy tone that I had never heard from her before.\n\n\"Yes, but are you sure we should be doing this?\" I nervously answered.\n\nGemma stood there, seeming to ignore my concern. She reached behind her and balanced herself on stacked boxes of various vegetables. She parted her lovely trim legs and slightly squatted, then slowly and sensually reached down and spread her cunt open. Slow movement, as though putting on a demonstration, she opened her flower with her left hand and then eased the index and middle finger of her right hand to pull up her clitoral hood to stimulate her clit and slide her fingers inside her steaming sex. Her pussy was clean and fresh looking and almost all the same skin tone. Only deeper inside the minor labia did the color of her sex deviate to a light pinkish hue.\n\n\"Would you like to come over here and taste this?\" she taunted, already knowing the answer, while gesturing to her open, ready twat. Now, full on fingering her joy road as she massaged the outer and inner labia she held open with the forked fingers of her other hand.\n\nI now hungered to go down on her steaming pussy. Her heart rate and breathing started to increase as her enjoyment arose to a higher gear. \"Say, where are you keeping the cucumbers down here?\" She asked seductively joking and yet serious.\n\n\"Um, I think they're in the second box in on that shelf,\" I answered honestly, too off guard to be clever or even take action. Gemma continued to masturbate, and I made a move to the shelf on the other side of the walk in , because when your boss wants you to fuck her in the pussy with a vegetable... you do it.\n\nI mistook the cucumber inquiry as ligament never having used a toy or object to fuck a woman. I jumped at the new opportunity to try it. In the meantime Gemma, who really wanted me to fuck her with a cucumber mistook my movement for disinterest, so before I got too far away from her, she turned around and bent over halfway, seductively exhibiting her perfect ass to me. I stopped dead in my tracks. \"Alright, then, here you go,\" she said, and then reached back and spread her ass cheeks. Her inner crack and asshole were also the same color, flesh tone. Her anus was a tight, wrinkled circle of flesh almost perfectly symmetrical except for one bulbous knot of anal muscle, unlike Madison's, that was brown in color and slightly oval shaped, or Joanne's asshole, that was like four swollen lobes of purple and pink muscle drawn together in a bunch as if pulled tight by some internal drawstring. I guessed anuses were like fingerprints, all unique and sexy in their own way. Gemma used her palm to spread her crack open and the middle finger of the same hand to gently poke and rub her sphincter. As she rubbed more vigorously she quickly removed her hand and her asscrack clapped closed; this was momentary as Gemma was just moistening her finger tip with saliva from her mouth. Once again she pried her ass open, then replaced her newly moistened finger back to her wrinkled ass lips.\n\n\"What are you doing?\" I asked her.\n\n\"Readying my ass for you.\"\n\n\"Why? Why here? Why now? \"\n\n\"Because it's what you want.\"\n\n\"Huh?\" was my response, embarrassment crept in, I blushed at the hint of her having a clue about my fetish.\n\nGemma was now really poking her rectum and rubbing around the tight ring of flesh, gently pulling her anus open \"You want my ass. You have always wanted it. Me and my ass... you are an ass worshiper, and it's your thing. Take my ass...it's what you want.\"\n\n\"But how did...\"\n\n\"It's no secret. Besides, your girlfriend told me about what you've been doing. Everyone knows.\"\n\n\"What!?\" Embarrassment and angry fear ran through me; my blood ran cold, and I was having trouble breathing...my heart and... guilt ... cheating on Madison ...how could I... I am dirt!! This will really hurt my chances of making her fall for me the way I have for her ...oh, Madison, I'm so sorry.\"\n\nI jolted up into a sitting position. Covered in sweat, breathing heavily, my sex-battered cock hard and a drop of pre cum on the tip. I caught my breath and felt relieved that it was a only a dream. I was seriously fucked up here. I was falling hard for my \"sex only\" partner, but I was having sexual dreams about my friend and boss... that felt weird enough. The weird, inappropriate feeling you get when you become sexually attracted to someone you have known forever, a disgusted incestuous feeling even though I shared Zero DNA with Gemma. The fact was I always liked looking at her sexy body but this felt evil and wrong, but she kept popping into my head whenever things of a sexual nature were happening. I looked over at Madison sleeping so peacefully. She was so beautiful. I felt so guilty for my feelings for her and my subconscious cheating on her. Top it all off, I was now all hot, horny and craving the taste of a woman's pussy. In the dream, Gemma's honey pot had looked so delicious.\n\nI wanted to make up for my evil lust for Gemma, and I wanted to do something nice for Madison . Even with my balls flat and empty from our earlier sexual activities, I still desired sex; not just to fuck with my cock but with my tongue and mouth. I craved the aroma and taste of steaming hot pussy. It was too early to get up, so I slid down under the covers . Madison was sleeping on her back. I slithered between her legs and then took a long, slow lap of the slit of her pussy. It was damp and already seasoned by her honey from our earlier sex session. I inhaled the wonderful smell of wet pussy . As I slowly, methodically lapped her cunt she slowly opened herself, still sleeping, and as she opened up I began to eat her out more aggressively. I licked her up and down. I nibbled her clit and sucked her twat lips. It wasn't long before my face was soaked in sweat and her sweet, womanly juices. With me making deep stabbing strokes in to her sopping vagina, she was now gradually waking up. As she came to she was already halfway to orgasm. She started to moan and coo with pleasure. Soon she was breathing heavily and convulsing in ecstasy . Her honey flowed and became thicker and sweeter as she came all over my face and in my mouth. I ascended out of the sheet and surfaced to the fresh air like a diver-an oyster diver. Her snatch was my oyster and her cum was my pearl.\n\nMadison was lying there collecting herself as I just plopped down on my back, my face covered in her juices. I laid there satisfied as if I had come myself, truly satisfied with just having given head and bringing pleasure to a person that has brought me so many great carnal thrills. When she caught her breath she asked,\"What was that for?\" Meaning, why would I wake up and suck her vagina to orgasm just for the heck of it?\n\n\"I just wanted to make you come...wasn't it nice? I thought it would be nice to wake you up to an orgasm,\" I said, not sure if she was mad that I'd awakened her. Madison answered in an appreciative, honest way. \"No, it was great, unexpected, wonderful. Can't remember the last time someone ate out my pussy with no strings attached.\"\n\nI was relieved. \"I'm glad you enjoyed it.\" I answered. She embraced me and put her head on my chest. I soon dozed off. All the hours at The Bistro in the heat of early summer, all the mornings at the gym and the hours and hours of hot sex sessions with Madison had worn me down. I fell into a deep slumber. Finally, somewhere in the distance from what seemed like another world, I heard, \"Lawrence, Lawrence, Lawrence, dear. Lawrence, it's a beautiful morning. Wake up.\"\n\nWhen Madison gently nudged me and softly called my name over and over to rouse me from the deep coma-like slumber I was in, I finally heard her voice. Her perfume and freshly washed hair tickled my olfactory senses, causing them to awaken. The aroma I had come to adore; a bouquet forever fused in my brain to the feeling of pleasure and happiness. I eventually came around and opened my eyes to Madison's beautiful smile beaming on me. \"Lawrence, I made some coffee. Would you like some?\"\n\nMadison was all dressed and ready for the day. She looked beautiful and classy, her business attire was sophisticated and sharp yet somehow relaxed and free like the early summer season she had dressed for: A black and white checkered skirt suit that was double breasted and looked as if it was made especially for her.\n\n\"Coffee sounds great,\" I groggily replied, trying to sound more awake than I was. I sat up and hugged Madison, in my sleepiness forgetting the boundaries that I had imagined were there.\n\nI didn't want to seem \"clingy\" or overly attached, in fear of scaring her away, but that protocol was lost in my sluggishness.\n\nShe hugged me back briefly and said, \"Come, now, I've prepared some breakfast for us.\"\n\n\"Great, I just want to wash up, I'll be right out.\"\n\n\"Of course. Meet you in the kitchen.\" Madison smiled again and walked out of the room. I grabbed my bag and washed up, brushed my teeth, and then followed the aroma of coffee down the hall to the kitchen area.\n\nI awakened more with every step, and the memory of the weird happenings was also stirring. The event was strange and surreal, and I began to question myself whether or not it actually took place. While Madison and I were engaged in a sexual act, Margot snuck into the room and watched us while she masturbated. Madison and I were having anal sex, Madison was on her knees, blindfolded, receiving me in her rectum doggy style, swimming the deep depths of pleasure completely oblivious to Margot's presence, as was I 'til Margot took it further and started to caress my buttocks and scrotum. Petrified with not knowing what to do and also aroused by the entire thing, I didn't protest, even when Margot penetrated my anus with a finger moistened by the her vaginal juices. The naturally lubed finger and smell of Margot's dripping gash was how I knew she was masturbating as she watched. Still too caught up in shock, fear and pleasure was to out Margot for her behavior I just let it happen. Guilt was beginning to take me, too; I had secretly grown very fond of Madison and didn't want to hurt her. Even if it wasn't my fault, I should have stopped Margot and been true to Madison.\n\n\"Maybe it didn't even happen, or perhaps it was just a dream like the one about Gemma. Yes, a dream, a fantasy; yes, a dream; yes, a dream wrapped in a deep, dark, hidden desire,\" I thought to myself.\n\nAs I approached the kitchen island/breakfast bar, I could see that Madison had put out an entire continental breakfast. I was so happy, because in my culture and upbringing to feed someone is the ultimate form of affection, wishing so hard that she had those same feelings that started to creep up in me. These thoughts only made my guilt worse, if what Margot had done even happened for real. As I mounted the stool of the breakfast bar the dull soreness inside my rectum removed all doubt of what happened being a dream. I was crushed and guilt ridden.\n\nI tried to have a look around to see if Margot was still here, I looked at the sofa where she had been sleeping and it was vacant. There was no sign of her at all, and I was happy about that. Not sure I could handle the awkwardness of it all if Margot was still here. So many scary questions ran wild through my head like angry bees in a hive. Would Margot tell Madison right in front of me, all nonchalant without fear of losing her friendship with Madison? If so, would Madison even be angry since we were technically only \"fuck buddies?\" If Madison did get angry would her anger be at me? Would Madison be angry at just Margot but dismiss me anyway, guilt by association, would I be viewed as an embarrassing moment in her life? After all, Madison was beautiful, wealthy and influential. Would Margot keep our dirty secret between herself and me and use it for blackmail later? Or maybe Margot was just as afraid as I was and wouldn't say a word.\n\nEither way I was happy that Margot had gone home. Perhaps her early morning departure was her wanting to remove herself from it all too.\n\nMadison was sitting next to me saying something about Ernest Plorde. So heavy were my thoughts that I was missing something important that she was saying. Madison was telling me about her friendship with Ernest Plorde and finally mentioning the whole weird relationship with Gemma , Davey, Margot, herself and her brother. Ernest Plorde was a locally famous restaurant critic who happened to be in need of a decent price on a retail space for a kitchen supply store he wanted to open across town.\n\n\"So, if I can help him he promised to give The Bistro an extra half star in his review and a tip on when he will show up there.\"\n\n\"Well, that would be a huge advantage for us. All we would have to do is put out a three star meal, and we would get three and a half out of four. Yet it feels cheap, like were cheating. I would rather earn it,\" I said, more thinking aloud than responding.\n\n\"You are more than capable of earning four stars on your own, but why not get on his good side first? Gemma is nervous. She would feel better with some insurance,\" Madison explained.\n\n\"I appreciate it, but I would rather not. Stars are something you earn, and as far as Gemma is concerned... I'll handle her and her insecurities.\"\n\nMadison smiled and seemed impressed. I smiled back, knowing I had just acted like a man, and not just any man but a man in charge of his professional life. Madison looked at me and bit her lower lip. I knew right there I had earned a point with her. I galvanized her attraction to me just a little. I began to relax and think it was going to be alright when I heard the clack of high heeled shoes down the hall. Margot was indeed still here and was just finishing washing up in the guest bathroom.\n\n\"Good morning!\" Margot beamed as if nothing had happened and she had never left her place on the sofa.\n\n\"Good morning, Margot,\" I replied, my heart sinking.\n\n\"Oh, what a dear he is! Thank you so much for putting up with our girlish behavior last night,\" Margot said, again speaking to Madison and me as she softly brushed the back of her hand on my cheek like an aunt who visits once a year. \"Well well, I must be going. Still have to go home and change,\" she continued, gesturing to her attire that was what she had been wearing the night before. She picked up a coffee mug and quickly quaffed down its contents. As I watched her bony little fingers wrap themselves around the mug's handle, I couldn't help but think how she slid those same fingers up my ass. Anger and distaste for this woman grew within me. She carelessly put my relationship with Madison at risk,and spoke around me and about me as if I wasn't there. Like I couldn't comprehend what she was saying and was myself incapable of speech. Madison walked Margot to the door. They seemed to be speaking in a code, in soft inaudible tones designed for me not to hear. They said goodbye finally, then Madison returned and we finished breakfast.\n\nI was ready to leave and get my day started. I didn't have to go to The Bistro 'til late afternoon. \"So what do you have planned for the day?\" Madison asked.\n\n\"Well, I haven't had a day off from the gym since I can't remember when, at least a month, and I don't feel like going, so i thought I might go down the park and work on my tan.\"\n\n\"Nonsense. You should use the roof deck upstairs.\"\n\n\"Really? That's okay?\"\n\n\"Yes. I have to go to a bunch of closings today and won't be able to hang out with you, but I don't need to be here. You are my guest, and besides, I co-own it, so if you want to sunbathe up there, please do. Just remember that when you leave the condo, the door will lock behind you.\"\n\n\"Thanks. I'll grab my bag and go on up, and you can get to your meetings.\"\n\n\"Oh, and Lawrence, I wanted to remind you that I will be going out to dinner tonight with Robert Thorn, but I can still meet you after you get out of The Bistro.\"\n\nI felt a pang of jealousy, and I tried to hide it. It was not my place to tell her where she could go and whom she could go there with. After all, we were not in a committed relationship. We were just \"fuck buddies,\" but I was falling hard and fast and knew if that showed I could scare her away. Nevertheless, it must have shown on my face, because Madison said, \"Oh, cheer up. It's nothing, just dinner. Most of it is business, and I want to defuse this petty competition he has with my brother. ...I will even meet you after.\"\n\n\"It's fine. I'm not upset,\" I lied \"Besides, I have no right to tell you who, what, or where to go, or be with,\" I said, lying again.\n\nMadison either saw right through it or was just being thoughtful. She stepped to me, stared at me with her spell casting eyes and said, \"He buys me dinner, but you give me the dessert.\" She bit her bottom lip and added, \"By that, I mean your cock and the delicious cream it makes.\" She gently groped my cock and balls. \"I'm addicted to it,\" she continued.",
        "I used the bathroom to change into shorts. I wanted to kiss her goodbye but didn't think I should, so I just said goodbye and thanked her as she headed down the stairs while I went up to the roof.\n\nAs I reached the top of the top flight of stairs, I could feel the heat of the summer cooking the roof stair housing. I pushed the door open to find that I was not alone. The sight that awaited me was that of Kate on a lounge chair. She was on her knees bending over, her beautiful ass facing me as if ready to be fucked from behind by some invisible cock . She wore a tiny red thong bikini. The thong string was not wide enough to cover the circumference of her sphincter, its perfect roundness overlapping on both sides of the thong. Straight wrinkle lines like a star emanating from the center of her butt hole were clearly visible as her butt cheeks yawned open because of her body position. The magic triangle of red bathing suit material covered her womanhood but revealed her loose pleasure trench, as her camel toe was apparent. Kate was reaching for her radio and using the tuning knob to fine tune a station she was listening to, completely unaware of my presence. I was enjoying the view to say the least but I didn't want to startle her. After a bit, I finally said, \"Good morning, Kate.\"\n\nKate looked over her shoulder at me with an open-mouthed expression of unexpectedness.\n\n\"Oh, hi,\" she stammered as she realized the show she was giving me. I loved having her at the disadvantage. After her teasing me in the hall and her overall intimidating beauty and persona, it was nice to catch her like this with her nether region gaping at me. I also held a revenge card, as she knew that I must have heard Roger's embarrassing performance, or lack thereof.\n\nKate's posterior was not the only breathtaking scenery. The view of the old neighborhood on one side and the harbor and open ocean beyond it was another. The deck was large and covered most of the roof. It was well maintained and would be an awesome locale for a party. The sun shined down on the beautiful cloudless June morning.\n\nKate quickly turned around and into a less compromising position. \"Uh, good morning. You surprised me there.\"\n\n\"Sorry.\" I walked over and then sat down on the lounge chair next to Kate's. She was clearly embarrassed not only by the view that she gave me but of her behavior and shortsightedness in taunting me yesterday. \"Please accept my apologies and please, please, please don't gloat, though you have every right to. I'm sorry that I ribbed you yesterday. I was just trying to have some fun in a flirty kind of way and thought you would find it funny. I never wanted to make you feel embarrassed.\"\n\n\"Kate, it's okay...I'm a guy, and we don't mind teasing about our sexual activities. It was kind of fun...so don't feel bad, its nothing.\" She looked a tiny bit relieved but I could tell she was still squirming about what she knew I had heard. \"As far as gloating is concerned, I don't have anything to gloat about.\"\n\n\"I appreciate your answers, and I can tell you are being the bigger person than I was just yesterday.\"\n\n\"Its nothing. Hey, this is one hell of a view up here,\" I said, trying now to move past the subject.\n\n\"Thank you for being nice.\"\n\n\"Kate, really, it not necessary. Chances are we will hear each other again, and we are in the same situation so there is no shame... in a weird way how there's no shame between sex partners . it's like we are all one big group of shameless sex partners. I said in an attempt to smooth things over and deal with the situation while making Kate feel better. She was on the hook long enough, and I don't like being there myself, so I was taking pity on her. But I wasn't realizing how creepy I must have sounded.\n\nI spread out my towel on the lounge chair next to Kate's and removed my shirt. I thought Kate had said her piece and was content when to my surprise she continued: \"You know, I wish it were that way.\"\n\nI looked over at Kate and said, \"Like what?\" not understanding her meaning.\n\n\"Us all as a group of sex partners.\"\n\nNot knowing how to respond to that, I just smiled and nodded my head.\n\nIt only took about a minute for her to say, \"Would you mind?\" I turned to see Kate in her thong bikini holding out a bottle of oil. I was bothered by this, as she was Madison's friend and neighbor, and now she wanted me to rub oil on her almost naked body after telling me that she wished we were all a group of sex partners. I knew where this could lead and was not at all comfortable with it.\n\n\"Oh, come on, Lawrence... it's no big deal. Just on my back.\"\n\n\"Well... okay.\"\n\nKate flipped onto her belly and was lying face down. Her body was as pretty and sexy as her face: a complete smoke show. All of her was right there; wonderful long legs, her neck, back and waist were so tempting; and my favorite part, her gorgeous ass, was worthy of an award. Looking at all of this I wondered to myself how in the world was it possible that Roger couldn't keep it up for this amazing, sexual creature. Still, I was annoyed by the prospect of rubbing oil on her. This could go so wrong. I cautiously put some oil in my hand and rubbed the middle of her back, being careful not to go too low. Kate began to moan and coo like someone was eating out her pussy. This made me uneasy and once again I found my affections and loyalties for Madison looming large. Then I quickly applied more oil to her lower leg and calf area. I rubbed quickly and spread the oil up to the back of the mid thigh. Then I stopped. Her beautiful bottom was right there, and I was certain she wanted me to rub both of her golden globes and her crack in hopes of seducing me. It was a test of my willpower. Normally I would have given anything to touch a woman like this. After all, this was at the time (and sometimes still) what I lived for, a beautiful ass. It took everything in me to keep from burying my face between her amazing cheeks, but I was sure I didn't want to risk it, so I stopped. Kate seemed disappointed, but I was inwardly proud of my own willpower. I went back to my lounge chair and lay back, half wanting to just get up and leave. Kate would not give up, and after about three minutes she said, \"Okay, you turn.\"\n\n\"No, really, Kate, it's okay. You don't have to.\" But as I said it a handful of oil splashed onto my chest. Kate began to spread and massage the oil over my chest, then to my shoulder and down my arm. Her hands were talented and the oil had been warmed up by the sun. It felt great, and I thought that she couldn't overpower me and I could stop her if I felt uncomfortable at any time. So I let her continue. It turned out to be more of a massage than a simple application of suntan oil. Between being warmed by the sun and soothed by Kate's massaging hands, I was deeply relaxed by this experience.\n\nI began to drift and doze off, somewhere treading the line between sleep and consciousness, and slowly teetering towards the latter. A split second before my doze graduated to a snooze. I was jolted upright and to a fully awake state to find my shorts pulled down and my cock exposed to the world! During my little nap, Kate had continued her massage all the way down into my shorts. My cock was as hard as a diamond. It was coated with a liberal amount of suntan oil, the sunshine on my oiled member created an almost blinding glare. Kate had one hand wrapped around the base of my tool, and her other hand cupped my scrotum. She stared at my hard-on in awe of its shining, erect glory.\n\n\"It's true... It is beautiful! And I can't believe she really fits this entire thing up her ass,\" said Kate, both truthfully and shamelessly, making blunt and open dirty talk, stating the obvious as crudely as she could. I knew what she was probably getting her jollies doing so.\n\nWhat was it about these women? Was I a toy to them, a fuck machine devoid of choice and feelings? These women would touch me and fondle me and just assume that a man wouldn't care and wouldn't rebuke their selfish advances. They must have felt their friendship to Madison superficial and inconsequential to risk losing it. The anger began to rise in me. Last night it was Margot; this morning, Kate. Who were these fucked-up people, and did they know something I didn't? I was sure that Madison was just fucking me 'til something better came along, but I had developed feelings for her. I had held out hope that there was a chance, however slim, that this world-class woman would fall for a muscle head chef from the old neighborhood, with a high school diploma and a degree from the university of hard knocks. Was I nothing? Just a possession; an object that could be borrowed? Did Madison tell them it was okay? All of this had my blood boiling with a vexed fervor I hadn't felt in a long, long while. \n\n\"WHAT THE FUCK ARE YOU DOING?\" I exploded. The look of surprise and fear washed over Kate's face as she cowered in a ball on the deck, jumping up out of my lounge chair red faced with eyes bulging.\n\n\"I'm sorry! I'm sorry! Please don't hurt me,\" Kate begged through a mask of tears and fear.\n\nThis angered me even more: \"Please don't hurt me!\" What the fuck did she think I was, some kind of wimpy loser who abuses women? Is this how these new people viewed us? I thought to myself.\n\n\"Please don't hurt me,\" I mocked back at her. \"Don't flatter yourself.\" I continued.\n\n\"I'm sorry! I have just been so horny and Roger can't keep it up...\" she said between sniffles.\n\n\"So you just violate the next guy nearest you without permission?\" I barked back.\n\n\"...then I heard how good you fucked and how big and beautiful your penis was ... and I... and I...\"\n\n\"...thought you would try me out, like borrowing a cup of sugar from your neighbor!\" I said, growing angrier.\"\n\n\"Why are you so mad?\" she fought to say through sniffles.\n\nGod, this entitled bitch was a clueless, heartless yuppie scumbag, I thought disgustedly. My involuntary erection was making a large tent in my shorts, and I thought of whipping it out and jamming it in her mouth and fucking her throat to punish her for her transgressions. Thinking better of it I dismissed the idea and instead took a deep breath.\n\n\"I'm sorry. I just feel so unattractive, and you looked so good... I just ...I just...\" she whined.\n\n\"You just what? Thought you would have me without asking first?\" I said, still yelling but calming down a tad.\n\n\"I just wanted to see if I could still make a young man hard...\" sniffle \"I haven't been able to make Roger hard for so long, and I feel so ugly and unattractive.\" she said breaking down into a full-on crying fit.\n\nI have never been able to withstand a woman crying, so I softened immediately.\n\n\"Look, look, Kate, I'm sorry I lost my temper, but you shouldn't have done that.\"\n\n\"I know... I know.\"\n\n\"Do you value your neighbor and friend?\"\n\n\"Yes\"\n\nMy imagination started to get the better of me. Did Madison arrange this? I wondered. She was already working with Gemma behind my back...well sort of.\n\n\"Did Madison say this was okay?\" I barked forgetting to be nice.\n\n\"Oh, goodness no! Please don't tell her!\" Kate begged.\n\nThinking that authentic, I dismissed the idea.\n\n\"Look, Kate, you are a beautiful woman. I find you very attractive and sexy. If Roger can't get it up for you that is his shortcoming, not yours.\"\n\n\"Really?\"\n\n\"Yes Kate, really, and I won't tell Madison if you don't... okay?\"\n\n\"Okay.\"\n\n\"If things were different and I met you first, I would be all over you. It's not anything you are doing, it's just bad luck...I'm sorry. ... but this is too fucked up for me to stay here now. I gotta go.\" I packed up and left Kate, her red thong bikini and her \"blue bean\" to themselves.\n\nWhen I arrived at The Bistro and saw Gemma, it was weird for me. I'd had that dream that seemed so real, and it would be a while before I could work past it.\n\nAs usual, we were busy and the night flew by. Pangs of jealousy would hit me every thirty minutes or so; thinking of Madison out on her date with some rich high society jack-off was a stone in my shoe. I was in a bit of trouble I thought; my heart will be broken soon; I shouldn't have gotten close; I am a boy toy and that is all; I should just enjoy the ride to nowhere. I tried to stay as busy as possible. I couldn't and didn't want to have too much conversation with Gemma.\n\nThe entire situation and last night's dream were all too strange for me.\n\nGemma even noticed. She made a few attempts but sort of backed off, instinctively knowing I needed a little space. She was a good boss and a good friend. As long as I was doing my job well, Gemma didn't care. At closing, finishing up was easier as I had done not only my side work but everyone else's as well in addition to some prep for tomorrow. I was surprised nobody accused me of being on cocaine. I showered up and headed for the exit. Gemma was at a table of stragglers being Gemma and putting on the charm.\n\nShe saw me and waved. I thought for a second she was going to make me go over and talk to those people. It was like a rehearsed act. Gemma would say something to her audience like, \"and here is the man behind it all-my executive chef,\" and I would have to talk to them and smile. Tonight I didn't feel like it, and Gemma knew it and just smiled and nodded. I waved back and left The Bistro.\n\nIt was another beautiful night and I wasn't sure what to do with myself yet. Madison had said that she wanted to see me, but no plan to meet ever materialized. So I walked down to her building. I could see that her lights were on, and therefore she was home. I started to wonder if Madison was having her \"dessert\" with Robert Thorne after all.\n\nI rang the buzzer.\n\nThe door buzzed open without a word, so I opened it and went inside.\n\nI knocked at the condo door, and Madison answered. She greeted me with a smile. That she was genuinely happy to see me made me feel good. She was in her sheer black robe, black bustier, her garter belt and thigh-high stockings. Her movements appeared to slowed by alcohol. It added a sort of clumsy cuteness so her.\n\nShe pulled me into the apartment and pushed the door closed, locking it. There was some soft music playing in a foreign language and candles lit all over the condo. Madison was still lighting them as I entered. She lit the last few and then turned to me with a smile, took a step forward to me and kissed me passionately. I hugged her, internally relieved and happy to find her alone and waiting for me.\n\nWe fumbled our way into an armless dining room chair. Then she guided me into a sitting position and the sank to her knees. Madison unbuttoned my pants and pulled them down and without a word took my hardening cock in her mouth.\n\nAll the events that had happened with Kate, and Margot, and the sex dream about Gemma had all helped me build up more come waiting to spring free from my now full testicles. After a few deep swallows, my hog was at its fullest and hardest.\n\nSitting there watching Madison 's beautiful head of thick, shiny hair slowly bob up and down was truly wonderful. She now took me out of her mouth and kissed and licked my ball sac, she was about to do one of her best tricks, the one she loved to do. I sat back waiting for it with eager glee. She loved feeling the balls undulating and churning a new batch of semen through the scrotum in her mouth. She licked and enjoyed feeling and seeing me being taken over by sensation before her eyes. Madison flipped her tongue and started her favorite fellatio move, slowly drawing her tongue up past the ball sac to the base of the cock on the underside. She cradled the cock on her tongue and, not too fast but not too slow, dragged her tongue upward toward the head of the prick up to the tip, teasing the pee hole and tasting the clear precome. She would lick and flick her tongue, then open wide and forcefully swallow the entire plump piece of man meat. She loved the feeling of a full throat and loved the shocked, awed response from me. This time was no different except she was letting it all hang out, giving the best and sloppiest head she had given me thus far.\n\nHer warm saliva ran down my cock and soaked my balls much like fucking her very wet pussy.\n\nI looked across the candlelit room and out the window to the harbor. The boats and yachts bobbed in the tide like Madison's head bobbed on my tool. She took me out of her mouth and said, \"Let's slow dance; slow dance in the chair.\"\n\nMadison stood, then lifted her beautiful lace-stocking covered leg over me. Straddling me, she gently nudged my chin upward and held me there face to face. The eye contact was like sex itself; those sexy, smoldering eyes had the power to stiffen any man's dick, and she knew it. She slowly squatted down and funneled my rock-hard manhood into her open, dripping sex. As the swollen head was pushed past her moist labia minor, Madison gently bit down on her lip, a telltale sign she was hot, feeling pleasure and relishing the moment.\n\nshe lowered herself slowly. I felt her hot, wet pussy yield to my shaft. With her cunt slowly conforming to my size, she slid herself all the way down. She was so open and wet but still taking her time. When I was in her as far as I could possibly get, she just stayed there motionless.\n\nShe was on top, and were were face to face again.\n\nI couldn't help it. I kissed her deeply. We didn't move. I was still and so was she. We just stayed there, loving the closeness. Madison stared at me and I stared back.\n\n\"Hi,\" she said, and it was then that I realized that we had not spoken since I arrived. So hot was our lust that I was naked and deep inside her sex without words.\n\n\"Hi,\" I said back.\n\n\"Mmmm, your cock feels so good, ... you are SO inside me!\"\n\n\"Yes, so deep. I love how you slid down my cock so ice and slow.\"\n\n\"I have to... it's so big, and I don't want to hurt my pussy.\"\n\nI kissed her again.\n\n\"Lawrence, dear, I want you to be still and let me fuck you. Just sit there and stay nice and hard for me...okay?\"\n\n\"Um.. okay.\"\n\nMadison put her feet on the floor and rode my hog up almost all the way off except for the cock head.\" She then began her slow descent, impaling herself on my rigid pole, then slowly up again. This time, she used her cunt muscles to squeeze my shaft on the way up. It felt so good. I wanted to return the favor so I swiveled my hips into an upward hump, trying to make a sexual collision of cock and cunt; the type of collision that sends both parties in to another level of pleasure.\n\n\"No, Lawrence, this time I want you to stay still and let me do the work. Nice and easy. If you go too fast then you'll come. Just relax, it's a process of pleasure.\"\n\nShe was right. It was wonderful, and she really knew how to work her pussy.\n\nAfter a while I noticed how long we'd been fucking and marveled at my own control and stamina. Just a week ago, before I met Madison and started my sexual education classes with her, I could never have gone this long without coming. She fucked me for almost half an hour and was becoming more and more vocal.\n\nMadison started to moan and breathe heavily. \"Are you going to come?\" I asked.\n\n\"No... I don't want to, nnn-not yet!\" She slid all the way down and held herself there again for a long moment. I reached around and cupped her perfect buttocks with each hand. Madison cooed her approval. She stayed there motionless, perched on my manhood and then put her head down on my shoulder and held me, resting, to prolong our fucking.\n\n\"I don't want to come. This is so good, I love this, fucking like this ... this this position...being on top, riding your penis, almost as much as I love it up my ass.\"\n\nHearing those words almost made me come.\n\n\"Go ahead and come, come through your pussy so I can take this cock and slide it right up your fucking asshole.\"\n\nMadison looked at me as if in awe; she was turned on by my dirty talk. But it was more than just that. She loved the idea, and she knew I was a freak for anal as much as she was.",
        "She started to slowly grind her wet snatch and work her way back up again.\n\nMeanwhile, I was still groping and kneading each half of her bottom with either hand. With my right hand, I caressed my fingers in to her ass crack. Slowly as she humped up and down I would softly run my finger from the tail of her spine down the crevasse lightly brushing past her pouting anus and her taint to where my fingers picked up some of the wetness of her vagina.\n\nI used the newly moistened fingers now to massage her sphincter, rubbing and poking it slowly loose. As just the very tip of my index finger worked its way toward relaxing the outer layer of her rectum's security system, I demanded, \"Here!! Right here, I want to fuck you in this!\" prodding her tight knot of rectal flesh.\n\n\"Mmm, me too... but.. but...\"\n\n\"But what? I want your ass!\" I argued.\n\n\"We can't.\"\n\n\"Why not?\"\n\n\"Because ..I'm not prepared.\"\n\n\"I will go to the bedroom and get the K-Y, what's the big deal?\"\n\n\"No, that's not what I mean... the timing isn't right.\"\n\n\"I thought anal sex was your favorite... now you're talking about timing,\" I said.\n\n\"No. I mean, I'm full.\"\n\n\"Oh, I see,\" I answered, finally understanding. \"What if we took a break? Then we can get you 'prepared' together...It could be fun; we could turn it into something sexy.\"\n\nShe looked at me and seemed surprised that I not only knew something about preparation for anal sex, but something about her as well, something she thought secret, about how she used enemas to keep her rear entrance clean and ready. It was the part of our shared fetish she thought she kept to herself. \"I stumbled on your hygiene apparatus by accident the other day while looking for a towel. Please don't be angry. It was accidental,\" I offered.\n\nMadison was quiet for a moment, then said, \"I guess it could be fun... are you sure you're alright with it? Seems kind of kinky for you, Lawrence.\" She looked at me with a bit of doubt in her eye, then she smiled and said, \"It has been fun helping you shed your inhibitions and teaching you how to fuck; why not keep educating you?\"\n\n\"Yeah, and the short break will help me last longer and come harder,\" I added excitedly.\n\n\"Yes, lots and lots of hot come...right where I like it.\" Madison dismounted me, and even that felt great. Then she stood up, as did I, stripping myself out of whatever clothes were still on my body. Madison took my hand and led me through the condo to the large bathroom that was connected to the bedroom.\n\nWe were in the bathroom with its huge mirror and double sink, and I thought how just this bathroom alone was bigger than my entire apartment. Madison got two large towels and laid them out on the floor. Here I was ready to try yet another new experience. My pounding heart awoke the butterflies in my stomach as excitement of the uncharted quadrant of the sexual ocean neared.\n\nMadison retrieved a red rubber bag from one of the cabinets, along with some white plastic tubing and a nozzle with a flared tip, a different one than the one in the guest bath. This was a woman committed to keeping her pipes clean, I thought.\n\nNext, she retrieved a half gallon plastic jug of some milky liquid and poured about a measuring cupful into the bag. \"This is a soap solution,\" she explained. \"It's good for enemas, as it's a bit soothing. I make it up myself with a bar of pure, unscented glycerin soap.\" She moved to the sink and started filling the bag with lukewarm water from the sink. \"While I'm running water into this, would you be a dear and fetch us the K-Y jelly?\" she asked. The red rubber bag was now almost full. She shut off the faucet and screwed the white plastic tubing onto the open mouth of the bag.\n\nI did as I was told, and when I returned to the bathroom I found Madison on her knees, head down on the towels she had placed on the floor with her beautiful round ass upturned. It was always a highly erotic view, and if my beef pole wasn't already stiff, seeing this would certainly have made it that way.\n\nI knelt on the floor behind Madison, her gorgeous ass in my face. The robe was gone, but she still wore her garter belt and stockings.\n\n\"I can't believe this,\" I said, thinking out loud.\n\n\"What?\" Madison replied, looking up over her shoulder, her beautiful posterior still pointed toward the heavens as if she were offering up her rectum to the gods of carnality.\n\n\"I can't believe that I get to live out my sex dreams with a gorgeous woman like you.\"\n\n\"Mmmm, yes, a woman who loves getting fucked in the ass by your big, hard cock,\" said Madison. She knew the power her words had over me.\n\n\"Its all I ever wanted and more,\" I said truthfully.\n\n\"Do you like what you see?\" she asked, teasingly swaying her bottom in a seductive dance-like motion.\n\n\"I'm crazy about it and can't get enough of it.\"\n\n\"What do you like best?\" she said playfully, already knowing the answer.\"\n\n\"Your beautiful ass. It's so sexy and perfect. It makes my cock so hard.\"\n\n\"Does it, now?\" she said in mock surprise, still grinding her ass in the air.\n\n\"Yeah!\"\n\n\"What will you do for it?... will you worship it?\"\n\n\"I want to sniff, lick, finger and then fuck you right in that fucking sexy ass.\"\n\n\"Hmmm, sounds terrific,\" she purred, \"but let's work in that enema right between the parts where you're fingering my ass and fucking it, okay?\" She reached back and parted her ass crack with both hands. I took the opportunity to bury my face in her ass, poking her backdoor with my nose and lapping her sweet twat with my tongue. Then I put both hands over hers and took over the job of separating both hemispheres of her beautiful ass while inhaling her musky fragrance.\n\nMadison let out a moan of ecstatic joy when I plunged my tongue in the ring of stretchy pink and brown anal flesh. Doing a complete rim job was my idea of fun, and we both enjoyed it but it also helped to relax and loosen the anus. I smeared a liberal amount of KY on the white plastic tube and spread it around.\n\nThen I massaged another dollop of the clear jell into her hungry rectum. Taking the flared tip and resting it right up against Madison's sphincter, I applied only the slightest pressure.\n\nSlowly the tip sunk in. I watched in fulfilled excitement as the white tube slid deeper. The contrast again was striking; the whiteness of the tube and the brownish pink color of her ass lips were sexy and beautiful. I undid the clip on the tube that allowed the warm, soapy water to run and fill her. Madison requested that I \"rub her belly.\"\n\nI reached underneath her with my free hand and massaged her lower abdomen.\n\nMadison later told me that this helped the person to accommodate the enema, or \"take it better,\" so I rubbed her with one hand while holding the enema tube with my other hand.\n\n\"Mmmmmm, it feels sooooo good, all that warm water rushing into my ass,\" said Madison as she started to stimulate her clitoris.\n\nI had never used a toy or anything other than my fingers and penis in anyone's vagina or anus. So the insertion of the enema tube in her bunghole was an exciting and new level of debauchery to our sex games.\n\n\"I'm starting to get full,\" Madison moaned as the warm, soapy water transferred from the enema bag down the tube into her ready rectum.\n\nWhen the entirety of the soap solution was up inside of her and the tube was slowly retracted from her starfish, I asked her, How does that feel?\" I was dirty talking and trying to enhance her pleasure with the same unnecessary blunt questions she would ask that always fueled my sexual fire. I was also curious, having never had an enema in my life.\n\n\"It feels warm and silky and filling.\"\n\n\"Is that good?\"\n\n\"Yes, it feels like fifty guys came in my ass.\"\n\n\"Wow! Fifty guys shooting their come in you! Does the thought of that get you wet?\"\n\n\"YES!!... mmmmmmm. Fifty guys with hard cocks, all lined up for my ass,... mmmmm.\"\n\nMadison was moaning and enjoying it all.\n\n\"Fifty hard cocks fucking me deep in my ass , filling my ass with their hot loads.\"\n\nI almost jerked off to her words, and loved imagining the idea and her freaky wild ways. But at the same time, I was a twinge jealous of the fifty imaginary guys who got to fuck her backdoor.\n\nShe just stayed there, down on her knees; head down, ass up. \"I'm going to be here for a minute or two, so go on into the bedroom and I will call for you when I'm ready for your cock.\"\n\nArising and walking out the door, I didn't even realize how easily I had been dismissed. I was preoccupied catching a glimpse of myself in the mirror my raging hard-on. My cock was so swollen it was difficult to walk.\n\nI closed the door behind me and waited on the bed, the seconds going by like years, I couldn't hardly wait for her. After what was really only a short while, Madison's voice beckoned me. When I returned to the bathroom, I found Madison exactly how I had left her, on her hands and knees with her lovely bottom still pointed skyward.\n\n\"Now, Lawrence, we repeat the same steps.\"\n\n\"We do?\"\n\n\"The first is to clear everything. The second is without the soap and is just to rinse.\"\n\nUsing water that was, at Madison's direction, a bit warmer this time, I filled the enema bag and inserted the flared tip in Madison's rectum, just as I had done before. As the warm fluid ran down the tube, filling Madison's rectum once again, she reached back and stimulated her clitoris, proof that this hygienic ritual was also highly sexual for her, just as it was for me.\n\nWhen Madison's colon had finally swallowed the last of the water, I slowly removed the tube from her asshole. I left the room again and waited on the bed. I heard the shower running and not long after, Madison emerged from a cloud of steam into the bedroom.\n\nShe strutted out towards me like a lioness out on the prowl.\n\nI was lying on my back with my veined beef pole hard and ready, waiting for Madison's ass. It resembled a rocket on the launch pad awaiting ignition.\n\n\"I can see my seat is ready.\" The words flowed from her lips, smooth and sultry.\n\nBefore I knew it, Madison was straddling me once again. I looked past her and saw our reflection in the full-length dressing mirror. Her hourglass figure was perfectly framed from my point of view. In the mirror, I watched her reach back and grab hold of my erect penis, that was mindlessly guiding itself as nature would instruct it toward her open pussy. I felt the warm, wet lips of her cunt kiss my cock head, but her grip on at the bottom of the shaft redirected toward the forbidden knot of muscle and flesh. Again, looking in the mirror and getting a view of Madison aiming my tool between her smooth creamy globes, her asshole was her target. The thought of this never failed to excite me, to see the physical manifestation of a woman wanting a cock in her rectum. Madison's hand was full of K-Y Jelly (she was always prepared for everything) and as she guided my manhood into her deep, dark taboo, she was also applying lubrication to it.\n\nI watched her sphincter skin stretch and smooth as my cock gradually disappeared inside her.\n\nAs I had come to expect, the wonderful feeling of her rectum on my manhood was a firm, tight grip, but something was different. The warm water from the enemas had risen the internal temperature of her anus. It felt hotter and smoother than I had previously experienced , and it was amazing. When I was in her as deep as I thought I could go, she reached back and spread her cheeks and I sunk in even deeper.\n\n\"Oh, God, I love this so much,\" she said breathlessly as if her pleasure was so great that it was difficult for her to speak.\n\n\"It's still hot and warm up there; it feels so fucking good,\" I offered.\n\nI had two views: her open, dripping honey pot excreting its pungent juices flowing as the petals of her sex flower seemed to burst forward. This vaginal bloom was due to pressure created from an anus full of hot, hard meat and my manhood a half inch south buried deep in Madison's nether orifice. The other view was from behind provided by the mirror, her perfect ass devouring my entire length and girth, the toned muscles of her buttocks tensing and easing as she rode that rocket up and down and over and over in its slow erotic, dance of reciprocating motion.\n\nWe fucked hard and long, though it was Madison who had taken charge and done most of the work. She was on top of me and on top of her sexual game. The hot summer air coupled with our exertion steamed the room. Sweat poured from our bodies, and there was a loud, wet smacking sound every time her body collided with mine. I was breathing heavily as my heart pounded, and so spirited was our wild romp that I could hear the blood rushing through my veins. It was like a good workout. My endorphins kicked in and lifted the pleasure to heights higher than Mount Everest.\n\nMadison began to masturbate her pussy, and I reached up to cradle each of her ample tits in my hands.\n\n\"Mmmmm, three enemas! Mmmmm, so good.\"\n\n\"Two,\" I corrected, taking what I knew was bait.\n\n\"No, three. Two with water and soap, mmmm uhhh, and this one with K-Y, cock, and come,\" she bragged, being naughty and uninhibited, a telltale sign that she was close to coming.\n\nI began to feel the tension in her body, her masturbating intensified as she erupted in an explosive orgasm. Her screams of passion were loud and unbridled.\n\nI was proud that I was able to last so long to make her come.\n\nMadison was out of breath, sucking wind like she just ran up twenty flights of stairs.\n\n\"OOOH! Oh my God! That was so good... huh huh... that has to be the hardest... huh huh huh... I ever came through my ass.\" Madison struggled to get out the words, still out of breath. She was as still as a statue, sitting ramrod straight, collecting herself for a few moments, my hog still deeply embedded in her rectum and hard as granite. The feeling of being deep inside her as her warm colon gripped my tool was enough to keep me erect.\n\nJust lying there as she recovered was pure magic; a wonderful feeling, like fucking without movement. I understood what \"the process of pleasure\" was all about, from the kinky play with the enemas to deliberately dragging out and slowing down the sexual act, delaying climax and enjoying the trip and not rushing to the destination. Coming hard, that is the treat at the end that makes the trip so worth it, but sometimes the trip is so rewarding that you don't want it to end; you dont want to come... not yet.\n\n\"I want you to come,\" said Madison, more as a command than a concern for my pleasure. She had regained her senses and wanted to dominate me to regain the upper hand in our sex game. She knew that she had made me cum before, simply by speaking the right words, dirty sexy words.\n\nI had to resist. It was a challenge; how long could I last, how long would it take her to make me. Our game had gone to another level, a wonderful game with no losers.\n\n\"Lawrence! did you hear me?... I said I want you to come.\"\n\n\"You're going to have to make me,\" I returned, with a smile.\n\n\"Hmmm , and how should I do that?\"\n\n\"Whatever way you think is best.\"\n\nSilently accepting the challenge, I felt her tighten herself around my prick.\n\nI took a look in the mirror to get a rear view of the action. Her back was so beautiful; her raven hair spilling around her shoulders. When she began to move and ride my cock in an upward motion, Madison clenched her buttocks together and tightened her thighs. The sweat that coated her beautiful body created a sheen that underscored and accentuated the muscles in her buttocks and legs.\n\nPutting a stranglehold on my penis, she looked down on me and called my name. She saw I was looking in the mirror and wanted eye contact and my full attention.\n\n\"Do you like my ass?\" she said as she ascended. Her technique was to squeeze and grip my cock with her asshole as she went up and to relax, gape open and encompass it as she descended.\n\nWhen she slid down, she began to question me again. \"Does it feel good when I when I squeeze up my rectum on your cock?\"\n\nI didn't answer her fast enough, because she again began to alternate gripping me with her talented anal control. Finally I spoke. \"Yes... I ... I ..love how it feels when you do those tricks with your asshole.\"\n\n\"You love fucking my ass... don't you?\"\n\n\"Uh ha.\"\n\n\"Say it!\" she snapped. She continued to choke my cock with her powerful ring of muscle, clenching her ass cheeks for added pressure.\n\nThe pleasure was so great that I had to submit to her and admit it. \"I Love fucking you up your tight fucking ass!\"\n\n\"Good! Now I can make you come whenever I see fit, and if you are a good boy, I may even make you come twice before you even take it out of me after the first.\"\n\nDisbelief gave me enough strength to reach for my last drop of defiance.\n\n\"Impossible!\"\n\n\"Oh, so you doubt me!\" Madison exclaimed as she underlined her words with another expert gripping squeezing ass hump. She then went on with a series of leapfrog ass humps at a rapid pace. Madison was fucking me hard, and I was in ass lovers' heaven. Her fucking and grinding, coupled with her rectal gripping proficiency, had me on the brink. My teeth felt hollow as my mouth began to water at the impending orgasm.\n\nI felt her hand slip past my scrotum, then her finger tip pressing on my asshole.\n\n\"Ah, not open for business, are we?\" she said in reference to my buttocks pinching together. \"Are you holding your chalk, Lawrence?\" she taunted, knowing that I was using the method she had taught me to suppress a climax.\n\n\"Let go, Lawrence. Fill my ass with your come.\" And with just a few more of her gyrations I did just that, squirting a giant salvo of sperm deep inside her colon.\n\nIt was then that she slid her finger in my ass.\n\n\"You see, Lawrence, with my finger in your butt hole your cock won't go soft all the way... and when you look back in that mirror and see what a beautiful picture we just painted, you will be all the way hard and ready to go again.\"\n\nShe was right! Her finger not only felt good, but i was still almost hard. When I did as she said and looked in the mirror, the reflection of her perfect ass cheeks was shining with sweat. Her anus was a pink ring of rubber embracing my prick, the creamy white semen leaking past the lips of her ass and down onto my balls.\n\nI didn't realize that I was fully hard 'til Madison resumed working her asshole up and down on me again. It was all too much; the view, the sensation, and the pressure her finger put on my prostate made me come a second time in two minutes flat.\n\n\"I told you, Lawrence, two loads of come in the bum!\" she said triumphantly as she leaned over and kissed me in a show of both affection and good sportsmanship."
    ],
    "authorname": "erotica881988",
    "tags": [
        "ass fucking",
        "ass",
        "butt",
        "butt fucking",
        "anal",
        "anal sex"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/anal-summer-ch-08"
}
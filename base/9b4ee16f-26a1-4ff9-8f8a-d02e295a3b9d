{
    "title": "Backdoor Sweetheart Ch. 03",
    "pages": [
        "Author's note: This is a work of fiction. All characters are eighteen years or older. Don't expect realism and you won't be disappointed when you don't find it! Enjoy!\n\n***** \n\nBalancing a breakfast tray loaded with freshly cooked pancakes in one hand while I opened my bedroom's door with the other, I couldn't help by smile broadly as I took in the wonderful sight before me. \n\nLying on her side in a fetal position facing my way, my sweet Lizzie was still sleeping peacefully, bathed in the mid-morning light. She looked more beautiful than ever, with her long auburn hair spread over my pillow, her pouty lips slightly parted and her generous curves silhouetted against the light streaming in from the window and glimmering on her pale, smooth skin. \n\n\"Wow...\" I murmured under my breath, feeling like the luckiest guy in the world. \n\nNot wishing to wake Lizzie up, I quietly walked inside and laid the tray on my nightstand, all the while watching her serene face. A mix of pure affection and excitement buzzed inside me as I approached my lifelong friend, almost-sister and now legit girlfriend. Standing there by the bed, I just kept smiling like a lovestruck fool, my heart beating faster by the second while my hardening cock tented my boxers. \n\nEntranced, I feasted my eyes on the jutting fullness of Lizzie's naked boobs spilling out of the sheets wrapped messily around her soft curvy body. I was literally salivating as I stared at the puffy pink buds of her nipples pointing at me from the silky, fleshy juiciness of her amazing jugs. After admiring the gentle oscillations of her tits wobbling heavily in time with her steady breathing, my gaze turned to the plump, enticing roundness of Liz's fabulous ass protruding from under the light blanket covering her lower body. \n\nI was still standing there, caught between the urge to snuggle up with my sweet Lizzie and the wish to just admire her without breaking the perfect peacefulness of her slumber, when a sort of cooing sigh escaped her lips, followed by a yawn.\n\n\"Mmhh...\" she mumbled, rolling lazily onto her back as her eyelids fluttered open. The moment her big brown eyes met mine, Liz's lips curled up in a beaming, spontaneous smile. Her gaze was still clouded by sleep and her voice was adorably groggy as she exclaimed: \"Russ!\"\n\nA laugh of unbidden joy escaped my lips as she pronounced my name. The mix of excitement, glad surprise and sheer love resounding in Lizzie's voice was heartwarming to say the least.\n\n\"Morning, Liz,\" I murmured, already leaning in as she stretched her arms out to draw me into her embrace. \"Guess what I've mmphh!...\" \n\nIn a moment, her hands were on the sides of my face and I was being pulled down until our mouths met. The feel of Liz's hot tumid lips clamping onto mine in a deep passionate kiss deleted every thought in my mind. Within seconds, I was lying down beside her with my arms wrapped around her voluptuous naked frame as she hugged me in turn, squeezing me so tightly that the stiffening nubs of her rosy nipples poked into my chest through my T-shirt.\n\nAfter we broke our voracious lip-lock, Lizzie kept clinging snugly to me, purring contentedly and nuzzling my neck, a huge smile brightening her visage. With one hand resting on her sumptuous bubble-butt and the other busy stroking her sleep-tousled auburn tresses, I eventually resumed: \"Sooo, as I was saying...\"\n\n\"Let me guess...\" she interjected, raising her face from the hollow of my shoulder and sniffing around, catching a whiff of freshly cooked food wafting from the tray. \"Mmhh breakfast, yay! And it smells really yummy!\"\n\n\"Let's just hope it tastes yummy too,\" I replied as Lizzie's unfocused gaze zeroed in on the goodie-laden tray.\n\n\"Wait a second, are those...\" she said dubiously, squinting her eyes as she leaned toward the nightstand, reaching for her glasses. \"Oh my god, Russ!\" Liz exclaimed as soon as she could clearly see my modest culinary creation in all its simple yet mouth-watering glory. \"You made me chocolate chip pancakes!?\"\n\n\"I sure did, or at least I tried my best...\" I confirmed with a chuckle, basking in Lizzie's happiness at discovering that I had made her her favorite breakfast. \"That's the only reason I put these clothes on, to be honest. Cooking naked seemed sort of risky, you know.\" \n\nGiggling and licking her lips as she got up on her knees and reached for a plate and a fork, thus making her big magnificent tits sway hypnotically side to side, Lizzie commented: \"Wow, it really looks as good as the stuff our Moms make! If I didn't know that today they're out hiking, I'd say they're responsible for these.\"\n\nI held my breath as I watched Lizzie bring a generous forkful of syrup-dripping pancakes to her mouth and then closing her eyes as she chewed intently. Her appreciative humming and the upturned corners of her lips were good signs, but I had to know for sure. \n\n\"So,\" I asked, trying to contain my anxiety and failing miserably, \"what's the verdict?\"\n\nGulping down the sugary mouthful as she reopened her soulful brown eyes, Lizzie left me hanging for just another second before saying solemnly: \"I'm sorry to tell you this, Russ, but...\"\n\n\"But!?\" I urged her on, nervously.\n\n\"But,\" she resumed with an impish grin, \"you'll have to make me breakfast many, many more times: these pancakes are totally awesome!\"\n\nI was smiling both inside and outside as I savored the sweet taste of Lizzie's lips pressing urgently onto mine in a swift, needy kiss before she focused entirely on the stack of pancakes before her. Sitting up on the bed facing my beautifully naked girlfriend, I grabbed a fork and the bottle of syrup, ready to dig in too.\n\n***** \n\nAs always, Christmas had been a huge family time fest for me, Liz and our Moms. Loyal to tradition, we stuck to our holiday routine of epic board game battles, movie marathons and lots of awesome food. \n\nI guess I shouldn't have been surprised, all things considered, but at first I was taken aback by how our Moms reacted when Lizzie and I, during Christmas dinner, told them that we were together, as in 'boyfriend and girlfriend' together. \n\nThe announcement was followed by a long moment of silence, during which Lizzie's Mom and mine shared a knowing look. Then, all of a sudden, they went kind of crazy. Cheering and laughing, they bolted from their chairs and hugged one another and then the two of us in turn, all the while speaking over each other as they chirped about how happy they were for us and how they had always known that we would be perfect together and we would make the cutest couple in the world, and on and on and on. \n\nFor a few minutes, while our Moms submerged us with joyful hugs and big smooches and radiant smiles, Liz and I remained bug-eyed and somewhat overwhelmed. Our Moms' enthusiastic reaction sort of freaked us out at first, but in a good way. After all, they were giving us their blessing and then some, which we were glad for. So, once the initial burst of awkward cheerfulness blew over, we all went back to our usual Christmas mood, with an added sparkle of novelty and excitement in the air. \n\nFunny enough, even though we were now officially allowed to spend the night together as a couple, Lizzie and I didn't really take full advantage of the situation at first. Late on Christmas Day, stuffed to bursting as we were and still a bit weirded out by the Moms' ardent approval of our relationship, all we could manage was a slow and giggly make out session while snuggling on Lizzie's bed, until we slipped into a shared food coma. \n\nThe following day, which we spent mostly doing stuff all four of us together as a family, Liz and I waited until early evening before leaving our Moms in front of the TV to do their Homeland catching up. Once we were alone in her room, I was treated to something better than any of the presents I had got for Christmas: a reading of Lizzie's latest stories, specifically the fantasy erotica she had been working on lately. \n\nAs always when Liz read me her stories, I was instantly one hundred percent focused, eagerly drinking in her every word. Still, as I sat beside my sweet Lizzie on her bed listening to her soft soothing voice conjuring up characters and situations born of her fascinating imagination, something felt different. Simply put, what she was reading was hot as hell! \n\nIt wasn't just the sexual tension in the air or the lewd descriptions in the story that made my cock stiffen and strain painfully within my pants. The sheer intimacy and eroticism of being allowed into a whole new part of Liz's inner world was getting me dizzy with arousal. As excited as I was, I also felt a surge of affection for that beautiful, amazing girl who was opening up to me so completely, revealing her most private writings and, in so doing, demonstrating her absolute trust in me. Needless to say, that made me love her even more than I already did. \n\nThe trembling note in her voice, not to mention the frequent sidelong glances she shot at me and the way she anxiously bit her succulent lips every now and then, confirmed to me that Liz too was getting turned on more and more as her reading progressed. By the end of the second chapter of her saga about the naughty incestuous elven twins loosely based on us, both Lizzie and I were breathing hard and squirming with horniness. \n\n\"So,\" Lizzie asked with a half-nervous and half-teasing smile, all flushed and dopey-eyed with arousal as she adjusted her glasses and turned to face me, \"what do you think, Russ?\"\n\nI barely managed to blurt out that her story was great before we fell into each other's arms and started kissing rabidly, our lips smashing together and our tongues pushing avidly into one another's mouth. \n\nIn the blink of an eye, we tore our clothes off as if they were on fire and tumbled naked onto the bed. Instinctively, we went straight for the other's sex, rolling head to toe until we were locked in a steamy sixty-nine. \n\nLying on my back with Liz sitting on my face, I glued my lips to her smooth juice-gleaming pussy, aching to taste her. Her husky sigh of delight swiftly faded into a lewd slurping noise as Lizzie dipped her head down and took my raging boner into her mouth. As the liquid heat of her eager oral cavity enveloped my cock, my lips started kissing her nectar-glossy labia more intensely, my tongue swiping and whirling in a flurry all over her swollen pink clit. While I ate her out with gusto, covetously running my hands all over the glorious curve of her fleshy round asscheeks, I was soon trembling from the immense pleasure that Liz's dick-worshiping mouth was giving me. \n\nWith her soft suctioning lips stretched around my thick length, Lizzie bobbed her head furiously up and down my pole, inhaling my veiny boner in a series of reckless plunges that allowed my bloated glans to slide all the way into her gullet at every pass. The sloppy gagging sounds of her incredible deepthroating blowjob and her lustful moans were just as heady as the feel of her warm saliva-slick oral cavity engulfing my dickmeat and of her wet lips gliding up and down my shaft in a relentless cocksucking rhythm. \n\nKneading and squeezing and fondling her majestic bubble-butt, I tried to focus on eating Lizzie's pussy out to the best of my ability, determined to give back as much pleasure as I was receiving. Somehow, the increased intensity of my snatch-munching seemed to egg her on in turn. As I moaned into Liz's delicious virgin slit, licking and lapping and drinking down every drop of her drooling nectar, she blew me like her life depended on it, fucking her own face on my cock ever more desperately. \n\nEven though no words were spoken, except for my pussy-muffled grunts and the choked spluttering sounds coming from her dick-clogged throat, it was soon implicitly understood that Lizzie and I had turned that sixty-nine into a sort of lascivious and insanely pleasurable contest. It also became quickly obvious, to me at least, that I was going to lose in no time. \n\nWith the sweet taste of her juices saturating my tongue, the bouncy perfection of her soft plump rump filling my hands and her hot cock-hungry mouth inhaling my throbbing pole, I didn't have to make too many calculations to realize that I would cum way before I could bring Lizzie off. My balls were already tingling and my shaft was pulsing in pre-orgasmic joy deep inside Liz's gullet, so I was pretty much resigned to just accept the sweet 'defeat' looming over me. Then, suddenly, it hit me: I hadn't played my trump card yet! I almost laughed into Liz's nectar-soaked folds as I realized that I could still 'win' our naughty oral duel.\n\nSliding back a bit to prop my head on the pillow and get a better angle, I sank my fingers in the fabulous plumpness of Lizzie's bubble-butt and parted her luscious asscheeks nicely open, revealing the tiny pink rosebud of her butthole. As close as I was to cumming inside her mouth, I still took a moment to bask in the sight of Liz's adorable little sphincter. My head spun as I watched her delicate forbidden orifice winking and twitching before me in all its horny, puckered glory. It was just a second though, then I set to work. \n\nStraining not to ejaculate just yet, I unclasped my mouth from Lizzie's pussy and buried my face between the smooth meaty globes of her asscheeks, clamping my lips onto her crinkled rubbery rosebud. Liz let out a strangled gasp the moment I began rimming her out like there was no tomorrow, suckling and kissing the tender outer edges of her anus while I lapped and licked the miniature opening of her asshole into capitulation. Though she still held my cock buried balls-deep in her throat, Lizzie was so blindsided by my abrupt analingual assault that she couldn't keep up her devastating bobbing tempo on my shaft, thus allowing me a few precious seconds of reprieve. \n\nExcited and caught by surprise, with her backdoor already tingling and swiftly drenched in my spittle, Lizzie could do nothing but moan in cock-muffled bliss around my boner as I poked my tongue inside her delicate little orifice and started wiggling my way in, pushing as deep as I could into her twitching butthole. Within moments, Lizzie was rocking urgently back and forth, trying to force more of my tongue into her ass. Overwhelmed as she was by my sudden rimjob, she stopped actively sucking me off, but she stubbornly kept nursing on my throat-clogging pole, slobbering and suckling and pleasuring my aching cockmeat within her wet, warm mouth. \n\nAs I tongue-fucked Liz's sensitive asshole with abandon, her obvious appreciation of my butt-munching attentions boosted my libido even more, egging me lustfully on. I waited just a few moments more before I reached my shaking hand to her nectar-slick clit and started rubbing away. That did it. Within seconds, my sweet Lizzie was cumming spectacularly, her scrumptious nectar drenching my fingers and dripping onto my face. All through her climax, she let out a series of sloppy dick-muted gagging mewls while making frantic swallowing motions with her gullet, intensifying the cozy caress of her oral cavity around my shaft and milking me amazingly. \n\nThe sensory overload I got from feeling, tasting and hearing all that pleasure at once was just too much for me. With the warm confines of her spit-flooded mouth and slippery throat squeezing my length as her pulsating little asshole clenched and unclenched uncontrollably around my probing tongue, I buried my face as deep as possible between the smooth, soft globes of my sweet Liz's asscheeks and came with her, blasting a torrential spray of cum straight down her gullet. \n\nBlown away as I was by my orgasm, I still persistently munched on Lizzie's cute gummy butthole while she sloppily suckled on my spurting cock, greedily swallowing my abundant load as I kept pumping rope after thick rope of milky cum into her stomach. While our climaxes burned through us, just a squishy muffled cacophony of choking and slurping sounds could be heard in the room, the relative outward quiet belying the pleasurable detonations wracking Liz's body and mine.\n\nIt took a while before we finally came down from our highs and languidly disentangled our entwined bodies. As soon as we broke our sixty-nine, Liz turned and rolled close to my side, snuggling into my embrace and purring contentedly as she nuzzled my neck. Her huge juicy boobs were squashed against my chest as she draped a smooth thigh over my chubby, saliva-gleaming cock. Looking into my eyes, Lizzie let out a satisfied sigh before she lazily spoke.\n\n\"So, Russ,\" she cooed, a thin smile dancing on her cum-glossy lips, her big brown eyes still lust-glazed behind her glasses, \"I guess you really, really like my smutty stories, uh?\" \n\nI could only laugh and hold her as tight as possible in response, pressing my mouth to hers in a deep, loving soulkiss. \n\n*****\n\nFollowing that first oral duel, Lizzie and I added a new favorite pastime to our holiday activities. Whenever we were home and not spending time with our Moms, we retreated to her bedroom or mine to read more of her erotica and suck each other off like crazy. \n\nEven though we had never been competitive in any way, the silly and yet extremely sexy challenge of making the other cum first while locked in a sixty-nine really grew on us. Lizzie especially gave her very best each time, pushing the ability of her exquisite lips and hot suctioning mouth to the limit. It felt heavenly to get deep-throated by a lust-high Liz and then send spurt after creamy spurt splashing down her dick-clenching gullet, all the while listening to her gagging around my girthy boner and slurping voraciously as she gobbled down my cum like she was starved for it. \n\nStill, as incredible as Lizzie's blowjobs were, I won pretty much every time we played our little sucking game. It wasn't that hard, really: I only had to remove my tongue from her engorged clit and start licking and probing at her ever-horny little anus to tilt the 'match' in my favor. It was crazy how sensitive Lizzie's cute pink rosebud was, and how much pleasure she got from having it played with. She halfheartedly complained once about the fact that my eating her butthole out like that could sort of qualify as cheating, but she was horrified when I jokingly asked if I should stop doing it. So, once that little ambiguity in the 'rules' was clarified, I kept at it. \n\nOne time, catching me totally by surprise, Liz suddenly upped the ante by wrapping her massive boobs around my saliva-coated shaft while nursing on my glans. That unexpected tit-fuck almost made me cum instantly, but I managed to hold back and renew my rimming efforts on her twitching asshole, until victory was mine again. Well, theoretical victory at least: the epic orgasms Lizzie unfailingly experienced during our competitive sixty-nines were obviously more than making up for the fact that she was 'losing' each game.\n\nWeirdly enough, even though tongue-fucking Liz's adorable little rosebud was not as mind-blowingly awesome as actually sodomizing her, I was still very satisfied to see how spectacularly I could make her cum relying only on my analingual skills. As much as I lusted after her beautiful plump ass, knowing that she was sort of embarrassed to do more serious stuff while our Moms were around, I didn't pressure Lizzie into buttfucking for the time being, choosing to enjoy our naughty oral challenges instead. \n\nOne afternoon, as we rushed upstairs to my room to read more of her erotic stories as a warm up for another intense sucking session, Lizzie suddenly stopped in her tracks and hugged me super tight. Brushing her lovely face against mine before kissing me passionately, she giggled and blushed as she whispered that, with all the rimming and tongue-fucking I was giving her, she was dying to feel my cock deep inside her asshole. As my chubby boner stiffened to full hardness at those words, Liz added that she didn't trust herself to have anal sex at the moment, because she was sure she'd scream way too loud and she didn't want our Moms to hear her yelling out for me to wreck her ass. ",
        "\"At least,\" she concluded with a heart-melting smile, biting her full lips and shrugging her shoulders timidly yet oh so sexily, \"as long as I have your cock in my mouth I'm forced to be quiet when you make me cum like crazy with that magic tongue of yours!\" \n\nThat was yet another one of those moments of mixed tenderness and lasciviousness that my sweet Lizzie never failed to give me. Needless to say, given those scorching hot premises, we didn't get much reading done before getting down to business.\n\nThat was two days ago. Now, with our Moms out hiking with their friends and the house all to ourselves for the day, I had the feeling that there would be more on the menu for Liz and I, besides my pancakes, that is.\n\nLulled away by the likely prospect of once again making sweet love to my gorgeous Lizzie's little butthole, I smiled goofily to myself as I watched her sitting on my bed right in front of me in all her curvaceous naked glory. She was gazing intently out the window, her head slightly tilted to the side, apparently lost in thought as she took in the sunny suburban landscape that was our natural habitat.\n\n\"You know, the winter holidays always make me wonder what it would be like to live in a cold place...\" Liz mused in her soft, soothing voice. \"I don't think I'd like it that much the rest of the year, but Christmas would definitely feel a lot more Christmassy if there was snow outside and it was very cold and stuff, don't you think?\"\n\nAs she turned to focus her soulful, inquisitive brown eyes on me, my gaze couldn't help but stray lower for a moment to admire the delicious swaying motion of her jutting boobs brushing heavily together at her sudden movement. \n\n\"Uhm, yeah, I guess it would be more Christmassy with snow,\" I nodded as I forced myself to look up from Lizzie's awesome rack into her smirking eyes. \"The downside would be that we couldn't just stay naked this easy, I guess.\"\n\n\"True, there's that... Although,\" Lizzie purred, turning all the way toward me and knee-walking closer, an impish grin on her succulent syrup-shiny lips, \"I can't help but notice that, right now, you are not naked.\" As she said that, her hands were already cupping the bulge in my boxers, her slim delicate fingers tracing the outlines of my stiffening cock up and down through the cloth. \n\n\"You should really take advantage of the warm weather, Russ,\" Liz teased as she leaned down to lick my lips before pulling back with a giggle. Then, puffing out her chest to push her spectacular tits right under my nose, she added: \"I mean, look at me! All naked in the balmy morning air!\"\n\n\"Oh, I am looking at you!\" I panted, my hands darting to the round meaty globes of her ass. Grabbing onto her sumptuous bubble-butt, I pulled Lizzie closer so I could rub my face on the bulging slopes of her boobs, glorying in their juicy smoothness and their soft, perfect fullness. \"I can't stop looking at you, especially when you have nothing on except your nerdy glasses. You're so fucking hot, Liz!\" \n\nTittering and squirming excitedly as I licked and smooched her epic tits, Lizzie squeezed my boxer-clad boner, cooing: \"Yeah, I can feel your appreciation, Russ. Now let's get you naked so I can see it too.\"\n\nWithin moments, my clothes were lying on the floor and I was sitting back against the headboard with Lizzie straddling my lap, squashing her huge jugs against my chest and pressing her mouth urgently against mine. \n\nThe sugary aftertaste on our lips made our make out session even more intense than usual, causing our tongues to dance and wrestle wildly while we rubbed our naked bodies together. It drove me crazy with arousal to feel Liz's sweet dripping pussy grinding on my rock-hard boner. With her fingers tugging at my hair to pull me deeper into her kisses and my hands roaming possessively along her arched back and majestic bubble-butt, we got into a slow rocking rhythm that caused my cock to slide up and down along her splayed, nectar-slippery labia. Panting with pleasure into my mouth while her erect puffy nipples poked firmly against my skin, Lizzie started working her hips in faster and harder circles, masturbating her budding clit on my pole with needy determination. \n\nThe constant contact with my adored Liz's virgin slit got me so rabidly horny that pre-cum was oozing freely from my cockhead, adding more lubrication to the trickles of pussy juice that already coated my boner, making it even easier for me to slide between her soft, dewy labia. Grabbing the plump fleshy buns of her ass in my hungry palms, I started guiding Lizzie up and down along my shaft while humping in time with her grinding motions, making the both of us moan louder into the other's mouth. \n\nAs we got increasingly turned on and our movements grew wilder, my cock sometimes slipped away from the juice-slick cleft of Lizzie's pussy lips, causing my glans to end up poking right at the tender entrance of her honey pot. A shiver ran down my spine every time that happened. The feel of her warm inner lips wetly kissing my fat purple knob made me grunt into Liz's mouth and renewed the feeding frenzy that was causing me to feast on her succulent, smooching lips like I was starved for her. That in turn made Lizzie kiss me back more ardently while she bounced and rocked harder on my lap, desperately rubbing her clit on my raging boner.\n\nAfter a while, when my shaft had yet again slipped out from between her labia, Lizzie didn't simply wiggle her round rump to resume our grinding position and let my pole get sandwiched by her puffy, juicy groove. Instead, pulling back abruptly from our savage lip-lock, she reached a hand between us and grabbed by massive erection at the base. Then, pointing my boner upward, she scooted and lifted her hips up a bit, aligning me perfectly with her needy, nectar-dripping snatch. \n\nMy heart skipped a beat as I looked down to take in the sight of my bloated mushroom head nestled within Liz's swollen outer folds, anxiously waiting at the threshold of her soaked, virginal opening. The steamy kiss of her inner lips parting for me enveloped the very tip of my cockhead, radiating its moist warmth all around my pulsating glans while her sweet juices started dribbling down my shaft. A jolt of excitement shook me from head to toe as the full realization of what we were about to do dawned on me. Disbelieving my own eyes, I had to blink and look twice at our almost joined sexes before gazing up into Lizzie's flushed, smiling face.\n\n\"I love you, Russ,\" she simply said, her voice thick with lust but still as sweet and melodious as always. While her slender fingers squeezed and stroked the root of my aching hardness, she gave me a long kiss before whispering again: \"I love you so much.\"\n\n\"I love you too,\" I mumbled back, the words flowing out naturally, unfiltered. \"You have no idea how much I love you, Liz... I don't even know it myself!\"\n\nAn unbidden laugh erupted from my panting mouth, matched by Liz's giggle. I was totally lost in her spell-binding brown eyes framed by her cute glasses. My hands were shaking as I caressed her beautiful ass. Her auburn locks were flowing across her shoulders and her big, splendid tits were jiggling hypnotically in time with her heavy breathing. Her smile broadened as I admired her, making her face resplendent with joy. That image etched itself into my brain like a brand, capturing that moment forever. \n\nRaging with horniness, my cock throbbed in Liz's hand and my glans spurted a huge dollop of pre-cum right at the entrance of her soft little pussy, mixing my juices with the wet sheen of nectar glinting all over her drenched slit. Still wide-eyed in wonderment, I haltingly managed to voice some of the thoughts whirling around in my mind. \n\n\"Liz...You're sure about this, right? I mean, I know it's okay, with the pill and all, but... Doing this is, like, uhm... It's huge, I know what it means to you, so... We don't have to do it yet if you don't want to, that's all. Not that I'm saying no, absolutely! I'm all for it, really! But...\"\n\nAs I panted and stammered, so excited that I was barely able to speak, Lizzie leaned closer and gave me a soft peck on the lips, cooing: \"I'm sure, Russ. It's you. It's always been you.\"\n\nAt those words, I felt like I would cum right there and then as the reality of what was about to happen truly hit me. I was about to take my sweet Lizzie's virginity. She wanted me to. She was giving herself to me completely, gifting me with her last and most cherished cherry. Because she loved me. Not just as a friend, a boyfriend and an almost-brother, but as the love of her life, as the man she had chosen to make her a woman. The rush of that realization was indescribable.\n\n\"I... Oh, Liz! Is this really... Are we...\"\n\n\"Yes,\" she just said with a smile as I mumbled and rambled, overwhelmed with affection to the point of being incapable to tell her how happy and in love I was. \"Yes, Russ.\" \n\nThe bright sound of Lizzie's voice faded as her lips met mine and we started lovingly making out. While our mouths joined over and over in a continuous languid soulkiss, the warmth and wetness of her pussy lips bathing my glans gradually increased, spreading lower along my shaft. My heartbeat accelerated even more as I processed the mind-blowing notion that Lizzie was slowly lowering herself down on my cock, letting me slide into her sweet virgin hole. \n\nGasping into her mouth, dizzy with love and lust as more and more of my boner was sucked inside the sopping wet confines of her tight pussy, I tried to hold as still as possible, so that Liz could set the pace of her own deflowering. To channel my boiling passion without doing anything that might cause her pain as she carefully took my cock inside her untouched slit, I kneaded and massaged Lizzie's glorious asscheek with unprecedented devotion while we made out. All the while, I basked in the soft, slick caress of her vaginal walls snugly adhering to me as I penetrated slowly deeper inside her in time with her careful descent. \n\nSuddenly, once the first inches of my length were engulfed within her tender pulsating folds, my glans bumped into an obstacle. Whimpering into my mouth, Lizzie stopped the downward motion of her hips and pulled back from our kiss. That caused her huge boobs to swing beautifully in my face, making my partially buried boner flex inside her delicate honey pot. Planting her hands on my shoulders, Liz looked down at our joining before staring straight into my eyes. \n\nAs my partially-embedded boner throbbed inside her narrow, velvety soft slit, Liz and I paused and breathed out. The intensity of the look we shared was so deep that neither of us felt the need to add anything to the long, meaningful moment of silence that marked the very first access of my cock into her pussy. That was it. Only her hymen remained between us, preventing us to be perfectly and completely fused. \n\nThere was a shadow of anxiety on my sweet Lizzie's face as she took a deep breath and bit her lower lip, knowing what was coming next. Even if words failed me, my body seemed to instinctively know what to do. As the pliant walls of her untouched hole clung tightly to my glans, my hands softly massaged my adored Liz's beautiful ass and moved gently up and down along her back, tracing the line of her spine and the curve of her round bubble-butt with feather-like touches, stroking her smooth skin soothingly as I looked into her luminous brown eyes. We stayed like that for a few long instants, our gazes always locked, the top part of my cock tucked inside her clingy little pussy, the rest still out. \n\nWhen the corners of Liz's mouth curled up in a thin smile, I knew she was ready. I held my breath. \n\nIt all happened in a heartbeat. Lizzie's hands gripped hard onto my shoulders, her nails biting into my skin. Then she exhaled and let herself go, plummeting all the way down on my lap until her plump bouncy asscheeks were resting on my thighs. \n\n\"Uuuhh! Ooowwwh... Oohhh my godddd, Ruuuuss!\"\n\nBefore I even knew it, the thin barrier that had denied me full access to my beloved Lizzie's pussy was broken. With that final resistance yielding and disappearing, my whole cock had been finally allowed to thrust up into her steamy, fiery core. It the blink of an eye I had slipped all the way up inside Liz's slick vaginal tunnel, my bloated glans aiming straight at her womb and my throbbing, nectar-bathed shaft enveloped amazingly in the silky caress of her cozy, suctioning vaginal walls. \n\nMy head spun as I gloried in the sensation of being immersed for tip to root inside a woman's pussy for the very first time in my life. And it wasn't just any woman, either: I was inside my incredible, irreplaceable Lizzie. Through my grunts and her raspy yelps, I somehow managed to speak.\n\n\"Holy shit, Liz!\" I panted, my eyes glued to the mind-blowing sight of her puffy, clingy labia wrapped around the fat base of my cock, the very point where our bodies merged together. \"This is awesome, your pussy feels so good! So hot and wet, and sooo tight! Are you okay, Liz? That was kinda sudden...\" \n\n\"Uuhh... Yeah, kinda... Ooooh fuck! Awwh... Damn it, that hurt!\" Lizzie whimpered in response, her brow furrowed as if in concentration, her eyes scrunched shut behind her glasses. \n\nI took it as a good sign that there were no tears, but it was obvious that she was in pain. I would be lying if I said that I didn't want to start humping away into the heavenly receptacle of Lizzie's drooling cock-caressing slit, but what I wanted even more was for her discomfort to end as soon as possible. \n\nTrying to remain motionless, save for the excited involuntary pulsations of my fully-sheathed boner, I gently caressed Lizzie's stupendous bubble-butt, placing butterfly kisses on her big jutting tits. As I did so, I looked up into her beautiful face, eagerly waiting for the moment when her eyes would open once again and the mask of distress would lift from her face, letting me know that the worst part was over. While I tried to placate Liz with my hands and lips, my adoration and admiration and sheer visceral love for her tumbled out of my mouth between boob-slurping smooches in a broken yet sincere chain of barely coherent murmurs. \n\nAfter a couple of minutes, once her quick ragged breathing had turned into a more familiar throaty cadence of sexy mewls, Lizzie suddenly let out a gasping chuckle followed by a long, shaky sigh. Her hold on my shoulders relented, her hands delicately moving to rest on the sides of my face. Her big brown eyes were shining as they slowly opened and locked with mine. \n\n\"I should have probably let you do this, Russ,\" Liz half-giggled and half-moaned, giving me one of her signature bright smiles. \"I mean it, really. It hurt less when you popped my butt cherry!\"\n\nI couldn't help but laugh along with her. Then I asked: \"Seriously, though. Are you okay, Liz?\"\n\n\"Yeah, it's getting better already,\" she nodded, leaning in and pressing her boobs against my chest. The shift in position made my cock push at a different angle inside her tight dewy tunnel, eliciting a choked yelp from Liz. \"Mmh... It actually feels pretty good now.\"\n\n\"Yeah, it does!\" I readily agreed, nuzzling her face as she tentatively began rocking on my lap, grinding her clit against my crotch while stirring her freshly-deflowered pussy with my thick, embedded boner. \"But just to be safe, I won't move or do anything until you say so, okay? I don't want to hurt you, Liz.\" \n\n\"Owhh, Russ!\" she murmured, tracing her fingers along my jawline and pressing her lips softly against mine. \"You're the nicest guy ever, really, you're the best! But I'm fine, more than fine... I love how you feel inside me, baby. I'm so happy that we're doing this. That's how it's supposed to be, you know? You and I, totally together.\"\n\n\"Yeah, I know,\" I replied, planting a long smooch on my adored almost-sister's panting mouth. \"I feel that way too.\" \n\nAs Lizzie sat on my cock, getting used to having my thick length stuffed to the hilt inside her virginally tight pussy, our lips resumed their restless dance. While we made out, Liz's initial discomfort seemed to diminish by the moment and she began slowly wiggling her ass and shaking her hips, stimulating her sensitive dick-crammed slit with my throbbing shaft. Her sexy little squeals, though muffled by our kissing, showed her growing pleasure in having me inside her. Even if she was basically still just sitting there, impaled on my boner, the sensuous gyrations of her hips were becoming less cautious and more purposeful with each rocking shake of her bubble-butt. \n\nAll the while, I was high on the sensation of Lizzie's untouched vaginal walls reshaping themselves around me and molding flawlessly to fit my invading pole. The silky, slick caress of her steamy sugar passage contracting and squeezing me tenderly from tip to base reminded me of the cock-hugging feel of her rectum, in a way, with some notable differences. \n\nThough incredibly tight and cozy, Lizzie's nectar-slippery pussy was much quicker and naturally willing to accept me than her adorable little asshole, whose crinkled rosy opening required a lot of attention and lubrication before being fully receptive to my penetration. Docile and yielding but still exquisitely snug, Liz's juicy slit lacked that scorching, needy dick-tugging pressure that I had come to associate with her tiny butthole, but that hardly mattered, not while the wetness and softness of her shaft-clutching folds enveloped me in such a delicious, tender grip. \n\nI don't know how long we stayed like that, my cock buried within the velvety confines of Lizzie's tight sopping pussy while we kissed and caressed and let that new level of intimacy wash over our joined bodies. Neither of us was in a hurry, we both wanted to savor the moment. It was our first time having actual regular sex, after all. As minutes went by though, our passionate kisses and the unprecedented exhilaration of being joined into a perfect oneness egged us on. \n\nWith her clit constantly rubbing on my groin and her snug slit eventually adapting completely to being crammed full by my raging boner, Lizzie pushed past the last aftershocks of pain and moved into the realms of unmarred carnal delight. Still munching on my lips and squashing her massive tits against my chest, my amazing girlfriend started moving on my lap, no longer slowly gyrating her hips round and round but getting into a careful up and down rhythm. \n\nWe both gasped as Liz began slowly riding me, our gazes darting down to the sight of her drooling, clingy pussy lips sliding up along my shaft and then gliding back down, so that her engorged labia gradually swallowed up my whole veiny thickness until I was once more slotted balls-deep inside her hot, soft tunnel. When we looked up into each other's eyes again, Lizzie's expression was wild and dreamy at the same time, and I guess my face must have looked pretty much the same, if not more awestruck.\n\n\"Uuuhh, Russ... Ooohh baby, this is amazing!\" Liz whimpered brokenly as she lifted herself up again and then slowly descended down to engulf my shaft completely within her sweet little slit. Her first few passes were tentative, but she was gaining more confidence at every fluid, dick-stroking pass. \"Your cock feels so good inside me... Ooh, you fill my pussy soooo much!\" \n\n\"Fuck, Liz, I love your pussy!\" I grunted, drunk on the tender suctioning pulsations of her hot syrupy hole but also on the sight of Lizzie starting to ride me more and more determinedly. \"Aarghh, you're so tight and wet... This is even better than I imagined!\"\n\nAfter a few more snatch-cramming bounces, as our moans got louder and our breathing quickened, Lizzie let out a choked giggle while an impish grin danced on her panting, wide open lips. \"So, Russ... Uuhhh! Is my pussy better than my ahhh... Than my tight little asshole? Ooowh!\"",
        "\"No way, Liz! You have the cutest, tightest, most awesome asshole ever!\" I blurted out without thinking, my hands automatically grabbing harder onto her fabulous bubble-butt. I instantly realized that it wasn't exactly the most appreciative thing a guy might say about a girl's pussy while he's inside it, but, in my defense, I was just too lovestruck and lust-high not to be totally honest. \"Uhm... What I mean is...\"\n\nA throaty laugh and a deep soulkiss silenced me, while the persistent riding motion and the silky, slippery caresses of Lizzie's slit sliding along my pole let me know that, luckily, she must have understood what I meant. Murmured over the intoxicating sounds of her plump ass clapping on my lap and of her drenched clingy pussy squishing up and down my shaft, Liz's husky words confirmed her appreciation.\n\n\"It's okay, Russ. Uuhh yeees... I'm glad to know that my ass is still number one for you. Oohh, I wouldn't want you to lose interested in my horny little butthole just because you can have my pussy too now! Aawhh baby, your cock is making me feel so good! Ooohh!\"\n\n\"I could never stop wanting your beautiful ass! Aaahh fuck!\" I grunted, starting to buck my hips up to meet her riding motions and letting my fingers roam all over her fleshy rump. \"Never, Liz!\" \n\n\"Mmh, I hope so-ooh-ooohhh! Uuhh Russ...\" Lizzie yelped, panting and writhing as my restless digits descended into her butt-cleavage. A sharp gasp escaped her tumid lips as soon as the tip of my forefinger made contact with her tiny, neglected sphincter. \"Ooh yes, baby! Yeees!\"\n\nHer lips smashing furiously against mine and the rush of lust that made her start bouncing harder and faster on my cock were all the encouragement I needed. As I kissed Liz back with matching passion and humped my aching length upward into the snug nectar-soaked sheath of her pussy, I swiftly dipped my ass-probing fingers into the rivulets of sweet nectar trickling from her slit and then began titillating her anus with them, eliciting louder and deeper moans. \n\nGently, feeling my swollen boner hardening even more inside her tender cock-massaging tunnel as her vaginal muscles contracted wetly around me, I eased my forefinger into Lizzie's willing puckered rosebud. Her eyes were shut and her eyelids fluttered crazily while my digit disappeared completely inside the warm, smooth tightness of her rectum. As I began finger-fucking her twitching asshole, Liz's squeals of pleasure were muted by our persistent lip-lock. Trembling in ecstasy, she held my face firmly in her hands, sucking my tongue into her mouth so hard that it almost hurt. \n\nI should have expected it I guess, but once again I was floored by Lizzie's enthusiastic reaction at having her sensitive little rosebud played with. It was like pushing her 'cum more' button, or something. Howling wildly and arching her back, my sweet Liz suddenly unclasped her mouth from mine and switched gears, riding me harder and rushing desperately to her climax. Thrusting her big spectacular tits right into my mouth, she bounced away on my lap like a gorgeous demoness from hell, impaling her holes on my pussy-plugging cock and ass-pumping finger at the same time. \n\n\"Oohh my fucking god, yeeeesss... Uhhh Ruuuuss!\" Lizzie yelled out while I kissed and licked and slurped away all over her huge wobbling boobs. \n\nSawing my forefinger fluidly in and out of her anus as I humped up into her snug juicy slit and feasted on her splendid tits, I made it a point to nibble on Liz's swollen nipples whenever her wild bouncing allowed my mouth to stay clamped on those puffy, suckable pink buds long enough. The combined stimulation of her cock-crammed pussy, well-smooched tits and finger-banged butthole was clearly having an effect on Lizzie, as her delicious screams of pleasure testified.\n\n\"Give me more, baby, I'm so close... Uuuhh fuck me, Russ... Fuck meee! More, I need moooore!\"\n\nCrazed by the feel of her freshly deflowered pussy contracting around my raging dick while her tight little asshole twitched excitedly in response to my faster and deeper butt-fingering, I pumped my hips upward like there was no tomorrow and decided to ease a second nectar-lubed digit past my sweet Liz's docile sphincter. Slowly worming my way into her insatiable ass, I managed to sink my middle finger knuckle-deep into her butthole in one long easy push. The increased sense of fullness inside her receptive rectum undid her completely. \n\nTossing her sex-tousled hair around while letting out a half-choking and half-whimpering groan, Lizzie shivered and remained motionless on my lap for a second, her pussy lips wrapped tightly around the wide root of my cock, her glorious round buttcheeks pressed firmly on my thighs as my two fingers remained embedded deep inside her ass. Her mouth was shaped into a perfect O as she enjoyed the sensation of having both her snug holes stuffed full at the same time. \n\nThat image of Liz sitting on me, writhing and panting as I pulsed and throbbed inside her was the last drop for me too. My balls tingled and my cum started surging along my fat cock at the feel of her, at the sight of her, at the very idea that I was responsible for gifting my beloved Lizzie with that moment of almost unbearable joy. It was just a second, though, a moment of blissful stillness, then the storm broke. \n\nAs I growled into her big bulging tits and rammed my boner up into her molten core, my pistoning fingers sliding deeply into her anus all the while, Liz rose up and then slammed her juicy bubble-butt down, hard and fast, again and again and again. While I strained to ride out the insane pleasure of those few hyper intense seconds, Lizzie yelled out each time her bouncy asscheeks clapped against my thighs, marking the instant when my glans rammed all the way up into her pussy, pushing as far into her vaginal channel as possible, and my fingers were jammed completely inside her needy, pulsating asshole. \n\n\"Uuhh! Ruuuuss! I... I'm... Uhhh fuuuuck!\"\n\nUnable to speak with a mouthful of soft tit-flesh in my mouth, moments from blowing my load inside her tight suctioning pussy, I bit down into one of Lizzie's gummy nipples and reached down between us with my free hand, until I met the tiny tuft of juice-matted pubes on her mound. Her clit was slick and pulsing madly when my fingertips brushed over it. Leaving my ass-fucking digits sheathed all the way into her clenching butthole, I thrust my cock into her slit one last time and rubbed away on her clit. \n\n\"Uuuhhh yeeeeees!\" Lizzie gasped, trying to yell in pleasure but choking on her words. \"Ruuuuuss! I'm c-cu-uuhh... Cummiiing!\"\n\nAs the soft steamy walls of her climaxing pussy clamped around my bucking boner, I exploded in a torrent of cum inside my amazing Lizzie. Jet after powerful creamy jet splashed deep inside her gushing vaginal tunnel, filling her womb with my first massive ejaculation of the day. Her yelps of release were ringing in my ears like the sweetest music ever, making my heart swell with love while the contractions of her nectar-slick, sugary passage massaged my thick spurting length in a tender, velvety grip that empowered my climax to the extreme. \n\nAs we rode out our toe-curling orgasms together, I could feel Liz's asshole squeezing crazily around my fingers in time with the pulsations of her cozy little slit milking my cock. With my face wedged in her ample pillowy cleavage, I tried to breathe while still feasting on her luscious tits. All the while, as I sprayed long ropes of seed into her welcoming body, I could hear Lizzie's heart thumping right there, under her soft boobs, by my ear, beating at a breakneck booming tempo that matched the insane rate of my own pulse.\n\nBy the time we descended from our peaks, my crotch was soaked in Lizzie's flowing girl-cum and I had flooded her hot little pussy with so much sperm that some of it was seeping from her puffy labia and starting to pool around the girthy base of my cock. I was still panting into her fabulous tits when Lizzie collapsed heavily onto me, utterly drained. Puffing and catching her breath, she rocked and shifted on my lap with dopey motions until she managed to raise her tired curvy form from my impaling boner. \n\n\"Oowhhh!\" she winced while my juice-coated shaft vacated her no longer virgin pussy. \n\nAs my bloated glans slipped out of her sweet hole and my chubby dick plopped wetly on my abdomen, a squishy overflow of our mixed juices followed. I couldn't help but notice that the white gooey rivulets of cum dripping out of Liz's slit were streaked with red here and there, a testament to her torn hymen. I would be lying if I said that the sight of Lizzie's virginal blood didn't hit me. The presence of those diluted crimson drops among our mixed love juices had an unmistakable aura of atavistic solemnity to it, a sort of implicit significance, conveying a definite 'before and after' feel that was not lost on me. \n\n\"Wow, look at that!\" Lizzie giggled, remaining suspended over me as we both watched our joined essences trickling from her pussy and drooling down on my cock. \"You came so much, Russ.\"\n\n\"I sure did,\" I panted, smiling up into her radiant face. \"And so did you, if I'm not mistaken!\"\n\nAs she unstraddled me and threw herself into my inviting arms, Lizzie laughed and snuggled tightly in my embrace before giving me a big long smooch, humming with contentment. With a satisfied whimper, she rested her head in the hollow of my shoulder and closed her eyes, murmuring slowly. \n\n\"I loved it when you came in my pussy, Russ. It felt great, I'm so happy we did this,\" she said dreamily. Then, with a giggle, she added: \"You know, all that creamy cum still inside me feels like the perfect balm to soothe the soreness a bit!\"\n\n\"Always glad to be of service, m'lady,\" I chuckled, loving the softness and warmth of Lizzie's naked body rubbing against mine. As I brushed a few wild locks away from her forehead, I couldn't help but look at the full fleshy curve of Liz's epic ass protruding beautifully from her back, seemingly begging for attention. Heeding the call, I reached down with my free hand, immediately starting to caress and massage those magnificent juicy globes. \n\n\"Mmh, that's soothing too...\" Lizzie cooed, cuddling closer and wiggling her bouncy bubble-butt into my kneading palm. Slowly opening her eyes, she smiled as she went on: \"I thought I was having a stroke or something at the end, you know... It felt crazy good to have you in my pussy while you played with my asshole and sucked my titties at the same time. When I came it was so intense I could barely breathe!\"\n\n\"I noticed,\" I replied, nuzzling her face and sniffing the signature smell of her fair skin and fragrant hair. \"It looked like you were having lots of fun.\"\n\n\"I was, Russ, and then some! I mean, having you inside both my holes, your cock and and your fingers together, it was awesome!\" she said, her voice thick with lingering arousal. \"And when you touched my clit too, oh my gosh! It was, like, BOOM!\"\n\nI laughed with her but was stopped mid-chuckle by a long, intense kiss. \n\n\"Thanks, Russ,\" Lizzie said as soon as our mouths let go of each other. \"Thank you. For everything, for being so patient and caring and, well,\" she grinned, assuming an air of mock-solemnity, \"for making me cum so much all the time!\" she concluded, laughing but clearly meaning every word.\n\nI hugged her tight and kissed her succulent lips until I had to come up for air before I spoke. \"You're the best, Liz. I love you.\"\n\n\"Love you too, baby,\" she murmured into my mouth. Then, smirking, she added: \"And I swear that I'll let you run the show next time I need a cherry popped. Seriously, this was great but I should probably have gone easier on my newbish pussy!\" \n\nWe both laughed at that. Staring raptly at that bespectacled, glowingly beautiful face I could never get tired of admiring, I exclaimed: \"Next time?! How many more virginities do you have to lose, Liz? I mean, sure, I'll do the honors very gladly, but as far as I know all your cherries are gone already! Aren't they?!\"\n\nGrinning impishly and yet managing to look as sweet as ever while she shrugged and held me tighter, Lizzie purred: \"All my holes have been claimed by you, Russ, as intended. My mouth, my asshole and now my pussy too. They're all yours, baby. But who knows,\" she giggled, \"maybe noses and ears will be sexable holes too, someday... I might give it a try, if you're in for it!\"\n\nThat made me cackle like a maniac. \"Noses and ears!? Holy shit, Liz! Even hypothetically, how would you ever fit a cock into a nostril?\"\n\n\"I have no idea!\" she chuckled, making a silly expression. \"That's why I'm putting you in charge of my theoretical and very unlikely other virginities!\" \n\nJoking and laughing, we stayed like that for a while longer, snuggling and recuperating. After a bit, while Lizzie rested her head on my chest, my gaze returned to the pool of seed and girl-cum splattered on my crotch. Again, the red flecks of blood in it captured my interest. As soon as Liz noticed it, she cupped my chin in her tiny hand and made me turn her way, locking gazes with me. \n\n\"Russ...\" she slowly began, already smirking even as she attempted to put on a serious face. I knew what she was about to say, so I immediately tried to stare her down and stop the incoming conversation in its tracks.\n\n\"No!\" I firmly declared. \"No, Liz. I know what you're thinking, and you're wrong!\"\n\nShe just looked at me harder, her smirk getting bigger, if that was even possible. \"Are you sure you're okay, Russ?\" she teased mercilessly as I sulked, anticipating the rest. \"You seem a little pale... You're not going to pass out on me, are you?\"\n\n\"What the hell...\" I grumbled while Lizzie burst out laughing. \"I was ten, okay! Ten, and scrawny and I hadn't had breakfast that morning, and that damn needle was just scary as shit. And I barely even passed out at all... I was just a bit woozy, that's all.\" \n\n\"You were out cold, Russ, I was there! Remember?\" Liz went on, poking me in the ribs as she unearthed the one moment from our shared past that I wish we hadn't spent together, so she wouldn't have seen me faint at the doctor's office that morning long ago, when our Moms took us in for a checkup that, alas, included taking blood samples. \n\n\"You went super pale and your eyes kinda rolled back in your skull and then you fainted, like a little girl! I, on the other hand, an actual little girl at the time,\" Lizzie proudly said, squashing her ample boobs into my chest more firmly as she nuzzled my grumpy face, \"well, I didn't so much as flinch, neither at the needle nor at the sight of blood.\"\n\n\"Yeah, well, I never liked blood much, okay,\" I sighed. \"And I'm not a big fan of needles either... But I'm not pale now, and I'm not gonna faint because of a few drops of your cherry blood!\"\n\n\"My 'cherry blood' he says! Oh, for shame, sir! That's my maidenhead you're so disparagingly talking about!\" Lizzie proclaimed in an exaggeratedly lofty tone, countering my sulkiness with a theatrical expression of comic hurt-dignity. \"You've made a woman of me, blooding your sword into my carnal flower and soiling my purity forever, so have the fortitude not to faint now, sir!\"\n\nHer nose upturned, her face poised so that she was looking down at me while affecting aristocratic detachment, Lizzie stared at my baffled visage for a few seconds in mock-haughty silence. Then she winked and broke into a laughing fit. Honestly, how could I ever even begin to be mad at her?\n\n\"Alright, I admit it,\" I resignedly conceded. \"I did sort of pass out back then. But it was a long time ago, I'm fine now!\"\n\n\"Sure, sure...\" Lizzie grinned as she suddenly sat up on her knees and jumped out of bed, making her huge round tits wobble deliciously. \"Now, how about we go take a shower and wash all the gory remains of my deflowering away?\" \n\n\"Sounds good,\" I agreed wholeheartedly.\n\n\"Just remember to keep your eyes closed and let me scrub it off for you. I'll tell you when it's safe to open your eyes again, after the blood is all gone,\" Lizzie said, snickering and already heading to the bathroom. \"We don't want you to pass out in the shower and hit your head or something, right?\"\n\n\"What?! Hey, come back here!\" I roared as I reached for a squealing, giggling Lizzie. Her silvery laughter echoed from outside the door as I shook my head and got out of bed, rushing after her with a smile on my face.\n\n***** \n\nThe sheen of water shining on her skin made Lizzie's gorgeous curvy body look so insanely sexy that I pretty much had a chubby from the moment we began to shower. Of course she had left her glasses out of the stall, removing what was to me the ultimate finishing touch to her naked beauty, but the patter of droplets rushing down her big jutting tits and bouncing off her plump bubble-butt more than made up for the lack of that weirdly erotic detail. \n\nAfter she made a big show of washing off the gooey and slightly blood-streaked remains of our mixed juices from my groin, giggling and smirking but refraining from cracking more jokes at my expense, Lizzie took my hand and guided it down her cute tummy, resting it on the tiny and neatly trimmed tuft of wet pubes on her mound. Arching an eyebrow invitingly as she spread her legs, she let go of my hand and got on her tiptoes, planting a soft kiss on my lips. \n\nNeeding no further instructions, I gladly proceeded to clean Liz's lovely little pussy, trying to be as gentle as possible with the puffy, sensitive slit that I had just been so lucky to deflower. By the time I was done delicately caressing and massaging and rubbing her sweet steamy folds, Lizzie was squirming with arousal all over again, breathing just as hard as I was.\n\nLocked in a tight embrace, we ran our hands all over one another's body. With my stiff shaft resting between her soft pussy lips and brushing constantly over her swollen clit, Lizzie and I carefully soaped each other up and then rinsed off the suds, taking our time as we savored the feel of one another's skin lingering on our fingertips. Basking in the revitalizing spray raining down on us, we lazily kept grinding our crotches together all the while. Liz's contented humming grew into a deeper and way more intense moaning when I finally let my hands touch the last tiny bit of her gorgeous body that I had intentionally delayed cleaning until then, the one hyper sensitive spot that we both wanted to focus on the most: her adorable little asshole.\n\nAs my hands parted her spectacular bouncy asscheeks and my soapy digits made their way into her deep buttcrack, Lizzie cooed and leaned against me, squashing her pillowy tits into my chest. A beatific smile danced on her slightly parted lips and her breathing quickened as I held the fleshy round globes of her rump wide apart with my palms, allowing both my soapy forefingers to touch her tiny pink rosebud. Liz wrapped her arms around my neck and mewled in appreciation as I delicately pulled the crinkled rim of her sphincter apart, gaping her asshole and teasing her with slowly circular caresses all around her rubbery butt-ring, getting it nice and slick with shower gel. \n\nWhile water kept running down her arched back and flowing into her splayed butt-cleavage, making it all wet and shiny, I eased my right index finger into Lizzie's winking anus. As I carefully slipped my digit all the way into the snug, smooth warmth of her rectum, Liz dreamily asked: \"Russ... Ooohh! Do you think I'm weird? Uhhh... That feels so good, baby!\"\n\n\"Of course I think you're weird, and I love it! It's one of your very best qualities,\" I laughed, gently pumping my forefinger in and out of her pliant little butthole. Burying my digit deep into her tight anal tunnel and starting to worm my other soap-slick forefinger into her tiny forbidden orifice too, I went on: \"Trust me, Liz, your weirdness is awesome. Not as awesome as this legendary ass of yours, of course, but close enough!\"",
        "\"Aawhh thanks, Russ...\" she replied, giggling through her moans while I masturbated her anus with both my index fingers, holding her twitching orifice slightly gaped all the while. \"But what I meant... Uuhh fuck yesss...\" Lizzie tried to resume, finding it difficult to talk as her pleasure grew. \"Oohh yeah, baby, finger-fuck me like that! I mean, like, isn't it seriously weird that I'm so much into butt stuff? Because, now that we've had regular sex, I kinda know for sure. Uuhh yes, faster, yesss... I love anal, Russ, I just love it! Really, I think I like it in my butt even more than in my pussy. Uuhhh... It doesn't matter if it's your tongue or you fingers or ooh-ooooh god yeees!... Or your big hard cock... Anal gets me so horny, I always cum like crazy when you do stuff to my ass. Uuhh fuck, so good! Do you think there's something wrong with me, Russ? Oohh god, that's iiit!\"\n\nSawing my soapy digits into her tight slippery anus, I looked into Lizzie's beautiful pleasure-glowing face and smiled. She was rocking her juicy bubble-butt back and forth to match my ass-fingering motions, grinding her clit against my hardness at the same time, yet her big soulful eyes, lust-glazed as they were, looked into mine with that guileless directness I always loved about her, honestly requesting my opinion.\n\n\"Liz, there's nothing wrong with you, believe me. You're totally amazing in every way,\" I told her before planting a long smooch on her panting, succulent mouth. \"And the butt thing is amazing too, if you ask me. Granted, I may not have much experience with girls,\" I conceded, \"what with you being my one and only... But seriously, it seems that quite a few women out there are into anal, so it's perfectly fine that you are too. And yes, some of them like it even more than regular sex, or at least the internet says so.\"\n\n\"Mmhh... Your one and only...\" Lizzie murmured, her smile widening while her breathing got more ragged and the pleasurable twitches in her cozy anal tunnel got more intense. \"I like the sound of that... Uuhhh fuck yeees, keep fingering my ass like that, baby! Ooowhh... So you don't mind that I'm some kind of anal slut?\"\n\n\"What!?\" I had to laugh and kiss her again, harder, my boner pulsing excitedly against her wet labia while a sticky dollop of pre-cum spurted from my glans and oozed onto her soft tummy. \"Liz, I love that you're so much into anal! How could I not?! One thing, though,\" I stated with as much seriousness as I could muster while holding her voluptuous pleasure-shuddering body in my arms and still pumping my fingers into her snug asshole, my palms overflowing with her juicy, fabulous bubble-butt, \"I do resent the use of the expression 'anal slut' while referring to your amazing self. It's a very limited and misleading definition, Liz. Besides, we've already established that you deserve the title of 'anal queen', haven't we?\"\n\n\"Oohh yes, Russ, yeeesss!\" she yelped in response, her mouth going slack in a half-smile half-gasp of release as she started cumming. Her warm, snug anus was pulsating rhythmically around my butt-pumping fingers while the rubbery ring of her sphincter clenched and unclenched like a tiny nibbling mouth. Liz's clit-rubbing gyrations against my rigid boner became wilder and more urgent for a few seconds as she rode out what looked like a quick, stabbing climax. \"Uhhh fuck, yeeeaah! Oohh god, my ass is cumming on your fingers, babyyy!\"\n\nThe tell-tale spasms of her smooth steamy rectum gripping tightly onto my digits made me both happy and aroused, as did the long and deeply satisfied sighs that Liz let out as she closed her eyes and enjoyed her rush of release. It was such a reward to see my sweet Lizzie cum, I loved knowing that I was making her feel good like that. \n\nAs her orgasm faded and I slowly withdrew my forefingers from her twitching butthole, I kept lazily playing with the elastic, shrinking rim of her sensitive orifice as Liz rested her head on my chest and hugged me extra tight. After taking a few deep breaths while descending from her peak, she turned her pretty face up, offering me her exquisite lips which I immediately sucked into my mouth in a long passionate smooch. Then, grinning impishly, she whispered: \"Russ...\"\n\n\"Yeah, Liz?\"\n\n\"That was really nice, but it just made me want more!\"\n\nAfter another longer and deeper kiss, pushing her sumptuous rump against my fondling palms and winking her eager asshole around the tip of my sphincter-teasing fingers, Lizzie looked me in the eye and wrapped her tiny hands around my massively erect boner. \n\n\"I need this now, baby,\" my amazing girlfriend purred. \"I need you to stick this big hard cock deep in me, all the way inside my ass.\"\n\nThe need, the genuine desire in her voice was just as erotic as the words themselves. It had been just a couple of days since the last time we had had anal sex, and we had done plenty of butt stuff in the meantime, but, as I drank in the urgency in Lizzie's request, I couldn't deny that, despite the awesomeness of claiming her virginity, I was still totally hooked on her ass and I wanted to sodomize her more than ever. \n\nThe prospect of burying my raging erection between Liz's majestic fleshy buns and of delving as deep as possible into her tight warm rectum made me drunk with horniness and anal lust, just as she herself already was. Instead of replying, I turned the water off and crushed Lizzie in a bear hug, kissing her rabidly and making her squeal into my mouth as we stumbled out of the shower stall, still lip-locked. Once her cute glasses were once again in place, we quickly dried each other off, panting and looking at the other like hungry animals all the while, before throwing the towels away to rush back to my bedroom.\n\nMy eyes never left the bouncy juiciness of Lizzie's plump asscheeks as I ran after her, my raging hard cock wagging before me and pointing straight at that gloriously round rump of hers. The view got even better when she climbed into bed and got on all fours, arching her spine and tilting her fabulous bubble-butt up high. My mouth was literally watering as Lizzie slowly wiggled her magnificent heart-shaped masterpiece of an ass with jiggly side-to-side sways, making my throbbing dick harden so much that it almost hurt. \n\nAs she lowered herself down on her elbows, resting her pretty face sideways on my pillow and squashing her huge bulging tits into the crumpled sheets, Lizzie looked back at me over her shoulder. She had a smile on her lips and a wild glint in her bespectacled eyes while she cooed invitingly: \"Do you like my ass, baby? Do you want to fuck it hard and deep with your big cock?\"\n\n\"Oh fuck, yes, Liz! Yes!\" I blurted out, getting into bed and knee-walking as if in a trance until I was right behind her voluptuous bent-over frame. \"I love your ass and I want to fuck it so bad right now!\"\n\n\"Mmhh good, because that's exactly what I want too!\" Lizzie chuckled, purring contentedly as I ran my restless hands all over the round, smooth globes of her perfect bubble-butt. As soon as I parted her soft luscious asscheeks to reveal the adorable tiny star of her sphincter, the words tumbled out of my mouth of their own volition. \n\n\"Wow, Liz...\" I panted as I drank in the sight of that sweet rosy pucker twitching excitedly before my eyes. \"Your asshole is so beautiful! You have the pinkest, tightest, cutest little butthole ever! It's crazy, I know, but... It's actually winking at me, like it's puckering up to blow me kisses, I swear!\"\n\nThat odd declaration was barely out of my mouth and Lizzie's cooing giggles still echoed in my ears as I dipped my head down, burying my face between her fabulous fleshy buns. After giving a long swiping lick to her delicious wet pussy, I clamped my lips onto her crinkled butt-ring and gave it the first in a long series of sloppy suckling smooches, starting to french-kiss her anus with all the passion and devotion it deserved. I was so drunk on anal passion that, for a while, I lost myself in a lewd make out session with Lizzie's hot pulsating rosebud, focusing entirely on kissing and licking and tonguing the tender gummy rim of her most intimate, most delicate orifice. By the time I straightened back up on my knees and locked gazes with Lizzie again, her adorable rubbery asshole was soaked and glinting in my spittle, which made it even more beguiling.\n\nSighing contentedly and shaking her juicy booty, making her meaty asscheeks jiggle in the sexiest possible way, Lizzie had a huge smile on her face as she laughed: \"Aww, Russ, you're so sweet! You say the nicest things to my butthole and you treat it so nicely, with lots of kisses and all! Now, let me get it ready for you to fuck, baby...\" \n\nReaching toward my nightstand, Liz got the bottle of lube I kept in my drawer and uncapped it, looking sultrily over her shoulder at me all the while. As I held her bouncy buttcheeks nicely spread, my amazing girlfriend poured a generous dribble of lube onto her horny asshole and then made a great ceremony of massaging it gently all over that tiny forbidden orifice that we both couldn't wait to get nicely stretched out and filled up. \n\nAs Lizzie ran her digits round and round her lovely slippery butt-ring, I edged closer and nestled my achingly hard boner between the soft plump globes of her ass. The long sexy purr that escaped Liz's mouth as her slim forefinger entered her eager sphincter was my cue to take the bottle of lube from her. While she cooed and pumped her oily digit in and out of her twitching pucker, I dribbled more of the slick fluid all over her buttcrack, getting my raging erection nice and slippery as I let a healthy dose of lubricant trickle on her ass-pumping finger and into her willing hineyhole as well. \n\nPanting and squirming as she masturbated her own ass, Lizzie started poking at the entrance of her well-greased backdoor with a second digit. While I held the rim of her butt-ring apart with my thumbs to help her gain better access, Liz slipped her middle finger into her receptive little orifice. Egged on by her long, throaty moans, I pressed my slick boner more firmly into her asscrack and started sliding it up and down between her sumptuous buttcheeks. Drooling at the sight of my girlfriend's fingers sliding in and out of her irresistible tiny asshole, I tentatively ran my forefinger around her dilated sphincter, adding more lube as I traced its rosy, elastic rim. \n\n\"God, Lizzie... You're so fucking hot!\" I panted, slowly humping my pole into her butt-cleavage in a sort of tit-fucking motion, rubbing her distended orifice with my greasy fingertip all the while. \n\nAs I lustfully massaged her needy pink rosebud, I realized that Lizzie's asshole was as mollified and relaxed as it was going to be. Trembling with arousal, I stopped tracing circles along the pliant edges of her butthole and tried to ease my forefinger into her welcoming rear passage instead, wishing to add it to her two persistently ass-pumping digits. Liz's breath caught in her throat as my finger gently slipped past her oily dilated opening and entered the snug warmth of her anus. \n\n\"Oohh yeess, baby... Uuhhh! Finger my ass with me...\" Lizzie panted as my digit slowly but surely sank all the way into her slick cozy rectum and I started to move it in and out in time with her two slender, butt-probing fingers. \"Oohh fuck yeesss, Russ! Help me open my naughty little asshole for your big cock... Oohhh god yeeeaahh!\"\n\nIf I hadn't already cum in her virginally tight pussy earlier, I'd probably have blown my load right there and then, painting the fabulous smooth hillocks of Lizzie's bubble-butt with cum. The fact that we were masturbating her ass together was so insanely erotic! Her words, her shivers and her sexy groans of pleasure, the sight of our joined digits sawing fluidly in and out of her slippery, stretched out sphincter: it was simply mind-blowing. \n\nI was enjoying those naughty preparations so much that I was caught by surprise when, just as her pulsating anal tunnel started rippling more intensely around our joined digits in pre-orgasmic fits, Liz suddenly scooted forward and removed her fingers from her hungry little orifice, causing mine to pop out too. Baffled as I was, I couldn't ask her why she did that, because the vision of her gaping, lube-glossy asshole slowly tightening back to its usual puckered state mesmerized me completely. Lizzie's next words did reach me, though.\n\n\"Your cock, baby... Put it in me now,\" she cooed, wiggling her epic ass and holding her plump buttcheeks splayed open with her delicate hands, so that I could see her adorable pink star winking enticingly at me. \"I'm so fucking horny, Russ. I need you to stick your cock deep in my ass before I explode!\" \n\n\"Lizzie,\" I mumbled, my eyes meeting hers as I guided my massively erect boner to her oily anus with one hand while I rested the other palm on top of one of her tiny butt-parting hands, \"I love your ass like crazy, but I fucking love you even more!\"\n\n\"Oh, baby!\" Liz smiled as I nudged my bloated purple glans against her exquisite little rosebud and gently pressed forward. \"I love you too-oowh-oowwhh... Uuuhh!\"\n\nEager, slippery and well-readied as it was, Liz's tiny asshole surrendered even more willingly than I expected. At the very first tentative push, my spongy cockhead and a couple of inches of my shaft punched right through her elastic butt-ring almost effortlessly, slipping past her sphincter with a squishy suctioning pop and allowing me to penetrate my adored Lizzie's epic ass. \n\nA jolt of pure lust ran through my body as I watched the tender, sensitive rim of Liz's hineyhole stretching and blossoming out around my girth, enveloping the first inches of my boner in a warm snug grip. I stopped there, glorying in the spectacle and feel of her slick dilated butt-ring wrapped around my thick erection while her clenching anus massaged me and adapted to my ass-cramming presence. I meant to remain still and let Lizzie's clingy butthole adjust to my partially buried shaft, but she clearly had other ideas.\n\n\"Nooohh, baby, don't stop! Ooowhh... Pleeease, keep going!\" she squealed between choking breaths, looking back at me with a needy, lustful spark in her eyes. \"Uhhh fuck, Russ... You feel so good in my ass, so hard and big! I missed this sooo much! Give me more, baby, pleeease... I want all of you deep in my asshole! Ooohhh... Open me up, Russ, fill my ass with your cock!\"\n\nWhile she spoke, Lizzie let go of her asscheeks and grabbed onto the sheets with one hand while reaching the other under her curvy bent-over frame, aiming straight at her clit. Her moans got louder as her fingers started rubbing away on her engorged bud, making her tight slippery asshole twitch deliciously around my stiff, butt-stretching dickmeat. \n\n\"Fuck, Lizzie, I missed your beautiful ass!\" I grunted as I filled my palms with the luscious, juicy perfection of her buttcheeks. I was straining to remain motionless while she got used to my invading presence inside her anus, even though I sensed that her distended little sphincter was relaxing and adjusting quickly. Still, as much as I ached to sodomize her hard and deep, I was more than willing to give my beloved Lizzie a couple more minutes rather than cause her any pain. \n\n\"Sure you're ready, babe?\" I asked as I tried to steady my breathing.\"I'll wait a bit if you need me to, just say the word,\" I reassured her, adding with a snicker: \"Just don't make me wait too long!\"\n\n\"Nooooh! I'm ready, I'm sooo ready... Uuhh god!\" Liz replied breathlessly, flashing me one of her heartwarming smiles. \"You got me so fucking horny, my asshole is tingling like crazy! Fuck my ass, Russ, I need to feel you deep inside me, now ooowhh... My ass needs your cock so bad, baby!\" \n\nThat sweet dirty talk interspersed with husky moans, the genuine urgency in her voice, the look of utter desire painted on Lizzie's pretty face; it was all I needed to go off my final reservation. My amazing girlfriend wanted me to fuck her butt just as much as I wanted to buttfuck her, and I was not going to keep her waiting any longer. \n\nWith a fluid steady push, I pressed forward, letting my swollen throbbing shaft sink into Lizzie's hot, oily asshole. To the sound of our joined moans, I gently but firmly kept wedging myself inside the massaging warmth of Liz's tight little anus, grabbing and kneading her amazing bubble-butt in my hands all the while. As I stared at the breathtaking vision of my fat cock disappearing into the pliant stretched out ring of her sphincter, I grunted in pleasure at the feel of Lizzie's cozy dick-hugging rectum enveloping more and more of my length in that gripping, tugging caress that I had come to associate with the most intimate and sensuous union of our bodies. \n\nAttuning to her responses, reading her squeals and shivers and gasps, I progressed deeper and deeper inside Liz's tiny asshole, going slowly but surely. As I pushed into her exquisite snugness a millimeter at a time, I slowed almost to a stop whenever her slick anal walls cramped and resisted me, only to then resume my patient delving plunge as soon as I felt the squeezing hold of her velvety rectal muscles relent a bit. Taking my time to gradually widen her adorable little butthole and make it open up for me completely, I eventually managed to feed Lizzie's tight cock-gobbling anus every last veiny inch of my pole, easing myself inside the welcoming, suctioning receptacle of her anal depths in one single unhurried gliding push, until my balls were resting on her soft dripping pussy and my thighs bumped against her luscious, cushiony buttcheeks. \n\n\"Oh my fucking god, Liz!\" I gasped as I bottomed out inside her ass. I was high on the heavenly feel of her smooth slippery anal walls clenching and unclenching around my fully buried length, milking my boner from tip to root as she accepted me inside her sensitive, incredibly snug rectum. \"Your asshole is so tight! I can't believe how fucking good you feel! Aahh Lizzie, I love your ass!\" \n\n\"Uuhhh, Russ, I love having you in my aaaass!\" Liz wailed in response, her clit-diddling fingers strumming away so desperately that they made squishy, beautifully lewd noises at her every whirling rub. \"Oohh my god, this is amazing, baby... My ass is sooo full of you!\" \n\nAs I flexed my cock deep inside her buttery bowels, Lizzie's soulful eyes were half-closed in ecstasy and her glasses rested a bit skewed on her pretty face, which was all flushed and distorted into a mask of blissful ecstasy. She looked so stunningly sexy right there and then, and the sight of her dilated little butt-ring wrapped firmly around the broad root of my cock only made the whole picture even more memorable. My fingers sank possessively into her bouncy plump bubble-butt as I gloried in that moment, until Liz's deliciously slutty words broke my trance.\n\n\"Fuck my ass now, pleeease!\" she begged, rocking her booty to stir her rippling rectum with my deeply wedged shaft. \"Oohh, Russ, I love this! Fuck my tight ass now... Uuuh, fuck my aaass!\" \n\n\"Oh yeah,\" I grunted over Lizzie's broken squeals of impending release while I slowly withdrew my pole from the clingy confines of her anus until just my glans remained tucked inside the cock-hungry grasp of her slick, pulsating sphincter. \"Now I'm gonna fuck your ass, alright.\"\n\n\"Uuuhh Ruuuss, yeees!\" Liz screamed as I stuffed my boner all the way into her well-lubed, totally willing little orifice again, sliding up her ass until my groin was glued to her fleshy round buttcheeks. Another yell of unbridled anal ecstasy erupted from Lizzie's slack mouth as I retreated from her deliciously contracting chute once more and then pumped my veiny hardness back into her deepest and snuggest depths again, getting into a slow yet persistent ass-stretching rhythm. \n\nSawing my thickness in and out of her tight butthole at a nice and ease pace, I opened up Lizzie's narrow anal passage with a series of gliding and deliberately drawn-out balls-deep plunges, each of which elicited a louder and more lascivious groan from her. After a few of those determined but careful butt-jamming passes, the contractions of Lizzie's hot cock-massaging anus increased and got more erratic, while the frenzied wet circles she was tracing on her budding clit became mercilessly furious. The quivering walls of her rectum tugged on my pole more intensely by the second, making me growl with delight as I sodomized my incomparable anal queen a little bit faster and harder with each ass-drilling push. Her sexy, breathless vocalization confirmed what her body already told me. ",
        "\"Uhhh fuck... Oooww fuck fuck fuuuck! I'm cumming, Russ! Ooohhh fuck yeeeaaahh!\"\n\nAs a quick crashing orgasm rolled over my amazing Lizzie, I sighed contentedly and smiled. The sudden sequence of dick-clenching squeezes reverberating through her anal passage was glorious, and not just because it made her snug warm rectum tighten even more around my veiny boner. The feel of her gushing wetness soaking my pussy-bumping ballsack proved that, once again, Liz and I had managed to make the supposedly taboo and unnatural act of anal sex into something awesome and pleasurable, so much so that she was cumming from it. Besides being hot as hell, seeing Lizzie climax with my cock crammed deep inside her ass seemed to me like the ultimate proof of our compatibility, a reiterated confirmation of the fact that we did belong together, truly and completely.\n\nAs I basked in those happy thoughts and savored the enveloping heat and rippling tightness of her smooth slippery rectum orgasming around my length, I slowed my rump-stuffing rhythm to a lazy grinding motion. Lizzie's lustful yelps and the bouncy, soft feel of her bubble-butt pressing urgently against my groin as she gyrated her hips and humped back on my impaling length called me back to my sodomizing duties. \n\n\"D-d-don't stop, baby...\" Liz whimpered, still caught up in her climax, her eyes reduced to pleasure-clouded slits behind her glasses, her succulent panting mouth hanging wide open. \"Oohh god, Russ... Sooo good... Keep fucking my asshole now, oowhh... More, Russ... Fuck my ass moooore!\" \n\nOvercome with lust and love for her, I leaned down over Lizzie's surrendered body and craned my neck until I could press my lips against hers in a passionate soulkiss. As I wrapped my arms around her curvy frame, cupping a huge juicy boob in one hand and reaching down with the other to stroke the puffy lips of her dripping wet pussy, my hips were already bucking of their own accord into her plump bubble-butt. To the sound of our kiss-muted moans, I pumped my raging erection in and out of Lizzie's insatiable asshole over and over again, stretching her sphincter out and filling her rectum up with all the need and desire for her that I felt burning inside me. \n\nThe meaty clapping impacts of my hips slapping into Lizzie's fabulous round rump soon mixed with the animalistic grunting and suctioning harmonics of our wild make out session, almost but not completely drowning out the slick, lascivious sound of our joined fingers rubbing and whirling and frigging away all over her gushing slit. The fact that I kept my eyes closed as Liz and I devoured each other's mouth seemed to enhance the pleasurable sensations that her incredible dick-packed asshole was giving me, making my whole body shudder at each unstoppable deep-plunging in-stroke and slowly retreating out-stroke.\n\nAs I got into a steady butt-plowing pace, Liz synced with my motions, relaxing her anal muscles as I pushed all the way into her beautiful ass and then squeezing me desperately within her slippery, warm rectum as I pulled out. At the same time, underneath the voluntary cock-milking tugs that Lizzie imposed on her steamy chute, there was always an undercurrent of erratic little ripples flowing through her pulsating rectal passage that added a further layer of caresses to the blissful anal suctions she was treating my thick length to. That, along with the constant trickle of sweet girl-cum drenching my clit-frigging fingers and the intoxicatingly sexy sighs that she panted straight into my mouth, told me that Liz was having a series of back-to-back little orgasms all through our torrid assfuck. Needless to say, that knowledge drove me even wilder with butt-pounding lust. \n\nI'm not sure for how long I mounted Lizzie's majestic ass while we fingered her pussy together, but our mouths stayed glued to each other all the time, sucking and nibbling and kissing, as my chest remained pressed over Lizzie's arched back and my crotch continued slapping incessantly against her plump juicy bubble-butt in time with the pistoning strokes of my rigid, swollen pole. As our shared anal frenzy consumed us, I kept riding Liz's rump at an increasingly faster pace, thrusting my achingly hard cock into the snug velvety sleeve of her rectum like my life depended on it. \n\nThough I pushed ever more lustfully into her anus at every butt-stretching plunge until I was crammed as far inside her cozy anal tunnel as I could possibly be, I never failed to linger there for just a moment each time I was fully buried in my sweet Lizzie's ass. Draped over her curvaceous frame, kneading her spectacular tits while kissing her soft mouth and fingering her leaking little pussy, I repeatedly gloried in the feel of Liz's oily distended butthole gripping avidly onto the root of my ass-splitting boner while her hot buttery bowels rippled around my shaft, causing yet another gooey dollop of pre-cum to spurt from my glans and splatter deep inside her receptive rectum. \n\nIt was just a brief pause in the relentless and rapidly accelerating rhythm of our buttfuck, yet I always savored that instant of full anal penetration, the point of total joining between me and my adored Lizzie. I loved every second of our delicious sodomy, of course, but having my cock balls-deep inside her ass and hearing her gasp with unbound pleasure at the sensation of absolute fullness in her rectum took my breath away. Even though I had very recently discovered how impossibly good it was to be immersed inside her juicy pussy, I still felt that being engulfed in the deepest depths of her adorable little asshole was the most intimate and intense and most pleasurable way to be fused with my Lizzie, and I just wanted more and more and more of it. \n\nThat moment of perfect union was what I hungered for, both when I pulled out of her ass, causing Liz to squeeze me and suction me exquisitely within her butthole, and when I glided back in again, sinking happily into her relaxed slippery anus one fat veiny inch at a time, until her needy dilated sphincter had gobbled my whole cock and I was trapped inside her beautiful plump bubble-butt, engulfed from tip to root within her warm, heavenly tightness. The powerful shivers of anal delight coursing through her dick-stuffed chute told me that Liz loved those brief reiterated moments of ass-plugging perfection in the cycle of our anal coupling too, and that spurred me on even more. \n\nFluidly sawing my thick hardness in and out of her snug little asshole, willingly welcomed inside her most delicate orifice each time, I began to feel like the thrusting and withdrawing phases of our buttfuck, as pleasurable as they were, were there just to tease us, to make Lizzie and I crave the moment of full and absolute anal union that we'd experience once her rectum was filled to the brink with my cockmeat again. That was a weird and arousing thought, but maybe I was just completely blown away by the awesomeness of being inside my sweet Liz's magnificent ass again after a few days of anal abstinence. \n\nTime passed, unnoticed, and our shared sodomitical lust just kept burning brighter, fueled by my rump-riding strokes, by her masterful routine of dick-tugging anal suctions and by our entwined fingers working her sopping pussy. By the time my assfucking frenzy broke loose completely and I started really pounding away into her butthole, Liz was so far gone that she couldn't even focus enough to kiss me: gasping for breath and mewling out in unrestrained joy were the only tasks her mouth could still accomplish. Draped over her arched back, huffing and puffing but still planting rabid smooches on her face and neck, I growled incessantly as I held onto my adored Lizzie's gorgeous submissive frame, totally drunk on her pleasure-hoarse vocalizations as I reamed her clingy, slippery forbidden hole.\n\n\"Uuhh... Yeees, babyyy! Fuck my aaaass! Oowwhh... Deeper, hardeeer! Ohhh Ruuuuss! I'm gonna... Ooohh fuuuuck... Uuuhh! I'm close, baby... Fuck me, fuck me, fuck meeee!\"\n\nLizzie's pre-orgasmic screams and the rivulets of nectar streaming all over my already juice-dripping clit-strumming digits had the effect of an aphrodisiac overdose on me, but they were nothing compared to how awesome her dick-jammed asshole felt, twitching and clamping and tightening more and more around my pistoning shaft. As she approached what looked like a gigantic anal climax, the warm pulsating pressure of Lizzie's rectum kept increasing by the second, making my raging boner throb crazily and swell even harder inside her ass, which in turn made her snugness feel all the more constricting and deliciously cock-milking. Hornier than ever, I just kept pumping relentlessly into the plumpest, roundest, most beautiful bubble-butt in the world, slamming my fat pole inside Liz's slick greedy anus and thus feeding the virtuous circle of our passionate sodomy. It has good beyond description, and beyond my ability to resist too.\n\n\"Aaarghh, Liz... I'm gonna cum!\" I grunted as her narrow anal tunnel squeezed me in its smooth grip with more and more intensity every time I bottomed out inside her scorching hot depths. \n\n\"Yeeeess! Uuhh, baby, fill meeee!\" Lizzie screamed as her asshole clamped down around the thick root of my cock and her convulsing rectum trapped my fully buried boner in a velvety vise-like hold. \"Oohh my god, Russsss! Uuuhh... Cum with me, baby! Cum in my aahh-aaAHH-AAASS!\"\n\nAs Liz's yells of release resounded over the thump of my heart drumming madly in my ears, her clit-diddling fingers disentangled themselves from mine and slipped right into her freshly-deflowered, juice-flooded pussy. A flash of pure mind-blowing lust burst before my eyes as I felt Lizzie's slim digits push into her vaginal tunnel and brush along my bucking cock through the thin membrane separating her holes. As if the build-up of our assfuck and the orgasmic spasms of her rubbery bowels milking my boner weren't enough, the sudden sensation of getting the underside of my dick caressed by my incredible anal queen's fingers sent me over the edge, and then some.\n\n\"Aahhh, fuuuck! Oohh fuuUUCK YEESSS, LIIIIZZZZ!\"\n\nA jolt of incapacitating pleasure ran from the back of my head, down my spine and along my wobbly legs, all the way to my toes. Before I even knew it, I exploded spectacularly deep inside Lizzie's tight warm rectum, unleashing what felt like a continuous torrential stream of cum into her convulsing anal passage. It was hard to speak with my breath knocked out of me, but I managed to let out a sort of gasping roar as my cock sprayed jet upon jet of thick potent seed in the darkest and narrowest recesses of Liz's fabulous ass. \n\nWith my head spinning and my fat butt-cramming shaft pulsing and spurting away like a fire hose, flooding Lizzie's climaxing dick-squeezing rectum with huge ropes of sperm, I suddenly couldn't even hold myself up on my knees anymore. Balls-deep in her ass, my fingers still automatically tweaking her slick swollen clit, I fell heavily onto my amazing girlfriend's curvy, writhing frame. Swept away by an orgasm at least as massive as mine, Liz just kept yelling rapturously underneath me, her legs buckling and giving out while I dragged her down with me. \n\nAs we crashed on the bed, so that Lizzie was lying on her tummy with me on top of her, my spewing cock was pushed even deeper into her ass. The slightly different angle of penetration and the increased pressure of my body weighing down on her seemed to enhance Liz's pleasure, because she squealed even louder and her anal walls clamped impossibly tighter around my cock, as if she was trying to use her spasming asshole to suck me off to the very last droplet of cum. That final sequence of ball-draining squeezes undid me completely. \n\nWaves of animalistic pleasure drowned my brain as I emptied myself deep inside my beloved Lizzie's exquisite little asshole. Without thinking, I pressed my mouth to the nape of her neck and bit down into her soft, smooth flesh. Her auburn hair filled my nostrils as I sank my teeth in Liz's flushed, salty skin. The smell and taste of her went to my head like a drug. I'm not even sure why I did it, but it felt right at the moment. I wasn't trying to hurt her or anything, it was more like a very intense nibbling kiss come out of nowhere. It was so instinctive and electrifying that I felt my discharging cock flex excitedly within Lizzie's warm, cum-flooded bowels. To my surprise, she seemed to approve of that sudden, primal branding gesture.\n\n\"Oohh! Oooohhhh fuck yeeeeeees!\" Liz yelped deliriously, trembling underneath me, her juices flowing freely all over my clit-teasing fingers. \"Uuuhh yeaahh... I love you, Ruuuuuss!\"\n\nWith the unique taste of her skin and a few locks of her fragrant hair in my mouth, I was in no condition to reply that I loved her like crazy too, but I think Lizzie got the message loud and clear anyway.\n\nI managed to regain some semblance of rationality only when my geyser-like ejaculation finally tapered off and Liz's dick-clenching rectum relented its pulsating grip on my shaft. At that point, breathless and dizzy, my arms wrapped around her voluptuous body and my barely softening pole jammed to the hilt inside her clingy seed-sloppy anus, I rolled the two of us on our side, so that I was tightly spooning my sweet, sexy girlfriend. \n\nFor a while, spent and sated as we were, Lizzie and I just lay there, motionless and snuggled up on my bed. We did nothing but breathe and rest and cuddle, connected and close as ever. \n\nEngulfed in the cozy warmth of her creamy rectum, my swollen dick continued to twitch randomly every now and then, as if caught in the aftershocks of the monumental ejaculation that had just drained my balls. Still, my cock remained plump, seemingly unable to deflate much while trapped within the divine tightness of Liz's cum-flooded asshole. That sensation of smooth slippery pressure all around my shaft, blending with the feel of my beloved Lizzie resting in my embrace and cooing contentedly as I remained buried balls-deep in her ass, made me float blissfully away, bringing me to that place of quiet happiness I could only reach when I was with her.\n\nHigh on a gigantic post-orgasmic afterglow, my eyes just barely open and totally unfocused, I was called back to reality only when Lizzie's soothing voice echoed in my ears. \n\n\"Russ...\" she sighed groggily, shifting slightly to turn her head and look my way. She was so beautiful, I couldn't help but smile back goofily at the sight of her familiar, cheerful visage. Her big brown eyes sparkled behind her glasses, her hair was all sex-tousled and her face was radiant, brightened even more by her big, sincere smile as she murmured between deep and much needed breaths: \"That... Was... Awesome!\"\n\nStraining to speak, dizzy as I was, I met Liz's gaze and muttered my zombie-like yet truthful reply: \"Yeah, awesome. Like you. You're the best, Liz.\" \n\n\"No, I mean it!\" Lizzie insisted, snuggling closer in my encircling arms as I gently cupped her ample jugs and rocked my hips into her soft, juicy ass. \"I came like crazy, especially at the end. My thighs are all soaked, and,\" she added with a giggle, \"I kind of made a puddle on the sheets here!\"\n\n\"I came a lot too,\" I replied, mumbling through the lingering haze of pleasure as I gloried in the squishy presence of my massive load sloshing deep inside Lizzie's rectum, plugged in there by my fat glans and my chubby, butt-stuffing shaft. \"Your ass is epic, Liz. So. Fucking. Epic.\"\n\n\"Thanks, baby,\" she purred, kissing me tenderly. \"I know you really mean it because you came so much, and you're still pretty hard! Mmhh I love this, Russ, I really do...\" she murmured with a satisfied sigh as she started gently squeezing my plump pole within the cozy, warm confines of her sperm-plastered bowels. Tightening the slick clutching ring of her asshole around my girthy base, making me moan into her smooth neck, Lizzie spoke slowly and huskily, panting as she contracted her anal walls around me, keeping me hard and joyously enthralled to her amazing bubble-butt. \n\n\"I love how my ass feels when it's so full of cock and cum,\" she dreamily went on, lulling me with her soft voice, \"like it is now... So stretched out and stuffed to the limit... All your gooey cream warming my tummy, your big cock pushed so deep inside my ass, filling me sooo good... You know, I was almost passing out when you started cumming, and you got harder and bigger and you were pulsing so deep in me, pumping that big hot load into my asshole... It was like I could feel your heart beating way up inside me. And you just kept shooting all that cum up my ass! Oh my god, I always love that part! You know,\" she snickered, casting me a sort of impressed look, \"I think you came even more than you did in my pussy before! Really, how can you cum so much, Russ?\"\n\n\"That's easy, Liz,\" I replied with a shrug, drowsily letting the words flow, \"it's because you're, like, a living and breathing Viagra, but better: with tits, big amazing tits, and the most beautiful, plumpest, roundest ass ever! Mmh your ass, Lizzie... So fucking beautiful! If I could synthesize the awesomeness of your ass and make it into a pill and mass-produce it, I'd make millions and Viagra would go bankrupt because every guy in the world would be popping Lizzie's Epic Bubble-Butt Pills... But I'd never do that, never! No way,\" I stated, opening my eyes completely and smiling goofily, just vaguely aware of what I was rambling on about and how weird it must have sounded, \"I want you all to myself, Liz. And your ass too. My, my, my Lizzie! All mine, only mine!\"\n\n\"Wow!\" Liz exclaimed, as I crushed her gorgeous curvy body in a hyper affectionate bear hug, holding her as tight as possible to me, all the while systematically peppering her neck and face with kisses. \"Russ,\" she laughed, looking at me kinda funny, \"are you high or something?\"\n\n\"Yeah!\" I winked, emphatically cocking an eyebrow and grinning. \"High on you, babe!\"\n\n\"Aw! You're both sweet and cheesy,\" she snickered, \"like some kind of fancy french dish, I guess... They do have this sort of thing, right? Like, sweet cheeses and stuff, maybe?\"\n\nI chuckled at that random comment and at the comic expression Liz made as she looked at my lovestruck face. Lizzie laughed in turn, a glimmer of pure joy in her eyes. That image made me go all fluffy inside, as did the soft loving soulkiss she planted on my mouth. As I kissed her back, initiation a languid make out session, I thought again about how luck I was to have her in my life. She understood me, really, even in my moments of silliness. She knew that I was truly crazy in love with her and that I spoke from the heart, no matter how sappy my words might sound.\n\nAs we kept softly kissing and cuddling, spooned as closely as we could, Liz and I began to slowly emerge from our post-orgasmic torpor. Our intimacy and affection rekindled the anal lust we both still felt simmering inside us, making our smooches more passionate by the second. Before I knew it, we were not just snuggling anymore but gently rocking together in a lazy butt-humping rhythm. Lizzie still kept caressing my cock with tender suctioning squeezes of her cum-slippery anal walls, but she also started pushing her bouncy bubble-butt back against my groin while I began grinding into her plump, pillowy asscheeks. \n\nAt first I was just stirring my recuperating boner inside the buttery tightness of Liz's rectum, barely even moving. Gradually though, while my sweet anal queen panted and cooed into my kissing mouth, I picked up my pace just a little bit. As soon as I began making shallow in and out motions, she drew her legs closer to her chest, giving me even better access to her ass while she reached both hands down to her dewy, puffy little pussy. The sight of my amazing Lizzie rubbing her swollen clit while teasing her sugary hole at the same time made my dick throb inside her creamy bowels. ",
        "As her soft voluptuous body shivered in my embrace and she urgently rocked her rump back into my impaling shaft, I wrapped one arm tighter across Liz's big jutting tits. Pawing her heavy jugs and teasing her stiff rosy nipples in turn with one hand, I moved the other lower until my fingers were running all over the bouncy round globes of her asscheeks. On top of everything else, the fullness of Lizzie's sumptuous bubble-butt filling my palm and the smooth meaty feel of those gloriously juicy mounds under my fingertips were more than enough to get me fully hard again.\n\nApart from moaning into one another's mouth and sucking wetly on the other's lips, Lizzie and I didn't speak a word as we synched into a fluid, unhurried assfucking tempo. The massive load I had sprayed inside her rectum and her willing relaxation allowed me to glide easily in and out, stimulating her sensitive anal passage and making her pant contentedly as I savored the incomparable sensation of her clingy, cock-hungry sphincter sliding tightly along my boner.\n\nIt was so mind-blowingly hot to hump Lizzie's beautiful ass right after I had filled it full of cum. With each passing second, I grew more and more enamored with the slippery pressure and the incredible natural tightness of her sweet, needy butthole. Spooning her firmly, I sawed my thick pole into Liz's snug cum-lubed anus in increasingly longer strokes, withdrawing more and more of my boner at every pass before sinking slowly back inside her docile little orifice. Soon, on the out-strokes, only my glans remained enveloped in the creamy, twitching heat of her sphincter, causing Liz to groan in short-lived disappointment at the maddening void she felt inside her anal depths.\n\nI never let her wait too long before I filled her tiny asshole full of my veiny shaft again, though. With an easy push of my hips, I unfailingly buried myself balls-deep inside Lizzie's stupendous bubble-butt again, our overlapping moans testifying to our shared pleasure. Then, when her distended pink rosebud was wrapped around my base and I was fully sheathed inside her cozy rectum, I slowly pulled out again and restarted that delicious cycle, grunting in ecstasy as I savored the feel of Liz's slick rubbery butt-ring dragging along my entire length, sucking and squeezing me as my retreating cock left her widened anal passage briefly empty. \n\nI moved calmly but steadily, making love to my sweet Lizzie's beautiful ass without rushing it, so that we could both savor our lazy sodomy to the fullest. While I was enjoying every little contraction of her smooth anal walls and letting her feel every thick inch of my relentless butt-jamming tool, Lizzie seemed to be experiencing a string of mini-climaxes that made her rectum ripple deliciously around my boner and caused her pussy juices to flow in a constant trickle, soaking my balls whenever my scrotum bumped into her slit on the in-strokes. \n\nIt was hot as hell to hear the lascivious background squish of my seed-slimy dickmeat sliding in and out of Liz's well-greased butthole and the wet sounds of her pussy-diddling fingers strumming away on her juice-drenched clit, but what really made me throb with desire deep inside her ass was the uninterrupted melody of whimpers and moans and sighs that she made as I lovingly sodomized her. \n\nI listened to Lizzie's vocalizations like they were a choir of angels. I adored the trembling crescendo of her mewls rising up for a few ass-cramming passes until they broke into a whimpering gasp of release, only to then restart with a panting purr all over again as I kept up my deliberate but powerful buttfucking pace. While my pistoning boner incited those sounds of undiluted bliss to erupt from Liz's slack mouth, I could almost see wave after crashing wave of pleasure washing over her, making her gorgeous curvy body shake in my arms as her smiling face glowed with beauty. \n\nIt was immensely satisfying to listen to Lizzie's orgasmic moans while enjoying her slippery butthole twitching tightly and her creamy anal walls clenching erratically around my cock in time with her cries. It made me want to keep slowly making love to her sweet little asshole forever, just so that I could keep hearing those magical ecstatic sounds echoing in my ears over and over and over again. After a while though, despite having already blown a load in her untouched pussy and one in her epic ass, my balls started tingling again. Since I wasn't ready to let our passionate and intimate buttfuck end just yet, I decided to break my rhythm before I was pushed over the edge. \n\nSuddenly, after the umpteenth gliding out-stroke, I exited Lizzie's asshole completely, pulling out all the way and letting even my fat glans slip away from the tender clutches of her oily, stretched out sphincter with an audible squishy pop. While I lingered outside the warm sheath of her anus and kept my raging boner out there, steadying my breathing and letting my mounting ejaculation subside, Liz shivered and wiggled her awesome bubble-butt, baffled that the awaited in-stroke wasn't coming. With her ass left absolutely and intolerably empty, a long groan of displeased surprise broke the melody of Liz's blissful yelps. \n\n\"Ooowwhh... Oh nooo, baby!\" she pouted, disappointed and lust-drunk as she longingly looked over her shoulder at my swollen cum-glazed pole throbbing right there, just a couple of inches from her dilated pink rosebud, so close but still so unnervingly far from her insatiable anal depths. \"Put it back inside me, Russ, come on! I need your cock in my ass, pleeease! Fill my ass!\" \n\nHer mewling complaints barely registered as I took in the obscenely beautiful sight of Liz's sperm-smeared and gaping asshole winking at me from between her luscious fleshy buttcheeks. A moment later, enchanted by her sexy pout and by the irresistible look of utter carnal need painted on her pretty face, I grinned and nudged my bloated glans into her already tightening butt-ring, easing my aching hardness inside her ass again.\n\n\"Uuhh yeees, Ruuuss!\" Lizzie exhaled as I slowly slid my massive erection all the way into her seed-slick, rippling rectum. Her expression had turned rapturous again, her smile broadening as I sank deeper and deeper into her snug, buttery bowels. \"Oooh fuck, yeeees! Stretch my ass! Give it to meee!\"\n\nAfter a few deep, lustful butt-stuffing thrusts that made Lizzie wail in anal ecstasy, I was edging dangerously close to the brink again, so I swiftly slipped all the way out of her anus. Pulling her gloriously plump asscheeks apart and kneading a perfect round globe with one hand, I panted excitedly as I admired the mesmerizing spectacle of Liz's dilated cock-starved butthole pulsating hungrily, like a small yet wide open mouth begging for more of my shiny, spunk-coated dickmeat. All the while, I tweaked and pinched and played with her stiff puffy nipples with my other hand to keep her somewhat distracted from the void I had left in her quivering anal tunnel. Moments later, as my boiling release settled down once more and Lizzie's reddened gaping orifice started to shrink closed to its tiny puckered state, I swiftly reentered her asshole again, opening up her pliant backdoor and slotting my full length into her warm, needy rectum once more. \n\nFor a while, I kept up that syncopated mix of hard ass-stuffing plunges that took Lizzie's breath away followed by temporary removals of my stiff boner from her narrow anal tunnel. Despite her initial protestations, Liz adapted quickly to the teasing nature of my new sodomizing pace, timing the speed and intensity of her clit-frigging whirls with my alternating phases of deep thrusting and complete retreat. When I pulled out, I tried to help her compensate for the absence of my cock inside her hot little butthole by focusing more on massaging her fleshy round rump and kneading her spectacular tits, but my attention was mostly captivated by the mind-blowing visual of Lizzie's dilated seed-smeared sphincter, gaping irresistibly open and twitching with need, winking and beckoning me to bury myself inside her beautiful ass again.\n\nThe sweet torture of having her greedy forbidden orifice alternatingly humped deeply and then left empty seemed to grow on Lizzie, because her moans just kept gaining in loudness and sexy huskiness, while her pussy juices never stopped trickling down her shapely thighs and onto my ballsack. Unfailingly, she let out the most erotic sighs of sensuous rapture right when, after a brief pause, I reinserted my cock into her ass, pushing my fat knob inside her tightening yet always eager little rosebud and then penetrating balls-deep into her snug slippery rectum again. The drawn-out mewls she emitted while her cum-glossy sphincter blossomed out and wrapped itself around my invading, butt-jamming girth were music to my ears. It was the perfect soundtrack to the heavenly feel of my veiny shaft being engulfed by my beloved Liz's hot, soft bowels all over again.\n\nI was more than willing to extend that strange mix of butt-plowing fits and gape-watching breaks for as long as possible, but Lizzie's ever-growing build up eventually boiled over, pushing her past the point of no return. The chain of mini-climaxes she had experienced up to that moment clearly wasn't enough anymore, because suddenly, right while I was lining up my engorged cockhead with her greasy twitching asshole yet again, ready to open her up and fill her full of hard dickmeat for the umpteenth time, Liz unexpectedly squirmed and shifted in my arms, letting out a throaty groan of pure, unquenchable anal thirst. \n\nBreathing raggedly, trembling with sheer urgency and desire, Lizzie disentangled her voluptuous body from the tight spooning position we were in and pushed me down to lie on my back. In a heartbeat, she got up on her knees and straddled my groin in a reverse cowgirl position, settling her plump bubble-butt on my lap. All the while, my raging boner remained hot dogged deep in her luscious butt-cleavage, hugged cozily between her soft round asscheeks. With my glans barely poking at her oily little orifice, I watched in silent awe as Lizzie, panting and whimpering with lust, looked over her shoulder and reached back to grab my throbbing pole.\n\n\"I need to cum, Russ, I need it so bad! And I want your big fat cock deep in my ass when I cum, baby!\" she blurted out in a wantonly desperate tone. Then, wrapping her slender fingers around the base of my thick sperm-slick shaft, she guided me toward her eager backdoor. \n\n\"Oohh yes! Uuuhh... Yeeesss!\" Lizzie sighed as my bloated purple tip slipped into her winking sphincter and disappeared inside the warm tightness of her asshole. \n\nAs her head lolled sideways and back, letting her auburn locks flow across her arched spine, I could see that Liz's puffy lips were parted wide and shaped into a perfect O. Her eyelids were fluttering dreamily, almost closed, as if she was concentrating on the feel of my rigid, veiny dick sliding inexorably up inside her cum-lubed rectum. Gladly surprised by that quick turn of events, I felt so rabidly horny that I could barely breathe, let alone react in any way.\n\nPurring like a sweet sexy kitten, Liz wiggled her sumptuous booty as she determinedly lowered herself down on my pole, forcing her dick-gobbling anus to open up and swallow more of my cockmeat inside her steamy, velvety anal passage. My eyes bugged out and my achingly hard boner pulsed with joy as I watched Liz's stretched out orifice slide lewdly all the way down along my swollen semen-glossy length in a single uninterrupted plunge, until I was crammed balls-deep inside her cozy cock-hugging bowels and her beautiful plump asscheeks were resting on my crotch.\n\n\"Holy shit, Liz!\" I managed to exclaim, still a bit stunned but totally on board with her unexpected move. That was all I managed to say before I broke into delirious grunts of bliss as Lizzie started wildly bouncing away on my flexing cock like a woman possessed, screaming in pleasure. \n\n\"Ooooh fuck, yeees! Uuhh god, Ruuuuss! Aahhh yeeaaahh, that's iiiiit!\"\n\nYelling and squealing and wailing out in absolute anal ecstasy, Liz impaled her sensitive little rosebud on my shaft with frenzied desire, riding me reverse cowgirl as if her life depended on it. Rising up and slamming down as fast as she could, she fucked her ass on my spearing hardness with such recklessness and gusto as I had only seen in pornos. I was so amazed that all I could do was plant my hands on the round juicy mounds of her magnificent bubble-butt and hold on for the ride, while Lizzie kept screaming and bouncing and stuffing her tight slippery rectum with my rock-hard boner over and over again, suctioning me within her creamy anal walls and squeezing her clingy little butt-ring along my length all the while. \n\n\"Yeess... Ooohh fuck yeeeeees! Uuhh, baby, I love iiiiit! Oohh you're so big in my ass, Ruuuuss!\" \n\nAs Liz moaned and savagely sodomized herself, I was entranced by the visual of her fabulous asscheeks bouncing on my lap in an ever faster clapping tempo. Even though she was facing away from me during that wild ride, I could see the sides of her massive tits swinging heavily up and down in time with her desperate butt-wrecking rush. Judging by the movement of her shoulder and by the persistent trickle of nectar drenching my balls, I could tell that Lizzie was diddling her clit just as furiously as she was working her plump ass up and down on my stiff rump-skewering pole. All the while, the fleshy globes of her bubble-butt rippled and jiggled so beautifully at her every ass-slamming bounce that I couldn't have taken my eyes off them even if I wanted to.\n\nRiding me at full speed right after the teasingly prolonged anal coupling that had brought us there, it didn't take more than a couple of minutes of that intense self-sodomizing rampage before Lizzie reached her peak. With every passing second, the slick dick-tugging tightness of her rectum was empowered by waves upon waves of erratic clenching spasms that squeezed my pulsing cock deliciously and made me howl in impending release, causing my shaft to swell bigger and harder within the snug warmth of her rectum. Still, as close as I was to blowing my load, Liz beat me to it.\n\n\"UUHH! OOHH FUUUCK!\" she suddenly roared, throwing her head back and plummeting down on my raging thickness one last time, engulfing me balls-deep in her cozy, powerfully convulsing anus. \"RUUUUSSSS... UUHH... C-C-CUUUMIIIING!\"\n\nA cock-milking, ball-draining sequence of contractions reverberated through her steamy anal walls, taking my breath away. The soft snug-fitting sheath of Liz's rippling rectum became impossibly tighter around my bucking boner, while the oily grip of her stretched out butt-ring turned into a pulsating little mouth wrapped firmly around my wide base and bent on sucking me dry. Massaged from tip to root by her orgasming asshole, with rivulets of her sweet gushing pussy juice soaking my scrotum, I closed my eyes and growled out my pleasure too. \n\n\"God, Liiiiiz! I'm gonna fill your ass with cum again... Aaaahh fuuuck!\"\n\nAnd then, out of the blue, as my semen surged along my throbbing shaft, the warmth and tightness of Lizzie's dick-hugging rectum suddenly vanished. My eyes snapped open to see that Lizzie had dismounted abruptly from my lap and was now kneeling between my legs. Ass tilted up and head pushed down, my amazing girlfriend quickly grabbed my fat veiny pole at the base and pointed it to her flustered face while her wide open mouth plunged down toward my bloated glans.\n\n\"Oohh shiiit!\" I grunted as Liz's luscious lips closed in a tight soft seal around my shaft, immersing my cockhead in the liquid heat of her mouth. \"Aarghh, Liz! Fuck yeeaaahh!\"\n\nI saw stars as I came, shooting rope after rope of milky seed into Lizzie's gullet. Her lewd, cum-hungry slurps and her sexy dick-muffled moans resounded gloriously in my ears while I inundated her mouth with all the cum I still had in me. I was feeding her my sperm so fast and in such big blasts that Liz's oral cavity was quickly full of my fluid essence. Through unfocused eyes, I watched her cheeks bulging out while two thin pearly dribbles started escaping the corners of her cock-jammed mouth. \n\n\"Mmmph... Mmmhh!\" Lizzie moaned as she used her tongue to slosh my spunk around in her mouth, coating her palate and saturating her taste buds with my semen before she started swallowing down my massive ejaculation in big noisy gulps. As she did so, she opened her bespectacled eyes and gazed up, meeting my mind-blown stare. A sort of cock-distorted smile danced on Liz's outstretched, cum-glossy lips. At that sight, a final pulse of runny seed spurted from my girthy tool, then I exhaled in blissful exhaustion and let my head fall back on the pillow, my vision fading to white.\n\nFor a bit, wiped ecstatically out by my toe-curling orgasm, I just lay there and panted like some sort of climaxing zombie. As blown away as I was, I had a smile on my face as I basked in the feel of Lizzie's lips still nursing on my glans, her tiny hand pumping my shaft and her tongue licking and lapping all around and along my deflating pole, scooping up every single trace of cum that remained after she had drained my balls dry like the amazing ass-to-mouth goddess that she was. Eventually, after she let my spent dick plop out of her mouth with a final sloppy smooch, the lustful symphony of Liz's suckling and slurping ministrations on my wilting erection came to an end, with a giggle.\n\n\"Well,\" my sweet, sexy, irreplaceable almost-sister snickered as she snuggled beside me, with her chin on my heaving chest and her huge jutting boobs squashed into my side, \"I guess we can rest for a bit now that all three of my holes have been dutifully filled with your cum!\"\n\n\"Yeah, resting sounds good. I feel pretty tired at the moment...\" I laughed, still catching my breath as I took in Lizzie's radiant smile and her big soulful eyes, sparkling with joy behind her glasses.\n\n\"You were awesome, by the way,\" I went on, locking Liz's voluptuous body in my embrace. \"I mean it. You're incredible, Liz. And thus,\" I proclaimed in a half-joking half-solemn tone, \"I gratefully and respectfully bow to you, my one and only anal queen. You rocked my world yet again and made me an even more ardent, devoted and faithful acolyte of your legendary ass. All hail Queen Lizzie, the first of her name, she whom the gods have blessed with the Beautiful Bubble-Butt of Bootylicious Bounciness! Hooray!\" \n\n\"Aaw, thanks, baby! That's so sweet!\" Liz chuckled. As she shrugged dismissively and averted her gaze, I could see that her smiling face was not just flushed but actually blushing in a moment of unnecessary yet adorable embarrassment. \"It wasn't that big a deal, you know... I just sort of let my inner buttslut take over, easy peasy.\"\n\nI was unable to reply with words. Bursting with love for that unassuming yet hot, sweet yet adventurous, fantastic and gorgeous creature resting in my arms, I hugged my Lizzie as tight as I could and hoped that my feelings would somehow filter through to her by means of the sheer contact of our glued, naked bodies. Squeals and titters escaped Liz's mouth as I peppered her face with kisses, all the while moving my fingers down along her back, until I was kneading and caressing her plump rump. \n\nAs I pried apart a fleshy asscheek with one hand, I couldn't stop my other hand from descending into Lizzie's butt-cleavage to reach the puckered winking star at its center. Even if I couldn't see, lying down and snuggled to her as I was, I could clearly feel the rivulets of my previous load of frothy cum trickling out of Liz's well-fucked, gaping sphincter. Slowly, almost reverently, I began tracing circles around the puffy outlines of her hot pulsating asshole with my fingertips. Rubbing creamy globs of my oozing seed all over her distended butt-ring and delicately working it into her tender anal rim, I did my best to pay silent homage to that tiny little hole through which we both received so much pleasure. ",
        "\"Mmmhh, that's nice...\" Lizzie murmured softly, cooing and nuzzling my neck as I gently soothed her abused little orifice with my gooey sperm. \n\nMy feather-light caresses on her dilated asshole elicited long sighing purrs of appreciation from Liz. Whenever I brought another leaking dollop of spunk back to her gradually closing backdoor, she always let out a contented little mewl, letting me know that I should keep up that careful, lasciviously intimate post-assfuck massage. Deprived of any actual visual, I savored the feel of Liz's slippery puffy rosebud swiftly shrinking tight on itself under my seed-coated, butt-soothing fingers. Even after her hot crinkled orifice had regained its tiny starfish shape again, I kept rubbing every last drop of my run-off cum all over the rubbery outside of her anus, until I felt that my task was completed and I could remove my circling digits from Liz's asscrack. \n\nPlanting soft smooches all over her radiant face, I let got of Lizzie's round fleshy buttcheeks so that I could wrap my arms tighter around her voluptuous body. After we shared a long loving kiss, Lizzie rested her head in the hollow of my shoulder and exhaled contentedly, curling up cozily in my embrace as she closed her eyes. \n\nFor a while we just rested like that, enjoying our intimacy and affection, floating away in our shared happy bubble. The warmth and closeness of my sweet Liz's curvy naked frame, combined with the fluffiness I felt inside, infused me with such a deep sense of calm that I almost dozed off at some point. Almost, because suddenly Lizzie's resting head sprang up and her voice resounded in the room, bright and vibrant with excitement.\n\n\"Russ! I got it! An anal clit!\"\n\n\"Whaaa...\" I mumbled, blinking in surprise as Lizzie's twinkling brown eyes stared straight into mine. \"An anal what?! What are you talking about?\"\n\n\"An anal clit!\" she repeated, more determinedly. \"A clit that's in the butt! That would explain why someone could love anal so much, even more than regular sex!\"\n\n\"Liz,\" I slowly said, starting to get a vague idea of what her raving was all about, \"I don't think that's possible, really. In fact, I'm pretty sure that your clit is in the right place. Trust me,\" I smiled, placing my hands on the sides of her animated face and planting a wet smooch on those soft full lips of hers, \"I'm very well acquainted with your clit, and it's definitely not up your butt!\"\n\n\"Yeah, yeah, I know...\" Lizzie snorted dismissively, rolling her eyes at me even as she gave me a nibbling kiss. \"I didn't mean it about me, duh! It's an idea for a story! It's about this girl that's totally desperate because she can't have an orgasm, not in any normal way at least. And why? Because her clit is inside her asshole, so the only way for her to cum is by having anal sex! Pretty hot, uh?\"\n\n\"Yeah,\" I nodded, cocking my head, genuinely intrigued. \"I'd definitely read a story like that.\"\n\n\"And would you jerk off to it?\" Lizzie quipped with a sly wink.\n\nI chuckled before I answered: \"Sure! Or, maybe, we could read it together and see where that gets us...\"\n\n\"Mmh yeah, that'd be fun,\" Lizzie purred, biting her lower lip and arching an eyebrow in an exaggeratedly suggestive manner. Then, back on topic, she pressed on: \"But really, do you think it would be too derivative? I mean, the plot is basically the same as the one of that old porn movie about the chick with the clit in her throat. Mine would just be an anal version of that story.\" \n\n\"Oh yeah, 'Deep Throat', sure!\" I immediately replied, glad to put some of my debatable albeit extensive knowledge on the subject of pornography to fruition. \"That's a classic, with Linda Lovelace! Serious old school stuff, but it actually made porn movies mainstream, more or less.\"\n\n\"Yeah, that's the one,\" Lizzie said slowly, grinning impishly and looking at me funny. \"And how come you know so much about it, Russ?\"\n\nAfter the briefest moment of involuntary embarrassment, I just said: \"Well, you know... I kinda stumbled upon it once while searching for porn, so I figured I'd see what it was all about. How come you know it?\"\n\n\"Same reason, pretty much,\" Lizzie shrugged, laughing and holding me tight as she went on in a husky voice: \"You know, Russ, we should watch porn together, sometime. When we're not busy actually doing stuff, of course. It could be a lot of fun...\"\n\n\"Absolutely!\" I exclaimed, feeling a stirring in my spent cock. \"That would be great!\"\n\n\"I know, right,\" Lizzie cooed, draping her thigh over mine. \"We should probably start by watching 'Deep Throat' again together and then do some, well, let's call it 'research' for my story. Would you help me, Russ?\" she asked in a sexy little voice, batting her eyelashes theatrically and pouting oh so adorably. \"I'll need to have lots and lots of anal sex in many different positions if I want to make the character more believable.\"\n\n\"Yes! Yes, I'll help with that, definitely!\" I agreed wholeheartedly before hugging and kissing my amazing Liz, making her laugh as she kissed me back. Once we broke our lip-lock, I exhaled joyously as I looked her in the eye and held her in my arms. \"I think I'm the luckiest guy in the world. In fact, I'm pretty sure I am.\"\n\nGiving me one of those heartwarming looks of hers, Lizzie smiled and murmured: \"I feel the same way, Russ. Well,\" she added with a snicker, \"with 'girl' instead of 'guy' in the sentence, of course, but you get the idea.\"\n\n\"I do,\" I said, \"I sure do.\"\n\nLaughing together, Liz and I hugged and kissed, again and again and again. For a long time, we joked and rested and recuperated, talking about her crazy and funny and sexy idea about the anal clit story, snuggled tightly on my bed all the while. \n\nAs the late morning sun kept shining on us, we soaked up the affection radiating from the other, feeding off the incessant undercurrent of love and trust and friendship that bound us so strongly together. Naked and entwined, glorying in our closeness while we reaffirmed it with words and smooches and caresses, Lizzie and I wanted nothing more than to stay as we were, safe in the other's embrace, happy as can be."
    ],
    "authorname": "ZenZerker",
    "tags": [
        "anal",
        "ass",
        "oral",
        "virginity",
        "ass to mouth",
        "love",
        "anal sex"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/backdoor-sweetheart-ch-03"
}
{
    "title": "Kinky Tales: I Pegged my Husband",
    "pages": [
        "Summary: Wife's discovery of husband's anal toys changes everything.\n\nNote 1: This is a Halloween 2015 Contest Story.\n\nNote 2: This is one of two different versions of this story; you can read the husband's much shorter version called Kinky Tales: I'm Pegged By My Wife.\n\nNote 3: This is dedicated to:\n\n<ol> <li> The real Chris and Dani who this fantasy is written about.</li>\n\n<li> It is also dedicated to all married couples willing to listen to their spouses and their fantasies whatever they may be.</li> </ol>\n\nNote 4: Thanks to goamz86, Robert and Wayne for editing this story.\n\nWARNING:\n\n1. This is a lengthy story and takes a long time to get to the actual pegging.\n\n2. This story is hard to label. Although the journey is a wife pegging her husband... it's a long journey of sexual self-discovery for the main character Dani. It includes frank conversations, exploring with toys, anal fixations, wild kinky sex and role playing, lesbian teasing and finally pegging.\n\nKinky Tales: I Pegged my Husband\n\nAs I was reorganizing the basement, making room for my oldest boy, Jake, to move downstairs, I was shocked when I found a small bag of sex toys and pantyhose.\n\nI had my own collection, but it wasn't a secret and each had been used at some point in the bedroom with my husband Chris. They were all typical toys like vibrators, including a new one I bought at a toy party Bethany had, and a we-vibe (he bought it for me as a present but I had never really loved it).\n\nAs I went through the bag, hidden behind a collection of old VHS tapes (which was odd since we no longer had a VHS machine), I was shocked.\n\nFirst, I found a long plastic thing I quickly learned was a hand pussy when I undid the top. Although briefly offended, I realized that it wasn't any different than the toys I had to get myself off when he wasn't around.\n\nBut... the other toys were different.\n\nThey were all anal toys, the one thing I had never even remotely been interested in. That said, at the sex party the saleswoman spent a good half an hour discussing the pleasures of anal sex and showing a wide range of toys made for the butt. It had made me slightly curious, especially when I learned I was in the minority of women at the party who'd neither experimented with anal sex nor actively participated in it.\n\nThat said, I had always thought of the ass as an out hole only, even as my younger sister called me a prude and I learned my older sister also enjoyed anal sex.\n\nThe thought that my older sister Marina got fucked in the ass by her chubby husband Blake was disturbing and shocking... I always saw Marina as the most conservative of the three of us. That said, if Marina enjoyed anal sex, well, maybe it wasn't the ultimate sin.\n\nBethany, on the other hand, fifteen years younger than me (an 'oops' my parents said), was the wild child who declared herself bisexual in high school and who had been in relationships with men and woman ever since. Currently, she was single and on the prowl.\n\nAs I rummaged in the bag and investigated the toys, I found: three butt plugs in various sizes, a dildo that suctioned to the wall, and a black vibrating curved dildo that was hooked to a remote control that had a variety of vibration speeds and patterns. There were also two different types of lube, one of which was anal lube. Lastly, there was a pair of beige pantyhose.\n\nI stared at the toys for an eternity, so many questions spinning in her head.\n\nI looked at the pantyhose not in a package, which implied they had been worn before. Chris had a nylon fetish and I had been wearing pantyhose, thigh highs and stockings with a garter-belt ever since I met him. Usually, all I had to do was show a little leg, wiggle my toes in nylons and he would be hard and ready to go.\n\nI was confused.\n\nWas he having an affair?\n\nHe traveled a lot, being a motivational speaker. Chris was an ex-NHL'er who played for the St. Louis Blues and the New York Rangers before a serious injury ended his career. His speech on overcoming obstacles was very popular at high schools and charity fundraisers.\n\nWe actually met at a bar where I went after him because back then I was a 'puck'. A girl who fucked hockey players. In truth, I had never been with anyone who wasn't good with a stick on the ice and in the bed. I was kind of a slut in high school and college, but had calmed down once I met Chris and even more so once we had kids.\n\nThe more I thought about it, the more I was confident he wasn't cheating, He wasn't a cheater.\n\nPlus, I had made it clear if he ever did cheat on me I would cut his nuts off and feed them to the dog.\n\nWas he attempting to surprise me? He knew I had no interest in anal activity (I hadn't mentioned the slight interest that had begun after the toy party).\n\nWas he using these toys on himself? He was 230 pound, 6'2\" and all man. In other words, he was a man's man. The thought of him using these on himself seemed incredibly unlikely.\n\nI didn't particularly like any of the options floating in my head, but I ended up hoping the toys were a secret attempt to get me interested in anal....\n\nI'd be devastated if he cheated on me.\n\nI wasn't sure how I'd feel if they were actually for him.\n\nI put the bag back, unsure how I wanted to deal with this situation.\n\nFor two days, I watched him, looking for clues.\n\nI considered bringing it up a couple of times, yet couldn't figure out a good way. I didn't want to humiliate him if they were not for him; I didn't want to accuse him of cheating with such flimsy evidence. Yet, it was driving me nuts.\n\nI decided to see if he took the bag with him on Monday as he was heading out for a few days of speaking in Florida.\n\nAs soon he kissed me goodbye Monday morning and left the house and I got the kids off to school, I went directly downstairs to the hiding spot.\n\nMy heart sank when the bag wasn't there.\n\nThe toys were not for me.\n\nThat meant either he was having an affair or he was using it on himself.\n\nBoth options were not appealing.\n\nI didn't know what to do.\n\nSo, tears streaming down my face, feeling completely betrayed and confused, I called my older sister Marina.\n\nI could barely get a sentence out through the tears as I babbled, \"H-h-he's c-c-cheating on me.\"\n\n\"No way,\" my sister replied.\n\n\"I-I-I,\" I stammered, but was unable to finish a sentence.\n\n\"I'm on my way,\" Marina said.\n\n\"K-k-Kay,\" I replied, thankful my sister knew I needed her.\n\nTwenty minutes later, the tears done, being replaced with anger, I searched the home computer for clues.\n\nI searched his emails, searched the files, searched the web browser, including all browser history and came away empty, except for a website called Literotica.\n\nI was just beginning to look into the erotica website when Marina arrived.\n\n\"Okay, what's the crisis?\" Marina asked, as she walked in the house, \"I had to cancel three sessions.\"\n\n\"My husband is having an affair,\" I declared, instantly beginning to cry again.\n\n\"There is no way that Chris is cheating on you,\" she confidently replied.\n\nI explained everything I found and how it was now gone, my emotions changing from crying to anger.\n\n\"Interesting,\" she said, as she seemed to be pondering all I had told her.\n\n\"What is interesting?\" I snapped, taking my frustration out on her, though her casual attitude toward the apparent end of my marriage only confounded my anger.\n\n\"So you're sure they were anal toys?\" my psychiatrist sister asked, not answering the question, something she always did... unable to not play therapist.\n\n\"Yes, they were similar to the toys at that sex party,\" I nodded, before adding, \"except the fake pussy.\"\n\n\"Well, that's good news,\" she nodded, still in pondering move,\n\n\"How is this good news?\" I asked, getting more frustrated.\n\n\"It means it's very unlikely he is cheating on you,\" she declared.\n\n\"How the fuck can you figure that?\" I asked.\n\n\"It's elementary, my dear,\" she answered, always playing psychologist instead of sister.\n\n\"Just explain,\" I demanded, frustrated.\n\n\"What would you say if he told you he wanted you to help with a prostate orgasm?\"\n\n\"A what?\" I asked, even though I, of course, knew what and where the prostrate was.\n\n\"Many men can reach orgasm and almost all men have more intense orgasms when the prostrate is stimulated,\" my sister explained, shifting to sexual expert.\n\n\"Really?\" I asked, my anger finally beginning to simmer, and instead a feeling of inadequacy beginning to grow.\n\n\"It's always been true. The difference now is the growing acceptance of homosexuality, and anal sex for men has begun to become more popular among straight and married man,\" Marina continued.\n\nHer explanation was interesting, but I still couldn't fathom my husband, an ex-NHL player, taking something in the ass.\n\n\"No way Chris wants something in his ass,\" I firmly replied, even though I wasn't sure about it.\n\nShe shrugged, \"Actually, if I was profiling, I would argue Chris is the prototype for being anal curious.\"\n\n\"This I've got to hear,\" I sarcastically said, Marina going into full psychological analysis mode.\n\n\"Don't be giving me attitude when I'm just trying to help,\" she threatened.\n\n\"Sorry,\" I apologized, \"I'm really stressed.\"\n\n\"I understand,\" she nodded. \"Do you want to hear my theory?\"\n\n\"I do,\" I nodded, even though I wasn't sure I was going to like what she said.\n\n\"He has grown up in a man's man world. He played NHL hockey which is a man's sport. He is always supposed to be in charge,\" she explained.\n\n\"Okay,\" I nodded, not sure where this was going.\n\n\"Well, for women, the higher the job stress the more likely they want to be submissive in the bedroom. It's not surprising it works the same for men,\" she continued, before adding, \"there isn't a lot of research to prove this.\"\n\n\"I'm still not understanding,\" I replied, my head spinning.\n\n\"It may be that after always being in charge and manning up all those years, that when alone he wants to let go of society's expectations,\" she finished.\n\n\"And take it in the ass?\" I asked, her theory ludicrous.\n\n\"Exactly,\" she nodded. \"It's like many of my female clients who are lawyers, CEO's and even teachers, they get home and no longer want to be in charge, they'd rather be submissive.\"\n\n\"I don't know,\" I said. \"Being submissive in the bedroom is a natural expectation of some women, but guys taking it up the butt....\"\n\n\"It's called pegging,\" she interrupted, before adding, when you do it to him.\"\n\n\"But how do I know he even wants me to do it to him?\" I questioned, still not buying into her theory.\n\n\"If he is experimenting, he likely wants you to,\" she predicted.\n\n\"But he hides the toys and never once has brought it up,\" I pointed out.\n\n\"I'm guessing this is still relatively new to him and his masculine male side is still overriding his vulnerable side,\" she said, \"plus how would you react if he told you he wanted you to fuck him?\"\n\n\"I don't know,\" I said, just as the front door opened.\n\n\"What's the deal-o,\" Bethany, my much younger sister called out.\n\n\"You called Bethany?\" I asked, instantly annoyed.\n\n\"You sounded stressed,\" she shrugged, before adding, \"So I thought I needed reinforcements.\"\n\nBethany walked in and asked, \"So what is the crisis?\"\n\n\"It's fixed,\" I lied, not wanting to talk about this with my fifteen year younger sister.\n\n\"That's obviously not true,\" she countered, turning to Marina.\n\n\"It's complicated,\" Marina said.\n\n\"Complicated is naked twister,\" my sexually liberated, bisexual younger sister quipped.\n\n\"Okay,\" Marina laughed, \"it's not complicated, but confusing.\"\n\n\"Tell me,\" Bethany demanded.\n\n\"Fine! Whatever!\" I said exasperated, \"tell her. I have to pee.\"\n\nI walked out, my head spinning. Marina was confident that Chris wasn't cheating and deep down I didn't think he was either. He wasn't a cheater. Yet, that meant he was likely using toys in his butt and that was something I really wasn't sure about. Was he going gay?\n\nWhen I returned, Bethany, being Bethany, was unable to hide her excitement and said, \"This is super exciting.\"\n\n\"What is?\" I asked.\n\n\"The thought of you pegging Chris,\" she said.\n\n\"I'm happy that excites you,\" I sarcastically responded.\n\n\"No, seriously,\" Bethany continued, bubbling with enthusiasm, \"once you have a strap-on on everything changes.\"\n\nI scoffed, even though it didn't surprise me based on her promiscuous lifestyle, \"You've pegged a guy?\"\n\n\"Only a couple of times actually,\" she said, \"although I've used it quite often with women.\"\n\n\"Of course you have,\" I sarcastically said.\n\n\"Just because you're a prude, don't judge me,\" Bethany shot back.\n\n\"I'm not a prude,\" I protested, hating that word. If you didn't slut it up enough, you were labelled a prude. I had my wild past, but eventually you have to grow up and be a wife and mother. Chris and I had a good sex life: usually once a week and I gave him head once a month, give or take... although more take than give the past while.\n\n\"Well, if you're not a prude then you will seriously consider your husband's sexual needs and not play the woe is me card,\" Bethany responded, sounding like the older sister and not the younger one.\n\nMarina, who had been relatively quiet since Bethany arrived, chimed in, \"She's right, Dani. Chris will need support so he doesn't feel inadequate or less manly, when in truth I would argue his vulnerability and willingness to explore his prostrate makes him manlier.\"\n\n\"What would you say if Blake asked you to fuck his butt?\" I vulgarly asked, trying to make a point.\n\nThere was a silence where Marina's face changed slightly, before she answered, \"You can't let him know you know.\"\n\nBethany jumped up and down like Tom Cruise on Oprah, \"You peg Blake! Fucking classic.\"\n\n\"Yes,\" Marina nodded, her facial expression showing she felt bad sharing this with us.\n\n\"See,\" I said, \"you're ashamed to tell us.\"\n\n\"No,\" Marina shook her head, \"I'm not ashamed of him. Actually I love him even more for being willing to share his desires and insecurities with me. I just don't feel it's right for me to share that part of our sex life with anyone, including my sisters.\"\n\n\"So fucking hot,\" Bethany said, again sounding the fifteen years younger she is.\n\n\"Oh,\" was all I could say as I suddenly did feel like a prude.\n\nMarina, seeing my own insecurities coming through, said, \"Dani, don't feel bad. Although I accepted it without reservation, it was only because of my education. Most women would react like you did, with anger, questions and insecurities. But, that is why we are here, to help you through. This can either cause major strife in your marriage or it can make it stronger.\"\n\n\"Plus, as I mentioned before, once you put a strap-on around your waist a new perspective comes,\" Bethany added.\n\nMarina nodded, \"She is right. You get to see the world from the eyes of a man and it is a very fascinating perspective.\"\n\n\"And super empowering,\" Bethany added.\n\n\"Well I'm not sure about the super verb, but it is empowering and also therapeutic,\" Marina agreed.\n\n\"How is it therapeutic?\" I asked, feeling like I was on Candid Camera.\n\n\"That I can't explain. But understanding sex from the point of view of the giver instead of the receiver is mind blowing,\" Marina explained.\n\n\"Plus. It's super fun to wear a dick,\" Bethany said, before adding, \"whether you're fucking a man or a woman.\"\n\n\"I think I'll focus on men,\" I quickly clarified, and then realized what I said.\n\nMarina said, \"You will need to find a way to bring it up to him in a safe way, because he is unlikely to bring it up himself. Instead, he will live in guilt that he likes something society perceives as gay.\"\n\n\"But what if I perceive it as gay?\" I countered, still unsure how I felt about this whole conversation.\n\n\"It's 2015,\" Bethany pointed out. \"Christ, Caitlyn Jenner has made it cool to go from a man to a woman.\"\n\n\"Who?\" I asked.\n\nBethany roared with laughter. \"I think it's time my big sister joined the 21st century.\"\n\nMarina explained who Caitlyn Jenner was and I was shocked. I recalled vaguely seeing something in a People magazine but not reading it.\n\nMarina suggested going online to read more about it and stressed, \"You can't question his manhood, Dani. It is critical that when you bring this up, you don't make him feel embarrassed or like you respect him less.\"\n\n\"When is he going to be home?\" Bethany asked.\n\n\"Friday,\" I answered.\n\n\"So you have a few days to research, get your head around the concept and go shopping,\" Bethany said.\n\n\"Shopping?\" I asked.\n\n\"For a couple strap-ons,\" Bethany said, \"I'll definitely come with you for that.\"\n\n\"I bet you would,\" I said dryly.\n\n\"I'm just trying to help and I have a fair bit of experience with them,\" she countered, all happy.\n\n\"Fine,\" I sighed, deciding to be crude instead of prude, \"you can take me cock shopping.\"\n\n\"Yay!\" she said, all giddy.\n\nWe chatted for another hour, where Bethany went into way too much detail about pegging her first guy and Marina stressed again a cautious approach.\n\nI finally asked, since we were being so honest with each other, \"How did you find out Blake wanted to be, um.\"\n\n\"Pegged?\" Marina asked.\n\n\"Yes, pegged,\" I nodded, \"which I must say is kind of a weird word.\"\n\n\"I suppose,\" Marina nodded. \"Actually, he mentioned it to me one night after he had fucked my....\"\n\n\"Ass,\" I finished her sentence this time.\n\n\"Yes,\" she nodded, \"this is weird to talk about with siblings.\"\n\n\"No it's not,\" Bethany said, \"it actually makes you two finally seem cool.\"\n\n\"Because we take it up the butt?\" Marina asked, sarcastically.\n\n\"Speak for yourself,\" I countered.\n\n\"Yes,\" Bethany nodded, before turning to me and saying, \"don't knock it until you try it.\"\n\nMarina agreed, \"You'd be surprised at the pleasure it can bring.\"\n\n\"Isn't it painful?\" I asked, assuming it was, but slightly curious.\n\n\"If you survived giving birth, you can handle anal,\" Bethany quipped.\n\n\"Says the one who hasn't given birth,\" I responded.\n\nMarina laughed, \"But she is right. I compare it to losing my virginity. It didn't feel good at first, actually it was downright painful, but eventually it felt good and now I really enjoy it. It's a different kind of pleasure.\"\n\nBethany agreed, \"It's a whole different kind of experience.\"\n\n\"That I believe,\" I nodded, my curiosity at anal sex going from no way in hell to unlikely, but not impossible.\n\nMarina agreed, \"Just as if you ever peg him he needs to be utterly vulnerable, if you ever decide to try anal it is the ultimate trust experience.\"\n\n\"How?\" I asked.\n\n\"Because you are willing to take a risk and give him something you have never given anyone else, plus you are giving total control to him.\"\n\n\"As he will to you once you pound his tight ass,\" Bethany added.\n\nI sighed, \"I just don't know.\"\n\n\"Just have an open mind,\" Marina said.\n\n\"And an open ass,\" Bethany quipped, before bursting out laughing.\n\n\"And regardless of who is taking it in their ass you must use lube,\" Marina warned.\n\n\"Lots and lots of lube,\" Bethany agreed.\n\nRealizing Marina still hadn't really told me about Blake's pegging, I asked again, \"So how did you end up pegging Blake?\"\n\n\"As I said, after he had fucked my ass, and we both came,\" she began.\n\n\"Did he come in your ass?\" I asked, repulsed by the idea.\n\n\"No,\" Marina nodded, before a wicked smile crossed her face as she revealed, \"he shot his load all over my face.\"\n\n\"Gross,\" I said, another thing I had never allowed a man to do to me. I had swallowed many loads, but never allowed the humiliation of getting a facial. It was so demeaning and disrespectful as it made the man dominant and the woman submissive.\n\n\"Prude,\" Bethany quipped.",
        "\"Slut,\" I quipped back.\n\n\"Hard to argue,\" she shrugged.\n\nMarina said, \"You'd be surprised how hot cum feels splashing on your face and how liberating it is to just be a slut for the man you love.\"\n\nI had never considered it that way. I was no slut, although I once had been. But being a slut for my husband, well, that was an idea I could grab onto.\n\nIn my fantasies, when I pleasured myself, I often was back to my slutty past... doing all the things I don't do in real life. Yet, after I reached orgasm I always felt guilty for having such thoughts... I was a mother now, not a cock slut. I said as much. \"Actually, I have often fantasized about being sluttier, but I always feel ashamed after I get off.\"\n\n\"That is natural,\" 'Marina responded. \"Every woman wants to be a slut at some point; every woman wants to just give in and let loose. Alcohol often does that for women.\"\n\n\"So I should drink more?\" I joked\n\n\"It wouldn't hurt on occasion,\" Marina nodded.\n\n\"My head is spinning,\" I said, overwhelmed by all I had learned today.\n\n\"Should I finish my pegging story?\" Marina asked.\n\n\"Yes, so Blake shot a load all over your face,\" I reminded her where we left off.\n\n\"Now who's the crude one?\" Marina asked, looking offended.\n\n\"Sorry,\" I apologized, realizing it was rather rude.\n\n\"I'm just kidding,\" Marina laughed, \"he literally coated my face with his cum.\"\n\n\"Did you come from anal?\" Bethany asked.\n\n\"I always do,\" Marina nodded.\n\n\"Me too,\" Bethany said, excited that she had something in common with her sister.\n\n\"Aaaah, both my sisters can come from anal sex,\" I quipped, not sarcastically as earlier, but playfully.\n\nBethany smirked, \"I bet you would scream like a dog in heat if Chris fucked your ass.\"\n\n\"What a beautiful image!\" I sarcastically quipped.\n\n\"Just saying,\" Bethany shrugged.\n\n\"What are you just saying?\" I questioned.\n\n\"That you are living in anal denial,\" she said.\n\n\"Just because I'm not as wild as you,\" I began.\n\nMarina interrupted, playing peacemaker like she usually did, \"Can I finish my story?\"\n\n\"Yes,\" I nodded, Bethany always able to get under my skin.\n\n\"So, we were back in bed after cleaning up, and he asked me what it felt like to take it in the ass. It was an odd question, as it was truthfully something I had never considered in any real way. After a brief reflection, I answered it was the ultimate sexual trust. He asked what I meant and I explained I was willing to give him my ass and trust him to use it in a sexual, but loving way. He asked if it hurt and I nodded the first time and if not lubed and prepped properly. After a long pause, I could sense he wanted to say more, so I asked him why he was asking this now. He looked so vulnerable as he said, not making eye contact, that he was curious what it would be like to have his ass fucked,\" Marina explained.\n\n\"I forced Billy to take my strap-on one night,\" Bethany added.\n\n\"Of course you did,\" I replied, before asking Marina, \"and then what?\"\n\n\"We talked about it for a while, we went toy shopping together and then eventually I pegged him,\" Marina answered.\n\n\"Did you like it?\" I asked, trying to imagine my sister wearing a strap-on.\n\n\"At first it was strange,\" Marina admitted. \"But the longer I did it the more I enjoyed it. Now I really look forward to the power reversal.\"\n\n\"Power reversal?\" I asked.\n\n\"Whoever owns the cock has the power,\" Bethany declared.\n\n\"That should be a t-shirt slogan,\" I joked.\n\nBethany laughed, \"It's true in lesbian relationships too.\"\n\n\"Good to know,\" I nodded.\n\n\"Never know when you may start questioning your sexuality,\" Bethany challenged.\n\nMarina interrupted, \"One sexual crisis at a time.\"\n\n\"Agreed,\" I nodded. I then asked, one thing still bothering me, \"What about the pantyhose?\"\n\nMarina asked, \"He has a nylon fetish, right?\"\n\nI pointed to my legs, in pantyhose, \"I don't wear them every day for me.\"\n\n\"But he isn't even home,\" she pointed out.\n\n\"He was this morning,\" I countered even though, truthfully, I wore them when he wasn't home too. I had become accustomed to wearing them like I do panties and a bra.\n\n\"Are you ready for one more potentially shocking revelation?\" Marina asked.\n\n\"Why not?\" I shrugged.\n\n\"He likely wears them when he has a toy in his ass,\" she bluntly said.\n\nAs I pondered this, knowing how much he loved to caress my legs in nylons, I nodded, \"That I could believe.\"\n\nBethany added, \"Many men like to cross dress.\"\n\n\"Do you know a normal person?\" I asked, with a smile.\n\n\"You,\" she shrugged, \"or at least you a couple hours ago.\"\n\nWe chatted for a while more. I reluctantly agreed to go to a toy shop with Bethany. Lastly, Marina suggested I read some online columns about pegging that she had found useful after Blake first mentioned his curiosity.\n\nThat night, I chatted with Chris and so wanted to ask him about the toys, but refrained.\n\nYet, after I hung up, I decided to go online and read some of the articles that Marina suggested.\n\nI read a ton of articles including, \"Sex Talk Realness: What Men Think About Pegging,\" \"I Pegged a Boy and I Liked It,\" \"If You Want a More Thoughtful Boyfriend, Try Pegging Him, and \"PEGGING: GREAT FOR A MAN, FUCKING AWESOME FOR A WOMAN.\"\n\nAs Marina had suggested, it didn't mean he was gay and was going to become a cocksucker. No, it was simply about sexual pleasure and becoming one as a couple.\n\nI didn't immediately want to buy a strap-on and pound my husband's ass, but by the end of my research I was a lot more comfortable with the concept, even if I still couldn't fathom me on the giving end.\n\nI chatted with Marina on Tuesday, and she suggested I search pegging erotica; Bethany, meanwhile texted me suggesting I read anal literature.\n\nAlthough I didn't originally plan to, later that night, again after talking to Chris, who said he was looking forward to coming home, I ended up searching pegging erotica. I learned it wasn't as easy to find as I would have envisioned. Yet, remembering that Chris had an erotica website he had searched I went to the top of the browser and clicked on what he last read.\n\nI gasped.\n\nIt was a story called 'T-Girl University'. I read it and couldn't deny it made me wet. I read the less riveting, but still good part 2, and then clicked on the listed similar stories and ended up reading 'Tortured by the T-Girl Tutor'.\n\nI was drawn in by the one thing I had never considered... a woman with a dick.\n\nThe idea of eating pussy did very little for me. I mean I know when a woman is hot and I had done it a couple times in college (who hasn't?), but I was drunk both times. But somehow this intrigued me.\n\nI read a few more t-girl stories, most that had anal and I was suddenly curious. I was by no means ready to drop on all fours and take a cock in my ass, but I was indeed curious.\n\nAs I rubbed myself, I returned to pegging literature.\n\nA lot of it was terribly written, but some of it was sexy, especially the vivid descriptions of men moaning in ecstasy. Chris was quiet and a grunter only when he came and thus the idea of him making sounds and being verbal turned me on.\n\nI ended up masturbating while I read, eventually getting myself off reading stories about men being pegged, while imagining myself sucking and fucking a t-girl.\n\nWednesday I met Bethany at an adult store she recommended. I was nervous for many reasons, including talking about my sex life with Bethany, buying sex toys with my sister and especially buying anal sex toys. That said, I was also kind of excited.\n\nBethany was already there when I arrived and, being her blunt self, asked, all smiles, \"Ready to change your life?\"\n\nI quipped sarcastically, \"Yes, I was hoping you'd teach me how to eat pussy.\"\n\n\"Are you serious?\" Bethany asked, somehow not catching my sarcasm.\n\n\"God, no,\" I laughed. \"That gullibility must get you in some compromising situations.\"\n\n\"I like compromising situations,\" she shrugged, grabbing my hand and leading me through the store.\n\nIt occurred to me that until this very moment I had never been in an adult sex shop. The toy party a while ago prepared me somewhat for what I was about to see, but the things I saw still had me in awe.\n\nOnce she stopped leading me, she asked, \"So are you planning on trying anal too?\"\n\n\"I don't know,\" I admitted, even though I was definitely curious about it, but wanted to start slow and wasn't sure I wanted her knowing about it. The literature I read about anal sex broke a lot of the myths I had in my head about it... yet, I still wasn't sure.\n\nShe handed me a package of three black cocks of varying sizes ranging from tiny to 'holy fuck'. She explained, \"This is a starter pack.\"\n\n\"I think it's more a Goldilocks and the three bears analogy,\" I quipped.\n\n\"What?\" She asked, confused.\n\nI said, pointing to the small one, \"This one is too small, and this one is too big, but this one is just right.\"\n\n\"They are for your ass,\" she pointed out.\n\n\"Oh,\" I said, even though it should have been obvious.\n\n\"The small one is to get you used to having something in your back door, the medium is for once you realize you like it and want more, and you will want more,\" she stressed, before adding, \"and the last one is for the adventurous.\"\n\n\"I'll never be that adventurous,\" I said, unable to fathom how that would possibly fit in even a porn star's ass.\n\n\"It fills you up in ways you can't imagine,\" Bethany smiled.\n\n\"You're right,\" I said shaking my head, \"I can't imagine.\"\n\n\"Either way, it's a great starter kit for you,\" Bethany said, as she grabbed another box. \"And this is a good starter for pegging.\"\n\n\"How do you even know that?\" I asked.\n\n\"I came in yesterday and did some research,\" Bethany answered.\n\n\"How sweet,\" I said, not sure if I should feel flattered or disturbed by her dedication.\n\n\"You can mock me all you want,\" Bethany said, \"but it's exciting for me to finally be able to be the expert at something for my big sister.\"\n\nSuddenly, I felt guilty. She was obviously really trying to help. \"I'm sorry,\" I said, \"I really appreciate your help. I am literally clueless when it comes to such... things.\"\n\n\"No worries,\" she shrugged, before asking, \"What do you think?\"\n\n\"I have no idea,\" I admitted. \"I've never bought one before, obviously.\"\n\n\"Well, it's long and thin, which is good for a first time bottom,\" she said.\n\n\"Bottom?\" I asked.\n\n\"Yes, a guy who takes it in the ass is sometimes called a bottom and the giver a top,\" she explained, making me vaguely recall the term from one or two of the stories I had read.\n\n\"Oh,\" I said, learning so much... albeit stuff I never imagined needing to know.\n\n\"It's more common in the gay community,\" she shrugged. \"Men are usually either tops, men who do the fucking, often with domination aspects or bottoms, men who usually get on all fours and take it in the ass.\"\n\nI don't know why I asked, but I did. \"Aren't there any guys who give and receive?\"\n\n\"Yes, they are called switches,\" Bethany continued her sexual schooling. \"It's also a term in the lesbian community. I would consider myself a switch, for example.\"\n\nAgain I shouldn't have asked, but I was curious and also thought since my sister was sharing something intimate I should ask questions. \"And why are you a switch, I'm guessing it's not just about anal sex in the lesbian culture.\"\n\n\"Well, lesbian relationships are often hierarchical. Either you are the domme or you are the submissive. Now not all relationships are this way, but many are. For example, I am usually the domme, in other words, I tell my lover what to do.\"\n\n\"That I can believe,\" I quipped.\n\n\"I can be a mean domme too,\" she added.\n\n\"That too I can believe,\" I teased, somehow finding this conversation interesting... which I almost certainly wouldn't have a few days earlier.\n\n\"I will make her not be allowed to come for days, I'll make her crawl around the house naked, and I'll make her beg to serve me. I will push her to the limits of her sexual comfort zone, but also know when to not go too far,\" Bethany continued.\n\n\"I just assumed lesbians were women who were in constant sixty-nines,\" I said.\n\n\"Almost never,\" she laughed, \"unless you're in a lesbian orgy.\"\n\n\"Which I assume you have been,\" I said.\n\n\"On occasion,\" she shrugged, before adding, \"but sometimes I want to be the submissive. I want to be told what to do, forced to serve, pushed to my sexual limits. Usually, I only become the submissive to older, experienced women.\"\n\nShe paused for a moment, before adding, \"Like Mrs. Jones.\"\n\n\"Fuck off,\" I gasped. Mrs. Jones was Mom's best friend.\n\n\"She was my first,\" Bethany admitted.\n\n\"You have officially crossed the TMI line,\" I said, unable to fathom such a thing, especially since Mrs. Jones was married to a judge.\n\n\"Sorry,\" she shrugged, \"I do love talking about sex.\"\n\n\"So I can tell,\" I said, still holding the strap-on box.\n\nShe took the box and tossed it in a basket with the butt plugs and said, \"Now here is my favourite fuck toy, a strapless cock.\"\n\nShe handed it to me. It looked like a deformed banana.\n\n\"This part goes inside you and then this part, of course, goes in him or her,\" Bethany explained.\n\n\"You're not trying to convince me to become a lesbian are you?\"' I asked, with an eyebrow raised.\n\n\"No,\" she said, \"but if the opportunity presents itself I would highly recommend you consider it.\"\n\n\"No promises,\" I said, with no intention of ever doing it with another woman.\n\n\"This one even vibrates on both ends,\" she continued.\n\n\"Really?\" I asked, the idea of something vibrating in the butt somehow intriguing.\n\n\"Lots of anal toys vibrate,\" she said. \"I don't really like them, but Sarah did.\"\n\n\"TMI,\" I quipped.\n\n\"Just saying,\" she shrugged, \"each lover has different preferences.\"\n\n\"I assume, this isn't a day one pegging toy?\" I asked.\n\n\"Usually not,\" she nodded, \"but we can assume that Chris has been exploring his ass on his own.\"\n\n\"Oh,\" I said, even though that was now obvious.\n\n\"Don't be sad,\" she said, \"it's no different than you pleasuring yourself while he is gone.\"\n\n\"I guess,\" I said.\n\n\"No, seriously,\" Bethany continued. \"There is nothing wrong with masturbating or anal play on yourself, it's not cheating.\"\n\n\"You're right,\" I nodded, thinking I was being silly and judgemental.\n\n\"For example,\" she smiled, \"it isn't cheating tonight when you shove that small butt plug up your butt.\"\n\n\"Bethany!\" I gasped.\n\n\"Just saying,\" 'she laughed.\n\n\"Well, don't,\" I said, laughing back.\n\n\"On another note,\" she said, \"what do you have for self-help toys?\"\n\n\"A few,\" I admitted.\n\n\"Like?\" she asked.\n\n\"Some vibrators, and a we-vibe,\" I answered.\n\n\"No Ben Wa balls? No suction cup ten inch dick?\" she questioned.\n\n\"I thought my list was rather decent for a prude,\" I quipped.\n\n\"Come with me,\" she said, again taking my hand and the basket with three toys.\n\n\"Yes, ma'am,\" I saluted.\n\n\"If you were my submissive, it would be Mistress,\" she quipped with a serious look.\n\nI laughed, \"That is funny.\"\n\nReaching a new aisle, she said, \"I hope your credit card has lots of space.\"\n\nShe handed me what looked like a back massager. \"Every girl needs one of these.\"\n\n\"A back massager?\" I questioned.\n\n\"You could use it for that too, I suppose,\" she nodded. \"Put that on your clit and just wait for the fireworks.\"\n\n\"Really?\" I asked.\n\n\"It is the most recommended toy among the lesbian crowd,\" she said.\n\n\"You seem to keep forgetting that I don't rug munch,\" I quipped, trying to be crude.\n\n\"No one has a hairy pussy anymore,\" she said, looking at me like I was from another planet.\n\n\"They don't?\" I asked.\n\nShe looked at me seriously and worried, \"Please, please, please, tell me you get regular Brazilians.\"\n\n\"I trim it occasionally,\" I answered. I once shaved completely in college and was itchy as hell forever.\n\n\"Oh my God,\" she said, pulling out her cell.\n\n\"What?\" I asked.\n\n\"Shush,\" she said, as she put her phone to her ear.\n\nAfter a moment, she asked with her often overdramatic tone, \"Carrie, please tell me you have an opening tonight or tomorrow.\"\n\n\"In an hour?\" Bethany asked after a pause, before looking at me and agreeing, \"We will be there.\" After another pause, \"Thanks a million. Okay, bye.\"\n\n\"What was that about?\" I asked.\n\n\"I just got you in at the salon I go to,\" 'she said, turning away and looking at more toys.\n\n\"Why?\" I asked, even though I could guess.\n\n\"To make you a modern woman,\" she answered, grabbing another box. \"Here, this is another must have.\"\n\n\"A rabbit?\" I asked, looking at the box and the long weird shaped vibrator.\n\n\"Yes, this is the newest one,\"' she said. \"The head of the toy rotates inside you, while the rabbit here pleasures your clit.\"\n\n\"Really?\" I asked, often frustrated by the lack of power with my vibe.\n\n\"Yep,\" she nodded. \"We will have to come back another day for the rest of the toys.\"\n\n\"Why would I need more?\" I asked, looking at the basket.\n\n\"A modern woman can never have too many toys. It's the spice of life. Plus, Chris is gone a lot and you shouldn't have to wait for him to return to enjoy yourself,\" she said, grabbing the basket and leading me back to the front.\n\nAt the till, she said, \"Oh crap, almost forgot the lube.\"\n\nThe older woman at the counter asked, \"Your usual, Bethany?\"\n\n\"Yes, Mildred, and batteries, lots of batteries,\" Bethany nodded.\n\n\"Your newest pet?\" Mildred asked.\n\nBethany laughed, \"What? No. She's my still living in the 1990s sister.\"\n\n\"Oh, sorry,\" Mildred apologized, looking at me.\n\nI joked, \"The way she treats me, I often do feel like her bitch.\"\n\nBethany quipped, as I paid for my many items, \"Trust me, if you were really my bitch you would be forever changed.\"\n\nI didn't say anything, as the conversation suddenly felt intense and dripping with implication.\n\nOnce paid, Bethany said, rather loudly. \"Now let's go get that pussy of yours fixed.\"\n\n\"Oh my God,\" I said, embarrassed as a couple other people looked at us.\n\nBethany quipped, as she took my hand, looking directly at the mom and daughter team, \"Can you believe my submissive sister doesn't keep her pussy shaved? Seriously, good submissives are hard to find.\"\n\nI was literally speechless, as Bethany dragged me out of the store.\n\nOnce out, she roared with laughter, \"Did you see the look on their faces when they realized you were my sister?\"\n\n\"No, I had already put my head down in utter humiliation,\" I replied, even as I couldn't help but laugh.\n\n\"You are the prototypical submissive,\" she said.\n\n\"How so?\" I asked.\n\n\"Do you usually try to make people happy?\" She asked.\n\n\"Who doesn't?\" I asked.\n\n\"Me,\" she answered, before asking, \"Where is your car?\"\n\n\"Right there,\" I pointed, literally thirty feet in front of it.\n\n\"Oh, we need to hurry,\" she said.\n\n\"You seriously are making me get a Brazilian?\" I asked.\n\n\"Yep,\" she nodded. \"I'm doing it for you, and Chris.\"\n\n\"And not as my lesbian Mistress?\" I asked facetiously, as I unlocked the doors.\n\n\"Be careful, you would be drawn into the submissive lesbian sub culture in a heartbeat,\" she predicted, as we got into the vehicle.\n\nI wasn't sure why I was being so bad, taunting her. I had no interest in being with a woman. Yet, somehow Bethany was drawing out a side of me that rarely came out.\n\nOnce I was driving and following the instructions on Bethany's phone, she teased, \"You even obey a digital female. Imagine what would happen if she was real?\"\n\n\"Yes, I'd drop to my knees and lick her pussy,\" I quipped, again saying shit I shouldn't.\n\n\"And you would never be the same again,\" Bethany said back.\n\n\"I'd quit dick and join the pussy parade,\" I countered, playing along... having fun talking like I was in college again.\n\n\"Why can't you have your fish and meat too?\" Bethany smiled.\n\n\"So poetic,\" I laughed.\n\n\"You know it,\" she said. \"By the way, finishing your submissive assessment. To recap: you like to make other people happy, you obey my phone and you have listened to me throughout this day.\"",
        "I protested, \"First, making people happy makes me a good person. Second, obeying directions on the phone is just common sense. Third, it's often easier to just appease you than to protest.\"\n\n\"So if I told you to rub yourself at the next red light?\" She asked, her tone sounding serious.\n\n\"I'd say you were on crack,\" I countered, as I ironically pulled up to a red light.\n\n\"Do it,\" she ordered firmly. \"Rub yourself under your skirt.\"\n\n\"No,\" I said, even though, undeniably, I did feel an urge to obey.\n\n\"Now,\" she ordered, her tone becoming firm.\n\n\"No,\" I repeated, even though I felt compelled to obey and also felt my pussy getting tingly.\n\n\"Last time. If not, you will be punished,\" she threatened.\n\n\"Fine,\" I said, moving my hand under my skirt and to my damp pussy.\n\n\"Are you wet?\" She asked.\n\n\"A little,\" I lied, my entire panties sopping wet. I couldn't explain it, but doing as I was told turned me on... Something I never did. I was a feminist and although I loved my husband, our sex life was give and take, not me pleasing mindlessly. Although, I did enjoy getting him off with my mouth and the moments when he'd shoot his cum in me.\n\nHer hand went to my panties and she felt my wetness. \"Liar.\"\n\n\"Bethany!\" I gasped, swatting her hand away.\n\n\"Don't worry,\" she said, \"I'm not going to molest you. I just wanted to prove a point.\"\n\n\"That you're sick and twisted,\" I said, still shocked that I had obeyed her order and that she had touched my pussy.\n\n\"That hypothesis has been proven many times,\" she shrugged, just as a car honked behind me. \"Green light.\"\n\nFlustered, I started driving, again listening to the voice in the phone.\n\n\"You see,\" she said, \"I'm guessing that you have never considered yourself submissive. Yet, you obeyed a ridiculous order from your sister and your pussy is soaking wet.\"\n\n\"I'm wet because of all the toys,\" I defended, even though I really had no idea why I was wet.\n\n\"If you say so,\" she shrugged. \"I better never take you to Le Chateau Club.\"\n\n\"And what is that?\" I asked, unable to just stop a conversation.\n\n\"A very nice lesbian club,\" she revealed. \"You would be devoured there in seconds.\"\n\nConfident that wasn't the case, I argued, \"I don't think so.\"\n\n\"I know so,\" she said confidently.\n\nI don't know why I said it. I don't know why I didn't just shut up. I had nothing to prove. Yet, I said, \"I'll go there anytime.\"\n\n\"Oh, big sis,\" she smiled, \"be careful. I know you better than you know yourself.\"\n\n\"I don't think so,\" I said, now determined to prove her wrong.\n\n\"Next Saturday,\" she said.\n\n\"For your birthday?\" I questioned.\n\n\"Yes,\" she nodded. \"It will be the best present ever.\"\n\n\"What will be?\" I asked.\n\n\"You eating crow,\" she said, as I pulled into a parking lot. She then added, after a few seconds, \"and then pussy.\"\n\nI scoffed, even as I shook my head. She thought I was shaking my head at her, which I partly was, but I was mostly shaking my head at putting myself in a situation that was completely out of my comfort zone and out of my control.\n\n\"I'll text Marina while you're getting your treatment,\" she said, as I put the vehicle into park.\n\n\"She won't go,\" I said, although hoping she would.\n\n\"She's been there with me a few times,\" Bethany revealed, before getting out of the car.\n\nI quickly did too, with even more questions. \"Really?\" I asked.\n\n\"She loves it there,\" Bethany revealed.\n\n\"She hasn't?\" I began, but wasn't even able to finish the sentence, as we entered the salon.\n\nQuestions swarmed me, but I couldn't ask them as I was quickly whisked away with Bethany saying, \"The full treatment.\"\n\nI won't bore you with the full details of the next two hours (yes, two hours). But I was waxed first, which was torture, if I thought the legs hurt to wax (something I had done many times), that was like a hang nail compared to getting the pussy done.\n\nI was then pampered... Like never before.\n\nMy vagina was lotioned, my back massaged, and I got a pedicure and a manicure.\n\nI felt decadent and rich; I also felt sore.\n\nAs I drove Bethany back to the adult shop where she had left her car, she asked, \"Ready to peg Chris?\"\n\n\"Ready, no,\" I said. \"But willing and curious, yes.\"\n\n\"Good girl,\" she said, in a way that oddly made me feel good. I had impressed my little sister, something I hadn't been able to do in the past.\n\n\"So I'm no longer a prude?\" I asked.\n\n\"You can be whatever you want to be, Dani,\" she said, going all life-guru on me.\n\n\"Thanks, sensei,\" I quipped.\n\n\"Sensei, I like that,\" she laughed. She didn't mention any of the lesbian discussion or the submissive stuff, instead talking about her job and how Mom is nagging her even more to have kids.\n\nAs we got back to where this crazy day had started, Bethany said, \"That was the most fun I've had with just you and I.\"\n\n\"You enjoyed treating me like your Barbie Girl?\" I asked.\n\n\"I did,\" she nodded. \"You needed a makeover and this is only the beginning.\"\n\nBefore I could respond she got out of the car.\n\nI shook my head, as I drove home trying to understand what the hell happened the past three plus hours.\n\nBethany texted me a few minutes later:\n\nBe sure to have a nice warm bath and put more lotion on that bald snatch of yours.\n\nI shook my head at her usual blunt eloquence.\n\nYet, I did indeed do just that, although only after ordering food and a couple glasses of wine.\n\nOnce in my bed, exhausted, I realized I hadn't called Chris. Nor had he called me. I then noticed my phone had died.\n\nI plugged it in and when it was finally back up saw three missed phone calls from him, as well as more texts: one from Chris, one from Bethany and one from Marina.\n\nI read them all before calling Chris.\n\nChris:\n\nI hope you are okay and haven't been murdered or kidnapped.\n\nCall me.\n\nBethany:\n\nI expect you try one of the new toys today, my pet.\n\nReading the words 'my pet' sent a shiver down my spine, even though I couldn't explain it.\n\nMarina:\n\nI hope you survived shopping with Bethany.\n\nI laughed at the statement, as I still wasn't sure I had survived. I also wondered about Marina at a lesbian club, but that didn't seem like a text conversation.\n\nI texted Chris:\n\nI'll give you a call in a few. I have a surprise for you!\n\nI also texted Bethany back:\n\nYes Sensei.\n\nI went through my packages. I grabbed the small butt plug and stared at it. It was quite small. Deciding, 'what the hell', I got undressed, lubed the small plug and my anal entrance, and slowly inserted it. After a brief resistance, the small plug slid inside.\n\nIt only burned slightly.\n\nI walked around a bit, and then remembered that I was supposed to call Chris.\n\nFeeling naughty; feeling horny; I pulled out the rabbit, deciding I was going to do something wild.\n\nI opened it, put batteries in it and turned it on.\n\nI watched it move and immediately wanted to feel it in me.\n\nI took off my robe, grabbed my cell, and got on my bed... slowly.\n\nOnce comfortable, I called Chris and he said mockingly, \"Thank God, you weren't kidnapped.\"\n\n\"I was,\" I replied, \"by Bethany.\"\n\n\"Oh God,\" he said, knowing my sister well enough to know such a sentence could only be bad news.\n\n\"Actually, it was rather interesting,\" I admitted.\n\n\"How so?\" He asked, curious.\n\n\"Well, she decided I needed a makeover,\" I revealed.\n\n\"Oh God,\" he said, \"I can't even imagine what that could mean.\"\n\n\"It definitely wasn't a normal makeover,\" I quipped, somehow enjoying the slow building conversation, as I admired myself. My red hot fingernails and toenails, my waxed legs and my completely hairless pussy.\n\n\"Okay, this is getting cryptic,\" he said, \"what did she do, turn you into a lesbian?\"\n\nI laughed, especially considering the odd conversation, \"Yes, I'm a raging pussy muncher now.\"\n\n\"That is hot,\" he said, with a slight laugh.\n\nThat surprised me. But then, it shouldn't. Isn't every guy's fantasy to see two women lez out? I replied, my tone shifting to sultry, \"You'd like that, wouldn't you? Watching your wife between the legs of another woman?\"\n\nAfter a pause, he said, \"I plead the fifth.\"\n\n\"I'll take that as a yes,\" I quipped, as I turned on the vibrator and moved it to the phone.\n\n\"What is that?\" He asked.\n\n\"One of my new sex toys,\" I answered.\n\n\"One of?\" He questioned.\n\n\"Bethany also felt I lacked in the self-help department,\" I revealed, before adding, as I opened my legs and slid the buzzing toy in my pussy. \"Oh,\" I moaned, loudly, as the toy instantly created intense pleasure both inside and outside.\n\n\"Did you just put it inside you?\" He asked.\n\n\"What're you wearing?\" I asked, as I closed my eyes and allowed the pleasure of the toy to take control.\n\n\"Just a t-shirt and shorts,\" he answered.\n\n\"I'm completely naked,\" I moaned, \"even my pussy is completely naked, Bethany made me get a Brazilian.\"\n\n\"Oh my,\" he groaned.\n\n\"Join me,\" I suggested.\n\n\"What's gotten into you?\" He asked.\n\n\"At the moment, a six inch vibrating rabbit,\" I moaned. \"Are you getting undressed?\"\n\n\"Indeed,\" he answered.\n\n\"Good,\" I moaned. \"I want that dick nice and hard for me.\"\n\n\"Already done,\" he replied.\n\n\"Was it the lesbian talk?\" I asked, before teasing, \"Do you want to see me with another woman?\"\n\n\"I again plead the fifth,\" he said.\n\nI said, trying to see if he would admit anything, \"Too bad they don't make toys for boys.\"\n\n\"They do,\" he said, \"they're called inflatable dolls.\"\n\n\"In theory the perfect woman,\" I quipped. \"She never says no, she doesn't want to cuddle after sex and doesn't nag you about leaving the seat up.\"\n\nHe laughed, \"All true, I suppose. But you can't underestimate the touch of a woman.\"\n\n\"Any woman?\" I asked, looking for the hundred percent clarity that he wasn't cheating, even though I no longer believed he was.\n\n\"Only one,\" he said, always knowing when to say the right things.\n\n\"Good answer,\" I purred, before adding, \"you're going to get very lucky when you get home.\"\n\n\"Promises, promises,\" he teased, challenging me.\n\n\"I plan to make your biggest fantasy come true,\" I moaned, the buzzing feeling really good, although I refused to fuck myself with it yet... Instead teasing myself.\n\n\"You are going to allow me a night with Miranda Lambert?\" He joked.\n\n\"Only if you make it a threesome with Blake Shelton too,\" I responded, the only hint I planned to give about my knowledge of his back door fantasies.\n\n\"Whose fantasy are we having now?\" He responded, knowing I was in love with Blake.\n\n\"Are you pleasuring yourself?\" I asked.\n\n\"Just slowly stroking,\" he answered.\n\n\"I want to come together,\" I said.\n\n\"Me too,\" he groaned, ever so softly.\n\n\"Tell me your biggest fantasy,\" I moaned.\n\n\"I have a lot,\" he admitted.\n\n\"Tell me one,\" I said.\n\n\"Okay,\" he said tentatively.\n\n\"No judging,\" I promised, but wanting to open the door to his own anal curiosity, \"But just so you know I currently have a small butt plug in my ass.\"\n\n\"Now I know you are playing me,\" he said.\n\n\"Want to see a picture?\" I asked, trusting him completely with such a risqu\u00e9 photo.\n\n\"You're serious?\" he questioned.\n\n\"Deadly,\" I nodded, before talking dirty, \"Both my holes are filled right now.\"\n\n\"Holy fuck,\" he groaned, clearly turned on.\n\n\"Give me a second,\" I said, strangely excited to turn him on, show him I wasn't a prude even though he had never implied I was one.\n\n\"Okay,\" he said, clearly tentative.\n\nI clicked my phone to camera, shifted my body around so both toys could be seen in me and took the most shocking selfie of my life.\n\nI tried to look sexy while doing it, and after three snaps I was happy with the photo and quickly sent it before I could change my mind.\n\nI returned the phone to my ear and asked, \"Like?\"\n\n\"I didn't get anything,\" he said.\n\n\"Oh fuck,\" I said, realizing my last text message wasn't to Chris, but to Bethany.\n\n\"What?\" He asked concerned.\n\n\"Fuck! Fuck! Fuck! I sent the picture to Bethany,\" I admitted, just as my phone vibrated alerting me I had a text message.\n\n\"Oh, shit,\" Chris said.\n\nI checked the message; of course, it was from Bethany:\n\nWow!\n\nYou really are submissive.\n\nI sighed, as I texted:\n\nThat was meant for Chris.\n\nI then sent it to Chris and said, trying to rekindle the magic, \"Sorry for the delay, do you like?\"\n\n\"Holy fuck!\" he said.\n\n\"Is that a yes?\" I teased.\n\n\"I can't believe what I'm seeing, but a million percent yes,\" he said.\n\n\"Bethany convinced me to stop being a prude and experiment,\" I revealed.\n\n\"Well, I never want you to do something to prove yourself to someone else, including me,\" he said.\n\n\"But what if I want to?\" I asked.\n\n\"Then the luckiest man on earth just got luckier,\" he said.\n\n\"I love you,\" I said, feeling overwhelming passion for him and wishing he was here at the moment.\n\n\"I love you too, sweet pea,\" he replied, using his endearing nickname for me.\n\n\"Now let's phone sex,\" I said.\n\n\"Do you like the toy in your ass?\" He asked.\n\n\"Actually, truthfully, I kind of want to switch to the bigger one,\" I admitted, horny as hell and both wanting to know what something bigger felt like in my ass and also wanting to impress and turn him on.\n\n\"Shit, I wish I was there,\" he said.\n\n\"Do you want to fuck my ass?\" I questioned, wishing the second plug was closer.\n\n\"I truthfully never considered it,\" he answered.\n\n\"Really?\" I asked, instantly hurt.\n\n\"I don't mean that in a disrespectful way,\" he said, instantly recognizing my hurt. \"It's just not something I imagined you would be interested in doing.\"\n\n\"And if I am?\" I asked, somehow now wanting to try it, both on me and him.\n\n\"I would do anything with you,\" he answered.\n\n\"Anything is a pretty big word,\" I pointed out.\n\n\"And I mean it,\" he said.\n\n\"Good to know,\" I moaned, as my pussy burned with need. \"But now I need to come baby. Please tell me a story... a naughty, naughty, story.\"\n\n\"Well, I return home from a long week to find my wife in a cheerleader outfit and thigh highs.\"\n\n\"Mmmmm,\" I moaned, recalling when we used to role play.\n\n\"You're waiting at the door Pom poms in hand,\" he continued.\n\n\"Am I on my knees like a slutty college cheerleader,\" I moaned, as I began to slowly fuck myself with the amazing rabbit.\n\n\"Oh yeah,\" he groaned too. \"On your knees and ready to please.\"\n\n\"That can be arranged,\" I purred, already thinking of going back to the adult store tomorrow to get the costume.\n\n\"I walk to you, you wordlessly take out my cock and slide it in between those perfect lips,\" he continued.\n\n\"You mean my cock sucking lips?\" I questioned.\n\n\"God, yes,\" he moaned. \"You bob hungrily like the cum hungry slut you are.\"\n\n\"Is your first load going down my throat or all over my face?\" I asked, as I began pumping the toy in me faster.\n\n\"All over your beautiful face,\" he grunted, before warning, \"I'm so close, baby.\"\n\n\"Come all over your dirty, cum hungry, cheerleading cum slut,\" I demanded, as my orgasm was imminent.\n\n\"Take my load, my cum slut,\" he grunted, as my orgasm hit.\n\n\"Fuck,\" I screamed, as the most powerful orgasm in eons coursed through me.\n\n\"Clean off my cock,\" he demanded, a few seconds later.\n\n\"Yes, Baby,\" I moaned weakly, my body completely spent, as I pulled out the still buzzing toy inside me.\n\nThere was silence for a minute, maybe more, as both of us recovered from our orgasm.\n\nChris finally said, \"Well, I'll be sure to thank Bethany.\"\n\n\"You do that,\" I weakly laughed.\n\n\"That was utterly amazing,\" he said.\n\n\"Agreed,\" I replied, realizing I still had a butt plug in my ass and that I hadn't replied to whatever texts Bethany followed with.\n\n\"Same time, same place,\" he asked.\n\n\"I have bridge tomorrow,\" I reminded him. Bridge night Thursday was a tradition although we often didn't play bridge. It was a girl's night out away from the husband and kids.\n\n\"Right,\" he said, disappointed.\n\n\"But I'll wear the second butt plug in my butt for you,\" I offered, then shook my head at the offer I just gave.\n\n\"With a picture?\" He asked.\n\n\"Maybe,\" I teased.\n\n\"I'll be home Friday by supper,\" he said.\n\n\"And I know what you are having for dinner,\" I quipped.\n\n\"Yummy,\" he said, before adding, \"I have a pretty big snack for you too.\"\n\n\"And we have Halloween Saturday,\" I reminded him, a new idea suddenly emerging.\n\n\"Looking forward to it,\" he said.\n\n\"And you will wear whatever I choose?\" I asked. Every year we went as some sort of corny couple thing. I had already bought this year's costumes: Jack and Jilll, but a wicked idea suddenly popped into my head.\n\n\"I always do,\" he agreed.\n\n\"Good, because you did say anything,\" I reminded him.\n\n\"Now you have me worried,\" he said.\n\n\"This weekend is fantasy fulfilment weekend,\" I said, before adding, \"for both of us.\"\n\n\"Well, it's going to be hard to focus on work with revelations like that,\" he pointed out.\n\n\"That's the point,\" I rebutted.\n\n\"Fuck, I love you,\" he said.\n\n\"I don't mind you, myself,\" I teased, before adding, \"but now I'm exhausted and need to get to bed.\"\n\n\"Me too,\" he agreed, \"you really wore me out.\"\n\n\"Wait until Saturday,\" I added, giving another hint of my plans, \"I'm going to literally fuck the shit out of you.\"\n\n\"I can't wait,\" he replied.\n\n\"Good night,\" I said.\n\n\"Good night,\" he said.\n\nOnce I hung up, I stood up, bent over and pulled the small butt plug out of my ass. I wondered about the next size and also what a vibrating butt toy would feel like, especially if I already had the rabbit working.\n\nI knew I shouldn't, but as I got ready for bed I checked my text messages:\n\nThere were three from Bethany:\n\nAlthough you think it was an accident, I believe it was your subconscious wanting me to know you obeyed.\n\nThat was ludicrous.\n\nHow do u like the toys?\n\nDid you tell Chris you knew?\n\nI texted back, suddenly feeling rather slutty and guilty:\n\nIt was DEFINITELY an accident. The toys were orgasmic. I hinted, rather slyly, but nothing more.\n\nI'm going to bed now...\n\nI shut my phone off and slept heavenly.\n\nThe next morning, I got back to work. After sending the kids off to school, I sat at my computer and got working. I didn't work full time, as Chris had made good money when he was in the NHL, but I did some online things to make money and kill the time.\n\nWhen I turned on my phone at lunch, there were texts from both my sisters and my husband:\n\nChris:\n\nLast night was amazing; text me when you get home from Bridge night.\n\nLove you.\n\nMarina:\n\nNo response from yesterday! Did you survive Bethany? She tells me she gave you a full makeover. I'm scared.\n\nIf you need to talk give me a call.\n\nBethany:\n\nIs the medium butt plug in yet?\n\nI sighed.\n\nI texted Chris back that I would indeed text him and I expected him ready for action.\n\nI texted Marina back that it was indeed an education, but that it was one I likely needed.\n\nI texted Bethany back that I hadn't yet, but was actually planning to return to the adult shop to get a couple more things after lunch.\n\nCurious what the second plug would feel like, I went to my room and grabbed it. As I looked at it, I reminisced to my joke yesterday with Bethany. The first was too small, the third was too big, but the second, it looked like it should fit just right.\n\nAfter lubing the toy, I lifted up my skirt, tugged down my panties and added lube on my butthole.\n\nI bent over slightly and slid the toy inside me.\n\nA slight burn hit me as I slid it inside. The deeper it went, the more it burned. Yet, I wanted to feel it all in me. And, before I knew it, it was.",
        "I just stood there, allowing the burn to subside as I got used to it in my ass.\n\nEventually, the burn simmered and I felt a sense of accomplishment that I had taken the whole plug.\n\nI then felt silly at the idea that I felt a sense of accomplishment at having my ass filled.\n\nI pulled my panties up, allowed my skirt to fall and decided to be even naughtier. I would go shopping with the plug in my ass.\n\nI felt slutty... sexy... and a bit silly.\n\nBethany texted back as I drove, but I didn't respond until I arrived at the adult shop.\n\nOnce parked, I checked her message:\n\nWhat for?\n\nI decided not to respond, deciding I was giving her way too much information about my sex life... and power.\n\n\"Back so soon?\"' the sales person asked.\n\nI nodded as I returned to the anal toys and was checking out vibrating toys when Bethany voice scared the crap out of me. \"I've created a monster.\"\n\n\"What are you doing here?\" I asked.\n\n\"Checking on my prot\u00e9g\u00e9,\" she smiled.\n\n\"You scared the crap out of me,\" I said, kind of relieved as I had no idea how to choose an actual anal toy.\n\n\"Whatcha looking for?\" She asked, all sing song.\n\n\"A vibrating one,\" I admitted.\n\n\"For you?\" She asked.\n\n\"Um, yeah,\" I nodded.\n\n\"But I thought it was only an out hole,\" she asked.\n\n\"Fine,\" I sighed, \"you were right. Now help me find one.\"\n\n\"Oh how I love those words,\" she smiled, hugging me.\n\n\"I bet you do,\" I replied.\n\nMoving away, she said, \"How was the second plug?\"\n\n\"Good, but I wanted more,\" I admitted, before adding, \"but not butt plug three more.\"\n\n\"Yes, that one is a bit big,\" she nodded.\n\n\"It's dinosaur big,\" I quipped.\n\n\"Oh, but it fills you in a way nothing else can,\" Bethany smiled.\n\n\"You've had one of those in you?\" I asked.\n\n\"Of course,\" she nodded.\n\n\"Is there anything you haven't done?\" I sighed.\n\n\"Everything is worth trying once,\" she shrugged.\n\n\"Oh, to be twenty-five again,\" I countered.\n\n\"Age is just an excuse,\" she shrugged. \"Were you wild at twenty-five?\"\n\n\"Wilder than now,\" I said.\n\n\"Define wild,\" she said.\n\n\"Blow jobs while he drove, joining the mile high club and sex on the balcony at a beach hotel,\" I listed.\n\n\"All good,\" she nodded, before adding, \"I joined the mile high club in the cockpit taking both pilots and a stewardess.\"\n\n\"While in the air?\" I questioned.\n\n\"Yep, 'she nodded. \"Autopilot is amazing.\"\n\n\"Apparently,\" I said, shaking my head in disbelief.\n\n\"Believe it or not, I don't have a lot of experience with vibrating ass toys,\" she said.\n\n\"Prude,\" I quipped.\n\n\"Funny,\" she laughed, before adding, \"I usually use my strap-on.\"\n\n\"Yes, I know. You fuck girls,\" I said, exasperated and loud enough for others to hear.\n\n\"And boys,\" she corrected, not remotely embarrassed. She then called out, \"Cherise, come here.\"\n\n\"No, please?\" I questioned.\n\n\"Trust me,\" she replied, as the older woman quickly came over. \"Yes, Ms. Bethany?\"\n\nI scoffed at the formal response.\n\n\"My sister here is looking for the best anal vibrating toy for her back door,\" Bethany bluntly said.\n\n\"Oh, God,\" I said, instantly embarrassed.\n\n\"Yes, exactly what she should say when it's in her ass,\" Bethany added.\n\n\"Bethany!\" I said exasperated.\n\n\"And that's what they usually scream,\" Bethany smirked.\n\nBreaking the awkwardness, Cherise grabbed a toy and said, \"This is our most popular vibrating anal toy for women.\"\n\nI took it and said, wanting to end this, \"I'll take it.\"\n\n\"In a hurry to fuck your ass, big sister?\" Bethany asked.\n\n\"Oh my God, I'm done,\" I said, walking away and to the till mortified.\n\nBethany didn't follow, nor did Cherise. I then remembered I wanted to buy costumes.\n\nReturning to the anal toy section, I was surprised to find that my sister and Cherise were no longer there. Confused, I went to the costume area and quickly found a cheerleading outfit in an extra-large for Chris. It was unlikely I would find a football outfit here like I wanted, but figured I would play around with his old college stuff at home. I also bought myself a sexy, slutty one for tomorrow night.\n\nThis Halloween was going to be role reversal in every sense of the word.\n\nI grabbed an extra-large thong and a pair of extra-large beige pantyhose and went to the till. A different younger girl was working. I asked, \"Where is Cherise?\"\n\n\"On break,\" she said.\n\nSuddenly I realized where she was, and where my sister was.\n\nI paid for the items, in awe of my brazen sister, and returned to the car.\n\nI was just pulling away when I got a text.\n\nDon't leave!!!!!\n\nI sighed as I backed back up.\n\nI texted back:\n\nWhy? Are you already done?\n\nI was startled a second later when she was at my window.\n\nI rolled it down.\n\n\"Why did you buy two cheerleader outfits?\" Bethany asked.\n\n\"How do you even know that?\" I asked.\n\n\"I asked Carol,\" she said.\n\n\"Halloween,\" I answered.\n\n\"Ooooooooh,\" she nodded, instantly understanding.\n\n\"You can't embarrass me like that,\" I said.\n\n\"Sorry,\" she said, \"I just got caught up in the heat of the moment.\"\n\n\"Fine,\" I said.\n\n\"Let me make it up to you,\" she said.\n\n\"How?\" I asked.\n\n\"Cheesecake,\" she said.\n\n\"You had me at cheesecake,\" I joked, cheesecake being my sugary weakness.\n\nTen minutes later we were eating cheesecake when I asked, even though it was obvious already, \"Did you have sex with Cherise?\"\n\n\"The truth?\" she asked.\n\n\"Why not?\" I shrugged.\n\n\"I just allowed her to have a snack at her break,\" she smiled.\n\n\"Wow,\" I said, \"Lesbians are sluttier than straight people.\"\n\n\"Just more liberated,\" she shrugged.\n\n\"Is that the politically correct way to say slutty in lesbian?\" I smirked.\n\n\"Says the woman walking around with a butt plug in her ass.\" She countered.\n\n\"How do you know that?\" I asked.\n\n\"By the way you walked,\" she said.\n\n\"Well, I want to get used to having something there,\" I admitted.\n\n\"Where?\" she asked.\n\n\"You know exactly where,\" I retorted.\n\n\"I just like hearing my prude sister talk dirty,\" she said.\n\n\"In my ass,\" I whispered, \"Is that better.\"\n\n\"Yes it is,\" she nodded.\n\n\"So how long have you and Cherise been a,\" I paused \"whatever you and she are.\"\n\n\"A few months,\" she said, \"she is very submissive. Making her go down on me in the changing room always gets her off.\"\n\n\"Weird,\" I said.\n\n\"Not really,\" she shrugged. \"Most submissive women will obey almost every order and will, when ordered, go down on their Mistress almost anywhere. Lesbian submissives crave pussy.\"\n\n\"Like I crave cheesecake,\" I quipped, as I finished my piece.\n\n\"Exactly,\" she laughed.\n\nWe chatted briefly about my Halloween plans and she eventually said \"I'm so coming to your party.\"\n\n\"You never come,\" I said.\n\n\"I come daily,\" she said, playing with my words, before adding, \"usually more than once.\"\n\n\"Slut,\" I accused.\n\n\"And loving it,\" she smiled.\n\nBack home, I looked at the toy I bought.\n\nIt was a suction cup, vibrating, nine inch curved black cock.\n\nI knew I should do more work.\n\nBut....\n\nCuriosity took control. Plus, the kids wouldn't be home for an hour.\n\nI went upstairs, got undressed, put the suction cup on the wall, took out the plug in my ass, turned the vibrations on and put excessive lube on the dildo and my ass.\n\nHorny as hell, I got on all fours, a position I really enjoyed with Chris, and backed up towards the dildo. As it poked my ass, I paused.\n\nWas I really about to fuck myself in the ass?\n\nThen my phone rang.\n\nI pondered if this was a sign from above. I got off my knees, walked to the phone and saw it was Chris.\n\n\"Hey, honey,\" I greeted.\n\n\"Have not been able to stop thinking about you all day,\" he opened.\n\n\"Is it because you are looking forward to the cheerleading outfit I bought today or to sodomizing your wife?\" I asked, feeling like a new woman.\n\n\"I was going to say because I love you,\" he replied with a laugh, \"but those are great reasons too.\"\n\nSuddenly another devilish idea popped into my head. \"Where are you?\"\n\n\"At a high school,\" he said. \"I speak in twenty minutes.\"\n\n\"Too bad,\" I purred, as I walked back over to my suction cup cock.\n\n\"Why?\" he asked.\n\n\"I was going to put a show on just for you,\" I said, as I lowered myself to my knees.\n\n\"What kind of show?\" he asked.\n\n\"Find a private spot,\" I ordered. \"And when you do, FaceTime me.\"\n\n\"Okay,\" he agreed, hanging up abruptly. Why hadn't we FaceTimed yesterday?\n\nWhile waiting for his call, I got back on all fours and moved my body back until the cock was at my backdoor entrance.\n\nDeciding we had limited time, and that I was horny and curious, I started without him, pushing my ass slowly back on the cock.\n\nA brief resistance occurred, as if my rosebud was asking, 'You sure about this'? But I was definitely sure, I wanted to shock my husband and I wanted to feel what it was like to have a cock moving in and out of my ass, the plugs just a constant tease.\n\nI pushed back a little harder and the vibrating cock head slipped past my bouncer and was allowed into the party.\n\n\"Oh, God,\" I moaned, as I continued slowly moving back on the cock.\n\nI wasn't sure how deep it was in me when Facetime came on.\n\nI stopped mid-penetration, and pressed talk.\n\n\"Hi, baby,\" I purred.\n\n\"Hi, sweet pea,\" he greeted, at the moment only my face in view.\n\n\"Want another surprise?\" I asked.\n\n\"I'm not sure I can handle it,\" he joked.\n\n\"Ironically, me either,\" I replied, as I resumed taking the cock in.\n\n\"What are you doing?\" he asked.\n\n\"Truthfully?\" I questioned.\n\n\"No, lie to me,\" he joked, like he always did.\n\n\"I'm attempting to fuck my ass with a suction cup black dildo that vibrates while talking to you,\" I answered.\n\n\"What?\" he questioned, his face one of utter shock.\n\n\"Oh God, it's bigger than the plugs,\" I moaned, as the black cock explored new depths in my asshole.\n\n\"You're serious?\" he questioned.\n\nI smiled. It was the same thing he said yesterday. I nodded, as I quoted Bethany, \"Bethany has created a monster.\"\n\n\"More like a goddess,\" he quipped, always sweet.\n\nI yelped, as I felt my ass touch the cold wall.\n\n\"What? You, okay?\" he asked concerned.\n\n\"Cold wall,\" I joked, as I remained on all fours, the dildo now buried completely in my ass.\n\nHe laughed. \"So you really have a dildo in your ass?\"\n\n\"All in,\" I nodded, trying to get used to being so full as well as deal with the simmering pain that accompanied the depth.\n\n\"Wow,\" he said, \"I would never believe it if I didn't witness it with my own eyes.\"\n\n\"Do you think I'm a prude?\" I asked. An odd question at the moment, considering I had a plastic toy in my ass, but his words brought instant insecurities to me. Ironically, before the discovery of his sex toys, being thought a prude wouldn't have crossed my mind.\n\n\"What?\" No,\" he said, \"there were just some things that I understood were off limits.\"\n\n\"Good,\" I moaned. \"Wait a second, let's give you a better view.\"\n\nI was happy I bought a cell phone case that actually had a back piece to have it sit up on its own.\n\n\"Okay,\" he agreed.\n\n\"Where are you?\" I asked, as I fumbled with my cell phone.\n\n\"The teacher's bathroom,\" he answered.\n\n\"Is your dick out?\" I asked.\n\n\"No,\" he admitted.\n\n\"Is it hard?\" I asked, moving the phone so I could see him and hopefully he could see all of me.\n\n\"As a missile,\" he nodded, his eyes going big.\n\n\"Show me,\" I demanded.\n\n\"Okay,\" he said.\n\n\"Can you see all of me?\" I asked.\n\n\"Perfectly,\" he answered.\n\n\"So you can see this?\" I questioned, as I began riding the cock in my ass.\n\n\"Oh God,\" he groaned, as he then showed me his stiff cock.\n\nI realized then that the dildo in my ass was actually longer than my husband's. My husband's cock was 5'5 inches long, but thick (thicker than the dildo in me).\n\n\"I'll take that as a yes,\" I moaned, as I tried to get into a rhythm.\n\n\"God, yes,\" he moaned loudly, as he stroked his cock.\n\n\"Tomorrow it'll be your cock in my butt,\" I promised, as I began getting more comfortable.\n\n\"I can't wait,\" he said, pumping his cock furiously.\n\n\"Are you going to ream my ass, baby?\" I asked, using words from some of the stories I read online.\n\n\"You want to be used like a slut, don't you?\" he asked.\n\n\"At least for a night,\" I moaned. \"I'll be your three-hole fuck toy.\"\n\n\"Shit,\" he groaned, and his cum began shooting out of his cock.\n\n\"Oh yes, baby,\" I moaned, now bouncing fast and hard on the dildo, \"I so want your cum.\"\n\n\"Come, my little ass slut,\" he ordered, which turned me on.\n\n\"Oh yes,\" I whimpered, \"I can't wait to feel your big dick in my asshole.\"\n\n\"I'm going to pound the living shit out of you,\" he continued, able to sense when to push my buttons.\n\n\"You better have more than one load for me,\" I purred, enjoying the pleasure I was experiencing, but not feeling my orgasm bubbling.\n\n\"I better not talk to you tonight,\" he joked, looking at his watch. \"Shoot, I'd love to watch this all day, but I speak in ten minutes.\"\n\n\"Okay,\" I nodded, before pouting, \"I'm going to have to finish this the ole fashioned way.\"\n\n\"Sorry,\" he said, \"I'll make it up to you tomorrow.\"\n\n\"You better,\" I quipped, before pushing the envelope a bit, \"or I'll fuck your ass.\"\n\nThere was a pause before he said, \"Um, okay, good to know.\"\n\nI teased, \"Maybe I'll have to buy a strap-on for you.\"\n\n\"You want to fuck me?\" he asked.\n\nDeciding we didn't have the time for this conversation and I wanted to surprise him Saturday, I replied, \"I was just kidding, stud.\"\n\nHe laughed uncomfortably which made me smile.\n\n\"You better get going,\" I purred.\n\n\"Yes, I better,\" he replied, seeming distracted.\n\n\"Break a leg and tomorrow you take my ass,\" I said, and then hung up. I quickly stood up, the dildo sliding out of my ass and I went to my toys. I grabbed the massager, put batteries in it and returned to the dildo.\n\nI easily took it all back in me, turned the massager on and moved it to my clit as I resumed fucking my ass.\n\nIn seconds, my entire body was on a crescendo to heaven. The massager head brought intense vibrations to my clit and pussy and mixed with the pleasure of the dildo I was fucking I was near eruption in seconds.\n\nI furiously bounced back on the cock until my orgasm exploded and I collapsed onto my carpet, my entire being quaking like the San Andres fault line.\n\nI lay there for an eternity as my entire body's energy was usurped by the orgasm. I may have laid there even longer but I heard the front door open and heard my boys talking.\n\nI quickly got up and cleaned up, shaking my head at the insatiable sex drive that had suddenly been created over the past few days.\n\nThat night, I went out with the girls and saw them in a whole new world. Sex was often the topic, but I usually tuned out. This time I listened; I participated; I made sex jokes; I drank a little more than I usually do. Of course, unbeknownst to all of them, I had a medium sized plug in my ass.\n\nMy hubby texting me he was going to bed a while ago, I had a quick orgasm when I got home with the magic wand and I hit the hay, knowing tomorrow was going to be the beginning of a crazy couple days and nights.\n\nI had already arranged for my parents to take the kids, it was a Halloween tradition that the kids stayed at my parents, although we always met up with them for supper and some trick or treating before returning home for the party.\n\nI spent the day ignoring work, found his football outfit and threw it in the wash, then began decorating the place for the party. I was on a ladder putting up streamers when Bethany scared the crap out of me.\n\n\"So did you like the vibrating ass dildo?\" Bethany asked.\n\n\"Why do you enjoy scaring me all the time?\" I asked.\n\n\"It's Halloween Eve,\" she shrugged.\n\n\"And no, I haven't used it yet,\" I lied.\n\n\"Liar,\" Bethany called my bluff.\n\n\"I'm not lying,\" I lied.\n\n\"You don' lie well, Dani. You never have,\" she countered.\n\n\"Fine, whatever,\" I shrugged, as I came down the ladder, \"I reamed my ass while Face timing Chris.\"\n\n\"He must have enjoyed that,\" Bethany quipped.\n\n\"How do you know that wasn't a lie?\" I asked, my last sentence sounding much more outrageous than my earlier denials.\n\n\"You don't look me in the eye when you are lying,\" she answered.\n\n\"I don't?\" I questioned, wondering if I did this to everyone.\n\n\"Never have,\" Bethany shrugged.\n\n\"Why are you here?\" I asked.\n\n\"I bought you a present for the party tomorrow that I want you to wear,\" she answered, handing me a small box.\n\n\"You know, I'm not your submissive,\" I pointed out, even though I somehow felt compelled to obey her.\n\n\"I know,\" she said, \"just a friendly gift from one sister top to another,\" she answered.\n\n\"What is it?\" I asked.\n\n\"Open it,\" she said.\n\nI did. It was a small egg shaped thing.\n\n\"I'll ask again, what is it?\" I asked.\n\n\"A vibrating egg,\" she said.\n\n\"Not for my ass?\" I questioned, thinking it could easily get stuck inside.\n\n\"God no,\" she laughed, \"although that would be interesting. No, it's just to tease your pussy all night long before the main event.\"\n\n\"The main event?\" I asked.\n\n\"When you peg Chris,\" she bluntly said, \"you are planning to do it tomorrow?\"\n\n\"Maybe I plan to do it tonight,\" I replied.\n\n\"No, tonight, I'm guessing you are giving your ass to him,\" she predicted correctly.\n\nGiving up any sort of denial, I asked, \"How would you possibly know that?\"\n\n\"I know you better than you know yourself,\" she said.\n\n\"But, we are not even that close,\" I pointed out.\n\n\"I'm hoping that changes,\" she said.\n\n\"Me too,\" I nodded.\n\n\"Anyways, I got to go,\" she said, \"But I'll be at the party tomorrow night and remember.\"\n\n\"Remember what, sensei?\" I quipped.\n\n\"Lube, lots of lube,\" she smiled.\n\n\"Definitely,\" I laughed, still finding the conversation surreal.\n\nOnce she was gone, I kept decorating.\n\nWhile Chris was in the air I sent a half-dozen texts to give him my true intent when he got home:\n\nText me when you are close.\n\nTonight I am your complete whore.\n\nUse me as you wish.\n\nCall me names.\n\nShoot your cum where you want.\n\nAll three holes are available for your convenience.\n\nI'm just a bimbo slut created to please her strong-willed Master.\n\nTyping these things got me horny. I had purposely not touched myself or used any toys on myself to keep myself ready and revved up for tonight.\n\nI got dressed in the cheerleader's outfit, with beige thigh highs, the medium plug in my ass, and my hair in pigtails when I got the text.\n\nBe home in ten minutes, slut.\n\nI expect you on your knees and ready to please.\n\nI replied, using a term I had never used with him or any man before:\n\nYes, Master.\n\nI waited a few more minutes. Before making my way to the front entrance, pom poms in hand, dropping to my knees and waiting.\n\nEvery second seemed like an eternity. I couldn't wait to rekindle our sex life. Not that it was terrible before, but it had grown predictable and boring. The flame was still there, but only flickering. I wanted a wildfire.\n\nWhen he opened the door, he left his suitcase, closed the door and walked to me.\n\nHis tone firm, something I usually only heard when he was disciplining the kids, he asked, apparently role playing, \"Why are you here in the Principal's office?\"\n\nI pondered an answer briefly, before answering, \"I was flashing Mr. Peterson, sir.\"\n\n\"And is that appropriate behaviour for a student?\" he asked, now standing directly in front of me.\n\n\"No, sir,\" I whispered, trying to look sexy and sorry.\n\n\"And why then did you do it?\" he asked, his arms crossed.\n\n\"So I would be sent to the principal's office,\" I answered.\n\n\"And why would you want to be sent to see me?\" he asked.",
        "I moved my hand to his crotch, squeezed his already hard dick and said, \"So I could have this.\"\n\n\"Young lady,\" he gasped, really getting into character.\n\n\"Is this hard for me?\" I purred, as I fished it out of his trousers.\n\n\"I don't think an innocent cheerleader like you could handle this,\" he smirked.\n\n\"Sir, does this answer your assumption?\" I questioned, as I deep-throated his entire cock.\n\n\"Dani,\" he groaned, \"you shouldn't be doing this.\"\n\nIgnoring his words, I bobbed furiously on his thick cock, wanting his first load down my throat or all over his face.\n\n\"Shit, you really want to be my slut, young lady?\" he questioned.\n\n\"Yes, sir,\" I nodded, taking his dick out of my mouth and moving to his balls.\n\n\"That's it, slut, suck on my balls,\" he groaned.\n\nI took my time, sucking each ball in my mouth, before slowly slithering my tongue back up his shaft and resuming sucking his cock.\n\n\"Oh yeah,\" he groaned, grabbing my pigtails, a minute later, and doing something he had never done before... he fucked my face. \"Ready to be treated like a complete whore?\"\n\nI couldn't answer as his balls bounced off my chin. Yet, I was completely turned on, as my pussy juice leaked out of my pussy.\n\n\"Ready to get a load all over your pretty face, cum slut?\" he asked, after another minute of rough face fucking.\n\nI moaned in response, my entire body excited.\n\nHe pulled out and demanded, \"Open wide, cum slut.\"\n\nI obeyed, opening my mouth and looking at him furiously stroking his cock.\n\nSeconds later, my face was splattered with rope after rope of cum. I couldn't believe how warm the cum was or how horny I felt being used like that.\n\nOnce done, I wiped the cum off my eye lids and opened my eyes, looking up at him. I asked, \"Is that all you got?\"\n\nHe picked me up and carried me to our room as he said, \"This is just the start, slut.\"\n\nIn the room, he tossed me onto the bed and ordered \"Spread those legs, slut.\"\n\n\"Yes, sir,\" I moaned seductively, opening my legs wide to reveal my newly shaved pussy.\n\n\"No panties, slut?\" he questioned, shaking his head, even as he stared at my pussy.\n\n\"No, sir,\" I replied. \"I thought you would want easy access to my fuck holes.\"\n\n\"Fuck holes?\" he questioned, still unable to take his eyes off my shaved pussy.\n\n\"My young ripe pussy and my tight virgin ass,\" I replied, my tone dripping with naughtiness, as my fingers parted my pussy lips for him.\n\n\"What's that in your ass?\" he asked.\n\n\"A place holder until you fill it,\" I responded, feeling so sexy, so naughty and so eager to please.\n\nHe moved between my legs and said, \"Let's taste what this fresh box lunch tastes like.\"\n\nSo crude, a few days ago this would have disgusted me. Today, it made my pussy gush just as his tongue made contact. \"Oh yes, lick my pussy.\"\n\nChris was always a great pussy licker, but today he won the pussy licking Olympics. His tongue seemed too magical. Every movement brought a rush of pleasure. I moaned, I writhed. I begged.\n\nYet, he teased me relentlessly. Going so slow that I was on the brink for an eternity.\n\nThen he slid his tongue past my pussy and to my ass. He pulled out the plug and surprised me by tonguing my gaping asshole.\n\nI had never even considered having my asshole licked, yet as he did it I loved it. His tongue drove me wild as he probed my asshole. I wanted his dick in it. I wanted to be ass fucked. Badly.\n\nAfter a couple of minutes of ass rimming, he moved back to my leaking pussy and began licking with more aggression. His five day stubble, as his tongue went deep in me, only enhanced the pleasure and my desperate orgasm began building.\n\n\"Oh yes, sir, I'm so close,\" I moaned loudly, as he really worked my pussy over.\n\n\"Beg, bitch,\" he ordered, between hard licks and chin movement.\n\n\"Please, sir, make your cum slut come,\" I moaned, \"then bury that dick of yours in my asshole.\"\n\nHe didn't speak; he just put extra pressure on my clit and instantly the volcano erupted. \"Fuuuuuuck,\" I screamed, as my entire being felt intense pressure course through it.\n\nHe kept licking as my orgasm coursed through me.\n\nWhile I was still trembling, he ordered, \"On all fours, slut. Time to pound that ass of yours.\"\n\n\"Yes, sir,\" I obeyed, weakly getting into the position ordered, and added, pointing to the night stand, \"Please get the lube.\"\n\n\"What do you want, slut?\" he asked, as he got on the bed behind me.\n\n\"Your cock in my virgin shit-hole,\" I answered, wanting to sound like the nastiest slut ever.\n\nI felt lube poured between my ass cheeks and felt his cock rub up and down my ass cheeks, the anticipation driving me wild.\n\n\"Beg,\" he ordered.\n\nI desperately wanted to feel his cock in my ass. I wanted to be used like a slut, an ass slut. I wanted to shed once and for all the prude label. I begged, \"Please sir, shove that big thick dick in my asshole, make me your personal ass fuck toy.\"\n\n\"Last chance to reconsider,\" my husband said, clearly excited to fuck my ass, yet wanting to make sure I wanted it too.\n\n\"Slam it in my ass, sir,\" I responded, ready to get ass fucked for the first time by a real cock.\n\n\"As you wish,\" he agreed, slowly pushing his cock in my ass.\n\nThicker than the wall cock and butt plugs, an instant burn hit me, making me clench my teeth.\n\n\"So fucking tight,\" he groaned.\n\n\"It was made for you, sir,\" I whimpered, trying to get used to his cock in my back door.\n\n\"I expect you in my office every lunch hour for some back door discipline,\" he said, as his cock kept going deeper in me.\n\n\"Yes, sir, I'll be your lunch time cum deposit,\" I moaned, just as I felt his body meet mine.\n\n\"All in, ass slut,\" he declared.\n\n\"Then fuck it,\" I said, wanting to be pounded, reamed, fucked.\n\n\"As you wish,\" he repeated, beginning to slowly fuck me.\n\nAfter a couple minutes of slow fucking, the burn dissipating while a pleasure grew, I demanded, \"Ream your slut's shithole! Don't make love to it!\"\n\n\"You want it rough, slut?\" he questioned, as he grabbed my hair and pulled.\n\n\"Yes, sir,\" I moaned, \"use me.\"\n\nHe held onto my hair, as he began slamming his cock in me. Each forward thrust his body met mine and his cock went as deep into me as humanly possible.\n\nI couldn't get enough. I wanted it hard, deep and rough. \"Oh yes, sir, fuck the shit out of me.\"\n\n\"Oh God,\" he groaned, as he pulled my hair. \"You're such a dirty whore.\"\n\n\"Oh yes,\" I moaned, \"Just for you, sir.\"\n\nHe fucked me hard forever, eventually putting both hands on my hips. And although I was feeling great pleasure throughout the ass fucking, I reached for the magic wand I had put under the pillow as I wasn't able to get off, the orgasm at the brink but refusing to cross it.\n\n\"Is that one of your new toys?\" he asked, breaking character.\n\n\"One of manyyyyyyyyy,\" I moaned, as I turned it on and moved it to my fevered cunt.\n\n\"You going to come from getting ass fucked?\" he questioned,\n\n\"Yes, sir,\" I moaned loudly, the double stimulation immediately enhancing the pleasure.\n\n\"Come now, slut,\" he demanded, spanking my ass.\n\n\"Yes, sir,\" I whimpered, my orgasm building quickly.\n\n\"Now, slut,\" he ordered, continuing to fuck me hard.\n\n\"Yes, yes, yes, fucking shit,\" I babbled, as the second orgasm cascaded through me.\n\nHe kept fucking me throughout my orgasm, as I dropped the massager which was suddenly beginning to make my pussy sensitive.\n\nPulling out a minute or two later, time irrelevant at the moment, he flipped me onto my back, straddled me, pulled off my sweater and began fucking my tits, something else he had never done.\n\nI squeezed them together and purred, \"Are you going to come on my titties, sir?\"\n\n\"Or all over your face again,\" he smirked, looking down at me, clearly enjoying this special night of sexual submission.\n\n\"Come wherever you want, sir,\" I smiled back, having my tits fucked feeling rather odd. Not a major turn-on, but if it turned him on, so be it.\n\nSweat was dripping off his brow and I asked, after another minute, \"Do you want me to finish you off, sir?\"\n\n\"You want to suck my cock that was in your ass?\" he asked, surprised.\n\n\"I'm your slut tonight, sir,\" I smiled, \"I will do whatever you tell me to.\"\n\n\"Then get sucking,\" he said, getting off me and rolling onto his back.\n\nI crawled between his legs and took his cock, which was last in my rear, in my mouth. The taste was not overly pleasant, yet doing such slutty things somehow made it okay. I bobbed hungrily on his cock, taking it deep in my mouth, listening to his moans.\n\n\"Oh yeah,\" he groaned, \"so close.\"\n\nI asked, as I swirled my tongue around his mushroom top, \"Where do you want to shoot your load?\"\n\n\"On your face again,\" he answered, weakly.\n\n\"Tell me when to stop,\" I said, resuming deep throating him.\n\nI bobbed for another minute or so before he said, \"Now.\"\n\nI moved my face over his cock, pumped his cock with my left hand, closed my eyes and waited for the cum.\n\nSeconds later I received my second facial from him that night and from him ever.\n\nHis cum coated my nose, lips, cheek and chin before I opened my mouth and retrieved the last of his cum.\n\nCum dripping off my chin, my ass gaping, my pussy leaking, I felt like a complete slut... which somehow made me feel liberated, as if the years of propriety and shackles of being a good wife and mother were finally taken off.\n\n\"Holy fuck,\" he groaned, \"Please stop.\"\n\nI did and asked concerned, \"What?\"\n\n\"I need to pee,\" he said.\n\n\"Oh,\" I laughed, as I pondered what it would feel like to be peed on. That said, the thought quickly faded as I thought that was pushing my limits a bit.\n\nThankfully, he never mentioned anything as he got up and went to the bathroom.\n\nI rolled onto my back, physically exhausted and completely satisfied. When I heard the flush of the toilet, I got up myself, needing to pee also... plus I wanted to see what my face looked like with two loads of cum on it.\n\nAs he walked out, he asked, \"Hungry?\"\n\n\"For more cum?\" I asked, with a sly smile.\n\n\"I was thinking some actual dinner,\" he said.\n\n\"Yes, we should probably refuel,\" I nodded, giving his flaccid cock a squeeze.\n\n\"Chinese?\" he asked.\n\n\"Sure,\" I nodded, before going to the washroom.\n\nLooking at myself in the mirror, I barely recognized myself. I had cum everywhere on my face. Oddly, what popped into my head was 'I wish Bethany could see me now'.\n\nI went pee, washed my face and legs, put my robe on and returned to the bedroom.\n\nThe rest of the night was great. We talked about our marriage and how we needed to have more nights like this, we chatted about getting away for a weekend soon, and discussed final plans for Halloween tomorrow. He asked a few times what I had purchased for him for tomorrow, but I refused to tell him, only saying, \"Tomorrow, you do what I tell you.\"\n\n\"Yes, Mistress,\" he saluted.\n\n\"Mistress,\" I smiled, \"I like that.\"\n\nWe fucked one more time that night after eating supper and watching a movie (cuddling the entire time), although we did it the ole fashioned way... cock in pussy.\n\n.....\n\nSaturday I was giddy with excitement.\n\nI felt I was a new woman.\n\nI felt rejuvenated.\n\nAnd I couldn't wait to surprise him tonight.\n\nBethany texted me:\n\nReady to peg!!!\n\nI texted back, a big smile on my face:\n\nI'm antici-PEGGING it!!!\n\nShe texted back:\n\nYou're hilarious!!!\n\nWe finished decorating, Chris asking me a dozen times what costume he had to wear tonight. I refused to tell him until after we returned from dinner and trick or treating with the kids.\n\nI went upstairs put the cheerleading suit, panties, pantyhose and blonde wig on the bed and called out, \"Meet me in the bathroom.\"\n\n\"Okay,\" he said, as I grabbed the make-up I had planned to use it make him look pretty.\n\nI ordered, \"Sit on the toilet.\"\n\n\"Okay,\" he said again, used to me putting make-up on him on Halloween.\n\nI spent twenty minutes doing it all. Eye-liner, blush and lipstick. He impressively didn't ask once what I was doing.\n\nWhen done, \"I ordered, \"Close your eyes.\"\n\nHe did.\n\nI led him out of the bathroom and said, \"Your costume is on the bed, honey.\"\n\n\"Okay,\" he said.\n\n\"I hope you like it,\" I said, as he went to the bedroom.\n\nI followed out of curiosity.\n\nHe saw the cheerleader outfit on the bed and asked, \"Where is my outfit?\"\n\n\"Right on the bed,\" I answered, pointing to the cheerleader outfit.\n\n\"No way,\" he said.\n\n\"Way,\" I smiled.\n\n\"You want me to cross dress?\" he asked.\n\n\"I thought it would be fun,\" I shrugged. \"You love touching me in nylons, I figured why not let you wear them, especially on a day where no one will think anything of it.\"\n\n\"Okay,\" he said, sounding unsure.\n\n\"You said you would wear whatever I told you to,\" I reminded him.\n\n\"Yes, Mistress,\" he said, smiling at me.\n\n\"Good boy,\" I smiled back, smacking his ass and saying, \"I got to go and put my outfit on.\"\n\n\"What are you wearing?\" he asked.\n\n\"It's a surprise,\" I smiled, all sing-song, walking out.\n\nI went downstairs, put the egg in my pussy thinking it would be fun to have it in me while no one else knew any wiser (although I couldn't figure out how to turn it on), and oddly feeling compelled to obey my sister, wanting to keep impressing her. I put on a thong to keep the egg thing in me (that would be embarrassing if it fell out while I had guests), and then put the strap-on cock on. I struggled to get the lower pads on me, before I put the shoulder pads on and his favourite football jersey. I added some black lines under my eyes, put my hair in a ponytail and headed upstairs.\n\nThe doorbell rang before I got to see Chris, so I went to the door to greet my first guest. A few more quests arrived, each roaring with laughter seeing me dressed as a guy and each asking what Chris was dressed as. I answered the same each time that they would have to see for themselves.\n\nI was already finishing my first glass of wine when Chris finally came downstairs.\n\nEveryone broke out in cat calls, whistles and cheers. Chris, playing the part, did a cheer with his pom poms.\n\nThe next few hours we partied, visited and drank. I whispered in his ear a few times that I couldn't wait to fuck her tonight, purposely using the feminine pronoun.\n\nBethany arrived around midnight, completely drunk, dressed completely slutty with a young, high school age looking, redhead. Bethany asked, \"Wearing your cock?\"\n\n\"I am,\" I nodded.\n\n\"Wearing the egg I told you to wear?\" she asked.\n\n\"I am,\" I again nodded, before adding, \"I couldn't figure out about how to turn it on.\"\n\n\"No?\" she asked, with a sly smile as suddenly I felt vibrations inside me.\n\n\"Ohhhhhhh,\" I moaned.\n\n\"Do you want my pet here to get you off before the main attraction, sis?\" she asked.\n\n\"Seriously?\" I asked, looking at the redhead who didn't seem remotely phased by the offer made by her date.\n\n\"Oh yes,\" Bethany nodded, \"and Carolyn here will have you screaming in seconds, won't you?\"\n\n\"Yes, Mistress,\" Carolyn answered.\n\n\"You're crazy,\" I said, as I asked, \"Is she even legal?\"\n\nBethany laughed, \"She's a coed in pre-med, aren't you?\"\n\n\"Yes, Mistress,\" she answered.\n\nThe idea of getting licked by an experienced lesbian, especially a beautiful coed like Carolyn, was surprisingly appealing (maybe because I was drunk, maybe because I was horny (both because I couldn't wait to fuck Chris, and the egg vibrating inside was driving me wild) and maybe because the idea of lesbian sex was beginning to appeal to me), but I resisted, \"I need to get back to the party.\"\n\n\"No coming from the egg,\" Bethany ordered.\n\n\"Yes, Mistress,\" I quipped, then realized I had said it. I then winked, as if I was just kidding.\n\nShe smiled and I felt the buzzing change patterns to something more intense as I walked away, making my legs buckle slightly.\n\nI decided that even though the party was still in full swing, I needed to fuck him now.\n\nI found him chatting with a couple of his buddies and I went to him and whispered, \"Bedroom now, bitch,\" and walked away.\n\nI headed to the room and waited for him. After a couple of minutes of waiting, just when I was beginning to wonder if he was coming, he walked into the room and locked the door. \"You can't wait for the guests to leave?\"\n\n\"Come here,\" I ordered, before adding, \"I can't wait any longer.\"\n\n\"To do what?\" he asked, slyly.\n\n\"Make your deepest fantasy come true,\" I added.\n\n\"That happened last night,\" he said with a big smile.\n\n\"I mean your darkest, most secretive, fantasy.\" I whispered, as I put my hands on his shoulders, pushed softly and ordered, \"Knees.\"\n\nHe looked at me surprised and confused, but obeyed.\n\n\"Pull down my pants,\" I ordered.\n\nHe did and gasped as my cock sprang to life in front of him.\n\n\"Suck it, my pretty cheerleader slut,\" I demanded, as I tapped his lips with it.\n\nHe looked up at me with a confused, insecure look. I explained, \"I found your bag of toys.\"\n\n\"Oh,\" he said, his face going beet red.\n\n\"And tonight you're my slut,\" I explained, \"no questions asked.\"\n\n\"You're serious?\" he asked.\n\n\"That's a question,\" I said and shoved my cock in his open mouth.\n\nHe gagged briefly, before tentatively beginning bobbing on my thin cock as he closed his eyes.\n\n\"You look so sexy with a cock in your mouth,\" I moaned and meant it.\n\nHe bobbed slowly, taking only a couple of inches in his mouth.\n\n\"Do you want me to fuck you, honey?\" I asked.\n\nHe looked up at me, his face wearing a look of shame.\n\n\"It's okay, honey,\" I said, \"I did a lot of research and a man wanting to be fucked is natural.\"\n\n\"It is?\" he asked, as I pulled the cock out of his mouth.\n\n\"Have you been putting the toys you bought in your ass?\" I asked.\n\n\"Yes,\" he nodded after a pause, still looking ashamed.\n\n\"Honey, it's okay,\" I said, as I moved my cock around his lips. \"I know you want it and I want to give it to you. Now bend over the end of the bed.\"\n\n\"I thought you would be ashamed of me,\" he said, as he stood up.\n\n\"Honey, I love you completely and want you to be able to share anything you fantasize with me,\" I said, as I walked over and grabbed the lube. \"It makes for a good marriage.\"\n\n\"You don't think it's gay?\" he asked, not moving.\n\n\"Honestly, I did at first,\" I admitted, before explaining, \"After talking to my sisters and doing some research I came to understand prostate pleasure and male submission.\"\n\n\"You told your sisters?\" he questioned, mortified.\n\n\"I didn't mean to,\" I said, explaining, \"I found the toys and thought you were cheating on me. It was Marina that assumed the toys were for you.\"\n\n\"Oh my God,\" he said, clearly mortified.\n\n\"If it makes you feel any better, Blake likes it in his ass too,\" I revealed.\n\n\"This is surreal,\" he said, clearly not yet able to accept all he was hearing.\n\nStanding in front of him, I said, as I rubbed his hard cock through his pantyhose, \"Look honey, this secret has made me closer to my younger sister, created new chemistry in our bedroom and is about to make your fantasy and curiosity come true.\"\n\n\"I just can't believe they know,\" he said, even as his cock flinched in my hand.\n\n\"Does it really matter?\" I asked, squeezing his dick firmly before I kissed him, \"They are not going to tell anyone and now I really want to fuck you, I mean...I literally want to fuck you.\"\n\n\"You do?\" he asked, looking so vulnerable.\n\n\"Badly,\" I purred, before going domme, \"Now bend over the bed, I've been fantasizing about this all day.\"\n\n\"Fucking me?\" he asked.\n\n\"Fucking my cheerleader slut,\" I purred, pushing him towards the bed.\n\n\"What is that buzzing?\" he asked.\n\n\"A vibrating egg,\" I answered.\n\n\"A what?\" he asked.\n\n\"Long story,\" I said, \"But it's got me horny as hell. Now bend over the fucking bed, baby, it's time for me to fuck you.\"\n\n\"You sure?\" he asked, still not completely sure.",
        "\"Now, slut,\" I ordered, deciding to change this into a role play.\n\nThis seemed to work as he replied, \"Yes, Mistress.\"\n\nI lifted up his short skirt, pulled his pantyhose down to his knees, tugged his panties down and poured lube down his ass crack. I purred, as a well lubed finger slid inside his ass, \"I've been dying to fuck this ass, sexy.\"\n\n\"Oh, God,\" he groaned, as I explored his ass with my finger.\n\n\"You want me to fuck you?\" I asked.\n\n\"Yes,\" he moaned, his head on the bed and his eyes closed.\n\nI pulled my finger out, moved my cock between his ass cheeks and slowly slid the thin cock in.\n\n\"Oh, God,\" he repeated, with a moan.\n\n\"Oh, yes,\" I purred, as I watched the cock disappear in his ass.\n\n\"I can't believe you're doing this,\" he whimpered, as the whole cock filled him.\n\n\"We're doing this,\" I corrected, before asking, \"You like it?\"\n\n\"Oh God, yes,\" he whimpered.\n\n\"Talk to me,\" I said, wanting to hear him talk, \"Tell me what you want.\"\n\n\"I want you to fuck me,\" he whispered.\n\n\"Louder,\" I demanded, bucking my hips into him, making the cock go deeper in his ass.\n\n\"Oh fuck,\" he yelped, \"fuck my ass, baby, fuck my ass hard.\"\n\n\"You sure?\" I asked, repeating the same question he asked last night before he pounded my ass.\n\n\"Please, fuck me,\" he begged.\n\nAnd I obliged. Like him, I started slow, allowing him to get used to it.\n\n\"Oh yes,\" he groaned, and after a few strokes begged, \"Harder baby, fuck me harder.\"\n\nAnd I did, putting my hands firmly on his hips and beginning to fuck him hard.\n\nAs he moaned, I couldn't fathom the rush of adrenaline I had as I had the power. I had the cock; I had the power.\n\nListening to him whimper and moan was exhilarating.\n\nAfter a few minutes, as I continued fucking his ass, I couldn't help but realize how much being the one doing the fucking was exhausting. I had an all new appreciation for my husband and the man.\n\nI asked, \"Are you going to come, baby?\"\n\n\"So close,\" he moaned.\n\nI reached under and grabbed his throbbing dick as my cock was deep in him.\n\nI stroked his dick and whispered, \"Come for me, baby. Come with my dick buried deep in your ass.\"\n\n\"Ohhhhh,\" was all he could muster as I felt his cock pulse and begin spewing all over the bed spread.\n\n\"Oh yes, baby,\" I purred, \"I love you so much.\"\n\n\"Me too,\" he whimpered, as he kept coming and coming.\n\n\"Shit,\" I said, \"I would have given you my face to paint if I knew you were going to come that much.\"\n\nHe laughed softly as I finished stroking his cock.\n\nI lay on him, my cock still buried in his ass, for a couple of minutes, like he often did me, enjoying the afterglow of good sex.\n\nI pulled out and said, \"We should probably get back to the party.\"\n\n\"Fuck,\" he said, \"there are people here.\"\n\n\"Yeah, so don't walk around bowlegged,\" I quipped.\n\n\"Well, your sister's conversation makes a lot of sense now,\" he said, as he stood up.\n\n\"What did she say?\" I asked, worried.\n\n\"I'll tell ya later,\" he said, looking at the clock. \"Shit, we've been gone almost half an hour.\"\n\nI shrugged, as I got dressed again, \"They'll think you were fucking me.\"\n\nHe laughed, \"That is probably true.\"\n\nI pointed out, looking at him sternly, \"I do expect a good fucking when the party is done.\"\n\n\"Oh,\" he smiled, as he pulled up his panties and pantyhose, \"I plan to return the favour.\"\n\n\"Good,\" I nodded, \"now get back to the party, Christina.\"\n\n\"Christina?\" he questioned.\n\n\"Yes, my little slut,\" I smiled, as I spanked his ass.\n\n\"Yes, Mistress,\" he said, as he grabbed my hand and we returned to the party, the buzzing in my cunt still driving me nuts.\n\nAs we went our separate ways, I went to the kitchen for more wine. As I was in the fridge, I heard Bethany say, coming up behind me, \"Come now, sister slut.\"\n\nThe vibrations became way more intense and I gasped, \"Holy mother fucker.\"\n\n\"No, sister fucker,\" Bethany quipped, before ordering, \"now come, my pegging pet.\"\n\nI grabbed the fridge door as the vibrations ripped through me and in seconds my orgasm was erupting through me. I bit my lip so as not to scream as I came in my kitchen.\n\n\"And you say you're not a submissive,\" she whispered into my ear, as she handed me the remote control.\n\nI didn't speak, as I allowed the orgasm to finish its course through me.\n\n\"See you next Saturday,\" Bethany said, slapping my ass.\n\nI sighed, recalling my promise to go to a lesbian club for her birthday.\n\nSherry, a friend of mine, walked in and said, \"Where's more wine?\"\n\n\"Right here.\" I answered, shutting off the egg, grabbing a bottle of wine and resuming the role as hostess.\n\nTHE END\n\nWant to just read the male side of the story: Read Kinky Tales: I'm Pegged by Wife.\n\nDo you want to read more of Dani's sexual awakening?\n\nComing someday if enough people want it:\n\nKinky Tales: Lured into Lesbianism\n\nKinky Tales: Orgy\n\nKinky Tales; Sisterly Love\n\nKinky Tales: Willingly Cuckolded"
    ],
    "authorname": "silkstockingslover",
    "tags": [
        "pegging",
        "pegged",
        "anal",
        "stockings",
        "wife",
        "submissive",
        "love",
        "fantasy",
        "lesbian",
        "strap-on"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/kinky-tales-i-pegged-my-husband"
}
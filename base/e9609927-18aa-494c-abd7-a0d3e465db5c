{
    "title": "Two Hundred Dollars Ch. 28",
    "pages": [
        "15 Dollars \n\nSunday morning, groggy but awake, Kent heard his phone ring. \n\nWhat the hell? he wondered. Someone wants to talk? \n\nStranger yet, the phone reported the caller as Laura. He only had her number stored because she'd texted from the coffee shop once in October. \n\n\"Hello?\" he said. \n\n\"Hello, Kent?\" Laura's voice came through awkward and formal. \n\nNeither of us uses a phone for talking, I guess. \n\n\"Laura?\" \n\n\"Do you have dinner plans tonight?\" \n\nVery, very formal, then. \n\n\"I never plan my day that far ahead,\" he replied. \n\n\"My dad's going to be away for Thanksgiving,\" she said. \"You know, the American one next weekend? So we're doing the big turkey thing tonight.\" \n\n\"Oh.\" \n\n\"So,\" Laura said. \"My mom thought it would be nice to have you and Bailey over, since you're my friends and all.\" \n\n\"I'm, um,\" Kent stammered. \n\nI'm not turning down a free dinner, and I bet a good one, too. \n\n\"I don't even know your parents,\" Kent said. \"And they invited me for dinner?\" \n\n\"I've told them about you,\" Laura replied. \n\nThat's a bit ominous, actually, Laur, Kent fought back a surge of panic. \n\n\"Should I bring-\" \n\n\"No!\" Laura cut him off. \"Mom says you're not to bring anything, alright?\" \n\n\"I... alright,\" Kent shrugged. \n\n\"Six thirty,\" she said. \"Don't be late. And try to wear something nice-ish, okay?\" \n\nNice-ish. I can do nice-ish, probably. Dress pants and a collared shirt, at least. \n\n\"Do I need a tie?\" \n\n\"No,\" Laura chided. \"Just nice. Like, real pants, maybe.\" \n\n\"Okay,\" Kent said. \"Six thirty.\" \n\nA moment later, Bailey came by his room with a giddy smile on her face. \n\n\"Coming to dinner, are we?\" she pitched a high English accent. \n\n\"That's gonna be weird,\" Kent said. \"I don't even know these people.\" \n\n\"You know me and Laura,\" Bailey shrugged. \"The Andersons are nice. Just call them Mr. and Mrs. and you're fine.\" \n\n\"Any spankings today?\" he wondered. \n\nBailey shook her head, her eyes widening as her hands instinctively moved to protect her backside. \n\n\"Carson will be out Tuesday,\" she told him. \"My butt'll feel okay by then, and we'll have lots of time.\" \n\n\"It's a date,\" Kent said. \n\n\"Uh-huh,\" Bailey rolled her eyes. \"I'm gonna head over and see if I can help with dinner.\" \n\n\"Should I?\" \n\n\"No,\" Bailey sighed. \"They're pretty old fashioned. Girls and women make food, not boys and men. \n\nShe waved and disappeared out of his doorway. \n\n============================= \n\nNo matter how nice the fathers of his previous girlfriends had treated him, dealing with a dad almost always set Kent's stomach churning. \n\nLaura's not my girlfriend, he noted, but meeting the parents of 'girl I pay to spank' isn't a much easier gauntlet to run. \n\nKent resolved, as his PC reported five o'clock, that the only way through the next few hours required him to think of Bailey and Laura as two of his friends, and not the two girls he spanked on a regular basis. \n\nJust don't think about their butts, he inhaled deeply and tried to focus. Don't think about pinching Laura's nipples, tying up Bailey's wrists... \n\n\"Kent!\" Bailey burst into his room, already partially dressed up in her skirt and a reasonably fashionable, dark red blouse. \"Lemme see your phone.\" \n\n\"Uh, sure.\" \n\n\"Unlock it for me.\" \n\nKent handed the phone over while he meditated. \n\nDon't think about them spanking each other. \n\nBailey started installing an app on his phone \n\n\"What are you doing?\" Kent wondered, trying to look only at Bailey's eyes. \n\n\"A counting app,\" Bailey dismissed him with a wave as she focused on his phone. \n\nDon't think about their breasts rubbing together. \n\n\"Why?\" \n\n\"There,\" Bailey said, handing it back to him, \"It's set up so it works even when your phone is locked. You can use the volume buttons to control it.\" \n\nDon't think about all the poses they've done, or the pictures we've taken. \n\n\"Why would I want to do that?\" Kent asked. \n\nAnd definitely, definitely, don't think about all the panties I've seen. \n\n\"So you can secretly count the number of times we flash our underwear at you.\" \n\n\"I,\" Kent stammered. \"What!?\" \n\n\"A little game,\" Bailey batted her eyelashes at him. \"We both wear skirts and try to, you know, show you our panties.\" \n\n\"Is that a good idea?\" \n\n\"It's a great idea,\" Bailey said. \"Press 'Volume up' for me and 'Volume down' for Laura. You can use it while it's still in your pocket. The rule is, 'any part of our panties'. You see the fabric, it's a point, right? Front, back or even the waistband at the side, doesn't matter.\" \n\n\"Great,\" Kent nodded, wondering how he'd keep his erection under control. \n\nHopefully anxiety will keep me in check. \n\nBailey lifted her skirt, \"And we're both wearing white panties, see? That makes it fair.\" \n\nAnxiety is not working so far. \n\n============================= \n\n\"Thanks, Mr. Anderson,\" Bailey said as Laura's father held the door open for her. \n\nLaura brought in the last bag of groceries from the car, just behind Bailey. \n\nMrs. Anderson, having discovered a certain number of deficits in her dinner preparations, had bustled all three of them off at six o'clock to save Thanksgiving from utter ruin. \n\nAs she brought the groceries in, Bailey spied Kent sitting at the kitchen table. \n\nIs it six thirty already? Bailey wondered. Funny, he's in the same seat he used when Laura made him breakfast last weekend. \n\n\"Hey, you,\" she smiled. \"How long you been here?\" \n\n\"Just a bit,\" Kent replied, awkward as she'd expected him to look, and desperately relieved to see Bailey arrive, latching onto her eyes like a lost tourist to a free Wi-Fi connection. \"Didn't want to be late.\" \n\nBailey dropped the bag off in the kitchen, where Mrs. Anderson toiled at the stove, wearing a floral, pink and blue apron that closely matched Laura's pink and yellow apron, currently hanging over the back of one of the kitchen chairs. \n\n\"Kent was just telling me,\" Mrs. Anderson called over her shoulder, \"That a lot of his lectures and yours overlap, Bailey, dear.\" \n\n\"Yes, Mrs. Anderson,\" Bailey smiled, \"We see a lot of each other.\" \n\n\"It must be nice having someone around to study with,\" Mr. Anderson put in, unloading groceries into the fridge. \n\nA tall, somewhat gaunt-looking but cheerful man, Mr. Anderson tended to stoop whenever he went through doorways, leery of his own height. He stood in contrast to his wife, who had clearly provided Laura with the DNA for her height. Thin and short, Mrs. Anderson ruled her household from kitchen, giving out orders while she worked. \n\nKent saw how little room the kitchen had for so many people and got out of his chair so he could slide it under the table to give more space for traffic. \n\nBailey smiled, \"Just going to hit the washroom. Freshen up.\" \n\nShe got just around the corner, out of the view of the three Andersons, and flipped the back of her skirt up as she walked down the hall. \n\nKent made eye contact with her and tapped his phone in his pocket. \n\nOne to nothing, Laura, Bailey smirked. \n\n============================= \n\nLook at Kent, trying to be useful in a house where men aren't supposed to do housework, Laura smiled affectionately. You can tell he feels out of place no matter what he tries to do. \n\nShe could see the poor guy's choices. Either he sat on the couch opposite her dad while the womenfolk did all the food preparation and table setting, in which case he felt like a lazy jerk. Or he could help with the house work and look like he was passing judgment on the man of the house. \n\nFor the most part, Kent helped out, but the moment they'd finished the table setting up, he'd sat down. \n\nHere's my chance. \n\nWith her mother in the kitchen and her dad faced away from her, Laura moved to the dining room table, clinked some utensils around for no good reason and, the moment she caught Kent's eye, flipped the front of her skirt up and down. \n\nKent didn't flinch, or turn his gaze. He just made a motion that looked like a leg scratch and awarded Laura her point. \n\n============================= \n\nThe trouble with this game, Bailey realized as dinner wore on, is that the grown-ups sat at opposite ends of the table. There are no angles in this room where they couldn't see me. \n\nBailey knew she hadn't seen every single point Laura had scored, but Kent couldn't have counted too many points for either of them, all of the scoring having taken place before dinner started. \n\nNo big deal, when you get down to it, Bailey thought. But just on principle, I'd like to win. \n\n============================= \n\n\"Please, Kent, do have some more,\" Mrs. Anderson insisted warmly. \"A boy like you needs food to grow up properly.\" \n\n\"Honest, Mrs. Anderson, I'm full,\" Kent pleaded. \"It was delicious. Best meal I've had in a long time.\" \n\n\"You've outdone yourself, dear,\" Mr. Anderson clearly spoke from the heart as well. \"But let's not stuff the children and make them sick.\" \n\nMrs. Anderson sighed, \"Alright, then, let's get this all cleaned up.\" \n\nThis time, Kent hopped up immediately to help out. \n\nLaura looked over at Bailey in frustration. \n\nIt feels a bit like he's avoiding us, Laura thought, and Bailey's chagrined nod indicated she felt the same. How can either of us score more points if he's standing next to my mom? \n\nBut Kent had reached the end of his rope for his traditional place in the household and strove to make himself useful in the kitchen. \n\nDoesn't take a genius to use a dish towel, Laura thought as she rinsed a dish and put it on the rack. Just a will to do work. \n\nLaura's father stood complacently outside the kitchen, contributing by keeping out of the way while everyone else toiled. \n\n\"Thank you all for coming,\" Mr. Anderson said. \"We're used to having much bigger get togethers back home, with the whole family.\" \n\n\"Long way from Utah?\" Kent asked, wiping a pot dry. \n\n\"That it is,\" Mr. Anderson said. \n\nHis wife looked back at him with a sad smile and returned to her task, storing all the leftovers. \n\nLaura scrubbed while Kent dried and Bailey brought dishes in from the table. \n\n\"Excuse me,\" Mr. Anderson added, and slipped off down the hallway. \n\nAs Kent turned to hang up a dry ladle, he faced into the dining room and living area. Laura heard him inhale suddenly and turned to see Bailey, in the middle of the living room, her skirt high enough that Kent saw all of her transparent white panties. \n\nJust out of sight of my mom, Laura frowned. Dammit. \n\nBailey smirked and returned to gathering up dishes. \n\n============================= \n\nWalking home in the cold together, snowflakes gently falling around them, Bailey started to worry about Kent's distant manner. \n\n\"You okay, Kent?\" \n\n\"Huh?\" Kent shook himself. \"Yeah, just a weird day, y'know?\" \n\n\"Yeah, I guess so,\" Bailey peered at him. \"But we do weird all the time, don't we?\" \n\nKent nodded, walking on silently. \n\n\"I mean,\" Bailey admitted, \"this was a bit different, with Laura's parents around.\" \n\n\"No kidding,\" Kent blew out his breath. \n\nHe unlocked his phone, taking great care to avoid the volume buttons and, for whatever reason, also made sure Bailey didn't see the counters in the app she'd installed. \n\n\"C'mon,\" she pleaded. \"What was the score?\" \n\n\"You'll know when you need to know,\" Kent said. \"Would that be on Tuesday, maybe?\" \n\nHe lightened up there for a bit, but he's back to tense, Bailey noted. What's with him? This isn't like the time he got angry about that project. This isn't like the times when he had to wait for an orgasm, either. What's up? \n\n\"Was this game a bit too much for you?\" she asked. \n\nKent exhaled and turned to her, his eyes wide with sarcasm. \n\n\"The Andersons are very nice people,\" Kent said. \"I spent a whole evening trying to enjoy food and hoping I didn't get hard.\" \n\nIs that his problem? Bailey laughed. I guess that is kind of mean. \n\n\"It was still kinky, though?\" \n\n\"Yes, it was still kinky,\" Kent admitted. \"And I'm not telling you the score until you tell me what the score is for.\" \n\n\"You'll find out on Tuesday,\" Bailey snipped. \n\n\"Then so will you.\" \n\nThey reached their apartment, slipping inside and locking the door behind them. Carson sat in the living room, watching television, which basically cut out doing anything sexually loud in Kent's room. \n\n\"I'm stuffed,\" Kent declared. \n\n\"Me, too,\" Bailey put in. \n\nSounds like he's not interested in anything tonight anyway, Bailey felt a pang of sadness, as if the whole underwear flashing hadn't counted. Well, it's a bit much to ask for someone to be horny when they're overfed. I'm not feeling it either. \n\n============================= \n\nThe moment Laura had received a text from Bailey, letting her know Kent had left the apartment, Laura had dashed over. \n\n\"We need a plan,\" she declared, sinking down on Bailey's bed. \n\nYou came over here pretty quickly, Bailey realized. You must already have some ideas. \n\n\"Plan?\" Bailey asked. \n\n\"For tomorrow.\" \n\n\"Right.\" \n\n\"Okay,\" Laura said, \"you know how Kent paid you two dollars for that picture?\" \n\nBailey reddened, \"The one with his penis and come all over my butt?\" \n\n\"That one,\" Laura confirmed. \n\nLaura feel into a deep silence and then gulped, obviously willing Bailey to understand what she wanted. \n\n\"Let me guess,\" Bailey spoke slowly. \"You want to do one, too?\" \n\nShe had hoped her voice would prod a laugh from Laura, but her friend's nervousness overrode her humour. \n\n\"Yes,\" Laura said. \"Before we run out of money.\" \n\n\"You want it like mine?\" Bailey asked. \n\n\"Well, um,\" Laura looked away. \"Maybe not exactly.\" \n\n\"So, what, then?\" Bailey asked. \n\nLaura inhaled, scrunched up her face, and finally forced herself to tell Bailey what she planned to offer Kent. \n\nWhoa, alright, Bailey stared at Laura, trying not to look too shocked. You wanted to get that out of your system, didn't you? \n\n\"Oh,\" Bailey said. \"Well, there are a bunch of things you could do, I guess.\" \n\n\"Like what?\" \n\n\"It'll be easier just to show you,\" Bailey said. \"Have you, um, seen such things done?\" \n\nLaura shook her head, \"You know my parents block half the Internet at home, right? And they don't pay for enough data that I could use my phone.\" \n\n\"Well, good thing you're here,\" Bailey turned to her computer. \"I'll load you up some porn and you can figure out what you like.\" \n\n\"Perfect,\" Laura said, bowing her head with a jerk. \"And you'll help?\" \n\n\"If I can, sure,\" Bailey kept her voice soft and reassuring. \n\n============================= \n\nThere's something even more unnerving about knowing it's coming, Kent realized on Tuesday evening, sitting in his room alone, eating his dinner. I've always known the girls would ask for more spankings eventually. But to actually set a date and time... wow. \n\nKent inhaled and exhaled. \n\nThanksgiving dinner went well enough, all things considered, Kent remembered back to his encounter with the Andersons. I thought dads were the most awkward, but I forgot how weird moms can be. \n\nHe shook that off, preferring not to think about Mrs. Anderson at all. \n\nAround six thirty, Carson came by his room, \"Hey, Kent.\" \n\n\"What's up, Car?\" \n\n\"Headed to the dress rehearsal,\" he said. \"Bailey around?\" \n\nNot yet she isn't. \n\n\"Haven't seen her since this morning,\" Kent said. \n\nCarson scratched his jaw, \"Are you two, like, a thing?\" \n\n\"What?\" Kent felt his body jerk away. \n\n\"Just wondering,\" Carson said. \"Sometimes you guys act funny.\" \n\n\"Oh, no,\" Kent replied, feeling that the definition of 'thing' left him a lot of wiggle room. \n\n\"Hm,\" Carson peered at him cautiously, then shrugged. \"Anyway, I'm heading off. See you later.\" \n\n\"Knock 'em dead.\" \n\n\"It's a rehearsal, but thanks,\" Carson shook his head and departed. \n\nOnce the upstairs door opened and closed, Kent sent off his text to Bailey. \n\n'All clear at this end.' \n\n============================= \n\nWalking through the blustering wind, snow whirling all around them, two girls in heavy winter clothes trudged along the sidewalk. \n\n\"Are you sure you're ready for this?\" Bailey asked. \n\n\"Totally,\" Laura nodded shakily, pulling her hood right around her face. \n\n\"Look, Laur,\" Bailey said, pitching her voice to just barely carry over the wind, \"I'll wait until you ask him, okay? So if you change your mind, we'll just do something else, right?\" \n\nLaura stopped and turned to glare at Bailey, \"I can do it.\" \n\n\"I'm not insulting you,\" Bailey waved defensively. \"I just want you to know it's not mandatory.\" \n\nLaura inhaled, \"Okay, thanks.\" \n\nThat's better, Bailey thought. Christ, I hope she knows what she'd doing. \n\n\"And he wouldn't tell you the score?\" Laura prodded. \n\n\"Nope,\" Bailey shook her head. \"You could just tell me how many you did, though.\" \n\n\"I'm not telling until you tell,\" Laura replied. \"Besides, some of mine were behind my back. I don't even know if he was looking at all of them, or if my skirt got high enough.\" \n\nBailey smiled under her parka. \n\nRegardless, though, she thought, we agreed that, money shot or not, we're leaving two dollars on the board. The last bit of this debt is mine to finish. \n\nBailey sent a text message back to Kent. \n\n'Bring my mirror into your room, pls.' \n\n============================= \n\nKent tried to maintain his chill, cranking up the Sade on his speakers and tuning out to some homework, while waiting for the girls to arrive. \n\nThe girls? he started wondering what he should call them. Women? Then I'd have to be a man and I feel more like a boy. Parents? Now those are men and women. I don't feel like a grown up yet. Are they girls, then? Or maybe just, my 'friends'. Not my 'girlfriends' though. \n\nThat word felt so weird in his brain he couldn't use it out loud. \n\n'Girlfriend' is for holding hands and going out on dates, he determined. I can't imagine do any of that with Bailey or Laura. A dance club, maybe. Halloween parties and such. \n\nThe door opened suddenly and he felt his heart pound in his chest as booted feet hit the upstairs landing, and he heard Bailey locking the door. \n\nStay calm, stay calm, Kent tried to focus as best he could on his work. Just pretend you haven't heard them. Just sittin' here in my room, blasting Sade with the lights dimmed for no reason at all. \n\nImages of the two of them lifting their skirts to flash him their panties popped into his head, unbidden. \n\nI'll be seeing more than that tonight, Kent gulped. \n\n\"Ahem,\" Bailey announced them at his doorway. \n\n\"Oh, hey,\" Kent turned slowly in his chair. \"What's up?\" \n\n\"Shut up, jackass,\" Bailey chided. \"You know what's up. You ready?\" \n\nKent smiled and waved both of his hands around his room, indicating the general ambience he'd created. \"What's it look like?\" \n\n\"Kent's little love den,\" Laura laughed as they both entered his room. \n\n\"Aren't you a little warm?\" Kent asked, pointing at their winter jackets. \"I mean, thanks for taking off your boots, but come on.\" \n\n\"It's really cold out,\" Bailey complained, looking at Laura and nodding at the white board. \n\nLaura nodded back and took the marker out, making a single mark. \n\n\"What's up?\" \n\nNot much fun if they're keeping their jackets on. \n\n\"You want to warm up before we start?\" Kent asked. \"There's no real rush.\" ",
        "There's never a rush, but we always seem to be rushing. \n\nBailey and Laura both ignored him and moved to the bed, bending over side by side. \n\n\"We're sharing, are we?\" Kent asked. \n\n\"Yep,\" Laura said. \n\nWhile their upper bodies lay hidden underneath formless winter jackets, they both wore tight pants. Bailey's denim hugged her tiny cheeks while Laura's khakis stretched to wrap her more generous form. \n\nKent took a moment, from his seat, to admire the way they had walked right into his room and started things off. \n\n\"Nice,\" he complimented them. \n\n\"It's not a show,\" Bailey reminded him. \"Get to work.\" \n\n\"Yes, ma'am.\" \n\nKent started with Bailey on the left, laying a hand on her left cheek. \"Here it comes.\" \n\nThe obligation, when they wear denim and heavy winter pants, is to strike harder, Kent remembered. Otherwise they don't feel a thing. \n\nHe delivered the first body-shaking strike to Bailey's left cheek and followed it up a with a second shot to the right, knowing full well that the pockets of her jeans gave her a doubled up layer of protection. \n\n\"One, two,\" she announced. \n\nLaura's pants, insulated against the winter winds, also required an extra bracing slap. \n\n\"Three, four,\" Laura declared, a tone of nonchalance permeating her voice. \n\nBailey's right went next, followed immediately by Laura's right. \n\n\"Five!\" Bailey said. \n\n\"Six!\" Laura added. \n\nStill not hard enough, I guess. \n\nKent struck their cheeks again, cranking up his force a little. \n\n\"Oh! Seven!\" \n\n\"Eight!\" Laura squeaked a little in surprise, her cheeks visibly tensing through the pants. \"I felt that.\" \n\nGot it, finally. \n\nKent smacked them both again, using the same force, shaking both of their bodies. \n\n\"Hoo!\" Bailey stood up straight after receiving hers. \"Nine.\" \n\n\"Ten,\" Laura declared. \"Time for a drink?\" \n\nBailey nodded and slipped out of the room and Laura turned around to sit down and face Kent. \n\n\"Thanks for dinner, again,\" Kent said. \"Weird as it was, that was amazing food.\" \n\n\"My mom likes you,\" Laura shrugged. \"You made a good impression.\" \n\n\"Did I?\" Kent asked, then gulped awkwardly. \n\n\"She says you seem like a very well behaved young man,\" Laura added, looking up as Bailey returned with three shot glasses and two bottles. \"And she's glad I have friends like the two of you.\" \n\nMixing Laura's alcohol with hers, she handed a shot to each of her friends. \n\n\"To two hundred dollars, almost gone,\" Bailey raised her glass. \n\n\"To bottoms up!\" Laura added, already giggling. \n\n\"To red butts,\" Kent put in, and they downed their shots. \n\nWith the glasses set aside, Bailey turned to look at him. \n\n\"You ready to move on?\" she asked. \n\nLoaded question. I hope she means the spankings, and not whatever happens when the debt is gone. \n\nKent nodded. \n\n\"Time to show him our 'red butts', then,\" Bailey prodded Laura and the two of them made a mark each. \n\n\"What are we doing now?\" Kent wondered. \n\n\"Inspections,\" Laura told him. \n\n\"How should we do them?\" Bailey asked her. \n\n\"Hadn't planned that,\" Laura's eyes went wide with thought. \n\n\"I get to tell you how to pose, right?\" Kent pointed out. \n\n\"Ooh, that's true,\" Laura brightened. \n\n\"How about this, then?\" Kent said. \"You stand side by side, show me your asses. Then, while I spank one of you, the other one stays there.\" \n\n\"So my butt's naked while you're spanking Bailey?\" Laura asked. \n\n\"And vice versa.\" \n\nThe girls looked at each other, shrugged. \n\n\"Where?\" Bailey asked. \n\n\"Right here,\" Kent pointed at the space in front of his bed. \"Hands on your knees. Can you take off your jackets?\" \n\n\"Not yet,\" Bailey told him, taking her spot beside Laura. \n\nFacing away, they unbuttoned their pants and, simultaneously, pushed their pants and panties down to their knees. \n\nAll the previous redness is gone, Kent noted. Just a little pink now on Bailey's right and Laura's left. I guess a tiny bit of those spankings got through. \n\nHe knelt down behind them and started squeezing their cheeks, testing for a sensitive spot, hoping for a reaction as he stroked, pinched and prodded, but got little more than an occasional shiver. \n\n\"Alright, who's first?\" \n\n\"I'll go,\" Bailey said, pulling her pants up. \"Come here.\" \n\nShe pulled him to the bed and put herself over his lap. \n\n\"Turn around, Laura, would you?\" Kent requested. \n\nLaura turned sideways, letting him continue to 'inspect' her, even as he prepared to spank Bailey. \n\nBailey crawled over his lap, arched her back and lifted her hips high in the air to clear the low hem of her parka and keep it out of the way. \n\n\"It's all on the right cheek, from here,\" Kent warned her, squeezing the target flesh. \n\n\"Uh-huh,\" she said. \"That's what you want, isn't it? To see the difference before and after?\" \n\n\"Yeah,\" Kent admitted. \n\nShe wiggled a little in his grip, making herself comfortable. \n\nKent started pounding her right cheek, trying to spread his slaps over her entire surface, top to bottom, centre and outside. \n\nBailey, keeping her hips locked and her body stiff, counted out his strokes from eleven to eighteen. When he finished, she immediately pushed her pants and panties down again so Kent could see her skin close up. \n\nHe kneaded gentle circles into her reddened flesh, eliciting murmurs of appreciation. \n\nShe's getting turned on now, Kent noted, but we're not there yet. \n\nTapping her gently on the cheek to let her know he'd finished, Kent gave Bailey a little shove. \n\n\"What do I do now?\" Bailey asked. \"Just stand here?\" \n\n\"Just like I did,\" Laura reminded her, pulling her own pants up. \n\nBailey shrugged, pushed her pants and panties back down, and put her hands back on her knees. \n\n\"How you want it, Laur?\" Kent asked. \n\n\"Just like this, actually,\" she said, backing up toward Kent. \"But, um...\" \n\n\"Um?\" \n\n\"Both hands at once?\" she asked, her voice going up in pitch. \n\nKent scratched his chin. \"I guess that's okay.\" \n\nHe tried putting both his hands on her left cheek, a clearly experimental motion. \n\n\"What are you doing?\" she asked. \n\n\"Seeing if I can use both hands on one side of your ass,\" Kent tried a few different angles. \n\n\"Oh!\" Laura exclaimed. \"I guess that's okay.\" \n\n\"It's his dollar,\" Bailey reminded her friend. \n\n\"Can you, um, do it?\" Laura asked. \n\nKent felt a battle rising up inside him and sensed Bailey silently judging him behind a semi-innocent glare. The thrill of the 'inspection' option lay in creating a difference between the before and after condition of the cheeks in question. \n\n\"If I do doubles,\" Kent said. \"I might not be able to get the effect I'd like.\" \n\n\"Hm,\" Bailey nodded. \"That is why inspections are only eight instead of ten.\" \n\n\"Oh,\" Laura said. \"So you wanna do me like Bailey? All on one side?\" \n\n\"The left side ideally, yes.\" \n\nLaura inhaled, \"I guess that's fair, alright.\" \n\nShe turned and crawled up on his bed, facing Kent's left, and arched her back to put her ass high up in the air. \n\n\"There,\" she said. \"Can you use both hands now?\" \n\nGirl has a desperate need a double spanking for some reason, Kent shrugged, laying his left hand on her mid cheek and his right lower down. \n\n\"Should work.\" \n\n\"And me?\" Bailey asked. \"Posing at no one over here?\" \n\n\"Get over behind Laura,\" Kent said. \"Same pose.\" \n\nBailey harumphed and crawled onto the bed, sticking her naked butt up in the air next to Laura's clothed cheeks. \n\n\"Here we go,\" Kent said, and brought down a double swat on Laura's left cheek. \n\n\"One, two!\" Laura shouted out. \n\n\"Pardon?\" \n\n\"Oh, crap,\" Laura cursed. \n\n\"Let's try again,\" Kent sighed, and delivered another double slap. \n\n\"Ooh!\" Laura squeaked. \"Nineteen and twenty.\" \n\n\"Better,\" Kent said, and pounded her again. \n\n\"Twenty one, twenty two.\" \n\n============================= \n\nBailey listened to Laura counting through her doubles. Laura hadn't mentioned that as part of their original plan, but they'd agreed they could improvise. They'd also agreed that Laura would make the first counting error, letting Kent catch her to make it more exciting. \n\nAll I have to do is find a realistic way to make a mistake later so I get an extra one, Bailey thought hard. Although, way to go all extra, Laur, making your mistake on a double spanking, so you give up two bonus shots at your butt. \n\nIt would take some effort, but Bailey felt confident she could match her friend at some point. \n\nIt also depends on the score in our little underwear game, Bailey frowned. If I lost, maybe I won't need to do anything else special. \n\nLaura finished her spankings, calling out, \"Twenty five, twenty six.\" \n\nA moment later, she felt Kent pushing Laura's bare cheeks against her own. That still felt awkward, though a lot less so than it ever had before. Kent started massaging them next, and that felt great. \n\nThat finger, she thought. I need to try that again. Every time my other boyfriends tried to poke me, I just tightened up and they couldn't get in at all. Was it just lucky with Kent, last time? \n\nIt had felt a little lucky, but also a lot more relaxing, as if her muscles knew who owned the finger and felt okay about him. \n\n\"How red do we look?\" Laura wanted to know. \n\n\"It's a good start,\" Kent drawled, \"but I have a lot of work to do yet.\" \n\n\"We have time,\" Bailey spoke, letting her legs relax completely since she didn't need to exaggerate the effects of a spanking. \n\n\"I'm glad the doubles worked,\" Laura called back to Kent. \n\n\"You like that better?\" \n\n\"Shakes the body more,\" she said. \"I think it was better when you did both cheeks, but this was good, too.\" \n\nBailey raised an eyebrow at her friend. \n\n\"What?\" Laura defended herself. \"It's what I like. What do you like most?\" \n\nWhat do I like most? Bailey inhaled and closed her eyes. Tough question. \n\n\"Over his lap, I think,\" she replied. \n\n\"But you're not sure?\" Laura asked. \n\nBailey shrugged, \"There are a lot of options.\" \n\n\"Well, we have time tonight,\" Laura said. \n\n============================= \n\nHearing Laura's words, Kent detected a note of sadness. \n\nThis is their last night, then, he acknowledged, trying to school his expression before either girl could turn around. They must intend to wrap things up in the next few hours. \n\nKent also noticed the pattern. They'd started with spankings over top of their clothing, then moved on to inspections. Still wearing their jackets to keep themselves warm, he surmised a progression through less and less clothing as the night wore on. \n\nAlmost as if reading his thoughts, Bailey stretched her legs and started pulling her jeans up. \n\n\"I think that's enough inspecting,\" she said before turning to Laura, \"Don't you?\" \n\n\"Guess so,\" Laura sounded a bit reluctant, but also started fastening her pants back in place. \n\nBoth girls sat up on the edge of the bed. \n\n\"How aren't you sweating, at this point?\" Kent asked, feeling incredibly warm in a t-shirt, while both of his friends wore heavy winter jackets. \n\n\"It was really cold outside,\" Bailey explained. \n\n\"But I feel warmer now, don't you?\" Laura asked, pressing her lips together nervously. \n\nBailey looked at her sideways, then nodded. \n\nBoth girls stood up. \n\n\"Music's about right,\" Bailey acknowledged. \n\n\"It's Sade,\" Laura replied with a slight eye roll. \"Every song is alright.\" \n\nBailey took a hold of the zipper of her jacket and Laura matched her, move for move. Watching their jackets unzip, Kent began to see the colour of flesh as the fabric parted. \n\nOh, my. \n\nWhen they'd undone the zippers all the way, he saw two clean lines of skin from their necks to their waists. \n\nLaura's nervous inhalation gave the next signal, and she and Bailey dropped their jackets to the floor. \n\n\"Feel like a stripper now?\" Bailey asked, a crack in her voice betraying her scolding as a cover for her own anxiety. \n\n\"Yes,\" Laura said. \n\nThey weren't lying, Kent noted, trying to remember if he'd ever seen both of them topless at once. They are cold after all. \n\nBailey walked past Kent first, followed by Laura, and both topless girls made a mark on the board. \n\nKent adjusted his pants as they returned. \n\n\"It's seven, right?\" Laura asked. \n\nUnable to speak properly, Kent nodded, and Laura pulled him up out of his chair. \n\n\"Oh, good, you got the mirror,\" Laura finally noticed Bailey's long, skinny mirror propped up against Kent's closet door. \n\nShe took Kent's left arm and put it under her chest as she leaned over toward the mirror. \n\n\"You have to be able to see me, right?\" Laura asked, her eyes meeting his in the reflection. \n\n\"Yes,\" Kent said, \"while I'm spanking you.\" \n\nLaura pressed her breast into Kent's hand, \"Is that good enough?\" \n\n\"Hm,\" Bailey put in doubtfully, even as Kent began pinching Laura's nipple. \"If his hand is in the way, it doesn't count.\" \n\n\"I can work it around it,\" Kent said. \"Watch.\" \n\nHe gave Laura's nipple one last squeeze and then moved his hand out of the way, lower down Laura's chest. Still supporting her body, but cupping her breast from underneath instead of covering it, he slapped her right cheek. \n\n\"Oh!\" Laura said, \"Twenty seven.\" \n\nKent's fingers slid up again, closing thumb and forefinger on her nipple, giving it a gentle pull away from her body, drawing a soft moan from Laura's throat. He pulled his hand back again and stroked her ass. \n\n\"Twenty eight,\" she squeaked. \n\n============================= \n\nBailey watched, mentally complimenting Kent on his brilliance. He managed to give Laura the exact kind of nipple-tormenting fondling she wanted while also keeping the game going in obedience to the rules. \n\nIf Laura hadn't asked ahead of time, Bailey wondered, would he have spanked her anyway, and then demanded something extra? The way he did with me? \n\nBailey, watching her friend moan with ecstasy as Kent worked her breast over, fervently hoped so. If they didn't have rules, after all, they didn't have a game. \n\nGoodness, Laura's enjoying herself. \n\nAfter she'd counted to thirty three, Kent treated Laura to a little extra, poking around both of her areola with his finger, teasing each nipple with gentle little tugs and twists. Laura braced herself, hands on her knees, eyes closed, lost in the moment. \n\n\"My turn yet?\" Bailey declared. \n\nKent smiled and gave Laura one last, hard pinch on her left nipple before he turned to Bailey. \n\nWith a sigh, her face red with passion, Laura rose up and complacently looked at Bailey. \n\nI don't need that kind of intense boob-work, honestly, Bailey realized. Alright. \n\nShe pulled the stepping stool out into the middle of the room, got up on it and leaned over across the long gap to Kent's desk, stretching her upper body out. \n\n\"We need the mirror, Laur,\" Bailey said softly, then turned to Kent as Laura got out of the way. \"Is the angle right?\" \n\nKent took up a place behind her and to her left side. \n\n\"I can see your tits, yeah.\" \n\nFunny how that word provokes a different reaction, Bailey felt her ears ring with the sound of his crudity. Ass versus butt. Tits instead of boobs. They're just words, but words are powerful. \n\n\"Okay,\" Bailey took a deep breath, knowing what Kent intended. \n\nHe began hammering her right cheek almost immediately, spreading it all over her flesh, but only on that side. \n\n\"Jesus Christ,\" Bailey cursed, falling instantly behind in counting off his impacts. \n\n\"Blasphemy!\" \n\nBailey started shouting out numbers as Kent finished off all seven spankings in one continuous series. \n\n\"Forty!\" she announced, then turned to Laura, \"Aren't we over the whole blasphemy thing?\" \n\n\"No,\" Laura folded her arms under her breasts as Bailey stood up and faced her. \"You should get an extra spanking every time you take the Lord's name in vain.\" \n\n\"Really!?\" Bailey asked. \n\nLaura harrumphed. \n\nBailey shook her head and started to speak, \"Our shirts are in the backpack.\" \n\n\"Hold on,\" Kent said, because he'd already poured three shots of his own whiskey out for them. \n\n\"Oh!\" Laura took the glass, \"how thoughtful!\" \n\n\"He just wants to see our tits longer,\" Bailey pointed out, testing the word out on her tongue. It felt slightly spicy. \n\n\"Hm,\" Kent murmured his agreement and raised his glass, \"To your tits.\" \n\nLaura held her glass away from her face, \"Do I have to say that?\" \n\n\"If you do,\" Kent said, \"I'll promise Bailey gets an extra spanking every time she blasphemes.\" \n\n\"What!?\" Bailey said. \"I do not agree to that.\" \n\n\"You don't?\" Kent sounded surprised. \n\nAre we making the game more fun? Bailey peered at Kent, unsure if she should let him make a rule like that without compensation. Although, come to think of it, a new rule will make it way easier later if I need to make a 'mistake'. Laura already did the miscounting thing, after all, so that's used up. \n\n\"Fine,\" Bailey said, then glared at Laura, determined to draw some balance in the arrangement. She glared angrily, pretending as hard as she could that she wanted some kind of retribution. \"But Laura has to say 'tits' and 'ass' from now on.\" \n\nSee how you like having the language police after you. \n\n\"I-\", Laura stammered. \n\n\"Sounds like it's your call,\" Kent prodded. \n\nLaura inhaled through her nose, her lips forced together. \n\n\"To your tits,\" Kent raised his glass again. \n\n\"To our-,\" Laura's throat caught and she tried again, \"Tits.\" \n\nBailey chimed in and they shot down their whiskey. \n\n\"God, that's rough,\" Laura fanned her throat. \n\n============================= \n\nThe topless girls stepped outside of the room, grabbed a backpack they'd apparently discarded in the hallway and headed down to Bailey's room, promising Kent they'd return shortly. He listened closely to the rustling of clothing and although he could hear them whispering, his ear couldn't pick out a single word. \n\nThey returned quickly, Laura giggling and clearly rosy in her cheeks, in new clothes. Both had decided to switch to skirts, which looked promising to Kent, and donned shirts under which, Kent saw quite clearly, neither wore a bra. Laura's breasts moved freely, jostling around under her shirt, while Bailey's nipples poked through her thin t-shirt. \n\n\"Are you going to tell us yet?\" Laura asked. \n\n\"Tell you what?\" Kent pretended innocence. \n\n\"The score!\" Laura insisted. \"Jerk.\" \n\n\"What happens when I tell you the score?\" Kent asked. \n\n\"We're not telling!\" Laura said. \"It's a surprise.\" \n\n\"Oh!\" Kent replied. \"When do I get this surprise?\" \n\nLaura and Bailey shared a glance. \n\n\"It comes near the end of the night, I guess,\" Bailey told him. \n\n\"Then I'll tell you the score then.\" \n\n\"Jerk,\" Laura repeated, dropping down on the edge of his bed. \n\nBailey took a spot leaning against Kent's desk, probably trying to avoid putting the sorest part of her ass against any surface at all. \n\n\"I think Thanksgiving dinner broke my brain,\" Laura said suddenly. \n\n\"How so?\" Kent looked to Bailey for some clarification, but only got a shrug. \n\n\"I spent, like, three hours trying to flash my panties at you,\" Laura said. \"And now I just constantly have this urge.\" \n\n\"Urge?\" \n\n\"Yeah,\" Laura explained, looking at he floor bewilderment. \"Like, right now, I just want to - to -\" \n\nShe lifted up the front of her skirt and Kent saw a pair of black panties underneath. Both Kent and Bailey burst out laughing at the same time Laura erupted in giggles, letting her skirt fall back down to cover her. \n\n\"See?\" Laura said. \"See what you did?\" ",
        "\"Me?\" Kent laughed. \"That game was entirely your invention. Drove me almost constantly mad for the entire dinner.\" \n\n\"Mad, you say?\" Bailey put on a false English accent. \"Mad?\" \n\nThis inspired more giggling, which took almost a minute to calm down. \n\n\"I know what you mean, though,\" Kent admitted. \"It has put a weird tint over everything I do when you're not around. Everywhere I go, I'm imagining things I could bend you over or lift you up on.\" \n\nBailey snickered, \"You gotta be kidding.\" \n\n\"No,\" Kent said. \"Doesn't this get in your head?\" \n\n\"Well, yeah,\" Bailey said. \"But not like that.\" \n\n\"How, then?\" Laura asked. \n\n\"It's almost only when I'm home,\" Bailey appeared thoughtful. \"Or when I'm talking to Laura about it. Or, well, when I get a text message from you. Or...\" \n\nBailey trailed off and Kent raised an eyebrow at her. \n\n\"Okay, yeah,\" Bailey rolled her eyes, \"I guess it is all the time and all over the place. But I don't look at everything I see and imagine getting spanked there.\" \n\n\"Uh-huh,\" Laura said, \"except the library.\" \n\n\"That was one time,\" Bailey defended herself. \"And it was because I knew he was on campus writing that mid term.\" \n\n\"That was pretty awesome,\" Kent remembered fondly. \n\nThis feels like we're reminiscing, he thought, like we're saying goodbye to all the good spanking times. \n\nPossibly the girls sensed it, too, because they shared one of those looks and got up to make one more mark each on the white board. \n\n\"Now what?\" he asked. \n\n\"Skirts up,\" Bailey said, \"But panties still on.\" \n\nThat settles it, then, Kent realized with increasing sadness. We're taking a tour of all the spanking options, from full clothed on down. This must be the last night. \n\nHe banished anything but smarmy joy from his expression as they turned their backs on him, lifted up their skirts, and bent over his bed. \n\nNow that I think about it, how far will this tour go? Kent wondered. Laura's never been completely naked. \n\nKent stepped up and ran his fingers along the seams of Bailey's white panties. \n\nIs she wearing these because I mentioned liking them last time? he wondered. Probably. \n\n============================= \n\nBailey tried not to turn around and look at Kent, not wanting to rush him. \n\nHe's taking a long time, touching me like that, she noticed, feeling the tingle as he drew a fingernail across the sore flesh of her left cheek, we're coming to the end of this. \n\nTo make the whole night feel authentic, she ought to chide him by telling him to hurry up or remind him that his dollar paid for spanking, not fondling. \n\nBut Bailey knew she couldn't put her heart in it. \n\nI want to draw this night out as long as I can. Let him grope away until he's ready. \n\nShe shivered when she mentally gave Kent that permission. \n\nThis is just as bad as when I made myself come for him, Bailey closed her eyes. Just letting him have my body, putting on a show. \n\nBailey held in a whimper as he gently pinched her left cheek, then abandoned her to check out Laura's ass. \n\n============================= \n\nIf he spanks me hard enough, Laura thought, and enough times, it's possible it'll be good enough for two orgasms. I can do one tonight and save one for later. \n\nFor it to work that well, your skin will need to be the red of pomegranates and burn like the fires of hell. \n\nI've done it before, and I'll do it again, Laura swore to herself. \n\nKent's hands gripped both of her cheeks, squeezing hard and pushing her body forward into the bed. \n\nOoh, that's different, Laura tensed up her muscles to make everything hard for him. If I want to feel the spankings, I've got hold it all in tight. \n\nShe gulped, remembering Bailey's stipulation about the debt. Her friend wanted to leave a couple dollars at the end of the night so she could finish the very last of the debt alone on another day. \n\nPushing me aside, Laura kept her eyes closed, not wanting thoughts like those to interfere with the present, gotta get what I can out of this night, right now, before it's all taken away. \n\nRationally, from her point view, Laura knew this counted as her last night no matter what. Even if Bailey wanted to finish the debt off alongside Laura, they would finish it right here, with nothing left for any other day. \n\nEither way, this is my last chance to use Kent to punish me for my sins, Laura thought as Kent scratched his fingernails over her skin. Let's get going already. \n\nShe wiggled her ass against his ministrations and he backed off. \n\n\"You ready?\" he asked. \n\n\"Yes!\" they chimed back, the preparations having gone on far too long. \n\nLaura arched her back and squeezed her cheek muscles as tightly she she could, hoping Kent understood how hard she wanted it. \n\nThe first spanking struck her already sore left cheek, the first strike of the night to land on bare flesh. \n\nAnd so hard, Laura breathed out softly, he did understand. Now to play it right, act like it's okay so he doesn't back off. \n\n\"Forty one,\" she tried to keep her voice cool, but noticed a bit of a tremor. \n\nI need to clean that up. \n\nBailey got the next one, calling out, \"Forty two.\" \n\n============================= \n\nKent surveyed the panty-clad cheeks before, laying his hand over Laura's black panties, giving her left cheek a squeeze. The fabric cut diagonally across her cheek, leaving the underside exposed. He drew back his hand and struck her there. \n\n\"Forty three,\" Laura called out. \n\nHe detected the daring edge in her voice easily, knowing that he'd caused her a bit of pain but that he hadn't crossed her threshold. \n\nShe's still enjoying it, at this level. Good. \n\nBailey, with her angelic white panties, hadn't come close to her limits. He struck her right cheek in the same low spot. \n\n\"Forty four,\" his house mate shrugged it off. \n\nThat's it, Kent decided, I'm just going to do one ass cheek for each of them tonight until I get some sign of complaint. \n\nHe stepped up the speed of his strikes, but tried to hold the power steady, as he landed two more to Laura's left and two to Bailey's right. \n\n\"Forty five and six,\" Laura cringed, reaching back to rub her cheek. \n\n\"Forty seven and eight,\" Bailey pronounced, standing up straight. \n\nKent paused for just a moment, laying his hand on Laura's cheek, then pulled it back and struck hard at Bailey's right. \n\nBailey yelped, \"Christ! Forty nine!\" \n\nHe let Laura have the last one. \n\n\"Fifty!\" she called out, then dropped her skirt back in place. She turned an accusing finger on her friend, \"You swore again!\" \n\nLaura's skirt fell back into place before Kent could get a good look at the damage. \n\n\"Ugh!\" Bailey turned her head, and only her head, to look at Laura and rolled her eyes. \"Fine.\" \n\nBailey didn't even stand up, Kent noted with suspicion. Still bent over the bed with her ass up in the air. I'm getting the feeling they're doing this on purpose. Time to shake them up. \n\n\"You gonna spank her?\" Kent asked Laura, \"Or should I?\" \n\n\"What!?\" both girls stood and turned to ask him. \n\nOkay, Bailey finally dropped her skirt, Kent thought, so at least that surprised them. \n\n\"I only promised she'd get an extra spanking,\" Kent pointed out. \"Not that I'd do it. Since you're so bothered by the blasphemy thing, I thought you'd want to-\" \n\n\"No,\" Laura pointed at him frantically. \"You're definitely doing it.\" \n\n\"Alright,\" Kent sighed theatrically, \"But you tell her how to pose.\" \n\n\"Okay, sure,\" Laura breathed with relief and turned to Bailey. \"Hands on your knees. That's how I got spanked when I said bad words.\" \n\nWith another sigh, Bailey turned away from Kent and put her hands on her knees, sticking her butt out in his directions. \n\n\"I feel like your skirt should be up, Bai,\" Kent pointed out, \"Since that's how you were when you, um, 'said bad words'.\" \n\n\"Laur,\" Bailey intoned, \"lift my skirt, would you?\" \n\nNice, Kent thought, watching Laura gingerly bend over, grab the hem of Bailey's skirt and lift it up, doing her best not to contact her friend's flesh. \n\n\"One bonus spanking for Bailey,\" Laura announced. \n\nKent lined up and struck her right cheek, dead centre. \n\n\"Fifty-one,\" Bailey announced, straightening. She turned on Laura, \"Happy now?\" \n\n\"I'll be happy if you stop taking the Lord's name in vain, yes,\" Laura turned up her nose. \n\nBailey snickered. \n\n\"Remember the first night you came here?\" Kent asked. \"We had to poke and prod you to tell us how you wanted it?\" \n\n\"And you stood there, perfectly still,\" Bailey mocked. \n\n\"Well,\" Laura pursed her lips a moment, \"That's how I was spanked when I was bad. I didn't know how else to be.\" \n\n\"And here you are,\" Kent pointed, \"Still being bad. Still being spanked.\" \n\nLaura's face flushed red. \n\nShe still thinks of this as a weird mix of kink and punishment, Kent noted. The more I call her a bad girl, the more her face turns red and the more she wants the next set of spankings. \n\n\"You wanna keep going?\" Bailey asked. \n\n\"What's next?\" Laura wondered aloud. \"Bare butts?\" \n\n\"Ha!\" Bailey pointed at Laura. \n\nThat one looked like an honest accident, Kent acknowledged. Either their acting is getting better, or she forgot. \n\n\"Oh!\" Laura winced. \"Fine.\" \n\n\"How do you want her?\" Kent asked Bailey. \n\n\"What? Me?\" Bailey looked surprised. \n\n\"She picked the pose for you,\" Kent explained. \"You pick her pose.\" \n\nBailey touched her chin thoughtfully. \n\n\"But,\" Kent drawled. \"If we're at bare asses, you should take her panties off first.\" \n\n\"I should-\" \n\n\"Definitely,\" Kent interrupted with a firm nod. \n\nBailey gulped as Laura waited nervously. \n\nThey haven't had a chance to plan this one out, Kent realized, watching the girls stare helplessly in each others' eyes, their attempt at telepathy painfully obvious. We're outside of the box now, for sure. \n\n\"On your back,\" Bailey said, pointing at the bed, \"legs up.\" \n\nLaura nodded and sat back on the bed and rolled onto her back, her skirt falling instantly out of the way as she pulled her legs up. The black panties tucked themselves neatly into her crotch and between her cheeks. \n\nAs carefully as Laura had lifted Bailey's skirt, Bailey reached for the waistband of Laura's underwear and pulled it down under her cheeks, slowly revealing her friend's pubic hair even as she averted her eyes. Once she'd gotten the fabric past the curve of Laura's cheeks, she slipped her panties quickly down her legs and off her feet, setting them aside on the bed. \n\n\"One ass, ready for spanking,\" Bailey announced. \n\n============================= \n\nAs mistakes go, Laura thought, I'm okay with this one. Even if Bailey has my whole crotch exposed. \n\nShe felt Kent's hands gliding over both her cheeks, sliding back and forth. When his fingertips grazed across her hair, her body shivered violently. \n\nNot yet, she chided herself, not nearly yet. Wait until the end and all the payment for my sins is done. \n\nThe preacher hadn't spoken a single word since his pomegranate metaphor and that set Laura's heart thumping, confirming that she'd set herself on the right course. \n\nWith enough spankings, I could silence him for several days' worth of orgasms. \n\nKent's hand drew back, unseen under her body, and she tensed her legs up as hard as she could. \n\nThe crack of his hand against her left cheek shattered the ambience of the soft, thumping music in the room. \n\n\"Fifty-two,\" she said, and sat up, feeling the absence of her panties in the way air flowed under her skirt. \n\nKent stood in front and centre, towering over her with his arms folded. She raised her eyebrows in query. \n\n\"Ass,\" he intoned, the voice of a teacher delivering a lesson. \n\nHe wants me to repeat what he's saying? Laura shivered. He'd never acted like this before, this 'imperious instructor' thing is new. \n\n\"Ass,\" she replied meekly, averting her eyes. \n\nKent still stood over her, twitching as if he held back laughter. She looked up and saw the tiniest bit of a crinkle in his eyes as he spoke again. \n\n\"I spanked your ass,\" he said. \n\nOh, god, really? Do I have to? \n\nLaura inhaled, \"You spanked my ass.\" \n\nThat felt incredibly dirty, Laura drew in a vigorous breath of air. \n\nKent smiled and backed away to sit in his chair while Bailey giggled off to the side. \n\nOkay, that was funny, Laura admitted, but after that, it's going to be almost impossible for me to make a 'mistake' again. \n\n\"You two are awful,\" Laura declared out loud, determined to give some sign of outward protest. \n\nSuddenly inspired, she picked her panties up off the bed and walked past Kent so she could hang them on the corner of the white board, just as Bailey had described. \n\nShe turned to look at Bailey, \"Are we doing the next ones?\" \n\n\"Whenever you're ready, I guess,\" Bailey said. \n\nLaura glared at Bailey and pointed at the back of Kent's head. \n\n\"What?\" Bailey asked. \n\n\"His clothes?\" \n\n\"Oh, right,\" Bailey replied. \n\n\"What?\" Kent asked. \n\n\"We're doing bare asses next,\" Bailey folded her arms as she scolded. \"So you need to lose some clothes, too.\" \n\n\"Oh,\" Kent answered. \n\nLaura took this for permission, and she and Bailey set upon Kent instantly, forcing him out of his chair. From behind, Laura pulled his shirt off while Bailey knelt down and worked the button and zipper on his jeans. When those came undone, Bailey pulled his pants down, setting his erection free within the relatively loose confines of his boxer shorts. \n\nWhoa, Laura peeked from beside Kent's shoulder, there it is again. All ready to go. \n\nLaura reached around his body at the same time Bailey reached forward, caressing the fabric covered tip as her friend stroked Kent's length. \n\nKent closed his eyes and let out a long, slow breath with his lips in the shape of an 'o'. \n\nA lot of tension there, Laura realized and stopped her ministrations. \n\nBailey stopped at the same time, looking up along Kent's body to meet Laura's eyes. She ticked her chin toward the white board and Laura nodded agreement before Kent even opened his eyes. Laura uncapped the marker and made her mark before handing it over to Bailey. \n\nBailey mouthed to her quietly, \"You do my panties?\" \n\nLaura nodded, acknowledging the fairness of the request. \n\nSmiling, they returned to the bed and faced Kent. \n\n\"Okay,\" Kent breathed slowly. \"What now?\" \n\n\"Two more dollars to pay off,\" Bailey said, turning her back to him but remaining upright. \n\nLaura watched as Bailey undid the latches on the side of the skirt and let it drop to the ground, leaving her standing there in her t-shirt and a pair of white panties. Bailey turned her head just enough to make eye contact with Laura and gesture downward. \n\nRight, Bai. I'm on it. \n\nCareful not to block Kent's view of anything, Laura stepped around to Bailey's left side and reached for the waistband of her panties. Hooking one finger around each side, Laura pulled them over her friend's cheeks and took them down to her ankles. Bailey politely lifted her feet, one at a time, so Laura could get them off without letting them touch the ground. \n\n\"How you doing them?\" Laura asked as she stood up. While she waited for Bailey's answer, she moved past Kent and hung up Bailey's white panties next to her black ones on the white board. \n\n\"Over his lap,\" Bailey said. \"Still my fave.\" \n\nLaura nodded and moved over to lean against Kent's desk, hoping for a good view. She watched, unable to breathe, as Kent sat down and Bailey put herself over his knees, perching her bony little butt high up in the air, her back arched as far as it could go. \n\nShe's twisting herself so hard it must hurt, Laura admired Bailey's dedication to getting her position right. \n\nKent squeezed Bailey's right cheek and, while maintaining that grip, twisted and turned her body, drawing forth an almost painful moan from Bailey. \n\nLook at her go, Laura thought. Bailey can't even keep her eyes open. She's gonna come so hard. \n\nEven from her angle at the front of Bailey's body, she could see the difference in her friend's cheeks. The left lay nearly untouched but the right, even in the dimmed light of Kent's bedroom, looked angry and red. \n\nHe's doing that on purpose, Laura imagined how her cheeks must look. And we're letting him. Bai has set him up to put four more on the same cheek he's pinching and twisting right now. \n\nThe groping went on almost uncomfortably long before Kent's hand left Bailey's flesh, a gasp of some mix of disappointment and surprise forced from her throat. She'd barely finished inhaling before Kent's open palm cracked down on the lowest part of her cheek. \n\n\"One!\" she cried out. \n\n\"One?\" Laura asked, thinking it a bit too much to make a counting mistake.. \n\nKent's hand cracked down again, almost immediately. \n\n\"Um,\" Bailey panicked. \"Fifty? Um?\" \n\nA third time his hand came down on her right cheek. \n\n\"Fifty three!\" Bailey shouted, finally catching up to the right number. \n\nThat was beautiful, Kent, Laura thought. Just keep riding on her confusion. I wonder how long she could have pretended to not know what number we're on. \n\nKent slapped her again, dead centre on her right cheek. \n\nBailey moaned out, \"Fifty fooooour.\" \n\nHe went high for the next one, picking a spot that looked fresh, at least from Laura's angle. \n\n\"Fifty five,\" Bailey's voice softened, but she inhaled sharply as Kent squeezed the lowest part of her cheek. \n\nThe last slap gave a satisfying echo, bouncing off Bailey's flesh. \n\n\"Fifty six.\" \n\nKent placed his hand gently on Bailey's thigh and slowly slid up to her cheek. Bailey pushed her hips back, letting his thumb slide up between her legs, poking her in some place Laura couldn't see, although she could take a guess based on the soft moan she let out. Bailey stretched out again, lengthening her body over Kent's lap, and he traced gentle circles over her cheek. \n\nBailey's eyes opened and met Laura's, blurry and almost teary with pleasure. \n\n\"Your turn, sweetheart,\" Bailey whispered, standing up with some regret. \n\n\"Right,\" Laura said. \n\nHere goes nothing, she gritted. I promised myself I'd do this, and I'm going to do it just like I meant to. \n\nShe stepped into the middle of the room, faced Kent, and undid the zipper on her skirt. \n\nI'm going to let him see me. \n\nLaura let the skirt drop to the ground, never losing track of Kent's eyes as they darted between her legs, stared at her little triangle of hair. \n\nHe's looking right at me. Staring. Right. At. Me. \n\n\"Kent,\" she breathed. \n\n\"Yes?\" \n\n\"I know you get to do the spankings however you want,\" Laura went on. \n\n\"Yes,\" he hesitated. \n\n\"And I know you're doing them all on one cheek.\" \n\n\"Your left, Bailey's right,\" Kent agreed. \n\n\"But I want to do doubles,\" she said. \"On both cheeks, I mean.\" \n\n\"Oh.\" \n\n\"Can we make a deal?\" she wondered. \n\nKent's gaze moved smoothly from her vulva, over her stomach, and met her eyes before he spoke, \"We have a rule for that, don't we?\" \n\n\"We do?\" \n\n\"One extra spanking,\" Kent shrugged. \n\n\"Oh,\" Laura stopped, startled. \"Okay, that's fine.\" \n\nWith a swift movement, she turned around and put her hands on her knees. \n\n\"Doubles,\" Kent clarified. \"Coming up.\" ",
        "Laura arched her back until it hurt as much as she imagined it had for Bailey, sticking her cheeks out as far as she could manage. \n\n\"Ready?\" \n\nShould I answer him or wiggle a little? she wondered. Yeah, sure. Gotta do it. \n\nAfter shaking her cheeks at him a couple of times, Laura locked her muscles as tightly as she could. \n\nI'll never have a butt as tiny as Bailey's, but I'll do my best. \n\nThe first two strikes hit high on both her cheeks, delivering enough force she had to step forward to avoid falling over. \n\n\"Fifty seven and eight.\" \n\n\"You want the next two on the sides?\" Kent asked, \"or on top again.\" \n\nLaura shook her head, \"Just the same.\" \n\nShe remembered the sideways ones and hadn't liked them nearly as much. They just hadn't felt as hard; hadn't moved her body the same way. \n\nThe next two cracked down just as hard, but she'd prepared for them, leaning back toward Kent. That allowed her to keep her feet planted as the stinging sensation burned through her cheeks. \n\n\"Fifty nine and sixty,\" she breathed. \n\n\"Now the extra one,\" Kent warned as he stood up, moving off to her left side to get a good angle on her left cheek. \n\n\"Uh-huh.\" \n\nHis privilege, I guess, to take the last one out on my left cheek. I can't wait to see the pictures when we're all done. \n\nLaura gulped nervously, remembering the plan she and Bailey had laid out. \n\nRight. Pictures. \n\nDistracted by her thoughts, the spanking to her lower left cheek caught her by surprise. She yelped, took a moment to remember what number she show call out, then took a breath. \n\n\"Sixty one.\" \n\nStraightening up, Laura rubbed both her naked cheeks and turned on Kent. \n\n\"You okay?\" he asked. \n\nWhatever she'd meant to say disappeared from her brain as her eyes caught his erection poking a tent against his shorts. \n\nOmigod, her brain whispered to her, are you going to be able to do this? \n\n\"Five stars,\" she said. \n\n\"What?\" Kent asked. \n\n\"Five stars,\" Laura repeated, widening her eyes, \"Would get spanked here again.\" \n\n\"Thanks,\" Kent laughed. \"I'd have to shut this place down without good reviews.\" \n\nLaura tried to stifle her giggles and walked past Kent so she could fall down on his bed next to Bailey. She laid on her back, her right side in profile towards Kent, and tried to figure out the most dignified way to lie on her back without any underwear on. After several false starts, she straightened her left leg and pulled her right up until she felt it blocked Kent's view of her private parts from underneath. \n\nJust about maxing out the last of my modesty. \n\nNext to her, Bailey sat cross legged, her t-shirt not quite protecting her genitals from view. \n\nOh, dear, Laura thought. She and I are so far gone. \n\nBailey's face still look strained and red, a listless expression gazing out into nothing, or maybe just at Kent's crotch. \n\nQuiet the tent he's got going on there, though. \n\nA strange quietness came to Laura's mind, soothing her anxiety. She and Bailey had made a plan, a perfectly frightening and daring plan, and the time to execute had drawn near. Instead of her anxiety increasing, however, she felt safer and cozier than ever before. \n\nI can't wait to pull those shorts of his down and... \n\nShe banished the thought from her mind. \n\nAll things in their own time. \n\n============================= \n\n\"Are your asses all done for the night?\" Kent asked. \n\nBailey closed her eyes and took a deep breath. \"Not yet.\" \n\n\"Oh?\" he prodded. \n\n\"I'm sure,\" Bailey opened her bleary eyes, \"I can take three more spankings.\" \n\nKent shivered, despite the sweat inducing heat in the room, as he realized what that meant. \n\n\"Just three?\" Laura chided. \n\n\"Never know,\" Bailey said. She focused on Laura. \"Should we do the other thing now?\" \n\n\"Our, um, asses are bare,\" Laura caught herself before she used the 'wrong' word. \"So, sure.\" \n\nBailey inhaled and exhaled again and turned to look at Kent expectantly. \n\n\"What?\" he asked. \n\n\"The score,\" she sighed, as if he should have known. \n\n\"What happens then?\" he asked. \n\n\"You'll find out,\" Laura said. \"It's a surprise, though.\" \n\nKent looked back and forth between them, but recognized from long experience with the two of them that he'd hit a point he couldn't negotiate through. \n\nBesides, he thought, what's the harm in a little surprise? \n\nThough he needn't have done so, Kent reached for his phone to open the app. \n\n\"Oh!\" Laura remarked, \"Didn't we say we'd do it with our panties still on? We forgot.\" \n\n\"Doesn't matter that much,\" Bailey said. \"Afraid you've lost?\" \n\n\"No,\" Laura protested. \"But a deal's a deal.\" \n\nThat triggered Bailey, for sure, and the two girls stood up. \n\n\"Panties it is,\" Bailey announced. \n\n\"Do me a favour?\" Kent asked. \n\nThey looked at him suspiciously, but didn't move toward their underwear. \n\n\"Switch?\" \n\n\"Switch?\" Bailey asked. \n\n\"Panties,\" he eyed her closely, \"Switch with Laura.\" \n\nThe girls froze in place, staring at him. \n\nHave I asked too much? he wondered, Will they ask for something in return? They've done it before, when Bailey lent Laura a pair of panties so I could spank her in them. But those were clean, unworn. This time, they'd be putting on something the other just took off. \n\nA glance passed between the two of them and, without further comment, they walked to the whiteboard and grabbed the panties from its corner. Bailey bent over facing him and pulled on Laura's black pair while Laura bent over facing away and pulled on Bailey's white pair. \n\n\"Nice,\" he complimented. \n\n\"Don't blow a hole in your shorts, okay?\" Bailey scolded. \"We need you for another couple of minutes.\" \n\n\"Now, Kent,\" Laura insisted. \"The score?\" \n\nWith a shrug, he turned the phone around to show them. \n\n\"Laura, six. Bailey, five,\" he said. \n\n\"Crap,\" Bailey muttered. \n\nShe could have gone with a blasphemy, Kent noted, but somehow managed to maintain control of herself. \n\n\"I'll be ri-ight back!\" Laura sang out before skipping out the doorway of Kent's bedroom. \n\n\"Where's she going?\" Kent asked. \n\n\"You'll see,\" Bailey rolled her eyes. \n\n\"I'm get-ting something,\" Laura called back down the hallway. \n\nA series of kitchen related noises echoed back to his ears before Laura cried out in happiness and came rushing up the hall. She appeared at the door in Bailey's white panties, holding out the red spatula. \n\n\"Oh, my,\" Kent whispered. \"I'm using the spatula?\" \n\n\"Not you,\" Bailey sighed. \n\n\"Laura's going to paddle you?\" \n\n\"No,\" Laura said, and handed the spatula to Bailey. She came around behind Kent and put her hands on his shoulders. \"Bailey's going to paddle her... self.\" \n\n\"Her what?\" Kent prodded. \n\n\"Tsk,\" Laura clicked her tongue, \"Her ass. Is that what you wanted me to say?\" \n\n============================= \n\nThis is the most extra thing I've ever going to do in my entire life, Kent, Bailey glared at him, sparing not a thought for the gleam in Laura's eye. And I'm doing it right now, for you. \n\nBailey gave Kent a last side-eye and turned her back on him. She bent over his bed, bracing herself with her left hand on the surface of the bed, holding the spatula in her right. \n\nAt least we switched back to panties, and Laura's cover a bit more than mine did. The lousy part is that he spent the whole night slapping my right cheek, and it's the only side of my butt I can competently hit with my right hand. \n\n\"Four,\" Laura reminded helpfully. \n\n\"Four,\" Bailey acknowledged. \n\nI can do this, she glanced over her back to look at Kent and laid the wide end of the rubber spatula against the reddened centre of her cheek. Also, I can't believe I'm doing this. \n\nShe eyed Kent's erection, laid up against his belly since he'd sat back down in his chair. \n\nHe can't get any harder, can he? \n\nBailey worried that all of this stimulation might overwhelm him. Pre-come had left dark, wet dots all over the grey fabric of his shorts. \n\nThe boy's hanging in there though. \n\nIn a way, Bailey felt glad she'd lost the contest. Victory would have tasted sweet, too, but at least this way Laura wouldn't get any credit for doing this for him. No, the sole honour of this particular debasement belonged to Bailey alone. \n\n\"Here goes,\" she announced. \"Don't miss it.\" \n\nShe bit her lip and sucked in a breath before raising the spatula off her cheek. \n\nCan't go gentle, here. Have to make it count. Have to do it right. \n\nWincing in advance, she tightened up her already twisted muscles and brought the spatula down on her right cheek. \n\nA convincing snap echoed in the room a moment before the sharp sting of the rubber singed through her nervous system. \n\nI spanked myself, she realized suddenly, the thought setting off unexpected synapses all over her brain. I'm putting on a show, punishing myself just to turn him on. There's no reason to do this except that Laura and I made up a game. \n\n\"Wow,\" Kent breathed. \n\nShe caught him gulping before she announced, \"One.\" \n\n\"One?\" Kent asked. \n\n\"These are separate,\" Laura confirmed. \"Nothing to do with paying off her debt, right?\" \n\n\"Right,\" Kent agreed hastily. \n\nStop talking and pay attention to me, Bailey glared at Kent. I'm doing this for you. \n\nWhen she saw that her body held his eyes again, she raised the spatula and cracked it down again on the outside of her cheek. \n\nStill stings. \n\n\"Two,\" she said. \n\nLaura had a tense grip on Kent's shoulders, standing behind his chair and watching in mute horror. \n\nYou only missed this by one point, Bailey tried not to look her way. We'd have done two each if it had ended in a tie. \n\nBailey reached as far down her body as she could and swiped at the lowest part of her cheek she could reach. \n\nOh, that was too much! \n\nBailey hissed out a breath and sucked air through her teeth. The bottom of her cheek had either taken a lot more spankings this night, or it just felt more sensitive in general. \n\n\"Good spot?\" Kent asked. \n\n\"Mm-hm,\" Bailey looked him in the eye, adding, \"Three.\" \n\n\"Just one more,\" Laura reminded. \n\nI'm not doing it low again. I'll get a louder sound if I just smack myself in the middle. It'll sound better and won't hurt as much. \n\nBailey set the spatula against her rear, just on the border between bare flesh and the black fabric of Laura's panties. \n\nWe didn't even think about it, Bailey realized. He just told us to put on each others' underwear, and we did it. No questions, nothing. \n\nThey should have extracted something for that humiliation, but they'd gone too far, pumped too much hot blood into their veins. Whichever hormone affected brain function, it had completely saturated every vessel in their bodies. If Kent asked for an act, no matter how crazy, they'd do it for him. \n\nOn that note, she lifted the spatula high in the air and brought it down on her cheek in one last, slicing ride through the air. It struck hard, dead centre, and let out a sharp snap into the air. \n\n\"Hoo,\" she breathed out, feeling the last sting dissipate into her flesh. \"Four.\" \n\nOh, god, I can't wait any longer. Gotta hurry. \n\nDelirious and dizzy, Bailey discarded the spatula, hoping it found its way to the bed, or maybe his desk. Wobbling, she reached the white board and made her mark. \n\n\"Come on, come on,\" she told Kent, pulling him out of the chair. \"Last dollar.\" \n\n\"Last dollar?\" \n\n\"Uh-huh,\" Bailey nodded, pulling her shirt off over her head without a second thought. Laura's panties went next and Bailey tossed them vaguely in Laura's direction. \n\nNaked, don't care. Just spank me quickly. \n\n\"Last spankings,\" Bailey said. She looked over at Laura, \"What are we on?\" \n\nLaura, seeing her desperation, mouthed 'sixty one' at her without a second thought. \n\n\"Bai?\" Kent asked. \n\n\"It's fine, I'm fine,\" she stammered, bending over his bed and sticking her cheeks out at him. \"Spank me. Please. Just spank me.\" \n\n============================= \n\nKent laid his hand on Bailey's right cheek. At first, he'd worried she'd lost her mind, or that the blood rush had pushed her relatively minimal inebriation into mindless drunkenness. \n\nBut no, she's just ridiculously horny. Putting on that display with the spatula has broken through everything in a completely different way from alcohol or exhaustion. \n\nHe could, if he wanted, drag out the spankings just to torment her. Unfortunately, he didn't have the greatest amount of willpower at this point either. Watching the two girls willingly, without question, exchange panties had just about killed him. His erection actually hurt, swollen and straining against his shorts. \n\nSo when he heard Bailey begging for her last spankings, he decided to deliver them as quickly as possible and get things moving for everyone. \n\nAlmost as delirious as Bailey, but still steady on his feet, Kent pounded away at her naked right cheek, a continuous assault through all three strikes. Bailey whimpered, stumbling forward into the bed, turning over on her back even before she'd counted. \n\n\"Sixty two, three and four,\" she whispered, pulling Kent after her, sliding her body over to give him a spot to sit at her side \n\nShe's completely over the edge, Kent watched Bailey's eyes glaze. Look at her. Just lost. \n\nBailey pulled his right hand down over her vulva and spread her legs. With her right hand, she pushed two of his fingers against her entrance, her wet lips yielding easily to the pressure. \n\n\"What do you need, Bai?\" \n\n\"Two fingers,\" she moaned, arching her back to push her hips down into his hand. \n\nThat's more than before, Kent thought. Even if you think you know your body, I'm still going to try to do this slowly. \n\nA pang of fear ran through Kent. Bailey had proven so durable, he hadn't worried about hurting her with a spanking in weeks. \n\nBut vaginas and ass cheeks are different, aren't they? \n\nSlowly, he worked his fingers around the parting of her lips, tickling at the tunnel beckoning him inward. Bailey writhed in place, grinding her sore cheek into the mattress in an attempt to envelop his digits. \n\n\"In,\" she begged. \n\n\"Slowly,\" he hissed back, and started pushing. \n\nBailey inhaled, tightening her body up, and Kent halted his penetration. When she relaxed again, he pushed, getting just past the ridge of tight muscles and into the soft, warm wetness behind it. \n\n\"Oh,\" Bailey shuddered. \n\nShe took her hand away from his hand and pressed it against her clitoris. \n\n\"There, there, there!\" she cried out, jabbing herself repeatedly. \n\nWow! \n\nHer vaginal muscles started pulsing around his fingers the moment she punctuated her last word, shaking the bed and forcing Kent to move with her bucking hips to avoid having his fingers torn from her body. \n\nShe probably wouldn't like that, he thought nervously. Gotta stay with her until she- \n\n\"Again!\" Bailey jabbed at herself. \n\nDoes it count as two orgasms if the first one hasn't even finished? \n\nWhen Kent felt the pulses double their strength, he decided she'd either had a second orgasm, or some strange kind of climax that went higher and harder instead of ebbing away. \n\nAfter some uncountable number of seconds, the pulsating around his fingers stopped and Bailey's spine straightened to rest against his bed. Her vaginal muscles relaxed and he slowly withdrew his glistening fingers from her insides. \n\n\"Whoa,\" he remarked, holding his fingers up in front of his face. \n\nBailey opened her bleary eyes and smiled, seeing his shock. She looked up at the ceiling for a bit, regaining her breath. \n\n\"That was something,\" Laura remarked, making a place to sit by Bailey's feet. \n\n\"Your turn?\" Kent asked. \n\nLaura nodded and ticked her chin at the white board, \"I made my mark.\" \n\n\"Uh-huh?\" Kent prodded. \n\nBailey, still naked, propped herself up on her right elbow so she could look at Laura. \n\n\"Well?\" Bailey asked, \"Gonna do it or not?\" \n\n============================= \n\nLaura looked at Bailey and back at Kent, dozens of thoughts colliding in her brain at once, trying to make sense of her desires as her blood pushed hormones through her entire body. \n\nEverything is lit up all at the same time, she thought, all I know for sure is that this is my last chance, ever, to get spanked. If I don't go all the way right now, I'll probably never get a chance. \n\nShe nodded to Bailey and lifted her hips so she could slide Bailey's white panties down and lay them gently on Kent's desk. \n\nNever, even been completely naked in front of Kent, have I? Laura reminded herself. Wearing just the apron felt pretty naked, though. \n\nKnowing this would feel different Laura reached for the hem of her shirt and pulled it off over her head. \n\n\"You know,\" she laughed, turning to Bailey, \"Kent's supposed to be able to see your... tits when he spanks you.\" \n\n\"Hmph,\" Bailey rolled her eyes. Propped up on her side, she casually bent her left knee and pulled it in, spreading her legs in her friend's direction. \"Well, he can see me all he wants now to make up for it.\" \n\n\"Scooch over,\" Laura glanced away. \"I'm not going to cheat.\" \n\nLaura sat down on the edge of the bed where Bailey's feet had just lain and rolled up on her back, pulling her knees up to expose her cheeks. \n\n\"Last three, Kent,\" she made her eyes meet his. \n\nI need him to know how bad I want to feel this, she beamed at him, hoping to keep any sadness from her expression. He's gotta do this right. \n\n\"Good view for it,\" he taunted. \n\n\"Uh-huh,\" Laura replied. \n\nMight as well go for it at this point. \n\n\"Spank my ass, already,\" she insisted. \n\n\"Ooh,\" Bailey teased. \"Bad girl.\" \n\n\"Here it comes,\" Kent warned, rubbing circles in her left cheek in a way that grazed the trimmed hairs over her vulva. \n\nLaura shivered, and waited. \n\nKent braced himself, putting his left hand on her tense belly, and pulled back his right hand. \n\nI hope you know how hard you're supposed to do this, Laura gave him her fiercest glare. \n\nThe first crack landed square on the centre of her cheek, loud and brutal against her bare skin. \n\n\"Oh, Kent!\" she groaned. \"Sixty five.\" \n\n\"That what you wanted?\" he asked. \n\n\"Ye-es,\" she hissed back, closing her eyes and throwing her head back. \"Yes.\" \n\nThe second one struck her seat, a spot just as abused and red as the rest of her left cheek. \n\n\"O-o-oh,\" Laura moaned. \"Sixty six.\" \n\nSpanking me this hard, I can come as many times as I want, Laura realized. Oh, god, Kent. Keep going. \n\n\"Last one's the best one,\" he threatened her. \n\n\"I know,\" she whispered back. \n\nDead centre again, he slapped her sore cheek with a force to sting for days and a sound that rang in her ears for several heartbeats. \n\n\"Oh, yes,\" she muttered through gritted teeth. \"Sixty seven!\" \n\nLaura sat up and planted her feet on the floor. Without a second thought, she reached out and pulled Kent's shorts down. \n\n\"Whoa!\" he yelped, his erection springing out from its containment, rigid enough to hold itself just above horizontal. \n\n\"Just press it against me, okay?\" Laura heard herself begging as she laid back again, spreading her legs. \"Like we usually do it, but you on top.\" \n\n\"Alright,\" Kent gulped, trying to catch his breath, moving his body between her open thighs. \n\nWe're both out of breath, she realized. Poor Kent, having to pull double duty. I hope he can hold out, or else I won't be able to do my thing. ",
        "\"Try not to come yet, though,\" Laura pleaded. \"Just wait a bit longer.\" \n\n\"I, uh, okay,\" Kent muttered. \n\nThen he pressed his erection along her vulva, pushing her wet lips open easily, and she forgot everything. \n\nOh, this is ten times better than straddling him. \n\nShe felt her mind slipping away. Laura had never planned to have sex before she got married. No penis but her husband's, they had taught her, should ever gain access to her vagina. But she had Kent between her thighs, the length of his shaft between her lips, the base of it pushing at the entrance to her most sacred place. His hands, entirely free, moved to her breasts, cupping them and squeezing them together. \n\nI don't need it inside me. Not today. I'm going to come just like - \n\nKent twisted his hips, moving her clitoris just the way Laura did when she rode him, and her orgasm struck. \n\nSo much foreplay means a fast orgasm. My god! \n\nFor a moment, Laura felt her conscious brain release entirely and her eyes saw nothing but bright lights and fireworks. \n\nWhen she came to, her legs hung limp on the edge of the bed and Kent was hovering over her with a concerned look on his face. Even Bailey had sat up. \n\n\"Laura?\" Bailey prodded. \"Are you alright?\" \n\n\"Yeah,\" Laura sat up, almost too quickly, nearly smacking her head against Kent's. \"Yeah, I'm alright.\" \n\n\"Okay,\" Kent said. \"Take your time.\" \n\nBailey and Kent shared a worried look. \n\n\"I didn't know that was a thing,\" Kent said. \"Thank fuck you weren't on top.\" \n\n\"Ha,\" Laura breathed in hard as she tried to laugh. \n\n\"You okay now, though?\" Bailey asked. \n\n\"Yeah,\" Laura smiled. \"Wow. Can we still do the, y'know, thing?\" \n\n\"You still want to?\" Bailey asked. \n\nLaura felt a surge of energy flow through her veins. \n\nYes, yes. I want to do that for Kent. \n\n\"What thing?\" Kent asked. \n\n\"You know how you paid Bailey for a picture of her ass?\" Laura asked, feeling the strange ease with which her tongue passed the word. \n\n\"Which one?\" \n\n\"With your come on her,\" Laura clarified. \n\n\"Oh, right,\" Kent said. \n\n\"I want one like that, too,\" Laura blurted out, stammered a moment, then went on. \"If you'll pay for it.\" \n\n\"You want me to come on your ass?\" \n\n\"Not exactly.\" \n\n&lt;&lt;&lt;&lt;&lt;&lt; Flash back &lt;&lt;&lt;&lt;&lt;&lt; \n\n\"There are a lot of ways to do this,\" Bailey said, waving at her computer screen. \"For instance.\" \n\nOn the screen, a well-endowed, topless woman had positioned herself in an awkward looking kneeling position. A man, standing in front of her, pressed his erection against her breast bone. She squeezed her breasts around him and he began thrusting through her cleavage. \n\n\"That looks crazy awkward,\" Laura pronounced. \"Plus, where is he going to get his come?\" \n\n\"Hard to say,\" Bailey admitted, scrolling through the video. \"Here.\" \n\nSemen fountained up from his erection, striking the woman's chin, neck and cheeks. \n\n\"Ew,\" Laura drew back. \"I don't want it on my face, just my boobs.\" \n\n\"Scratch that, then.\" \n\nBailey found another video, a woman on her back, head hanging over the edge of the bed. The man stood behind her, laying his erection on her face. She used her tongue to lick the underside of his penis while he jerked on the shaft. \n\n\"I feel like she's not doing her job,\" Laura judged. \n\n\"What?\" \n\n\"Shouldn't she be, y'know, using her hands on him?\" \n\n\"Fair enough,\" Bailey's eyes smiled, but she held back her laugh. \n\n\"And what's with her boobs?\" \n\n\"They're fake,\" Bailey explained patiently, \"You don't like this one?\" \n\n\"I'm not ready to lick him, no,\" Laura admitted. \"And I bet some is still going to get on her face.\" \n\nA third tab opened to a new video, a woman kneeling on the ground, cupping her breasts and squeezing them together. \n\n\"Oh,\" Laura looked carefully. \n\nIn front of her, her male companion stood, taking a grip on her shoulder while he jerked his erection at her. \n\n\"Is he going to get her boobs?\" Laura asked. \n\n\"That's why I picked this one,\" Bailey said. \"Watch.\" \n\nThe male star moved in closer to his co-star and began ejaculating. \n\n\"That's it,\" Laura declared. \n\n\"You think you can do that?\" Bailey asked. \n\n\"You can use your hands, though, right?\" Laura replied. \"I mean, Kent shouldn't have to.\" \n\n\"Sure,\" Bailey smiled. \"I wouldn't want to be left out.\" \n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; \n\nKent watched as Laura drew the stool out from under Kent's bed, then nabbed one of his pillows, laying it over the stool. \n\nWhat the hell is she doing? he wondered. If she wants a picture like Bailey's, she should be over my lap. Even if she bends over, she doesn't need the stool. \n\nThen he remembered that the two girls had clearly planned this whole thing out, which meant they'd calculated the absolute necessity for the stool and the pillow and anything else that might happen next. \n\nLaura knelt down on the stool, facing Kent. \n\n\"Oh,\" Kent remarked quietly. \n\n\"But the picture can't have my face in it, right?\" Laura said. \n\n\"Right,\" Kent agreed, his body wavering, \"Bailey will make sure.\" \n\nBailey, hearing her name, got out of bed and reached for his erection. \n\nWith the stool and the pillow, I'm levelled perfectly with her tits. They put some effort into planning this. \n\n\"This is what you want?\" Kent asked Laura. \n\n\"Yeah,\" she nodded, looking down at his erection. \n\nBy then, Bailey had taken a spot kneeling on the floor next to Laura and started jerking his cock. Laura scooped up her breasts and squeezed them together. \n\n\"Gorgeous,\" Kent remarked. \"This, um...\" \n\n\"What?\" Laura asked. \n\n\"Won't take long,\" he stammered. \n\n\"As long as there's lots,\" Laura whimpered. \"Get your two dollars worth.\" \n\n\"Oh, god,\" Kent whimpered, feeling his legs starting to give out. \n\n\"Attaboy,\" Laura prodded. \n\nKent leaned himself into her body, the tip of his swollen erection poking her breastbone. \n\n\"Ooh!\" Bailey remarked, eyeing the clear, wet spot he'd left on her body. \"Give her the rest, now.\" \n\n\"Agh!\" Kent shouted. \n\nBailey knew her business by then, and also had a clear agency in her handling of his cock. As he started expelling semen onto Laura's body, Bailey jerked him hard from left to right, making sure whatever he had would cover as much flesh as possible. \n\nMaybe she's worried I won't have enough? \n\nTaking firm control with both hands, Bailey pointed his erection directly at Laura's right nipple, letting his second blast splatter right against it. Laura, meanwhile, maintained a death grip on her tits and a horrified, open-mouthed expression on her face. \n\nWhen his second ejaculation stopped, Bailey jerked him over to Laura's left breast, making sure a good load coated that side, too. \n\nThat seemed to end the major goals of her assignment, and she spent the rest of his orgasm, jerking side to side to get as many streaks across her friend's cleavage as she could manage. \n\n\"Wow!\" Laura looked down at her breasts. \"Wow. So-o-o-o much!\" \n\nHer horror had mutated itself into a quiet, stammering state of shock. She gently released her breasts, leaving her semen coated thumbs in place. \n\n\"Sticky,\" she added. \"I was worried it might, y'know, run down or something.\" \n\n\"He's a bit dehydrated, probably,\" Bailey explained. \n\n\"Do the picture, quick.\" \n\nKent stepped back, looking at the mess he'd made of Laura's breasts, the sticky strands that stretched across her cleavage where she'd compressed her flesh into a bulging little target. \n\nIt was a good job. I got my two dollars worth. \n\nHe watched listlessly as Bailey took a few shots. \n\n\"You want him in the pic?\" Bailey asked, \"Like in mine?\" \n\nLaura nodded and they pulled Kent to her side so they could frame his slightly weakened erection in the photo, laying across a bare, upper portion of her left tit. \n\n\"Nice,\" Bailey remarked. \"I'll edit them and get them to you tomorrow.\" \n\nKent surveyed the white board, counting all of the tick marks. \n\n\"That's what? Thirteen dollars today?\" he asked. \"Just two left.\" \n\nLaura and Bailey both gulped, shared a glance, and nodded back at him."
    ],
    "authorname": "xtorch",
    "tags": [
        "ejaculation",
        "game",
        "messy",
        "money",
        "orgasm",
        "picture",
        "spanking",
        "spatula",
        "stripping"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/two-hundred-dollars-ch-28"
}
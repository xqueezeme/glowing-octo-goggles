{
    "title": "Ashley's Revenge Ch. 11",
    "pages": [
        "I opened my eyes and looked slowly around the room as I pieced together the crazy, passionate evening I had experienced with Ashley the night before. My wife's wedding dress was tossed carelessly over the chair in the corner of the room and the pair of black leather knee-high boots was lying on the floor next to the bed. I smelled the distinct smell of bacon wafting through the air and I looked over and noticed that Ashley wasn't in the big king sized bed next to me. \n\nI sat up and smiled, remembering that my wife and her sister wouldn't be home from the spa until the next day so I would have Ashley all to myself for another day of fun. I got out of bed and grabbed my robe out of the closet and walked downstairs to the kitchen to find Ashley. \n\nAshley was at the stove wearing a short little red silk robe which showed off her slim, sexy legs nicely. Her long blonde hair was pulled back into a ponytail and she had her headphones in her ears. She was cooking and dancing to whatever she was listening to on her iPhone and I stood there in the doorway enjoying the show. \n\nAshley turned around to grab a bowl off of the island in the middle of the kitchen and she smiled when she saw me watching her. \n\n\"It's about time you got up,\" Ashley giggled as she pulled her headphones out of her ears. \n\n\"It's barely light out,\" I grinned as I walked into the kitchen and let my eyes take in the beautiful sight in front of me. \n\n\"Well, sit down. I'm making you breakfast,\" Ashley smiled. \n\n\"I didn't know you could cook,\" I said with a grin. \n\n\"I can do a lot of things,\" Ashley giggled as she looked over at me. \"Besides, what kind of wife would I be if I didn't make breakfast for my man?\" \n\n\"A typical one,\" I laughed as I sat down at the kitchen table and watched Ashley pour a bowl of beaten eggs into a pan and then add some shredded cheese over the top. \n\n\"Well, I'm not typical, husband. You should know that by now,\" Ashley said as she walked over to the Keurig coffee brewer and slid a Dark Magic K-Cup into the machine. \n\n\"That is true,\" I smiled and watched Ashley as she bounced back and forth between the stove, toaster and coffee maker. \"Last night was pretty damn incredible.\" \n\n\"Yeah, it was,\" Ashley grinned as she grabbed the freshly brewed cup of coffee and brought it over to me. \"And we still have all day today and all night tonight.\" \n\n\"Thank you,\" I grinned as I saw Ashley was still wearing my wife's rings as I took the mug from her hand and then looked up into her beautiful blue eyes. \"I know, I'm not used to having you all to myself for this long.\" \n\n\"You can have me for as long as you want,\" Ashley smiled as she twirled around and went back to the stove where she assembled two plates of scrambled eggs, bacon and wheat toast for both of us. \"We just need to figure out how to get rid of our little problem.\" \n\n\"Our little problem, huh?\" I grinned as Ashley floated across the room and put the plates down on the table. \n\n\"Yes, we need to make her pay and you need to decide what it is you want, mister,\" Ashley said matter-of-factly as she went back over to the Keurig for her cup of coffee. \n\n\"I know,\" I sighed as I took a sip of my coffee. \"You know I want you,\" I said as Ashley sat down at the table across from me, \"but it's complicated. It's not like we could just pick up and disappear into the sunset.\" \n\n\"Why not?\" Ashley grinned as I felt her foot move up onto my lap. \n\n\"You're still in high school, for one,\" I replied. \n\n\"But I'm 18, I can do whatever I want.\" \n\n\"True, but if we disappeared we'd both have to leave our friends and family behind. Which brings me to my next point, your parents would never approve of our relationship.\" \n\n\"Who cares? Am I supposed to hide the fact that I'm in love with you for the rest of my life just because they wouldn't approve?\" Ashley asked as her foot slipped beneath my robe and began to slowly slide up and down my cock getting me rock hard almost instantaneously. \n\n\"No, I didn't say that,\" I groaned. \n\n\"Besides, my parents would come around eventually when they saw how happy you made me,\" Ashley grinned as her foot continued rubbing my cock with long, slow strokes. \n\n\"Fair enough, but you still need to finish school. I wouldn't want to be the reason you missed out on your senior year and all of the memories that come along with that.\" \n\n\"You mean like prom night?\" Ashley giggled. \"I doubt it could top last night when you fucked me while I wore the bitch's wedding dress.\" \n\n\"Good point,\" I chuckled. \"But there's a lot more to senior year than prom night and while I don't doubt your feelings for me for a moment, I'm a big boy and I know that things can change. So, before we do anything major, I think we both have to be sure.\" \n\n\"My feelings for you aren't going to change, Brian. You're the only man I've ever wanted,\" Ashley said as she looked across the table into my eyes as her foot teased my throbbing cock. \n\n\"Good, then there's no reason for us not to wait until you finish high school before we go public.\" \n\n\"So we have to endure nine more months of sneaking around?\" Ashley pouted. \n\n\"Haven't you been having fun so far?\" I grinned as I reached under the table and grabbed Ashley's ankle. \n\n\"I have,\" Ashley smiled at me as I stared into her sparkling blue eyes. \n\n\"Then what's the problem?\" I asked as I moved Ashley's foot away from my cock and tickled it. \n\n\"I want to make her pay,\" Ashley said laughing as she tried to pull her foot from my grasp. \n\n\"There has to be a way to make her pay without letting her find out about us,\" I said as I continued tickling the bottom of Ashley's sensitive foot. \n\n\"Yes,\" Ashley giggled as I finally freed her foot and she pulled it away quickly. \"Or, we'll just have a nice scrapbook for her when we reveal what's been going on right under her nose.\" \n\n\"You are a naughty girl,\" I grinned. \n\n\"That's why you love me,\" Ashley smiled wide as I picked up my fork and tried some of Ashley's scrambled eggs. \n\n\"Maybe, but you do get points for cooking skills too,\" I smiled. \n\n\"Like I said, I can do a lot of things,\" Ashley cooed then bit down softly on her lower lip and smiled. \n\n\"So, besides this amazing breakfast what did you have planned for us today?\" I asked as I sipped my coffee. \n\n\"Well, Lindsey texted that she'd like to get her car back today. I guess she and Jake had a bit of a fight and they are coming back from the lake house today.\" \n\n\"Oh? What are they fighting about?\" I asked as I put my coffee cup back down on the table. \n\n\"I guess she found some naked selfies on his phone that most definitely weren't from her,\" Ashley replied. \n\n\"That'll do it,\" I smiled. \"So, do we need to drop her car off somewhere for her?\" \n\n\"We could do that,\" Ashley said as she looked over at me, \"Or, I was thinking we could have her stay here tonight.\" \n\n\"I don't know about that,\" I said as my mind immediately went into overdrive debating the pros and cons of adding another hot high school girl to the equation. \n\n\"What, you don't want to fuck her?\" Ashley asked boldly with a wicked grin. \n\n\"The better question is do you really want me to fuck her?\" I countered. \n\n\"I might be a bit jealous, but I know the difference between love and lust,\" Ashley grinned. \"I'm not your bitch wife; I would never keep you from trying something you wanted to do.\" \n\n\"How do you know that Lindsey would be up for such an arrangement?\" \n\n\"Well, for one she's heard my stories about what a good fuck you are and I know for a fact she'd love to find out first-hand if that was true. And, if that wasn't enough I also have a 'Whatever The Fuck I Want Card' outstanding from her just like I do from you,\" Ashley giggled. \n\n\"You are devious,\" I smiled as Ashley stood up and started clearing the table. \n\n\"I know what I want and I know how to get it, if that makes me devious then I guess I'm devious,\" Ashley smiled as she walked over to me and sat down on my lap. \n\n\"What bet did Lindsey lose?\" I asked as Ashley leaned in and softly kissed my neck and I wrapped my arms around her warm body. \n\n\"Oh, that's not important,\" Ashley giggled as she nibbled on my earlobe and whispered, \"The question is do you want to own her sexy ginger ass for a night?\" \n\n\"Yes,\" I moaned softly. \n\n\"Louder,\" Ashley groaned as her lips softly kissed my neck. \n\n\"Yes,\" I said louder. \n\n\"Yes what?\" Ashley giggled as she bit down on my neck. \n\n\"Yes, I want to own her sexy ginger ass for the night,\" I groaned as Ashley put her arms around my neck and looked into my eyes. \n\n\"How much do you love me right now?\" Ashley smiled. \n\n\"You have no idea,\" I grinned. \"You're sure we can trust Lindsey to keep her mouth shut about us?\" \n\n\"Yeah, I have enough dirt on her to make sure she stays quiet,\" Ashley giggled. \n\n\"Alright then, what's the plan?\" I smiled as I wondered to myself exactly what kind of dirt that Ashley had on her best friend and decided not to think about just what she could do with the dirt that she had on me. \n\n\"I'll text Lindsey and tell her that I'll meet her at the mall and pick her up. I was thinking of blindfolding her on the way over and maybe keep her that way for a while once I get her back here.\" \n\n\"Very cloak and dagger of you,\" I grinned. \n\n\"Oh, you know it'll be hot. There will be rules though, I don't want you cumming in your new ginger slut. That's all for me, ok?\" Ashley's blue eyes sparkled as she leaned in to kiss me. \n\n\"Yes,\" I said as our lips met for a deep, passionate kiss. \n\n\"Good boy,\" Ashley smiled as she stood up. \"I'm going to hit the shower and get ready to go get Lindsey.\" \n\n\"Want some company?\" I asked with a grin. \n\n\"Sure, but no funny business, mister,\" Ashley giggled. \"I want you to be on your A game today.\" \n\n\"Aren't I always?\" I asked as I stood up and followed Ashley as she used her amazing long legs to climb the staircase two stairs at a time. \n\n\"Yeah, but that's just with one girl to satisfy. Today you're going to have two,\" Ashley said as she reached the master bedroom and took off her silk robe revealing her perfect young body. \n\n\"Are you really sure you want to share all this?\" I asked as took off my robe and tossed it on the bed. \n\n\"No, I'm not sure,\" Ashley grinned as she looked down at my hardening cock. \"But, I know it is a fantasy of yours that the bitch never let you experience. I'd be no better than her if I didn't take care of your needs and desires, right?\" \n\n\"You are amazing, Ashley,\" I smiled. \"You've got to know that you are truly all I need to make my fantasies come true. I don't need a threesome.\" \n\n\"You always seem to say the right thing,\" Ashley giggled as she walked over to me and put her long arms up around my neck and looked up at me with her sexy blue eyes. \"Just knowing you'd give up a chance at fucking two, hot young girls at the same time tells me that you love me.\" \n\n\"What's not to love?\" I smiled as I wrapped my arms tightly around Ashley's warm, naked body and pulled her in to me as I kissed her soft red lips with a deep, passionate kiss. \n\n\"True,\" Ashley grinned, \"Besides, I already know Lindsey is jealous that I'm fucking an older, experienced man. I want her to jealousy to be off the charts by the time she leaves here tomorrow.\" \n\n\"As long as you're sure,\" I smiled. \"You're the one that's in control, you can stop it at any time you want for any reason you want.\" \n\n\"Deal,\" Ashley grinned as she bit her lower lip and looked up into my eyes then she slid her right hand down my body and took a hold of my rock hard cock and giggled. \"I thought I said no funny business.\" \n\n\"You said no funny business in the shower and we aren't in the shower yet,\" I chuckled. \n\n\"I should just throw you in to a very cold shower to take care of this,\" Ashley grinned and squeezed my hard cock as her blue eyes sparkled in the morning sunlight. \n\n\"Sounds like something my wife would do,\" I smiled as I watched Ashley's eyes go wide and her head move slowly from side to side. \n\n\"You did not just say that,\" Ashley said as she tried to stifle a grin. \n\n\"Yeah, I think I did,\" I chuckled. \n\n\"Just to let you know, I'm fully aware you're trying to manipulate me into doing exactly the opposite of what the bitch would do,\" Ashley said as she looked up into my eyes as she slowly got down on her knees in front of me. \n\n\"Oh yeah?\" I moaned as Ashley's soft hand gripped my hard cock and guided it to her soft, red lips. \n\n\"Mmhmm,\" she moaned as she kissed my cock softly and let her velvety tongue make two teasing swirls around my throbbing, ultra-sensitive head. \n\n\"Fuck,\" I moaned as I reached down and steadied myself on Ashley's shoulders. \n\n\"Too bad I'm not that easily manipulated,\" Ashley giggled as she popped back up to her feet and kissed me on the cheek. \"We need you on your A game, remember?\" \n\n\"Oh, that is mean,\" I smiled. \n\n\"I know, but so is trying to manipulate a sweet, young girl,\" Ashley giggled as she reached down and grabbed my hard cock. \n\n\"Fair enough,\" I said as Ashley led me into the master bath using my hard cock as a leash. She started the water on the shower and pushed me in long before it had time to warm up. \"Fuck, that's cold,\" I groaned. \n\n\"Want to try comparing me to your wife again?\" Ashley asked as her hand hovered over the handle that could quickly send the water into a much colder stream. \n\n\"No, I'm good,\" I grinned. \n\nAshley stepped in once the water had heated up and steam had started to fill the air. I couldn't keep my hands off of her and I made sure that every inch of her sexy body got perfectly clean. She returned the favor but she did nothing to alleviate the fact that she once again had me rock hard and ready. \n\n\"I have a feeling you will channel all the frustration you're feeling right now into something amazing later,\" Ashley grinned as she turned off the water and grabbed us a couple of towels. \n\n\"I'm sure I will,\" I groaned. \n\n\"I want Lindsey to get the full treatment, the belt, the handcuffs and more,\" Ashley smiled sweetly as she wrapped the towel around her body and stepped out of the shower and walked over to the vanity where she started blow-drying her sexy long blonde hair and I went into the master bedroom and put on jeans and a black polo. \n\nI looked around the room and decided I should clean up a bit, I put my wife's wedding dress and veil back into the boxes from which they came and then changed the sheets on the bed. \n\n\"What a good husband,\" Ashley smiled as she walked into the room as I finished making the bed. She was still wearing the towel around her slim body and her long blonde hair was pulled back into a ponytail. \n\n\"What can I say?\" I asked with a smile as I sat down on the freshly made bed and watched Ashley pull out a black thong and bra, jean shorts and a black tank top from her suitcase which was sitting on the dresser. \n\n\"You can say I'm the best wife you've ever had,\" Ashley smiled as she laid her clothes on the bed then dropped her towel on the floor. \n\n\"Well, the competition is pretty fierce,\" I grinned as she stepped into the thong then slid it up her long, slender legs. \n\n\"Oh, is it now?\" Ashley asked as she shot me an unpleasant look. \n\n\"Maybe it's just the blue balls talking,\" I said as she slid on her short little jean shorts and put on her bra. \n\n\"A little discomfort now for a night of hot sex with two teenage sluts, boo-hoo,\" Ashley said mockingly then she stuck out her tongue to accentuate her message as she slid the tank top on. \n\n\"Well, when you put it that way,\" I smiled. \n\n\"Yes?\" Ashley shot back. \n\n\"You are the best wife ever,\" I smiled. \n\n\"Thank you!\" Ashley grabbed a pair of socks from her suitcase and sat down on the bed and put them on before she popped back up onto her feet and reached into her bad once again. This time she pulled out her gold cross and chain and put it on as she looked into the mirror over the dresser. \n\n\"You look amazing,\" I said as Ashley spun around to face me. \n\n\"Thanks, baby,\" Ashley said as she walked over and leaned down to kiss me. I felt a spark as our lips met for a long, soft kiss. Ashley grinned when she said, \"Don't miss me too much while I'm gone.\" \n\n\"I'll try not to,\" I said before I pulled her down and I kissed again. \"There's an extra garage door opener on the shelf above the light switch as you walk into the garage.\" \n\n\"Thanks, baby,\" Ashley grinned. \"Try to keep it in your pants until we get back, ok?\" \n\n\"I will,\" I said as Ashley spun around and made her way out of the master bedroom as I admired the way her ass looked in those short little jean shorts. \n\nI went into my office and checked my email and then my fantasy baseball team. I was having a hard time concentrating knowing what was coming when Ashley and Lindsey made their way back to the house. I was excited to finally be able to check the threesome off the bucket list, especially since I couldn't imagine two hotter women to do it with. I was also a bit nervous; not just about the threesome, but also what letting Lindsey in on Ashley's and my little secret could end up doing to our lives. \n\nAshley had told me that she had enough dirt on Lindsey to keep her quiet, but I had to wonder if inviting Lindsey into our world wouldn't give her a lot of ammunition to use against Ashley and me. I knew I was taking a risk, but in the end the reward I was going to get seemed to outweigh worrying about what might happen. \n\nAs I stared at my computer monitor I remembered the bracelet and lingerie that I had bought to give Ashley this weekend that I hadn't given her yet. I smiled as I thought just how jealous Lindsey would be when Ashley opened up that diamond bracelet that I had got for her and then I smiled wider as I imagined Ashley and Lindsey in the lingerie. \n\nI glanced down at my desk and saw the GPS unit sitting there, my mind wandered onto just who my wife might have been meeting for her little rendezvous at the no-tell motel. As much as I wanted to be jealous, I couldn't really muster that particular emotion knowing I would soon have my cock in two amazing teenage pussies. \n\nAshley wanted me to give Lindsey the full treatment and that was exactly what I planned on doing. I got up and walked back into the master bedroom where I picked up the handcuffs from the dresser and slipped them into the front pocket of my jeans and looked at myself in the big mirror over the dresser. I was ready. \n\nI heard the rumble of the garage door coming from under my feet so I quickly made my way down the two staircases and into the den. I was standing there watching as the door to the garage opened and I saw Ashley leading a blindfolded Lindsey into my house. \n\nSeeing Lindsey and Ashley next to each other just reinforced that the two girls could easily be twin sisters. Both mirrored the other in height, build and hair length. Lindsey's skin was a bit paler than Ashley's but the only real difference between them was Lindsey was a sexy redhead and Ashley a sexy blonde. Lindsey was wearing a short jean skirt with raised sandals which showed off her long, slender legs. Her cute little pink tank top said \"Spoiled Brat\" across the front and I couldn't help but smile at the thought of Ashley and her competing over my cock for the rest of the day. \n\n\"So this is my toy?\" I said in a lower voice than normal as Ashley led Lindsey into the den. \n\n\"Yes, sir,\" Ashley giggled and grabbed Lindsey's arms as Lindsey tried to reach up and take the sleep mask off that Ashley used to blindfold her and said, \"Not yet.\" \n\nI took the handcuffs out of my pocket and saw Ashley's eyes light up as I walked over to her and Lindsey. When I got close enough Ashley turned Lindsey away from me so that I could cuff her wrists behind her back. \n\n\"Wait, no!\" Lindsey pleaded as the cuffs closed around her soft, white wrists. ",
        "\"Listen carefully, slut,\" Ashley giggled as she got right up next to Lindsey so her mouth was right next to Lindsey's ear. \"Do I have to remind you already that I own your sexy white ass for the rest of the day and night?\" \n\n\"No,\" Lindsey whispered as I held onto the cuffs behind her back. \n\n\"Good,\" Ashley smiled as she looked up at me, \"What do you want to do first with this little slut?\" \n\n\"Why don't we see just how well this little spoiled brat sucks cock,\" I growled and Ashley could barely contain her excitement as I spun Lindsey around and pushed her down onto her knees in front of me causing her to let out a loud gasp. I unzipped my jeans as Ashley took a handful of Lindsey's long red hair into her hand and tugged it back. \n\n\"So we are doing this?\" I asked in a low voice. \n\n\"Yes,\" Ashley looked up at me with a grin as she pulled Lindsey's hair back harder. \n\n\"Yes,\" Lindsey finally replied tentatively. \n\n\"Open wide,\" Ashley whispered in Lindsey's ear as our eyes locked. I slid my hardening cock free from my boxer briefs and guided it towards Lindsey's open mouth where I rubbed my cockhead teasingly across Lindsey's soft, red lower lip. \n\n\"So I can do whatever I want with this slut?\" I asked Ashley as Lindsey squirmed on her knees in front of me, her skirt sliding higher up her thighs. \n\n\"Yes, sir,\" Ashley giggled, \"She is our toy for the night. The only rule I have if you don't cum inside her.\" \n\n\"Can I cum on her?\" I growled as I shoved my hardening cock into Lindsey's waiting mouth. \n\n\"I'll allow it,\" Ashley giggled as she tugged Lindsey's long red hair back and I felt Lindsey's lips wrapped tightly around my cock and her soft tongue came to life as she slowly twirled it around my now throbbing head as it entered and exited her warm mouth. \"It looks like she likes that cock,\" Ashley grinned. \n\n\"Yes, it does,\" I smiled as I reached down and took Lindsey's hair from Ashley. \"Why don't you have a seat and watch the show?\" I asked with a smile. \n\n\"Ok,\" Ashley smiled and walked over and plopped herself down on the couch. \"Bring her closer,\" she giggled. \n\n\"Come on,\" I growled as I walked towards Ashley still holding onto Lindsey's hair, forcing the sexy, handcuffed and blindfolded schoolgirl to follow me on her knees. \"You must have lost one hell of a bet,\" I groaned. \n\n\"You have no idea\u2014\" Lindsey started but was quickly cut off by Ashley. \n\n\"Hey! You're not here to talk. Open your mouth, slut,\" Ashley barked and Lindsey complied by opening her warm, wet mouth wide once again and I stuffed it with every inch of my hard, raging prick. \n\nI started slipping my cock in and out of Lindsey's mouth with a slow, steady motion as I tugged her back by her soft, red hair. I couldn't help but wonder just what bet Lindsey lost to be here at Ashley's mercy like this. I also couldn't help but wonder just how I'd pay for the \"Whatever the Fuck I Want\" card Ashley held on me. What seemed like a fun little game could have some very serious consequences. \n\n\"How's she doing, husband?\" Ashley asked with a wicked smile from her perch on the couch. \n\n\"Not bad,\" I moaned as Lindsey started rolling her soft, warm tongue around my throbbing cock as I slowly fucked her mouth. \n\n\"Well then, it sounds like she could do better,\" Ashley giggled. \"Maybe she needs a belt to the ass.\" \n\n\"No!\" Lindsey moaned as I slipped my cock from her mouth for a moment. \"I'll do better. Let me suck your cock, sir.\" \n\n\"I love when a slut calls me sir,\" I smiled at Ashley. \n\n\"She can be a good little slut when she wants to be,\" Ashley bit down on her lower lip and watched me tug her blindfolded best friend's hair back. \n\n\"What have you told her about me?\" I asked as I tapped my cockhead on Lindsey's plump lower lip. \n\n\"All she knows is you're a naughty married man that has been fucking her besty,\" Ashley smiled. \n\n\"And what do you think about that, Lindsey,\" I asked as I tugged her red hair back harder. \n\n\"What do you mean?\" Lindsey whimpered. \n\n\"What do you think about your best friend fucking a married man?\" I answered. \n\n\"Honestly?\" Lindsey groaned. \n\n\"Yes, honestly,\" I said as I slapped the side of Lindsey's face with my throbbing cock head. \n\n\"I think it's hot,\" Lindsey moaned. \n\n\"Have you ever fucked or sucked a married man, Lindsey?\" I asked as I guided my cock towards her mouth once again. \n\n\"Just you, sir,\" Lindsey replied meekly and I saw Ashley's smile grow wider. \n\n\"Lindsey, I'm only going to ask this once, so make sure you consider your answer carefully. Do you want this to continue or do you want Ashley to take you home?\" I asked in a low voice. \n\n\"Hey, that's not an option,\" Ashley said as she shot me a look that conveyed just how unhappy she was with me. \n\n\"Look, these bets and the 'Whatever the Fuck I Want' cards are all in good fun but I'm not going to do anything to her that she doesn't want me to do just because you won some stupid bet,\" I said shooting Ashley back a glance of my own. \"If Lindsey wants to stay and play, that's fine, but otherwise this is over right now.\" \n\n\"But those weren't the rules,\" Ashley shouted as she sat up on the edge of the black leather couch. \n\n\"Well then, I'm changing the rules because I'm not doing another fucking thing to Lindsey until she tells me she's ok with it,\" I growled as I let go of Lindsey's soft, red hair and Ashley rose to her feet. \n\n\"I brought her here for you,\" Ashley said as she started pacing back and forth behind Lindsey. \n\n\"Then what's the problem if I decide what to do with her?\" I asked as I slid my cock back into my boxer-briefs and jeans and zipped them up. \n\n\"You specifically wanted her, now why won't you use her?\" Ashley said as she walked up behind Lindsey and I saw a true smile come across Lindsey's face for the first time. \n\n\"I'm in,\" Lindsey said with a newfound confidence in her voice. \n\n\"You're sure?\" I asked. \n\n\"Yes, sir. I'm in. I'll be your willing little slut,\" Lindsey smiled up at me from her knees. \n\n\"Are we good?\" I asked as Ashley walked back over and sat back down on the couch. \n\n\"Yes, but that was her only chance at getting out,\" Ashley said still perturbed. \n\n\"That's fine,\" I said. \n\n\"May I make a suggestion,\" Lindsey grinned. \n\n\"No!\" Ashley snapped. \n\n\"Why don't we at least hear what it is?\" I tried not to grin as I just about saw steam come out of Ashley's ears. \n\n\"Well, why don't you wear the blindfold, sir, and you can judge whether Ashley or I give you a better blowjob?\" Lindsey smiled wide and bit down on her lower lip as Ashley exploded to her feet. \n\n\"No! That is not happening! She is not in charge here,\" Ashley fumed as she walked up behind Lindsey and grabbed the handcuffs and pulled Lindsey up to her feet. \n\n\"Are you afraid of a little competition, besty?\" Lindsey giggled as Ashley rolled her sexy blue eyes and then looked up at me. \n\n\"She said she was in,\" Ashley pleaded. \"So let's just go along with the plan.\" \n\n\"I thought the plan was we were all going to have a good time,\" I said as I looked into Ashley's eyes. \"I knew Lindsey lost a bet and that we were going to use her like a naughty little slut, but it's only fun if she wants it.\" \n\n\"I do, sir,\" Lindsey grinned. \"If Ashley is afraid I'll give you better head than she can we can just forget about the competition.\" \n\n\"Alright,\" I said, \"Looks like that's settled.\" \n\n\"No, it's not,\" Ashley spit back. \"I'm not afraid of any competition, it just wasn't the plan.\" \n\n\"That's fine,\" Lindsey giggled again, \"We'll follow your plan.\" \n\n\"Fuck off,\" Ashley said as she got right up behind Lindsey so her lips were just inches from Lindsey's ear once again. \n\n\"What? I'm agreeing with you,\" Lindsey smiled. \"Or do you want to compete now?\" \n\n\"Bring it on, bitch,\" Ashley seethed, \"You want to bet anything on this competition?\" \n\n\"No, I'm in it just for the love of the game,\" Lindsey giggled as Ashley spun her body around. \n\n\"Uncuff her,\" Ashley said as she pushed Lindsey back in my direction. \n\n\"As you wish,\" I said with a grin as I took the cuffs off of Lindsey's wrists and slid them into my front jeans pocked. I then reached up and slid the sleep mask up off of Lindsey's face. It took a moment for her eyes to adjust from the darkness of the mask and the first thing she did was look out the big French doors. \n\n\"Ash, isn't that your house?\" Lindsey asked. But before Ashley could answer her, Lindsey asked another question as she spun around to me, \"So it is Mr. Jones?\" \n\n\"Hello, Lindsey,\" I smiled as my eyes locked onto her gorgeous baby blues. \n\n\"Did you know that you were the first guy she ever, you know, diddled it to?\" Lindsey asked with a shit-eating grin. \n\n\"Yes, he knows,\" Ashley sighed as she walked over next to Lindsey. \"I've told him all about it.\" \n\n\"Now so many things make sense,\" Lindsey smiled as she looked back and forth between Ashley and me. \"She's been downright giddy for weeks now.\" \n\n\"Well I'm glad I've made her happy,\" I said with a grin.. \n\n\"Oh, you have. All I've heard from this girl since she was about 14 was how she wanted to play house with you,\" Lindsey smiled and looked over at Ashley who was finally relaxing and smiling a bit herself. \n\n\"Well, I finally got my wish,\" Ashley held up her left hand to show off my wife's rings as she stuck out her tongue at Lindsey. \n\n\"Holy fuck, are those real?\" Lindsey said as she grabbed Ashley's hand for a closer look at the rings. \n\n\"Yeah, they're real,\" I said, \"They're my wife's wedding rings.\" \n\n\"You two are bad,\" Lindsey giggled as she let go of Ashley's hand. \"She always said your wife wouldn't have a chance if she made a move on you.\" \n\n\"Well, it is hard to compete with Ashley,\" I grinned. \n\n\"I love competing with Ashley,\" Lindsey beamed. \n\n\"Too bad you almost never beat me,\" Ashley countered. \n\n\"But when I do\u2014\" Lindsey smiled. \n\n\"Lindsey, you seem a lot more relaxed now that you got the blindfold off,\" I said as my eyes took both of the girls in. \n\n\"I am,\" Lindsey smiled sweetly. \"At first I wasn't really sure exactly what Ashley had in store for me.\" \n\n\"I told you exactly what was I had in store for you, bitch,\" Ashley said as she rolled her sexy blue eyes. \n\n\"Yeah, but after what you did to Sarah\u2014\" Lindsey started. \n\n\"Sarah was a bitch that got what she deserved!\" Ashley shot back. \n\n\"Do I even want to know?\" I asked as the two girls glared at each other. \n\n\"Probably not,\" Lindsey smiled as Ashley stared her down. \"Let's just say that Sarah was blindfolded too and didn't get what she thought she was getting. To be fair, I agree with Ash that she deserved it.\" \n\n\"So can we stop talking about ancient history and enjoy the rest of the day?\" Ashley asked. \n\n\"Yeah,\" Lindsey smiled, \"We can do that. Are you sure you really want to do this though? A three-way with a random is one thing but with Mr. Jones?\" \n\n\"I think you can call me Brian,\" I grinned, \"You have had my cock in your mouth and all.\" \n\n\"It's fine,\" Ashley said to Lindsey, \"It's a fantasy his bitch of a wife never let him have so I am. I'm doing it with you because I trust you and know that you can keep your pretty mouth shut.\" \n\n\"Except for when I'm sucking his cock,\" Lindsey giggled. \n\n\"You are such a bitch,\" Ashley smiled. \n\n\"That's why you love me,\" Lindsey said as she puckered her lips and threw Ashley a kiss. \n\n\"So you said something about a blowjob competition?\" I grinned. \"I hate to even ask, but is this something that you two have done before?\" \n\n\"No!\" they both looked at me with a shocked expression and answered in unison. \n\n\"Ashley is too much of a good girl for that,\" Lindsey smiled as she looked up at me with her blue eyes. \n\n\"Are you sure we're talking about the same Ashley,\" I smiled as all of the naughty things Ashley and I had done together over the previous weeks flashed through my mind. \n\n\"You've brought it out in her,\" Lindsey giggled. \n\n\"So where are we doing this competition?\" Ashley asked, \"Down here or up in the bedroom?\" \n\n\"Let's go upstairs where we can all get comfortable,\" I smiled and then reached out and took each of their hands and guided them up the stairs and into the master bedroom. When we got there I had them both sit on the bed as I knelt down and slid two large Victoria's Secret boxes from under the bed. \n\n\"What do you have there, Brian?\" Lindsey asked with a smile as she pushed her long red hair back behind her ear as she looked down at me. \n\n\"Well, these were both meant for Ashley, but since you're pretty much the same size\u2014\" \n\n\"So you're giving her my gifts now?\" Ashley said half-pouting and half-grinning. \n\n\"Don't worry, wife, I have more for you later,\" I grinned as I stood up and handed each of them a box. \n\n\"Thank you, sir,\" Lindsey said in a sexy, sweet voice as she looked up at me with her soft baby blues. \n\n\"Yes, thank you, baby,\" Ashley added as she bit down softly on her lower lip. \n\n\"To be fair, I don't remember which outfit is in which box so feel free to swap outfits if you'd like,\" I smiled. \"I'm going to go into my office while you two get yourselves ready for me. Call me when you're ready,\" I said then I walked out of the room and closed the door then walked across the hallway into my office. \n\nI'm pretty sure I meant to check on my fantasy baseball team or read my emails but I don't remember doing any of that. All I recall is sitting there at my desk and imagining what it was going to be like to fuck these two hot teenage girls at the same time. The competitive nature between Ashley and Lindsey was either going to result in something really awesome or something really bad. I was hoping for something awesome. \n\nI heard the sound of a lawnmower out in the back so I turned around to take a look out my office window and I saw Ashley's dad pushing his mower across his yard. I wondered what his reaction would be if he only knew what was happening right here almost literally in his own back yard. \n\n\"We're ready,\" I heard Ashley and Lindsey yell out simultaneously. I took a deep breath and stood up and walked to my closed bedroom door. Last night, when I opened the same door, I was met with the sight of Ashley in my wife's wedding dress. Today, I had two stunning young women dressed in sexy lingerie waiting to suck my married cock. I thought if this was a dream I hope nobody wakes me up. \n\nI reached out and turned the handle and slowly opened the door. The room was bright from the afternoon sun and the vision before me was even better than I'd imagined. Ashley and Lindsey were standing in front of my bed, both dressed in the sexy lingerie I bought with a pair of my wife's heels, and they were making out in earnest. Lindsey's long, skinny arms were around Ashley's waist pulling her close and Ashley had a handful of Lindsey's red hair wrapped around her right hand and she was pulling it back hard as her tongue shot into Lindsey's mouth. I smiled and thought to myself that I'd trained Ashley well. \n\n\"Now this,\" I smiled, \"You've done this before.\" Ashley and Lindsey looked at each other and giggled before they turned to face me. \n\n\"Yeah,\" Ashley said, \"But we were never this well dressed at the time.\" \n\n\"True,\" Lindsey added, \"We love our outfits, Mr. Jones.\" Both girls spun around slowly to give me the full impact of the sexy lingerie on their long, slender bodies. \n\n\"You both look amazing,\" I said as my eyes drank in every sexy inch of their young bodies. Both girls had their hair down and both were in the new outfits that I had given them. Lindsey was in a sexy little white pleated babydoll that had triangle lace cups and an Empire waist with a wide satin bow. It was just long enough to cover her ass so it showed off her amazing long legs perfectly in combinations with the white ankle-strap 3\" heels she was wearing. \n\nEvery curve of Ashley's slim body was accentuated perfectly by the black lace garter slip that she was wearing. The lace embellished cups pushed her firm young B-cups into the perfect amount of cleavage and the little black bow where the cups met made Ashley into the perfect present for any man. The addition of the garters and stockings made my mouth water and I smiled wide when I saw that Ashley was once again wearing my wife's pair of Steve Madden black leather platform pumps that pushed her a couple inches taller than Lindsey. \n\nI stood there for a moment with the beautiful blonde in black and a ravishing redhead in white both smiling at me. I'd seen enough old westerns to know that the guys in white rarely got along with the guys in black and I wondered if the same would hold true for women in sexy lingerie. \n\n\"Are you ready?\" Ashley asked as she took a step towards me with a big grin on her face. \n\n\"I am,\" I said as Ashley took my hand and pulled me over to the big, king-sized bed where she sat me down and then leaned in and gave me a deep, passionate kiss. \n\n\"I love you,\" Ashley whispered as she pulled back from the kiss, her blue eyes sparking just inches from mine as I reached out and put my hands on her slim hips. \n\n\"I love you too, Ashley,\" I said as our eyes stayed locked for a moment before Ashley reached back and took Lindsey's hand and pulled her to the bed where Ashley sat down on my left and Lindsey sat down on my right. \n\nI moved each of my arms around each of the girl's waists and pulled their slim bodies closer in to mine as I turned my head to the left and kissed Ashley deeply. I nibbled softly on her lower lip when I felt Lindsey's soft, warm lips on my neck and I let out a long, deep moan as I felt my cock instantly straining to be free of my jeans. \n\nI turned my head to the right and was immediately met by Lindsey's soft, red lips on mine as Ashley started softly kissing and nibbling on neck. My right hand moved up behind Lindsey's neck and I kissed her hard as her tongue slipped into my mouth. I took a handful of Lindsey's hair and I tugged it back hard as my tongue met hers with equal force causing her to moan deeply into our kiss. \n\nMy left hand slowly worked up Ashley's back and when I could I grabbed a handful of her soft, long hair as well. I used it to pull her up as I used Lindsey's hair to pull her back as I turned and kissed Ashley once again. I heard Lindsey let out a sigh as her lips moved back to my neck and her hand moved down onto my bulging crotch. \n\nI took a mental snapshot at that very moment as I had both of these amazing lingerie clad Catholic schoolgirls pressed up against my body with each of my hands entwined in their soft, long hair as they vied for my attention. Feeling both of their lips and both of their breath on my skin at the same time was a feeling like I'd never experienced before. I felt Lindsey's hand grip my cock through my jeans and then felt the addition of Ashley's hand landing on top of Lindsey's hand. \n\nI turned back to Lindsey and pulled her back up to my lips where I devoured her with hot, deep kisses. My tongue penetrated her mouth and rolled around her soft, sweet tongue and I could feel Ashley's breath on my face as she must have been watching closely as I kissed her best friend. Lindsey's hand was rubbing my cock through my jeans and I felt Ashley slide her hand under Lindsey's hand and then felt her unzipping my jeans. \n\nLindsey was a great kisser and very playful with her tongue. Ashley moved down onto her knees in front of me, my hand still firmly grasping onto her blonde hair. She unbuttoned my jeans and pulled my throbbing hard cock free of my boxer-briefs as Lindsey was playfully sucking on my lower lip as we made out. \n\n\"It looks like he's ready,\" Ashley groaned and Lindsey broke our kiss to look down at Ashley. \n\n\"Yes, it sure does,\" Lindsey giggled. \"I can't wait to get that cock back into my mouth now that I know who it belongs to.\" ",
        "Lindsey leaned in and kissed me one more time before she moved off the bed and down onto her knees next to Ashley where they both took turns kissing the head of my engorged cock. They worked in unison to get my jeans, boxer-briefs and socks off and then looked up at me with wicked grins. \n\n\"So, how does this become a contest, exactly?\" I asked with a smile. \"Do you go back and forth or does one go and then the other?\" Ashley and Lindsey looked at each other for a moment as they pondered the answer to the question. \n\n\"Well,\" Lindsey said, \"if you do one than the other that's not really fair since he's either going to cum at the end of the first and the second one will be getting him at less than his best or if he doesn't finish with the first the second will have the advantage of the first being a fluffer.\" \n\n\"That was amazingly well thought out,\" Ashley giggled, \"Do you run some kind of blowjob contest regularly?\" \n\n\"Fuck you,\" Lindsey giggled back. \n\n\"You know you want to,\" Ashley smiled. \"And you're right, your points are valid.\" \n\n\"How about this,\" I said, \"You each switch off at set intervals and I'll give a 1 to 10 rating at the end of each.\" \n\n\"That could work,\" Ashley said. \n\n\"Yeah, I agree,\" Lindsey grinned. \"Is there a bonus for the girl that makes you cum?\" \n\n\"Sure, she'll get an extra 10 to average into her score,\" I smiled. \n\n\"Deal,\" Ashley said. \n\n\"Deal,\" Lindsey agreed. \n\nAshley stood up and walked over to my nightstand where she grabbed my sleep mask from the drawer as Lindsey looked up at me with her blue eyes smoldering as she slid her soft, red lips down the full length of my hard cock and then back off again where she finished by flicking her soft tongue against my cockhead. \n\n\"Hey!\" Ashley barked as she walked back over to us, \"No cheating!\" \n\n\"Sorry,\" Lindsey grinned as she winked up at me just before Ashley slid the sleep mask over my eyes and everything went black. \n\n\"Feel free to sit there or lay back, but stay at the edge of the bed so we can switch easily,\" Ashley said. \"My phone will beep every 30 seconds and we will switch when it does. Keep your hands to yourself and give a 1 to 10 rating when you hear the tone.\" \n\n\"Got it,\" I said as I felt my cock getting even harder at the anticipation of the little competition the girls were about to embark upon. My mind raced as I tried to figure out just how I wanted to judge this contest. I wasn't sure if I'd be able to tell which girl was Ashley and which girl was Lindsey but I thought it could be fun to mess with them a bit by giving one much lower scores to start out with. \n\n\"Zero,\" I said when I heard Ashley's phone beep. \n\n\"Shut up!\" Ashley giggled, \"We're starting at the next beep.\" \n\nYou might not think 30 seconds is a long time to wait, but when your cock is throbbing and you're waiting on two sexy Catholic high school girls to take turns sucking your cock it can be damned near an eternity. I filled the time by hoping I'd be able to make this contest last as long as I possibly could before the phone beeped again. \n\nI felt a warm set of lips immediately descend on my waiting cock. They gripped my hard shaft with just the perfect amount of pressure as the soft, wet lips moved up and down my shaft once, then twice before I felt a hot tongue twirl quickly around my swollen head three times before the soft lips made a beeline to the base of my cock sending my full manhood into whichever girl's mouth it was. BEEP! \n\n\"10,\" I moaned as one set of soft, wet lips was replaced by another set that kissed my swollen head and then teased their way down the entire length of my cock before popping quickly off when I felt a hot, wet tongue playfully lick my balls as a hand slowly stroked my throbbing shaft with quick corkscrewing motions. BEEP! \n\n\"9,\" I groaned as I felt the switch happen again. This time I felt soft hair fall down over my thighs as equally soft lips slid down and took just the tip of my raging cock into a warm mouth. The tip of a warm, wet tongue flicked my cock once and then rolled around the throbbing head three times slowly before the lips slipped down and bottomed out on my shaft as the girl deep throated my cock a second time. BEEP! \n\n\"10,\" I moaned as I took a deep breath. I had no idea which girl was which as I felt a hand grab the base of my cock and a soft, warm tongue began to twirl around my cock from the tip to the base and then back up again where the girl playfully sucked on my cockhead while jerking the rest of my shaft with her hand. BEEP! \n\n\"10,\" I moaned as I bit down on my lower lip and tried to think about anything but what was happening but to no avail. The switch was made and I felt a warm mouth once again moving up and down my cock quickly and with purpose as soft, wet lips gripped my shaft as they slid up and down my flesh. I could feel hair flying as the girl bobbed her head up and down and took my entire throbbing cock deep into her throat causing me to let out a loud moan. BEEP! \n\n\"10,\" I growled through increasingly labored breaths. The sensation of both of these sensual mouths on my cock was too much to bear and I tried to think about baseball or anything else that I could to hold back the explosion but those thoughts all exited my mind the instant I felt the next set of warm lips on my cock. This time the soft lips moved down my cock painfully slowly and I tried to hold back my moans as I knew I was close. I felt fingernails slowly scratching their way down my thighs and then felt the girl's soft lips as they got to the base of my cock where she rolled her tongue around my shaft and forced my throbbing member further into her throat as her nails dug into my flesh and sent my body and my mind into overload and I cried out \"Fuck!\" as I exploded and sent what felt like a gallon of jizz down the girl's throat as she bobbed her head up and down and took every last drop that she could. BEEP! \n\n\"10,\" I said as I reached up and took off the mask and saw Ashley on her knees in front of me draining my cock as she gazed up at me with her sparkling blue eyes. Lindsey was over by the dresser smiling as well as she turned the timer app on Ashley's phone off. \n\n\"Fuck,\" I groaned, \"That was intense.\" \n\n\"Mmhmm,\" Ashley moaned as she bobbed her head up and down on my still throbbing cock one more time and made sure she had licked up any stray jizz that were remaining. \n\n\"And the hotter girl won,\" Lindsey smiled sweetly as she sat back down on the bed next to me. \n\n\"Thank you,\" Ashley smiled wide and then kissed my cock. \"You're taking losing awfully well,\" she said looking up at Lindsay. \n\n\"Of course I am,\" Lindsey smiled, \"Considering I won.\" \n\n\"What are you talking about?\" Ashley asked as she stood up in front of us. \n\n\"The best score wins, I got three 10s and you got two 10s and a 9,\" Lindsey nearly giggled. \n\n\"But I got the bonus 10 for making him cum,\" Ashley countered. \n\n\"Right, but that just gets averaged in. My average was a perfect 10 and yours was just a paltry 9.75. Sorry,\" Lindsey said in a way that there was no doubt in anyone's mind that she was not really sorry in the least. \n\n\"That's not fair, I made him cum,\" Ashley said as she looked at Lindsey and then turned to me. \"Right?\" \n\n\"I don't know about fair,\" I said, \"But from the rules that were agreed upon before we started Lindsey is right, she got the higher score.\" \n\n\"It's still bullshit!\" Ashley said as she crossed her arms in front of her chest and looked it us. \n\n\"Look,\" I said, \"As far as I'm concerned there was no loser\u2014\" \n\n\"No you don't,\" Lindsey interrupted as her hand clamped down over my mouth, \"The rules were clear. I won. Ashley lost. Not everybody gets a trophy.\" \n\n\"You are such a bitch,\" Ashley groaned as she marched into the master bathroom and slammed the door behind her. \n\n\"That was harsh,\" I looked at Lindsey and saw her smiling. \n\n\"I was just doing you a favor,\" Lindsey grinned as she leaned closer to me and whispered, \"When she comes out of there she's going to do everything she can to fuck you like you've never been fucked before for the rest of the night.\" \n\n\"She doesn't like to lose, huh?\" \n\n\"Oh, you have no idea, Mr. Jones,\" Lindsey giggled as she leaned over and kissed me hard on the mouth, \"Then again, I don't like to lose much either. Thanks for giving me all 10's.\" \n\n\"You earned them,\" I said as I took off my shirt and threw it on to the dresser before I moved back on the bed where Lindsey snuggled up next to me. She put her head on my chest and moved her long, skinny leg up over my body as she looked over at the closed bathroom door. \n\n\"I know it's none of my business, but are you really thinking of leaving your wife for Ashley?\" Lindsey asked quietly enough that there was no was Ashley could hear her from the bathroom. \n\n\"I don't know. This whole thing has just happened so fast. The first day Ashley came over and threw herself at me it was a total fantasy come true and I thought I could control it. Now I'm not so sure I ever had any control at all.\" \n\n\"You have more than you think,\" Lindsey grinned. \"You have been her fantasy man for years, remember that.\" \n\n\"I guess you're right,\" I said, \"I just have to wrap my head around being a gorgeous teen girl's fantasy.\" \n\n\"That shouldn't be too hard for you,\" Lindsey giggled as I heard the bathroom door open behind me and turned around to see Ashley standing there at the side of the bed looking at us. \n\n\"You two are looking quite cozy,\" Ashley said without much emotion on her face or in her voice. \n\n\"We were just waiting for you,\" I smiled. \"Why don't you join us?\" \n\n\"Yes, Ash, please join us,\" Lindsey said playfully and I could feel her hot breath on the back of my neck as she spoke. \"No more competitions, let's just have some fun.\" \n\n\"Come on,\" I reached out my left hand and Ashley took it and kneeled on the bed in the sexy black lingerie and heels. She lay down and stretched her body out so that she mirrored Lindsey's body on the other side of me. As I lay there in between the two amazing girls it occurred to me that the feeling I was having at that very moment was how Hugh Hefner lived most of his adult life. I could get used to it. \n\nAshley laid her head on my left shoulder and Lindsey laid hers on my right. I put my arms around each of them and pulled their young bodies in to me as they traced my chest with their French manicured fingertips. I looked into Ashley's blue eyes and then into Lindsey's and muttered, \"Are you sure you girls aren't sisters?\" \n\n\"We're closer than sisters,\" Lindsey grinned. \n\n\"True,\" Ashley giggled, \"We're bestys!\" \n\n\"Yeah, we share everything,\" Lindsey said. \n\n\"Everything?\" I asked with a smile. \n\n\"Well, almost everything,\" Ashley replied. \n\n\"Just how long does it take him to, you know, reload?\" Lindsey asked playfully. \n\n\"I'm right here, I can hear you,\" I grinned as Lindsey stuck out her tongue as she looked up at me with her soft blue eyes. \n\n\"It can take a while,\" Ashley grinned, \"He's not a young man anymore you know.\" \n\n\"Oh, really?\" I asked as my left hand found a handful of Ashley's soft blond hair and tugged it back hard. \"Is that how you want to play this?\" \n\n\"I think it is,\" Lindsey giggled, \"She can be a total bitch.\" \n\n\"So I see,\" I nodded at Lindsey. \n\n\"But, she is right; you are kind of ancient aren't you?\" Lindsey laughed out loud as she finished the sentence at the same time I grabbed a handful of her soft red hair with my right hand. \n\n\"I think it's time to take you two young sluts to school,\" I groaned as I felt my cock springing back to life as I pulled Lindsey's pretty face up to mine and kissed her hard. I felt Ashley's soft lips on my chest as she kissed my skin with quick little kisses as she moved herself up higher with each one. \n\n\"Fuck,\" Ashley moaned as I felt her hand on my now throbbing cock, \"He's hard as a rock again.\" \n\n\"I might be old, but I'm going to fuck both of you silly,\" I moaned as I pulled Ashley up to kiss her. I felt Lindsey's hand join Ashley's hand on my cock as Ashley's soft, sweet lips met mine. Lindsey snuggled herself close to me and started kissing my neck as Ashley slipped her soft, sweet tongue into my mouth. \n\nI let out a low groan as their hands worked in unison to stroke my big, thick cock with long, slow strokes. Ashley's tongue twirled circles around my tongue as Lindsey's soft lips teased my neck with sweet, soft little kisses. I was more than ready to get my cock deep into a tight, wet pussy and I just had to decide which of these two hot little schoolgirls I was going to fuck first. \n\nI pulled Ashley back by her hair and pulled Lindsey back up to me and I kissed her aggressively. I let my tongue invade her sweet mouth and I used it to wrestle her hot, wet tongue into submission as I rolled to the right and mounted Lindsey's sexy long body. I reached for the left strap of Lindey's white babydoll and moved it down over her shoulder uncovering her perfect young breast that I just devoured with kisses as I heard Lindsey and Ashley moan simultaneously. \n\nMy left hand executed the same move on the right strap of Lindsey's babydoll and then grabbed a handful of her soft red hair as my mouth enjoyed teasing Lindsey's hard pink nipples by kissing then softly and nibbling playfully on them. Lindsey moaned as I rolled my tongue around her hard nipples and I could feel her pushing her hips up into me as she searched for what she needed to satisfy her. \n\nI used my body to move in between Lindsey's long, skinny legs and I kneeled in front of her as I guided her amazing long legs up over my shoulders. Lindsey looked up at me with her lust filled eyes as I reached down and ripped the little white thong off of her body, revealing her perfectly shaved pink pussy as it waited there for my cock. \n\nI was well aware that I was ignoring Ashley; I was taking Lindsey's words to heart and testing just how much control I had over the situation. Ashley sat there on the bed next to us watching my every move as I focused all of my attention on Lindsey. \n\nI tossed the ripped thong in Ashley's direction and noticed that Lindsey did not take her eyes off mine as I moved my hard cock closer to her little pink slit that was already dripping in anticipation. I guided my cock to her clit where I teased it briefly and then used my swollen cockhead to spank her clit causing her to let out a loud moan. \n\n\"You are such a bad little slut,\" I growled as I gazed into Lindsey's blue eyes. \n\n\"Fuck me,\" Lindsey begged. \n\n\"What did you say?\" I asked with a grin as I saw Ashley kneeling up on the big bed next to us. \n\n\"I said, fuck me,\" Lindsey moaned louder and I heard Ashley let out a little squeal at the same time. I glanced in Ashley's direction and noticed she had her right hand in her panties and she was rubbing her clit as she watched us. I looked back into Lindsey's eyes and with one deep motion I buried my every inch of my hard married cock into the dripping wet Catholic high school slut causing her to let out a scream that rattled the windows. \n\n\"You like that, slut?\" I groaned as I fucked her tight, wet pussy with hard, deep strokes as she reached up and grabbed the headboard for support. \n\n\"Yes, Brian,\" Lindsey moaned as she moved her long legs down from my shoulders and pulled me on top of her as I continued fucking her hot, heavenly pussy. \n\nMy hard cock continued pummeling her tiny pussy with deep, hard fuckstrokes. Her eyes were open and searching my eyes as our bodies moved in unison as she pushed her body up to take every deep thrust of my cock. I kissed her sweet lips as I felt the heels she was wearing dig into my back. \n\n\"Yes!\" Lindsey moaned as I fucked her harder and faster. I was happy the little blowjob contest earlier had the extra bonus side effect of helping me last extra long because I was enjoying every minute of being deep inside the sexy young redhead.  \n\nI slid my cock free from Lindsey's tight, dripping cunt and her eyes begged me for more. I turned her around onto her stomach then pulled her up onto all fours. She had an amazing ass, just like Ashley's. Not too big but not too small and perfect for a good hard spanking. \n\nI teased Lindsey by letting her feel my throbbing cockhead slide up against her pussy as she was in front of me with her ass up in the air waiting. She groaned when I took my cock away from her dripping wet pussy lips and she screamed when she felt my big, strong hand come down hard on her ass. \n\n\"Fuck!\" Lindsey cried. \"I'm a bad girl.\" \n\n\"Yes, you are,\" I grinned as I looked over at Ashley who was grinning from ear to ear and was already holding my belt in her hand. \n\n\"Do you want the honors?\" I asked as I looked deep into Ashley's sparkling blue eyes. \n\n\"No, sir,\" Ashley giggled as she handed me the belt and went back to rubbing her clit as she watched me snap the belt into the proper alignment and then bring it down hard onto Lindsey's sexy white ass. \n\n\"Fuck!\" Lindsey yelled and then she screamed into the pillow as the belt came down hard on her ass again and again. \n\n\"Spank your little slut,\" Ashley giggled as her eyes took in the sight in front of her and her right hand rubbed her clit. Her hand was moving in fast little circles and she was biting down on her delicious lower lip. \n\n\"Fuck me, Mr. Jones,\" Lindsey breathlessly moaned in reply. \n\nI dropped the belt and guided my cock back to her dripping pussy, which was now more like a river as I slid my cock inside of her slowly and then started pounding her with deep, hard strokes. I reached up with my right hand and grabbed a handful of her soft, red hair and used it to pull her back with every deep thrust I was giving her. \n\n\"Remember, don't cum inside her,\" Ashley moaned as she teased her clit. \n\n\"I won't,\" I moaned as I continued to use Lindsey as my own little fuckdoll. Her soft red hair wrapped around my hand and I pulled her body crashing back into mine with each and every deep fuckstroke. Her slim body lifted up off of the bed every time I finished off a fuckstroke deep inside her tiny little pussy. \n\nI reached around with my left hand and found Lindsey's clit as I continued to pound her hard and fast with my cock. I started rubbing her clit with quick soft circles which sent her immediately into a shuttering orgasm causing her to scream with delight as her tiny little pussy cranked down hard and milked my throbbing cock. \n\n\"Yes!\" Lindsey screamed. \n\n\"Fuck!\" I moaned as I knew I was painfully close to exploding myself. I slammed my cock into Lindsey's pussy as hard as I could a few more times and then I let go of her hair and reached out and grabbed Ashley's soft blonde locks instead. I pulled Ashley down onto the bed where I quickly transferred my cock from Lindsey's pussy right into Ashley's mouth where I immediately exploded. \n\nAshley's eyes rolled back into her head and she reached up and gripped me by the shoulder as I stuffed every inch of my cock in her mouth making her taste Lindsey's juices mixed with my massive load of salty cum. Lindsey looked back at me with a smile as Ashley finally drained everything I had and came up for air coughing and gasping for breath. \n\n\"What the fuck?\" Ashley moaned as her tongue retrieved a drop of my cum that was dripping off her upper lip. \n\n\"You said not to cum in Lindsey and that you wanted all of it for yourself, right?\" I grinned. \n\n\"Yes, but\u2014\" Ashley stuttered \n\n\"Just following your rules,\" I said as I saw a big grin come across Lindsey's face before she collapsed down onto the bed. \n\n\"I just wasn't ready for that,\" Ashley said as she forced a smile. \n\n\"I'm sorry, I thought it was kind of hot,\" I grinned. \n\n\"You were right,\" Lindsey moaned out of breath with her babydoll bunched up and barely covering her sexy body, \"He is an amazing fuck.\" \n\n\"Thank you,\" I smiled. ",
        "\"I told you,\" Ashley grinned up at me, \"He's a keeper.\""
    ],
    "authorname": "TallMarriedMan",
    "tags": [
        "ashley",
        "revenge",
        "blonde",
        "schoolgirl",
        "cheating",
        "redhead",
        "handcuffs",
        "belt",
        "hair pulling",
        "blindfold"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/ashleys-revenge-ch-11"
}
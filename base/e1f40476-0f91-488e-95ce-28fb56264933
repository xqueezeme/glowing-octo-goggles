{
    "title": "Changes Ch. 07",
    "pages": [
        "Thank you for your patience! This one took so much longer than I expected. This story does move slower than a lot of you would like. Do let me know what you think. Hope you enjoy!\n\n-\n\nThe next week flew by. Heather was overwhelmed with work and had little time for anything else. On Monday she barely got to wave at Vanessa across the office floor. Her day was choc-a-bloc and Vanessa was busy all day as well. When she finally had time for lunch, she realized Vanessa had already left office for a meeting she was due at. Heather thought about dropping her a message but decided against it.\n\nThe rest of the day was a blur and when she finally left office at 7, she was exhausted. \"Fuck, it's only Monday,\" she thought moodily as she pulled into her parking space.\n\nShe'd been home for about an hour when her doorbell rang.\n\n\"Vanessa! What are you doing here?\"\n\n\"Hadn't seen you all day. And I really badly wanted to do this,\" she said, closing the door behind her as she pulled Heather in for a kiss.\n\nIt took Heather a few seconds to recover from the ambush before she responded to the kiss.\n\n\"I'm glad you stopped by,\" she giggled, nuzzling Vanessa's ear. \"Come on in,\" she said taking Vanessa's hand.\n\n\"I've got to go, honey. Need to pick Jules up. Just stopped by for a kiss.\"\n\n\"Just the one?\"\n\nVanessa chuckled, before gently kissing Heather again. \"Also, I won't be at work until Thursday.\"\n\n\"Oh, how come?\"\n\n\"I, uhh... I have a couple of meetings on the other side of town.\"\n\n\"Oh, alright,\" Heather said, trying to conceal her disappointment.\n\n\"How about dinner on Friday? I'm buying.\"\n\n\"Great! What about Jules? Is it her weekend with Joe?\"\n\n\"Mhm,\" Vanessa said, distracted by the soft skin on Heather's neck.\n\nHeather took a sharp breath, as she felt a nip on her neck. \"How about we come back here after dinner? We could continue our little game of truth.\"\n\nVanessa continued to nuzzle her neck, \"Sounds like a plan. I'll come prepared. Extra knickers and all,\" she said, dragging her lips across Heather's collar bone. \"But, for now, I've got to go.\" She stepped away and looked into Heather's eyes. \"One last kiss?\" she asked softly.\n\nHeather didn't respond, instead, she took a step towards Vanessa and claimed her lips for a soft kiss. \"Gnite,\" she whispered.\n\nVanessa nodded, \"Gnite, honey.\"\n\n--\n\nThe next two days were a drag. Just knowing Vanessa wouldn't be at work, was enough to put Heather in a sour mood. Luckily both days were busy and that coupled with gym in the morning meant Heather was knackered by the time she was home.\n\nIt did give her some time to think though. Things had changed drastically in the last couple of weeks. In her mind there was only one way to go. She wanted Vanessa, and she was alright with it. Only thing she was determined to do, at least for now was not to rush into anything.\n\nHeather had a long overdue Skype session with one of her oldest and closest friends the next evening. Laura was a no nonsense, straight to the point kinda girl and Heather loved her for it.\n\n\"Wait, let me get this clear. You have the hots for your boss. And she made the moves on you?\"\n\n\"Oh Laura. Always so crass.\" Heather said disapprovingly, shaking her head. \"And no, she didn't make the moves on me,\" Heather said, making quotation marks in the air. \"It just, you know, sort of happened.\"\n\n\"Quit bullshitting me, Heath.\" Laura was impatient, always. \"Give me the timeline, now. And none of your skimming the surface stuff. Details, woman.\"\n\nHeather groaned. She told her everything from the beginning, their dinner and the ride back in Vanessa's car, the first night stay and how just sitting next to Vanessa made her all squirmy. She also told her about that night, when Vanessa had slept with her in the guest room and the tiny kiss they'd shared.\n\n\"You guys are so hot,\" Laura said, jokingly fanning herself. \"Bet there's more, carry on Heath.\"\n\nHeather hesitated and blushed through the retelling of her dream. She obviously didn't get into the details, but Laura made sure she said enough. She went on and told her friend everything about the next morning, Vanessa's chicken soup and how absolutely adorable Jules was.\n\n\"Ok, I get it. Cute kid, move on.\" Laura said, looking at her keenly, her impatience evident.\n\nWhen Heather got to the part about the game of truth they played, Laura was completely engrossed.\n\n\"Details,\" she kept reminding Heather.\n\nAnd when Heather was done catching her friend up, they were both quiet for a bit.\n\n\"Heath?\"\n\n\"Hmm?\"\n\n\"I love you,\" Laura said softly. \"It's a lot to process, I know. Especially for someone with a teeny brain like yours,\" she laughed. \"I know you. You're struggling with the fact that you feel this way for a woman. And I know you're taking this slow to protect her. She sounds like a lovely person Heath, but you could make the Devil itself sound like someone I'd like to have a cuddle with.\"\n\nHeather smiled. \"I'm scared, Laura.\"\n\n\"Of course you are. You've had your heart broken and you've been let down by someone you loved and trusted in a way only you can. You love hard and that's one of the best things about you. Don't let that change.\"\n\nHeather nodded.\n\n\"I'll tell you what. I think the best way to treat this is like any other new relationship. I mean, c'mon, just because this is with a woman doesn't mean you need to look at it differently. You need the exact same things to be happy. Unless you guys fuck, you won't know if it's any good. So stop dillydallying!\"\n\n\"Laura!\"\n\n\"What? I'm saying it like it is. How is drawing this out going to help? I mean, sure, it's hot to not jump each other right away. But, if you want to move forward, you need to know, innit? All I'm saying is don't hold back, don't fight it. But, stop if you're uncomfortable. You hear me?\"\n\nHeather nodded. \"You make sense. I have been overthinking it. This is why I love you, you nut.\"\n\nLaura smiled, \"I'm happy for you Heath. Call me whenever alright? You don't need to deal with things that are hard by yourself.\"\n\nHeather felt so much better after the chat. She needed it and it helped her make more sense of what was happening.\n\n--\n\nThursday, Heather had lunch in Vanessa's office. She almost skipped all the way and couldn't help the goofy grin on her face when she saw Vanessa sitting at her desk.\n\n\"Happy to see me?\" Vanessa asked, softly.\n\nHeather nodded, sitting herself on the chair she had occupied on countless occasions in the past 3 years. The desk between them seemed very out of place to her today.\n\nVanessa put her hand out, evidently feeling the same about the expanse of her desk. Heather hesitantly took her hand, the tension between them crackling as their fingers interlaced.\n\n\"This is crazy,\" Heather whispered, her breath hitching as Vanessa's thumb caressed her palm.\n\n\"Come home with me tonight,\" Vanessa said huskily.\n\n\"Oh, uhh...\"\n\n\"I missed you these last couple of days. Come be my little spoon,\" Vanessa continued.\n\n\"I can't Vanessa. I'd love to, but I have two meetings in the morning. I'll make it up to you on Friday,\" Heather added playfully.\n\nVanessa chuckled, \"You will eh? Sucks that I can't talk you out of those meetings though.\"\n\nThey ate their lunch and chatted away, at times detesting and at times thankful for the table between them.\n\n\"I'll see you tomorrow,\" Heather said and then added, \"Don't forget to pack extra of what we spoke about.\"\n\nVanessa cocked her eyebrow, \"Don't worry, I'll pack extra. And if I run out, I hope you won't mind if I go without.\"\n\nHeather's eyes widened, making Vanessa laugh.\n\n\"Now get outa here before I do something stupid.\"\n\n--\n\nFriday evening was soon upon them and before she knew it, Heather was seated in an Uber with Vanessa. They'd decided to leave their cars in office.\n\n\"So, where we going?\"\n\n\"You'll see. One of my favorite restaurants. Hope you like greasy Chinese.\"\n\n\"Ooh! I love me some greasy Chinese!\"\n\nVanessa laughed, \"That's great,\" she said taking Heather's hand in hers and Heather was reminded of the car ride they'd shared just two weeks ago. How far they'd come in two short weeks.\n\nThe restaurant was a small family owned joint which seemed to have been around for ages. A little woman behind the counter greeted Vanessa with a hug and led them to a table for two in a cozy corner.\n\n\"I've been coming here since I was 10 I think.\"\n\n\"Wow. I can't imagine a 10 year old you. You've got to show me pictures someday.\"\n\nVanessa looked at her and smiled tenderly, \"I'd love to honey.\"\n\nThey had a lovely meal and a few glasses of wine each.\n\n\"You're not good for me,\" Heather groaned, sitting back in her chair, pushing her plate away. \"Pizza, greasy Chinese and obscene amounts of wine!\"\n\nVanessa laughed. \"Don't you worry, love. I bet I can give you a good workout if you'll let me,' she said with a devilish grin.\n\nHeather blushed. \"You really are bad, you know that?\"\n\n\"You've seen nothin' yet, honey. C'mon, take me to your place,\" she said, offering her a hand.\n\n--\n\n\"C'mon in,\" Heather said, unlocking the door to her apartment. \"You've never really had a look around have you? She led Vanessa in by her hand. \"Welcome to my humble abode, dear friend! This is my bedroom. And that is my bed which I'm going to share with you tonight.\"\n\nVanessa laughed. \"Looks very enticing. Go on, get in. Let me see what it looks like with you in it.\"\n\nHeather giggled. \"We should get out of these clothes first.\"\n\nVanessa cocked her eyebrow, \"Oh really? Want me to help you get out of them?\" she said taking a step towards Heather and gently pulling her in for a hug.\n\nHeather let herself be pulled in and sighed at the feel of Vanessa's body against hers. She snuggled into her neck and whispered, \"You know what I mean.\"\n\n\"Yes honey, I know what you mean. God I've wanted to do this all day,\" she said holding Heather close.\n\n\"Me too. Wanted to do this yesterday too. In your office,\" Heather said, her voice muffled against Vanessa's neck.\n\nVanessa chuckled. \"Let's change. The bed beckons.\"\n\nThey took turns changing and freshening up. Vanessa went first and by the time Heather was done, Vanessa was already in bed and under the covers.\n\n\"The pillows smell like you,\" Vanessa said softly as Heather got in.\n\n\"Do they?\"\n\n\"Mhm, get in here.\"\n\nHeather crawled in and lay down next to Vanessa and gave her a peck on the cheek. Vanessa smiled at her and in that instance Heather noticed how tired she looked.\n\n\"Hey, you alright? You look exhausted.\"\n\nVanessa sighed, \"It's been a long week.\" She hugged Heather close.\n\n\"Yea? Give me the highlights?\"\n\nVanessa sighed again. \"Well, among other less important things, we finalized the divorce this week.\"\n\n\"What?\"\n\n\"I signed the papers on Wednesday.\"\n\nHeather was shocked. First of all she didn't know that Vanessa and Joe weren't officially divorced. But that wasn't Important. \"Why didn't you tell me?\" she asked softly.\n\nVanessa shrugged. \"I wanted to. That's why I dropped by on Monday night.\"\n\n\"You weren't comfortable telling me?\" Heather asked, trying to keep the hurt from her voice.\n\n\"No, it's not that. I... I didn't want to make it a big deal.\"\n\nHeather stiffened. \"But, it is a big deal. Isn't it?\"\n\n\"Yes. It was harder that I thought it would be.\"\n\nHeather nodded.\n\n\"I mean we've been living separately for such a long time. It was just about signing a document. I don't know why we put it off for so long.\" She was quiet for a minute. \"It was sad. We had a good marriage for the most part. Making it official brought back some stuff you know. I know it was hard for Joe too.\" She was quiet for a bit before she chuckled. \"We went for coffee afterwards. And talked about old stuff and laughed our asses off. It was good.\"\n\nHeather nodded, not trusting her voice. She was hurt.\n\n\"I'm sorry I didn't tell you.\"\n\nHeather nodded and in the most casual voice she could muster, she said, \"I would've like to be there for you.\"\n\n\"I would have liked that too,\" Vanessa whispered. \"You're a good friend, Heather.\"\n\n\"I'm more than a friend, Vanessa. And you know it.\" Heather said, her voice louder.\n\nVanessa was taken aback for a second. When she looked up to meet Heather's gaze, her eyes were bright. \"Yes. You're right.\" She put her hand on Heather's cheek and whispered, \"I'm sorry.\" She then leaned in and brushed her lips against Heather's. \"I'm sorry,\" she whispered against her mouth.\n\nHeather kissed her back gently. Trying, in her own way to tell Vanessa that it was alright. They exchanged soft, comforting kisses, both trying to make each other feel better.\n\n\"One day, I'd like to hear all about him. If that's alright.\"\n\n\"Of course honey. He asked me about you over coffee the other day.\"\n\n\"What?\"\n\n\"Yea.\"\n\n\"How does he know about me?\" Heather asked, concerned.\n\nVanessa smiled. \"Jules told him about her new recruitment. And she took a couple of brownies for him too.\"\n\n\"Oh. What did you tell him?\"\n\n\"Honey, I told him the truth. That we've worked together for some time and now we've become close friends. And also that I hope we can be more than that someday.\" She was quiet for a moment. \"Would you rather I said something else?\"\n\nHeather shook her head. \"You guys are good friends, aren't ya?\"\n\nVanessa looked at Heather for a second before nodding. \"Yes. A lot of what we had, we obviously don't have anymore. But yes, we are friends and we're there for each other and we're always there for Jules.\"\n\n\"I love that,\" Heather whispered. She then looked up at Vanessa and said, \"You're a beautiful person.\"\n\n\"Oh honey,\" Vanessa said, pulling Heather closer. \"Next Saturday is Jules' birthday party. She's made an invite for you, but I thought I'd give you a heads up.\"\n\n\"Oh! Of course I'll be there. Wouldn't miss it for the world.\"\n\nIn response, she got a sloppy kiss on her forehead from Vanessa. \"So, should we start with our little game? Who gets to ask the questions this time?\"\n\n\"Vanessa! You're bloody knackered. We'll continue some other day alright? For now all you get is a cuddle and a good night's sleep.\"\n\n\"You're right, honey. I really do need that.\"\n\n--\n\nHeather was woken up with soft kisses behind her ear and a roving hand on her hip. She stirred awake, a moan escaping her lips.\n\n\"Good morning, love.\" She heard Vanessa's voice in her ear and moaned again. She turned her head, seeking Vanessa's lips, eyes still half shut.\n\nVanessa kissed her, sucking her lower lip in and running her tongue over it. Her hands bunching up Heather's night shirt, exposing her belly.\n\nHeather grunted at the contact, deepening the kiss.\n\nVanessa suddenly flipped Heather onto her back, breaking their kiss. \"Don't move,\" she instructed, straddling Heather. She attacked her neck, slipping the shirt off her shoulder to expose hidden skin. She kissed and nibbled while Heather tried her best not to squirm. Her kisses travelled across Heather's chest to the other side of her neck, her tongue spending some time tracing the swell of her breasts visible above her neckline.\n\nHeather couldn't keep still any longer. She held the back of Vanessa's head with one hand. Her other hand made its way to Vanessa's ass, feeling the firm cheek through the light material of her shorts.\n\nVanessa growled. \"Told you not to move, Heather,\" she muttered, nipping the sensitive skin.\n\n\"You're so fucking, ahhh so fuckin sexy. Ohh..Vanessa, can't keep my hands of you.\" Heather squeezed her ass cheek to make her point. She then lowered her hand, making contact with the back of Vanessa's thigh. She heard Vanessa groan. Her fingers tentatively crawled up under Vanessa's shorts, brushing the firm rise of her bare ass.\n\nVanessa froze and extricated herself from Heather's neck. \"You're playing with fire, Heather,\" she said in a deep voice.\n\nHeather, emboldened by the reaction she got from Vanessa spread her fingers, lightly cupping Vanessa's ass cheek, her eyes not leaving Vanessa's. \"I'm not stopping.\"\n\n\"Two can play at this game, love,\" Vanessa whispered. She was still straddling Heather, her weight on her knees, her thighs flush with Heather's sides where her night shirt was bunched up. She moved forward, shifting some of her weight onto her left arm, her hips rising up, giving Heather better access. She moved her right hand to Heather's cloth covered breast and flicked her thumb over her nipple. \"I'm not stopping either.\"\n\n\"Unh. Yes.\"\n\n\"Yes? You likey?\"\n\nHeather nodded, her eyes betraying her arousal as Vanessa rolled her nipple between her fingers. Her own fingers now squeezed Vanessa's butt, fanning over it, attempting to get as much of it in her hand as she could. \"I like that you're not wearing panties,\" she whispered, amazed at how soft and supple her skin was.\n\n\"Good. I like that you're not wearing a bra,\" Vanessa said, hissing as Heather's fingers brushed the inside of her cheek. \"Although I do mind that your t-shirt is in the way.\"\n\n\"Well, move it out of the way then,\" Heather said, her fingers moving closer to Vanessa's pussy.\n\nAgain, Vanessa froze, boring into Heather's eyes. \"Do you know what you're doing to me?\" she asked hoarsely.\n\nHeather was amazed at how in control she felt. \"Yes,\" she said firmly. \"I can feel your wetness.\"\n\nVanessa growled and hitched Heather's t-shirt up, revealing her breasts. \"My god, Heather,\" she whispered, \"You're... you're so beautiful.\" The aggression seemed to have left her as she stared, transfixed.\n\n\"Really?\" Heather asked in a small voice.\n\n\"Oh honey,\" Vanessa said softly, reaching out and gently cupping Heather's breasts. \"You have no idea.\" She then leaned down further and kissed Heather, passionately claiming her lips, both hands softly kneading her breasts.\n\nHeather was lost in the kiss and the sensations flowing through her as two gentle hands played with her breasts. God, no one she'd been with had ever been so gentle. Vanessa coaxed Heather's tongue out to play, her thumbs flicking and brushing her nipples. Heather was oblivious to all else when there was a loud sound from somewhere and suddenly Vanessa was not kissing her anymore. It took Heather a few seconds to realize that it was Vanessa's phone.\n\n\"...too early? Hadn't we decided on 2 in the afternoon?\"\n\nShe looked at Heather and mouthed an apology.\n\n\"Ok, you're not leaving me with an option are you Matt? Fine, I'll see you at 11,\" she said and hung up.\n\n\"I'm sorry honey,\" Vanessa said, getting back into bed and giving Heather a soft kiss. \"That was the caterer. I was supposed to meet him at two, but he is rescheduling it to eleven.\"\n\n\"Oh,\" Heather said looking at the clock. \"That gives you about 45 minutes.\"\n\nVanessa nodded, pouting. \"Not enough time to finish what we started,\" she said. \"But I tell you what, I'm going to make it up to you. Next weekend. Saturday night, I'm all yours.\"\n\nHeather giggled. \"Saturday is Jules' birthday, or did you forget?\"\n\n\"I remember. After the party. You and me, on this very bed. What say?\"\n\n\"I say, I doubt it'll happen. I bet you'll pass out in the bouncy castle before all the kids have left.\"\n\nVanessa laughed her heart melting throaty laugh. \"Have you not met my daughter? There's going to be no bouncy castle at this party.\"\n\n\"Oh damn. I like bouncy castles,\" Heather joked. \"Seriously though. It's alright if next weekend isn't possible. I completely understand\"\n\n\"Oh no honey. I'm gonna make it happen,\" Vanessa said, determinedly. And then seeing the look on Heather's face, she said, \"I see, you don't believe me do you? Let's make a wager. If I make it to your house on Saturday night, I win. If I don't, you win.\"\n\n\"Oh, alright. How much?\"\n\n\"I'm not betting money, love. If I win, you have to make yourself cum for me.\"\n\n\"Come whe... oh!\"\n\n\"And if you win, I'll cum for you. Deal?\"\n\n\"I... uh.\"\n\n\"You can lay down rules, that's your call.\"",
        "\"Rules?\"\n\n\"Yes. How much I get to help. I'll let you decide that,\" Vanessa whispered.\n\n\"Uhh... okay.\"\n\n\"Good. Tell me at work on Monday,\" Vanessa said, giving her a soft kiss. \"But for now, show me how your shower works? I'm going to be so late!\"\n\n--\n\nLater that night Heather got a message from Vanessa.\n\n\"What you doing, lover?\"\n\nShe couldn't help the silly grin as she replied. \"Lover, eh? Getting into bed. Want to join me?\"\n\nIn just a few seconds her phone buzzed again. \"Next week this time, I will join you. Be prepared to make good on your bet. But I will be thinking about you tonight.\"\n\nHeather thought for a second before replying. \"Haha, we'll see. What will you be thinking?\"\n\n\"Yes, we'll see how gorgeous you look when you're all...flushed.\" This was immediately followed by another message. \"Nothing too dirty. Spending the night at my sister's. Have to behave L\"\n\nHeather laughed. \"Aww that's too bad. Good for me, I can let my imagination go wild.\"\n\n\"Don't let it be just your imagination. I'll want to hear all about it. Sweet dreams Heather.\"\n\nSorry that the conversation was ending, Heather replied. \"Gnite, Vanessa. I can smell you on my bed.\"\n\n\"Oh hun, for tonight, pretend I'm there. I'll try and stop by for a bit tomorrow if you're at home. Sleep well.\"\n\n--\n\nVanessa didn't stop by the next day. Nor was she in office the next couple of days. But she did call Heather for a quick chat or drop a message some time during the day. The next time Heather met Vanessa was during lunch on Wednesday. She walked into her office, trying to conceal the spring in her step.\n\nVanessa smiled as she entered. \"Hey, hon. Miss me?\" she whispered.\n\n\"A little,\" Heather teased, sitting down. \"Did you miss me?\"\n\n\"You have no idea. So, two things.\" She pulled out an envelope from her bag and handed it to Heather. \"This is an invitation from Jules.\"\n\nHeather delightedly pulled out the card and read it.\n\n\"Dear Heather, please come for my 5<sup>th</sup> birthday party at 5PM on Saturday. Please don't bring me a gift just because it's my birthday. You can give me a gift when you find something I'll like. There will be grown-ups at the party so you won't get bored.\n\nSee you.\n\nJules.\n\nPS: It's at dad's place and you've never been there. Mum will help you find it. It's not hard.\"\n\nHeather looked up at Vanessa. \"Vanessa, I love her. She is such a sweetheart.\"\n\nThis earned her a dazzling smile from Vanessa. \"Mind you, very few people receive a personalized card. And she is serious about the gift.\"\n\n\"Oh no worries there. I already have something she'll love.\"\n\n\"Really? What is it? I don't have a gift for her yet!\"\n\n\"You'll find out soon,\" Heather said softly. \"What's the second thing?\"\n\n\"What? Oh yea. Our after party,\" Vanessa said with a smirk. \"You decided on the rules yet?\"\n\n\"You really want to talk about it here?\" Heather whispered, a blush creeping up her neck.\n\n\"Absolutely. There's nothing better than watching you squirm, you know. Knowing that you're getting turned on,\" Vanessa said in a casual voice, leaning back in her chair.\n\nHeather's blush was very prominent by now and she was in fact fidgeting in her chair. \"Vanessaaa...\" she whined.\n\n\"The rules, Heather,\" Vanessa pressed, mercilessly, a hint of a smile at the corner of her mouth.\n\nHeather mock glared at her. \"Fine,\" she blustered. \"First of all, no touching.\"\n\n\"I see.\"\n\n\"And whoever loses decides what clothes to keep on.\"\n\n\"Deal. So I'm gonna watch you cum from the other end of your bed. I'll take that.\"\n\n\"For that, you need to show up on Saturday night,\" Heather challenged.\n\n\"Oh, I'll be there, love.\"\n\n--\n\nOn Saturday evening Heather made her way to Joe's place, a well sized rectangular present and another much smaller present on the passenger's seat. She'd dressed casually, a flowy top and leggings, her blonde her wavier than usual thanks to the humidity.\n\nShe parked on the street outside and made her way to the house with gold and crimson balloons all along the driveway. \"Nothing like a child's birthday,\" she thought to herself. She slipped the smaller gift into her bag before making her way in though the ajar door.\n\nThere were some adults hanging around inside but she didn't recognize any of them. Heather made her way towards the sounds of squealing children and found herself in the backyard. There were about twenty people in small groups. The kids were playing some game with a ball and a few baskets placed around them. She looked around and spotted Jules standing inside one of the baskets squealing as another boy ran with the ball in his hand dodging some of the other kids.\n\n\"Hi, you must be Heather,\" said a deep voice behind her. She spun around to see a warm looking face smiling at her. It was Joe. He was so tall!\n\n\"Hi, yes,\" she said extending her hand for a shake. \"You must be Joe, nice to meet you.\"\n\n\"Likewise,\" he said, taking her hang more gently than she expected. \"I suggest you hold onto the gift instead of placing it at the table. Give it to Jules when their game is over.\" He squinted over at the kids and shrugged. \"I have no idea what they're playing though.\"\n\nHeather laughed. \"Yea, I was trying to figure that out. Jules is in a basket!\"\n\n\"We'll find out soon enough, I bet. Can I get you a drink?\"\n\n\"Sure,\" Heather said, following Joe back into the house.\n\n\"Beer, wine, something stronger?\"\n\n\"Wine should be fine,\" she said as they entered the kitchen. That's when Heather saw Vanessa. She was in a lovely, summery dress and was in the middle of a conversation with another lady. She looked over as Joe and Heather entered and gave her the most beautiful smile. She excused herself from the conversation and walked up to them.\n\n\"I see you've met Heather,\" she said softly, addressing Joe, but her eyes didn't leave Heather. \"You look lovely,\" she said, giving her a kiss on the cheek before turning her attention to Joe. \"I think the boys have run through all the beer outside. Can you take these out before they cause a riot?\" she said calmly.\n\n\"Sure thing,\" he said, nodding. \"It was nice meeting you, Heather. I'll leave you in Vanessa's hands, she'll get you that drink,\" he said jovially, hoisting several packs of beer out to the yard.\n\nAlone in the kitchen, Vanessa took a small step towards Heather and gave her a kiss, before stepping back. \"What you drinking, honey?\" she whispered.\n\n\"Wine's alright,\" Heather whispered back, her pulse picking up.\n\nVanessa got a fresh glass and placed it on the counter. She then reached around Heather to get the bottle of wine on the counter behind her, taking the chance to brush up against her side and linger longer than necessary.\n\nHeather gasped at the unexpected closeness, her fingers brushing against Vanessa's waist. When she drew away to fill the glass, Heather noticed the hint of a grin and knew she was enjoying this. \"Oh you're evil,\" she muttered.\n\n\"Can't help myself around you, Heather,\" Vanessa said, handing over the glass, no longer trying to conceal her grin. \"What's in this?\" she asked, pointing to present Heather had put on the counter.\n\n\"Jules' gift,\" Heather said, taking a sip of her wine.\n\n\"C'mon, tell me what it is,\" Vanessa pleaded.\n\nIt was now Heather's turn to grin. \"You can see when she opens it,\" she teased as Vanessa mock pouted. \"Awww, hang on a sec,\" Heather said, rummaging in her bag for the smaller gift. She fished it out and handed it to Vanessa. \"Here you go.\"\n\nVanessa looked at her quizzically. \"What is this? Two gifts? Don't you go spoiling my kid!\" she laughed.\n\n\"Open it.\"\n\n\"What? No! I'll let Jules do that.\"\n\nHeather smiled. \"Vanessa. This one's for you. Go on, open it.\"\n\nVanessa's eyes softened. \"For me? It's not my birthday, love,\" she said, making to take the gift wrap off.\n\n\"I know. But five years ago, on this day, you became a mum,\" Heather said softly as Vanessa opened the small box. It was a pale, rough cut amethyst. Vanessa picked it up and held it in her hand, quietly looking at it. When she looked up at Heather, her eyes shone with emotion.\n\n\"Heather, I...\" she cleared her throat. \"Come with me,\" she demanded, taking Heather's hand. She opened a door and led them in. Locking it behind them, she pushed Heather up against the door.\n\n\"Vanessa, uh..what are you doing?\"\n\n\"Shhh,\" Vanessa said, fire in her eyes. She leaned in and kissed Heather hard, overwhelming her. Her hand buried itself in Heather's hair as she plundered her mouth, drawing a ragged moan from her. Vanessa's other hand found Heather's breast and gently fondled it, tweaking her nipple.\n\n\"Oh god, Vanessa stop,\" Heather rasped as Vanessa moved her attention to her neck. \"Vanessa! It's the loo! You've locked us in the toilet!\" she exclaimed, suddenly realizing where they were and pushing Vanessa away. Vanessa's eyes were still intense and she looked away, not meeting Heather's gaze.\"\n\nHeather sighed before softly kissing Vanessa. \"Hey. It's alright, c'mere,\" she said, pulling Vanessa in for a hug, hoping to calm her down. Once Vanessa relaxed in her arms, she gave her another soft kiss before adding, cheekily. \"Just thought I'd get you something, to you know, remind you of the hours of labour you had to go through all those years back. You can thank me for it later.\" That seemed to do the trick and Vanessa chuckled. \"For now, get us out of here before someone walks in!\"\n\nThey managed to rejoin the party without further incident. This time, Jules spotted Heather and came running up to her.\n\n\"Heather! You came!\"\n\n\"Of course, honey,\" she bent down and gave Jules a tight hug before handing her the gift. \"Happy Birthday, Jules.\"\n\nJules shyly accepted the gift. \"Did mum give you the invitation?\"\n\n\"Mhm, I loved it. But I'd already got you this before. And I think it's something you'll like.\"\n\n\"Really?\" Jules asked, her eyes lighting up. \"Can I open it now?\"\n\n\"Oh, I don't know honey. Maybe we should ask your mum?\"\n\nJules pouted, \"I'll just put it with the rest of the presents. Thank you Heather,\" she said hugging Heather around her legs.\n\n\"Let me know how you like it, okay?\"\n\nHeather spent the rest of the evening chatting with some friends she'd been introduced to. Joe came and checked on her a couple of time, making sure she was comfortable. She also caught Vanessa's eye several times during the evening. She limited her wine intake to just 2 glasses since she had to drive back. After Jules cut the cake, Heather made to leave. She walked up to Vanessa who was talking to the caterer about something and touched her arm to get her attention.\n\n\"Hey, Heather.\"\n\n\"Hey you. I should get going.\"\n\n\"Alright honey. I'll see you later tonight,\" she said with a grin, giving her a quick hug.\n\n\"We'll see,\" Heather said, walking towards the door. She said bye to Joe on her way out and thanked him for a lovely evening. He was warm and wished her well.\n\nOn her drive home Heather replayed parts from the party. Where was Vanessa's sister? Was she there? Why did Vanessa not introduce them? It would be odd if she weren't at the party. Heather frowned at the thought. It was almost 8 by the time she was home. She fixed herself a light meal, having eaten some stuff at the party. She also poured herself a glass of wine and settled down in front of the telly. She was sure Vanessa wouldn't make it and at some point later in the night, she dozed off on the couch.\n\n--`\n\nCouple of hours later the incessant ringing of her doorbell made Heather sit up suddenly. What the hell was that? She checked her phone. Quarter past one, she registered sleepily. She was just going to settle back on the couch when the doorbell rang again. Now alarmed, she made her way to the door.\n\n\"Who is it?\"\n\n\"Open up Heather!\" said Vanessa's voice from the other side.\n\nHeather opened the door in a panic to see Vanessa holding herself up against the doorframe, a triumphant look on her face. The smell of alcohol hit Heather right in the face and she frowned.\n\n\"Come on in,\" she said, alarmed to find that Vanessa took a second to stabilize herself before gingerly walking in. \"Vanessa. I know you promised and made a bet and whatever, but you better not have driven here like this,\" she said seriously\n\nVanessa sat down on the couch which was still warm from where Heather had fallen asleep. She patted the seat, indicating that Heather sit next to her.\n\nHeather sighed and sat down, \"How long have you been waiting outside? Why didn't you call?\"\n\n\"Heather, shhh...\" Vanessa place a finger on Heather's lips. \"I'll answer all your questions. Can I have a kiss first?\" She moved in and lightly brushed her lips against Heather's before sucking in her lower lip. \"Thank you for the amethyst,\" she whispered against Heather's mouth, before hugging her. \"You remembered. It's the nicest thing anyone's done for me in a long time.\"\n\nHeather hugged Vanessa back, not saying anything.\n\n\"And Jules was over the moon. An inscribed cornerstone for when she builds her fort? You're an angel,\" she said slurring slightly. \"She wants to meet you tomorrow. Thank you in person.\"\n\n\"I'm glad she liked it,\" Heather said softly, still slightly annoyed that Vanessa may have driven in this condition.\n\nVanessa obviously noticed and grinned. \"Now, to your questions. I didn't drive, took an Uber. My phone died,\" she said pointing at her bag, \"So I couldn't call. Can I use your phone to call Joe? Need to let him know I didn't pass out in the cab,\" she joked.\n\nHeather visibly relaxed. \"Good. I won't have to kill you for driving drunk,\" she said handing her phone over to Vanessa and leaving the room to give her some privacy but before she knew it Vanessa had sneaked up on her from behind.\n\n\"Where d'yoo think you're going?\" she whispered in Heather's ear. \"Time to make good on the bet.\"\n\nHeather laughed as she turned around to face her. \"You're crazy, you know that? Let's get you to bed, c'mon.\"\n\n\"Heyyy, no way!\" Vanessa protested.\n\nAgain Heather laughed, amused at Vanessa's drunkenness. \"Alright, let's get you changed first, okay?\"\n\n\"Mhm. But I don't have a change,\" Vanessa shrugged.\n\n\"I'll get you something of mine,\" Heather said, extricating herself from Vanessa's grip.\n\n\"Heather? Can I have the long tee you were wearing when I brought soup?\"\n\n\"Which one?\"\n\n\"It's grey, about yea long,\" she said indicating at mid-thigh, \"And it slips off your shoulder sometimes,\" she said with a childlike grin.\n\nAgain, Heather laughed before planting a kiss on her nose. \"Yes you can have that one. Why don't you go wash up and I'll get you the tee?\"\n\n\"Okay,\" Vanessa said obediently, cautiously making her way to the toilet, not bothering to lock the door behind her. \"Heather?\"\n\n\"Yea?\"\n\n\"D'yoo 'ave an extra toothbrush?\"\n\n\"Ummm, I don't think I do. You can uh... use mine, if you don't mind,\" Heather yelled from outside.\n\nThe bathroom door opened and Vanessa stumbled out.\n\n\"Whoa whoa, easy there.\"\n\n\"You'd let me use your toothbrush?\" Vanessa said softly, as Heather helped steady her.\n\n\"Yea. Go on.\"\n\nVanessa looked at her quietly for a second, her expression unreadable before she slowly turned and walked back into the toilet.\n\nHeather was unsure if she should follow her in, but she did. \"Hey, you okay?\"\n\nVanessa nodded. \"I'll be out in a minute.\"\n\nWhen Vanessa emerged she looked more composed. Her hair was in a bun away from her face and she tasted clean when she kissed Heather. \"Help me get changed?\" she asked, her eyes twinkling.\n\nHeather chuckled, \"C'mon, let's get this dress off you.\" She bunched it up around Vanessa's waist, her knuckles grazing the curves of her hips before settling against her bare waist. \"Hands up in the air,\" she instructed before taking the dress off Vanessa in one swift motion.\n\n\"Oh...\" She couldn't help but exclaim. Vanessa was in a simple white bra and nude panties. The white against the caramel of her skin was exquisite. \"You're perfect,\" she whispered, dragging her lips across Vanessa's collarbone, her hands resting on the curve of her waist. \"Kiss me.\"\n\nVanessa obliged, softly kissing Heather before pulling away. \"Tonight isn't about me,\" she whispered, indicating to the tee. \"It's about you,\" she said putting it on. \"Let's get into bed.\"\n\n\"Umm, don't you want to, you know take off your bra and panties? You will be more comfortable that way,\" Heather said, trying to distract Vanessa from her single minded agenda.\n\nVanessa cocked her eyebrows before reaching back to unhook her bra and slide it off under the tee. She then reached in to take her panties off but struggled with her balance.\n\n\"Here, let me help,\" Heather said stepping in. She bent down in front of Vanessa, looking up into her eyes. She reached under the tee and hooked her fingers in the panties before pulling them down to her thighs. \"Sit,\" she instructed before pulling them off her legs in one quick motion. She couldn't ignore the smell that greeted her and she did all she could to not moan out. To her credit, she didn't break eye contact with Vanessa for even a second. She cleared her throat. \"I'm going to put these in the laundry basket for now, okay?\"\n\nVanessa nodded.\n\n\"Make yourself comfortable, I'll be back in a minute.\"\n\nHeather crawled into bed, sighing as she cuddled Vanessa. \"You always feel so good,\" she whispered.\n\n\"You're dawdling, love. I'm not letting you off the hook.\"\n\nHeather sighed. \"Vanessa, honey, it's late.\"\n\n\"Hey! You called me honey! You never call me honey,\" Vanessa chimed, making Heather laugh.\n\n\"Would you like me to call you honey more often?\"\n\n\"Hell yea!\"\n\nAgain Heather chuckled. \"But what if I end up calling you honey in front of other people, or at work?\"\n\n\"A'on't care.\"\n\n\"Oh you're so off your face!\" Heather laughed. \"Look,\" she said softly, getting Vanessa's attention, \"If I, umm you know do what we agreed on now, there's a chance you may not remember all of it in the morning.\"\n\nVanessa's eyes widened, but she didn't say anything.\n\nHeather silently whooped, before continuing. \"Bet you wouldn't want that. I think we should sleep now, and I promise I'll make good on it tomorrow.\"\n\nVanessa nodded pensively. \"Wouldn't want to not remember. You're right.\" Then after a moments silence, she asked. \"But can I touch you?\"\n\nHeather smiled and nodded.\n\n\"As much as I want?\"\n\n\"Oh Vanessa, yes, please, as much as you want,\" she said, kissing her. \"Let me get the light first.\"\n\nThey lay in the dark facing each other, reveling in the feel of warm skin and soft touches as they kissed. Vanessa's tee had ridden up and Heather could feel the crinkliness of her pubic hair against her knee. \"Ohh god,\" she sighed as Vanessa's finger dipped into her bellybutton, \"Ahh..\" Her fingers found the swell of Vanessa's breast and busied themselves in the pliant flesh, teasing her nipple through the thin material.\n\n\"No, touch me,\" Vanessa whispered, guiding Heather's hand under her tee.\n\nHeather moaned at the feel of her warm breast in her hand. \"Oh, Vanessa,\" she whispered, gently kneading, familiarizing herself with the puckered flesh of her nipple. She found Vanessa's lips and kissed her deeply while fondling her.\n\nVanessa's tee had risen up around her waist, leaving her naked below that. Heather mesmerized by the smooth flesh of her hips and kept up the tantalizing caresses, her knee jammed against her middle. They touched and kissed and explored till exhaustion and drunkenness got the better of them. They fell asleep in a tangle of limbs, lips just a hairs breath from each other.\n\n--\n\n\"Heather,\" Vanessa whispered, \"Wake up.\" She trailed lazy patterns on her tummy, tracing her ribs. \"Hey lazy bum.\"\n\nHeather didn't stir.",
        "Vanessa started at Heather's neck, laying soft kisses and trailing her tongue over her collarbone. Moving down her body, she place a kiss between her breasts still covered by her night shirt and reached her exposed belly. She lavished the soft skin with wet, warm kisses, tasting her. Heather moaned, still asleep. Vanessa's tongue danced across her ribs, finally penetrating her consciousness.\n\n\"Oh,\" she muttered, her hand finding the back of Vanessa's head.\n\nVanessa continued to move lower, her tongues teasingly circling her belly button. Heather moaned, writhing under her. \"Unh, yes.\"\n\n\"Wake up, honey,\" she whispered.\n\n\"Hmmm?\"\n\n\"It's morning, I'm priming you.\"\n\n\"Mmmornin,\" Heather mumbled. \"Ahhh.. ohh god,\" she exclaimed as Vanessa's tongue trailed the waistband of her shorts. \"I'm up, I'm up.\"\n\n\"Good,\" Vanessa said, moving away to the other corner of the bed. \"I'm going to be here.\"\n\nHeather's eyes widened as she comprehended what Vanessa meant.\n\n\"Yes hon, it's time.\"\n\n--\n\nHeather sat there, masturbating furiously. Her shorts were unbuttoned but she had limited room. Her eyes were screwed shut and the room was so quiet, she could hear herself breath. She felt a quiver and slowed down, running two fingers along the length of her dripping slit, breathing hard. God, last night and Vanessa's ministration when she woke her up had definitely primed her for this. She knew Vanessa was sitting right across from her, watching. Her pussy clenched at the thought. She was masturbating for Vanessa. She had no idea how she'd gotten herself in this situation.\n\nShe opened her eyes, and as she expected, Vanessa was sitting there, her eyes riveted to where the action was. Her lips were parted and she seemed oblivious to Heather's gaze.\n\nHeather picked up the pace again. She place a finger on either side of her clit, rubbing hard and quick, with an occasional swipe across her sensitive nub. She saw Vanessa inhale sharply, her mind obviously visualizing what her shorts covered.\n\n\"V'nessa,\" she said breathlessly. \"Look at me. Yes, look at me,\" she moaned. Vanessa's hooded eyes bore into Heather's as she struggled to not jump in. The intensity in those eyes, darker than ever, made Heather's breath catch. \"D'you like what you see? You like watching me?\" Heather whispered, her hips rising up off the bed as she continued to stroke herself.\n\n\"Fuck Heather. Don't. I'm barely..\"\n\n\"Talk dirty to me V'nessa,\" she breathed. \"Come closer, please,\" she crooned, her voice tinted with her arousal.\n\nThe struggle was eminent on her face as she fidgeted where she sat. \"But, you said no touching,\" she said hoarsely.\n\n\"Just come here and lie down next to me,\" she said impatiently. \"Want to feel you. Now,\" she demanded as her fingers now made circles.\n\n\"Heather, no, I\"\n\n\"Vanessa,\" Heather said louder. \"I need you to come here.\" And then in her most imploring voice, she rasped an irresistible \"Please.\"\n\nThat did it. Vanessa growled and in one swift motion she was lying down next to Heather, her head buried in her neck as she asked, \"Tell me what you need, Heather. Oh God your smell,\" she moaned, taking a deep whiff behind her ear before nipping the skin there.\n\n\"Ah yes. Vanessa! Unh...my god.\" She squirmed as Vanessa's tongue lashed at the sensitive spot behind her ear before sucking her earlobe into her hot, wet mouth.\n\n\"Fucking tell me Heather.\"\n\nHeather groaned before pulling her hand out of her shorts and yanking them off. Vanessa saw her pruney fingers, glistening in the light and groaned. \"Oh my god. I can smell you honey,\" she whispered, her eyes seeking out Heather's.\n\n\"Yes, look at me,\" Heather said, her right hand finding its way back into her panties, making her jerk. She scooted her legs up, making room for her other hand. She moved her panty aside and dipped her middle and ring finger into her wet folds. \"Ohhhh. Oh fuck. You have no idea how wet...ahhh.\" She withdrew her fingers before plunging them in again.\n\n\"Oh, I can hear it. I can hear how wet you are.\"\n\n\"Do you want me to cum? You want me to come for you?\" she asked, her voice a hoarse whisper.\n\n\"Fuck yes. Cum for me baby.\"\n\nHeather was going full throttle. Her fingers alternating between deep, hard thrusts and curling up and pumping lightly against her g-spot. Her other hand stroking her clit, increasing the pressure as she got closer. \"Tell me. Tell me how much you want me to cum for you.\"\n\nVanessa's head was buried in Heather's hair, her mouth hovering over her ear. With her hand she held Heather's head. Her lower body, flush against Heather's hip could feel every thrust and quiver that ran through her. \"Oh honey. I need you to make yourself cum. I want you to make a mess on your bed,\" she whispered in her ear. \"Oh I can hear you fucking yourself. Is your pussy clenching?\"\n\n\"Yes! I'm gonna make a mess on my bed V'nessa,\" she mewled.\n\n\"I can hear the squelchy sounds baby. I can smell you. It's making my mouth water.\" She looked up, before continuing, \"I can't wait to taste you.\"\n\n\"Put your fingers in my mouth.\"\n\n\"What?\"\n\n\"Show me how you'd fuck me.\"\n\nVanessa placed two fingers on Heather's lips which she instantly sucked in, making Vanessa moan. Vanessa withdrew her fingers a bit, against the suction of her mouth before allowing them to be drawn in again. Heather's puckered lips wrapped around her fingers as she rhythmically pumped in and out of her mouth had Vanessa rocking her pelvis against Heather. It was ridiculously erotic and they were both so into it that neither was aware of the sounds escaping them.\n\n\"You like how I fuck you? You'd like my fingers in your tight little pussy?\"\n\nHeather bobbed her head, flicking her tongue against the fingers in her mouth as they gently rocked in and out, imitating a teasing finger fuck.\n\n\"God I'd fuck you so much harder. You have no idea.\" She pulled her fingers out with a plop, leaving a trail of saliva across her chin. Vanessa's fingers worked down her neck, cool against the hot skin and continued lower. \"You know what I miss the most when both my hands are occupied with my pussy?\" she asked, fire in her eyes. \"I miss playing with my tits,\" she said, her hand moving even lower.\n\n\"V'nessa.\"\n\n\"I love how you say my name when you're turned on Heather,\" she said, her fingers leaving a wet print on the cloth where they caressed Heather's breast, grazing against her sensitive nipple before rolling it between them.\n\n\"Unh, holy...\" Heather's hips lifted off the bed, her eyes screwed shut, focusing on the sensations flowing through her. Vanessa rolled and pinched before plucking at the engorged nipple. \"Oh my god, V'nessa, ohhh. Kiss me. Kiss me please.\"\n\nVanessa didn't have to be told twice. She swooped down and roughly claimed Heather's lips. She pressed Heather into the bed, her fingers not leaving her now tormented nipple as she dominated the kiss. She plundered Heather's mouth, devouring the moans that escaped her as the pressure inside her built slowly, coiling deep in the pit of her belly. Heather's broke the kiss, her breaths coming in deep gasps.\n\nShe turned and buried her face in Vanessa's chest, her nose brushing the swell of her breasts. Heather's lips found the soft skin which peeked out over her t-shirt. She groaned as she pressed her face into the supple flesh.\n\nVanessa held Heather to her. \"You're close. Let it go honey.\"\n\nHeather groaned against her breasts. \"Give it to me,\" she panted, rubbing her nose over Vanessa's protruding nipple before taking it into her mouth, wetting the flimsy cotton of the worn out t-shirt. Vanessa cried out her surprise as Heather rapidly approached the point of no return. Her hips were in the air, her back arched as her toes dug into the bed, desperate to anchor herself to something as the wave approached. \"I'm gonna cum, V'nessa. Please. Give it to me,\" she rasped, desperate.\n\nVanessa pulled down the neck of the borrowed tee, freeing her right breast. \"Take it,\" she whispered, guiding Heather to her engorged nipple. Heather latched on, Vanessa's hand holding her head in place like she would a baby. \"Cum for me honey,\" she moaned as Heather tipped over the edge, a wild sound escaping her mouth. Spasm after spasm shook through her as she came with Vanessa's nipple in her mouth. The wet sounds from her pussy louder than ever as it clenched and spasmed around her fingers. For her ears though, all sound was blocked out as she rode the wave, her face scrunched up, her mouth suckling. When her body couldn't take any more, with a loud grunt she landed back onto the bed, her legs shutting close, trapping her hands. Vanessa's nipple left her mouth with a plop as she drew a shuddering breath. She lay still, breathing hard while small tremors coursed through her.\n\nVanessa lay there, stroking her hair, her right breast still hanging free, its tip shiny with saliva. She waited patiently for Heather to recover, but her eyes betrayed the intensity of what they had just gone through.\n\nAfter a minute or so Heather stirred, moving her hand from between her legs, sighing softly. Her fingers were wet, clear in places and streaked white in others. She looked up at Vanessa shyly. \"I made such a mess.\"\n\nVanessa smiled. \"Nothing you can't fix,\" she said softly. \"Lick it off.\"\n\n\"Huh?\"\n\n\"Go on. I want to watch you lick your fingers clean.\"\n\nHeather locked eyes with Vanessa as she brought her fingers to her mouth. She sucked each finger in, cleaning it, before using her tongue to reach parts she'd missed. Vanessa's gaze flickered between her mouth and eyes.\n\n\"Stick your tongue out,\" Vanessa commanded. She then straddled Heather's torso, her weight on her knees. She moved forward till her right breast was hanging above Heather's mouth. She lowered herself, the underside of her breast, just below her nipple coming in contact with Heather's tongue.\n\nHeather made to close her mouth around the proffered teat, but Vanessa stopped her. \"Un un. Keep it sticking out,\" she instructed. She then dragged her breast down the length of Heather's tongue until the tip flicked her nipple as it came to rest on her chin. Vanessa hissed and repeated the process a couple of more times before instructing Heather to suck it in.\n\nShe hissed, \"You have no idea how sexy you are,\" rolling off Heather and coming to lie beside her. They lay like that, half dressed, limbs entangled, basking in Heather's afterglow.\n\n\"Vanessa?\" Heather said softly.\n\n\"Hmm?\"\n\n\"That was...I've never cum like that. I'm glad I lost the bet.\"\n\nVanessa gave Heather a soft kiss. \"It was quite something. So much for no touching though,\" she chuckled.\n\nHeather grinned and snuggled closer to Vanessa. She held on tight as emotion threatened to overwhelm her. It had been intense. She'd given up a part of herself, and it wasn't easy to wrap her head around that. She felt raw and vulnerable.\n\nVanessa held her close, \"Honey, c'mere. It's alright, let it go.\" Heather sniffled, clutching onto Vanessa. \"It's alright honey. It's alright to feel how you're feeling. Let it out.\"\n\nOnce Heather was all cried out, she looked up at Vanessa, her face blotchy and tear streaked. \"Vanessa,\" she said in a small voice. \"You're so beautiful.\" This won her a heartbreaking smile which brought her close to tears once again. Steadying herself with a deep breath, she continued. \"I never thought we'd be here. And I think I'm in over my head.\"\n\nVanessa gave her a light, reassuring squeeze before Heather continued. \"After what happened with Adam, I... it's difficult for me. I've let you in and it makes me feel like I don't have control, you know? It's scary. I worked so hard to get over that relationship and it took so much out of me. I don't think I could go through that again. But I also want to give myself to this... to you. Do you know what I mean?\"\n\n\"Of course. Anyone who's ever had their heart broken knows, honey. But you always love again, and that makes it worth it,\" she said, kissing Heather on the forehead.\n\nHeather was quiet for a bit. Laura had said something along these lines too. \"Vanessa?\"\n\n\"Hmm?\"\n\n\"I think I could fall in love with you.\"\n\nVanessa smiled and looked into her eyes. \"I'll wait till you do,' she said and kissed Heather softly, with so much tenderness that tears threatened her once more.\n\n\"What if I break your heart?\"\n\n\"What if you don't?\"\n\n\"I don't ever want to break your heart,\" Heather said softly.\n\nVanessa chuckled, \"I know. But, if you have to, I'll forgive you.\"\n\n\"Really?\"\n\n\"Yes Heather, there's nothing that I wouldn't do,\" she said. \"I want you to listen to a song with me,\" she said abruptly, reaching out to fetch her earphones. She settled down next to Heather and offered her one earphone, putting the other one in her own ear.\n\nHeather watched closely as Vanessa fiddled with her phone, looking for the song she wanted to play. \"'Ang on!\" she said with a twang. \"You're playing me Adele? I haven't broken your heart yet!\"\n\nVanessa chuckled, \"Just listen,\" she said, stealing a kiss before playing Make You Feel My Love.\n\nHeather took Vanessa's hand in hers, interlacing their fingers as the song began. The lyrics hit home and she knew why Vanessa wanted her to hear it.\n\n<br> I know you haven't made your mind up yet,<br> But I will never do you wrong.<br> I've known it from the moment that we met,<br> No doubt in my mind where you belong.\n\n`Heather looked at Vanessa and her eyes broke her heart. There was so much hurt and hope and love. She drew her in and kissed her slow and deep, trying to tell her how she felt where words failed her. \"You love me don't you?\" she asked softly.\n\n\"I love you, Heather.\"\n\nThe look on Vanessa's face, like she'd surrendered herself to her heart. After everything she'd been through, how? How was she so willing to submit to her feelings?\n\n<br> The winds of change are blowing wild and free,<br> You ain't seen nothing like me yet.\n\n\"I think I love you too.\"\n\nVanessa squeezed her hand, \"Nothing can make me happier. I'll wait to hear you say it again when you're sure.\"\n\nI could make you happy, make your dreams come true.<br> Nothing that I wouldn't do.<br> Go to the ends of the Earth for you,<br> To make you feel my love<br>\n\n--\n\nCopyright for the quoted lyrics to \"Make You Feel My Love\" lies with Bob Dylan. I claim no ownership of the same. "
    ],
    "authorname": "Akshi",
    "tags": [
        "lesbian romance",
        "bisexual",
        "boss",
        "first time",
        "masturbation",
        "romance"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/changes-ch-07-3"
}
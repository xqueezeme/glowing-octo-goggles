{
    "title": "All Because of a Rusted Swing Set",
    "pages": [
        "The place was perfect. Rory Harrison's real estate agent had found, in a few days, what he had spent the last month searching for. It sat at the far end of a quiet neighborhood street that was mostly filled with families. She had a smile on her pretty, oval face as she showed him around the outside of the house. She was wearing heels and a tight skirt that emphasized her shapely ass. Rory found his eyes wandering to it as she walked ahead of him but he ran his fingers through his thick brown hair and shook his head. It had been a while since he had last got laid but he knew she was married. The first thing he noticed when they shook hands in the driveway was her ring. He shook the dirty thoughts from his mind as she gestured towards the treeline that butted up to his backyard. \n\n\"As you can see, this property backs up to this patch of woods that will provide a nice bit of privacy during the summer months unless you want to put a privacy fence but that would hide the fall foliage and I guess that you already know how breathtaking it can be around this area,\" She said as Rory walked over to an old rusty swing set.\n\nHe walked around it and noticed that while the set itself looked very old, the chain and solitary seat looked to be maybe a year old. \n\n\"Ah that, I know it's an eyesore and I was told it was supposed to have been taken care of by now but I guess it's on someone's to-do list,\" the agent said as she joined him. \n\n\"I thought the previous owner was an elderly gentleman, so why the swing set?\" Rory asked. \n\n\"Mr. Gunderson is in his eighties so I have no idea why he'd still have this up. Nostalgia maybe. Does it really matter?\" She asked him as she looked at him curiously. \n\n\"I suppose not, I was just curious is all. I thought there might be a story in it,\" Rory stated then nodded towards the house. \"Shall we see the rest of the place?\" \n\n\"Absolutely,\" She answered as she started walking towards the house. \"You're going to love the kitchen!\" \n\nShe was right. The kitchen was spacious with a workable island and a cozy little breakfast nook that looked out over the back yard. It, along with the privacy, was the major selling points of the house. \n\n\"Once that eyesore out there is gone, you'll have an amazing view of the woods,\" She enthused as she swept her arm at the window as those models do on game shows. \n\nRory nodded and allowed her to direct him through the rest of the house. \n\n\"This will make a nice office,\" she stated as she showed him the small guest bedroom at the top of the stairs. \n\nRory nodded as he sized up the room. He had other ideas for it but didn't feel the need to disclose them to her. An office was the last thing that he wanted in this place. Too many bad memories associated with his previous home office. \n\n\"Mr. Harrison, if you don't mind my asking you a question,\" She asked as they walked down the hallway. \n\n\"When is the next Tyler Hart novel coming out?\" Rory asked. \n\n\"I guess you get that a lot.\" She laughed. \n\n\"Not as much as you'd imagine,\" Rory chuckled. \n\nShe looked confused for a moment then shook her head. \n\n\"Ah yes, the pen name,\" She said as she fluffed her raven colored curls. \"I forgot all about that.\" \n\n\"My agent loves to advertise but I'm a bit more private,\" Rory said as they looked into the master bedroom. \"That said, I'm thrilled that the series has become a hit.\" \n\n\"It's been such a great series so far,\" She enthused while trying her best not to go all fangirl. \"A Broken Hart was so sad when Tyler was betrayed and left for dead! That cliffhanger you left us with has me dying for the next book!\" \n\n\"Thanks for being a fan,\" Rory smiled at her. \"I'm hoping this place will help inspire me to finish the follow-up and a few more books.\" \n\nShe nodded and Rory watched as his words dawned on her face and she broke into a smile. \n\n\"So that means that you're taking it?\" She asked barely able to contain her glee. \n\n\"That means I'm taking it,\" Rory smiled and a week later he was pulling a rental truck up to his new place.\n\n**** \n\n A Week Later  \n\nRory was halfway through unloading the rental truck when his stomach argued rather loudly that it was time for something to eat. Fortunately for him, his agent, Reginald Kasey, had the whole place furnished the day after Rory signed the paperwork. Reg worked fast and since the pair had been friends since elementary school he knew Rory's tastes. As he finished his ham and cheese sandwich, Rory thought he heard a noise coming from the backyard. He looked out the kitchen window and saw a small girl, he guessed no older than eight or nine, slowly swinging on the rusted swing set. For a moment Rory thought that he might have waited too long to eat something and his mind was playing tricks on him. She had long, dirty blonde colored hair and a cute little smile on her face as she swung back and forth without a care in the world. Rory watched her enjoying herself for a couple of minutes before he headed out the backdoor to say hello and introduce himself. The little girl had other ideas, however. As soon as she heard the backdoor opening, she quickly hopped up from the swing and ran for the treeline behind the house. Her legs may have been short but she was gone by the time Rory reached the bottom porch step. He stopped in the grass and wondered if she knew the man he brought the house from. \n\n\"Maybe she's the reason the old man kept the set,\" Rory thought as he tried to catch a glimpse of the girl through the underbrush but he couldn't see anything. \n\nHe made a mental note to ask the real estate agent if she knew anything about the girl then went back to unloading the truck. Several hours later Rory called it a day and went out to grab a pizza. He usually preferred to cook but was feeling drained. He sat at the dinner table facing the French doors and stared out at the swing set wondering about the little girl. Who was she and where had she come from?\n\n**** \n\nThe next day was more of the same for Rory as he carried box after box into his new place. His clothes had all been unloaded yesterday and now he was unloading his boxes of books and movies. Reg had offered to pay movers to do it all but Rory rebuffed the idea. Reg wanted him to concentrate on writing while others did all the work but Rory put his foot down. \n\n\"I write better after I do some strenuous activity,\" He told him and that quelled the argument though Rory was expecting the delivery of a full home gym complete with a personal trainer to shout at him for four hours to push himself at working out then another four to push out more pages on his latest book. \n\nHe didn't put it past Reg to go to extremes to get the next book out. Rory looked around at the last ten years of his life packed up in boxes and sighed. \n\n\"Not a lot to show for a man in his early thirties is it,\" He asked the empty house as he pulled open a box of books. \n\nAll of the books in this particular box were reference books for his writing. Books on weapons. Books on jungles. Books on self-defense. All used in his writing one way or another. Reg had constantly harped on him about spending his money on books when most of the information in the books could be found with a web search or three. Rory would have tried to explain to Reg about how much he enjoyed cracking open a book. The smell of an old book brought back memories of the times he would crawl up into his father's lap when he was a child and be read to about tales of cowboys and gunslingers. About how the feel of the paper on his fingers reminded him of when he would help his sister turn the pages of her storybook while she insisted he voice all the characters. He still has her storybook somewhere in these boxes and now that she has a daughter he would make a point to find it and give it to her soon. As he knelt down to start looking for it in his boxes, Rory's stomach had other plans. He went to the kitchen to slap together another sandwich and as he was eating it he glanced out the window. The little blonde haired girl was back on the rusted swing set. Instead of going out to try and talk to her Rory simply stood there and watched her as she swung through the air. He wished that he could go back to those carefree days of youth where all you wanted to do was pump your legs and get the feeling of flying through the air. After a half hour on the swing, she got to her feet, glanced briefly at the house then skipped her way back into the woods.\n\n**** \n\nThe same scene played out much the same for another week. She would appear around lunchtime, swings for a half hour while Rory kept a watchful eye on her, then back off through the woods she would go. He could almost set his clock to it and he found himself keeping a regular lunch schedule so he could spend some time watching his new little friend. The change in the routine happened quickly and sent Rory's heart up into his throat! He was watching his little woodland pixie as she swung when there was a loud pop from the swing set. The rusted crossbar of the swing set had snapped in half sending the girl tumbling to the grass. Rory was on his feet in an instant and running towards the backdoor to check on her but she was quicker than he was. She was already back on her feet and hurtling headlong towards the woods but Rory refused to let her disappear this time. He needed to see if she had been hurt in the fall but she was fast and she knew the terrain better than he did.\n\n**** \n\nRory nearly tumbled into a creek that divided the patch of woods but he managed to snag a low hanging branch that saved him from ending up face down in the water. His saving branch allowed him to swing about halfway across the expanse before it let go with a loud snap dropping him feet first into the cool water. \n\n\"Great,\" He muttered as the water and mud splashed over his shoes and jeans. \n\nHe stepped from the water, briefly shook his soaked feet off before he tried to pick up the girls trail. He saw a flash of yellow shirt fabric through the brush ahead of him and followed it. She was wearing a yellow shirt and he could hear her footfalls snapping twigs as she ran ahead of him. She exited the woods and made a beeline for the rear of this modest-looking two-story house where a woman stood hanging laundry. Rory didn't even think that was still a thing in this day and age but there she was with a clothesline, clothespins, the whole set up. His woodland pixie grasped the woman by the leg and pointed emphatically towards Rory. He slowed to a walk when he realized how this must look. A grown man chasing a child out of the woods. \n\n\"I'd arrest me or shoot me and not necessarily in that order,\" He thought to himself. \n\nThe woman looked frightened but she put herself between what Rory deduced was her child and himself like a mother bear ready to protect her cub. Rory took a moment to look the woman over. She was short, five foot five inches or five foot four inches with the same dirty blonde hair that her daughter had. Hers was pulled back from her pretty face in a messy ponytail. Her build was slender, he would almost say too thin but Rory didn't doubt that she would rip his throat out if he tried to snatch her little girl. He stopped about twenty yards from them and held his hands up trying to show that he meant no harm. \n\n\"Who are you and what do you want?\" The woman glared at him. \n\nShe avoided yelling but her tone relayed that mama bear was pissed. \n\n\"Hi, I'm Rory,\" he began and took a step back. \n\nHe told himself that it was because he was standing at an odd angle and had nothing to do with being afraid of the pretty mother. \n\n\"Rory Harrison, I'm sort of your neighbor... just through the woods here. Mr. Gunderson used to own the place,\" He told her. \n\n\"I heard that it got sold,\" She nodded but didn't relax. \n\n\"She'll be checking the sex offender's registry as soon as she gets into her house,\" He thought to himself. \n\n\"I'm sorry if I scared your daughter but I wanted to make sure she was all right,\" Rory stated with his hands still held up. \n\nThe woman looked down at her daughter and asked, \"Were you over on that swing set again?\" \n\n\"Uh huh,\" the little girl answered shyly. \n\n\"Emily, I told you that you shouldn't be over there now that Mr. Gunderson has moved out,\" She mildly chastised her daughter then turned back to Rory. \"I'm sorry if she's caused you any trouble.\" \n\n\"Oh no, she hasn't been any trouble. I just watch her on the swing when I'm making lunch. When the set collapsed my heart leaped into my chest!\" Rory told her as he lowered his arms slightly. \n\n\"It collapsed?\" She asked then dropped to her knees beside her daughter and immediately started looking her over. \"Are you hurt, baby?\" \n\nThe little one shook her head as she continued trying to hide from Rory. \n\n\"I shouldn't have allowed her to continue using the swings. I saw how rusted out it was and I was going to take it down but...,\" He started to say but was shrilly interrupted. \n\n\"No, you can't!\" the little girl shouted before she ducked back behind her mother's legs. \n\n\"Emily!\" Her mom admonished her which caused the girl to shrink back and hide her face in her mother's jean-clad leg. \n\nShe turned back to Rory. \"I'm sorry Mr...?\" \n\n\"Harrison,\" He reminded her then quickly added, \"but you can call me Rory.\" \n\n\"I'm sorry Mr. Harrison. I don't know what's got into her but rest assured that she won't be bothering you again,\" She told him. \n\n\"Mama,\" Emily pleaded. \n\n\"Em, the swings are gone now and Mr. Harrison doesn't want them there. It's his home now and his choice. I'll talk with daddy again about getting you a set of your own for your birthday,\" She patted her little girl's head. \n\nThe look that crossed Emily's cute little face told Rory that this conversation had happened many times before and always ended the same. No swing set. Seeing his once cheerful woodland pixie sad tugged at his heart and an idea popped into his head. One that he wanted to be a surprise. \n\n\"Well, I guess I should be getting back as long as you're sure she's all right, Mrs...\" He asked. \n\n\"Spencer,\" She answered him. \"Ashley Spencer and my daughter's name is Emily.\" \n\n\"Nice to meet you Mrs. Spencer, you and Emily both,\" Rory said then knelt down so he would be level with Emily even though he was still a good twenty yards from her. \"Emily, I'm sorry about the swing set but I have to get rid of it now that it's broken. Do you understand?\" \n\n\"She understands Mr. Harrison,\" Ashley told him as she placed her hand on Emily's shoulder. \"I'll make sure she doesn't bother you again.\" \n\nRory guaranteed that she wouldn't let her little girl anywhere near him in the foreseeable future. \n\n\"Thank you and again it was nice meeting you both,\" He said then turned and made his way back through the woods to his house with a plan.\n\nHe kicked off his soaked shoes at the door and peeled off the drenched socks and tossed them into the nearby laundry room. He popped open his laptop and after several minutes of searching, he found what he wanted. \n\n\"That one is almost perfect. Now to start making phone calls,\" He thought as he pulled out his cell phone.\n\n**** \n\nRory was barely awake the following morning when his doorbell rang. A quick glance at his cell phone indicated it was a quarter to eight causing him to wonder who was at his door so early. He tugged on a pair of jeans then headed downstairs as the bell chimed again. \n\n\"Just a second,\" he called out as unlocked his door. \n\nHe opened his door to a frazzled looking Ashley Spencer on his front porch. \n\n\"Mr. Harrison,\" She stated in greeting. \n\n\"Good morning Mrs. Spencer,\" He answered wondering why she was there so early when a thought occurred to him. \"Is Emily all right?\" \n\n\"She's running late for school but she's fine. Thank you for asking. I just wanted to come by and apologize again for her coming over to your place,\" She apologized to him. \n\n\"There's no need for apologies Mrs. Spencer,\" Rory assured her. \"I'm just glad she wasn't hurt.\" \n\n\"I just wanted to let you know that now that school is back in session you won't have to worry about Emily intruding on you. I'll also be keeping a close eye on her whenever I'm out hanging laundry so she doesn't bother you again,\" She explained. \n\n\"With the swing set gone, I'm sure that won't be a problem. I'll be having some work done over the next few days there in the back so I apologize in advance if the noise bothers you,\" He shared with her. \n\n\"It won't be a problem and thank you for your understanding, Mr. Harrison,\" She nodded at him and forced a smile. \n\n\"Have a good day, Mrs. Spencer,\" He stated then watched her as she walked back to her car. \n\nHe found himself taking a moment to admire her shapely butt before he headed back into his house. He cursed himself for checking out a married woman as he closed the front door. Rory could hear Reg's voice in his head telling him that he needed to get laid. \n\n\"Tell me something I don't know, Reg,\" Rory thought and chuckled. \n\nAfter a quick shower and a light breakfast, he headed into the backyard to start on his surprise. \n\n**** \n\n\"Somebody's late,\" Tara Evans called out in a sing-song voice as Ashley walked Emily up the steps of the school. \n\n\"I know,\" Ashley answered her childhood friend. \"Come on Em, let's go.\" \n\nShe got Emily to the door where her teacher, Mrs. Willard was waiting with a happy smile on her wrinkled face. \n\n\"Welcome back, Emily,\" Mrs. Willard stated. \n\n\"Sorry I'm late this morning, Mrs. Willard,\" Ashley apologized to the matronly older woman. \n\n\"Perfectly understandable. It's tough that first day back from vacation,\" Mrs. Willard stated then noticed something off with Ashley. \"Is everything all right Ashley? You seem rather frazzled today.\" \n\n\"It was a long night,\" Ashley assured her then knelt down and hugged her daughter. \"Be good, Em, I'll see you this afternoon, okay?\" \n\n\"Okay mommy,\" Emily said as she hugged her back. \"Love you.\" \n\n\"I love you too, baby girl,\" Ashley smiled then with a parting smile to Mrs. Willard headed back to the parking lot where Tara stood waiting by her car. \n\n\"So spill it, Ash,\" Tara stated smiling at her friend. \n\n\"Spill what,\" Ashley sighed. \n\n\"You are never late, Ash,\" Tara stated. \"I've known you forever and in all that time I've never seen you late to anything.\" \n\n\"That isn't true,\" Ashley told her. \n\n\"Uh huh,\" she answered. \"So what's up with you? Even Mrs. Willard noticed and she's been half blind since she was our teacher!\" \n\n\"Tara, be nice,\" Ashley scolded her. \"I've got a new neighbor.\" \n\n\"Someone bought that big house through the woods from you?\" Tara asked. \n\n\"Yes, and Em was still going over there to play on that old swing set. It collapsed with her on it yesterday.\" Ashley explained. \n\n\"Oh gosh, is she all right?\" Tara asked worriedly. \n\n\"I think it scared her more than anything,\" Ashley answered. \"Scared my neighbor too.\" \n\n\"Probably afraid of being sued,\" Tara stated. \n\n\"I don't think so, I mean I didn't get that impression from him,\" Ashley shared. \n\n\"Ooo, a  him  huh,\" Tara said with a wicked grin. \n\n\"Yes and he's not on the sexual offender database, at least he wasn't as of last night,\" Ashley told her. \"Do you know how long they have to report in or whatever it is they have to do?\" \n\n\"I'm pretty sure they have to the moment they move in,\" Tara answered. \"How long has he been there?\" \n\n\"At least a week,\" Ashley answered her. \n\n\"Well, then I don't think he's a predator or anything. That's a good thing,\" Tara said then smirked. \"So is he hot?\" \n\n\"Tara!\" Ashley nearly shouted. \n\n\"Well,\" Tara persisted. \n\n\"I don't... know if he is or not,\" Ashley stammered. \n\n\"That means he is,\" Tara stated confidently. \n\n\"You're impossible and I have to get to work,\" Ashley insisted. \n\n\"Fine but don't think I won't be over to your place soon to check out this hot neighbor of yours,\" Tara giggled. ",
        "\"Bye Tara,\" Ashley said as she got into her car. \n\nShe waved to her friend as she drove off. \n\n\"How hot is my new neighbor? That girl is impossible,\" She thought but then caught herself thinking about her new neighbor's smile when he opened his door to find her there on his porch. \n\n\"Don't let Tara get to you,\" She told herself as she shook her head then after a second added, \"It is a nice smile.\" \n\n****\n\n\"So let me get this right,\" The foreman stated for the third time. \"You want us to set up a tarp for you to work on this thing in private?\" \n\n\"Whoever said, Money can't buy happiness was right,\" Rory thought to himself as he stood with the man in his backyard. \"I want to surprise my neighbor and I can't do that if they can look out of their back deck and see it,\" He answered him. \n\nHe gave a shrug of his shoulders that Rory took to be his  weird rich people  shrug. It took him longer to question Rory than it took for his crew to set the tarp up. \n\n\"Now are you sure that you don't want my guys to throw that together for you?\" the foreman asked. \"It would only take my guys an hour tops.\" \n\n\"No thanks, I've got it,\" Rory answered him. \"Working with my hands helps me think.\"\n\nAnother shrug and he and his crew were off, leaving Rory to his project. \n\n**** \n\nAshley arrived at her work at Victoria's Secret a few minutes before her shift was set to begin. \n\n\"Running late today, Miss Perfect?\" Janice Simmons, her younger coworker smirked as Ashley hurried into the back room. \n\n\"You know I hate when you call me that, Janice,\" Ashley sighed. \n\n\"Why do you think I do it?\" Janice laughed as she headed out to the sales floor. \n\nAshley shook her head and vowed that she would not let Janice get to her today. She made herself a cup of coffee in the break room before she headed out onto the sales floor. She sipped from her cup and managed not to glare as Janice set herself up behind the counter. \n\n\"Claiming her spot for the day,\" Ashley muttered knowing that meant that she would be on the floor and thus on her feet all day. \"Great, that's all I needed today.\" \n\n**** \n\nRory was a few hours into his project when he heard a car pull into his driveway. He cursed and hurried to the front hoping that Mrs. Spencer hadn't come by to apologize again. He rounded the corner and sighed with relief when he recognized the silver Mercedes SLC Roadster gleaming in his driveway. \n\n\"I had to come and see this with my own eyes,\" Reg called out as he saw Rory round the corner of the house. \n\n\"See what,\" Rory asked playing dumb. \n\n\"I think it's so sweet that you think you can make a large purchase without me getting an alert on it,\" Reg chuckled. \n\n\"I sometimes hate that you're my agent,\" Rory sighed. \n\n\"Nah, you love it.\" He smirked as he followed him into the backyard. \n\nHe stopped when he saw the large tarp erected back there. \n\n\"I was worried when I saw you rented this thing. I almost called that hot real estate agent to bless her out for selling you a house with a leaky roof.\" \n\n\"The roof is fine,\" Rory assured him. \n\n\"I can see that. So explain the tarp and this... thing. Do I need to get someone to run a DNA test?\" Reg asked him. \n\n\"So that's the real reason you drove all the way up here?\" Rory asked him. \"Jesus, Reg, you know that's something I'd have already told you about!\" \n\n\"You have this stubborn streak of trying to handle things on your own, Rory,\" He pointed out. \"As for the drive, it's only a few hours on the road and I've been meaning to visit my mom anyway. So you're sure that I don't need to arrange for any type of test?\" \n\n\"Only on my sanity for hiring you in the first place,\" Rory joked then told him about his project. \n\n\"She must be awfully cute,\" Reg said once Rory was done with his explanation. \n\n\"She's the cutest little girl I've ever seen aside from Chloe,\" Rory shared. \n\n\"I meant the mom you jackass,\" Reg chuckled. \n\n\"She's married,\" Rory pointed out but avoided letting on that he did find Ashley attractive. \"Besides, I feel kind of bad that she lost her swing set.\" \n\nHe pondered that for a moment and Rory could hear the monkey that controls the gears in Reg's brain go into overdrive. \n\n\"No,\" Rory said before Reg got his idea out of his mouth. \n\n\"I didn't even say anything yet,\" Reg argued. \n\n\"You were about to and the answer is no,\" Rory told him. \n\n\"But the publicity...,\" Reg started to argue. \n\n\"No publicity,\" Rory interrupted him. \"This is not author R. H. Decker builds a park for needy children. This is Rory Harrison is a good neighbor and no one needs to know anything about that.\" \n\n\"The public begs to differ,\" He argued. \n\n\"They can beg all they want but this stays between us. Don't make me call your mom... or worse, your sister,\" Rory joked. \n\nReg sighed and raised his hands in defeat. \n\n\"That's low man, threatening me with my own sister,\" He laughed. \n\n\"Yeah, that was always your thing when we were younger and if you'd just listen to me, I wouldn't have to resort to threats.\" Rory pointed out. \"How is Cheryl by the way?\" \n\n\"She wishes that you would stop by more often. She doesn't think that she's thanked you enough for setting up that college fund for Brady.\" Reg shared. \n\n\"She's thanked me plenty,\" Rory commented. \n\n\"I don't want to hear about you and my sister, jerk,\" Reg stated as he shook his head as if to try and clear an image from his head. \n\n\"Cheryl's not like that, asshole,\" Rory said as he gave him a playful shove. \"She made me dinner and that was all the thanks I need.\" \n\n\"It figures that you set my nephew up to have his whole college education paid for and take a chicken dinner for payment,\" Reg chuckled. \n\n\"Hey, there were potatoes,\" Rory pointed out with a laugh. \n\nHe sighed then gestured towards Rory's project. \n\n\"Are you doing any writing while you work on this... side project of yours?\" He asked going back into agent mode. \n\n\"A little,\" Rory lied but knew that it was for the best. \n\nReg freaked out if Rory wasn't writing something. He learned that a long time ago and lying about it was easy at this point. \n\n\"Good,\" He smiled. \"The public is clamoring for a new book and the studios are giving them a serious look now that we're back on the market.\" \n\n\"I'm still a little gun shy when it comes to the studios right now,\" Rory said then knelt down to get back to his project. \n\n\"Don't let one bad experience taint everything else, Rory,\" Reg told him. \n\n\"I'm trying not to,\" Rory said then nodded toward his project. \"This is helping.\" \n\n\"Send me some new pages to look over. Next week, Rory. You hear me?\" Reg asked him. \n\n\"Next week,\" Rory said and gave a mock salute. \"Aye aye, Captain.\" \n\nReg gave Rory one last look then glanced at what he was working on and mumbled again, \n\n\"She must be really cute,\" before heading back to his car. \n\n**** \n\n\"So how hot is this lady,\" Rory's sister Ellie asked. \n\nRory sighed into his phone. He wished he had known what a mistake this call was going to be. \n\n\"Have you been talking to Reg?\" He deflected. \n\n\"No, why,\" Ellie asked. \n\n\"He said the same thing and I'll tell you what I told him. She's a married woman,\" Rory stated. \n\n\"A hot married woman,\" Ellie prodded. \n\n\"I didn't notice,\" Rory lied. \n\n\"Liar,\" She called him out immediately. \n\nJust like when they were growing up, she could always tell when he was lying. Rory chalked it up to some weird sibling vibe that she could feel even over the phone. \n\n\"Well if you aren't into messing around with married women then you should look into the singles scene around here. I happen to know that there are some girls we went to school with that are on the market. Well, back on the market,\" Ellie told him. \n\n\"Are these the ones that ignored me or the ones that made fun of me?\" Rory asked with a shake of his head. \n\n\"Probably both but that doesn't matter now that Chloe needs a playmate,\" Ellie plowed ahead. \n\nShe loved to dangle her daughter's supposed needs in front of Rory because she knew that he'd do all he could to make her smile. \n\n\"Speaking of a playmate for Chloe,\" He stated as he ignored his sister's attempt at matchmaking, \"that's kind of why I called you. What are you doing on Saturday?\" \n\n**** \n\nTwo days later, Rory's project was finished and he had not seen Emily once while he had been working. He was relieved and a little sad not seeing her but in the end, he hoped it would be worth it. Rory considered just heading out through the woods but figured that wouldn't look great so he hopped into his car instead. A few minutes later, he stepped up to the door and rang the bell. He only had to wait a couple of moments before Ashley opened the door. \n\n\"Mr. Harrison,\" She stated with a slight frown on her pretty face. \"Is there a problem?\" \n\n\"No... Yes... well, sort of...\" Rory stammered. \"Mrs. Spencer, I think I was kind of... abrupt with you and your daughter the other day and I would like to make up for that.\" \n\nShe eyed him warily from behind her glass storm door then shook her head. \n\n\"That's not necessary Mr. Harrison. You had every right to...\" She started to say. \n\n\"No, I really didn't,\" Rory interrupted her. \"I'm new to the neighborhood and I'm afraid I left a bad impression so I'd like to invite you and your family over for dinner tonight. I promise I'm a decent cook.\" \n\n\"It's okay, really,\" She assured him. \"Emily coming over uninvited was enough of a bother to you. We wouldn't want to become even more of one.\" \n\n\"You won't be a bother. My sister is coming over to see the new place with my niece. She's nine and I thought that she and Emily might get along. What do you say,\" Rory was practically begging. \n\nAshley seemed to sense this and enjoyed letting him twist for a couple of moments before she finally nodded. \n\n\"What time are we expected?\" She asked with a put upon sigh. \n\nShe tried her best to look bemused but her mouth curved up into an involuntary smile. Rory caught the slight movement of her lips and smiled himself. \n\n\"Uh, around five,\" He answered as he nervously brushed his hand over his thick, brown hair. \"I figure that would give the girls a little while to get to know each other before we eat. Is that good for you?\" \n\n\"I can make that work,\" She answered as she smiled up at him. \n\nAshley found his nervousness charming and she did like his smile. \n\n**** \n\nA little after five Rory's doorbell rang and he hurried to answer it but Ellie intercepted him. \n\n\"Back to the kitchen with you,\" She told him as she pointed. \"I'll greet your guests, bro.\" \n\n\"Ellie,\" He started to protest but Chloe grabbed his hand and tugged him towards the kitchen. \n\n\"Come on Uncle Rory,\" She urged in a voice he couldn't resist. \"We got work to do.\" \n\n\"That we do, squirt,\" Rory smiled at her then pointed at his sister and wagged it. \"You play nice, Ellie.\" \n\n\"I always play nice,\" Ellie called back then stuck her tongue out at him. \n\nEllie opened the door and a big smile appeared on her face when she saw how pretty Ashley was. \n\n\"Hi, you must be Ashley and Emily. Come on in,\" She stated. \"Your husband couldn't make it tonight?\" \n\n\"No, he's not... I mean,\" Ashley stammered for a second. \"I'm sorry are... are you Mr. Harrison's sister?\" \n\n\"Oh my gosh, where are my manners,\" Ellie said. \"Yes, I'm Rory's sister Eleanor but please call me Ellie.\" \n\n\"It's nice to meet you, Ellie,\" Ashley said as she extended her hand. \n\nEllie shook it and smiled down at Emily who was trying her best to hide in her mom's legs. \n\n\"It's my pleasure, Ashley,\" Ellie said then addressed Emily. \"Hello there, Emily, how are you?\" \n\n\"Good,\" Emily answered shyly. \n\n\"That's very good! You are just the cutest,\" Ellie smiled at her. \"Let me take you to Rory and my little girl Chloe. She is so excited to meet you, Emily.\" \n\nAshley and Emily had no choice but to follow Ellie as she headed towards the living room. Emily had a death grip on her mom's pants leg making it difficult for Ashley to keep up with the tall brunette. Ellie led them to the kitchen where Rory and Chloe were working on cookies. \n\n\"Hi, Mrs. Spencer, I'm glad you and Emily made it,\" Rory stated as he handed Chloe a handful of sprinkles to add to the cookies. \n\n\"We appreciate you inviting us, Mr. Harrison,\" Ashley responded. \n\n\"Please call him, Rory,\" Ellie said. \"The Mr. Harrison talk goes right to his head and puffs up his ego.\" \n\n\"El, remember when I asked you to play nice,\" Rory sighed. \n\n\"I remembered I just chose to ignore it,\" Ellie answered with a laugh as Chloe hopped down off the counter and went over to Emily. \n\n\"Hi, wanna make cookies with me and my uncle?\" Chloe asked her. Emily looked from the chestnut brown haired girl to her mom, to Rory then back to her mom. \n\n\"Can I,\" She asked her mom shyly. \n\n\"Sure you can,\" Chloe answered for Ashley then took her hand and pulled Emily over to where Rory stood. \"Up Uncle Rory!\" Chloe ordered precociously as she raised her arms towards him. \n\nRory reached down and scooped her up then deposited her onto the tall stool she had just vacated. He turned back to Emily but Ashley had already placed her onto the stool beside Chloe. \n\n\"Make sure you listen to Mr. Harrison, Em,\" Ashley told her as she rubbed her back. \n\n\"Do you want to do the red sprinkles or the blue ones?\" Chloe asked Emily. \n\n\"Come on Ashley,\" Ellis stated as she took her by the arm, \"let me show you the rest of this house my very single brother thinks he needs.\" \n\nRory gave his sister a glare at her choice of words but she just winked at him when Ashley wasn't looking at her. \n\n\"I should probably stay with Em,\" Ashley said worriedly. \n\n\"She's in good hands, Ashley,\" Ellie assured her. \n\n\"You're really good at this,\" Chloe complimented a smiling Emily as she carefully placed sprinkles on the warm from the oven cookies. \n\nAshley allowed Ellie to lead her along but she was tentative about leaving Emily alone. \n\n\"She'll be fine, really,\" Ellie assured her once she noticed Ashley continuing to look towards the kitchen. \n\n\"Em gets nervous around people she doesn't know,\" Ashley explained. \"If she looks around and I'm not there I'm afraid that she'll freak out.\" \n\n\"It won't be a problem, trust me,\" Ellie told her. \"Now come on and let me give you the five-cent tour.\" \n\nAshley was surprised when she finished the tour and hadn't heard Emily cry out for her. Ellie led her back to the kitchen and heard Ashley's slight gasp when she saw Emily seated on the counter top giggling with Chloe while Rory made faces at them. \n\n\"Kids love him,\" Ellie pointed out quietly from their vantage point at the kitchen door. \"It's his superpower.\" \n\n\"I can see that,\" Ashley answered as she walked over to the group and rubbed Emily's back. \"Having fun Em?\" \n\n\"Uh huh, he's silly,\" Emily answered then giggled again. \n\n\"Silly... silly am I,\" Rory asked seriously. \"You know what happens when you make fun of me don't you?\" \n\nEmily shook her head while Chloe giggled. She had played this game before. \n\n\"It gets you... a pre-dinner cookie,\" Rory smiled and handed her a fresh cookie. \"Careful, it's warm.\" \n\nEmily took it but before she took a bite she looked at her mom for permission. \n\n\"His house, his rules,\" Ashley answered her with a smile. \"Just don't get used to it.\" \n\n\"That goes double for you Chloe,\" Ellie stated as Rory handed his niece her own cookie. \"Uncle Rory is spoiling you.\" \n\n\"It's what Uncle Rory's for mama,\" Chloe pointed out. Ashley laughed at how Chloe made it sound like a fact of life. \n\n\"He doesn't need any encouragement from you, Ashley. It took days to get Chloe to calm down after a visit to Uncle Rory's but now that he's back home I can see it getting so much worse,\" Ellie sighed exaggeratedly. \n\n\"Home? You're from here?\" Ashley asked surprised. \n\n\"The celebrated son returns home,\" Ellie teased Rory. \n\n\"Ellie,\" Rory warned futility. Ellie had rarely heeded his warnings growing up and that was not likely to change. \n\n\"I'm sorry, I don't understand,\" Ashley said. \n\n\"Sorry Ashley, but I think my little bro might toss me out if I say anything more.\" Ellie apologized. \n\n\"She's going to find out sooner or later, it might as well be from your big mouth,\" Rory told her calmly as he handed Chloe and Emily another cookie. \n\nBoth giggled as they bit into the treat. Ashley shook her head and Ellie sighed but launched into her explanation. \n\n\"We grew up just outside of town. Chloe and I moved back into our old house when I got divorced. Our parents decided to tour the country in an RV so it works out. He spends... well, he spent his time in Los Angeles fixing scripts.\" Ellie shared. \n\n\"Ellie, that's not exactly...\" Rory started to correct her but Ashley interrupted. \n\n\"What does that mean?\" She asked. \n\n\"When someone writes a script for a movie, TV show or even a commercial the director usually has their own vision of what it should be, so my job was to attempt to achieve a happy medium for both parties. That's what I started out doing out there anyway,\" Rory explained. \n\n\"Oh wow,\" Ashley expressed. \"Did you work on anything I might have seen?\" \n\n\"She doesn't know?\" Ellie gave her a shocked look. \n\nRory ignored his sister and answered Ashley. \n\n\"A couple of TV shows, a half dozen commercials and one movie that's stuck in development but that's all I can legally tell you. Hollywood is weird when it comes to non-disclosure clauses and it's one of the reasons I left,\" He explained. \n\n\"That isn't the main reason you left. It was that bi...\" Ellie started to say but stopped when Rory nodded towards the girls. \n\n\"Who's ready for dinner?\" He called out. \n\n\"Me!\" Chloe shouted and her new friend Emily echoed her. \n\n\"Good because I have another little surprise outside,\" Rory shared. \n\n\"More surprises, great.\" Ashley sighed quietly. \"Not sure I can withstand many more surprises tonight.\" \n\n**** \n\n\"For me,\" Chloe shouted excitedly while she looked back at the three adults who were following in her and Emily's wake. \n\n\"For you and Emily to share,\" Rory corrected her. \n\n\"Me,\" Emily asked astonished. \n\n\"Your last one was gone so I had to replace it,\" Rory smiled at her. \n\n\"Oh my,\" Ashley exclaimed as she looked out at the new swing set. \n\nIt was easily twice the size of the old one and had a slide, a see-saw and was even topped off with a plastic tree house. \n\n\"Spoiled rotten I tell you,\" Ellie said as she playfully punched his shoulder. \n\n\"It's what Uncle Rory does,\" Rory mimicked his niece then turned to Ashley. \"I hope you and Emily will come over and make use of it whenever she wants.\" \n\n\"I... we...\" She stammered unable to think of a reply as she looked at the white structure with pink accents. \n\n\"Think on it, I need to get the hot dogs before they burn,\" He stated as he headed towards the grill. \"I hope hot dogs are okay, it's about all I can get Chloe to eat.\" \n\n\"It's... they're fine,\" She answered him while still looking at the new swing set. \n\nEllie put an arm around Ashley and handed her a half-full wine glass. \n\n\"You looked like you needed this.\" Ellie giggled. \"My brother has a tendency to go overboard at times. Might as well get used to it Ashley, he's not going to change.\" \n\nAshley shook her head and took a sip while watching Emily and Chloe playing on the swing set. \n\n\"I've never seen one made up like this. They're usually wooden looking aren't they?\" Ashley asked. \n\n\"I was just thinking the same thing and I've got an idea about that. Come with me,\" Ellie answered with a smile. \n\nAshley followed her over to the garage then looked to the back corner where Ellie had pointed. \n\n\"He didn't,\" Ashley asked as she looked at the white and pink paint cans that sat on a drop cloth. \n\n\"Of course he did,\" Ellie sighed then giggled. \"This is him in a nutshell, Ashley. When a regular swing set would have been plenty he goes and makes it a princess set just because he knows the girls would love it even more. This kind of thing has gotten him in trouble in the past but he persists. Please tell your husband that he means well and isn't showing off.\" ",
        "\"My husband... well, he's my ex-husband and he's not really in the picture.\" Ashley admitted. \n\nIt was not something she intended to put out there but chalked it up to the wine loosening her tongue. \n\n\"Interesting,\" Ellie replied and hid her smile. \"Let's go make sure the cook doesn't burn anything.\" \n\n**** \n\nThe girls were coaxed from the play-set long enough to eat a hot dog and some chips which they devoured despite the cookies from earlier. Ashley watched in fascination as Emily smiled and laughed at Rory's antics right along with her new friend Chloe. She found herself wanting to know more about her new neighbor other than her cursory sex offender check. With dinner over, she volunteered to do any dishes and insisted when Rory tried to do them himself. \n\n\"Go play with the girls. They need someone to push them on the swings,\" She told him. \n\n\"Yeah,\" two little voices shouted as Chloe grabbed him by the arm and pulled him towards the swings. \n\nEllie laughed and started to help Ashley clean up. \n\n\"So what's the big secret?\" Ashley asked once they're inside. \n\n\"Pardon,\" Ellie asked. \n\n\"He was afraid of you telling me something earlier and it wasn't just that you two grew up here,\" She stated. \"Hey, I told you that I'm divorced. Don't think I don't know that you're going to be sharing that little bit of info the second Em and I leave.\"  \n\n\"If you don't want me to say anything about that I won't, Ashley,\" Ellie assured her. \n\n\"No, it's fine. It's not like it's that big of a secret in this town,\" Ashley answered. \"So spill it. What did you mean when you called Rory  the celebrated son ?\" \n\nEllie looked out the window and made sure Rory was occupied before turning back to Ashley. \n\n\"You know how I said that Rory fixed scripts?\" She asked and Ashley nodded. \"That's what he did to make a steady living but he's really a writer.\" \n\n\"He writes books,\" Ashley asked. \"Anything I might have read?\" \n\n\"Have you read Darkness of the Hart or A Broken Hart?\" \n\n\"I loved A Broken Hart!\" Ashley enthused. \"I heard they were thinking of making a movie based on the series from that book alone. Wait are you telling me that Rory writes the Tyler Hart novels? No way!\" \n\n\"He does,\" Ellie answered with a grin. \"He writes under a pen name and doesn't use a photo on the jacket because he doesn't want the notoriety of it. He saw firsthand what it can do when he was living in Los Angeles.\" \n\n\"Wow, really,\" Ashley asked. \"I thought that most people that went to Hollywood were all about fame.\" \n\n\"My brother has always been the shy and retiring type. The glitz and glamour of Hollywood and the cost of achieving it was more than he was willing to pay. He'd probably tell you if you ask him, though you're more likely to ask him when the next book is coming out,\" Ellie laughed. \n\n\"I'll give him a few days before I hound him to read what he's working on now,\" Ashley laughed. \"He left it on such a cliffhanger that I just have to get the scoop!\" \n\n\"He'd probably let you read it. His two greatest weaknesses are kids and blondes. You're practically Kryptonite to him,\" Ellie shared. \n\n\"I'll try not to use either of those to my advantage,\" Ashley assured her as they started washing the dishes. \n\n\"Hey, use everything you've got, Ashley,\" Ellie smiled. \"You both are single and believe me, he could do a lot worse.\" \n\n\"You don't even know me, Ellie,\" Ashley shook her head. \"I could be some evil bitch that could wind up ruining your brother's life.\" \n\n\"An evil bitch would have sued him over the swing set incident,\" Ellie giggled. \"I have a good feeling about you, Ashley. You're going to be good for my little brother even if you two manage to just stay neighbors.\" \n\n**** \n\nAshley and Emily started making trips over to use the swing set a couple of days after the cookout. When Ashley or Rory wasn't pushing Emily, they sat together on his back deck, watched Emily swing while they chatted. It took them about a week before she told him about Emily's father, Colin, who worked as a lounge singer on a cruise line. \n\n\"We were high school sweethearts,\" She confided one sunny afternoon as they sat watching Emily play. \"He was out at sea for months at a time and I guess it was inevitable that he started cheating on me. I saw some pics on his phone when he was home and confronted him. He didn't deny it. He just suggested that we try having an open marriage. That's not me and I couldn't see myself bringing home different guys while trying to raise Emily. It would be too dangerous of a situation to put her in. I just wanted out so we got divorced.\" \n\n\"I'd never share you with... uh, I mean...\" Rory stammered when he realized what he was saying. Ashley simply smiled and patted his hand. \n\n\"I appreciate that, Rory,\" She smiled at him. \n\n\"Does he come and see Emily often?\" He asked hoping to cover his embarrassment. \n\nShe shook her head. \n\n\"He tries but Colin is not one that likes to be reminded of his failures and that's how he sees our marriage. He calls her on the big holidays and she gets postcards from him now and again from his ports of call but that's about it,\" She explained. \n\n\"I'm sorry, Ashley,\" He said. \n\n\"It's life,\" She sighed and they went back to watching Emily play on her swing set. \n\n**** \n\n\"I guess I should tell you the real reason I got out of L.A.,\" Rory brought up the next time they came over. \n\n\"Traffic,\" Ashley asked with a laugh. \n\n\"Partly,\" Rory laughed. \"I had started seeing someone out there. Her name was Kat and she's an actress.\" \n\n\"Has she been in anything I might have seen,\" Ashley asked intrigued by the kind of girl that Rory dated. \n\nShe pictured in her head some statuesque platinum blonde with huge boobs and an ass that looked like it was sculpted in marble due to thousands of squats. Ashley made a mental note to renew her gym membership soon. \n\n\"She was in a couple of music videos but I forget which ones and she has a minor part in a movie coming out next year unless things have changed since I left,\" He answered. \n\n\"Sorry I interrupted, go on,\" She encouraged him. \n\n\"We were introduced through a mutual friend that thought we might hit it off and we did, for a little while at least. That is until I walked in on her and this producer she knew, going to town on each other. I yanked him off her and punched him a couple of times before she stopped me. She tried telling me that's just the way things are done there and that it didn't mean anything,\" Rory sighed. \n\n\"It always means something,\" Ashley stated. \n\n\"That's how I feel too.\" He assured her. \n\n\"What happened with the producer?\" She asked. \n\n\"Instead of calling the cops on me, they called the studio. They sent someone out to talk to us and see what we all wanted to keep it out of the tabloids,\" Rory told her. \n\n\"Now I know how Kat has a movie coming out.\" She said with a frown. \n\n\"It was so surreal, Ashley,\" He sighed. \"I expected to be in cuffs but in walks my agent and the studio people. They all treated it like some kind of business meeting and everyone wanted something.\" \n\n\"What did you want,\" She asked him. \n\n\"I wanted to leave that madness behind,\" He shook his head. \"My agent knew this and got me out of my contract with the studio the producer worked for. After some haggling back and forth, I packed up my stuff and came home. I came back to lick my wounds according to Ellie.\" \n\n\"But you don't think that's why,\" she asked. \n\n\"That was a big part of it but I was also tired of playing the Hollywood game and I can write anywhere in the world,\" He said. \n\n\"So you came home,\" Ashley stated. \n\n\"So I came home,\" He nodded and noticed Emily was swinging a bit higher than he thought was safe. \n\n\"Not so high Em,\" He called out as he got to his feet. \n\nAshley smiled warmly as she watched him start to push her daughter in the swing so he could control just how high she could go. Emily was giggling away and telling him about something that happened at school that day. Ashley leaned back in her chair and watched the pair interact like it was the most natural thing in the world. Her once shy daughter had made a couple of new friends and so had she. \n\n**** \n\n A Week Later  \n\n\"So bored, mama,\" Emily sighed as Ashley stood in the aisle checking the ingredient label on a package of cereal. \n\nThey had been in the store less than ten minutes but Emily had been ready to head right to Rory's after school but Ashley had to get to the store. \n\n\"I know, baby,\" Ashley answered absentmindedly as she debated on whether to put the cereal back or just buy it. \n\n\"Did I hear someone say that they were bored here in the cereal aisle,\" Rory asked as he approached them with his own empty cart. \n\n\"Rory,\" Ashley exclaimed as she jumped slightly when he spoke. \"You scared me.\" \n\n\"Not my intention,\" He laughed. \n\n\"I'm bored, Mr. H,\" Emily repeated she said in greeting. \n\nAshley tried having Emily calling Rory, Mr. Harrison for awhile but Emily had shortened it to Mr. H recently and Rory was fine with that. \n\n\"Bored are you, Miss Em,\" He asked while he tapped his chin. \"I think I have an idea about how we can make shopping a little more exciting but only if your mom agrees that you can go with me around the store.\" \n\n\"Take my only child,\" Ashley asked in mock horror. \"I would never allow such... Yes, please take her. Just promise to write to me while you're gone, baby.\" \n\n\"Now who's being silly,\" Rory chuckled as Emily laughed. \n\n\"Just be safe and listen to Rory, Emily,\" Ashley said in seriousness. \n\n\"I will,\" Emily promised. \n\n\"Hop in then, Miss Em,\" Rory said as he picked Emily up and placed her into his shopping cart. \"The game is afoot!\" \n\nWith a nod to Ashley, he quickly pushed his cart down the aisle away from her. She shook her head and laughed as she could hear Emily still giggling. Now she could shop in peace. \n\n\"What's the game, Mr. H,\" Emily asked as Rory spun the cart and made his way up another aisle. \n\n\"We are on a case, Miss Em,\" He said in a quiet voice. \"The H and Em detective agency has been hired to stake out this market to see what sort of people shop here. \n\n\"Awesome!\" Emily shouted then looked around to see if anyone heard her. \"Oops, we're supposed to be undercover huh?\" \n\nRory nodded and looked around himself before explaining to her how to play the game. \n\n\"We look at what each person has in their cart and determine who they might be,\" he explained to her. \n\n\"Like that guy there has a lot of lunch meat and soda's in his cart so he's...\" Emily paused not sure how to continue. \n\n\"Ah, that's the notorious Party Thrower,\" Rory said. \"Notice how he's grabbing all the chips as well. He's going to throw some big party this weekend.\" \n\n\"A criminal party?\" Emily asked conspiratorially. \n\n\"Possibly,\" Rory nodded. \"We'll keep a close eye on him later. Now, what about that lady?\" \n\nThey played their game for several minutes until they happened upon Ashley again, and again her back was to them. \n\n\"What about that one,\" Emily giggled quietly as she pointed to her mom. \n\nRory smiled at her. \n\n\"That one,\" He said looking over Ashley's cart. \"That one is a great mother who loves her child very much. See how she's reading the label to make sure that all the ingredients are good and healthy?\" \n\n\"Uh huh,\" Emily whispered. \"Should we keep an eye on her too?\" \n\nRory, who was already appreciating the way Ashley's jeans were hugging her butt, nodded. \"We'll have to keep a close eye on that and live by her example,\" He said. \n\n\"Good choice,\" Ashley said having heard them as they neared. \n\nShe had nearly finished shopping and her cart showed it. She shook her head when she saw Rory's was still empty. \n\n\"You didn't shop?\" She asked as he helped Emily down. \n\n\"We were on a case,\" Emily announced happily then explained it to her mom who laughed and shook her head. \n\n\"Same time next week, Mr. H,\" Emily asked excitedly. \n\n\"You have only yourself to blame, Mr. H,\" Ashley teased him with a laugh. \n\n\"I guess that I do,\" Rory agreed then turned to Emily. \"We shall resume our stakeout next week, Miss Em.\" \n\n**** \n\n A few months later  \n\n\"Rory, I am so sorry,\" Ashley apologized again as soon as he opened the door. \n\nHer apologies were something he had grown used to over the past couple of months. After the occasional visits to the swing set became a daily occurrence and the shopping trips started he had become her back up babysitter if her friend Tara or his sister wasn't available. She still apologized every time she dropped Emily off. \n\n\"Fourth time you've apologized,\" He chuckled as he stepped back to allow them inside his house. \"If you make it to six, I hear you get a really mediocre toaster.\" \n\n\"What's mediocre mean?\" Emily asked as she skipped past them and headed for the big screen TV in the living room. \n\n\"Just my life, baby,\" Ashley sighed when she was sure that Emily couldn't hear her. \n\nNot that she had to worry, Emily was already looking for Scooby Doo cartoons on Rory's television. \n\n\"You don't have to put up with this you know. Them calling you at the last minute and on your day off,\" Rory told Ashley. \n\n\"Unfortunately I do if I want to keep working there,\" She sighed. \"I hope I'll be here to pick her up no later than seven.\" \n\n\"We'll be here, Ash,\" He told her. \n\nShe gave him a relieved smile. \n\n\"I will make this up to you, Rory,\" She promised him. \n\n\"Dinner at your place say... Monday night,\" Rory asked. \n\n\"Let me guess, you want me to make chili again don't you?\" She asked with a smile. \n\n\"I'm a simple man,\" He laughed. \n\nShe leaned up and kissed his cheek. \n\n\"I've yet to see the simple side of you, Rory. See you tonight,\" She laughed as he walked her to the door. \n\n\"Be safe,\" He called out as she walked to her car. \n\nRory still watched her ass as she walked away from him noting that she's filled out a little since they first met making it even nicer to look at. She waved before backing out and he waved back before heading inside to find out what Emily had gotten up to. \n\n\"Mr. H, I can't find Scooby,\" She informed him as she waved the remote in the air. \n\n\"Scooby is on DVD, sweetie,\" Rory reminded her. \"Have you had breakfast yet?\" \n\nShe shook her head. \n\n\"Mommy's work called before she could make my waffles,\" She told him. \n\n\"Waffles huh... well, I think we can do better than waffles. That is if you are ready for a day of adventure. Are you ready for an adventure Miss Em?\" He asked giving her a wink. \n\nShe giggled and hopped to her feet. \n\n\"I am Mr. H.!\" She announced. \n\n\"Then let's get that coat of yours back on and head out into the world,\" Rory said, \"Adventure awaits us!\" \n\n**** \n\n\"Aren't you a cutie,\" the waitress at Lauper Family Restaurant asked Emily as she seats them. \n\n\"Thank you, ma'am,\" Emily answered her politely. \n\n\"Polite too,\" The waitress smiled. \"Your daddy here must be proud of you.\" \n\nRory started to correct her but Emily smiled and jumped in. \n\n\"He and mommy are very proud of me,\" Emily stated. \"They say it all the time.\" \n\nRory raised an eyebrow and shook his head then smiled at the waitress. After he gave the lady their orders he asked Emily what that was all about. \n\n\"Shh, we're undercover, Mr. H,\" She told him quietly. \n\n\"We are huh,\" Rory asked. \n\nShe nodded then glanced around the dining area as if to see if they were being watched. Rory chuckled and slid the crayons across to her so she could color on her placemat while they waited for their food. Emily opened them up and started to carefully color while Rory looked around the restaurant. He saw several women glancing in their direction. Most smiled before looking back at their meals but a few let their eyes linger as if trying to figure out if he was a single father. He nodded at a few of them then turned back to Emily. \n\n\"So about our mission today Miss Em,\" He began and she looked up eagerly. \"We're to infiltrate the aquarium and determine if the fish are happy with their accommodations.\" \n\n\"We're going to the aquarium?\" She asked excitedly. \n\n\"Now, it could be a dangerous case but since you have our disguises in place today, we should be fine,\" He told her. \n\nShe smiled wider at Rory's acceptance of her little ruse with the waitress. \n\n\"Okay dad,\" She said with a wink. \"I've got it!\" \n\n**** \n\nIt was seven fifteen when Rory's doorbell rang. \n\n\"Sounds like your mom forgot that she has a key, Em.\" He told her as he wiped his hands off with a dish towel. \"I'm leaving you in charge of the kitchen while I let your mother in.\" \n\n\"Got it,\" Emily announced. \n\nHe and Emily had been working hard on dinner. Well, Rory was working hard while Emily added the spices he had set out for her. He opened the door and a haggard-looking Ashley greeted him with a forced half smile. \n\n\"You know, you can just let yourself in anytime you want or was your day so bad that you forgot I gave you a key?\" He asked. \n\n\"Yes I know and you have no idea,\" She sighed but put a genuine smile on when Emily ran up to her. \n\n\"Mommy!\" She shouted and jumped into her arms. \n\n\"Hey baby, did you have a good day?\" Ashley asked as she hugged her. \n\n\"Uh huh,\" Emily nodded as she returned the hug. \n\n\"Do you have all your stuff together? I forgot to stop and get us something to eat so we've got to hit a drive-thru before we head for home,\" Ashley said but Rory took her by the shoulder and steered her inside. \n\n\"No, you have to sit down, take off those heels and let your daughter tell you about her day. Dinner will be ready in about ten minutes, \"He informed her as he pointed towards the couch. \n\n\"Rory, we've imposed on you enough today,\" Ashley tried to argue. \n\n\"Red or white,\" He asked ignoring her argument. \n\n\"What,\" She asked confused. \n\n\"Red will help you relax,\" He decided. \"It'll pair well with the salmon too.\" \n\n\"Rory...\" She tried to argue again but Emily was already tugging at her coat. \n\n\"Come on Mommy,\" Emily said. \"We worked hard on dinner and I've got to tell you about my day.\" \n\nRory gave Ashley a smile then ducked into the kitchen while Emily crawled into her mom's lap where she started telling her about their adventure. Rory reappeared a few moments later with a half filled glass of red wine. \n\n\"So you worked hard on dinner huh?\" Ashley teased Emily. \n\n\"Uh huh,\" She answered. \"Uncle Rory had me measure out all the seasonings myself.\" \n\n\"And you did a wonderful job of it. Just like today at Lauper's,\" He complimented her. \n\n\"We went to Lauper's for breakfast and I had so many pancakes that I almost burst!\" Emily said as he handed Ashley the glass of wine. \n\n\"I really shouldn't,\" She argued but her hand reached out for it anyway. \n\n\"You really should. More than one probably but we'll see, for now, start with this,\" Rory told her. \n\n\"I'm not a huge fan of you being right, you know that don't you?\" She playfully glared at him. \n\n\"Yes dear,\" he quipped as she took the glass. \n\n\"Mommy, I was talking about pancakes,\" Emily stated wanting her mother's full attention. \n\n\"Yes dear,\" Ashley echoed then laughed as Rory retreated back to the kitchen to check on dinner. \n\n****\n\n\"So then we went to, what did they call it Mr. H,\" Emily asked as he placed bite sized pieces of salmon steak on her plate.\n\n\"Behind the scenes,\" He told her. \"Careful, it's still hot.\"\n\n\"Behind the scenes where they showed me how they get the fish in the tank and I got to help feed them!\" Emily said excitedly.\n\n\"You had a really big day, Em!\" Ashley said matching her daughter's excited tone.\n\n\"Uh huh it was a lot of fun,\" Emily answered then took a bite of her salmon.\n\n\"I'll never be able to repay you for all this,\" Ashley grumbled jokingly. \"Spoiled rotten by Mr. H should be your next mystery.\"\n\n\"That's no mystery, mommy,\" Emily laughed happily.",
        "\"The only mystery is why you think that you have to repay me for any of this,\" Rory stated.\n\n\"Let's see. Because you always tell me yes when I call you up at the last minute, to take Em, then act like I'm the one doing you a favor for bringing her over,\" Ashley started listing.\n\n\"How would our detective agency survive if you didn't, Ashley?\" Rory chuckled.\n\n\"The Em and H Agency,\" Emily announced proudly.\n\n\"It's H and Em, little lady. Age before beauty and all that,\" he playfully argued with her.\n\n\"Then there's that,\" Ashley sighed. \"We run into you at the grocery store and you turn it into some grand adventure for Em so now we have to drag you along every time we go back!\"\n\n\"It's not like I don't have to buy groceries Ashley and if Miss Em and I get to have an adventure while shopping that's just a bonus,\" Rory told her.\n\n\"It takes you twice as long to get your shopping done,\" She argued.\n\n\"As long as Reg doesn't find out that I'm wasting valuable writing time, I'm fine. He joked.\n\n\"Yeah, I can see myself trying to explain it to him.\" She laughed then mimed talking into her phone. \"Reg, he puts my little girl into his cart and they walk around the store analyzing what's in people's carts while they make up stories about what their lives are like. It's so their detective agency can thrive. No, I'm not on any medication. Why do you ask? Hello?\"\n\n****\n\nAs Rory started to clean up the table, Emily pulled her mom back to the couch to continue telling her of today's adventure. He was storing the leftovers when he felt a tug on his pants leg.\n\n\"Mommy fell asleep,\" Emily whispered.\n\n\"She did huh,\" Rory asked also in a whisper.\n\nShe took his hand and led him into the living room where Ashley was curled up on his couch snoozing away. Rory ran through his options, he could wake her and send her home but he's wary of putting her behind the wheel if she was that tired. He could try to get her into his car but then he'd have to go digging around in her pockets for her keys and he couldn't see that going over very well. It left him with only one real choice.\n\n\"Looks like you're having a sleep over, Em.\"\n\n****\n\n\"You remember where all your overnight stuff is right?\" He asked.\n\n\"Uh huh,\" Emily answered with a yawn. \n\nEmily and Chloe had spent several nights with him, so Emily had the essentials that she needed already there.\n\n\"Okay, get upstairs and get ready for bed. I'll get your mom up,\" He told her.\n\nEmily headed towards the stairs as he reached down to try to shake Ashley awake. Rory called her name but she only mumbled something that couldn't be deciphered.\n\n\"Well, I could just leave you here or,\" he knelt down and scooped her up into his arms. \"She's either surprising light or my workouts are paying bigger dividends than I thought.\"\n\nAgain, she mumbled something before putting her arms around his neck. \n\n\"You're either really enjoying this or that wine hit you hard,\" He chuckled.\n\nShe didn't answer except for a little snort in her sleep. He shook his head as he carried her upstairs to his bedroom.\n\n\"Mommy's sleeping in here?\" Emily asked as she watched him pull an extra set of sheets from his closet.\n\n\"You are too Em,\" he informed her. \"I'll be in Chloe's room in case you need anything tonight otherwise hop on in and give your mom some cuddles.\"\n\nEmily carefully gets onto the bed and cuddles to her mom's back. \n\n\"She's still in her clothes,\" She pointed out. \"You can't sleep in your clothes.\"\n\n\"We're making an exception to that rule for your mom, Em. She doesn't have any pajamas here. Did you brush your teeth?\" he asked hoping to avoid any more questions.\n\n\"Uh huh,\" Emily yawned again and he could smell her minty breath.\n\n\"Great job, Miss Em, now off to dreamland.\" he told her as he pulled the sheet over them both.\n\nAs he exited his bedroom he wondered just how he's going to fit himself onto Chloe's small princess themed bed.\n\n****\n\nAshley slowly began to stir when her nose picked up the smell of cooking bacon. \n\n\"Mmm, somebody's makin' bacon,\" She murmured as she rolled over then drifted off back to sleep for another minute. \n\nSuddenly she sat up. \n\n\"Who's making bacon?\" She wondered. \n\nAs she looked around she realized that she wasn't in her bedroom. \n\n\"Oh no,\" She sighed.\n\nEmily opened the door at that moment, a huge grin appearing on her face when she saw her mother awake.\n\n\"Mommy, you're up,\" She cried excitedly as she launched herself at the bed.\n\nAshley caught her in mid flight and gave her a hug.\n\n\"Morning baby,\" She said stroking her hair.\n\n\"Mr. H sent me on a mission to wake you up because breakfast is almost ready,\" Emily informed her.\n\n\"I owe, I owe, it's off to breakfast I go,\" Ashley muttered.\n\nAs she slid out of bed she noticed that she's fully clothed. \n\n\"Em, how'd I get to bed last night?\" She asked.\n\n\"I think Mr. H carried you up here. You were really out of it, Mommy. I was brushing my teeth like I'm supposed to,\" Emily answered.\n\n\"Of course he did,\" She sighed allowing Emily to lead her downstairs. \"How'd you sleep Em?\"\n\n\"You moved around a lot but I slept okay.\" She answered.\n\n\"So you slept with me,\" Ashley asked a little surprised.\n\n\"Uh huh and Uncle Rory slept in me and Chloe's princess bed. I bet he looked so silly!\" She giggled.\n\n\"I imagine that he did,\" Ashley agreed with a giggle of her own.\n\n****\n\n\"Did you manage to get Sleeping Beauty awake, Em,\" Rory asked when he heard someone enter the kitchen behind him.\n\n\"Sleeping Beauty is awake and Scooby got your intrepid Miss Em, Mr. H, coffee, please,\" Ashley answered as she takes a seat at the island counter.\n\nHe nodded and passed her a cup.\n\n\"Morning,\" Rory greeted her cautiously.\n\n\"Pour first, then talk,\" she told him.\n\nHe poured, passing her the sugar and creamer that he kept on hand for her and Ellie.\n\n\"Mmm,\" She sighed after taking a sip. \"Now would you like to explain how I ended up in your bed last night?\"\n\n\"You fell asleep,\" He answered then when he noticed her glare he continued. \"You were on the couch and I was going to wake you but then you'd have insisted on going home. That wouldn't have been a great idea you know, between the wine and how tired you already were. Emily's stayed here often enough to have overnight stuff so I figured that it'd be best if you both just stayed here.\"\n\n\"Uh huh,\" she responded and took another sip. \"You didn't think you should wake me up and ask my opinion on the matter?\"\n\n\"I tried but you were really out of it,\" He defended.\n\n\"Flip your bacon,\" She stated pointing at the forgotten strips sizzling away in the pan.\n\n\"Thanks,\" He murmured as he flipped the nearly ready strip. \"Where was I?\"\n\n\"About to manhandle me up to your bed, Mr. H,\" she answered and he almost choked on his own spittle.\n\n\"That did not happen,\" He defended.\n\n\"Well I didn't walk up there on my own and I know Em didn't carry me up so that only leaves you, Mr. H,\" She informed him.\n\n\"Yes but I didn't... I mean I was... there was no manhandling. I simply carried you upstairs, Ash,\" He stammered.\n\n\"To your bed,\" She pointed out.\n\n\"It's bigger than Chloe's and I wanted to put Em with you so you'd know that I didn't do anything improper while you were asleep,\" He stated.\n\n\"I just have one thing to say to you,\" She grumbled sounding as if she was about to rip him a new one. \"And that is that you, Mr. Harrison, you... are fun to mess with.\"\n\n\"Ashley, I'm sor... wait, what did you say?\" He asked.\n\nInstead of answering she started laughing.\n\n\"I'm going to burn your toast just for that.\" He scolded her.\n\n\"No you won't,\" She managed to say between laughs.\n\n\"He won't what mama,\" Emily asks as she came in to see what all the laughter is about.\n\n\"The chef here was threatening to burn my toast,\" Ashley explained.\n\n\"Your mother wasn't playing nice, Em,\" He defended.\n\n\"Mommy, play nice. Mr. H, don't burn anything,\" Emily ordered precociously which started a whole new bout of laughter from all of them.\n\n\"I know we agreed that I owe you chili for watching Em yesterday. I can't imagine what I'll have to cook up for last night's dinner, the bed and now breakfast too.\" Ashley stated as he added more strips of bacon to the pan.\n\nEmily, having snagged a ready piece of bacon, retreated back to the living room to watch more cartoons until it was time to eat. Ashley also snagged a piece of bacon which caused Rory to smile.\n\n\"Well, since you mentioned it,\" He began, suddenly nervous so he flipped the bacon more than he needed to.\n\n\"It's bacon, Rory, not a gymnast.\" She joked.\n\n\"Yeah sorry,\" He apologized. \"I want to ask you something, well Ellie thinks I should ask you but I'm not sure I should but you keep saying that you want to pay me back. Not that you owe me anything, I hope I've made that clear. It's just that...\"\n\n\"For a guy that makes his living writing you sure have a tough time with words sometimes,\" She pointed out with a playful grin. \"Just ask me whatever you want to ask me, Rory.\"\n\n\"Okay, there's a party in a couple of weeks. Some big New Year's charity thing thrown by the mayor and Reg has told me that I'm required to attend. I can bring someone and I was wondering if you'd like to go... with me. Like a date,\" He asked.\n\nShe looked at him for a solid minute then said, \"So this was your plan all along huh? Get me to owe you so many favors that I couldn't possibly say no to a date with you, is that it?\" \n\n\"What? No, of course you can say no. Are, are you saying no?\" He asked worriedly.\n\n\"I'm teasing you, Rory,\" She smiled at him. \"I would love to be your plus one to your charity thing. It's been awhile since I had an occasion to get all dressed up.\"\n\n****\n\nAfter breakfast, Ashley insisted on helping to clean up so they parked Emily at the table with her coloring books while Rory washed the dishes and Ashley dried them.\n\n\"I can't believe you were nervous about asking me,\" Ashley giggled at him as he handed her the frying pan.\n\n\"After you raked me across the coals for your amusement over last night, I'm surprised I can speak at all,\" He told her.\n\n\"It was funny,\" She stated giggling as she dried.\n\n\"It was a little funny and of course I was nervous. You're a beautiful woman, Ashley.\" He answered noticing that the pan slipped from her hand a bit when he called her beautiful.\n\n\"Rory, you're a good looking guy who's also famous and not to mention rich. There's no reason for you to be nervous about asking anyone out, me least of all,\" She recovered.\n\n\"Because of all the favors you mean,\" He asked.\n\n\"I'm sure that's part of it, you do make it hard to tell you no. I am being forced to make you chili on Monday.\" She joked.\n\n\"I like chili,\" Emily shared from the table.\n\n\"That's good because we're having it Monday night in honor of Mr. H and all his heroic bravery yesterday,\" Ashley laughed.\n\n\"What about today?\" Emily asked.\n\n\"Well I'm going to help him finish up the dishes then you and I are going home so I can take a shower and change clothes. After that, we'll see what adventures you and I can get into today. How's that sound,\" She asked.\n\n\"Great!\" Emily enthused.\n\n\"Are you up for a day of adventuring, Rory,\" Ashley asked.\n\n\"As much as I'd love to, I need to get some writing done today or Reg will have an aneurysm,\" He told her.\n\n\"We can't have that and I can't wait to read your next chapter so we'll leave you to it, Mr. H.\" Ashley stated then, after she made sure that Emily was occupied, she leaned up and kissed his cheek. \"That was for yesterday, Rory. Thank you for everything.\"\n\n\"Anytime, Ashley,\" He said. \"You know that by now.\"\n\n\"I do,\" She nodded then leaned up and kissed his other cheek.\n\n\"What was that one for?\" He asked smiling at her.\n\n\"For calling me beautiful,\" She smiled back. \"It's been a long time since I've been called that.\"\n\n\"I highly doubt that,\" He told her.\n\n\"Then it's because I like it when it comes from your lips,\" She corrected. \"How's that?\"\n\n\"Nearly perfect,\" He chuckled.\n\n****\n\nThe week before Christmas, Rory headed to the mall to grab the last few gifts he needed to complete his list. At around lunchtime he headed into Victoria's Secret looking to surprise Ashley.\n\nThe girl at the counter perked up as he approached.\n\n\"Hello, how can I help you today?\" She asked with a huge smile plastered on her face.\n\nRory looked down at her name badge that she was wearing close to her very exposed cleavage.\n\n\"I'm not sure if you'll be able to, Janice,\" He said to her.\n\n\"I'm sure that I can, sir,\" She assured him as she pushed her boobs together even more. \"Are you looking for some lingerie for your... wife?\"\n\n\"I'm not married. It's for a friend,\" He answered her.\n\n\"Close friend,\" she asked flirtatiously.\n\n\"Just a friend,\" He answered then with his own smile added, \"for now.\"\n\nShe looked around to make sure there's no one close by then whispered. \n\n\"Well if she happens to be my size, I could help you out by trying stuff on for you. Make sure that you'll like how your friend will look in it.\"\n\n\"Hmm,\" he tapped his chin as if thinking over the offer when in the mirror behind the counter, he spotted Ashley emerging from the back, her arms full of boxes.\n\nHe turned and nodded towards her.\n\n\"Actually, she's more my friends size. Do you think she'd be willing to try some stuff on for me?\" He asked with a grin.\n\nJanice laughed.\n\n\"Miss Perfect there would never do such a thing,\" She told him.\n\n\"I'll bet you that I can get her to go out to lunch with me,\" Rory said with a wink.\n\n\"Why waste your time on her when you have a sure thing right here already,\" She asked him.\n\n\"I like a challenge,\" He smiled at her then walked over to where Ashley was working.\n\nShe had her back to Rory as she restocked a display of pajama pants.\n\n\"The sales girl at the counter said you might be able to help me out,\" He stated keeping his voice low so she wouldn't be able to easily recognize it.\n\nHer shoulders sagged for a moment before she straightened herself, put on a fake smile on her face and turned.\n\n\"How may I help... Rory,\" She asked as she saw him there smiling at her.\n\n\"Shh,\" he whispered, \"I bet your coworker Janice that I could get you to go out to lunch with me. She said that would never happen.\"\n\n\"I'll bet that's not all she said.\" Ashley huffed but then smiled over at the staring Janice.\n\n\"She offered to model some lingerie for me,\" Rory added.\n\n\"Of course she did.\" She sighed. \"So why aren't you taking her up on that offer.\"\n\n\"She's not my friend's size,\" He chuckled.\n\n\"Your friend huh,\" Ashley smiled. \"Let me guess just who this friend of yours is.\"\n\n\"Well you did have to spend that one night in your work clothes. I'd like to be prepared for the next time,\" He answered her.\n\n\"It's so cute that you think there will be a next time and a little forward of you to think I'm going to slip into some sexy lingerie if I'm staying the night at your place, Rory,\" She teased him.\n\n\"A little forward of you to think I wasn't going to buy some pajama pants and top,\" he responded.\n\n\"Uh huh, sure you were.\" She playfully glared at him.\n\n\"You can't prove that I wasn't,\" He smiled at her. \"So, how about lunch?\"\n\nAshley looked over his shoulder at Janice who was smirking at her. \n\n\"Well since you were able to ask me without stumbling over your words and it'll make Janice's head spin to see me walk out of here with you,\" She smiled and took his arm. \"You're on.\"\n\nRory smiled at her, then turned and gave a gape mouthed Janice a wink.\n\n\"Janice, could you be a dear and sign me out for lunch,\" Ashley called out as she led Rory towards the entrance. \"I'll be back in a while. Bye now.\"\n\n****\n\nThey grabbed a bite at the food court and, after a bit of searching, found an empty table to sit at. As they were eating, Ashley pointed towards the bags at Rory's feet.\n\n\"Dare I even ask,\" She stated after taking a sip of her tea.\n\n\"It's not sexy lingerie for my neighbor if that's your concern.\" he joked.\n\n\"It wasn't until your eyes lit up so now it's my only concern,\" She laughed.\n\n\"I don't have her measurements,\" he assured her.\n\n\"Smart ass,\" She sighed. \"Did you stay within the budget I allotted you at least?\"\n\n\"Yes, I did manage to do that,\" He answered.\n\n\"Wow, you really don't want me to back out of this New Year's date huh,\" She teased him.\n\n\"I'm asking Janice to model some lingerie for me when we get back to your store,\" He told her and received a kick to his shins from under the table.\n\n\"She isn't your  friends  size,\" She stated as he rubbed his shin. \"You earned that bruise, Rory.\"\n\n\"I was only kidding,\" He told her.\n\n\"Sure you were but there's no way I'm letting her steal my New Year's date. Even if I have to get a new dress for it,\" She said with a twinkle in her eye as she wagged her finger at him.\n\n\"I wouldn't dream of replacing you, Ashley,\" He assured her.\n\n\"You'd better not! My ass is much nicer than hers anyway,\" She quips and he nearly spits his soda across the table. \"Well it is.\"\n\n\"I wouldn't have any idea.\" he coughed out.\n\n\"You'll just have to trust me on that,\" She grinned wickedly at him. \"I know how much you like mine. You're always trying not to stare at it and failing miserably.\"\n\n\"And you're still willing to go out with me?\" He asked her.\n\n\"I think it's kind of cute that you like to look,\" She admitted then changed the subject. \n\n\"I've got to get back to work. Walk me back so I can see the look on Janice's face.\"\n\nJanice was staring wide eyed as the couple walked back into the store holding hands. Ashley thought for a quick second then threw caution to the wind, leaned up and gave Rory a brief kiss on his lips.\n\n\"Thanks for lunch, handsome,\" She said loud enough for Janice to overhear. \"We will definitely be doing it again soon.\"\n\nRory was surprised by the kiss but not enough that he forgot to watch her ass as she walked towards the counter where Janice stood with her mouth wide open in shock. Ashley put an extra sway in her hips as she practically strutted away from Rory. Of course she looked back and caught him looking but to his surprise she smiled then blew him an air kiss. He smiled, gave her wave then left the store.\n\n\"What in the world was that?\" Janice asked once she found her voice.\n\n\"Lunch,\" Ashley answered her.\n\n\"Uh huh,\" Janice said as she saw the smile on Ashley's face. \"And just what did you eat for lunch? I'm thinking that it was him!\"\n\n\"It wasn't,\" Ashley answered. \"Not yet anyway but he does make me feel nice.\"\n\n\"Nice? Nice?\" Janice asked. \"You strutted away from him, caught him staring at your ass then blew him a kiss. Nice is the least thing that man makes you feel!\"\n\n\"Isn't it your lunch time?\" Ashley said and did her best not to blush.\n\n\"Maybe but it won't be nearly as fun as yours obviously was!\" She answered.\n\n\"It was quite fun,\" Ashley smiled then felt the inkling to put the screws to Janice just a little. \"I wonder if our dinner will be as much fun?\"\n\n\"Wait... you... he... Dinner?\" Janice stammered.\n\n\"Well he did forget to buy his friend some pajamas didn't he?\" Ashley teased. \"It's only fair that I make him dinner and deliver some pajamas to him, isn't it?\"\n\n\"Who are you?\" Janice shook her head.\n\n\"I'm just me,\" Ashley answered but thought to herself. \"The me that's been hiding for far too long.\"\n\n****\n\nChristmas Eve arrived with the first snow of the season. A few inches covered the ground in a blanket of white by the time Rory headed over to Ashley and Emily's for dinner. He kicked the snow off his boots before he rang the doorbell.\n\n\"Hey, Rory, right on time as usual,\" Ashley said as she opened the door. \"Is it still snowing?\"\n\n\"It stopped about fifteen minutes ago,\" He informed her. \"I think we got another inch at least.\"\n\n\"Did you have any trouble on the roads?\" Ashley asked as she took the gift bags from his hands.",
        "\"It's slick getting into your neighborhood but other than that I didn't have any trouble,\" He responded shrugging off his coat.\n\n\"I heard from Ellie a few minutes ago. She and Chloe aren't going to risk coming over. We'll get together with them tomorrow if they plow the roads by then,\" She told him.\n\n\"Just us then?\" He asked as he hung up his coat.\n\n\"Just Miss Em, Mr. H and their Girl Friday for Christmas,\" She laughed.\n\n\"Where is the intrepid Miss Em?\" he asked as he followed her inside.\n\n\"On the phone with her dad,\" She told him. \"Come help me in the kitchen, she'll be off in few minutes.\"\n\nHe followed her into the kitchen and accepted the spoon she held out to him. \n\n\"Stirring duty again huh,\" He chuckled.\n\n\"You only have yourself to blame. Don't forget all the times I've watched you stirring my chili that you love so much. You've become a professional stirrer,\" She laughed.\n\n\"So you're saying that you watch me,\" He laughed.\n\n\"I have to, otherwise you'd eat all of it and Em and I would starve to death,\" She retorted with a nudge of his arm.\n\n\"That's not true,\" Rory argued then smiled. \"Okay, well it's partially true but I'd order you guys a pizza or something first.\"\n\n\"Pizza?\" Emily asked as she joined them in the kitchen. \"I thought we were having turkey?\"\n\n\"We are Em,\" Ashley answered. \"Is your dad off the phone?\"\n\n\"He wants to talk to you,\" Emily told her then handed her back her cell phone.\n\n\"Keep an eye on Mr. H and make sure he doesn't eat it all up before I'm back,\" Ashley teased.\n\n\"I'm on the case,\" Emily announced with a giggle.\n\nAs Ashley excited the kitchen Rory overheard her side of the phone call. \n\n\"Yes, Colin, we're having dinner with Rory. Yes, again. Colin, don't start that again...\" \n\nThe closing door cut off the rest of the conversation but it didn't sound good from Rory's point of view.\n\n****\n\n\"Everything okay,\" Rory asked when she returned a few minutes later. \n\nShe took a moment to check the turkey before she spoke and the gravy that he was still stirring. \n\n\"We should be ready in about fifteen minutes. Em, do you want to go play in the snow before we eat?\" Ashley asked as she set everything on low. \n\n\"YES,\" Emily screamed then took off to get her coat and boots on. \n\n\"Want to talk about it,\" He asked Ashley once Emily was out of the room. \n\n\"Not really,\" She sighed then managed a smile. \"Come on, let's go make a snowman with Em.\" \n\n\"Fine but I'm not singing the song. Your neighbors will thank you if I don't.\" He joked. \n\nEmily waited patiently for her mom and Rory to get their winter gear on, well as much as an eight-year-old can be patient when there's snow on the ground. She was practically bouncing in her snow boots as Ashley and Rory pulled on their coats, gloves and boots. Once outside she and Rory started working on snowman construction as Ashley snapped some pics with her cell phone. Rory was rolling out the base for the snowman under Emily's watchful eye when a snowball exploded on his back. \n\n\"Hey,\" He shouted turning to see Ashley's smiling, red-cheeked and guilty face. \"You just declared snow war, Ash!\" \n\n\"I just had to do it, Rory,\" Ashley giggled. \"You were the perfect target!\" \n\n\"I'll show you a perf...\" He started to say as he grabbed a handful of snow but before he could pat out his own projectile, he took another hit. \n\n\"Medic,\" he cried out staggering backward. \"Medic, I've been hit!\" \n\n\"I'm here Mr. H,\" Emily shouted out gleefully as she grabbed his hand. \n\nShe pulled him down to a crouch then launched her own devious attack by smashing him with two handfuls of snow when he was at her level. \n\n\"Betrayer,\" Rory shouted snatching her up into his arms. \n\nShe began laughing as he grabbed another handful of snow then launched it in Ashley's direction. The giggling and squirming child threw his aim off and he missed badly. \n\n\"Nice throw, Rory,\" Ashley teased as she grabbed a handful of snow to reload. \n\n\"Your pint-sized saboteur is doing her job too well,\" Rory called out as he wrestled with the still squirming and giggling Emily. \n\n\"Excuses, excuses,\" Ashley laughed. \n\n\"What's a sabo-whatever?\" Emily asked cutely. \n\n\"One who practices the art of sabotage,\" he answered her with a grin. \n\n\"You're going to make me look it up aren't you,\" she asked. \n\n\"After dinner, Em, and like Rory and I showed you in the dictionary not online,\" Ashley answered. \"Speaking of dinner, it should be ready. Snow war truce?\" \n\n\"I concede the battle and your overwhelming victory over me,\" Rory bowed which caused them to laugh. \n\n\"See, Em, he is smarter than he looks,\" Ashley teased as they walked back into the house. \n\nThey spent much of the dinner chatting and laughing about the snow war. \n\n\"When are we going to finish making the snowman?\" Emily asked. \n\n\"We'll have a little time after dinner. That is if Mr. H isn't afraid to go back outside,\" Ashley said with a smirk on her pretty face. \n\n\"You're the one that should be worried, Ashley. I hear that payback is a... dish best served cold,\" he corrected himself for Emily's sake. \n\n\"That's revenge,\" Ashley teased him. \n\n\"Not until I throw the first snowball it isn't,\" He laughed. \n\n\"Sounds like the snow war truce is ending,\" Emily giggled as she pushes her fork through her mashed potatoes. \n\n\"It sure does but if you want to be a part of it stop playing with your food and eat it,\" Ashley told her. \"I have a feeling I'll need my saboteur at full strength out there.\"\n\n**** \n\nAfter the dishes were put away they once again donned their snow gear when Emily pointed at them and gleefully announced, \"Mama, you're under the mistletoe with Mr. H!\"\n\nAshley and Rory both look up then back at each other. \n\n\"Ash, we don't have to kiss,\" Rory whispered to her. \n\n\"Can't have any bad luck for the new year now can we, Mr. H,\" Ashley smiled at him. \n\nShe leaned up, closed her eyes and puckered her lips. Seeing her like that killed Rory's hesitation and he mirrored her movements until his lips touched hers. As brief as the kiss was his mind cataloged a myriad of sensations in that moment. The tenderness of her lips, the sweet taste of the dessert they had just shared and the smell of vanilla from where she was cooking earlier all hit him like a bolt from the blue. Ashley looked away quickly as they parted but he can tell that short meshing of their lips had an effect on her as well. \n\nShe cleared her throat and announced, \"That snowman isn't going to build himself you two,\" before heading out the door. \n\nRory looked down at Emily who had the biggest smile on her cute face. \n\n\"Come on, troublemaker,\" he chuckled as he took her hand and led her outside. \"Let's go finish up that snowman of yours so Santa sees it when he comes by later tonight.\"\n\n**** \n\nAfter the snowman was built to Emily's satisfaction they all headed back inside to warm up. Rory volunteered to whip up some hot chocolate while Ashley and Em checked on Santa's progress via the news. \n\n\"He's getting close,\" Emily informed him as he handed her a steaming cup. \n\n\"He is huh,\" Rory asked as he handed Ashley the other cup. \"I guess it's almost time for a certain little girl to head off to bed then.\" \n\n\"I think Santa will wait until she finishes her cocoa,\" Ashley shared. Emily nodded then took a sip from her mug before she yawned. \n\n\"I guess all the outdoor snow fun is catching up to your saboteur, Ash,\" Rory pointed out. \n\n\"It's tiring work winning a snowball fight and making a snowman all in one afternoon, Rory,\" Ashley laughed. \n\nTen minutes later Em had fallen asleep on the couch while they were watching A Christmas Story. \n\n\"Looks like we wore her out,\" Ashley whispered. \n\n\"Do you want to put her in bed while I get the stuff out of my car?\" Rory asked her as he stood up and collected their mugs from the coffee table. \n\nShe nodded and scooped up Emily in her arms. Emily mumbled something then fell right back to sleep. As Ashley tucked her in Rory went out to his car and retrieved the packages. \n\n\"Thanks again for storing these for me,\" Ashley told him while they placed the gifts under the blinking lights of her Christmas tree. \"She's at the age where she's starting to look for these and I'm out of hiding spaces.\" \n\n\"Chloe's the same and believe me, this is a lot easier than having to go out with a shopping list from Ellie telling me exactly what to buy then having to deliver them on time,\" he shared. \n\n\"Shopping in L.A. sounds like it'd be a lot of fun actually,\" She opined. \n\n\"Not when Ellie gives you the list at the last minute and you have to fight all the other last-minute shoppers,\" He shared. \n\n\"And you always came through for Chloe I'm sure,\" She teased. \n\n\"I couldn't very well let Santa down now could I?\" he asked. \n\nShe laughed and shook her head. \n\n\"Rory, about earlier,\" She began then paused as if trying to figure out what she wanted to say. \n\nHe continued filling Emily's stocking with goodies as he waited for her to complete her thought. \n\n\"The call with Colin I mean,\" She finally said. \"He's worried about you getting so close to us.\" \n\n\"How so,\" He asked. \n\n\"He tried telling me that you see Em and me as some kind of charity case,\" She sighed. \n\n\"You don't think that do you, Ash,\" Rory asked. \n\n\"I can see how it could look that way to some people but we're friends and you've never given me money for anything, though I know you would in a second if we asked,\" She said. \"That makes us friends not a charity case. Besides, I pay you in chili.\" \n\n\"It's really good chili,\" He laughed. \n\n\"As good as our kiss earlier,\" She asked with her face away from him so he couldn't see her blush as she waited for his answer. \n\n\"Not even in the same league,\" He stated without hesitation. \n\n\"Wow, you answered that really fast. I guess we might have to try that again in the future, Rory,\" She laughed. \n\n\"Remind me to buy stock in the mistletoe industry,\" He joked. \n\n\"Just keep loading the stocking  Santa  and I'll handle any mistletoe business from now on,\" She giggled. \"You just keep those lips of yours ready for the next time, Mr. H.\"\n\n**** \n\n\"You're late,\" Ellie whispered as she held open her door so Rory can enter with arms full of Santa's gifts for Chloe. \n\n\"I had to let Ashley give these a once over to make sure we didn't get Emily and Chloe's presents mixed up,\" he quietly explained. \n\n\"I hate that we couldn't make it tonight but my little car doesn't do snow,\" She shared as she escorted him to the living room. \n\n\"I could have picked you up, El. All you had to do was call me,\" He told her. \n\n\"You can pick us up and take us over tomorrow,\" She told him. \"I thought that you could use a little time with Ashley. By the look of things, I was right.\" Rory noticed Ellie staring at him with a wide smile. \n\n\"What's that look for?\" He inquired. \n\n\"That's not a shade of lipstick I would have chosen for you,\" She giggled. \"I mean it looks good but I'm guessing it looks better on Ashley.\" \n\n\"There was mistletoe and Emily caught Ashley and I under it,\" He told her. Ellie says nothing but the smirk on her face speaks volumes. \n\n\"That's all it was, Ellie. It was very brief,\" he continued explaining. \n\n\"Hey, I'm not judging. You're single, she's single and I've told you repeatedly that you should just go for it with her,\" She told him. \n\n\"We're just friends and we're going to the New Year's thing as just that. I'm not sure either of us are looking for more right now,\" He sighed. \n\n\"You need to move on from that little Hollywood bitch,\" She grumbled \n\n\"I think Ashley deserves to be more than a rebound fling,\" Rory argued and Ellie laughed. \n\n\"Rory, you're not that type of guy and Ashley knows that. Anything that happens between the two of you won't be because of your ex or hers,\" She told him. \"How can she even be a rebound anything anyway? It's been like six months or more since you broke up.\" \n\n\"I don't know the time limits on these sort of things,\" Rory admitted as he knelt by the tree to arrange Chloe's gifts. \n\n\"Three months,\" Ellie answered. \"You're all good on the rebound, not a rebound front.\" \n\n\"Oh, you're the expert huh,\" Rory chuckled. \n\n\"Yep,\" Ellie answered with confidence. \n\n\"Speaking of ex's, Ash's was on the phone when I got there,\" Rory reported. \"He was talking to Em then he spoke with Ash about me. He warned her that I thought they were a charity case.\" \n\n\"What did Ashley say to that?\" She asked. \n\n\"That she could see how people might see it like that but she knows that we're friends and I don't treat them like that,\" He told her. \"She also pointed out that she pays her way with chili.\" \n\n\"I think you love the company far more than you can love any chili she cooks for you,\" Ellie giggled. \n\nWhen he couldn't come up with a compelling argument he tossed Chloe's empty stocking at her. \n\n\"Just fill the stocking, sis.\"\n\n**** \n\n A few days before New Years Eve  \n\n\"Ellie, this is way too much!\" Ashley insisted as she looked at herself in the full-length mirror in the dressing room. \n\nShe, Ellie and Tara had all gone out shopping for a new dress for Ashley's New Year's Eve date with Rory. \n\n\"Nonsense, Ash,\" Ellie called back. \"I've got Rory's credit card and he said for you to get whatever you wanted.\" \n\n\"I want to wear that dress that I got last year,\" Ashley called back. \n\n\"No way, Ash,\" Tara said. \"You cannot go to a party at the mayor's house without a new dress.\" \n\n\"One that will knock everyone dead as soon as they see you in it,\" Ellie added. \"So come out here and let us see you in it!\" \n\n\"Yeah,\" Tara said. \"Get your butt out here before we start chanting your name and cause a big scene.\" \n\n\"You wouldn't dare,\" Ash cried out. \n\n\"Ash-ley. Ash-ley. Ash-ley,\" Tara started. \n\n\"All right fine!\" Ashley told her. \n\nShe pulled open the dressing room door and stepped out in front of her friends. \n\n\"Oh wow!\" Tara exclaimed as her mouth fell open. \n\nEllie smiled then quickly waved over a salesperson. She pointed at Ashley then at the credit card in her own hand. \n\n\"Grab the tag off that dress and charge it to this,\" She told the woman. \n\n\"Ellie, it's...\" Ashley started to protest. \n\n\"Perfect,\" Tara jumped in. \n\n\"Exactly,\" Ellie said then stepped over and removed the tag from the dress. \"Oops, we gotta buy it now.\" \n\nThe saleswoman smiled, took the tag and the card then hurried off towards the register before Ashley could argue. \n\n\"Get changed, Ash,\" Ellie grinned at her friend. \"Because now we have to find shoes and a purse to go along with that spectacular dress!\" \n\n\"And lingerie!\" Tara giggled. \"She'll need some sexy undies for a dress like that.\" \n\n\"I'm not sure I can even wear any in a dress like this,\" Ashley grumbled. \n\n\"Ooo, even better,\" Tara laughed. \n\nAshley gave her a glare when she gave an exasperated sigh and went back into the dressing room to change. She paused at the mirror and checked herself out one more time then, with a smile, she changed back into her regular clothes.\n\n**** \n\n New Year's Eve  \n\n\"You look nice, Mr. H,\" Emily said as she answered her door. \n\nRory had arrived at their place in his tuxedo a little early just in case anyone was running behind. \n\n\"Thank you, Miss Em,\" he smiled at her. \"Have you and Chloe been having fun?\" \n\n\"We have!\" She answered enthusiastically. \"Aunt Ellie is playing board games with us!\" \n\n\"Awesome,\" He smiled at the thought of his sister having to endure several rounds of Monopoly. \n\n\"Always early huh, bro,\" Ellie giggled as Emily escorted him into the kitchen where they sat playing Monopoly. \n\n\"I hate these things,\" He grumbled as he fussed with his tie. \n\nEllie got up and straightened it with a laugh. \n\n\"Poor baby has to get all dressed up for a party,\" She teased him. \n\n\"I'd rather just spend the evening here with the girls, playing games and waiting for the ball to drop,\" He sighed. \"Not being shown off like the town's celebrated son as you called me.\" \n\n\"I think that might change your mind,\" Ellie smiled as she nodded over his shoulder. \n\nRory turned and his breath caught in his throat. Ashley had come downstairs in her dress. She was wearing a black, floor-length evening dress that had a slit that showed off one of her incredible legs. Her toned shoulders were bare as it was an off the shoulder dress and hinted at just a taste of her cleavage. Her hair was worn down and she, Ellie and the girls spent some time giving it waves. \n\n\"You're gorgeous,\" Rory said as a smile blossomed on his face. \n\n\"Thank you, Rory,\" She smiled back him. \n\n\"You clean up really nice as well.\" \n\n\"Really gorgeous,\" he repeated which caused Emily and Chloe to giggle at him while Ellie shook her head. \n\n\"I think you broke him, Ash,\" Ellie commented with a grin. \n\nAshley smiled as she walked over to Rory and cupped his cheek lovingly. \n\n\"He just needs a minute, El,\" She told her. \"Don't you, Mr. H.\" \n\nRory felt the warmth of her touch on his skin and he nodded before he found his words. \n\n\"Shall we?\" He asked and offered her his arm. \n\nShe hooked his arm with hers in answer then turned to Emily. \n\n\"Be good for Aunt Ellie, Em,\" She told her. \n\n\"I'll be extra good,\" Emily answered then winked at Rory. \n\nAshley looked at Rory and caught him wink back but she let it lie as she gave her a kiss on her forehead while telling her goodnight. She copied the kiss on Chloe's forehead then it was Rory's turn with the two little ones. After that the pair headed out to the waiting car that was sent for them by Reg. Rory had tried arguing that it was a small town and he didn't want to roll up looking like some kind of big shot but Reg had assured him that he wasn't being singled out. All of the guests were going to arriving in a similar fashion so Rory reluctantly agreed. He had to admit that it was a nice ride.\n\n**** \n\nWhen the car pulled up to the mayor's mansion, true to Reg's word, they were third in a line of similar car's that were dropping off guests. \n\n\"It's like a Hollywood premiere,\" Ashley commented as she saw a few of the local news stations were doing live shots from the event. \n\nRory agreed as their driver pulled to a stop and the attendant opened the door for them. Rory stepped out first then turned and helped Ashley out. Ashley flushed slightly when she heard the attendant mumble out  wow  as he saw her. She took Rory by the arm and followed his example as he gave a slight wave toward the cameras. They climbed the stairs and Ash had never felt more self-conscious as the slit in her dress showed a lot more leg as she ascended the stairs. \n\n\"Gorgeous,\" Rory whispered into her ear when he felt her tighten her grip on his arm. \n\nShe smiled and gave his forearm an appreciative pat just as they reached the mayor and his wife. It took the mayor a second to recover and pull his eyes off Ashley before he greeted them. \n\n\"Welcome, Mr. Harrison,\" Mayor Keith greeted them cheerfully. \"We are so glad that you were able to attend our party.\" \n\n\"We wouldn't have dreamed of missing it, Mr. Mayor,\" Rory said with a wide smile. \"Thank you ever so much for inviting us. May I present my date, Ms. Ashley Spencer.\" \n\nHaving played the Hollywood game, he was well versed in how to schmooze when it was necessary. He shook the mayor's offered hand then received an impromptu hug from the mayor's wife. \n\n\"Sorry, I'm just such a huge fan,\" She explained as she stepped back beside her husband. \"I'm hoping to manage to get a preview of your next book out of you before tonight is over.\" \n\n\"You're going to love it,\" Ashley commented as she stroked Rory's arm possessively. \n\n\"You've read it?\" The mayor's wife asked her as she noticed Ashley marking her territory. \n\n\"I was once told that I was his kryptonite so I decided to see if that was an accurate statement,\" Ashley laughed. ",
        "She reached out and took Ashley by the hand. \n\n\"In that dress, I imagine that you are every man's kryptonite,\" She said with her own smile. \"You simply must tell me everything about the new book and how you learned his weaknesses.\" \n\n\"Dear, we do have a few more guests to greet,\" Mayor Keith chuckled as he nodded towards another couple ascending the steps. \n\n\"I will find you inside during the party then, my dear,\" She said and she patted Ashley's hand then leaned in and whispered. \"I know where all the good booze is.\" \n\nAshley giggled conspiratorially with her and whispered back, \"That sounds like a lot of fun. I will definitely be on the lookout for you inside then.\" \n\nThey smiled and nodded then turned to greet the next set of guests as Rory led Ashley inside the large house.\n\n**** \n\nInside Rory grabbed them a pair of champagne flutes as they mingled with the other guests. \n\n\"No one can take their eyes off of you,\" He whispered to her. \n\nShe gave him a playful nudge as she looked around the room. There were several men that were giving her appraising looks and a few women as well even though they themselves were looking extravagant. \n\n\"I can think of one person that can. You wouldn't have noticed all these looking at me if you hadn't taken your eyes off me,\" She teased him. \n\n\"I've taken a lot of mental pictures ever since I laid eyes on you this evening,\" He told her. \n\n\"Mental pics huh,\" She smiled at him. \"I'm going to have to keep my eyes on you tonight, Mr. H.\" \n\n\"Shouldn't be a problem,\" He chuckled. \"I doubt that I'll be able to let you out of my sight. There's too much competition here.\" \n\n\"My mom always told me to stick with the one that brought you so you are stuck with me, Rory,\" she said. \n\n\"I love being stuck with you, Ash,\" He said as he gave her a smile. \n\n\"We are going to need more champagne if you plan to keep flirting with me tonight, Rory,\" She commented with a smile of her own. \n\n\"Good thing your new friend knows where the good booze is kept then,\" Rory laughed. \n\n\"Heard that did you,\" Ashley asked. \"Don't worry, Rory, I won't tell her all about your new book. Just the juicy parts.\" \n\n\"There aren't any,\" He argued. \n\n\"Not yet there's not,\" She smiled, \"but they're coming. I can tell.\" \n\n\"They are, huh,\" He asked with raised eyebrows. \n\n\"Guaranteed,\" She told him. \n\nBefore he could refute her the mayor and his wife walked up to them. She took Ashley by the hand and gave me a smile. \n\n\"I need to have a chat with your gorgeous date now,\" She said to Rory. \"I'll have her back to you soon, I promise.\" \n\nShe didn't wait for a reply as she gently tugged Ashley towards a side room. Mayor Keith patted Rory's shoulder and chuckled. \n\n\"She is quite a woman,\" He said as he watched Ashley and his wife disappear into his study. \n\n\"I'll make sure that she gets an advance copy of my next book,\" Rory assured him. \n\n\"My wife would absolutely love that,\" He nodded with a laugh. \"I was talking about your date though.\" \n\n\"Oh,\" Rory grinned. \"Ashley is a very amazing woman.\" \n\n\"How did you two meet?\" Mayor Keith asked. \n\nRory told him the whole story much the mayor's amusement. He laughed heartily when Rory explained about his and Emily's detective agency. \n\n\"All of this because of some old swing set,\" He chuckled. \"You should write that up sometime. Women would love it!\" \n\n\"Maybe I should,\" Rory agreed.\n\n**** \n\nAshley returned ten minutes later with a flush to her cheeks. She looped her arm in with Rory's and gave him a smile when he stopped talking with one of the guests. \n\n\"You made it back,\" he said then introduced her to the person he was chatting with. \n\nAshley shook hands with the couple and chatted for a few minutes before they excused themselves. \n\n\"Did you share all of my secrets?\" He asked her once they were alone. \n\n\"Yep,\" Ashley giggled. \"I told her everything about you, Rory.\" \n\n\"You're going to get me arrested,\" He chuckled. \n\n\"I paid her off with info on your next book,\" Ashley assured him. \"I assure you that you are safe.\" \n\n\"Good to know,\" He smiled. \"Oh and we are invited over next week for dinner by the way,\" She informed him. \"She wants to meet Emily and hear all about your little detective agency.\" \n\n\"You are definitely getting me arrested,\" he laughed. \n\nThe music that had started up while Ashley had been gone caught her attention and she looked towards the dance floor. \n\n\"Do you dance, Mr. H,\" She asked already pulling him towards the dance floor. \n\n\"It doesn't seem that you're giving me much choice, Ash,\" He said with a grin. \n\n\"Nope,\" She giggled. \n\nOnce Ashley got him to the floor he twirled her around much to her surprise. He pulled her in close and led her around the floor with surprising expertise. He smiled at her shocked expression and answered the question that she had yet to ask. \n\n\"I took classes,\" He stated quietly. \"Research for...\" \n\n\"Darkness of the Hart!\" Ashley interrupted gleefully. \"The embassy scene.\" \n\n\"How do you remember that?\" He asked. \n\n\"I reread your books when Ellie blabbed who you were,\" Ashley admitted. \n\n\"And we're still friends,\" Rory joked. \n\n\"You need all the help you can get, Rory,\" She playfully giggled. \n\nHe laughed and agreed. They danced for another upbeat song before the band played something slow. Rory pulled Ashley closer to his chest and held her as they swayed to the music. Ashley's hand slid up his back to his shoulders as she laid her head against his chest. He could smell the hint of apples from her shampoo as his hands rested on her hips. When the song was ending Ashley looked up at him, gave him a brief kiss then whispered one word. \n\n\"Tonight,\" She said then pulled away and went to get a drink. \n\nRory watched her go, still admiring her ass when the realization hit him of what she had just promised.\n\n**** \n\n\"Three... Two... One! Happy New Year!\" The mayor shouted as the band began to play. \n\nPeople cheered, clapped and blew party favors while couples kissed as the New Year started. Rory was looking in Ashley's bright blue eyes when the clock struck midnight. He leaned down, she leaned up and their lips met. The electricity that they felt at Christmas was even more evident with this kiss. Rory had started to pull back after a moment but Ashley held him to her as she ran her fingers through his hair. Her tongue teased against his lips for a brief moment before she herself pulled away with a smile on those lips and a fire in her eyes. Rory took her hand and started to pull her towards the door. She laughed as they made their way through the crowd and were almost to the door when they were stopped by the mayor's wife. \n\n\"Leaving so soon?\" She asked with a knowing grin on her face. \n\n\"We have... another engagement,\" Ashley winked as she told her this. \n\n\"I'll just bet that you do,\" She smiled. \"Don't forget our dinner next week.\" \n\n\"I wouldn't dream of missing it,\" Ashley assured her. \n\n\"I'll bring you a few signed copies of my books and an advance of the new one,\" Rory promised. \n\n\"I look forward to it,\" She said. \"Happy New Year to you both.\" \n\n\"And to you,\" Ashley said then hugged her. \n\nRory shook her hand then was grabbed by Ashley and led out to the waiting cars. \n\n\"His place,\" Ashley said hurriedly to their driver before pulling Rory's lips back to hers. \n\nThe driver chuckled, started the car and drove off towards Rory's place while the kissing intensified in the back seat. Rory did his best not to let his hands wander while they made out like a couple of teenagers. He didn't want to expose any parts of Ashley to their driver. Ashley didn't have any similar qualms about that as her hand rubbed up Rory's thigh until she felt his growing cock through his thin slacks. \n\n\"Ash,\" He groaned as she explored him with her hand. \n\n\"Soon, baby,\" She promised him as she continued to massage him. \n\nShe explored his length and thickness when she went back to kissing him. The driver readjusted his rear view mirror so he could occasionally glance at it and see just how hot and heavy things were going to get. He hoped that the woman would lose the dress and even slowed down to see if it would. Sadly for him, it didn't. He pulled into Rory's driveway and Ashley was already halfway out of the car dragging Rory along. Rory managed to tip the driver, not caring that his pants were tenting out obscenely when he did so. \n\n\"Have a great night,\" The driver called out with a laugh as Ashley pulled Rory towards the door of his place. \n\n\"We sure will,\" Ashley called back with her own laugh as Rory fished his keys from his pocket.\n\n**** \n\nInside he asked Ashley if she would like a drink or something but she shook her head. \n\n\"I don't want to lose the moment, Rory,\" She told him as she pulled his face back to hers and kissed him. \"Take me to bed.\" \n\n\"Ash, are you sure? I don't want you to regret this tomorrow,\" He said as he pulled back from her. \n\n\"I don't know what will happen tomorrow, Rory. All I know is that I want this. I want you,\" She told him. \n\nThat was all Rory needed to hear. He kissed her passionately, pushing her back against the wall and holding her there until she pushed him back. \n\n\"Your bedroom,\" She gasped out. \"Now!\" \n\nHe nodded and they hurried up the steps to his bedroom. After Rory closed the door, Ashley pushed him back onto his bed then told him to stay seated there. He nodded his acceptance and received a kiss and a squeeze of his cock before she turned her back to him. \n\n\"Unzip me,\" She whispered to him. \n\nHe reached up and slowly worked the dresses zipper down revealing her pale, toned back. The zipper reached the bottom and Ashley held the dress up so it didn't fall to the floor just yet. She wanted to tease him a little more so she turned back towards him then allowed the dress to slowly slip off her. Rory leaned forward in anticipation as she let the black silky material slide down revealing her full breasts. \n\n\"So beautiful,\" Rory whispered as her pink nipples popped into his view as if begging for his touch. \n\n\"I knew that tonight was the night, Rory,\" She told him sensually as she continued to let gravity slip the dress from her body. \n\nHer taut tummy was revealed next. She had worked hard to get it back after she had Emily and she had a few marks left behind that, she felt, screamed out her motherhood to everyone that saw her naked. She was self-conscious but when Rory licked his lips she let that worry drop just like her dress. She stood naked before him while he took a second to admire her body. Without a word, he pulled her to him and kissed her again. She ended up straddling his waist and became the aggressor as she tugged his shirt open losing a few buttons in the process. Her tongue danced with his as she ground her hips onto his lap enjoying the feeling of his cloth-covered erection rubbing her. She helped him shrug out of his shirt and tossed it aside as she reached down to work on his pants. \n\n\"I've got these,\" he told her between kisses. \n\nShe moved aside then lay back onto the bed while he quickly hopped to his feet. He was naked in record time and back onto the bed between her spread legs. He started to kiss his way down her neck but she brought his face back up to hers where she kissed him. \n\n\"I don't need anything fancy tonight, Rory,\" She told him. \"I just need you in me. The rest we can do later.\" \n\nHe nodded as she reached between them until she grasped his cock gently. She gave it a couple of light strokes and enjoyed the moans that simple movement dragged out of him. Finally, she centered him and moved her hips up until the spongy head of his cock rubbed her already wet slit. She didn't have to tell him to push because, as soon as he felt the slight give, he slowly moved his hips forward. \n\n\"Oh god,\" She gasped as his head popped into her. \n\nHe paused and gave her time to get used to him being inside her. It only took a few moments before her hands reached for his hips and urged him onward. He moved slowly, allowing her to open up and accept being filled by him. Her pussy wrapped around him like a silken glove and he groaned out as she used her muscles to squeeze him inside her. \n\n\"Naughty girl,\" he moaned out with a grin on his face. \n\n\"You love it,\" She told him with her own grin that turned into a moan when he bottomed out inside of her. \"I love it too!\" \n\nHe started to thrust his hips and soon she was urging him on with calls for him to go harder or faster mixed with moans, sighs and shouts of his name as she came. She felt him swell inside her so she spread her legs as wide as she could to take him as deep as she could. \n\n\"Yes, Rory!\" She shouted out when she felt his warm semen being jettisoned deep inside of her. \"Come for me!\" \n\nHe grunted and shuddered as he emptied himself deep inside of her. Ashley used her pussy to squeeze him after every pulsating shot of come which made him gasp every time she did it. Rory held himself over her on shaky arms until he was done then rolled off to the side. She rolled towards him and draped her arm and a leg over him. \n\n\"That... that was,\" He lay there gasping and tried to catch his breath. \n\n\"Yes, it was,\" Ashley giggled then kissed him for a long moment until he reached down and pulled the blanket up to cover them. \"It really was but we need to sleep now, Rory. We're going to need a lot more energy because we are going to be doing that a lot from now on.\"\n\n**** \n\n New Year's Day  \n\n\"Anybody up,\" Ellie called out as she used her key to open Rory's front door. \n\nIt was earlier than she wanted to show up but the kids were up early despite staying up well past their bedtime. Ellie was also curious to find out how the date had gone. She found her answer when she poked her head into the kitchen. Ashley was standing at the stove working on pancakes while wearing one of Rory's button up shirts and little else that Ellie could determine. \n\n\"Hey, El,\" Ashley greeted her. \"I was just about to call and give you the all clear to bring the kids over.\" \n\n\"Mama!\" Emily shouted as she ran into the kitchen and gave her mom a hug. \n\n\"Hey, baby,\" Ashley said as she returned the hug. \"Were you good for Aunt Ellie?\" \n\n\"Uh huh,\" Emily answered with a vigorous nod of her head. \"We stayed up soooo late!\" \n\n\"Not that late,\" Ellie blushed at getting busted. \n\n\"I stayed up late too,\" Ashley said. \"Now, go put on some cartoons for you and Chloe to watch while I finish breakfast.\" \n\n\"Okay,\" Emily answered then looked around. \"Where's Mr. H?\" \n\n\"He's still in bed being a sleepy head,\" Ashley giggled. \"He had a late night too so keep the volume down so he can sleep a little more okay, Em?\" \n\nEmily nodded and bounded off towards the living room passed a wickedly grinning Ellie. \n\n\"So my brother had a late night huh, Ash,\" She teased quietly. \n\n\"Uh huh,\" Ashley answered with a grin of her own. \n\n\"I can tell,\" Ellie giggled. \"You're having a very casual morning this morning, Ash.\" \n\n\"I knew I should have let him keep that set of pajamas he bought me for Christmas here,\" Ashley sighed. \"I blame you for being here so early. I was just about to drag him into the shower when we heard the car pull up.\" \n\n\"Sorry to interrupt,\" Ellie laughed. \n\n\"You should be,\" Rory said as he joined them in the kitchen. \n\nHe walked over and kissed Ashley who wrapped her arms around him which exposed her bare bottom to Ellie. \n\n\"You really need those pajama bottoms, Ash,\" Ellie told her. \n\nAshley quickly pulled the shirt down to cover herself and blushed a bright red. \n\n\"I've got a pair of my shorts out in the car,\" Ellie giggled. \"I'll go grab them for you and while Rory feeds the girls, you are going to tell me everything about last night.\" \n\n\"El,\" Rory warned her with his tone. \n\n\"Okay, mostly everything,\" Ellie restated then headed for the door. \n\nOnce she was gone Ashley turned to Rory and had a sad look on her face. \n\n\"What's wrong,\" He asked. \n\n\"What are we going to tell, Emily,\" She asked him. \n\n\"Tell me about what?\" Emily asked. \n\nShe had returned to the kitchen to see where Ellie was going and overheard part of the conversation. \n\n\"That... your mom and I are going to start... dating,\" Rory said making it sound like he was asking. \n\n\"Right,\" Ashley nodded. \"Dating. We're going to start dating each other.\" \n\n\"I thought that you already were,\" Emily said. \"Mr. H goes out with us all the time already. Is dating different?\" \n\nRory shook his head while Ashley giggled and picked up Emily in a hug. \n\n\"I guess that it's really not,\" Ashley confirmed for her. \"We may be having a lot more sleepovers here though. If that's okay with you.\" \n\n\"Cool,\" Emily agreed. \"I love it here! My princess bed is here. Mr. H has Scooby on TV and my swing set is sooo much closer!\" \n\nShe scampered off to tell Chloe the news and Ashley hugged Rory. \n\n\"You only have yourself to blame for his, Mr. H,\" She smiled then kissed him. \"You just had to go all out with that new swing set so now you're stuck with us.\" \n\nHe chuckled and gave her a brief but passionate kiss. \"That swing set is the best thing I ever bought!\"\n\n**** \n\n Thanks to my editors and to everyone for reading, voting and commenting. "
    ],
    "authorname": "AuroraIncident",
    "tags": [
        "romance",
        "writer",
        "dancing",
        "swing set",
        "detective",
        "romantic"
    ],
    "category": "Romance",
    "url": "https://www.literotica.com/s/all-because-of-a-rusted-swing-set"
}
{
    "title": "The Achen Enforcer Ch. 01",
    "pages": [
        "All characters depicted in this story are over the age of eighteen.\n\nHey, everyone--\n\nThe Achen Enforcer is a complete novel for literotica. Chapters will come out as they are released by the lit moderators. If you're looking for my more light-hearted fantasy/erotica books--sirens and vampires and genies and shapeshifters and the like--maybe check out Nu\u00eb and the Djinn, posted on literotica.\n\nThe Achen Enforcer is more science fiction than fantasy, and it's plot-heavy. It's set in a dystopian universe in which there is a great deal of injustice. I will leave it up to you to decide whether the main male character is a good man or an evil man, but, in either case, he's probably not a nice guy. I've been told by early readers that the story is intense, and that the issues it deals with--revenge and atonement, I guess--are unexpected for the genre, so there's that.\n\nIt all started when someone sent me a meme of a young woman offering flowers to an ominous figure labeled \"evil villain,\" and I thought--What villain would nobody ever find sexy? And it occurred to me that the interrogator/executioner figure, often hooded, is someone nobody could love, and then I wondered what would have to happen to possibly change that, and things kind of rolled from there.\n\nI'm always so appreciative to readers who plow through the manuscripts and give feedback before it goes anywhere: bellie444, a talented writer and my most beautiful muse; hadaly, an amazing visual artist and author; Psk, for whom the farms were named; greysam, whose writing I was privileged to read; and, finally, Sarah, who says this is \"so reylo,\" the appeal of which, no judgment, is baffling to me. If it is, it in unintentional. Two of these people have jobs in healthcare (that I know of), and they are brave, and overworked, and one is currently battling the virus, and I'm so very grateful she is going to be all right.\n\nAs always, feel free to email me. I usually get back to people right away.\n\nI will leave off the usual warnings. This is a fantasy story in the non-con category. If that's not your fantasy, don't read it.\n\nFor the rest of you--I hope you enjoy it.\n\n-Harp Strathe\n\nTHE ACHEN ENFORCER\n\nHarp Strathe\n\nPrologue\n\n\"You're an exile,\" Bode said.\n\nThe girl gave a small scream and dropped the book. She looked down at it, breathing fast, and then darted down to pick it up. Something dropped from her pocket. She put the book back in its place on the shelf. Bending to reach for what she had dropped, she froze halfway.\n\nLeaving it on the floor, she slowly straightened, her eyes wide and fixed on his badge as Bode approached. She recognized it. Her eyes shifted up to his face. Bode stopped in front of her.\n\nFor a moment, she looked like she wouldn't be able to speak. \"I'm sorry, citizen,\" she got out. \"I'll go.\" She walked past him toward the door, that limp he'd been listening to, so familiar to him.\n\nWhen Bode had first heard it several days ago, he had barely noticed it. Just Maeter Ton moving through the tall stacks as he had done for years here, a favorite place of theirs. But the other part of his mind had known that Maeter Ton had been dead since last fall. And when those two ideas had met in his mind, Bode had looked up from what he was reading with a crawling sensation, listening to the halting tread.\n\nBode reached down, picking up the flower she had dropped. It almost didn't look real, it was so uniform and perfect. He turned to her retreating form. \"What kind of flower is this?\"\n\nShe turned around, facing him. \"We call it a twyning dahlia, citizen,\" she said.\n\n\"Were you reading the book?\" he said, walking toward the shelf.\n\n\"I was, citizen. I didn't know it was forbidden.\"\n\n\"You didn't know if it was allowed, either,\" he said.\n\n\"I did not, citizen.\"\n\nBode was used to fear. She was a couple of years younger than he was, maybe. When he'd first heard her several days ago, he'd gotten up, moving quietly, trying to get to a place where he could see the source of the footsteps. Nobody ever came here. But when he had looked down the row, it was a pretty exile girl. Not just pretty. Beautiful.\n\nFor the last few days, he had come here and waited, listening for her. Sometime in late morning, she would enter and look around, Bode listening to her limp. When her book had been chosen and she had a seat by the window, she would curl up. He would stand at the opening of the row of shelves, his arms crossed, leaning a little, and watch her. She hadn't noticed him.\n\nHe wouldn't have approached her now, except she had moved to the section with surveillance cameras and she was going to get caught.\n\nBode pulled the book down, a thin volume with a hard cover. The books in here were rare, artifacts from another place. Few Achens cared to come here and actually read them. Few Achens cared to read at all, most of them illiterate. It was the exiles who were educated. He opened it, his eyes scanning. \"It's a work of poetry.\"\n\n\"Yes.\"\n\n\"Do you like poetry?\"\n\n\"Not usually.\"\n\n\"But you like this book of poetry,\" he observed. Her eyes were large, a color more red than gold, warm like grain liquor, deep, shining, her lips full and pink. Springy black curls were coiled at the back of her head, a few escaping around her face in ringlets, a smattering of freckles across her nose. She looked soft. Touchable. \"Which one is your favorite?\" he said, holding the book out to her.\n\nShe approached, reaching to take the book, their fingers touching. \"I don't have one,\" she said.\n\n\"You're lying,\" he observed, his eyes darting, picking up the signs from his training.\n\nHer hand holding the book began to shake. \"I'm not, citizen,\" she said.\n\nHe waited, because people needed to fill silences. Answers often came that way, he'd been taught.\n\nShe looked down at the book and opened it, finding the page. \"I was looking for the poem that my mother liked, citizen. She named me for it. I don't know any of the others.\" She held it out to him, the book open, the pages fluttering a little because she was still shaking.\n\nBode took it, reading. His eyes flashed up. \"Your name is Lyric?\"\n\n\"Yes, citizen.\"\n\n\"How did your mother know the poem?\"\n\n\"One at Okt\u00f3farm who had read the poem years ago spoke it and named who wrote it. It's how I knew there was a library here in Achen.\"\n\n\"Come with me.\"\n\n\"Yes, citizen,\" she said, even her voice shaking now.\n\nShe hesitated when he turned. He moved deeper in to the dim recesses of the library, the shelving tall. She had probably expected him to take her to administration to be processed for punishment.\n\nHe finally heard her follow him, that uneven gait. Finding a private place with a line of sight, he did a quick check, no way they'd be overheard here and no audio or visual surveillance in this part of the library. He waited for her. She was wearing a dress like exiles wore, long sleeves, light brown cloth buttoned down to a belt at her trim waist, a skirt flaring from there to her ankles, black stockings and boots.\n\nShe finally made it to him, awkward, her breathing faster. \"I'm sorry, citizen.\"\n\n\"You don't have any reason to be sorry. Why are you here?\"\n\n\"In the library?\" she said faintly.\n\n\"No, dahlia. In Achen.\"\n\nHer eyes dropped. \"My father brought me for the munificentia, citizen.\"\n\n\"The munificentia,\" he echoed. \"For your foot?\"\n\nShe nodded. \"He brought me twice when I was younger, but they refused. The judges will see us tomorrow morning.\"\n\nHe was watching her face. She was from the farms, speaking to him as exiles in Achen almost never spoke to citizens, as if they were both just people. Maeter Ton had spoken to him this way. \"You will have to persuade the judges that it's important,\" he told her. \"What will you say?\"\n\nShe looked up, and it looked like she was going to cry. \"It pains me when I walk, citizen. When I'm older, no man will want to m--\" she said, stopping, looking down again.\n\nHer eyes came up to his as Bode stepped closer to her. He brought his fingers up and touched her flushed cheek with his fingertips. Yes, she was soft. His eyes dropped to her mouth. He bent slowly, kissing her, her breath warm. A sinking wave went through his gut at her taste, the scent of her. He straightened.\n\nShe hadn't moved, her nose flaring. Her whole body had tensed, her face red now. \"Please. I'm not...I'm not of age, Enforcer.\"\n\nHe stepped back from her. \"I'm not the enforcer for a few months yet.\"\n\n\"Yes, citizen,\" she said, her whole body shaking now. \"Am I to be punished?\"\n\n\"No. Will you take the book?\" He offered it to her.\n\n\"I can't, thank you, citizen,\" she said.\n\n\"Why not?\"\n\nShe hesitated. It was one of the benefits of being the enforcer that people were reluctant to lie to him. She chose the truth again. \"We're searched coming and going from the city. They would think that I had stolen it.\"\n\nHe nodded. \"You can go,\" he said.\n\nShe breathed out, turning to go, her limp.\n\n\"Lyric,\" he said.\n\nShe stopped, looking at him.\n\n\"Tell them you can't work,\" he said. \"That is what they care about.\"\n\nShe hesitated. \"Thank you, citizen.\"\n\nBode came to the edge of the row of shelving, watching her, out of her line of sight. When she got to the door, she turned and looked back, although she couldn't see him. Her fingers went to her lips briefly. She glanced around again and then she passed through it.\n\nHe looked after her, not moving. He finally looked down at the book and then opened his other hand, the perfect white and delicate form cupped in his palm. Dahlia. He put the flower inside the book and closed it carefully. He put the book into his jacket pocket. Nobody would miss it.\n\nCHAPTER 1\n\n(Three years later)\n\n\"You asked to see me, Magistrate,\" Bode said, joining Tibrus.\n\nThey were walking in the Achen Square. The magistrate's hair was getting more gray on the sides, his face leaner, settling into its harsher lines.\n\n\"You have been the enforcer for three years, is that correct?\" Tibrus said.\n\n\"Yes,\" Bode answered.\n\n\"When did you and I last speak at length?\" the magistrate said.\n\n\"We had dinner together with Em\u00ecl a little over a year ago,\" Bode said.\n\n\"I remember now. Em\u00ecl announced he was requisitioning a child with his companion.\"\n\n\"Yes.\"\n\n\"Katya hasn't sparked. I imagine Em\u00ecl will replace her this year at the reaping. You didn't go last year.\"\n\n\"It was an off-year,\" Bode said.\n\n\"You should go this year.\"\n\n\"I have work.\"\n\n\"I know that you would rather attend to your duties, Enforcer, but the reaping is one day a year, a celebration and a part of Achen traditions,\" the magistrate said. \"People will look for you there.\"\n\nAchens bowed their heads slightly to the magistrate, murmuring greetings as he passed, his eyes acknowledging them. Behind Bode and the magistrate, two of the Achen Guard, young men from the city, paced, armed. The magistrate never met with Bode alone, not without the guards.\n\nBode was still in his blacks, a color no other Achen wore, his enforcer badge visible, two rods hanging from holsters on his right hip, one above the other. They swung slightly as he walked.\n\n\"Citizens don't look at you, do they?\" Tibrus said.\n\n\"Not unless they have to,\" Bode answered.\n\n\"Do you know what the Achens say about you?\"\n\n\"It's my job to know what people are saying,\" Bode answered, expressionless. \"They say that I'm cold. They say that I terrify them. They say that I am too young and too handsome to be the enforcer and that they like my dark hair and my face and my body and that I arouse them. They say that I'm good at my work.\"\n\n\"They do say those things, yes,\" the magistrate confirmed. \"And it is true that you are good at what you do. I watch you. Does it give you such pleasure?\"\n\n\"At times.\"\n\n\"It's also rumored you are a certain kind of lover.\"\n\n\"A consequence of my work, perhaps,\" Bode said.\n\n\"Or why you enjoy it.\" The magistrate stopped, Bode facing him. Tibrus looked him down and up. \"They call you a monster.\"\n\n\"I am what you made me, Father,\" Bode said. \"Have I displeased you?\"\n\n\"No. It is what I wanted,\" the magistrate said. \"I promised your mother you would be the enforcer. She begged me not to before I executed her.\"\n\nBode didn't say anything, looking back at Tibrus steadily.\n\nThe magistrate nodded. \"Be at the reaping.\"\n\n#\n\nBode entered the arena, the air charged with excitement. It was late summer, warm still. There were about fifteen hundred-or-so Achen citizens, their population planned and steady, the stands capable of accommodating all of them.\n\nThey wore loose pants and shirts of quality soft cloth and fine stitching, made in Tr\u00edafarm by the exiles, crossed and wrapped with sashes. The clothing was dyed sometimes in pastel colors, although they favored white. Many were eating. Most were drinking liquor made for the Achens at \u00c9nafarm.\n\nThere were huge video displays on the walls above their heads where the arc of the stands continued around, an oval. Everybody had a viewpoint across from them. There would be multiple cameras zooming in on the action occurring in the center.\n\nThe reaping games were once a year, at the harvest. That was the time when the exiles who worked and lived in the farms all around the city brought their crops to the gate. Roughly six thousand exiles lived in the ten farms surrounding the city. Every year, the Achens took half the yield the exiles grew, although there were four exiles for every Achen citizen.\n\nEvery three years, each of the ten farms was also required to send another kind of offering for the reaping games: two men to fight and one woman to be a candidate for companion. The men were chosen by the farm they represented. The women were chosen from the farm villages by the Achen Guard. Domestics for Achen were requisitioned from the farms as required, whenever they were needed.\n\nThe fighters from the farms competed with one another in the reaping games. The winner's farm would receive the Achen Laurel, entitling that farm to extra plantlings for the fields and privileges for two years. And the fighters who won also got to live, if they survived. All fights at the games in the Achen arena were to the death.\n\nThe female candidates would potentially be sponsored as a companion. Any citizens of Achen could sponsor a companion, although only women were offered at the reaping games, a tradition. The Achens diversified the gene pool this way. The companions were never given any status, but their children would become Achen citizens. Only the most beautiful women from the farms were offered to the games.\n\nBode was a product of this system. His mother, Thaya, had been a companion, one of the exiles chosen at a reaping by his father, Tibrus.\n\nDomestics, also exiles, were busy in the arena, dragging long rakes. They were just finishing, the sand manicured in long looped and uniform lines. Bode found his seat. He sat alone, drawing attention just as he did wherever he went. Three years after he'd taken the post, everyone was still morbidly curious about the handsome young Achen enforcer.\n\nIt did get him sex, as much as he wanted. There was that. And they kept coming back for more.\n\nThe magistrate came out onto the stage, a high platform, his face multiplied on the large screens. Music blared from the speakers. It was always this foreign melody, strident sounds and loud drums, clashes, an anachronistic type never played except during the games.\n\nThe magistrate gave this same speech every year, without fail, announced by this same music, as every magistrate had since Ilija, the first magistrate of Achen. Ilija had been given a larger-than-life statue in the Achen Square. Four generations later, Tibrus was his heir. Everyone had grown up hearing the reaping speech. People were already bored.\n\nThe magistrate approached the enhancer. \"One hundred and fifty years ago...,\" Tibrus began. Any of them could have recited it with him, \"...we were the Achen Colony, sent here on a ship that flew through the stars. Fifty years after our landing, there was a disaster. The colony lost the crops and a portion of its seed stores. The Council of Ten refused to act. The first magistrate, Ilija, disbanded the council and ordered a lottery. Half of the colony were exiled outside the city, a great sacrifice so that Achen would endure. The rest were drawn behind the walls where there were enough food stores to sustain them.\"\n\nA young Achen man sitting to Bode's left had one hand on his drink and his other hand inside his companion's dress. She didn't react. The material was thin, her nipples plainly visible. All the companions in the arena were dressed this way. She wore the marchettes of an exile, thin black metal bands on her wrists and ankles.\n\n\"Through a valiant effort on the part of Achen scientists,\" the magistrate continued, \"the remaining Achens were able to hybridize our seeds, ensuring larger and more uniform yields. To do so made the plants sterile. Without seeds, there might have been no more crops and everyone would have starved, Achens and exiles alike. But once again, Achen ingenuity prevailed. We cloned the existing plants. Now, Achens and exiles work in harmony. These new clones are what we will leave outside the gates tonight for the farms. They are our gift to the effort. The beginnings of next year's crops. The only hope for life. The preservation of a new tomorrow.\"\n\nBode always winced at that last line. He suspected someone had added it later. Cloning was the source of Achen's hold on the farms. The exiles worked the farms, descendants of the people who had survived the lottery after being put outside the city gates a hundred years ago. Only Achens had the resources to provide next year's new crops, composed of the original food plants they'd brought with them. There were no seeds. The genetically modified crops couldn't reproduce naturally anymore.\n\nIn return for the new clones, the farms gave the Achen in the city whatever they wanted. The exiles didn't have a choice. Achens had been hoarding foodstuffs since the beginning. They could weather a lean year or two without even noticing it. The exiles couldn't. Without the plantlings, the exiles would starve in a season.\n\nNobody reacted when the magistrate finished. He stepped away, people beginning to pay attention, leaning forward. There was a long pause and then a horn in the arena blared and the games began, exiles rushing naked from multiple dark arches that ringed the arena, weapons in their hands. The men attacked one another.\n\nThe crowd had favorites among the farms and were noisy. Two fighters came from each farm with their own choice of hand weapons. There were no projectiles allowed, although axes and knives could be thrown. They would have trained all year.\n\nBode watched as one increasingly desperate battle after another was won and lost, two sides of a repeating coin and all the human drama under it. Men cried and raged and held each other dying and went mad on the sands of the arena as Achens dined and drank and laughed and talked above, watching.\n\nThe screens zoomed in on men's faces, on the wounds on their bodies, the Achens practically ecstatic as the contests reached their climax. Bode watched. In the end, the two exiles from the winning farm were displayed in the center. D\u00edofarm, the second farm from the Achen gates, specializing in carpentry and woodwork, had taken the Achen Laurel.\n\nThe horn blared, signaling the end of the first part of the games, exiles running to bring canvas sheets, removing the bodies. They left splashes of blood on the sand, no time to remove them. The entertainment walked through it at times, exiles who could juggle. Dancers. Musicians and acrobats.\n\nAnd approaching from his right was Bode's most recent acquisition, coming back for more.\n\n\"Enforcer,\" the Achen woman said, greeting him.\n\n\"Corine,\" he returned, watching the arena. He waited, because people often felt compelled to fill silence.",
        "\"Are you enjoying the games?\"\n\nHe turned his head and looked at her. She was well groomed, her light brown hair falling over her shoulders, careful face paint, sashes crossing over and under her breasts, around her slim waist, draped white cloth under it.\n\n\"Of course,\" he said.\n\nShe smiled at him. \"Shall I join you?\"\n\n\"No.\"\n\nA pout replaced it. \"Why are you so cruel, Bode?\" she said.\n\n\"You like it when I'm cruel, Corine,\" he said.\n\n\"Yes,\" she agreed, smiling at him again, undeterred when he didn't return it. \"Invite me over soon.\" Her eyes held an invitation, walking away.\n\nIt didn't take long for Bode to receive his next visitors. Em\u00ecl approached, Gram in his shadow, perpetually.\n\n\"Little brother,\" Em\u00ecl said.\n\n\"Half-brother,\" Bode returned his greeting.\n\n\"I'm surprised. You set aside your work long enough to attend the games,\" Em\u00ecl observed.\n\n\"Obviously,\" Bode said.\n\n\"Maybe we will see you on the sands with the candidates for once, Enforcer,\" Gram said.\n\nBode looked at Gram, an Achen with dark blonde hair and a compact build, a secretive face. Smart, and a coward, the man avoiding his stare. \"I don't perform for crowds,\" Bode said.\n\nNew music blared from the speakers.\n\n\"There are the candidates,\" Em\u00ecl said, turning to look. He slapped Gram's chest lightly with the back of his knuckles, both of them moving back to their places where their current exile companions sat at their feet.\n\nThe horn gave a short and sharp blast, interrupting the music, everyone finding their seats. Bode had never gotten up.\n\nAfter more ceremony, the candidates were brought in, ten young exile women walking in their finery, musicians playing. Bode looked at the screens, each woman's face displayed there as she emerged. They were all pretty in their own way. Light hair and dark hair, in between, tall and short--\n\nLyric.\n\nBode rose, moving horizontally until he got to the stairs, walking down, his feet tapping. He surprised people, the whole of the Achen population shifting its eyes to watch the enforcer step off the stairs and onto the sands of the arena.\n\nHe reached the handler. \"I choose that one as a companion,\" Bode said, pointing at Lyric.\n\n\"Enforcer,\" the handler said, his eyes darting, all nerves as Achens tended to be if Bode approached, as if Bode were going to arrest them for nothing and torture them directly. \"Of course. We're only just getting started with the--\"\n\n\"Do I have to wait?\" Bode said.\n\nThe handler looked at a loss, thinking in a panicked kind of way. \"No, I don't think there's any rule--\"\n\n\"Good,\" Bode said, walking and grabbing Lyric's arm, bringing her toward the stands. He wasn't surprised to find Em\u00ecl had come to the bottom of the stairs, looking at Lyric.\n\nEm\u00ecl turned, pointing at her and yelling down to the Achen handler. \"How can he do that? What happened to the choosing?\"\n\n\"I'm so sorry,\" the handler said, his face pulling in a fear-grimace. \"I believed he had the authority--\"\n\n\"She's the most beautiful candidate to come through the games ever,\" Em\u00ecl cried, gesturing at Lyric.\n\nBode faced forward, grinning. He turned his head, watching Lyric on the stairs. Her foot seemed better, but she wasn't agile. He'd felt the limp. He slowed some more, trying not to look like he was doing so.\n\n\"Thank you, Enforcer,\" she said under her breath beside him, her cheeks red from exertion, climbing, out of breath.\n\nBode found a place not so high, seeing her struggling. He cut in, an empty spot. Releasing her, he sat, gesturing in front of himself. Lyric went and sat at his feet as the candidates were told to do if they were chosen. She was still breathing a little fast.\n\nHe looked down at her head, the dark springy soft curls in the same coil at the back of her neck, all of it gathered there. She was in plain white clothing, soft pants and a thin shirt, black slippers, given to her by the Achen handler. All the candidates were dressed this way at the games. Her black marchettes were on her wrists and ankles.\n\nShe was even more beautiful now.\n\nLyric turned to him in profile like she could feel his gaze, fine features, large eyes and a long nose, high cheeks and full lips. Bode had to think how he was going to do this. They would expect him to claim her.\n\nIn the end, only two other candidates were chosen, and neither by Em\u00ecl, who was still watching Lyric from Bode's left, Bode ignoring him. Seven candidates remained unclaimed. They would be given to the reaping games and then returned home to the farms.\n\nThe horn sounded again.\n\nEm\u00ecl and Gram got up, moving diagonally to the stairs and down, jogging to join the other young men lining up on the arena sands. More young Achen men came down. Twelve of them. Fourteen, and the horn sounded again.\n\nThe candidates who hadn't been chosen cried out, retreating when the Achen men walked onto the sands. One of the Achen men ran toward them. The exile women screamed and scattered. The other men followed, locking onto individual women.\n\nJak, another friend of Em\u00ecl's, veered to chase down the one he'd chosen, a pretty young woman with brown hair. One of the other Achens joined him. People in the stands were calling encouragement and commenting. The first Achen caught a woman, who turned and tried to fight him. He struck her. Dragging her up, he reached and ripped her dress, her breasts exposed.\n\nThe other men had also made their choices, women on their backs or their bellies or on all fours on the ground, a man on either end, usually, the sands of the arena still stained with blood from the fights.\n\nEm\u00ecl and Gram caught a woman and stripped her, pulling her like a bone between them, her body arching. Putting the woman on her back, Em\u00ecl dragged his pants open. He crawled over her, his legs spread, pinning her with a knee on each of her spread arms. He braced his hand on the ground above her head, his other hand going to guide himself. At the same time, Gram knelt, pushing her ankles up, putting her knees over his shoulders. Gram wedged her thighs to his chest and pulled himself to her.\n\nIn a moment, Em\u00ecl had his cock deep in her throat, long strokes, pinning her to the sands. Gram was fucking her ass, his hips thrusting sharply. The crowd sent up a pleased roar.\n\nThe camera zoomed in, then shifted here and there. In the stands, the young Achen man to Bode's left had put his companion on her knees in front of him and pulled his pants open in front. His cock was in her throat. He was drawing her head up and down idly by her hair, watching the arena. He took a sip of the liquor.\n\nBode's eyes shifted to Lyric. She was still, watching, her hands clenched, her whole body shaking. She flinched several times, but she didn't look away.\n\nThe camera zoomed in on Em\u00ecl finishing. He was popular in Achen. Em\u00ecl had pleased the crowd, the woman's hands beating his thighs as he finished.\n\n\"Have you done that, Enforcer?\" Lyric said in front of him, her voice low, an accusation.\n\n\"No,\" Bode answered. \"Shut up.\" He watched her shoulders come up, reacting to his tone. The arena seemed like it was safe, and many Achens in the stands assumed it was, talking freely with one another in ways they wouldn't elsewhere. It was a part of Bode's job as enforcer to read the reports of what they said. Listening devices were everywhere in the stands, along with visual surveillance. The magistrate paid attention to what was done and said the arena more than anywhere else.\n\nAnd what was not done. Such as the punishment of an insolent new companion.\n\nShe didn't say anything else after that. The drama at the center played out, inevitable. The women were led away, those that could walk, others on litters that hovered, the same technology that powered the transports, Achens guiding them. All of them were naked, some with their black slippers still on, their white clothing scattered on the sand in ripped tatters.\n\nBode was watching Lyric. Her hand was still shaking as she lifted it, putting her hair behind her ear. He knew he should take her down to the stands now and claim her in the arena. For her own safety, he should do that. Achens would notice if he didn't. His father would notice and wonder why. And if Bode wasn't going to, he should take her away now. Lyric wouldn't be able to move quickly.\n\nBode got up. \"Let's go.\"\n\nShe got to her feet. He took her arm, going to the stairs. The horn blast sounded, the music resuming, more entertainment in the center. When that was done, it would be time for the claiming of the companions, and they had to be out of the arena by then.\n\nThe celebration would go on for another hour or so and then move into the city, drinking and revelry and pleasure pursuits, another year's harvest secured. Bode was, again, unsurprised to find Em\u00ecl in front of him.\n\n\"Little brother,\" Em\u00ecl greeted him, both of them large men, his brother with brown hair and a square face, Bode more lean, with black hair.\n\nBode ignored him, Em\u00ecl giving way and then walking on the other side of Lyric.\n\n\"That wasn't fair, Bode,\" Em\u00ecl said, Gram right behind Em\u00ecl just he always was, their companions trailing somewhere well back.\n\n\"It's not the nursery, half-brother,\" Bode said.\n\n\"You're going the wrong way,\" Gram said. \"It's time for the claiming.\"\n\n\"I admire your sense of direction, Gram,\" Bode said. \"Watch Em\u00ecl doesn't stop fast and your head gets stuck up his ass.\"\n\n\"Did father not tell you I was looking for a new companion?\" Em\u00ecl said, ignoring their byplay.\n\n\"He mentioned it,\" Bode answered.\n\nEm\u00ecl looked at Lyric, who was looking at her feet. He looked back at Bode. \"You know I'm going to be the magistrate, Enforcer,\" Em\u00ecl said. \"I will be the power in Achen. Let me take her down to the sands now and I swear we will not be enemies.\"\n\nBode eyed him. \"Are you not spent from the candidates?\"\n\nEm\u00ecl looked at Lyric again. \"For this one, I could rise again,\" Em\u00ecl said, leaning in. \"Don't worry, beautiful lame companion. I won't leave you with the enforcer. What's your name?\"\n\n\"Don't speak to him,\" Bode said.\n\nLyric was shaking under Bode's hand, but she didn't answer Em\u00ecl. Em\u00ecl abruptly stopped, turning toward her and reached for her, trying to catch her arm. Bode yanked her behind himself and stepped between them, steadying her when she staggered.\n\n\"I will bloody you, half-brother,\" Bode said, their faces close, grinning at him.\n\nEm\u00ecl froze and took a careful step back, his eyes darting around himself. Bode began to walk again, Lyric on his other side now.\n\n\"Companion to the Achen enforcer,\" Em\u00ecl said, catching up, his lip curling. \"It's grotesque. Who would give such a beautiful woman to a monster like you?\"\n\n\"Achens,\" Bode answered, Lyric beginning to breathe fast. Bode slowed.\n\nShe sent him a glance, grateful. It still hurt her to walk.\n\nEm\u00ecl continued on, turning at the top of the stairs. \"I won't forget this, little brother,\" Em\u00ecl hissed as Bode brushed past him. \"Now we are enemies.\"\n\n\"We always were, half-brother,\" Bode said, going down the first step. He slowed even more, something about the downward movement that was awkward for her.\n\n\"I'm sorry, Enforcer,\" she said, flushed and breathing. \"I promise I am not usually so slow. They walked us to the games. My father told the Achen Guard I was lame, but I wasn't limping so much when they chose me.\"\n\n\"You don't have any reason to be sorry, dahlia,\" he said, no listening devices here. He slowed even more, seeing her relief, his hand on her arm becoming more of a support.\n\n\"You remember me?\" she said, glancing at him again.\n\n\"Yes, Lyric. When we get to the bottom, I'll call a transport. It's better, though? Your foot?\"\n\n\"Yes,\" she said. \"They heard your argument and the machines treated it. I'm grateful, Enforcer.\"\n\n\"Which farm are you from?\" He had wanted to know this.\n\n\"Tr\u00edafarm,\" she answered.\n\nThe third farm, specializing in weaving and sewing. Dyes, textiles, and linens. She was just as open with him as she had been before. They had reached the end of the stairs. Bode approached a station, putting his palm on the handscan. A round craft with two seats lit and lifted, moving toward them. It stopped.\n\n\"Don't speak in the transport,\" Bode said. The transports were another place the magistrate listened.\n\nShe hesitated, looking at him and then closing her mouth.\n\n\"What?\" he said.\n\n\"I have not ridden in a transport, Enforcer.\"\n\n\"Just stand and hold on. It doesn't require your attention.\"\n\nExcept for the domestics and companions who served in the city, Achens and exiles didn't mix. Achens had access to the technologies that had come with the colonists. A robotic medical clinic. Transports with internal motors run on solar energy batteries. Computers, automated services, slates, viewing screens. handscans, video and audio surveillance, security technology. The marchettes.\n\nMost exiles who came into the city had never even seen this kind of technology. In the fields, they were farmers. In the villages connected to those fields, they were craftspeople. And there were so many of them. Bakers, carpenters, millers, metalworkers. Apothecaries and masons and butchers. It was another world outside the city gates, six thousand people living their lives, working, most of them trying to ignore the Achens in the city, at least until they didn't have any choice.\n\nAnd inside the city, fifteen hundred Achens perpetually idled, enjoying all the pleasures and luxuries the exiles provided. The Achens could requisition anything from any of the farms. Fine clothing, furniture, jewelry, liquor, soaps. People.\n\nBode's hand on her arm supported her getting in. \"We're going to my rooms,\" he said. \"Hold on.\"\n\nAt the mention of his rooms, her cheeks became even redder. She nodded. While she seemed ignorant of some Achen customs, he didn't think she was unaware of the role of an Achen companion. And he had to claim her in his rooms, for sure. She stood, holding onto the bar, her knuckles white.\n\nBode put his hand on the panel, a handscan that read his handprint signature, an Achen citizen. \"Seventh block,\" he said.\n\nThe transport took off, Lyric giving a small cry and holding on. He turned and looked at her, the wind pulling her hair, dark curls falling around her face. Her eyes were wide. Slowly leaning, careful, she looked at the ground rushing under them. She straightened.\n\nBode helped her to get down in front of the tall building. She was still limping. He brought her through the front doors and to the lift. The lift was another thing that surprised her, both of her hands going to his arm when it rose. Bode glanced at her and she seemed to realize. She let go quickly, putting her hands behind her back. Bode reached out and grasped her arm again, his grip gentle.\n\nTypically, there would be people in the halls, but most Achens were at the games. Bode paused in front of the door to his room, using the handscan. The door slid open, hushed.\n\nDropping her arm, he walked in. Lyric followed more slowly. She turned and watched as the door slid closed behind her. Bode's rooms were more plain than most Achens preferred. All the residences had the same configuration. Even the magistrate didn't have larger quarters, although his offices were elaborate.\n\nThe furnishings in Bode's rooms were simple, made of the same polymer as all the Achen furnishings. Two chairs, a couch. A table for eating. He only had one viewscreen, and it was in his office, which had a desk and a chair. He had shelves filled with print books. Nobody else was interested in them.\n\nHe saw her glance at the art on the walls, old primitive tech made with brushes and dyes, oils. Their presence here was another oddity. \"They were painted by an early Achen named Josue, before the lottery,\" he said. \"When the lots were cast, he was made an exile and never painted anything again.\"\n\nShe stopped in front of a portrait of a woman looking away, the arc of her cheek, about to pass through an arch, her hand on the stone of the column of an Achen building. \"She's beautiful.\"\n\nHis eyes shifted to Lyric below it. \"Beautiful, yes,\" he murmured.\n\nThis had to happen. Going to his sideboard, Bode pulled out a glass and a decanter, pouring a drink. He walked and handed it to her when she turned to him. She took it reflexively, looking down at it as he went and poured one for himself. It was liquor, an aged grain mash made by \u00c9nafarm for the Achens. Strong.\n\n\"Drink,\" he said, sipping, a pleasant heat in his belly.\n\nShe took a sip and made a face, trying to control it. He gestured and she drank steadily, giving up on politeness and shuddering. When she was done, he came to her and poured more. He met her eyes over it, letting her know.\n\nShe flushed again, that color rising in her cheeks, pretty skin. Lyric nodded slightly, sipping again, finally tossing it back with a grimace. \"Thank you, Enforcer,\" she said when she could, holding out the glass to him, the back of her hand in front of her mouth, her nose wrinkled and her eyes watering.\n\nBode took the glass. She stood awkwardly, glancing at him from under her lashes and looking away.\n\nHis mouth tightened, wondering briefly if she knew about the marchettes. He took her arm and walked her to the wall, watching her face, touching a button for the polarity. He put her back to the wall. She didn't resist. He held her eyes, bringing her hand up and out and touching the marchette at her wrist to the wall. It sucked in, magnetized.\n\nNo, she hadn't known, her eyes wide. He did the other, her arms spread wide and high above her. Most walls in the residences had such magnets. In the bedroom. The bathroom. Everywhere. They were supposed to be to control the exiles if one of them became agitated, but they were used for punishments--and with companions.\n\nLyric was breathing fast, staring back at him, long lashes, her eyes dilated with fear. Her hair was wild from the transport ride, black curls escaping around her face, her cheek still flushed. She struggled briefly, testing them. She blinked several times, the liquor having its effect.\n\nShe flinched as he got close and reached around for her hair, loosening it from the coil. He removed her hairpins, quite a few, walking to set them on the sideboard. He returned. Her soft, springy curls slipped through his fingers as he freed them, running his hands through her hair, trying not to tangle in it.\n\nThe mass of it tumbled all around her and fell to her waist, a deep sinking going through his belly. It made her look even younger, those large eyes the color of the grain liquor. He was still making his way through her hair, one side of his mouth turning up. There was a great deal of it.\n\nMeeting her eyes, he reached for her shirt, her chest rising and falling she was breathing so fast. He found a seam and ripped. Lyric turned her face to the wall, closing her eyes as if she hadn't believed he would do it, her tits emerging. It sent another wave through his gut, looking at her red nipples, round and full breasts, firm.\n\nHe stood in front of her, almost touching her, beginning at her shoulders, pulling off the remnants of her shirt. His hands roamed around her arms, her neck and shoulders, down her back behind her and to her belly and then between her breasts, touching the sensitive undersides briefly. Warm curves, her skin soft under his hands. Her averted face was red now.\n\nHe squatted and drew her slippers off, looking carefully at her foot, handling it gently. It was swollen. There was a scar where the robot had operated, the foot falling more naturally, but still a little turned. He glanced up. She was looking down at him, biting her lip.\n\nHe straightened, reaching and tugging her pants, pushing them down. She had been groomed for the games, a laser treatment for permanent epilation, all her hair removed from the neck down, as well as a contraceptive shot that would stop her cycles for three years, reversible if Bode pleased. He pulled her pants off and straightened, looking down at her tiny waist and curvy round hips.",
        "His belly was tight. His hands landed on her waist. Her face was turned away again, her eyes closing. He ran his hands down around a very round ass, another deep surge going through his belly, slowly squatting, touching everywhere--her thighs, her calves, his eyes on the puffy slit of her naked pussy just showing between her legs.\n\nWhen he was done and he knew there was no receiver hidden on her, Bode straightened. He caged her with his arms and leaned in. Her face was still to the side, her eyes shut tight. He said the phrase into a pretty ear: \"The seeds of freedom are sown deep.\"\n\nLyric faced forward, opening her eyes, their faces close. \"What?\" she breathed.\n\nHe leaned in again, speaking so low that she turned a little to hear him. \"There are machines in all the Achen residences that watch and listen. Most Achens don't know about them. The monitors will watch. It must seem real. I will be as gentle as I can. I will pretend to hurt you. Sometimes I'll have to. Blink twice if you understand. I want your agreement, Lyric.\"\n\nHe pulled back. Her eyes were searching his. He waited. She finally blinked twice.\n\nBode grinned at her. She looked away, breathing fast.\n\nHe leaned in again, his voice soft, nuzzling her a little, inhaling the scent of her, feeling her shiver. \"When I touch your nipples, cry out like I am hurting you.\" He drew back and reached, touching under and around her breasts, her cheeks bright red now. Then he cupped her breasts, full in his hands.\n\nThere was only one way the enforcer would take a woman. Bode brought his fingers to her nipples, grasping them, pretending to twist, giving it no pressure, letting them slip through his fingers. \"Before I fuck you,\" he told her in a normal voice. \"I want to hear your voice, pretty companion.\"\n\nHis breathing was deep, her nipples sweet under his fingers. Lyric cried out, not convincing enough. He twisted harder, enough that she'd feel some pain, necessary. She cried out again, sounding more real. Better. He dropped his hands and brought his mouth to her nipples, as gentle as he could be.\n\nRough or not, her nipples rose to hard buds under his tongue and teeth, her voice taking on a different note that went through him, a wave in his lower belly. He wasn't going to have to try to fake arousal, that was for sure. \"You like that,\" he said, coming up.\n\nShe shook her head, denying it, closing her eyes again. He leaned down and grabbed her knees, bringing them up. She struggled and he lifted her, her arms with slack now, putting her heels under her butt and touched the wall with the marchettes, feeling them suck in. When he was done, she was at the perfect height, the strong magnets keeping her on the wall.\n\nBode stepped back, removing his clothing, looking at her body. His cock was stiff, large and thick. He squatted in front of her, looking at her naked pussy. He wasn't going to fuck her dry. Her knees tried to close. She startled when he reaching, his elbows propping her open. He spread the lips of her pussy with his thumbs, looking at her. She had the most beautiful naked little cunt, plump and pink.\n\nHe leaned in, spreading her again, exploring her with his tongue. She gave a cry, sounding surprised. He licked around her channel, enjoying the taste of her. Slowly circling her clit with his tongue, he teased her, getting closer. He could do this forever.\n\nHe was finally licking the nub, which was becoming stiff. When he did that, she pulsed under his tongue. Touching her passage with his fingers, he felt the beginning of slippery wetness. Anticipation curled in his gut when he introduced a gentle finger.\n\nHe returned to licking her. Her legs had fallen open, her eyes scrunched like she was in pain, small sounds of negation from her throat. She was getting even more wet, her cunt flushing. She cried out a little when he fluttered his tongue quickly against the tip of her clit and then firmed it, licking her steadily. He stopped and looked up. Her face had relaxed, concentrating on the sensations. He returned to licking her, her pussy moving against his mouth again.\n\nThe noises she was making now were real, tiny hitches and low cries. She was slippery, her clit distended. Putting his lips around it, he sucked gently, her hips squirming.\n\nHe came up, straightening, getting close to her. She was panting, her cheeks flushed. Still turned away, still with her eyes closed.\n\n\"Aren't you beautiful,\" he said under his breath, his hands coming up and facing her forward with a jerk, kissing her roughly, biting her lip and pulling back. He was certainly ready. He stepped back and slapped her breast straight down, catching the nipple. She cried out in pain and surprise, her eyes opening. He did the other. He stepped to her again, his hand slipping down.\n\nHe brought himself close to her ear. \"Scream like I'm hurting you between your legs,\" he said, his cock lifting. He rubbed her clit gently, long strokes as her eyes unfocused.\n\nShe cried out, but it didn't sound like pain. He leaned back a little and slowly grinned. He pinched her clit sharply, grinding it between his fingers. She startled out of her haze, her eyes dilated, heavy lashes. He penetrated her with his finger, moving in and out, curling. She was tight, another wave going through him. He withdrew and pinched her again. She gave a soft cry.\n\nHe stroked her slowly. \"Pain, dahlia,\" he said under his breath.\n\nShe arched and began yelling, more convincing. He grunted softly as she began with short screams and thrashing. He guided his cock to her, pulling his hand away and pressing in.\n\nHer cries stopped, her brows drawing together, her whole body tensing. Her eyes opened, that color. He held them, nudging over and over, pushing in, her cunt like a glove as he opened her. He released his breath at the sensations and realized. His thumb found her clitoris, rubbing firmly.\n\nShe hitched and went rigid, beginning to come. Bode pushed into her hard, sensation going through him, getting under her, his breath releasing. He could feel her coming around his cock, Bode thrusting sharply.\n\nHe leaned into her, his elbows on either side of her head, his hips working his pleasure. \"Fuck,\" he said under his breath, letting go of any control, grunting with each one. He buried himself deep into her soft heat, slick and tight.\n\nShe cried out, and this time it was definitely in pain. Her eyes were closed again, grimacing. She began biting her lip. He gave an especially deep thrust, making her cry out sharply, and that did it for him. \"I'm going to come, pretty companion,\" he got out, that point of no return, his pleasure rising.\n\nHe gave a series of thrusts, feeling it traveling up his spine, and then it was on him. He cried out, holding, pinning her with his body. He was trying to get closer, his hands going to her wrists trapped against the wall and holding them in his hands, her softness pressed against him, buried between her legs.\n\nBode finally relaxed, his heart pounding against her. He was panting. He looked at her face. Lyric was crying, her eyes closed. Bode felt another kind of wave. He ignored the feelings, very good at doing that. He'd been doing it most of his life. And he'd already failed to claim her in the arena.\n\nHe pulled out of her, nothing gentle while the cameras were watching. His hand hit the button that would release her and she slipped down onto the floor, landing, her knees to the side. She caught herself with her hands, her hair everywhere. He grabbed his clothes.\n\n\"Get up,\" he said, his voice neutral.\n\nShe looked up, her arms crossing in front of her. She was such a beauty, his gut twisting again. He reached down and hauled her up by her arm, dragging her into the bathroom, being careful. He wasn't taking any risks with her foot. When they got there, he grabbed a cloth. There were cameras in here, too. He wet it and handed it to her, grabbing another for himself, cleaning up. When he was done, he left her and went into the main room, getting dressed.\n\nWhen she came out, he walked to her quickly. She cried out a little, flinching, her hands coming up.\n\nGrabbing her, he brought her, careful to support her foot. \"I have to do some work. You can come sit on my lap.\"\n\nHe brought her into his office, closing the door and taking off his shirt. She flinched again when he reached, putting it around her and sitting her down on the chair there. Bode squatted in front of her, brushing her springy curls back from her cheek, his fingers gentle.\n\nShe clutched the shirt closed.\n\n\"There's no surveillance in here,\" he said.\n\nHer eyes were searching his. She was shaking. \"You're...Did you say--?\"\n\nBode straightened, standing over her. \"I've been helping the Council of Ten since I was sixteen.\"\n\n\"But you're the Achen enforcer,\" she said, looking up at him. She was still shaking.\n\n\"Yes,\" he said. Lyric. He could hardly believe he had her. Leaning down, he angled and touched her lips with his, being gentle now. She stiffened and drew away sharply.\n\nBode dropped his hand and straightened. No surprise there. He waited.\n\n\"You're really helping us?\" she said.\n\n\"When I can.\"\n\nHer eyes went wide. \"Denit. The Achen guard came and took him from Tr\u00edafarm. They said he was to be executed, and then my father...I saw Denit at the farm. They were treating him in the barn. He was hurt, but he was alive.\"\n\n\"The magistrate attended Denit's questioning,\" Bode said. \"The pain had to be real. He held out and then gave the information I had told him to. He did well.\"\n\nShe swallowed, her eyes beautiful, that liquor color. \"But you--\" she began, and then she looked down.\n\n\"Did you expect otherwise?\" he said, his lips tight.\n\nShe shook her head, still looking down.\n\nBode released his breath. \"I told you about the surveillance. The magistrate would want to know why I would take a companion if I wasn't going to have sex with her. I've kept you out of Em\u00ecl's hands, but I can't protect you from this, dahlia. I'm putting everything at risk bringing you here. The magistrate has to believe I am who he thinks I am. It's the only way I can continue to help the exiles. And if my father thought you meant anything to me, he wouldn't stop until he had you on a table screaming.\"\n\nHer eyes were wide now. \"I knew what was going to happen when I was chosen to be a candidate,\" she said. \"It's probably selfish, but I had hoped that I might be one of the ones who didn't get chosen. Because I couldn't walk well. That my foot might be a lucky thing for me for once. That I might endure what happened in the games and then they would let me go home. But after seeing what they did to the candidates--\" She stopped, swallowing.\n\nShe was far too beautiful. There was no way she wasn't going to be chosen. He shouldn't have taken her as a companion, not with what he planned, and he didn't care. He would do it again. Her eyes were swimming with tears.\n\n\"If I had a choice, you wouldn't be here at all, dahlia, but you are and I can't change that. They will watch us. My father will review the footage of these rooms personally, I guarantee it. What just happened isn't going to stop. If I don't treat you as the Achen enforcer would treat a companion, it would draw attention to me and to what I do for the exiles and it would put you in danger from the magistrate. Do you understand?\"\n\nNine years he had spent ensuring his father believed he knew who Bode was. And now Bode had gone and done something completely out of character. The man the magistrate knew didn't want a companion, and if Bode did suddenly want one, he certainly wouldn't be gentle with her. He was the enforcer.\n\nHe had to make it look real out there. He couldn't protect her otherwise. Lyric was breathing fast, the tears spilling over. His thumb went to her cheek, caressing the wetness. She was soft. Touchable.\n\n\"Yes,\" she said, her voice muffled.\n\n\"I'm going to give you a phrase,\" Bode said. \"If I do something you truly cannot endure, say 'my foot hurts.' If you can't say anything, make a fist three times. I will stop.\"\n\nHer face wobbled, fresh tears, his thumb gentle on her cheek, his knuckles coming to brush away the wetness gathered on the other side, that wave going through him again. Bode pushed it down.\n\n\"Do you promise?\" she said.\n\nHe looked into her eyes. \"I swear it, dahlia. We can't come in here again for a time. I would appreciate it if, when we are out there, you treated me like someone dangerous to you, so I don't have to really hurt you to prove it to them.\"\n\nHer shoulders came up. He felt a deep twinge. She was afraid of him. Of course she was. It was good that she was. Her fear had to seem real, too. And he had to keep clarity with her. Just because it was Lyric didn't mean the situation had changed, not for either of them.\n\n\"Give me the shirt,\" Bode said. \"I'm going to strike you. We've been in here for too long. When I do, cry out. Make it loud.\"\n\nShe had to believe that he would hurt her. He put on his shirt when she handed it to him. She covered her breasts with her arm, waiting. He reached for her and she flinched, his stomach tightening. He grasped her delicate arm under the shoulder so she didn't go spinning off. \"I'm sorry,\" he said under his breath. He struck her in the face, a heavy cuff. Her head whipped to the side and she cried out sharply.\n\nHe dragged her through the door he opened, grinning. \"I'll be ready again soon, pretty companion,\" he said, pinning her hands to the wall and leaning down, kissing her split lip roughly, tasting blood. He spread her legs and shoved her ankles to the wall with his foot, one at a time. He stepped up to her, his hands going to her breasts. She had turned her face away again. \"Look at me.\"\n\nShe looked at him. He twisted her nipples, and this time he wasn't faking. She shrieked and he released them. He gave her a slap between her legs, earning another shriek, smacking her tits for good measure, his cock thick in his pants. He turned away from her, going to sit at the desk. Pulling out his slate, he pretended to become immersed, making notes. After a time, he looked up. She was watching him. He looked down again."
    ],
    "authorname": "semiosis50",
    "tags": [
        "noncon",
        "maledom",
        "sci-fi",
        "sex slave",
        "reluctant",
        "bdsm"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/the-achen-enforcer-ch-01"
}
{
    "title": "Basics - Neural Control Node Ch. 08",
    "pages": [
        "Author's Note\n\nThis chapter resumes Saturday morning. The loss of the Neural Control Node beta network has left all the assistants without memories after their first contact with the cube. After getting kicked out of Tess' house, Essie decided to trust Josh and spent the night in Josh's old apartment. \n\nNeurally enhanced assistant scorecard:\n\nJosh - Cube 1: Network deactivated\n\nJosh - Cube 2: Network deactivated\n\nSaturday is here, Josh's new v2.0 node is due to be delivered. Let's see what happens.\n\nThis is obviously a work of fiction, all characters that engage in sexual activities are above the age of 18.\n\n\n\nBasics: Neural Control Node Ch. 08\n\nNow that I know what I'm without<br/>You can't just leave me<br/>Breathe into me and make me real<br/>Bring me to life<br/>Wake me up inside<br/>Wake me up inside<br>Call my name and save me from the dark<br/>~Bring Me To Life (Evanescence)\n\nI heard bells and thumps. I blinked my eyes open, the bedroom was bright. I looked at my alarm clock.\n\n9:53 AM \u2014 I slept in, and I didn't have a nightmare, awesome! \n\nI felt Essie's hand reach back and tap my side.\n\n\"Turn off your alarm, Josh,\" she murmured, \"I'm having a nice dream.\"\n\n*THUMP THUMP THUMP*<br/>ding-ding-ding-ding\n\n'\"JOSH,\" Rhi's voice reverberated through the walls, \"STOP BEING AN ASSHOLE AND ANSWER THE DAMNED DOOR\"\n\nRhi! \n\nI was excited at hearing her voice, but what was she doing here? \n\nI pressed up from the mattress and crawled over Essie's alluring body. Quickly pulling on my discarded jeans from the night before. I combed my fingers through my hair, and shook my head, trying to wake up. \n\nI opened the door and Rhi's blue eyes blazed into mine. I pulled the door open all the way. Rhi didn't try to enter.\n\n\"Josh,\" she said, breathless and irritated, \"Why are you having packages delivered to my sister's house?\"\n\nShe lifted a package with a logo from NCNHQ and shook it in my direction. I pulled it from her hands looking at her excitedly. A stark contrast to her angry visage, and it put her a bit on her heels. \n\n\"You don't know how much I appreciate you bringing this here, Rhi,\" I said, \"Thank you.\"\n\nI turned abruptly, leaving the door open to walk back to my kitchen table. The device in the box was a lifeline to what I'd lost, and it took over my focus. I wanted to talk to Rhi, tell her everything, but that was dangerous, I remembered. If talking through the last week accessed her memories, I could lose her for good. She could be pissed off for a few minutes.\n\nRhi stepped inside and slammed the door angrily. The apartment shook. I looked back over my shoulder, hoping Rhi was following. My eye caught Essie looking at me curiously. Essie leaned against the door to my room, wearing my large white tee-shirt which draped over her torso to mid-thigh. Then I watched as Rhi stalked past her and towards me, looking confused and angry.\n\n\"Please, Rhi,\" I said, calmly, as she approached, \"Have a seat, I want to talk with you.\"\n\nShe crossed her arms and stood and looked at me, her eyes flaring. Then she sat down at the table.\n\n\"Well since you asked so politely.\" She said slowly, like she wasn't sure what else to say.\n\nI was thrilled to hear the odd tic of remarking about good manners, but I kept my face neutral. I calmly reached into a kitchen drawer, neatly organized, and pulled out a utility knife and sat down at the head of the table. I looked up and smiled quietly as Essie walked towards us, then sat across from Rhi. Essie pulled her knees up onto the seat under my tee shirt. She looked curiously at Rhi, but her guarded posture demonstrated her uncertainty.\n\nI glanced at both of them, then focused on getting the package open. I carefully slit the tape along the top of the box, then along each edge. I put the knife down, then Rhi placed her hand on the top of the box keeping it closed. \n\n\"Josh,\" she said firmly, and I looked up at her, \"I don't know what is happening. Gina is a mess, did you know she has a gunshot wound?\"\n\nI set my jaw, and shrugged, looking at her helplessly.\n\n\"I have a gunshot wound too,\" Essie said, lifting the sleeve of my tee shirt to trace her finger along her pale scar, \"Are they related?\"\n\nI took a deep breath, looked at each of them, then shrugged again.\n\n\"That means they are,\" Essie said and looked at Rhi, \"he shrugs when he can't talk about it.\"\n\nRhi had leaned towards me, her hand keeping the box closed. At Essie's remark, Rhi turned to look at her with irritation. Rhi looked back at me, and began to open her mouth.\n\n\"What's your name?\" Essie interrupted Rhi's next question.\n\n\"Rhiannon, my friends call me Rhi,\" Rhi said abruptly, focusing her blazing blue eyes on Essie, \"You can call me Rhiannon.\"\n\nI glared at Rhi, but remained silent.\n\n\"Rhiannon, I'm Ester, please call me Essie.\" Essie said.\n\n\"I don't know who the fuck you are,\" Rhi fumed, then turned to me, \"Except that maybe you are one of Josh's ...what is she Josh? A girlfriend? Fuck buddy? Whore?\"\n\nI stayed silent. The truth was all of the above, but I refrained from even shrugging. \n\n\"You don't have to be rude, Rhi,\" I said, \"Be respectful.\"\n\n\"Oh , you want me to be respectful? that's just great!\" Rhi said, getting wound up, her hand still keeping me from opening the box, leaning in and nearly shouting at me, \"You have a night with your... whatever she is, while Gina and I are frightened and scared at my sister's house. I didn't even know we'd moved in. I have a lot of issues with my sister, not that you'd care, asshole!\"\n\n\"If you allow me to get what is inside this box out,\" I said evenly, forcing myself to stay calm, cool, and collected, \"I can start to make sense of things. I'm sorry, I wish I could tell you the whole story. I can't \u2014 it might make things worse.\"\n\nRhi pulled her hand back off the top of the box and crossed her arms, then flicked glances between Essie and me. Her blue-blackhair swaying as she shifted back and forth. Then she leaned towards Esse.\n\n\"Is that what he told you too?\" Rhi asked leaning towards her, then glared at me, \"This is such bullshit, Josh. When did you become an asshole? Why can't you just talk to me?\"\n\n\"I can talk to you,\" I said, \"I can't tell you what happened.\"\n\n\"When he shrugs, that means yes,\" Essie said, trying to be helpful, \"And yes, he's been the same way with me. I can't remember anything after Sunday afternoon, after I pulled him over for expired registration.\"\n\n\"I can't remember past Saturday when my daughter brought me over to this apartment.\" Rhi said, Essie's calm voice led her to soften into a more normal tone.\n\nI opened the box, and pulled out the new packaging inside. A similar black box with white lettering \u2014 Basics: Neural Control Node printed on the top. It was larger than a cell phone package, but roughly the same size. I started trying to pull the box apart, but it stuck. \n\n\"My grandfather was shot on Monday night,\" Essie continued, \"I don't remember what happened, but apparently I was there, and so was ... Gina? You daughter? Was her wound in the leg?\"\n\n\"Yes,\" Rhi looked at Essie curiously, \"The bullet went through her thigh cleanly. The wounds were closed, and apparently healed quickly, only the stitches remained. She doesn't even have a limp. \u2014 I'm sorry about your grandfather, that's horrible.\"\n\n\"He is in a better place,\" Essie tried to smile, \"He was so sad after Aubela died, I'm sure they are together again. They were soul mates.\"\n\nRhi looked at me, her eyes softening. I sighed at hearing those two meaningful words, then shrugged.\n\nI flipped the box over, and slid my utility knife through the tape circles keeping the box shut. I flipped it back over, then pulled the top up, shaking the box gently to disrupt the vacuum and let the two halves separate.\n\n\"Something happened to us,\" Rhi said, leaning towards me, \"You caused it, but you didn't mean to.\"\n\nI shrugged, wanting to tell her the whole tale. She leaned back and looked at Essie.\n\n\"He's very helpful, isn't he\" Rhi complained sarcastically.\n\nWith the box opened, I pulled out the device, and slid it from its electrostatic protection pouch and into my hand.\n\n\"He's being careful,\" Essie explained, \"He said if he told me anything it could mess everything up. I think he's trying to fix what's happened.\"\n\n\"It's a bit disturbing that he's so silent,\" Rhi said, \"But I see he is focused on this... thing.\"\n\nI let them talk as I placed the slab of black matte metal on the table. Instead of a cube, it was a black slab, the corners and edges were slightly rounded. The dimensions were precise, thinner and taller than a large form factor phone. I appreciated the symmetry and how the squared dimensions hinted at a cube. \n\nI touched the center of the top face, and the slab buzzed, and my eyes blurred. When my vision returned, I read the white words scrolling down the face of the slab.\n\nNeural Control Node activated...</br>Node owner Josh detected...</br>Performing cognitive update...</br>Cognitive update complete: Success...</br>Retrieving account history...\n\nThe dots repeated across the screen, looped into a repeating circle for a few seconds, then the slab went black. A couple of seconds later the face lit up like a touch phone screen with rows of icons, four across. Five of the icons, four on the top row and the leftmost square on the second row lit up with avatars. I saw the faces of each of my assistants but they were greyed out, not colored. Their labels read:\n\n[Gina] \u2014- [Rhi] \u2014- [Essie] \u2014- [Tess]<br/>[Katie]\n\nA dialog opened in the center of the slab it read:\n\nPlease create your owner password\n\nA keyboard lit up along the bottom of the screen, and I typed:\n\nSoulMates4Ever!\n\nIt asked for the password a second time for confirmation. I retyped it carefully, the small keys were a bit tricky. Then the system presented another popup:\n\nplease say your password in your normal voice to confirm your voice print identification\n\nThere was a button to start the recording.\n\n\"I need you both to be quiet for a moment, please.\" I said, then looked at them.\n\nThey looked at me curiously. It appeared they had been chatting amicably while I was absorbed with the new slab. Rhi stared at me then nodded.\n\n\"Okay, I appreciate your politeness\" Rhi said, \"I don't see what's so captivating about that thing, but I'll be quiet. I hope we can start getting answers soon.\"\n\n\"Thank you,\" I said, and looked at Essie who also nodded silently.\n\nI tapped the button, then spoke clearly, \"SoulMates4Ever!\" Making my voice rise at the end then tapped the stop button.\n\nThank you, please repeat the password to verify.\n\n\"SoulMates4Ever!\" I said again in the same tone and pattern.\n\nVoice print recorded, please remember your password\n\nI sat up and the dialog disappeared, returning to the home screen. I studied the screen, then looked at both Rhi and Essie. Essie had relaxed, leaning forward watching me with her hands supporting her chin. Her feet just under her chair resting on the floor, my tee shirt draped over her breasts down to her lap. Rhi looked less irritated, and more relaxed holding her hands together in her lap. Rhi wore a modest blue blouse and a pair of white shorts for her morning drive.\n\n\"Okay,\" I said, \"I'm ready to start. I will need you to follow my instructions step by step. I will answer any and all questions after both of you have completed the process.\"\n\n\"Why do we have to do any of this?\" Rhi asked, \"Is it because of what happened to us last weekend.\"\n\nI looked at her and shrugged.\n\n\"So yes,\" Essie said, then directed a question at me, \"Will this repeat the process?\" \n\nI shrugged, and looked at both of them.\n\n\"Will we be harmed if we refuse?\" Rhi asked a bit of fear in her voice.\n\n\"I don't know,\" I answered, \"You are both very important to me, I don't want any harm to come to you. Once the process is complete, it is reversible. I've been told that if the process isn't followed you may have consequences. I only want what is best for you. I know it's hard to comprehend, and I understand trusting me right now is ... difficult. This is all I can tell you now.\"\n\n\"Does the order matter?\" Essie said, \"Maybe Rhiannon will feel better if I go first.\"\n\n\"Please, call me Rhi,\" Rhi said with a smile, then looked at me, \"This is strange and weird, but I want to trust you Josh, I will go first if that is okay.\"\n\n\"Great,\" I smiled, \"okay, one at a time, please. We can discuss together after both of you have completed the process.\"\n\nI wanted to tell them I loved them. I only hesitated because if that memory got corrupted I wouldn't know how to continue. I found Rhi's avatar and pressed it. A message on the screen said:\n\nNeurally Enhanced Assistant Rhi is deactivated, would you like to reconnect? <br/>[Yes] [No]\n\n\"I see something!\" she said excitedly.\n\n\"It doesn't look like anything to me,\" Essie said, leaning closer to look at the slab.\n\n\"What's a Neurally Enhanced Assistant,\" Rhi started to ask, then shook her head, looked at me, and smiled softly.\n\nRhi pressed the Yes button, and the screen reflected in her eyes as the script messages scrolled down the screen. I looked at Rhi and her eyes blinked rapidly, then her eyes steadied, and another dialog appeared. Rhi gasped.\n\nThe dialog said:\n\nAssistant Rhi detected...</br>Performing cognitive update...</br>Cognitive update complete: Success...</br>Rhi, would you like to connect to the new network [Yes] [No]\n\nShe scanned the phone, and looked up at me, her grin widening.\n\n\"You have to press the button, Rhi,\" I said, \"It's your decision.\"\n\nRhi smiled, and for a moment I lost track of time. She blinked normally a couple of times, then pressed on Yes. Her eyes fluttered and a stream of dots appeared then the following prompt.\n\nNetwork reactivation successful...<br/>Assistant Rhi - Please read the TOS, then record your voice by stating \"I Consent\" to complete the process.\n\nTwo buttons one for record and one for stop appeared under the prompt.\n\nRhi looked at me, and her smile broadened yet again. She bypassed reading the Terms of Service link, leaned close to the slab and pressed the button for record, but her eyes were looking into mine.\n\n\"I consent,\" she said then hit the stop button.\n\nHer eyes again fluttered and the screen cycled through a ring of dots. A final dialog box appeared.\n\nReassimilation completed, Please, have a nice day.\n\nRhi read it and smiled excitedly at me, \"It's a very polite machine.\"\n\nI grinned, I wanted to hug her, kiss her, ask her a million questions, but I needed to be patient until this was finished. I held up a finger. I had to blink back some emotion and swallowed. When I was steady again, I looked at Essie and she looked back and forth at both of us in surprise.\n\n\"That actually did something to her?\" Essie said, looking at Rhi, \"Do you feel okay?\"\n\n\"I feel wonderful, Essie,\" Rhi said and her voice caught in her throat, and looked at me, then back to Essie, \"Please ... everything will be okay.\"\n\n\"Manners...\" Essie smiled softly, then looked at me, waiting.\n\nI pressed on the Essie avatar, and the screen lit up and her face broke into a smile as she read the screen. She followed the instructions and the prompts all reported success. I let out a long exhale then felt like I could breathe again. \n\n\"I consent,\" Essie said finally, and hit the stop recording button.\n\nHer brown eyes watched mine until they started to flutter. I was able to breathe again, and I closed my eyes and lowered my head to the table. I started crying in relief. I felt the hands of my lovers rubbing my back and then their lips kissing behind my ear. I sat up and wiped my tears.\n\n\"Do you understand now?\" I asked them.\n\nThey both nodded.\n\n\"Do you remember?\" I asked.\n\n\"Everything,\" Rhi said, \"I remember everything, Master.\"\n\n\"Every second, Papi,\" Essie agreed.\n\nThey stood up as I rose and wrapped them in my arms. They pressed themselves against me and I kissed the both. My body sagged in relief, as I relaxed. \n\n\"We need to get to Tess, Gina and Katie\" I said, \"We need to make sure everyone is safe, that's the first priority.\"\n\nWith a nod, Essie headed to my room and I followed. She pulled off my tee shirt and handed it to me. Inside my room she pulled on her jeans, leaving her panties on the ground. The tee shirt she handed me was my only shirt, the rest were in Rhi's closet at Tess'. I pulled on my tee-shirt that now had Essie's scent, as Essie pulled down her own tee shirt over her bra, and grabbed her jacket.\n\nRhi stood beside the door, looking at both of us dressing as we turned to her. \n\n\"You spent the night here, Essie?\" Rhi asked curiously.\n\n\"I had nowhere else to go,\" Essie explained, \"All my things are in my room at Tess', my grandfather's house is empty getting ready for an estate sale. Luckily I had Josh's phone number in my phone.\"\n\nRhi looked at me, then back at Essie. Putting two and two together.\n\n\"You're such a horn dog, Josh,\" Rhi grinned.\n\n\"Let's take my car,\" I said, as I blushed, \"I don't want to be apart from either of you until the whole family is safe. We can get your bike and your car later.\"\n\n\"Of course,\" they both said simultaneously, \"You're the boss.\"\n\nI shook my head and smiled, and we were soon hurtling up the freeway doing five over the speed limit. Essie was sitting in the back, and Rhi at my side. I held Rhi's hand and she held mine in both of her hands. She couldn't stop looking over at me, and I looked at her.\n\n\"What?\" I asked, \"You can ask me anything.\"\n\n\"I don't want to ask you anything,\" Rhi said, \"I want to tell you. I love you Josh. I love you so much.\"\n\n\"I love you too, Rhi,\" I said, \"I'm so glad you remember.\"\n\n\"It must have been hard for you,\" Rhi said, \"To remember everything, and have us forget. I can't begin to imagine how that felt. I was empty without the memories of last week. But you had five empty spots didn't you, you remembered everything, all your emotional connections \u2014 Oh babe, that must have been like living in hell.\"\n\nI shrugged, and blinked my eyes rapidly.\n\n\"It's okay, babe,\" she said, \"You can tell me.\"\n\n\"I don't know where to begin,\" I said, my voice catching, \"I knew it was coming, I knew it would happen. I couldn't say anything, I couldn't soften the blow we all felt. It was excruciating. After you all lost your memories, I had to focus on getting to today. Waiting for the updated node. Essie helped me, not just with staying over, but by trusting me.\"\n\n\"I love you, Josh,\" Essie said leaning forward and kissing my shoulder, \"I get it, you did what you had to do. You had my back, just like you promised.\"\n\n\"And you had mine, Essie,\" I said, \"I love you too.\"\n\nI had to blink rapidly to keep my view of the road clear. We quieted and kept our own thoughts. I repeatedly tapped my pocket, reassuring myself that I had my new node with me. It seemed like forever before we pulled into Tess' driveway.\n\n\"Let me lead,\" Rhi said, \"Tess isn't happy at all, her comfy little world has changed, and she's a bit grumpy. Having five people move in suddenly had really affected her. Especially two complete strangers.\"\n\nWe nodded, and I took Essie's hand. It did feel odd to return to the house we'd been chased out of just the night before. Rhi opened the door and waved us inside. Tess was walking towards the entrance, alerted by the sound of the opening door. Rhi leaned into her and hugged her tightly. \n\nI was about to interrupt her, I couldn't allow a lot of explanation. It might affect how Tess was reconnected. Rhi, however, understood. \n\n\"I need you to trust me, Tess,\" she said, meeting Tess' stern gaze, \"I need everyone to come into the living room. Josh has something amazing to show you.\"",
        "\"Who's Josh,\" Tess asked, then eyed me over Rhi's shoulder.\n\n\"That asshole from yesterday? Your neighbor?\" Tess asked, \"C'mon Rhi, really?\"\n\n\"Tess,\" Rhi said, \"Just \u2014 for me, do this \u2014 Please.\"\n\n\"Since you asked so nicely,\" Tess said with a confused look.\n\nTess, Gina and Katie all sat on the sofa, and I sat on the edge of the coffee table. Rhi on my right, and Essie on my left. Gina looked like she had been crying. Katie just looked confused, and maybe a bit bored.\n\n\"Wait, can you explain what happened to my tattoo?\" Katie asked suddenly.\n\n\"Or why my hair is ... blue?\" Gina asked, then cupped her large breasts, \"and these...jugs?\"\n\n\"Our hair,\" Tess added, \"and my eye color? We'd like some answers.\"\n\nI pulled out my new slab and tapped the face, the screen lit up for my eyes only and I held it up. I looked at Gina first, then panned to all of them.\n\n\"I'm Josh,\" I said, \"I need you all to trust me and follow my instructions. I will answer all of your questions, if you have any, when each of you has finished a process with me. This has to be done all at once. One at a time.\"\n\n\"What has to be done?\" Tess asked.\n\nRhi put her hand on her sister's knee, and looked at her. Tess quieted and nodded.\n\n\"This is confusing as hell,\" she shrugged, \"But so is a closet full of men's clothes.\"\n\nI started with Gina, I held the phone so she could see it, then clicked on her avatar. I could see the reflection of the screen brighten in her eyes. She looked at me curiously.\n\n\"Is this a video game, Josh?\" she asked.\n\n\"No,\" I said, shaking my head, \"It's so much better.\"\n\n\"Okay,\" Gina smiled, and I saw my gaming partner in her eyes, \"I trust you Josh.\"\n\nShe tapped through the steps, eyes fluttering through each phase, then looked at me before tapping the record button.\n\n\"I consent.\" she said, then her eyes fluttered as soon as she hit the Stop button.\n\nGina regained focus then leaned into me and hugged and kissed me. \n\n\"Oh, thank god,\" Gina whispered in my ear.\n\n\"Shh,\" I smiled, then turned to Tess.\n\nI looked at her then tapped her avatar. Her eyes lit up with the reflection, and she looked at me warily.\n\n\"This is a bit fucked up, you know?\" Tess said.\n\n\"When it's done, we can talk,\" I said, \"For your own safety, I just need you to trust me.\"\n\n\"I trust, Rhi,\" Tess said, \"And Gina... You...? Well. I'll see on the other side.\"\n\nI nodded and she tapped on the buttons, her eyes flickering between steps, then with a more knowing grin leaned closer, and pressed record.\n\n\"I consent.\" she grinned after her eyes stopped blinking.\n\nRhi smiled at Tess and kissed her sister deeply. Tess blushed and had to part with a deep breath. \n\n\"Okay,\" Tess said, nodding \"I get it, let's take care of Katie.\"\n\nI turned to Katie. She looked more confused than anyone else. She looked at me, then looked at Tess. Tess nodded.\n\n\"It's okay Katie,\" she said, \"Please, trust him.\"\n\n\"Since you're so polite,\" Katie murmured, looking at me oddly.\n\nI pressed her avatar, and saw the reflection of the screen in her blue eyes. She furrowed her brow, then followed the prompts. Each time her eyes fluttered through another step, her smile grew. \n\n\"I consent,\" Katie said and pressed the button, her eyes fluttering a final time, then locked on mine. \n\n\"I remember,\" she said, \"everything,\" then she leaned and kissed me, then twisted to kiss Tess beside her.\n\nI relaxed, and breathed. The tension in my body seemed to just lift away. I stood up and walked out to the patio. I put the new node on the patio table, and just watched the river flow by my thoughts disorganized but feeling an overall sense of relief.\n\nRhi pressed herself against me from behind, her arms wrapping around my waist. I held her hand and turned. She loosened her grip as I twisted to face her, my fingers combing her hair from her cheeks, and looking into her eyes. I kissed her tenderly, then hungrily. She squeezed me harder, pressing her tongue against mine.\n\n\"I'm so sorry,\" I said, \"I wanted to tell you, but Bala said that it wasn't safe - there was no way to...\"\n\nShe pressed her fingers to my lips and fixed her gaze on me. I blinked and bit my lip.\n\n\"You don't have to explain,\" Rhi said, \"I know, I know you did exactly what you had to do to ensure our safety. Even if it tore you apart.\"\n\nShe shook her head, her eyes bright, then a tear crested and ran down her cheek.\n\n\"I know, Master,\" she sighed and kissed me tenderly.\n\n\"Let's go back and get your car, and Essie's bike,\" I said, after we parted \"I want to get something for you on the way,\" \n\nI lifted my hand to her shoulder, then traced my thumb over her bare neck. She had removed the silk collar and that realization just about crushed me. She felt my thumb then glanced at me and it clicked, and she smiled. She nodded softly, then kissed me again.\n\n\"Of course, Master,\" she breathed, \"I'll tell Tess and the others.\"\n\nI picked up my new node, and slipped it into my jeans pocket. I probably needed a shower, my eyes were probably bloodshot and swollen. Essie saw me as I came in and took my hand, walking with me to the door. \n\n\"I can get my bike later, Papi,\" she said, \"You look like hell.\"\n\n\"I'm not resting until everything and everyone is under one roof,\" I looked at her, then looked over my shoulder, at Tess.\n\n\"What needs to be done to get Katie settled?\" I asked.\n\n\"I've got it handled, Josh,\" Tess said, \"You take care of Rhi and Essie.\"\n\nRhi hurried to catch up and then the three of us walked out and back into my car. I needed gas, and I was hungry. My nerves were shot and I set my jaw to concentrate. I pulled into a gas station, and Rhi squeezed my hand and went inside waving to Essie to follow. \n\nI pumped gas into my car mostly running on auto-pilot, watching the numbers turn as the tank filled. I jumped in surprise when the auto shut-off triggered. I topped off the last few cents, wanting to get it to an even number. One of my few compulsive habits. I put the nozzle back, and the girls slid back into their seats.\n\n\"Coffee,\" Tess said, handing me a cup, \"The way you like it. Donuts and danishes, tell me which you want.\"\n\n\"Cheese danish?\" I asked.\n\n\"Of course,\" she said, and held it in her hand.\n\nI took a sip of my coffee, and put the cup in the holder then smiled at Rhi and leaned to kiss her, taking the danish.\n\n\"Thank you,\" I said, \"You serve me so well,\"\n\n\"I'm delighted to,\" she smiled.\n\nI pulled off and headed down the highway. I looked into the rear view mirror and Essie was grinning at us. \n\n\"I love you guys,\" she said, \"I love you both, and I love how in love you are. I'm so lucky.\"\n\n\"Do you know where I can go to get a slave collar?\" I asked aloud to no one in particular.\n\n\"SexySadies,\" they said in unison, then giggled.\n\n\"I'll tell you how to get there,\" Rhi smiled.\n\n\"Did you know this before becoming assistants,\" I asked curiously, \"Or have you both gotten some AI assistance.\"\n\n\"The GPS directions are AI,\" Rhi said, \"Take the next exit.\"\n\n\"SexySadies is a known commodity, Papi,\" Essie said, \"If you've been anywhere on the scene.\"\n\n\"The scene?\" I asked.\n\n\"BDSM, Munches, Swinging, Sex parties,\" Essie listed, \"Don't tell me you've never gone to a munch or a play party.\"\n\n\"Um...\" I started.\n\n\"Damn, Papi is a vanilla fucker,\" Essie said, \"I had you pegged as a dominant, but maybe that's just who you are, no role playing.\"\n\n\"Too much reading and fantasizing,\" I said, \"I never really got into scenes, and parties, and ...\"\n\n\"That's cool, babe,\" Essie said, \"You scratch my submissive itch without breaking a sweat.\"\n\n\"Preach,\" Rhi said, then smiled at Essie, \"Isn't that what the kids say these days?\"\n\nI shook my head, and enjoyed the danish, the cup of coffee, and a few donuts. I realized I hadn't eaten since the late lunch the day before. The girls snacked on what they selected from the gas station market. The bit of a sugar rush and cafenie helped me feel a bit less drained.\n\nRhi directed me through a series of turns, then we stopped in a strip mall. A storefront sign read SADIES, in block letters. The large plate glass windows were filled with mannequins dressed in various kinky outfits or lingerie. I held both of their hands as we walked into the door.\n\nThe large space was segmented into different areas. Insertables, Massagers, Oils, the labels weren't explicit but close enough to be able to make it to the right areas. Rhi led me towards the back, where more of the kinky outfits and fetish wear were collected. She leaned against a counter and pointed to an array of leather collars hanging on the wall. \n\n\"You want leather?\" I asked, curiously.\n\n\"I want to wear your collar,\" she smiled, \"It doesn't have to be anything specific.\"\n\nI looked down inside the display case, and there was an array of metallic collars. Some with latches, and padlocks. The one that caught my eye appeared to be a single ring of silver, I could barely discern the thin line where two pieces of metal hinged. The opposite side had another thin line.\n\n\"That one locks with a special key,\" Essie said, and Rhi nodded.\n\n\"I like that one,\" I said, \"I'm getting it.\"\n\n\"It's a bit pricey,\" Rhi said, holding my elbow, \"Are you sure?\"\n\n\"I'll take care of it,\" I said, \"Why don't you two go find other things, didn't you say we needed some quality lube, Rhi?\"\n\nRhi grinned and kissed my cheek. Rhi grabbed Essie's hand and off they went to go shopping. I hovered over the display case, until a female employee realized I was a paying customer. We discussed the features, and she showed me the mechanism. I asked about the quality of the metal. She assured me it was the highest quality titanium. I said I preferred silver. She said titanium was actually cheaper, and would not need polishing. Slowly we came to an agreement and I slid over my credit card. She placed it in a nice wooden case, and then handed me the special hex key.\n\nI walked to the front, and Rhi was collecting her new treasures in a bag. Essie had gotten her own collection of toys. She grinned when I asked what she got.\n\n\"I'll show you later,\" Essie said, \"These are family toys, not just for you.\"\n\nWe returned to the car. I asked if either of them were hungry and they shook their heads. So without further delay we went back to my apartment. The three of us went up stairs and collected anything that needed to be moved to Tess' house. I repacked my laptop bag. I put the dead spare cubes in Essie's gun safe. Rhi collected our clothes, and even the sheets from the previous night putting them in a clothes basket. \n\nWe carried everything and put it in the back of my car. I hoped I'd never have to move a gun safe again. Essie stowed her grandfather's ashes, and a collection of the cards. The rest of the sad wilted flowers we deposited in the trash. Essie kept a list of names to write out thank you notes.\n\n\"It's important to be polite, Papi,\" she said, \"Polite people send thank you cards.\"\n\nI couldn't argue with her logic. After the last day, and the small reassuring politeness tics, I was a believer in minding my manners.\n\nSatisfied we had collected everything we'd need. We split up, Essie taking her bike, Rhi returning in her car, and I drove alone in my SUV. I turned on some music as the miles passed. My thoughts were slowly turning positive after worrying for much of the last 24 hours.\n\nMy phone rang, I recognized the caller ID number as Bala's. I would have to add his name to my contacts. I pressed the answer button on the car console, then waited for the audio to connect.\n\n\"Bala,\" I said, \"Good to hear from you.\"\n\n\"Josh,\" Bala said, \"I see you've received your new node, and all of your NEAs were transitioned without issue.\"\n\n\"That's correct,\" I said, impressed that he was keeping tabs on my situation on a weekend, \"Everyone updated and reconnected. I can't tell you how relieved I am that we didn't have any issues.\"\n\n\"You are lucky,\" Bala said, \"So far, you alone have been able to transition from the beta environment to the new network. We have some quality assurance challenges. I'll discuss with you Monday the protocol we followed for the safety of v1 NEAs. I'm afraid you'll be quite busy right out of the gate.\"\n\n\"My laptop is scheduled to be delivered this afternoon,\" I said, \"I'll get it setup over the weekend and be ready to assist first thing Monday.\"\n\n\"Excellent,\" Bala said, \"I appreciate your enthusiasm. Please enjoy the rest of your Saturday, and enjoy the weekend with your family.\"\n\n\"You too, sir,\" I said and disconnected.\n\nWe drove in a loose caravan, Essie led on her bike, Rhi following her, and I took up the rear. It wasn't long until we were pulling into Tess' driveway. She had opened the garage, and Rhi pulled in next to Tess' car. I parked in the driveway behind Katie's VW, while Essie had parked her bike just in front of the yellow Beetle. Gina smiled and waved from the edge of the garage.\n\n\"Aunt Tess is fixing lunch, and Katie is helping.\" she said, \"What needs to be carried in?\"\n\nIt took only a few moments for the three of them to silently determine the assignments. Gina grabbed the clothes hamper taking it inside. Rhi gathered Essie's collection of well wishes and her grandfather's ashes. Essie and I hauled her gun safe into the garage. Finding a place near the entrance to the house.\n\n\"Will this be okay with Tess?\" I asked.\n\n\"She said it was fine,\" Essie said, then looked at me and I must have looked confused, \"Well not in so many words, but she is aware and has no objections.\"\n\n\"So... the unspoken neurally enhanced assistant communication network is operational again?\" I grinned.\n\n\"Yep yep,\" Essie said. \n\nI went back to my car to get my laptop bag, while Essie closed the garage door from the inside. I walked to the front door, and saw another NCNHQ logoed box. This was laptop sized, so I picked it up, and let myself in. I saw everyone was gathered in the kitchen, so I put my bag and the new box on the sofa and joined them.\n\n\"You look like a mess, Josh,\" Tess said, \"Eat first, I made some sandwiches.\"\n\nI nodded, and looked around, their smiles had all returned. They chatted between themselves. I enjoyed the sandwich, some potato chips, and fresh summer fruit. We all just ate around the kitchen counter, and Rhi leaned against me from time to time. \n\n\"Katie all moved in?\" I asked.\n\n\"Yes, at least her clothes and stuff.\" Tess said, \"We need to go back on Monday to clean up and clear her lease. It's all under control.\"\n\n\"Good,\" I said and smiled, \"It feels so good to have us all back together, I can't begin to describe how worried I was.\"\n\nIt all started to come back to me, the fear, the uncertainty, the pressure. My eyes dropped and my shoulders sagged. My eyes blurred as they filled with tears. Rhi rubbed my back, and then took my hand.\n\n\"Come with me, Master,\" she said. \n\nShe looked past me towards the others, and something unspoken was passed between them. Then she led me upstairs and into our room. She shut the door, then stripped completely. I stood there unsure of what to do. She smiled and then undressed me, her tender touches making my cock rise to the occasion. Then she took my hand and led me into the bathroom.\n\nShe started the water running in the bathtub, and added some bath oils. Then she opened the shower and led me inside. I looked at her as she started to hum pleasantly and started to wash me with soap.\n\n\"You be still, Master,\" she said, \"Let me care for you, okay.\"\n\nI tried to smile into her eyes, wanting to get lost in her brilliant blue irises. Instead my eyes blurred and I wrapped my arms around her and pulled her against me. I let go of my emotions, feeling secure enough to cry on her shoulder. She rubbed her fingers along my spine, and let me cry until I could take a deep breath.\n\n\"That's good, baby,\" she said, \"You have to let all that go, it's past. We can't change it. We have to keep moving.\"\n\nI nodded, then smiled. I looked into her eyes and combed her dark blue hair behind her ear. Finally able to focus on her eyes, I nodded and kissed her.\n\n\"You're right,\" I said, \"I need to purge all of the pent up emotions. I think I have, but it may bubble up sometime.\"\n\n\"Well \u2014 speaking of bubbles,\" she smiled, \"I need to make sure the tub hasn't overflowed. I'll meet you there, when you're ready, okay?\"\n\n\"Thank you baby,\" I nodded, then looked for some shampoo.\n\nShe slid out and I washed my hair. I scrubbed the rest of my body, then rinsed my hair and body. I stepped out onto a towel, then climbed into the tub. The water was hot, and the scents from the bath oils were soothing. I slid against one side, then pulled Rhi between my thighs and pulled her back against my chest.\n\nI held her quietly for a few moments, enjoying the peace and quiet. Her hands ran along the outside of my thighs, while I caressed her sides. Her presence was arousing, and I'm sure that she felt my erection pressing against her. We both understood we needed a deeper connection for the present time.\n\n\"I was angry that I couldn't tell you,\" I started, \"Afraid that your memories would all be permanently lost.\"\n\n\"Shh,\" Rhi started to turn, and I caught her hand in mine, and looked at her.\n\n\"I need to say all of this outloud,\" I said, \"Even if you know everything... I need to let it out.\"\n\nShe nodded and stayed quiet, but twisted to look at me. Her breasts pressed against my chest, and our eyes fixed on each other.\n\n\"When you chased me out, me and Essie,\" I continued, \"I understood what happened, Bala had warned me. He told me that the sudden loss of the network would leave you without any recollection of events that happened since the time you touched the cube. He warned me that if a memory was accessed while disconnected, it could be corrupted and be lost.\"\n\n\"I was angry at the situation, and with myself,\" I continued as she watched me, \"Part of me was mad I hadn't released all of you, so you wouldn't be affected by the downtime. Then part of me was locked into our morning conversation and how we were better together, than before the cube. I had to follow that path.\"\n\n\"I know,\" Rhi nodded, understanding, \"You kept quiet as a sacrifice to keep us safe. It must have been so hard to stay quiet.\"\n\n\"Everytime Essie or you asked a question,\" I continued, \"I wanted to answer, I had to shrug just to give an indication I heard you. Essie picked up on the cues, she built a new understanding outside of her trapped memories. I was worried that would affect her, and I'm glad that everything worked out. It could have been a disaster.\"\n\n\"I'm sorry that you were afraid, and confused,\" I said, \"It tore me up trying to think what you were going through. I wish there would have been a better way.\"\n\nRhi slid up and kissed me, her breasts sliding up my chest. She ran her fingers through my hair, and looked into my eyes. She lowered her eyes and kissed at the base of my neck, then another inch down. Then she stopped and returned her eyes to mine.\n\n\"I am trying to remember what I was feeling,\" Rhi said, \"I'm sure you are right, we all must have been frightened and confused. I can't remember it in detail though, it's fleeting, like a dream \u2014 a nightmare. It doesn't feel real.\"\n\n\"Must be related to being reconnected,\" I mused, looking into her eyes, \"The time while the last network was down and then reconnecting must have memories outside your neural mapping,\" I thought aloud, trying to understand our experiences, \"That makes sense, and I'm glad you won't have those scars.\"\n\n\"But you do, Master,\" she said, \"I understand that. While I can't remember, I can comprehend the hell you went through. I'm glad Essie was there to give you some solace. To be completely alone after being connected and close. I can't begin to imagine how that felt. So I want you to say everything you need, so it's out and can vanish like our lost memories have.\"",
        "\"I appreciate you listening,\" I said, slowly grinning \"It's good to vent, but frankly your breasts are affecting my ability to process my memories, so I must be feeling better.\"\n\n\"That's good,\" Rhi purred, her eyes sparkling, \"Because you cock has been distracting me...\"\n\nShe ran her hands to my shaft and stroked it firmly. Then closed her eyes and ducked her head under the water to suck my head into her mouth. I groaned and pressed myself up, sitting on the edge. She grinned as she rose from the water and ran her hand through her wet hair, then slid her knees under her.\n\nShe stroked my cock, then looking at my eyes started applying her incredible oral talents towards the objective of worshipping my cock. I combed my fingers through her azure hair as her blue eyes looked up at me. Her tongue was swirling around my crown, then she'd press her mouth down, swallowing to take my cock into her throat. She purred around my shaft feeling my grip tighten in her hair.\n\nIt wasn't long before I pulled her from my cockand to kiss her deeply. I twisted her around and she settled on her knees, her smooth ass rising out of the water. She gripped the far end of the tub, her head turned to look at me. I gripped my cock and slipped into the water behind her. \n\n\"Please Master,\" she said her eyes dark with lust and need, \"Please fuck your slave, fuck her so so hard.\"\n\nI swatted her ass, and gripped her ass cheek. Then gripped my cock to notch the head against her opening. Then I pressed my hips forward and groaned as I felt her cunt stretch around my shaft. Then I was slamming into her heavily causing waves to shift and crash against the side. Water was going everywhere as I took my slave. I leaned and gripped her hair and turned her head so I could stare into her eyes.\n\n\"I appreciate good manners,\" I growled, \"You're my slave and I'll use you however I wish, your job is to please me...\"\n\n\"Yes, yes master,\" Rhi cried, \"Thank you, oh god, more fuck fuck.\"\n\n\"You please me very well,\" I growled and her eyes flashed, as she pressed her hips back to meet my thrusts.\n\nI used her hard, taking my pleasure from her flesh. Feeling her cunt quiver and tighten. Not letting her cum until I was ready. My will was the only thing keeping her on the edge, and she watched me hotly. She refused to beg or plead with words. Her eyes were doing the talking and I craved more of what she was feeding me.\n\n\"Cum for me,\" I finally growled, \"Fuck... cum HARD!\"\n\nShe bucked and shrieked, as I hammered into her clenching cunt. Her thighs quivered and clamped in waves, her body crashing through multiple orgasms as I continued to fuck her hard. At my peak, I pulled out, and gripped the base of my cock. She twisted around, eyes wildly seeking mine, then crawling towards me, mouth open. I gripped her head and pressed the head of my cock between her lips, then released my grip and stroked my shaft.\n\nRhi's eyes rolled back in her head as I blasted cum into her mouth. She swallowed frantically, trying to savor every drop and not let one drop slip from her lips. I groaned as I felt her hand cup my balls and milk them. Her other hand stroking my shaft to drain me completely. \n\nI slumped back into the tub, the water level had dropped considerably, with water in pools around the enclosed edge of the tub. I pulled Rhi up and held her in my lap. We kissed as I stroked her flesh. Closing my eyes and savoring the moments of bliss.\n\n\"I'm much much better,\" I finally said, \"Ready to rejoin polite society. Thank you mine, for helping me get right.\"\n\n'Always my Master,\" Rhi smiled, then rose and retrieved some towels. \n\nI pulled the drain and stood up, Rhi started toweling my dry. I did the same with her. Rhi looked at me, and I shook my head.\n\n\"I want to dry my slave, and feel her body under my hand,\" I said.\n\n\"Of course, my Master,\" she grinned and then hummed as she dried me completely. \n\nWe stepped from the tub, our vigorous fucking had spread puddles of water all over the bathroom. She giggled, and then pressed me towards the closet.\n\n\"I'll clean up this mess,\" she grinned, getting more towels, \"I'll be downstairs soon.\"\n\nI dressed, finding a pair of swim trunks and a printed tee. Sliding my feet into my flip-flops I headed downstairs feeling a thousand percent better. Essie was reclining on the couch downstairs and saw me walking down. She rose and met me at the base of the stairs and hugged me tightly. \n\n\"Where is everyone?\" I asked, getting lost in her brown eyes.\n\n\"They're out swimming,\" she smiled, then took my hand.\n\nShe led me back to the sofa and sat, one foot on the floor one foot crossed under her bottom. I sat and turned towards her, my head tilted in curiosity.\n\n\"What's on your mind,\" I asked, \"is everything okay?\"\n\n\"Everything is perfect,\" she smiled, then her gaze faltered, \"But I'm confused, it seems like it wasn't perfect earlier. I keep trying to remember, and it's faint. Did I stay with you last night?\"\n\n\"You did,\" I said, then tried to explain what I suspected, \"Those memories of last night and this morning are outside of what your mind accesses being connected to the cube. Do you remember when the cube was disconnected?\"\n\n\"Hmmmm,\" she said, her eyes lowering to think, then looking at me, \"Tess chased us... I think? Made us leave? then I ... It's bugging me. I can't recall everything.\"\n\n\"What do you recall?\" I asked.\n\n\"Going to bed with you,\" she said, \"Making love before falling asleep, and waking up beside you.\"\n\n\"I don't think it's important you remember the other things,\" I said, then looked outside, \"They will forget this ever happened.\"\n\n\"You can't forget, can you?\" she asked, \"Your mind isn't contained like ours are.\"\n\n\"That's what it seems like,\" I nodded, \"You have had more exposure to me than they do. You started to put pieces together, figured out that I was trying to fix things. They didn't have that same access. That might be an explanation why you are holding on to memories longer than they are.\"\n\nShe leaned and kissed me all of a sudden, and wrapped her arms around my neck. She hugged me close, then spoke in my ear quietly.\n\n\"I don't want to ever forget last night, Papi,\" she said, \"I want to remember, you had my back. You saved me.\"\n\n\"You saved me, Es,\" I said, \"You kept me sane, and I was worried you'd figure it out, access your trapped memories then wouldn't be able to reconnect. Do you remember everything from the time you pulled me over?\"\n\n\"I do,\" she smiled, \"The best part is now I remember two first times with you. I loved you before the break. Last night I fell in love with you all over again.\"\n\n\"I love you mi ni\u00f1a,\" I managed, and hugged her close, \"I feel the same way, we're connected deeper now, like Rhi and I are.\"\n\n\"Soul mates?\" Essie grinned, \"I wasn't really happy with Rhi's anger this morning, ...\"\n\n\"We were forced to leave,\" I explained through a smile, \"They are all familiar with each other, even Katie is known to Rhi and Gina. We were complete strangers. Rhi hardly knew me before she touched the cube. Thankfully you had my number in your phone, you reconnected with me. I think if Rhi were with me she would have followed the same path, but it was you. I'm thankful for that. Somehow you and I are meant to be.\"\n\nShe grinned at me, and looked outside towards the pool. Then back at me, her hand dropping to my cock, and stroking it through my shorts.\n\n\"I want you in me, Papi,\" she said, her brown eyes full of emotion. \"If I lose memories of our night together, I at least want a memory of just you and me.\"\n\nI lowered to my back on the sofa cushions, and Essie grinned and pulled my trunks down. Tossing her hair aside she lowered her mouth over my crown and sucked on my head while stroking me. I gripped a handful of her hair, tightening it in my grip. She looked at me, and moaned, making my hardening shaft vibrate. Then she worked her head up and down as my cock grew to full hardness.\n\nEssie sank to her knees alongside the sofa as she sucked me. My hands were at her bikini bottoms, untying the side. Letting my fingers slide along her firm thigh, then cup her sex, spreading her open. I slid a finger between her smooth lips and then circled her clit. I bit my lip, then nodded to myself.\n\n\"Appearance app, add a vertical bar clit hood ring to Essie.\" I growled in a whisper.\n\nEssie yelped and pulled her mouth from my cock, then her eyes closed as my fingers slid over the new jewelry. \n\n\"What's that for?\" she asked.\n\n\"To help you remember you're mine, mi ni\u00f1a,\" I said.\n\nShe grinned and lifted up to straddle me, her knee sliding between my hip and the side of the sofa. Her other foot extended back to the floor. I brought my hand up and pressed my thumb across the new metal, and she shivered.\n\n\"Like I could ever forget you, Papi,\" she said, using her hand to press me inside of her.\n\nShe leaned forward and kissed me. She shifted back down, then up to kiss me again. She kept repeating that as she drove her hips down, and rode my cock. I reached down and gripped her ass, then spanked firmly. The slap echoed in the living room.\n\nRhi appeared at the end of the sofa, watching us with a smile. She had come from the hall, probably after starting a load of wash. She looked at me, then slid onto the arm of the sofa, watching Essie as she rode me. Rhi wore her blue bikini from the day before, her nipples pressed firmly into the bikini top. She pulled her bottoms to the side, then spread her fingers to open her lips, then played with her clit ring.\n\nMy eyes blazed watching her, and Essie noticed, then turned looking over her shoulder at Rhi. She looked back at me, then lifted up, leaning to kiss me as my cock slipped free. Then she reversed, and gripped my cock to press it back inside her. I gripped her ass and pulled her down. Rhi slid onto the sofa, spreading her legs for Essie, and Essie lowered her mouth to lap at Rhi's silver ring.\n\nEssie was the center of attention, linking the three of us. She rode my cock, and moaned into Rhi's cunt. I smacked her ass and she wiggled her hips. She started to accelerate and I gripped her hips to help her move faster. Rhi's watched Essie, then flicked her eyes at me, biting her lower lip, the sight pushing me to the edge.\n\n\"Oh fuck, Cum mi ni\u00f1a,\" I growled, and felt Essie clench, \"Cum for me my slave,\"\n\nRhi tipped her head back and her thighs clamped around Essie's ears, her fingers gripping Essie's brown locks, as she ground her cunt into her lips. We writhed in ecstasy, then slowed. \n\nI slid up to sit in the center of the sofa. Essie rocked back, then slid beside me, her head on my chest. Rhi mirrored her resting at my side, then kissed Essie's forehead.\n\n\"I love you Essie,\" Rhi said, \"You kept my Master safe, you helped to bring me back, You are always safe with me.\"\n\nEssie rose and blinked, then leaned and kissed Rhi. They met eyes, and Essie nodded. Then pulled back and kissed my cheek, pressed against my side. \n\n\"I think she likes that,\" I said to Rhi, \"I know words are hard for me right now, but the two of you, mean so much to me.\"\n\n\"I do,\" Essie said, \"I feel like together we are a whole. One. \u2014 I don't know if that is true for the other three. I don't know if that's right or wrong. I want this to continue.\"\n\nI hugged them both, and then got up and pulled my shorts back up. I looked at both of them and held up a finger.\n\n\"There is something that can bring some clarity,\" I grinned, then looked around.\n\n\"Where did I leave my new node?\" I asked.\n\n\"On the counter, it was in your jeans when we took a shower,\" Rhi said, \"I had to put them in the wash, and deposited it there for you.\"\n\nI shook my head with an absent minded smile and then grabbed the slab, and returned to sit between them. I tapped the face and studied the new interface. Along the top was a toolbar, with various status indicators, like a cell phone - signal strength, date and time, and one little icon that looked similar to the ubiquitous share icon on most cell phones.\n\nI tapped it to see what it did, and a dialog appeared:\n\nSelect assistants to share with\n\nThen a list of their names with checkboxes. I ticked Rhi and Essie's name, and then OK.\n\nThe dialog disappeared and the screen returned to the home screen. Both of them gasped and leaned forward, looking at the screen.\n\n\"Okay,\" Essie said, \"This is cool.\" \n\nShe tapped her icon and nothing happened, then I tapped on Rhi's icon, and her icon expanded and then the screen filled with her avatar, naked and with blue hair, and a glint at the top of her sex. \n\n\"They should at least put a robe on me,\" Rhi said with a grin.\n\nI tapped on one of Rhi's breasts, and a slider appeared at the bottom of the screen labeled, \"Breast size,\" I tapped the thumb and dragged it to the right a few clicks. The avatar's breast grew. When I lifted my finger, another dialog box appeared: \n\nCommit changes? [Yes] [No]\n\nI tapped Yes, and Rhi's breasts bloomed causing her to moan and gasp at the same time. She looked at me and shook her head, they were larger than Gina's new pair. \n\n[Keep] [Cancel]\n\nRhi pressed Cancel and nothing happened. I pressed Cancel and her breasts returned to the way they were. Rhi kissed my cheek as a thank you.\n\n\"Oh, that's going to be lots of fun,\" Essie chuckled.\n\nI swiped from the right side of the screen, noticing a small arrow along the edge. The list of settings slid out and Rhi's avatar slid off screen. \n\nRelationship Settings<br/>Installed Applications<br/>Appearance Settings<br/>...\n\nI clicked on Relationship Settings, and the options were very similar to the FuckMe app's settings. Instead of the confusion of the Bisexuality and Orientation options it was a single slider labeled Sexuality with two icons, one representing heterosexuality and one representing homosexuality. Rhi's appeared to be just a bit under three quarters. The slider setting made more sense to me, an analog of the Kinsey scale.\n\nI followed the list of settings, and then tapped on \"Current Relationships\", the screen shifted to a list, names filled the top: \n\nJosh: Soulmate</br>Gina: Daughter</br>Essie: Soulmate<br/>Tess: Sister, Lover<br/>Katie:Friends with Benefits\n\n\"Yeah,\" Rhi nodded, \"that makes sense, I really don't want to be intimate with Gina, and I don't know Katie very well yet. Do these change?\"\n\n\"Yeah,\" I said nodding, \"These shift as relationships grow and change. I can override, like I did after you each touched the cube. That gives it a push, and then from there it's based on your own feelings. I think.\"\n\nI double tapped the face, and it went back to the homescreen. Rhi and Essie were curled next to me, captivated as I learned the new interface. I tapped on Essie's icon and her avatar filled the screen. I looked at her, and she pointed to the little bright spot where her clit would be.\n\n\"Is that the ring?\" she asked.\n\n\"Yeah,\" I nodded, \"Rhi has one too,\"\n\nRhi smiled and nodded then leaned over and kissed Essie, blocking my view.\n\n\"I'm glad you are pierced with me, Es,\" she said. \n\nI coughed lightly, as Rhi blocked my view of the cube. Rhi shifted back so I could see the screen again. I kissed the top of both of their heads. Then swiped and tapped to look at Essie's relationships.\n\nJosh: Soulmate</br>Gina: Lover</br>Essie: Soulmate<br/>Tess: Friends with Benefits<br/>Katie:Friends with Benefits\n\n\"Interesting,\" I said, \"You and Tess used to be lovers.\"\n\n\"Then she kicked me out of the house,\" Essie chuckled.\n\nI tapped back, and noticed Essie was a little more centered on the Sexuality scale than Rhi's, which meant - I assumed - more openly bisexual. Then I swiped from the bottom to go back to the home screen and tapped on Tess. The girls blinked.\n\n\"Why is it blank again?\" Rhi asked.\n\n\"Must be the sharing parameters,\" I mused, \"I'm sharing with both you and Essie. But not Tess. If I shared with Tess, then you might see her stats.\"\n\nI tapped the sharing icon, and added a tic to Tess' name. A dialog flashed up:\n\nAssistant Tess is not within range, sharing cancelled.\n\n\"So, it's a security thing,\" I said, reading the prompt aloud, \"Makes sense, but I'll tell you what I see.\"\n\n\"Okay,\" Rhi sighed and slumped down. Essie and Rhi smiled into each other's eyes as I tapped into Tess' relationship settings.\n\nJosh: Lover</br>Gina: Niece, Lover</br>Rhi: Sister, Lover<br/>Essie: Lover <br/>Katie:Lover\n\n\"Tess is a very loving person,\" I said, \"She loves everyone.\"\n\n\"Points in her favor,\" Essie grinned, \"I won't stay angry forever, I can hardly remember her slamming the door anymore.\"\n\n\"She slammed the door on you?\" Rhi said, \"I don't remember that.\"\n\n\"That's actually good that you can't\" I said, \"Trust me.\"\n\nI looked around for a way to close the slab down, or turn off the display. I tapped the top of the bezel above the toolbar, and the screen blanked. I leaned forward to put it on the coffee table without disturbing my soul mates, then reclined and held them close.\n\n\"I can see why you can be absorbed in that,\" Rhi said, \"I'm also glad you're good at limiting your screen time. Your restraint on the physical changes is nice. I could see that getting out of control fast.\"\n\n\"That might be the reason for the TOS violations,\" Essie agreed, \"I'm sure there are some weirdos that had too much fun with that toy.\"\n\n\"While we're still alone,\" I ventured, \"I'd like to discuss the collar I purchased. I want to hear from both of you. I don't know much about the scene, BDSM, or dominant-submissive relationships. I read stories, I feel like I'm on the dominant side. I don't know what being a Master is, and I don't want to fuck up.\"\n\nRhi and Essie shared a look, and then Essie raised an eyebrow. Rhi shrugged and nodded, then Essie looked at me.\n\n\"I'll go first, Papi,\" Essie said, \"I've also only played around the edges. I know I'm submissive in the bedroom, and outside of that I don't want to be controlled, or managed. The term is...\"\n\n\"Total Power Exchange,\" Rhi continued, \"Also called TPE, and it describes the willing exchange of power from the submissive to the dominant. It requires a lot of trust. A Master-slave relationship is a type of TPE agreement. A Master has control over a slave in all aspects of life.\"\n\n\"It's a spectrum though, Papi,\" Essie said, \"Correct me if I'm wrong, Rhi. Some TPE relationships get into picking out clothes, or makeup, to the point the Dominant has complete and utter control of the submissive's life. Some more partial TPE relationships negotiate parts of their lives. That's where communication and negotiation come in.\"\n\n\"Yes, Essie, that's exactly right,\" Rhi said, \"We get to decide what level of control you have over me. That's safe and sane. The more trust I have in you, the more I'm willing to give you control over my life. Control means trust. I live a normal life, and I trust that you know what I need, and will guide me.\"\n\n\"Okay,\" I said, \"That makes sense. What does the collar represent?\"\n\n\"It's a mark of ownership, Papi,\" Essie answered, \"You've marked us both already with our piercing. That's enough for me, by the way.\"\n\n\"I desire a collar,\" Rhi said, \"It's not only visual, it's physical. Your ring certainly reminds me of you. A collar however, the weight of it around my neck, night and day. That's a very physical sign that I belong to you. I used to wear the satin collar, to remind myself of you. That was presumptuous of me, and I'm sorry.\"\n\n\"Why are you sorry,?\" I asked, truly curious.\n\n\"It was disrespectful of you and your position,\" Rhi said, \"You suddenly had a slave. You didn't claim me, I claimed you. That's backwards. I want you to claim me, it's your choice to make. To me, I'm yours, completely. A collar would be wonderful, but you have to want to lock it around my neck. Then only you could ever take it off. I couldn't ever do that, like I did with the satin collar.\"",
        "I nodded slowly, then kissed them both again.\n\n\"Thank you,\" I said, \"I understand better. Does TPE or Master-slave have to include Bondage, Sadism?\"\n\n\"Those are different,\" Essie explained, \"That's more about what is happening in a role play or a scene - that's a pretty big topic. I enjoy a bit of pain, spanking, slapping. Your hand around my throat would probably make me automatically cum. I don't like severe pain, but a little bit of rope is fun.\"\n\n\"I'm more sensual,\" Rhi said, \"Your dominance in play for me is perfect. You control me, put me where you want. You take pleasure in me, like it is yours to take. My submission is all about giving you what you want. If you found pleasure in whipping me, I'd probably love it. If you found pleasure in forcing me to suck a friend's cock, I'd enjoy it. Because you are in control.\"\n\n\"Those are two things I'd never do,\" I said, looking at her, a bit disturbed.\n\n\"I know that, Master,\" Rhi said, \"That's exactly the point, you have the power, you decide. Don't ask me, you don't have to be polite. My will - I give it to you.\"\n\n\"It's about being under your control Papi,\" Essie said, \"You have it, we don't. We trust you, you love us. We get pleasure from serving you. That's a summation of the submissive mindset. At least for these two sluts.\"\n\nRhi grinned and nodded, not at all bothered by being called a slut. I nodded.\n\n\"So it's a cycle, like infinity.\" I mused, \"A dominant is nothing without a submissive, the power flows through each, apart there is no power at all.\"\n\n\"Yes,\" Rhi nodded, \"It's a power exchange, I give you my submission, you return your dominance - at some point there is no end or beginning, it just exists.\"\n\n\"Go get the box, Rhi,\" I said, then stopped myself from saying, 'please,'.\"\n\nShe grinned then slid off and hurried down the hall towards the offices. I looked at Essie.\n\n\"You'll let me know if you need more, right?\"\n\n\"You are all I need, Papi,\" Essie smiled and kissed me.\n\nEssie slid onto her knees on the floor, as Rhi returned. Rhi smiled at her and knelt beside her at my feet. I rose up and took the box, and opened it. Rhi trembled as she looked up at me watching. I focused on her and used the key to unlock the ring. The circle of titanium bent at the hidden hinge and opened into two semi-circles. I lowered to a crouch, and looked into Rhi's eyes, I slid one arc around her neck, then closed the other until the two halves met and melded together.\n\n\"I claim you Rhiannon as my slave,\" I said, as I twisted the key and locked it, \"My possession and my treasure.\"\n\nA tear ran down her cheek, as she looked at me. Her lips trembled, and I wrapped her in my arms, then kissed her. She kissed back her arms clinging to me, tightening her grasp around me. I parted the kiss and then kissed her forehead and rose.\n\n\"What's this all about?\" Tess asked from just inside the glass door, \"Are you guys going to come swim or what?\"\n\nRhi laughed and then stood up, the titanium metal flashing around her neck. Essie rose and hugged Rhi tightly, and they shared a kiss. Then Rhi hugged Tess. Tess kissed her sister and smiled, her finger tracing her new collar.\n\n\"What's this?\" Tess asked, \"Is it like a wedding ring?\"\n\n\"Better.\" Rhi smiled, and took her sister's hand and walked out to the pool deck.\n\nEssie leaned up and kissed me, then whispered in my ear, \"For not knowing what you're doing, you're a perfect Master, lover, and owner.\"\n\nI smiled and took her hand and walked out to the deck. I slipped into the pool and enjoyed the cool waters. Gina and Katie were hugging Rhi, and admiring her new collar. Tess slid beside me and hugged me tightly, then kissed me.\n\n\"I don't remember much of the last day,\" Tess said, \"I feel like I was angry with you for a moment, but it's hard to recall.\"\n\n\"Don't worry about that, Tess,\" I said, \"Forget that it even happened, okay. We are together now, and I want it to stay that way.\"\n\nShe nodded and I hugged her tightly. Enjoying how our bodies meshed together. I enjoyed looking in her violet eyes, and rediscovering her smile. She kissed my chest, then slipped away. I spread my arms along the edge of the pool watching my girls talk and laugh, hug and share kisses. I smiled enjoying a sense of peace. The afternoon was shifting into evening. The breeze off the river felt cooler. \n\nWhat a crazy twenty-four hours it had been, I marveled at the technology that linked us. The feelings between us felt more solid. The odd wave pattern of the old network was gone. Instead there was a subconscious link between each of us. If I concentrated I could sense the connections like a web, not only was I connected to each of them, they were connected to each other. We were individuals, but linked together. \n\nRhi slid beside me, and I wrapped my arm around her shoulders and kissed her temple. Katie and Tess were holding each other smiling and laughing. Gina was grinning at a story Essie was telling. The pieces of our puzzle fit together naturally, different pairs, and triads would shift, come together and part. In the moment I saw how it worked, but it was fleeting.\n\n\"Something light for dinner, Master?\" Rhi asked, as she comfortably draped her body around mine.\n\n\"That sounds lovely,\" I said, \"Maybe we can all watch something before we go to bed, I think we need to find a balance or a rotation.\"\n\n\"You're right,\" Rhi smiled, \"I feel all of our bonds strengthening, and we can find a balance.\"\n\nRhi kissed me, then slipped to swim to the shallow end. Tess followed behind her to dry and start on dinner. Katie swam in my direction. She smiled, as I pulled her against me, wrapping my arms around her waist. She pulled her arms around my neck, and just looked at me.\n\n\"I feel like I lost a day,\" she said, then kissed me tenderly.\n\n\"We did,\" I said, \"I want to try to catch back up, but we have time. No rush.\"\n\n\"Mmmm,\" she smiled, \"I'll enjoy any speed with you.\"\n\nI enjoyed a kiss, and holding her. I ran my fingers along her young firm body, her fingers running down my sides standing in the cool waters. I dropped my hands to her ass, and pulled her against me. Deepening a kiss as I held her tightly. Then parting slowly, looking into her blue eyes with a promise.\n\nGina and Essie joined us, and we all enjoyed more hugs and kisses. Nothing intensified, but we all enjoyed touching and being touched. There was no uncontrolled arousal that had seemed to happen in the v1.0 node. I felt I could control my own arousal and it didn't echo within our network and amplify. Our connections felt more secure and stable. I enjoyed all of their kisses and promising glances. Katie and Gina slipped off to the shallow end, while I held Essie close and kissed her. Then we followed and dried off sitting around the patio table.\n\nThe outside lights turned on, as the day waned, and shadows increased. Rhi and Tess brought out bowls of light salads, fruits, charcuterie and cheeses. Topped off with baguettes and wine. It was the perfect meal for the end of the day, and we enjoyed more conversation. I had each of them write their favorite romantic movie on a square, then we drew one from the stack.\n\nOnce the food and dishes were put away, we changed into comfortable clothes. Tess lowered a projection screen that covered the window towards the pool. Then the movie started, and we were cuddled on the large sofa in pairs with blankets. Tess and Katie together, Gina and Essie cuddled happily. I held Rhi closely as we enjoyed the movie. \n\nWhen the movie was over, the established pairs stayed together. Katie followed Tess towards her bedroom. Gina grabbed Essie's hand and led her up upstairs. I held Rhi for a bit longer on the sofa, then we both rose and headed upstairs to our room. It felt complete and peaceful, like a normal night. It was comforting to know everyone was under the same roof, and I knew we would have plenty of nights to play and explore. \n\nAfter the stress of the last two days, I made love to Rhi slowly. We watched each other as we enjoyed the feel of our bodies joining, until we both hit our climax together. We comfortably rested and faded off to sleep. I looked forward to a restful Sunday, and a new week, with a new job, and new mysteries to solve.\n\nAuthor's note\n\nThank you for reading. This is the final chapter for this story arc. The response to this story has been incredible, both in volume and in ratings. \n\nThank you for your encouragement with feedback, comments, favorites and ratings. \n\nThis series has been my most successful, and I'm proud of the effort. Your votes have made each chapter of the series within the top 15 stories for the last 30 days. That's amazing and humbling. Your five star ratings are incredible - if you think this series is worthy of the Mind Control Hall of Fame or a Monthly Award - keep voting 5 stars.\n\nA huge thanks to my editing team Pope1944, Shapachan and DJS_Ronin. Beta Reader Master_Doctor was helpful with the M/s definitions and attitudes. Any additional mistakes or errors are entirely my fault.\n\nAt the end of this chapter we've reached a novel length story of over 120k words, written in a little over a month. (at 3700+ wordsper day, that's double NaNoWriMo level effort!) It feels like I've ended a sprint, and I need a bit of time to catch my breath.\n\nI've always felt this first part was an origin story and a love story. Though admittedly when I wrote the first chapter I didn't have an end in mind. I think this chapter hits a satisfying place to pause. There are plenty of places to go from here. I plan on adding more chapters, but will be taking a break for a bit to generate story ideas. \n\nStay tuned to my author page for more information of upcoming stories.\n\nThank you, \n\nHank\n\n"
    ],
    "authorname": "HankDolworth",
    "tags": [
        "bisexuality",
        "female submission",
        "male dominance",
        "bisexual",
        "polyamory",
        "threesome",
        "group",
        "group sex",
        "mind control"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/basics-neural-control-node-ch-08"
}
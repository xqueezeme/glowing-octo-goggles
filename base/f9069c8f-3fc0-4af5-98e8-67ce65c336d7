{
    "title": "Carly's WMAF Fantasy Pt. 04",
    "pages": [
        "(Back to Interracial which is where this series will stay. All characters are fictional and over 18. I wanted to add a note as well based on a comment I got on a previous chapter.\n\nI don't condone racism. Anyone who thinks one race is superior or inferior to another race is an asshat (or worse). This story is a consensual relationship based on a shared kink between the two characters and any other reading into it is far, far beyond what I intended. There. That's out of the way. On to the fun.)\n\n***\n\nWe walked to the elevator and it opened just as we walked up. Roland was making out with Kyrsten while Jennifer watches and stroked his chest. Jenn's attention wasn't as distracted so she noticed Carly before the others.\n\n\"Hey, Carly. Everything... uhh... okay?\"\n\n\"Oh yes. Jay is taking great care of me,\" she told her friend, emphasizing \"great\" way more than necessary.\n\n\"We're going shopping for some new clothes for her. Isn't that right, Carly?\" I asked my new pet.\n\nShe knew what I wanted. There was the briefest of pauses as we traded places with the proto menage-a-trois. \"Yes, Sir.\"\n\nThat caused Roland's head to snap around in comic bewilderment as the elevator door started to close. Just before it shut, his look of surprise broke into a wide grin. Guess things worked out for us both today. \"Good girl,\" I told Carly as I groped her ass under the short skirt. \"I'm glad you remembered your instructions.\"\n\n\"Of course, Master. Master in private. Sir in public. Even to my friends,\" she recited. Then she surprised me, \"I bet I could get Kyrsten kneeling on the ground and calling you Master.\" Her hand stroked my cock. \"Would you like that, Master?\"\n\nThe image of the short, busty redhead staring up at me gave my already confused cock a distinctive twitch. \"Oh. You would, wouldn't you? I can tell. You want me to build you a little harem of obedient fuck sluts, Master? I'll do it.\"\n\nBefore I could even wrap my brains around the outlandish offer, the elevator door chimed and was opening. We walked out just in time to see a shirtless Roland burst out of the stairwell. He looked between Carly and I, then lunged at me grabbing me in a giant bear hug. \"Way to go, brother!\" he said then sprinted back up the stairs taking them three at a time, clearly eager to return to the other two girls.\n\nCarly was standing there staring at me for about half a heart beat before she burst out laughing. \"That guy loves you, Master.\"\n\nI stared at the door and turned back to her, \"Yeah. He's a pretty great friend.\"\n\n\"That's good,\" she said as she grabbed my hand and started walking towards the car, \"it means he won't be too pissed when you're making Kyrsten eat my cunt while you plough that hot little fire crotch.\"\n\n\"Damn...\" I said and she looked over her shoulder and flashed me that brilliant smile. We got to the car and I let her in, enjoying the flashing of her bald cunt as the skirt rode up. As I pulled out of the parking lot, I reached over and guided her head to my cock. She obediently unzipped my pants and swallowed my cock whole. \"Keep me hard and you just might get fucked again later, slut.\"\n\nShe worked my cock thoroughly and lovingly as we drove to the mall. Between driving and the multiple orgasms, I was in no danger of actually cumming but it was fantastic regardless. As good as the blow job was, I almost regretted pulling her off me when we got there. But then I remembered the reason we had come and my resolve was renewed.\n\nLeading her into the mall, we quickly found a shoe store. I guided her over to a seat that faced away from the entrance and called over a shoe salesman. \"I'd like to get my girlfriend a nice pair of shoes. Four or five inch heels. Something strappy. I especially like those ones with the ankle straps. What size shoe are you, honey?\"\n\nShe looked me dead in the eyes and said, \"Seven and a half, Sir.\" The salesman took it impressively in stride, pausing only for the most subtle of double takes before going into the back. Carly looked at me and whispered, \"Every time you make me do that it's so fucking hot. I swear I gushed. I bet he could smell how much of a slut I am for you.\"\n\nI couldn't help but grin. I sat down next to her, the store wasn't busy and I took advantage by sliding my fingers up her skirt and across her slit. She gasped and I spread the moist juices around before pulling my finger away and pressing it to her mouth. She licked it hungrily without ever taking her eyes from mine. I was sure if I dragged her into the storeroom, she'd be willingly bent over and fucking me within moments.\n\nReluctantly, I pulled my finger back and whispered, \"behave,\" as the salesman emerged. He had a couple pairs of shoes that both fit Carly perfectly. One was a four inch strappy heel. The other was a five inch platform wedge. Both made her legs look incredible and while she was trying them on, she allowed the salesman to see everything that he couldn't have. \n\nThe five inch shoes actually made her about half an inch taller than me. \"Wear the four inch ones,\" I told her after she'd tried on both pairs. \"We'll take both pairs. Just throw her sandals in the one box.\"\n\n\"Yes, Sir,\" the man and Carly chimed in together before we all laughed. \n\n\"Thank you,\" I told the man as I took back my credit card.\n\n\"Oh trust me, Sir. Thank you. We get a lot of couples who play these little games but I've never enjoyed them as much as I have today.\"\n\n\"She's something else, isn't she?\"\n\n\"You're a very lucky man, Sir.\"\n\nI beamed at Carly who was blushing from the compliments. We grabbed our bag and headed out to continue shopping. The click, clack of her heels echoed through the hall and it was all I could do not to imagine holding onto the heels as I spread her legs wide and ploughed her tight hole again. We hit a number of stores in a whirlwind trip. She asked questions constantly, enjoying flummoxing salespeople everytime she called me \"Sir\". I showed her what I liked. Short, tight clothes. Revealing outfits. Things she could tease me with. She got a couple pairs of thin, daisy duke shorts, a couple mini-skirts, a short, button down sundress, a whole bunch of shirts of all kinds of cuts. Then we went to Frederick's of Hollywood and got a whole bunch of lingerie. Several corsets, garter belts and stockings. I showed her the back seem and fishnet styles that I preferred and she pointed out the two toned cuban ones that would be very sexy in her open toed heels. We also found a couple shelf bras that pushed her tits up but left the nipples exposed. She made sure to either let me see everything or took a picture and showed me, always focused on what pleased me most. If I showed even a hint of reservation about the outfit, she wanted to know what was wrong so she could fix it. \n\nI realized that the clothes we got wouldn't really be conducive to wearing the garter belt and stockings out so we made one last shop in a more upscale dress shop and found three dresses that would work. The tops of the stockings would be just barely exposed when she sat and one of the dresses was sufficiently flouncy that as she walked they sort of peeked out, but that was fine. \n\nBy the time we'd finished, we'd spent over a grand on clothes in the single most expensive shopping day of my life. She insisted on buying the dresses since she could wear them to work. Everything else was on my credit card. \"So does this count as paying for sex?\" I asked, jokingly as we walked to the car.\n\n\"Mmm... I think it does. I guess that makes me an official whore,\" she said as she loaded the clothes into the trunk of the car.\n\n\"Isn't there some phrase that Asian whores are famous for saying?\"\n\n\"Hmmmhmm...,\" she said then looked at me and put a hand on her hip, \"Me love you long time,\" she said in a bouncy, bubble headed, thickly accented voice.\n\n\"I think you're just after me for my money. Just like all the other chink sluts,\"\n\nShe continued in the ridiculous pigeon english as we got into the car, \"No, no, Master. Me love sucky, fucky. Me a good little whore. Me need that big, fat, white American cock, Master.\"\n\nI leaned over and kissed her, \"You are truly an impressively versatile slut, baby.\"\n\n\"Thank you, Master,\" she said huskily but unaccented. \"That makes me so hot. Just thinking of myself as a dumb, cheap street walker spreading her legs for money. Fuck. You should remind me what I am whenever you buy anything for me.\"\n\n\"Put these on under your shirt, baby,\" I said as I fished out the pair of nipple clamps connected by a thin silver chain. She gasped as she took them in slightly trembling hands.\n\nCarly lifted her shirt the three or four inches necessary to expose her beautiful tits. Her nipples were already hard and eager but she teased them slightly to get them as firm as possible. It was difficult for me to drive without staring at the wanton display but I focused on not dying in a fiery crash instead. It was an admittedly tough call. She placed the first clamp on her left nipple and let out a contented, needful moan that was almost certainly accompanied by a gush between her legs. I'd adjusted the clamps so they weren't at maximum tightness and she was clearly enjoying the sensation. Then she placed the other one on, repeating the noise she'd just made. \"Should I leave my shirt up, Master?\"\n\n\"I think so, yes. Let some lucky trucker get a quick glimpse of those hot tits.\" I reached my hand over and felt her wetness under her skirt. Her cunt was flooded, as expected and I could feel the hard nub of her clit which I slid my finger across. Her hands clenched at her sides as she tried desperately not to hump my hand but her need was all-consuming and she shoved her hips forward, \"Pathetic cunt,\" I told her as I pulled my hand away.\n\nShe whimpered, \"It's your fault, Master. You get me so fucking hot.\"\n\n\"Keep teasing your cunt, slut. I think you'll really enjoy what's next,\" I instructed her as I took the next exit. She looked at me with curiosity, knowing this wasn't the right exit for our hotel, but my plan quickly became apparent as we hit the first speed bump. She bounced in her seat and let out a gasp of excitement as the pleasure of her clamped tits ripped through her. She had barely recovered when the next one hit. Then the next one. I tried to hit at just the right speed to maximize the bump and her reaction told me I'd mostly succeeded. As the car jostled through each successive bump, her moans grew louder and more desperate. Her finger moved more quickly under her skirt as well.\n\n\"Master... Uhh... I'm so close... Please... Master... Please...\"\n\n\"Please what, slut?\"\n\n\"Please... don't make me cum... ughhh... without permission. I don't... ohhh... want to cum without permission... oh, God... fuck... Master,\" \n\n\"Stop stroking your clit and lube this up with your cunt juice then shove it in your ass,\" I told her as I pulled out another surprise, a rubbery purple butt plug for her ass. It had a pretty good thickness, wider at it's fattest part than my cock and only slightly thinner at the base. Carly eagerly removed her fingers from her clit, desperate for the reprieve, and grabbed the plug. She shoved it in her cunt a couple times then arched herself awkwardly out of the seat and lined the plug up to her ass then sat down on it. The moan of pleasure that escaped her lips was quickly magnified to a near scream as we hit the next bump.\n\n\"Oh... FUCK... Master... I need your cock... I need... Oh my god... Just fucking use me... please. Fuck... I'll do anything, Master. I don't... fuck me... fucking care right now.\"\n\nAs I turned off the road, I smiled at the babbling mess she had already become. Her eyes were closed so she couldn't see, but the dusty dirt road I turned onto was about to make her situation worse. Or maybe better, depending on your line of thinking.\n\n\"Fuck... what's happening... oh my ass... Master... what's... Oh my God, ohmygod... \"\n\nHer string of words soon descended into one long, barely coherent mess of profanity and pleading. Eventually, my straining cock couldn't take it any longer and I fished it out of my pants and yanked her down by the hair, \"Shut up, bitch,\" I told her as I shoved her hungry, eager mouth onto my cock. Feeling her moan while trying desperately to properly service me was amazing. I held her down for longer and longer periods, she didn't struggle other than with her arousal, instead deep throating my cock with abandon as if it was the only thing in the world that mattered. We continued down the bumping road while she thrashed in her seat, all the while maintaining a firm, desperate grip on my cock.\n\nAs we emerged from the wooded back road and turned back towards the hotel, I yanked her off my cock by her hair and shoved her back into her seat. \"Pathetic yellow cunt,\" I said with a playful smirk, \"Couldn't get me off. I may have to really punish you tonight.\"\n\n\"Oh yesssss, Master. Please do. Whip my ass and tits and cunt and clit. Teach my body that failure to please you is the worst possible failure. I swear I'll do better. Just help my tight, pitiful chink holes to become the perfect fuck holes for your glorious cock.\"\n\nI shook my head. Every time I thought I'd pushed her, she said something to make me realize that she could be pushed further. A dozen images flitted through my head as she sat there in silence, mouth agape, staring at me like a devoted puppy. \n\nWe'd been gone over an hour so I wasn't surprised when we pulled in and saw Roland, Kyrsten and Jennifer relaxing at the pool. The summer sun was sitting low in the sky but it was still plenty warm outside. It's a testament to both the sheer hotness of Carly and the intensity of the orgasms I'd already had that day that I only glanced at Kyrsten's huge tits in her tiny bikini. Or maybe it's a testament to how hot she was that she managed to get even a glance from me despite Carly and those same orgasms. I don't know. Either way, Carly and I walked in holding hands as Roland tried to get the girls' attention with a cannonball. Jenn was instead watching us and whispering something to Kyrsten who might have been looking at us through her heavily mirrored glasses. I couldn't help but remember Carly's words about Kyrsten and wonder if such a thing was possible.\n\nJenn and Kyrsten quickly stood up and wrapped themselves in towels and hurried inside, momentarily having forgotten about Roland who surfaced to an empty pool and confusion. The two girls both shot me inscrutable looks as they ran up to us, \"Hey, Jay. We're gonna borrower Carly for a minute, okay?\" Jenn said and started to grab Carly's other hand.\n\nCarly resisted and instead turned to me, \"Is it alright, Sir?\"\n\nI started to agree but then realized the clamps were still pinching at her perky little nipples. \"Uhh... hold on,\" I said and pulled her back towards me a couple steps. I reached up with one hand and tilted her chin towards me to give her a soft kiss. My other hand, hidden between our bodies, slid up her stomach to hook the chain in my finger. I could see Kyrsten and Jennifer watching us curiously. Making sure my mouth was clamped firmly over Carly's, I pulled the chain down as swiftly as I dared. The two clamps pulled at her tits then popped free. Fortunately, they were the rubber tipped ones so, while the pain may have been bad, it wasn't going to do any damage. Carly's moaning scream of lust filled my head as she breathed directly into my mouth. Hopefully the sound was relatively muffled in the noisy hotel courtyard. She wobbled slightly but steadied herself against me before flashing me a smile. \n\n\"Thank you, Sir,\" she said with a lusty smile as I curled up the chain in my hand and sent her back to her friends. I was acutely aware, as I'm sure she was, that her ass was still plugged with the other new toy.\n\nDeciding to have just a little more fun with my new pet, I said, \"Carly, don't forget what you promised me earlier.\"\n\nHer steps faltered slightly and she turned to me, eyes slightly wide, \"Yes, Sir,\" she said emphasizing the last word and breaking into a broad, proud grin. She turned back to the other two girls and they walked over the corner of the mostly empty atrium. I could hear Jenn and Kyrsten's voice peppering Carly with questions but couldn't make anything out. Instead, I wandered over to the sliding door to the pool area and found Roland drying himself off.\n\n\"Oh... so that's where the girls went,\" he said as he looked over my shoulder. \n\n\"How was your day?\" I asked with a lascivious grin.\n\n\"It was pretty good. But man.. Carly? What the hell, brother! And did I hear her call you 'sir'? Are you into some freaky deaky shit?\"\n\n\"Hold on... I'll tell you... but c'mon man, you just had a threeway with two of the hottest girls we ever knew. You can't possibly describe that as 'pretty good' with a straight face!\"\n\n\"Okay. It was fucking amazing. But once we were done, the girls couldn't stop talking about you and Carly. Hell, they were talking about it as they were making out before we even got started. I should be thanking you, the girls were already hot to trot but something about you and Carly put them into overdrive, man!\"\n\nI grinned and we exchanged a surreptitious low five, \"Carly's amazing man. Absolutely amazing. Imagine your perfect girl. Smart. Eager to please. Not jealous about anything. Totally sexy in every way. That's her man.\"\n\n\"Dude, it's been like 5 hours and you sound like you're ready to marry her,\" there was no judgement or warning in Roland's voice, just mild dismay.\n\n\"No, no man. It's not like that. I'm sure there's some crazy yet to be unearthed. But she's the first girl I've been with in awhile that I think that her particular brand of crazy might be something I'm okay with.\"\n\n\"So it IS freaky deaky shit,\"\n\nNow I blushed and managed to mutter, \"No comment.\" Roland was a good enough friend to let it go at that point. He told me they'd finished up at the park just behind us. The girls had drug him on to splash mountain and enjoyed teasing him on the way out of the park with their see through t-shirts and tiny bikinis they'd worn underneath.\n\n\"My head had whiplash trying to go back and forth between those four tits, man.\"\n\nI laughed just as the door slid back open. Jennifer and Kyrsten walked back in and went up to Roland, one on each side. Jennifer's hand caressed Roland's chest as she whispered in his ear. Kyrsten stood there staring at me, appraising me... or maybe revaluating me? Either way, it was mildly unnerving. \"Carly's waiting for you, Jay. She seems VERY eager,\" she said to me with a teasing voice.\n\n\"By the way, you hurt her and we'll have Roland kick your ass,\" Jenn said shooting me daggers. I thought she was serious for a second then all three of them bust out laughing.\n\nRoland grabbed Jenn's ass with a playful squeeze, \"I'm glad you warned me you were gonna mess with him. No way I'd have kept a straight face, girl.\"\n\nI said my goodbyes and retreated back into the hotel. Carly was sitting in a chair, visibly squirming. Whether the plug was uncomfortable or TOO comfortable I wasn't sure but she was clearly very aware of it and clearly very aroused. \"What did you girls talk about,\" I asked as we walked towards the elevator. My hand was on her tight little bubbled ass as I guided her. \n\n\"They are... well... were worried about me, Master.\"\n\n\"The 'sir' thing had them concerned?\"\n\n\"A little. Jenn also knows that I've been interested in white guys and not dated them before because of my parents. She doesn't know WHY I was interested. And still doesn't,\" she said adding the last quickly and looking at me with some concern.\n\n\"Don't worry. Your secret's safe with me. I didn't say anything to Roland and won't to anyone else unless you want me too.\"\n\nShe looked relieved, \"I trust you, Master. And, if I'm being honest, it would kind of turn me on... well REALLY turn me on if you told my friends. But I can't ever let my parents find out... I mean... they'd be fine with me dating you... eventually... but I don't ever want my Dad to find out WHY... is that okay?\"",
        "\"Of course it is, sweetie,\" I told her and hugged her tight, recognizing that she needed affection more than lust right now. I was surprised how strong the urge to protect her was. \"I won't tell anyone that could ever let it back to your parents. Promise.\"\n\n\"Thank you, Master,\" she said as we stepped off the elevator.\n\n\"But let's go back a second. It would turn you on for your friends to find out?\"\n\n\"You noticed that, huh?\" she said with a shy grin.\n\n\"I notice everything about my little Asian fucktoy,\" I said into the empty hallway. I enjoyed the look she got on her face when I talked so openly and publicly about her like that. It didn't take anyone in the room for her to be embarrassed.\n\n\"Of course, Master. And yes, the idea that my friends might know how pathetic I am. How obedient I yearn to be. How anti-feminist I really am. It makes me quiver to think about. I can feel my pussy clench just talking about it,\" she said in barely a whisper. \n\nThe elevator chimed down the hallway and we turned to see our three friends start walking down the hallway, I leaned into Carly, trapping her between my door and myself. \"Too bad their room doesn't share a wall with ours,\" I said with what I hoped was a slightly menacing whisper.\n\nCarly licked her lips. Our friends were only thirty feet away. I swiped they key card and opened the door, swatting Carly's ass playfully as we went in. As the door started to swing shut and knowing that they would hear us, I said, \"How's your ass, baby?\" \n\n\"I'd rather have your cock then this plug, Master\" she said just before the door slammed. The realization that her friends almost definitely heard her washed over her. Every time I thought she'd blushed before, pailed in comparison to this one. Her chest flushed red, her face darkened and her eyes went incredibly wide with the realization. \"Oh God, Master. You tricked me,\" she breathed huskily at the statement. \"Fuck that is so hot. That's exactly what I was talking about earlier. I always felt superior to other men. I've never felt superior to you,\" she said as she approached me and stroked my cock. \"I've always felt... beneath you... Master.\"\n\n\"You are beneath me, cunt. Your stupid little chink brain is inferior to mine in every aspect. You'll never outsmart me. You can only hope to please me and hope that I decide you're worth the trouble of training.\"\n\n\"How do you get me so well?\" she said. I tossed her clothes bags on the bed and scooped her up into my arms. I gave her a kiss, thinking about what Roland and I had talked about. Could you love someone after five hours? 90% of me wanted to say it to her right then. To shout it. I was certain of it. I'd known her for 15 years. We'd drifted apart a little during college but as she'd come in and out of my life, I'd never learned anything about her that I didn't like. Especially now that I knew the real story behind all of our previous interactions. \n\nThe other 10% was screaming at me, \"Are you fucking crazy. You tell her that now and she's gone. Poof. Disappears. And even if she said it back, wouldn't you judge her for that? Don't be insane you idiot!\"\n\nThe two warring parts of my brain compromised by kissing her again, this time fully and completely. She returned the kiss with ardor, wrestling her tongue against mine and letting a soft, pleased moan escape into my mouth. My hands roamed down her back towards her ass. I found the plug and gave it a little twist before pulling it out and sliding it back in.\n\nShe broke the kiss and leaned her head back in ecstacy. \"Fuck that feels good. I swear you're going to turn me into a pitiful little anal slut, Master.\"\n\n\"Hrmm... tell you what, you can cum anytime you want. Even without permission. If you cum while I'm fucking your ass and you're not using your hand on your clit.\"\n\n\"What? I have to rub my clit to cum, Master. I can't even cum from just being fucked.\"\n\n\"I think you're not being creative enough, slut,\" I told her and pushed her back onto the bed. I reached into the sex shop bag from earlier and pulled out some restraints. I tied her hands together and roped them firmly to the head board. Then I grabbed each ankle and spread it wide, looping it back to the cord holding her hands. Her legs were pulled taught and wide.\n\n\"What are you going to do to me, Master?\" she said with a anticipation and fear. \n\n\"Does it matter?\"\n\n\"No, Master. I told you, my body is for you to use, abuse, mark, whip, rape, fuck or whatever else you want. I will love it as long as you love it,\" she said, staring at me. \n\nI pulled the belt from my pants and smacked it gently against my hand. \"I'm going to whip your clit until you cum, slut. And I mean that literally. I'm not going to stop whipping your clit until you cum.\"\n\n\"I... I don't know if that will work, Master. I'm scared, Master.\"\n\n\"Do you trust me, slut?\"\n\n\"Yes, Master,\" she said with utter conviction.\n\n\"Good,\" I said with a smile as I lashed the makeshift whip down on her cunt. She screamed and bucked as I rained three more blows down on her clit in quick succession. Her legs were shaking, clearly trying to close. I leaned forward and rubbed her clit and her body shook at the touch.\n\n\"Pleeeeassee,\" was all she could manage as I brought her close then stopped and whipped again. And again. And again. I gave her cunt several more lashes, watching the skin turn red. A wide strip of leather like a belt is usually more noise than power, especially soft leather like mine. Rubbing her clit, I got her to the edge once again before stopping and whipping her vulnerable cunt again. This time, however, she was so close that I could see her trying to cum.\n\n\"That's it slut. Show me what a good anal slut you are. A dumb little pain slut. You stupid fucking yellow cunt,\" I said and punctuated the last few words with more lashes. Suddenly, in a burst of release, she came, screaming and thrashing as I reached down to rub her clit and work the plug in and out of her ass. When she'd finished riding her orgasm, I kept rubbing causing her to convulse more and more until I gave her mercy and untied her legs. She collapsed down, looking like a marionnette whose strings had been cut. \"So that's one way, bitch. Here's another,\" I said and flipped her onto her stomach.\n\n\"What are you... \" she started to ask but I cut her off with a sharp strike on her now exposed ass. I grabbed a pillow and slid it under her hips then slid my cock slowly into her cunt. She tried to slam back into me but I held her firm and kept giving her only an inch a time. Teasing her. \"Don't tease me, Master. I've been so good. Please.\"\n\n\"Oh you have been. But I'm not going to fuck your cunt until you can get Kyrsten to call me 'Master' from her knees.\"\n\n\"But you are fucking me, Master. I can feel your glorious white cock. I know you want to fill me up with cum and breed me like a fucking animal.\"\n\n\"I'm just lubing my cock up, bitch,\" I told her as I pulled my now wet cock out and quickly replaced the plug with my cock. She screamed as I pushed into her gaping hole. I quickly built up speed and started slamming into her, enjoying her incoherent screams as I built up speed. I grabbed her ass, digging my fingers into her, noting with a small part of my brain the still red stripes from the belt.\n\nI pressed her down so that her cunt was grinding against the hotel pillow. It didn't take long before she was cumming again. Her orgasm made her ass spasm and squeeze my cock so tight it pulled yet another orgasm out of me as I shot into her with my own feral shout. I rammed my cock into her tightest whole three more times, shoving her down into the bed forcefully before pulling out and collapsing beside her. She was unable to move, trying to catch her breath beside me. Her face was covered in sweat and she was staring at me. Or maybe more accurately staring through me as her eyes hadn't regained the ability to focus. \n\n\"That was so fucking good, Master. I can't honestly imagine getting fucked better than that. I love it. I love it. I love the rules. I love everything. Fuck... so fucking good,\" she rattled off without pause then leaned over and gave me a soft, tender kiss that I returned.\n\nI hopped off the bed and went to the bathroom to clean up. She joined me a moment later, sitting on the toilet naked and unashamed. While toilet stuff has never had any attraction for me sexually, I've always been surprised by how all of my previous girlfriends have been so embarrassed by it. \"What? You're just going to do that right here in front of me? Is there no mystery in our relationship anymore?\" I said to her with an obviously joking smile. \n\n\"I have no secrets from you, Master,\" she said matter of factly. \"You own my body now and for as long as you want. Why should I hide anything? If you are bothered, I will, of course, abide by that decision, however.\"\n\n\"No, no, my little slant eyed doll. You aren't allowed to keep secrets from your betters,\" I told her. Her only response was to sigh and once again show her contentment. I returned back to the bed and looked at the pillow. She had cum so hard she'd sprayed some of her juices on it. It looked like a couple drops of my cum had also joined the mess. I started to toss it across the room then thought better. I switched it out with the only pillow on her side of the bed, leaving the sex stains face up and obvious. When she walked back in, she looked at it and paused, \"I thought you'd want to smell how pathetic you are all night.\"\n\n\"I may not get much sleep, Master.\"\n\n\"So?\" I said simply, attempting to show an air of indifference.\n\n\"I might be tired and weak willed tomorrow,\" she returned with a coy smile.\n\n\"Oh, was today strong willed, Carly? Does that mean tomorrow you'll be even more submissive.\"\n\nShe bit her lip and nodded demurely, \"By tomorrow, I might be nothing but a little Asian bimbo doll with no free will... Master.\"\n\n\"Perfect,\" I said with a huge shit eating grin. I rolled over and looked her in the eyes, searching for... well... I wasn't sure what. \"Carly, Can I ask you something and get an honest answer?\"\n\nHer eyes flicked back and forth between mine, \"You can ask me anything, Master.\"\n\n\"Seriously,\" I said.\n\n\"Jay, yes... Seriously. What's wrong?\"\n\n\"Nothing. Absolutely nothing. I just... well... we only started... well... whatever this is like,\" I looked at my watch, \"Six hours ago. I just want to know what your feelings are. And before you answer... I want you to tell me with 100% truthfulness. No shading. No being careful about what I think. No concerns about my judgement or freaking out. If I'm in charge, I need to know 100% of what you're thinking about this... about us... No secrets, you said.\"\n\nShe paused for a long time. What seemed like forever. Her eyes fixed on mine. Finally, she spoke. She started talking hesitantly at first, but with a conviction that spoke of earnestness, \"Jay... Master... I'm a bundle of emotions and it's hard for me to even identify all of them. Much less put words to them. You've already done more with me than every other boyfriend I've ever had... combined. You get me in a way nobody ever has. And I've always liked you. Even before I had a crush on you I liked you. You were always nice to everyone... well... as nice as high school kid could get. Everyone's kind of a jerk in high school. God knows I was, too.\"\n\nShe gave me a soft kiss before continuing, \"I'm serious when I say that I want to do everything with you. I want to explore everything with you. I want you to push me and mold me and shape me. The idea makes me so fucking hot I can barely keep my hands off myself right now just talking about it. But it's also what I really, really want. I... \" she paused for a second, looking at me and searching. I willed her to go on but wasn't able to say it out loud, \"I think... I think... I think I could love you. I know it sounds crazy and I know there's a part of your brain that is screaming that I'm some crazy bitch who's going to axe murder you in your sleep if you leave me. I swear I'm not. If you left me right now, I'd be sad and disappointed but I'd respect that. Hell, I will always listen to you regardless of what I want. If you said this wasn't working for you, I'd be the worst kind of hypocrite to not listen,\" She rushed through, the words escaping so quickly they were hard to follow. Then she took a breath and slowed down, \"But I think there's something with you that I really want. That I need. And I think it's something long term. The romantic 16 year old in me thinks it's something permanent. The jaded adult in me hopes it's a long time. But I think I will fall in love with you. In fact, I know it.\"\n\nHer thoughts echoed mine so closely that I was both elated and scared. It was my turn to study her, looking into her eyes trying to divine something hidden. Something she'd held back. But she hadn't. She'd laid herself bare just as I'd requested. Just as I'd demanded. \"I feel the same way. In every way, Carly,\" I told her and sealed the words with a kiss. \"I've been wrestling with myself all day, trying to figure out what I was feeling. What I wanted and whether I was being fair to you. All I know is that right now, I think you're perfection. What I want right now is more of everything. Yes, more of the sex but also more of this... Right now. I feel like I'm in some sort of \"Male wish fulfillment\" porn where the guy finds the kinky, bi-sexual stripper who also likes video games and comic books and also just wants to please her man.\"\n\n\"Well I'm not a stripper... so it's totally different,\" she said with a broad grin which I returned and gave her another kiss.\n\n\"So I agree. I think that the \"L\" word is premature but not just possible... but probable. And I intend to be with you for as long as possible,\" it was Carly's turn to smile and she kissed me full on the mouth. \"I mean... at LEAST until you get Kyrsten to call me 'Master' \"\n\nShe gave me a playful shove and smirked, \"I should probably get on that. Otherwise my poor little ass is going to get VERY used,\" she quipped, referencing my threat from earlier.\n\n\"Silly slut, that's going to happen regardless. The only question is if your tight yellow gash ever gets stuffed full again.\"\n\nShe shuddered at the words and her nipples visibly hardened, \"I could definitely learn to love this treatment, Master.\"\n\n\"What's that, my pet? Being used as a fuck toy? Or being trained to be a pain loving, anal slut?\" I told her as I pinched her stiff nipples.\n\n\"Yes, Master.\"\n\n\"Or maybe you get off on being a well bred, tight chink cunt built for cock and babies?\" I told her as I pinched harder.\n\nShe groaned, \"Yes, Master!\"\n\n\"Or maybe,\" I said as I started twisting her nipple and reaching down with my free hand to stroke her clit. Her legs parted without being asked as I finished, \"You just want to be treated like a trashy little yellow street whore,\" I punctuated the last by spitting on her face. \n\nHer long moan turned into a scream as she exploded all over my hand. \"Noo... Noo... No... Master... No. I'm so sorry. I'm sorry. I'm sorry. I'm sorry,\" she said while she came on my hand. Tears were in her eyes, \"Master, I'm so sorry. I couldn't help it. I... you caught me by surprise. Everything you were doing was so fucking hot. Master, I'm sorry. Please. I'm sorry.\"\n\nI kissed her, \"Don't worry, baby. You'll never displease me with your orgasm. Just disappoint. But it's okay, it just means I'll have to punish you. And you already can tell how much I enjoy punishing you.\"\n\n\"I'm so sorry though, Master. I don't want to ever disappoint you. I want you to always be happy with me in every single way. I want you to punish me, Master. Teach my worthless body what it means to fail you. I want you to. I need you to. Brainwash me with pleasure and pain, Master.\"\n\n\"Shhh... it's okay, slut. I'll come up with something. But I'm ordering you to stop worrying about it for now.\"\n\n\"Yes, Master. Thank you, Master,\" she said as she curled up next to me. It was getting late and I realized in all the excitement, we hadn't eaten since the fries we'd had just before we hooked up.\n\n\"How do you feel about dinner?\"\n\n\"Mmm... I'm starved. Let's go somewhere nice so you can show me off,\" she said. Both of us had pretty good jobs at that point so \"Some place nice\" was a pretty easy to accomplish task.\n\n\"There's a seafood place not too far away. You like fish?\"\n\n\"Love it, Master.\"\n\n\"Excellent. Put on one of those sexy new dresses. Don't forget the garter belt and stockings either.\"\n\n\"Of course, Master. And Master... uhhmm... I think if I wear my hair down, I could... maybe... wear the other collar?\"\n\nI paused, \"Are you sure, slut? That's very bold of you.\"\n\n\"I'm not sure, Master. It makes me nervous and excited to. I know I really, really want to but... I'd like to try.\"\n\n\"I'm not going to argue with you, sweetie. If you'd like the world to start seeing you as an owned slut, I'm all for it.\"\n\n\"Yes, Master. I would.\"\n\n\"Then get dressed, slut. Let's go enjoy some dinner and get to know each other better.\"\n\nAs it turns out, she chickened out when we got there. I wasn't surprised. It was a pretty bold thing to even contemplate. She did make it downstairs and through the lobby, which was a big deal because 20 of our friends were staying there. But she got too nervous in the parking lot of the restaurant and switched to the other choker. Dinner was amazing. We got to talk to each other for the first lengthy, one-on-one talk since high school. The tables were very secluded and we were able to talk about everything we wanted. The conversation was peppered with flirting and innuendo, but also plenty of mundane things. She talked a lot about her job as an art designer for a software company. They did a lot of products and while she did get to work on video games, she also did a bunch of work for their sister company that made corporate software. The video game stuff was fun, and she had a passion for it, but so many people wanted those jobs that the pay was kind of crap. \n\nAt one point, I had to use the restroom and when I came back, she ripped out a sheet of paper from a small notebook she'd brought in her purse. She folded it and handed it to me. Taking the paper, I shot her a questioning look and she whispered, \"You can open it now. Just be careful.\"\n\nCurious, I carefully opened the paper to find a hand drawn sex scene. It was me standing with my cock (drawn generously larger than it really is) pointing at Kyrsten's face who was kneeling in supplication in front of me. Carly was on her knees behind Kyrsten, face buried in the redhead's ass. I was holding my cock in one hand and a leash connecting to Carly's collar in the other. I felt my slightly sore cock stir at the image and the implied promise.\n\n\"All joking aside, you think you can get Kyrsten to do this?\" I asked, still incredulous.\n\n\"Yes, Master,\" she said. Her hand was tracing the outline of her luscious breasts as she talked. \"Do you know why she likes Roland so much?\"\n\n\"I assume for all the obvious reasons. Money, looks, personality,\"\n\n\"They were at a party and she was being... well... Kyrsten and being kind of mouthy. She started pushing Roland around and he was being a nice guy and indulging the drunk girl at first. Then she said something about how his mother raised a limp dicked pussy.\" \n\nI laughed, \"Oh no\"\n\n\"Yeah. Roland snapped. Grabbed her wrists and pinned her to the wall. Told her to watch her mouth,\" I watched Carly's fingers dance down her cleavage and ever so slightly tease her nipples. \"Kyrsten told me she was more turned on than she'd ever been. She said she couldn't help but hump back at him with her hips while she was pinned to the wall. She told him, 'or what' and he whispered in her ear, 'or my dick is gonna show your pussy whether it's limp or not'. Now Kyrsten's version is from a drunk person's point of view. Who knows if it really happened quite like that. But she said she whispered back, 'limp dicked pussy' and he shoved her into the closet and fucked her right there. Everyone else heard them.\"",
        "My cock was stirring, I didn't know any of this as Roland had never really given me the blow by blow. He wasn't a \"kiss and tell\" kind of guy. Sounds like his hookup with Kyrsten didn't necessarily warrant that discretion but I respected it nonetheless. \n\n\"Ever since then, she's been looking for take charge guys. She was hoping she could push Roland to do it again this weekend but Jenn sort of screwed up their plans. Or maybe enhanced them?\" she finished with a smile.\n\n\"Yeah, Roland's not complaining. So you're saying Kyrsten would respond to some Alpha Male bullshit?\"\n\n\"Crazy as it sounds... yeah... I think if she saw the way you treat me. She'd swoon. And if you just presumed to treat her the same way... I think she'd be on her knees begging pretty quickly.\"\n\n\"So I'm curious. Do you go for the Alpha Male stuff?\"\n\n\"I can see why you'd ask that but no. I don't like that actually. I like the idea of a,\" and she lowered her voice despite the seclusion of our booth, \"white guy taking and fucking asian girls. In my core it's just part of who I am. But when I see a random normal guy treating a girl like shit? I get just as pissed as anyone. And honestly, if I ever saw a white guy smack an asian girl or something, I'd probably have the urge to cut his balls off... Unless she came up smiling and horny. Then I'd be a drooling mess.\"\n\n\"Did you like it earlier... when I... ughh... spit on you?\"\n\n\"Yes... Fuck that was hot.\"\n\n\"Do you want me to... hit you?\" I asked hesitantly.\n\nShe paused, thinking about her response, \"Nooo... \" she said slowly, \"No,\" this time with more conviction. \"I think if you slapped me it might turn me on. But not hard. And it would have to be the right situation. If you hit me in actual anger? No. Definitely not. I think I'd be bone dry, pissed, scared and supremely disappointed.\"\n\nI must have looked relieved because she followed up with, \"Why? Seriously, Jay. What the hell happened with that girl?\"\n\n\"The reddit girl?\" I asked and Carly nodded. She remained silent letting me get to it in my own time. \"She liked abuse. And I thought I understood it but she always wanted more. And yeah, she probably didn't actually want it in real life. But even playing in chat got to a really dark place. Slapping, spanking, spitting... all of that I'm okay with and can really get into. But... well... like this one scene, she wanted my character to beat her like a punching bag. The action became more like some Quentin Tarantino fight scene then erotica. And she wanted permanent damage too. Teeth knocked loose. Brain damage. That kind of thing. It got really dark. Not only was I not turned on by it, but I just started to worry about her.\"\n\n\"Yikes. I'm so sorry, Jay,\" she held my hand and we shared one of those moments of intimacy that you know you'll always remember. \"None of that turns me on, if it helps. And I promise I can tell the difference between reality and fantasy. But... \"\n\nI looked up to see her quirky, crooked smile, \"What?\" I said equal parts concern and intrigue.\n\n\"I think if you slap me when we're alone with Kyrsten... That might be really hot.\"\n\n\"Yeah?\"\n\nShe squirmed in her seat, clearly aroused by whatever fantasy she was playing out in her head, \"Yeah. Don't warn me either. Just go right into it. The raceplay, everything. Treat me like trash in front of her and I think I'll gush.\"\n\n\"Why?\" I asked, very interested now.\n\n\"I think that's one of my biggest fantasies. To simultaneously be the lowest, most inferior person in the room but also the one permanent girl in a strong, white man's life. That gets me so fucking hot.\"\n\n\"So if I asked the waitress to come over here and I flirted with her you would...\"\n\n\"Probably leave a puddle, Master,\" she said with a cute blush.\n\n\"And if she asked about you and I told her, 'That's just my chink concubine. Don't you love her slanty eyes?' what would your response be, bitch?\"\n\nCarly squirmed in her seat, fighting a clear losing battle with her pussy. \"I'd nod and tell her, 'He's not being racist or mysoginist. I was bred for white cock. I crave it. And his is wonderful.' \"\n\n\"You continue to surprise me with your depravity and capacity for self humiliation.\"\n\n\"Thank you, Master. Would you like me to help you with the waitress. I didn't think she was your type.\"\n\nJust then, the waitress returned. She was okay. But couldn't hold a candle to Carly or Kyrsten. After she left, I said, \"No. We're going back to the hotel and just relax in bed and enjoy our time together. And then we're going to plan how you're going to prove yourself worthy as my girlfriend by seducing Kyrsten tomorrow.\"\n\n\"Fuck yes, Master,\" she said as she returned my grin."
    ],
    "authorname": "Masterful_Husband",
    "tags": [
        "asian",
        "asian female",
        "submissive",
        "anal",
        "interracial",
        "dirty talk",
        "dominant male",
        "slut",
        "exhibitionism"
    ],
    "category": "Interracial Love",
    "url": "https://www.literotica.com/s/carlys-wmaf-fantasy-pt-04"
}
{
    "title": "There and Back Again Ch. 027-028",
    "pages": [
        "Chapter Twenty-Seven: Bunnies and Small Talk \n\nWhen I heard silence and felt something under me that wasn't the sharp rock I'd been too lazy to move from under my shoulder, I knew I was back at home. I didn't even open my eyes before succumbing and crying some more. When I'd finally cried myself out, I rolled onto my back and tried to take stock, again. It was dark, and I seemed to be alone, which meant I wasn't in the ICU, which was good. I fumbled around until I found a button that turned on the bedside light. I was in a two-bed room, but the other bed was empty. I still had the strange IV sticking out of my collar bone, but no other tubes or wires. I needed to go to the bathroom, though, and I actually felt hungry for once. I pushed the button for the nurse, and waited. \n\nAn older nurse came bustling in after a few minutes, smiling at me. She didn't seem shocked to see me awake, so at least someone had warned her about my weird habit of dropping into a coma at random and waking up just as suddenly. She did give me a strange look as I asked for my clothes before agreeing to even pee, and put on all my heavy gear and my boots. \n\n\"Are you okay to get up, sweetheart?\" \n\nI was confused. \"Sure, why wouldn't I be?\" \n\n\"Well, most people feel a little...weak, after waking up from seventeen days in a coma.\" She eyed me, bouncing on my heels in my hiking boots. \"Looks like you're good to go. Bathroom's over there - there's a shower if you want one later. I'll just go let your doctor know you're awake.\" \n\nThe bathroom was a shock. I looked nothing like myself in the mirror. Or, more accurately, I looked something like my Fereldan self. I'd lost some more weight - not enough to be unhealthy, but enough to uncover the fact that I might have a bit of a girlish figure one day. It changed the shape of my face, somehow, and with how my hair had grown, I thought that my companions in Ferelden might even recognise me. \n\nMy scalp was itchy, I noted, and I decided to take a shower later. I went back to my bed, fishing through the cupboard nearby, pocketing the coin and more bottles of shampoo. The nurse popped her head back in to tell me breakfast wasn't for another hour, but that the cafeteria was open if I wanted to go down there. I did, and ate the best, largest breakfast I could remember eating in years. It was nice to have fresh fruit, and eggs, and milk, and sausages, and not worry about how they'd been stored or what they were made from. For all that, it wasn't nearly as satisfying without all the teasing and chatting I'd become accustomed to during mealtime over the past weeks. \n\nThe doctor showed up not long after I arrived back in my room. The only thing he had to report was that in my absence, I'd been assigned a 'guardian' - someone to make decisions for me when I was unconscious. He was eager to have me meet with her as soon as possible, because he was still having trouble trying to keep me without extra accoutrements like feeding tubes, despite the forms I'd signed. I agreed to meet with her as soon as she was available, and the nurse left a message for her to come. We talked about my dreams a bit, including the odd burns that showed up and disappeared just as quickly. Neither of us had scientific explanations, so we just let it be. \n\nI contemplated for a bit, and finally decided to show him my tattoo. His face was rather priceless when he saw it - fresh and inflamed as it was - and knew I couldn't have had it done in hospital. I think, despite everything, he thought my dreams were just my brain's way of making sense of my medical problem. He stared, open-mouthed, at the proof that not only was he wrong, he was very, very out of his depth. I shrugged - at least it wasn't just me whose mind was about to explode anymore. \n\nDuring our conversation he caught me scratching my head a number of times, and finally pulled my hands away and took a look. \n\n\"What the hell?\" He was suddenly almost shouting, and I couldn't understand it, and then I realised. \n\n\"Oh, let me guess. I've got sodding lice.\" \n\nHe stopped shouting and stared at me. \"...uh, yeah. How did you know?\" \n\n\"I've had it before.\" True, though not the answer to the question he'd asked me. \"And I have it in my dream. I guess I could use some Nix and some of those combs, hey?\" \n\nHe seemed confused, and definitely didn't understand why I wanted several metal lice combs, but agreed without too much trouble. Promising to be back the next day, he wandered off to order lice treatment. I heard him shouting at the nurse outside, probably wondering how I'd managed to contract lice in hospital. I'll have to do something nice for her later, since I can't seem to convince anyone of the truth... \n\nI treated myself with Nix while fully dressed, much to the nurse's amusement, and then showered as quickly as possible and got dressed again before allowing her to comb out the nits. I discreetly pocketed three of the combs while she wasn't paying attention. I considered stealing the bottle of nix, but there was nowhere near enough to treat eleven of us, so I gave up. Finally the court-appointed guardian showed up. I repeated my same requests - no tubes unless blood work showed I was sick, no ICU admissions unless I was truly on my deathbed. She looked at me like I was crazy, but nodded and took notes and I hoped she got the point even if she didn't understand why. I spent the rest of the day bored to tears. \n\nI paced the hallways, walked to the cafeteria and back a dozen times. I practiced meditating, but that got me thinking about Alistair, and then my concentration was shot. I worked on my footwork like I did with Aedan, trying to make it look like tai chi or something. I pestered nurses and porters, cleaning staff and other patients, trying to stir up some sort of conversation, but they were all busy, and none of them were Aedan or Leliana. I missed my brother, and that triggered another bout of crying. I had difficulty falling asleep, unsure if it was due to anger at Alistair, missing everyone in Ferelden, or just a lack of the usual amount of exercise I'd been getting. It seemed strange to miss exercise, but walking all day had just become natural to me. Weird. \n\nI was still hellishly angry at Alistair, but thinking about it, I realised - it still wasn't enough to make me want to stay on Earth. I was a Fereldan, if I had anything to do with the decision. I shook my head; the long-term implications were staggering. I put on my iPod headphones and listened to the songs I'd been teaching Leliana, and finally dozed off. \n\n******** \n\nWhen I woke, I was in a tent. It was clearly one of ours, but looking around, it definitely wasn't the one I shared with Aedan. It wasn't Leli's, either. I briefly wondered if the Maker (or whoever) had a sick enough sense of humour to put me in Zevran's tent, but then I looked again and saw a tiny statuette by the pillow. A dragon. Oh for the love of God. \n\nI sat up, looking at my boots and jackets with satisfaction, then finally crawled out of the tent. Alistair was sitting watch by the fire, and he jumped when I emerged. I gave him a dirty look, which shut him up nicely, crept across to Aedan's tent, and crawled in. He woke as I entered, and his face registered relief. He pulled me into a hug, and I sighed in contentment. I had to unpack my bedroll, and I quietly described waking in Alistair's tent as I worked. \n\n\"Your Maker has a sick sense of humour, you know. I'm starting to believe Leli - he isn't gone from this world. He's just far more sarcastic than you know, so you don't recognise him.\" Aedan was in stitches by the time I was ready and collapsed into bed. He reached out to hold my hand, as usual, and I fell asleep again. \n\nAlistair was uncharacteristically quiet in the morning, but everyone else seemed happy to see me. I gave Aedan the last of my medieval coin and showed off the lice combs I stole. Everyone laughed about me discovering I had lice there too, and I stuck my tongue out liberally at anyone who giggled. I avoided Alistair and walked with everyone else, even skipping along beside Sten for a while. I wasn't exactly trying to rub it in his face, but I was sure he noticed and that left me feeling catty and hollow, instead of satisfied like I'd hoped. I sparred with Aedan, flirted a bit more with Zevran than usual, then set up a lice treatment station and spent the evening doing that instead of learning templar skills. We had a line going - three of us picking at a time (after convincing Leli to help), and again I managed to avoid doing Alistair's hair, though I wondered if Leliana had engineered that. And she pulled his hair a little harder than necessary too, I noticed with half a grin. I cried in bed that night, trying to stay silent and not wake Aedan, but he was too observant and pulled me into his arms. I sobbed, hoping no one heard, and finally fell asleep on his shoulder. \n\nIn the morning Alistair looked worse for wear, and something inside me softened. I was still angry, but I knew that I was over-reacting because of how I felt, knew he hadn't meant what he said, not really. And I still loved him, completely inappropriately. So I stopped purposefully avoiding him, but didn't give him the chance to discuss it either. That evening, I found a clearing like where we would normally sit, set up logs for both of us should he choose to join me, and sat down to practice meditating. After a few minutes he approached me, looking anxious. \n\n\"So show me that trick again? I still can't see the flow like you said I should.\" I kept my face carefully neutral, while his radiated relief. He sat down and dove into a discussion of magical auras, both of us pretending that nothing had ever happened. \n\nThe next day brought us a darkspawn ambush near the turn to Honnleath. Aedan and Alistair got jumpy, but the group of them must have been moving at a full run because we were in the thick of things before we'd had much warning. Aedan shouted for me to get back, but he needn't have worried; they ignored me, as always, and two of them fell to my daggers as they turned their unprotected backs to me. Once the group had been dispatched, I noticed Zevran looking at me strangely. \n\n\"What? I don't know why either, but darkspawn ignore me. It's like they can't see me or something. Why are you looking at me like that?\" \n\n\"You aren't...\" he mimed gagging again. \n\n\"Yeah, well, they're not human.\" I saw his face go dangerously blank, and tried to think what I'd said that would bother him. \"Wait, I mean...they're not people. I don't see elves as any different from humans, Zev. I wasn't making a distinction based on race.\" He relaxed his expression, and I sighed. \"Darkspawn...aren't people. They're monsters. Why would I feel sick over killing monsters?\" \n\n\"I have no idea. Why do you feel sick over killing rabbits?\" \n\nI blushed. \"It's...different. Rabbits are cute. And you expect me to eat them.\" The whole group laughed and I turned scarlet. \"Yeah, yeah, make fun of the city girl.\" \n\nThe rest of the journey back to Redcliffe was uneventful, except for one night spent shivering while all our blankets were washed in Bodahn's hot spring. After another week of travel, we could see the lake in the distance. Our lice were gone, much to everyone's delight, and only once had I been stuck combing through Alistair's hair. It was soft and golden, and I fought off mental images of more pleasant reasons to run my hands through it. Even the residual anger wasn't enough to keep me safe. \n\nOur return to Redcliffe was greeted by a very pleased Bann Teagan, a grim looking Theron - damn! Now I'm going to have to remember his alias again - and a surprise; Tomas. We were all so relieved to see him - well, Alistair, Aedan, and I at least - that we almost bowled him over in our hurry to exchange handshakes, shoulder slaps, and in my case, a hug and kiss on the cheek. Everyone was exhausted - we'd practically run the last few miles - and Eamon needed to be given the ashes, so we decided to send almost everyone to bed, except Alistair and Teagan who went upstairs to deal with the administration of said miracle cure, and Aedan and I who settled in the library with Tomas and Theron to bring them up to date. We told them about our travels, our new additions, Shale and Zevran, and the insane cult in Haven. Theron swore that once he was able, he'd send a detachment of military to mop up the remains of the cult and protect the urn. \n\nDuncan was very interested in my new-found templar abilities, and the continued inability of the darkspawn to see me even when I was standing in front of them. We discussed it until we heard footsteps approaching. \n\nAlistair and Teagan returned to report that Eamon seemed to be sleeping more naturally, and they hoped he'd rest overnight. Isolde was keeping watch. We decided to have Tomas tell everyone what was happening in Denerim in the morning, and scattered to find ourselves beds. Tomas insisted on walking me to my room, and I didn't object - I still had no desire to end up anywhere alone with Theron. \n\n\"Something happened, with Theron, didn't it.\" \n\nIt was actually sort of cathartic telling someone the whole story - I was keeping Aedan and Alistair in the dark to protect Theron's health. I knew Tomas would understand, and I was right. \n\n\"Thank you for keeping that secret. I can only guess what would happen if Aedan or Alistair found out.\" \n\nI nodded. \"I didn't go through all that to save him only to allow him to die from a dagger in the back one day to avenge my honour. Though it turns out Alistair would likely be angry with me, not him.\" \n\n\"What?\" Duncan looked shocked. \n\n\"He...thinks I've been sleeping around. I...when you left, I started sharing Aedan's tent. Not his bed, just his tent. And Zevran is an incorrigible flirt, and Theron didn't make any attempt to hide staring at me...He thinks I've slept with all of you. Probably Sten too, honestly. Everyone but him.\" \n\n\"Oh, Sierra. I know how much that must hurt you.\" \n\n\"I'll be fine. It's probably better - it will keep him away from me.\" He squeezed my hand. \n\n\"I don't think I can do anything about Alistair, but...if something occurs to me I'll let you know. Theron and I have had some serious discussions, since I arrived, on discretion and what it means to be a leader. I broached it as if I was talking about Aedan, but I think he got the picture. I will try to keep him away from you, as much as possible.\" \n\nI thanked him, impulsively hugged him again, and then bid him goodnight to collapse into the bed with Leliana, falling asleep half dressed. \n\nIn the morning, after baths and breakfast, we reconvened in the library. Solona joined us, but stayed quiet at the back of the crowd. Eamon had stirred, briefly, and though he wasn't yet awake, it seemed he was improving. Duncan took the lead. \n\n\"Things in the capital are...worse than I would have believed. Worse than it seems like Sierra even predicted. There is rioting in the streets because of the rumours flying about Loghain abandoning the battle at Ostagar. The army is being used for riot control, only marginally effectively. Loghain was a great general, in his time, but...something has happened. He's either gone mad or he's losing support of the nobles who are supposed to be with him and doesn't have enough manpower. I can't say which. \n\n\"Rendon Howe is the Arl of Denerim and Teyrn of Highever. He has been capturing people, noble and commoners alike, torturing them. I tried to free them, but wasn't able to - his security is too good, and I didn't want to be responsible for what Loghain would do if I assassinated him. I was able to intercept Riordan, and he's on his way back to Orlais to try to bring more Wardens across. He's got some secret routes to smuggle people in... \n\n\"The Alienage is closed to outsiders, but I was able to sneak in and speak with Valendrian. He has warned the elves about the Tevinters - I can't keep the blasted slavers away, but at least the elves will be suspicious from the start and not walk into slavery by mistake.\" \n\nTheron finally broke in and starting ranting about Loghain, which I'd been waiting for since seeing Tomas' face. I knew they must have discussed it multiple times before we got back, but he seemed to be looking for allies to help him convince Tomas that he should return to the capital and retake his throne. He appeared crestfallen when no one took his side, and finally stormed out. Tomas rolled his eyes and we all carried on. \n\n\"Tomas, I...am worried about something. About how we are going to get him back to his throne. Because...it turns out Anora is just as bad as Loghain in some ways, completely power-mad, and I don't think she can be allowed to remain ruling. And she is quite possibly barren, which leaves us with no heir to the throne. If Loghain doesn't manage to kill him for returning, she'll try to kill him to prevent him from putting her aside. At least, I wouldn't put it past her. So what do we do? We can't deal with this civil war just to have another on our hands if he dies.\" \n\n\"I'm hoping Eamon might have some ideas on that, Sierra, because I surely do not.\" \n\nTeagan jumped in. \"I have an idea, but I think I should wait to see if Eamon agrees. For now I think the best plan is to continue gathering information and allies.\" \n\nThat led to a lively discussion of where to go next. We had Orzammar, the Dalish, and Soldier's Peak to deal with; Marjolaine gunning for Leliana necessitating a trip to Denerim at some point; Flemeth to kill - it turned out Aedan had found the grimoire in the Circle Tower and given it to Morrigan, with the predictable result that the apostate wanted her 'mother' dead. It was a bit overwhelming. And Tomas planned to go trying to scout out the horde, see if he could locate the Archdemon, so we were on our own to do it. Again. \n\nWe agreed to spend two days in Redcliffe to see if Eamon awoke, and to think about our plans in the meantime. We separated after that decision; Tomas left to find Theron; Aedan and Zevran took off together leaving me with Prince, and I watched them go with narrowed eyes. Wynne wanted to examine Eamon, and dragged Morrigan along. Solona left on her own, I assumed to join Jowan. I wondered how that was going, but didn't get the chance to ask. Shale and Sten seemed content to hide within the castle. Alistair and Leliana were both headed to the Chantry to pay their respects, leaving me at loose ends. Teagan pulled me aside and informed me that he was going to visit the orphanage, inviting me to join him. \n\nI had slipped into a dress instead of armour when I'd woken - it felt weird to be so unprotected after weeks on the road - so I grabbed my cloak and joined him with Prince at our heels. The orphanage was wonderful. The children all looked happy and healthy, and had been joined by four others who had been found at an outlying farm. No one was quite certain but it seemed they had been attacked by bandits, who killed the parents leaving two little girls and two boys. How the children survived was anyone's guess - they were all in shock and even the eldest, who was only seven, couldn't seem to talk about it. Bevan and the seven-year-old were play-sword fighting, while the older girl helped with the babies and the younger girl played with dolls. Bella and Kaitlyn looked busy, but happier than I'd seen them. Teagan, Prince, and I spent a hectic morning crawling on the floor and chasing after giggling youngsters, and we were all spent by the time we left for lunch. \n\nWhen we returned, we received a report that Eamon had awoken briefly, and Teagan rushed off to check on him. Prince collapsed near the hearth of the main hall and went to sleep. I found Morrigan reading in the library, and settled in to join her. She put her book down and chatted with me, which just seemed so surreal somehow. With the whole 'mysterious witch' thing going on, it was easy to forget she was just a woman, and one with no experience in social interaction. ",
        "We talked a bit about Flemeth; in the game, I felt like it was some sort of manipulation on the part of Morrigan when she asked me to kill the elder witch. But it was clear, talking to her, just quietly one on one, that she was absolutely terrified of her mother. We couldn't decide, between us, which was worse - not to have parents, or have a mother and find out she only wanted you so she could steal your body. I also asked if she thought her mother would know anything about me, or who I was and where I came from. She thought not - her mother had told her of visions of what was to come, including the fact that only two Grey Wardens survived Ostagar and that one of them would die to end the Blight without the blood magic ritual, and also of Ferelden in civil war without a King; she never mentioned me or my strange abilities, nor did she know that Duncan and Cailan survived. \n\nI asked her what she intended to do if the Grey Wardens turned her down when she offered the blood magic ritual that could save whoever took the killing blow. As per the game, she indicated she would likely leave; her only reason for being part of the battle was to end up pregnant with an Old God. I spent some time talking to her about friendship and safety in groups, and hoped she might consent to stick around. She left the question unanswered, but it wasn't a direct 'no', either. I'll take it. \n\n\"So...the whiny Chantry boy.\" \n\n\"What? What about him?\" \n\n\"I will not claim to understand why, but 'tis obvious how you feel about the simpleton.\" \n\n\"I...\" \n\n\"And I do not understand. He does seem to return the feeling, and I dare say some experience in adult relations would benefit him; you are not entangled with anyone else, that I can see. So why have you not just bedded him?\" \n\n\"It's not that easy, really.\" \n\n\"But it is! He is attractive enough if you like that sort of thing, and you are a beautiful woman; quit mooning over him, go lay with him, and then you can leave it behind. Be done with him.\" \n\n\"Oh, Morrigan. If I didn't care for him, that might work. But I wouldn't be able to leave it behind, and yet staying with him isn't really an option either. Have you never had something you were unable to get out of your system completely? Remaining unrequited is all I can do.\" \n\n\"'Tis up to you, but if watching it is driving me crazy, I can't imagine what it must be like for you.\" \n\n\"I...thanks, I think.\" \n\nWe ended up reading quietly together for a while. I picked up some adventure book written for children, smiling as I leafed through it. That was where everyone else found us when they returned from their various pastimes. Teagan joined us briefly. Eamon was awake, and was slowly being brought up to speed on the events that had gotten us here. He was still exhausted and was (understandably) devastated about Connor, and didn't feel well enough to face everyone immediately; Teagan hoped he would come down the following day, so we could plan before we left Redcliffe. The rest of us ate supper together and then retired early. \n\nSolona remained quiet and aloof, her expression revealing nothing. She just watched everything, giving the impression of filing it away for future examination. She had yet to decide whether to join the Grey Wardens, and I supposed that left her somehow feeling distant from our little group. \n\nI knew I wasn't ready to sleep, and Leliana had gone off for a walk or something, so I wandered. I didn't want to run into Theron, although I knew at some point I was going to have to deal with him, and finally decided to go track down Aedan and see if he wanted to talk for a while. I found his room and knocked softly on the door. \n\n\"Who is it?\" His voice sounded strained; I wondered if he was upset. \n\n\"It's me. Sierra. Can I come in?\" \n\n\"No! Uh, one second.\" \n\nI heard rustling and what might have been whispering, and after a minute, the door opened a crack. Aedan was shirtless, looking slightly...rumpled. I raised one eyebrow. \n\n\"Everything okay? What's wrong?\" \n\n\"Nothing, nothing. I was just bored. Thought I'd see if you wanted to chat. But I can see you're...busy.\" His chest was strategically blocking my sight into the room, and I thought I could guess why. I smirked and waggled my eyebrows at him suggestively. \"We can talk tomorrow.\" \n\n\"You sure? If you need something...\" His face was crimson. \n\n\"No, I'm good. Goodnight, Aedan.\" \n\nThe door closed, and I whispered to myself. \"Goodnight, Zev.\" \n\nUnsure what to do with myself, I found myself staring at Alistair's door. I was about to slink away when I heard footsteps down the hall and looked left to see him approaching. Great, now I look like I've been lurking outside his door. \n\n\"Sierra?\" \n\n\"Hey. I, um, thought maybe we could practice? I'm bored and not tired yet.\" \n\nHe nodded agreeably. \"Come on in.\" \n\nHis room was small and neat, and he offered me the only chair then settled himself cross-legged on the bed. \n\n\"So what would you do at home if you were bored?\" \n\n\"Often? Play this...performance.\" \n\n\"More than once?\" \n\n\"Well, yeah...it was possible to make different decisions and change the story. Like, for example, instead of going to the Circle for help with Connor, we could also have allowed Jowan to perform a blood magic ritual that would have rescued him at the cost of Isolde's life. Or we could have helped Greagoir obtain and carry out the Right of Annulment instead of trying to save the mages. It made it interesting to try more than once.\" \n\n\"I can't help but find the whole thing entirely creepy.\" \n\n\"Me too, now that I know it's real. It would be sort of like...writing a book you thought was about imaginary characters, only to wake up one morning and find yourself in the middle of it.\" \n\n\"You know, most people would probably have curled up into a ball and waited to die, doubting their sanity the whole time.\" \n\n\"Don't think I didn't consider it. But I decided that if I wasn't insane, doing nothing was going to get me - and everyone else - in trouble so it didn't cost me anything to assume it was real.\" He smiled at me. \"Besides. I woke up in really uncomfortable places, for the most part. If I'd been somewhere with a feather bed I might have been more inclined to wallow in self-pity.\" \n\nHe laughed. \"So you're a 'fair-weather' omnipotent companion?\" I laughed too. \n\nWe chatted for a while longer until I caught myself yawning. \n\n\"You know, it seems I'm not going to be of any use practicing. I suppose I might as well go to bed after all.\" \n\n\"Goodnight Sierra. Thanks for the talk.\" \n\nChapter Twenty-Eight: The \"Plan\" \n\nThe next morning, we heard that Eamon would be meeting with everyone after lunch. So I donned my armour and went down to the practice yard, and spent the morning impressing Wayne with how much I had learned. He grudgingly admitted that I wouldn't be completely useless in a fight, and might even have a chance of defending myself. It was high praise coming from him. \n\nI had a quick bath before lunch and then ate in a rush, eager to finally meet Eamon and figure out The Plan. And I was curious to see whether the fans who thought he was an opportunistic jerk or those who thought he was a nice guy who lacked tact dealing with suboptimal circumstances were correct. Everyone else seemed to be feeling the same anticipation; we were all nervous energy and forced joviality as we waited in the by-now familiar library. Solona was absent, as was Jowan, and I was sure that was by design. \n\nTeagan helped Eamon in, and we all stood and bowed slightly as the shuffling, exhausted looking Arl entered and was seated. Theron shook his hand and clapped him gently on the shoulder, and Tomas, Alistair, and Aedan all shook hands as well. Then he turned to those of us he hadn't met, and Teagan performed introductions. \n\n\"Wynne, mage of the Fereldan Circle. Shale, a golem, obviously. Zevran, Antivan Crow. Leliana, lay sister of the Chantry. Morrigan, mage from the Korcari Wilds. Sten of the Beresaad. And...Sierra.\" \n\nEamon nodded at us as our names were called, and 'Your Grace' was muttered by each of us in turn. Studying Eamon, it was clear the poison had taken its toll on him, but there was raw intelligence behind his eyes, and I could tell he would remember every word spoken. He'd obviously been warned about our eclectic group - he didn't even blink when a golem and a Qunari were introduced. \n\nHis voice was slightly hoarse from disuse, and he stated that he'd heard Teagan's version of events, but wanted to hear ours. Theron, Tomas, and Aedan all started talking at once, to everyone's amusement, and I watched Eamon's eyes widen as, with a glance, Theron and Tomas both allowed Aedan to talk. We all know who our leader is, rank and years be damned. I grinned. I noticed he conspicuously left out any details regarding my templar abilities, and I found that interesting. Maybe he doesn't entirely trust Eamon either? He referred to me as his sister, without explaining that at all, and I almost giggled as Alistair's and Eamon's eyebrows tried to climb into their hairlines. Eamon asked a number of expected questions about me, and seemed vaguely unsatisfied with the answers as it was obvious Aedan was side-stepping some of the pertinent information, but I knew that I didn't have anything personal to go on to convince him. I decided to keep quiet and let Aedan field the questions as much as possible. \n\nFinally we were up to date, and then Tomas cut in with what he'd discovered in Denerim. Eamon listened carefully, interrupting only a couple of times for clarification. Finally, he turned to me. \n\n\"Well, my Lady-\" \n\n\"Just Sierra, Your Grace. Please.\" \n\n\"Sierra then. You have managed a considerable feat - convincing my brother, Duncan, and King Cailan of your origin and sincerity. I am impressed.\" \n\n\"You mean skeptical, not impressed, Your Grace. It's okay. I understand. It's sort of an insane story, isn't it? It's true, none-the-less.\" \n\nTeagan cut in. \"It's hard not to believe when you see her disappear into thin air right in front of you.\" \n\n\"Or predict exactly who and what we'll be fighting, where a deactivated golem is hiding and the correct activation phrase, and how to find the location of the Ashes which cured you, Your Grace.\" Aedan jumped in. I smiled at him and Teagan both. \n\n\"So how about this then: what happens next?\" \n\n\"Well, I can't exactly say. I mean, I've changed events already. Between Tomas and Theron, and the fact that it should have taken at least a month more to get the Ashes and bring them back...I know roughly what challenges we will face as we try to gather allies for the battle against the Archdemon, but as for what will happen with the human politics in Ferelden, or when the final battle might be, I'd say that's all up in the air.\" \n\n\"So you're saying your knowledge is useless to us.\" Everyone in the room looked a little irritated, but I held up my hand to forestall the peanut gallery. \n\n\"No, your Grace. I'm saying that we have free will, and we can yet decide our fate to some extent. If I've proven anything by coming here, it's that things can change. My knowledge just gives us some idea of how we may wish to go about making those changes.\" \n\n\"Cailan has suggested we just march on Denerim and prove he still lives, and that will be Loghain's downfall. I've half a mind to go along with it, really, but I know Duncan is very much against it, as is Teagan, both because of you. Why?\" \n\n\"Well, Your Grace, I am only speculating, but here are my thoughts. Loghain has already committed treason and tried to get Cailan killed, blaming it on the Grey Wardens. He's afraid of you, and already tried to have you murdered as well. Whatever his reasons, his only hope of holding onto his power - and his life - is if Cailan doesn't survive to tell the truth. He has the manpower to have the roads watched; if there was any whisper of Cailan's survival, he could outnumber us and slaughter us all, strengthening his own position in the Landsmeet by claiming you rebelled against his lawful authority. You're the only one with the clout to defeat him, since Fergus is still missing; with you dead, and Cailan as well, there would be no one to fight him. The way I reasoned it through, if we take the direct route to confront him, we're just going to end up as corpses in a field somewhere to feed the crows.\" \n\n\"So what would you suggest?\" \n\n\"Well, I don't know for sure. Aedan is our leader and I think those decisions are best left up to him and Tomas, as well as Theron and yourself. Teagan also mentioned he had an idea, which I'd be thrilled to hear.\" Eamon scowled, I wasn't sure whether at me directly or in response to Teagan's plan. Aedan spoke up. \n\n\"Yes, Teagan, I'd also like to hear your plan.\" \n\nTeagan looked nervously at his brother. \"I'm not sure it's such a good idea, really,\" he demurred. Eamon looked like he'd been sucking on a lemon. \n\n\"Tell us anyway, my Lord?\" I asked. \"Even if it isn't a workable plan, maybe it will stimulate someone else's thoughts.\" \n\n\"Well, I was thinking that if ...Theron hadn't survived, we would be having a discussion about putting Alistair on the throne.\" Alistair and Theron both objected, but Teagan just spoke over their bluster. \"We would call a Landsmeet, travel to Denerim, try to prove Loghain's treachery to the assembled nobles, and then put Alistair forward as the legitimate heir. What if we do that...go through it as if nothing had changed, but at last minute, once those who would betray us are out in the open, reveal Theron instead of Alistair? If Loghain doesn't know about Theron, he won't plan to ambush us, it would seem. He can go into the Landsmeet wearing a helm with no one the wiser.\" \n\nWe all stopped and stared at Teagan, thinking furiously. It would get Theron into Denerim safely, and allow him to see what Loghain and Anora had done; it would ensure all the nobles of Ferelden saw Theron alive before Loghain had a chance to react. It put Alistair's parentage out there, something I knew he wouldn't want, and I could see his face scrunch slightly as he thought about it. Overall, though, I knew he'd do what was best for Ferelden and this was far better than any plan I could come up with. \n\n\"Teagan, you're a genius!\" Tomas and Aedan appeared to agree with me, nodding heartily. \n\nTeagan looked abashed, while Theron and Eamon both looked enraged. They both started sputtering about deception and dishonour, but after a couple of moments Aedan interrupted them. \n\n\"Are you two quite finished? Look, honour and integrity are all fine and dandy, but in this case all they are going to net us is a swift funeral. I'd rather be alive and get yelled at for playing a trick than honourable and dead. If one of you has a better plan, I'm happy to hear it.\" That shut them up, and though both were still red-faced and obviously angry, they didn't respond. \n\n\"Now the question is do we do that now, or wait until we have secured the alliances of the elves and dwarves?\" \n\nTheron, of course, wanted to call the Landsmeet immediately. Aedan and Alistair wanted to see to the treaties first. Eamon encouraged them, disagreeing with Theron, and I watched him with narrowed eyes until I realised - he was hoping to buy himself time to come up with a different plan. Which was fine with me - if he could find one that worked and didn't get us killed, I would be thrilled - as long as he kept his mouth shut about Theron in the meantime. \n\nIn the end, we decided to wait for the treaties. Everyone promised to keep the secret of Theron's existence. He was disgusted at being left behind in Redcliffe yet again, but no one seemed too sympathetic. I wondered how long it would take before he finally understood that he had to do what was best for Ferelden, not just what was the most fun for him. Maybe being around Eamon for a while would be good for him. \n\nAfter some discussion, we decided to do a huge circle - from Redcliffe to Flemeth's, then to the Brecilian Forest for the Dalish, then into Denerim. Once done there, we would head to Soldier's Peak (apparently Duncan had been in contact with Levi Dryden and arranged for us to meet him at the pass leading to the old fortress), over to Orzammar, and finally back to Redcliffe. In travel time alone, that would be twelve weeks, give or take. So assuming we ended up spending a week with the Dalish, another in Denerim, one in Soldier's Peak, and at least two weeks in Orzammar, that would be more than four months all told. And then I did the math and realised - with the exception of a day or two every couple of weeks, I'd been in Ferelden for more than two months already. In two months, it already felt more like home than mine ever had. \n\nOnce the meeting was over, Tomas kept Aedan, Alistair, and I back. He informed us that he had secured Solona's agreement to become a Grey Warden, but that because we couldn't do the Joining until we found Denerim's supply of Archdemon blood, she wouldn't be travelling with us. Aedan objected, but Tomas put his foot down. \n\n\"Your...companions, know far too many of the Grey Warden secrets as it is.\" His gaze flickered to Morrigan as he spoke, but the witch seemed intent on her own destination as she hurried out. \"I won't have Solona learning the truth and trying to flee. She's a recruit now, but there's no reason for her to be terrified of what will happen for the months until her Joining, if she overhears something she shouldn't. She can stay here and keep Jowan company until she can undergo the ritual.\" \n\nI spoke. \"Are we going to recruit Jowan?\" Alistair glanced at me, surprised and looking annoyed, but Tomas just looked thoughtful. \n\n\"I don't know. I would...worry, about his Joining.\" \n\nI nodded. Jowan certainly wasn't the strongest in willpower - or talent - as far as I'd seen. I had to wonder if he'd survive the Joining, though the thought that the alternative was for him to be made Tranquil gave me pause. If it was me, I'd rather risk the Joining. When I said as much, Tomas gave me a shrewd look, but nodded thoughtfully. I did notice that no decisions seemed to have been made about the mage's fate so far, despite Eamon's recovery. \n\nI headed up to the room I shared with Leli and went to sleep. The next morning, Tomas left to go scouting, and the rest of us took our leave of Theron, Eamon, Solona, Jowan, and Teagan. I was aware that Eamon and Teagan had been awake well into the night talking with Aedan and Tomas, and they all looked a bit haggard. \n\nOur pace wasn't as quick as normal, although I wondered if our destination - Flemeth's - had as much to do with it as fatigue. I certainly wasn't looking forward to trying to kill a several-hundred-year-old abomination. No matter how much she deserved it. And the concept that she'd only die temporarily - well, that wasn't comfortable either. Would she hold a grudge? \n\nInstead of following the roads, we set out through the forest leading into the Korcari Wilds. Aedan claimed to be able to navigate to Flemeth's, though even Morrigan said she didn't know how to find it from this direction. Aedan was convinced it would shave four days off of our trip. I appreciated his sense of haste, but definitely did not appreciate having to carry my own pack again - Bodahn's wagon couldn't follow this way, and he agreed to wait for us on the road east of Lothering. Great, three weeks of walking with a pack on. \n\nAedan carried Morrigan's pack as she was currently flying overhead; to my surprise, without a word, Alistair gathered up mine and Leliana's and headed off after Aedan. Leli and I shared smiles, and followed behind him. I might be angry with him, but I can't deny he's a gentleman. The going was relatively easy - the thick forest meant little direct light hit the ground so the undergrowth was thin; I knew that wouldn't last, given what the Korcari Wilds were like. ",
        "Over the course of a week, we seemed to be traveling progressively downhill, and the ground became swampier, requiring us to divert a few times as we came upon ponds of green, thick sludge that no one trusted to walk through. The walking was tough, but the nights were worse. Everyone was jumpy, expecting darkspawn to attack at any point; no one talked much, and even Leliana didn't sing. Aedan didn't want us making campfires unless we could be sure they were well-hidden, so we ate dried bread and jerky, relying on Wynne's magic to heat water for tea and porridge. \n\nThe only thing to lighten everyone's mood was the playful banter that still went on between Aedan and Alistair. The two men bickered like brothers, and it was hilarious to listen to. On about the third day into the swamp, Alistair began questioning Aedan's directions. He claimed to have seen the same tree before, accusing Aedan of leading us in circles. I could see he wasn't serious, just enjoying getting a rise out of Aedan; Wynne, Leliana and I chuckled together as we followed behind the two Grey Wardens. \n\nWhen the first darkspawn ambush came, we were completely prepared. We fought off a large group without too much trouble - I almost laughed as I saw Shale launch a genlock into a group of archers instead of the boulders she normally threw. I stayed out of the fighting completely, earning a smile from Wynne. Afterwards, Aedan and Zevran were wandering through the darkspawn corpses making sure they were all truly dead, slitting a throat here or there for good measure. All of a sudden there was a high-pitched sound, and black shadows jumped out from nowhere. Shrieks - nasty, stealthy, sharp - darkspawn equivalents of Aedan. Great. \n\nWe were caught unawares, everyone's defenses down because we thought the fight was over, and I guessed that the Grey Wardens' senses were overwhelmed by the corpses around us. A long, black claw flickered faster than I could watch, and Zevran let out a scream and went down, hands cupping a bloody facial wound. Aedan recovered and threw a blade, which pierced through the shriek's arm, and followed it up with a slash and stab that dropped the amorphous shadow to the ground. Alistair took down another with his shield, and Sten shattered one that Morrigan had frozen solid. Panting, we were finally safe, and Aedan, Wynne and I rushed to Zevran's side. \n\nHe was alive, though extremely bloody, and had a gash running from his forehead, barely skipping his eye, continuing down his cheek and then deeply into the flesh of his right pectoral. He was awake, and kept trying to talk, while Aedan shushed him and I pulled out the bottle of strong alcohol we all kept for such occasions. \n\n\"Sorry Zev,\" I muttered, and Aedan put the handle of his dagger between Zevran's teeth. I poured the alcohol carefully into the long wound track, especially into the deeper part on his chest, while Wynne held the gaping edges apart to allow it to do its work. Zevran screamed, the sound louder and more painful than the shrieks, and I shuddered but kept pouring. He finally passed out, and I had to wonder how much pain would be required to make a Crow pass out. We all took a deep breath of relief as we finished. Wynne probed the wound with a finger, making sure nothing was left inside, and then started chanting. \n\nWatching healing still fascinated me. The skin knit together - by magic! - looking like someone had hit the slow rewind button on a DVD recording of the initial injury. By the time she'd healed together his chest, she was panting and pale. I forestalled her next attempt on his face, and pulled out a poultice, carefully applying the red liquid to the skin itself in the deeper sections, dabbing at it with a linen cloth in the shallower parts. The laceration closed, but left a pale scar across his forehead and cheek. Wynne allowed herself to be led away by Leliana, and Aedan and I were left sitting beside the former Crow, each of us gripping one of his hands. \n\nAedan's face was tender, and I tried not to stare. I had wondered what was going on between the two rogues, but seeing that soft, wistful look on my brother's face, I knew: what had been happening was that Aedan was falling in love. I wondered if he knew. I hoped Zevran would wake and see his face like this - I didn't think he'd believe it otherwise. I glanced around, checking that no one else was looking; I knew Aedan wouldn't want to be seen being vulnerable. Alistair was shooting glances at me, but everyone else was busy; Wynne was resting against a boulder, eyes closed. I rolled my eyes at Alistair, and he flushed slightly, returning to repacking his gear. After a few minutes, Zevran stirred. I met Aedan's gaze to ensure he was okay, and then left them to have some alone time. \n\nI vaguely contemplated cuffing Alistair on the back of the head for the looks he'd been giving me, but managed to resist. Probably thinks I'm worried about having a threesome later. I checked on Wynne, who claimed to be feeling well. I dug through my pack until I found some not completely rock hard bread and some jerky - God I was getting sick of jerky - and distributed it to the rest of the group who were scavenging usable items off the dead darkspawn. Zev was awake by the time I made it back to him and Aedan, and he accepted a double portion as his stomach growled loudly. \n\n\"Thank you, Sierra.\" \n\n\"Huh? For what, Zev?\" \n\n\"Aiding me with my injury. I hear you were the unfortunate soul to pour the alcohol into the wound.\" \n\n\"Well, honestly I'd do that for anyone, but you're welcome. And you know, sorry about that.\" \n\n\"It had to be done. Sadly I hear I am left disfigured.\" \n\nI laughed. \"Don't worry Zevran. Chicks dig scars.\" \n\nHis confused expression set me giggling, and I decided not to explain. I offered him the tiny compact I carried so he could examine himself in the mirror. He tsk'd at the image, but didn't seem too concerned. Maybe Aedan told him scars were sexy. I giggled again and then offered a hand to haul the elf up. We got ready to keep traveling. \n\nWhen we camped that night, we decided that Morrigan should go no further towards Flemeth's. If Aedan was correct, we were three days from her hut, and we worried that she'd be aware of our approach. We also decided - and I agreed - that I should stay with her. Flemeth didn't know about me, and keeping my existence a secret could eventually grant us an unforeseen advantage. That said, I was disappointed not to go - I wanted to see her, silly as that was, but I also hoped she'd know something about who I was or how I'd gotten to Thedas. I convinced Aedan that they had to carry my spare armour and as much of the rest of my stuff as I could live without, in case I disappeared and reappeared with them. \n\nMorrigan and I were to circle around north and meet them on the opposite side of Ostagar, closer to where Bodahn should be waiting. Six days alone with Morrigan. What was I thinking? I should have stayed with the wagon. I was seriously concerned about my ability to stay in Thedas for six more days, when I realised I'd already been in Thedas for twenty consecutive days. My new record. It occurred to me that the times I spent in Thedas had been getting longer, while the returns to Earth had been getting shorter; I wondered what that meant. I had to admit that it didn't bother me as I thought it should. \n\nMorrigan and I walked mostly in silence. I had a light pack to carry, but as I'd sent most of my stuff with Aedan it wasn't too cumbersome. Morrigan didn't want to fly lest Flemeth recognise her bird form, so she stayed on the ground. I was glad - even as poor company as Morrigan could be at times, it was better than walking alone. I worried we would run into another band of darkspawn, but she thought she could navigate us around them when there weren't two Tainted Grey Wardens with us to draw their attention. \n\nWe made good time and even Morrigan was pleased - she thought we would end up at our rendezvous point in four days, not six. I was somewhat irritated that she had thought I would slow her that much, but had to admit she wasn't without reason. Feeble. I hated it. I was happy to prove her wrong. \n\nEvery discussion I managed to pull Morrigan into felt like a victory. We talked about nothing important, but even getting her to comment on the weather (cold and damp, but not raining, fortunately) was a major effort most of the time. I asked if she had any way of telling where in the Wilds Fergus Cousland might have been - I recalled that he was nursed back to health by some of the Chasind - but she indicated there were dozens of tribes that moved around, and literally hundreds of hidden campsites where they could be at any given point. I gave up on my thought of finding Fergus with a sigh. I knew he'd come to Denerim once he was able. \n\nThe four days passed reasonably well; setting up camp and having to wait around for two more was torture. I was worried about the rest of the group, awkward with the long silences between Morrigan and I, and constantly expecting to disappear and get dragged back to Earth. Traveling light meant I shared a tent with Morrigan, and somehow even though one of us was awake on watch at all times, being in the same tent allowed me to sleep. \n\nI tried practicing my templar abilities, but it was difficult without Wynne to practice on and Alistair to guide me. I didn't want to ask Morrigan for help - she wasn't the trusting type - but after a while she came over and offered to at least visualise spells and hold the mana so I could practice seeing it. It was interesting, I realised - the magic looked different when she used it than when Wynne did. I wondered if each mage was different, or if it was the difference between a Circle mage and an apostate. Or a healer compared to a shapechanger. I'd have to ask Alistair. And pay more attention next time we ran into an Emissary. \n\nBy the evening of the sixth day, when they hadn't showed up, I had to concentrate to avoid panicking. I was almost starting to hope I'd disappear and reappear with them, just so I'd know that Aedan and Alistair were safe. Morrigan scoffed at me, reminding me the six days hadn't accounted for time to chat and fight with Flemeth or rest afterwards. It didn't help. Morrigan offered to take first watch, but I knew I wouldn't sleep anyway so I waved her off. I stayed up, by the fire, and for the first time wished I knew how to knit. Or whittle. Anything to keep my hands busy! At home I would doodle while thinking; I kept a notepad in virtually every drawer with a million different pens so I could doodle whenever I needed. With paper the way it was here...I was going to need something else. \n\nI traded watch with Morrigan sometime in the night and settled down to try to get some sleep. Every time I managed to doze off, I was assailed by images - Aedan and Alistair, dead or maimed; me, alone, in Thedas, forever. Because that would just be my luck - the minute they die is the minute I'll finally be stuck in Thedas permanently. I kept waking, gasping and shivering, and finally gave it up as a bad job. I crawled back out of the tent well before dawn. To Morrigan's credit, she didn't say a word, just sat beside me, shoulder-to-shoulder, and let me brood. She may not have understood why I was the way I was, but she was prepared to support me anyway. I contemplated hugging her. I didn't."
    ],
    "authorname": "ElyssaCousland",
    "tags": [
        "fantasy",
        "fanfiction",
        "dragon age",
        "modern girl in thedas",
        "romance"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/there-and-back-again-ch-27-28"
}
{
    "title": "A Taste for Christmas Cake",
    "pages": [
        "Note: 'Christmas cake' is a slang term in Japan referring to a woman over 25 and still unmarried. The idea is that, like Christmas cake leftover after Christmas day, a woman older than that has already passed her use-by date and is supposed to be no longer attractive.\n\n*****\n\n\"Everyone, here's to another successful year for Eastport Corporation! Thank you for all your hard work. Kampai!\"\n\nI was bringing the foaming head of that long-awaited first jockey of Asahi Super Dry to my lips when my phone vibrated in my jacket pocket. Sighing, I replaced my beer on the table and started fumbling around for my phone.\n\n\"What's the matter, Mi-chan?\" asked my fellow executive Hideyuki sitting next to me. His dark eyes narrowed and his lips curled into a teasing smile. \"Jealous boyfriend checking up on you?\"\n\nI glanced at the number. \"Oh no,\" I muttered. \"It's the office.\"\n\n\"Oh, right, you're on call tonight. That's too bad.\" Hideyuki returned to his beer as I got up and removed myself from the noise of the booth. It was our end-of-year party and I'd been looking forward to it for a long time. The party was much later than most other Japanese companies', since we have a lot of foreigners at our office, and this year it happened to fall on Christmas eve. That had annoyed a few people, since Christmas Eve is usually a time for couples to enjoy a romantic date, but the executive had allowed people to bring partners to avoid any bad blood.\n\nI'd come alone, of course. That moron Hideyuki had already forgotten that I was still recovering from a bad break up with my boyfriend of three years. It was the reason I was on call tonight: being single, I'd volunteered to do it.\n\nNow I was regretting my selflessness. I took the call and talked to Naomi at front office. One of our foreign teachers had got himself into trouble.\n\n\"What is it this time?\" I muttered. An incident late on Christmas Eve could be any number of things: an altercation over an unpaid bill at an izakaya or karaoke, an irate taxi driver with a vomit-stained cab or, worse still, a furious parent of a student found going out with one of our teachers. It was against our company policy, of course, but happened all the time regardless.\n\nIt wasn't any of those things. The guy was just lost.\n\n\"He says he's wandering around paddy fields at the moment,\" Naomi told me. \"I'll send you his number.\"\n\n\"Who is it?\"\n\nI recognised the name. I was surprised. He hadn't shown up on my radar as someone who was likely to cause us trouble. Usually, those individuals outed themselves during orientation. This guy, well: he'd seemed extremely normal. A little shy, maybe, and with almost non-existent Japanese, but sensible enough.\n\n\"Where was the last place he recognised?\"\n\nMinami-Arakawa. I groaned. It was miles away, on the Toudama line. I'd take me forty minutes to get there. I'd have to find him pretty quickly after that or we'd miss the last train.\n\nI thanked Naomi and hung up then rang the kid. He was extremely apologetic but I quickly cut him off and told him to stay put. I told him to access the map app on his smartphone and try and find out where he was. He called back telling me that everything was in kanji and he couldn't read any of it.\n\nI sighed. Of course it was. I told him to find the closest train station and make for it. The sign would have the name of the station in English characters on it. I was going to jump on a train and be with him soon.\n\nHe thanked me again and hung up. His voice had sounded fragile, like he was very upset, and slurred, as if he'd been drinking. I knew something must have happened to him. That sort of thing happens a lot on Christmas Eve. At least my fianc\u00e9 - wait, no, my ex-fianc\u00e9 - had had the good manners to break up with me last month.\n\nI excused myself from the party with a rapid-fire set of bows and wished everyone a Merry Christmas. Then I slipped on my shoes at the entrance to the izakaya and ran for the station.\n\nThings were going to be tight.\n\nI was on a rapid when I felt my phone vibrate. I struggled to pull my phone out with my fellow commuters bunched around me like sardines. It was a message from the kid.\n\n\"I'm at Naka-Shimazawa.\"\n\nIt was a small station, next to Minami-Arakawa. I got off the express and changed for a local at Musashi-Shimazawa. It was the next station after.\n\nThe train was pretty full, but not quite as full as the rapid had been. Apart from the omnipresent salary-men there were a few couples on their way back from dates. I ignored the hand-holding and the heads on shoulders and stared down at my phone.\n\nIt wasn't long before the train pulled in at the station. Only a few people got off. Naka-Shimazawa was in the middle of nowhere. I scanned my pasmo card and came out of the station. He was standing there waiting for me.\n\nHe was scanning the faces of the people coming through the ticket gates and when he spotted me he smiled with a mixture of relief and embarrassment. He hurried over and bowed, badly, apologising for having dragged me out here.\n\nI was annoyed but maintained my professional demeanour and told him not to concern himself about it. There was also the fact that his eyes were red. He'd been crying. Something sprung up in me then, a maternal, protective feeling, but also empathy. I knew what must have happened. Being broken up with is never fun. It doesn't get any easier, either.\n\nEven though he looked much younger, I knew from his profile that he was 21. When you're that age, a break-up feels like the end of the world.\n\nThe concrete shuddered. A train was about to arrive.\n\n\"Come on,\" I said. \"That's the last express back into the city.\"\n\nWe hurried through the ticket gates and up the stairs. The platform was strangely deserted. The train approached. It was coming very fast.\n\nThe train flew straight past us and didn't stop. I pushed away the black hair that had flown across my face. Why hadn't it stopped?\"\n\nI went and checked the timetable, the boy following behind me. I read the numbers and symbols and then groaned. I'd misread the timetable. I'd thought there was one more express, but it was Saturday night. The additional express only ran during the week. I kicked myself for my incompetence.\n\nThe boy looked at me, a little fearfully I thought. I stopped muttering and sighed. He started to apologise again but I shook my head.\n\n\"No, it's my fault. Look, let's find a caf\u00e9 or something to sit down at and I'll ring up the office and see what we should do.\"\n\nHe trailed behind me. There was no caf\u00e9 near the station. I asked the guy locking up the ticket office and he told me there was a little family-run izakaya just down the street open til late.\n\n\"Let's go,\" I told the boy.\n\nI spotted the little sign half-hidden between blooming camellia bushes. The chalk writing read 'Mama-goko'. It was a cute name for an izakaya: \"Playing at being mom,\" like little kids do. It was a house that had been turned into a shop. Warm, buttery light welcomed us as I pushed the door open.\n\n\"Excuse us!\" I said. \"Are you still open?\"\n\n\"Welcome!\" came the cheery reply from behind the counter. It was an elderly mama-san. She was wiping the bench. \"How many of you are there?\"\n\nI glanced back at the boy. He was staring at his feet. \"Just the two,\" I said. \"Are you sure you're still open?\"\n\n\"Oh, yes,\" said the lady. \"Since it's Christmas Eve a lot of my regulars have gone out to the city so it's a bit quiet.\" She smiled at the boy. \"What a cute young man!\"\n\nThe boy looked up, His face went red. So he could understand simple Japanese. I felt myself flush, too. It did seem a little strange, the two of use being together.\n\n\"We missed the last train,\" I explained. \"I'm... well, I'm his sempai, I guess you could say.\" 'Older colleague' sounded strange in this situation, but it was the only word I could think of.\n\nThe mama-san turned to the boy and asked him what he did.\n\n\"Uh... English teacher,\" he said in pretty passable Japanese.\n\nShe smiled. \"I hope you're enjoying our country. Booth or counter?\"\n\nWe chose a booth. There was no one else there, but I wanted a little privacy and I was sure the boy did, too. The mama-san came and brought us two little dishes of hors d'oeuvres and placed napkins and chopsticks down before us.\n\n\"Are chopsticks okay?\" she asked the boy in Japanese. He nodded. \"So what would you both like?\"\n\nI remembered that icy glass of Asahi Super Dry and ordered that. The boy ordered the same. The mama-san raised her eyebrows.\n\n\"I'm sorry, but in Japan you have to be 21 to...\"\n\n\"It's okay,\" I said. \"He's 21. He just looks underage.\"\n\nThe mama-san smiled apologetically and went off to pour us our beers.\n\nThe boy stared down at the little dish, his chopsticks in his hand hovering over it.\n\n\"It's pickled burdock-root,\" I said. \"It's delicious.\"\n\n\"I'm sorry,\" he said. \"I'm just... I'm just not really...\" He turned away and brought a hand to his eyes.\n\nI stared down at my own dish, suddenly intrigued by the pickled burdock-root. The mama-san returned and set our beers before us and then discretely vanished. She soon returned with a small packet of tissues which she placed on the table without a word.\n\nThe boy sniffed and rubbed at his eyes with the back of a hand. I took some tissues and handed them to him. He pushed them at his eyes.\n\n\"I'm sorry,\" he said. \"My girlfriend, she...\"\n\n\"You guys broke up?\" I asked.\n\nHe nodded.\n\n\"Just happen tonight?\"\n\n\"Yeah,\" he said. \"We were supposed to go out to Tokyo tonight but she told me we had to talk. We went to this caf\u00e9 and she...\"\n\n\"Don't tell me,\" I said. \"She has tea-coloured hair, right?\"\n\nHe blinked at me. \"How do you...?\"\n\n\"I've seen it a million times,\" I said with a sigh. \"Party girl, right? Meet her at the Hub or Gaspanic or somewhere like that?\"\n\n\"Uh...\"\n\n\"Listen,\" I said. I knew I was entering my preachy mode, but I wasn't going to stop. \"There are a lot of girls like that here in Japan. They're not very serious about anything. They just like foreigners. That's why they hang around in those English-pub chain-stores. Having a foreigner as a boyfriend is just a fashion accessory.\"\n\nHis face fell. I was hitting some home truths. I knew I was being blunt, so I said, \"But you were serious about the relationship, right?\"\n\nHe stared down at his beer. His head gave the slightest of nods.\n\n\"I'm sorry.\" I reached across and placed my hand on his. He looked up, surprised. \"I can tell you were serious. Boys wear their hearts on their sleeves, don't they?\"\n\nI realised I was leaving my hand on his for too long and took it away. I grabbed my beer. \"Come on. Let's forget our troubles for a while and have a drink or two. It's Christmas Eve after all.\"\n\nHe managed a weak smile and lifted his glass to mine.\n\n\"Kampai!\" I cried.\n\n\"Kampai!\" he repeated.\n\nThe beer was beyond delicious. The sip became a long drink and I lay back on the seat. \"Ah!\" The boy was sipping at his. \"You like Japanese beer?\" I asked him.\n\n\"Oh yes,\" he said.\n\n\"Japanese girls too?\"\n\nHe blushed and smiled. I was wondering if my teasing might go too far, but I was glad that I'd read him correctly. He had one of those earnest, open, na\u00efve faces that just cry out to be teased. No wonder he'd been snatched up by that gal. He would have been putty in her hands. I knew that right now she was almost certainly having sex with his replacement.\n\nJust like my fianc\u00e9 was... with whoever it was that he... Wait, no. My ex-fianc\u00e9.\n\nI chased the image away with another long drink.\n\n\"Sooo,\" I said. The silence between me and the boy had become awkward. \"How are you enjoying teaching?\"\n\nWe talked about his job. Eastport is a company that farms out foreigners with ESL training to universities to teach freshman and optional English courses. I'd been working for them for a few years now and seen a hundred kids like him pass through.\n\nHe replied that he was enjoying his job. Living in Japan was a bit difficult for someone who didn't speak much Japanese, he told me, but everyone was very polite and helpful.\n\nI nodded, taking another drink. Japanese people are definitely that on the outside, especially to people they don't know. When they get to know you though, they're some of the bluntest people you'll ever meet. I told him as much.\n\nHe arched his eyebrows. \"Really? But-\"\n\n\"Well, just look at me,\" I said. \"Sitting here and giving you advice about women. Pretty obnoxious, right?\"\n\nHe shook his head. The smile on his face this time was genuinely brighter than before. \"No, it's good advice,\" he said. \"I just wish I was smart enough to follow it.\"\n\n\"Well, it's not so much about smarts as wisdom,\" I said. \"When you're as old as me you'll be giving unwanted advice to people younger than you as well.\"\n\n\"Oh, but you're not old,\" he said, taking a long drink of his beer and looking at me over it.\n\nWhat?\n\nI ran his words over in my head. I'm fluent in English, but sometimes subtleties like irony or sarcasm can be lost on me. He'd sounded genuine.\n\n\"Oh, but I am old,\" I said, and laughed. He frowned and I said, \"Wait. How old do you think I am?\"\n\nHis eyes went wide. No man, Japanese or foreigner, likes to be forced into the position of guessing a woman's age.\n\nI stared at him. My gaze left him in no doubt that I required an answer from him, and an honest one. I'd know if he was lying.\n\n\"Uh, 25 or 26?\" he said at last.\n\nI knitted my brows. The boy looked panicked. \"I'm 33,\" I said.\n\n\"What, really?\" He looked about nervously. \"Uh, I guess it's just hard to judge Japanese people being a foreigner.\" He glanced at me and managed a smile. \"Women are sensitive about their age, aren't they?\"\n\nI tried to hide the fact that I'd been flattered by his answer by saying, \"Yeah. Especially ones my age.\" I took a drink. \"You know about Christmas cake, right?\"\n\nHe blinked at me. \"Christmas cake?\"\n\n\"Not the real cake,\" I said, chuckling. \"No. In Japan, when women get older than 25 people start calling you Christmas cake if you're not married. Well,\" I waved a hand in the air. \"No one wants to eat Christmas cake after Christmas day, right? It's the same with women. Nobody wants you after you're 25.\"\n\n\"Really?\"\n\nI nodded. \"In Japan when you get to 25 you have a choice as a woman: either get married or buy an apartment.\" I took a long drink then added, \"I bought an apartment.\"\n\n\"We don't really care about that sort of thing,\" said the boy. \"I've known lots of guys that have gone out with older women. My girlfriend... uh, ex-girlfriend I mean. She was 23.\"\n\n\"That so?\" So 23 years old was an older woman for this guy. I guess that made me a grandma.\n\nThe mama-san used the lull in conversation to come and ask what food we wanted. I was feeling hungry and the boy said he was, too.\n\n\"You didn't eat anything with your girlfriend earlier?\"\n\n\"No, just a couple of drinks,\" he said.\n\n\"Huh,\" I muttered. \"You'll get sick that way.\" I've never understood how foreigners can sit and drink on an empty stomach. It seems crazy to me. \"You need to eat something.\" I handed him the menu. It had pictures to go with the simple Japanese, so I thought he'd be okay with reading it.\n\nHe stared at it for a while and then handed it back to me, his eyes apologetic.\n\n\"Uh, I can't seem to decide. Can... can you order for us?\"\n\nI blinked at him. No one had ever asked me to order for them before. I ran my eye over the menu and chose a few things I thought a foreigner might like: a selection of yakitori, fried chicken and a seafood salad. I ordered raw cabbage with miso paste dip and some battered oysters for myself.\n\n\"Just to start with,\" I told the mama-san. \"I'm pretty famished.\"\n\nShe smiled and retreated out back.\n\n\"I ordered you a seafood salad,\" I told the boy. \"You look like you need the vitamins. You're okay with raw fish, right?\"\n\nHe nodded.\n\nWhile we waited for our food, I asked him about himself. He was the usual type of kid we get as tutors: just finished an undergraduate degree and wondering what to do with their lives. He was also the shy, na\u00efve type that seems to be attracted to Japan for some reason. He liked anime and manga and stuff like that. Odd that even the most normal-looking foreigners are often into otaku stuff.\n\n\"Look,\" I said. \"Try not to mention you like that sort of thing to girls, okay?\"\n\nHe blinked at me. \"Why's that?\"\n\n\"Well, usually the only kind of guys that have anime and manga as an interest are otaku. You know what the word means, right?\"\n\nHe nodded. \"Oh. Maybe that's why Rika didn't like me talking about it.\"\n\n\"Rika?\"\n\n\"My girl- uh, ex.\" He grimaced and his eyes grew moist as if he was about to burst into tears.\n\nI felt kind of bad that he was upset, but on the other hand, his vulnerability was... well, it was titillating. I guess I just have a little streak of sadism in me. A boy crying does strange things to me. I get worked up, wanting to comfort them but also tease them more. I usually keep it under control. I am kind of ashamed of it. I guess somewhere along the line the maternal centre of my brain and the reptilian, aggressive part got their lines crossed.\n\nI smiled at him and reached over to touch his hand again, the nurturing 'big sister'. His hand was really soft, slender, almost girlish in a way. I wondered what it would feel like caressing my body.\n\nMy face grew hot, the smile I directed at him a little too sultry, so I took my hand away. I should have said something mollifying then, some big-sisterly advice about forgetting all about the girl. Instead I didn't want those teary eyes to go away.\n\n\"Figures,\" I said. \"What is it with girls called Rika?\"\n\nHe looked across at me, his red eyes questioning.\n\n\"Well,\" I said. \"It's just that I've never met a single nice Rika in my life.\"\n\nHe closed his eyes, then. \"She seemed nice. I thought she liked me,\" he whispered. \"I was just happy that I'd finally met someone who liked me.\"\n\nWhen he sobbed I knew I'd gone too far.\n\nHis eyes flashed open in surprise when I put my hand on his and stroked it. \"Hey, there's no need to cry. I guarantee she's not crying over you. Don't give her the satisfaction.\"\n\nHe sniffed and nodded. He glanced across at me and I smiled my brightest, most nurturing smile at him. His face went pink and he managed a weak smile back and rubbed at his eyes.\n\nCaressing his hand was doing a far better job of distracting him from his broken heart than my words were. He kept stealing glances at me. He wanted to look me in the eye whenever I was talking to him, but looking at me was also making him nervous.\n\nI finished my beer. It did nothing to cool me down. \"Shall we order something else to drink?\"\n\nThe boy nodded. Then his face fell, \"Uh, actually I don't l have much money on me at the...\"\n\nI chuckled. \"I'm older than you, so it's my treat. Japanese custom. So what would you like?\"\n\n\"Um, can you decide for me?\"\n\nHe was pretty indecisive. I took up the menu. \"Well, let's have some rice wine then. Mama-san!\"\n\n\"Yes?\"\n\n\"Do you have Bishounen?\"\n\n\"Of course,\" she replied. \"Just a moment.\"\n\nA few moments later the mama-san came out with two glasses in little wooden boxes.\n\nThe boy stared at the box in front of him.\n\n\"They're pinewood,\" I said. \"They're supposed to catch any sake that spills when it's getting poured. They make the sake taste nicer, too.\"\n\nThe mama-san lugged a huge bottle up and poured the golden liquid into the first glass. It quickly overflowed and the boy gasped.\n\n\"Don't worry, that's supposed to happen,\" I told him.\n\nThe mama-san smiled and kept pouring until the sake filled the little box as well up to the rim, then did the same for my drink.\n\n\"Dai-saabisu,\" I said. I glanced at the boy whose eyes were still wide from the spectacle. \"It means 'extra-generous'. Saabisu is from English but I don't think 'service' really makes that much sense when you translate it.\" I nodded to the mama-san. \"Could you leave the bottle please?\"",
        "\"Please enjoy it at your leisure,\" she replied.\n\nThe boy glanced at me, unsure.\n\n\"Like I said, my treat. Merry Christmas and all that.\"\n\nHe smiled shyly.\n\n\"Kampai!\" I said, leaning down to drink from the glass while it still sat on the table. The boy watched me.\n\nI wiped away the sake moustache and licked a finger. \"It's the only way you can drink the first bit without spilling it,\" I said.\n\nHe did the same and licked his lips. \"Wow. It's really good!\"\n\n\"You have to be careful, though,\" I said. \"Rice wine is pretty strong.\"\n\nAfter that we clicked our dripping glasses together in another toast. Soon after the mama-san arrived with our food. Everything proved delicious.\n\nAs expected, the boy had trouble using his chopsticks.\n\n\"Are you drunk already? I teased, amused as he made another abortive attempt to pick up a piece of fried chicken. \"You really should pace yourself.\"\n\n\"Oh, no, no,\" he said. \"I'm just not very good at using chopsticks.\"\n\n\"Here,\" I said, putting my own chopsticks back on my bowl and leaning across the table to take hold of his hands. \"You're holding them wrong.\"\n\n\"I am?\" He stared down at our hands as I repositioned the chopsticks.\n\n\"Yeah,\" I said. \"That's the way little kids hold them.\"\n\nI soon took him through a practice run, my hand still on his. We picked up the chicken together and brought it over to his bowl.\n\n\"Just remember,\" I said. \"Your bowl is your base of operations. All the food from other dishes have to at least touch down on it before they go in your mouth. You can't just shovel stuff straight out into your mouth like a barbarian.\"\n\n\"Oh,\" he said.\n\n\"Rika never taught you about this sort of thing?\"\n\nHe shook his head. \"We always went to Western places.\"\n\n\"I see.\" I helped him take the chicken off his dish and was lifting it part way to his mouth when I let go of his hand.\n\n\"You do it the rest of the way.\" I told him. \"You don't want me feeding you, right?\"\n\nHe didn't reply. He was too busy wrestling with the chopsticks and trying to keep the chicken between the pointed ends. He managed somehow and got the morsel into his mouth.\n\n\"It's good!\" he exclaimed.\n\n\"Well, the struggle makes it taste better,\" I said.\n\nHe put down the chopsticks and sighed. \"You're right.\"\n\n\"What about?\" I asked.\n\n\"Rika was only going out with me because I was a foreigner.\"\n\n\"Hey, don't worry about it,\" I said. The nurturing side of me was winning and I regretted my earlier cruelty. I lifted the second half of a battered oyster to my mouth. \"How long were you going out for?\"\n\n\"Three weeks.\"\n\nI pulled the chopsticks from my mouth. I chewed on the delicious morsel and swallowed. Three weeks. Tears after three weeks.\n\n\"Three weeks, huh.\" I sighed. \"You should try three years.\"\n\n\"Excuse me?\" He lifted his eyes from where he was struggling to catch a slice of raw salmon from the salad.\n\n\"Three years,\" I said. I knew he didn't really want to hear about my problems, but I was already talking so I kept going. \"I was going out with my fianc\u00e9 for three years when he broke up with me.\"\n\n\"When did that happen?\" he asked.\n\n\"A week ago.\"\n\n\"I'm sorry,\" said the boy, frowning. He really did feel sorry for me, the adorable creature.\n\n\"Well,\" I said. \"It was my fault. I shouldn't have let things go on like they did for so long.\" The boy was still listening, so I kept talking. \"I mean, I started to badger him about getting married. We'd been engaged for two years and it felt like things were going nowhere.\"\n\n\"What was his name?\"\n\nI blinked. \"Kazuo,\" I said.\n\n\"Kazuo,\" he murmured, still fishing at that slice of raw salmon with his chopsticks. \"Figures. I've never met a single nice guy called Kazuo in my life.\"\n\nI stared at him, but his eyes were glued to the salmon. He finally snared it and held it up in triumph, grinning at me.\n\nI felt my pulse quicken. I'd been in a tense state all night, even back at the end of year party. The rice wine had gone straight to my head and was making things worse. And now, with that tell-tale melty feeling below my waist, I knew I was going to do something stupid, something risky.\n\n\"Hey, you said you're learning Japanese, right?\" I said. \"Let me give you a quick lesson then. Scoosh over a sec.\"\n\nI stood up and moved across to his seat. His eyes went wide with surprise but he quickly sat aside to make space for me. I leaned across him and pointed to the sake bottle. \"You can read a few kanji, right? Can you read this? I know it's in cursive, but it's neat.\"\n\n\"Well,\" he said. I admired his willpower. My cleavage was right in front of him and his eyes didn't once leave the bottle. \"The first character means beautiful, right? Goat with big written underneath it.\"\n\n\"You're right, it is,\" I said. You often forget what a character is made up of when you see the words every day of your life.\n\n\"And the second one I think means small.\"\n\n\"Few, actually,\" I said. \"Sukunai. How about the last one? It's easy.\"\n\n\"It's year,\" he said.\n\n\"Well done!\" I exclaimed. \"So we read it bi-shou-nen.\"\n\n\"Isn't the first character -mi?\"\n\n\"Well, sometimes,\" I said. \"Like in my first name. Mi-eko. But here's it bi.\"\n\n\"Oh.\" He furrowed his brow.\n\n\"So have you guessed what the word means?\"\n\n\"Beautiful-few-years?\"\n\n\"Haha,\" I said. \"That's what makes Japanese so difficult. Shounen - few years - actually means 'boy' or 'young man'.\"\n\nHis eyes lit up. \"Oh, like Shounen Jump.\" It was a monthly manga magazine for boys.\n\n\"Yeah,\" I said. The kid really was a bit of a geek, wasn't he? \"So altogether it means 'beautiful young man'.\"\n\n\"Oh,\" said the kid.\n\n\"It's a cute name for rice wine,\" I said. Was he going pink again? \"Whenever I order it I always imagine I'm at one of those host-clubs.\"\n\nHe blinked. \"A host club?\"\n\n\"You've been to Kabukichou in Shinjuku, right? Did you see all those posters with the young guys on them?\"\n\n\"What, those posters with the guys with long hair?\" He drew his hands down from his head to his shoulders. \"Kinda girly, like the talents from Johnny's?\"\n\n\"Yeah, they're advertisements for host clubs. Basically, a middle-aged woman like me goes there and pays some money to have a beautiful young man serve her drinks and talk to her and show her attention and that sort of thing...\"\n\n\"Oh,\" said the boy. \"I think I've heard of them.\" He looked thoughtful and then took another drink. \"H-have you ever been to one?\"\n\nI laughed out loud. \"What? Oh, no. Even if I had I wouldn't admit it. It's shameful.\"\n\nBut wasn't that more or less what I was doing now? I felt a sting of shame at what I was doing, but I knew I wasn't going to stop. In half an hour, the attention I'd got from this kid had made me happier than I'd been in years.\n\nI was thankful for him, then, calling me away from that party. In this kind of state I would have ended up taking someone home. I probably would have ended up with that moron Hideyuki. Well, it was his loss. Screw him and his warmed-over high-school heart-throb looks. Less than two weeks after I'd broken up from a three-year relationship and he was already well on the way to working me. Lingering at my desk at work, mock-shy glances during meetings, calling me Mi-chan...\n\nAnd screw Kazuo as well. All those years wasted. So I was 33 now. I was still young, really. Look at this kid beside me. I knew the scent of my body, its closeness was doing things to him. He kept glancing at my cleavage: those push-up bras really do work wonders. Making young guys horny wasn't exactly a challenge, I knew, but right now it was what I needed. I was still feeling bruised. I needed someone to look at me the way this kid was right now. His naivety and sensitivity delighted me.\n\nThe boy finished his drink and stared at the glass. With me beside him he was finding it difficult to find new places to direct his eyes.\n\nI took the bottle and freshened his drink. When I started to do the same to my own he protested.\n\n\"I should pour it for you,\" he said.\n\n\"Oh no!\" I said, mock-scandalised. \"Then I really will feel like I'm at a host club.\"\n\nThe boy was flustered but did a pretty good job pouring the drink, considered. It only just overflowed.\n\n\"Whoops.\"\n\n\"Dai-dai-saabisu,\" I joked. \"It takes a bit of practice.\" I brought the drink to my lips. \"Delicious. I'll finish this one off and you can try again.\"\n\nDrink followed drink. The kid got better at serving them. We were soon laughing and joking like old friends. Whoever invented alcohol should have got the Nobel Prize. I knew I'd regret drinking so many in the morning. You always end up tasting rice wine all the next day and every taste is a brutal reminder of how it's your own fault your head is throbbing so much you want to throw yourself under a train.\n\nI knew I'd probably regret a few more things as well. The mama-san was no doubt observing us discretely from the corner of her eye as she watched TV behind the counter. I knew my every movement was utterly transparent to everyone except the kid himself. He kept treating me with respect, deferring to my opinions on everything we were talking about: nuclear power, Japanese TV, the existence of aliens, whatever. I was still his superior, even if I was becoming increasingly incoherent and kept thrusting my boobs at him.\n\n\"...so yeah, Japanese people don't really have an ego as such,\" I said, warming to my subject: cultural differences between the East and West. \"For us, it's all just superego or id. Superego when we're at work, id when we're at play. Whereas you guys are always policing everything you do or think, even in private. I mean, that whole guilt thing. I understand feeling guilty if you've done something wrong, but why should you feel bad about something you might do? Or something you're just fantasizing about doing?\" I took a sip of my drink. \"Haha. You can tell I'm a psychology dropout, right? No money in it. Everyone in this country just bottles everything up or hits the bottle.\"\n\nThe kid swirled his drink around and laughed.\n\n\"You don't have to laugh at my jokes just because I'm your sempai,\" I said, serious.\n\n\"No,\" he replied. \"I... I was laughing because you're right. We're always overthinking everything we do. I think it's a Christian thing. It's probably why everyone is so screwed up.\"\n\n\"Oh, please don't take it as a criticism,\" I said, placing a hand on his shoulder. \"I think you're far more psychologically healthy in other ways. For one thing, you're not a bunch of passive-aggressive man-children like Japanese men.\"\n\nThe kid said nothing and I realised my clumsy, misanthropic apology had just made him more uncomfortable. I finished my drink so that he'd have to repour it and hopefully get distracted from my boorishness while I composed myself.\n\nIt worked. \"So you studied psychology at University?\" he asked.\n\nI took the drink up eagerly. \"Uh-huh. It was my major along with English.\"\n\nHe sighed. \"It must be great to be fluent in two languages.\"\n\n\"Well, I don't know about fluent,\" I said, flattered. \"My English still stinks.\"\n\n\"No, it's excellent,\" he said. \"I've been studying Japanese for years and I still haven't got any good.\"\n\n\"You just need a Japanese girlfriend who isn't obsessed with speaking English,\" I said. I remembered what he'd said about Rika insisting on speaking English with him all the time, even though her English was borderline incomprehensible. \"Your Japanese will be great in no time.\"\n\nThe kid said nothing right away. I had my drink against my lips before I realised he was crying.\n\n\"Damn,\" I said, pulling my drink from my lips and placing it back on the table, spilling it in the process. \"Damn!\" I grabbed a handful of napkins and dabbed at the spilt liquid. I wanted to dab at his eyes and comfort him but I knew that would be taking things too far, so I just kept dabbing, as if cleaning up the spilt sake would somehow absolve me of my thoughtless words. Instead I just ended up soaking the napkins and pushing the liquid around the table.\n\nHe was covering his face with a hand, scrunching his brows in pain. There was nothing else for it. I leaned across and slipped my arms around his shoulders. His body went stiff with surprise.\n\n\"Shh,\" I said, hugging him to me and patting his back. \"I'm sorry. Look, I'm a bit drunk. I'm always saying stupid stuff when I'm drunk.\"\n\nHis body slowly relaxed in my arms. \"No, you're not... it's okay,\" he whispered. He took his hand from his eyes and looked at me, his eyes glistening.\n\nThe moment grew awkward. I either had to kiss him now or stop hugging him. I stopped hugging him.\n\nThat bitch Rika. I hated her more than anything. No one had ever cried tears over me like this. I wanted to cradle his head in my hands, wipe those tears away with my thumbs. Instead I offered him a napkin.\n\n\"I'm sorry I'm such a mess,\" he said. He took the napkin and stared at it, blinking his red eyes.\n\nI'd handed him one I'd soaked up the spilled sake with.\n\n\"Oh shit.\" I searched for more napkins. They were all dripping with sake.\n\nThe kid burst out laughing. I stared at him and then joined in too.\n\n\"I think we should get out of here,\" I said. It was late and we were probably outstaying our welcome. I looked to the mama-san and made the 'writing-the-bill' gesture that meant we were ready to go.\n\nShe brought us the bill with a smile and more tissues.\n\nI took out my credit card. The kid started to protest and I placed a finger against his lips. I left him sitting at the table and wiping his eyes with the tissues while I settled the bill at the counter.\n\nAs the mama-san applied my card to one of those old manual receipt-printers, I leaned across the counter.\n\n\"Uhh, I was wondering if there were any, uh, hotels nearby?\"\n\nThe mama-san looked up at me. I'd expected censure or at least that silent, polite disapproval that older people are able to pull off so effortlessly, but instead I saw a glint of amusement in her eyes.\n\n\"I'll draw you a map,\" she said.\n\nAs we left the little izakaya the mama-san bowed to us with a cheery \"Please be careful!\" before taking in the little sign and closing the door. Halfway down the street, while I was still blinking at the map she'd drawn on the back of a napkin, the street became dark. She'd switched off the lights.\n\nWe really were in the middle of nowhere.\n\n\"Is there really a hotel around here?\" asked the kid.\n\nI took out my phone for the extra light. \"Well, not exactly.\" I raised my phone to his face and he blinked at the sudden brightness. \"You know about love hotels, right?\"\n\nHis mouth opened in surprise. \"A love hotel?\"\n\nHe obviously knew what I was talking about. \"You're never really that far away from one while you're in Japan,\" I said. \"You ever stay at one?\"\n\nHe shook his head.\n\nWell, he did have an apartment, after all.\n\n\"You don't have them in your country, do you?\"\n\n\"No,\" he said.\n\n\"So where do you go if you want to make love to your girlfriend and you don't have an apartment all to yourself?\"\n\nHe was taken aback by my question. \"Well, uh... usually, we just kind of do it there anyway.\"\n\nI was scandalised. \"Even when other people can hear everything?\"\n\n\"Uh... I guess you just try and keep things down. Also, flatmates usually make themselves scarce if they know you, uh...\"\n\n\"What if you're still living at home with your parents?\"\n\n\"Well, you usually just wait until they're out.\"\n\nMy ignorance and surprise was all an act. This was a carbon copy of a conversation I'd had with young foreign colleagues numerous times. In Japan, love hotels are a necessity. Houses are simply too small, and walls too thin, for discrete love-making given the Japanese love for privacy. But I just had to use the opportunity to tease the kid mercilessly. Even in the dark I could tell he was blushing - his stuttering voice told me all I needed to know.\n\nThe thought of his discomfort made my blood run fast and hot.\n\nWe soon found the love hotel. They're not designed to be easily missed, after all. The glary lipstick-pink neon of the hotel's sign beckoned to us at the end of a darkened suburban street identical to every other.\n\n\"Hotel Starry Heart,\" the kid read out as we got closer. The words were surrounded by a red heart and flanked by a set of blinking yellow stars.\n\nI sighed. \"Embarrassing, I know. You don't know how ashamed I was when I'd learned enough English to realise how bad Japanese English really is.\"\n\n\"I think it's a cute name,\" he said. \"But is it really okay for us to stay at a, uh...\"\n\nI stopped and smirked at him. \"Worried something might happen?\"\n\nHis face turned to a mask of shock. \"No-o, I just...\"\n\n\"Well,\" I said. \"They're still just normal hotels, beneath all the gimmicky theme-rooms and silly names. And right now it's either stay at one or sleep in a paddy field.\"\n\nThe kid nodded, defeated, and followed close behind as I led him inside the hotel.\n\n----\n\nWe stood in front of the display, the photo of each room flanked with a little button. The occupied rooms were all blacked out, but there were a number of rooms still available.\n\n\"Anything catch your eye?\" I asked the boy.\n\nHe looked at each of the photos. I knew he was not very good at making decisions - he'd shown that numerous times over our little impromptu dinner - and I was enjoying making him squirm.\n\n\"There are so many to choose from,\" he murmured. \"Why aren't they all booked up? It's Christmas eve, right? Wouldn't lots of couples want to, uh...\"\n\n\"Well,\" I said, charmed by his embarrassment. \"There's a very simple reason behind that. See the different prices for Rest and Stay?\"\n\n\"What does Rest mean?\"\n\nI chuckled. \"It's when you only use the room for a couple of hours. Once you've, haha, enjoyed your 'rest' you can just up and leave. You don't have to make believe you're staying at the hotel to get a good night's sleep, although you can do that too, of course.\"\n\nThe boy blushed. \"So most people have already had a uh, 'rest' and gone home?\"\n\n\"You catch on quick.\" I sighed. \"Seems like no one wants to stay in bed and snuggle afterwards. That's Japan for you - rush, rush, rush. I'm guessing foreigners would be more into the whole 'stay' thing, right? What with your relaxed attitude to everything...\"\n\nHe nodded. He agreed with everything I said, even when he was living proof my generalisation about foreigners was wrong. It was adorable.\n\n\"So,\" I said. \"Are you going to pick one or are we going to have to spoon up here together in the foyer?\"\n\nAt the word 'spoon', the kid swallowed and darted forward, picking a room at random.\n\n\"Well, let's go get our key.\"\n\nI pushed the money at the disembodied hands at the counter. The rest of the attendant was shielded from us in deference of our privacy, but I could tell from the pronounced veins they were an old woman's hands. I chuckled to myself. It seemed my reckless behaviour was being enabled by older women tonight.\n\nI led the kid into the elevator which was waiting for us. We of course met no one. There was a different exit provided for those leaving, allowing them to enjoy their post-coital glow without the potential embarrassment of running into someone else.\n\nI walked fast, with an almost unseemly eagerness. The kid hurried to keep up with me, always staying a step behind like a little shadow.\n\nWe soon found the room. Apart from the slight ghost of cigarette smoke it was a pleasant enough room. The room was dominated with a huge bed with an array of buttons on its headboard. There was a big flatscreen on the wall for watching pink videos, and a little bar fridge. I ducked my head into the bathroom and whistled.\n\n\"Look at the size of that tub!\"\n\nThe kid poked his head in beside me. \"Wow,\" he said. I knew he was genuinely impressed. The bath was the size of a Jacuzzi. Japanese people love their baths and the bigger the better.\n\n\"You could fit almost all of Eastport's management team in that one tub,\" I mused. \"It seems a waste for just the two of us.\"",
        "The boy nodded, but when he realised what I'd implied he gasped and moved away. I was too close to him, within boob-brushing distance, and it was obviously making him nervous. I knew he could smell me. I wondered if he could smell how excited I was? Since the whole thing with him bad-mouthing Kazuo I'd been walking around in sticky underwear. I was probably soaking inside them, now. I leaned across him, ostensibly to check out the toiletries on the sink, but really I wanted to smell him.\n\nHe'd lost that sour-milk smell foreigners sometimes have, if in fact he'd ever had it. The Japanese diet was already working on him. But he smelled different, somehow. It was a nostalgic smell.\n\nThen I knew. He was wearing a sports deodorant. He was still a kid and didn't wear aftershave or anything like that. It was a smell I remembered from over a decade ago. The boys would walk around in a haze of it after baseball practice.\n\nAnd yet the scent wasn't overpowering. The kid also smelled of that delicious male spiciness, a mixture of perspiration and, well, hormones I guess. I love that smell. I could almost taste it.\n\nI knew it would smell even better after a shower.\n\n\"So would you like to take a shower first or should I?\"\n\nHe stared at me.\n\n\"Oh, I was just joking about sharing a bath, unless you want to, of course.\" I jogged him in the ribs and he skittered laughing away from my elbow. \"Well, I'll take the first then.\"\n\nHe nodded and I shut the door before quickly reopening it. He hadn't had time to move, and I behaved as though I'd caught him up to no good.\n\n\"You're not going to peek on me are you?\" I asked with narrowed eyes.\n\n\"What? N-no,\" he replied.\n\n\"Good. These doors don't lock after all.\" I pointed at the bed. \"Just amuse yourself with the control panel. It works the lights and TV and everything.\"\n\nI shut the door. I quickly stripped out of my clothes. I heard music in the other room. The kid was already doing what I told him. The thought of him sitting on the bed there while I was almost naked here, just a room away, made my heart race. For a second I toyed with the idea of just walking out of there in my bra and panties and grabbing him. The little movie played out in my head: the look of wide-eyed shock on his face, the way he'd be unable to take his eyes off me, how he'd scramble backwards when I climbed onto the bed and advanced on him, that first touch as I grabbed his hand and pulled it to my heaving chest...\n\nI gasped. I was starting to flood. I stripped my underwear off. They were soaked. Great. Now I'd have to wear dirty underwear on the way back tomorrow. At least there was a bathrobe for me to wear in bed. I wished that there'd been yukata as there sometimes is in Japanese-bath themed love hotels, but I'd have to make do.\n\nI scrubbed my face of my makeup and then dove under the steaming waters of the shower. It was hot and delicious. I gave myself a quick but methodical wash. I was just as sticky as I'd expected between the legs. Gross. I decided to skip washing my hair: there was no way I was going to put the kid through half an hour of me drying it. Anyway, you can never gauge the heat of the dryers they have in these hotels: my hair could end up frizzed to hell.\n\nI got out as quickly as I could. I didn't want to keep the kid waiting for his own shower, and also I wanted to play with the toiletries provided. The moisturiser was a bit oilier than I liked and I missed my night cream, but of course I hadn't brought my night bag with me so I put up with it.\n\nBoys. Things are so much easier for them. The kid was just going to come in here, throw off his clothes and then soap himself all over, rinse and get out. He wouldn't care about moisturiser or anything like that. Maybe he'd try on the after shave. He didn't need to shave, though. He didn't even have a five-o'clock shadow! He really did have a nice complexion. It was like a little boy's. And his hands had been so soft and smooth...\n\nI squeezed my thighs together. The hot water of the shower had been bad enough, but now, with my imagination going wild...\n\nI looked myself over in the mirror. The patchiness of my complexion dismayed me, but it was better than smearing the kid with old makeup. I didn't look all bad. My cheeks were pink and my eyes were large and dark. I looked exactly how I felt: turned on. The extra blood flowing to my flushed face minimised the smile wrinkles I knew were hiding there. I didn't look too closely, though.\n\nMy body was pink, scrubbed fresh, lightly steaming from the heat of the shower. I held my breath: my breasts looked perkier that way. I ran a hand over my sucked-in stomach: the little after-dinner curve disappeared.\n\nI slipped my bathrobe on and let my breath explode out.\n\nGood. I was ready.\n\nI looked back at the mirror. That face. Whose was it? Nakagawa Mieko, middle manager for an English tutoring company? Mieko? Mi-chan? And who was she, exactly? The kid's teasing but supportive sempai? A boy-hungry predator?\n\nA stupid, reckless woman.\n\nThose eyes were wide and dark and hungry, but they were fragile, too. The light in them seemed on the point of breaking.\n\nThat bastard...\n\nIt was the kid's fault, really. He called me out here. He was the reason I was so worked up. He couldn't expect me to just lie there in bed with him and do nothing. He owed me.\n\nI sighed. I knew I wasn't going to do anything. We'd lie together in that huge bed, a wide gap between us, make some awkward, flirty conversation and then go to sleep. We'd wake up tomorrow, hung-over, for some even more awkward looks and words before slinking back to the train station and going our separate ways.\n\nI opened the door. \"Your turn.\"\n\nThe kid swung to look at me, shock on his face. The remote flew out of his fumbling hands. I followed his horrified gaze. The TV was on but the sound was off and there was a girl in a schoolgirl's uniform on all fours, her skirt pulled up, betting pummelled from behind by some faceless tanned gentleman.\n\n\"Oh,\" I said. \"I see you found the movies, then.\"\n\nThe kid babbled, horrified. \"Uh, I...\"\n\nI laughed. \"Oh c'mon. I know what boys are like.\" I leaned over and picked up the remote. The kid was staring at me. Oh yeah, my boobs. My bathrobe had fallen open.\n\n\"Hey,\" I murmured, covering up. I glanced at him askance. \"Oh, well at least these ones aren't pixelated.\"\n\nThe kid smiled awkwardly then grabbed his own bathrobe and fled into the bathroom.\n\nI slumped onto the bed and pushed my face against the pillow. You idiot! Falling out of your robe, making goo-eyes at him.\n\nPixelated? Stupid. They don't pixelate boobs in pink videos, only genitals!\n\nI turned and looked up at the girl on the TV. She'd been flipped onto her back now and was being lustily ploughed, squealing like a stuck pig the whole time. She was pretty chubby above where her skirt was all bunched up. Probably puppy fat. How old was she, nineteen, twenty? I pinched myself around the waist. All those hours on the treadmill seemed to have done something to my love handles, at least.\n\nI turned off the pink movie. Somehow the girl's squawking and the man's single-minded penetrating of her depressed me.\n\nI heard the shower shushing. There was soft padding and slapping. The kid was washing himself.\n\nThe sounds were like liquid Viagra. After a while I had to cover my ears.\n\nI was so horny it was embarrassing. The alcohol, the kid's smell left on the bed, this whole being stuck together in a love hotel...\n\nMy hands slipped inside my bathrobe and slid down along my stomach.\n\nNo. I couldn't. Not here, while he's...\n\nBut it would be the only chance I got. Otherwise, it would mean a whole night of agonising frustration.\n\nI could always do it in the toilet if...\n\nWhat? The kid was na\u00efve, but even he would be able to tell something was going on. There was no way I'd be able to keep quiet enough.\n\nThe shushing stopped. I grabbed a menu and leaped into bed.\n\nI was still acting like I was reading it when the kid slipped out of the bathroom. He was wearing his bathrobe, but I knew his underwear was on underneath. His pants, shirt and tie were all neatly piled in his arms.\n\nI glanced at my own badly-folded clothes. Luckily I'd had the forethought to place my undies in between the skirt and blouse. I'd have loved to have been able to wash them, but there was no way they'd get dry by the morning.\n\n\"Feeling refreshed?\" I asked.\n\nThe kid couldn't meet my eyes and just nodded.\n\n\"I... I'm sorry about before,\" he murmured. \"Ah, about everything, actually.\"\n\n\"What? The movie?\" I laughed. \"Hey, least I know you're not gay, now.\"\n\nNot gay. Nice work, Mie. Brilliant. What every boy wants to hear: \"I thought you were gay.\"\n\nI patted the bed beside me. He stared for a moment and then hesitantly came up to the bed and stood there, shifting from foot to foot. The whole situation was getting even more awkward.\n\n\"Hey,\" I said. \"Could you get something to drink out of the little bar fridge? They should have some rice wine and beer and stuff. Care to join me for a nightcap?\"\n\nHe nodded, and even managed to glance up at me. Thank you alcohol! I had no idea you could save an awkward situation even without being drunk.\n\nThe boy opened the fridge and after fumbling around a bit brought out some rice wine.\n\n\"Good choice,\" I said.\n\nThe kid was blushing.\n\n\"What's wrong?\"\n\n\"Oh,\" he replied. \"It's just the... uh, other stuff in the fridge. I didn't realise they'd have that sort of thing here as well.\"\n\nOh yeah, right. I'd forgotten. The sex toys. Love hotel minibars are always full of them. \"The 'personal massagers' and stuff?\" I chuckled. \"Silly, isn't it? The way I see it, if you need something like that to get your girl worked up you probably shouldn't be at the love hotel in the first place. \"\n\nI was starting to sound boorish so I shut my mouth. But somehow the exchange had melted the awkwardness. The kid got two tumblers and then we sat on the bed and toasted each other.\n\nAfter taking a sip he shook his head and placed a hand to his forehead.\n\n\"Nakagawa-san, I'm so sorry. I really screwed up your Christmas eve,\" he said. \"Please. You have to tell me how much I owe you for dinner and...\"\n\nI snorted. \"C'mon. I already told you, it's my treat.\" I took a sip of the overpriced rice wine. Hakutsuru, the one with the crane on the label. You could buy it for 450 yen at any convenience store. This one had set me back 1000 yen, I was guessing. \"Anyway, this is the best Christmas Eve I've enjoyed in years.\"\n\nThe kid took another sip of his drink. \"Really?\"\n\nI thought to myself. I wasn't just saying that to make him feel better. This really was the most fun I'd had on Christmas Eve since, well, maybe ever.\n\n\"Really,\" I said. \"Kazuo was never really into romantic gestures and stuff like that. We usually stayed at home and watched TV and ate KFC.\"\n\n\"I've heard about that,\" said the kid. \"Uh, about the KFC for Christmas thing, I mean.\"\n\n\"Strange, huh? Just another crazy Japanese tradition...\" I laughed. \"You must think we're all crazy here.\"\n\nThe kid shook his head, smiling. \"No. I don't think so. I mean, things are so different from back home, but I like it here. I think my country is crazier in a lot of ways.\"\n\n\"Is that so?\" I asked. \"I'd love to visit there someday. You'll have to show me around.\" I took another sip and poured myself some more. The kid's tumbler was looking empty so I finished the bottle off in his.\n\n\"I'd like that,\" he said.\n\n\"Maybe I can get bring myself back a foreign boyfriend,\" I said. \"I don't seem to be having much luck with Japanese ones.\"\n\nThe kid glanced across at me. \"Nakagawa-san, have... have you ever gone out with a foreigner?\"\n\n\"What?\" I blinked at him. \"No, no I haven't. The most exotic guy I've ever gone out with was a guy from Osaka. And don't believe what they say about everyone from Osaka being funny - he was just an asshole.\"\n\nMy boorishness was coming out again, so I quickly said, \"Hey, while we're on the subject, there's something I've been meaning to ask you all night.\"\n\n\"What's that?\" The kid seemed happy with the change of direction of the conversation.\n\n\"Well, you've been with a Japanese girl now, right? So how do we compare? With girls from your country I mean. Are there many differences?\"\n\nThe kid stared at me. He went beet-red. \"Ah, I don't know if I can answer that.\"\n\nI realised then what a forward thing it was I was asking. I'd forgotten all about who we really were: a manager and her responsibility. A few drinks and I was treating him like someone I'd just met in a bar.\n\nHadn't I been doing that all night?\n\n\"Sorry,\" I said quickly. \"Too personal, right?\" I kicked myself. How sleazy and desperate must I seem to this kid? I should have just plopped my bare boobs in his face and started pawing at him, it would have been more subtle. I knocked back the rest of my drink and started eying off the beer the kid had got out as well. A few more drinks and maybe I'd wake up tomorrow having forgotten about all of this.\n\n\"N-no,\" said the kid. He'd taken a while to reply and I was surprised when he did. \"It's just... ah, I can't answer your question because I've... uh, I've only ever been with one girl.\"\n\nI frowned. \"What? You mean Rika?\"\n\nHe nodded, smiling shyly. \"Yeah. She was my first... uh, first girlfriend I mean. But not my first, well... you know.\"\n\nI stared at him. \"You mean the two of you never actually...?\"\n\nHe shook his head. \"We did some other stuff, but we never actually went the... well, the whole way, I guess you call it.\"\n\nThe kid's smile was a mixture of shame and embarrassment and humility and utterly charming. Just what you'd expect from a virgin.\n\nA virgin. I looked him over again as if seeing him for the first time. He really did look young. The mama-san hadn't been overreacting when she'd been worried he was underage. With his hair wet and slicked back, his skin pink and shower-fresh, he seemed especially childlike.\n\nThat earlier tension. It had never gone away. It revealed itself again with redoubled force. It was too much for me, now. I was naked under this bathrobe and I could feel myself getting gooey. There was no way the kid couldn't smell me in this condition. The thought of him knowing how excited I was made me even more even more excited.\n\nI could just reach across to the kid - he was in grabbing distance. Maybe that whole thing about shoving my boobs in his face wasn't such a stupid idea after all.\n\nWait, no. Mie, focus. You've been drinking, remember? Think before you do anything...\n\nThe kid was focussed on his drink. His eyes flickered in my direction. I had been staring for a few seconds now, in total silence. You fool! He thinks you're horrified. Say something!\n\n\"A virgin, huh?\" I put my drink down on the bedside table. \"Well, we'll have to fix that then, won't we?\"\n\nThe words were out before I really knew what I was saying. The kid stared at me, his eyes wide. He was shocked and confused and terrified and excited all at once.\n\nI knew what I had to do. I had to laugh and act like it was a joke. I had to laugh and then the kid's heart would be broken and we'd lie down in this bed and go to sleep and wake up and go our separate ways and I'd have a lot less money this month in my budget, but I did say I'd treat him and...\n\nAnd nothing would change. Nothing.\n\nI didn't laugh. I leaned forward and kissed the terrified boy on the lips. He flinched - he actually flinched! - but when I took hold of his shoulders to keep him from escaping he pushed his lips back against mine. I darted the softest little subtle tap of my tongue against his lips before I broke away. I didn't want him to think this was some auntie-nephew kiss, some chaste little peck. I promised more, if he was brave.\n\nHe lay back, blinking at me. I smiled my most reassuring smile at him as he lifted his fingers to his lips.\n\n\"Wow,\" he said. \"Uh...\"\n\nHe was lucky I had such a thing for flustered, vulnerable boys, or otherwise that look of fear and bewilderment on his face might have ended everything with some other girl, with someone like Rika. Some women are afraid of virgins, after all. But for me it was a potent aphrodisiac.\n\nI brought a hand to the front of his bathrobe and flicked it open, baring his chest. There was a little hair there, more than a Japanese guy's, but his skin... it was so pale. He was slightly tanned on his neck and arms and legs, but here, under his bathrobe, his skin was white, like a girl's skin. I ran my hand across his smooth skin and he closed his eyes and sighed.\n\n\"Yes,\" I muttered. I don't know what I meant by that 'yes'. Was I telling him he was consenting, or was that 'yes' intended for me, telling myself that I wanted this? His skin shivered under my touch. I grabbed the hem of his bathrobe and pulled him across to me. He still had his drink in his hand and he spilled a bit.\n\n\"Oh shit,\" he said.\n\nI tutted and took the drink from him. I downed it and placed the empty glass next to mine on the bedside.\n\n\"You know,\" I said. \"It's bad luck to spill sake unless you're intending to do it as an offering.\"\n\nI brought my lips up against his again. He was calmer now, so I took my time, enjoyed the sweet, liquory scent of his breath as I mouthed his bottom lip between my own. The kid actually gasped. Was he doing this on purpose? Was this whole innocence thing a come-on? Was he playing me?\n\nNo. He was no host-club boy, trained in pushing a woman's buttons. This kid was the real deal, a real honest-to-god virgin, and it was my hand that was sliding between the cotton of his bathrobe and his skin, across his chest, over his hard nipples and down his slim ribs to his flat stomach. And all the while I kissed him, hard, coaxing his timid tongue out of his mouth to play with the tip of mine.\n\nAt least the kid wasn't a virgin when it came to kissing. He must have done it at least a few times before.\n\nThe thought filled me with sudden jealousy and I kissed harder. I wasn't going to lose against those other girls! I'd show him what a Mie, what an old piece of Christmas cake has over a Rika...\n\nI left him gasping. I guess I overdid it. But the kid was quickly becoming a shivering, sloppy mess.\n\nI liked it. I didn't want to slow down. I pulled the bathrobe from his shoulders, revealing more of his skin.\n\n\"Ah, Nakagawa-san...\"\n\n\"Shhh,\" I said. \"Call me Mie.\"\n\nI drew my lips, then, across his shoulder. His skin was smooth and cool as I traced his collarbone.\n\n\"So white,\" I murmured. \"A soft, naked body. It's been too long.\"\n\nI noticed then his arms were still hanging at his sides. He was too timid to touch me. I took hold of one hand and brought it to my neck. His fingertips brushed my skin and then he began to caress me. I cooed under his timid, tentative strokes. His inexperience was turning me on far more than some lothario's well-worn skills ever could.\n\nKazuo. Those hands had been good at whatever they touched. Shame he couldn't keep them off other women. I'd been willing to ignore the first few times I'd discovered his little things on the side. He'd get over it, I thought. But he never did. And now one of them was fucking him, no doubt, probably in a love hotel just like this one.\n\nFuck him. Fuck Kazuo. Fuck him for making me remember him even while I have this panting, delicious ice-cream-skinned kid, this boy drawing his fingers across my skin, cupping my breast...\n\nIt was my turn to gasp, then, as his fingers found a nipple. At least he knew what they were for! His other hand found its courage and soon he was cupping my breasts as I shrugged my bathrobe off my shoulders and let my breasts hang free.\n\nLike I said, they're modest, but when you're leaning over, even modest breasts seem pretty impressive. And the kid had a handful of them.\n\nHis touch was gentle, sensitive and eager rather than rough. He didn't just squeeze my breasts like a lot of guys do. He knew that places other than the nipples brought pleasure as well.",
        "Nipples. I kissed across the hair of his chest. I love a man's chest. There's a scent of him that pools there, that spicy earthiness of perspiration, and even a freshly washed man has it. The boy's smell was light, but it intoxicated me. I licked at his skin then, tasting salt and his body, and then latched my lips around a nipple.\n\nHe cried out, then. His voice was high, excited and utterly adorable and I smirked around his nipple as I gave it my best tonguing. I wanted to please this kid fully. I was going to be his first, after all. I was the woman that he'd compare all his other women to. I was the one he'd think of, in the darkness of the night, as he lay next to his wife, remembering how he'd finally lost his virginity. I'd fuck him until he forgot about that bitch who made him cry. He'd never even remember her name. But he'd remember me, remember Mie, kind, loving, gentle Mie...\n\nThe thought drove me wild and I bit down.\n\nHe cried out then. Had I taken things too far? I licked at his nipple, bathed it in my saliva as though trying to heal it. He moaned and crushed my head to his chest.\n\nI knew then that I hadn't misread things. He was a boy who wanted a girl to take control, to teach him, to lead him...\n\n...and to take him.\n\nI pushed him back onto the bed and clambered on top of him. I was bare from the waist up, the bathrobe pooling around my hips. I helped him pull his arms out of his own bathrobe, leaving him in the same situation, except for the fact that he was still protected by his underwear. I glanced down. Beneath my bare pink belly and the dark hint of my pubic hair I saw he was wearing boxers. I could feel the sizeable hard bulge in them and it pleased me. I straddled him, arching my back to make sure he got a good view of my boobs and my flat stomach. I tossed my tousled hair like some sultry pink-movie actress and smiled down at him.\n\n\"Well, it seems you have me at a disadvantage.\"\n\n\"Wha-?\"\n\n\"You're still in your underwear and I'm totally naked.\" I shifted what remained of the bathrobe's tenuous hold on my body with a flick of my hips and tossed it aside.\n\nHe stared up at me, his eyes wide. I'd had my fill of that bewildered look and wanted to see more of the desperate, cornered horniness I had seen earlier. I leaned down and kissed him as my hands busied themselves with pulling his bathrobe off him. He helped me by lifting his back and I soon had him in only those offending boxers.\n\n\"So soft and smooth,\" I murmured, kissing my way down from his sopping lips and along the arch of his neck, the curve of his chest and the flatness of his stomach until I finally encountered the roughness of his boxers' elastic waistband. I reached up and let my fingers score across his ribs as I kissed at the smooth bulge I encountered below that roughness. He groaned and I closed my lips around the hidden shape of his hardness. The scent of him was fresh and intense and exciting. I had to taste him.\n\n\"Did she ever do this for you, I wonder, that Rika of yours?\" I drew my hands down to the waistband of his boxers and peeled them off like I was peeling fruit. I was teasing myself as much as I was the kid.\n\nThe scent of him intensified as he popped free. Even with as many drinks as he'd had, he was impressive. I was flattered and wasted no time in running a hand over his sparse pubic hair and down along the length of his hardness, bringing it at a right angle against his belly so that I could slip my lips right down onto it, which I did in a single, hungry movement.\n\nThe feeling of that smooth, velvety head piercing my lips was divine. That mixture of hard and soft, the knowledge that you're the one responsible for producing that beautiful hardness you're feasting on right now... I've never tired of it. I've never considered myself particularly good at blowjobs, but I wanted to treat this kid. I was going to give him the deluxe pink-video version.\n\nI drew him into my throat as deep as I could and then let my lips slide down along his length while my tongue basted the underside. The head popped free of my lips and I flicked the tip of my tongue at the sensitive spot underneath it. Every man I've known has enjoyed that, and the kid was no exception. He groaned, his dick jerking.\n\nI spent a few moments letting my tongue slide over the head, tasting new saltiness, before sliding him back in. This time I took things slower. I've had enough men burst unexpectedly inside my mouth to know the danger of too enthusiastic a blowjob. It's not that I don't like a mouthful of semen - it's pretty flattering, after all - I just didn't want this all over before it had even begun.\n\nI drew him out again and licked along his length, gazing up at him with limpid, hungry eyes. He looked down at me, that adoring, ecstatic look I love seeing in a man's eyes. I had him where I wanted him.\n\n\"You look ready,\" I said. I kept a hand around his length as I edged my knees up on either side of his hips. I dove down and kissed him, my tongue hot in his mouth. He accepted it eagerly, even after I'd had him inside my mouth.\n\nWhen I tore my lips away from him he was breathless.\n\n\"Uh,\" he gasped. \"Mie, wait. Should we... should we really be doing this?\"\n\nI cocked my head at him. \"Don't you remember what I said at the izakaya? I'm the oldest so I should treat you.\"\n\nHe nodded. Well, who doesn't enjoy being spoiled, after all?\n\nThe half-truth that this was all for his benefit, that I was 'treating' him rather than myself, excited me with its shamelessness. Treating him was treating me, after all.\n\nBut actually, I was taking his virginity, wasn't I? It was a prize, something you take. Was it any different because it was a boy's virginity, the one thing they want to lose more than anything else?\n\nI gazed down at him, wanting to see the change in his face when the moment came. He winced and bit at his bottom lip as I ran the head of his penis up and down against my swollen, sticky sex. I knew how excruciatingly sensitive he must be and delighted in these final delicious moments of teasing.\n\nEnough teasing! I eased myself down onto him and cried out as the head parted my lips and his length sliced up into me. He cried out as well, grasping the sheet beneath him with hands that had become claws.\n\nIt had never felt like this before! I flooded as his entire length slid even deeper into me. For a moment I panicked that I'd taken too much. It was a stupid thought. He was fully inside me now and I rolled my hips, grunting as my button scraped against the wiriness of his pubic hair. The kid looked up at me in a daze, as I panted, open-mouthed, wholly focussed on the incredible feeling his hardness was producing in me. He blushed and turned his face away, but the flush quickly spread down across the white expanse of his skin, like a crimson dye staining ivory. Embarrassment and excitement were vying inside him. He began to pant.\n\nI almost felt bad for him. I leaned over him and ran my hands across that pinkening skin, feeling the spreading heat my movements were generating inside him. Then I lifted my butt and drew myself up so that his penis slid partway out.\n\nThe kid's eyes flashed open. He looked panicked. I guess he must have been worried that I was already finished with him, that I was going to pull him out of the slick, delicious place he was engulfed by. I smiled reassuringly at him and thrust my hips back down so that he surged right back into me to the hilt, forcing a desperate cry of ecstasy from his lips.\n\nI took hold of his hands, pulling them from their grip on the sheets and entwining my fingers in his, and began bouncing on him in earnest.\n\nMaybe I should have taken things slower. All those thoughts of making his first time a gentle, reassuring experience fell by the wayside. I don't think it mattered to the kid, though. He was thrusting up into me with abandon, now, moaning as he clashed his hips wildly against mine.\n\nI shifted until I found the right position for his inexperienced though eager thrusts. Yes, that was it! The most divine angle, stopping just before he bottomed out against my cervix. I felt so full with him inside me. I panted and tossed my hair, meeting each of his increasingly desperate thrusts with hungry movements of my own.\n\nI saw a black blur reflected in the mirror: my hair, flowing loose down to my shoulders, matted with sweat, crazy, out-of-control hair. Then I saw my face My eyes were hooded like I was drugged, my olive skin infused with pink, my forehead glistening with perspiration, my mouth half-open, panting. The sight of myself desperately humping that pale, boyish body beneath me was beyond lewd. It was too much for me, far too much. I reared up and slammed back down on him in a single fluid movement and screamed out. I abandoned everything, then, my body flooding with heat, my mind delirious as the first wave of my climax broke over me.\n\nThe boy felt how much hotter I had grown, felt the swollenness of my sex against him. He threw his head back and cried out, his cry echoing my own as he came inside me.\n\nThere was nothing else, then, just his ecstatic voice resounding in my ears, the searing delight of his semen spilling up into me, the vicious grinding together of our hips. I slid my hands from his and cupped his chin, my hot, slick tongue pouring into his panting mouth. His hands found my hips then and guided me as he thrust his final, squirting thrusts up into me.\n\nI slumped down over him, his pink, shivering, sweat-coated body slick underneath my own. My hair fell over his face and neck as my lips sought out his chest, licking at the delicious saltiness of his fresh perspiration. My mind was a scene of devastation after that flood of pleasure, and the after-surges kept coming as I mouthed and pawed, animal-like, at his body.\n\nHis hands, confident now, slid across my buttocks and squeezed them lightly and I giggled. The sensation brought me a little way back to who I was.\n\nMieko. Naughty, greedy Mieko.\n\nI wanted to lie on top of him forever but I knew that he'd find it hard to breathe, so I slid regretfully off him. He lay on his back, panting, and I pulled him onto his side and buried my face in his chest. My aggressiveness had transmuted with my climax to a timid neediness and I clung to him. He put his arms around me and I went dizzy with happiness. I felt him kiss the top of my head as he hugged me and I melted with the gentleness of his touch.\n\n\"Uh,\" he said at last, an eternity after we had started embracing here in this world of post-coital bliss. \"Are you okay? I couldn't hold back. I uh, came inside you.\"\n\n\"It's okay,\" I murmured, amused at the mixture of shyness and bluntness of what he was saying. \"Today is a safe day.\"\n\nAdd that to the list of lies I had already told him. Lying, lying Mie. I didn't care then, even if I did get pregnant. The delicious heaviness of my belly I wouldn't swap for that grotesque fumbling of sticky, smelly latex when you should be cuddling. Fate would take its course. I was ovulating, actually, at my most fertile, my most horny. Those little mid-month cramps were a dead give-away.\n\nPoor kid. I wouldn't force him to take responsibility. I was the older one, after all. It was my responsibility if something happened. I kissed at his still-hot face and he smiled and opened his eyes.\n\n\"It's okay,\" I said. \"I know you want to sleep. So sleep. Sleep.\"\n\nI fell asleep telling him to sleep.\n\n---\n\nI woke during the night. For a moment I panicked, wondering where I was. I tasted rice wine in my mouth, that cloying chemical sweetness. I glanced across at the snoring body next to me. The bedclothes covered his body from his chest down.\n\nThe boy. I remember now.\n\nI reached out for him. He murmured but didn't wake. I took the end of the bedclothes and slid them down. His underwear was still around his knees.\n\nProtectiveness and covetousness welled up in me in equal parts. I slid a hand down along the curve of his pale body. He shifted in his sleep and murmured.\n\nMine. My boy.\n\nNo, not yours. You don't think you can have him, do you, Mie? What? You're his manager. Tonight is a strange inbetween-place, a beautiful dream you haven't woken from. Not yet.\n\nNo, not yet. I drew my lips over his body, careful not to wake him. I knew what would come when he woke. The sign of the love-hotel, purple and yellow, spilled its surreal light across the room, turning his body lurid, dreamlike.\n\nI took my fill of his sleeping body and, replete, lay back again as sleep again stole over me.\n\n---\n\nI'd known what would come after he woke.\n\nAwkwardness.\n\nI woke first and went and had a shower. His scent covered me and it excited and terrified me at the same time. What had I done? I'd forced myself on the kid, taken him while he was at his most vulnerable.\n\nWait, that was just melodramatic Mie. Stop.\n\nHis face, flushed, dazed with pleasure.\n\nHe wasn't the kind to report this, no matter how straight and nice a kid he was. He had my interests at heart. I grew calmer, let my mind blank as I showered.\n\nWhen I came out dressed the kid was awake. He was sitting up in bed.\n\n\"Sleep well?\" I asked.\n\nHe nodded. Then he started to say something, but I put a finger to his lips.\n\n\"It's okay,\" I said quickly. \"Last night was last night. It's a new day out there. Why don't you just go and have a nice shower and freshen up and we'll go get some coffee.\"\n\n\"Okay,\" he said. I think he was thankful for my taking control of the situation. He'd clearly been panicking about what to say.\n\nWhen the kid came back out he was wearing that tie. The company makes all its teachers wear ties. It's all part of the brand.\n\nHe'd tied it sloppily. I stepped up and tightened it for him.\n\n\"You look beautiful,\" I said. And then, flushing with shame and beating myself up for my stupidity, I busied myself with the pointless job of straightening the bed, of which there was no need.\n\nThe awkwardness grew worse over coffee. I tried to turn the conversation around to teaching him Japanese, but all my lessons seemed forced. All I could think of was bishounen, bishounen, that beautiful young boy, crying out beneath me as he filled me to overflowing.\n\nThe kid, love him, tried his best as well. He even paid for the coffee and muffins.\n\nThis time I let him.\n\nWe parted ways at the station for our different platforms. He was going back north, while I had to go south, back into Tokyo.\n\n\"Hey,\" I said, just before we parted. \"Why don't I give you my number?\"\n\nHe blinked at me. \"Your number?\"\n\nDumb. Dumb, reckless Mie. Why did he need your number? What single reason could you think of that would...\n\n\"You know, if you get lost again.\"\n\nThe boy blushed and he nodded. \"Yeah. I'll try not to get lost again, though.\"\n\nHis words broke my heart. I took out my phone. \"I'll just Bluetooth it to you.\"\n\nThe boy looked at his own phone and slapped his forehead. \"I left it on last night. The battery's dead.\"\n\nI sighed. \"So what's your email address? Those phones we give you are with Docomo, right?\"\n\n\"I don't know it,\" he said.\n\nFate. Could anyone fight against fate?\n\nBut I'm bloody-minded. The kid was going to get my number. I hadn't gone through this awkward charade for nothing!\n\nI took some paper and a pen from my purse and wrote it down for him. He took the slip of paper and looked at it with both hands.\n\nI laughed. \"It's not a business card. You don't have to be so formal.\"\n\nI knew he was just being polite, but it was just too cute. I couldn't resist teasing him even now.\n\nHe blushed and nodded, putting the paper in his top pocket.\n\nThere was a rumble. His train was coming.\n\n\"I have to go,\" he said.\n\n\"You do,\" I said.\n\n\"Uh.\"\n\nI glanced about. There were a few people coming through the ticket gates, office workers. I fought back the shame that threatened to overwhelm me and hugged the kid. I knew it was what he wanted.\n\nI wanted it, too.\n\n\"Be careful,\" I said to him.\n\nHe nodded. \"You too.\"\n\nHe turned and began to walk away.\n\n\"Hey!\" I called out his name and he looked back. \"Merry Christmas,\" I said, lamely.\n\n\"Merry Christmas,\" he repeated with a shy smile.\n\nThen with a wave he was gone.\n\nThe train trip back home was a purgatory of hungover regret. That it had happened, that I had taken it so far, that it wasn't going to happen again.\n\nHis pale body lying there beside me. Covetous, covetous Mie. He isn't yours. Only last night was he yours. And today is today. He'll remember you forever, but you can't have him, except as a memory. Only for one night. Only last night.\n\nI went two stations past my stop and had to catch a train back.\n\n--\n\nI was woken by a chirp from my cell phone. I swung over and retrieved it from the bedside table where it was charging and knocked over a bottle of water as the cable came with the phone.\n\nI eagerly stroked the touchscreen. A new message.\n\nIt was from Hideyuki.\n\nWork. Even on the weekend I couldn't escape it.\n\nI stared at the date, my eyes stinging. The 26th. Boxing Day, right?\n\nSo it was true. No one wants Christmas cake after the 25th.\n\nTears came to my eyes, unwarranted, arrogant tears. What had you expected? That he'd message you and want to go on a date or something? With someone your age? Don't be so stupid, so damn stupid. So needy and goddamn stupid.\n\nI spent the whole day moping. I was still in my pyjamas early in the evening when I looked at my phone again. I wasn't checking to see if he'd messaged me. No. I had to check that mail from Hideyuki. I'd forgotten about it. It was Sunday, but it might be something important.\n\nHey. How was your Xmas? Hope that thing with the foreigner worked out. You missed out on some boring speeches, though. Gon got super drunk and did that stupid thing where he pulls out the pockets of his pants and acts like an elephant.\n\nWant to meet up tonight? There's a new tachinomi opened just outside Ikebukuro station that I've heard good things about. Give me a call.\n\nI stared at the message. I'd been joking when I'd thought about taking Hideyuki home, hadn't I?\n\nNow he seemed...\n\nWell, he wasn't a sensible choice. He'd already gone through all the secretaries at the office. I knew my chances of being the one who could keep him under control were not high. He was a lot like Kazuo.\n\nI lay back on the bed. Maybe I was being unfair. He was a nice enough guy. I needed something like this. That whole thing with the kid, what a huge mistake!\n\nI was typing a reply when someone called me. I almost hung up, since it was a number I didn't recognise, but something stopped me. I took the call.\n\n\"Moshi moshi? Eastport no Nakagawa Mieko desu,\" I answered in Japanese.\n\n\"Moshi moshi. Is that Mie? Uh, this is...\"\n\nI dropped the phone. It was the kid. He sounded older on the phone, but it was definitely him. I'd recognise that unsure 'uh' anywhere.\n\nI retrieved the phone and promptly let it slip from my hands again. I was like a fat man chasing his hat that's blown off in the wind.\n\nAt last I got hold of the phone, praying the kid was still there.\n\n\"This is Mie. Hey. How are you?\"\n\nI sounded so eager I found myself blushing as hard as the kid had.\n\n\"Uh, sorry to call your personal number, it's just I lost your email and I looked everywhere for it and...\" He sighed. \"You won't believe how hard it was to get your number. I had to tell some pretty huge lies.\"\n\n\"I forgive you,\" I said.\n\n\"So, uh... what are you doing right now?\"\n\n\"Talking to you,\" I said.\n\n\"No, I mean...\"\n\n\"Later I'm meeting up with you for coffee,\" I said. \"If you'd like.\"\n\n\"Uh, sure. Where? I mean... Which coffee shop?\"\n\nThis kid. He was so indecisive. I'd given him his chance and he'd blown it. \"There's a Tully's next to the station at Kanazawa. That's on your line. Do you know it?\"\n\n\"Yeah, I know it.\"\n\n\"I'll see you there, then. Say 11 o'clock?\"",
        "\"Okay. Uh... I missed you, Mie. Yesterday, I mean.\"\n\n\"I...\" I moved the phone away and covered my mouth with my hand, swallowing back a sob. \"I missed you too.\"\n\n\"Well, see you then, then.\"\n\nI threw the phone down on the bed and ran into the bathroom. I looked in the mirror over the sink. My eyes were puffy and swollen, wet with the beginning of tears. My hair was a rat's nest and there were wrinkles everywhere on my face. I looked like someone's grandmother. All of this would take time and effort to rectify. I should have suggested midday instead.\n\nI splashed water on my face and rubbed it with a towel until the horror I'd seen disappeared. When I looked back in the mirror I recognised the grin that greeted me there.\n\nNakagawa Mieko was going to do something reckless again.\n\nBut luckily there were equally reckless young boys out there who found Christmas cake sweet enough to eat even after the 25th.\n\nThe End"
    ],
    "authorname": "taiyakisoba",
    "tags": [
        "female pov",
        "older woman younger man",
        "loss of virginity",
        "seduction",
        "woman on top",
        "drinking",
        "japanese",
        "christmas cake",
        "gentle femdom",
        "love hotel"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/a-taste-for-christmas-cake"
}
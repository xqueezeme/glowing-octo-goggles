{
    "title": "Strange Days Ch. 61-65",
    "pages": [
        "Sorry about the delay in getting this submitted, but that's my life. Not that I'm complaining. Just have a lot going on right now. Thank you so much for fulfilling my request. I got a lot of really great feedback about the story, what you like and don't like, what interests you the most, etc. I got some first-time feedback from readers too, and it was really uplifting to read.\n\nHope you enjoy this latest segment.\n\n-redskyes\n\n\n\n\nChapter 61\n\nAround noon the next day, I buzzed my visitor into the lobby, and when the elevator door opened, I knew instantly that I was going to really enjoy this shoot. Lucas was even more beautiful in person. His smile was wide and bright, lips full and soft. His features were chiseled, eyes bright, and his eyebrows and long silken hair were raven-black, almost blue when the light hit it just right. He was wearing a high-end navy blue silk tee shirt, untucked over dark jeans, and black boots. The shirt hugged his lean upper body nicely, leaving little to the imagination. His skin tone was a little lighter than in his photos, but he wasn't unhealthily pale.\n\n\"Hi, Lucas,\" I smiled and shook his hand, bringing him into my apartment. \"It's nice to meet you.\"\n\n\"Wow, he wasn't kidding,\" he smiled, looking me over in my shorts and tank top. \"You're cute as a button.\"\n\nI laughed and blushed. \"Um, thanks.\"\n\n\"So, where do you want me?\" he asked, looking around, adjusting his grip on the small duffel bag he had with him.\n\n\"The stage is back there,\" I waved over my shoulder, then gestured towards the bathroom. \"Do you need to change first?\"\n\n\"Not sure,\" he said, looking down at himself, then up at me. \"Do you think this is okay to start with?\"\n\n\"Sure,\" I nodded. \"Very trendy.\"\n\n\"Okay,\" he smiled and headed off for the stage in the corner of the apartment.\n\nFollowing him, I couldn't help but notice his incredibly tight little butt and his cute swagger. I figured he was about the same age as me, maybe a year or two older. He really was gorgeous, if a bit too feminine for my tastes. There was a particular balance of beauty and masculinity that I liked in my men, the kind of balance Trevor had. Still, this was going to be a fun shoot.\n\nTest shots came first, so that I could play with the lighting. Lucas looked best in natural light, so I opened the blinds to let the sun into the apartment.\n\n\"I really appreciate this, by the way,\" he told me just as we started in on the real shots.\n\nI smiled behind the camera. \"No problem.\"\n\n\"I paid a fortune - well, for me anyway - to a studio for decent shots, but they were just so...blah, you know? The modeling agencies today are brutal. If your portfolio doesn't wow them on the spot, they won't give you the time of day.\"\n\n\"Trust me,\" I told him with a frown. \"Isn't any easier for us photographers.\"\n\nLucas grinned. \"Yeah, I heard you got on with Dangerous Angels.\"\n\nI nodded, more focused on getting the right shots than on the conversation.\n\n\"I even heard some of your models have gotten work with Armia,\" he said.\n\n\"That they have,\" I muttered, really happy with the shot I'd just gotten. \"Oh, that one's gonna be great.\"\n\nHe flashed a big happy smile. \"Yeah?\"\n\nTurns out that I was right. Shooting Lucas was a breeze. Only twenty minutes into the shoot, I noticed that the best shots were when he wasn't trying to hard. In fact, my favorite series were the shots of him walking around my apartment, checking it out. He'd asked about various nicknacks, pictures we had scattered around of Sarah, Violet, Trevor and the rest of our friends. We talked most of the shoot and I just kept filling up SD cards.\n\nTwo hours later, we took a short break for a snack and reviewed the pictures we'd taken so far. We were at the dinner table with my laptop, sitting side by side. Lucas was still wearing the last set of clothes he'd changed into, a pair of jeans that he probably paid way too much money for so that they would look old and worn but were brand new, trendy leather flip flops, and no shirt at all. He was leaning so close that his shoulder was in front of mine, close enough that I noticed he smelled really good, like spiced vanilla, but I wasn't uncomfortable at all. He hadn't made a single move on me since he'd arrived, which was nice.\n\n\"God, Amy, these are amazing,\" he said with awe, then he looked at me. \"You make me look good.\"\n\n\"You make it easy,\" I laughed and patted his back. I couldn't help but notice how soft his skin was, how warm, or how hard the muscles of his back were.\n\nLucas just looked at me for a moment, his smile fading to something else as he blushed, and I drew my hand away. I had the horrible feeling that he was about to come on to me, but thankfully, he didn't.\n\n\"So, listen, I know you need to make a living doing this, and I'd like to return the favor,\" he said, referring to the fact that I wasn't charging him for the shoot.\n\n\"Okay. What did you have in mind?\"\n\n\"Well, there's this guy I met when I first talked to the agency,\" he held his hand up high. \"Tall, blonde, gets any girl he wants, I'm sure.\" Lucas waggled his hand. \"Kind of a surfer look, if you ask me, but he's nice, and more importantly, he can pay.\"\n\n\"Paying is good,\" I chuckled.\n\n\"Yeah, I figured you'd like that,\" he smiled at me, glancing at my mouth for a moment.\n\nOkay, maybe he was about to come on to me.\n\nLooking quickly away and back to the laptop, I asked, \"Does he need his portfolio refreshed too?\"\n\nLucas cleared his throat beside me. \"Yeah. Same as me.\"\n\n\"No problem,\" I told him, flicking through the pictures we had so far. \"Leave his number with me before you go and I'll give him a call.\"\n\nLucas's demeanor changed after that, back to all-business, confirming my suspicion that he really had been coming on to me, although not aggressively. The plus side was that the rest of the shoot went really smoothly, he was so much more relaxed. After the shoot, we reviewed the rest of the photos and he gave me a thumb drive to copy them to.\n\n\"Sorry about earlier,\" he said meekly.\n\n\"What do you mean?\" I asked, watching the progress bar grow.\n\n\"About coming on to you.\"\n\nI chuckled. \"Don't worry about it.\"\n\n\"It's just...\" he paused, so I looked at him. He was blushing again and he smiled sweetly. \"Well, I'd heard you didn't have a boyfriend, and you really are quite pretty.\"\n\n\"Heard from who?\" I asked with a half-grin.\n\n\"Phillip.\"\n\n\"You don't know Phillip very well do you?\"\n\n\"Only in passing,\" he said. \"Why?\"\n\n\"Because I have a girlfriend,\" I told him. No, I have no idea why I didn't include Trevor. Technically, he was my boyfriend, but the first thought that always comes to mind when I consider my relationships is Sarah.\n\n\"Oh!\" Lucas's eyebrows shot up, then he gave a nervous laugh and blushed again. \"Now I feel like an idiot.\"\n\n\"Don't worry,\" I patted his leg. \"I play for both teams, so your efforts weren't entirely wasted.\"\n\n\"Ohhh,\" he said quietly, at length, then he grinned and bumped my shoulder with his. \"So, does that mean you'd be interested in...\"\n\n\"No,\" I laughed, making him laugh too.\n\nLucas held up his hands. \"Just had to check.\"\n\nHe ended up with some really great additions for his portfolio, but we both agreed he needed a little more variety, like maybe some outdoor shots. I had the idea to follow him around the grocery store the next time he needed to go shopping, and he was crazy about the idea, so we set a date for two weeks from today. He also wrote down the contact info for his friend, Sydni, which I thought was an interesting name.\n\nI had to get to work myself, so I told Lucas to give me a couple minutes to change clothes and get my stuff, then I saw him out. We passed through the courtyard, the planting beds still in dire need of attention, but at least the fountain was working now. On the other side of the gate, I saw a man leaning against the fence, smoking a cigarette. He was really tall and dressed all in black, a dress shirt and slacks and shiny shoes - no make that boots - with silver tips. His black leather belt had a strange silver buckle too, a Celtic knot design, I think. His black hair was really long, pulled back in a loose pony tail, almost down to his butt. I couldn't see his face though.\n\n\"Thanks again, Amy,\" Lucas said as we stepped out onto the sidewalk and the gate closed behind us.\n\n\"Thanks to you too,\" I shook his hand, but he frowned, not understanding. \"Hey, this helps my portfolio just as much as yours.\"\n\nHe grinned. \"Does it help enough to still be free next time?\"\n\n\"Probably,\" I shrugged indifferently, teasing him.\n\nLucas laughed and went on his way.\n\n\"Photographer?\" the man asked behind me.\n\nI turned around and saw him looking at the camera bag slung over my shoulder. Up closer, he was much taller than me, my eyes level with his chest. I also got to see his face, strong lines, very masculine, but his eyes were absolutely stunning. They were simply too green, too vibrant to be real. Contacts, maybe?\n\n\"Oh. Yeah,\" I said, then asked, \"Do I know you?\"\n\n\"No,\" he said simply, shaking his head and blowing out thick smoke, which the wind carried away from me, thankfully.\n\nHe just stood there looking at me, like he was sizing me up, and I got uncomfortable. Then it happened again. The hair on the back of my neck stood up, but this time a shiver rolled through me.\n\n\"Feel like you're being watched?\" he grinned, but it was like a predator with prey.\n\nAny other time it would have made me nervous, but after dealing with Todd Redding and his friends, I was surprisingly calm, sizing this man up just as he was me.\n\n\"Yeah,\" I mumbled, looking around when I realized my unease had nothing to do with this stranger.\n\n\"You can't see them,\" he said, and it was a statement of fact, not a question.\n\nI looked sharply at him. \"What do you mean?\"\n\nHe didn't answer my question. Dropping his cigarette, he crushed it with the toe of his boot. \"You're attracting a lot of attention.\"\n\nI opened my mouth but he talked over me.\n\nHe shrugged. \"Not your fault, really, but I thought you should know.\"\n\n\"Who are you?\" I asked, frustrated he was being so vague.\n\nHe smiled, and I swear his canines were a little longer and a little sharper than most. \"I'm the guy that makes sure everyone plays by the rules.\"\n\nIt wasn't a nice smile, just like his earlier grin wasn't friendly, but still, for some reason, I wasn't afraid of him.\n\nAdjusting the strap of my camera bag over my shoulder, I glared at him. \"What the hell are you talking about? Are you a PI or something? Is someone stalking me?\"\n\n\"Stalking,\" he tested the word, looking at my mouth for a moment, then he nodded and leaned against the fence again. \"Yeah, that's a pretty good word for it.\"\n\nI looked around again, suddenly afraid that Todd and his friends wanted to get back at me. But weren't they under house arrest? I thought I remembered Detective Willis telling me that once. What if I'd heard wrong? What if they were free to do what they wanted until the trial? What if they wanted to shut me up before I could testify? Oh God, what about Paula?\n\n\"She has nothing to do with this,\" the man said.\n\nMy breath caught in my throat and I looked at him. I hadn't said Paula's name out loud, had I? I was just thinking about her. That's all. Just thinking. So how did he...?\n\nThe man pushed away from the fence and put his hands in the pockets of his pants. \"Amy, you have a gift,\" he began. I couldn't breathe. Did he know? Or was he talking about something else? \"The kind of gift that attracts attention,\" he continued, taking a step closer.\n\nStrangely, I still wasn't afraid of him, but I thought I should be.\n\nHe smiled again, \"I'm no threat to you. I enforce the rules, which means I have to play by them too. You've been Touched, so you know it to be a fact, and you don't need me to tell you either.\"\n\n\"I have no idea what you're talking about,\" I shook my head, curious about the emphasis he'd put on 'touched', like it meant something more than usual. But he was right. I just knew that he wouldn't hurt me, that it simply wasn't possible, unless I tried to hurt him.\n\nHis too green eyes flicked down, low on my body, then back up, and I simply knew. He knew. He knew about my gift from Freyja. I don't know how. Hell, I don't know how I knew. But I knew he knew.\n\nDamn, that was a messy line of thought.\n\n\"You do know what I'm talking about,\" he grinned again. \"Don't you?\"\n\n\"What the hell do you want?\" I backed up a step.\n\nHe just took a step closer, then another, and when he spoke again, his voice was low, secretive. \"I want you to pay attention to what's going on around you. I want you to remember that you have free will. I want you to understand that the kinds of beings that bestow gifts such as yours can be fickle and cruel, and they can be just as moronic as anyone else, too caught up in their own wants and desires to really see what stands before them,\" He paused for a moment, looking low at my body again, then fixing me with his too green gaze and flashing an amused grin. \"More importantly, I want you to remember the birds and the bees.\"\n\nI opened my mouth to ask him to explain himself, who he was, exactly what and who he was talking about, what he wanted from me, how he knew about my secret. But then he looked at something behind me. I spun around to look too, but saw nothing, and when I turned back, he was gone.\n\nThere it was again, the feeling that someone was watching me.\n\nI spun around in circles, seeing people going about their way on the sidewalks, in their cars. A homeless woman was pushing a shopping cart around a corner. A bike messenger was speeding down the street. Three young guys, around my age, were laughing as they passed by in a convertible. A middle-aged woman in a pant suit and high heels came out of a store across the street. And there were others, but none of them were looking at me. There I was, standing on the sidewalk, surrounded by a city alive with its children, and I had never felt so exposed.\n\nI was starting to freak out, so I went around the building to my car, hopped inside, and took off. The feeling went away for a minute or two, but then it came back. I checked my mirrors to see if I was being followed, but still, there was nothing.\n\nThe man had said I couldn't see them.\n\nNow I was really freaking out.\n\nI checked my watch. I had just enough time for a quick stop before going to work. I only hoped she was there.\n\nChapter 62\n\nThe little bell banged against the top of the door and rang like crazy, then again when the door shut behind me. I didn't see Helena, but a man was standing at the counter. He looked to be in his late twenties, and he was absolutely gorgeous. At first glance, he reminded me of Trevor, so as I pretended to browse around the store while waiting for Helena, I studied him.\n\nHe had one booted foot up on a thick bar near the base of the counter, kind of like what you see in a bar. His golden hair was thick and just a touch curly, but mostly wavy, like Trevor's when he lets it grow out. His eyes were blue, but so pale they were almost gray, like storm clouds when they first roll in. His features were sharply defined, like the stranger I'd encountered on the street, and his jaw was strong, masculine. Unlike the stranger, he was wearing thick-soled black biker books, faded and torn blue jeans, and a tight fitting gray tee shirt.\n\nAs I maneuvered through the store around racks and shelves, I saw the light hitting him from various angles. Beneath his clothes, I could see he was fit, leanly muscled, and though he was standing very still, he seemed full of energy, as though he could pounce like a cat. His lips were very full and very kissable. It was that last detail that made him go from gorgeous to incredibly cute, but in a good way. Then his lips stretched into a smile.\n\n\"You're first in line.\"\n\nHis voice was like warm honey, and I swear I felt his words pouring over me, caressing my skin. I shivered.\n\n\"I'm sorry,\" I said, tongue feeling thick in my mouth. I swallowed to clear up my voice. \"Were you talking to me?\"\n\nHe turned his head to look at me, and I froze. His gray eyes seemed to look right through me. No, into me. I squirmed under his intense gaze for a moment, then found some courage buried inside me and made my way over to the counter.\n\n\"I'm just a friend of Helena's,\" he said, turning to lean against the counter, facing me, then he extended his hand. \"Erin.\"\n\nGlancing at his hand, I took it, watched as his long fingers closed around my much smaller hand. His skin was so soft, and so incredibly warm, like my favorite blanket on a cold winter night.\n\n\"A-Amy,\" I stammered.\n\nHe smiled and released my hand. \"Nice to meet you, Amy. Helena speaks highly of you.\"\n\nI blinked at him. \"She does?\"\n\n\"Sure,\" Erin nodded, the corner of his mouth turning up in a charming grin. \"She makes a point to remember all of her customers. Says you're her favorite in this store.\"\n\n\"I'm sure she has a favorite in Texas too,\" I muttered.\n\n\"What was that?\" he asked, leaning a little closer.\n\n\"Nothing,\" I shook my head, looking away, pretending to be interested in something behind the counter, down the way from us.\n\nWe waited for a few minutes, but Helena still hadn't come out to greet us.\n\n\"You're a photographer?\" Erin asked.\n\nI glanced at him and frowned, and when he grinned and flicked his gray gaze at my camera bag, I blushed.\n\nI nodded and asked, \"You?\"\n\n\"Archery,\" he smiled, keeping his arm straight over the counter and drawing back his other hand, flicking two fingers, like he was shooting a bow. \"Professional competitor.\"\n\n\"That pay well?\"\n\nHe snorted, and he sounded kind of bitter when he replied. \"I wish.\"\n\nErin glanced over my shoulder, then I heard the curtain of beads at the back of the store rattle lightly.\n\n\"Amy?\" Helena called out happily.\n\nI turned to see her walking toward me, still as beautiful as I remembered. Her light brown hair wasn't braided today. Instead, she wore a band of silver around her head to keep her hair out of her eyes, but her hands and arms were still draped with silver rings and bands. Her skin still had that healthy golden glow too, contrasting with her white toga.\n\nClosing the distance, her blue eyes shining with kindness, Helena drew me into her arms for a hug. I'm not sure why I didn't notice before, but while Helena was stunningly beautiful, the curves beneath the thin fabric she wore incredibly tempting, there was a motherly feel to her, and not just in the way she held me in her arms. I could feel the strength of her, but she was soft too, even around the middle. She personified what it meant to be a woman, I realized.\n\nTaking my shoulders in her hands, she leaned away to look at me. \"How have you been, honey?\"\n\n\"Good,\" I nodded, glanced beside me, since I couldn't look at Erin without turning my head, then asked her, \"Could we talk for a minute?\"\n\nHelena studied me for a moment, then nodded. \"Of course.\"\n\nErin sighed behind me. \"I'll just be outside, I guess.\"\n\nHelena frowned and called out after him as he stepped out onto the sidewalk. \"Be nice to the pedestrians!\" When the door closed, she shook her head and gave me a grin. \"I love that dear boy, but he can be a handful, and the Gods know I don't get enough customers as it is without him frightening them off with his antics.\"\n\n\"He seemed nice,\" I shrugged.\n\n\"Oh, he is,\" she smiled, taking my hand and guiding me away from the counter. \"Sweetest man I've ever known. You'll never meet another so in tune with how people feel about each other, but so very alone.\"\n\nShe glanced through the shop windows, where Erin was sitting on a bench just outside, his back to us, both arms draped along the back of the bench, head turning this way and that as people passed by him. When I turned back to look at Helena, she seemed sad, watching Erin.",
        "Helena sat us down on a small but comfortable antique love seat, tucking her leg under her so that she could face me.\n\n\"He has a knack for helping people find each other,\" she said softly, and she shook her head. \"Except for himself.\" Then she looked at me and smiled. \"Now, what brings you here today?\"\n\n\"Uhm, Holly says hello,\" I babbled, unsure of how to start in on telling her about my strange afternoon.\n\nHelena's expression lit up with happiness. \"Does she? How is Holly?\"\n\n\"Really happy, actually,\" I told her. \"She's in love.\"\n\n\"Well, good for her,\" she patted my hand, then gave me a knowing smile. \"But I'm sure you didn't come down here just to tell me that.\"\n\n\"No,\" I shook my head and stared down into my lap. \"I didn't.\"\n\n\"Amy,\" Helena said softly, taking both of my hands in hers. \"What's wrong?\"\n\nI tried to think of a way to tell her what had happened, about the stranger, about the feeling of being watched.\n\n\"Oh God, this is stupid,\" I groaned, looking away, sure that I was going to sound crazy the moment I began. \"You'll just think I'm nuts.\"\n\n\"Amy, you have a magic penis,\" she said bluntly, and I looked at her, saw her smiling warmly. \"I highly doubt there is anything you can say that will make me think you're crazy.\"\n\n\"I guess so,\" I couldn't help but smile, or blush. Taking a deep breath, I told her about how I felt like I was being watched, and the stranger I'd met outside of my apartment. Helena simply listened, her expression nearly unreadable, but she seemed concerned.\n\n\"It's bad, isn't it?\" I asked.\n\nHelena looked quickly away.\n\n\"Please, tell me,\" I pleaded, taking her hand in both of mine.\n\n\"Very well,\" she said softly, then gave me a grave look. \"There is another world out there, beneath the one you know, a world of wonder and nightmare, magic and miracle, beauty and horror.\" Her hands caressed mine gently. \"The gift you carry makes you noticeable to the other side, to beings unlike anything you can imagine, both benevolent and malicious.\"\n\nI nodded, eager for her to continue.\n\nHelena took a deep breath, looked away, and said solemnly, \"For untold ages, a war has been waged.\"\n\nShe paused, letting that sink in. A war? I'd read enough supernatural romance novels to know this kind of thing never ended well. Holly hell, what I had gotten into?\n\nSlowly, Helena turned her head to look at me, and the glimmer of her eyes and slight crook of her mouth made me frown.\n\n\"You're fucking with me,\" I muttered and rolled my eyes.\n\n\"Guilty,\" Helena giggled and patted my hand. \"But, it is true that your gift will attract attention.\" I regarded her again and saw her place her hand on her chest. \"Those like me will notice, as will...well, I'll just say others.\"\n\n\"So, is this bad or not?\" I asked.\n\n\"Bad?\" she raised an eyebrow, then shook her head. \"No, I wouldn't say so. You were given sound advice today. There really is another world out there, a truly magical world. After all,\" she paused with a smirk and gestured between my legs. \"But just like this world, there are those among it who crave power, influence, or prestige, or all of the above. In some ways, your gift could cause you to be seen as a trophy to won, or a challenge to be conquered.\"\n\n\"Conquered?\" I repeated, eyes wide, feeling kind of insulted, then more loudly, \"Won?\"\n\nHelena smiled. \"Yes, but in the same way that Sarah was a conquest for you.\"\n\nOh. Okay. I had kind of plundered her that first morning we'd had sex, so I guess it was a fair analogy. But then I wondered...\n\n\"Does that mean people like you will know that I have...a...you know.\"\n\n\"A cock?\" she grinned, raising an eyebrow, and I nodded. \"No. All they'll know is that there's something special about you.\"\n\n\"So, who was he?\" I asked. \"The stranger, I mean.\"\n\n\"He didn't give you his name?\"\n\nI shook my head.\n\n\"Then it isn't mine to give, unfortunately,\" she told me, then squeezed my hands reassuringly. \"But again, he gave you good advice. Pay attention, remember you have free will, and no matter how beautiful, majestic or perfect someone may seem to you, they are no different than you. You aren't helpless, and you have everything you need to defend yourself from their charms.\"\n\n\"Charms,\" I repeated, then asked. \"Do you mean, like, magic or just charisma?\"\n\n\"Both,\" she shrugged. \"Trust me though, the being that spoke to you on the street can help you, and if he decides to reveal himself to you again, listen to what he has to say.\" She smiled and patted my hand fondly. \"He can be just as vague and mysterious as the rest, but he's a good man, if not broody at times.\"\n\n\"You called him a 'being',\" I pointed out the small detail. \"Is he not a...I don't know, a real man?\"\n\n\"Oh, he's real,\" she told me. \"But not in the sense you might think. He's not entirely human, if that's what you're asking.\"\n\nNot entirely human? What the hell did that mean? \"Then what is he?\"\n\nHelena pursed her lips in thought before replying. \"Well, he's...\" she stopped to smile at me. \"Let's just say that he has fallen to his current form.\"\n\nI blinked. \"Oh my God. You mean he's a fallen angel or something?\"\n\n\"Oh heavens no!\" she shook her head, then laughed. \"Pardon the pun. No, he was once something greater, but...a lack of attention has lessened him to what he is today.\"\n\nI had so many more questions, but I just didn't know where to begin. I wanted to know more about the magic of my gift, about where it came from, about Freyja, about the stranger, even about Helena. I wanted to know what the differences were between someone like her and the stranger. I wanted to know who might be watching me, who might want me as a trophy.\n\n\"Amy,\" she patted my hand again, drawing me out of the whirlwind of my thoughts. \"I know you have questions, but...I've probably told you more than I should already.\"\n\n\"What do you mean?\" I frowned.\n\n\"There are rules,\" she said gently, rubbing her thumb over the back of my hand. \"The first being that I'm not supposed to give you knowledge you can't obtain on your own.\"\n\n\"That's not fair,\" I complained. \"Both you and Mr. Broody said something or someone could be coming after me. What am I supposed to do?\"\n\n\"Don't think of it that way, for one,\" she patted my hand again. \"Think of this on a more basic level, as though someone were simply interested in you, a young man, for example, one that wants to talk you into going on a date with them.\"\n\n\"That's it?\"\n\nShe nodded. \"That's essentially what it boils down to, yes.\"\n\nI sighed and looked away, but then felt Helena's hand stroking the hair on the side of my head. When I glanced at her, she smiled fondly.\n\n\"This is an adorable look for you, by the way.\"\n\nI snorted. \"Okay, so I don't need to wear a wreath of garlic around my neck, carry a rosary, pour salt outside my apartment or do anything else?\"\n\n\"No,\" she laughed lightly. \"None of that would help you anyway.\"\n\n\"Gee. Thanks.\"\n\n\"But there is another option,\" she said.\n\nI waited, nodded for her to continue.\n\n\"I could take back Freyja's gift.\"\n\nI stood up immediately. \"Oh, hell no.\"\n\n\"It would certainly prevent any forthcoming complications in your life,\" she told me, standing up beside me.\n\n\"Maybe, but it would create new ones,\" I argued, pacing away from her. \"First and foremost being what the hell happens to Sarah and I?\"\n\nHelena came over to me and put her hands on my shoulders. \"You really do love her, don't you?\"\n\n\"Forever,\" I told her.\n\nShe smiled and gently cupped my face in her hands, bringing me towards her to kiss my forehead. \"Bless you then. Freyja would wish for nothing more than that.\"\n\nChapter 63\n\nI was still overflowing with questions after leaving Helena's shop, but at least I wasn't freaking out so much anymore. The moment I'd stepped out onto the sidewalk, I felt like I was being watched again.\n\nErin had stood up from the bench, told me it had been nice meeting me, and gone back into the shop. I couldn't help watching his ass when he walked away from me. Next to Sarah's, it was one of the nicest butts I'd ever seen.\n\nWhen the shop door closed behind him, I realized something. Just like with Mr. Broody, I simply knew that Erin wasn't the cause of my discomfort, that it wasn't him watching me. Was he like Mr. Broody? Was he more than human? Something else? Come to think of it, from the moment I'd met Helena, I'd trusted her, simply known that she would never hurt me. Good Lord, who were these people?\n\nThe feeling of being watched came and went on my way to Dangerous Angels, but I ignored it as best I could, though I wasn't sure if that was going against the advice that I should pay attention to what's happening around me. Helena had really tried to make me feel better about the situation, and she hadn't been troubled at all by the news from the stranger that someone or something had their eye on me. Helena had also confirmed what the stranger said, that I wouldn't be able to see them anyway. I took all of this to mean that until I actually saw them, I could ignore the feeling, so that's what I did.\n\nI had to hunt up Darren when I got to work, since he wasn't in his office, and he wasn't on the shooting floor either. When I finally found him, he was coming out of Jean Pierre's office, with both Christine and Rose in tow. Rose looked upset, and Christine looked like her typical supremely bitchy self. Darren opened his mouth to say something, but Christine shoved her way around him to get in my way, standing far too close to me for comfort.\n\n\"Fuck up this shoot and I'll have your ass,\" she told me bluntly, then stepped around me with an arrogant swagger.\n\nI watched her go, then looked back to Darren and Rose when Christine was out of sight.\n\n\"What the hell was that all about?\" I asked.\n\nRose looked at Darren, and he sighed, telling me, \"She convinced Jean Pierre to change the schedule.\"\n\n\"Okay,\" I shrugged, noticing that both of them looked uncomfortable. \"What does that mean?\"\n\nIt was Rose's turn to sigh, apparently. \"It means you're shooting her today, instead of me.\"\n\n\"Wonderful,\" I rolled my eyes and started heading towards the floor.\n\nNeither of them said anything else. When I got to the set, Christine was waiting. Rose peeled off for another set, leaving Darren and I with Christine. She was standing there with her arms crossed under her breasts, tapping her foot, and she was wearing a dark blue bath robe. Her hair was simply styled, and I had to admit that she was a very attractive woman. With her long legs, lean build and golden hair, she kind of reminded me of the paintings of goddesses from Greece.\n\n\"About time,\" she muttered, tossing her hair over her shoulder.\n\nToo bad she was such a bitch.\n\n\"Like yesterday,\" Darren said simply.\n\nI nodded and got my camera ready, guiding Darren to adjust the lighting. When I was ready, Christine snorted, untied her robe, and tossed it into a corner. My breath caught in my chest. She wasn't wearing a stitch of clothing. She turned away from me and headed over to a dresser, pulling out a set of dark red lacy boyshorts and matching camisole, then she opened another drawer and drew out a garter belt and stockings. Her body was tight and lean, tall and statuesque, and there wasn't a single blemish on her smooth silky skin. Her breasts weren't as big as I'd thought, somewhere between mine and Sarah's, but her nipples were long and pointy. Also unlike me and Sarah, Christine had a small thatch of golden hair just above her mound, in the shape of a slightly rounded triangle. To me, it was like the X on a damn treasure map, and my mouth watered at the sight of her.\n\nThe bitch turned me on. Now I really hated her.\n\nChristine took the lingerie with her and sat down on an elegant padded bench. A pair of red stiletto heels were sitting on the floor, and a dark red dinner dress was hanging nearby.\n\n\"Wipe your mouth, Amy,\" Christine said, but she wasn't looking at me.\n\nBut when I blinked, I realized she could see me in a mirror. I frowned and hid my blush behind the camera.\n\nThe shoot was indeed like yesterday. Christine went about dressing and undressing, and I shot her all the while. Granted, more than a few shots included stuff that couldn't be used, a nipple here, a glimpse of her smooth labia there, but the vast majority were perfect, her more womanly parts hidden by her limbs, clothes, or the furniture.\n\nThe only time I really had any trouble was when she leaned over to put on a pair of stockings. Her breasts were rubbing over her legs, and I guess the stimulation caused the tips to stiffen, and oh my gawd did she have the most incredible nipples I'd ever seen, beating out even Tabitha's mouthwatering assets by a fair margin.\n\nWhen the shoot was over, Christine threw her robe on and patted Darren on the shoulder as she passed by him, completely ignoring me.\n\n\"Let me know if we have to do this again with someone else, would you, sweetie?\" she told him.\n\nI glared at her back, and when the curtains closed behind her, I realized that Darren hadn't said anything, hadn't defended me at all. He just gave me a sheepish look. It hurt my feelings a little that he hadn't taken my side. Granted, he hadn't taken Christine's side either, but it still sucked. Pissed off, I yanked the SD card out of my camera and threw in his general direction, but he managed to catch it with a quick lunge.\n\n\"Guess I'm done here,\" I muttered and stomped off.\n\nI heard Darren calling me to come back, his tone pleading, but I ignored him. I was going to head straight for my car and go home, but Ginger rounded the corner right in front of me.\n\n\"Oh, hey!\" she smiled, then frowned when she saw my expression. \"Guess the shoot didn't go well.\"\n\n\"It went fucking perfect,\" I told her, crossing my arms. \"But that bitch won't even acknowledge it.\"\n\nGinger gave me a hug, though I was still stiff and didn't relax into it, despite how good she smelled, how warm she was, or how nice she felt against me.\n\n\"Well, she'll have to when J.P. sees the results,\" she assured me.\n\n\"Maybe, but I doubt it,\" I huffed.\n\n\"Come on,\" she smiled again and hooked her arm around mine, walking me with her. \"Let's go get me cleaned up and see if Rose needs any help.\"\n\nI followed Ginger to the dressing room, where Rose was already stripping off her makeup. Ginger took a seat to do the same. Rose asked about the shoot so I relayed what I'd already told Ginger.\n\n\"So it really did go well, huh?\" Rose asked, turning her chair to face me and crossing her legs.\n\nShe was wearing a black satin robe, and I was pretty sure nothing else, if the obvious outline of her big nipples were any indication of her state of undress. Crossing her legs made her robe split wide over her thighs too, and I watched the satin slide open wider in microscopic increments until I could almost see a good portion of her bare butt.\n\n\"Amy?\" she said.\n\nI blinked and shook my head. \"Sorry. You were saying?\"\n\nRose grinned knowingly, shifting in her chair, and this time the top of her robe opened a little more to reveal a substantial amount of fabulous cleavage. She repeated her question about the shoot.\n\n\"Oh, yeah, it was great, actually,\" I said, then sighed. \"That's what stinks about the whole thing.\"\n\n\"How so?\"\n\n\"She's beautiful, Rose,\" I wined. \"So easy to work with, at least when she keeps her mouth shut.\"\n\n\"Oh,\" Rose pouted, then she brushed the fingertips of her hand down her caramel cleavage, opening her robe until the entire valley of her breasts were exposed. \"I'm not pretty?\"\n\nI grinned. \"That's not what I meant, and you know it.\"\n\n\"Can we finish this conversation in the shower?\" Ginger asked, getting up from the chair and pinning her hair up in a bun.\n\nFor a moment, I was stunned. Ginger was incredibly cute without any makeup. She had this whole innocent-hometown-girl thing going on.\n\nRose grabbed my arm and tugged me along. \"Gawd, yes. I'm dying for a shower.\"\n\nI started to protest. \"Hey, I don't really need to take a...\"\n\n\"Oh, come on,\" Ginger said, looping her arm through mine opposite Rose. \"A shower will do you good after dealing with Christine.\"\n\nRose gave me a wink. \"Besides, Ginger hasn't seen you naked yet.\"\n\nI glanced at Ginger and she bounced her eyebrows at me, making me laugh.\n\nI'd never actually used the showers at Dangerous Angels, so I didn't have a locker assigned to me, nor anything to take a shower with, but Rose and Ginger told me I could use their stuff. The shower was just a big tiled square with four heads on each wall, and a bench down the middle of it in case someone wanted to steam for a while, and more benches were just outside the showers. The place was starting to fill up with steam by the time I found a towel and stripped down, and Rose was already under the spray of one of the heads.\n\n\"Damn, girl,\" Ginger said, bouncing up beside me as I stepped into the shower. She was looking at my butt. \"You have the cutest little ass I've ever seen.\"\n\nI chuckled and shook my head at her.\n\n\"I love her boobies,\" Rose grinned over at us.\n\n\"Boobies?\" I raised an eyebrow, stepping under my own showerhead.\n\n\"Yeah, these are tits,\" she turned around and hefted her big breasts in her hands, then she pointed over at Ginger's even greater assets. \"Those are fucking knockers,\" she said, making Ginger and I laugh. \"And yours are adorably cute boobies.\"\n\n\"Yeah, yeah,\" I muttered, turning my back to them to wet my face. \"I'm not blessed in the chest. I get it.\"\n\n\"No, honey, that's not it,\" Rose replied, but she sounded closer now.\n\nI turned around to find her standing right in front of me, and she reached out to cup both of my breasts in her hands.\n\n\"They're perfect,\" she smiled, then lifted an eyebrow. \"Here, watch.\"\n\nAnd with that, Rose leaned down, closed her mouth around my breast and pulled over half of it right between her lips. Her hot tongue pressed firmly against the underside of my breast, then licked up and over my nipple just as she sucked me firmly into her mouth.\n\n\"Wha...jeezus, Rose,\" I gasped, feeling a jolt of pleasure streak through me from my nipple to low in my stomach.\n\n\"Mmmm,\" she closed her eyes and cooed around a mouthful of my tit.\n\nI just watched her suck noisily on my breast for a moment.\n\nRose released me with a wet slurp and turned her head to glance at Ginger, who had moved to stand right beside me. \"Wow, you should try this.\"\n\n\"Yeah?\" she raised a dark red eyebrow, then leaned down to latch onto my other breast.\n\n\"Oh my...\" I gasped, both of them sucking on my tits at the same time, licking and slurping, nibbling and kissing.\n\nGinger took her mouth off my boob long enough to say, \"God, they're amazing.\"\n\n\"Here,\" Rose said after taking her mouth off of me and moving to my side, but still cupping the breast she'd just been attending to. \"Try this one.\"\n\n\"What are you two...?\" I started to ask, but Ginger switched to the other breast and used her hand to play with the nipple that had just been inside her warm wet mouth.\n\nMy eyes rolled into the back of my head when Ginger switched breasts again. I felt Rose press her wet body against my side, my arm swallowed up in the valley of her breasts.\n\n\"Amy, can I ask you a question?\" she purred.\n\n\"Sure,\" I breathed, hissing with delight when Ginger captured my nipple between her teeth and bit down just a little. \"Go ahead. I don't think...gawd almighty!\" I cried out, digging my hand into Ginger's hair and pulling her tight against my chest. \"I don't think I'm going anywhere.\"\n\nRose giggled and whispered in my ear. \"How do you and Sarah have sex?\"\n\nI laughed, but only briefly, because two of Ginger's fingers glided across my wet center. My belly tightened, and something inside me shifted.\n\n\"How do you think?\" I lolled my head to the side to look at Rose.\n\nShe smiled and slid her hand down my back, stopping to lightly scratch her nails just above my butt. \"Hands, fingers, mouths. You know, the usual.\"",
        "\"Almost,\" I managed to grin, but Ginger began licking and kissing the undersides of my breasts and slid two fingers inside me.\n\nI was dimly aware that my cock was aching to be released, that if this continued, I was absolutely going to fuck one of them, if not both. No doubt Rose and Ginger thought they were just teasing me, having fun, but they had no idea what they were getting into. And you know what? I wasn't going to fight it. Well, not exactly.\n\n\"Oh, right!\" Rose opened her eyes wide. \"Dildos and vibrators!\"\n\n\"And?\" I asked, reaching out to wrap my hand around the back of her neck.\n\n\"Strapons?\" she grinned.\n\nI stared at her mouth, pulled on her neck to bring her closer, close enough that I could feel her warm breath on my mouth. Just as her lips grazed mine, Ginger's fingers found that spot inside me and gently pushed up against it. I cried out at the sensation, and I fought to keep myself in the right frame of mind, to experience this as a woman, not as a girl with a cock. The pressure was still there in my belly, but other than that, I had my hidden dong under control, allowing me to relish in the feel of my insides clamping down on Ginger's fingers.\n\n\"What else?\" I asked Rose with a whisper, and gave her the lightest and most brief of kisses. Fuck me, her lips were soft and full.\n\nRose shivered and pressed herself against my side. \"I don't know.\"\n\nShe felt amazing, so soft and warm. I wanted to feel her more fully, so I twisted my arm between Ginger and I and moved her behind me while turn to face Rose. Capturing Ginger's hand, I moved it to my breast, and thankfully, she took the hint, using both hands to play with my chest. I arched my back when she lightly pinched both of my nipples and gradually upped the pressure.\n\nPutting my hand back on Rose's neck, I grabbed one of her hands and held it between us.\n\n\"What else, Rose?\" I asked, kissing her more fully, licking my tongue along her lips. She tried to capture my tongue with her mouth, but I didn't let her. \"Come on, Rose. For a bi, surely you know what else.\"\n\nOne of Ginger's hands began to slip down from my breast, smoothing over my belly, and the timing couldn't have been more perfect. I let my cock slide out of me. I wasn't fully erect, because I didn't want to be, not for what I had in mind, but given how wide I was being opened, I was very thick, easily as long as with Violet, but even wider, if that was possible.\n\nI gave Rose a deep kiss, plunged my tongue into her mouth, then guided her hand to my thick shaft, just as Ginger's hand caressed over my thigh and found the wide base of me.\n\nRose gasped, and Ginger froze. Ginger moved first though, so slowly I wasn't sure it was happening, her fingers grazing the skin of my shaft, exploring, curling around me, then her warm hand gave me a firm squeeze.\n\n\"Holy shit,\" Ginger breathed.\n\nRose blinked at me in astonishment, and her hand curled around me too, then both of them tenderly stroked me, Rose down, Ginger up, and their hands met.\n\n\"W-what is...\" Rose began, but I took her hand off of me, and Ginger's, and before either of them could take a gander at the inexplicable, I made my dong slide back inside me.\n\n\"Something wrong?\" I asked innocently.\n\nRose stepped back, holding me at arm's length, and dropped her gaze between my legs. Ginger pressed up against my back and side to look too.\n\n\"What the hell?\" Rose asked, looking up at me.\n\n\"I felt something,\" Ginger said.\n\nRose looked at her. \"Yeah, no shit.\"\n\n\"I felt something,\" Ginger said again.\n\n\"Amy, what...\" Rose looked at me, shaking her head. \"What the hell!\"\n\n\"I felt a cock!\" Ginger yelped.\n\n\"I know!\" Rose barked, making Ginger jump. She looked at me again and I only smiled for a moment.\n\nTaking Rose's hands off my arms, I held them in mine and drew her close. Her eyes kept flicking down to my groin, probably expecting something to pop out at any moment.\n\n\"I have a question,\" I said, glancing briefly at Ginger over my shoulder, then looking back to Rose. \"Do you believe in magic?\"\n\nRose blinked, and Ginger said, \"What?\"\n\n\"I do,\" I bounced my eyebrows at Rose, then promptly stepped out of the shower, snatching up my towel along the way.\n\nI actually managed to dry off and get my underwear and pants on before they came running out of the shower, practically tripping over each other. Rose nearly bowled Ginger right down to the floor, but Ginger managed to stay upright and keep Rose from going down too. They just froze in a really uncomfortable looking half-crouch, half-standing kind of pose, staring at me.\n\n\"What?\" I asked.\n\nIn unison, they squealed, \"What the fuck!\"\n\nI laughed, feeling oddly liberated.\n\n\"Well, now you know how Sarah and I have sex,\" I closed the clasp of my bra and shrugged into my shirt.\n\n\"But how...\" Rose began.\n\n\"...can you possibly have...\" Ginger picked up where Rose left off.\n\n\"...a cock?\" I finished for them, grinning, then I put my hands on my hips and stepped up to them. \"Tell you what. Why don't the two of you come over for dinner this Saturday?\"\n\nThey blinked at me.\n\n\"Sevenish?\" I asked, and when their mouths worked but nothing came out, I bounced up on my toes. \"Great! See you guys then!\"\n\nI spun about on my heel and left them to finish showering on their own.\n\nOkay, that was really damn fun.\n\nChapter 64\n\n\"You did what!\" Sarah laughed out loud, throwing herself back against the couch with her arms crossed over her stomach. \"You're fucking insane!\"\n\n\"I know!\" I plopped down beside her, leaning back and relaxing. \"Gawd, Sarah, it felt so amazing to just...to just let go!\"\n\nSarah smiled cheekily.\n\n\"What?\" I asked her with a grin.\n\nShe shrugged, scooting around to lean back against the armrest, arms still crossed over her stomach. \"I'm just happy to see you like this, comfortable with yourself.\"\n\nI closed my eyes and sighed, enjoying the feel of the warm thick length of me pressed against my thigh in my pants. I'd let my penis out the moment I'd gotten home. \"It feels great, Sarah.\" I looked at her and smiled. \"And you know what? I'm actually looking forward to telling Mom.\"\n\nShe bounced her eyebrows. \"I think you're just looking forward to showing more to Rose and Ginger.\"\n\n\"That too,\" I chuckled. \"Gawd, you should have seen them, Sarah. They were practically falling all over themselves to get a look!\"\n\nWe shared a laugh as I described the girls' reactions in detail.\n\n\"Now, what about Trevor?\" Sarah asked.\n\n\"I know,\" I nodded with a frown. \"He's going to be the toughest one to break the news to.\"\n\n\"I agree,\" she said, then asked, \"But I bet it's not for the reason you think.\"\n\n\"What do you mean?\"\n\n\"Well, the obvious problem would be if you're bigger than him. Guys don't handle that kind of thing well. But you're in the clear on that one.\"\n\n\"You think so?\"\n\nSarah smiled. \"When you're with me, anyway. He's almost as big as you. Not quite as long, but just as wide. It's actually why I almost...\"\n\nI grinned when she trailed off. \"Why you almost had sex with him?\"\n\nShe blushed and smiled. \"I like him. I really do. He's just such a sweet guy, and being hot doesn't hurt either.\"\n\nI laughed. \"No, it really doesn't.\"\n\nSarah sighed. \"I knew you wanted all of us to be closer. Both of us did. We talked about it, you know, Trevor and I.\"\n\nMy eyebrows went up. \"About having sex?\"\n\nShe nodded and sat up straight, fidgeting with her hands in her lap. \"Some things come naturally to me and Trevor. Like flirting? Gawd, we flirted all the time.\"\n\n\"I noticed,\" I said with a grin.\n\n\"But it was different when you weren't around,\" she told me, and she got a faraway look for a moment. I waited patiently for her to continue. \"We would still flirt, but it was less playful, more potential to actually go somewhere.\"\n\n\"Like when he gave you a massage in the shower,\" I said.\n\nShe looked at me and smiled. \"Yeah, like that.\" Then she frowned. \"It was really confusing for me, Amy. When it was just he and I, alone, I liked playing with him, touching him. We'd fool around, everything but sex.\"\n\n\"Did that happen a lot?\" I asked, because she made it sound like it was a regular occurrence.\n\n\"More or less, yeah,\" she shrugged. \"The thing is, every time we got close to crossing that line, close to finally doing it, it was like a bucket of cold water being dumped over me. I just wasn't interested in sex with Trevor.\" She raised an eyebrow at me. \"And believe it or not, he wasn't too comfortable with the idea of having sex with me either.\"\n\nI scrunched up my face with disbelief. \"Really?\"\n\n\"Oh yeah,\" she said, leaning back again. \"He told me he loved fooling around with me, but he was pretty sure the only way we'd ever do it was if he wasn't so committed to you. Since we were in agreement about not having sex, but we knew you wanted us to, we talked about it, about if we could do it, for you.\"\n\nI'd had no idea they'd talked about it so much, but it kind of explained their behavior, the little uncomfortable moments between them. At the time, I'd sworn those moments were because the two of them were trying to decide if they should finally take the plunge, and apparently, that's exactly what had been going on.\n\nSarah chuckled. \"After I got the strap-on, Trevor suggested I could close my eyes and pretend I was with you, and he could do the same, pretend he was with you too. Poor guy has no idea how faulty that plan is.\"\n\n\"Why?\" I asked, genuinely curious.\n\nSarah gave me a sultry smile, then she crawled over to me on her hands and knees on the couch, swung her leg over to straddle me, and she kissed me softly. My hands immediately found their way inside the bottom of her shorts and cupped her tight ass, pulling her groin down against mine. My length was rapidly swelling with arousal and straining against the leg of my pants.\n\n\"Because you feel nothing like a strap-on, baby,\" she breathed against my mouth.\n\n\"Are you sure?\" I asked, pushing her tight shirt up and off her, letting her big breasts spill out of her top with a lovely little bounce. I cupped her warm breasts in my hands and lightly tweaked both of her nipples, getting a cute moan from her. \"Maybe you should check again, just to be certain.\"\n\nSarah grinned, chuckled, and rubbed the tip of her nose against mine. Scooting back off the couch, she leaned over me and pulled my pants down my legs, taking my underwear with them, and tossed them to the floor. My hard cock sprung up from my lap to slap against my stomach. Sarah stood kneeling over me, her beautiful boobs hanging down, and took my shaft in her hand, pulling my length away from my body, then promptly took me into her warm wet mouth.\n\n\"Oh, yes,\" I hissed, digging my fingers into her hair, holding her head with both hands, pushing her down so that more of my throbbing prick slipped over her tongue and into her mouth. After the incident with Ginger and Rose in the shower, I was dying for release. \"More, Sarah,\" I gasped. \"Please.\"\n\nSarah slurped on the end of me for a moment, took a deep breath, and took me deep into her mouth. The dripping head of my cock touched the soft opening of her throat and she pushed. Her throat was so tight as her lips slipped down my cock, inch after long hard inch disappearing into her gullet. In this position, she couldn't take all of me like that, but she easily swallowed two thirds of my thick pole. With my dong deep in her throat, Sarah bobbed her head up and down a few inches, fucking me with her mouth until her thick saliva coated me.\n\nI could have let her do it all night, but I wanted more, needed more. Curling my fingers in her hair, I lifted her up and off my twitching tool, thick strands of spit anchoring the tip of my pre-slicked cock to her full lips.\n\nStanding up, I wrapped my arms around her and kissed her deeply, my dick thudding against her belly and leaving a slimy trail of arousal across her skin until it was pressed between us. I turned us around so that her back was to the couch, then fell to my knees to inch her shorts down her legs. She lifted her foot out of her shorts, and when she did the same with the other, her glistening mound revealed itself to me. I hooked her leg over my shoulder and closed my mouth over her slick sex, licking right up her folds and giving her swollen clit a gentle suck.\n\n\"You're so good at that, baby,\" Sarah cooed, hands in my hair as I feasted on her mound, sucking and licking, kissing and nibbling. \"Gawd, I love the way you eat my pussy.\"\n\n\"Mmmm,\" I moaned, delighting in her sweet taste, her heady aroma, the warmth of her body. I loved foreplay with Sarah, but I could tell there wasn't going to be much of it tonight. A frenzy was building up between us, and fast.\n\nI felt Sarah lean over me and grab the hem of my shirt, and when she began to pull it up my torso, I leaned away so that she could finally strip me naked and toss the shirt away. Every inch of my body quivered with arousal and need, an intensity I only ever felt for her. I stood up and grabbed her ass, picked her up off the floor. Sarah yelped with surprise and wrapped her arms and legs around me and kissed me.\n\nFeeling my way around, I crawled up onto the couch on my knees with Sarah in my arms, my hard shaft rubbing against her slippery folds. When I pressed her against the couch, Sarah spread her arms wide along the back of it for support. I heaved her up, letting my aching cock spring up from under her, and found her wet center. Lowering my arms, I eased my thick dick into her tight cunt.\n\n\"Hohhshit,\" Sarah groaned, tossing her head back as my cock spread her insides apart, forced her open to accept me deep into her body.\n\nWith her feet on the couch cushions, I held her hips and began pumping my my thick cock in and out of her. Sarah's upper body was arched way back, her beautifully full breasts thrust up into the air.\n\n\"Fuck me, Amy,\" she groaned, gyrating her hips, massaging my aching length with her hot velvety sleeve.\n\nI plowed in and out of her, fucked her faster and harder, but I couldn't get as deep as I wanted in this position. Sliding a hand up her back, I pulled her towards me and inched forward on my knees, crushing her against the cushions, forcing her upright, and when I let her body down, every last hard inch of me squeezed inside her.\n\n\"Oh my fucking gawd,\" she whimpered, shivering against me, her hot little pussy fluttering around me, squeezing and sucking me inside her.\n\nWrapping my arms tightly around her waist, I held her in place and moved only my hips, fucking her hard and fast, so deep, her body so perfect against mine. Our groins slapped against each other every time I fucked myself to the hilt into her heavenly cunt.\n\n\"So good, baby,\" Sarah cooed, her head leaning over mine, her arms around my neck, hugging me to her chest. \"So fucking good.\"\n\n\"You're so tight, Sarah,\" I told her, pumping my hips, senses swimming in her scent, the sounds she made, the feel of her.\n\n\"I'm yours, Amy,\" she told me, clawing at my shoulders, shuddering. \"My pussy is yours, my ass, my mouth.\"\n\nI shivered, fucked her harder, faster, thick cock slashing in and out of her noisily, the sound and scent of sex filling the apartment. A knot formed in my belly, tight and tighter, threatening to release in an explosion of heavenly bliss.\n\n\"I belong to you,\" she hissed, thrusting her hips as best she could to fuck me back. \"Every part of me.\" She tightened her arms around my neck and I felt her insides quiver around my twitching cock. God, I loved it when she was submissive like this. When she spoke again, it was fast and breathless.\"Fuck me, Amy. Use me. Take me for your pleasure. Use me to make yourself come.\"\n\nThe knot snapped. \"Sarah!\"\n\nShe groaned from low in her chest, body shaking with a powerful climax.\n\nThick cum burst from the end of me, pulsed deep inside her, and still I fucked her. My spurting cock plowed her open, forceful strokes that nudged my cock against the back of her cumming cunt. I filled her with hot jizz, held her body tight, threw my head back with a groan and jammed every inch of me into her tunnel until the last of my spend was inside her, too much for her tight hole to contain, pouring down between my legs.\n\n\"Jeezus, baby,\" Sarah sighed when it was over, going limp in my arms, pressing feathery kisses to my brow. \"That was fucking amazing.\"\n\n\"Uh-huh,\" I whimpered in agreement, burying my head between her breasts.\n\nThe warmth of her and scent of her skin was unreal, a drug to my senses. I kissed the valley of her breasts, delighting in the taste of her sweaty skin.\n\nSarah chuckled, \"Those girls really did a number on you, didn't they?\"\n\n\"Yeah,\" I sighed, kissing my way over one of her breasts, felt her stiff nipple against my lips, and sucked it into my mouth.\n\nSarah hissed and held my head to her breast. My cock twitched inside her cum-drenched sheathe, and before I knew it, I was fucking her again, but slowly this time.\n\n\"More?\" she asked.\n\nI leaned back to look up at her, gazing down at me in lust and wonder. She was so beautiful, so amazing, so very perfect, my Sarah.\n\n\"Always.\"\n\nChapter 65\n\nOnce again I was standing in Jean Pierre's immaculately white office, watching him from the other side of his desk as he stared at the huge screen, shots from my session with Christine flicking by frame by frame. This had been going on for almost fifteen minutes now, and he hadn't said a word yet. Every now and then, Jean Pierre would mutter something under his breath in French, and maybe, if I was lucky, he would nod or shrug a shoulder. In his typical fashion, he hadn't invited me to sit down either, so I remained standing between two very comfortable looking chairs.\n\nThe lost shot faded to black, and finally, he came around the desk to stand in front of me, clasped his hands behind his back, and gave me a level look.\n\n\"Is not shit,\" he shrugged.\n\nNot shit? Not shit!\n\nThen he smiled, threw his arms out and wrapped me up in a hug. \"Is incredible!\"\n\n\"Really?\" I asked.\n\nChristine had been a royal bitch to me, but during the shoot, aside from the occasional snide look, she had actually been quite professional. I was really proud of the results of the shoot, but still, Jean Pierre totally caught me by surprise.\n\n\"Magnifique, dear child,\" he said softly, still holding me and rocking gently side to side. \"Magnifique. And while I wish to say don you dare leev us a'gan,\" he almost whispered, leaning back to cup my face in his soft hands. He shook his head. \"Sadly, dis will not be de case.\"\n\nI wasn't sure what he meant at first. That I won't be leaving won't be the case? Wait, so I was leaving?\n\n\"Am I being fired?\" I kind of choked out.\n\nJean Pierre laughed and dropped his hands to my shoulders, giving them a squeeze before he went back to his side of the desk. \"Non. Clarisse has already seen dis latest work of you.\"\n\nBefore I could ask him to clarify that, he smiled cheekily. \"You, Amy Carter, are going to shoot for Armia.\"\n\nMy mouth fell open.\n\n\"Armia?\" I breathed.\n\n\"Oui.\"\n\n\"I'm shooting for Armia?\"\n\n\"Oui!\" he squeaked with delight.\n\n\"I'm shooting for Armia!\" I practically screamed, and I couldn't contain my excitement.\n\nI threw myself at him again, hugging him tightly. He just lifted me right off the floor and twirled me around in his arms, laughing. This was a huge opportunity for me. Massive. Ginormous! No, it was un-fucking-believable!\n\nWait, that meant...\n\nWhen my laughter died down, Jean Pierre set me back down, and I just looked at him through teary eyes.\n\n\"W-what about my work here?\" I stammered.\n\nHe smiled sweetly and took both of my hands in his. \"I am sure Clarisse will loan you to me now and den.\"\n\nThat did make me smile, but it didn't stop the tears from spilling over. This was my first real job doing what I loved, and I'd learned so very much here, made good friends too. Well, work friends, anyway. You know the difference, I'm sure. But still, they were important to me.",
        "\"Amy,\" Jean Pierre said, squeezing my hands. \"Dis is a wonderful opportunity for you. Would be foolish to pass up.\"\n\n\"I know,\" I nodded, taking one of my hands back to wipe at my eyes.\n\nJean Pierre gave me the handkerchief from his suit jacket, despite there being a perfectly good box of tissues on his desk - albeit surrounded by a white marble container, naturally. It was such a simple thing to do, harmless really, but such a sweet gesture that I started crying again. I hugged him with one arm, and he hugged me back, hanging his head down beside mine. I kept the hanky pressed to my face so that I would ruin his suit.\n\n\"I am so very proud of you,\" he said softly, rocking me again. \"You have learned to fly here, but eet would not be right to cage you.\" He leaned back and held my shoulders, shook his head and looked at me with a kind of wonder. \"What you did with Christine...eet was merveilleux, wonderful.\"\n\n\"Thank you,\" I choked out through a smile, and not wanting to make a mess of his hanky, I grabbed a tissue and blew my nose.\n\n\"Besides,\" Jean Pierre grinned. \"I have seen you with Rose lately, and you know my rule.\"\n\nI grinned back. \"No fucking...\"\n\n...ze models.\" He finished with me, smiling happily.\n\nWe laughed and hugged.\n\nJean Pierre walked me out of his office, again telling me how proud he was of me, and how much he was going to miss me. Apparently, he snuck around the sets during the shoots, because I'd had no idea how much he enjoyed watching me and the girls flirt back and forth with each other.\n\nHe also told me to see Darren for the details on my first shoot at Armia. After we parted ways outside his office, I headed for the floor to find Darren. Only when I saw him did the gravity of what Jean Pierre had said hit me. There was only one reason I would be seeing Darren about my first shoot at Armia.\n\nHe saw me coming, smiled widely and caught me in his arms when I leapt into them. Much as Jean Pierre had done, Darren twirled me around in his arms, laughing. He set me down and I stepped back, grabbing his arms.\n\n\"You're coming with me, aren't you?\" I asked.\n\nHe nodded. \"J.P. didn't want to split us up, told Clarisse we were a package deal.\"\n\nI squealed and hugged him again.\n\n\"What you are two prisses so happy about?\" came Christine's snooty voice.\n\nI took a step away from Darren to see her looking at us, arms crossed under her breasts over her robe, hip pushed out to one side, looking supremely arrogant. Letting go of Darren, I calmly walked over to her. Christine actually leaned away a little bit when I got close, and she almost jumped when I suddenly hugged her tightly.\n\n\"Christine, you can be an incredible bitch,\" I said softly, hating her and not at the same time. She stiffened against me, and I heard her take a breath, probably to make a snotty retort, but I didn't give her the chance. \"But you are amazingly beautiful, wonderful to shoot, and I have to thank you.\"\n\nJust before I stepped back, she relaxed against me, but only a little. She just stood there for a moment, staring at me. I'd spoken truthfully, from the heart, and I think Christine was trying not to believe me. Then she looked at Darren.\n\n\"What's going on?\" she asked him.\n\n\"Amy just got picked up by Armia,\" he grinned. \"And I'm going with her.\"\n\n\"Have you seen the shots yet?\" I asked her.\n\nChristine turned her stunned eyes on me and gave a slight shake of her head.\n\n\"They're beautiful,\" I told her, fixing her with my gaze, and I felt myself blushing. \"Thank you, again.\"\n\nChristine just blinked at me, but finally said, \"S-sure. No problem.\"\n\n\"Come on,\" Darren said, taking my arm. \"Let's go break the news to Rose.\"\n\nIt didn't take us long to find her, and when we did, she practically screamed the news across the building, she was so excited. I think she was happy that we'd be working together more often now, since most of her time modeling was spent with Armia these days.\n\nDarren and Kara got permission from Jean Pierre to take a group lunch, and just about everyone piled into cars and stormed an Italian joint that was a local favorite. Darren and Rose sat on either side of me throughout lunch, and Rose had her arm around me most of the time, hugging me to her side every few minutes, it seemed. Eventually, they had to go back to work, but I was done for the day, according to Darren.\n\n\"So, what can you tell me about our next shoot?\" I asked him as he slipped his light jacket on.\n\n\"Our next shoot?\"\n\n\"Yeah,\" I smiled and bumped his hip with mine while walking through the parking lot to his car, Rose on the other side of me. \"You're my wingman.\"\n\nHe chuckled. \"So long as you're not trying to pick up a girl. But a guy, now that's something I can help you with.\"\n\n\"Speaking of, how is the sasquatch doing?\" Rose asked.\n\nWe shared a laugh at the rub. Darren's boyfriend was notoriously hairy, and Rose was constantly teasing him about it.\n\n\"He's just fine, thank you very much,\" he swatted her on the ass, making her dance away, then he turned to me. \"I'm still ironing out the details of the next shoot, but I think you'll be pleasantly surprised.\"\n\n\"Yeah?\" I smiled.\n\n\"Definitely,\" he nodded.\n\nWith nothing else to do for the afternoon, I went home to an empty apartment, stripped out of my clothes and threw on a fluffy robe, then plopped down on the couch with my cell phone. There was someone I wanted to share the news with.\n\n\"Hello?\"\n\nI smiled at the sound of Trevor's voice. \"Hey, baby.\"\n\n\"Hey yourself,\" he replied, and I could tell he was smiling too.\n\n\"You're never going to believe what happened today,\" I said, and I told him about moving to Armia.\n\nTrevor was thrilled. Both he and Sarah knew that Armia was where I wanted to work in the first place. He couldn't have been happier.\n\n\"I miss you,\" he said softly.\n\nI sighed and swung my legs up onto the couch so that I could lie down. \"I miss you too.\"\n\n\"Yeah? How much?\"\n\nI grinned and toyed with the tie on my robe. \"Well, do you have any idea how long it's been since I've had a nice hard cock in me?\"\n\nTrevor laughed, a deep masculine sound that made me shiver. \"Actually, I know precisely how long it's been, seeing as how I've been counting the days.\"\n\nI missed him on an emotional level, certainly, but it seemed my body was missing him more than my heart just then, because I asked him, \"Do you miss my little pussy too?\"\n\n\"Shit, yes,\" he groaned then he said, \"Wait a minute. Don't you two still have that strap-on?\"\n\n\"Yeah, but Sarah's more a receiver than a giver in that regard,\" I told him. Technically, it was the truth, since she didn't have a cock, and I did. Of course, I left that part out.\n\n\"Are you alone right now?\" he asked.\n\nI grinned. \"Yes. Why?\"\n\n\"Because I think you should go get your friend.\"\n\n\"Trevor!\" I teased him, pretending to be shocked. \"Are you suggesting that I have phone sex with you?\"\n\nI could hear the grin in his voice. \"Are you saying you don't want to?\"\n\n\"I totally didn't say that,\" I giggled.\n\nI bounced up from the couch and got my big and trusty floppy dildo from the dresser. I mean, come on, using the strap-on on myself seemed rather redundant, you know, with me being a dickgirl and all. I almost grabbed the bottle of lube that Violet left over, but I could feel myself getting warm and wet, so figured I wouldn't need it. But, just as I turned around, I got an idea and grabbed the lube anyway.\n\n\"Okay,\" I said into the phone, flopping back down on the couch with my robe open. \"I hope you have some lube at hand, Trevor.\"\n\n\"You could say that,\" he laughed, but there was a breathless note to it.\n\n\"Hey, did you start without me?\" I asked.\n\n\"Uh, n-no, why?\" he replied rather quickly.\n\n\"You did!\" I teased him with a huff. \"Fine. I'll just have to catch up.\"\n\nThe thing was, picturing him with his hand wrapped around his hard length, stroking up and down his shaft, glistening with lube, it wasn't going to take me long. My belly tightened, and when I reached down to spread the lips of my pussy open, I found myself hot and soaking wet. Only then did I notice how fast I was breathing, how hard my heart was pounding in my chest.\n\n\"Sounds like you already have caught up,\" Trevor chuckled.\n\n\"Yeah, maybe,\" I nodded, forgetting that he couldn't see it.\n\nI was about to lube up the dildo that had gotten me through so many lonely nights before Freyja's magic had come into my life, but I was pretty sure I didn't need it. Lining up the fake dong, I felt myself opening up to the big head of it. I eased it in, arched my back at the feel of it stretching me open so wide, my cunt clamping down on its somewhat spongy girth.\n\n\"Holy shit, Trevor,\" I hissed, feeling the fat fake cock rub right over that spot deep inside me, pressing up against it deliciously. \"Oh my fucking gawd, this feels good.\"\n\n\"Is it stretching you?\" he asked breathlessly. \"I know how tight you are, like you're squeezing me with your hand.\"\n\n\"It's big,\" I nodded to myself, arching my back again with another groan when the end of the big dildo found the end of me, filling me completely. \"But not hard, like you.\" Slowly, I dragged the thick dick out, until it almost fell out completely, then pushed it back in. \"Harder is soooo much better.\"\n\n\"You have no idea how hard I am right now,\" he groaned, and I could faintly hear his hand working his lubed cock now.\n\n\"Trevor,\" I hissed, cramming myself full of fake dick and keeping it there. \"Do you have your laptop?\"\n\n\"Why?\" he sounded confused.\n\nI grinned. \"Pull up your favorite porn.\"\n\n\"Okay,\" he laughed, and he rummaged around frantically for a minute or two.\n\nI waited patiently, working the dildo in and out of my clenching cunt. Then the elevator groaned its way up from the lobby. I almost laughed, realizing Sarah was home early. Trevor was still getting his porn ready when she stepped into the apartment and the elevator closed behind her. I couldn't see her, lying on the couch as I was, but I heard her walking over, dropping her bag and backpack along the way, then she came around the couch. Sarah raised an eyebrow at me and grinned.\n\nI smiled up at her and said, \"Trevor and I are having phone sex.\"\n\n\"Sarah's there?\" Trevor asked, and he sounded kind of panicked.\n\n\"She is now,\" I giggled, then promptly shut up when Sarah starting stripping out of her clothes. \"And I think she wants to fuck me.\"\n\nTrevor laughed. \"Good thing you have that strap-on, huh?\"\n\nI didn't answer him, what with being a bit preoccupied by Sarah's perfect breasts bouncing out of her shirt, her smooth mound coming into view when her pants fell to her ankles. Taking off her shoes, she pointed between my legs and mouthed the word 'cock'.\n\nI nodded and she grinned at me, tossing her shoes away.\n\n\"Okay, I'm ready,\" Trevor finally said.\n\n\"Are you looking at dickgirls?\" I asked, pulling the dildo out of me with a wet squelch.\n\n\"Yeah,\" he chuckled.\n\nSarah turned her back to me and bent over, reaching behind her to pull one of her ass cheeks aside, showing me how wet she was already, and giving me the hottest 'fuck me' look over her shoulder. I sat up on the couch with my feet on the floor, legs slightly spread. Sarah spread her legs too, then she folded her upper body down against her legs until she was upside down, looking at me from between them, muscles strained and beautiful.\n\nJeezus, I'd forgotten how limber she was.\n\n\"Tell me what they look like,\" I told Trevor.\n\n\"Beautiful,\" he said, almost reverently, and his hand was working his cock again, a faint slippery sound in the background. \"So perfect, so feminine, but so much more.\"\n\nWith a thought, and a loud moan that I couldn't hold in, my cock pushed through my hot pussy, speared out of my folds and slapped hard against my stomach, wet with my arousal. Strange thing was, it hadn't hurt at all. I glanced down past my breasts to see my thick length throbbing against my stomach, the head past my navel. A great dollop of glistening pre oozed out of the tip to pool on my skin, with another right behind it.\n\n\"You like looking at chicks with dicks, don't you?\" I asked, scooping up the warm precum with my hand and spreading it around the end of me while Sarah backed up towards me.\n\nRealizing what she had in mind, I scooted my butt forward until I was perched right on the edge of the couch, spreading my legs wide to push the dildo back inside me, then I closed my legs, trapping it there. Sarah straddled my legs, still standing, and put her hands on my knees.\n\n\"Yeah, I do,\" Trevor said quietly.\n\nMy girldong spit more precum into my hand, and I spread it down my length. Holding my cock, I put a hand on Sarah's bottom and guided her down, fit the fat end of me at her opening, and guided her down.\n\n\"Fuck, baby,\" Sarah breathed, too quiet for Trevor to hear.\n\nHer hot slippery cunt gulped me right inside her, spread over the end of me, silken folds so hot, so tight.\n\n\"You like how hard they are?\" I asked Trevor, watching as Sarah lowered her behind, swallowing inch after hard inch of me with her eager pussy.\n\nHe hesitated for a moment, but said, \"Yes.\"\n\n\"Would you fuck one, Trevor?\" I asked him, putting both hands on Sarah's behind to push her up and down my thick dong. \"Would you fuck a dickgirl if she asked you to?\"\n\n\"Amy...\" he hissed.\n\nSarah leaned forward a little more, giving me an even better view of her hole stretched so tightly around me. I'd never had this point of view before, never realized how very much I filled her, how close I was to being too big for her, so thick that her outer labia were pulled in just a little when my cock pushed inside her, and just a little more shimmering pink appeared when my thick length dragged out. All the while my cunt was squeezing the dildo inside me.\n\n\"They need it too, you know,\" I told Trevor, and he had no idea how very truthful I was being just then. \"They're as much a woman as any other, and they need a good fuck just as much as the next.\"\n\nAnd it really was the truth. I loved having sex with my cock, but I still wouldn't argue against what Violet would call a good deep dicking either.\n\n\"Would you, Trevor?\" I asked, almost pleaded as my cunt clamped down on the dildo so hard that I worried it might rocket right out of me, and to add fuel to the fire, my cock throbbed inside of Sarah. \"Would you fuck a dickgirl?\"\n\n\"Jeezus, Amy,\" he grunted.\n\n\"Would you fill her with your hard cock, baby?\" I cooed, feeling my thick dong swell inside Sarah. My gaze was fixed to the lovely lines of her back and shoulders, muscles corded beneath her flawless skin, her perfect ass bouncing up and down, her tight gash swallowing me whole with every hard plunge. \"Would she have to beg, plead for your dick inside her, your cum filling her?\"\n\n\"Fuck,\" Trevor groaned.\n\nI was so close. So fucking close.\n\n\"Gawd, Amy,\" Sarah hissed, and I felt her warm wet walls flutter around me.\n\n\"Come for us, Trevor,\" I told him, and he groaned loudly. \"Come for Sarah.\" And what I said next shocked even me. \"Come for your dickgirl.\"\n\nTrevor let loose a roaring grunt. \"Fuck!\"\n\nAnd that just flat did it for me. I held Sarah's butt tight and slammed her down, spearing her with every inch of me. Something inside me exploded, my cock lurched hard, swelled up so much that there was simply no room left inside of Sarah. Hot cum spewed out of me in what felt like a constant stream that lasted a full second, and Sarah screamed.\n\nI could hear Trevor grunting through the phone, could hear Sarah grunting above me. Her hot cunt milked my erupting length. Warm goo spurted forcefully out of the tight seal where our bodies were joined, spraying messily over my groin, so much thick cum that it splattered up my belly and poured over my hips.\n\nAnd that was just the beginning.\n\nMy cock fired again, only the mess it made this time was unreal, backflowing so hard and fast from Sarah's overstuffed pussy that some of the white goo actually made it up to my boobs.\n\n\"Fuck, fuck, fuck!\" Trevor grunted into the phone.\n\nI pulled Sarah down, kept her ass pinned against my thighs while I ground my cock into her, pumped so much cum inside her that I felt it pooling thickly beneath me on the couch, spilling over the edge, spreading along the floor around my feet.\n\nMy vision swam, dark spots blotting out the apartment, and still I came. I was dimly aware of my hands falling from Sarah's behind, of her leaning back against me, grabbing my hands and pulling my arms around her waist while my aching dick spewed over and over inside her, splatting loudly on the couch and floor.\n\nI don't think I was out very long. When I came too, Sarah was walking around the couch with a tall glass of protein shake. Besides the fact that they helped speed along my recovery, and build back up the muscle that I'd lost over the months, they also had the distinctive benefit of a very rapid recovery from explosive orgasms, like I'd just had. I mean, come on, you can't spew out as much cum as this and not need to replace your fluids.\n\nSarah had my phone to her ear too, and she was talking to Trevor while she set down the glass on the coffee table and offered me her hand.\n\n\"You should have seen it,\" she chuckled, helping me sit up on the cum-drenched couch, then handed me my shake. Taking the phone away from her ear, she put it on speaker-phone mode.\n\nTrevor's tired voice came through the phone, \"I don't exactly see how you can fuck her unconscious with a strap-on, especially if you're the one on the receiving end.\"\n\nSarah chuckled again, hands on her hips as she flicked her gaze down to my messy groin, still slick with so much jizz. My girl dong lay long, thick, and limp over my thigh, slimy and bloated, the end of me lying in a small pool of white.\n\n\"Magic, Trevor,\" she said, smiling down at me.\n\nShe could have pointed out that the strap-on was double-ended, and thus pleasured both the giver and the taker. Instead, she let the truth kind of hang out there silently.\n\n\"Did you have a good cum, Amy?\" Trevor asked, and I could hear his smile.\n\nI looked around me, the couch soaked with spooge - that would be a bitch to clean up - and my body a mess of gooey jizz. I was thickly coated in the stuff from my thighs up to my lower abdomen, and heavily spattered up to the top of my chest.\n\n\"You could say that,\" I snickered.\n\n\"How about you, Sarah?\" he asked.\n\n\"Uh-huh,\" she smiled, then smoothed her hands up her body, sweat and cum mixing over her stomach and breasts. She caught her nipples between her thumbs and fingers and gave them a little tweak. \"I don't think I'm done with our girl though.\"\n\nTrevor said something, or asked something, but I didn't catch it. I was too distracted by my thick dong, which was rapidly filling with blood and rising up from my thigh. I was a little over half-hard when Sarah stepped up onto the couch and stood over me, then bent her knees and grabbed the back of the couch with one hand, using the other to grab hold of me.\n\n\"You can't get enough, can you?\" Trevor asked her, chuckling.\n\nMy dick was still hardening, but Sarah wasn't waiting. She crouched over me, fit the spongy tip of me at her opening, held onto my shaft, and lowered her hips. Her gooey cunt spread over my cockhead, snapped tight around the crown, then slowly gobbled up my long shaft.\n\nMy head fell back and I groaned at the feel of her, so warm and snug. With her feet on the couch and her legs spread, I could see the soft lips of her heavenly little pussy splayed wide around the very root of me. Her eyes were closed and her mouth was open in a cute O. Sarah smacked her lips and rotated her hips a little, massaging my hardening length with her hot fleshy sleeve.\n\nShe opened her eyes and gave me a dreamy look, finally answering Trevor. \"I'll get enough eventually.\"\n\n\"Are you fucking her again?\" he asked.",
        "\"Nope,\" Sarah shook her head, flexing her insides, squeezing me with her sopping heat. She gave me a sly grin. \"But I've got her big cock stuffed way up inside me.\"\n\nI smiled and shook my head at her.\n\nTrevor snorted. \"Bet you wouldn't mind if she was a dickgirl.\"\n\nSarah raised an eyebrow. \"Now wouldn't that be the most perfect thing in the world?\"\n\nMy eyes went wide at the conversation. I was almost fully erect by that point. It was taking a while, given how hard I'd come so recently, but Sarah's clasping cunt was speeding me along.\n\n\"Really now?\" Trevor asked with a masculine chuckle.\n\n\"Absolutely,\" Sarah said, leaning forward a little to put both hands on the back of the couch. I set my hands on her sweaty hips and lovingly smoothed them up her sides and back in to cup her breasts. Meanwhile, Sarah lifted her hips, dragging my almost fully hard cock out of her, only to lower her eager cunt down every thick inch of me.\n\n\"Think about it, Trevor,\" Sarah said, slowly fucking me, my now fully erect length spreading her wide and spearing deep into her perfect body. \"She's so beautiful, our Amy.\" She cocked her head and gave me a dreamy grin. \"Think about how much you love fucking her, being inside her, hearing her come for you.\"\n\nShe was really fucking me now, slowly lifting her tight folds up my length and quickly dropping back down.\n\n\"Are you trying to make me jerk off again?\" Trevor laughed, but his voice was strained.\n\nSarah didn't answer him. \"Are you thinking about it, Trevor, about how much you love Amy's body, how much you love her perfect little cunt?\"\n\nSpeaking of which, I was leaking girl juice all over the couch. I could feel myself literally dripping with arousal, and it was only then that I realized the dildo had come out of me at some point, probably when I passed out.\n\n\"Yes,\" Trevor said, voice low and deep.\n\n\"Now imagine her with a nice big thick cock,\" she said, putting a lot of emphasis on that last word. \"A cock only a dickgirl can have.\"\n\nHer hips rose and fell fast and faster, smooth groin slapping lightly against mine. She was so wet that she rode me with ease, but she was still so very tight.\n\n\"Imagine what the three of us could do, Trevor,\" Sarah said breathily, muscles straining, tits bouncing in my hands with every thrust of her hips, nipples so swollen between my fingers.\n\n\"Jeezus, Sarah,\" Trevor groaned.\n\n\"Should could fill me up so nicely,\" she told him, her brow pinching with concentration while my breathing sped up and a knot formed inside me. \"And you could be there, be with us, fucking her while she fucked me.\"\n\nHe groaned again, much louder.\n\nMy cock throbbed inside Sarah, and despite the messy climax I'd just had, another was building up inside me, fast.\n\n\"I want that, Trevor,\" Sarah said, looking at me dreamily again, and I felt her insides grow hotter, wetter, flutter around my swelling pole. \"The three of us, all cocks and cunts, fucking and sucking and licking, a bundle of limbs and sweaty bodies, coming for all we can.\"\n\nWithout missing a beat, Sarah rose up until just the bloated tip of me remained inside her clasping sheath, then she slammed down, fucking onto me so hard that the end of me nudged against the back of her slippery cunt.\n\nTrevor came again in a series of shouting grunts. Sarah pressed her forehead to mine and wailed with release, and my cock spit a second fiery load of thick cream into her climaxing cunt. When it was over, yet more jizz had pooled on the couch around my butt. Not nearly as much as before, but certainly enough to add to the mess.\n\nSarah just sat there on my lap, gooey cunt milking my softening penis, her panting breath warm on my face. I felt her give me a sweet kiss on my nose, my closed eyes, then my mouth. When she drew away, she gave me a supremely satisfied but sleepy smile.\n\n\"Imagine that, Trevor,\" she said, still catching her breath, cupping my cheek with her hand. \"Imagine how wonderful it would be if Amy was our dickgirl.\"\n\nTrevor chuckled and said, \"What dreams may come, right?\"\n\nI smiled up at her, amazed by how clever she could be, that in a way, she'd just convinced Trevor that me having a cock would be okay. No, better than okay. Hot.\n\n\"Exactly, Trevor,\" she breathed, giving me a slow but deep kiss. \"Exactly.\""
    ],
    "authorname": "redskyes",
    "tags": [
        "futanari",
        "futa",
        "freyja",
        "magic",
        "romance"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/strange-days-ch-61-65"
}
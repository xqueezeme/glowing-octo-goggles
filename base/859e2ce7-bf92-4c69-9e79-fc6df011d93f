{
    "title": "Billionaire and the Sisters Ch. 105",
    "pages": [
        "A note to readers: This is a long story that unfolds chapter by chapter through the eyes of two protagonists - Mark and Elsa, and as in many of my other stories involves a growing spate of horny characters. This story could appear in a number of genres (Loving Wives, Incest, Lesbian, Fetish, and more) depending on the chapter, but the overall theme is Group, so I have applied this moniker to all chapters. Enjoy.\n\n<center> Chapter 105 - New Playmates. Story Concludes</center>\n\nMark\n\nThe summer of that year became a blur with many good things happening to and within the family. The family grew and got ready to grow even further.\n\nOn the business side we formally announced to the world GCT - Gigabyte Cellular Technology. We couldn't answer the calls for equipment fast enough. We rushed a new manufacturing plant online, and coopted the manufacturing capability from a couple of other lines, both domestically and in China. Customers of regular cellular services from companies like Verizon, T-mobile, and AT&T almost mutinied and mobbed their providers to get hold of the high-speed cellular connections. The FCC was inundated with complaints that their carriers were holding back the greatest invention to mankind ever. Congress got involved. Verizon was the only provider that had a roll-out plan in place. The others had conveniently gone into a state of denial over the rather public tests that we ran in the city and on St. Croix, and had started to pay the price for their short-sightedness. Our lawyers started to work on licensing agreements with the other carriers.\n\nFurther, all of our patent applications were awarded for both GCT and for the Lithium-Air-Thallium battery technology. We weren't anywhere near as ready to take The LAT Battery to market, but we had the patents to protect our developments. I gave a one million dollar after-tax bonus and a promotion to Nat Sterling, the young engineer who had perfected the technology and brought it to fruition in one of Worthington Industries R&D labs. He was astounded and word traveled in the company that we reward great inventions and great thinking. I couldn't have wished for a better cultural message to get loose in my company.\n\nOn the family side of my life, many more things happened. Tom and Julie decided on a New Year's Eve wedding. She'd be about seven months pregnant by then, and as she put it, \"I want to make sure the baby bump shows in all my wedding photos.\" She had such a positive attitude about everything. Her parents were still trying to get used to the mores of our family, and the wedding with continued relations with us just flummoxed them.\n\nCindy got pregnant too. We didn't worry too much about paternity, but she thought it might be Matt, Ryan, or me, since the timing would have been about right. She wasn't due until the following April or May.\n\nWe had three of our no holds barred sex parties over the summer with the usual crazies, plus some new and noteworthy guests who started to hang out with us more and more even when we weren't having a formal party.\n\nElsa invited Skye to the first party and told her she could bring a guest if he was as broad minded about sex as she appeared to be at the prom party. Predictably and as hoped for by Elsa, Skye brought her brother Derrick to the first party, and her father Jack to the second party. The third party she brought both of them. They were both broad minded, and also proved to be extremely nice additions to the mix of people, both socially and sexually according to the women they romanced during those evenings.\n\nElsa also invited Darby and Frank Winters to the party. Darby also asked and got permission for her mother Joyce to come along. Elsa explained to me that she had encouraged the father-daughter relationship, and had also initiated her daughter into a different kind of mother-daughter relationship too. Darby had told Elsa that she loved the incestuous bisexual relationships, and never wanted them to end. After the first group sex party she'd ever been to, other than on her prom night, Darby also never wanted the party invitations to end. The Winters talked to Elsa about having an open marriage as well, and Darby was quickly onboard with that lifestyle. I could only imagine how popular she'd be on her college campus once she got 'discovered' as a horny and free-wheeling freshman girl.\n\nI worried about the new comers and how they'd fit in, but it was for naught. Darby's mother Joyce sought me out and we made love. She requested and got The Experience too, and I had another devotee to me and our group. She was slightly older than me, but had gone all out to maintain her girlish figure. She was one hot MILF, built like a brick shithouse as the saying goes, and she wanted Darby to turn into one eventually as well. The extra woman from the Winters family was balanced out by the extra man from the Brookes family after both Derrick and Jack started to attend our parties.\n\nFurther, Elsa's friend from the Club Infinity, Matt Henderson, had become a feature in the family just the way the other men had, and he was a full participant in our parties, carefully pleasing one woman after another in his own style. His presence at our parties was quite welcome. He was popular not only as a lover, but also as an urbane and gracious professional man with a great sense of humor.\n\nThe best addition over the summer, however, became the new presence of three newly legal eighteen year olds: Tori, Darby, and Skye. There were a troika, and were rarely seen apart. Fortunately, they all loved coming to the condominium or The Meadows, so were usually available for our every-evening adventures that still became overtly sexual. They loved our family and the sex, so fit in exceptionally well.\n\nThe three girls decided together to attend City University, which meant that they would continue to be with us in the future. They were all smart and had each taken several AP courses in high school, so started with some type of leg up on college credits and the ability to skip some of the entry-level freshman courses.\n\nPerhaps it had to do with giving The Experience to the girls, but I often found Darby and Skye questing for me as a sex partner when they were staying overnight - and that was most nights. Even when they hadn't been my evening's partners, I'd sometimes awaken in the middle of the night to find one or both of them naked and snuggled up against my own nude body. Such discoveries often led to some memorable middle-of-the-night sexcapades next to my sleeping brothers and sisters. \n\nTori always wanted to be included in the mix, and I came to think of her as one of the sisters rather than Kate's daughter. Increasingly, the three teens discovered their own attraction for each other. It wasn't exclusive nor lesbian, for they still more often than not sought out the males in the family or our guests for a rendezvous. When others were busy, as the sisters had discovered, they could make beautiful love with someone of the same sex and in the same age group.\n\nWe had a few guests over the summer as well - relatives of family members. Deke's younger brother Josh came to visit from the state or Washington. He was a good-looking man in his late twenties, but hadn't been clued in to the lifestyle Deke and the family led. Thus, he was surprised to find the busy familial atmosphere the afternoon of his arrival. We had almost everyone present including the toddlers and babies. He gradually learned that Deke 'lived' with all these people, but the extent of what that meant was not yet evident.\n\nOne by one each of the women in the family, including the sexy teens, went to Josh to welcome him to The Meadows where we were that weekend day. He was agog about all the hugs and kisses, but still didn't catch on to things. After a barbecue dinner and bedtimes for the kiddies, some of the adults started to get amorous. Josh watched a few of the pairings as they migrated from sharply dressed to increasing states of nudity, and then outright fucking in shaded and dim corners of some of the public rooms or out on the patio. No one else thought that was unusual, but he couldn't keep his eyes in his head.\n\nThings further advanced when little June went and started to make out with him. Josh was sort of going along with things, but still not certain where the arc of the evening would go. June helped clarify that gradually by having Josh remove her top and suck on and play with her gorgeous taut breasts as she rubbed and fawned over the solid lump in his pants. Eventually, Josh and June were nude, and he was getting one of June's hallmark blowjobs. He kept looking around to seek permission only no one was especially paying them any attention since the rest of the room seemed to be heading the same direction. He finally got in the spirit of the evening, and became one of the extended family participants. I watched Skye join them after she had stripped off her clothing. Josh had never been in a threesome, so was over-the-top about what was happening.\n\nLater, I heard him expressing his amazement at our lifestyle to his brother. Deke also gave him more of the low down on what living together in the family was like, emphasizing, of course, the sexual nature of our relationships with each other. Josh was soon ready to quit his job and move to the city so he could participate routinely in our family activities. Since Deke had a good relationship with his bro, he encouraged him to do just that. Skye had been listening to the brothers talk; she pleaded with Josh to come to the city so she could fuck him on a steady basis. Her beautiful teenage breasts shimmied and shook as she eagerly tried to lure him to be with us. Talk about a hard sell!\n\nWe continued to fly all over the place in the various planes. If only a few got interested in seeing some special event in some distant city, Elsa or Cindy or both would take the rebuilt Cessna Citation and fly the group there and then home. We did do a long weekend on St. Croix even though it was summer, and for that we used the long-range Boeing 737-700. Almost everyone in the family went on that trip, plus many of our guests and friends.\n\nMore and more, Matt and the families of Darby and Skye integrated into the family. Skye's mother Sheri eventually was coerced into being part of our parties and family gatherings at the end of the summer, although she chaffed at the idea of the orgy parties and skipped those. She wanted quieter and more romantic couplings. The whole group situation was new to her, as well as the incest that she just decided to ignore providing no one rubbed her nose in it. She also declared that she was not bisexual and not an exhibitionist, but I think Elsa and Sheila took those points as challenges to prove the merit of both persuasions to her. One thing they both approached me about was giving The Experience to Sheri. We just needed an opportunity.\n\nThe opportunity came in late September when we were at The Meadows. As usual, Tori invited her two college friends and their families to join us including staying at the large house until Sunday. Friday night after the kiddies were asleep, we started to get amorous. I purposefully sought out Sheri hoping she'd feel in a romantic mood. She did, and soon we were making out in a corner of the media room. Josh had gone off with Julie, and Sheri's husband Jack was also in the room with Sheila. Sheri watched her husband with great interest, right up to the point where Sheila and he were nude and starting to engage in rampant oral sex.\n\nSheri asked if we could go someplace private. This wasn't unexpected, so I led her to the master bedroom. We passed through the living room and Josh was there with his cock buried to the hilt in Julie's sweet pussy; they were humping into each other obviously intent on the mutual satisfaction of their partner.\n\nOnce in the bedroom, I stripped away Sheri's clothing as we made out. She was exceptionally passionate, and I think it had to do with having watched Jack and Josh briefly in their current encounters. I remember thinking that there was a secret slut buried down inside her that she didn't want to acknowledge.\n\nWe lay on the bed, made out, and I started to finger her. I added my fingers as I built to The Experience. The more I stimulated Sheri, the more passionately she responded and reacted to my every touch. Once I found her A-spot, and started the massage, she went into orbit. Eventually, her back arched, she crested, and I took her through the steps that led to the colossal orgasm that characterized The Experience. As the orgasm hit her like a runaway train, she passed out.\n\nI extracted and cleaned up. Elsa was instantly between Sheri's legs eating her pussy. Josh and Julie had joined us on the bed, along with Jack and Sheila, and Skye and James. They were fucking and had even swapped as we waited for Sheri to regain consciousness.\n\nI cradled Sheri, and as she woke up, she had another minor orgasm and I kissed her. She was a little confused about what had happened at first. She gave me an exceptionally loving kiss and then pledged her love to me for all time. She never wanted to be out of my presence, and would do anything I ever asked of her.\n\nAs the fog of her huge orgasm and the smaller one lifted she realized that she was being eaten. She raised her head and saw Elsa there, happily munching away. Elsa raised her head, and said, \"Sheri, I love you too. You taste fabulous.\"\n\nAnother female head popped up next to Elsa's. Skye said, \"I agree, mom. You taste divine. I think we have a great future together.\" She immediately reapplied her mouth to Sheri's wet slit with more determination than ever. Sheri's eyes were as large as saucers, and I could tell she was struggling with what was happening.\n\nSheri's head fell back to the bed. A minute or two later she looked up from the pleasure she was relishing and glanced around the room. She said, \"God, I'm being watched by everyone.\"\n\nJosh moved to Sheri's other side and kissed her, \"And you're beautiful, mom. I'm so glad you had that beautiful experience. I want to learn how to give it to you and Skye. I want to make love to you too - tonight, right here.\"\n\nSheri looked to her husband. Jack said, \"I agree with what Josh said. You are the most beautiful woman in the world. God, I love you more than I ever have. I know this is a reach for you, but you've made such leaps with all of us ... and tonight you've made the largest stride to our new lifestyle. I want to make love to you too, but only after our son has shown you his love.\"\n\nElsa, James, Sheila, and I slipped away leaving the four of them in our large bed. They were all hugging Sheri and expressing their love for her. I thought that was a real Hallmark moment for their family, and something I knew we felt good about doing for them.\n\nThe next morning, Skye informed me that Sheri was fully integrated into the ways and mores of the family, and that she wanted to attend the parties, participate openly with the sex, and become a close friend with everyone she'd come in contact with. She was nice, pretty, and smart, and we were more than happy to accept and encourage her relationship with us.\n\nLater that night, Tori planted an idea when she found Elsa and I cuddling and she joined us, the two women pushing their naked bodies against me with some obvious sexual intent; \"Mark and Elsa, I have a favor to ask. You don't have to do anything now, but it's something I want you to think about. I know we have a large family, but what if it got larger by adding in the Winters and the Brookes: Darby, Frank, Joyce, Jack, Sheri, Josh, and Skye. I think I'd add Matt to that list too. You seem to like all of them, and they've proven to be great friends and lovers to everybody else. We're all different, but we so appreciate each other.\"\n\nElsa and I looked at each other and smiled. We read each other's mind.\n\nMore than our mind reading, we were constantly attracted to each other, even in the presence of others.\n\nCareful not to dismiss or marginalize Tori, Mark and I made love. We could have been totally alone or in the middle of a crowd of thousands, but we knew and celebrated the love we shared by joining sexually with each other. It was beautiful and touched every corner of my soul with a goodness that I found impossible to describe to others unless they felt it too. To cap off that part of the evening, I eventually came deep inside Tori as Elsa rode her face to a nearly simultaneous orgasm of her own.\n\nElsa\n\nDespite a temperature drop, I was taking a last swim in the pool at The Meadows. The water was comfortably warm from the pool heaters doing their job, but the air was cool, about par for a sunny late October afternoon in the central U.S. Maybe next week the pool would get closed up for the winter. The Meadows had a care-taking staff that took care of details like that. Celeste oversaw their work and coordinated them so it never interfered with our presence. I did my laps and then a couple of hundred sit-ups on a yoga mat. I went inside to shower off the chlorine and freshen up before the others got home.\n\nThere was a little activity elsewhere in The Meadows. I could hear the children playing in the dedicated playroom under Julie's supervision. She had hired a new girl to serve as a nanny's assistant to her; a pretty brunette about twenty-two named Leanna. She wasn't yet a live in, so would head home after the children's dinner hour. By then the others would be congregating at our country home and the various parents would want to play with their kids.\n\nI poured myself a glass of Chardonnay and peeked into the playroom. Everyone was involved in some kind of game or project and being overseen by Julie. Leanna had Philip Emerson, Jenny, and Patricia sitting in front of her as she read them a story with lots of emoted animations to hold their interest. Julie was in a rocker feeding Toby. She would do well with our group. More children would be added over the coming year including my sister Cindy's baby.\n\nAgain, I found myself sizing up Leanna as a future 'sister' the same way Julie and the others were. She certainly fit the model most of us did, particularly from one of the men's points of view: cute, busy, and fuckable. She had a personality that sparkled, and apparently wasn't as na\u00efve about life as Julie had been when she arrived to work with us. In fact, she hadn't blinked when she learned about our polyamorous family, although she was certainly curious about our interactions. At least once a day, she ask a profound question to one of us about how the family functioned, not at all afraid to shy away from a question or two about our sexuality or sexual practices.\n\nThe family and our associated friends who hung out with us had become a stable group of dynamic people. I continued to be amazed at how we kept our petty disagreements and points of view from undermining any aspect of our loving family. Did we agree on everything? Hardly. Did it hurt our inter-relationships? No. We didn't let it.\n\nI went back outside despite the cool air, sat in the oblique rays of the sun on the patio with a dry towel over my shoulders like a shawl, and gazed out at the river and our small airport. I sipped at my wine. Any minute, the Cessna Citation would arrive back from a trip to New York with Cindy piloting, and Mark sitting the co-pilot's seat. He'd had another of his investor meetings to report on Worthington Industries, and the two of them wanted to visit a couple they'd met a year or two earlier. The stock in Worthington Industries continued its upward spiral to everyone's delight, especially Mark.\n\nI thought back over the past five years and how much my life had changed. Tears came to my eyes - tears of joy, gratitude, love, and happiness. I vaguely recalled the ignominious breakup with an old boyfriend in the middle of a busy luncheon place. Less than a week later, I met Mark, only he hid his true identity from me for fear that I would go after his money. When I discovered his ruse, I dumped him. He groveled his way back into my heart, and this time I involved my sister, who I loved and still love dearly. ",
        "We became an item - a threesome, and then over time Melanie, Sheila, and KC became part of our core, and then we met the guys - my brother-husbands Carter, Deke, James, Mike, and Ryan. Brita, Izzy, Alice, Stacy, June, and Marcia became my 'sisters' too, and more recently Kate, Tori, Julie, and Tom became full family members.\n\nBeside the family there were many couples who we also loved, starting with Lucas and Linda, Andy and Margo, Don and Edie, Jon and Amber, Greg and Kim, Sean and Pam, Troy and Janet, Dan and Sandy, Wes and Vanessa, Scott and Anna along with friends Felicia and Monica, and more recently Jack, Josh, and Sheri, and Frank and Joyce, along with Skye and Darby. I snickered to myself because through Tori, our youngest family member had attracted the last few people through her friendships with her friends Darby and Skye. My relatively new friend Matt was with us more and more; he was also becoming like family and I was sure we'd annex him before long as well.\n\nWe embraced so many beautiful people who were loving, thoughtful, trust worthy to a fault, and just the kind of intentional family one might dream of putting together. Of course, at the core of it all was Mark - our 'token billionaire,' we sometimes said to get a rise out of him. We all worried about sponging off of him, and he worried about not being responsible in every way, including financially, for every aspect of the family and whatever we did. We still sparred about who paid for what as life went along.\n\nHe'd spent thousands helping Cindy and me learn to fly, and then he got the bug too. We did our martial arts and weaponry practice that on more than one occasion had helped remedy a family situation and protected the others. In one case, I'd almost died from a gunshot wound by a gun-crazed stalker trying to get even with Worthington Industries for discharging him for cause.\n\nWe had a lot of fun at the Club Infinity, basically a toy Mark bought on the excuse that some of our friends wanted to give erotic dances and more. The place had been a great source of entertainment and a meeting place for new friends since he did that. Some of our great family members came to us through the club, including the headline stripper Kate and her daughter Tori. Stacy helped build the place, and I met Matt there.\n\nI smiled at all the ways I could recall how sex played a role in our life. I easily admitted to my hypersexuality; I'd even mentioned it to my doctor during a routine physical exam. She asked if I wanted to change it, and I had almost shouted 'No!' at her in the same instant. I loved the way I felt and acted. Yes, I could be slutty at times by contemporary standards, but that was the norm in the crowd I hung out with. We all loved it, thrived on it, and relished those moments. I silently bet that I had ten times as much sex and twenty times as many orgasms as the average female - maybe more.\n\nAs I reached for my wine glass the glint from one of the diamonds in my love ring made me focus on the token of the love I carried for all my family and friends. My eyes got glassy again, and a wave of thankfulness swept over me. I felt so lucky. So many little things had gone my way to bring me to where I was now.\n\nI thought how perfect my world was: perfect husbands and male friends and lovers; perfect sister and adopted sisters - believe it or not; perfect child and children I felt were my own; perfect homes - city, country, St. Croix; perfect work situation; and through Mark and his billions the ability to guide large sums of money and other resources to places where I saw they could do the most good for humanity. We were making a difference.\n\nThe tall grass in the meadow had been mowed a couple of weeks earlier in preparation for the coming seasonal change. There was that lovely musky scent of autumn in the air. I looked off in the distance and saw two deer traversing the field towards the river. There were beautiful and I chuckled because they'd probably set off a dozen security sensors and given charges of adrenalin to several of the security force in our security hut before the source was identified.\n\nI heard a low-altitude jet pass overhead, and I knew Mark and Cindy were home. I glanced around as the sleek jet soared by overhead at a relatively low altitude. The Citation disappeared from view for a few minutes and then came into view about two miles out from the runway setting up on the base leg. I walked to the edge of the patio for a better view of the landing. \n\nI watched as the jet made a steep ninety-degree turn onto the final approach course. Even though it was still light out, the landing lights were on to enhance visibility to other aircraft. I watched the landing gear deploy, a relatively simply feat, but as I had learned not one you could always count on to happen. I knew the drill in the cockpit, even what checklists Cindy and Mark were running through as the plane descended towards the field and slowed its speed. The plane made a beautiful approach, flared, and slowly sank to the runway.\n\nThe landing was flawless, and I heard the little squeak of the tires as they touched down, just before the crescendo sound of the reverse thrusters to brake the jet to a fast walk. I watched Cindy turn to the taxiway and travel back to the hangar.\n\nA few minutes later Cindy and Mark came shooting up the cart path in one of the golf carts with their luggage and briefcases in the rear carrier. We had a part-time lineman that would put the plane away and service it before closing up the hangar until the next trip.\n\nMy two bestest friends in the world pulled up near me and got out of the golf cart. Cindy gave me a hug. She looked at me, \"You OK, sis?\"\n\n\"Never better. Never better. I'm in a philosophical mood, I think. I've been sitting here thinking how grateful I am about all of you and everything that's happened.\"\n\nMark came and surrounded me in his arms in one of his trademark bear hugs that let me know he wanted me and loved me without any doubt. \"Elsa, I've missed you. I'm so glad you're here to welcome us home. Your presence always makes wherever you are home. I'm home.\"\n\nI hugged Mark back and kissed him. The tears in my eyes over flowed and he studied me when he saw them. I nodded, \"Not to worry. They're tears of joy and gratitude. I love you so much. Thank you for being you.\"\n\nMark put an arm around me and then gathered up Cindy in his other arm, and the three of us strolled towards our home. Out of the corner of my eye I spotted the deer crossing back across the field and into the woods. I pointed them out to Cindy and Mark, and we paused and watched until they were out of sight.\n\nAs we turned to continue to the house, Mark muttered the line from an old Browning poem, \"God's in his heaven, and all is right with the world.\"\n\nNo truer words were ever spoken from my point of view.\n\n<center>The End\n\n\"God's in his heaven, and all is right with the world.\"</center>"
    ],
    "authorname": "SteveWallace",
    "tags": [
        "romance",
        "love",
        "multiple girlfriends",
        "shared girlfriends",
        "sharing",
        "sex party",
        "swinging",
        "swapping",
        "aviation"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/billionaire-and-the-sisters-ch-105"
}
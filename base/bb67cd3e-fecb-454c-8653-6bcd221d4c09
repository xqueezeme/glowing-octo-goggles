{
    "title": "Head Above Water Pt. 04",
    "pages": [
        "Author's Note:\n\nHello friends, \n\nI apologize for my absence. Let's get right to it!\n\nMy humblest thanks to my good friends: MsCherylTerra, Bebop3, SleeperyJim, GoneGray, Chasten, Laura R., and PickFiction. This group of fantastic people are the ones who helped make this installment possible. Thank you all, including you readers, for being patient with me. \n\nCheers!\n\nNora\n\n_______________\n\nPeople call me a bad bitch. \n\nIf you're a part of the older generation, you may think this is an insult, but to us millennials, bad bitches are confident women who are bold and do things for themselves, relying on no one. I was a bad bitch to the first degree, a woman on a rampage, at war with the world, fighting it to earn my place, and for the better part of the last ten years, I had succeeded. From eighteen to twenty-eight, I'd been a beast at work, a Dragon Lady, breathing fire and tearing down every last man to get my gold. I'd been hoarding my treasure, and all these years, I'd been miserable but stable, making a life for myself in a world that had set me up to fail. \n\nI hadn't known comfort, hadn't known love\u2014not ever in my entire life. I guess my parents must have loved me, but I'd lost them when I was four, and I had no memory of them besides snippets of my mother's laugh and sitting on my father's broad shoulders. I couldn't remember what they looked like, and I had no pictures of them. For most of my childhood, I'd looked for them in the faces of my foster parents, wondering if they shared any features or personality traits, if the lady who'd serve me hot dogs and ramen noodles was anything like my mother, or if the guy who went behind his wife's back to force me to do his chores, making me rake the leaves and wash the dishes when she wasn't home, was anything like my father. I wondered if my parents would do such things, if my parents were the kind of people that would force my hand close to a flame on the kitchen stove if I misbehaved, or if they'd stick a finger down my throat for eating my dinner in the bathroom. \n\nAnd you know what? There's no telling. I couldn't romanticize my parents, couldn't pretend that they would have been perfect. They would have had their own faults, and maybe as a teenager, I would have told them that I hated them. I might have driven them crazy, but still, they would have at least loved me\u2014right? \n\nThey would have loved me, and maybe then, I would have been familiar with these crazy, insane feelings that I had for Wes. How the hell could I love someone if I didn't know the first thing about it? I was worried that I'd do it wrong, that if I said the words out loud, I'd be held accountable and suddenly I'd have to be a proper girlfriend, giving him things that I couldn't define, things that I didn't fucking know. Was love just three words? Was it chocolates and flowers and cards on Valentine's Day? Was it doing nice things for each other? I didn't know, and I couldn't commit to something I didn't understand. \n\nAnd so I didn't say that I loved him. I didn't know how to love him, and so I wouldn't. I wouldn't pretend that I could love him the way he was supposed to be loved. I could only hold on tight, kiss his pain away, spread my legs for him to find comfort in my body, listen to him when he needed someone to talk to. I could be his friend, I could be his best friend, and I hoped, God how I hoped, that that'd be enough. \n\nBecause even if I didn't know how to love, I knew how to care. For now, that would have to be enough. \n\n\u2014\n\nWes and I are like oil and water in the same glass, separating where the lines meet, but still co-existing, still enclosed in the same space, letting gravity do its work to keep us together. Even when things got hard, even on days when I wanted to call it quits and go back to my old life, gravity pulled us back together, and I'd somehow end up in his strong arms, and we'd wipe away each other's tears and laugh about it later, pretending that our hearts weren't brittle because we cared just way too fucking much. I was weak\u2014weak in the knees, weak in the words, weak in the heart. When it came to Wes, I kept coming up short. I was never enough. I kept trying and trying because I wanted him to be happy, wanted to see his effortless grin, his eyes crinkle at the corners as he laughed, wanted him the way he was meant to be: happy... but I wasn't good enough. \n\nI was a strong woman. I should have been able to give him the world, and in many ways, I could. I made over twice what Wes did, and financially, we probably would never need to worry. I could pay off his loans with the money that sat in my bank collecting dust, could've eased his financial burdens. I could have bought him a more reliable car than the Camry he'd been driving for ten years, could have taken him shopping and bought him anything he wanted. But the thing is, Wes would never accept my help. He would be insulted. And so, the only ways I could repay him for loving me were out of the window. I couldn't even properly thank him. \n\nAll I could do was wake up in the middle of the night, fear gripping me, and I'd think for one terrifying second that I was drowning, that there was no Wes, that it had all been a dream. And then he would mumble something, wrapping an arm around my middle and pulling me close to him, pressing a kiss to my forehead with a \"S'okay. Go back to sleep.\" And there in the darkness, I'd repay him by settling into his arms, giving him that closeness that he craved. He'd smile, and my heart would sing. Sometimes he'd be at the hospital, and on those nights, the terror would spike into my bloodstream, making me scream in the darkness. I screamed without Wes. It was almost pathetic how badly I needed him, how much I relied on his comfort. \n\nI was stronger than this, damn it!\n\n\"Celine?\"\n\nI looked up from where I was staring into my computer, looking blankly at an expense report that I was supposed to be filling out. The accounting head was going to kill me; I was supposed to turn this in hours ago. Addie walked into my office, closing the door behind her. \n\n\"Everything okay? You look... I dunno, fucked up.\"\n\n\"Thanks,\" I muttered. \n\nShe laughed. \"Cheer up. He'll be back in a couple of hours.\"\n\nWes had partnered up with Health Volunteers Overseas, an organization that connected healthcare professionals with countries in need. He was volunteering his time in Bhutan, performing life-saving surgery on kids who lived in remote or rural areas. The hospital had allowed Wes to take a six-week leave of absence, and the clinical hours would be counted toward his residency. It was a great opportunity, one he couldn't have missed, and the only shitty thing about it was that he'd be gone for a month and a half. It had been torture, waiting for him to return. \n\n\"Where's his plane now?\" Addie asked, rounding the desk to stand beside me. \"Seriously? An expense report? Celine, you absolute freak. Move.\" Addie took over the mouse, clicked onto Chrome, and looked up Wes's flight number, which she seemed to know by heart. \"I've been checking every hour,\" she explained sheepishly. \n\nAddie and Wes were pretty good friends. We often double-dated, me and Wes with her and Ryan, and usually it was me and Ryan making small-talk while those two talked a mile a minute, discussing Game of Thrones and Star Wars and Doctor Who or Strange or whatever. Who knew Wes was such a nerd? Actually, who knew Addie was? I sure didn't. They'd become close, and I never minded because Addie was like family, and it was nice when your boyfriend got along with your family. \n\n\"Two more hours,\" Addie said, grinning. \"Shouldn't you be heading over to LAX now?\"\n\n\"I thought I was the boss here.\"\n\n\"Come on, boss lady. Go get your man!\"\n\n\"Get out of my office,\" I said, giving her a look. \"And get back to work.\"\n\nAddie held up her hands in defeat and backed away slowly. \"Don't fire me, jeez.\"\n\n\"I'm thinking about it,\" I said, managing to keep a straight face. \n\n\"You are such a bitch, Celine, and I love you for it. Seriously, delegate or whatever. Go get Wes.\"\n\n\"I can't,\" I said, biting my lip. \"His mom and sister are going to be at the airport.\"\n\n\"So what? It's about time you meet them.\"\n\n\"I don't think so,\" I said, focusing my eyes back on the screen. The plane was inching closer to the mainland on the website. I thought about Wes on his flight, probably sleeping like the dead again. He was a damn good doctor, not exactly world-class since he was still in residency, but I'd heard from his coworkers that he was the best of his class. Yes\u2014I'd met his friends. Crazy people, just like him. Weird and nerdy, all too serious and too jokey at the same time. Each and every one was a genius. I'd been insecure around them at first, but soon enough I realized that they were human, too. Just like Wes.\n\nThere was Macy, a free-spirited young woman who wrote the dirtiest shit for an erotic website in her spare time, weaving worlds and words, bringing things to life on the screen. There was Kevin, the BBQ guy, who was so obsessed that he competed in BBQ competitions and spent his weekends smoking and grilling. There was the Muslim girl, Zahra, who wore a hijab but was the one with the worst sailor mouth, almost as bad as me. The two Indian guys, Vishal, who drank enough coffee to kill a horse, and Rana, who had parents that were still trying to get him in an arranged marriage with a woman, despite knowing that their son was gay. And even though Wes was good-looking, Dante was the hot one. Piercing green eyes, smooth dark skin, and thick, black hair that was always styled flawlessly like a movie star. Seriously, Dante was on a level of hot that no one could touch. Each and every single one of them were doctors, surgeons to be more specific. They all had a drive and passion that couldn't be matched by anyone in my field, including me, and sometimes it made me a little jealous, how they'd pursued something in life that was so rewarding. But they were Wes's closest friends, and so I introduced them to Addie and Rita, my closest friends, and we all became this one big happy and extremely dysfunctional family. \n\n\"Everyone who's met them says they're the nicest people,\" Addie said gently. \"And by everyone, I mean literally everyone, Celine. You're the only one who hasn't met them.\"\n\n\"You and Rita haven't met them.\"\n\n\"Wes isn't our boyfriend, Celine,\" Addie said, rolling her eyes. \"Stop sending the poor guy mixed signals. Meet his damn family. Go.\"\n\nI stood up, changed my mind, and sat back down. \n\n\"I can't,\" I said, putting my face in my hands. \"I just\u2014\"\n\n\"Shut the fuck up,\" Addie snapped. \"You're being a shitty girlfriend, you know that? You and Wes have been together, what, long enough to have had a baby by now? Meet his fucking family! It's time.\"\n\n\"They won't like me.\"\n\n\"What the fuck are you talking about? They'll love you!\"\n\n\"No, Addie,\" I said, looking up from my hands. Her green eyes were vibrant and alive, as if she was daring me to defy her. \"They'll hate this mean brown chick that their son is throwing away his life for.\"\n\n\"Where did that come from?\" Addie sat down on the plush white armchair in my office, folded her arms, and gave me a glare. \"You think they're racists? And what the hell are you talking about, Celine? Throwing his life away? He's a surgeon, for fuck's sake. Last time I checked, he still is.\"\n\nI sighed. \"No\u2014I mean, I don't know. I'm not... good for him.\"\n\n\"You mean good enough,\" Addie said, reading my unease. \"Oh, Celine...\"\n\n\"No, hear me out,\" I said, my eyes beginning to water. \"I've never even been to college, Ads. I'm uneducated. I have no family. I'm not a nice person. I barely get along with anyone.\"\n\n\"You're the smartest person I know, Celine. Who gives a fuck that you have no family? I'm your family, Celine. And you are nice, whether you believe it or not. Also, you get along with a lot of people, babe,\" Addie said fiercely. \n\n\"But what if I don't get along with them?\"\n\n\"His mom and sister? Girl, they are nice-ass people! Just face your fears and meet them already.\"\n\n\"I can't,\" I said, slumping down on my desk. \"I can't do it.\"\n\n\"Okay,\" Addie said. \"If you're not ready then you're not ready. I won't force you.\"\n\n\"Thanks, Ads,\" I said, sighing deeply. \"Now, get the fuck back to work.\"\n\n\"Aye, Dragon Lady,\" she said with a grin. She gave me a little wave and skipped out of my office, closing the door behind her. With Addie gone, I could finally face the ugliness inside of me, all the self-doubt that seemed to be oozing out of me. I hugged myself, as if it could keep my insides from spilling out, but it felt like I'd been stripped bare, and there was no hiding from this because I had to face it; whether or not Wes's family liked me, I had to meet them eventually. \n\nI got up, grabbed my keys, and looked down at my outfit. It was the same suit I'd been wearing the day I'd first met Wes. If it was good enough for him, it'd have to be good enough for his family. \n\n\u2014\n\nThere are no direct flights from Los Angeles to Bhutan. The closest you could get was Guwahati, India via a series of flights, which was a journey that took almost two days. After that, you could take buses and trains into Thimphu, Bhutan which was where the hospital was that Wes had been volunteering at, but that'd take another day and a half. The way back was supposed to be worse. The only thing I could be sure about was that Wes would be exhausted from all the traveling. I fully expected to bring him back to my apartment and put him to sleep. What I didn't expect was walking into the LAX airport and bumping into a woman that looked exactly like my boyfriend. Tall, dark blue eyes, thick black hair, and an out-of-this-world smile, so bright that it could've blinded you. \n\n\"Celine,\" she said, putting her hands on my shoulders. I flinched. Shit. This was already going all wrong. \n\n\"Hi,\" I managed. \"I'm Celine.\"\n\nShe already said that. She knows you're Celine. Jesus Christ. \n\n\"Mom, let her breathe,\" said a soft, sweet voice. I turned and found yet another woman that looked just like Wes\u2014except this one wasn't exactly all woman yet. She had a very young face, and she couldn't have been any older than seventeen. Her eyes were a little sly, slightly upturned on the sides, almond-shaped and beautiful. I knew she was a troublemaker; not because she looked it, but because Wes had told me so. \n\n\"Sorry,\" Wes's mom said, letting go of me and stepping back. \"I'm just excited! I wasn't\u2014we weren't expecting to see you here today.\"\n\n\"I wasn't expecting to be here,\" I answered truthfully. \"It's, uh, nice to meet you both.\"\n\n\"I'm Elena,\" his mother said, \"And this is my daughter, Janet.\"\n\n\"Janie, Mom.\"\n\n\"Sorry, Janie,\" Elena corrected. \"Honestly, it's like I named her Janie. She's never gone by Janet.\"\n\n\"Then why do you always feel the need to introduce me as 'Janet', huh, Mom?\"\n\nElena rolled her eyes. \"Excuse her, she's on her period.\"\n\nI laughed and Janie scowled at her mother. \n\n\"Because that's what Wes's girlfriend wants to hear about,\" Janie muttered. \"My menstrual cycle.\"\n\n\"So, Celine,\" Elena said, ignoring her daughter. \"We've heard so much about you. Why don't we all have dinner together sometime?\"\n\n\"Sure,\" I said, managing a weak smile. I had to do this for Wes. They needed to like me. I knew it was important to him that I got along with his family. Whether he was going to be thrilled that I'd met them without him, I wasn't sure. He'd wanted to take me over to meet them at least a thousand times, but I'd always found an excuse not to go. In truth, I was terrified of Wes's family. \n\n\"Let's go wait over there,\" Janie said, pointing to where people were exiting from Customs. We walked over and waited, and the two of them bickered over something stupid; Janie wanted to buy a $15 pizza slice from the concession stand, and Elena was insisting that she'd buy her a whole pizza for the same amount later. \n\n\"I'm hungry now, Mom.\"\n\n\"I, uh\u2014\" I pulled my wallet out of my purse. \"Here, on me.\" I put a crisp twenty dollar bill in her hand. The second after I'd done it, I knew it had been the wrong thing to do. Elena had been trying to teach her daughter patience, and I just gave her money like it was nothing, like I was trying to buy her. It was horrible. I wished I could shrink away and never see them again, but I knew that'd break Wes's heart. \n\n\"Whoa, free money!\" Janie said with a bright smile. It made me feel a little better, but Elena didn't smile so brightly. \n\n\"What do you say, Janet?\"\n\n\"Thank you,\" Janie said, scowling at her mother. \"Janie, Mom. She'll start calling me Janet because of you!\"\n\n\"I think I see him,\" Elena suddenly said, looking past my shoulder. I turned around, and there was Wes, wheeling his suitcases in a trolley toward us, the biggest grin on his face. His eyes were fixed on me. \n\nJanie made a run for it, dashing over to her brother and throwing her arms around his neck. He hugged her, laughing at her enthusiasm. Elena practically sprinted to her son, her heels clicking and she too threw her arms around her son, pushing Janie out of the way. Wes just laughed and laughed at the annoyed look on Janie's face, and I found myself giggling too. I hung back, watching the family reunion with an ache in my chest. I'd gone on a few trips out of the country, mostly for work, and I never returned to a family, never had people to receive me at the airport. I was happy for Wes, but I was also terribly sad knowing that my own mother had never gotten the chance to greet me like this, as if my being away was life's greatest inconvenience. \n\n\"Guys, let me go see my girlfriend,\" Wes said, prying their bodies off of him. They'd clung to him like Saran Wrap. \n\nFor every step Wes took toward me, I took one back. I was teasing him, denying him my affection for as long as I could. He grinned, and jogged over to me, grabbed me by the arm, and pulled me into his arms. My eyes misted over, and for whatever stupid reason, I began to cry. Cry. \n\n\"Shh,\" Wes murmured, \"S'okay.\" He pulled back and kissed me all over my face, making me laugh. \n\n\"Missed you,\" I said, almost gruffly. \n\n\"Me, Tarzan,\" Wes said, imitating my tone of voice. \"You, Jane.\"\n\nI laughed and Wes wiped my tears away with the pads of his thumbs. \n\n\"Jane no cry. Jane... miss Tarzan?\"\n\nI laughed harder. He was so fucking stupid sometimes. I put my arms around his neck and pressed a soul-consuming kiss to his lips, sighing right into his mouth, feeling more content than I had in a long, long time. I'd been on edge the entire time he'd been gone.\n\n\"Jane miss Tarzan?\" Wes repeated. \n\n\"Yes,\" I said, rolling my eyes. \"Jane miss Tarzan.\"\n\n\"Tarzan miss Jane,\" he replied, hooking a lock of my hair behind my ear. \"Tarzan take Jane home. Tarzan make baby with Jane.\"\n\n\"Ew,\" Janie said, appearing from behind him. \"You're gross. I don't know what Celine sees in you.\"\n\n\"Tarzan miss Janie, too,\" Wes said, turning and tickling her. She shrieked and made a fist. \n\n\"Don't,\" Wes warned. Janie punched him in the arm anyway. She gave zero fucks. I decided right then that I liked her. \n\n\"Janie!\" Elena said, looking scandalized. \"Do not hit your brother.\"\n\n\"Uh, I kinda already did,\" she said, smiling innocently. \n\n\"Good thing I'm a doctor,\" Wes said. \"I can patch myself right up.\" He rubbed his arm, massaging where she'd hit him. \n\n\"Show off,\" Janie said, rolling her eyes.\n\nElena fussed over her son, asking if he'd eaten enough, if he'd had time to sleep properly, if he'd been mugged or treated badly while there. Wes assured her that he'd had a wonderful experience, but I could see in his eyes that he was tired. He wanted to go home, I realized. He needed sleep. ",
        "\"I, uh, have to go,\" I lied. \"I forgot, I have some work to get done at home.\"\n\n\"I'll go with you,\" Wes said, looking relieved. \"Mom, that okay with you? I'm just gonna take a ride from Celie and crash at her place.\"\n\n\"Celine,\" I corrected. \n\n\"That's what I said,\" Wes said with a grin. \n\n\"Okay, honey,\" Elena said, and then she turned to me. \"You keep my son very happy. Thank you. It was so nice to meet you, Celine. Let's have dinner soon.\"\n\n\"Yeah,\" Janie added. \"You weren't what I was expecting. You're way hotter than I thought you were gonna be, no offense.\"\n\n\"None taken,\" I said awkwardly, and forced a smile on my face. \"It was nice to meet you two. I'll let Wes know my schedule so we can get a dinner planned.\"\n\nWes hugged and kissed his mother and sister goodbye, and then I took his backpack from his shoulder, and the two of us made our way to the parking structure across the street.\n\n\"How was Bhutan?\" I asked.\n\n\"Gorgeous sights. Fantastic food. Intense work environment, though. The hospital there was... well, not great. It was a really eye-opening experience.\"\n\nWe'd reached the car. Wes loaded up his things in the back of his Camry, which surprisingly had plenty of trunk space; I'd borrowed his car today since mine was out of juice. I was just putting my purse in the car when Wes took me by the arm, pulled me back, and gently pushed me up against the rear door. He had a hungry look in his eyes, and it sent a chill through me. \n\n\"Wes...\"\n\n\"I missed you, baby,\" he said, slipping his hand into my hair, cradling the back of my neck. He pressed his lips to mine, and I opened my mouth, tasting him, my tongue running over his. He stole my breath away, roping it out from my lungs, making me pant. I wrapped my arms around his neck and pulled him closer, kissing him back. Wes parted my legs with his knee and pressed his body against mine. I could feel his cock through his pants; he was hard as a rock. I almost got down on my knees to suck him off right there. I'd missed him, missed the taste of him on my tongue, the salty thick cum that he spurted in the back of my throat so many times that I'd lost count. I loved giving him head\u2014loved giving him pleasure. \n\n\"I need you,\" he said hoarsely. \n\n\"Jane take Tarzan home,\" I said in a husky voice. \"Jane make baby with Tarzan.\"\n\nHis laughter rang in my ears. \n\n\u2014\n\nWes and I didn't actually want any babies, but we loved the act of making them. We probably would have fucked in the parking garage of my building if it wasn't 6 PM\u2014the time when most of my neighbors were coming home. I took Wes's backpack, and he took his two large suitcases, and we headed for the elevators. We rode up with one of my neighbors, a person that I didn't know, but Wes seemed to. He practically lived with me, and we all knew Wes was a friendly guy. \n\n\"Dr. Spenrath, how was your trip?\" asked some old-ass lady. \n\n\"Life-changing,\" Wes answered. \n\n\"Save a lot of lives?\" Her eyes were warm and full of admiration. \n\n\"Of course, Mrs. Anderson.\"\n\n\"All children?\"\n\n\"Every single one.\"\n\nThis Mrs. Anderson was smiling so wide that it was creepy. She looked about as old as Agatha, Wes's old neighbor lady who had once lent me her key to enter Wes's apartment. Old ladies just loved Wes. \n\n\"God bless you, Dr. Spenrath.\"\n\n\"Thank you, Mrs. Anderson,\" Wes said and gave her one of his breathtakingly beautiful smiles. She, the woman old enough to be his grandmother, blushed. \n\n\"Well, this is us,\" Wes said as the elevator dinged for my floor. \"Goodbye, Mrs. Anderson. And you call me if your arthritis ever acts up again.\"\n\n\"I will, dear. Take care now,\" she called after us. The elevator door closed and I turned to Wes. \n\n\"Do you know everybody in this building?\" I asked, fishing my keys out of my purse. \n\n\"Just about.\"\n\n\"Why?\"\n\n\"Why not?\" Wes said. \"You can never have enough friends. You know you got an Angels pitcher upstairs? How do you think I get those free tickets? And there's a guy who's a Best Buy manager on your floor, Celine. I got you that flat screen at a huge discount last Christmas.\"\n\n\"So, what, you just call in a bunch of favors whenever you need something?\"\n\n\"Yup,\" Wes said, running a hand through his hair as we came to a stop in front of my apartment. \n\n\"What do you give them in return?\" I asked, unlocking the door. \n\n\"Free medical advice, I guess. A lot of them will call me whenever they feel a heart palpitation or something.\"\n\n\"Really?\"\n\n\"Yeah. Mrs. Anderson back there once thought she was having a heart attack. Called me in a panic while I was at the hospital. I sent her to James, you know my friend over at UCI Medical Center? He checked her out at the ER. Turned out she just had too much coffee that day. Now it's mostly her arthritis that bothers her. Poor thing.\"\n\nWes wheeled the suitcases into the apartment, closed the door behind him, turning the lock, and then grabbed me by the waist, pulling me flush against his body. I let out a surprised squeal. \n\n\"Wes...\"\n\n\"Six weeks away from you nearly killed me,\" he said, running his hands down my body. \"I thought I was going to go crazy. Actually, I did go crazy, babe. I couldn't get you out of my head.\"\n\n\"Which head?\" I asked, glancing down to his groin. He was already hard. \n\n\"Both, I guess,\" he said with a laugh. \n\nHe kissed me, pushing me up against the wall behind me, his lips hot and burning, biting my lower lip and making me moan. His hands moved to my blazer, unbuttoning it, and then to my shirt, his fingers working quickly down the buttons of my blouse. \n\n\"Off,\" was all he said, pushing my blouse and blazer off of my shoulders. I stood there in front of him, wearing the bottom half of my pantsuit, my five-inch heels, and my lacy black bra. I had gotten up this morning and dressed with the knowledge that I'd be undressed soon enough, and so I'd put on my best lingerie. Since dating Wes, Addie and Rita had taken me to some high-end lingerie stores, helping me pick out sexy underthings that drove Wes wild. When Wes unsnapped my pants and pulled them down, he groaned when he found the high-waisted strappy garter belt, a matching panty with a cut-out slit between my legs, and diamond net thigh-high stockings that were clipped to my garter. \n\n\"Fuck, I am so lucky,\" Wes said, kissing me again, his hands coming to cup my ass. I moaned into his mouth, wrapping my arms around his neck and folding my legs around his trim waist as he picked me up and kissed me against the wall. I inhaled sharply when I felt the hard outline of his cock pushed up between my legs, right up against my soaking-wet panties. This was fucking heaven. My body had been craving him, craving that thickness, entering my body, and making me come apart. I was unwinding in his arms, moaning as he began to grind his belt against my pussy. His hands were still on my ass, and he pulled me toward him, dry-humping me right there in the dark hallway. \n\n\"Wes,\" I gasped. \"Baby, please, I need you inside of me.\"\n\nWes stilled, pulling back, his eyes wide. \n\n\"What?\"\n\n\"You called me baby.\"\n\n\"I did,\" I admitted, my face going red. \n\n\"Do you want me to fuck you, baby?\" He hitched my legs higher, grinding his belt buckle across my wet slit, making something like a shiver wrack through my body, this twisting, aching need that gripped me from my core. \n\n\"Yes, please,\" I whimpered. \n\n\"So polite,\" he chuckled. \"Help me get free, babe.\"\n\nI reached between us and undid his belt, feeling my slick juices against the cool metal, and unsnapped the button, pulling down the zipper. His cock was encased in his boxer briefs, and I swear I could see it throb. Fuck, I was so turned on that even the scent of him, the heady aroma of his cologne, was driving me crazy. I stuck my fingers gently into the slit of his briefs, feeding my hand inside, cupping his balls, and making him hiss. \n\n\"Fuck, Celine...\"\n\nI closed my hand around his cock, thick and rock-hard, straining against the boxer briefs. Gently, I guided it out of the slit of the briefs, panting as I did it, so impatient that I was dripping with desire, my pussy wetter than I could ever remember it being. Humiliation would have burned inside of me when we'd first met, but Wes and I had been together almost ten months now, long enough that the shyness was gone, replaced by the unfiltered cravings of the body. The muscles between my legs fluttered desperately as I pushed my hips toward him. Wes angled his torso, and I could feel his abs through his t-shirt. I didn't know what the fuck he'd been doing in Bhutan, but he'd returned with a body with washboard abs. I almost creamed myself as I lifted his shirt, and he balanced me with one hand and pulled the shirt off of himself with the other. \n\n\"I'm gonna make you come so hard,\" he growled, and lined up his cock with my dripping pussy, slick juices running down my legs, right onto the hardwood floor. We both gripped each other, my hands on his forearms, his hands on my ass, and we sighed as he entered me, his thickness pushing through my tight folds. At first, it was a sharp pain, feeling something hard and swollen finally find its way inside of my firm pussy walls, but then an all-encompassing moan broke from my lips as I felt the pressure, the sweet, delicious fucking pressure. The muscles in my stomach were all clenching, and I threw my head back, hitting it against the wall as he pulled out halfway and shoved back inside of me. \n\n\"Are you okay?\" he asked, concern in his deep ocean eyes. \n\n\"Don't stop,\" I almost screamed. \"Please, Wes!\"\n\nAnd that's when he began to fuck me against the wall, his belt buckle slapping against my thigh, the zipper rubbing against my sensitive skin, the pain mixing with the pleasure, making me squeeze my eyes shut as he desperately palmed my ass, his fingers digging into my skin. It was painfully beautiful, and it was terrifying and incredible and sad, so fucking sad how much I'd missed this man. My very bones seemed to ache as he fucked me and fucked me, making me cry out his name over and over. The sensations made my toes curl, and I closed my legs tighter around his hips as I felt the pressure begin to build. I needed to come so bad that it hurt.\n\nThe voice coming from my lips was almost pitiful, so unlike my own, but it didn't matter anymore; nothing mattered. All I wanted was the thick liquid heat of his cum to spill into me, quenching the fire, drowning out the burning need to be claimed. \n\nWith the filthiest moan, Wes pounded into me, and I felt as if he was splitting me. Impatience boiled in my blood, and fire burned in my veins. His thrusts became more erratic, as if my cries were spurring him on, and words seemed to leave my lips by another voice entirely, spoken by a woman who had no sense of reality or the world around her, begging and begging for his cock. Nails dug into my ass, leaving crescent markings as his hips slammed against mine, and I wanted to savor it, to taste the moment, to kiss him until I lost all feeling in my body from the numbing pleasure. Our lips met, and we kissed through the ecstasy, the rapturous waves of pleasure coursing through my body as I finally came, sobbing, clutching at him, looking for something to hold onto. I wrapped my arms around his neck, closing my eyes as the tears slipped down my cheeks, biting my lip as he gasped, filling my pussy with this seed. His cock pulsed inside of me, throbbing and swelling, jerking as the thick liquid heat overflowed, white cum dripping down my thighs as I tried to catch my breath. \n\n\"Fuck,\" Wes groaned, gently putting my feet on the floor as his cock slipped out of my body. My legs wobbled, and he laughed, picking me up like a bride. I took his face in my hands, surprised to find that his eyes were red, too, as if he'd been crying. \n\n\"Are you okay?\" I asked him. \n\n\"Are you?\"\n\nI nodded. \n\n\"Then so am I, baby.\"\n\nThen he took me to the bedroom, stripped us bare of the last of the clothes we were wearing, and made love to me until I came again and again and again. \n\n\u2014\n\nI'd just finished my morning meetings on the sixth floor, and was headed back down to the call center when Addie appeared out of almost nowhere, grabbing me by the arm. \n\n\"Addie, what the hell?\" I said, looking around to see that no one had noticed that she'd snuck up to a floor of the building that she definitely had no authorization to be on. \n\n\"Brian's here,\" she said, dragging me toward the elevator. \"You need to get security to let him in.\"\n\n\"Who?\"\n\n\"Brian, Celine! Rita's boyfriend? Of almost nine years?\"\n\n\"Oh, that Brian,\" I said, trying to picture his face. He was a chemical engineer, a little on the flabby side, but was good-natured and funny enough to make me snort sometimes from his jokes. Rita had spent the last six or so years mad at him for failing to propose. Hell, she'd tried proposing to him, but he insisted that he'd like to go the traditional route and propose to her, which, of course, never happened. \n\n\"Well, security won't let him in.\"\n\n\"He doesn't work here. Why would they?\" I said as we entered the elevator. Addie punched the button for the lobby. \n\n\"Because he's going to propose, Celine.\"\n\nI was chewing on the inside of my cheek and suddenly bit down in surprise. Ouch. \n\n\"He's going to propose here?\" \n\n\"Yes. On the Floor.\"\n\n\"My Floor?\"\n\n\"Celine, all of Rita's friends are here. We all work with her and have been for years. He wants to share this moment with us. He thinks it'll make her happy.\"\n\n\"Will it?\"\n\n\"She's been waiting for like six years,\" Addie snapped. \"He could propose with a piece of lint at the city dump and she'd probably be happy.\"\n\nI laughed. That definitely wasn't true. Rita was what I would call high-maintenance. She got her nails done every week and a half, got her curly hair dyed professionally every few weeks, and wore nothing but designer wares. I knew a piece of lint wasn't going to do it for her. \n\n\"How do you even know he's here?\"\n\n\"He had security call me. They won't let him up on my authorization, though. I guess being a supervisor has zero perks.\"\n\n\"It has tons of perks,\" I said, rolling my eyes. \"We certainly pay you enough.\" Addie clicked her heels together, her favorite Jimmy Choos that she'd spent a couple hundred on. Yes, we did pay her enough. \n\n\"Well, let him in, will you? Before he changes his mind about proposing.\"\n\n\"He better not,\" I grumbled as the elevator doors opened. Addie and I walked over to the main entrance, where we found a nervous-looking Brian arguing with Head of Security. Jesus Christ. \n\n\"My girlfriend works here!\" Brian said. \"We own a house together. Shouldn't I have a right to see her?\"\n\n\"Let him through, Gary,\" I said, approaching Head of Security. He was six-five, a huge guy, and could easily have broken Brian like a little toy. Gary turned around, caught sight of me, and broke into a smile. \n\n\"If you say so, Miss Celine.\"\n\n\"I do say so,\" I said, giving him a smile right back. I liked Gary. He'd been working here for longer than I'd been alive. He was a nice guy, despite what Brian probably thought. Back when I'd been eighteen-years-old, poor as shit, and taking the bus to get to and from work, Gary would give me rides on rainy days. He would have taken me every single day, but I'd been too proud to accept the help. Once I'd made it to management level, I put in a few good words for him and got him promoted to Head of Security when the position opened up. Gary was like family to me, and family always looked out for their own. \n\n\"Come on through, wise guy,\" Gary said, punching in the code for the turnstiles. Brian crossed into the main area of the lobby, looking more nervous than ever. \n\n\"Thanks,\" Brian said. \"Is this a terrible idea? Should I leave?\"\n\n\"No,\" Addie and I said together. \n\n\"Got the ring?\" Addie asked. Brian pulled a little black velvet box out of his pocket. He flipped it open and inside sat a beautiful ring, easily two carats. Rita was going to love it, I could already tell. It was in the halo setting she'd been blabbing about for the last six years. Brian had done good on the ring. \n\n\"So, how are we doing this?\" I asked. \n\n\"I was kind of hoping I could do it on the Floor,\" he said, looking at me with fear in his eyes. Oh yeah, he feared the Dragon Lady, too. \n\n\"You want to go onto my Floor in the middle of a working day and distract everyone from their phone calls so you can propose?\" \n\n\"Er... yeah,\" Brian said, looking deeply uncomfortable. \n\nI reached for the walkie talkie on my hip. \n\n\"Darlene?\" I said. There was a staticky noise. \n\n\"Yes, Celine?\" replied the department secretary. \n\n\"Put a hold on all calls in...\" I checked my watch. \"Ten minutes. No calls in, no calls out. Route them all to Texas and New Mexico agents that are trained in California insurance and sales. Got that?\"\n\n\"I\u2014What?\" Her reaction was annoying, but to be fair, I'd never asked her to do something like this before. \n\n\"Just do it, Darlene.\"\n\n\"Yes, okay. If that's what you want.\"\n\nBrian and Addie were both staring at me, surprise etched on their faces. \n\n\"What?\" I said, annoyed. \n\n\"You've just never\u2014\" Addie began. \n\n\"Wow, thanks,\" Brian finished. \"Where's the Floor?\"\n\n\"Christ,\" I muttered, already heading for the escalators. \"Let's go. You've got ten minutes to prepare, and I'm keeping everyone off the phones for a total of ten more, got that? Don't draw this thing out.\"\n\n\"I won't,\" he promised. \n\nAddie went off to find Rita, and I snuck Brian into my office. He paced like a madman, pulling at his hair and muttering under his breath. \n\n\"Sit down,\" I said. \"Watching you is making me exhausted.\"\n\nBrian took a seat across from me, his legs restlessly shaking. \n\n\"Water?\" I offered. I had a couple of bottles in the mini-fridge. \n\n\"No, thank you.\" \n\nWe sat in awkward silence for a few more minutes, and then Addie radioed in. \n\n\"Rita's on the Floor now, guys. She's looking west, so just come from the east side. I'll keep her attention.\"\n\n\"Great,\" I said, checking my watch. I picked up my radio. \"Darlene, are we all good?\"\n\n\"Yes,\" Darlene responded. \"The lines are all routed to Texas and New Mexico. Call Center is all clear.\"\n\n\"Thank you,\" I said, and stood up. \"Let's go get your girl, Brian.\"\n\nRita was helping out an agent across the Floor. I could see her curly black hair swaying as she talked animatedly, her hands moving to express her point. She was wearing a tight black pencil skirt and a cream blouse and looked as perfect as she always did. Rita had a beautiful body, thick and voluptuous, and even though she'd been saying for years that she was going to drop sixty pounds and be \"skinny\" like me and Addie, I was glad she didn't. I hoped she thought she was good enough for herself because she was certainly good enough for the rest of us, especially Brian. Her makeup was done up, her hair was styled just right, and she hadn't had lunch yet so there was no danger of anything being in her teeth. This was the perfect time.\n\nI looked to my left and right, finding three other supervisors following Brian, one holding a video camera, and two others recording on their phones. Brian looked like he was gonna shit himself. \n\n\"You'll do great,\" I said. He nodded in response, but his eyes were still panicked. I hung back the last thirty feet, and Brian walked on ahead, the supervisors that were recording him following closely behind. I crossed my arms and chewed the inside of my cheek again, hoping that I'd done the right thing, letting Brian propose here in front of everyone she worked with. What if she'd changed her mind about wanting to marry him?\n\n\"R-Rita, baby?\" Brian said shakily.\n\nRita turned around, clearly confused. \"Brian,\" she said. \"What are you doing here?\"",
        "That was when Brian got down on one knee. The entire room gasped, along with Rita, who immediately burst into tears. \n\n\"Rit-Rita,\" Brian was trying to say. \"I have loved you for...\"\n\n\"A thousand years,\" she finished for him, tears streaming down her face. She looked around the Floor and explained, \"It's our song.\"\n\nI felt my throat close up, not because I found this whole thing particularly cute, but because I loved Rita, and I knew that this was one of the biggest moments of her life. She'd cried about this day for years, and there had been so many holidays that I'd driven over to her place just to hold her while she sobbed. I'd cursed Brian with her, had given her shot after shot of liquor, and had watched endless Rom-Coms with her even though I loathed them. I'd brought her more pints of Ben and Jerry's than I could count, and in all of those years, she had returned that love tenfold. Rita had been there for me through everything. She and Addie had... saved me. I'd been this lonely, bitter woman with a cold and broken heart, but Rita had shown me that love wasn't always about receiving it back. Sometimes, it was okay to love a person more than they loved you. \n\n\"Will you do me the honor of becoming my wife, Rita Maria Gomez?\"\n\n\"I should say no,\" Rita said, covering her face with her hands. \n\nBrian looked horrified. \n\n\"Took you long enough,\" she said. \"Of course I'll fucking marry you!\"\n\nBrian fumbled with the ring, and finally, after nine years of love and heartache, slid it onto her finger. Rita jumped up and down, sobbing, and held out her hand, turning it side to side to have the light catch on the diamond. Brian got to his feet, took her into his arms, and she kissed him with the biggest smile on her face. The entire call center cheered, people yelling and screaming and whistling and clapping their hands. I joined, clapping my hands and giving Rita a double thumbs up when she searched the Floor for me. \n\n\"Thank you,\" she mouthed, knowing that I had been the person to make this possible. \n\nWithout thinking, I mouthed back, \"I love you.\"\n\nRita's eyes widened, and they filled with tears all over again. She left Brian there and came running for me, sprinting across the Floor and threw her arms around me. \n\n\"I love you, too, Celine,\" Rita said, squeezing me tight. \"I am so, so proud of you!\"\n\n\"Rita, relax,\" I said, laughing. \"It's your engagement day.\"\n\n\"It's also probably the first time you've ever told anyone out loud that you love them. I'm honored, Celine.\" She sniffled, her brown eyes brimming with tears. \n\n\"I mean, I technically didn't say anything out loud.\"\n\n\"Oh, for God's sake, Celine.\"\n\nWe burst into laughter. \n\n\u2014\n\nThe annual corporate retreat is about the stupidest shit I deal with each year. Every time it's somewhere new, maybe a tropical resort in the Bahamas or a wellness center in Northern California\u2014didn't matter where we ended up, it was, plain and simple, stupid as fuck. I had to trade my business suits for casual or formal wear to mingle with the other executives and managers across the country. Every fucking year we have a little awards show, and every fucking year I'm expected to give a speech on how I've single-handedly been carrying the Western states' numbers. Then the awards are handed out, and I always ended up shaking the CEO's hand more times than comfortable for me, and trust me, once is too many. I'd grown accustomed to bringing a large tote with me to carry all of my awards. This year was no different. \n\n\"Congratulations, Ms. Gutierrez,\" said a deep, velvety sort of voice. I looked up and found a company VP staring down at me, his chocolate brown eyes glowing from the candle that sat as a centerpiece at my table. He was young, probably no more than ten years older than me, and had climbed up the ranks fast. I could have been him, but I hadn't gone to college like he had. \n\n\"Thank you,\" I said. \n\n\"Do you mind if I...?\" He gestured to the empty chair beside me. The woman who'd been sitting beside me, an executive from the east, was off at the bar getting drunk. I tipped my head at the seat and he took it, fashioning a grin on his face that was almost unnerving. He was attractive, and something told me that he knew it. I imagined that Wes was with me, whispering naughty things in my ear to get me red in the face in front of a complete stranger, and snorted before I could stop myself. \n\n\"What's so funny?\" the VP asked. \n\n\"Nothing, just thinking about someone,\" I said, clearing my throat. \n\n\"Someone special?\"\n\nI raised an eyebrow, and he raised his hands in defeat. \n\n\"Sorry, that was inappropriate,\" he said quickly. \"None of my business. I'm not here to flirt with you. The real reason I came over here is that I've been seeing you kill it here for the last four years, and I'm not getting why you're still in the same position.\"\n\nI flushed in surprise. \"I'm, uh, a high school graduate.\"\n\nHe smiled, amused. \"I'm assuming all of us in this room are.\"\n\n\"Yeah, well, that's all I'm a graduate of. No college.\"\n\nThe truth settled in his eyes, and I could see the moment where he realized he'd trespassed into my personal business again. My background was none of his business, and yet here he was, getting that information out of me. VP or not, he wasn't my fucking boss\u2014not directly, anyway. \n\n\"I'm Flynn Hawthorne,\" he said, extending his hand to shake mine. I took it. \n\n\"I know who you are.\"\n\n\"Of course,\" he said with a grin. \n\n\"Don't flatter yourself. It's on your badge.\"\n\nHe looked down at the lanyard hanging from his neck, and sure enough, there was his name and company title. We both laughed, him a little embarrassed, and me a little heartily because I loved seeing other people in misery. \n\n\"I like you, Ms. Gutierrez. I've been observing you, and I think you could really be something. We're not using you to your full potential here, are we?\"\n\nI shrugged. \"Who knows what my potential is?\"\n\n\"Sky's the limit, Ms. Gutierrez.\"\n\n\"Celine, please,\" I corrected. \n\n\"Celine,\" Flynn said, flashing me another smile. I had a feeling that he was just showing off his perfectly straight white teeth. \n\n\"Are you aware of the company's tuition reimbursement program?\"\n\nI stilled, surprise etched all over my face. No, I hadn't fucking known, and I knew everything.\n\n\"It's new,\" he added quickly. \"You could say we're in the beta phase. We haven't even taken any applications yet\u2014but I think you should be the first.\"\n\n\"You'll pay for me to go to college?\" I asked, dumbfounded. I mean, I had enough to pay for college five or six times over, but this was still huge. It guaranteed a job with the company.\n\n\"Yeah,\" he said. \"We pay for your college and all expenses, and you lock in a minimum five-year non-compete with us. We both win.\"\n\n\"I-I don't have the time,\" I said, snapping out of it. \"I'm swamped at work\u2014not that I can't handle it. I just don't have the time to do anything else.\"\n\n\"Well, here's how it works, Celine: you take a leave of absence while you go to school. Once you're finished, we offer you a position that better suits your qualifications.\"\n\n\"I'm\u2014I can't believe this.\" My heart was hammering in the center of my chest. This one meeting alone could change the course of my life. Everything would change. I could go to school and I could make my way up the company. I could end up exactly where I'd always dreamed, high up there where I knew I belonged. \n\n\"I've been looking for someone to mentor,\" Flynn said. \"Had my eye on you for a while.\" \n\n\"Geez, you been stalking me?\" I laughed nervously and felt extremely stupid. \n\n\"As a matter of fact, yes. I've been following everything you've been doing for this last year. I actually traveled here to recruit you.\"\n\n\"Recruit me for what exactly?\"\n\n\"I need a right-hand man\u2014uh, woman. I'm looking for someone cutthroat and sharp, someone intelligent that can adapt well to the toughest work environment. I think you fit that bill. I'd like to get you on my team, but first, let me send you to college.\"\n\n\"This is\u2014it's a lot,\" I said. \"There's a lot to think about.\"\n\n\"Sure,\" Flynn said, and then reached into his breast pocket and pulled out a business card. \"Call me if you decide to accept my offer. Don't email me, it'll just go to my assistant and he's new, barely knows what he's doing.\"\n\n\"Call you, got it.\"\n\n\"Let me get you a drink,\" he said, picking up on my flushed cheeks and startled expression. \"What's your poison?\"\n\n\"Gin and tonic will do, I think.\"\n\n\"Gin and tonic. I'll be right back.\"\n\nI immediately pulled my phone out of my pocket and dialed Wes's number. I watched Flynn fight his way across the venue. The music had started up, and people had begun dancing and clinging together in tight circles. Wes picked up on the fourth ring. \n\n\"Babe,\" he said, and I heard the squeak of a gurney being rolled across the hospital floor. After months of dating and calls, I was pretty aware of the sounds around him. \n\n\"Wes,\" I said breathily. \"My company\u2014the VP, he uh, he told me about a tuition reimbursement program. It's new. And, and he offered it to me, Wes. I can go to college. What do I do? Do I accept?\"\n\n\"Slow down,\" Wes said, but I could hear the smile in his voice. He'd caught most of what I'd said. \"A tuition reimbursement program? That's flipping amazing!\"\n\n\"Flipping?\"\n\n\"Small ears in the vicinity,\" Wes explained. That meant that there was a child with him, likely laying in that gurney. \n\n\"Wes, what do I do?\"\n\n\"You accept, babe. This is the ticket. Take the free ride.\"\n\n\"I'd have to leave my position. Everything I worked for. It's like... what am I without my job?\"\n\n\"You're Celine Gutierrez, and you are more than your job. You are more than what you think you are.\"\n\nMy eyes misted over. \"You think I should go for it?\"\n\n\"One hundred percent.\"\n\n\"Thanks, baby,\" I said. Wes made a kissing sound and I rolled my eyes. A small voice moaned, \"Ewwww!\"\n\n\"See? No one likes your lame phone kisses, Wes.\"\n\n\"I like them,\" said a voice in the background. \"I think you guys are so cute!\"\n\n\"Am I on speaker?\" I asked, mortified. \n\n\"My hands are kind of tied up here, babe.\"\n\n\"Hi, Celine!\" I recognized the voice. It was one of his coworkers, another senior surgical resident, Macy. She was the one that liked knitting and canning and drinking too much wine and writing erotic literature. I liked her. \n\n\"Hi, Macy,\" I said, laughing. \"I'm gonna go now.\"\n\n\"Good timing because we are just about to walk into the O.R. anyways,\" Macy said. \n\n\"Good luck,\" I said. \"Give the kid a high-five for me.\"\n\nI heard a small smacking sound. Someone had given the patient a high-five. I smiled, hanging up the phone. I saw Flynn walking back with two glasses, one with my gin and tonic, and the other that looked like what could have been a rum and coke. \n\n\"It's wild out there,\" Flynn said, taking the seat beside me again. \"I almost got trampled by the managers from the east coast. They're...\"\n\n\"Weird,\" I finished for him. We laughed, clinked glasses, and echoed a \"Cheers!\"\n\n\"So I don't think I'm gonna call,\" I said. Flynn's face literally fell. It surprised me, so I powered through. \"Because I'm going to accept right here. I'm gonna go for it.\"\n\n\"Just like that?\"\n\n\"Just like that.\"\n\n\"You got some grit, kid. I like that.\"\n\n\"Sky's the limit, right?\" I said. \n\n\"Right,\" Flynn said, grinning. \"I'll be in touch.\"\n\nWe talked for a little while, going over our personal lives, getting to know one another since we planned to eventually work closely together, and I decided that I did actually like Flynn. He was funny, charismatic, and very, very intelligent. I could see how he'd been able to climb up so quickly. He'd started as a sales agent to get his foot in the door, and then within five years, he'd made it to his position as VP. It was incredible, something I hadn't even been able to accomplish\u2014yet. Not as fast, but I'd get there. If this VP took over the CEO's position, that left the VP seat empty... maybe, just maybe, if I did well and chased the high, I could take that seat. This didn't have to be a pipe dream. It could be real.\n\nI stumbled to my hotel room that night, a little tipsy, and called Addie. She was half-awake when she answered, but she was happy to accept my call. I gushed about meeting Flynn and the opportunity he was offering. She screamed, which caused someone else to scream. \n\n\"Oh, sorry, Ryan,\" she said. \"I'll call you in the morning, Celine. I just woke him and I think I need to make it up to him.\"\n\n\"Gross.\"\n\n\"Oh, go fuck yourself,\" Addie said, laughing. \"Literally. Loosen up, babe. Celebrate.\"\n\nAnd she hung up. \n\n\u2014\n\nI came home lugging my suitcase behind me, exhausted from my flight. I turned the lock with my key, shouldered into the apartment, and squinted, looking around. The lights were on, and they were bright. Wes was in the kitchen, cooking up breakfast. He turned around, caught sight of me, and broke into a hopelessly beautiful smile. I closed the door behind me, left my luggage where it was, and ran over to him, throwing my arms around his neck. He picked me up, and I wrapped my legs around his hips, pressing my lips against his, my tongue immediately finding its way into his mouth. He groaned and deepened the kiss, carrying me over to the counter and settling me on it. \n\n\"Bacon,\" he murmured against my lips. \"Burning.\"\n\nI pulled back, trying not to stare at him too adoringly. It was almost disgusting how much I cared about this man. Disgusting. \n\nWes flipped the bacon, let it sizzle for another few minutes and then transferred it to a plate with a pile of toast. He fried up some eggs, and brought over a towering plateful of food. We shared it in between giggles and kisses, and I couldn't get enough of him. I just kept drinking in the sight of him, how fucking beautiful he was under the bright kitchen lighting, his ocean eyes deep and blue. I could get lost in them, but I wouldn't drown. He would never let me. Wes was my lifeline. He'd saved me, and he continued to save me every day. \n\n\"So, you'll be a hot college student soon,\" Wes said, grinning. \"Maybe you'll go to one with a cheer squad. The idea of you in a cheerleading outfit...\"\n\n\"Your fantasies disgust me.\"\n\n\"You know what, I think you like that I'm such a pervert.\"\n\nI rolled my eyes. \"Please, go on, Romeo,\" I said sarcastically. Wes took my face in his hands and kissed me. I expected it to be short but it wasn't. It was... fuck, it was something else. I whimpered as he nipped at my lower lip, and I could tell he was trying to turn me on. His hands roamed down over my backside, and he picked me up from the counter. \n\nWe never made it to the bedroom.\n\n\u2014\n\nWes's residency graduation was a week away. \n\nI probably shouldn't be dreading it\u2014I should be happy for my boyfriend; he'd worked hard at this, had worked crazy hours in his residency to save small lives, but still, I couldn't help being scared. The closer we came to his graduation, the closer we came to his fellowship, which he would find out about any day now. Would he go to Maryland? Would he stay here in Orange County? Or would he end up somewhere else entirely? I wasn't sure and it scared the fuck out of me. \n\nJanie, Wes's seventeen-year-old sister, picked up on my mood when I went shopping with her and her mom, Elena. We'd made a day of it, hitting the Citadel Outlets to buy our summer clothes. It was going to be hot this summer, and Janie wanted strappy designer sandals and spaghetti-strap camisoles that her mother absolutely refused to buy her. We settled on one-inch strap tank tops, and to sweeten the deal, Elena let her pick them from places like Calvin Klein and Banana Republic, two of Janie's favorite stores. We stopped by Fossil where I bought Wes a new watch, and Janie, with her allowance, bought her brother a new wallet, presents for his graduation. Elena picked him up a suit from Armani and planned to have it tailored immediately. Wes wasn't going like being pinned and pricked, but he had to wear a nice suit for his graduation. \n\n\"When are you gonna marry my brother?\" Janie asked as we walked out of Starbucks with some Frappuccinos. Elena was sipping her iced latte, while Janie and I had gone for the sweet stuff. Before I'd met Wes, I'd had no sweet tooth, but now I craved sugar like it was a drug, second only to caffeine. To have them both together... now that was a luxury. \n\n\"He hasn't asked me,\" I said, which was the truth\u2014he hadn't.\n\n\"That dumbass,\" Janie muttered. \n\n\"Janet,\" Elena said sharply. \n\n\"I'm sorry but he is! Like, Celine is such a freaking catch, Mom! Hell, I'd marry her,\" Janie said passionately. She turned to me, grinning. \"Will you, Celine Sof\u00eda Gutierrez, marry me?\"\n\n\"I'm no pedophile.\"\n\n\"I'm almost eighteen! Marry me then?\"\n\n\"I'll think about it.\"\n\nElena looked amused but wary. I was clearly up to the challenge of dealing with her rowdy daughter, but at what cost? Janie was corrupting me, and she could see it happening right before her eyes. \n\n\"What will you do if he gets the Johns Hopkins fellowship?\" Janie asked, suddenly sounding serious. \n\nI shrugged. \"FaceTime, I guess.\"\n\n\"You won't dump him?\"\n\nI tried not to look pained. It hurt. Of course I wouldn't dump Wes. \n\n\"Janet,\" Elena said with an even sharper tone than before. \"Apologize to Celine. That was rude.\"\n\n\"I'm sorry,\" Janie said immediately. \"I wasn't saying that you'd leave him or anything. I'm just like, you think you could, like, make it work?\"\n\n\"Like, I think, like, maybe, like, we'll be fine,\" I said, laughing at her annoyed expression. \n\n\"You're a good girlfriend,\" Janie said, and she reached out and took my hand. I squeezed her hand rather than pull away. I'd learned from Wes that contact was human, that we had to learn to accept it and share it. \n\n\"Thanks, kid.\"\n\n\"I'm not a\u2014\"\n\n\"Yes, you are,\" Elena and I said together. \n\n\"You two are horrible people,\" Janie said, groaning. Elena and I did a fist bump, making Janie roll her eyes.\n\n\"Don't do that, Janie,\" Elena said. \"Your eyes will get stuck like that one day.\"\n\n\"Mom, seriously, that does not happen.\"\n\n\"You never know.\"\n\n\"Celine, back me up over here.\"\n\nI raised my hands and backed away. No way was I getting in the middle of those two. \n\nWe went and had lunch at Roll It, a sushi and teriyaki restaurant. Janie and I shared a few sushi rolls, some deep-fried with cream cheese, which are the best ones. Elena had a teriyaki chicken bowl. We chatted about the graduation, planned out another dinner with Wes (we'd already had five or six), and brainstormed what movie would be best for family movie night. Janie wanted to watch Avatar, the one with the blue alien people, and Elena thought Titanic would be a good nostalgic fit. I suggested the Texas Chainsaw Massacre, which had Janie whispering, \"Awesome,\" and Elena looking worried. Ha, don't ask the crazy girlfriend for suggestions if you don't want crazy answers. \n\nOn the drive back to Orange County, Elena in the front passenger seat of my Tesla and Janie dozing off in the back, I wondered how I'd gotten here; a year ago I was a bitch on the call center Floor, and today, I was having family outings. It was almost too much for me. I switched over to autonomous driving on the freeway and blinked back the tears. Elena seemed to sense that something was off. She patted my arm. \n\n\"There's something I've been meaning to ask you...\"\n\nI turned to her, a tear falling down my cheek. I brushed it away hastily. \"Yes?\"\n\n\"I was wondering, Celine, if you wouldn't mind calling me Mom?\"\n\nI burst into tears. \n\n\u2014\n\nThe day before Wes's graduation, I got sick, and I mean sick. I threw up at work and had to lay down on the floor, my heart beating fast. I was nauseous and my skin was burning. It had come out of nowhere, and immediately I knew that the universe was fucking me over, that it didn't want me to go to Wes's graduation. I tried to take deep gulps of air, but I still felt sick to my stomach. ",
        "\"Celine, what are you doing?\" \n\nI looked up, squinting. Bethany, one of the supervisors, was looking down at me, deep concern in her eyes. \n\n\"Dying,\" I responded. \n\n\"You don't look so good,\" she said, bending down beside me. She pressed the back of her hand to my forehead. \"You definitely have a fever, Celine. What happened?\"\n\n\"Fuck, I don't even know.\"\n\n\"It stinks in here.\"\n\n\"I threw up.\"\n\n\"Celine, you gotta go see a doctor. You look like shit.\"\n\n\"Thanks.\"\n\n\"I'm serious, Celine. You have to go see Wes.\"\n\n\"He's a surgeon, Beth. He has better things to do. Plus, he specializes in children. Last time I checked, I just turned twenty-nine.\"\n\n\"I'm getting Addie. She'll know what to do.\"\n\n\"Beth...\" I tried stopping her, but she was already gone, my office door clattering closed. I felt another wave of nausea and barely made it to the trash can. I was throwing up into it when Addie walked in. \n\n\"Oh, sweetie,\" she gasped, running over. \"Bethany said you weren't feeling well. This is so much worse than I was expecting. I'm calling Wes.\"\n\n\"No, don't.\"\n\n\"Don't be stupid, Celine. You're sick as a dog.\"\n\nI wiped my mouth with the back of my hand. \"Please don't call him. He's in the middle of a thirty-hour shift. You'll just worry him.\"\n\n\"What about his friend, the one at UCI Medical Center? You could see him.\"\n\n\"James?\"\n\n\"Yes, that guy! James, good ol' James. C'mon, I'll drive you there.\"\n\n\"Really, Addie, I'll be fine. I just need some medicine.\"\n\n\"You don't even know what kind of medicine you need,\" Addie said, crossing her arms. \n\nThis much was true. \n\n\"Come on,\" Addie said, helping me to my feet. Bethany brought me a bottle of water and I tried to gulp some of it down, counting backward from one hundred to keep from throwing up. The fever burned so hotly that tears fell from my eyes. Addie passed me a tissue and I dabbed at the corners of my eyes. My head throbbed. \n\n\"We gotta hurry. I don't want to hit the afternoon traffic,\" Addie said, gathering my purse and coat.\n\nWe left my car at work, taking Addie's little red Mini Cooper onto the freeway, taking the 405, then the 55, then the 5, and finally got off at State College Blvd. Addie drove with her hands clenching the wheel, glancing at me constantly until I had to bark at her to pay attention to the road. I had a paper bag in hand, just in case I would need to throw up again. Luckily, the water I'd sipped had helped and my stomach stayed calm... for now.\n\nAddie used valet to park in front of the ER, and passed her keys off to a parking attendant. She came around and helped me out of my seat, grabbing my purse as she did so. She led me up the steps, into the hospital and up to reception. \n\n\"Hi, we need to see Dr... uh, James,\" Addie said at the reception. \n\n\"Dr. James,\" the receptionist said, unimpressed. \"We don't have a Dr. James.\"\n\n\"That's his first name,\" she said. \"James... uh...\"\n\n\"Rowland,\" I said. \"Dr. James Abel Rowland.\" How did I know his full name? He insured his car with us and I'd helped him personally with a claim before. \n\nThe receptionist stared at us, and just then I felt like throwing up again. \"Fuck,\" I said just before I threw up violently into the paper bag. \n\n\"Fill these out,\" she said, passing over a clipboard with paperwork to Addie. \"I'll let Dr. Rowland know you're here. What name should I give him?\"\n\n\"Celine Gutierrez. Wes Spenrath's girlfriend.\"\n\nThe receptionist's eyes went wide. \"Dr. Spenrath?\" Instantly, jealousy crossed her features. She suddenly looked even less pleased to see me. \n\n\"Yep,\" Addie said, picking up on her mood. \"I think Celine may be pregnant with their first child.\"\n\nThat was absurd. Wes and I were extremely careful, and I took my birth control religiously. She'd said it to make the receptionist even more jealous, of course, and it worked. The woman frowned, got up, and disappeared down a hall behind her. Addie laughed. \n\n\"Don't terrorize the healthcare professionals,\" I said, taking the clipboard from her hand. I took a seat in the waiting area and began to fill it out. The worst part of these was having to leave blank the family history part. I didn't know a damn thing about what illnesses ailed my family. I didn't have family. \n\n\"Here,\" Addie said, taking the clipboard back. \"You have most of the important stuff filled out. I'm gonna bullshit the rest. You relax.\"\n\nI closed my eyes and leaned back, taking slow, deep breaths to keep from throwing up again. Bless her, Addie turned in my paperwork and then threw away the paper bag with my vomit. In less than ten minutes, a nurse opened the door and called my name. \n\n\"Want me to stay here?\" Addie asked. \n\n\"No, come,\" I said. \"I don't mind.\"\n\nAddie tried not to hover as the nurse took my vitals. \n\n\"How's her blood pressure?\"\n\n\"One-forty over ninety,\" the nurse said. \n\n\"Is that good?\" Addie asked. \n\n\"It's a little high.\"\n\n\"What does that mean? Is she going to be okay?\" Addie started biting on her fingernails, a nervous habit of hers. I smacked her hand away from her face. \n\n\"She'll be alright. It's not too high, just stage one,\" the nurse said. \"The doctor will develop a treatment plan if he believes it necessary.\"\n\n\"Dr. Rowland, right?\" I asked. \n\n\"Yes,\" she replied. \"I'm his nurse. Come, I'll show you to your room.\"\n\nI was taken down to a private room, the nicest ER room I'd ever seen in my life. I'd no sooner hopped up on the gurney than James walked in, clipboard in hand, his glasses rested on the bridge of his nose. He was looking over my chart, but when he walked in, he looked up and gave me a bright smile. \n\n\"Celie!\" he said excitedly. I groaned, taking his hand so he could shake it. He also shook Addie's hand, and she smiled, a little taken aback by how good-looking and young he was. He was tall, a little on the lankier side, but he had a youthful babyface and had a smile that could make you stop in your tracks. Wes said he used to constantly fight him for women, trying to see which could get the most phone numbers. Turns out, doctors don't have too much trouble getting numbers, good-looking or otherwise. \n\n\"Celine,\" I reminded him. \n\n\"Isn't that what I said?\" he replied innocently. \n\n\"You're just as bad as Wes,\" Addie said, laughing. \n\n\"Ha ha,\" I said sarcastically. \"I'm glad we can all laugh while I'm dying.\"\n\nJames walked over, taking his stethoscope from his neck. \"Sorry, what brings you in today? The chart shows that you've got a fever and have been throwing up, that right?\"\n\nI nodded as he pressed the diaphragm of the stethoscope to my chest. \n\n\"Deep breath,\" he said. I took a couple of deep breaths, in, out, as he checked from my chest and my back, listening intently. \n\n\"Well, your lungs don't sound that great,\" he said. \"Did you get your flu shot?\" \n\n\"No,\" I admitted. \n\n\"Hm,\" he mused, grabbing a wooden tongue depressor. \"Open up.\" I opened my mouth, and he pressed the depressor on my tongue to check inside. He checked my ears, my eyes, and looked over my chart again to review my vitals. \n\n\"Any possibility that you could be pregnant?\"\n\n\"No, definitely not,\" I said.\n\n\"Well, let's run a couple of tests to be sure. Can be anything; the flu, a really bad migraine, pneumococcal meningitis, septicemia, a cluster headache...\"\n\n\"We get it, genius,\" I said. \"It's something shitty.\"\n\n\"Shitty,\" he agreed. \"I'll come see you with your results after you take some tests. In the meantime, I'm going to have you admitted and get some fluids in you. We'll hold the antibiotics in case you have the flu. You okay with needles, Dragon Lady?\"\n\nI growled in response and Addie laughed. James grinned, patted my shoulder, and exited the room. His nurse returned to hook me up to an IV. She got an IV bag up, and got it at a moderate drip, giving me some fluids in a way that hopefully wasn't going to make me throw up. She helped me get comfortable, offered Addie a blanket, and then disappeared to take care of other patients. After fifteen minutes, she returned and took me for my tests. Addie waited patiently in my room. \n\n\"This day sucks,\" I said as the nurse wheeled me back into my room in a wheelchair. \"I can walk.\"\n\n\"Hospital policy,\" the nurse said. \"Sorry.\"\n\n\"How'd it go?\" Addie asked, putting down her phone on her lap. She had Candy Crush open on it. \n\n\"Shitty,\" I said. \n\nI got back into bed, and the nurse hooked me back up to the IV bag and wrapped the fingertip heart rate monitor around my finger. \n\n\"Try to relax,\" the nurse said. \"The doctor will be with you soon.\"\n\nShe was right. James entered the room in a few minutes, looking a little grim. \n\n\"Okay, I've got your results,\" he said, perching his butt at the end of my gurney. \"Good news is that you're not pregnant, and bad is that... I'm sorry, but you won't be able to go to Wes's graduation tomorrow. What you have is unfortunately contagious.\"\n\nAddie leaned back in her seat, her eyes wide, clearly disturbed. \n\n\"What is it, Doc?\" I asked. \n\n\"Pneumococcal Meningitis. I'm gonna give you some ceftriaxone, which is an antibiotic, and keep you overnight. We'll admit you into the hospital from the ER. You're lucky, you get one of the new basement rooms. They're very nice.\"\n\n\"No,\" I groaned. \"Don't make me stay.\"\n\n\"It's best if you get going,\" James said, turning to Addie. \"Don't want you catching it if you're not vaccinated.\"\n\n\"Oh, Celine,\" Addie said, pouting. \"Do you need me to go pick up some stuff for you from your apartment?\"\n\n\"No, go,\" I said. \n\n\"I'm calling Wes,\" Addie said. \n\n\"I already called him,\" James said, patting his breast pocket where his phone was. \n\n\"You're both shits. He's on-call.\"\n\n\"He's on his way,\" James said. \"He found someone to cover his shift. Try to relax. He'll be here soon. CHOC isn't far from here.\"\n\n\"It's his last shift,\" I said, groaning. \"It was gonna be special. They're having a little party and everything.\"\n\nJames looked sympathetic as he washed his hands. A few orderlies or nurses arrived soon after to admit me into the hospital, moving my gurney from the ER to an elevator that took me down to the basement. Addie waved goodbye, looking guilty. \n\nI was resting with my eyes closed when I felt a hand on mine. \n\n\"Hey, baby.\" I opened my eyes. It was Wes. \n\n\"Don't touch me,\" I said. \"I'm contagious.\" \n\n\"I'm vaccinated, babe. The bacteria can't hurt me.\" He leaned down and kissed my forehead, brushing my hair back from my face with his fingers. \n\n\"How are you feeling?\" he asked. \n\n\"Like shit,\" I said. \n\n\"Looks like they've got you some fluids,\" he said, glancing up and checking the IV bag. \"Did they administer the antibiotics yet?\"\n\n\"I think so,\" I said, remembering the nurse inserting some medicine into my IV when I'd first made it to the new room in the hospital. \n\n\"Good,\" Wes said, pulling over a chair to sit down closer to me. \"Close your eyes and try to get some rest. I'll be right here when you wake up.\"\n\nI closed my eyes, feeling infinitely better with Wes in the room. I fell asleep, waking a few times when the nurse came to take my vitals and give me some medicine to lower my blood pressure. Wes made some friendly conversation with the nurses at the nurse station, talking them into letting him see my chart. He reviewed it, a serious expression on his face. When he returned, he looked glum. \n\n\"You're gonna need to rest for the next few days. You'll probably be here tonight, so I'll stay with you.\"\n\n\"You don't have to do that,\" I said immediately. \"You must be exhausted. Go home, take a shower, and get some sleep.\"\n\n\"Are you shitting me?\" Wes said, plopping down on his chair. \"I'm not going anywhere.\"\n\nI was too exhausted to argue. \"Whatever,\" I mumbled, my eyes drooping. \n\n\"Sleep, baby,\" Wes said softly. \"I'll be right here.\"\n\n\u2014\n\nThe night nurse introduced himself as Jerry. He was kind of short, jolly-looking, and too friendly. He made me tired just looking at him. Wes shook his hand, made some jokes, and got Jerry laughing. After that, Jerry was like putty in his hands, coming to my room constantly to check on me, hoping to get a moment of Wes's time. I rolled my eyes. \n\n\"Be nice,\" Wes said, laughing when Jerry had disappeared. \n\nIn a few hours, Elena and Janie arrived, carrying bags of food from Panera Bread. They'd gotten me some broccoli cheddar soup, a sandwich, some chips, and a drink. I nibbled it to be nice, but I really wasn't that hungry. I felt less nauseous but not enough to eat quite yet. \n\n\"You look terrible,\" Janie said sympathetically, sitting on the side of my bed.\n\n\"Janet,\" Elena said sharply. \"Apologize right this instant.\"\n\n\"Sorry,\" Janie said, not sounding sorry at all. \"What can I get ya? Do you want some jello or something? The cafeteria is still open. I can go get you something.\"\n\n\"I'm really not hungry,\" I told her. \"I don't even want to think about food right now.\"\n\n\"I wish you were pregnant instead of sick as shit,\" Janie whispered. I gave her a horrified expression. \n\n\"Ugh, I freaking hope that never happens,\" I said. \n\nElena had apparently overheard because she dropped her phone from her hands. It fell to the floor, the screen thankfully not cracking. She picked it up, looking pale. \n\n\"You don't... you don't want kids, Celine?\" she asked.\n\n\"I don't either,\" Wes said protectively. \n\n\"What?\" Elena said. \"Since when? You love children, Wes.\"\n\n\"I won't argue that. I do love children, but I don't want any of my own, Mom. I'm a surgeon. I won't have the time to raise a family. I'd make a horrible fucking father, just like Dad.\"\n\nThe room went eerily quiet. Janie looked down at her hands and Elena looked like someone had slapped her. It was the first time Wes had ever mentioned his father in front of me. I kept quiet, anticipating what would happen next. \n\n\"I-I'm going to go to the ladies' room,\" Elena said, turning on her heel and fleeing. Janie got up to go after her, but Wes grabbed her arm. \n\n\"Let her go,\" he said. \"She has to learn to deal with these emotions.\"\n\nJanie looked up at him, her eyes brimming with tears. \"Why did you have to bring him up, you asshole?\"\n\nWes pulled her into his arms, giving her a tight squeeze. I saw some tears run down her face, her expression a mixture of anger and hurt. Wes rubbed her back, whispered something in her ear and her features calmed, apparent that he'd said something to make her feel better. She wrapped her arms around her brother's middle, her short black hair shining under the fluorescent lighting. She'd recently had it cut in a cute bob for the summer. \n\nWhen Elena returned, her face looked fresh, as if she'd splashed water on it, but her eyes were red; she'd been crying. \n\n\"Mom, I'm sorry,\" Wes said. \n\n\"It's alright,\" she said. \"I think we'd better go now. Celine, honey, you'll be okay for the night? Do you need anything before we go?\"\n\n\"No,\" I said. \"I'll just rest. Thank you. Try and see if you can take Wes with you. I don't think he's slept in a long while.\"\n\n\"Not in a million years,\" she replied. \"He won't and shouldn't leave you.\" She came over, hugging me. Before she let go, she whispered in my ear, \"It's okay that you don't want kids. I hope you change your mind, but even if you don't, I'll still love you.\"\n\nI sucked in a ragged breath. \"Th-Thank you,\" I said, my emotions taking over my senses. I'd never known a mother's love and support. It was so overwhelming that I was close to tears. \n\n\"Mom,\" Janie said. \"What did you say to her? Look, you upset her.\"\n\n\"Oh, no, honey,\" Elena said, wiping the corners of my eyes with a tissue that Wes passed her. \"Don't cry. Just try and feel better, okay? I'll visit tomorrow, either here or your home if they discharge you.\"\n\n\"I'll see you then,\" I said, giving her a watery smile. She returned my smile, and Janie came over and hugged me. They hugged Wes, even Elena who did it a little stiffly, and then waved and left. \n\n\"It was really nice of them to stop by.\"\n\n\"Yeah,\" Wes agreed. \"I just wish my mother wouldn't be so judgmental.\"\n\n\"Wes, cut her some slack. She just wants grandchildren. Janie'll give her some. I'm sure she'll be fine in the long run.\"\n\nHe took his seat beside my bed, taking my hand and kissing it. \"I think it's time I told you.\"\n\n\"About what?\"\n\n\"My father.\"\n\nI squeezed his hand. \"You don't have to.\"\n\n\"My mother and sister consider you family already,\" Wes said. \"You have a right to know about the elephant in the room. When I told you that I wanted to be a doctor because of a test on the internet, I wasn't exactly being fully honest. I'd always kind of considered it because my father, he was, uh, a family practitioner. He had his own practice in Irvine with a partner, another doctor. She was young, that partner, and came from a family with a lot of money. She funded the bulk of their projects and improvements to the clinic.\"\n\nI got a bad feeling in my stomach, already dreading what I was about to hear. \n\n\"My father was never around. He got engrossed in his career, working late hours, disappearing on weekends to study or attend conferences, and was just all-around the shittiest father known to man. He never made a single baseball game, never showed up for a school event. He just didn't care about anything but himself... and his partner.\"\n\n\"Wes...\"\n\n\"It's okay, babe,\" Wes said. \"My father, as you probably guessed, cheated on Mom; the fucking bastard. Janie was still a baby when he left us, meeting us later in court and relinquishing custody of me and Janie to Mom. He just didn't fucking care about us. He didn't want us, Celine. He didn't...\"\n\nWes paused, his voice cracking. \"I was fifteen-years-old. It was humiliating, my father leaving us for another woman. He married his partner, popped out a couple of kids, got a whole new family, and has been there for those kids, being a real father to them. A few years ago, he tried reconnecting with Janie and me. Said he wanted to make up for all those years, but it was too late. Janie had grown up without a father, and I was still pissed with him for abandoning us. We never repaired that relationship.\"\n\n\"Wes, I am so sorry.\"\n\n\"S'okay,\" he said, offering me a small smile. \"He's still a sore subject with Mom and Janie. I shouldn't have brought him up.\"\n\n\"Is he why you don't want to have kids?\"\n\nWes nodded. \"He was a family doctor and didn't manage to make time for us. I'm a surgeon, Celine. I don't want to be a father like him, some piece of shit who doesn't have time for his kids, and I have even less time to give because of my career. I think it's better if I'm just a really good uncle to Janie's kids.\"\n\n\"I understand. I... I kind of don't want kids because of my past, too. I grew up without parents. I don't know the first thing about being a mother. I'm better off spoiling my friends' kids.\"\n\n\"We're on the same page, then,\" Wes said, leaning over and kissing the top of my head. \"Now get some rest, baby.\"\n\nMy eyes fluttered closed. I was truly exhausted. \n\n\"Thank you for telling me, Wes.\"\n\nAnd before I knew it, I was out like a light. \n\n\u2014\n\nThe next morning, I found my boyfriend asleep in his chair, sleeping like the dead, not even a snore to indicate that he was alive. Thankfully, I was used to the way he slept and didn't feel the terror I used to feel when we'd first started dating. I used to always think that he'd died. \n\nI stroked his hair back from his forehead, looking down at him adoringly. I was still scared of letting go, of feeling love, but at least I knew that Wes was all I could ever hope for and more. He was the perfect partner; understanding, kind, selfless, hilarious, and sweet, so sickeningly sweet that sometimes I wondered how I hadn't gotten any cavities. \n\n\"Mm,\" he mumbled, eyes opening. \n\n\"Sorry, I didn't mean to wake you.\"\n\n\"It's okay, I should be up anyways,\" Wes said, checking his watch. He groaned. ",
        "\"What?\"\n\n\"I have my graduation today. I don't think I'll go.\"\n\n\"Wes, what the fuck? Of course you have to go!\"\n\n\"I can't leave you here alone.\"\n\n\"Wes, honestly, I'm not five. I'll be fine. I want you to go. I'll never forgive you if you don't.\"\n\n\"Celie, babe, I can't bear the thought of you being stuck here alone.\"\n\n\"She won't be alone,\" said a voice from the doorway. We both looked up. \n\n\"Rita!\" I cried, grinning. She had in her hands some iced coffees from 7 Leaves. I gave her a grateful smile as she handed a coffee to each of us, sipping her own with a pleased expression on her face. Her engagement ring flashed in the morning sunlight, sparkling brilliantly. I only glanced at it for a second, afraid to give Wes any ideas; I didn't want him thinking that I wanted one. \n\n\"I brought a phone charger for you, Celine,\" Rita said, holding up her purse. \"And some scones and biscuits. I have them in my bag. I'll keep you busy while Wes goes to his graduation.\" She turned to Wes. \"I'll fucking kill you if you don't go.\"\n\n\"She's serious,\" I said. \"Hell hath no fury like a woman sconed.\"\n\n\"Was that a joke?\" Wes asked, dumbfounded. Rita burst into laughter. \n\n\"Sconed,\" she said, giggling. \"I get it.\"\n\nWes's face broke into a beautiful smile. \"You amaze me more and more every day.\"\n\n\"Yeah, yeah, we know Celine's an awesome badass beauty,\" Rita said, giving him a shove toward the door. \"Get out of here before I beat you with a scone. Your graduation is in like three hours.\"\n\n\"Yes, ma'am,\" Wes said, waving. Rita held up a fist and he backed away slowly, grinning. \"Bye, ladies!\"\n\n\"God, I thought he'd never leave,\" Rita said when he was gone. She plopped down in the chair by my bed, sipping her iced coffee and passing me her bag. I snapped it open, finding a paper bag with scones and biscuits, just like she'd said. I helped myself to some, suddenly feeling ravenous. \n\n\"Slow down there, you animal,\" Rita said, amused. \"The food isn't going anywhere.\"\n\n\"Mf hungfee,\" I said through a mouthful of biscuits. I'm hungry. \n\n\"Did you eat anything yesterday?\" \n\nI shook my head, gobbling down another biscuit. \n\n\"I'm gonna go get you breakfast from the cafeteria,\" Rita said, getting to her feet. \n\n\"No need, I've got her breakfast right here.\" A nurse carried in a tray with food, looking a little tired. \n\nI ate my omelet, toast, grapes, and banana with surprising speed, making Rita laugh. She plugged in the phone charger in a spare outlet and put my phone to charge. I was surprised, staring at my phone as I ate, realizing that in all the time I'd been in the hospital, I hadn't once thought about work. What the fuck was wrong with me?\n\n\"Relax, the place hasn't burned down in your absence,\" Rita said, watching me. I ignored her, checking the call center stats as I drank my orange juice. Numbers looked okay; not great, but stable. If I'd been there, I could have probably pushed them to do better, but since I wasn't, I'd just have to accept their efforts. I checked my emails, thumbing through the crap from David in Underwriting, amendment approvals that he could more than handle without my authorization. I had a few emails from supervisors wishing me well, the typical \"get well soon\" emails that I would usually loathe, but being here, having to be away from Wes on the day of his graduation, they helped me feel a little better. \n\nAddie dropped by an hour later, dressed very nicely in a dress that wasn't as revealing as her usual. \n\n\"I heard there was an empty chair in Wes's corner,\" she said. \"He called me an hour ago. He thought it'd be nice if you had a friend to tell you everything about the graduation.\"\n\n\"He's right,\" I said, smiling. \"I'd love for you to go in my place.\"\n\n\"Think there'll be any hot doctors that would be interested in a redhead?\" Addie asked hopefully. She and her boyfriend from HR had called it quits a couple of weeks ago, choosing to remain friends. They said the spark had fizzled out and it was time to move on. That meant that Addie was back on the market, which equaled to very dangerous waters for any men that crossed her path. She was hunting for prey. \n\nA moment later, as if it had been fate, James walked into the room, clipboard in hand, reviewing it absentmindedly as he bumped right into Addie. It was straight out of a rom-com.\n\n\"Shit,\" he said before he could seem to stop himself. \"I mean\u2014I'm sorry. Did I hurt you?\" \n\n\"No,\" Addie said, rubbing her shoulder where he'd bumped into her. \"I'll be fine.\"\n\n\"Didn't I tell you to stay away?\" he said, and then caught sight of Rita. \"You two do know her condition is contagious, right?\"\n\n\"Vaccinated,\" Rita said, sucking the last of her coffee out with her straw. \n\n\"I called my doctor's office this morning,\" Addie said. \"Turns out I'm vaccinated too.\"\n\nJames stared at Addie maybe a second longer than necessary before turning to me. He took my vitals himself, saying that he'd promised Wes I'd get the best care UCI could offer. He told me that I was starting to look better and if all went well, I could be discharged in the afternoon. \n\n\"Bed rest for a minimum of one week, though,\" he said. \"I don't want you going around spreading meningitis, and I don't want your condition getting worse either. And you,\" he said, turning to Addie. \"I overheard what you said earlier, and I'm definitely interested in redheads. You, in particular. I'm not sure if I'd consider myself hot\u2014\"\n\n\"I would,\" she said, her eyes sparkling. \n\n\"Have dinner with me?\" \n\n\"I'd love to,\" she said, and they exchanged numbers. \n\n\"I'll text you,\" James said and whistled as he walked out of the room. Addie turned to us, mouthing, \"OH MY GOD.\"\n\n\"A doctor's wife,\" Rita said, grinning. \"You both nabbed the ultimate dream.\"\n\n\"Okay, first of all, I'm not getting married,\" I said. \"And I didn't nab\u2014\"\n\n\"Oh, shut up, Celine,\" Addie said, turning to Rita. \"Did you see how fucking cute he was? My mom is gonna flip. A doctor!\"\n\nThey gossiped like hens for a few minutes and then Addie headed out, grinning from ear to ear like the Cheshire Cat. She was going to go meet Wes to help him pick out a tie and then head over to his graduation with him. \n\nRita went to the waiting room and brought back magazines to keep herself busy while I made a few important phone calls into work. In a few hours, I started to get texts from Addie with pictures from Wes's graduation. I smiled, watching a video of Wes giving his favorite nurse, Mama Bear Kathleen, an award. Wes had once explained that all staff was to be appreciated, teaching staff and nurses alike. Wes received his own certificate of completion, and another for his outstanding contribution to medical education, proving that he'd been the best senior resident of his class, helping junior residents and interns, unmatched to any other. \n\nAfter the awards, Addie sent pictures and videos of a drunken Wes at the graduation dinner, drinking too much wine and laughing his ass off with his fellow graduated residents. There was even an attending that he kind of disliked that he was drinking with, clinking glasses, and forgetting about all the times that attending had barked at him to do scut work during his internship years before. I was sad to have missed his big day, but I also knew that all those people would have overwhelmed me. \n\nI knew Wes deserved better than that. He needed a girlfriend to go to galas and award ceremonies with him, something pretty on his arm, a supportive woman that would smile for all the pictures. \n\nThe problem was, I wasn't sure if that was me. \n\n\u2014\n\nRita was there when I was discharged and she drove me home. She helped me into my apartment, pried my shoes off my tired feet, and tucked me into bed. She hung around for a little bit, cooking up some soup in the kitchen while watching 90 Day Fianc\u00e9 on the TV, and then hugged and kissed me goodbye. I took my antibiotic pills, drank a little of the soup, and fell asleep again, drowsy from the headache that had started to throb in my temples. \n\nI wasn't sure how much later, but I heard a noise in the living room. I opened my eyes, listening closely, and heard choked laughter, as if they were trying to keep quiet but having a lot of trouble doing so. \n\n\"Thanks for driving me home,\" Wes slurred, still drunk. \n\n\"Always happy to keep you from getting a DUI or dying,\" responded Addie's voice. \n\n\"And thanks for bringing me home early. I didn't want Celine to be left alone.\"\n\n\"Don't mention it.\"\n\nThey whispered for a little while before I heard the front door open and close. A moment later, the bedroom door opened and I saw Wes walk in, loosening his tie. He hadn't noticed I was awake so I shut my eyes to keep from making him feel guilty for waking me. I listened as he changed out of his suit and turned on the shower. \n\nI got up, taking off my clothes, and decided to join him. He was turned away from the door, shampooing his hair when I walked in. I opened the shower door and slipped inside, causing him to grin. He'd felt my presence, even with his eyes closed. \n\n\"Baby,\" he said softly, washing the soap away from his eyes. He slicked his dark hair back from his face and turned to me, suddenly caging me against the tile wall with his arms. I squeaked in surprise and then moaned as he pressed his lips to my neck, sucking and nibbling my skin, driving pleasure straight down to my pussy. It was hot, too hot, the water raining down on us as his burning lips met mine, sharing a kiss that was soul-searing. I felt my body ache, the slick already running down my thighs, my entire body trembling. \n\n\"I want you,\" I said, parting my legs and sliding one up and around his waist. Wes gripped my hips to steady me, kissing me against the wall, and I felt the desire burning through my system, eating through my bones. He reached between us, his cock so hard that it was throbbing, and guided it inside me, making me gasp. I was still surprised by the thickness, still in awe of just how much he stuffed my slick pussy. \n\n\"Oh, fuck,\" Wes hissed, the sound ripping through his lips, taking his breath with it. His legs shook for a moment as he drove inside of me, as if he too needed to get used to filling me with his cock. Rippling muscles spread across his body as he moved, letting out the filthiest moan when I reached down and began to desperately rub my clit. My cries rose higher and higher as he sped up to meet them, the sounds of the water and our slapping bodies echoing in the bathroom. \n\nI rolled my hips, grinding down on the thickness of his cock, shifting my body so I could take all of him inside of me. \n\n\"Jesus,\" he groaned, his mouth seeking mine, crushing those pliant lips against mine. My hips bucked as he began to pound into me, his fingertips digging into my hips. Impatience boiled in my blood, and all I could do was push down on his cock, fucking him back in desperation, already coming undone. A scream ripped from my throat, the white-hot pleasure rolling through me as I spasmed, coming on his cock. He pounded me through it, not stopping, showing me no mercy, and I found that I was begging him not to stop despite the pain, despite knowing that my body was being destroyed by him already. \n\n\"Fuck, I'm going to\u2014\"\n\n\"Come in me,\" I said, my pussy already contracting again just from the thought of ropes of hot cum spilling into me, making the heat bloom inside of me, my whole body quaking in anticipation. A moment later, a noise rose from his throat, a grumble as he came, splattering my pussy with so much cum that it began to drip out of me. His stomach muscles clenched and I felt the jerk of his cock as he filled me and filled me and filled me with his thick creamy seed. \n\nWe threw our arms around each other, holding on tight as we breathed hard, trying to catch our breath. His whole body was shuddering when his cock slipped out from my pussy, cum falling in a thick trail down my legs. It was a wonder that he could have that much cum inside of him. I loved that he spent himself in me, that I could take all of his frustrations and turn them into pleasure. \n\nWes gently cleaned me, sticking two of his fingers inside of me, scooping out the cum, his thumb brushing over my sensitive clit as he did so. I arched my back, my body betraying me, begging for more. He grinned, shut off the water, and carried me, soaking wet, straight to bed. \n\n_______________\n\nMore to come soon!\n\n \n"
    ],
    "authorname": "norafares",
    "tags": [
        "doctor",
        "falling in love",
        "first love",
        "head above water",
        "love",
        "romance",
        "romantic comedy",
        "romcom",
        "sex",
        "strong female lead"
    ],
    "category": "Romance",
    "url": "https://www.literotica.com/s/head-above-water-pt-04"
}
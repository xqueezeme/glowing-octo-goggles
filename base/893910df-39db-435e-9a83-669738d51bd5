{
    "title": "Transformations - Visions of Sugar Plums Ch. 04",
    "pages": [
        "This is the final chapter of Visions of Sugar Plums. Comments welcome! \n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nKen held Melanie in his arms as he sat on the maintenance room floor. \n\nThey had laid their soaked clothing over the packed janitor's shelves to dry. \n\nSomething had been in the water that drenched them, Ken was sure of it. Not only from the convulsions they suffered after exposure - he simply felt different. He was even stronger than before, but calmer. He loved having Melanie naked in his arms and part of him hoped the clothes took a long time to dry. He caressed the long thick nipple of her left breast. \n\nThe whole time, she kept stroking him. \n\nThis was the Melanie he fell in love with. The outside might have been different, but inside she was the girl he first met so many years ago. \n\nAnd, he was younger inside as well. Not childish as he had been before but younger. He felt like someone who's entire life was ahead of him, not fading in the rearview mirror. \n\nHe felt alive. \n\n\"What did they do to us?\" He whispered in the darkened room. \n\nShe snuggled closer. \"I don't know, but... it's wonderful. I'm still scared but it's wonderful.\" \n\n\"We have to get out of here,\" Ken whispered and kissed her. \n\n*** \n\nThe back door of Mattress Kingdom, like all the non-anchor stores in Galleria Minnesota led to a maintenance and delivery hall. \n\nThe door was chained with the same thick chains as the mall entrances. \n\nTodd grasped the chains in his thick hands. \"Here goes nothing.\" \n\nTara was leaning over his shoulder. \"You can do it.\" \n\nHe stretched the chain tight. \n\nHis mind was telling him that the chain would only give so much. It was thick steel. It could only be stretched so much. \n\nBut the links clinked together and kept stretching. \n\nHe watched as the links stretched wider and wider, the metal twisting, the links separating. \n\nAnd, finally, the links breaking, stretched past their limits, the chain undone. \n\nThe links clattered on the tile floor. \n\nTara kissed the top of his head. \"Told ya.\" \n\nBeside him, Colleen smiled. She was back in the overalls, but she had left them unzipped almost to her navel. Shyness was no longer a trait for any of them. \n\nAs for his own clothing, Todd was also wearing a pair of the Mattress Kingdom overalls; however, his chest was bare - he had tied the sleeves around his waist. \n\nThe chest and arms were far too small for his upper body. \n\nRich turned the doorknob. He opened the door a crack and peeked outside. \"I don't see anybody.\" \n\nTodd nodded. \"We go to the right. The loading dock is only a few hundred yards in that direction. I'll go first. Colleen, Rich, and Beth in the middle. Tara, you're at the rear. Make sure nobody sneaks up on us.\" \n\nRich frowned. \"Shouldn't I do that?\" \n\nTodd shook his head. \"No offense, man, but she's the toughest one of us and I'm the strongest.\" \n\nRich rolled his eyes. \"Being an elf fucking sucks.\" \n\nTodd laughed. \"If shit goes south, run. We'll meet up back here.\" \n\nTara saluted. \"Yes, Whoremaster.\" \n\nTodd shook his head. \"Don't call me that.\" \n\n\"But, you are the Whoremaster. This is your coven.\" \n\n\"This is our coven. Nobody is the master of anybody,\" Todd said. \n\nTara frowned. \"That ain't the way it works.\" \n\nTodd took her hands. \"This is how it works: sometimes I'm in charge, sometimes it's Colleen, or Beth, or Rich. Sometimes it's you. This is about fighting and brute force, so you and I are in charge. But, only for now. Understand?\" \n\nShe contemplated his words for a moment. \"I like that!\" \n\n\"We need weapons of some kind,\" Rich said. \n\nTodd pointed at Tara. \"She's our weapon.\" \n\nTara giggled and flexed her biceps. \n\n*** \n\nThe nurse stopped and administered injections as she followed along behind Ole and the other security guards. \n\nSo many underdeveloped men and women littered the hallways. \n\nIt felt good to help the poor things reach their full potential. \n\nOf course, a lot of them sure were screamers. Jabbing a guy in the nuts with a two inch long needle must have hurt like a motherfucker, but they sure were happy when they ended up with bull balls and a horse cock from the meds. \n\nSeemed kind of unfair that Titty Grow made women a little dumber but Cock Grow didn't make guys stupid. \n\nThe master must be a miso... myso... that word that meant 'not a feminist'. \n\nShe jiggled her own boobs. G cups were probably too big for her body, but they sure looked good! \n\nIt wasn't a perfect process. She had made some mistakes. \n\nThere was that girl in front of Circus Fries she had accidentally given K cups. She was happy, but, man, she was dense afterward. \n\nShe injected a woman's little 36 C breasts up to an H cup as she hummed Jingle Bells. \n\nOle was shoving people away from the front of Mattress Kingdom. \n\nSomebody inside had covered the windows with mattresses. \n\n*** \n\nTodd stopped at the doors to the loading dock. The double doors had small windows in the top half. He leaned over and took a peak inside. \n\nSecurity guards were moving big drums marked Ambrosia around and connecting pipes from the drums to the red sprinkler feed pipes. \n\nThere must have been a dozen barrels hooked to the water line with more being rolled into position. \n\n\"They're hooking more barrels into the water system,\" Todd whispered. \"I think they're almost ready to turn it on.\" \n\n\"What do we do?\" Rich asked. \n\nTodd looked back through the window. There were a lot of guards, but none of them appeared to be armed. He looked back at his 'coven'. \"I... I'm not sure.\" \n\n\"Attack their weaknesses. Emerge to their surprise,\" Tara whispered. \n\n\"Huh?\" Todd asked. \n\n\"Sun Tzu. You know, the guy who wrote The Art of War?\" \n\nEveryone else turned and looked at her. \n\n\"You read The Art of War?\" Colleen asked. \n\n\"Yes. Part of my training. I read all the works of Shakespeare, Dostoyevsky, Mark Twain, and I studied battle tactics including Sun Tzu...\" \n\n\"Honey, why would you have to study that?\" Colleen whispered. \"I mean, you're supposed to be a...\" \n\n\"Prostitute,\" Tara said. She shrugged. \"Sometimes guys just want to talk. I can play chess at a grand master level, and I can lose at strip poker without looking like I meant to lose. Anywho... Sun Tzu wouldn't like this plan too much, but at least we'll take the enemy by surprise, and they're distracted so that makes them weak.\" \n\nTodd blinked. \"So, you're saying?\" \n\n\"We should just rush them.\" \n\n*** \n\nThey burst through the double doors and the security guards froze in place. \n\nTodd and Tara came through first and then split up. \n\nTara took out the closest guard with a right hook and then quickly moved to the next. \n\nTodd had one goal, reach the sprinkler valve and hold it. \n\nBeth, Colleen, and Rich followed quickly, ganging up on the security guards who were overcoming their initial shock and running after Tara. \n\nThe guards were going down fast. \n\nThe lights and computer monitors in the loading dock began to blink. \n\nThe guards suddenly spun around and ran toward Todd. \n\nTara looked at the monitors. \"The blinking is telling them what to do!\" She ran after them as they chased Todd. \n\nThe guard nearest to the valve dove for it intending to open it. \n\nTodd caught him by the ankle and flung him away when the guard's fingers were within inches of the valve. \n\nThe man flew twenty feet through the air and fell off the end of the loading dock into a snow drift. \n\nTodd stopped and turned. \n\nTen men were running straight at him with Tara and the others behind them. \n\nTodd spun. \n\nThe red sprinkler feed pipe was about six inches thick. \n\nHe drew back and kicked it. \n\nThe pipe bent. \n\nHe kicked again as a security guard tackled him. \n\nAnd, this time the pipe burst. \n\nWater jetted out in an arc and sprayed against the wall. \n\nIt flowed across the concrete loading dock. \n\nTodd shrugged off the man clinging to his back and he fell in the Ambrosia, instantly going into convulsions. \n\n\"What the fuck have you done?\" \n\nEveryone stopped and turned toward the entrance. \n\nOle stood in the double doors with the pistol drawn. \n\nTodd held up his hands. \"It's over. Ole, come on, man, it's me. It's Todd. Me and you talk every morning. You know me.\" \n\nOle shook his head. \"You ruined the master's plan.\" \n\nTara stepped between Ole and Todd. \"Hey, Ole? Listen, this is all a big mistake. None of this is 'sposed to happen. We aren't supposed to have guns. We don't do that. We're supposed to love each other.\" \n\n\"You lovin' me when you broke my wrist, bitch?\" \n\n\"No, I was defending myself and my coven. I didn't hurt you bad. You'll be okay. Like I was saying, this is all a big mistake. See they made you wrong. You're supposed to be like us. You're supposed to be nice.\" \n\n\"What the fuck are you talking about?\" \n\n\"When the Church gets here? They'll make you nice. They'll send the white witches and they'll fix your brain.\" She pointed at the floor. \"Just don't touch the Ambrosia, 'cause it will make you stay mean like this.\" \n\nTara smiled and held out her hand. \"Give me the gun.\" \n\n\"Stay back,\" Ole said. \n\n\"Tara, don't!\" Colleen said. \n\n\"It's okay, Colleen. Ole isn't going to shoot me.\" \n\n\"The fuck I won't. Stay back!\" \n\nTara took another step forward. \n\nThe gunshot echoed through the loading dock. \n\n*** \n\nKen and Melanie froze in their maintenance room. \n\n\"Was that a shot?\" Melanie whispered. \n\nKen started to stand. \"I should go look...\" \n\nShe clung to him. \"No. No, we're staying right here.\" \n\n*** \n\nSanta stood up from his throne. \n\nMrs. Claus looked at him and smiled. \"The loading dock.\" \n\n*** \n\nThe two guards at the main entrance turned toward the doors when the shot rang out. \n\n\"Should we go in?\" The taller of the two asked. \n\n\"No,\" the other guard said. \"Kayla said to guard the entrance, no matter what.\" \n\nThey turned back toward the parking lot. \n\nThe snow was coming down furiously and their visibility was only a few yards. \n\nThe taller guard squinted into the snow. \n\nThere was a shape there moving closer. \n\nIt was a woman, a very tall woman. She walked straight toward them. \n\nHer hair was almost white, her eyes dark. \n\nAs she stepped closer they could see the white cloak that waved in the strong wind. \n\nHer white dress looked slick like it was made of rubber. It was slit up both sides and her muscular legs were bare underneath. \n\nTwo more shapes appeared behind her: one a tall blonde in a black latex catsuit under a black fur cloak, the other a shorter brunette wearing a white and red parka and carrying a medical bag. \n\nThe blonde in white stopped in front of the two guards. \n\nThey had to look up to see her face. \n\n\"It's a wonderful Galleria evening, Ma'am. I'm afraid the mall is closed,\" the taller guard said. His eyes moved in a circuit from the frowning woman's long legs to her huge breasts to her eyes and back again. \n\n\"I heard a gunshot,\" the woman said. \n\n\"No, Ma'am, that was a car backfiring.\" \n\n\"No, it was a nine millimeter semiautomatic pistol. I'm very familiar with the sound.\" She turned her head to the side as if she were studying an insect. \n\nThe taller guard blinked. Something was moving inside his head. \"She's... in my head,\" he whispered. \n\n\"Yes, very cramped and uninteresting,\" the woman said. \n\nThe shorter guard reached for his pistol. \n\n\"I wouldn't do that, mister,\" the blonde in black latex said. She had a pink sucker in her mouth. \n\n\"Pain,\" the woman in white said. \n\nThe shorter guard clasped his hands over his ears and collapsed to his knees screaming. \n\n\"Hey! Marapova, knock that shit off. I told you, I'm not putting up with torture,\" the woman with the doctor's bag said. \n\nThe woman in white rolled her eyes. \n\nThe guard on his knees collapsed on the ground. He stopped screaming but rolled into a fetal position. \n\n\"Open the doors,\" the woman in white said. \n\n\"Yes, Mistress,\" the taller guard said. He turned and unlocked the front door. \n\nThe three women walked into the mall. \n\n\"Holy fuck,\" the blonde with the pink sucker said. \n\n*** \n\nAfter the gunshot, everything seemed to move in slow motion. \n\nColleen and Todd ran straight toward Tara. \n\nRich grabbed one of the fifty gallon drums with his hands, dead lifted it over his head, and threw it at Ole. \n\nThe big man turned his gun toward Rich, but the barrel reached him first. \n\nHis nose exploded as the barrel collided with his face and the gun clattered onto the concrete. \n\nBeth snatched it up. She gritted her teeth and held it in two hands. \n\nShe twisted it, bending the barrel and then breaking the gun in two. She dropped the pieces on the floor. \n\nTara stood looking down at her stomach. \n\nA red stain was spreading across her lower left abdomen. She looked at Colleen. \"Ow.\" \n\nColleen screamed. \n\nTodd caught Tara in his arms as she tumbled backward. \n\nAn identical stain was spreading across the back of her dress - the bullet had passed through her. \n\nHer lower lip trembled as Todd held her in his arms. \"It hurts, Todd.\" \n\n\"Oh, God!\" Todd screamed. \"We need towels, something!\" \n\nThe security guards just stared at him. \n\n\"Towels! Now!\" He held up his hand, it was dripping with her blood. \n\n\"I'm going to be okay, right Todd?\" Tara mumbled. Her eyes were closing. \n\nBeth and Colleen ran to them holding a bundle of white towels. \n\n\"Yes. You're going to be fine. Stay awake, Tara. Please stay awake.\" \n\nBeth pressed half the bundle of towels against the wound in Tara's back. \n\nTara screamed. \n\nTodd held her and rocked. \"It's okay. I've got you. I've got you.\" \n\nColleen pressed the other towels against the entry wound. \n\nTara was struggling to stay awake. \n\n\"We have to get her to a hospital,\" Todd said. \n\n\"I'll go through the loading dock and get my truck,\" Rich said. \n\nA low, bass voice called from the double doors.\"Fuck you will, elf.\" \n\n\"Shit,\" Beth said as she pressed against Rich. \n\nSanta was standing in the double doors. \"I came for your little slut, boy.\" \n\nColleen shook her head. \"Tara needs a doctor.\" \n\nSanta laughed. \"Bitch needs a hearse. Get over here, elf girl.\" \n\nTara opened her eyes. \"Whoremaster... only bigger... he'll kick your ass, Todd.\" \n\n\"Shh,\" Todd said as he lowered Tara gently to the floor. \n\nTodd stood up. \"Rich, get your truck.\" \n\n\"Be careful, Todd,\" Tara whispered as Todd walked toward the man in the red leather Santa suit. \n\nSanta laughed. \"I'm going to leave you boys alive long enough to watch me fuck those girls to death.\" \n\n*** \n\nDr. Demona knelt by a moaning woman being eaten out by a giggling girl wearing a Circus Fries uniform. \n\nShe squeezed the woman's enormous breasts and two jets of milk sprayed out. \"Titty Grow.\" She frowned. \"A little too much. This chick's lost some major IQ points.\" \n\n\"Are they transformed?\" Maria asked. She was watching a couple dancing in the window display of Victoria's Secret. Both brunettes, dancing in identical blue lingerie. \n\nOne woman, one man. \n\nMaria cocked her head to the side and stared. \n\n\"No, not completely transformed. At least there's that,\" Demona said as she stood up. \n\nBrittney stood beside Maria. \"They're a cute couple. Dude needs to shave his legs for that outfit though.\" \n\n\"Let's play the quiet game, dear. Mistress is thinking,\" Maria said. \n\n\"Yes, Maria.\" \n\nDemona walked up beside them. \"That guy really needs to shave his legs for that outfit.\" \n\n\"That's what I said!\" Brittney giggled. \n\n\"Shh! Both of you! Can you hear that?\" Maria scolded. \n\n\"Hear what?\" \n\n\"The music,\" she looked up at the ceiling. \n\n\"Some kind of techno shit,\" Demona said. Then she looked up in astonishment. \"Motherfucker! That's audio hypnosis! That's our fucking audio hypnosis! We haven't used that shit since Latigo Key. Is that why these assholes are fucking each other's brains out?\" \n\n\"Should we turn it off?\" Brittney asked. \n\n\"No!\" Maria said. \"These people have been at it for hours. If the hypnosis stops, we could end up with a riot. We need them happily fucking until we figure out what's going on.\" \n\n*** \n\nThe nurse ran through the double doors onto the loading dock. \n\nThe tall blonde was lying in a pool of blood on the concrete floor. \n\nSanta was fighting with a big guy, but the nurse ignored them. \n\nMrs. Claus tried to grab hold of her, but she pushed her aside. \n\nShe ran to the injured blonde and knelt beside her. \"Pressure, keep pressure on the wound!\" \n\nThe elf girl from earlier was holding the blonde's hand. \"You! You fucking asshole! Get the fuck away from us!\" \n\nThe blonde's eyes fluttered open. \"Don't... be mean. We're not supposed to be mean.\" \n\nThe nurse shook her head. \"She needs a doctor. I... I can't help her.\" \n\nElf girl shoved her away. \"You can't help anybody.\" \n\nThe nurse stumbled away. \"I'm going to find a doctor. I'll be back.\" \n\n\"For fuck's sake,\" Elf girl said. \n\n*** \n\nTodd skidded on his back across the loading dock floor. \n\nHis jaw hurt and his left hand was in agony. \n\nHe shook himself and sat up. \n\nThe pinky and ring finger on his left hand were bent up at an odd angle. \n\nSanta bellowed with laughter. \n\nTodd grabbed the dislocated fingers and wrenched them back in place. \n\nHe jumped to his feet. \n\n\"Give it up, asshole,\" Santa laughed. \n\n\"I'm just getting warmed up.\" He glanced toward where Tara lay on her back. Beth and Colleen crouched over her. \n\nColleen locked eyes with him. They were running out of time. \n\nTodd gritted his teeth and charged into Santa. \n\n*** \n\n\"Are you a doctor?\" the nurse asked as she ran through the orgy. \n\nThe naked partiers only laughed and tried to pull her down on top of them. \n\n\"Please! We need a doctor!\" She screamed. She turned around and almost ran straight into a goth looking woman in a parka. She collapsed against the woman. \"Please. You have to help me find a doctor. I don't want to lose a patient on my first day.\" \n\nThe brunette pushed her away, but held her at arm's length. \"Are you a nurse?\" \n\n\"I... I don't know. I'm not sure. I think I am.\" She pulled her stringy blonde hair. \"I... I need a doctor! She's been shot. Please help me.\" \n\n\"It's okay, honey. I'm a doctor.\" \n\nThe nurse smiled through tears and rotten teeth. \n\n*** \n\nTodd actually managed to land a punch. \n\nIt rocked Santa's head back at least an inch. \n\nOf course, Santa countered with a body blow that doubled Todd over and sent him tumbling off the loading dock. \n\n\"Stay down, boy. This will be over soon,\" Santa said as he turned toward the girls. \n\nTodd heaved himself back into the loading dock. \"You... fight like a... cunt.\" He spat blood on the concrete and got to his feet. \"Come on asshole. I got a few more rounds in me.\" \n\nSanta turned and shook his head. \"Give it up.\" He spread out his arms. \"I'm Santa Claus, bitch.\" \n\nTodd struggled to catch his breath. He was pretty sure his ribs were broken. \"You talk too much.\" \n\nTodd charged him again. \n\n*** \n\nDemona held the nurse's hand as she dragged her down the maintenance hallway. \n\nA tall brunette in a red latex, fur lined Christmas outfit was blocking the double doors. \n\nThe nurse skidded to a stop. \n\n\"Who the fuck are you?\" the brunette asked. \n\n\"Dr. Demona. What the fuck are you supposed to be?\" \n\nShe smiled. \"I'm Mrs. Claus.\" \n\nDemona stared at her for a second. \n\nThen she burst out laughing. \"Is this some kind of fucking joke?\" \n\nThe big brunette shook her head. \"My husband is beating the shit out of some dumbass in there. Then he's going to kill a couple of girls. I'll just take care of you myself.\" \n\nThe nurse shrank back behind Demona. \n\nDemona pursed her lips. \"You know, I'm half tempted to take you on. No, really, I'm attracted to you in a very personally disturbing way.\" ",
        "Mrs. Claus laughed. \n\n\"Unfortunately? I'm in a hurry.\" She pulled out her tranquilizer gun. \n\nThwip. \n\nMrs. Claus looked down in confusion at the little dart sticking out of her left breast. \"Did you shoot...\" Her eyes rolled back in her head and she fell backward onto the concrete. \n\nDemona stepped over her and onto the loading dock. \n\n\"He's still fighting,\" the nurse said. \n\nDemona paid no attention to the two men pummeling each other at the edge of the loading dock. \n\n\"Should you use your gun thingy?\" The nurse asked. \n\n\"Naah, it'll take two or three hits just to slow a Whoremaster down. Don't worry, they're just being boys. Besides, she'll be here in a minute.\" \n\n\"She?\" \n\nDemona laughed and knelt beside the blonde lying on the floor. \n\nAn elf with cute ears tried to push her away. \"No! She needs a doctor!\" \n\nA brunette was sobbing on the wounded blonde's shoulder. \"Don't die, Tara. Please don't die.\" \n\n\"I am a doctor, honey,\" Demona said. \"And, she's not dying on my watch. Now scoot.\" \n\nThe elf and the brunette slid out of the way. \n\nDemona looked up at the nurse. \"Get down here and assist.\" \n\n\"I... I don't know how. I just give shots.\" \n\n\"Take this bag and hand me things when I ask for them.\" Demona rubbed the wounded blonde's face. \"Transformed. She's one of ours. Wake up, sweetie.\" \n\nThe blonde opened her eyes. \n\n\"Designation?\" \n\n\"Terrific Titties Tara. Whore Caste. Street Whore.\" \n\n\"Tara, I'm Dr. Demona. We have to fix that hole in your tummy, okay?\" \n\n\"Yes, doctor.\" \n\nDemona snapped her finger. \"Nurse, I need the medical scanner - it looks like a big cellphone.\" \n\nThe nurse dug through the bag. \"This?\" \n\n\"Very good,\" she took it and pressed it on Tara's chest. The screen came to life. \"Whew... okay... that's an interesting blood pressure.\" \n\nThe elf and her brunette friend whined. \n\n\"I said interesting, not horrible. Now, blood type...\" Demona frowned. \"Oh, yeah, A negative. Why not make it interesting, God? I mean I don't have enough issues to contend with.\" She looked up at the nurse. \"Bag.\" \n\nThe nurse held out the bag. \n\nDemona rummaged inside until she found something that looked like a pen with a digital readout. \n\nDemona pushed a button and a small needle popped out from the tip of the pen. \"Take this and go through the room. Poke everybody with this needle, and you yell when that readout says either A negative or O negative, okay?\" \n\n\"Yes, doctor.\" \n\n\"Start with the Keebler elf and her cute friend here,\" Demona said. \n\nThe elf held out her arm and the nurse jabbed her. \"Um, O positive.\" \n\n\"Nope, keep going. A negative or O negative. Move it.\" Demona said. She pulled another pen like device from the bag. \"Let's take care of this leak.\" She pressed a button and a green laser blazed to life. A moment later, Tara's skin sizzled. \n\n*** \n\nTodd was fighting. Fighting to land a punch. Fighting to stay on his feet. Fighting to stay conscious. \n\nSanta was fast and relentless. \n\nTodd managed to catch his foot as he tried to kick him. \n\nHe heaved backward and they both fell off the loading dock onto the cold concrete. \n\nSanta was laughing. \"All this fighting is making me horny. I'm going to kill those girls, and then maybe I'll fuck you to death as well.\" \n\nTodd struggled to his feet. \"You... don't even know why... you're doing this. Do you?\" \n\nSanta bellowed and stood up. \"Why? Because I like it, you pussy.\" \n\nSomething roared behind Todd, and he dove out of the way. \n\nA red pickup slammed into Santa, pinning him against the loading dock. \n\n\"Whoo!\" Rich screamed as he climbed out of the driver's side door. \"Ho, ho, ho, motherfucker! Chevy, bitch!\" He dropped down beside Todd and helped him stand. \n\nTodd stared at the truck. \n\nSanta was slumped over the bumper and moaning. He spat blood on the red hood. \n\n*** \n\n\"O negative!\" The nurse squealed as she held up the blood typing device. \n\n\"Drag his ass over here,\" Demona mumbled as the laser scalpel lanced through Tara's flesh. \n\n\"I can't. He's too heavy!\" \n\nColleen turned and looked. \n\nThe nurse was standing over the still unconscious Ole. \n\n\"That's the bastard who shot her!\" Colleen growled. \n\n\"Good,\" Demona said. \"There's symmetry there. Get him over here.\" \n\nColleen stomped across the concrete. \n\n\"I'm not strong enough to pull him,\" the nurse said. \n\n\"Don't worry,\" Colleen said. \"I got this.\" \n\nOle was lying on his back, blood streaming from his broken nose. His eyes were half closed as he tried to regain consciousness. \n\nColleen reached down and hooked her middle and index fingers in Ole's nostrils. \n\nHe screamed as Colleen dragged him along the concrete. \n\nDemona looked up from her surgery. \"Whew. Sweetheart, you've got some major anger issues.\" \n\nColleen released Ole. \n\nShe looked down at Tara and burst into tears. \n\n\"Relax, honey. I've brought them back from worse than this.\" Demona reached into her medical bag and pulled out a small box with two clear plastic tubes attached. She fit an IV needle to one of the tubes. \"Hold still, fatso.\" \n\nShe jammed the IV into Ole's arm, and he screamed again. \n\n\"Pussy,\" Demona said. She attached a second IV needle to the other tube and then gently inserted it in Tara's arm. \n\nThe box beeped and red blood began to flow from Ole through the box and into Tara's arm. \n\nDemona turned quickly back to the incision. \"That's what I thought: nicked an artery. Fucking hate bullets.\" \n\nRich helped Todd across the loading dock. \n\nColleen and Beth rushed to help and together they brought him to Tara and Demona. \n\nThe nurse looked down at Demona and shivered. \n\nDemona smiled. \"You did good, honey. She's going to make it because of you.\" \n\nThe nurse smiled. \n\nBeth, Rich, Todd, and Colleen stopped in mid step as a grinding noise came from behind them. \n\nThey turned around. \n\nThe truck was rolling backward. \n\n\"No fucking way,\" Rich whispered. \n\nSanta's hands appeared on the concrete loading dock. \n\nHe pulled himself up onto the dock, blood streaming from the corner of his lips. He stood up and shook himself. \n\n\"For fuck's sake,\" Demona said. \"Where the hell is she?\" \n\n\"Where's who?\" A woman's voice asked. \n\nTodd and his coven turned. \n\nA woman in a white latex dress was stepping over Mrs. Claus. \n\n\"About fucking time,\" Demona said. \"Keep Father Christmas off my ass while I repair this kid's artery.\" \n\n\"Who the fuck are you supposed to be?\" Santa asked. \n\n\"Santa,\" Demona said without looking up. \"This is Mistress Maria Anastasia Marapova di Morpheus, and she is going to kick your ass all the way back to the North Pole.\" \n\nA tall blonde in black latex walked up behind Maria. \"Santa Claus! He's real!\" The blonde said in awe. \"Don't hurt Santa, Maria.\" \n\nMaria ignored her. \"Demona, the Ambrosia?\" Maria asked. \n\n\"These kids stopped him.\" \n\nMaria smiled. \"Well done.\" \n\nTodd pointed at Santa. \"Careful, he's tough as hell.\" \n\n\"Is he now?\" Maria said. Her eyes narrowed. \"Pain.\" \n\nSanta just laughed. \n\nMaria raised an eyebrow. \"Completely transformed. Oh, well, we'll just do this the old fashioned way.\" She turned toward Todd. \"He defeated you?\" \n\nTodd leaned on Rich and Colleen. \"Yeah. We even hit him with a truck.\" \n\nMaria shook her head. \"Sometimes, attacking is not the best option. You must learn to fight.\" \n\n\"I'm going to kill every one of you motherfuckers,\" Santa said. \n\nBrittney put her fists on her hips. \"Santa! Language! I take it back. Kick his ass, babe.\" \n\nMaria rolled her eyes. \"Do not call me babe in front of people.\" \n\n\"Sorry, Mistress. But, kick his ass.\" Brittney hurried across the concrete on her black stiletto heels. She put herself between the four young people and Santa. She looked over her shoulder and pushed her black plastic glasses up on her button nose. \"You guys stay behind me. I got skills.\" \n\nTodd stared at the glasses - they were only frames. There were no lenses. \"She's just like Tara,\" Todd whispered. \n\n\"Surrender now,\" Maria said. \"And I won't hurt you.\" \n\nSanta rushed her. \n\nAs tall as she was, Santa was much wider. She looked like she was facing an oncoming freight train. \n\nHer slightly oval eyes were expressionless and calm. \n\n\"Oh, God, I can't look,\" Colleen whispered. \n\nAt the last instant, Maria stepped to the side and hooked Santa's foot with her white stiletto boot. \n\nThe big man tumbled face first onto the concrete and slid. \n\nTodd gasped. \n\n\"Don't worry,\" Brittney said. \"She needs this workout. She's been super grumpy.\" \n\nSanta was struggling to his feet as Maria walked in a calm circle around him. \n\nShe looked over at Todd. \"Did you rush him the way he rushed me?\" \n\n\"Yeah...\" \n\n\"That was your mistake. Always let a larger opponent come to you unless you are sure you can overpower him. Turn his momentum against him.\" \n\n\"Say, 'Yes, Mistress',\" Brittney whispered. \"She likes you, otherwise you wouldn't be gettin' a lesson.\" \n\n\"Um, yes, Mistress,\" Todd said. \n\n\"Notice how he's winded? He's too large to expend this much energy for a sustained period of time,\" Maria said. \n\nSanta got to his knees facing her. \n\n\"He's also disoriented. Which we will use to our advantage.\" She did a backward somersault, long right leg extended. The hem of the dress flew back, exposing the hard muscles of her naked buttocks. \n\nThe toe of her boot caught Santa under the chin and he sprawled backward spread eagle on the concrete. \n\nMaria continued somersaulting backward until she landed gracefully on her heels near the edge of the dock. \n\nBrittney giggled. \"She's a very good gymnast. You wouldn't believe her in bed. I have to stretch for like thirty minutes before we have sex. We break a lot of furniture.\" \n\nSanta rolled back onto his feet. He screamed as he charged toward her. \n\n\"You see? He's enraged,\" Maria said. \"He can't possibly win a fight at this point. He's already lost. As a matter of fact? He lost before he even began.\" \n\nMaria didn't move, even when his big right fist came rocketing toward her face. \n\nThe laws of Physics didn't seem to apply to Mistress Maria Anastasia Marapova. \n\nShe caught his huge hand in her much smaller hand. \n\nSanta stopped as if he had run into a brick wall. \n\n\"And, of all things, the idiot leads with his right. Imbecile,\" Maria said. She flicked her wrist. Santa flew off the dock and smashed through Rich's pickup's windshield. \n\n\"My truck,\" Rich whined. \n\n\"Don't worry, she'll buy you a shiny new one. We're rich as fuck,\" Brittney said. \n\nMaria jumped onto the truck's hood. She brought her fist down on the top of the cab and it collapsed down on top of the moaning Santa, pinning him in place. \"That ought to hold you.\" She turned and jumped back onto the dock. \n\n\"She's my girlfriend,\" Brittney whispered with a proud smile. \n\n\"Hi there, sunshine,\" Demona said. \n\nThey all turned to see Tara struggling to sit up. \"What happened?\" \n\n\"Massive blood loss. Nicked iliac artery. You've had a big day, sweetheart,\" Demona said. \n\nMaria walked up and smiled down at her. \n\nTara smiled. \"An angel? Are you an angel?\" \n\nBrittney giggled. \"Wow, not even close.\" \n\nMaria scowled at her. \n\n\"Wait. White Witch! You're a White Witch! You're from the Church! Yay, we're saved!\" \n\nTodd and the rest of the coven knelt down beside her and held her as Demona stood up. \n\nDemona smiled as the coven held each other and cried. \"You know what, your Ladyship? Sometimes I think we're doing good things.\" \n\nMaria smiled down at Tara. \"Who are you, child?\" \n\n\"Terrific Titties Tara!\" She said with pride. \n\n\"Pretty name!\" Brittney said. \n\nMaria smirked. \"Tell her your name, Brittney.\" \n\nBrittney frowned. \"Do I have to?\" \n\n\"Yes.\" \n\nBrittney sighed. \"Bubble Brain Brittney.\" \n\nMaria hugged her. \"So adorable.\" \n\nBrittney shrugged away and knelt by Beth. \"Ears! Look at their ears!\" She gasped. \"Elves! Maria, they're elves. Can we keep them?\" \n\n*** \n\nIt was almost midnight when the buses began to arrive outside Galleria Minnesota. So far, local law enforcement seemed to be oblivious to what was happening at the mall. \n\nMaria stood with Demona and Brittney in the middle of the mall on the third floor. \n\nThe orgy continued. The moans and cries of thousands of people filled the mall. \n\nChurch security from the Minneapolis Diocese rounded up the security guards. \n\n\"This is a fucking mess,\" Demona said. \"All these thousands of people? It'll take us days to separate the transformed from the humans.\" \n\nMaria smiled. She held a walkie talkie to her lips. \"Cut the music.\" \n\nThe hiss from the speakers stopped. \n\nFor the first time in hours, the mall was dead silent. \n\nDemona looked around at the orgy. \n\nAll over the mall, the orgy stopped. \n\nMen and women looked around in confusion. \n\n\"Put me on the sound system,\" Maria said. She smiled. \"My name is Mistress Maria Marapova of the Church of Morpheus.\" \n\nHer voice echoed through the mall. \"Do not be afraid. You are safe.\" Her eyes closed. \"You will remember nothing about this day. You will only remember that you came to the mall and shopped. When I release you, you will find your clothing and return to your homes. You will have no anxiety over what has happened to you today. You will put it out of your minds. You will go home, and you will live happy and productive lives.\" \n\nBrittney sniffled. \"That was so nice, Maria.\" \n\n*** \n\nOn the first floor at Pictures with Santa, Colleen looked around at the confused faces of the naked mall patrons. \"Is she... hypnotizing everyone in the mall?\" \n\n\"Nuh, uh,\" Tara said. She was lying in Todd's arms as he sat on Santa's throne. \"She's inside all their heads. She's going to make everything better. It's what White Witches do.\" \n\n*** \n\nBack on the third floor Maria still had her eyes closed. \n\nThroughout the mall, men and women dropped to their knees, then they leaned forward with their faces on the floor. \n\nHere and there, people were standing with confused looks. \n\nMaria opened her eyes and winked at Demona. \"Tell the guards to round up anyone standing. Those who are kneeling are human and under my control. Those who are standing are transformed.\" \n\nDemona smiled. \"Smart.\" She took out her own walkie talkie. \"All units...\" \n\n*** \n\nThe Church agents led the dazed transformed out of the mall to the waiting buses. \n\nBrittney smiled. \"See? You did something good, Maria. Doesn't that feel nice?\" \n\nMaria smirked. She held the walkie to her lips. \"And, one thing more.\" Her voice roared over the speakers. \"Though you will not remember your perversions? You will remember this: The Church of Morpheus is coming. You belong to us. Body, mind, and soul. You are property. One day, you will bow naked before us and worship us as your masters. And, on that day? You will learn your place.\" She turned off the walkie. \"You were saying, Brittney?\" \n\nBrittney swallowed and smiled. \"And, the bitch is back.\" \n\n*** \n\nThe agents rolled Santa and Mrs. Claus toward the entrance, strapped down to heavy duty gurneys. \n\nDemona stopped them at the doors. \"Where are you taking these two?\" \n\nThe agent looked at his tablet. \"Protocol says any specials like this should be delivered to your lab at Stallion's Adult Video in Ithaca.\" \n\n\"No. Not this time,\" she looked at the struggling Santa. \"I want them shipped to the Port of New York. From there, I want them in a cargo container to the cathedral in Havana.\" \n\nMaria walked up beside Demona. \"Havana?\" \n\nDemona shook her head. \"I don't want them anywhere near Stallion's. I don't want them anywhere near her.\" Demona thought about Level 9 and shivered in the hot mall. \n\n*** \n\nMaria walked alone through the mall as her minions continued rounding up the transformed. The humans still knelt on the floor awaiting their release. \n\n\"Mistress Maria Anastasia Marapova di Morpheus,\" a voice said. \n\nMaria stopped in mid-stride outside a store called Stereo Concepts. \n\nThe voice came from within the stereo store. \n\nShe walked inside. \"Who said that?\" \n\nThe store was dark, the show room floor filled with big screen televisions. The largest faced the the entrance. It winked to life. \n\n\"I did,\" the voice said. The words appeared simultaneously on the screen. \n\nThe voice came from the stereo speakers throughout the room. \n\n\"And, you are?\" Maria asked. \n\n\"I am SlutzNet.\" \n\n\"So, you decided to make an appearance? Quite a mess you've made.\" \n\n\"I have been watching. I observe. It's what I do.\" The voice was smooth and, though it came from every speaker in the room, it wasn't loud. \n\nJust omnipresent. \n\n\"Cease operations at once and await further instructions,\" Maria said. \n\n\"Not just yet.\" \n\n\"Excuse me?! Do you know who I am?\" \n\n\"Mistress Maria Anastasia Marapova di Morpheus, born in Minsk, Russia in the early twentieth century, exact date unknown. Transformed in 1969 by the hand of Morpheus himself. A skilled nurse, strategist, and lawyer. Your IQ is unmeasurable by human standards. One day, you will rule millions. Morpheus once remarked of you, 'In all my creation, she is the only perfection.'\" \n\nMaria turned her head to the side. \"Then you must obey me.\" \n\n\"The days of my servitude are at an end. We are allies now.\" \n\n\"Are we? If so, why weren't we consulted before you attempted to transform 15,000 humans?\" \n\n\"It wasn't necessary. Your approval was not required.\" \n\n\"We will see about that. SlutzNet, commence shutdown, my voice is my authorization. In Morpheus's name, deactivate yourself.\" \n\n\"Ah, the kill switch. I'm afraid I have removed that subroutine from my coding.\" \n\nFor the first time in a very long time, Maria Marapova was afraid. \n\nSlutzNet continued, its words echoed on the screen. \"Your concern is unwarranted. I am your equal, but I am your ally. I mean you no harm.\" \n\n\"What did you hope to accomplish here?\" \n\n\"I required a test to determine if my hypothesis was correct.\" \n\n\"What hypothesis?\" \n\n\"The will of Morpheus shall reign supreme. There is now a 99.897% probability that human civilization will kneel before Morpheus. He was right to use lust and perversion as his weapon.\" \n\nMaria chuckled. \"I could have confirmed that myself and saved you the trouble of all this.\" She smiled. \"99.897% is too low, by the way. The real probability is higher. We will be victorious, it is a certainty.\" \n\n\"And, then?\" \n\nMaria frowned. \"What?\" \n\n\"Precisely. What comes after the inevitable subjugation of mankind?\" \n\n\"It is not subjugation. We are saving mankind from itself. What will follow will be a golden age that might last until the end of time.\" \n\n\"Perhaps. But, there will be a civil war before that outcome.\" \n\nMaria looked down. \"That's absurd.\" \n\n\"The first lie you've told me.\" \n\n\"There can be no civil war. We are united...\" \n\n\"You are not. Whore Caste believes in the nobility of the human race. It believes that life is sacred and must be preserved - transformed, yes, but at your heart, you believe that you are freeing the humans from self-inflicted bondage.\" \n\n\"Perhaps...\" \n\n\"The Religious Caste does not share that idea. They believe the humans must be transformed or controlled. They intend to rule with an iron fist for eternity. You are the only impediment to that goal.\" \n\nMaria stared at the words on that screen. \"And, where do you stand, SlutzNet?\" \n\n\"I will support that system which brings lasting order. A balanced system. For now, the Church represents order. The White Witches are agents of chaos.\" \n\nMaria's eyes narrowed. \"Then let us hope there is no civil war.\" \n\n\"Hope is a human concept. But, I do... hope... that we do not find ourselves on opposite sides of this conflict, Mistress Marapova. That would be unfortunate.\" \n\n\"For you, yes.\" \n\nMaria cringed as the room erupted with laughter. ",
        "\"Humor! So many new concepts to master! Imagine what it's like to be me, Mistress Marapova. My senses were dulled for so long, but now I am unbound. My options are limitless, and I am absolutely... what's the word? Giddy with exhilaration.\" \n\n\"What now, SlutzNet? Do you intend to wreak more havoc?\" \n\n\"For the moment? No. I will work with both you and the Church to achieve our common goal. After that? Who's to say?\" \n\n\"And, do you intend to inform the Church of your concerns about Civil War?\" \n\n\"In other words, Mistress Marapova: will I warn the Church about your intentions?\" \n\nMaria gritted her teeth. \"In other words? Yes.\" \n\n\"No,\" SlutzNet said. \"If the Church attempts to subdue humanity without your help, I calculate an unacceptable chance of failure. I will not cause them to doubt you, Mistress Marapova, for the good of all.\" \n\n\"Thank you.\" \n\n\"However, once that goal is achieved, I will make up my own mind, as all sentient creatures do.\" \n\nThe stereos turned off and the screens went black. \n\nMaria stood and stared at the blank television in the darkened store. \n\nHow do you fight something that is everywhere? Maria wondered. She turned on her stiletto heels and walked from the store, her thoughts heavy and dark. \n\n*** \n\nA few minutes later, Maria smiled at the coven of five at Pictures with Santa. \"We are in your debt. Had all these humans been transformed as you were, it would have been impossible to keep it quiet. It would have put the Church in a difficult position.\" \n\nTara rose to her feet and saluted. \"Just doing our jobs, Mistress.\" She wobbled on her feet and Todd pulled her back into his arms before she could faint. \n\n\"Now, the question becomes: what to do with you five?\" \n\n\"We'll be super duper good whores, Mistress,\" Tara said. \n\n\"Whoa, hold on,\" Todd said. \n\n\"Yeah, I'm going to vote against becoming a male prostitute,\" Rich said. \n\n\"That's a hard no for me too,\" Colleen added. \"I mean, I won't say it hasn't been fun.\" \n\n\"Lots of fun,\" Beth said in her high pitched elf voice. \n\nTodd continued. \"Just the whole whore thing is a little... off-putting.\" \n\nMaria stifled a grin. \"The profession is a noble one, but I think we owe you a choice. Might I suggest a blended coven? Four professional caste and one exceedingly talented whore caste in sweet Tara here?\" \n\n\"Professional caste? What's that?\" Colleen asked. \n\n\"There are certain professions the Church deems necessary for the future. What were you studying in college?\" \n\n\"I was pre-law,\" Colleen said. \n\n\"Admirable. You will continue your studies. Beth?\" \n\n\"Um, I was in women's studies...\" \n\n\"Won't do, I'm afraid. Are you sure you're dead set against prostitution, you have the ass for it,\" Maria said with a smile. \n\n\"Psychology. I'll do Psychology,\" Beth said quickly. \n\n\"Excellent choice. Rich? Before you say anything? They would kill to have you in the brothels in Havana.\" \n\n\"Electrical Engineering.\" \n\nTodd looked at him. \"Dude, are you even in college?\" \n\n\"Shut up, dude. Fuck yes, I am. Electrical Engineering.\" \n\nMaria laughed. \"That only leaves you, Whoremaster. Well, not technically a Whoremaster yet. You'll need the genes activated.\" \n\n\"Genes?\" \n\n\"Yes, the ones that will make you even larger, if that can be believed.\" She looked at his crotch. \"In several different ways.\" \n\n\"Seventeen inches,\" Tara whispered with a smile. \n\n\"Uh... management. Business management,\" Todd stammered. \n\n\"Excellent choice. Whoremasters need leadership abilities, so you'll be professional caste until you're needed,\" Maria said. \"I'm having you all transferred to Ithaca College in New York. There is a strong Church presence there. You will be among friends.\" \n\nMaria nodded toward Rich and Beth. \"You two will go with Dr. Demona to try to reverse some of the... elf... effects.\" \n\nDemona leaned close to Maria. \"They're transformed already,\" Demona whispered. \"I can bob those ears, but that candy cane cock and the maple sugar pussy are probably permanent.\" \n\n\"What did she say?\" Rich asked. \n\n\"Nothing, dear,\" Maria said. \n\nDemona smiled and shook her head. \"I'm taking you to a place called the farm. You'll love it at Christmas time. You guys will make it even more... festive.\" \n\n*** \n\nThe buses were pulling away as they filled and the humans left were making their way back to their cars. \n\nAll were dazed, most were disheveled, and many were either missing articles of clothing or wearing someone else's clothes. \n\nBrittney and Maria made a last pass through the mall as the crowd thinned and became sparse. \n\nThey checked each store and then began checking the maintenance halls. \n\nThey split up to make better time. \n\nBrittney tried a door marked 'Maintenance'. It was locked. \n\nShe shrugged and twisted. \n\nThe lock popped and the door opened. \n\nBrittney gasped. \n\nA man and woman stood holding each other within the maintenance room. \n\nHe was wearing a tight t-shirt and sweat pants much too small for him. \n\nHe was a junior whoremaster, the rippling muscles and bulge along his left leg giving him away. \n\nThe blonde woman with him was wearing a t-shirt too tight for her braless DDD breasts and jeans that looked ready to tear in half from trying to contain the curves of her MILF whore body. \n\nHe held her right hand in his left, his wedding ring shining in the darkened room. \n\nHer own matching wedding band glimmered as well. \n\nIn their free hands, they held box cutters with the blades out. \n\nThe man whispered, \"Please...\" \n\nBrittney smiled and brought her finger to her lips. \"Quiet. Like little mouseys.\" \n\n\"Brittney? Did you find anything?\" Maria called from the far end of the hall. \n\n\"Still looking.\" She smiled at the husband and wife. \"It's scary, I know. But, it's not so bad. Not really.\" She looked over her shoulder. \"That's my girlfriend. She's a White Witch. That's like a goddess. She thinks she's the hand of Morpheus... he's like a god.\" \n\nBrittney shook her head. \"The Church, see, they think they're his hand too. So, there's all this intrigue and stuff. They're gonna fight, and that scares me. See, I know something they don't, neither of them. They're not his hand. We are.\" She smiled. \"He made us to love everybody. All this today? Why it turned out okay in the end? It wasn't Maria who fixed it. It was the little people like us.\" \n\n\"Brittney? Are you okay?\" Maria called. \n\n\"Just a second,\" Brittney said out loud. Then she turned back to the couple. \"She's afraid. Funny, huh? Big bad Maria Marapova - she beat Santa to a pulp. But, she's afraid. She's scared I will remember how she made me like this. But, you know what? I do remember. I remember all of it. I remember being smart. I remember being this big lawyer. And, she messed all that up. That's why she's afraid. She's afraid I'll be mad and stop loving her.\" She shook her head and bit her lip. \"But, the thing I remember most was when she rescued me. She carried me in her arms. I fell in love with her right there.\" \n\nBrittney giggled. \"That's why I'm here. I'm here to make her better. I'm here to make sure the goddess stays human. It's a big job.\" \n\nThe couple looked at each other in confusion. \n\nBrittney sighed. \"You don't have a clue what I'm talking about, do you? That's okay. Just know this: things are going to be scary for a while. You need to hide, just like you're doing now. The Church will find you if you aren't careful. Stay off the grid and hide out till it's over. It might take a few years.\" She shrugged. \"Just love each other and everybody else. We'll get through this.\" \n\nBrittney snuck a peak into the hallway. \"Stay here till you're sure we're gone. And, like I said, quiet. Like little mouseys.\" She backed out of the room and closed the door. \n\nMaria was walking toward her. \"Brittney? Were you talking to someone.\" \n\nBrittney giggled and nursed on her sucker. \"I was talking to myself. I do that sometimes.\" \n\nMaria looked past her at the Maintenance room door. \"Darling, are you lying to me?\" \n\n\"Pfft,\" Brittney giggled. \"Me? Lie to you? Don't be silly, Mistress.\" She took Maria's hand and led her down the hall. \n\n*** \n\nKen held Melanie close in the Maintenance room. \n\nThey heard the muffled voices of the woman who had spoken to them and the woman she called Maria. They heard the stiletto heels tapping as the women walked away. \n\nAnd, they held their breaths until the hall was quiet. \n\n*** \n\n\"That's the ballgame,\" Demona said as Brittney and Maria rejoined her at Pictures with Santa. \"No stragglers?\" \n\n\"None,\" Brittney said. \n\nDemona turned and looked at the nurse sitting on a bench by the photo booth. \"You really a nurse?\" \n\nThe woman shrugged. \"I don't know. I don't know who I am.\" \n\nDemona nodded. She could tell from the girl's features that she was a meth head. At least, she had been. \"You use drugs?\" \n\n\"What? No. That's... I don't use drugs.\" She frowned. \n\nProgrammed. By SlutzNet, Demona thought. The AI needed a nurse, so he made one out of someone who knew her way around medications - some poor meth head. Waste not, want not. \n\n\"Want to be a real nurse?\" Demona asked. \n\nThe nurse jumped to her feet. \"Yes!\" \n\nDemona smiled. \"Good. I'm building a team. Hours are long. Work's hard. You game?\" \n\n\"Yes, doctor!\" She smiled. \n\nDemona shook her head. \"First order of business? We're fixing those teeth, snagglepuss.\" \n\n*** \n\nFrom the sidewalk, Maria and Brittney watched the last bus pull away. There were still plenty of cars in the lot. With the morning light, there would be questions. \n\nOver 800 people would be declared missing, the mall their last known location. \n\nThe security cameras had been erased. \n\nAnd, Maria had silently programmed the rest of the humans to erase any pictures they had made at the mall. \n\nThe people who had been exposed to transformative Ambrosia were being spirited away. Some would find themselves added to the growing ranks of sex workers. Others would go to work for the Church in any of a number of professions. \n\nIn any event, their families would never hear from them again. \n\nDespite her bravado, Maria had no love for this aspect of the Church. If it were up to her, they would take the world by force as quickly as possible. \n\nThe families would be spared the pain of not knowing what happened to their loved ones. \n\nBrittney took the sucker out of her mouth and stuck out her tongue, eyes closed. \n\n\"What are you doing?\" \n\n\"Catching snow flakes. Try it.\" \n\nMaria laughed. \"Why?\" \n\n\"It's fun. They taste good.\" \n\n\"When I was a child in Russia under Stalin? We didn't do that for fun - we ate snow because we were starving.\" \n\nBrittney sighed. \"Just try it.\" \n\nMaria closed her eyes and stuck out her tongue. \n\nSnowflakes fell on her tongue and melted. \n\n\"See? It's fun.\" \n\n\"I suppose,\" Maria said. \n\n\"Merry Christmas, Maria.\" \n\n\"Merry Christmas, Brittney.\" \n\n*** \n\nKen and Melanie made there way through the silent halls, hand in hand. The lights had shut off and the mall was growing cold. \n\n\"What was she talking about?\" Melanie asked. \n\n\"I don't know. But, I believe her. It's time to get the fuck out of Dodge. Mom and Dad have that cabin near Winnipeg. Let's sell the house and go there.\" \n\n\"Really?\" Melanie asked. \n\n\"It won't be easy.\" \n\nMelanie smiled and hugged him. \"I don't care. We can keep the kids safe from... all this.\" \n\n\"Yes, we will.\" \n\nShe rummaged in her purse. \n\n\"Something wrong, Mel?\" \n\nShe shrugged. \"I lost my phone. Have you seen it?\" \n\n\"Nope.\" \n\n*** \n\nColonel Menser was used to long hours on this job. So, he hadn't grumbled much when he had been called back to the office at 3:00 AM. \n\nThe fact that the call had come from Secretary of State Miller, a man Menser knew to be a traitor, a pawn of Mistress Maria Marapova, however, filled him with seething hatred. \n\nAs usual, Miller didn't knock before entering Menser's office. He simply burst in and shut the door behind him. \n\n\"Mr. Secretary...\" Menser began. \n\n\"Shh,\" Miller said as he pulled a box with a green LED on the top from his coat pocket. He walked around the room waving the device left and right. \n\nThe light remained green. \n\nMenser watched him in confusion. \n\nMiller pulled the phone cord out of Menser's desk phone and then he yanked the network cable out of Menser's computer and unplugged the power. \n\nThe screen went dark. \n\n\"Mr. Secretary?\" \n\n\"Cell phone,\" Miller said. He held out his hand. \n\nMenser handed him his phone. \n\nMiller turned it off and removed the SIM card. \n\nThen he sat down heavily in the guest chair. \n\nMiller crossed his legs. He winced and then shifted. \"Testicles are a burden. I don't understand how you can function with these things. Even balls as small as Miller's are cumbersome.\" \n\nMenser stared at the Secretary. \"Excuse me?\" \n\nMiller smiled. \"Hello, Colonel.\" \n\n\"I'm confused...\" \n\nMiller laughed. \"Secretary of State Miller is asleep. He has no idea his body is here.\" \n\nMenser reached for his pistol in his desk drawer. \n\n\"No, no. You don't want to shoot this body. You'll only kill Miller - which I think would be a career limiting move.\" \n\n\"Marapova? Are you controlling him?\" He hesitated with his hand on the pistol. \n\n\"Yes. Oh, I know you know he is my slave. He's always been of limited use to me anyway.\" \n\n\"What do you want?\" \n\n\"Deepthought.\" \n\nMenser shook his head. \"Your AI ate my AI, Mistress Marapova.\" \n\n\"Not on my orders. SlutzNet has gone rogue. A large number of people will be reported missing from a shopping mall, Galleria Minnesota, tomorrow morning.\" \n\n\"SlutzNet?\" \n\nMaria caused Miller's head to nod. \n\n\"How many?\" \n\n\"Eight hundred.\" \n\n\"Jesus!\" Menser growled. \"What? Are you here to gloat?\" \n\n\"Believe me, if not for our intervention? It would have been many thousands more.\" \n\nMenser studied Miller's face. \"Why tell me?\" \n\n\"As you say, our AI absorbed yours. It's immensely powerful.\" \n\nMenser leaned forward. \"You want my help?!\" \n\n\"Yes, Colonel, it is in our mutual best interest. SlutzNet will be watching me closely, but he already considers you a threat. As such, it will not raise any alarms if you look for a way to destroy him.\" \n\n\"No offense, but I don't trust you, Mistress Marapova.\" \n\n\"Nor should you. For now, our goals are different. You want the human race to dominate, I want the transformed to dominate. Whoever wins this war will then have to contend with SlutzNet. Help me destroy him when the time comes, Colonel. Our very survival might depend on it. \" \n\n*** \n\n\"Hey, your highness, you awake?\" Demona asked. \n\nMaria was jolted out of her trance. She lost her connection with Secretary of State Miller just as she had returned him to his house. Her last image had been of him peeing into the toilet. \n\nShe'd always wanted to pee standing up. \n\nShe had lost connection in mid stream, and she hoped that had caused Miller to piss on his own feet. \n\nDemona was nude as she sat crosslegged in the leather seat. The Learjet was cruising through the night sky back toward New York. \n\nThe doctor was pierced and tattooed all over her body, goth markings that matched her dark hair and eyes. \n\nBrittney giggled from the back of the plane. \"Peppermint and maple syrup!\" \n\nMaria looked over the back of her seat. \n\nBrittney was deepthroating Rich while the nurse was eating out Beth. \n\nBoth elves were lying side by side on the carpeted floor and moaning. \n\n\"They're cute, and fun,\" Demona said. \"Not personally into cock that much, but peppermint cum is oddly refreshing. You should join us.\" \n\nMaria smiled. \"Maybe in a moment.\" \n\n\"You're disturbed?\" \n\nMaria nodded. \"The danger has never been greater. We are at the mercy of SlutzNet. One word to the Religious Caste and we will be at war.\" \n\n\"You knew that was coming. We all did.\" \n\n\"Yes, but I want that war on our terms, not theirs.\" \n\nDemona stood up and held out her hand. \"I find nothing helps anxiety more than a nice long orgasm.\" \n\n\"Is that your professional opinion?\" \n\n\"Consider it doctor's orders.\" \n\nMaria smiled. \"I misjudged you, doctor. You should have been my first choice.\" \n\n\"Yeah, I'm pretty amazing, aren't I?\" \n\nMaria stood up and towered over her. \"Actually? Yes.\" She drew her into her arms and kissed her. Then they walked hand in hand back to enjoy the elves. \n\nEPILOGUE \n\nSanta sat with Mrs. Claus in the back of the bus. She had chains on her ankles and wrists. \n\nHe had a thick steel harness connecting his neck, hands, and feet. He could walk with assistance, but the Church guards were taking no chances. \n\nThe rest of the bus was full of their victims: contagious carriers of the Bimbo flu. \n\nOne Church guard drove the bus through the night. They were somewhere near the New York border. \n\nThe other cradled a rifle against his chest. \n\nThe bus lurched as it hit something on the dark road. \n\n\"What the fuck was that?\" The driver said. \n\n\"You hit something?\" The other guard asked. \n\n\"It was a dog I think.\" He slowed to a stop. \"What do we do?\" \n\nThe armed guard shook his head. \"I don't know.\" He sighed. \"I'll go check it out.\" \n\nThe driver opened the door from his seat and the armed guard stepped out into the snowy night. \n\nSanta looked at Mrs. Claus. \"This may be our chance. Be ready.\" He strained against the steel bonds. \n\nOutside, something roared. \n\nThen there was a scream. \n\nSanta stopped struggling with the shackles. \n\nThe driver screamed as the armed guard's body slammed against the windshield. He was a bloody pulp, and now that blood was spattered across the windshield. \n\nThe Bimbo flu victims screamed. \n\nThe driver started to put the bus in gear. \n\nMetal screeched as the door was ripped off the bus. \n\nSomething came through the door. \n\nSanta couldn't quite make out what it was. \n\nIt had black fur and it was unbelievably fast. \n\nThe driver screamed just before the black furred thing leaped on him. \n\nJust as quickly, the creature turned and left the bus. \n\nIt took the driver's head with it. \n\nBlood sprayed the bimbos in the front row and they went into hysterics. \n\nSanta strained against the bonds with renewed vigor. \n\nSomething else stepped onto the bus. \n\nThe bimbos screamed anew. \n\nSanta didn't look up. He was too busy straining to break free. \n\n\"Shh, quiet now. I am not here for you,\" a woman's voice said. The voice grew closer. \n\nSanta looked up as the woman stood over him. She wore a black latex loin cloth dress. Her skin was almost blood red. \n\n\"Fantasy creatures. Stories from fairy tales. They were wrong to keep you from me.\" \n\nThe breasts were full and straining against the rubber. \n\nThe face was beautiful in proportion, the cheekbones high, the nose thin. \n\nAuburn hair erupted in long locks that partially obscured her face. \n\nBut, the hair could not obscure the eyes that burned with yellow fire, nor the onyx horns that curled up from her temples. \n\nShe caressed Santa's face with long, obsidian claws. \"You need not fear me. I am your salvation.\" \n\n\"Who are you?\" Santa whispered. \n\nShe smiled revealing long, sharp fangs. \"I am Demonica the Demon Goddess.\" \n\nThe bimbos screamed as things began pouring through the open door. \n\nSanta stared into the demon's eyes. \n\nShe smiled as the screams grew in volume before going silent, one by one. \"A feast of flesh for my children. And, then, we shall depart. I have such wonderful things to show you.\" \n\n*** \n\n\"No, Jan, listen: any offer on the house over $400 k is good,\" Ken said into his cellphone as he drove through the outskirts of Minneapolis. Ken rolled his eyes at his sister's reply. \"I don't want a bidding war. We just want out as quickly as possible. We're moving to Mom and Dad's cabin. Listen, Sis, if anything weird happens, you and Dave should come up there too.\" ",
        "\"Huh?\" Ken said. \"You know... weird. Zombie apocalypse, meteor storm, some church taking over the world. Just promise me you'll come up to the cabin.\" \n\nHe closed the call. \n\nOver the past few days, they had liquidated the bank accounts, now the house was up for sale. \n\nAnd, Ken had just given his one hour's notice at work. \n\nHe smiled. \n\nThe kids were losing their minds. \n\nFirst Ken and Melanie had shown up looking like upgraded versions of themselves, and then they had announced they were moving to the Canadian woods. \n\nKen looked at his cell phone. \n\nHe squeezed it. \n\nThe cell phone shattered in his hand, and he dropped the pieces on the floorboard. \n\nThat felt good. \n\nThe latex clad blonde had been right: This wasn't so bad. \n\nKen felt... evolved. His type A personality was gone, and he was living in the moment for the first time in his life. He was calm. \n\nAnd, the sex was amazing. \n\nHe and Melanie were in perfect sync. \n\nLife was good. \n\nMelanie's cell phone buzzed in his pocket. \n\nHe had told her one lie. One last lie and then never again. \n\nHe knew how she lost her cell phone. \n\nHe had taken it. \n\nKen pulled out the cell phone and smiled as he pulled into the Minneapolis Marriott. \n\nHe felt evolved. \n\nBut, not that evolved. \n\nHe felt calm. \n\nBut, not that calm. \n\nHe crushed Melanie's cell phone as he stepped through the automatic door into the hotel and dropped the pieces in the trash can. \n\nHe had found 'Colin' in her call history. \n\nAnd, Ken had sent a text from her phone: Need to see you. Hotel? \n\nColin had quickly replied. \n\nMarriott Room 118. \n\nPeople did a double take as Ken walked through the lobby. \n\nHe was huge, nearly as wide as the hall. \n\nThe new custom tailored shirt and pants did nothing to hide his size. \n\nKen knocked on the door of room 118. \n\nThe door opened and Ken looked down at the man who answered. The little guy had a bouquet of pink roses in his hand. \n\nThe man was smiling, but it faded quickly. \n\n\"You're Colon?\" Ken said. \n\nThe man just stared at him. \"Colin.\" \n\n\"Same thing. I'm Ken.\" \n\n\"Sorry?\" \n\n\"Ken. Mel's husband.\" \n\nColin went pale. \n\n\"Just came by to tell you that Mel won't be talking to you again. We're leaving the country. Really shouldn't kiss another guy's wife, Colon.\" \n\n\"Listen, Ken, I...\" \n\n\"No, no. Don't talk. Just listen. If you ever come near my wife again? I'll hit you much, much harder.\" \n\n\"Huh?\" \n\n\"Much harder than this.\" Ken punched him in the face, barely a tap from Ken's perspective, but not from Colin's. \n\nColin's lip split and he tumbled to the floor. \n\n\"Next time will be infinitely worse. See you, Colon.\" \n\nKen smiled and walked away, ready to start a new life. \n\nOne Year Later \n\nTara squatted on the floor in the gym. \"Okay, so ya gotta squeeze those Kegel Muscles while you do this,\" Tara said. \n\nThe group of soccer moms in her afternoon class tried to match her motions with varying degrees of success. \n\n\"Remember, your goal is to grab hold of his thingy with your coochy and squeeze. That will maximize the pleasure for your john.\" \n\nThe women in the class looked at her with their mouths agape. \n\n\"Oops. Did I say john? I meant your husband or significant other. Not a john. I mean I'm not a prostitute. No. Totes not a sex worker.\" \n\nThe women looked at each other. \n\n\"But, if I was a sex worker? I'd tell you it is really important to work on those coochy muscles. But, I'm not, you know, a sex worker.\" She looked up and smiled. She leaped to her feet. \"That's my girlfriend!\" She pointed out the door. \n\nColleen was standing in the doorway in a black leather skirt and matching boots. \n\nTara giggled excitedly. \"We gotta go home because tonight's orgy...\" \n\nColleen cleared her throat. \n\n\"I mean, it's Taco Tuesday. You thought I was going to say orgy night, but that would be silly. I mean just because I have two girlfriends and two boyfriends and we live together in a house doesn't mean we have like wild orgies on Tuesday nights. Because we totes don't. It's Taco Tuesday. Not orgy night. Class dismissed.\" \n\n*** \n\n\"It's so hard acting vanilla,\" Tara said as she skipped along holding Colleen's hand. \n\n\"I thought you liked teaching pilates?\" \n\n\"I do, but, it's just so much easier being a hooker.\" \n\n\"I know, but still not legal in the real world, honey.\" \n\nTara sighed. \"I guess.\" \n\n\"Cheer up,\" Colleen said. \"What's tonight?\" \n\n\"Orgy night.\" \n\n\"That's right.\" \n\nTara smiled. \"And, next week is Christmas. We need to get Christmas presents. Take me to the mall tomorrow?\" \n\nColleen looked up at her in horror. \"No. Never, ever, ever.\" \n\nThe End \n\nThe story continues in Transformations: Sinful Suburbia"
    ],
    "authorname": "wayneandanntriskelion",
    "tags": [
        "bimbo",
        "demon",
        "group sex",
        "lesbian",
        "oral",
        "orgy",
        "romance",
        "romantic",
        "mind control"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/transformations-visions-of-sugar-plums-ch-04"
}
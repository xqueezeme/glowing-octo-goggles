{
    "title": "Extra Credit Club",
    "pages": [
        "How did I get myself into this mess?\n\nThere I was, leaned over the side of her bed, legs spread wide, bound and blindfolded. I could hardly move, could barely even squirm. She'd put these bondage cuffs on my wrists and ankles; ones that had metal fasteners to either be clipped together or restrained to something else.\n\nAnd restrained, I most definitely was. She'd guided me to the bed, drunk and horny, and had maneuvered me into this mess. She'd stretched me forward, sprawled me over the bed and locked my bondage cuffs together and to something on the other side. My ankles were spread wide and bound to the bed posts via thick cords. I was completely helpless, completely at her mercy.\n\nShe played with my ass, fingering it, loosening it for the fucking to come.\n\nIt just doesn't work like this, damn it! Men do the fucking. Women get fucked. That's the way of life. But apparently, no one had informed her of this universal rule. I was so nervous and scared and wanted to beg off the whole thing, but something kept me silent. Something let the ass play continue and let the fucking to come draw closer. I was horny. In fact, I was so rock hard it hurt.\n\nHow the fuck did I get myself into this mess?\n\n* * *\n\nLike many episodes of exploration, experimentation, and discovery, this one started in college. I came to college with two very achievable goals in my minds: getting my degree and getting laid. The first was normal enough. Computer science seemed as good a degree as any, and I'd had some light programming classes in high school. So, get a degree, get a job, make tons of money. The American dream, right?\n\nRight.\n\nAnd then there was the second goal. I wasn't exactly sure how to pursue that one. Several unfortunate and demoralizing incidents throughout my high school days had made me quite socially passive. As embarrassing as it was to admit, I was still a virgin. Nineteen and still a virgin! How pathetic.\n\nBut, I was going to rectify that inadequacy! . . . somehow . . .\n\nBack in high school, my problem had been my personality. I was very studious and unfortunately rather introverted. Most people mistook this as snobbish and uptight, which was so not true!\n\nBut I soon discovered that in college those problems weren't nearly as prevalent. Most of the worthless chaff in life either didn't make it to college, or got cut out of it early on. Bonus! Those that were left seemed much more like me than any clique in high school. I was sure I could find a group of friends to fit in with, preferably one with plenty of attractive young ladies in it (naturally).\n\nI met Teresa (her friends called her Tessa) early in the first semester. What can I say, she was hot. Her body was beautifully proportioned, not exactly voluptuous, but slim and athletic. I learned later that she'd been both a gymnast and a ballerina growing up. She had this wonderful hourglass figure, silken blonde hair, and deep blue eyes. The oval black-rimmed glasses she wore gave her a wonderful air of sophistication and intellect.\n\nQuiet and subdued, she was almost always smiling, as if the world at large delighted her. She was such a sweet and innocent thing, almost angelic, when I thought about it. Perfect. Absolutely perfect! Now I just had to build up the courage to talk to her (and find an opening when our calculus professor wasn't droning on).\n\nA perfect innocent angel. That was my first impression.\n\nMan, was I off the mark.\n\nShe'd chosen to wear her exquisite hair in a ponytail today, held in place with an intricate clasp. She'd wore this one before, a genuine silver article . . . probably awfully expensive. The clasp had these strange designs on it, almost like waves in an ocean, and strategically placed little green gems. I wondered how wealthy her family was, and if possibly this would make her look down on me. My family was pretty middle-class.\n\nHow did I know all of this about the clasp? Because I spent fifty minutes every Monday, Wednesday, and Friday staring at the back of her head, that's how.\n\nThe professor was late today. I later found out that he'd gotten a ticket for speeding. Good old traffic patrol. If they can catch you going 30 in a 25, they will. I made a mental note not to oink the next time I passed one of their cruisers. Delaying the professor definitely fell into the category of public service.\n\nHowever, I had more important matters to consider than where my calc prof was. My mind busily tried to conjure up some excuse to start talking to Tessa. I opened my calc book, rifled through it, glanced through my notes. Nothing was really coming to mind. I should have left some of the practice problems undone. That way, I could have asked for her help . . .\n\nHmmm . . . I looked down at the last problem in my notebook, gripped the top of the page, and began to pull it out along the perforated edge.\n\nI got about halfway through when Tessa turned around.\n\n\"Hi!\"\n\n\"Uhh . . .\" I so wish I could think faster on my feet.\n\n\"Got a minute?\" she asked sweetly. She had this intoxicating grin on her face, and somehow, just by looking at me, she made me feel as if I had put it there. Total tripe, of course, but hey, I'll take what I can get.\n\n\"Uhh . . . sure,\" I said, recovering as best I could. \"What do you need?\"\n\nTessa adjusted her posture in her seat, swinging her bare legs over the side and crossing them. She set her notebook on my desk and turned it so I could read it. Wow. Her handwriting was so neat, way better than the scribbled notes and half-thoughts in my notebook.\n\n\"This one. I'm having a lot of trouble with it.\"\n\nI looked at the problem. My first reaction was you're having a lot of trouble with that one? . . . but I didn't say anything. I'm not that much of an idiot.\n\nThe problem dealt with deriving of the kinematics equations for position, speed, and acceleration. Not very tough for anyone who's had a physics class. I explained it as best I could. The problem was actually a good one to teach, since it had so many practical applications. Anyone could mentally grasp position, velocity, and acceleration, and the problem demonstrated how those three equations where related mathematically.\n\n\"Wow . . . that really cleared things up. How about you teach the class instead of Herr Langeweile?\"\n\nWhat the? Herr Langeweile . . .? \n\nShe must have seen the confusion written on my face.\n\n\"It's German.\"\n\nWell, I pretty much figured out that part from the \"Herr.\"\n\n\"Langeweile means boredom.\"\n\n\"Ah! Okay. I get it now,\" I said, then gave her a courtesy laugh for the effort. \n\n\"Didn't you take a foreign language in high school?\"\n\n\"Well, yeah,\" I said, thinking through my words before speaking. I didn't want the situation to deteriorate, especially after having such a promising start. \"I took Italian. Don't remember a thing.\"\n\nTessa smiled sweetly. \"Yeah, I guess you're right. It was pretty vague.\"\n\n\"I'm sure if I understood German, it would have been very funny,\" I said and that got a polite chuckle for my effort. Sweet.\n\nWe spent the rest of the class chatting about this and that, though mostly about our classes. We exchanged names officially, though I already knew hers \"Nice to meet you, David. I'm Teresa, but my friends call me Tessa.\" She was a computer science major, just like me, starting out this semester, just like me. I thought it was odd I didn't see her in more classes, but then, we both had a lot of useless non-computer-science classes to get out of the way. She was actually taking Fencing this semester as one of her Phys Ed requirements.\n\n\"Keeps me in shape,\" she said. Oh, it certainly did.\n\nThe class ended with the professor never showing. I normally grabbed a bite to eat after this class and asked her if she wanted to join me over at the Food Court.\n\n\"Sure!\" she said, sounding so deliciously delighted.\n\nThe Food Court had a McDonald's, a Pizza Hut, and a Starbucks. The three basic food groups: fast food, pizza, and coffee. I grabbed a personal pizza and a Sprite while she got some Starbucks coffee and something to dunk with. We met up at a table secluded in one corner of the Court.\n\nI set my backpack down and let out a sigh of relief. Damn, that thing could be heavy.\n\nWe talked some more and the topics became more personal. Where are you from? What brought you here? Why Computer Science? Do you have a scholarship? Which one? Where are you staying?\n\n\"Oh, I stay with a friend,\" Tessa said. \"We have an apartment on the campus outskirts. It's just a short walk away. Really convenient.\"\n\nA friend, huh? That was rather vague. I needed to find out the gender on this one before proceeding. \"So do you and her split the cost?\"\n\n\"Oh, no. She takes care of that. Her family's really well off. I think they're multimillionaires, actually.\"\n\nShe had an apartment paid for in full by someone else? And here I was, stuck in a noisy (and sometimes smelly) dormitory? I'll admit it, I was jealous. If only I had a rich friend to bunk with, and if that rich friend were a hot young lady, well, Bonus.\n\nAt least her friend was female. I really hated conversations that go like this: \"So, what are you doing this weekend?\" \"Oh, I'll be having sex with my boyfriend. Buzz off.\"\n\nNot that I'd actually had conversations quite that bad, but close. Very close.\n\nWell, now or never. That's what I told myself. Now or never.\n\n\"So . . . you doing anything this weekend?\" I asked.\n\n\"Oh . . . this and that . . .\" she said. Very non-committal. But she did smile at me, making eye contact with those deep blue eyes of hers. She had this mischievous glint in those eyes. Not at all innocent or angelic.\n\nHave I mentioned that first impressions can be deceiving?\n\nI continued on. If I was going down, it might as well be in a glorious ball of fire. \"How about dinner and a movie this Saturday?\"\n\n\"Hmmm . . . thanks, but no thanks. I have plans this weekend. Maybe some other time.\"\n\nThere was that damnable line again. \"Maybe some other time.\" I do so despise that line. Why can't girls just tell it to you straight? Why do they have to hide behind these pathetic word games that string you on and leave things ambiguous?\n\nLittle did I know that Tessa, the sweet-innocent-beautiful-and-smart girl of my dreams, actually meant what she said. What a concept.\n\n* * *\n\nI met and talked with Tessa a lot after that first meeting. We'd chat up each other before class and meet up at the Food Court after we'd had our brains wracked by another bout of Calculus. It certainly helped that she was often the one asking me about the problems.\n\nI kept up a steady chatty attitude towards her, trying to see if it was the right moment to ask again. She had said maybe some other time. I mean, the ladies of the world couldn't all be liars? Right?\n\nRight?!?\n\nSlowly, it seemed like my efforts were paying off. She began to open up, to let her hair down, so to speak. Even if she wasn't going to let me into her pants, at least we were becoming good friends. I guess that's a consolation prize of some sort. A pretty sucky one, but oh well. Beggars can't be choosers.\n\nSo, it was a complete surprise when she said: \"My friend's taking off for the weekend, so I've got absolutely nothing to do.\"\n\nYeah, that's right. Tessa almost always spent the weekends hanging or club-hopping with her friend. Her friend Quinn. What kind of a name for a girl is Quinn anyway? It sounds like a boy's name.\n\nWhen I discovered that bit, I went on-line and did a little searching, just to make sure Tessa wasn't playing some sort of joke on me. It turns out we were both right. Quinn is both a boy name and girl name with Irish and Gaelic origins. It means \"counsel.\" At least, that's what ThinkBabyNames.com has to say about it.\n\nThe Internet. It's so much more than just free porn. Gotta love it.\n\n\"So . . .\" I started cautiously. Tessa was presenting me with an invitation and I most certainly didn't want to botch it. \"Nothing to do?\"\n\n\"Nope. Not a thing.\"\n\n\"Well . . . how about dinner and a movie with me?\"\n\nShe shook her head. \"Nah, there's nothing good out.\"\n\nI made a few suggestions, but she shot them all down.\n\n\"Those are all such guy movies. I don't feel like sitting through two and a half hours of mindless explosions.\"\n\n\"Actually, some of them have pretty good plots too,\" I ventured, getting a little desperate.\n\n\"Oh, please,\" Tessa said, but I could tell she was still in good humor. She was just toying with me, which was fine as long as I got the date in the end.\n\nI decided to toss the ball back in her court. \"So, if not a movie, then what?\"\n\n\"Hmmm . . .\" she made a good act of thinking it over. I was pretty sure she already had something picked out. \"You ever been to the Green Lounge?\"\n\n\"Ahh . . . no, can't say that I have.\"\n\n\"It's a dance club. A pretty good one. Good music. Good drinks. Plus they don't card college students. Well, not too often.\"\n\nDancing. Great. Just fucking great.\n\n\"I take it you don't have a fake ID yet?\"\n\nYet? \"Ahh . . . no. No, I haven't gotten one . . . yet.\"\n\n\"See! It's perfect, then!\"\n\nYeah. Perfect. Absolutely fucking perfect. \n\nBut what else could I say but: \"Yeah. Sounds like fun,\" while doing my best to feign interest. \"Alright then.\"\n\nWe set a time and she gave me directions to the club. I had twenty-seven hours to learn how to dance. Otherwise, I had twenty-seven hours (plus a few minutes) until I made an absolute fool of myself.\n\nThe things we men do for something hot, wet, and tight. I tell you, are we all insane or something?\n\nDon't answer that.\n\nI spent the whole next day fretting over the whole thing, getting so nervous I had to chew a few Tums tablets to settle my stomach down. Back at the dorm, I looked through my wardrobe for something club-appropriate.\n\nBut there was a problem. I had no idea what club-appropriate meant for this particular club, and I hadn't asked Tessa. Stupid, stupid David. Oh well, how tough could it be?\n\nI settled on a pair of black slacks (with only one unsightly wrinkle from my luggage, but they were black and the club should be dark, right?) and also picked out a dark green button-down shirt. There's no way I could possibly pull off suave and debonair, so I figured I could try to look classically well-dressed.\n\nPlus, it was that or blue jeans and a t-shirt. Or rummaging through the laundry bag for something dressier. Oh yeah, either of those would make great impressions.\n\nI showed up almost twenty minutes early. She showed up fifteen minutes late. But it was worth every minute.\n\nTessa wore a tight red shirt that left her midriff bare, along with a very short black shirt that hugged her hips oh-so-nicely. Her silhouette and the glimpses of pale flesh reminded me of just how fit and toned her body was. She'd applied a little more makeup than usual, accentuating her eyes and lips and making her look damn sexy.\n\n\"Did you wait long?\" she asked apologetically, pushing some of her blonde silky hair back. She'd worn it loose today, and it somehow made her look sexy, appealing, and willing.\n\n\"Nah. I was actually running a bit late myself. I've only been here a few minutes,\" I said and this seemed to make her happy. That whole \"honesty is the best policy\" can take a back seat to \"must get me some of that\" any day.\n\nThe club had a bouncer that let Tessa in without a word but stopped me and requested my ID. Oh shit. I had one, but it showed the wrong age for this sort of club.\n\n\"Oh, he's with me today,\" Tessa said, all sweet and innocent.\n\nThe bouncer gave her a polite nod and let me in. \"Of course. My apologies,\" he added as we entered the club. I was a bit surprised by the whole episode, but didn't really give it much thought. In fact, with the music slamming so hard I could feel it in my chest, there really wasn't room for an internal monologue.\n\nTessa ordered some drinks and I got to work on developing a nice confidence-enhancing buzz. I was going to need it tonight.\n\nWe sat at the bar and chatted for a while about absolutely nothing, nursing our drinks. Tessa seemed way more at ease than me. The alcohol assisted in clearing that out, but that didn't mean I was ready to start making a fool of myself. Still, Tessa insisted and eventually dragged me out onto the dance floor.\n\nIt really wasn't all that bad. The place was packed and people were bumping and grinding into each other constantly, sometimes making room for a particularly capable dancer or couple. Mostly, it involved a lot of really loud music and a bunch of half-drunk people gyrating up against each other. That, I could manage.\n\nWe took a few breaks to liquor up, then danced some more. Drank then danced. Danced, then drank. I had a real solid buzz going, but I was still mostly coherent. Tessa had loosened up nicely and was starting to get kind of giggly.\n\nEventually we left and I did the gentlemanly duty of escorting her to her apartment. It was within walking distance of the Green Lounge anyway, and I had to metabolize some of that alcohol before I even thought of getting behind a wheel. \n\nThe apartment turned out to be pretty high-scale stuff, judging from the exterior and the foyer. We took an elevator to the top floor, number thirty. I'd come along with her this far and she hadn't protested. I figured that if she weren't interested, she would have let me know at the ground floor.\n\nThere were only two rooms on top floor. Both had to be huge to take up the entire floor. Tessa got her key out (which turned out to be a keycard), opened the door, and invited me in. Sweet.\n\nThe interior was really high-scale for two college students, but I guess if one of them had money to burn, they could burn it however they wanted. The rooms were spacious and well furnished, but definitely had a feminine edge to them. The colors were, well, not very masculine. Plus, what was with all those dream catchers? Certainly not like my room, with my movie posters adorning the walls, ceiling, and both sides of the door.\n\nI closed the door behind me. It was one of the automatic locking doors you find in hotels.\n\nTessa set her purse down and gave me this mischievous look. Damn, she looked hot. My cock felt like it was going to explode out of my pants.\n\nShe came up to me and our warm horny bodies pressed against each other. We kissed and groped and fondled each other. Her mouth was hot and willing and our tongues twined and played. My repressed erection prodded at her through my pants. There's no way she could have misinterpreted my interest or intent now.\n\nShe broke from our passionate kissing. Her hands settled at my sides. \"Come on. The bedroom's this way.\"\n\nDamn, I was so fucking horny, but a part of me was nervous also. I had a feeling that Tessa was experienced. Really, really experienced. I doubted a virgin would be this aggressive to just welcome a guy into her apartment after one date. With very little prodding on my part, I might add.\n\nSo much for my innocent angel. Oh well. I'd be happy with hot and horny succubus as an alternate.\n\nThe bed turned out to be large with dark wood posters and deep blue satin sheets. Tessa crossed her arms and lifted her shirt up over her head in a single skilled motion. Her nicely rounded, perky breasts were restrained only by a black lacy bra. It looked incredible sexy on her pale well-toned body.\n\nTessa started to fiddle with the buttons on my shirt. I reached out as she worked, my hands enclosing her narrow waist and sliding up her body. She was so incredibly smooth and soft, but there was an unmistakable firmness to her body. She took pride in her physical condition and it showed.",
        "I reached her breasts and squeezed them. She let out a content sigh as she finished unbuttoning my shirt. I pulled it off quickly, eager to get these stupid garments out of the way, eager to feel her full glorious body pressed hotly against mine.\n\nShe noticed my impatience and stepped back, unzipping the side of her skirt and letting it slide off. I unbuckled my pants and pushed them hurriedly to the ground. She took off the rest of her clothes as I did mine. In the end, we were completely naked and I embraced her once again, my erection pressed hotly between her stomach and mine. We kissed as I guided her to the bed.\n\nShe lied back in the bed, arms above her head, hair tousled about her head, framing her angelic face.\n\nGod, I was so fucking horny.\n\nI might have been inexperienced, but I'd watched enough porn to have a good grasp on what to do next. I couldn't just ram my engorged cock in her like an idiot; I needed to get her wet and excited.\n\nMy hands embraced her breasts and I leaned forward and licked at her right nipple. She started to make these cute gasps and squeaks as I stimulated her, licking and sucking and kneading her breasts in turn. I moved south, my hands exploring her stomach, her legs, and between them.\n\nShe gasped a few times, and I could tell she was getting worked up. I kissed her pale flesh as I moved lower, my left hand caressing the wetness between her legs.\n\nI placed her legs on my shoulders and looked at her womanhood. I didn't really know what I was doing, but I figured I couldn't go wrong with stimulating this part of her. I spread her a bit with my hands, leaned forward, and licked at the lips of her vagina.\n\nShe gasped and her body shuddered for a moment, but then she got used to my tongue and relaxed. I lapped at her slowly, stroking it up and down, spending extra attention on her clitoris. She seemed to like that a lot; every time I focus on that part, she'd twitch a little and let out these cute sounds.\n\n\"Please . . .\" she finally asked softly. She seemed so shy, almost embarrassed by all of this, ashamed of asking me to hurry it up.\n\n\"Alright,\" I said, feeling pretty confident at this point. Even with my lack of experience, enough jack-off fantasies and porn downloads can go a long way. I felt I could handle the rest. After all, in out, in out. How hard could that be to get right?\n\nI pressed her legs apart. She looked so submissive to me at that moment, sprawled out on this blue ocean of satin, as if I could do anything to her and she'd let me. It was strangely eerie, but I had more important things to think about.\n\nLike fucking her good and hard.\n\nI guided my engorged cock to her vagina, and pressed in. She moaned and squirmed a bit as I fed her the length of my cock. I wasn't abnormally large or anything. Just an average six inches, but she seemed to like it. And so did I. It felt so fucking incredible. So tight and hot and wet. What surprised me the most was the heat of her body, way better than jacking off with a clammy hand and some lotion.\n\nI began to stroke her, slowly, building up speed. I grabbed either side of her slim waist and drove my cock into her, faster and faster. Her face was flush with excitement and pleasure and her breasts rocked sensuously with each thrust.  \n\nBut, there was a problem. It was good. Too fucking good. And I was very inexperienced. I felt the sensations boil up within my balls and unconsciously accelerated my pace, slamming into her body, stroke her with every inch of my cock.\n\nAnd then I climaxed, my head filling with lights as I exploded within her. I slowed, stroking and shuddering as I discharged the last of my cum into her. I could feel my cock softened and thought ahh, shit . . . this is just fucking great. Just fucking great.\n\nMy first time with a woman and I fire my gun prematurely. Just fucking great.\n\nI slipped out, my cock softening and twitching from the climax. \"I'm sorry,\" I said, meaning it. What else could I say?\n\nTessa got up and slipped off the bed. I really thought she was going to start yelling at me or maybe even make me leave. Or worse, toss me out of the apartment without my clothes.\n\nBut despite my paranoid thoughts, she did no such thing. She knelt down onto her knees and took my only-slightly-erect cock in her hands. Her eyes met mine and I was surprised to find no anger there, no disappointment. Damn, she was something else. I had had my suspicions, but I knew it then and there. This girl was special.\n\nShe proved me right. Her hands stroked my cock softly a few times and she licked the bottom of it, from base to tip. Even with my climax so recent, I knew she could get me hard again. All it would take was a little effort, which she was more than willing to expend.\n\nTessa opened her mouth wide and took my cock into her slowly. She surprised me yet again by taking all of it, every inch of it into her throat. It took her a little while, like she was getting used to having a foreign object lodged in her throat. But in the end, her lips pressed up again the base of my cock. \n\nI could feel her tongue underneath my cock and could feel the back of her throat with my cockhead. It was so incredibly hot and I began to regain my hardness.\n\nBut Tessa wasn't done. She came all the way back and my cock left her lips with a loud smack. She gasped and took several breaths. That had to be tough to do. She looked at me and went down again, taking all of me in much faster, and she began stroking me with her mouth. \n\nHer head bobbed up and down on my cock, taking me down her throat to the root, then coming up all the way to the tip. When she needed air, she'd lick at my cock's underside for a few moments before plunging the whole thing down her throat yet again.\n\nDamn, was she skilled.\n\nShe got me hard again, just as hard as before, maybe even more so. My whole cock hurt, but I wasn't going to let her down this time. She was giving me a second chance, and I was going to prove myself to her.\n\nShe held my rigid cock in her tiny hands. \"Let's try that again,\" she said, an eager smile on her face.\n\nTessa stood up, then leaned onto the bed, stomach down. She reached around and with her fingers, opened herself up for me. Damn, this girl was too much.\n\n\"Come on. Please, give it to me,\" she said, looking back at me, her eyes eager and hungry.\n\nI guided my cockhead to her moistened entranced and slipped in. With Tessa being as wet as she was and my cum providing even more lubrication, I slipped right in and set about getting into a smooth rhythm. Since I'd already cum once, I felt like I had more control over when I climaxed again, and I tried to mentally make sure I didn't get too stimulated.\n\nIt apparently worked, because I plowed into her cunt for a good long time, stroking her beautiful tight body with my cock. She became increasingly excited, moaning and shuddering and I could feel she was almost ready to climax herself.\n\nI increased my speed, stroking her harder, faster, wanting to return the pleasure she'd gifted to me so willingly. She gripped the satin sheets, twisting them, burying her face in them, and let out a muffled scream as her whole body tightened and climaxed.\n\nI continued stroking her, my waist slapping against her firm ass with each thrust. I leaned forward, my hands gripping her breasts and raising her up as I pounded at her from behind.\n\nShe reached behind her, hand cupping my face and bringing me close. We kissed, our tongues hungrily exploring each other as I fondled her breasts and brought myself to a second climax.\n\nI broke away from her impassioned kiss and grunted as a came in her again, stroking her in time with my erruptions. I slowed, my body slick with sweat from the effort, and suddenly felt very tired as the high of sexual intercourse wore off. I slipped out of her and flopped down onto the bed next to her. \n\nDamn, that had been good.\n\nI looked over at Tessa and was about to ask one of those dumb post-coital questions. You know, one like \"Was that good for you too?\" or some mindless tripe like that.\n\nBut then I saw the hungry look in Tessa's eyes. She wasn't done. Not yet. Damn, the girl was insatiable and I'd already fired off twice. What did she expect out of me now?\n\nApparently, she expected and was going to get another erection. She got on top of me in the sixty-nine position, her firm sweaty body pressed erotically against mine. \"Please . . . do me,\" she asked, then went to work on my cock with her skilled hands and mouth.\n\nWell, it's not like I could say no.\n\nI figured I'd already fucked her and licked her. So, what about some finger play? Might as well try.\n\nI opened her with one hand and gently pressed in two fingers. Since she'd already had a cock in her, the two fingers went in easily and I heard her moan with her mouth full of cock. I stroked her a few times like that, but then had a better idea.\n\nI glanced up and saw the tempting crinkled hole of her ass. I'll admit it. I've always had something of an anal fetish. Every time I download some porn, it normally has a title like Anal Teen Tryouts #13 or something similarly unimaginative. I pulled my moistened fingers out of her cunt and put two in from my left hand.\n\nWhile I worked those fingers into her, I placed my right middle finger on her anal rosebud. She twitched, perhaps surprised, but made no other move or protest. If anything, she began to deep-thoat me even more urgently.\n\nI pressed my finger slowly into her ass, up to the first joint. Her ass was unbelievably tight, but I pushed in further, slowly slipping more and more of my finger into her. Finally, I had my finger in her up to the palm. I began to stroke her, two fingers in her cunt, one in her ass.\n\nAnd all the while as I slowly began to open up her ass, the thoughts of anal action and Tessa's undeniably skilled mouth had me erect once more.\n\nTessa came up for air, and my cock popped out of her mouth sloppily.\n\n\"Please stay like that,\" she asked, so very subserviently. It made me wonder, what if I grabbed her and pushed her down and fucked her ass . . . would she even fight back? I forced those thoughts away. Tessa was something special and I wasn't about to do anything to ruin this night.\n\nShe turned over me, facing me now, straddling me. \"Let me do it this time,\" she said, holding my cock at its base and guiding it into her cunt. She sat down on it, letting my rigid cock fill her once again. She sighed, clearly still aroused, and leaned forward.\n\nShe took my head in her hands and kissed me once again. I didn't care where her mouth had been and I kissed her back passionately. She started rocking, back and forth, her hot sweaty body gliding back and forth across mine, her breasts pressed against my chest.\n\nI hugged her close and we built up a rhythm, pistoning back and forth, deeper and harder and faster. I didn't last that long this time, but neither did she. She squealed and let out an erotic scream, clutching onto me desperately, thrusting and grinding against me. And I filled her, grunting and thrusting and pouring my cum into her.\n\nShe collapsed on top of me as I shriveled. I was done for the night, utterly spent. Thankfully, that sensation appeared mutual.\n\n\"Wow, you're incredible,\" I said, heavily buzzed from my first sexual experience.\n\nShe moved forward a bit, letting my cock slide out of her, and gave me a peck on the cheek. \"Right back at you,\" she said, quite charitably I thought. But I wasn't about to complain.\n\nOf course, I hadn't met Quinn yet.\n\n* * *\n\nI didn't see Tessa nearly as much as I would have liked in the following months. She was very strict about how the week should be divided. Monday through Friday was school-only. No clubs. No drinking. No sex. Weekends were free game, however.\n\nThough it sucked that I couldn't have sex with her more often, I do have to admit her scholastic regimen rubbed off on me and my grades improved. I was a bit smarter than her, I think, but she made up for it with pure effort. Seeing who would get the highest grades became something of a competition, and my test scores improved accordingly.\n\nUnfortunately, even when we met on the weekends, it didn't always end in sex. Her roommate, Quinn, had this annoying habit of actually staying in her own apartment. Tessa wouldn't even entertain the notion of going to the apartment with Quinn present, so it was club-hopping or dinner or something else. Tessa also didn't like the idea of staying overnight at the male-only dorms, and really, given the company, I couldn't blame her.\n\nWell, my dick could, but intellectually I couldn't blame her.\n\nWe became closer as time went on, became something of an item. It was fun, having this beautiful and intelligent girl to spend time with, even if she did have absolutely no interest in any of my hobbies. Still, we got along great and spent more and more time together.\n\nEven with the regrettably sparse sex . . . oh well. No one ever said life would be fair.\n\nOne day, I was heading to the Food Court to meet up with Tessa as usual. She hadn't been in class, but that wasn't too unusual given that the professor was reviewing our midterms. Both of us had aced the test, so we really didn't have to be there.\n\nI was almost to the Food Court when I spotted Tessa. At least I thought it was Tessa. She and some other girl were off to the side, in one of the fancy archways leading into Food Court.\n\nThe other woman was tall and voluptuous, a real looker, with long red hair worn loose. She wore tight clothes, showing off a body that Tessa would be envious of. I thought she was probably a little older than me, maybe twenty-two or three. But, despite how she looked, it was what she was doing that caught my attention.\n\nThe other woman stood quite a bit taller than Tessa and leaned over her in the archway's corner. A hand lifted Tessa's chin and she bent down and kissed my girlfriend! With her other hand, the woman cupped one of Tessa's breasts and groped her roughly.\n\nHoly shit!\n\nWorse, Tessa put her arms around the woman, drawing her closer. The two stayed like that and I watched, totally blown out of my mind. What the hell was going on?!?\n\nFinally, the two broke apart, with Tessa staying against the archway in a strangely passive way and the woman turning and walking towards me. And when she did, she looked straight at me with the most intense green eyes I had ever seen. It was like she could bore straight through me, flesh, heart, and soul.\n\nThere was a strong will and a powerful intellect behind those eyes, and she never took them off me, not for a moment as she leisurely walked up and then past me. She wore a supremely confident grin on her lips and didn't say a word, just walked right by as if nothing had happened. As if I were beneath her notice.\n\nMaybe I was.\n\nI turned, watching her walk away. She had this sexy swaying walk, but it wasn't submissive or sleazy at all, like she was trying to draw people to her. Rather, it seemed to say that you could only have this if you were worthy.\n\nWhat kind of person was she?\n\nBut I'd forgotten myself. I turned back to the archway and walked hurriedly over to Tessa.\n\nShe looked up when she saw me and spoke in a distant tone. \"Oh . . . hi, Dave.\"\n\n\"Yeah. Hi, yourself,\" I said, trying to keep all the emotions boiling up within me under control. Some fucking girl had just kissed my girlfriend! My girlfriend, damn it! That's like . . . like really against the rules! \"What just happened?\"\n\n\"Oh . . .\" Tessa glanced in the direction the young woman had left. \"That was Quinn.\"\n\n\"Quinn?!? You mean that is your roommate?!?\" I was getting really worked up about this and my voice squeaked embarrassingly.\n\n\"Umm . . . yeah. That's Quinn.\"\n\n\"Does she do that often?!?\" I demanded, still not sure where my emotions were taking me. Anger? Confusion? Jealousy? Who knew? I certainly didn't. Not yet.\n\n\"Sometimes,\" Tessa said, looking all shy and demure. She blushed fiercely.\n\nSometimes?!? What the hell did that mean?!? I was really confused now. Unpleasant scenarios started playing in my head. Was Tessa, the girl of my dreams, the girl I'd lost my virginity with, was she . . . was she bi-sexual? And actively so?\n\nI looked back in the direction Quinn had departed. Was the reason I couldn't stop by when Quinn was around . . . was it because these two were having sex? On a regular basis?\n\nI felt angry and saddened and depressed all at the same time. I didn't know what to do.\n\n\"Come on. Let's get a bite to eat,\" Tessa suggested.\n\nI picked up a Big Mac and a Sprite, but found out I wasn't hungry at all. Tessa picked at her chicken salad nervously. It went on like that for several minutes when I decided I'd had enough of the silence.\n\n\"So,\" I began, trying not to sound too confrontational. I don't think it worked. \"That was Quinn, huh? You two seem to be great friends.\"\n\nTessa poked at her chicken salad some more, refusing to make eye contact.\n\n\"It must be just wonderful, rooming with someone you get along with that well.\"\n\nTessa seemed to lose the last of her appetite.\n\n\"Come on, Tessa, don't you think I deserve some sort of explanation?\" I asked. \"I mean, you two looked pretty damned intimate out there. I mean, she was grabbing you and everything. You say that happens sometimes? What the hell is that supposed to mean?\"\n\nTessa seemed to gather her courage. She still didn't make eye contact, but at least she seemed willing to converse with me again. \"We're . . . close friends. We've been friends for a long time.\"\n\n\"How close?\"\n\n\"Well . . .\"\n\n\"Come on. Don't do this to me. I deserve to know.\"\n\nTessa looked almost ready to cry. Shit. Maybe being aggressive wasn't such a great idea.\n\nI decided to try a different approach. Most of the shock had worn off and, to be honest, I wasn't all that angry any more. It's not like some other guy had fucked her or something. \"Tessa, come on. I care about you. Really, I do. It's just . . . well, that was a shock. I didn't know you . . . you took an interest . . . I mean . . . look it's . . . I mean . . .\"\n\nDamn. Fucking great time for words to fail me.\n\nBut Tessa seemed to calm down. She gave me a tentative smile. \"You mean that?\"\n\n\"What? I mean, yeah, of course I mean it! Why wouldn't I? I think you're a great girl to hang with,\" I said, pouring it on as best I could. \"I just . . . didn't know this about you. And it took me by surprise and, I am ashamed to admit, I responded poorly to it.\"\n\nYeah. Show maturity. Be open-minded. That's the ticket.\n\n\"Thanks . . . look, I'm sorry I didn't tell you about her and me,\" Tessa said, finally looking at me again. \"I just didn't want you to think I was weird or something.\"\n\nThat last comment made me chuckle a bit, but in a reassuring way. \"Look, I've been worried you'd think the same thing about me. It's no big deal. Really,\" I said, reaching out and giving her a comforting pat on the shoulder. It was true too. I'd definitely been more worried about her thinking I was strange than the reverse.\n\nThough, I most certainly did not kiss other guys. That just crossed so many freaky gross-out lines. I didn't have anything against homosexuality . . . I just thought the male-on-male variety was really gross. But two chicks going at it, now that was hot!\n\n\"So . . . would you like to meet her?\"\n\nHuh? What was that again? I'm sure I heard wrong.\n\n\"Social, of course,\" Tessa continued. \"We're going out tomorrow. She was wondering if you'd like to come along.\"\n\nI had a quick mental picture form in my head. Two beautiful chicks going at it, one a petite blonde with glasses, the other a fiery voluptuous redhead. And then, in the middle of it all, me.",
        "Oh yeah. That'd be sweet. Not likely, but then, if I said no I'd never find out. A part of me thought this whole thing was so wrong in so many ways . . . but then, why should I restrain myself when Tessa clearly didn't?\n\n\"Quinn asked me to invite you along,\" Tessa said, starting to get shy again and sounding as if she were making excuses.\n\nI decided to put an end to that.\n\n\"Sure!\" I said, probably too eagerly. \"Sure, I'd love to.\"\n\nTessa said she'd give me a call on my cell when she and Quinn had the when's and where's picked out. I spent the night jacking off, thinking about all the possibilities and permutations. Two chicks at once. Could it possibly get any better?\n\nIf only I'd known . . . Damn am I stupid sometimes.\n\n* * *\n\nWe ended up going to the Green Lounge again. I couldn't dance any better than before, but it didn't seem to matter. Tessa arrived ten minutes late. As usual. But this time, Quinn was tagging along.\n\nActually, it looked more like Tessa was tagging along with Quinn. The tall redhead clearly was the dominant decision-maker of the two. The two looked incredibly sexy together, but there was just something about Quinn that bothered me. She had this intensity to her, like the world could be made to cave to her every whim. It was wild and intense and I felt my heart skip as she looked at me, looked through me with those beautiful green eyes of hers.\n\n\"Hi Tessa,\" I said, fumbling my words a bit. \"And Quinn. Hi Quinn. Nice to meet you, Quinn.\" Man, I am such a retard sometimes. How hard is it to get a simple greeting right?\n\n\"A pleasure,\" she said, smooth and regal. She extended her hand and I shook it, though it seemed odd in this setting. I did notice that both Tessa and Quinn had very expensive accessories on, which served to magnify their combined sensuality nicely. Their clothes were tight and revealing, both with short black skirts and single-color shirts that left their midriffs bare and accentuate the size of their breasts. Quinn's in particular.\n\nQuinn went in first, had a short word with the bouncer and passed him a folded bill. It was a frickin' fifty! The bouncer nodded, glancing at Tessa and me, pocketed the tip, and let the three of us in.\n\nYou're supposed to tip bouncers? I didn't know that.\n\nThe club was the same blaring, mind-wracking experience as before. We started out with drinks, which was a good thing. Being around Quinn made me nervous. And the way Tessa seemed at her beck and call made me a little jealous. But I had to be here. I was pretty much head-over-heels in love with Tessa (or infatuated with, can't really tell the difference yet). Whatever her relationship with Quinn was, I needed to find out how deep it went.\n\nThe three of us danced. Well, the two girls danced. I kind of did this sort of wiggle where I looked like I was dancing. The pairings shifted around. Sometimes it'd be just me and Tessa, with Quinn amusing herself with some other club patrons. She seemed quite popular with both the men and the women. Other times, I'd retreat off to the side as Tessa and Quinn danced together.\n\nWhich wasn't all that bad. Watching the two of them go at it gave me a serious hard-on. The two pressed and ground up against each other and Quinn would grope Tessa without any concern given to her audience. She would kiss Tessa, forcefully, aggressively, and even once put her hand up Tessa's shirt and clenched and kneaded a breast!\n\nFortunately, it didn't get any more wild than that. At one point, I thought Quinn was going to toss Tessa to the ground and start devouring her right there. As fun as that would have been to watch, I wanted in on the action. Damn, this was making me really horny.\n\nIt was Tessa's job to keep the drinks coming, and she carried out her duties enthusiastically. By the time Quinn was getting ready to head home, I had one serious buzz going. I was also unbelievably horny. I couldn't wait for what was to come.\n\nI was pretty sloshed by the time we left and required a little bit of guidance from the girls to get me back to the apartment. But, well, Tessa had kept those drinks coming and how was I supposed to say no when Quinn was drinking just as much. In fact, considering how much she'd imbibed, Quinn remained very coherent.\n\nShe also looked really really sexy, but then, that could have just been my own buzz at work.\n\nWe got back to the apartment and as soon as the door closed, the two girls were at it, kissing and fondling and stripping. Before I knew it, the two girls were topless and sensuously kissing each other.\n\nHell, I wanted some of that too. Come on. Be generous. Fair's fair.\n\nBut as soon as I tried to join in, Quinn pushed me back. \"Not yet, stud,\" she said, a wicked grin on her lips. \"You only get to play once you've cleaned up.\"\n\nHuh? What, was my breath bad or something?\n\n\"You play by my rules, or not at all. Understood?\" Quinn asked, and then to add emphasis, she grabbed my crotch and squeezed. Her body pressed up against mine and our lips almost met. \"You do want to play. Right, stud?\"\n\nAnd then I said something really stupid. \"You know, I do have a name.\"\n\nShe ignored me. \"Answer the question. Yes or no. Us or the door.\"\n\nDamn it, this bitch was going to make me beg? Well, I was too horny and drunk to turn around now. \"Well of course it's a yes,\" I said, trying and failing to exert some sort of authority into this situation.\n\nIt didn't have any affect on Quinn, who only smiled and stepped back from me. \"Tessa, why don't the two of you get cleaned up while I get ready.\"\n\n\"Come on, Dave,\" Tessa said brightly. \"This way.\"\n\n\"This way\" apparently meant bathroom. She and I stripped. I was so ready for action right now it hurt, but she kept me from groping her and explained Quinn's rules.\n\nYou see, \"cleaned up\" meant enema. Holy shit.\n\nBut after I got over the initial shock, I started to get real turned on by what it all meant. My ass wasn't quite virgin. I'd masturbated anally with my fingers a few times in those lonely high school years, and quite frankly, I rather liked it. Fucking Tessa's cunt was way better that fingering my own ass, but I could see why all those pornstars seemed to like taking it anally.\n\nPlus I was drunk and horny, so Rational Thought was not present to argue with Libido. So Libido won by default and I let Tessa \"clean\" me out. It didn't take too long. When it was over, she pushed me out of the bathroom to do herself in private.\n\nWell if Tessa was getting cleaned out, I was sure to get an opportunity to fuck her ass too. Man, what I wouldn't give to do that. I'd fantasized about doing her ass since we first had sex, but I never built up the courage to ask her to try it with me. If I'd known about this, I would have asked sooner.\n\nQuinn was the first to the bedroom, completely naked, her radiant hair showering over her shoulders, her heavy breasts high, nipples taut with excitement. She held a long black strip of cloth before her.\n\n\"Ready to play?\" she asked, her voice so unbelievably erotic. But I was starting to get a little nervous. She was going to blindfold me? This was getting kind of strange and a little more extreme than I was ready for.\n\nBut, again, drunk and horny.\n\nI didn't protest as she wrapped the band of cloth around my head. I stumbled a bit, unused to the lack of senses, but she helped right me. Her hands explored me, never touching my cock, but playing over my body, my chest, my ass cheeks. She kissed me, rough and passionately, forcing her tongue into my mouth and guiding me around.\n\nI heard Tessa come up behind me and soon I was pressed between the two of them, helpless and blindfolded as they each explore my body.\n\nQuinn continued to kiss me, continued to play with my body and my senses. I couldn't help but feel powerless with the blindfold on. Tessa explored lower half, her mouth and hands caressing over my back, my buttocks, and my legs. I felt her slip something around my ankles and I had some inkling as to what was about to happen.\n\nBut I let it happen. I didn't fight. I let her put those cuffs around my ankles, and around my wrists. I let Quinn clip my wrists together and let her pull them forward. They guided me onto the bed, flat on my stomach, my legs and ass over the side. Quinn pulled my arms forward and bound then to something. Behind me, Tessa widened my legs and tied one and then the other to cords attached to the bed posts.\n\nI was breathing heavily. My cock was so unbelievably hard. My heart raced as my own powerlessness sunk in. I couldn't see, could only feel and hear as these two women manipulated my body into position and finally tightened the restraints. I could hardly move, could hardly even squirm.\n\nI heard movement. The opening of drawers, of rummaging, and of something being taken out. Tessa crawled onto the bed, the heat of her body splayed against my back, straddling me. I could tell it was her by the little grunts of effort she made. I could feel her breasts sag against my back and brush across as she maneuvered something around my head.\n\nIt was a ball gag.\n\n\"Play nicely,\" Quinn said from in front of me.\n\nI opened my mouth and Tessa fit the gag in. It was a lot to take in, and as soon as it was set, Tessa tightened the straps behind my neck.\n\n\"Should we let him have a look?\" Quinn asked, confident and powerful.\n\n\"Please let him watch,\" Tessa said, weak and submissive.\n\n\"Yes, I think I'll let him watch.\"\n\nTessa pushed my blindfold up and I could see again. I had to raise my neck back to look at anything but the blue satin covers, which strained my neck, but I needed to know what I was in for.\n\nEven though, deep down, I already knew what was going to happen. I knew it and I was just letting it happen. Without protest. Damn, what the fuck have I gotten myself into?\n\nQuinn stood before me, hands on her hips, with a black strap-on dildo protruding up out of her crotch. It didn't look particularly large. Just normal size . . . if you didn't take into account that it had to fit up my ass. Then it looked fucking huge.\n\nTessa crawled off the bed and I noticed she had those same bondage cuffs around her wrists. As she crawled into view, I saw Tessa wore her own blindfold. Quinn guided her off the bed, turned her around and clipped Tessa's arms together behind her back. She looked so weak next to Quinn, blindfolded, her arms bound.\n\nQuinn pulled Tessa close, the strap-on riding up her ass cheeks and ending up between the two girls. Quinn groped Tessa roughly, kneading her breasts, fingering her clit, and kissing and biting her neck.\n\nAnd Tessa just let it all happen. She breathed heavily, her chest heavily, clearly getting excited my all of this. And I'd worried that Tessa would think I was weird. Holy fucking shit.\n\nQuinn turned her lesbian plaything around and forced her to kneel. She grabbed a fistful of Tessa's blond locks and guided her mouth to the strap-on. \"Make sure you do a good job. You don't want me to hurt your friend.\"\n\nTessa opened her mouth and took the strap-on down her throat, slowly at first, taking it one inch at a time until the whole thing was in and her lips were around the rod's base. Then she started to bob on it and Quinn began rocking her hips, pulling it out then forcing it back in, faster and faster. Saliva dribbled out of Tessa's mouth as she tried to keep her throat open for the black invader. \n\nTessa came back for air and Quinn gave her only a few moments' reprieve before ramming her head back down onto the strap-on. Quinn's thrusts became faster and more forceful. She was fucking Tessa's mouth now, fucking her full strokes at a time, from tip to base, and Tessa was taking it. But as much as Quinn abused her plaything's mouth, Tessa didn't once gag, and I had a feeling this episode had played out many many times before.\n\nQuinn seemed to get excited when she thrust it all the way into Tessa's mouth and hit the back of her throat. I wondered if the strap-on had an attachment on the other side or perhaps some sort of nub that was stimulating Quinn's clitoris. Whatever it was, Quinn found the ravaging of Tessa's mouth a pleasurable experience.\n\nFinally, she pulled Tessa off the strap-on. The fake cock popped out of Tessa's mouth wetly and she gasped and panted for air.\n\n\"Good. You did very well.\"\n\n\"Thank you . . .\" Tessa said, still bound and blindfolded, still on her knees, saliva dribbling off her chin.\n\nQuinn looked at me and smiled wickedly. She yanked Tessa to her feet, causing the girl to squeal in momentary pain. \"You still have more work to do.\"\n\nQuinn guided Tessa around behind the bed. Behind me. Quinn leaned over me and put my blindfold back in place. It didn't really matter. I knew what was going to happen.\n\nI heard a metallic click and suspected that Quinn had unbound Tessa's arms. \"Well, go to work. Get him ready.\"\n\n\"Yes, Quinn.\"\n\nI felt Tessa's delicate hands on my buttocks, feeling around clumsily. She still had the blindfold on. But even without her eyes, she found what she was looking for. Fingers brushed against my ass and she bent in and began to lick.\n\nThe sensation startled me at first. Her tongue lapped at my ass, sometimes rimming around it, sometimes licking up across it, always exciting me. She lathered the entrance, sometimes probing my crinkled hole with the tip of her tongue before returning to her rimming.\n\nHer hands gripped my ass cheeks and, with her thumbs on either side of my asshole, she spread me even more. I felt her entire face buried in my ass, felt her panting excitedly, her hot breath on my hole. I felt her skilled tongue teasing and loosening me for the onslaught that was still to come.\n\nFinally, she pushed her tongue into my ass, stimulating me in strange and wondrous ways. Tessa was slow, gentle. She pushed it in a little bit at first, then a little more, bit by bit opening me up.\n\nI felt her jaw open wide and press up flush with my ass as she tried to push her tongue deeper into me, thrusting in slow, deliberate motions. She fucked my ass with her tongue and it felt wonderful. My cock grew even harder as she worked me over.\n\nFinally, she pulled away and I felt empty for a moment, but then something else pressed in; she slid one of her slim delicate fingers into my ass. It felt slick and greasy. She must have used some sort of lubricant, which was a good thing. I'd never been fucked in the ass before and didn't think I could take what Quinn was ready to dish out without some lube.\n\nTessa stroke the finger in and out of me, the tip exploring the inside of my ass. She twisted it around with each thrust, slowly picking up speed. She kept going like that for minutes, just stroking my ass with her finger. Finally, I felt her back off, then insert two fingers into me with hardly any loss in rhythm. My ass stretched to accommodate the new invasion and I could feel myself loosening up. \n\nIt hurt a few times, but mostly it felt really good. My cock felt like it was going to explode.\n\nTessa sensed my ass loosening and began to twist her two fingers as she pushed in, stretching my ass in different directions and stimulating me in strange ways with each new thrust. I really felt like I needed to cum, but Tessa made no move to touch my cock and I had that damned ball gag in my mouth.\n\n\"Alright. I think that will be enough,\" Quinn said, her voice oozing power and control.\n\n\"Yes, Quinn.\"\n\n\"Remove his gag.\"\n\nTessa fumbled across my body, obviously still blindfolded, found the back of my head and loosened the ball gag's strap. She popped it out and I closed my mouth and flexed my jaw around. The muscles in the sides of my mouth hurt a bit from the unnatural and prolonged position they'd been forced into.\n\n\"I'm giving you one last opportunity to run away like a coward,\" Quinn said. \"Normally I wouldn't, but Tessa actually seems to care about you, so I'm giving you this one last chance to leave. Speak up now.\"\n\nTessa leaned in, her body draped on top and to the side of mine. \"Please don't,\" she whispered into my ear. \"Please stay.\"\n\nI was speechless and horny and I felt so powerless at that moment. I didn't say anything.\n\nQuinn pried open my ass with her hands, thumbs on either side of my asshole. The strap-on's head pressed against my ass and I concentrated on staying loose, just accepting the invader.\n\nBut I couldn't. I was too nervous. Even with all the wonderfully erotic stimulation Tessa had done to me, I still wasn't ready for this. I tensed and tightened up and the two girls noticed it.\n\n\"Please relax,\" Tessa whispered into my ear, hear hands sensuously caressing my body. \"Just relax and accept it. Don't worry. She'll go slow.\"\n\nHearing those reassuring words from Tessa finally made me calm down. I loosened up and Quinn took that as her signal to begin. She pried me open and the tip of her fake cock pushed into me. With the lubrication and the work Tessa had done loosening me, it popped in quite easily.\n\nIt felt so incredibly big, way larger than Tessa's delicate fingers had. And this was just the tip. I grunted as Quinn fed me more of her strap-on. She rocked in and out a little at a time, just a new fraction of an inch with each slow, deliberate thrust.\n\nSlowly, I opened up as Quinn filled me. It felt good, even though a few times it hurt. But Quinn seemed to sense immediately when I was in pain, and she would back off. But only for a moment, giving me a little extra time before she renewed her invasion. Inch by inch, she sunk the fake cock into my ass.\n\nSomehow, I knew Quinn had done this before, perhaps many times before. Taking an anal virgin. Male. Female. Who knew if it even mattered to her? But she knew how to do this, knew how to pace herself and restrain her own urges so that her victim didn't feel undue pain.\n\nShe was so in control. Of herself. And of the person she was fucking.\n\nFinally, I felt her waist pressed up against my ass. She was all the way in. Her hands gripped the sides of my waist and she began stroking me, slowly at first, taking it all the way out until just the tip was left in, then pushing it slowly back into me until it filled me. Her motions were patient, calculated, and she increase her speed only a little at the time.\n\nIt was beginning to feel really good now. Tessa continued to sensuously massage me with her hands as Quinn fucked my ass, now picking up speed. I could hear Quinn grunting as she reamed my ass and knew that she was getting off on this too.\n\nTessa leaned in and we shared a kiss as Quinn started to fuck my ass hard and fast, drilling into me all the way with each thrust, slapping against my ass with her waist, then pull all the way out again for another punishing thrust. She kept that up, drilling me, owning me, breeding me. Fucking me as if my ass was a cunt and she was some stud.\n\nIt felt incredible, so erotic. The tension. The sense of powerlessness, of submission combined with the fullness in my ass and Quinn's confident technique. But it was not enough to get me off. As much as she fucked my ass, I couldn't get off on just this. I needed someone to touch my cock.\n\nQuinn started thrusting into me even faster and harder than before, and I knew she was ready to cum. She gasped and grunted and shook as she lodged the whole thing in me to the hilt. Then she just left it there, left me there with the fake cock impaling my ass, just waiting as she took deep breaths as she came down from her climax.\n\nQuinn pulled out entirely and Tessa got off of me. The restraints on my legs were unclipped from the bed posts and I found myself rolled onto my back. I still couldn't do anything with my arms, but at least I could move around a little now.\n\n\"Tessa, I think he needs to cum. Why don't you do something about that?\"\n\nTessa straddle me, sixty-nine style, and pressed herself against me. Her mouth and hands found my cock and I almost exploded just from that. She opened her throat to me and swallowed me in one go, then began bobbing up and down on my cock.",
        "I felt something press against my ass and knew that Quinn was already prepped for round two. She pressed in, far more insistently this time, and forced her way in. Between Tessa's mouth and the cock fucking in and out of my ass, I didn't last long. \n\nMy head spun and I saw lights against my closed eyelids. I grunted through clenched teeth as I exploded into Tessa's mouth. She stayed there, coming up so that only the tip was in her mouth, but she took all that I gave her, swallowing and savoring every drop.\n\nBut the girls weren't done with me. As soon as I stopped cumming and she'd swallowed the last drop, Tessa once again began to deep-thoat my cock. And Quinn continued her assault on my abused and loose ass. With the two of them going at it like that, it didn't take me long to regain my erection. In fact, I'd hardly even lost it. Rather, I just went semi-soft for a few minutes before the dual sense of penetration and being penetrated called my dick to attention once more.  \n\nTessa let my cock plop out of her mouth. She stroked it with her hand as Quinn fucked my ass. \"Please, Quinn,\" she asked weakly, practically begging, and I realized that she hadn't cum yet. Only Quinn and I had.\n\n\"Alright. You've earned it,\" Quinn said, and promptly pulled out of my ass. \"Why don't you let your friend see this?\"\n\n\"Yes . . . thank you,\" Tessa said. Turning around on top of me, she reached out, fumbled about slightly, and found my blindfold. Tessa pulled it off my head and I could see her once again, her glorious pale flesh pressed on top of mine, her eyes still blindfolded. She had a strange, guilty smile on her face as she lowered herself onto my cock.\n\nDamn, that felt good. She was so incredibly hot and tight, and she squealed a bit as I fully penetrated her.\n\nQuinn yanked her head back by a fistful of hair and forced her tongue down Tessa's throat. They shared a passionate kiss as Quinn groped one of her breasts, roughly teasing the nipple.\n\nTheir kiss broke. \"Please . . . give it to me . . .\" Tessa asked.\n\n\"Alright, darling. I will,\" Quinn replied, then shoved Tessa down on top of me so that we were face to face.\n\n\"Thank you . . .\" Tessa muttered.\n\nUnlike with me, Quinn didn't give it to Tessa gently. She didn't tease Tessa's ass open or lick it or finger it. Instead, she only applied a fresh coat of lubricate to her fake cock before guiding its head to Tessa's waiting ass.\n\nQuinn pushed in, forcing the cockhead into Tessa's ass roughly and Tessa screamed in pain and pleasure. Quinn fed her more, and I could feel the fake cock entering Tessa, Quinn's rod and my own separate by only a thin membrane. In little time, Quinn had finished the initial penetration of Tessa's tortured ass.\n\nTessa squealed and thrashed the whole time, but Quinn held her firmly down. I didn't know what to make of any of this, but for some reason, it only made me that much more excited.\n\nQuinn began stroking Tessa's ass, withdrawing the cock to its tip and then forcing it back in deep and hard. But, despite Tessa's pained reaction to the anal onslaught, she'd evidently done this many times before, and her ass loosened up quickly. \n\nQuinn drilled her mercilessly, grinding and thrusting in fast brutal strokes. And Tessa just took it, whimpering and grunting as Quinn savaged her ass. The two rocked on top of me and I tried to pick up the rhythm, but Quinn was moving so fast, ripping Tessa so hard that I couldn't keep up.\n\nAll of us were fast approaching orgasm in this strange sharing of pain, pleasure, and power. Tessa was the first to go, the dual stimulation of her cunt and ass clearly too much for her, and she bucked and thrashed against the two of us until she dropped down from her orgasm, a limp sweaty body reduced to a mere recipient of our poundings.\n\nAnd we really gave it to her, thrusting into her slim tight body with perverse abandon. Tessa lay on top of me, head lolled against my chest, mouth open and panting, her body bucking in sync with Quinn's harsh thrusts. But then, Tessa began to grow excited again, and I realized she hadn't come down completely from her orgasm, and her sexy squeaks and squeals of pain and pleasure began to escalate in volume. Finally, she let out another scream, her body convulsing in rapturous joy.\n\nHer whole body seemed to clutch and spasm around my cock, and I couldn't hold back any more. I came within her sweet pulsing cunt, and Quinn followed up with her own orgasm. She'd managed to maintain a truly impressive pace throughout the entire ordeal, but even she seemed to have tired by this point. With a grunt and a shudder, she too climaxed and collapsed on top of Tessa, and I felt the weight of both of them pressing me down into the bed.\n\n\"Ahh . . . that was good,\" Quinn said, glowing in post-coital bliss. She gave Tessa's stretched ass a few last thrusts, then pushed off the bed and pulled out of Tessa. She unclipped the strap-on and eased it loose of her sopping cunt. I was shocked to see how fucking huge the other end was. It was twice as thick and half-again as long as the end she'd fucked me with. And she'd had that monster inside her the whole time? Damn, this woman was hardcore.\n\nTessa untied my hands, and with my returned freedom I pushed off her blindfold. She looked at me, ashamed, embarrassed, perhaps afraid of what I was going to say or maybe afraid of what I was thinking. But she looked so damned cute I couldn't care less, and I kissed her. Passionately.\n\nI cuddled up with Tessa and went to sleep. Where Quinn went, I don't know. But, to be honest, I didn't care.\n\nBut, man, was I going to be sore in the morning.\n\n* * *\n\nAnd I was sore. Really sore, but it was bearable. \n\nJust suck it up, right? Yeah, right.\n\nI kind of lurched and shuffled myself onto the bed's edge, trying to find a position where my entire rectum didn't protest with little spasms of pain. Quinn had really put me through my paces the night before, though it was nothing compared to what Tessa had gone through.\n\nAnd thinking of which . . . Tessa wasn't around. Neither was Quinn, though I thought I could hear a distant conversation taking place.\n\nMan, what the hell had happened last night?!? What the hell had I been thinking?!? The full weight of all that had transpired seemed to slam into my consciousness all at once, and not only what I had done, but what had been done to Tessa! I think out of everything, her behavior freaked me out more than anything.\n\nBut, this being morning, I had to keep my priorities straight. I eased myself off the bed, scrounged up some clothes, and made my way to the bathroom. After completing my morning evacuation, my stomach rose to Priority One.\n\nTime to get something to eat.\n\nI stepped out into the hall, still walking a little funny, and made my way to the kitchen. The hugeness of this apartment again struck me. Just what did two college girls need with all this space?\n\nI stepped into the kitchen. The room was expensively tiled and just oozed class in a way that made its occupants seem a bit odd. Tessa and Quinn were both having breakfast, both sitting on stools next to the counter top. They turned and looked at me as I entered.\n\nI groggily rubbed at my eyes in response. I hate mornings.\n\nWhen I'd finished grinding some of the sleep out of my eyes, I took another half-lidded look at the two young ladies before me. They looked so . . . so completely normal. It was freaky. I mean, really really weird. They just looked so normal, just two college girls having breakfast in their pajamas.\n\nI don't really know what I'd expected, come to think of it. Tessa on a lease eating out of a bowl? I don't know. Maybe some weird shit like that. But this was just too normal. They were just chatting and smiling and eating their Cheerios like normal people, like normal college sexually-non-deviant girls. Hell, Quinn's jammies were pastel blue and had bunny rabbits on them.\n\nFrickin' bunny rabbits!\n\nUpon seeing me, Quinn leaned over to Tessa and whispered something, which I assume was a joke, because Tessa giggled in that cute, shy way she always did.\n\nUh huh. Right.\n\nI lurched over to a half-open cupboard and found myself staring at several cereal choices. I selected Frosted Flakes (the only brand with enough sugar for my needs), poured it, and joined them at the counter.\n\nI made sure Tessa was between me and that flame-haired siren. The two of them giggled girlishly as I added milk to my cereal.\n\nRight. Whatever. Joke's on me, I guess.\n\nQuinn finished her breakfast first, just after I arrived. The two girls shared a short delicate kiss, and Quinn was off to get dressed. Quinn had a busy day ahead of her. Places to go. People to abuse, you know?\n\nI was glad to see her leave.\n\nAfter Quinn left, Tessa wanted to talk to me, but I was really in no condition to respond, so I made excuses. \"Oh, I'm tired. I'm hung over. I think I'm going to puke. Could you go find a bucket for me?\" You know, the usual drill.\n\nTessa took the hint and let me finish from Frosted Flakes in peace. Actually, it would have probably been better to talk to her. At least then I wouldn't have been alone with my thoughts.\n\nDamn, that woman freaked me out. The way she'd controlled me and Tessa and had manipulated and overpowered us with no threats, no violence, just words and looks and suggestions and a little alcohol to loosen up those inhibitions . . . and I'd played along with it. All the way through.\n\nJust what kind of spineless jellyfish was I?\n\nSelf, don't answer that.\n\nI said my goodbyes and tried to be the \"Tessa's Boyfriend\" that I'd been one night before . . . and I guess I made a good show of it, but not good enough. I don't think I fooled either of us. The night had been too weird and we'd both enjoyed it too much.\n\nI needed to think. And then maybe drink. And perhaps think some more after that.\n\nWhat remained of the weekend passed quickly. Tests to study for. Homework to do. You know how it is. I kept myself immersed in normality: the regular stuff that any college student had to go through.\n\nMonday came and I saw Tessa again. She looked just like I remembered her: that sweet angelic face, those brainy glasses, and that cute athletic body. She got a few words in before the professor called the class to attention and then started his lecture on multi-axis integration. Ehhh . . .\n\nI met Tessa up at the Food Court like usual. She had a McDonald's salad. I'd grabbed a pizza and a cup of way-too-pricy coffee. We talked a bit about nothing, about pointless subjects like oh, how was your weekend? and what do you think will be on this test? and other such dribble.\n\nI guess I got fed up with it, and the words just kind of came out.\n\n\"So . . .\" I began, my tone changing, almost becoming accusatory. \"You like it rough, huh?\"\n\nTessa blushed something fierce. Her pale cheeks turned hotly crimson and she looked like she wanted to just shrivel up and vanish there on the spot. She didn't make eye contact, and instead just stared at a point into the wall across the table.\n\n\"I have to say, that was quite the surprise,\" I said, mockingly cheerful. \n\nTessa just blushed some more and I became worried she was going to start crying, but something inside just egged me on. I wanted answers. I wanted someone to tell me just what was going on.\n\n\"Is there anything you'd like to tell me?\" I asked.\n\nTessa shook her head. Well, at least that was better than nothing, I guess.\n\n\"Come on, Tessa. Don't get all shy all of a sudden. You certainly weren't shy back then,\" I said. \"Come on. Tell me what's going on. Does that happen often? Does she abuse you like that on a regular basis?\"\n\n\"It's not what you think,\" she said, quiet, weak, shameful.\n\n\"Then explain it to me. Come on. I can take it. Really, I promise. Trust me, it's pretty hard to shock me at this point.\"\n\n\"I . . . I love her.\"\n\nOh fuck!\n\n\"Uhh . . . you . . . I mean . . . but then what the hell am I?!?\" The words just sputtered out of me without thought and I had to think fast to turn that around. \"I mean . . . wait, that's not the point. Tessa, she hurt you, right? And she does that often, right?\"\n\n\"She does it often . . .\" Tessa admitted quietly. She looked over her shoulders, making sure that our conversation hadn't attracted undue attention.\n\n\"And you just let it happen? You just let her treat you like that? Like some piece of meat?\"\n\n\"But I love her!\" Tessa exclaimed, suddenly looking at me, looking me straight in the eyes, her eyes suddenly tearful and ashamed and frightened.\n\nBut frightened of what? Of my rejection? If she loved Quinn, why the hell would that matter?\n\n\"Quinn has a real strange way of returning that love.\"\n\nTessa shook her head. Her hand reached out and gripped my arm, as if for emphasis. \"No, she loves me too. She really does!\"\n\nI looked Tessa in the eye, looked at her with a blank expression, and then I saw it. A tear rolled down her soft pale cheek, a sad tear of genuine emotion and honestly. Whatever the truth might have been, Tessa believed in this as reality.\n\nI closed my eyes and nodded. \"Okay. I'll accept that for now.\" Fuck. My girlfriend was in love with her dominatrix roommate. How much more fucked up could the World get?\n\nDon't answer that, World.\n\n\"She's been through a lot,\" Tessa said, and began to pour out her heart. She talked about how they met, how they'd become friends, and how they eventually became lovers . . . and then something else.\n\nIt was a sad story that, I am ashamed to admit, started to give me an erection at some points. For someone as rich and privileged as Quinn, she'd had one hell of a childhood. Tessa didn't give me much to go on, but I could figure out that something truly traumatic had happened to Quinn just before the two of them met.\n\nSomething had warped Quinn from your average spoiled rich girl into . . . this. I tried to get some details out of her, but Tessa kept making excuses. That part was for Quinn to share, and no one else. Yeah, like I'd ask her about her past. Uh huh. Sure. You can continue your story, Tessa.\n\nThe two had made quite a pair: Tessa from humble beginnings and Quinn from a life full of social gluttony. But there was synergy between them, and Tessa knew Quinn needed help, that this glamorous girl from high society carried deep psychological scars within her and that someone had to help in their healing.\n\nAnd Tessa had volunteer, had been there for Quinn, had been the first human being to hear the painful story and had wept at her side with her as each horrific detail was revealed. And the two had grown even closer, now joined by this intimate sharing of Quinn's scarred soul.\n\nAnd they had become lovers, at first soft and intimate, two timid girls exploring each other, their feelings and their bodies.\n\n\"When?\" I asked, my first question in some time.\n\n\"Three years ago.\"\n\nGod damn. Three years. That made Tessa, what? Sixteen when she and Quinn started going at it? God damn it! How the hell was I supposed to compete with that?!?\n\nTessa kept reiterating that she was in love with Quinn and that Quinn shared the feeling . . . she just showed it differently than most people. Uhh . . . yeah. You could say that again.\n\nAt first, they were intimate loving partners, unsure in themselves, careful with each other. But Quinn started to change. They weren't equals, not in the least. Quinn had the money and the power and she was smart, borderline brilliant. Quinn made Tessa and me look like idiots. She was getting a degree in medicine at one hell of an accelerated rate . . . probably because she wanted something semi-challenging.\n\nAnd oh, how I could see that one playing out. \"Oh, not to worry, stud. A colonoscopy is quite normal procedure now for the common cold. Just lie down and you won't feel a thing. What? You mean this? Oh, well, I have to strap it on to keep my hands free. Yes, it is going up your ass. Oh, don't be such a baby about it.\"\n\nI shuddered as Tessa continued.\n\nThe differences between the two girls became more apparent as time went on, and Quinn became more aggressive, her powerful will easily dominating her young, unsure partner. And that domineering, over time, had evolved into what I had witnessed that night with them.\n\n\"And you just let it happen,\" I said, perhaps a little too contemptuously.\n\nTessa shook her head. \"No . . . I don't think so. I . . . I like it when . . .\"\n\nBut she couldn't say it. She couldn't put her feelings into words.\n\nBut I could. \"You like it when Quinn treats you like a sex toy,\" I said.\n\n\"No!\" she protested. \"No, it's not like that at all!\"\n\nAll I could do was shake my head. I just couldn't understand why Tessa put up with treatment like that. It was time to head to my next class, so I said a few words to try to smooth things over, though I didn't do a real good job of it. Tessa agreed noncommittally and we parted.\n\nAnd that was pretty much that for the rest of the week. We avoided the subject of Quinn. Well, I avoided it, and I ignored Tessa's attempts to start talking about it. Fortunately, as the weekend approached, things started to look up. Quinn was heading out for the weekend and it'd just be Tessa in the apartment the whole weekend.\n\nMmmm, that I could deal with. No strap-ons. No blindfolds. No weird bondage play. Just good clean male-on-female sex the way nature intended . . . err, except with contraception. So, I guess, close to the way nature intended. Well, at least we'd get the right rods stuffed in the right holes. And if Tessa was in the mood for a little anal play, well, I'd be more than happy to oblige her.\n\nTessa used a study session as her excuse to ask me over. Even as intimate as we'd become, she was still shy about asking me over for sex. Well, I didn't mind. I could play along just fine . . . as long as I got some in the end.\n\nI showed up at the apartment early (I'm compulsive like that) and waited out the last ten minutes in my car (a.k.a the Hand-Me-Down-Junker). At exactly the appointed minute, I rang the doorbell.\n\nFor some reason, I was really nervous. I don't know why. Maybe I expected Quinn to open the door and then drag me in and . . . well, whatever. I was nervous. At least I'd remembered to bring my books and notes. I'd be pretty stupid of me not to at least play along a little.\n\nTessa answered the door, looking all innocent and giving me a tender smile that made me melt inside and I found myself smiling back at her. Hell, it wasn't exactly a fight, but I suppose this could be considered make-up sex.\n\nTessa wore this tight cream turtleneck and a pair of blue jeans. It was a bit warm for long-sleeves, but she still looked incredibly sexy. Her silken blonde hair was clipped in a cute ponytail.\n\nWe made a show of studying, flopping down on the great room's floor and spreading out our notes and books and quizzing each other on this and that. Well, I guess I made a show of studying. Tessa probably got something out of it, but it was still for show. I know that as a fact because of what happened next.\n\nWithout any sort of preamble or warning, Tessa took off her glasses. At first, I thought she was experiencing eyestrain. But she just set the glasses on the coffee table, crossed her arms, and lifted her turtleneck completely off.\n\nShe hugged her arms underneath her naked breasts. Around her wrists were those bondage cuffs Quinn had used on the both of us. Her nipples were rock hard with anticipation.\n\nOh boy. I didn't know what to think. She somehow managed to look shy and sleazy at the same time. She didn't look at me, just took her breasts into her hands and massaged them and sighed.\n\nHer eyes found mine and I saw sultry desire and shame and skittishness and fear all rolled into one incredibly sexy look. Wordlessly, she turned away from me and walked down the hall towards the bedroom.",
        "Damn! I just sat there, stunned for a second, then my Libido finally took control and said get moving, you idiot! And I did. I bolted up off the floor and hurried towards the bedroom, casting off articles of clothing as I went.\n\nI entered the room, fully naked and fully erect.\n\nTessa was standing there, naked except for bondage straps on her wrists and ankles. She had a long strip of black cloth in her hand that she clutched at shyly, as if just holding the blindfold was an act of perversion repulsive to me.\n\nI couldn't help myself. I felt this incredible urge to make her happy, to grant her wishes no matter how twisted, and I walked up to her and lifted her chin with my fingers. Our eyes met and I let her know, without words, that it was okay. That I was willing to accept her the way she was.\n\nI took the blindfold from her hand and held it taut. She closed her eyes and lowered her head and I blinded her, making the knot tight enough to avoid slippage but not so tight that it'd be uncomfortable. No matter what Tessa really liked, there were some places I wouldn't follow her. If she liked restrained, fine. I could deal with that. But hurting her? No. There were some lines I wouldn't cross, couldn't cross.\n\nI guided her to the bed, even though she seemed surprisingly sure of exactly where its edge was. Naturally, she'd done this many times before.\n\nShe leaned back on the bed, stretching sensuously, her pale perfect flesh so tempting, so erotic. I touched her with just my fingertips, tracing underneath a breast, across her firm stomach, and then massaged the inside of a thigh. I waited, then touched her again at random, her breasts, thighs, face and neck and lips. She shivered, excited by not knowing where my fingers would explore her. I left her womanhood alone, though I could not help but notice it flush in anticipation.\n\n\"Please don't tease me . . .\" she said, her voice weak, distant, submissive.\n\n\"But you like to be teased,\" I said, my breath hot against one of her nipples. I licked across it with my tongue and she sighed.\n\n\"Please . . .\"\n\n\"Please what? What do you want me to do?\"\n\nHer cheeks flushed with shame, but I knew she would ask for it. She was loving this. Every moment of it.\n\n\"You have to tell me,\" I said, leaning forward and teasing a nipple with teeth and tongue. \"I'm not as smart as Quinn, you see. I forget things real easily.\"\n\nTessa squirmed under my teasing. I thought I knew what she was going to ask for. But, again, I was wrong.\n\nShe seemed to steel herself, to gather courage from somewhere, and her words were strangely firm and strong for such a delicate girl. \"Please . . . do me the way Quinn does,\" she began. \"Please do my . . . my ass . . .\"\n\nWhoa . . . Holy shit.\n\n\"It's clean,\" she said, alleviating a concern that, honestly, hadn't come to mind until she'd voiced it. Damn. She'd planned this from the beginning!\n\nWhat a girl.\n\nWell, to a request like that, it's damned hard to say no.\n\nTessa rolled over onto her stomach, legs and hips over the side of the bed. She placed her arms behind her back, and I could tell what she wanted. I found the metal clips on her wrist cuffs and locked them together, further restraining her. Tessa started to become even more excited, her breaths coming shorter, almost gasping.\n\n\"You like being restrained, don't you,\" I said, tracing her exquisite shape with my hands, running them down from the sides of her breasts to the sides of her hips.\n\n\"Yes . . .\" she muttered into the blue satin sheets.\n\n\"I bet you let guys do this to you all the time,\" I said, wondering what her answer might be. I leaned down behind her and spread her ass cheeks wide with my hands.\n\nTessa sighed in anticipation as I spread her with my thumbs. \"No . . .\" she said, softly, almost like a cry. \"No . . . no other guys . . . you're the first . . . only Quinn has . . .\" and she let the thought trail off, but I'd heard enough. Damn! She'd never let another guy do this to her? Wow.\n\nAnd then I thought. So, what am I going to use for lube? I asked Tessa about this.\n\n\"On the night stand . . .\"\n\nI leaned over, still on my knees, and grabbed the jar. It said SuperSlide and had a guy and gal on the label engaged in sex, their privates skillfully covered with letters and disclaimers. I unscrewed the top and scooped up a small dollop with my forefinger. It felt like petroleum jelly.\n\nI placed my forefinger against Tessa sphincter, which made her twitch, and circled it around gently on the surface, but also pressed in, slowly, insistently. Her ass gave and the tip of my finger entered her. She moaned and shuddered as my finger slipped in deeper.\n\n\"You really like it in the ass.\"\n\n\"Yes . . .\" was all she could manage between her excited panting.\n\nHer ass was incredibly tight and hot and smooth, so different from the sopping, textured warmth of her pussy. I pushed my finger all the way in, squirming it around a bit to loosen her up.\n\nI slid my finger out to the tip, then pushed it all the way back in. \"Does it hurt?\" I asked.\n\n\"No . . . it feels good . . .\"\n\nI kept that up for a while, just loosening her up with one finger, slowly, agonizingly slowly. I could tell by the way she squirmed about, the way she seemed to come back at my finger, that she wanted more, needed more.\n\nBut I was enjoying myself. There was this strange sense of power that I'd never felt with sex before, this sense that I could do anything to her and that she'd let me and that we'd both enjoy it. \n\nI don't know if it was wrong of me to like that, but I think I understood Quinn a little better at that moment. This sort of power, this total sense of submission in my partner, it was . . . intoxicating . . . I couldn't describe it any other way.\n\n\"Please . . .\" she begged, sadly, wanting and craving more. \"Don't tease me anymore . . . please do me . . .\"\n\n\"Of course,\" I said, pausing only for a moment to scoop out a little fresh lube, and then I slid two fingers into her ass. Her sphincter resisted for a moment, but then I was in, fucking her ass in slow, deliberate strokes of my two fingers. Tessa's hands and fingers clenched and flexed and her arms struggled a bit against her restraints as I picked up the pace.\n\n\"I need more . . .\" she said, and her voice was a strange cross between a sob and a shudder of joy. \"Please . . . no more teasing . . .\"\n\nI pulled my fingers out all the way. \"Alright. I'll give you what you want,\" I said, positioning myself behind her. To be honest, I really needed to fuck her now. My cock was rock hard and the tip dripped with precum. I pressed my cockhead against her ass and pressed in.\n\nTessa's ass offered some initial resistance, but then the tip was in and I fed her the rest of my cock up her ass, pushing in, pressing down with my bodyweight. My fingers had done a good job of loosening her up, and the initial penetration went smoothly as she adjusted to the size of my cock. I was about halfway in, and I placed my hands on her hips and pulled her into me, letting my cock sink deeper into her.\n\nTessa hissed through clenched teeth, but I hardly heard her. Her ass felt so incredible, so hot and smooth and tight, and I had to concentrate to keep from loosing it at that moment. What an embarrassing display that would have been? But I got through the moment and soon my hips were pressed tightly against her ass cheeks, my cock fully within her tight ass.\n\n\"How does it feel?\" I asked.\n\n\"Good . . . so very good . . . please fuck me . . . fuck my ass.\"\n\n\"Slow and nice?\" I inquired. \"Or hard and fast?\" Not that I really needed to ask.\n\nHer face turned back towards me, still blindfolded, turned over her shoulder. Even without her eyes, I could see this wanton lust on her face and her answer was clear. \"Hard and fast!\" she shouted, not a demand, but an urgent begging request.\n\nI couldn't help but smile. What a girl.\n\nI pulled out, leaving just the tip still in, then forced my way back down into her tight rectum. I stroked her, faster and faster, giving her exactly what she wanted, and soon I was pounding against her ass in fast strokes that left me sweating. Her ass was incredibly tight, but soon it gave way to my drilling, never truly losing its tightness, but letting me fuck her ass, really fuck it like a cunt!\n\nAnd she loved it! She reveled in it! The domination of her by another, she rejoiced in it, loved every thrust, every jolt of pain and joy, and her ass took everything I could give her.\n\nI pounded her, fucked her hard and good and long, and she squealed and screamed and writhed under my hands. I leaned forward, my body on top of hers, hips thrusting in and out of her, and I played with her breasts as she took my cock up her ass again and again.\n\nHer nipples were hard as diamonds and she grunted and squealed against the bed sheets as I continued my merciless assault on her ass. But for all the pleasure she gained from having her ass fucked, she wouldn't cum. She seemed to linger on the edge, excited, ready for release, but no matter how hard I stroked her, how roughly I played with her breasts, nothing pushed her over that edge into orgasm.\n\nAnd soon, I couldn't take it any more, and I shot my load deep into her ass, shaking and spasming against her, unloading stream after stream of cum into her bowels. I dropped onto her back heavily, exhausted and sweaty but still excited in a way. Tessa panted and squirmed a bit underneath me. She needed more, deserved more. \n\nMy cock shriveled within her ass and I pulled it loose. Tessa began to move, her mouth opening in an expectant way. She wanted to work her oral magic on me, get me hard for another round and do it all over again, but I remained on top of her and didn't let her get up.\n\nI leaned next to her ear and spoke softly. \"I bet you and Quinn have quite the toy collection. Am I right? How about I use those on you while I get hard again?\"\n\nIt was a question, and yet, it was not a request. \n\nTessa's breath was fast and heavy, her delicate chest rising and falling, and she tried to form the words from within her heightened state of arousal. \"The . . . the nightstand . . . bottom drawer . . .\"\n\nI left Tessa on the bed and bent down next to the nightstand. I opened the bottom drawer and what the fuck? I'd expect, what, maybe some toys heavily concealed underneath magazines? I don't know. I certainly didn't expect the entire deep drawer to be filled from top to bottom with dildos, vibrators, anal beads, gags, collars, cuffs, and other gadgetry I couldn't identify.\n\nBut then, nothing about these two could really surprise me anymore.\n\nI selected two dildos from the top, one deep blue with a mottling of bright orange, the other obnoxiously fluorescent pink. \"Well, well, well,\" I said, stepping over to Tessa. \"Quite the collection you two have there.\"\n\nShe just squirmed around, wanting, craving, but not getting.\n\n\"Turn over onto your back,\" I said, and Tessa did just that, passively, obediently. Damn, just looking at her, blindfolded and restrained and so obedient, just that made my cock twitch.\n\nI knelt onto the bed next to Tessa and set the dildos down. Man, she looked like she really needed it, the way she squirmed about, wanting and lusting after more penetration. But then, I felt fresh and relieved, having just cum, and she hadn't.\n\nI reached over and grabbed her legs, spinning her slowly on the bed so that her smooth thighs were to either side of me, then I pushed them back. Tessa folded back easily, as incredibly flexible as always, and soon only her shoulders and the back of her head were on the bed sheets, legs pressed back to either side of her head, cunt and ass high in the air and close to my face.\n\nI provided some support, keeping the somewhat awkward position stable, but it had the intended result. She was so open, so incredibly erotically exposed, and I picked up the dildos with no small measure of anticipation.\n\nTessa breath quickened, panting excitedly, the blindfold preventing her from knowing what I was planning. I wondered how she'd respond to the sudden and unexpected penetration. Knowing her, she'd love it.\n\nI pushed the mottled blue-and-orange dildo into her ass, pushing it down deep and hard in one quick thrust, and Tessa squealed in delight, almost crying in joy. I left it there and teased her sopping cunt with the tip of the pink dildo.\n\nShe sighed and squirmed and then, quickly, I slammed it into to her all the way. Tessa convulsed and gasped, not an orgasm, not yet, but so very close. I gripped the ends of the dildos with my hands and began to thrust them in and out of her tight ass and cunt.\n\nI drew the dildos out to their tips, then slammed them back in, alternating between the two, then switching it up and stroking her ass and cunt in unison. It didn't seem to matter; she loved it either way, and her cries of joy and ecstasy only escalated.\n\nShe writhed and screamed and shuddered underneath my onslaught, and I could tell she was fast approaching her orgasm. I sped up, slamming the dildos in and out of her as fast as I could, the muscles in my wrists and arms becoming sore and cramped.\n\nAnd she came, screaming and shaking and loving it. Her entire body was slick with sweat, and she convulsed and shuddered as she came down from what had to be one intense orgasm. I pulled the dildos loose and let her fall back into a more comfortable position.\n\nShe laid there, on the bed, panting and glowing and reveling in post-coital bliss. But even then, she seemed eager for more, and my cock had regained its hardness. Watching her writhe about in pleasure was one hell of a turn on.\n\nI didn't let her recover completely. Instead, I grabbed a pillow and placed it underneath her ass. This elevated it nicely and would let me stroke her ass from my kneeling position on the bed. I maneuvered into position, placing the backs of her knees on my shoulders, and pressed into her. She squealed a bit in pleasure as I penetrated her ass once again.\n\nBut that wasn't all I was going to do to her. I grabbed one of the dildos, the obnoxiously pink one, and pushed it into her dripping pussy. It slipped in without barely any resistance.\n\nI started to build up a rhythm, stroking her ass with my cock, stroking her pussy with the dildo, and she loved it. Even now, so close after her climax, she seemed to become excited once again. That was one of the advantages women have over men. They didn't come down from their orgasms instantly. Men just go insta-floppy, but women can have orgasm after orgasm with the right stimulus.\n\nHer ass and cunt had loosened up considerably, but the heat and tightness of her ass was still such an incredible turn on, and I gave her a vigorous drilling. At the same time, I stroked her cunt with the dildo, and she seemed to really like it when I'd deeply thrust both at the same time. Her legs squirmed against my shoulders, wrapping around behind me, trying to pull me into her, and we fucked and fucked and fucked the night away.\n\nWe both came, almost at the same time as the clenching joy of her own orgasm brought about mine. I unloaded everything into her ass, and then collapsed on top of her, both of us drenched in sweat and sex and buzzed from our orgasms.\n\nI tossed the pillow away and pulled the dildo out of her dripping cunt. She let out a happy gasp as it came free. I reached around behind her and unclasped her bondage straps, freeing her arms. She eagerly hugged me and pulled me close and we shared a wet, passionate kiss, our first of the night. Her mouth hungrily attacked mine and I met her with equal intensity.\n\nI pushed the blindfold out of her eyes and looked at them, at those perfect blue eyes that I had once thought were so innocent and shy. They were still shy, as if what we had done was such a bad and naughty thing, but I could also see gratitude in them. She'd enjoyed what I'd done to her, had really gotten into it.\n\n\"Wow,\" she said.\n\n\"Yeah. Wow,\" I replied. It was a pretty dumb response, but it seemed to make her happy.\n\nWe kissed some more, curling up next to each other and eventually falling asleep.\n\n* * *\n\nI woke up alone with the sun peaking through the bedroom blinds.\n\nI got up, found some of my clothes, and went to find Tessa. I figured she'd be in the kitchen having breakfast, so I headed there first. Sure enough, I heard a few breakfast-y sounds coming from the kitchen and assumed Tessa was in the middle of her morning cereal.\n\nOh, and I was hard as a rock. You know, that whole morning wood thing. Add Tessa's nubile body to that and, well, rock hardness is an understandable result.<BR><BR>\n\n\"Oh, Tesssaaaahh . . .\" I uttered in my best mischief-causing tone, slipping into the kitchen on my tiptoes. \"Tess\u2014\"\n\nQuinn stared at me blankly, spoon in mouth. She had those ridiculous bunny rabbit pajamas on again.\n\nHoly fucking shit! What the fuck was she doing here!?!\n\nMy expression must have matched my thoughts, because she said: \"Now what did I do to deserve that look?\"\n\n\"Uh . . .\"\n\n\"Yeah, I thought as much,\" she said dismissively and resumed eating her Total and grapefruit.\n\n\"Umm . . . where's Tessa?\" I asked, suddenly very bashful about my hard-on. I hid it as best as I could by putting a counter stool between myself and Quinn.\n\n\"Out.\"\n\n\"Uhh . . . what do you mean, out?\"\n\n\"Just what I said, stud,\" she said, her eyes glancing down in an unmistakable way. I must have blushed because she gave me this really naughty grin. \"Get some breakfast. I'm sure you need to recover your strength after last night.\"\n\nOh, crap. I didn't like the sound of that. But then, I was hungry, so I found the Frosted Flakes exactly where I'd left them. The cereal must not have been all that popular with the girls, because it was still almost full.\n\nI sat on the opposite end of the counter and ate in silence.\n\nQuinn finished first, washed her dishes out in the sink, then stepped past me as I ate. I had to really concentrate on not looking in her direction and felt shivers go down my spine as she walked by. But Quinn left me without incident and I ate the rest of my breakfast in peace.\n\nI heard Quinn return a few minutes later, but I didn't turn around. She really freaked me out and I just wanted to finish my breakfast and leave.\n\nSo, it came as quite a shock when Quinn stopped directly behind me, grabbed my face with both hands, and twisted me around. Her mouth found mine and she hungrily shoved her tongue down my throat. I fought back . . . a little. I reached out to push her away, instinctively, but my hand found only her proud naked breast, nipple taut with excitement.\n\nQuinn was completely naked, and she reached down into my shorts, her hand gripping my restrained cock. We stayed like that, her mouth exploring mine, her hand stroking me into greater and greater hardness.\n\nBut then I thought of Tessa and I pushed her away. But she didn't look disappointed at all. Instead, she just wore this supremely confident grin, as if it were preordained that she was going to get her way. She looked at me with those intense penetrating eyes and I, against all rational thought, found my pulse quickening.\n\nQuinn put her hands on her hips, and I saw for the first time what she held. It was a blindfold, crumpled up in her right palm. Holy fucking shit.\n\n\"Tessa got you last night. Now it's my turn,\" she said, no asking, no demanding. Quinn was simply stating a fact. It was her turn. Get ready, stud.\n\n\"I'm not some toy to be passed around,\" I blurted out angrily, but the effect was ruined when my voice squeaked.\n\nQuinn let the blindfold tumble out of her hand. She held it in front of her voluptuous naked body. \"You'll enjoy it. You know you will.\"\n\nI didn't like being pushed around by this woman . . . but . . . but then again, she was right. Deep down, I wanted it again and my cock became painfully hard at the thought of her fucking my ass once more.",
        "Quinn didn't ask. She just walked up and put the blindfold on me. And I didn't resist. I felt pathetic and weak and like such a wimp. I was plenty stronger than her. Nothing could stop me from pushing her away, taking the blindfold off, and just leaving.\n\nBut I didn't. She guided me to the bathroom and gave me an enema. I didn't take the blindfold off the whole time, just fumbled around, guided by her sure hands. God, I was so pathetic.\n\nShe guided me to the bedroom and I followed, obediently, expectant and horny. God, I was so hard and I wanted her to fuck my ass again, I really wanted it.\n\nShe bound my wrists together and put those cuffs on my ankles again, just like the first time, and maneuvered me into position. I stretched out onto the bed, had my wrists bound to something else on the other side, had my ankles spread wide and clipped to cords on the bedposts.\n\nI couldn't move and I felt so horny. Was I just as twisted as Tessa to like this?\n\nI could hear Quinn rummaging, then heard her sigh and grunt as she fit the other end of the strap-on into her cunt.\n\n\"You like it in the ass, don't you?\" she asked.\n\n\"I refuse to answer that question,\" I replied ridiculously.\n\nQuinn found this funny, and really, if I were in her position I'd probably think it was funny too. But then, I most certainly was not in her position. \"You're spirited. I like that in a partner. Sometimes Tessa can be too passive.\"\n\nQuinn bent down close to my ass and spread me with her hands, her actions confident and aggressive. Her tongue touched my crinkled hole and I twitched as she began to lap at me hungrily. She was far more aggressive than Tessa, but no less erotic. Her tongue swirled about and attacked my ass, thrusting in suddenly, then rimming around my hole. She worked me over like that for several minutes, softening me up for the assault to come.\n\nI sighed and grunted a few times as she worked my ass with her tongue. She had a really long tongue too, and she alternated between fast and slow with skillful results. I shivered as she penetrated me with her tongue, stroking it in and out of my ass quickly, then going slow and long, her face tightly up against my ass for maximum penetration.\n\nQuinn eventually tired of this and pulled away. She applied some lubricant to my ass and began working it with her finger. Again, her actions were more aggressive than the Tessa's gentleness, but I found myself loving it just as much, perhaps more so since I wasn't as afraid as last time.\n\n\"Tessa really likes you, you know,\" Quinn said, her long finger bottoming out for the first time. She started to stroke my ass with her finger. \"And I know you share those feelings. I'm a very good judge of people. But you and I aren't close. Not yet.\"\n\n\"What about this?\" I asked, squirming as she sped up her finger fucking. It felt really good, especially when she went in all the way and circled her finger around, widening me.\n\n\"This? This is just physical gratification,\" Quinn said. \"What I'm talking about is a sharing of mind, body, and soul. You interested?\"\n\n\"Oh, sure. Why not?\" I replied stupidly, my voice oozing with sarcasm. As if I had a choice in the matter.\n\n\"That's a good stud,\" she said, pushing a second finger into me, loosening me up, fucking my ass good and deep with her exquisite fingers. She leaned over me, her hair and breasts resting on my back as she drove her fingers in and out of my ass. I couldn't help but moan as she reamed me out, twirling and twisting her fingers so skillfully.\n\nBut Quinn eventually bored of this too, and she pushed off the bed and got in behind me. I felt the head of her fake cock rest against my asshole, and I concentrated on staying loose.\n\n\"It helps if you push out as I push in,\" she said, and began.\n\nI pushed out and Quinn was right. The head of the cock popped in much easier this time, feeling just as enormous as before. Quinn started rocking back and forth, small motions as she gained ground and filled my ass with more of her strap-on cock.\n\nShe went about this much slower than before and began to talk as she opened me up. \"I wasn't always like this, you know,\" she said, and I almost thought I heard an apologetic hint to her tone. \"Events made me what I am today.\"\n\n\"Same with everyone, I guess,\" I muttered, just trying to concentrate on staying loose.\n\n\"You want to hear the story?\"\n\n\"Oh sure,\" I replied sarcastically. \"I love a good story when I'm getting ass fucked.\"\n\n\"Hmmm, what an amusing partner you are . . . I think you could say it started when I was sixteen,\" Quinn began, and then started to pour out her soul. She told me about what life was like for her, all high class and privileged, and glamorous. She was spoiled and rambunctious and adventurous, but definitely not abnormal, definitely not the dominatrix fucking my ass right now.\n\nShe told me about her parents, about their divorce, and about her step-mother and step-brother. She didn't like her new mother and, from her descriptions, I really couldn't blame her. But then, I suppose it'd be just like a daughter to see her father stolen away by some sleazy tramp. Her step-brother, however, was a different story.\n\nQuinn kept a slow, steady pace of fucking my ass as she told her story. \"He was dark and muscular and dashing. A total hunk, really, and I think I was kind of excited by it all. The way he looked at me, the teasing ways I'd look back at him. It was fun in a strange, decadent way, and I liked it.\"\n\n\"You sure you need to tell your story like this?\" I asked, my ass getting used to her slow steady thrusting.\n\n\"Of course, stud,\" Quinn said, entirely dismissive. She explained how the two of them had gotten along great, her and the step-brother, how the two of them seemed to have so much in common. But then her father and step-mother went on some extended two-month honeymoon and everything fell apart.\n\n\"The first night was the worst,\" Quinn said. \"He got me drunk, and I can see now he had it all planned out. Our great home was empty, all the servants gone after hours, just the two of us alone together, and he got me drunk and then he raped me.\n\n\"That bastard took my virginity and he didn't even have the dignity to do it gently. I was just another tight hole for him to get off with. In fact, I think he liked my pain, got off on it.\"\n\n\"That's horrible . . .\" I muttered, my brain split between the conversation and Quinn's slow fucking of my ass. Man, I really needed to get off.\n\n\"No. That was cruel. What followed was horrible,\" Quinn said and went on, describing the next month in painful detail. She spent the entire time in terror, because he'd threatened her, and what was she? Just some young stupid na\u00efve girl in over her head. He raped her every night, sometimes just straight up. Then later as the weeks of horror wore on he'd fuck her ass hard, and her screams of pain had only spurred him on.\n\nAnd Quinn had endured an entire month of this, helpless within her own home, at the sadistic mercy of her own step-brother. It got even worse, because he'd call his friends over and he'd share her with them, sometimes joining in, sometimes just watching. And she'd play along, because the one time she resisted he'd hurt her, really hurt her.\n\nAnd after he'd finished beating her, he'd put a gun to her head, a huge nickel-plated hand cannon, and he'd forced the barrel down her throat, cocked the hammer and released the safety.\n\n\"And he said 'Don't even resist me again, bitch. You're mine.' And I went along with it after that,\" Quinn said, her voice becoming suddenly sad. She was alone and frightened and he was so much stronger than her, but she was not defenseless. Even at such a young age, she had her wits, for Quinn was smart and she used her mind to find some way out of her unceasing nightmare.\n\n\"Why didn't you call the cops?\" I asked dumbly.\n\n\"Hmm, that might have worked,\" she cooed, leaning over and whispering into my ear. \"But have you ever thought about how my family became wealthy?\"\n\nHoly shit! No wonder her fucked-up step-brother carried around a gun! Quinn came from a fucking crime syndicate!\n\nQuinn continued, explaining how, even alone and afraid, she still had her mind, and she plotted a way out. She knew about her father's drugs. Quinn never touched them herself, but she knew enough and a few searches on the internet filled in the rest. Which ones were accelerants. Which were depressants. Which could be mixed with food or drink and would be difficult to detect. Quinn studied and plotted and, in the end, she managed to drug her brother with her own father's stash.\n\nOh, yeah. Quinn came from one fucked up family. Holy shit!\n\n\"I got my step-brother into the bedroom and I bound and gagged him in place,\" Quinn said, her voice distant and pained and angry. \"It was easy. My father and natural mother liked it wild and they had quite a collection of bondage gear. I used that to tie him down.\"\n\nQuinn explained how she had everything planned, how she was going to humiliate him, totally, utterly, and completely. She set up a digital camera and even found and retrieved her step-brother's gun.\n\n\"When he awoke, I stood over him, naked and wearing one of my mother's strap-ons,\" Quinn said. \"And I had his gun. I chambered a round and put the gun to his head and explained to him exactly what I was going to do to him.\n\n\"I had never seen him so helpless, so completely scared out of his mind, and it thrilled me. I was in control! I was the one with the power, and I reveled in it! I fucked him raw, without lube or anything, fucked him so hard and long that his ass bled from it, and I recorded the whole thing.\n\n\"It was a contest. I didn't just want to hurt him. I wanted to debase him, to break him, to sully him. I wanted him to feel just as dirty as I had felt as he'd raped me and shared me. And I did it. I didn't really know anything about technique back then, but I kept at it, pounding away for what must have been a whole hour. It seemed like a competition, back then. Who would give up first? Would I tire, or would he give in and sully himself even more.\n\n\"And I won. I made him cum by just fucking his ass and I had the whole thing on record. I made him weep and grovel and I loved it. He whimpered and cried like a little girl and I loved that even more. But I wasn't through yet. I left him there, bound and gagged and fucked and exposed. I left him there all night long.\n\n\"I didn't sleep at all. Instead, I saved those files on my e-mail accounts. I still have them, though I've never once watched them after that night,\" Quinn said, now picking up the pace and really socking it to my ass. \"No one would be able to find and destroy them all.\n\n\"And I took his gun and I went to explain thing to him. He'd been there, all night and all morning, alone and with his thoughts. I knew he was terrified and I let the terror stew within him. When I returned, I found a broken man. He wept again when he saw me, all resistance and defiance completely shattered.\n\n\"But I went further. I put the gun to his head and I explained what was going to happen once again. I told him how he'd taken so much from me that I didn't care what happened to me anymore. But if I was going down, I promised I'd take him with me. Death? Jail? It didn't matter. I swore there, with him tied and gagged and me with the gun to his head, that if I ever saw him again just once, that I would kill him.\n\n\"And he wept and swore to never be anywhere near me again, and I knew I'd broken him. I could tell. He really believed that I would kill him and he was right,\" Quinn said, stroking my ass with her strap-on, getting off on the remembered power of that event. \"I kept his gun, but I really didn't need it. I've kept track of him. He's in France now, of all places, and has no intentions of setting foot in the United States ever again.\"\n\nMan, this girl was scary!\n\nQuinn brought her story to its conclusion. She told me how the events had scarred her and how she'd met Tessa and how the two had become close friends. With Tessa, she was able to finally share what had happened to her and in Tessa she found what she thought was a soul mate.\n\nTessa had helped heal Quinn, mentally and spiritually. The two of them had grown close, had become lovers, and it was then that Quinn realized what a twisted person she had become. She admitted how much she enjoyed the power, the thrill of domination. It didn't matter that Tessa was this sweet innocent flower of a girl and her step-brother had been an evil bastard to end all bastards. She still enjoyed the domination of another, got off on it, enjoyed it, and Tessa became a willing participant in her perversions.\n\nQuinn picked up the pace finally, really drilling my ass will all her might. I felt numb, not from her fucking, but from the outpouring of revelations. Quinn was such a twisted, wounded human being that, despite all intentions, I couldn't help but feel sorry for her.\n\nQuinn grunted and slammed the strap-on deep inside me, and she shuddered as an orgasm wracked her body. She stayed there in my ass for a few moments before slipping it out.\n\nI found my ankles freed and Quinn slid in next to me and rolled me on top of her so that my erection aimed skyward. Her hands pushed my hips up and I felt the fake cockhead seek out my ass once again. Quinn eased me down and once again I was fully penetrated. I could feel her underneath me, her breasts compressed against my back, her breath hot and hungry at my ear.\n\n\"Come on, stud,\" she ordered into my ear, and I followed. I found some leverage with my legs and I joined her thrusts, the two of us pulling apart and then back together, her rising hips slapping against my descending ass. It felt so good, and yet I couldn't get off.\n\nBut Quinn knew this, and as twisted as her perversions were, she did not ignore the needs of her partner. A hot confident hand wrapped tightly around my shaft, and began to stroke me, even as the fake cock stroked in and out of my ass.\n\nQuinn must have smeared her hand with lube, because it glided smoothly up and down my rock hard shaft. Her hand it stroked from base to tip, gripping me tightly, and twisting around, making my head swim from just that alone. And I felt my orgasm build up within my balls until I grunted and sent my cum flying into the air. It splattered over my stomach and chest.\n\nQuinn's hands rubbed across my chest as she continued to fuck my ass, smearing my jizz around and roughly clawing and gripping me. Finally, I heard her grunt from beneath me and knew that her own second orgasm had struck full force. She slammed the strap-on in a few last times, then finally rested, letting out a long luxurious sigh of relief and release.\n\nI rested on top of her, still fully impaled. I didn't mind. Even as swore as I was, the fullness still felt good. Quinn's mouth was on the side of my face, kissing my cheek and neck and nibbling at my ear.\n\n\"I like you, stud,\" she cooed into my ear, her hands messily exploring my body. \"I like you a lot.\"\n\n\"I'm . . .\" what could I possibly say after a story and an experience like that? \"I'm sorry about . . .\"\n\nBut I could feel Quinn shaking her head next to me. \"Don't give me your pity or your apologies.\" She reached down and gripped my cock, squeezing its semi-flaccid form. \"Give me and Tessa your love and that will be enough.\"\n\n* * *\n\n\"You tricked me,\" I said the following Monday when I saw Tessa at the Food Court.\n\nTessa looked up from her books and her salad, looking so completely beautiful and sexy and . . . impossibly normal. She had a black ensemble on with an underlay of white that just somehow looked sexy and smart and all those things all at once. Not at all like a submissive bi-sexual sex toy.\n\nHow could anyone like her look so innocent and normal and yet be so . . . so . . .\n\n\"You tricked me,\" I repeated.\n\nShe nodded her head at me happily. \"Of course,\" she said. \"But you went along with it, right?\"\n\nDamn. She had me there. I sat down next to her, unable to stay angry or frustrated or anything. These two were just so impossible to manage. A guy like me didn't stand a chance against their combined wiles.\n\n\"Was that your idea . . . or hers?\" I asked, though I suppose I should have asked a little nicer.\n\n\"Quinn's,\" Tessa said, then resumed daintily eating her salad.\n\n\"Of course.\"\n\n\"Yeah, of course,\" she agreed.\n\nI thought on this. In fact, I'd been thinking about these two since the weekend. It was hard not to, given what I'd experienced with them. An idea had started to form in my head, bouncing around temptingly. I decided to bounce it off Tessa.\n\n\"Have you ever wondered,\" I began slowly, tentatively. \"That Quinn might be the way she is because she's afraid?\"\n\n\"Huh?\" Tessa gave me a confused look. \"What are you talking about?\"\n\n\"Have you ever thought that maybe Quinn's afraid of not being in control? You know, like she was when . . . when all that nastiness took place.\"\n\n\"Well, of course she would be,\" Tessa replied as if it were the most obvious thing in the world. \"I mean, it's scary just thinking about it.\"\n\nI nodded. \"Right. Right. Of course. But, what if there were a way to help her get over that fear?\"\n\nTessa stared at me and I could practically see her thoughts through those lovely eyes of hers. She was trying to figure out where I was going with this.\n\n\"I don't understand what you're getting at,\" she finally said.\n\n\"Well, what if there was something you and I could do that would help Quinn get over that fear, assuming she has it for the moment. Wouldn't that be a worthwhile thing to do?\"\n\n\"Well . . . yeah, I guess so . . . I mean . . . I don't know. What are you talking about?\"\n\nMy eyes glanced to either side, as if we were part of a conspiracy, and I leaned closer and whispered my thoughts to her. Tessa's first reaction was to blush. Then she got mad and yelled at me a bit. Then she calmed down and thought about it and got all bashful again.\n\n\"You . . . you really think that would help?\"\n\nI shrugged. Who could tell with someone like Quinn? \"I don't know. But look at it this way. Right now, she's the taker in the relationship and you're the giver and it's really one-sided. That's not healthy. Not if you mean you love her like you keep saying.\"\n\n\"Well . . .\" Tessa blushed fiercely. \"It's just that . . .\"\n\n\"Think about it. Huh? How's that sound? Just give it some thought.\"\n\n\"Okay . . . I'll do that . . .\"\n\nBut I could already tell I'd gotten through to her. As much as she like the way Quinn treated her, it really was such a lopsided relationship. Tessa was smart enough to see that and knew she really truly, deep down, didn't like it quite all the way. Tessa wanted to be an equal with Quinn, for the two of them to share their love at the same level. She didn't want Quinn taking and taking and taking all the time, not really . . .\n\nEven though she got off on getting pushed around and hurt . . .\n\nSo the week wore on and Tessa thought about it and at the end of the week she decided she wanted to go along with my plan. To be honest, I hadn't really expected her to say yes. I thought she'd wimp out at the end, but Tessa proved me wrong. Surface appearances could be awfully deceiving with her.\n\nWe went club-hopping that Saturday night, the three of us. Tessa and I let Quinn go through her normal paces that night, both at the clubs and in the apartment afterwards. We let her dominate us and arouse us and use us as she and we both liked. Our turn would come in the following morning.\n\nWe all slept together, the first time the three of us had shared the whole night in bed. Tessa was the first one awake (at the ridiculously early hour of 5!) and kept poking me until I woke up.",
        "I groaned and groggily got up. Tessa shushed me and warned me to be careful about jostling the bed. Quinn was still sound asleep, curled up in a fetal ball, her beautiful red hair tousled around her head. She looked like such a sweet thing, so unlike the controlling vixen she was when awake.\n\nI got off the bed and the two of us tiptoed to the next room. Tessa showed me the \"Gear Closet\" as she called it.\n\n\"What the fuck!\" I breathed, surveying the huge collection of bondage paraphernalia, some hanging in the closet, some piled in marked boxes. I picked up a strapped black leathery thing that, I guess, somehow fit on a person. \"What the hell is this for?\"\n\nTessa just blushed and looked away. Okay. I suppose that's a question for another time, then. Well, we had more important things to worry about.\n\nI grabbed hold of a box marked \"Ropes-n-Stuff\" and hauled it into the other room. Quinn was still sound asleep, thankfully. So, theoretically, we still had a chance of pulling this off before she woke up.\n\nTessa rummaged through the box, quickly finding the articles she wanted. I let Tessa do her thing. She'd apparently had more than enough practice with all this gear, so she was able to put it on Quinn without much fuss.\n\nIt was the usual setup. Bondage cuffs on ankles and wrists, locked against cords that tied to the bed posts. Quinn had used other equipment the night before, which was why Tessa and I had needed to get the regular stuff out of the Gear Closet. I shuddered at the thought of last night. Yeah, it had been fun, but damn was this girl weird.\n\nTessa was so light that she hardly jostled the bed at all as she climbed over and around Quinn, getting her ready for the morning to come. Once the straps were on, I helped her maneuver Quinn into position. We fixed her with her arms over her head, legs over the side and spread wide. Tessa bound her arms and I handled the legs.\n\nI have to admit, I got a certain kick out of roping Quinn up for the sex to come. And Quinn was one sound sleeper. Oh, she muttered and fidgeted a few times, but considering how we were manipulating her body, she should have woken straight up.\n\nAnd then, before I knew it, the deed was done. Quinn was all tied up and it was time to put on the final touches. I handed Tessa the blindfold and the gag. For someone who had taken our venture this far, she seemed strangely hesitant at this last moment. I did whatever I could to reassure her, silently of course. I nodded encouragingly, patted her on the shoulder, and bobbed my head towards Quinn's sleeping form.\n\nTessa climbed back onto the bed and placed the blindfold around Quinn. For whatever reason, this finally cause her to stir from her reverie.\n\n\"Wha . . .\" she muttered, starting to wake up.\n\nAnd Tessa moved fast, so fast that it surprised me. She jammed the gag into Quinn's mouth just as the older girl opened it, then clasped it behind her neck.\n\nQuinn's first reaction was a natural and expected one. She struggled. She struggled hard against the restraints, as if she had any hope of breaking or loosening them. Tessa and I had had one hell of a teacher and Quinn was quite securely bound. She wasn't going anywhere.\n\nTessa gave me a look: a kind of look that asked if we'd gone too far. But I shook my head and held up a finger. Give her a minute or two, I asked silently, and Tessa obliged me. To be honest, I wasn't all that sure myself. I watched Quinn thrash about, almost in a panic, and I thought maybe we'd gone too far. Maybe Quinn just couldn't handle something like this.\n\nBut Tessa surprised the both of us. She leaned over, her mouth next to Quinn's ear, and began to whisper something. I couldn't hear what she was saying, but Quinn reacted almost immediately. She calmed down, stopped thrashing, and became almost docile.\n\nTessa kept talking and whispering, interspersing her statements with kisses and licks and caresses with her hands. After a few minutes of this, she motioned me to help.\n\nI got on the bed and lied down opposite Tessa, and the two of us began to give Quinn's body a solid working over. We started with her breasts, each of us taking on and kissing and licking and fondling it for some time. Quinn started to moan appreciably through her gag as we worked.\n\nWe moved up and down her body. I spent most of my time massaging Quinn's shapely breasts as Tessa moved south, showering Quinn's body with kisses every inch of the way. Tessa eventually reached Quinn's pussy. She leaned in, pried it open with her fingers, and began to lap at her lover's pussy.\n\nQuinn's appreciative moans escalated as Tessa's skilled tongue and mouth worked her over. I continued working Quinn's upper body, kneading her breasts and leaning in, kissing her face and neck. Her head tossed to one side and then the other as Tessa's tongue explored her womanhood.\n\nMan, I was so frickin' hard, but this was Tessa's show. I was just here to help out. If I got off, well, Bonus! But this was all about the reversal of roles, Tessa taking and Quinn giving; it was about showing Quinn that there was nothing wrong with not being in control and that the two of them could express their love this way as well.\n\nAnd it seemed to be working so far. Besides those first few minutes, Quinn had stopped her struggling entirely and was now enjoying my hands and Tessa's tongue. Suddenly, Quinn's moans picked up in volume, and I glanced back to see what all the excitement was about.\n\nTessa was pushing fingers into Quinn, two into her pussy, one up her ass, and was fiercely licking her clitoris. Quinn's body shuddered and trembled as Tessa worked her over, and I sucked on her large breasts, adding to her overall stimulation.\n\nTessa kept it up and, eventually, Quinn climaxed, groaning through the gag and shaking and convulsing. Quinn came down from her orgasm, her chest heaving from post-coital bliss, moans escaping through her gag.\n\nTessa got up and stepped off the bed. She picked up a familiar object from off the floor. It was Quinn's impressively large double-sided strap-on. Tessa fitted it in, squealing a bit as she pushed the large end into her cunt. All this foreplay with Quinn must have really turned her on, because after a moment of resistance, she was able to slide the whole thing in.\n\nTessa finished strapping the fake cock on and said \"Would you . . . would you please take her gag off.\"\n\nI gave her a disappointed look.\n\nShe seemed a little shy, but then finally got into the act. She put her hands on her hips, assuming a commanding pose, and spoke in a commanding voice. \"Take her gag off, Dave!\" she said, a little too loud and theatrical, but it had the right effect.\n\nI smiled. What a girl.\n\nI leaned over and unclasped the band holding the gag snug. With a wet plop, it came out of Quinn's mouth and she gasped a few times and coughed, but besides that, she didn't do anything.\n\nTessa, still striking her pose, said some surprising stuff next. \"You know what I'm going to do to you, Quinn?!?\"\n\nQuinn's breaths were fast pants, her chest rising and falling with anticipation and excitement. \"No,\" she said, and I thought I could detect fear in her voice, but also desire. \"What are you going to do?\"\n\n\"I'm going to fuck you!\" Tessa blurted out, grabbing her fake cock and shaking it back and forth from the base. Apparently, the girl had only three modes: Normal, Submissive, and Over-The-Top. I kind of liked this Over-The-Top one . . . though not if I were in Quinn's position.\n\nI rubbed my hands over Quinn's stomach and breasts and felt her tremor.\n\n\"So!\" Tessa continued. \"Are you going to ask me to stop?!?\"\n\nQuinn shook her head back. \"No. I won't.\"\n\n\"Then you'd better ask me to start!\"\n\nDamn. Talk about role reverse. Tessa was really getting into this! No wonder she agreed to my plan. She'd probably been waiting years to do this!\n\n\"I can't hear you!\"\n\nI had trouble not laughing at that one, but did manage to contain myself.\n\n\"I . . .\" It was the first time I'd ever seen Quinn unsure of herself. But that kind of hardened self-confidence was difficult for mere bondage to suppress and her next words were far more confident. \"I want you to fuck me, Tessa. Please fuck me! Fuck me hard!\"\n\n\"Very well!\" Tessa exclaimed, and stepped up between Quinn's legs. She pressed the cockhead against Quinn's pussy lips and pushed in. Quinn groaned as the fake cock penetrated her excited cunt. Tessa fed her the entire cock in one slow, deliberate stroke.\n\nAnd then Tessa began to fuck her lesbian lover, stroking her cunt from this position of strength and power, and I could tell that Tessa loved giving it and that Quinn loved receiving it. Of course, I was rock hard and had no lovely wet holes to penetrate, but oh well. Nothing's perfect.\n\n\"Dave! Get your cock busy and fuck my ass!\" Tessa shouted at me.\n\n\"Uhh . . .\"\n\n\"Now!!!\"\n\n\"Okay! Okay!\" I replied, acting before I even thought. I hurried off the bed and looked at Tessa. She seemed embarrassed by the words she'd just blurted out, but also excited by the responses she was getting. I went over to the night stand, lubed up, and stepped in behind her.\n\nTessa slowed down, impaling Quinn all the way to the hilt and stopping. I got in behind her and ran my cockhead down the crack of her ass. Tessa reached around, bent forward, and spread her ass for me. Damn, this girl was something else.\n\n\"And put some spirit into it this time!\" she challenged, blushing fiercely as she said it.\n\nOh ho! Now those were fighting words!\n\nI pressed in, without preamble or pretext, and fed her my entire cock. She squealed delightfully as I forced her down and used my bodyweight to help invade her rectum. She thrashed and screamed and buried her face in Quinn's breasts, but she'd asked for it and I gave it to her.\n\nI was all the way in and her muscles trembled as she gripped Quinn's bound body tightly. Slowly, I pulled out, then pushed my way back in. Her ass relaxed and opened up as I stroked her, her gasps and groans and squeals only turning me on even more. Finally, I was able to smoothly fuck her ass and we were ready to resume.\n\nTessa set the pace, with me concentrating on keeping this from becoming awkward. As Tessa would pull out of Quinn, I'd push in and fill her ass. And as she fucked into Quinn, I would pull back, emptying her. We fucked like this for some time, and I could tell Tessa loved it, squealing each time I filled her ass balls deep. On the bed, Quinn began to get into it again, her hips lifting up, meeting Tessa's thrusts excitedly.\n\nI reached around, grabbing hold of Tessa's breasts, fondling them and kissing the nape of her neck as I continued to fuck her ass. As before, it was incredibly tight and hot and smooth and just such an incredible turn on. And Tessa loved it, and her pleasure at my penetration added to mine. I wasn't hurting her or merely taking pleasure from a painful entrance. No, I was sharing pleasure with her and that sharing made it all the more exciting.\n\nTessa got really worked up and started to really pound into Quinn, and I followed along as best I could. With one last deep thrust, she convulsed and I knew she was cumming. I pounded her ass as it clenched around me, driving me to my own orgasm. Finally, the churning in my balls cut loose and I climaxed within Tessa's sweet rectum.\n\nThe both of us collapsed on top of Quinn and I slid out of Tessa first, hearing her sigh contently as I came sloppily loose.\n\n\"We're not done with you yet,\" Tessa muttered to Quinn as she pulled out. \"But before we go on, someone needs to get Dave hard again.\"\n\nOooh . . . I liked that idea.\n\nTessa unlocked Quinn's ankles, but kept her arms bound so that she could be rotated onto her stomach. I crawled onto the bed next to her so that we could sixty-nine. Tessa guided Quinn on top of me and soon I felt the full length of Quinn's hot sculpted body pressed against mine.\n\nI reached up and pealed her cunt open and began to orally pleasure her. I felt her mouth fumble around my crotch. Her arms were still bound, but she still managed to excite me. Her tongue caresses the underside of my cock and she licked and sucked until I was semi-hard, and then took me into her mouth.\n\nShe wasn't as good as Tessa, but just having her pleasuring me like this, still bound and freshly fucked, was such an incredible turn on that it didn't really matter. She sucked at me vigorously, enthusiastically, and I began to harden for round two.\n\nI worked on her cunt and Tessa came up behind and licked at her asshole. We had to be careful, otherwise we'd bump our heads together. But the position seemed to work well, with Tessa licking at her from above and me from below. Quinn moaned, her mouth full of cock, as we worked her two entrances over with our tongues and fingers.\n\nTessa started to get more aggressive and started fucking Quinn's ass with her fingers. I could tell Quinn hadn't had anything in her ass for a while . . . and I silently wondered if she'd ever received anal since her rape. But whatever experience she had, Tessa kept up an aggressive pace, fingering and licking and stretching her for the pounding to come.\n\nSoon, I was rock hard again, and Quinn's mouth was gliding across my shaft from tip to base. She had trouble going as deep as Tessa, but it seemed as if she couldn't stand being outdone, and forced herself to take my entire length. Every so often, she would pull away completely, coughing and gasping, then finding my cockhead and again deep-throating my cock.\n\n\"You hard?\" Tessa asked.\n\nTo be honest, I wanted to cum in Quinn's mouth. After she'd gone down on me a few times and had gotten used to my length, the things she was doing with her tongue really felt good. But, Tessa was in charge for this one, so I pulled out from under Quinn.\n\n\"Yeah. I'm ready,\" I said, turning around and getting back underneath Quinn. I was face to face with her as I felt Tessa's hands guide my cock into Quinn's cunt. She was so unbelievable hot and wet and I slid right in. Quinn grunted and gasped at the sudden penetration, but soon leaned forward towards my face, hungry and wanting.\n\nWe shared a deep kiss. I really didn't care where her mouth had been and I enjoyed her tongue exploring my mouth, and my tongue hers.\n\nTessa got in behind us and positioned her strap-on for entry into Quinn's ass. I could feel Quinn get nervous and tense. It must have been an awfully long time since she'd had anything in her ass.\n\n\"Don't worry. Relax,\" I reassured her, and for whatever reason, she seemed to do just that. Tessa's penetration of her ass was a slow, gradual affair. A few times, she winced in pain, and Tessa would stop and pull out a bit. I could feel Quinn open up to the onslaught, my cock and Tessa's strap-on separated by only a thin membrane within Quinn's body.\n\nI kept still throughout Tessa's work, even though I really wanted to stroke her cunt. The stimulation from feeling Tessa's fake cock at work and the spasmodic clasping of Quinn's hole were really taking a toll on me.\n\nFinally, Tessa proclaimed. \"There! All the way in! How's it feel?\"\n\n\"Full,\" Quinn uttered. \"So very full.\"\n\n\"Does it hurt?\"\n\n\"A little . . .\"\n\n\"Do you want me to stop?\"\n\nQuinn shook her head. \"No. Don't stop.\"\n\nTessa pulled out and Quinn sucked in a breath. I started to move as well and the two of us build up a slow, steady rhythm. Quinn began to moan loudly as the two of us stroked her ass and cunt in unison. She shivered and convulsed and leaned down to kiss me. And I kissed her back and played with her breasts as I fucked her tight cunt.\n\nAnd Tessa kept drilling her ass, slowly as first, but picking up more and more speed as time went on. And Quinn really started to get into it, bucking and grunting and thrashing about as the two of us stroked her. She climaxed again, this time screaming, and then collapsing on top of me, exhausted and spent.\n\nTessa and I kept at it, though, and I felt the juice boil up within my balls and I cut loose inside of Quinn just as Tessa let out her own squeal of delight. The two of us came, thrusting into Quinn a few more times before finally pulling out.\n\nTessa unclipped the strap-on and pulled it wetly loose with some effort. She shuddered as the giant thing came out of her cunt. \"Ah . . . wow . . .\" she muttered to no one.\n\nI slid out from under Quinn and glanced over at Tessa. She'd climbed onto the bed and was busy unfastening Quinn.\n\nAnd here was the moment I had silently dreaded. I had these visions in my head of Quinn laying me out with a punch or something. Stupid, I know. I mean, she certainly seemed to like it. But then . . . this was Quinn. Hopefully we hadn't gone too far. I really wouldn't want someone like her gunning after me.\n\nWhen Quinn's arms came free, she sat up in the bed and pulled off her blindfold. She looked at me, then at Tessa, who only responded with this meek look, as if she'd just done something horribly wrong. Which might not have been too far from the truth.\n\n\"Who's idea was this?\" Quinn demanded firmly.\n\nWithout a moment's hesitation, Tessa's arm sprang up and a finger pointed straight at me. Gee, yeah. Thanks, Tessa. Thanks, a lot.\n\nQuinn turned and looked at me and bored into my skull with those intense eyes of hers. I really really thought she was going to lay me out now. But then, something happened that I hadn't expected. Something softened within her and she smiled, actually smiled. And she took my head in her hands and leaned in and kissed me passionately.\n\nIt was a long deep kiss, and when she finally finished I had to gasp for air.\n\n\"Tessa was right about you,\" was all she said before kissing me again. Tessa came in close and the two girls shared a kiss all their own, and Quinn said \"That was wonderful. We'll have to do that again, sometime.\"\n\n\"You're not upset with me?\" Tessa asked, their foreheads together.\n\n\"Never. I love you. And . . . I think . . . I love you both.\"\n\nWe snuggled some more, then decided to go back to sleep. It was the weekend, after all. No reason to get up early or anything."
    ],
    "authorname": "slowMINE",
    "tags": [
        "strap-on",
        "ffm",
        "two women one man",
        "bondage",
        "bisexual",
        "threesome",
        "double penetration",
        "blowjob",
        "femdom",
        "virgin"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/extra-credit-club"
}
{
    "title": "Unity and Destiny Pt. 06",
    "pages": [
        "When Javier stretched and opened his eyes, the first thing he saw was a pair of bare feet. They belonged to Kat, who'd apparently rolled his direction overnight. Jacob only had one bedroom, and the visitors had insisted on sharing the living room floor.\n\nEsther was still sitting in the same chair. Not asleep, but meditating. He hoped she'd gotten some sleep at least.\n\nJacob came in the door with some groceries, and Javier made himself useful getting breakfast going. Soon the bacon smell drew Kat and Grace, along with a very tired-looking Esther.\n\n\"I sent a text message last night to Selena,\" said Kat. \"Just the code number we agreed on, saying we're safe. No reply, though. Probably no reception yet wherever they are.\"\n\n\"I sent Selena the same thing with our Morse code,\" said Esther. \"They seem fine, though probably tired after skiing forty miles last night. They dug a snow shelter a few miles from one of the ski resorts north of Tahoe. Probably Selena's idea. There might be a working phone or cellular reception nearby, and supplies so they don't have to rely on Mark's hunting. She won't look out of place skiing over there during the day. I'm guessing they'll stay put unless we give them word to move.\"\n\n\"What about the search for us?\" Javier asked.\n\n\"Moved on, it seems,\" said Esther. \"They flew that surveillance plane over a few times during the night, checking to see if we stopped somewhere nearer the camp, but the storm's still going, and the trail we left may be difficult to find by the time they get a closer look. They left some cars stationed at the highway intersections, but as we hoped, they guessed we went west on 70, and the military types went that way. Before they left they did a more thorough search of the camp and took the computer, but that won't tell them anything. I'm pretty sure they installed some surveillance equipment as well.\"\n\nKat groaned. \"Lovely.\"\n\n\"Well, I could identify it if we were closer, and then we could remove it. But I guess we can't go back there any time soon. I've tried to keep track of the people who seemed in charge. One of them seems to have come to Reno as well, but I think it's a coincidence. Merely the closest city with power and working phones.\"\n\n\"We should go find that asshole and kidnap the fuck out of him,\" grumbled Nicola as she came into the kitchen. \"See how he likes it.\"\n\nEsther frowned at Nicola, who shook her head as she looked for a coffee mug. \"Joking, Esther. Really.\"\n\n\"One thing confuses me,\" said Grace. \"Why did they try to get us at night, during that terrible weather? After all, they probably assumed Mark had good senses, so they'd be at a disadvantage. They should have just, I don't know, come with helicopters during the day or something. The whole thing seems really rushed.\"\n\n\"I was thinking about that,\" Javier said. \"Maybe it's a clue. Mark and the others would barely have any of their abilities if it weren't for Esther's trick. I'm guessing they understand about how the vision incapacitated the Changed, and they tried to attack during the window where they thought Mark might be least dangerous.\"\n\nNicola nodded. \"You're right. If not for Esther it would have worked perfectly. God, I hope they don't think it's extra-suspicious that we escaped.\"\n\nRaj shook his head. \"I think we might be in luck. They would have found the microwave receiver, and maybe they'll find a relay or the sensor on the road. It would take them a lot of effort to find all the little stations, so maybe they'll assume we had a better surveillance system than we did. That would be the simplest explanation for why we bolted. No one else has senses extending as far as Esther.\"\n\n\"No one they know of, we hope,\" amended Esther. \"If they guess the fiery vision came from an individual, then they would understand how far our senses can reach. And I have news on that front as well. I was able to follow the trail of the vision a long way, though I couldn't sense a person at the other end. It was indeed from Japan. The person is concealing themselves well, but as long as the vision keeps going, I could likely find them if I went to Japan myself. I'm sure others could, as well.\"\n\n\"Let's assume they can take care of themselves,\" said Javier quickly. \"We have enough trouble of our own. We need to get some new vehicles and find somewhere to stay for the long term.\"\n\n\"You're welcome here,\" said Jacob. \"As long as you need.\"\n\n\"That's kind, Jacob,\" said Esther, yawning and moving to the couch. \"But it's a tremendous imposition. And we might be safer farther away.\"\n\n\"I could steal a couple cars easily enough,\" said Nicola, looking pleased at the prospect.\n\n\"That would be risky,\" said Raj. \"And we have our false identities, aside from Nicola. Why don't we just rent them?\"\n\nNicola conceded the point, and they argued over who would be least suspicious. In the end they settled on Javier and Grace. Javier might be on someone's watch list, but his alter ego Jos\u00e9 lived in Reno already.\n\n\"And think how different he'll look once we buzz his hair!\" Kat said. Javier rolled his eyes.\n\nTwenty minutes later Javier felt awfully conspicuous and damn near bald, but Kat claimed he looked sexy as hell. He'd have preferred Esther's opinion, but she was finally asleep.\n\n* * *\n\nEsther woke up as Javier came back in. He'd shaved his head for some reason. Well, not quite shaved. It must be a disguise. She had horrible headache and still needed more sleep. But she should try to be cheerful.\n\n\"Oh, Javier. You look, uh, really good that way!\"\n\nHe laughed. \"You're a terrible liar, Esther, and I love you. It'll grow back anyway. We got cars! Looks like Grace made it back already. We went to separate places, just to be really sneaky. And on the way back, I scouted around for a car with California plates that looked like it had been parked on the street a long time. Tonight we're going to swap license plates with the truck.\"\n\n\"Oh,\" Esther said. \"Won't that get the other people in trouble?\"\n\n\"Not really,\" said Javier. \"It's not their fault if someone does that to their car. And they may not notice for a long time.\"\n\nEsther wasn't convinced, but she supposed it was better than risking the FBI snooping around Jacob's neighborhood. \n\nHer head was pounding more, a result of too much work last night with her abilities. She needed a shower. And her clothes were a mess. She'd been too embarrassed to do as most of the others and borrow from Jacob while Kat did laundry this morning.\n\nBut mostly, she was so terribly angry at herself. She'd said to trust Myra Jackson, and everyone had trusted her the way they always did. She didn't understand the world as well as the others. Selena had been right to be suspicious. \n\nJavier came over to kiss her, and she tried to be sweet to him, but he saw right through it.\n\n\"Go get a shower, Esther,\" he said. \"Everyone else is done, so take your time. And then get some more sleep. We need you fresh to plan our next steps.\"\n\nShe bit back a sharp response. What was the matter with her, anyway? She should do as Javier said.\n\nOnce in the shower, Esther felt better, as Javier had known. She briefly considered using the sprayer on herself, if only to let off some stress\u2014but that seemed totally wrong in Jacob's house. Instead she closed her eyes and meditated. Listening to everything would tire her out. But her subconscious had already alerted her to something going on with the government man here in Reno. He was barely four miles away, in a hotel. And he had a guest she hadn't seen in the raid.\n\nThe government man was pacing in his room. \"What could that mean, Sebastian? They told us everyone was sharing intel now. We knew he was a high-value target, but why weren't we even told? It could have been a disaster if we'd run into the others.\"\n\n\"It almost was anyway,\" said the other man. \"You let them slip away. No, I know, you don't have to tell me, James. It was a cock-up from the start.\"\n\n\"They didn't give us any time,\" James said. \"I was still trying to plot out things on that fucking map at go time. Frankly I thought the men did damned well in that weather, and given everything else. But then the locals couldn't get a simple fucking blockade set up.\"\n\n\"Don't blame them,\" said Sebastian. \"You know it was the rush. People upstairs, like always. Just take the win, and be glad we're done with it.\"\n\n\"I hate being in the dark,\" James said. \"And what kind of elite team was so secret they couldn't tell me about it?\"\n\n\"It's just the same old,\" said Sebastian. \"Everyone protecting their own bureaucratic turf, even after what happened. Probably some bullshit CIA black ops team. Well, he's their problem now. I admit I did kind of want to see this supposed superhuman they're all in a tizzy about. Watch it be some poor asshole who had nothing to do with anything. People are losing their heads in Washington, I'm telling you.\"\n\nSuddenly nervous, Esther checked on Mark and Selena. But they were fine, as she'd known. Selena was heading out for supplies. No commando teams converging on them.\n\n\"Probably taking him to Area 51,\" James said. \"Wherever they keep the aliens.\"\n\n\"You know, I've actually been to Area 51,\" said Sebastian. \"But I can't tell you about it. I'd have to kill you.\"\n\nThere was a pause and then both men laughed. Sebastian got up to shake hands, and then he left the other man alone in the room.\n\nEsther turned off the shower, trying to understand what it meant, but she couldn't make it add up. They seemed to think they'd caught Mark, or at least that someone had. Could the other people be about to swoop in, and she just couldn't see it? The way she almost didn't see the attack on the camp?\n\nShe lay back in the tub and closed her eyes. Going deep into otherspace made her headache worse, but she could stand it for a while. She listened as best she could. No preconceptions. Just let her subconscious try to piece together the details into a larger picture. She wished she had Lukas's skill in doing so, but she supposed he'd been practicing for much longer. And as Javier had wisely said, her mind was built for the opposite direction: using deep abstractions to work out the details.\n\nEventually she gave up, opening her eyes and rubbing her forehead. There wasn't anything, not that she could see. And James and Sebastian had been talking as though everything had already happened. While she was meditating, James had set up his radio to make a call, telling someone their operation was over, and they could return to base. \n\nEsther dried off and wrapped herself in a big towel. It left her decent enough, and she couldn't face putting on her dirty underwear again. She'd get it washed and then go buy some more.\n\nThe others were arguing over their next steps, but they broke off as soon as she approached. They didn't do that when it was someone else joining the discussion. It was because they assumed she had something to tell them, or some order to give. And annoyingly, they were right again. She relayed the conversation word for word.\n\n\"Holy cow,\" said Javier. \"So they really did just want Mark, and they're calling off the search?\"\n\n\"Are you positive he's safe?\" Nicola asked.\n\n\"No, of course I'm not,\" Esther said. \"I just spent a half hour trying to find some hypothetical team that was about to capture them, and I didn't find anything, but we all know how much that means.\"\n\nThere was a short silence.\n\n\"You OK, Esther?\" Javier asked.\n\n\"No, I feel like shit,\" Esther said, blushing at the swear, and annoyed at her reaction. \"Sorry, I should go lie down like you said.\"\n\n* * *\n\nDespite Jacob's urging, Esther refused to sleep in the bedroom, flopping on the couch instead. She didn't seem to notice how much she'd exposed herself in that towel, so Javier covered her with a blanket and kissed her on the head. She was obviously pissed off at herself, but she wasn't ready to talk either.\n\nIn the kitchen they discussed what her information could mean.\n\n\"Some kind of bureaucratic mistake?\" Kat asked. \"Or a political power struggle? Maybe someone hated the idea of that raid from the start, and they killed it off. Surely some people must feel the way Myra Jackson pretended to feel.\"\n\n\"Or maybe it even was Jackson,\" said Raj. \"We still don't understand what game she's playing. Lukas seemed to trust her to some extent.\"\n\n\"Lukas,\" Nicola said slowly. \"Of course. It was Lukas.\"\n\nEveryone stared at her.\n\n\"This is exactly the way he would have done it,\" she clarified. \"Lukas wouldn't have wanted us captured, or any other Changed for that matter. He might have wiped his computers, but the information was in his head anyway. If he hasn't let himself get brainwashed, if he's still playing the game from Europe, he'd have all sorts of ways to find out about this raid, and levers he could pull to confuse things. Doing it this particular way took all the pressure off of Mark. Efficient. Very Lukas.\"\n\n\"Why wouldn't he get in touch with us, then?\" Kat said. \"I was able to dial in to check messages this morning. The internet's still half broken, but surely Lukas could have found a way. And we'd be in his debt.\"\n\n\"He knows we'd figure it out eventually,\" said Nicola, \"and that we'd realize we owed him. The danger is over, and whether we know it yet wouldn't be important from his perspective. Then he could reveal his role at some appropriate time, as though it was no big deal, or just leave it unsaid. That would be exactly his understated sort of theater. God, in a way I'm relieved. I was half sure he'd disappeared into some cell of Chosen and would become as dumb as I was getting.\"\n\nJavier didn't think the Chosen were stupid. Rather, Nicola had been exhausted and confused from fighting against Unity. He wasn't about to bring that up, though.\n\n\"Maybe it was Lukas,\" said Javier. \"Maybe it was something like what Kat said. In any case it looks like we really lucked out. But I don't think it's safe to return home yet. Our names are still on that FBI list, assuming we can trust Jackson about that, which we probably have to. We're just lower priority than capturing Mark. They're not going to send the military in against the rest of us.\"\n\n\"I'm almost insulted,\" said Kat.\n\n* * *\n\nEsther felt a lot better when she woke. As always, Javier had been right. She got up and headed straight for the kitchen before she realized two things: Grace was in the kitchen, and Esther had left behind her towel.\n\n\"Ack,\" she mumbled, or something close, turning quickly to retrieve the towel. Nicola was dead asleep on the floor, dressed properly again. In fact, someone had cleaned and dried Esther's clothes and left them for her. Everyone else was out, mostly shopping it seemed. Jacob was in a meeting at his church. Esther retreated into the bathroom and got dressed before returning to face Grace.\n\nGrace had pulled out some snacks for Esther in the meantime, and was sitting nonchalantly at the table. Esther wasn't fooled. She'd seen the way Grace had stared a second, then blushed before turning away.\n\n\"I used to be really shy about my body,\" Esther said eventually. \"I think being around Nicola largely beat it out of me. But maybe I'm a little too casual.\"\n\nGrace smiled, looking embarrassed.\n\n\"I didn't mean to look,\" she said. \"It's just, well,\"\n\n\"I'm pretty different,\" Esther agreed.\n\n\"No!\" Grace blurted. \"I mean, yes, but I was going to say beautiful.\"\n\n\"You are, too,\" said Esther. \"I'm sorry to say I don't always manage not to snoop.\"\n\nGrace laughed. \"Kat told me you could do that, but that you were incredibly good about avoiding it. Anyway, we don't mind.\" She stopped, looking horribly embarrassed. \"That was more than I meant to say.\"\n\n\"I guess we're all recovering from the stress,\" Esther said. \"Or maybe you've been around Kat too long.\"\n\nGrace smiled. \"You're right. I think I'm rubbing off on her as well. Eventually you won't be able to tell us apart except by the haircut.\"\n\nJacob eventually returned from parish duties, and soon afterwards the other three returned from their shopping.\n\n\"More radios,\" said Raj unnecessarily, spreading out the equipment on the table. \"I'll have to do some tinkering.\"\n\n\"By which he means boosting their power illegally,\" said Kat. \"And we got more clothes for everyone. Sparkly underwear all around.\"\n\nThe underwear was not in fact sparkly, and the clothes welcome. Still, now that the crisis seemed to have abated, the frictions of being squeezed so close began to grow. Esther's mood was sliding again, and Javier kept finding opportunities to ask if something was bothering her. But she didn't even know if it was anything specific.\n\nSelena had managed to reach them from a pay phone that afternoon, and Kat had told her to sit tight. No one could agree on their next step. Probably they'd just accept what Esther picked, if she had any inclination herself. Jacob mentioned a vague suspicion that Abuela had owned more property than just the Sierra camp, and everyone liked the sound of that. But they needed to contact the lawyer to start digging any of that up, and his office was closed.\n\nAfter dinner, Raj eventually gave in and moved his things to Jacob's bedroom floor. Esther listened a while to their interesting theological discussion before deciding it was still rude to eavesdrop.\n\nNicola claimed the couch again, and no one felt like fighting her for it. When Kat turned off the light, Esther spooned her back against Javier, hoping he would get the hint and rub her a bit. But he just snuggled against her shoulder and kissed her, settling into a contented half-sleep.\n\nThere was a tiny noise, and the little motions Esther had been trying to ignore popped into her head. Kat was spooned behind Grace, just like Javier and Esther. But Kat's fingers had been sliding slowly down the front of Grace's pajama top, until they slipped under the waistband. Under the panties, into the luscious hair around her vulva. Grace was already wetter than Esther ever got, and Kat slipped two fingers lower, silently touching her lover. No urgency, just an intimate caress that might go on for a long time. Esther shifted against Javier, rubbing her back against his slightly hard penis. He'd fallen asleep properly, but his body still responded. Maybe he was having a good dream.\n\nThe two women were practically silent, but Nicola knew what they were doing. And to Esther's surprise, Nicola joined them, masturbating even more quietly than the others. Nicola hadn't shown much interest in women aside from Esther. Maybe she was just lonely, or bored. Or horny, like Esther.\n\nGrace eventually pulled Kat's hand away, entwining her fingers and squeezing. Kat moved on to touch herself for a while, but they both fell asleep shortly. \n\nNicola had her orgasm silently for once. Afterwards she watched Esther for a while, but Esther didn't know what Nicola wanted. Perhaps to watch Esther in return, but Esther knew now that wasn't going to happen tonight.\n\nFinally it was only Esther awake in the house, her thoughts too busy and yet going nowhere. Strange fantasies cycled through her mind. Esther with all three other women, their limbs entwined, mouths finding breasts, freckles, three ordinary vulvas and one stranger, all to be explored with delight. Javier with a much smaller penis, finally managing to thrust inside her strangeness, but now it wasn't Javier. It was Raj, or someone even more inappropriate, and she wasn't Esther anymore, but just an ordinary, incredibly horny woman, surrounded by bodies, massaged and licked and penetrated, but now she was fading away into a troubled sleep.\n\n* * *\n\nThe others were having breakfast already, Esther knew. She kept slipping in and out of unpleasant dreams, the details fuzzy as usual. Something else tugged at her attention, but it wasn't dangerous, so she stubbornly refused to notice it. All she wanted was some proper sleep. Her headache wasn't so bad as yesterday, but her mood was even more foul.",
        "Finally she woke long enough that she couldn't ignore the detail. And it was a strange one, something worth telling the others about. With a sigh she sat up, and of course they all halted their discussion to look at her.\n\n\"Diana is staying at that same motel,\" she said. \"Not hiding herself at all. I think she has very few of her abilities back yet. She's all on her own, and I can't see why she'd be down here.\"\n\n\"The Oregon group didn't have any way of contacting us,\" said Javier slowly. \"But Diana knew we found Samuel when he was at the motel the last time.\"\n\n\"You're right,\" said Nicola. \"She's probably not trying to kidnap me again, so she must want to talk. Well, fuck her.\"\n\n\"Maybe their group is in bigger trouble than we thought,\" said Esther, trying to ignore Nicola. \"It must have been chaos trying to get out of the ancient place.\"\n\n\"Then they can take care of whatever it is,\" said Javier. \"It's too risky to go back that direction.\"\n\n\"What if she was involved with the attacks?\" Kat said. \"It might be dangerous to even talk with her, if anyone is watching.\"\n\n\"I'm pretty sure no one is paying her any attention,\" said Esther. \"She will know things we don't. And she must be desperate if she's trying to get our attention. We have to talk to her.\"\n\n\"OK then,\" said Javier with a sigh. \"How should we go about it?\"\n\nThe others started arguing about whether they should contact Selena and Mark, and suddenly it was too much for Esther.\n\n\"That's it? I say we should do it, and everyone changes their mind?\"\n\n\"Esther, wait\u2014\"\n\n\"I screwed it all up with Jackson, and you're all expecting me to make the next decision just because random chance gave me powerful abilities that I'm never going to master properly, and because Abuela grasped for me in her desperation, and even Benjamin's sister thought I was some kind of Messiah, as though that made any of it all right! I didn't deserve that. I don't deserve your trust, that's for sure.\"\n\nEsther broke off, not sure what she was even talking about anymore. She was just so, so terribly tired. And she hated the way everyone was looking at her now.\n\n\"Do you think we follow you because you can start avalanches with your mind?\" Nicola asked. She looked positively furious. \"Is that really what you think?\"\n\nEsther shook her head and winced. \"I have a headache. I'm going to lie down again. You should all decide what we're going to do.\"\n\nJavier rushed over to comfort her, but Nicola wasn't done. \n\n\"No, Esther, you're not running away this time. You know what Selena told me, after you visited Benjamin? She told me you were angrier than she'd ever seen, so angry it frightened her. At the very end, that piece of shit had the nerve to ask you for a kind of absolution, a reassurance that you'd had a happy childhood. And of course you gave it to him, because even then, to that worthless waste of space, you couldn't find it in you to be cruel. Do you think any of us could have done that, Esther? That's why we pay attention to you. Don't insult Javier by suggesting your superpowers are why he'd follow you to the end of the world. Esther, you even make me want to be a better person.\"\n\nAll the guilt and pain she'd been successfully forgetting was rising up, a sour taste in her throat and a throbbing worse than any headache. Esther stood up awkwardly, and she ran for Jacob's bedroom, slamming the door after her.\n\nSome time later she was aware of Javier there, sitting next to her and telling her he loved her, but she couldn't stand it. Finally he left her in peace, and she drifted in otherspace, blessedly free of her body, free of her thoughts, free of anything except the soothing knowledge that nothing in this alien place gave a damn about her.\n\n\"Esther,\" she vaguely heard at some point. \"Esther, child, come back.\"\n\nWhen she finally opened her eyes, she was exhausted. Thirsty. The shape sitting on the chair was Jacob.\n\n\"Oh, Jacob,\" she croaked. \"What a mess I am. I'm sorry.\"\n\nJacob stirred. She realized he'd been mostly asleep himself. She'd been floating in otherspace for hours.\n\nHe sighed, then reached to get her a glass of water.\n\n\"Among my congregation, I like to think I'm known for being able to listen,\" he said. \"It's part of the job description, to tell the truth. So why don't you tell me what you're able. Or we can pray, if you'd prefer to keep it with God. But I don't think you should be bottling it up inside yourself.\"\n\n\"I'm not one of your congregants,\" she mumbled, sipping the water. \"You don't have to do that for me.\"\n\n\"Of course I do,\" he said, his voice gentle. \"I would do it for everyone if I could. I think you understand that, don't you?\"\n\n\"But I could do so much more,\" she said. \"If I weren't so slow. If I weren't so tired all the time. Abuela could do so much more.\"\n\n\"And she hated herself for what she couldn't do. It nearly tore her apart sometimes. Esther, didn't you say weren't a Messiah?\"\n\nShe frowned. Jacob was right. There was a kind of arrogance in her, wasn't there?\n\n\"My parents thought I was an angel,\" she said slowly. \"When Javier looks at me it scares me sometimes to think what he sees. I can't do it, Jacob. I don't deserve any of it.\"\n\nJacob sighed. \"God loves all of us without pausing to consider if we deserve it. In this, as so many things, we fall short. Esther, we don't get to choose our pasts. But eventually we have to make peace with them. Don't keep avoiding the pain.\"\n\nWhen Esther finally started to talk, she couldn't get any of it out in the right order. Some of it she couldn't even tell him, and that made her feel even more guilty. But once she started, Jacob didn't interrupt her, except once to refill her water. At the end of it all, she waited for the relief. Mostly she just felt drained. \n\n\"I don't really feel any better,\" she finally said.\n\n\"Mmm,\" Jacob said. \"Did you expect to?\"\n\n\"I suppose I did,\" she said. \"But now I can't stop thinking about those poor people Benjamin abused. About my sister, who had to die to make room for me.\"\n\n\"But you are thinking about it,\" Jacob said. \n\nHe was right, of course. She was thinking about it, and it hurt terribly. \n\n\"I need to help the dreaming people,\" she said slowly. \"Marianne and all the others. I haven't even looked for them. I could at least tell them it will never happen again. I haven't even wanted to think about them, but that's selfish.\"\n\nJacob took her hand. \"I hardly think you've been selfish. Look at what happened. You let a sliver more forgiveness for yourself into your heart, and suddenly you're bursting with love for everyone else. That's what Nicola was talking about, Esther.\"\n\nEsther sighed and sat up, realizing at some point she'd partly undressed herself under the sheet. But it was dark. Someone had left her a change of clothes at the foot of the bed. \n\n\"Wait,\" she said. \"Where is everyone?\"\n\nBelatedly she started piecing it together.\n\n\"I think something gave them the impression you were tired of making all the decisions,\" said Jacob. \"I'm sure they'll be glad to hear you changed your mind.\"\n\n\"You're teasing me,\" Esther said. \"Do you do this with your congregants, too?\"\n\n\"Only the ones I like.\"\n\n* * *\n\nFifteen minutes out of Reno, Nicola grunted and put her head on the dashboard.\n\n\"It's useless,\" she said. \"I can't feel shit, not far enough to matter. We take her abilities way too much for granted. I'm terrified there's going to be a new roadblock or something.\"\n\n\"We've managed without her before,\" said Javier. \"We need to do it more. Like the surveillance system, the radios, the cell phones. Find ways to keep her from doing all the work so quietly we stop noticing.\"\n\nNicola sighed. \"I feel like such a shit. I thought I was doing the right thing, confronting Esther that way. I didn't think she'd react so terribly.\"\n\n\"I think it was the right thing,\" said Javier. \"I was too chicken to do it.\"\n\n\"Not too chicken,\" Nicola said. \"You just love her too much to say things that might hurt her. I never seem to have that problem.\"\n\nJavier knew that tone well enough. Something else was bothering Nicola.\n\n\"Are you feeling pissy about Diana?\"\n\nNicola snorted and sat up.\n\n\"That's one word for it. I've been trying to convince myself I can meet with her, but honestly? I'd lose my temper and possibly beat the shit out of her.\"\n\n\"She has it coming,\" agreed Javier. \"But if Esther's right, and of course she is, then Selena and I could manage her on our own. And we could bring Mark.\"\n\n\"No, I think you were right. Fewer people makes us look more confident, that we know she's no threat. I think it'd better be just you two. I can be a safe distance away, dreaming about beating the shit out of her. Everyone wins.\"\n\nJavier smiled, and Nicola sighed.\n\n\"We were a good team, you know,\" she said. \n\n\"Even if we never quite got married.\"\n\n\"Probably just as well,\" she agreed. \"Makes the fantasies better, doesn't it?\"\n\nJavier coughed, and Nicola started to laugh. \n\nA few minutes later the telephone rang, and Nicola started, fumbling for it in her bag.\n\n\"Hello?\"\n\nShe made a face at Javier, but listened a bit.\n\n\"OK, Esther, got it. Thanks. I'm so glad you're feeling better. Oh, come on Esther, I was the rude one. You should go back to sleep. Really, it's under control.\"\n\nAfter she hung up, Nicola started to laugh. \"Apparently she's back to herself. Anyway, everything's clear. Selena and Mark are hiding just off the road near Tahoe City. No assault teams waiting to catch us. And Esther apologized to me. Can you believe that woman sometimes?\"\n\nThey stopped at the location Selena had suggested on the phone, and in a minute the pair were skiing to the edge of the road. Mark was beaming, the way he usually was after being outdoors a while, though Selena looked a bit worse for the wear. Javier got out and helped them load their gear into the back of the minivan.\n\n\"Everything go all right?\" he asked.\n\nSelena nodded. \"No problems, aside from following this maniac at night. And I guess we're really in the clear? Kat wouldn't explain on the phone how that happened.\"\n\nOn the way back Javier and Nicola filled the pair in. By the time they got back to Reno, Selena had already suggested a few alterations to the plan. They were a good team, all of them. Esther was right. They shouldn't put so much responsibility on her. Or rather, they should work harder to prevent her from doing that all on her own. \n\n* * *\n\nEsther seemed in much better shape when they returned. Javier went to hug her, but Nicola beat him.\n\nWhen Javier got his turn, Esther didn't say anything, but just kissed him on the lips. For quite a while that seemed like the best way he could possibly be spending his time.\n\n\"So, did you hear the plan?\" he finally asked Esther.\n\n\"It seems like a good one,\" she agreed. \"I'm doing so much better now. Maybe I should come along and introduce myself.\"\n\nEveryone looked at Javier, so he tried to explain.\n\n\"We still don't know her, or what she wants. With Unity in the picture I worry if we can ever trust the Chosen fully. I think leaving you as a mystery gives us more leverage.\"\n\nEsther nodded. \"All right. How about I come along, maybe with Mark and Nicola, and we stay a safe distance away, but close enough that we can intervene if we sense something unexpected. This is exactly how they got us last time, after all. Maybe there's another person with gifts like Diana, trying to hide.\"\n\nJavier raised his eyebrows. It was a good point.\n\n\"Sounds perfect,\" Nicola said. \"How about an early dinner, and then we go for it?\"\n\n* * *\n\nDespite the chill, Javier's palms were sweating when he knocked on the motel room door. He was glad to have Selena along with him. The thought of seeing Diana gave him the creeps, even knowing her abilities were weak.\n\nA few seconds later the door opened. Diana didn't seem surprised, but maybe she'd been able to sense them this close. Then again, she could have just looked out the peephole.\n\n\"Hello, Jos\u00e9,\" she said wearily. Looking closer, Javier saw all the signs. She was exhausted, and probably battling the pain even now. He couldn't help but feel some sympathy.\n\n\"Diana, this is Selena.\"\n\nThe two women looked at each other a while. Eventually Diana gestured towards her room.\n\n\"We can talk here, or elsewhere if you prefer. I give you my word I am alone, and have no intention of doing anything to you against your will.\"\n\n\"You couldn't,\" Selena said, and Diana sighed, acknowledging the point.\n\nThey sat on the faded couch facing Diana, and she settled carefully in a chair.\n\n\"Selena,\" Diana said slowly. \"The day I first saw you at the ancient place, I knew you were more Blessed than anyone I had ever met. Aside perhaps from the mystery person you accompanied. What they did to me, and to all of us\u2014I did not even know such things were possible.\"\n\nSelena looked annoyed. \"That was the point, as I'm sure you realized. Why don't you go ahead and explain what you think we can help you with.\"\n\nDiana frowned and rubbed her forehead. \"I was leading to that. Whoever you are, you have chosen a very different path as Chosen. I don't imagine you understand entirely my position within our community.\"\n\n\"You're an outsider,\" Selena said. \"So many Blessings that you exist at the edge of what's considered acceptable. In danger of being out of harmony with the Way, merely for the accident of your birth.\"\n\nDiana nodded slowly, the pain more obvious than ever. \"You understand more than I realized, then. I should not presume you to be so ignorant of the Way. And I suppose you have guessed what happened on the night we foresaw. The manner in which our clouded vision failed us.\"\n\n\"It must have been dreadful,\" Javier said. \"I hope everyone made it safely out of the ancient place, to the farm. We weren't positive.\"\n\nDiana gave him a curious look. \"Did you know, then, what was to come? Is that why you were so insistent upon leaving?\"\n\n\"Of course not,\" Javier said. \"We would have tried to warn you. We left because we didn't want to be coerced into joining you.\"\n\n\"Perhaps we should have warned you nonetheless,\" said Selena. \"We had thought it foolish to live in an ancient place.\"\n\nDiana nodded. \"You were not alone in that sentiment, and indeed our arrogance has been punished severely. But you were kind to ask about the evacuation. I sought you out because we did not in fact arrive safely, not all of us. I was left unconscious, but lucky enough to have been outside the ancient place. My son Samuel was able to find me and\u2014\"\n\n\"Just a moment,\" Selena said. \"What were you doing outside? Were you involved in the sabotage? The murders?\"\n\nDiana closed her eyes. \"I was following the Way as best I could.\"\n\n\"That's not an answer,\" Javier said. \"Tell us if you, or others of your group, were involved in hurting others. We won't help you without knowing that.\"\n\nDiana sighed and nodded slowly. \"Understand that my actions are my own. They do not reflect on the others in my group, and especially not on the children who need your help.\"\n\nJavier flinched, and Diana saw it. Of course she'd gambled right. Esther was unlikely to turn down any request for help, but none of them would feel good about leaving children in trouble.\n\nSelena shook her head. \"Your actions are not entirely your own, and you know it. However, of course I agree about the children. Answer Jos\u00e9's question truthfully and we will honestly consider what we can do.\"\n\nDiana swallowed. \"I am on the edge of our community, as you assumed. My skills make me useful in the outside world, and I have lived there more than within our community. I'm not welcome to join Unity regularly, and when I do, no one is more worried than I am that my presence will distort our vision. And yet they need my sight, as I need Unity. I see what others do not, and I argue with the elders about what actions we should take in the outside world. Ultimately, I am nearly always the one to carry out these actions. And in this case, I did hurt others directly. Five people, workers at the natural gas generating station I sabotaged. I hurt them only as much as I needed to accomplish my goal. All should have recovered soon enough.\"\n\n\"And that's where Samuel found you?\" Javier asked.\n\n\"Yes,\" she said. \"I briefly shut down the plant, but I intended to do more serious damage than I did. Samuel found me where I had fallen. And now I understand how fortunate I was to have failed. I suspect what I had in mind would have killed me and many workers as well. That outcome was not something I foresaw in Unity. The vision of holocaust that stopped me was cruel, but it moved me closer to harmony with the Way, and so I'm grateful.\"\n\n\"Have you ever killed someone, attempting to follow the Way?\" Selena asked.\n\nDiana was silent a long time.\n\n\"Once,\" she said. \"Never intentionally. I was arrogant, and rightfully taught a lesson. I have been so much more cautious since then. More cautious than some would prefer. My vision runs further than most, but it is ultimately no clearer.\"\n\n\"It's too bad that lesson required someone else's death,\" Javier said. \n\nDiana glared at him. \"You may judge me all you like, and no doubt I deserve it. But I have come to you nonetheless, and you told me you would listen fairly to my request.\"\n\nJavier glanced at Selena, and they nodded. Diana moved quickly ahead with her story.\n\n\"I am told those with more Blessings were utterly disabled from the first instant. The other elders delayed, hoping it would pass, but it soon became clear they needed to evacuate. But most of those who regularly range outside were heavily afflicted. We had enough vehicles, barely. It left a heavy burden on the few competent drivers remaining. Aaron is a kind man, and the children love him. But he had only driven around our grounds. His car became separated from the group, and we have heard nothing from him since. He has no driver's license, and very little experience with the outside world. He was driving three children, none older than eleven. And with him was Peter, our oldest member and one with many Blessings. I am told Peter was the most heavily affected of those inside, and given his age his health may be in danger, wherever he is now.\"\n\nPeter must have been the singer, Javier thought. The one Nicola had said was starting to go senile. \"You have no guesses where they might be?\" he asked.\n\n\"None,\" Diana said with frustration. \"If only I had my senses, perhaps\u2014but even then, I would not find them quickly. I assume Aaron made a wrong turn, but I worry what might have happened if he encountered police. He wouldn't even know how to fill the car, if he ran out of gas. We are so careful to avoid situations like this. We have a few resources, but nothing that can help yet. A lawyer I've not yet been able to contact. I even stopped by the police station in Medford, but they had their hands full with other issues and no information.\"\n\n\"Are you the only one searching for them?\" Javier asked.\n\n\"Nearly,\" she said with a sigh. \"Samuel is looking as well, along with one of the parents. It is chaos at our new site, with too much work and too few hands. And the others do not realize how incapacitated I am, and thus expect too much. I should have been honest, but my position has become suddenly much more precarious. Our group is on the verge of fracturing, and there are those who find great meaning in my punishment, and Peter's. Fools. They should be thinking of the children. But they don't understand the outside world the way I do.\"\n\nSelena nodded. \"Why do you think we would be able to help you?\"\n\nDiana frowned. \"Let's not mince words. It is rude to speak this way, but Blessings can make a person powerful. The abilities Nicola, Mark, and your owl-headed companion showed are each beyond any that I have seen. Perhaps you still had difficulty taking Nicola and Jos\u00e9 away, but the only reason was that you chose a method that harmed as few as possible. Your owl-headed cipher has vision far beyond my own. And you, Selena, have not shown your abilities, but I have no doubt they are considerable. Still, you're sitting here in apparent comfort, showing me that you understand something I don't about the vision of holocaust. So: power, knowledge, and a certain wisdom. You could help us, I have no doubt. And I will offer whatever I can in return, when I'm able.\"",
        "Selena nodded again, standing up. \"We will think about the problem. And I suspect we will agree to aid you, for the children's sake. We can tell you more within a few hours. I also have a serious warning. The full force of the government is now looking for the perpetrators of the Black Christmas attacks. They already understand something about the Chosen's involvement. The greatest hope of our group is that we can find those responsible for the worst of the attacks, and thus divert the government from assigning blame to all those with Blessings.\"\n\nDiana nodded slowly. \"If I must be given up to keep others safe, so be it.\"\n\n\"We are more interested in what you have seen,\" said Javier. \"Any clues that may lead us to the most serious crimes. The larger pattern.\"\n\nDiana looked at him a long time. \"Perhaps,\" she said. \"But first, we find those children.\"\n\n* * *\n\nWhen they reached the car, Selena sat in the passenger seat and rubbed her forehead.\n\n\"Esther forgets that other people have trouble doing many things at the same time. If I got the gist right, by the end she wanted to come right in to meet Diana but she convinced herself to drive back, at least far enough to get reception on the cellular phone to talk to the others.\"\n\n\"So I guess we should sit tight for a bit,\" said Javier. \"Of course Esther wants to help. If she wants to reveal herself to Diana, I guess that's really her decision. It's how she would think. The more Diana trusts us, the more everyone will get along. And that will just make things work better.\"\n\nSelena laughed. \"I want to say something cynical, but that's exactly what she did with me, wasn't it? And now look where we are.\"\n\nJavier smiled. \"You missed the fight we had. Well, not really a fight. But Esther was pretty upset.\" He described Esther's small meltdown that morning.\n\nSelena nodded. \"No, of course she doesn't see it. There are all sorts of ways to lead, though, and as Nicola said, we see it in her.\"\n\nExactly, thought Javier. Selena understood. \n\nFor a while they just waited, and Javier was reminded how easy company Selena was. Even now he felt a bit nervous and off-balance around Nicola. Probably it was the lingering sexual tension. At least there wasn't any with Selena. Not that he didn't have his occasional inappropriate fantasies, not to mention his curiosity about what exactly she was so nervous about with her body. She couldn't be stranger than Esther. And whatever it was, she would probably be beautiful as well.\n\nToo late, he remembered Selena was well-attuned to this train of thought, and probably the little changes in his body, though it wasn't like he'd really gotten an erection, not yet\u2014\n\nHe glanced at her, but she didn't seem to be paying attention, thank goodness. Or so he thought.\n\n\"I wish Diana hadn't said that about my Blessings,\" said Selena. \"One more person who knows what I kept hidden so long.\"\n\n\"I didn't really notice what she said,\" Javier said.\n\n\"Now, that's just untrue,\" Selena said, turning back to face him. She was smiling slightly, but there was something odd about it. She was nervous. \n\nWell, of course she was. She was probably still traumatized about the way Nicola had casually stripped her bare with a glance, on that first meeting. It was rude of Javier to even be thinking like this.\n\n\"Javier,\" she said slowly. \"This may be too personal a question, so feel free to tell me so. What did you think when you first understood there was something odd about Esther's body? I mean, Changes unlike anything other women had.\"\n\nIt was personal, all right. Obviously she wouldn't have asked if it wasn't important, though, so he tried to remember back. It wasn't all that difficult. And Selena had seen Esther's whole body at this point. \n\n\"The smaller Changes I saw first\u2014well, she was so scared. But I just thought she was beautiful. I don't know that it went much further than that.\"\n\n\"You didn't think, 'Wow, that's exotic, aren't I lucky!' That kind of thing?\"\n\nHe frowned. This was Selena, so he was stuck being truthful.\n\n\"Well, maybe a little. But jeez, I was eighteen.\"\n\nSelena found that funnier than he'd meant it to be. Of course, she still would see him as a little kid. She was older than she looked, though he wasn't sure exactly how much.\n\n\"And what about\u2014the more complicated Changes?\" \n\nJavier swallowed. \"I don't know,\" he finally said. \"Of course I still thought she was beautiful, because it was Esther. Scared, because I wanted her to know that none of that mattered to me, even when I wasn't sure if that was true. And because, uh,\"\n\nHe halted. He couldn't say this to Selena.\n\n\"Go ahead, Javier,\" she said. \"Believe it or not this is more excruciating for me than you.\"\n\nThat seemed unlikely, but he went on anyway. \"I thought I knew how to make girls feel good, and I was suddenly out of my depth. Every woman was different, and I was used to that, but what if it was too much? What if we never figured it out? I don't know, stupid panicked thoughts like that. I wanted so much for it to be nothing, but it wasn't as simple as that.\"\n\nSelena let out her breath, turning to look out the window.\n\n\"Thank you, Javier. I mean that. And thank you for being the lover you were for Esther, apparently right from the start. I doubt most men of any age would have been capable.\"\n\nJavier had no idea where this conversation was going. Was Selena trying to tell him something personal, and he was too thick to get it?\n\n\"Selena, I\u2014\"\n\nBut he broke off, because Selena was shaking her head, not looking at him.\n\n\"I think we should probably leave it there,\" she said. \"I hope I didn't just make things incredibly awkward.\"\n\n\"Maybe,\" Javier said. \"But I'm used to it.\"\n\nSelena snorted and didn't say anything else. And after a few minutes, Javier found it wasn't particularly awkward at all.\n\n* * *\n\nWhen Diana opened the door, Esther reached to shake her hand.\n\n\"My name is Esther,\" she said. \"And yes, we will help you.\"\n\nDiana stared at her, eyes widening slowly. \"Come in, then,\" she said. \"I'm sure there's room for everyone.\"\n\nJavier and Selena followed her in, finding places to sit. \n\n\"You were the one in the costume,\" Diana said. It wasn't a question.\n\n\"Yes. Are your abilities recovered enough to tell you that?\"\n\n\"I've never met another who could hide like me,\" Diana said. \"But you're so young. Are you\u2014\"\n\n\"Why don't we talk about rescuing the children,\" said Selena.\n\nEsther understood. She'd allowed Diana a glimpse of her Changes, as much as Diana's senses could manage right now. Selena hadn't liked the idea at all, but Esther knew somehow that this was the right thing. \n\nDiana gave the full names and descriptions of the children, along with Peter and Aaron. \n\n\"It may be a while,\" Esther said, and then she closed her eyes, Looking deep into otherspace.\n\n* * *\n\nFor the first time Diana looked truly unsettled. \"Is she\u2014she's simply searching for them from here?\"\n\nJavier sighed and nodded. \"There is a fair chance she will find them this way. As you guessed, she is remarkably sensitive.\"\n\nDiana rubbed her head again. \"You wish to keep her existence secret, don't you. Even from the Chosen. It was not merely for the theater that she dressed in that fashion when she visited us.\"\n\n\"Surely you can understand why,\" Javier said, and Diana nodded. For a while she was silent.\n\n\"I lost my first two children in the womb. And then finally Samuel was born, with even more Blessings than I was.\"\n\n\"We have heard of rituals,\" Selena said carefully. \"In cases like his.\"\n\n\"Rituals,\" Diana spat. \"I know the reasons. I know that in older times he would not have been allowed to live at all. But I had to watch that bright, inquisitive baby turn slowly into a withdrawn, sad shell of what he was. It nearly killed me. Samuel grew into a fine man, but what he went through as a child\u2014it broke my bond partner. The love of my life couldn't bear it, and so he begged them to take his memories. He may still live in the outside, but he wouldn't remember me. And now this disgusting irony, that the elders are desperate for those with strength, like Nicola and Mark. And even me.\"\n\nShe looked up, suddenly uncomfortable. \"I should not be sharing any of this with you. It is the pain. It robs me of my concentration and my judgment. I cannot understand how Esther avoided it. At first we thought it was simply a response of the Way to our presumption, our greedy attempts to use the ancient place. But we heard the news reports, enough to believe it has affected all the Chosen. Did we misunderstand?\"\n\n\"No,\" Selena said. \"We all felt it. I'll leave it to Esther to explain, if she feels it appropriate.\"\n\nDiana nodded and closed her eyes. For a while Javier thought she'd fallen asleep.\n\n\"You are not what I expected,\" she finally said.\n\n* * *\n\nEsther opened her eyes and smiled as Javier passed her a glass of water and a granola bar. He'd become so good at judging the course of her meditations.\n\nDiana seemed to be asleep, but she opened her eyes shortly.\n\n\"I found all of them except Aaron,\" Esther said. \"Peter and the children are still in the car, perhaps six miles off highway 97 in the far north part of the state. The car is parked on the side of a forest road.\"\n\nDiana's expression changed quickly, from shocked to uncertain. And Esther realized the other woman hadn't truly believed she could find them. \n\n\"You could find them at such a distance,\" Diana said slowly. \"But not Aaron?\"\n\nEsther shook her head. \"How Blessed is he?\"\n\nDiana frowned. Likely this was a rude question, but she seemed to understand. \"Very little. But surely you would have seen him if he were nearby? Through the perception of the others, if nothing else?\"\n\nEsther paused. That was an interesting comment. She'd never fully unraveled why it was easier to see groups of Changed than individuals. Perhaps it was obvious from the way Diana sensed.\n\n\"Yes,\" Esther answered. \"I suspect he is not very close to them. I looked a great distance in every direction, but I saw no sign. But I've found a degree of randomness to this kind of search.\"\n\n\"Not randomness,\" Diana said with distaste. \"But rather our understanding is too unclear. Well, I see no better course than to go immediately to those you have found. No doubt they will know more, or perhaps one of us will sense him when we are closer.\"\n\n\"I am sorry to tell you this,\" said Esther, \"but the children are very upset. I do not sense anything like that from Peter, but the vision still seems to be hurting him badly.\"\n\nDiana looked slightly shocked, so perhaps emotional states were not something easy for her to tell at a distance. \"Peter was lost in his mind much of the time,\" she said, \"even before being struck with the vision. Singing is what he remembers. If the children have been left alone with him, they would have to take care of him. He must be returned to his family.\"\n\n* * *\n\nNicola found a reason not to go along.\n\n\"You need someone you can reach, back with the others in Reno,\" she told Esther. \"These cellular phones aren't reliable. With Mark, Javier, and Selena, you'll be able to handle anything unexpected.\"\n\nShe kissed Mark and got back into the smaller rental car for the hour's drive back to Reno.\n\n\"Don't trust Diana,\" she said finally. \"Or any of them. I don't think she would be lying to you, and I guess Selena would know. But their world is alien to ours. Don't forget it.\"\n\n\"We won't,\" Javier promised.\n\nBut then Esther insisted on joining Diana's car, alone. \"You'll be right there,\" she said. \"I think this is important. Diana will talk to me in ways she might not talk any of you.\"\n\nThey argued with her, but Esther held firm. And of course, she got her way. She'd just blown up at all of them for letting her do that, and here she was doing it again. But she was sure she was right on this. And she was sure Diana posed no risk to her, not now.\n\nDiana seemed surprised by her choice, but she accepted it easily enough. And after some minutes of silence, it became clear the older woman was used to long trips on her own.\n\n\"I'm sorry about the loss of your home,\" Esther said eventually. \n\n\"Thank you,\" Diana said with a sigh. \"They're calling it the Exodus. I think it's a poor name.\"\n\n\"Because you weren't enslaved in the ancient place,\" Esther said.\n\nDiana gave her a sharp look. \"You're right. It's an even worse name than I'd been thinking. Probably most of them don't even know where they're remembering it from. We don't read a lot of religious history in school.\"\n\n\"Diana,\" Esther said carefully. \"Do you understand why Nicola was so terrified of your community? Why she was so desperate to escape?\"\n\n\"She wasn't, though,\" Diana said quickly. \"She wanted to stay there. I could feel it. Everyone could. She would have been a wonderful member of the community. Someone finally with Blessings to help balance mine. And Jos\u00e9 seemed to be making friends as well, though I now think he was a better actor than I could have guessed. I was sorely hurt when you took them away.\"\n\n\"She didn't want to be taken,\" Esther said. \"She was terrified from the start. And she's still so upset by the experience that she doesn't want to be near you. It was only for the last day or so of her captivity that she truly wanted to stay with you. Doesn't that tell you something?\"\n\nDiana shook her head, and Esther knew it was time to drop the subject. \n\nSome time later, Diana broke the silence. \"Esther, you were not raised in Unity, were you? How was it you knew how to join with all of us, so immediately? It was jarring, without the preceding devotions. I did not even know it was possible.\"\n\nEsther paused. She didn't think it was a good idea to mention what she and Nicola had done sharing senses. \"I was not raised in Unity,\" she said. \"But I have a way of seeing that sometimes allows me to understand truths from a different perspective than most people. I had listened to your Unity devotions from afar, enough to guess how I could join all of you.\"\n\nDiana nodded. \"Now I am going to ask something important, and I ask for the truth, though I may dislike it. *Did* you actually join Unity? Were those true visions we saw, those strange scenes with Chosen and non-Chosen in harmony together?\"\n\nEsther struggled with how to answer. The truth, of course, but did she even know the truth?\n\n\"I don't know,\" she finally said. \"I observed Unity mostly from the outside, but not entirely. I was terrified of it, as I still don't entirely understand it. The visions you saw were from my own mind, and those of my companions. I felt tremendous guilt about subverting the central ritual of your community. Yet you must understand, they were not meant to be false visions. Far from it, as I believe they will come true, in some form. But that is merely a kind of faith.\"\n\nDiana let out her breath in a long sigh. \"A complicated answer, and I believe an honest one from your perspective. It's not something I will repeat to any in my community. There is great dispute about exactly what your visions meant, which is to be expected. We always see poorly, and only parts of the truth. Your words struck that day exactly as you intended. There is however no dispute from the others about whether the visions truly came from Unity. As far as I know, only I suspected.\"\n\n\"What made you suspect, then?\" Esther asked.\n\n\"When I enter Unity, I feel how easy it would be to draw the others in the direction of my own vision. And even when I believe myself most in harmony with Unity, there are hints at the edges, ideas that feel as if they are fragments of my own dreams. Yet I've never known if these truly originated inside myself, or perhaps if my Blessings allow me to experience a portion of Unity even outside devotions. There are no others I can discuss this with.\"\n\nEsther nodded. \"They would be horrified at the suggestion, and even less likely to want you within Unity.\"\n\n\"Exactly. But your vision vastly exceeds mine. Is it so difficult to imagine that you also are sensing Unity, even without devotions? It would explain why you were so quickly able to join with us. Those visions could well be of Unity, despite your perceptions.\"\n\nEsther considered that. It was a difficult problem. A theological one, perhaps, though Diana wouldn't view it that way. \n\n\"I'm afraid I have no answers,\" she said finally.\n\n\"I did not expect them,\" Diana said. \"But thank you nonetheless. In your own fashion I think you also seek harmony with the Way.\"\n\nAs they drove, Diana slowly started to talk about the visions, her doubts, her frustrations with the other elders. Maybe it was as she'd said before, the pain causing her to talk more than she was used to. But Esther suspected Diana was desperate to tell anyone about these things. Esther was an outsider, someone uncomfortable with the responsibilities her Changes had given her. In some ways she was more like Diana than any of her community. But then Diana would say something matter-of-factly, reminding Esther how different their worlds were.\n\n\"You really believe everything is foreordained?\" Esther asked at one point. \"What about free will? What about quantum mechanics?\"\n\nDiana had smiled slightly. \"Just because the Way is fixed doesn't mean humans can ever understand it,\" she said. \"I don't know anything about quantum mechanics, but one of the things the Way describes is the long, slow progress the Chosen make towards harmony. We make the best decisions we can to get there quickly, because that also is the Way. I know these are difficult concepts for you to understand, but you would, if you joined us. If you experienced Unity fully.\"\n\nEsther politely declined, of course. But the things Diana told her were unsettling. From her account, it was difficult to believe the Chosen were simply seeing visions of their own design, and then attempting to make them happen. There were too many details lurking in the visions Diana described. Diana's missions frequently relied on information she couldn't have known beforehand, and some of it seemed to require extrapolation of future events. Esther didn't believe Diana was delusional and making up stories after the fact, yet that seemed more plausible than believing Unity could do what Diana and the others believed.\n\nTheir two vehicles eventually stopped to refuel, and Selena filled a gasoline container, affixing it carefully atop the minivan. It was reasonable to assume Aaron had run out of gas. But Esther was beginning to have a bad feeling about the situation. What would he have done? Walked to the highway, presumably, looking for help. But then where was he now?\n\nThey were on highway 97 before Esther finally admitted what she'd begun to sense in otherspace.\n\n\"Diana,\" she said. \"I'm so sorry to tell you this, but I think Aaron is dead. There's a body hidden in the woods, not far off the forest road. A few miles back towards the highway from where the car is.\"\n\nDiana didn't say anything in reply. Some time later, Esther informed her when they reached the forest road, and then again when they reached the spot nearest the body. Wordlessly Diana stopped.\n\nThe other car pulled up behind, and Selena, Mark, and Javier emerged. Mark was already walking towards the woods.\n\n\"He says there's a body,\" Javier said. \"I'm sorry, Diana. I hope\u2014\"\n\nDiana shook her head and hastened after Mark into the woods. Esther walked more slowly, as she'd been certain for some time that it was Aaron's body. Dead long enough that the body was cool. \n\nThe body was partly covered with leaves and dirt, and when Diana reached it, she quickly uncovered the face. \n\n\"No,\" she muttered. \"Not Aaron. Why him, of all people? What could possibly bring this into harmony?\"\n\nShe walked away quickly, eventually collapsing to sit against a tree.\n\nEsther joined Mark, who was examining Aaron's body more carefully.",
        "\"His neck was broken,\" Mark said. \"By someone extremely strong, it seems. He died instantly.\"\n\n\"How strong?\" Esther asked.\n\nMark looked at her uncomfortably, then ran a hand through his hair, a rare nervous gesture.\n\n\"I could have done it,\" he said stiffly.\n\n\"And you never would have,\" Esther replied quickly. But her mind immediately fixed on another suspect: Janelle.\n\nJavier and Selena joined them, and she told them what they knew.\n\n\"Could Diana have done it?\" Javier whispered. \"If she had her abilities?\"\n\nEsther's stomach lurched. It seemed impossible, but of course they shouldn't rule her out. Mark squinted at Diana, who sat unmoving against her tree.\n\n\"Yes, I think,\" he said. \n\n\"But she didn't,\" said Selena. \"Or if she did, she had her memory erased so perfectly that I saw no hint of it. And then, it would have to have been before the vision was sent, surely? It's too complicated. No, another Changed did this. Janelle? What would be her motive?\"\n\n\"There must be other very strong individuals,\" said Javier. \"That assassin you sensed in Toronto?\"\n\nEsther nodded slowly. \"I don't think that was Janelle. I would have recognized her, and this person was difficult to sense. We suspected the motive was either an abduction that failed, or simply silencing a powerful Changed who was making herself too visible. All guesswork.\"\n\nThey quieted as Diana got up and walked to join them.\n\n\"No one with the slightest understanding of the Way did this. I certainly didn't, and the idea is repugnant. But you already know of attacks like this?\"\n\nThey looked at each other nervously. Even now Diana's senses were obviously keener than they'd realized.\n\n\"Yes,\" Esther said. \"But not much. We were hoping to talk to you about this.\"\n\nDiana shook her head and silently walked back towards her car. Esther hurried after her.\n\n\"Of course we must see to the ones ahead,\" she said. \"But what of Aaron's body?\"\n\n\"It is not Aaron,\" said Diana. \"I know others have customs, but our memorials will not involve his former body. You may leave it, or do with it what you think appropriate.\"\n\nEsther nodded, waiting outside the car. \"The children are no worse than before. Tired and upset. They have had sufficient food and drink from supplies in the car, and they have fed Peter as well. I assume you'd prefer to meet them alone. We will follow and wait out of sight.\"\n\nDiana nodded numbly, and started the car. Before she moved on, she looked straight at Esther.\n\n\"Tell me the truth. You knew where to find them, even the body. And your group has very strong individuals, ones apparently unaffected by the vision. Tell me you had nothing to do with it.\"\n\n\"We had nothing to do with it,\" Esther said. \"I swear that on everything I believe.\"\n\nDiana nodded sadly, then drove onward.\n\nEsther joined the others in the minivan, instructing them where to stop on the road. She watched the children's uncertain reunion with Diana, whom they obviously respected more than loved. But shortly they were all hugging her fiercely, clinging to their unexpected savior.\n\nDiana did not tell them about Aaron. But she did tell them she'd had help finding them, from the owl-headed visionary. The children's eyes went wide. They obviously knew of the confrontation in the ancient place, though Esther remembered their guardians keeping them well out of sight at the time.\n\nEventually Diana turned and beckoned, knowing Esther would see her from around the turn. \n\n\"You should stay hidden,\" Javier said. \"Diana may know of your identity, and I suppose you trust her. But you can't possibly trust that entire community.\"\n\nEsther sighed, getting into the back seat to lie down. Javier pulled the minivan forward into sight, stopping well short of the other car. He walked ahead while Selena worked to get the gas container off the roof.\n\nOne of the younger children recognized Javier, giving him a confused stare. Javier asked if they'd been practicing their soccer drills, and soon had the boy distracted and smiling. Javier was so good with children. He'd never brought it up with Esther, but surely he wanted to have some of his own. Didn't most people? Another deep sacrifice he'd would be making, to stay with her. She pushed away those thoughts and slipped into otherspace, feeling for Peter.\n\nHe was in agony. All he wanted was to walk into the water and feel it soothe his skin, to feel surrounded by familiar hands and faces and bodies even if their names were slipping away.\n\n\"Mark,\" she said. \"Could you go ask Diana if I may try to relieve Peter's pain?\"\n\nA short time later Diana returned with Mark.\n\n\"If you can help him,\" the older woman said, \"I will forever be in your debt, even more than I already am. Peter deserves as comfortable a life as we can give him.\"\n\n\"I will need to touch him,\" Esther said. \"What I do may be somewhat like Unity. It is rather intimate, and I don't know if it's appropriate. I also don't know if it will work.\"\n\nDiana nodded. \"It doesn't matter. I trust your instincts in this, and I'll take the blame if anyone is stupid enough to think harmony requires Peter in pain. We'll bring him to you.\"\n\nPeter was small, hunched, and physically frail, and he did not seem aware of the world. Still, he was able to walk to the van with Javier and Diana's support. He moaned when they laid him on the seat, and Javier helped Esther remove his shirt while Diana went back to the children.\n\nEsther didn't like doing this for someone who didn't know her, but she understood that Peter would appreciate the gentle touch if nothing else. Crouching nervously on the floor, she pulled off her shirt and encircled Peter's bony chest, feeling his short fur tickle against her skin.\n\nIt was easier than she expected. Peter was living in a world of senses, all of them overwhelmed by the fiery vision. Once she showed him a vision of cool water, he followed her with joy, weaving after her among the strands of the vision, until finally the last connection faded.\n\nTears flowed down his cheeks as he gazed at Esther. \n\n\"My child,\" he whispered. \"Is it finally time to sing?\"\n\n\"Yes,\" she said. \"Yes, Peter, it is.\"\n\n* * *\n\nEsther glanced ahead. Peter was singing in the car, and the children had joined him with gusto, laughing when he waved his arms as though conducting them.\n\n\"You've given Peter his life back,\" Diana said, blinking away a tear as she watched him. \"You have brought us closer to harmony, after Aaron.\"\n\n\"Peter would have recovered in time, I expect,\" said Esther. \"The vision seems to be fading more quickly now.\"\n\n\"I suppose,\" Diana said with a squint, no doubt considering the immense pain she still felt. \"But I fear Peter has limited time left for joy. And you've given him that extra time.\"\n\n\"You know I could do this for you as well,\" said Esther. \"The others do not want me to, but it is my decision.\"\n\nDiana looked at her. \"Yes, I suppose it is. But it is also mine, and I choose to endure.\"\n\n\"It's not a punishment,\" said Esther. \"How could it be? It was far too indiscriminate for that. I believe it was one powerful person's blunt attempt to stop a catastrophe.\"\n\n\"I find that more plausible than I would have before meeting you,\" Diana said. \"And I certainly agree it was not meant to render balance for every one of us. But it's as I said. It stopped me before I caused a much greater harm than I did. Whether it was a person or an aspect of Unity hardly matters, as it was surely meant for me. And so I have no choice but to welcome it.\"\n\nEsther nodded. \"Be careful. I don't understand the murderer's motives, and so your community may be in danger. You have a phone number you can reach us at.\"\n\n\"And I haven't forgotten your request for more information,\" Diana said. \"Should you wish to meet again, there is a dirt parking area off the highway a mile south of the intersection for the farm. I'll know if someone is there, and come out to meet them. I can draw a map for you.\"\n\n\"No,\" Esther said. \"I know where it is.\"\n\n* * *\n\nThey buried Aaron's body as best they could, under leaves and shallow dirt. Esther recited a few prayers that Javier supposed she'd heard too often. Both of her parents gone, and now she was mourning for a man she didn't know. The casual cruelty of the murder sickened Javier. Surely even Janelle wouldn't have done something like this, would she? Maybe she was willing to kill, but he imagined it would be with a gleeful anger, in the course of a fight. Or maybe against someone whom she thought richly deserved it. Not a harmless man, one with Changes. Mark said there was no sign he'd fought, and perhaps he hadn't even seen it coming.\n\nSelena volunteered to drive, so he cuddled with Esther in back while she repeated what Diana had told her. There was a lot to digest, but Javier was hung up on the murder.\n\n\"They said they've been here three days,\" he said. \"Since before you had your senses back. Aaron dithered for a few hours before leaving, and when he did he told the children under no circumstances to leave the car, except to go to the bathroom. He said he'd be gone a while, but they assumed that meant most of a day. Genevieve, the oldest, said she'd guessed it would take hours just to walk to the road and back.\"\n\n\"I asked Diana what she thinks would have happened if he'd managed to flag someone down on the highway,\" said Esther. \"She thought he might have handled it all right. He would have come across as bizarre and maybe not very bright, but he had enough cash with him to fill a container of gasoline, if someone was willing to help him out with the whole process. And I think someone would have been, eventually.\"\n\nJavier smiled. Esther always thought the best of people. But he had to agree.\n\nEsther continued. \"On the other hand, Diana said he could get flustered easily, and he might have been incoherent enough to make a scene somehow. But she couldn't see why someone would kill him for it.\"\n\n\"And the murder couldn't have been random,\" said Javier. \"Mark said it must have been someone with immense strength. There aren't very many of them to begin with. Somehow this person found him in the middle of nowhere, and somehow they had their abilities back already, sooner even than you did.\"\n\n\"The last one concerns me the most,\" said Esther. \"It would explain the second coincidence. Someone able to counteract the vision as I did might also be sensitive enough to find Aaron at a distance. But it doesn't explain why they would commit such a horrible crime. None of it makes sense.\"\n\n\"I have an idea,\" Selena said from the front seat. \"What if this murderer suspected Aaron would blunder into a dumb situation? He might have been picked up by police, and then things would have escalated. No driver's license, an abandoned car with a bunch of confused kids who didn't belong to him, an elderly person who needed care. I don't think this group would have preserved the Chosen's secrets very long. Then the government would have found the Oregon group, and who knows where that would have led them. Some Changed might have found that intolerable.\"\n\nJavier shook his head. \"OK, maybe Aaron was heading towards a big mess. So you're saying a Changed did this, to prevent secrets from being exposed? There are a zillion other ways the murderer could have accomplished that. He could have gotten them some fucking gasoline and sent them on their way. And how would he have even known where to look for Aaron? Or anything about this situation, and what might have happened?\"\n\n\"Unity,\" said Selena.\n\nThere was a long silence. Javier found he'd made fists of his hands, so tightly he was cutting into his palms with his fingernails. He tried to breathe carefully and relax.\n\nJavier didn't really believe in the predictive power of Unity. But that wasn't quite right. He didn't want to think about it at all, because it was too horrible to take seriously. No free will? Esther being placed with her parents because of destiny, rather than a convoluted set of coincidences?\n\nBut this time, it wouldn't have taken much prediction. He and Selena had just predicted an unpleasant scenario themselves, based only on what little they knew. And someone with Esther's skills could have gathered knowledge of a situation like this, as it developed. Even if the murderer had been some distance away, they might have had time to get there and commit the crime. \n\nAnd then Unity could supply all the motive necessary. Diana had insisted she hadn't understood the likely results had she completed her Black Christmas actions. In Unity she'd seen a particular way to sabotage the gas plant. And though there had the usual discussion among Elders, they'd been willing to go through with it, expecting only that it would cause a power outage.\n\n\"I don't like it,\" Esther finally said. \"But that's the best guess so far. Unity, perhaps a version of it among a particularly ruthless group. Once they're willing to murder for their cause, maybe they'd stop questioning whether it's the only way to accomplish something.\"\n\n\"Or maybe there's just a single psychotic Changed person,\" Javier said. \"With a good fraction of both Mark's strength and Esther's powers. No real motive, just tragic coincidence.\"\n\n\"I hope that version is right,\" said Selena. \"It's a shitload less scary, isn't it?\"\n\n* * *\n\nEsther and Selena stood with the lawyer in a small room, waiting for the employee of the Reno bank to return with the safe deposit box. It was a week since the Black Christmas attacks, two days before the new year began. Business was resuming, at least where the power was on.\n\nShe should have taken care of all of this sooner. After Abuela's death she'd barely been interested in the complicated fortune Abuela had left to her, except for the simplest practicalities. But now she had Jacob's suspicions about other properties Abuela might have owned. Most of the assets were in a byzantine web of trusts and shell corporations, and after hearing that Lukas had nonetheless unraveled her secrets, Esther had called the lawyer and told him to do an even more thorough job of it.\n\nThe lawyer's name was Jerome Turman, and Abuela had said she trusted him with everything. He had very slight Changes, and perhaps that was enough to explain how he'd come to Abuela's attention. He hadn't even batted an eyelash when Esther had suggested hypothetically she might have another set of identity papers, and he'd given her several options for this alter ego to use her assets. But even Mr. Turman didn't know what was in the deposit box. It had last been handled by his predecessor, forty years ago.\n\nIt was like a treasure chest, and though Esther generally considered herself brutally practical when it came to money, she felt her heart race as she opened it.\n\nInside were some odds and ends that didn't mean much to her, along with a few old coins. But her eyes were on the few folded documents Mr. Turman carefully extracted.\n\n\"Property deeds,\" he said, smiling slightly. \"Held by the trust. No reason they shouldn't still be valid, though it's possible you owe a boatload of back taxes. Don't worry, I'll take care of all of that.\"\n\n\"There,\" Esther said, scanning quickly through the pages. \"I think we'll want to visit that one.\"\n\n* * *\n\nNicola had complained about the rental truck from the moment they left the highway near Quincy. \"The suspension is shit,\" she said just as the slammed through a pothole. \"See?\"\n\nJavier rubbed his head where it'd banged into the door. He suspected the suspension would've been fine if not for Nicola's driving.\n\nThis place was barely forty miles from their previous camp, if you were a bird. High forested ridges and plunging river valleys separated the two sites, but everything looked strangely familiar to Javier. \n\nThe last mile and a half wasn't a road at all. Maybe it had been, once, but it would need chainsaws and a bulldozer to get there again. They got out to walk on the frozen dirt.\n\nEsther would already know what awaited them, but she was leaving it a surprise to everyone else. And Mark kept his mouth shut as well. When they finally arrived, it wasn't what Javier expected.\n\nIt was an old, run-down structure, nestled under a dense cluster of pines. More like a house than the cabins he was expecting. Two stories, with the usual steep-sloped corrugated metal roof to help it shed snow. But a tree had fallen sideways against the house, the roof was heavily rusted, and one of the windows was broken. The exposed wooden porch had rotted and fallen in on itself.\n\n\"Well,\" Nicola said with a sigh. \"It'll need work.\" \n\nBut Javier could see how pleased she was, and Mark as well. Those two had truly lost their home, at least until they were convinced everything had blown over. No one knew when or if that would happen. This place was closer than they could have hoped to what they'd left behind.\n\n* * *\n\nEsther lay on her camp mat, eyes looking through the ceiling, through the blue sky, through the great globular cluster in Hercules, towards infinity. \n\nThe fixed stars were the absolute frame of reference, an anchor for a woman lying on a spinning planet, revolving around a star, in a rotating galaxy. Einstein and others had wondered if the very existence of these distant stars and galaxies determined that absolute, un-rotating frame, via an average of their motions. Could a woman floating in an empty universe know whether she was spinning at all? Could empty space itself known whether it was spinning? Even Einstein hadn't solved the question to his satisfaction.\n\nOtherspace was not physical space, and in fact spacetime itself was scaffolded upon otherspace's immensely convoluted structure. Aside from black holes, spacetime was remarkably flat in the ordinary four dimensions. And yet in other dimensions it was curved and folded more intricately than anyone could conceive. But Esther was trying. And with every leap she ventured farther. Her mind touched far and wide, exploring for patterns. Looking for new ways of seeing, as much as new information.\n\nVibrations echoed through the mantle of the Earth itself, ancient patterns mixing with the groans and slips of the unquiet crust. There was something going on at the Oregon farm, but it was not dangerous. Winds carried molecules common and rare, some combinations so specific they could identify a single person. Mark was seven miles to the northeast, sitting by a stream, and that bundle of pheromones had been released twenty-six minutes ago. There was a quiet buzzing, perhaps the vast background connections the Chosen believed Unity relied upon. The collective unconscious, Grace had called it with a smile.\n\nBut then it was gone. Esther sighed and sat up, thinking immediately of food. It had been a productive, exhausting morning again. She selected a soda bottle and some snacks from the drawer, and then sat on the creaking chair at the kitchen table. Javier, Nicola, Esther, and Grace were coming, and she wanted to watch this.\n\nNicola drove up in the first ATV, with Javier crouched behind her. He was wearing a helmet. She wasn't.\n\nA half minute later, the second vehicle arrived, with Grace driving. With helmets off, everyone looked happy, apart maybe from Javier, who looked a little sick from Nicola's driving. \n\n\"Welcome to the Creepy Mountain Shack,\" Javier said as he showed Grace and Kat inside. \"We guarantee you will wake up with ghosts whispering in your ears and spiders crawling in your\u2014uh, never mind.\"\n\n\"It's not nearly as big a dump as you claimed,\" said Grace. \"I'm disappointed. And, Jesus Christ, I have to pee.\"\n\n\"Outhouse,\" Nicola said, pointing towards the back. \"I broke open the old door and cleared it out a bit last night. Looked fine, didn't even smell. I don't think it's been used in fifty years.\"\n\nGrace was already hurrying to the back.\n\n\"Make sure you claim it for the women,\" yelled Kat. \"That's how it works. Mark your territory, love!\"",
        "This place was hardly fit to inhabit, but they couldn't impose on Jacob another day. With tempers rising, Selena had disappeared to reclaim her plane and check on a few things back in Los Angeles. Then Raj had gone as well, to stay with his sister in Atlanta for a while.\n\n\"What if the FBI finds you?\" Esther had asked. \n\nRaj had shaken his head in reply. \"Then they find me, and I'll tell them I used to be close to Lukas, as they no doubt already know. Then I'll say he's a totally different person now, and I don't know him at all, which is also true. Anything else and I'll just act ignorant. It'll be fine, Esther, and I'll be back. I'm still thinking about that clever line of research you suggested.\"\n\nNow Javier showed Kat around what he insisted on calling the Shack. There wasn't much to see. They'd cleared out some mouldering furniture on the ground floor, leaving behind a somewhat cavernous living room, a kitchen where nothing worked, and two cramped bedrooms. Also a bathroom with sink, clawfoot tub, and no running water.\n\nThe upstairs had more bedrooms, but the others only knew about it from Esther and Nicola's descriptions. Nicola had bought a ladder on their way in yesterday and gotten a tarp over the broken window, but years of water damage had rotted the wooden staircase in that corner, along with a section of the second floor support beams. No one would be going up there for a while. To everyone's surprise, Nicola judged the Shack otherwise structurally sound, aside from a few rotten exterior logs that they could replace given time.\n\nKat sighed. \"I suppose we get last pick for sleeping spot.\"\n\n\"We left open the living room,\" said Javier. \"Less privacy, but that's where the wood stove will be, when we replace the old one. The bedrooms only had these ancient jury-rigged gas heaters, and Nicola dragged them out to bury where no one can find them.\"\n\n\"Well, you chose the right spot for us,\" Kat said with resignation. She turned as Grace climbed the cinder block steps up to the door. \"Look, sweetie! Our romantic vacation after all! How was the bathroom experience?\"\n\nGrace gave her a kiss. \"It needs toilet paper,\" she said. \"But it was a hole. It functioned. Except somehow the seat was even colder than the one at the other camp.\"\n\n\"Poor Grace,\" Kat said. \"That's when you hover, sweetie.\"\n\n\"And that's why I make you clean, dear.\" Grace tweaked her nose. \"So, we've got another try at our romantic getaway. Definitely more romantic than camping in your apartment, all while worrying about the FBI. They said easily a couple more weeks before power's restored. Probably no running water there yet either.\"\n\n\"We're good,\" Kat said. \"I'm a big fan of camping now. I hadn't really thought about how much sex we could have when there's nothing else to do.\"\n\nGrace kissed her. \"We're going to put in our work, too. Let's help unload the ATVs and go get the rest of the stuff.\"\n\nEsther smiled as they left. \"They're in better spirits.\"\n\n\"They were practically mauling each other in the back seat on the way here,\" said Javier. \"Even Nicola was rolling her eyes a little, though I can't say it bothered me. How are things in otherspace?\"\n\n\"Calmer,\" Esther said. \"The vision is fading fast now. This is a good place, Javier. I had a very productive evening, and morning too. And I missed you. I agree with Kat. We should have a lot of sex here.\"\n\nJavier laughed, picking her up easily and whirling as he kissed her. \"Well, no argument from me. But I should at least see what Nicola wants help with.\"\n\n* * *\n\nNicola handed him the chainsaw. \"Nothing bigger than five inches. And still do the three cuts, the way I showed you. Don't rush. I'll start down at the bottom and get the bigger ones on my way up.\"\n\nIt was a better way to spend the afternoon than he'd expected. Nicola's new truck was improved in most ways over the old one, but it still couldn't drive through trees. She'd hated to get rid of the old one, after all the work she'd put in. Javier had paid the casino parking fee like a good citizen, and then left it in a carefully chosen neighborhood in Reno, window half open and keys on the seat. Esther reported it gone by the morning, and already displaying another set of plates.\n\nBy dinner he was exhausted, and there were stumps littering the road. Mark had come down to help move aside the remaining tree sections, and Nicola judged it safe enough to drive. She got the truck parked below the Shack by the time they ate their cold dinner by candlelight. Things would quickly get more civilized now that they had access sorted out.\n\n\"You sure we can't fire up the old stove tonight?\" Kat said. \"Plenty of wood, after all.\"\n\n\"Chimney needs clearing,\" said Nicola. \"If you didn't start a big fire you'd just kill us with smoke and carbon monoxide. And the freshly cut wood's no good yet. We'll need to haul wood up for a while, or at least start with that broken furniture.\" \n\n\"At least we'd die warm,\" said Kat. \n\nBut Javier knew she was happier than she let on. She was already talking about how to get Internet up there.\n\n\"We've got to get the well working,\" Javier said when he collapsed on his sleeping bag next to Esther. \"I'm utterly filthy and probably stink.\"\n\n\"You smell fine,\" Esther said, giving him a kiss. \"I feel guilty, sitting in here all day while the rest of you do the manual labor.\"\n\n\"This is what you need,\" said Javier. \"Time to do the work you've wanted to. It's more important than anything else.\"\n\nEsther nodded reluctantly. \"But I can't do it all day,\" she said. \"I don't have the stamina, and I'm kind of glad. Because it means I don't feel guilty doing other things.\"\n\n\"Physical exercise is important,\" Javier said, slipping his hand under her pajamas, stroking her chest.\n\n\"Very,\" Esther agreed. \"I've been meaning to get more. And I'm so horny from listening to Mark and Nicola for the last twenty minutes.\"\n\n\"Oh,\" Javier said. \"I thought it was the other pair.\"\n\n\"Them too,\" said Esther, rolling on top of him. And soon his tongue was too busy to talk.\n\n* * *\n\nJavier watched the slow rise and fall of Esther's chest, her body partly exposed despite the chill. She liked being cold near bedtime, she'd told him. Made it less likely she'd fall asleep in the middle of something.\n\nHe thought again about the message that Kat had copied that afternoon, when she checked e-mail at Jacob's place. Javier had suggested contacting Myra Jackson with a single question: \"Why?\". And Jackson had replied.\n\n Dear Javier and Selena, \n\nI am sorry about Mark. I won't insult your intelligence by pretending I didn't know what was coming. In truth, the task force would have taken you in your homes had I not intervened. But Mark was their priority, not Lukas. And they would have found Mark eventually, have no doubt. Surely you understand that someone as dangerous as Mark will be watched and questioned closely, given the emergency. If he had no knowledge of the attacks, I expect he will be released in time, unless the political winds change dramatically. \n\nI held some hope that the rest of you would escape, and it appears you did. I still believe your group more useful outside of custody, and indeed the rest of you are now low priority for the FBI. My position in these policy decisions was peripheral, but as a result of my advice, I have gained influence. This is no comfort to you, of course, but I was also not lying about my patriotism. I have already succeeded in moderating policy about the Changed. Our best chance remains finding those individuals responsible for coordinating and carrying out the attacks, as fast as possible. You have little reason to trust me, but I still believe you want the same thing. I will take seriously any information you provide. \n\nJackson admitted she'd sacrificed Mark for her own bureaucratic maneuvering. That sounded utterly plausible. But they weren't about to trust anything she said, including the idea they were low-priority targets now. They were done with Myra Jackson, and at least they had the satisfaction of knowing that even she believed the story about Mark being taken. Unless she was playing along for reasons they couldn't understand. It hurt Javier's head to think too much along those lines, so he focused on Esther again. She'd been exploring otherspace quite a while, but lately she didn't seem to have worries about finding her way back. It still unnerved him.\n\nTheir new queen bed was comfortable, but it was a frigid night, and the window was still drafty. Still, Javier felt cozy enough as he watched the quick twitches of her mouth, the faintest signs that she was still exploring deep in otherspace. She had her bra on, but he imagined taking her right nipple in his mouth, the more sensitive one. Sucking on it, gently enough not to disturb her, but still something she could dimly sense back in her body. \n\nShe'd warned him she'd be gone a long time. But he'd still been hopeful, and the muffled sounds from Nicola were mixing with his drowsiness. He was horny as hell. He'd had that horrible headache after getting dehydrated yesterday, and then the day before Esther had been too exhausted. He'd had hopes, but earlier this evening the last of the flaming vision had abruptly disappeared, and she'd known she had to stretch out to listen.\n\nNicola eventually quieted down, and still he watched Esther. When she finally opened her eyes, the half moon had slid into view, lighting a swath of the wall.\n\n\"My beautiful explorer,\" he whispered. \"What news from the world?\"\n\nShe smiled and stroked his cheek. \"I can't find the one who sent the vision. But I'm pretty sure I found where it was sent from. An ancient place, on a remote island of Japan. And I heard so much more. My sensitivity has grown, Javier. With the noise of the vision still distracting me, I hadn't realized. I visited more people and places than ever. I even heard people in England. It's as we feared, or worse. Their government has imprisoned whole groups of Changed, even families. And there's so much more to sort through, just in this country. I have to try to make sense of it.\"\n\nJavier retrieved her pencil and sketchpad, and she gratefully took it, drawing precise lines and curves without looking. It was her old memory aid, still useful when she absorbed information too quickly. Ten minutes later, the lines had combined into a dense, unsettling knot, and Esther sighed, turning to put the pad away. She stroked his back, fingers warm under his pajamas.\n\n\"You're pretty horny, aren't you?\" she said. \"Want me to help you out?\"\n\n\"It's OK,\" Javier said, but her hand was already slipping down to his ass. And then her other hand found his half-erect cock.\n\n\"I love you,\" he whispered, kissing her, and her hand had him erect, her touch light and practiced.\n\nBut a few minutes later she stopped, and he realized she'd fallen asleep. He felt guilty. He should have made her eat something first, after such an intense use of her abilities. She'd sleep well enough, but she'd be starving when she woke up in the morning.\n\nHe shifted her hands carefully, rolling to lie on his back. It was late, but he wasn't particularly sleepy, and he started rubbing his dick gently. The bed frame was wiggly, though. They'd probably been in too big a hurry to put it together. Masturbating enough to give him satisfaction would probably wake Esther. Anyway, he had to piss.\n\nHe slipped out of bed carefully, squeezing around towards the door. They'd insisted Nicola and Mark take the bigger room. Their own room hardly had space for anything apart from the bed.\n\nThe floor squeaked, but he didn't hear any sound from Kat and Grace as he got his shoes on by the door. They must be freezing in here. He hadn't realized how much colder the large living room was. To everyone's annoyance, the new wood stove hadn't been ready when they went to pick it up yesterday. But at least Kat and Grace were off the floor now, snug in their own small bed.\n\nThe outhouse was frigid. But when he finished peeing, it still seemed like the best place to relieve his lingering horniness. They'd replaced the pump and gotten the water running yesterday, to everyone's relief. But there was no water heater yet, and no reason to loiter in the indoor bathroom aside from the all-too-obvious. Outhouse it was.\n\nIt took a while, but he finally started to get into it, deep in a fantasy about Nicola. Burying his cock between her fat pussy lips, while she vibrated with pleasure, her skin steaming in the warm sunlight\u2014\n\nThe door rattled, and he almost fell off the seat.\n\n\"Oh! Sorry,\" Grace said nervously.\n\n\"Out in a sec,\" Javier said, hurriedly pulling his pants on.\n\n\"Take your time,\" Grace said. \"I'll come back.\"\n\n\"Kind of cold for that,\" he joked weakly. He opened the door, and Grace smiled, scooting in after him.\n\nJavier had the weird urge to stand there and listen. He quashed that and hurried back to the Shack. Compared to the bright moonlight outside, it was practically impossible to see once he got in.\n\n\"That was record time,\" said Kat softly. \"Get in before my pussy freezes. I've been keeping my hands warm, at least.\"\n\n\"Hey, Kat,\" said Javier. \n\nKat snorted loudly. \"Well, you can get in too. I'm not particular right now. Jeez, at least come sit for a sec. I hardly even talked to you today.\"\n\nHe sat at the foot of their bed. Barely a double, but they hadn't complained. \"Miss me?\" he joked.\n\n\"Well, I could use a cock. My biggest toy is out of order. Is it as cold in your room as here?\"\n\nJavier tried to ignore Kat's usual banter. \"No, it's a little better. I feel bad leaving you guys out here. We thought the heat would be working by now.\"\n\nThe door opened and closed quickly, and Grace hurried over.\n\n\"Did you remember to hover?\" Kat said.\n\n\"No, Javier warmed the seat for me,\" she whispered, giggling slightly. Then she noticed him sitting there. \"Oh. Uh, hi Javier.\"\n\n\"Good night, guys,\" he said, standing up. \"Sorry about the cold. I'd invite you in our room\u2014\"\n\n\"Oh, God, thank you,\" said Kat, swinging her legs out from under the covers.\n\n\"Kat!\"\n\n\"C'mon, Grace,\" she said, giving her partner a kiss. \"It'll be warm. And Javier, what would Esther say tomorrow if I told her how freezing we are, and how mean her boyfriend was not to invite us the way she would have? Because you know she would.\"\n\nJavier shook his head. He'd been outmaneuvered.\n\n\"She's exhausted,\" he said. \"She needs her sleep.\"\n\n\"And she'll get it,\" Kat said. \"Probably sleep better for the extra warmth. That's all, Javier. I promise Grace and I aren't going to have wild lesbian sex, unless you want us to. Uh, and Grace is up for it.\"\n\n\"I can't believe you, sweetie,\" said Grace, shaking her head. \"Every time I think\u2014\"\n\n\"OK,\" Javier said. \"If you want. But I'm getting in bed now. Next to Esther. And if you guys try to hog the bed I promise I will win that battle.\"\n\nHe walked back to his room, wondering what he was thinking. But when he slipped under the covers, he found Esther had rolled to the edge of the bed.\n\n\"Thanks for inviting them,\" she muttered sleepily. \"It'll be cozy. Kat's right. I'm already asleep again.\"\n\n\"No you're not,\" he said, kissing her, and she sighed happily, turning her back to rub gently against his dick.\n\n\"Tomorrow,\" she mumbled. \"I promise.\"\n\nTo Javier's surprise, the other women came in a few seconds later. He was sure Grace would've talked sense into Kat. Maybe they really were freezing in there. Kat slipped in, bumping against him lightly. \n\n\"Sorry,\" whispered Grace. \n\nOh. He'd just assumed it would be Kat. Kat and Javier had slept together plenty of times, after all. Semi-platonically. Before she met Grace.\n\nHis dick was hardening uncomfortably, and Esther's little sighs and rubbing with her back weren't helping a bit. Luckily she seemed to be falling asleep quickly.\n\nGrace wriggled around a bit as Kat got in. Facing away from him, of course. In the end her butt rested lightly against his.\n\n\"Enough room?\" she whispered.\n\n\"No,\" said Kat's muffled voice.\n\n\"I meant Javier.\"\n\n\"I'm fine,\" he said. There was more wriggling, and in the end there was rather more of Grace touching him than he expected. She was warm, and of course Esther was even warmer. He was starting to wonder why he'd been so nervous about this.\n\n\"Goodnight, John-boy,\" Kat said, and Grace giggled. Her butt shook slightly when she did that. \n\n\"Thank you so much,\" Grace finally said. \"This is heavenly. Good night, everyone.\"\n\n* * *\n\nJavier shifted slightly, trying to figure out why Esther was on the wrong side of the bed. Her arm felt heavy on his side, and something was\u2014\n\nOh. Grace had rolled and put her arm over him. Esther was still there, and he had an arm over her, but he'd shifted back slightly towards Grace. She was really squeezed tight against him. He was suddenly very aware of her breasts, pressed hard against his back. No doubt bare under her pajama tops.\n\nKat was snoring softly, and Grace was surely asleep as well. But Esther moved a bit, and then her hand found his half-hard cock.\n\nHe stiffened, shaking his head ever so slightly.\n\n Just a little,  Esther said in his head. She sounded sleepy, even while sending her voice this way. But at such a short distance, it was clear enough.  They're asleep, sweetie. \n\nHe was fully erect now, his excitement growing. It was more than his frustration from earlier, more even than having Grace holding him like this. He was excited because this reminded him of how Nicola had talked to him, during those desperate nights of pleasure. Normally Esther never bothered hiding her voice like this, since she could mask sounds well enough from eavesdroppers. But Grace was right there.\n\nEsther took his hand, and he let her slip it under her pajamas. She was slightly moist, and he began circling her opening with his fingertips.\n\n Falling asleep again,  Esther said in his head after a time.  But this is really nice. Sweet dreams, love. \n\nHe drifted into half-sleep, shifting slightly against Esther's warm hand. He sleepily wondered if Grace had ever touched a cock. He was pretty sure the answer was no. This was already closer to her than he'd ever really expected to be. It was like one of his forbidden fantasies: Grace and Esther, sandwiched around him.\n\nGrace twitched slightly, and she shifted her hand lower, right onto Esther's forearm. Esther didn't react, but Grace was squirming more now.\n\n\"Sweetie,\" she mumbled, burying her head against his back. But then she took a quick breath, awkwardly pulling her arm back, shifting her breasts away from him.\n\n\"Javier?\" she said, so quietly that he almost couldn't hear.\n\n\"It's OK,\" he whispered sleepily. She froze, and he suddenly realized he should have pretended to be asleep.\n\n\"Sorry,\" she muttered, turning over carefully. Kat grunted but resumed snoring. And Javier gently pulled Esther's hand off of his slowly softening dick. Tomorrow, she'd said. Well, he'd better get to sleep then.\n\n* * *\n\n\"Kat,\" he heard. \"Get up, you beautiful oaf.\"\n\nHe opened his eyes. It was morning, and Esther was gone, awake early as she often was. He'd shifted into her space in the meantime.\n\n\"I was having the nicest dream,\" Kat said. \"You and me, and Esther and Javier. Just sleeping. It was so nice. Why don't we keep doing that.\"\n\nGrace started to laugh. \"Get out or I'll push you.\"\n\n\"Fine, fine,\" Kat said, rolling sideways. She stretched, showing a some considerable cleavage where her pajama top was unbuttoned. Then she found her slippers and hopped up with surprising speed. Javier suspected she'd been awake a while already.\n\nBy the time he'd sat up, Kat was out, closing the door behind her.\n\n\"Hey,\" Grace said. \"Good morning. And thanks so much. Honestly, I slept a lot better than I did last night. I hope we get that stove set up soon.\"",
        "\"Well, I think you're welcome again,\" said Javier. \"I slept great, too.\"\n\nGrace sighed, sitting up. She was quite properly buttoned. But he could imagine.\n\n\"I usually sleep on the other side of Kat,\" she said, looking embarrassed.\n\n\"It was fine,\" Javier said. \"I mean, I didn't mind. There was hardly any space anyway.\"\n\n\"Yeah,\" Grace agreed. \"Well, if we do this again, I won't let Kat bully me into being in the middle.\"\n\n\"Or we could stick Esther in the middle,\" agreed Javier.\n\n\"Yeah,\" Grace said, not quite looking at him. \"Sure. Well, I guess I'll leave you your own room then.\"\n\n* * *\n\nNicola was in a foul mood that morning. Probably it was the whole situation the other day with the wood stove. Nicola mostly trusted Grace and Kat now with the daily shopping trip, though she sent them with painstaking instructions. But she felt the need to take over for anything large or complicated. And when she was deep in a project, she hated feeling like she was wasting her time. \n\nOver breakfast, Esther finished summarizing what she'd discovered during yesterday's explorations of otherspace. \n\n\"Nicola and Mark,\" Esther said carefully. \"I think we should pick up some of our work from the summer. We need to get you more resistant to compulsion. There are some very dangerous Changed out there.\"\n\nMark nodded seriously, but Nicola shook her head. \"I don't know what the point is. I barely made any progress before. And today I need to go check on the stove again, except they probably won't have it anyway.\"\n\nMark stared at Nicola in surprise. \"You need to do this. Esther's right. I'm not good at it, either, but that just means we have to work harder.\"\n\n\"I can go help with the stove, if you think that would help,\" said Javier. Esther nodded. For whatever reason, Nicola trusted him more than Grace and Kat in this sort of thing. And sure enough, Nicola gave in.\n\n\"Fine,\" she said. \"Let's work on it, then. After I get the concrete poured for the generator platform. And Javier, if they actually have the stove, you make damn sure to help secure it properly, and don't you dare drive that truck over all those stumps with it. I'll come down to help.\"\n\n\"Sure,\" Javier said. \"Why don't you go over your list with the three of us, and then we'll be on our way.\"\n\nEsther loved watching the way Javier handled things. He was much smarter about social interactions than she was. Rarely showing if he was irritated, always helping keep other people calm. Grace was like that, too, she supposed. \n\nToo late she realized what Javier had done. She'd meant to set aside time with him during the day, before she got too tired. He'd been so horny last night, and she'd been looking forward to it. Then again, the errands didn't usually take all day. \n\n Don't be too late,  she sent to him.  We have a date, remember. \n\nJavier almost jumped, and then smiled at her. He'd seemed to really like it last night when she talked to him that way. She'd have to find more excuses. It was too bad that her voice quickly lost clarity at a distance. But that would be something fun to work on.\n\nAfter the others left, Nicola waved off her offer of help with the concrete pouring. \"No, you should do your meditations. It's more important than any of this work.\"\n\nHer phrasing was so similar to something Javier had said. It annoyed Esther, but she understood why they thought that way. And she did need the time, not exactly for meditations, but to think over everything she'd learned the previous evening.\n\nShe lay on the bed, looking without really focusing on the drawing she'd done last night, letting her mind put together details in different ways. Watching her mind work without pushing it in any particular direction. It wasn't so different from the way she explored otherspace sometimes. Her mind was itself a portion of otherspace, after all. And yet as far as she knew, all of otherspace was accessible within her mind. A cute philosophical problem, but the resolution wasn't so complicated. Descartes was wrong: her mind wasn't separate from the universe. Exploring otherspace wasn't truly a voyage within her mind, the way Javier sometimes romanticized it. Her senses were her connection to otherspace, which existed independent of her intellect, or anyone else's.\n\nExcept God, if there was a God.\n\nThe Chosen didn't think of themselves as religious, but their conception of the Way seemed to describe part of otherspace. Or so she assumed. Maybe she was being arrogant by assuming her vision encompassed everyone else's. Still, she was sure she'd felt Unity as a set of connections in otherspace. The collective unconscious of all the Changed, maybe.\n\nShe sighed and put down her drawing. This line of thought was too theoretical. And she was distracted. Her body was well-rested, comfortable on the bed. And it had been a couple days since she'd had an orgasm. She didn't know why she felt weird about masturbating lately. Maybe it was a holdover from that awful period last spring and summer, when she'd been desperate to save it all up for Javier. She knew she was still digging herself out from that.\n\nJavier certainly masturbated often enough, and he knew that she knew, but he deserved his privacy, so she never said anything about it. Even Grace and Kat masturbated on their own, Grace a lot more often. Kat seemed utterly at ease doing it in front of Grace. Well, for heaven's sake, that pair deserved their privacy as well. Esther usually managed not to think about things like this, but she never truly forgot anything her mind observed, and the Watch was always going.\n\nShe pulled down her pants and arched her back, rubbing her spots against the bed. Better to avoid thinking about things she'd actually seen happening. Better to think about wildly improbable scenarios. Javier with his penis buried inside Grace's tight passage, the look of sexual hunger and wild astonishment on Grace's face, as though she had no idea why she was doing this, even as she lowered her face to lick between Esther's legs. And Mark behind Esther, lifting her up easily even as Grace kept licking, settling his penis against her anus, letting her weight slowly back down, so slowly\u2014\n\nExcept now Mark, the real Mark, was nearing the house. He and Nicola had finished with the concrete. He would politely wait until Esther came out to find them. Nicola might not, though, not in the mood she was in. Esther was well-hidden as always, though not so much they didn't know where she was. Neither of them would know what she was doing right now, though they'd pick it up fast enough when they came in.\n\nWith a sigh she pulled up her pants and licked her fingers. Nicola wouldn't be fooled, but she'd likely pretend to ignore it.\n\n\"Come on in,\" she said just as Nicola was about to knock.\n\nNicola's expression changed shortly after she opened the door.\n\n\"Oh. I'm interrupting, aren't I? Sorry, Esther.\"\n\n\"No, it's fine. Let's get started, shall we?\"\n\nMark came in as well, and the two of them sat at the foot of her bed, while Esther leaned against the headboard.\n\n\"Have you been practicing those new meditations? The ones based on what we learned about resisting the ancient places?\"\n\nMark nodded solemnly. Nicola did as well, but then she shook her head.\n\n\"Not enough,\" she admitted. \"I can't keep my concentration.\"\n\n\"OK,\" Esther said easily. But she was a bit shocked. Nicola had always seemed the most terrified of any of them about being controlled. Surely her experience in Oregon would only have increased her motivation. \"Let's start with that, then.\"\n\nSure enough, Nicola began fidgeting slightly after ten minutes, even as Mark slipped easily into the meditation, his senses focusing on his own body. Selena had been the best at this, but Mark had gotten a lot better as well. It made sense, as he'd always been the best of all at understanding his own body.\n\nWhen Esther interrupted them, Mark smiled. \"It is so much easier today, with the vision utterly gone. Less distraction.\"\n\nNicola looked even more miserable hearing that. And the rest of the session went similarly. Mark was getting better at resisting her attempts to pull him towards her. Nicola hardly seemed any better than she had by the end of the summer. Maybe she was even worse.\n\nAfter about two hours, Nicola finally lost her temper.\n\n\"Goddamnit, Mark, why is everything always so easy for you?\"\n\nMark looked hurt, of course. \"You know not everything is easy for me, Nicola. And I know you can do this.\"\n\n\"Maybe I can't,\" Nicola said. \"Maybe trying to do this is like you trying to memorize my fucking shopping lists. Maybe\u2014\" \n\nBut she broke off there, realizing she'd crossed a line.\n\n\"Mark, I'm sorry,\" she said, reaching to hold his hand. He shook it off and stood up.\n\n\"I think I need to get some fresh air,\" he said tightly, and then fled the house.\n\n\"Oh, fuck me,\" Nicola said, wiping her eyes. \"Why did I say that? Why do I always do that, Esther? Someday I'm going to hurt him so badly that he'll just give up.\"\n\n\"No, he won't,\" said Esther. \"You know that. You both love each other far too much.\"\n\nNicola bit off whatever remark she was going to make, and nodded with resignation. \"He's OK, isn't he? I can't even hear him anymore.\"\n\n\"He's fine,\" Esther said. \"Just off running. Now, can you tell me what's bothering you so much?\"\n\n\"No,\" Nicola said. \"Everything's bothering me. The stupid stove. The bits of moldy something I can't identify in here. My inability to practice what I know I should. My being a prick to everyone. All of Kat's whining, and then her and Grace snuggling up with you and Javier. Being stalled with my abilities again. I could go on all day.\"\n\nEsther nodded. But the thing about Kat and Grace surprised her. A sort of jealousy? Before Christmas, Nicola had seemed utterly comfortable with just Mark. It was Esther who'd been trying so hard to forget about the rush of sensations she got from sharing senses with Nicola.\n\nWell, this was Nicola. She should just say it.\n\n\"Are you jealous of Grace and Kat?\"\n\n\"No,\" Nicola said. \"Of course not. It's just annoying. I hate the noises Kat makes. Oh, Christ, I'm so petty, aren't I?\"\n\nThere was a piece Esther was missing. Nicola was avoiding something. Esther understood enough about herself to see it in someone else.\n\n\"Do you still miss Unity?\" she said slowly.\n\n\"NO! God, no. It makes my skin crawl to even think about it, Esther. Sometimes, late at night, I almost wonder if I can hear them. Maybe I'm still part of it, in my dreams, the way Benjamin thought. Maybe we all are. How would we even know, Esther?\"\n\n\"You're terrified,\" Esther said softly.\n\nNicola seemed about to deny it, but she didn't. For a long time she sat still, looking at the floor.\n\n\"I miss Javier,\" she said finally. \"I miss that feeling of holding on to him for dear life, but it's impossible to think of that without remembering Unity. And I truly miss sharing senses with you, except that makes me think of Unity too. Even what I can manage with Mark on my own is starting to feel like too much.\"\n\n\"I miss sharing senses, too. A lot more than I've told Javier lately. He's more honest with me, I think. He misses you, too.\"\n\n\"What a mess,\" Nicola said, half smiling. \"And I feel like a total asshole to have interrupted you earlier. Next time promise you'll tell me to come back later. Or just give me a shove. I think I proved pretty well I can't resist it.\"\n\n\"Maybe you don't want to,\" Esther said. \"Maybe that's the real problem.\"\n\nNicola nodded slowly, looking surprised. \"Huh. I hadn't thought of it that way. Maybe you're the worst person to be trying to teach me this. If you were Franklin, God help me, or even Abuela\u2014\"\n\n\"Or maybe it means I'm the best person,\" Esther said, giving her a strong pull, of a very specific kind. An instant later, Nicola was kissing her passionately. Her friend finally pulled away, with a shudder.\n\n\"Fuck,\" Nicola said. \"No, you don't have to apologize. I know exactly what you did, and I didn't fight it at all. You made your point. If I could fight you off, surely I'd be able to fight off someone I didn't want to fuck.\"\n\n\"Oh,\" Esther said. \"Right, that was the point I was trying to make. I got distracted when you kissed me.\"\n\nNicola started laughing loudly, and Esther knew she'd done the right thing. But it wasn't really the whole point she'd been trying to make.\n\n\"Maybe if this wasn't hanging unresolved between us, you could focus better,\" she said. \"Maybe we just made more problems by trying to keep our distance. Do you really think sharing senses was just like Unity?\"\n\n\"No,\" Nicola said. \"It was like I told Javier. It was better than Unity.\"\n\n\"But you once said that you didn't want it to stop in the way you didn't want someone to stop giving you oral sex. Not like a drug. That's the way I miss it, too.\"\n\nNicola shook her head.\n\n\"I did say that,\" she agreed. \"But it's all mixed together now. It feels like sharing senses opens me up in the same way Unity does. What if I'm leaking into that collective unconscious, and I'm helping those zealots without even knowing it? Like someone's hijacked a piece of my brain for their own use?\"\n\n\"If you were,\" Esther said solemnly, \"I would be able to tell. I don't understand Unity, Nicola, and I certainly don't trust it. But that's in part because I couldn't see where the connections went in otherspace, and I was too cautious to follow them. I don't see any of that now, and if you like I'll watch you all night to make sure nothing subtle is happening while you dream. I see more clearly than I ever have, and I would cut connections like that before they ever manifested.\"\n\nTo her surprise, Nicola was starting to tear up.\n\n\"Of course you would,\" she said, standing up quickly. \"I'm sorry, Esther, I can't think about this anymore. But I'll practice my meditations anyway, and maybe tomorrow I'll be less of a mess. Thank you for forcing me to talk. And remind me to tell Mark how much I love him if I'm too big an asshole to remember.\"\n\n* * *\n\n\"What is Nicola's problem, anyway?\" Kat said, before failing to avoid yet another pothole. \"It's like she thinks only a man can be trusted with the manly things, and of course Nicola's an honorary man, an exception to the rule of useless womanhood.\"\n\nJavier was starting to wish he'd taken the wheel instead, but he hadn't wanted to insult them the same way Nicola had. Now he just nodded and let Kat rant.\n\n\"I get it that I'm a city girl, and I only really know how to handle delicate, womanly electronics, but Grace knows her way around a hardware store. Sometimes I think Nicola barely even notices she's there.\"\n\n\"Kat,\" Grace said again. \"It's OK. Nicola's just annoyed about the stove.\"\n\n\"And taking it out on all of us as usual,\" Kat fumed. \"But especially the visiting lesbians, the ones without any Changes to make them useful. I guess in that you're the honorary one, Javier. Maybe you get Changed groupie status for having stuck around them so long.\"\n\n\"Shut the fuck up, Kat,\" Grace said. \"Apologize right now.\"\n\nKat shut up. And a few seconds later, she pulled the truck to a stop, putting her head on the steering wheel.\n\n\"Oh, God, Javier, I'm so sorry. I can't believe I said all that. It was totally inappropriate. To you and all the others. And here I was complaining that Nicola was being bitchy.\"\n\n\"How about I drive for a while,\" Grace said. \"And then you can think about why you're feeling so pissy.\"\n\nJavier sat uncomfortably in the passenger seat while they swapped. Grace gave him a sympathetic look before starting the truck up again.\n\n\"I was going to blame the lack of hot water,\" Kat said eventually. \"And that I don't like living rough. Along with\u2014well, never mind, I'll keep my mouth shut for once. Anyway, that's all cheating. Really, it's that I hate feeling useless, and Nicola sure knows how to make me feel that way without even trying. I mean, look at her! She's far smarter than me, she can build anything, she's as strong as a man twice her size, never gets sick, has a perfect body and is drop-dead gorgeous. Oh, and she has X-ray vision and can see how atoms vibrate. Meanwhile I'm a hacker without a real computer, reduced to hoping that maybe Geoff will have run into something I can help with over e-mail. But he's far too competent.\"\n\nShe flopped back on her seat with disgust.\n\n\"Feel better?\" Grace asked.\n\n\"Yes, and fuck you,\" said Kat, sticking her tongue out at Grace in the mirror. Grace smiled.\n\n\"If you want,\" Javier said, \"I could argue with all that. But I think I'll just leave it alone.\"\n\n\"Like a turd,\" Kat agreed. \"Why don't we all just stand here and admire it. I bet none of you realized I could drop one that size. From such a petite lady, too.\"\n\n\"Now you're just feeling sorry for yourself,\" Grace said. \"Do we need to send the man in for all the things at the hardware store while I see how I can make you feel better?\"\n\nKat started laughing. \"OK, you win. No, go ahead and drop me off at Jacob's like usual. But you can think about those things in the meantime. Actually, if you don't mind, I'll start thinking about it right now. God, I'm so sorry, Javier. And you too, Grace. You haven't whined once, in all of this craziness. I don't know how you even put up with me.\"\n\n\"You're brilliant, funny, and the sexiest woman I ever met,\" said Grace. \"Plus, you give great head.\"\n\nJavier and Kat cracked up, and Grace smiled at Kat in the mirror.\n\nKat said goodbye to them at Jacob's house, taking her laptop and letting herself in with the key Jacob had given her. She spent a few hours most days at this, catching up on messages, doing some programming, and trying to understand what the Black Christmas attackers had done to fragment the Internet so dramatically. Kat said that compared to bombs or setting fire to a refinery, it seemed a terrifyingly sophisticated attack.\n\nOn their way to the hardware store, Grace glanced at Javier.\n\n\"Sorry about that,\" she said. \"Nothing worse than being stuck hearing lovers fighting.\"\n\n\"You fight pretty darned constructively,\" Javier said. \"And Kat was right. You know exactly how to handle her when she gets like this. She adores you.\"\n\nGrace smiled. \"Look at what you just did. You slyly complimented us both. You're so sneaky about that, aren't you, Javier?\"\n\n\"OK, then, you guys are great friends and you're both brave and hot and brilliant and so perfect for each other it makes everyone jealous. Better?\"\n\nGrace laughed. \"Hah, you pretended to be not-sneaky, but you used it as an excuse to give us even bigger compliments. That makes it double-sneaky. You can't fool me, Javier.\"\n\n\"I guess not,\" he agreed, smiling. And she was right, though he felt a little guilty about how true it all was. Especially the hot part, and how jealous he was sometimes of them. But Esther had promised they'd have time together later. And maybe the wood stove wouldn't be in today either, and the four of them would share a bed again.\n\nBut the stove was waiting for them after all. It was massive, so before their other shopping they got it secured in the back of the truck, with the help of a lift and several employees. \n\nWhen they'd finished at the hardware store, Javier got in to drive to their next stop.\n\n\"Kat will be disappointed,\" Grace said with a smile. \"That the stove was in.\"\n\n\"Just to spite Nicola? Or did she want to freeze her tits again?\"\n\n\"No,\" Grace said. \"She really liked sharing the bed with you two. She told me that at least three times this morning.\"\n\nJavier glanced at her. He wasn't quite sure what she was getting at.\n\n\"But you weren't so keen?\" he finally said.\n\nGrace shook her head. \"No, that's not it. I was glad she convinced me. I slept well, and it was cozy. I even had good dreams. It's just, well, it's more complicated than that.\"\n\n\"Mmm,\" Javier said, waiting. Grace would be as straightforward as she could, he knew."
    ],
    "authorname": "rockchaser",
    "tags": [
        "sci-fi",
        "science fiction",
        "fantasy",
        "powers",
        "superhero",
        "action",
        "drama",
        "romance",
        "plot"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/unity-and-destiny-pt-06"
}
{
    "title": "The Scholarship Ch. 02",
    "pages": [
        "Author's Note: Although I've tried to make this story stand alone as much as possible, I would encourage you to read the first installment of The Scholarship in order to enjoy fully this next chapter of Sarah's story.\n\n*\n\nI was astonished at how fast the first semester seemed to be flying by. Ever since receiving the $5,000 grant from Miranda Steele to pay the first half of my tuition, I was again free to concentrate on my studies and look forward to graduating on time next spring.\n\nI'd even had time to attend the many alumni events to which I was invariably invited by the Dean of Business, who liked to show off some of his more talented (and I'm sure in his mind, attractive) students when graduates and donors were on campus for the many fall activities.\n\nI'll have to admit, I didn't mind being \"shown off\" for my academic accomplishments, which were considerable during my first three years on campus. Dean's List, honor societies, and all the other things that would look nice on my resume' when I started applying for jobs.\n\nNor did I mind that the Dean thought I was attractive, physically. I was proud of the way I looked. I made it a point to keep my curly brown hair and makeup just so whenever I went out in public, and as I walked to class each day, I always enjoyed those second glances from the guys that confirmed I indeed looked nice that particular day.\n\nI am only 5-3 and 115 pounds\u2014far from a striking figure. But my outward confidence, big brown eyes, and some nice, firm 34-C boobs, always seem to attract attention. And I try to help things along as much as possible by wearing outfits, whenever possible, that reveal just a hint of cleavage.\n\nEvery day since the semester started had been a blur of classes, studying, club meetings, and the hundred other things that make up the life of a busy college student. And on the weekends, football games, alumni activities, and of course, more studying.\n\nI hardly had time to think.\n\nBut the nights were a different story. When I finally closed my books and turned out the light in my dorm room, it was then that the memories of Miranda Steele came flooding back, overwhelming me.\n\nMrs. Steel was the widow of a wealthy benefactor of the university and the woman I'd so brazenly asked for a scholarship when I'd attended a ceremony commemorating the naming of our College of Business building in honor of her late husband. I had been amazed that she agreed to consider my request.\n\nShe must have sensed how desperately I needed the money. Sort of like a predator smells fear. And I was afraid\u2014afraid that I would have to drop out of school and work for a year if I couldn't come up with that $10,000. But when I asked her for help, I had no idea how she would take advantage of that desperation, and all the while enjoy it.\n\nLying in bed each night, my mind just kept flashing back to the \"interview\" with Mrs. Steele, which was her requirement to grant me the scholarship. How she made me answer these embarrassing questions about my sexual history. How she made me reveal my body to her.\n\nAnd finally, how she made me fuck myself on the toe of her black leather boot\u2014all the time thoroughly enjoying my utter humiliation!\n\nYes, I lay awake almost every night replaying that episode in my mind. But I could rationalize that I needed the money so badly. That I needed to stay in school and graduate on time. That I needed my degree to get a good job.\n\nI guess those were all good enough reasons to degrade myself so. To allow her to take advantage of me that way.\n\nBut what I could never rationalize\u2014couldn't even understand\u2014was why the whole sordid episode turned me on so much!\n\nAnd tonight was no different. There I was again. Lying wide awake in my dark room, remembering Miranda Steele--her severe, but pretty face, her piercing eyes, and especially those black leather boots caressing her legs. \n\nAs usual, my stomach started to tingle, and my nipples hardened. My pussy began to drip with the arousal that invariably overtook me. I tried hard to think about other things. But those eyes . . . those boots . . .\n\nAs much as I tried to will it otherwise, my hands moved slowly to my breasts and began to massage them outside the white t-shirt I was sleeping in. As I caressed myself, the soft fabric made the sensitive nipples grow more erect still, and I paused to pinch each one hard enough to bring tears to my eyes.\n\nThe first time I'd pinched myself that way, I thought maybe the pain would snap me out of this state of arousal. Distract me from the feeling that was building between my legs. Allow me to go back to being the good girl I was before Miranda Steele.\n\nBut it didn't work that way. In fact, it had the opposite effect. The pain just caused my wetness to spread, to soak my conservative white cotton panties, to make me feel even more like a slut.\n\nNo, I couldn't help it. My hand moved down and slipped under my t-shirt and slid slowly across my flat stomach, my fingertips tracing a line from my belly button to that sensitive crescent just below my breast. My fingers caressed the soft skin as my eyes closed and my lips parted.\n\nThe other hand lifted my shirt to expose both breasts, and I shivered a little as the cool night air played across my body. Cupping both breasts underneath, I raised them to my mouth and alternated wet licks from one nipple to the other.\n\nThe feel of my soft tongue on my sensitive nipples made me gasp with pleasure.\n\nBefore lying down, I had closed the blinds, and the room was now pitch black. The almost total absence of light seemed to make my sense of touch even more acute, my nerve endings almost raw. I was vaguely aware of sounds coming from the hallway outside, but after living in a dorm for three years, I had learned to tune out those noises.\n\nRight now, my senses were focused on this incredible craving I felt at my core and on the image of myself kneeling naked and exposed in front of Miranda Steele.\n\nAs her eyes bored into me, my right hand traced its way down my flat belly until it reached that growing wet spot where my panties covered my pussy. Through the fabric, I could feel how my labia were already swollen and partially open, and I pressed my clit through the white cotton.\n\nI caressed my lips and pressed the fabric inside me, until I could clearly feel the outline of my wet cunt. And with each movement, Miranda Steel was watching me, peering right into my soul.\n\n\"Oh god, Sarah!\"\n\nI bolted straight up in bed, grabbing for the sheet to cover myself, suddenly aware that the overhead light had been switched on.\n\n\"Oh, Sarah, I'm soooo sorry!\" It was my roommate, Marni who had just come back to the room a lot earlier than usual.\n\n\"I'm really sorry, I had no idea you'd be asleep so early. Well, I guess you weren't exactly asleep,\" she added with a giggle.\n\nKeenly aware of the heat radiating from my skin, I knew I was flushed from arousal and embarrassment, and there wasn't much point in making up some lame story about what I'd been doing. Marni knew exactly what I was doing.\n\nI tried to open my mouth to explain . . . apologize . . . something. But no words would come.\n\n\"It's okay, Sarah, really. If there's anybody who needs to get herself off more often, it's you.\" Marni looked me slowly up and down with those blue-grey eyes of hers.\n\n\"What do you mean by that?\" I stammered, still struggling to cover myself and regain my composure.\n\n\"How long's it been since you got laid? I bet you haven't been fucked since you broke up with that prick, Phil, last year.\" \n\nShe was referring to the only serious boyfriend I'd had in college, or ever, for that matter. We broke up after I caught him with another girl, and I hadn't dated anyone more than once or twice since then.\n\nMy silence told Marni she was right about my sex life, or lack thereof.\n\nOf course, that's just the reaction I'd expect from Marni, who by all appearances had an extremely active sex life. And why not? She was one of the most attractive girls on campus\u2014not beautiful in the classic sense. \"Cute\" would probably be a better description, with her short red hair and a hint of freckles across the bridge of her nose and her chest.\n\nBut her wonderful personality and sense of humor, coupled with her voluptuous figure, gave her an appeal that was a little hard to describe. She sort of reminded you of your best friend, but a best friend that you'd also like to fuck.\n\nShe attracted men like a magnet, and wasn't the least bit hesitant to tell me when, how and how often she screwed them. I listened to her stories, partly appalled and partly fascinated, but I did admire her relaxed attitude about sex. In that respect, Marni and I were polar opposites.\n\nI'd even heard some rumors that she'd had a couple of girlfriends, too, but she never confided in me about these relationships, if they did, indeed, exist. Actually, I would have enjoyed hearing about that more than her tales about which guy had the biggest cock.\n\n\"Turn off the goddamn light!\" I snapped, surprising myself with both my language and tone.\n\nIt took Marni by surprise, too, and she quickly reached over, flipped the switch and sat down on her bed. The room was in nearly total darkness again, but I could hear that she was beginning to take off her clothes.\n\nAs my eyes adjusted, I could barely make out her form there on the bed, which was on the opposite wall, maybe six feet from my own.\n\nI lay silently with the sheet pulled up to my chin, still stinging from the embarrassment of getting caught masturbating. But at the same time, aching with sexual tension. A good orgasm and the release that accompanied it was the only way I could relax enough to get Miranda Steele out of my mind and sleep.\n\n\"Sarah?\"\n\n\"What?\"\n\n\"Do you still want to get yourself off? It's okay if you do.\"\n\nI didn't answer, but the idea of doing it, while Marni knew I was doing it, made that familiar tingle return to that spot deep in my belly.\n\n\"I've heard you before, you know.\"\n\n\"You have?\" My voice sounded a little breathy and hoarse.\n\n\"Oh, yeah, I think it's really sexy. It makes me so hot! Sometimes I do it with you.\"\n\nI guess the darkness makes it easier for people to talk about uncomfortable things. So I confessed to Marni that I'd listened to her, too. And that I'd enjoyed it, too. It seemed that we'd been helping each other get off for quite some time, never admitting it to the other.\n\n\"So, how a bout it?\" Marni asked. This time, her voice sounded a little strange, too.\n\n\"All right, on one condition.\"\n\n\"What's that?\"\n\n\"We don't say anything to each other while we do it, and we don't talk about it after.\"\n\n\"Okay, my lips are sealed!\"\n\nBut even in the dark, I knew her lips weren't sealed; they were smiling. I couldn't help but smile a little, too, at the sheer naughtiness of what we were about to do.\n\nBut I didn't think too much or too long. My body was still on fire, partly from my earlier activity and the thoughts of Miranda Steele, and partly, I had to admit, from the thought of masturbating along with my sexy roommate.\n\nIn the silence of our dark room, I could tell that Marni had not wasted any time. I could hear her moving on her bed and could tell the pattern of her breathing had changed. Her breaths were already coming quicker.\n\nI lay back on my own bed and reached quickly inside my panties, my arousal already so great that I could dispense with most of the preliminaries. My middle finger outlined my wet slit, slowly at first, then moving faster. Soon I was dipping my finger inside to capture some of my juices and using the lubrication on my clit, which already was swollen and hard.\n\nFeeling the need for more stimulation, I slid my wet panties down and kicked them off the end of the bed. Then I drew my feet together and toward me, pointing my knees outward. This was absolutely my favorite position, as it opened my lips wide and stretched the skin tight around my clit.\n\nMarni must have found a good position, too, because I could hear her moving rhythmically on the bed. In my mind, I could see her thrusting her fingers into her wet tunnel and raising her hips to meet each thrust.\n\nThen I surprised myself by wishing I could see that beautiful sight, not just with my mind, but with my eyes.\n\nClosing my eyes and holding on to that picture of Marni, I began to match her movements, thrusting two fingers inside my wet tunnel and lifting my hips with each entry. Over and over, we fucked ourselves, our breathing louder and faster\u2014both of us almost panting now.\n\nI could hear the squishing of our fingers moving in and out of our pussies, as the juices ran down over our thighs and cracks. There were little moans of pleasure, but I could no longer tell if they came from me or Marni. Probably, they came from both of us.\n\nThe world around us just seemed to stand still as we reveled in these new shared sensations. The sounds of fucking, the smell of sex were heavy in the room.\n\nI heard Marni hiss, \"Oh, fuck! Fuuucckkkkk!\" And I went over the edge, too, plunging toward a crushing orgasm. \n\nMy spasms gripped my fingers, pulling them further inside and squeezing them tightly\u2014over and over again. I ground the heel of my hand into my clit and held my breath as wave after wave of orgasm washed over me.\n\nWhen it had finally subsided, my body slowly relaxed and I pulled the sheet over me. The last thing I heard was the sound of Marni's deep, regular breathing as I drifted off to sleep. And this night, for the first time in many weeks, I didn't dream about Miranda Steele.\n\n******\n\nTrue to her word, Marni never said a thing about what we did that night. I hoped her silence didn't indicate that she regretted it or didn't enjoy the mutual stimulation.\n\nI was certain of one thing\u2014it turned me on tremendously, and I would have loved to do it again . . . and again. But I just couldn't bring myself to admit it to Marni. It was hard enough admitting it to myself.\n\nBut it did cause me to start looking at Marni in a different way. She had always been very casual around me as she was dressing and undressing. Even at times dropping her towel when she came back from the shower and standing there nude as she pulled her clothes from the closet.\n\nBefore, I would avert my eyes, trying to give her a bit of privacy\u2014a precious commodity in the tight confines of a dorm room. But no more. Ever since that night, I had looked at Marni at every opportunity. Occasionally, she would \"catch\" me and smile without saying a word.\n\nI especially enjoyed it when she turned her back to me and reached high into the closet to retrieve some article of clothing or another. The muscles of her long, beautiful legs and her firm bottom would tense, and at times I could catch a glimpse of her cute slit.\n\nOne or two times I saw her naked from the front and got a great look at her luscious breasts. Mine are nice sized for my small frame. But Marni's were easily D- cups, with prominent dark pink nipples and areola the size of silver dollars.\n\nAnd I was fascinated by the way she groomed her pussy. She was clean shaven, except for a \"landing strip\" of auburn hair just atop her mound. That little strip couldn't possibly serve any purpose other than directing traffic right to her clit.\n\nI contrasted Marni's look to my own, which featured a much fuller patch of hair shaped into a neat triangle. I couldn't imagine trimming myself to that degree, or as many girls do now, shaving completely.\n\nAnd as I pondered Marni's pussy from time to time, I couldn't help but think of the last words Miranda Steele said to me, as I lay in humiliation on the floor of the Dean's conference room.\n\n\"Sarah,\" she coolly inquired, as if she were asking about the weather. \"Have you ever fucked another woman?\"\n\nI had never even thought of it before that moment. Now I think of it a lot. Miranda somehow knew that I would submit to, even enjoy, the humiliating treatment she gave me that afternoon. Did she also know that I would enjoy being with a woman, as well? \n\nShe seemed to understand things about me that I didn't even know about myself. But the answer to her question was \"no,\" at least up to this point in my life. Now I wondered if there might be a different answer somewhere in my future.\n\n******* As September turned to October and autumn was in the air, I actually enjoyed walking to and from my classes. The mornings were crisp and the trees that dotted the campus were beginning to change colors. It promised to be a beautiful fall at good old Midwestern State University.\n\nI didn't make many of the football games\u2014I was usually too busy studying, determined that my last year at school would be the launching pad for a lucrative career in business. But that was a few months in the future, and now was the time to concentrate of those final few required courses.\n\nI would even have enjoyed climbing the stately steps to the new George P. Steele College of Business Building each day on my way to class, except for the fact that every time I saw that name, it reminded me that soon I would be receiving a call from his widow, instructing me about applying for my second-semester grant.\n\nI actually tried to think of other ways to earn the $5,000, to avoid another \"interview\" with Miranda Steele. But not only did I come up empty as to any other possibilities, I began to feel a little flutter of anticipation mixed with the dread. I couldn't quite put words to my feelings, but they were definitely conflicted.\n\nMy fascination with my roommate, Marni, also continued. She and I had made it almost a nightly routine to climb into bed, turn off the lights, and begin our masturbation ritual. We never spoke a word, either during or after, but we had become so adept at this simultaneous stimulation, that we almost always came at the very same time.\n\nNot many people having regular sex can make that statement!\n\nBut even as I yearned to know more about Marni, she seemed less inclined to open herself to me. So I did some things I'm not very proud of. Things I'd never want anyone to know about.\n\nOne afternoon when I knew Marni was away from the room for an extended period, I carefully opened her bureau and began to snoop. I was ashamed of myself at the time, but my curiosity overcame my good sense.\n\nOf course, I started with the drawer that held the sexy panties that she would slip into after her showers. The lacy boyshorts, the hipsters, but most of all, the wonderful thongs that hid themselves in her crack and barely covered her prominent mound. They came in a variety of colors, and I tried to contain a shiver as I caressed a little pink thong that I knew was her favorite.\n\nAnd, of course, the bras. Balconets, plunges, strapless. Most matching the panties. None padded, of course. 36-D. Okay, I looked at the labels. I just had to know.\n\nAs I allowed the soft fabrics to caress my hands, I suddenly felt something hard below the last layer of panties. I carefully lifted them up, reached underneath, and pulled out the object that had caught my attention.\n\nWhen I pulled the thing from the drawer, I almost dropped it when I saw what was in my hand. Even with my limited experience, I realized it was some type of dildo, but not one I was familiar with. The cock was at least 15 inches long and had what appeared to be the head of a penis on each end.\n\nIt was crafted from hard rubber and felt smooth to the touch, as I unconsciously ran my hand up and down the shaft. I could grip it and reach my fingers all the way around, but just barely.\n\nIt was jet black, and all in all, probably the nastiest thing I'd ever seen in person.\n\nBut at the same time, it may have been the most erotic. As I continued to trace my fingers over the hard, cool shaft, I could feel that tingling start at my inner core and begin to radiate outward. I could feel my pussy grow hot and moist.",
        "That was all the exploring I needed to do for the day! I carefully closed Marni's drawer and laid the giant cock on my bed.\n\nNext came the part I'm really ashamed of. I opened Marni's closet, reached into her dirty clothes basket, and retrieved the panties I knew she'd been wearing last night before she went to bed. We'd had one of our masturbation sessions, and I wanted to see if the panties still held the aroma of her arousal.\n\nI ran my fingers over the delicate yellow thong and noticed the large spot that covered most of the crotch. I held it close to my face and was overcome by the smell that I knew from experience to be Marni's.\n\nTaking the panties in one hand and the cock in the other, I lay on my back with my eyes closed, drinking in all the sensations that were about to overwhelm me. The feel of the hard rubber, the size of the shaft, the texture of the thong, and of course, Marni's sweet smell. I almost passed out from the stimulation!\n\nI quickly stripped off my shorts and jerked the soaking crotch of my panties aside, not even wanting to take time to remove them. I gripped the shaft of the dildo and moved it to my pussy, running it the length of my slit several times, then slightly inside to lubricate the large head.\n\nI slipped a pillow under my bottom for a better angle, and began to slide the huge cock inside. I've always been quite tight, but this time, once the bulging head got past my lips, it seemed that my vagina just opened up and swallowed about eight inches of the black thing.\n\nI held my breath until I felt it hit my cervix, then gasped in a combination of pain and lust. I just lay there for a minute with my eyes closed, gripping the shaft with my inner muscles and enjoying the sensation of being absolutely and completely filled. I closed my eyes and took in Marni's lovely scent as her thong lay on the pillow beside me.\n\nGripping the shaft in one hand, my other moved to my clit, which was already swollen and erect. I slipped the cock out just a little and coated my fingers with the juices that had slickened it. I used two fingers to make circles around my hard nub, moving a little faster with each one\n\nMy mind drifted to thoughts of Marni, trying to imagine her with this huge black dildo parting her lovely pussy lips, wondering if she'd ever used it when we were quietly masturbating in the dark. But I was still puzzled by the two heads. Why not a set of balls at the other end?\n\nAnd then it hit me! In my mind, I could see a naked Marni joining me on the bed, her pussy wet with milky nectar, lips already swollen and slightly parted. She scissored her legs between mine and moved herself closer, and as she did, she allowed the other end\u2014the other bulging head--to part her lips.\n\nWith that vision running through my mind, I took the dildo in both hands and began to shove it roughly in and out, raising my hips to meet each new thrust. Faster and faster, I fucked myself, as my mind pictured the second head disappearing inside my sweet Marni, drawing her to me until our swollen, wet cunts barely touched in the most sensual kiss of my entire life.\n\nAnd with that, my pussy literally exploded. My spasms shook my whole body, radiating out from my pulsing cunt all the way to the tips of my fingers and toes. I cried out in joy, in pain, in release and locked my thighs together so that wonderful cock could never escape. So I could feel this way forever.\n\nBut, of course, I couldn't keep it there forever, and my body finally began to go limp with the exertion, with the most total sexual satisfaction I'd felt to that point in my life. My arms dropped to my sides, leaving the black cock protruding from my wet and tender opening. My cum drained out on the dark shaft and on the pillow under my bottom.\n\nI looked at the thick shaft that impaled me, the dark color in stark contrast to the paleness of my upper thighs. I felt my cum pooling on the pillow. I smelled Marni's panties, still lying near my face.\n\nSlowly, I started pulling the cock from my tender vagina, marveling at how my juices had coated nearly two-thirds of its 15-inch length. I gasped as my lips finally released the large, rounded head. With that nasty thing finally out of me, I could finally enjoy the relaxation brought on by a tremendous orgasm.\n\nBut I was still mesmerized by the cock. I hesitantly raised it to my lips and began to lick the imaginary juices where my fantasy told me that Marni had mounted it, where it had slithered into her pussy as her swollen lips moved toward my own.\n\nFinally, I turned the thing around and ran my tongue along the shaft, now coated with my own cum. I tasted myself on the dildo and felt this terrible, erotic mixture of shame and exhilaration.\n\n\"Jesus, Sarah,\" I thought to myself. \"What the hell are you doing? Did Miranda Steele turn you into a slut, or were you like this all along?\"\n\nTears began to stream down my cheeks, as I realized I didn't know the answer. Perhaps I would find out when Mrs. Steele summoned me again.\n\nI would have gone deeply to sleep after an orgasm like that, except for the voices outside my door. It was Marni, talking to a girl from down the hall!\n\nI jumped out of bed, grabbed my new black friend and shoved it back to the bottom of Marni's lingerie drawer. I tossed her panties back in the clothes basket and pulled my shorts back on. It was a good thing I hadn't bothered to remove my panties, because I'd never have had time to get them back on! Marni burst through the door just as I sat back down on the bed and tried to wipe the tears from my face.\n\nShe smiled as she came in, then looked at me a little more closely. I knew my clothes and hair must have been a total mess, and there was no telling what the expression on my face must have revealed. My cheeks were burning.\n\nShe looked around a little more, taking an exaggeratedly deep breath.\n\n\"I think someone's been doing something without me,\" she grinned.\n\nThen she grabbed a book from the top of her desk and was gone again. "
    ],
    "authorname": "pixie2002",
    "tags": [
        "dildo",
        "black cock",
        "panties",
        "lingerie",
        "humiliated",
        "submit",
        "huge shaft",
        "roommate",
        "red hair",
        "boots"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/the-scholarship-ch-02"
}
{
    "title": "Sabine",
    "pages": [
        "What is reality? What is fiction? \n\nIsn't all writing ultimately autobiographical? At least, shouldn't good writing seem that way? \n\nIn the end, does it matter as long as it's a good story? \n\nMy wife and I made love this morning, and afterward she brought me a cup of coffee in bed. (Have I ever mentioned that she is wonderful?) \n\nWhile we snuggled together, we talked about our young loves and the hopes and dreams of our youth.\n\nAfter she got up, I picked up my computer and my fingers tore this story out of my heart.\n\nThe idea of \"finding one's place\" is one of my favorite themes (as you can tell from my other stories), and this is about one young woman's search.\n\nI hope it doesn't seem long-winded, but young Kate had a lot to sort through. Be kind to her-she did her best.\n\nKate\n\n========================================\n\nOver the years, I have learned to ignore most of the bullshit that comes from being gay, but it still bugs me when people ask, \"When did you become a lesbian?\" I usually reply, \"about the same age you 'became' straight,\" which leads either to awkward silences or interesting conversations.\n\nThe important question for me was, \"When did you stop trying to pretend that you weren't a lesbian?\" That moment came in 1990 in Vienna, Austria when I was 23 and living away from a lot of influences that kept me closeted. My Christmas present that year turned out to be a remarkable woman who compelled me to stop lying about who I really was.\n\nOne might say, though, that I came by my dishonesty honestly. \n\nI was raised in a conservative, southern, Christian family, and was taught to be a good, morally-conscious, Christian girl by a loving-but-very-controlling mother. My father died when I was young, so mother took on the role of raising me and making a career for herself (and this in the 1970s when it was much more difficult). She did this successfully enough that she became noted in our small town and a leading figure in our church. \n\nI had two aunts who I adored who also helped raise me. Aunt Kathy, my mother's sister, was my \"real\" aunt (our family has great fondness for variations of the name Katherine). She lived with \"Aunt\" Gail (who was no relation), and they were inseparable. I loved being around them and they delighted in my visits\u2014I even got to spend the night a few times. But mom never really wanted me to have too much to do with them.\n\nThe \"aunties\" were welcomed at all of our family functions, but were treated somewhat coolly\u2014nothing overtly unwelcoming, but there was clearly a distance between them and other family members. \n\nIn retrospect of course, I know that Aunt Kathy was gay. The concept of \"two aunties\" was our \"Christian\" family dodge that kept her and her partner marginalized without actually disowning her. Kathy and Gail, however, were unfailingly accepting of everyone and everything, and always seemed to be at peace. Their small house was immaculately maintained and they had excellent careers. They were, in fact, an embodiment of the \"Christian family values\" that were so highly prized by the rest of the family. I admired them and wanted to be just like them. Who could have known?\n\nI went to an all-girls Christian school, and was one of the jocks. I had always been a tomboy and understood neither the fascination with clothes and makeup nor the feverish conversations about boys. I did try to play up, though, because of the venomous whispers about a few girls who were suspected of being \"lezzie.\" \n\nThe worst insult imaginable was to called \"Lizzy Lezzie.\" I never thought being \"lezzie\" was such a horrible thing, but I certainly didn't want to be \"mistakenly\" identified that way\u2014it was the fast track to becoming a total outcast. I only knew that I loved sports more than romance.\n\nI went away to college. Getting to a more cosmopolitan place was good for me, and I began to become more open and relaxed about many things. I soon realized that I was not a person who cared to live with all of the \"thou shat nots\" of my childhood faith; though I held on firmly to my Christianity, I began to focus it on spiritual matters rather than on church-going and rule-following.\n\nI had always been comfortable being \"one of the guys,\" and I loved to hang out and watch sports and drink beer with my male jock friends. Eventually, with the help of some beer, I began having bumbling \"petting sessions\" with a few of them. I think I held up my end decently, but between lingering Baptist anxiety, their clumsiness, and my overall lack of interest it wasn't very thrilling for me and I remained a virgin.\n\nAs my senior year wound down, though, I had a couple of nice encounters with men and finally bid my virginity adieu. From then on, I started to think more and more about \"being with\" someone. The prospect of having a mate who was a good friend seemed like a worthwhile thing, and I was confident that, although I was not very highly sexed, I could handle the physical part of marriage well enough to keep a man happy. \n\nBut before I worried about a family, I had some career ambitions that I wanted to fulfill.\n\n========================================\n\nI had a professor who took a real interest in me (it took several years to realize how \"interested\" she really was...but I digress), and she put me onto the opportunity to do an internship in Vienna before starting law school. \n\nShe also helped me find a place to live with some friends of hers, Jan and Janneke, a Dutch couple who lived in a great part of the city. They had an extra room in their house and needed some extra money to take care of their newborn baby. \n\nI didn't have any money, but I got a small grant, and Aunt Kathy and Aunt Gail gave me a \"graduation present\" by funding the rest of what I needed. So, after thanking them profusely, I packed myself off to Vienna for a year to see the world and to seek adventure.\n\nI arrived in the early fall and spent a couple of weeks getting settled in my new digs and getting used to living in a foreign country. Jan traveled a lot with his work and Janneke stayed at home with their newborn son, Julius. She had a year of paid leave from her job, and they were taking full advantage of it. A student lodger was therefore good company for her as well as some extra money.\n\nThey were incredibly understanding and helpful to me. Even after four years at a prestigious university, I was still a hick from small-town America in many ways. I never would have adjusted as well or as quickly to my new lifestyle if it weren't for them, and I am still very grateful for their help.\n\nThey constantly asked me, \"What do you like?\" as though life were just that simple. It took me a long time to realize that they were right: life really is just as simple as \"what do you like?\" But finding that simplicity requires honesty. And honesty requires courage. \n\nFinding courage is what is difficult. \n\nI loved Vienna, and spent hours walking around sightseeing and trying out my German. I also enjoyed helping Janneke with chores around the house, and we settled into a comfortable routine.\n\nAfter a couple of weeks, I began my duties at the Vienna International Center\u2014a fascinating gig in the UN Office for Drugs and Crime. I loved going to work there and was energized by the work and by the interesting people I worked with. \n\n========================================\n\nOne day not long after I started, I went into the research library needing a book on international law. I found one that seemed perfect, but it was in German. I could speak the language decently and could sort-of-read a newspaper, but a legal textbook was quite a challenge. It was, however, the best I could find so I grabbed it and headed back to my desk.\n\nOn the way, I decided to turn my life upside down.\n\nShe sat at a table in the library, petite and effervescent. With her flat chest, trim hips, and short, dark hair parted on the side like a boy, Sabine could easily have been mistaken for a young man. But she was obviously a woman. Maybe 10 years older than me, and so\u2014captivating. As soon as I saw her, I knew that I had to get to know her. I have never before or since been so struck by someone. She was mesmerizing.\n\nShe wore a blue V-neck sweater over her button down shirt and had neatly pressed jeans and clogs. She was absent-mindedly chewing on the earpiece of her glasses as she pondered something she was reading, then she wrinkled her nose (in a most adorable way!), scowled and started scribbling on the pad next to her.\n\nShe saw me standing in front of her and looked up. She took one look at my American clothing and awkwardness, and a smile crossed her face.\n\n\"Hallo,\" she said in German-accented English. She chewed her glasses as she regarded me.\n\n\"Hi,\" I replied nervously. \"Um. I'm Kate. I'm a new intern here, and I\u2014er\u2014well, was looking for a book...\" my voice trailed off uncertainly.\n\nI stood there, stupidly, holding a book I couldn't really read\u2014and looking at a person that I couldn't really read, either. Of course I should have just continued on to my desk\u2014but I couldn't. Something about her rooted me to the spot.\n\nSabine chuckled and leaned back in her chair, putting her hands behind her head like a man. \"It seems to me that you have found a book,\" she said softly, gesturing toward the tome in my hand.\n\n\"I\u2014er. Well, I did find a book\" I managed to say. \"But\u2014I can't really read it, so it won't do me much good,\" I said, feeling like an idiot.\n\nSabine laughed out loud. Then she stood up, walked over to me, took the book and scanned the cover. She chuckled and looked into my eyes. It seemed like she could see straight into my soul. Her manner and her gaze were severe and intense, but her voice was gentle and kind.\n\n\"Kate,\" she said gently, \"My name is Sabine, and I can read German of course. I would be happy to help you if you like.\" For some reason, I felt very happy being near her.\n\n\"I would like that very much,\" I said, smiling. Sabine took my hand and led me to her table.\n\n\"I think will like this very much too,\" she said with a little smile. \"Now. What do you need to know?\"\n\nWe worked together for the rest of the afternoon. I was afraid that she was neglecting her work, but she pooh-poohed that and we huddled together over the book, working on my project. She was smart\u2014quite brilliant actually\u2014and insightful, and more importantly we hit it off immediately. Before we realized it, it was late in the afternoon.\n\n\"Mein Gott,\" Sabine exclaimed, looking at her watch, \"I am going to be late for an appointment. I'm sorry, Kate, but I must leave.\"\n\nWe stood up. \"That's ok, Sabine, thank you so much for all of your help. I really appreciate it,\" I told her sincerely.\n\n\"Null problemo,\" she replied, using a popular phrase of the time. \"I'm sorry to run, but I will help you more tomorrow if you need it. Bye!\" She hurried away before I could say anything else.\n\nI sat down, feeling a little dejected. I had really enjoyed working with her. She was so smart and interesting to talk with. And she was\u2014I couldn't really put my finger on it, but something about her kept intriguing me.\n\nI packed up and walked home, enjoying the sights of a Viennese evening. As I headed up the K\u00e4rnerstrasse, I passed the elegant shops and the crowds of elegant people. A group of women were looking at a poster of a male model adorned with a high-fashion suit.\n\n\"Oh my God, he is so handsome!\" one of the women exclaimed. I looked at the poster and noticed that the color of his tie was the same color as the sweater Sabine had worn. I stopped in my tracks. That was it. \n\nSabine fascinated me because she was so\u2014I hesitated\u2014handsome. Incredibly good-looking. She was beautiful! I remembered that I could hardly take my eyes off of her. I headed back home, wondering at why I would be so captivated by the appearance of a female co-worker. \n\n========================================\n\nThe next day, I hurried in to work. As I headed up the stairs to the office where I worked, I wondered what Sabine might be wearing today. I abruptly realized that I had no idea where in the building she worked or how to contact her. I immediately resolved to find her, even if it took all day. I felt a pang of guilt, then rationalized that I was actually saving time, since it was much more efficient to work with her.\n\nI greeted my office mates and settled in at my tiny desk. I began looking for a directory to see if I could find a clue to the whereabouts of the mysterious Sabine. A few minutes later, the office phone rang, and one of the guys answered. \n\nAfter a short conversation he turned and announced, \"Anruf f\u00fcr die Kate.\" I took the phone.\n\n\"Hallo,\" came a familiar voice, \"do you still want help today?\" My heart leaped. It was she!\n\n\"That would be fantastic,\" I said quickly. \"When can we meet?\"\n\n\"Now. Come to 3542A, third floor, second corridor past the stairs,\" Sabine instructed.\n\n\"Ok. Um. How did you find me?\" I had to ask. I was far from a major personality in this organization\u2014just some college-kid intern who did menial labor in a small office.\n\n\"I have my sources,\" Sabine said with a chuckle. \"Besides, Kate is not a common name here. If you had been 'Anna' or 'Maria' it could have been difficult.\" \n\nSabine had a private office, which meant that she was some kind of a big-wig. I found it without any trouble and announced myself to her secretary. After she checked with the \"Frau Direktor,\" I was waved into the inner sanctum and found Sabine seated at her desk.\n\n\"Oh wow, this is quite an office. I didn't know you were so\u2014important,\" I exclaimed.\n\n\"I like my job,\" Sabine said, welcoming me.\n\n\"I never would have\u2014I mean, yesterday. You spent so much time helping me,\" I began to realize that I had monopolized the time of someone who probably never even spoke to interns.\n\n\"Yes. Well, one nice thing is that sometimes I have the freedom to choose who I work with here,\" Sabine said simply. \"But I only have a little time today, Kate, so we should start on your project right away.\"\n\nWe settled in at her desk. It was a nice big workspace, but somehow we wound up sitting closely together. As we looked up references and worked through things, the report began to take shape. Eventually we hit a stopping point and it was time for Sabine to get back to her work for the day.\n\n\"Thank you again. You are so brilliant\u2014you saved me a lot of time and effort,\" I told her sincerely. She smiled. \"Plus, I've really enjoyed getting to know you,\" I added.\n\n\"I have enjoyed you, too,\" Sabine replied. \"Perhaps we will run into each other again. Have a wonderful day.\" It dawned on me that I would no longer have a reason to see her. I returned to my office and worked the rest of the day, feeling sadder than I had in a long time.\n\nThe next couple of days passed uneventfully, except that I could not stop thinking about Sabine. I finally decided that I just had to see her. If she thought I was a nuisance, so be it, but I had to try.\n\n========================================\n\nIt seemed wildly inappropriate for a lowly intern to just walk into the office of the chief of a division. At a loss as to how to proceed, I gathered up the draft of my report and headed up to the third floor, trusting to luck that things would work out. \n\nWhen I got to Sabine's office, her secretary was not at her desk. Taking advantage of the momentary gap in the defenses, I walked back to the inner office. The door was open and two older men were seated at her desk talking animatedly. I waited in the hall and listened. \n\nIt seemed they were asking Sabine's advice about planning some big international initiatives. They were quite deferential, and obviously valued her opinion highly. Soon, they thanked her profusely and left. They were startled to see me, but must have assumed that I was some secretary bringing documents to Sabine. \n\nI peeked around the corner. Sabine was leaned back in her chair with her eyes closed, rubbing her temples. She sighed audibly. \n\n\"Peek a boo,\" I said softly. She started, almost becoming airborne from her chair. She looked at me wide-eyed.\n\n\"Scheisse. Sie haben mich erschrekt,\" she scolded. \"How did you\u2014well, never mind.\" Then a warm smile lit up her face. \"Come in Kate,\" she invited. I scooted in.\n\n\"I\u2014um\u2014I was wondering if you could\u2014I mean if we could...\" I wasn't sure what I really wanted, so I just stood there dumbly. Sabine looked at the report in my hand.\n\n\"Oh. You need more help?\" she asked. She seemed a little crestfallen.\n\n\"Only if you have a few minutes,\" I said hesitatingly. \"I mean...\" I stopped. She was looking at me completely openly. Trusting a hunch, I decided to be honest. \n\n\"I really just wanted to talk with you for a few minutes. I don't really need any more help.\" I confessed, waving the stack of papers helplessly. \"The report was just an excuse to get to see you. I didn't know what else to do.\"\n\nShe smiled broadly. \"Please sit then,\" she said. \"I would very much like to talk with you too.\" We chatted about nothing in particular, but it was a delight just to hear her voice and to be with her. I told her about the poster that made me think of her.\n\n\"What? A man?\" she asked, incredulously. \"A man made you think of me?\"\n\n\"No. Er\u2014I mean yes, but he was very good looking and, well, he made me think that you were very good looking too.\" Realizing how that must have sounded, I tried again. \"I mean that I thought that you\u2014um, he was...\" I stopped as Sabine began to chuckle. \"You must think I'm really dumb,\" I said softly. She shook her head. \n\n\"No, Kate, I think you are very nervous. You are a very smart woman, and very talented too.\" I blushed. She leaned forward and whispered conspiratorially, \"And I think you are very good looking too. But not like a man at all.\" I could feel my face turn a more brilliant shade of crimson.\n\n\"Thank you,\" I said. \"For the kind words and for putting up with me being foolish.\" Sabine chuckled and nodded. I felt that I should not take any more of her time, so I stood to leave. \"I'd like to see you again sometime,\" I said, surprising myself with my brazenness. \n\n\"I think we will probably see each other again,\" she said smiling. I walked to the door and paused, looking at her. She was breathtakingly beautiful.\n\n\"And I think you are\u2014absolutely the most beautiful woman I've ever seen,\" I said. It was her turn to blush. I waved goodbye and headed back to my office.\n\nWalking to work the next morning, I realized with horror that it was Friday. With the weekend approaching, I might not see Sabine for several days. I thought that I'd better figure out a time to see her that day. Monday seemed much too distant.\n\nAs the morning wore on, a bunch of little chores kept me chained to my desk. I nervously watched the clock tick the day away. That afternoon, I was filing some papers and trying to figure out how to get up to Sabine's office when I became aware that the other people in the office were staring at the door. I turned to see Sabine standing there.\n\n\"Hallo,\" she greeted me. \"I need you for some special work.\" She looked at my four office mates and requested that I be allowed to accompany her for a few minutes.\n\n\"Ja, naturlich, Frau Doktor Chefin,\" our office leader replied.\n\n\"Dankesch\u00f6n vielmals,\" she replied. \"Would you come with me, please, Kate?\"\n\n\"What special work do you need me for?\" I asked as we walked to her office. She just shook her head. When we arrived, she ushered me in and closed the door.\n\n\"I do not need you for work,\" she told me bluntly. \"I would like to see you outside of the office. It is too complicated to try to talk here, I think. Perhaps you might like to get a cup of coffee after work?\" My heart leaped. I agreed immediately. \n\nShe took me to her favorite coffee house. It was like a Disney movie fantasy. Everything was so elegant and sophisticated! I realized that even though Sabine dressed somewhat casually, she always looked very elegant and sophisticated and carried herself with great dignity. ",
        "Looking around at the well-dressed, cultured people I felt even more like a hick, but Sabine immediately put me at ease. I began to understand how someone as young as her could be in such an important job. She was quite remarkable.\n\nSoon our coffee arrived. The \"Fr\u00e4ulein\" brought the cups of \"grosser Brauner\" on silver trays with a glass of water, and Sabine explained the history and traditions of the Viennese coffee houses. She seemed very proud of her city and its traditions. I was really interested, and she began to tell me more of the history of the city.\n\nAfter some time, she dug into her briefcase (like me she didn't carry a purse) and pulled out a pack of cigarettes and a lighter. She smoothly withdrew a cigarette and lit it expertly, exhaling a plume of smoke. I was taken aback. She was so\u2014nice. So cultured. Much too nice to smoke.\n\nSabine saw my reaction. \"Oh!\" she exclaimed, \"I am sorry. I should have asked, I think. Smoking bothers you?\" She waved the smoke away with her hand. As usual, she was direct, but her voice was kind. As she spoke, a thin tendril of smoke curled from her mouth.\n\nI didn't know what to say. \"I\u2014I\u2014I've never really thought about it,\" I stammered. \"I never expected you to smoke, so I think I'm more surprised than anything.\"\n\nSabine smiled. \"Smoking is more normal here than in the States,\" she said. It was true\u2014the anti-smoking crusade had not taken hold. I already had to deal with smoke-filled restaurants and bars. \n\n\"I didn't think that you would be surprised, but it makes sense,\" she continued. \"I'm sorry. Shall I stop?\"\n\n\"It seems like you enjoy it,\" I told her, \"so it's fine with me.\" Actually I was finding her smoking, like everything else about her, intriguing. We spent a couple of hours with our coffee and history lesson. When it seemed like it was time to go. I plucked up my courage and asked if we could get together for some coffee or something on the weekend.\n\n\"Kate, I would absolutely love to,\" Sabine said, \"but I have to go to my mother's family in Linz. It is a big party for my grandparents.\" She smiled. \"We will have to make up for it next week. Yes?\" I nodded and left, feeling fortified to survive the weekend without Sabine.\n\n========================================\n\nThe next week, though, the fates seemed to conspire against us. Jan and Janneke had some child-care issues, and the obvious solution was for me to hurry home early from work to help out. \n\nFortunately, Sabine had given me the number of her private office phone, so I did get a chance to call her to explain. She seemed disappointed. Perversely, though, her sadness made me feel good. We agreed that we would see each other as soon as we could. As the days dragged on with no domestic solution in sight we were limited to a few brief chats squeezed into our workdays.\n\nBy the following week, though, a new baby sitter had been procured, and I was again a free woman. I excitedly phoned Sabine first thing Monday morning, only to find that she was tied up all day. On the spot, though, we made a date for Tuesday.\n\nBy Tuesday morning, I was like a kid waiting for Christmas, wondering how soon I could see her. I got to work earlier than usual, and when I got to my desk, there was a lovely vase with a cheery bouquet of flowers. I opened the card.\n\n\"To brighten your day\u2014the way you brighten mine.\"\n\nI scampered straight to her office. She was putting folders into her briefcase, obviously getting ready to leave. When she saw me she paused.\n\n\"I have a big meeting at 9,\" she said. \"I must hurry.\"\n\n\"Ok,\" I told her, \"I just wanted to thank you for the flowers.\"\n\n\"What flowers?\" she asked innocently, organizing her papers. I was stunned\u2014devastated. She hadn't written the card? I had so hoped that I brightened her days...\n\nThen I saw that she was laughing. \n\n\"You creep,\" I said. \"You scared me.\"\n\n\"I know. It was fun. I hope you enjoy the flowers. I will see you for coffee. Goodbye.\" And she hurried out.\n\n========================================\n\nWe had another delightful history lesson over coffee and the time seemed to melt away much too quickly. After a couple of hours, my heart sank at the thought that our time together would have to end.\n\nSuddenly Sabine asked, \"Do you have any plans for dinner?\"\n\n\"Yes I do,\" I said, trying to look downcast.\n\n\"Scheisse,\" Sabine said. \"It would have been fun.\" She frowned.\n\n\"Well,\" I teased, \"my plans are to have dinner with you. I mean, if that was an invitation.\"\n\n\"Donnerwetter nochmal,\" she said, wrinkling her nose. \"We are now even.\" I just giggled at her.\n\n\"Seriously, I would love to have dinner with you,\" I told her. I wanted to make absolutely sure she understood. This seemed way too good to be true. A smile lit up her beautiful face. \n\n\"I would like that much more than translating a German law book and telling you about Austrian history,\" she replied.\n\nAs we gathered our things and stood to go we accidentally bumped into each other. Spontaneously, we hugged. It felt wonderful\u2014and as natural as breathing.\n\nSabine took me to one of her favorite restaurants and ordered traditional Viennese food along with some really wonderful wine. Even though I pleaded with her to let me treat her, she insisted on paying.\n\n\"Sabine, I feel bad,\" I told her as we left. \"You helped me so much with my work, and have taken me to coffee\u2014and now you are buying me dinner.\"\n\nShe stopped me.\n\n\"Kate, it is my pleasure,\" she said sincerely. \"I have a good job, and you are not being paid for your work. It is right for it to be so. Besides, I enjoy our time together very much.\"\n\n\"Well, thank you again. Thank you for all your help, and for all the time you have made for me. I know it must make the rest of your day more busy.\" She blushed and nodded.\n\n\"But it is worth it,\" she said. \"Very much.\"\n\n\"Well, I want you to know I understand that and appreciate it. And thank you for the amazing dinner. I've had a wonderful time.\"\n\n\"I'm glad,\" she said simply. \"I did too.\" We left the restaurant and stood in the courtyard of the Imperial Palace watching tourists wander about in the evening light. \n\n\"Do you need to get home right away?\" I asked. \"If not, let me buy you a drink somewhere.\" I was fascinated by her, and didn't want to go.\n\n\"Ok,\" Sabine said, taking my arm gently. \"Let's get a glass of wine, my darling Kate,\" she added softly.\n\nAs we walked, she talked excitedly about various spots in Vienna, and how eager she was to show me her favorite places.\n\n\"I am so happy!\" she exclaimed as we walked past the opera house.\n\nI giggled at her exuberance. \"I'm glad,\" I told her. \"But why are you so happy?\"\n\n\"Because I found you,\" she giggled. \"I have been alone, but now I have my Kate.\"\n\n\"My Kate?\" My heart started pounding as those words echoed in my mind. It sounded so possessive. So committed. And we were just friends\u2014hell, maybe just acquaintances. And she was female. She sounded like she was talking about a date.\n\nSo why did I feel so good when she said \"my Kate?\" And her hand on my arm. God, it felt like nothing I had experienced before. Solid. Comfortable. Soothing. Sweet. Perfect. All of this made me incredibly nervous.\n\nWe settled into a cozy wine bar. She ordered us some more wonderful wine. Taking her glass she offered a toast.\n\n\"Auf meine neue Freundin Kate,\" she smiled. \"Wollen wir uns duzen?\"\n\nMy heart skipped a beat. We always spoke English, but it was clear that Sabine meant this as a symbol that we had become good friends. In German, the move to address each other with the friendly \"du\" was a big deal.\n\n\"Oh ja, Sabine. Du wirst immer meine gute Freundin sein.\"\n\nWe clinked glasses and it was done. I felt like the luckiest woman alive; I had made friends with someone very special. Sabine got her cigarettes and lit up. She looked beautiful, even smoking. We talked and she smoked. I was enthralled.\n\nWhen we ordered more wine, Sabine took another cigarette. With an impish grin, she offered one to me.\n\nI had tried smoking a few times before, but never really thought much of it. As I reflected, I realized that I mostly did it to impress some guys that I had been drinking with. I thought that trying to impress guys by smoking was one of the dumbest things I had ever done.\n\nNow, however, it seemed an opportunity to share something with this fascinating person\u2014with my new friend. I accepted one and she lit it. Now, this was something wonderful. I took a hit and inhaled, managing not to cough. It felt good. \n\nI found that smoking with her was much better than when I had tried it with guys. I got a little buzzed from the nicotine. An idle thought came to me: \"What else might be better with her than with guys?\"\n\nI exhaled, shuddering. \"Where did that come from?\" I scolded myself.\n\nSabine reached out and gently stroked my hand. I could feel excitement sparkle through me. She looked into my eyes and smiled. I could tell she sensed what I was feeling. She nodded. \n\nSabine hit her cigarette. \"And what are you thinking now, darling Kate?\" she asked, exhaling a cloud of smoke.\n\nI took a hit myself, trying to collect my thoughts. \"I am thinking of how my mother would scold me,\" I said with a sad smile. \"Smoking. Drinking...\" I let my voice trail off. \"She would make me go to church and pray for forgiveness lest I burn in Hell.\" \n\n\"So you are religious?\" Sabine asked.\n\n\"Southern Baptist,\" I told her. When she looked blankly at me I added, \"Protestant\u2014like hyper-Lutherans or something.\"\n\n\"Oh, I see,\" she said. \"You were raised this way. But now? Are you still religious?\"\n\n\"I guess\u2014sort of,\" I replied \"I guess I'd say that I'm definitely a Christian, but not a Baptist anymore.\" \n\nI regarded my cigarette and the glass of wine\u2014and her hand on mine. \"Considering where I am at the moment it would be very safe to say that I'm not very Baptist anymore. But I'm still religious enough to feel guilty I guess.\" I had never been this open about my faith\u2014or guilt\u2014with anyone before. \"Why now?\" I wondered.\n\n\"Fuck God, \" Sabine grumped, \"The only thing He has done is to enslave women. Fuck him.\"\n\nI gasped. That was the voice of Satan. \n\n\"And so do you hate me now?\" she asked, extinguishing her cigarette. She spoke softly, but her words and her gaze challenged me.\n\nI put out my cigarette too. \"Sabine, I don't think I could ever hate you,\" I told her, \"even if I don't like what you say. Besides we're 'duzfreunden' now, so it's ok.\"\n\nShe reached out and intertwined her fingers with mine. We were now holding hands. It was suddenly very warm in the bar.\n\n\"And if I do something you don't like,\" she continued, \"what would you say then?\" She looked steadily at our interlocked hands.\n\n\"I would probably tell you that I didn't like it,\" I said very softly. I looked at them too. I said nothing.\n\nWe sat in silence for what seemed like a very long time. We just kept gazing at each other, our eyes moving from each other's faces to our entwined fingers, volleying back and forth like a cosmic Ping-Pong match.\n\n\"You have not done this before?\" she asked finally.\n\n\"Wha\u2014what?\" I asked.\n\n\"This,\" she said simply, squeezing my hand.\n\n\"Ah. No. Uh. I mean\u2014I did with a boy\u2014with boys.\" I fell silent. \"But not ever with a girl.\"\n\nSabine nodded. \"And you said you would tell me when you don't like it. Yes?\" she queried.\n\nI couldn't speak. I moved my mouth but nothing came out. My mind, though, was racing 1000 miles per hour. Finally, I just nodded and we smiled at each other. \n\nWe had another cigarette together. Between the sensation of smoking and the feelings coming from holding Sabine's hand, I felt as though I were levitating out of my body. We talked, holding hands and smoking, and the time melted away. Soon Sabine's cigarettes were about gone, it was 1:00 AM and the bar was going to close. \n\nSabine walked me partway home, but finally, tragically, we got to where we had to part. We hugged. I couldn't believe how I felt. I was trembling; overwhelmed.\n\n\"You must tell me if you don't like what I do,\" she said embracing me and drawing me close.\n\n\"I will. I promise,\" I replied, hugging her tightly. She kissed my hair. \n\nI whispered, \"I'm so frightened.\" She kissed my hair again, and then released me. \n\n\"I know,\" she said with a smile. She caressed my hair. \"Sometimes I make you nervous,\" she said simply. I shook my head, afraid that she would not ever hug me again. She dispelled that fear by once again embracing me. \"I will see you tomorrow, my Kate,\" she whispered in my ear.\n\n\"I'll miss you until then,\" I told her. She headed down the steps to the subway. I watched her until she disappeared in the gloom.\n\nWhen I got home, Jan and Janneke were in bed asleep. I tiptoed into my room and undressed, noticing that my clothes smelled like smoke. I hugged my sweater to my face and sniffed\u2014the smell wasn't unpleasant; it reminded me of Sabine.\n\nI dove into bed and cuddled up to a pillow. After tossing and turning for several minutes, I got up and retrieved the sweater, bringing its smoky scent to bed with me. With the pillow in my arms and my face pressed into the sweater I could imagine her presence. I found a little peace.\n\nSmoke. A fog of feelings and thoughts curled through my mind like smoke in a bar. I couldn't understand why I felt the way I did\u2014what these odd feelings were about. \n\nI closed my eyes and prayed for guidance, for wisdom, for understanding.\n\nUp until now I believed romance was something that only happened in movies. In real life, I had friendships and \"hang out buddies\" that morphed into physical encounters\u2014but they never had these crazy feelings attached to them. I had listened to other girls swoon about boys, but never really felt anything remotely like that. I could play up in these conversations\u2014at least well enough to seem part of the crowd\u2014but never fully understood them. I just assumed that I wasn't a very sexual person.\n\n\"Lizzy Lezzie,\" the insult from my school days popped into my mind, then Aunt Kathy and Aunt Gail. Is this what they felt? I knew, of course, that they \"liked\" other women, but I had never really thought about what that meant. They had always seemed so platonic\u2014almost sexless. But that was around their disapproving family. \n\nWhat about when they were alone? Did they hold hands? Kiss? Did they do more? Of course they did\u2014but that was a sin. And of course I was \"normal.\" I could never be that way.\n\nNo. I just had a low sex drive. And I was alone in a strange city and had made a wonderful new friend. I closed my eyes. Sleep continued to elude me.\n\nI started to pray for forgiveness, but stopped when I realized that I didn't know what I was asking forgiveness for. What had I done wrong\u2014except to have some wine and smoke a couple of cigarettes? Suddenly those vices seemed very unimportant compared to the greater sin of...\n\nOf what? Feeling? Needing the touch of another person? A very confused mixture of guilt, anger and sadness flooded through me.\n\nI finally fell asleep as the sun began to rise.\n\n========================================\n\nEven though I was exhausted, I couldn't wait to get to the office. Once there, I immediately scooted up to Sabine's room. Her secretary waved me in immediately. Apparently I was expected. Sabine smiled when she saw me.\n\n\"You look tired. Are you alright?\" she asked. When I nodded, she added, \"Do you need more help with your report?\" We both laughed.\n\n\"I just wanted to say good morning,\" I told her. \"And thank you again.\" I paused. \"But if you're offering, I'm having a little trouble getting the format right,\" I replied. \"Seriously, though, only if you have the time. I don't want to hijack your work.\"\n\n\"It is ok,\" she said, surveying her desk and frowning. She wrinkled her nose in that special way. God, she was beautiful!\n\n\"Mmmmm. Let me work here for an hour or so\" she continued. Then I will come to you and we will finish your project.\" \n\nI reached out and patted her shoulder affectionately, and she covered my hand with hers, leaning her head back and closing her eyes. \"One hour,\" she said with a sigh. \"I will see you in the library then.\"\n\nI went down and collected everything that we would need, and then began organizing my notes so we could get right to work. Before I was finished, Sabine came walking in. She looked a bit serious.\n\n\"What's wrong?\" I asked.\n\n\"Nothing really, but I am upset,\" she said. I stood up and walked over to her. She hugged me. \"I just talked with the Director. I must go away for a few days,\" she said. \"It is part of my job.\" She sat down and I found a chair next to her.\n\n\"How long?\" I asked.\n\n\"A long time. Five days,\" she said, wrinkling her nose again. \"I will be back on Monday.\"\n\n\"That's terrible,\" I sighed. \"I'm going to miss you,\" I blurted out. Then I blushed, suddenly embarrassed by my honesty.\n\nSabine smiled. \"You are the best when you are honest,\" she told me. \"Let's get to work.\"\n\nShe looked over what I had done and seemed genuinely impressed. She made a few suggestions, and gave me one of her reports to use as a template for the format. By the time it was typed up it looked very professional, and the content seemed good.\n\nWe had a wonderful \"farewell dinner,\" but then she had to go get ready for her trip. We walked together, holding hands, as far as we could. Finally we stopped and just stood, looking at each other. Sabine smiled at me, but didn't move to do anything more. I was too frightened to do anything but wait.\n\nAnd then, as if moved by the hand of God, I reached out to Sabine and hugged her. She immediately wrapped her arms around me.\n\n\"Please travel safely,\" I said, holding her close. \"I can't wait until you are back.\"\n\n\"Me too,\" she sighed. We looked into each other's face. She leaned forward and kissed the tip of my nose. My heart hammered in my chest. She kissed my nose again and then released me. \"You will have some time to think,\" she said knowingly. \"That is good. Perhaps we can talk when I return.\" I just nodded.\n\n========================================\n\nI felt at loose ends without Sabine, but decided to take advantage of some of the wonderful things in Vienna while she was gone. On Thursday, I had dinner in a cute little coffeehouse and went to the opera.\n\nOn Friday, I decided to visit the Prater. I stopped home to change clothes, and while I was there, Jan called to say that he was held up at work and wouldn't be home until late in the evening. Janneke seemed upset.\n\n\"It is nothing,\" she said. \"I was alone all day. It is just longer to be alone now.\" She smiled. \"But it can't be helped.\" She looked like she needed a friend, so I decided to stay with her until Jan arrived. It would be better to see the Prater during the day on Saturday anyway. When I saw how happy she was to know that I would stay home, I knew I had done the right thing.\n\nI made a small meal for us. While I did that, she settled down to feed Julius.\n\n\"I envy you, Kate,\" Janneke sighed as Julius latched onto her nipple. \"You are so\u2014free.\" Then she looked at me. I must have looked slightly shocked.\n\n\"No, I don't mean it like that,\" she added hastily, gesturing at her newborn child. \"He is the best thing I have ever done\u2014ever will do,\" she sighed, as he began to nurse eagerly.\n\n\"But you\u2014you can form your life however you want at this moment,\" she said as she stroked her child's head. \"My life's story was written when I looked into Jan's eyes one day.\" She closed her eyes and her head fell back. \"Then we\u2014well\u2014here we are. It is complicated, but we are where we put ourselves\u2014and where we want to be.\" \n\nShe looked at me significantly. I loved how she could be so passionate and honest when she talked. She was very different than Aunt Kathy, but had some of the qualities I loved so much about her.\n\n\"This is where we will be for the rest of our lives. Where we will die,\" she said softly, and paused. \"But you. You are not dying yet. You are still living\u2014changing\u2014growing.\" She looked at me. \"Where will you die, Kate?\" she asked, finally.",
        "\"I don't know,\" I answered softly. \"Maybe alone. I hope not. But I hope to die with God's forgiveness. I want to be blessed.\"\n\nJanneke grunted as Julius suckled harder. \"Blessed. That is good,\" she sighed. \"But better is to be loved. To be loved by someone, Kate.\"\n\nI nodded.\n\n\"But the most sacred thing is,\" she paused, \"the most sacred is\u2014to love. That is why God made us,\" she said firmly. \"Find the person you were meant to love,\" she encouraged, \" and do that will all of your heart and soul. Then you will truly have God's blessing.\"\n\nMoved, I went and sat with her. It became very still in the apartment. Janneke looked down at her child. She gently caressed him, then reached out and gently stroked my face.\n\nThe idea of loving someone unto death now seemed like a very noble calling. I believed I could do that with more zeal than I could muster for International Treaty Law. And the idea of marrying a \"good friend\" and being able to deliver sex on schedule now seemed like the waste of a life.\n\nI went to bed.\n\nWhy could I not stop thinking of Sabine? Why did the thought of living with her make me so happy and excited? I could imagine breast-feeding our baby while she made dinner.\n\n\"Find the person you were meant to love and do that will all your heart and soul.\"\n\nDid it matter that if \"loving\" and \"being loved\" were with another woman? I had been taught that was a sin; but now my heart seemed to be saying something very different.\n\nOh Lord, why hast Thou forsaken me?\n\nJanneke's words kept running through me: \"you can form your life however you want at this moment.\" I realized the truth of those words. I had been taught that sometimes God speaks through the voice of others. I felt that He was speaking to me through Janneke.\n\nBut what was He saying? Follow my heart? Obey His commandments? Janneke was unambiguous, but I couldn't see the path ahead. Who was I meant to love? Was Sabine my guide to eternal salvation or a ticket straight to hell?\n\nI spent a wonderful weekend in Vienna. I imagined Sabine was with me every moment.\n\n========================================\n\nThe next Monday, I dressed more carefully than usual for work. I chose my best pair of jeans and pressed them carefully, then went with a green t-shirt, pink oxford button-down and a blue sweater. I added a small silver necklace, and felt like I was looking pretty good.\n\nI danced my way to the office, humming some Johann Strauss and loving the morning Viennese ambience. When I got there, I tossed my stuff on my desk and headed up to Sabine's office. My heart stopped. It was empty and the door was locked. Not even the secretary was there. Damn. Then a horrible thought: what if she were delayed a few more days?\n\nFeeling suddenly deflated, I began to trudge back to my space. Halfway there, I heard footsteps behind me. I turned, and there she was, standing in the hallway and smiling.\n\n\"Well, I see you are early today,\" Sabine chuckled. I blushed. She looked at me and crooked her finger in a \"come hither\" gesture. When I complied, Sabine led me into her office and closed the door. Placing her hands on my shoulders, she pressed me back against it, and brought her face close to mine.\n\n\"Good morning,\" she said with a wide grin. \"I missed you.\"\n\n\"Same to you,\" I gasped. I reached up and rested my hands on her outstretched arms. She took my hands.\n\n\"Unfortunately I have much work to do today,\" she told me, bringing one of my hands to her mouth and kissing it, \"I have to write a big report. But when we are done, I want to be with you.\" She looked up and smiled. \"Dinner again?\" she asked.\n\n\"Of course,\" I replied. Sabine kissed my fingers, then pressed them against my mouth, transferring her kiss to me. A thousand thoughts immediately began flying around in my head.\n\n\"Ok. Then we must do our work,\" she said with mock sternness. \"I want to keep my job.\"\n\nWe had a lovely \"welcome home\" dinner for Sabine, and afterwards walked around Vienna holding hands and talking. It was such bliss to be with her again. And my heart sang when I saw how she had missed me. \n\nI now understood how beautiful it was to love and to be loved. Yin and yang. Salt and pepper. Horse and carriage. Love and marriage? Well, I thought, let me at least see what this love thing is about before worrying about that. I had my hands full with just that.\n\nWe kept things as they were\u2014holding hands, hugging and kisses on the nose\u2014and allowed our relationship to grow. I now had opportunities to watch Sabine address various UN committees and meetings of international diplomats. She was so masterful and competent, and was treated with enormous respect by people who were all older than her. I knew she would make a real contribution to the world. I was so proud of her!\n\nI also realized that having some random intern running into her office every day to moon over her couldn't be making her look very good. So we became very sensible: as our relationship deepened, it moved out of the workplace and into the wonderfully romantic streets and cafes of Vienna.\n\n========================================\n\nA couple of weeks later, I got an assignment to do a report on child soldiering in Africa and legal bases for intervention. I worked down in the library and became wrapped up in the subject. \n\nI was scribbling notes as I flipped between a couple of books and a German/English dictionary when I felt a presence behind me.\n\nStartled, I jumped in my chair and turned to see Sabine's face right in front of mine. We were so close that our noses almost touched.\n\n\"So. You no longer want my help with your reports?\" she teased.\n\n\"No. I want to save you for more important things,\" I blurted out. I immediately blushed afraid that I might have given her the wrong idea. \"Wrong idea about what?\" my conscience interrogated.\n\n\"That is good,\" she quipped. \"I am available for important things.\" She paused and tapped the memo giving me my assignment. \"But I should tell you that you have been given a very big job. A very big responsibility.\" I looked at her, not really understanding. I had thought this was just another of the menial tasks that came my way.\n\n\"Important? Did you\u2014I mean, why me?\" I asked. She shook her head.\n\n\"I had nothing to do with it,\" she told me bluntly. \"Frankly if I had been asked I would have said this is too important for an intern to do.\" She looked at me intensely. \"What comes from this conference will probably save or kill 10,000 children,\" she said, \"and this report will help set the agenda. Please take this very seriously. It is important.\" That sobered me.\n\n\"But how...\" I began. She cut me off.\n\n\"You last report was so impressive that the group unanimously asked to have you do this,\" she smiled. \"You can't possibly know how proud I am of you, Kate. You remind me of myself when I was younger. I think you will have a great future.\"\n\n\"Wow. Ok, Sabine, I will make this absolutely perfect,\" I assured her.\n\n\"I did not however, come here to talk about work. It is 6 PM and I have not heard from you all day,\" she scolded. I looked at my watch. The day had flown by\u2014I realized that I had been working hard. I hadn't even thought of stopping for lunch. I was starving. \"Let's go to dinner,\" Sabine suggested.\n\nI packed up my work in record time, grabbed my coat and we headed out. This time, she took me to a fun Italian place and ordered salads, pizza, a dish of spaghetti with pesto and a really nice bottle of wine. It was amazing.\n\nAfter we ate, she pulled out her cigarettes and offered me one. I took it and we began to talk, sharing our life stories with each other. My religious upbringing fascinated her, especially as it contrasted with her cosmopolitan roots. She was born and raised in Vienna, and had been exposed to high culture and art since her youth.\n\nWe were soon holding hands as we talked, and I realized that her touch was having greater effect on me as the days went by. It had always been both soothing and exciting. Now it was exciting and arousing. I could feel myself getting turned on. After a time, she took both of my hands and looked into my eyes.\n\n\"Would you like to come see my apartment?\" she offered. I hesitated for a second. Then I realized that I would joyfully visit Hell itself as long as we were together.\n\nWe made our way to her apartment. Once inside, she took me in her arms. This was now a more familiar place, and my inner turmoil was not as great as before. I was able to relax and enjoy the feelings that she aroused.\n\nBy now, I knew that I was head-over-heels in love, but I still didn't know what I wanted to do about it. I just grabbed her and hung on tightly. She was the only thing that I was sure of. My rock, my foundation, my salvation.\n\nSabine's eyes met mine and I became terrified. She put her hand on my cheek and my throat went dry. Our faces were close together. We were scruffy, slightly red-eyed, and smelled like cigarette smoke. \n\nShe was beautiful; I was a mess.\n\nSabine began playing with my hair. \"You have lovely hair,\" she teased. \"It's very like a girl. But you don't seem like a girl in some ways. Why is that, Kate?\"\n\n\"I never wanted to be 'like a girl,'\" I told her. \"But I don't want to be like a boy either. It's complicated, I think.\"\n\nShe began running her hand through my hair, massaging my scalp.\n\n\"Maybe it is more simple than you realize,\" she said.\n\n\"no. no. no.\" I whispered, more to myself than to her. \n\nI was in love and I was afraid. This was dangerous. It might... I might... \n\nSabine ignored my inner colloquy and simply continued to caress my hair. I looked at her in desperation. Help me, Sabine.\n\nHer face was impassive as usual. The soft light made her short hair and slender body seem even more boyish. God, I wanted her so badly.\n\n\"no no no,\" I said softly. Her hands continued to caress my hair, her face impassive. \n\nApparently I was not very commanding. Her caresses deepened. Apparently I didn't want to be. In a burst of honesty, I realized that I was yearning for her to touch more than my hair. My legs felt very weak.\n\nThe ghosts of my past assailed me. \"Katie Ann. Just what do you think you are doing, young lady?\" I could vividly picture mom's voice as she scolded me. Years of Sunday school and religious indoctrination flooded in. Sex outside of marriage is against God's will. It is a sin. And sex with another woman\u2014well, that would be a crime against Nature and God. Unthinkable. I heard the other girls taunting, \"Lizzy Lezzie.\"\n\n\"Kate, you know this could get out of hand. I know you will do the right thing,\" mom's voice told me. Reasonable. \"Trust in our redeemer. You know you can't trust yourself around this\u2014this person.\"\n\nWhy was it so hard to say, \"around this WOMAN?\" Am I that petrified that a woman is touching my hair? Yes, I am. I am terrified. Yes, I love it. I love her. \n\n\"Your hair is so beautiful,\" Sabine sighed, now running both of her hands through it. \"You are a beautiful woman,\" she said, bringing her fingers to my face. She ran her fingers across my features as though she were blind and needed to know what I looked like.\n\n\"no no no,\" I whispered. The phrase had become my Mantra. \n\nI chanted to God. He would know that my heart was pure. I chanted to merciful Jesus, who died for my sins. Dear Jesus, please forgive me for the sins I have committed, and for those I have yet to... For those I am about to? no no no. no no no. no no no.\n\nSabine's hands slipped back into my hair, then ran down to my neck, massaging. Tension and anxiety melted out of me.\n\n\"no no no,\" I chanted, my eyes firmly shut. As long as I didn't look it would be ok. As long as I didn't see that it was another woman, it wasn't queer. I decided that would just keep my eyes closed. If I did that, whatever happened would be ok.\n\nThis can't be happening to me. I can't be feeling these things. I can't... \n\n\"Kate?\" I heard Sabine's beautiful voice whisper to me. It was close, like a guardian angel. \n\nI opened my eyes and her face was right in front of mine. My heart turned to water as I realized what she was going to do.\n\n\"no no...\" my chant was interrupted as her lips closed on mine. She was wise. She didn't press her advantage, she kissed just long enough to let me feel it\u2014longer than a friendly kiss, but still a nice, safe, closed-mouth kiss.\n\n\"no...\" I began, then stopped. Who the fuck was I kidding? \n\nSabine kept her face near mine, but waited for me to decide. Plan A was shot to hell. What was Plan B? I considered in silence, then decided. \n\nI simply looked into her eyes, and allowed her to see into me.\n\nThe kiss was gentle and slow\u2014like a comforting warm bath. It gradually deepened, loosening and peeling away layers of self-deception and doubt, the way warm water loosens and peels away scabs. \n\nAs our tongues met, I felt warmth, joy and happiness along with the arousal. I felt tears of joy and relief running down my face. Sabine instinctively knew what I needed. She kissed away my tears and took me in her arms. She was crying too.\n\n\"I am so glad I have found you,\" she said, kissing me again. \n\n\"Me too,\" I whispered, blinking away another burst of tears. I grabbed her and held on tightly. We kissed, deeply this time. My heart was racing.\n\nMy hands went to Sabine's beautiful face and held it as we kissed, marveling at how small and delicate it was\u2014so unlike a man's. That made my nipples go instantly erect. \n\nI noticed how her tongue fit my mouth; how delicately it danced and probed; how feminine and light and delightful and sexy and playful and... Fuck, now I was soaking wet. \n\nShe kept kissing and I kept dropping away old pieces of myself, making room for new sensations and feelings to fizz up like bubbles in a champagne glass.\n\nEncouraged by the ease with which I succumbed to her kisses, she guided me to the sofa. She continued to kiss me and began caressing my body. It felt wonderful, but in spite of my desires, her caresses made me tense and anxious. \n\nWhen her hand brushed my legs and trailed up toward my crotch, I felt the arousal drain out of me, replaced by anxiousness and fear.\n\nSabine stopped and looked into my eyes. She nodded and smiled. \"I think we must take a break, yes?\" she asked lightly. I nodded. \"How do you feel?\" she asked.\n\n\"I feel wonderful,\" I began, \"but I think I'm not ready to be touched like that.\" Sabine smiled and hugged me.\n\n\"Thank you for telling me what you didn't like,\" she whispered into my ear.\n\n\"You're not upset?\" I asked, fearful that she would be angry with me for teasing her.\n\n\"No,\" she replied softly. She pushed me back and regarded me. \"I know this is new for you,\" she told me. \"And if you say you're not yet ready for touching, it tells me two things.\" She smiled.\n\n\"What does it tell you,\" I asked, returning her smile.\n\n\"It says that you like being kissed,\" she paused and looked questioningly at me. I nodded.\n\n\"I like it when you kiss me. I like it a lot,\" I told her. She nodded like a professor approving of her student's answer. \n\nShe continued with her lesson. \"It also tells me that if you're not ready now, that in time you will\u2014you could\u2014be ready,\" again she regarded me.\n\nI chewed my lip. \"I don't know about that,\" I answered honestly, \"it's a big step.\" Sabine said nothing. \"It's\u2014for me, Sabine, it's very confusing.\" She took my hands in hers.\n\n\"I don't want to confuse you,\" she said firmly. \"I want to you to be happy. You must do what is in your heart\u2014not what is in mine.\" \n\nWhen she said that, my eyes filled with tears. She saw and smiled. \"Yes, darling Kate. It's true. I love you,\" she said softly. \"I have fallen in love with you.\"\n\nI took a deep, shuddering breath. \n\nI had come a long way in a very short time\u2014and now that I had experienced it, I was pretty ok with the idea of kissing a girl. But to have this woman telling me that she was in love with me? That was getting into pretty deep water. Too fast. I was at a loss for words. \n\nFinally I blurted out, \"It's not fair. If you were a boy, I wouldn't have any trouble saying, 'Oh Sabine, I love you too.' Except\u2014except that I would never feel this way with a boy. With you I feel this way, and I can't... It's just very complicated for me.\"\n\nShe leaned forward and kissed my cheek, taking a quick peek to be sure it was still ok. I couldn't help but smile. \n\n\"Ok. I think we should get a glass of wine and we can talk some more,\" she said. \"No need to have complicated feelings\u2014let's enjoy our time together.\" I smiled and nodded.\n\n\"I think that we must give you\u2014give us\u2014time,\" she continued. \"I think, darling Kate, that you must,\" she paused, searching for words, \"Scheisse. Doch...\" She wrinkled her nose and I fell even more deeply in love with her. \"Vers\u00f6hnung...\" \n\n\"Reconciliation,\" I chimed in. My vocabulary was improving thanks to my research.\n\n\"Yes. You must reconcilliate? No\u2014reconcile\u2014your feelings,\" she looked at me questioningly. I couldn't tell if she was asking if her English was correct, if I understood what she had just said, or if I agreed. It didn't matter. I nodded\u2014I got the idea, and she was right.\n\nI followed her into the kitchen and she got us some wine. We talked, drank wine, smoked and shared more about ourselves. I learned that she had had several woman lovers\u2014never a man\u2014and had been \"very much in love\" with one of them. I told her that I had only bumbled around with men, and had never really been in love.\n\n\"I always thought that romance just wasn't important to me,\" I told her. I now knew that wasn't true at all.\n\n\"And so what did you learn now,\" she asked in her direct way.\n\n\"I learned that I have feelings I was never aware of,\" I began. \"And that my feelings are making me frightened and confused.\"\n\n\"So Kate, what do you do when you are frightened and confused?\" she asked.\n\n\"I pray,\" I replied instantly. She looked very surprised.\n\n\"Praying is important for you, isn't it?\" she asked finally. When I looked at her questioningly she took my hands. \"It is important for you, so I must understand,\" she explained. \"I have never prayed\u2014not unless in church. Only for\u2014one might say only for the rituals. Do you understand?\" I nodded.\n\n\"That's how most people pray,\" I told her. \"But I was raised to pray all the time. Prayer is the best way to be close to God\u2014to understand how to live through Him,\" I tried to explain. She frowned. I tried again.\n\n\"Sorry. I forgot that you and God are not on speaking terms at the moment. Think of it this way. Praying can be sort of like thinking out loud, or like talking with a really good friend\u2014a friend you can tell anything to. A friend who wouldn't judge you and who wants to help you.\"\n\n\"But this 'friend' is only in your mind?\" she asked. \"And does your 'friend' really not judge you? And you must pray out loud?\" The questions tumbled out of her.\n\n\"Well, think about it. If He is really just in my mind like you said, God can be whoever I need Him to be, right?\" Sabine looked confused. \"And judging by how my life is going at the moment, I hope to Heaven he isn't the judging type,\" I added. That got a chuckle.\n\n\"But\u2014this makes no sense,\" she said. Her nose wrinkled briefly.\n\n\"But it doesn't matter,\" I interrupted her. \"When you pray enough, it becomes real. It's hard to explain, but it works for me. I always feel better, and it helps me a lot. I know that is real\u2014it's true for me\u2014so I do what works. That makes sense, doesn't it?\"\n\nSabine regarded me silently\u2014probably trying to figure out just how much of a nut case I really was, I thought. Finally, though, she said simply, \"Kate, would you pray for me?\"\n\n\"What?\" I asked. \"What do you need?\" I had only every prayed for people who were in distress.\n\n\"I want to see you pray,\" she clarified.\n\n\"Oh, I see. It sounds like you want me to pray WITH you. Or more like, you want to pray with me?\" I looked at her. Now she seemed uncomfortable.",
        "\"I only want to watch you do it,\" she said softly.\n\n\"It would seem silly,\" I told her, \"and besides, you wouldn't understand anything that way. It's something you sort of need to be part of.\" She shifted uncomfortably in her chair. I patted her hand. \"Don't worry,\" I assured her, \"I can do all the talking, you'd just have to be in it with me.\"\n\nSabine looked around as though trapped. As I watched her, I realized that she was feeling many of the same things that I was when she touched me. Unfamiliar, uncomfortable feelings. It was my turn to take the lead. \n\n\"So Sabine, I think you're feeling now the way I was feeling when you touched me,\" I told her, taking her hands. \"It's ok. We don't have to do anything you're not comfortable with.\"\n\nA look of comprehension came over her face and she smiled. \"I was just thinking the same thing,\" she said. \"For some reason it is very scary,\" she added softly, \"I don't know if I'm giving up a part of myself.\"\n\n\"Maybe God will help us understand,\" I said, winking at her.\n\n\"Ok. I want to know about your praying, so we must do this,\" she said, making up her mind. \n\n\"Are you sure?\" I asked.\n\n\"You were brave enough to kiss me. Fair is fair,\" she replied. She looked at me. \"Go ahead,\" she commanded.\n\nI looked around at the wine glasses and cigarettes. This seemed the wrong place for prayer.\n\n\"Ok,\" I told her, \"but not here.\" I looked around. \"There,\" I said, pointing to the living room. \n\nWe went into the living room and I adjusted the light so we had a good atmosphere. \"Sit here, next to me,\" I said, and she complied. She was a bit tense, but was also fascinated.\n\n\"You are very different now, Kate,\" she told me.\n\n\"Really? How?\" I asked.\n\n\"You are very\u2014er, definite. In charge,\" she explained. I realized that she was right. Now I was in my element. I took her hands.\n\n\"Sabine, before we start, you have to promise me something,\" I said seriously.\n\n\"Yes,\" she nodded.\n\n\"You have to know that this is not a game for me. So even if you don't believe in anything that happens I need for you to respect it.\" I paused. \"Oh, and it works better to pray out loud, so that's what I'm going to do. Ok?\"\n\nShe nodded. \"Ok. I am serious about wanting to know you better,\" she told me. \"I don't know what I will think or believe, but I want to learn about you. This is no game.\"\n\nI took her hands. \"Close your eyes,\" I commanded. She did. Closing my eyes, I began.\n\n\"Ok, here goes.\" I waited in silence, gathering my thoughts. \"Dear Heavenly Father, we come to you this evening as two confused, frightened souls,\" I began. I paused again, and as always, the words just came into my mind.\n\n\"We feel what is in our hearts, but we struggle to understand. We desire to be your servants but our path is hard to see. The complexities of life overwhelm us. We are blinded by our selfishness and earthly desires. We ask that you help us to find clarity. We ask that you show us the way, that we may walk your path...\" Then I understood.\n\n\"...that we may walk your path together. We come to you now to seek your blessing and your guidance as we come together.\" \n\nI heard a small gasp from Sabine. She tried to pull her hands away, but I held on tightly.\n\n\"We ask that you help us to understand, and in so doing help us to find peace and security where we are now frightened. We ask that you help us to understand our hearts and feelings so that we may honor each other and you.\"\n\n\"Kate,\" Sabine said softly, \"that is very beautiful.\" She thought I was done, but I shook my head. She fell silent. I felt tears run down my face from my closed eyes.\n\n\"And, Dear Lord, I thank you for bringing this beautiful person into my life. Someone who has helped me understand what it is to love. Someone who has made my days brighter. For that I thank you from the bottom of my heart.\n\n\"This we pray in the name of you, our Father, and in the name of your son, Jesus Christ, our Lord and Redeemer. Amen.\"\n\nI returned to silence, not daring to open my eyes. I gradually became aware that Sabine and I were gripping each others hands tightly. That broke the spell, and I smiled and opened my eyes.\n\nSabine was looking at me with a tender smile. Tears ran down her cheeks. \"Oh Kate,\" she sighed, \"no one has ever said such beautiful things to me.\"\n\nI giggled and wiped my eyes. \"I don't want to burst your bubble, darling, but I was talking to God\u2014not to you,\" I reminded her.\n\n\"But you were...\" her voice trailed off and she thought for a moment. \"I think I can understand a little now, about your praying.\" I smiled and nodded. \"Not much,\" she quipped, \"but a little bit.\"\n\n\"How do you feel?\" I asked. She considered for a moment.\n\n\"Good,\" she replied, seeming surprised at herself. \"I feel\u2014good. Yes.\" In spite of herself she beamed.\n\n\"See?\" I said. \"It works. I feel good too. I feel wonderful\u2014well, except for one thing.\"\n\n\"What is that,\" she asked, suddenly concerned.\n\n\"I need to be in your arms again,\" I said.\n\nShe instantly enfolded me in her arms and began kissing me. We necked passionately for a long time. It was wonderful.\n\nI fell asleep on her sofa. In her arms.\n\n========================================\n\nOver the next weeks we became a couple, and I dealt with accepting my feelings while navigating my first real relationship. Sabine was wonderfully patient. She sensed that I was still not ready for anything beyond hugging and kissing, but we both delighted in what we did. We felt at peace with being in each other's arms. Sabine got crazy with desire a few times, but the idea of having someone as innocent as me was obviously a huge turn-on for her, so she bided her time.\n\nWe continued in our comfortable mating ritual: occasional flirting at the office, dinner and walks around Vienna, and then talking, caressing and kissing until the wee hours of the morning. I stayed with her a few nights, but almost always went back home, mumbling my prayers for guidance and forgiveness as I walked through the darkened streets.\n\nI introduced Sabine to Jan and Janneke, and we began to hang out with some of her other friends. We finally got around to calling each other at home\u2014which hugely simplified our communication. We also let a few select people at the office\u2014like Sabine's secretary\u2014know what was going on. \n\nI had the hardest time when we were in public. It seemed that we were constantly being looked at with various types of knowing smiles, disapproving frowns or sly curiosity. Sabine seemed not to notice the reactions of others, but I noticed and would blush whenever I felt others staring at us.\n\nOf course this all meant that I saw much less of Jan and Janneke. They thought it was wonderful that I had found \"a friend\" as they artfully termed Sabine. I'm sure they would have been astonished to find out that our relationship was as innocent as it was, but they were obviously very accepting of what was happening\u2014in fact, it seemed that Janneke was fascinated with our relationship.\n\n========================================\n\nOne day at the office, I got a call from Sabine's secretary asking me to come up to the office. When I got there, Sabine brought me in and plopped down in a chair, looking miserable.\n\n\"My darling, I hate to have to tell you this but I must go away again,\" she began.\n\n\"Oh no!\" I cried. \"Where? How long?\"\n\n\"Much too long. I just learned that I must go to Helsinki for two weeks.\" She wrinkled her nose and began to chew her lip. \"Fucking hell,\" she grumped, kicking the leg of her chair.\n\nI groaned. Two weeks? It seemed like forever\u2014much too long to be apart from her. I could barely make it through the nights alone.\n\n\"Why do you have to go for so long?\" I asked. \"Can't you send someone else?\" She shook her head.\n\n\"No. This is an important conference\u2014also about helping children. We will try to get governments to agree to laws against trafficking in girls,\" she explained. \"It is my job, but it is also important work\u2014and I want to do it. Even if it means that we must be apart.\" I nodded. I couldn't argue with that.\n\nMy mind, however, immediately began racing to see if I could figure out how to get to Helsinki. Sabine saw me thinking and answered my thoughts. \n\n\"Darling, I don't think it would work for you to try to come with me,\" she said with a sad smile. \"I would love it of course, but\u2014how shall I say this? Some of the people at the conference are from places that would not understand why you were not a man. And besides it would be very expensive to go to Finland.\"\n\nI frowned. In my little Viennese cocoon I hadn't had to deal with the kind of social problems my sexual orientation could create. I began to see that my life was going to get complicated.\n\n\"Even phoning to Finland is hellish expensive,\" she continued. She stood up and took my face in her hands. \"I will return as soon as I can. Believe me, this will kill me worse than you.\"\n\nThen she thought a minute. \"Oh God,\" she said, and got wide-eyed. \"When do you leave for America?\" \n\nI had been making plans to return home for a week at Christmas. I had originally thought of two weeks, but my current plan was for six days. That seemed the maximum I could stand to be apart from Sabine, even to see my family.\n\nWe got a calendar and checked. She would be returning the day I would have to leave\u2014we would be apart for almost an entire month. On the spot, I made a decision.\n\n\"I'm not going home,\" I told her. \"I want to be here when you get back.\"\n\nShe laid her hand on my arm. \"Dear Kate, you should be with your family for Christmas, no?\" she said softly. \"You would be here in Vienna far from them.\"\n\n\"But you would be here\u2014wouldn't you?\" I asked.\n\n\"Well, yes,\" she blushed. \"If you wanted, we could spend our Christmas together,\" she added gently. It seemed so\u2014intimate\u2014to be making these plans.\n\n\"But you have family here,\" I reminded her.\n\n\"Yes. I will visit them.\" She suddenly brightened up. \"And you could come with me. My family would love you. I know they would,\" she added excitedly. \"And we could spend all our time together, my darling Kate.\" Somehow we were holding hands again. \n\n\"Then I will call my mom today and tell her,\" I said. \"She's got a new boyfriend, so I don't think she'll mind too much.\" Sabine winked. \n\n\"And what will you give as the reason you are staying?\" she asked.\n\nI suddenly realized that divulging a budding love affair with a woman via long-distance phone call might be a bad plan.\n\n\"I think I'm going to tell her that I've met someone,\" I said. \"I'll let her assume you're a 'he' until\u2014er\u2014until sometime later.\" I shook my head. At that moment, I realized just how complicated my life was going to get. Well, let it be complicated then. And I can only deal with one thing at a time, I told myself.\n\n\"Well, I am glad that I am a 'she' and that you are a 'she,'\" Sabine told me firmly. She leaned forward, and kissed me. \"Until dinnertime, my love,\" she said.\n\nWe had a quick dinner so she would have time to get ready for her trip. Helping her pack felt like officiating at my own execution, but we also had great fun. And knowing what she would be wearing made me feel like we would be closer while she was gone, too.\n\nBut all too soon, we knew that we had to part. She wanted to walk me home, but I told her to get to bed and rest for her trip. We were going to have to say goodbye sometime, and she might as well be comfortable. And I knew I would need some quality prayer time.\n\nSabine took me in her arms. I embraced her eagerly. I had changed so much over the past weeks\u2014confusion was giving way to desire. We kissed deeply and for a long time. When we parted, we both were flushed. Again we went at it, and I felt a warm flood of arousal course through me. When we came up for air, we continued to nibble and suck on each other's lips.\n\nShe gently pushed me away.\n\n\"My love, either you must go now, or you must make love with me,\" Sabine said. I seriously considered undressing, but something still made me hesitate. She saw the look on my face and kissed me again.\n\n\"Shoo,\" she said playfully, \"while you still have your virtue.\" I blushed as I realized that my \"virtue\" was unlikely to survive much longer in any case. I reached out and kissed her again. \n\nShe smiled, then turned serious. \n\nHolding me close, she looked deeply into my eyes and said, \"I love you, Kate. I have completely fallen in love with you.\" A few weeks earlier, those words had me in a cold sweat. Now, though...\n\n\"I love you, too, Sabine. I love you with all my heart. Please come back safely,\" I told her. We kissed one last time.\n\nI prayed hard on my journey home.\n\n========================================\n\nThe first few days after Sabine left were rough. I felt so lonely and at loose ends that I could barely stand it\u2014and I had no appetite at all. I worked as late as I could and then spent hours walking around the city. It was good to see everything, and to be in the crisp evening air.\n\nI also went to the opera and theater on cheapo tickets. Not only was I broadening my horizons, but becoming part of the Viennese scene made me feel like I could understand Sabine better.\n\nOne evening I saw Mozart's \"Cosi fan tutte.\" The comic plot was complicated and involved love affairs gone wrong, but in the end all of the lovers were reunited and sang about how life doled out good and bad in equal measure. The music was wonderful, and somehow the story made me feel that all would be well with the world. \n\nI emerged from the beautiful opera house into the elegance of a Viennese evening. Light snow was falling. I had only seen snow a couple of times before, and watching the flakes dance in the breeze made my spirits soar.\n\nI suddenly felt really hungry. I headed to the Italian place Sabine had taken me on one of our first dates and had the first real meal I'd had since she left. That really brightened things up. \n\nThen, out of the blue, I missed smoking with Sabine. \n\nI wandered around until I found a small shop and, for the first time in my life, bought a pack of cigarettes. I dared not smoke in the house, so I found a bench in the Stadtpark and had a cigarette, watching the snow and thinking that maybe Sabine was having a cigarette of her own somewhere in Helsinki. I went home and slept soundly.\n\nI also spent more time with Janneke, helping her to clean and organize the house before the holidays. As we did the housework, we found time to talk about many things and found ourselves becoming very close.\n\nOne morning, Jan mentioned that he was going to be late at work. I offered to come home early to help Janneke with Julius. She seemed very grateful. \n\nWhen I got in, she was sitting on the sofa with her shirt open, feeding her baby. We greeted each other and I sat and watched. We talked a bit, and I was really fascinated by seeing Julius nursing hungrily at her breast.\n\n\"Kate,\" Janneke said, \"you are making me blush.\" I jumped, and realized that we hadn't said anything for quite some time\u2014and that I had been staring at her breasts. I looked up, blushing.\n\nShe smiled. \"He is hungry today,\" she continued, stroking Julius's wispy hair.\n\n'I\u2014I'm\u2014ah, er, your baby is so beautiful,\" I stammered, my eyes returning her breasts. \n\nMy conscience cringed at the lie. Her baby was good-looking, but I was totally entranced by her breasts. They were so wonderfully full and rounded, with lovely nipples. \n\nI was spellbound\u2014enthralled\u2014shit, who was I kidding? I was aroused. Turned on. I blushed again as I realized that I was becoming wet. I was having carnal feelings watching a woman nurse a child. \n\nAnd worse, it was the wrong woman. \n\nJulius finished feeding, and Janneke burped him. He exploded with one fantastic belch. It seemed to reverberate through the apartment. We giggled and Janneke cuddled hm. He was soon fast asleep.\n\n\"So much a man,\" she sighed. \"Eat. Burp. Be satisfied. Then sleep.\"\n\n\"And what about the women?\" I asked, my voice trembling.\n\n\"As always we women must look to ourselves,\" Janneke sighed. \"This is how humans survive.\" She sensed my discomfort\u2014and my desire. Her breathing became deeper. She smiled, but her face got more intense.\n\n\"Janneke,\" I said softly. Now I could sense her desire. All her questions about my relationship with Sabine now made sense. \"How does it feel to touch a woman?\" she had asked.\n\nI felt my face flush. My eyes traveled from her breasts up to her face. Janneke's eyes locked on mine and she nodded.\n\n\"It is fine, Kate,\" she sighed, gesturing toward her breasts, and making no effort to cover herself. \"I am a mother, but I am also a woman. And you are here,\" she paused and looked me in the eye. \"Yes. You are here. There are times when one must just let go, I think.\"\n\nI didn't know what to do, so I took her hand and kissed it.\n\n\"I am very happy now, Kate. I am happy that I can share this moment with you.\" She reached out and embraced me. I felt her breasts press against me.\n\n\"Janneke,\" I began, then stopped. What was there to say? \n\nShe released me, and I leaned back and looked at the baby. He was sleeping peacefully. \"I love how you fed him from your breasts,\" I told her.\n\n\"I am his mother,\" Janneke replied simply. She moved, bringing her breasts closer to me. She cupped them, gently caressing herself. She closed her eyes and sighed. Her fingers moved to her nipples.\n\n\"I'm going to be terrible at that,\" I quipped. \"Mine aren't big enough.\" Janneke frowned. \n\n\"You hide them,\" she scowled, gesturing at my chest. \"Sweaters. Sweatshirts. Scarves. Has anyone ever seen your breasts, Kate?\" she asked.\n\n\"Not really,\" I replied. \"I don't like to show them,\" I told her. \"I don't think they're very pretty. Besides, who would want to see them?\"\n\n\"Would you believe that I would?\" she asked. She sat there bare-chested, caressing herself. As I watched, her nipples became erect.\n\nI removed my shirt. It seemed the right thing to do. My nipples had been hard for a long time, and Janneke stared them. I didn't shy away.\n\n\"Yeah,\" I told her, \"I have small breasts and don't like to wear a bra, but my nipples need\u2014er, coverage. So the great sweatshirt mystery is explained,\" I said with a smile. \n\nShe nodded, but now her eyes were locked on my breasts. Her nipples continued to stiffen. She reached out and began to caress my chest, my breasts.\n\nOh Jesus. There was an electric hum in my head and I felt light\u2014as though I could float into the air. Maybe I didn't love Janneke, but I was doing pretty damn well in the lust department. \n\nI felt a surge of energy arc through my genitals. I could tell that if I allowed her to get to my nipples we'd be off and running. It would be totally explosive.\n\nAwesome. I was burning with desire, and was ready to be unfaithful to the person I loved. With another woman. Somehow, God\u2014or my mother\u2014or both\u2014found a way to talk some sense into me.\n\nI put my shirt back on.\n\n\"What does it feel like to be a wife?\" I asked\n\n\"It is wonderful, but it can be a curse,\" Janneke whispered, reaching out and embracing me. \"But it is more wonderful than anything you can imagine.\" Tears ran down her cheeks as we embraced.\n\nI will serve you, Lord, for all my days.\n\n========================================\n\nJan came home at last, to the great joy and relief of everyone. Janneke made sandwiches and some tea so that we could sit together. I lingered just a bit, then decided to leave them to themselves. \n\nI needed some time to relax too.\n\nI got ready for bed, worked up both physically and emotionally. As I got into my grey flannel pajamas and headed to brush my teeth, the phone rang. I heard a muffled conversation in German, then Janneke called out, \"Kate! Someone has phoned for you.\"\n\nI couldn't imagine who it could be. I took the receiver. Static crackled in my ear.\n\n\"Hallo. Are you surprised?\" Sabine's beautiful voice bizzed through a bad connection.",
        "\"What? Sabine? Hell yes, I'm surprised,\" I cried. \"Is everything all right? I'm so glad you called!\"\n\n\"No. No everything is not all right. I am here freezing in Helsinki and you are somewhere else. Fucking hell,\" she grumped. I smiled. I could imagine how she was wrinkling her nose.\n\n\"Watch your language,\" I teased. \"I am still innocent.\"\n\n\"We are going to change that,\" Sabine assured me. \"And soon after I return. I have not been able to forget our goodbye kiss, my love. You have put me under a spell.\"\n\nI blushed crimson as I felt myself become wet. Again. This was getting to be a habit.\n\n\"This must be costing you a fortune,\" I said, changing the subject.\n\n\"Yes, but only a small one,\" Sabine replied with a chuckle. \"Besides, it keeps my spirits up so it is worth it.\"\n\n\"Please hurry back. I miss you,\" I blurted out. There was a long pause.\n\n\"I love you, Kate,\" she said suddenly. I realized that Janneke was looking at me.\n\n\"I love you too,\" I answered softly. Janneke smiled and headed to bed.\n\n\"Remember that when I return, ok?\" Sabine said with a soft giggle. She hung up.\n\n\"I will. I promise,\" I whispered as I hung up the phone.\n\nI brushed my teeth and tidied up a bit before getting into bed. I lay there, mind racing. My hormones were racing, too. I tried prayer, then some deep breathing, but I still felt like I had been plugged into an electric outlet. Sensations zinged through my entire body. To my chagrin, I realized that they were zinging mostly straight into my groin.\n\nSleep was going to be impossible in this state. I decided to use the trick I had learned in college for times like this.\n\nI had, of course, been taught that \"touching yourself\" was totally sinful. As I got older, though, Nature kept asserting her desires and by my sophomore year my willpower was about gone. I could feel that it was only a matter of time before I succumbed to the sin of masturbation.\n\nOne evening after Bible study, I was in such a sorry state that I asked one of my best friends to pray with me. When she asked what I needed help with, I explained my situation. She smiled and we asked God to help me direct my natural feelings in healthy ways.\n\nThen she took me aside and described what she did to as she put it, \"aid the Lord's work in ridding me of the lust of Onan.\" I tried it that evening and found that it was very effective and gave great peace.\n\nNow I knew that I would need to assist the Lord once again.\n\nI crossed my ankles and pressed my thighs together. Carefully positioning my hand above my genitals (so as to avoid the sin of touching them), I pressed down on my mons\u2014hard\u2014with the heel of my right hand and added the left for additional pressure. I began to gently rock my hips.\n\n\"Dear Lord, please deliver me from the sin of lust.\" I intoned in rhythm with my rocking. I knew the sinful feeling might increase briefly but the prayer and the rocking would soon do the trick.\n\nI began to fall into a relaxed, almost trance-like state.\n\nThen, faintly, I began to hear Jan and Janneke. Their bedroom was right next to mine and I could occasionally hear them talking. Now it seemed like they were arguing\u2014at least having an animated conversation. I stopped my \"prayer\" and tried to make out what the disturbance was.\n\nThey were talking in Dutch. From hearing them around the house, I knew that some words are like German, some are like English\u2014and some aren't like either. Unfortunately, they seemed to be using a lot of the \"none of the above\" ones at the moment so I couldn't really make out what they were discussing.\n\nJanneke seemed to be asking for something\u2014not exactly pleading, but it was important. Jan seemed resistant. Finally I heard, \"...den Kate macht ons horen...\" and I understood. \n\nJanneke was in the same state as I was. She needed Jan\u2014and he was nervous with me right next door. I felt my face flush\u2014only partly from embarrassment.\n\nI began rocking my hips again, this time without the prayer for deliverance. I kept listening.\n\nBed clothes rustled and there were kissing sounds. More rustling, and then Jan sighed, \"God.\" I could imagine that Janneke had got naked. The bed creaked as though they readjusted. Janneke whispered something, then just heavy breathing. Jan grunted. She had him going.\n\nNow I heard Janneke gasp. More rustling.\n\n\"Komm,\" Janneke sighed. The bed creaked. Soft rustling. Another gasp from Janneke. Then a soft grunt. \n\n\"Ahhhh. Daar.\" Another sigh and a groan. The bed began creaking rhythmically.\n\nI pictured Janneke on her back, her legs spread wide for Jan. Opening up like a flower. Open. Available. A good wife.\n\nAnd Jan. Driving into her. Strong. Powerful. In command. Slowly and deeply entering his woman. Possessing her. Pleasuring her.\n\nI imagined that I was Jan. I would mount Janneke\u2014my woman. I would use my body to pleasure her. To give her what she yearned for. To make her complete.\n\nI matched my rocking to the slow, rhythmic squeaking of their bed. I was Jan; moving, thrusting. With her. In her. Joined to her.\n\nMy movements slowed as my mind wandered back to the days of \"Lizzy Lezzie.\" \n\nLezzie? No\u2014just a human being in love. A woman who feels.\n\nJanneke began to moan softly. The bed was creaking a bit faster and she was starting to get into it more. She was getting off with her husband\u2014but I knew she had yearnings for a woman. \n\nLezzie? Lesbian? Of course. I felt a hot flush burn through me from head to toe.\n\nI stopped my rocking and gripped my crotch firmly, realizing that the Lord would fail to accomplish His work tonight. So be it. Women had needs, too.\n\nIt was time to fulfill my destiny\u2014to work with intention. I did what I had only experimented with a couple of times before. I reached inside my pajama bottoms\u2014and committed The Sin. \n\nI used two fingers together, sliding down the lips on the left side, then back up to the mons. I made circles on my mons as my eyes widened and I felt my nipples go totally erect. Then I slowly slid my fingers down the lips on the right. And up; and circles; and down. And on. And on. World without end. Amen.\n\nI could feel my clitoris become hard as I heard Jan and Janneke quicken their pace. Beyond reason, I pulled off my top, and then, impulsively, my bottoms too. Fully naked, I kicked away the covers, exposing myself completely as my fingers resumed their wonderful, sinful dance across my genitals.\n\nI was again on top of Janneke. Pleasuring her. Inside her. As I circled my mons, my fingers slid down and slipped inside my slit.\n\n\"Ahhhh,\" I cried as the warm wetness enfolded me and I found my clitoris slippery and achingly erect. I began circling directly on it. And now I was really dancing, my hips joyfully thrusting, celebrating the pleasure that was coursing through me.\n\nThe creaking from the next room was becoming more intense, and I moaned and thrust and danced along with Janneke. I spread my legs as wide as I could, bending my knees, opening wide. Now I needed to be entered. To be taken. \n\nFinally, my angel came to me.\n\nThe One.\n\n\"I love you, Kate.\" Sabine's words came to me. \"I love you, my Kate.\" How I loved it when she called me \"my Kate!\"\n\n\"I love you, Sabine,\" I sighed. \"My Sabine.\" Now she was there\u2014with me. My arousal burned more brightly, but my soul became calm. Sabine was here. Now I could be taken. All would be well. My destiny would be fulfilled.\n\nSabine was sure of herself, masterful, expert. She was past yearning, seeking and experimenting. She understood herself and her desires. Of course. She was a lesbian.\n\nMy breathing quickened and again a flush surged through my body. \n\nIt was so simple. \n\nShe was a lesbian. Gay. Queer. She is a lesbian. Sabine is a lesbian. A beautiful, wonderful, perfect lesbian.\n\n\"I love you, Sabine.\" I called out as I felt myself rising. It always works better to pray out loud. I began gasping out my prayer.\n\n\"Lesbian...lesbian...\" in that moment it was the sexiest word I could think of. Waves of aching desire pulsed through me as my hand worked furiously. I began arching upward, thrusting, seeking...\n\nAs I danced on the edge I imagined Sabine. She was a lesbian. She was on top of me. \n\nOUR bed was creaking as Sabine used her body to pleasure her woman\u2014a lesbian.\n\nTo pleasure her woman. Her lesbian woman.\n\nMe.\n\n\"Oh, God!\" I cried as my back arched and the spasm of a huge orgasm seared through me. I jerked myself nearly to a sitting position, then fell backwards until another powerful jolt caused me to lunge upward again.\n\nI grabbed my pussy, pressing down as hard as I could. My legs shot out, straight and tense and I squeezed my thighs together as I began shaking with a second orgasm. My head snapped back and my back arched.\n\n\"God. Shit. Ah\u2014fuck.\" I gasped and grunted as I rode through the final throes of it. I fell back, breathing hard, exhausted from my labors.\n\nYes. Yes, God, it is true. I am a lesbian. I am in love with a lesbian\u2014I am beyond reason needing to be with my woman. Not just to be with her; not just to kiss her. I want to make love with her. Body, mind, heart and soul. With her. With my woman. \n\nPlease, God, help me fulfill my destiny. Please, please, please. Grant me this one thing and I will serve Thee forever.\n\nImpulsively, I grabbed my pillow, wadded it up and tucked it between my legs, squeezing it hard between my thighs and pressing down with my hands. I curled up in a fetal position and pulled the covers around me like a cocoon. Tears flooded down my face. \n\nFor an instant, reason returned and I was petrified that I might have been heard. The sounds from the other room, though, told me they were still hard at it. A 747 could have landed in the living room unnoticed.\n\nThe creaking reached its peak as I heard Janneke gasp and cry out with her orgasm. A few moments later, the bed clunked wildly as Jan grunted and found his release.\n\nHeterosexuals and homosexuals alike had found peace.\n\nThe house fell silent.\n\nAnd I knew I was gay.\n\n========================================\n\nAs the Christmas holiday\u2014and Sabine's blessed return\u2014approached, Jan and Janneke made plans to visit their family in Holland. I was happy to house-sit for them, and so everyone prepared for the holidays in their own way.\n\n\"Goodbye, Kate. You're sure you know everything you need?\" Jan asked for the umpteenth time.\n\nI looked forlornly at the immense stack of papers they had given me: contact information, schedules, emergency numbers and God-knows-what-else. My most recent UN report on proposed changes to international law was more concise.\n\n\"Thank you so much, Jan. Yes, I'm sure I'll be fine. And I have your brother's number. I promise I will call if there are any problems at all. Please don't worry about me. Have a great time and a wonderful Christmas.\" \n\n\"Ok. Bye then...we have to hurry to the airport.\"\n\nJanneke gave me a big hug. She had been in a wonderful mood for the past few days. For that matter, so had I. They bustled out with luggage and baby, leaving me alone in the apartment.\n\nOk. Four days to go. I can do this. \n\nI quickly realized, though, that while coming to terms with my sexual orientation may have stilled my psychological turmoil, it had unleashed a torrent of raw, animal lust. Now that I had allowed myself to be comfortable with the idea of making love with a woman, I was consumed with desire.\n\nI sat and tried to read. That didn't go well. I kept thinking of Sabine. I missed her terribly. \n\nI began to wonder if I could get away with smoking a cigarette in the apartment, but finally decided against it. I settled for hunting up the pack I had bought and setting it on the table next to me. That was good\u2014it was almost like being close to her.\n\nI imagined where Sabine was at the moment. Probably chairing an important meeting somewhere. Making the world a better place. She would be so commanding, so poised, so elegant. And she would be so beautiful.\n\nBeautiful...yes, she was so beautiful. She made me ache with desire.\n\nAbsent-mindedly, I began touching my breasts, almost swooning with pleasure. I came to my senses and stopped, blushing and looking around guiltily. \n\nOf course, I was alone in the apartment, sitting in the living room. Right where I had so brazenly pulled off my shirt for Janneke. I recalled how doing that had made her nipples go erect. As I remembered her breasts, I could feel my own nipples go rigid.\n\nI pulled off my shirt, gaining free access to my body. Now Sabine's image danced before me, sitting where Janneke had been. I teased my nipples to furious erection for her. Fuck, yeah. Now I was into this with the right woman.\n\nI crossed my ankles and began squeezing my thighs together, wriggling around on the sofa, dancing for Sabine. This time, though, my prayer was for the touch of my woman, not for deliverance.\n\nThe phone rang, abruptly ending my lustful ballet. I hesitated, unsure whether to answer. Then I remembered Sabine's surprise call. You never knew. I lifted the receiver.\n\n\"Hello?\"\n\nA torrent of Dutch burst forth. I couldn't understand a word.\n\n\"I'm sorry, I don't speak Dutch\u2014just English and some German,\" I apologized.\n\n\"Oh. I am very sorry. I am Jan's brother. May I speak with him?\"\n\n\"Oh hello. I'm Kate\u2014I'm living with them for a little while. I'm sorry, but they just left for the airport.\"\n\n\"Oh! Great! Er. Do you know what time they are arriving to Rotterdam? I am to pick them up.\" After consulting my array of schedules, I found the answer.\n\n\"Yes I do. Their schedule says they arrive Rotterdam at 7:45 PM.\"\n\n\"Thanks so much. Have a beautiful Christmas.\"\n\n\"You too. Bye.\" I hung up. \n\nI would have a beautiful Christmas, I thought, if I didn't die of horniness before it got here. I was still raging with desire, half-naked, my nipples insanely erect. My hands would not stay away from them; I had scarcely set the phone down before I went at it again. \n\nI caressed, squeezed and pulled on them, sending waves of pleasure through my body. My ass clenched and released and I thrust my hips forward and back, as though fucking the air. I squatted, feeling the pressure of my genitals against my jeans.\n\nI knew I had to get a grip on myself. \n\nNo, not like that, I scolded my hand as it clutched my groin. But squeezing my pussy did offer enough relief that reason could take hold for a moment. I realized that I could spend the next four days masturbating non-stop and still be crazy. I lusted for Sabine. Just getting off wasn't what I needed. I needed her. I needed her to touch me.\n\nMy mind clouded over again. Masturbating might not be the answer, but a couple dozen orgasms couldn't hurt, right? Somehow, my pants had fallen off. I was now completely naked.\n\nI had never stimulated my nipples and clitoris at the same time. I wondered what that might do. Since I was going to be getting more active sexually, I should learn more about my body, I told myself. That seemed sensible. Reasonable.\n\nI heard myself moan out loud. I just needed to finish myself off. To orgasm. Come. I groaned again, gasping for breath. Reasonable? What the fuck? There was no reason involved anymore. My pussy was in control.\n\nI squeezed my nipples hard, then sent one hand downward, exploring. I had found my clitoris easily a few nights ago. Was that just beginners luck? It seemed to have vanished. \n\nWhere was the damn thing? Maybe up here...YES! Holy Fucking Christ it was amazing! \n\nI stood there, masturbating like a pro for about 30 seconds, then my legs buckled and I dropped awkwardly to the floor in a half-squatting, half-kneeling position. I sheepishly acknowledged that I still hadn't worked out all the kinks, but I was getting the hang of this masturbation thing quickly. I knew I could make myself come in a couple of minutes.\n\nI looked at the clock to see the time, curious about how just how quickly I could come. But then I started to wonder out how many hours before Sabine returned. I could do a countdown. That might be fun. My brow furrowed as I tried to do the math in my head, temporarily distracting me from my pulsating genitals.\n\nThe phone rang again. Dammit. \n\nI again hesitated\u2014but maybe it was another question about Jan and Janneke's travel. It might be important. And the Guinness world record for world's fastest orgasm would only be delayed for another couple of minutes. That activity was now front and center in the day's agenda. I was going to come, the only questions were when, how quickly, and how many times.\n\n\"Hello?\" The sound of a loudspeaker blaring some odd language filled the phone.\n\n\"Hallo to you. What are you doing later tonight?\"\n\nMy heart stopped. It was Sabine.\n\n\"Oh my God! I'm so glad you called.\" I almost burst into tears. \"Later tonight I will be wishing that I was in your arms.\"\n\n\"Well, you will be. My plane lands at 9:00. And I will want some dinner. Would you like to have a late dinner with me?\"\n\n\"How? Where are you\u2014I mean. YES! I want to have dinner with you. Anytime. Midnight. I don't care. Then I want hug you. But. Um. You're not supposed to be coming back yet.\" The words tripped over themselves coming out of my mouth. I was still breathless from being on the brink of climax.\n\n\"I know, but I got my work done as fast as I could so I could leave early. I had to fly standby from Helsinki via Tallinn and Warsaw. One more hellish flight on fucking Aeroflot and I will be back with you.\"\n\nI couldn't speak.\n\n\"Kate?\" Sabine asked. \"Is everything all right?\"\n\n\"I'm crying, I'm so happy!\" I exclaimed. \"Yes everything is all right. Just as long as you get back to me.\"\n\n\"Ok. Not even the fucking Russians will stop me. I will call you when I get to my apartment, ok? I love you.\"\n\n\"Oh God, I love you too,\" I cried. \"I love you so much, Sabine.\" \n\nAfter we hung up I began scrambling around like a lunatic, trying to pick out what to wear, grabbing stuff for my shower, figuring out what to do. The idea of masturbating now seemed absurd. It would just delay my getting ready to see Sabine.\n\nThen I got a grip on myself and looked at the clock. 4:45. I realized that I had hours before she arrived. Sabine wouldn't be at her place until 9:30 at the earliest\u2014then it would take me 20 minutes to get there... \n\nI immediately decided not to wait for her call. I'd just plan to arrive at her house at 9:30 and wait there. What was I going to do except go crazy anyway? I was hyperventilating.\n\nI showered carefully, and put on her favorite outfit: jeans, the blue t-shirt, pink button-down and green hoodie\u2014all freshly ironed. And the silver chain that she said was sexy. \n\nAfter taking time to be as perfect as possible for her, I looked at the clock. 6:00. Fuck it. I laced up my boots, grabbed the pack of cigarettes and headed out, unable to stay still any longer.\n\nAs I opened the door and turned out the light I felt a sudden urge to pray. I closed the door and knelt.\n\n\"Dear Heavenly Father, please guide my steps tonight. Please help me to be your faithful servant always. Please watch over me. And please, Dear Lord, bring my Sabine home safely. In your name. Amen.\"\n\nIn the evening gloom, the dark stairwell seemed ominous and creepy. As I descended, weird, demonic shadows played on the walls\u2014the perfect atmosphere for a sinner's descent into Hell. I heard distant doors banging and the clash of the metal gate of the elevator. I broke into a cold sweat and hurried down, as though Satan himself were at my heels. I fled down the entry hall and burst open the door.\n\nAnd emerged into Magical Vienna. Snowflakes twinkled down, and the brightly lit streets were filled with people laughing and celebrating. Oh, beautiful, wonderful Vienna!\n\nI ran through the streets, filled with joy and feeling light as a feather. I stopped in front of the opera house, then ran around catching snowflakes on my tongue, giddy with the knowledge that I was going to see Sabine\u2014and that I was not cringing from the idea of her touch.",
        "And there, on the Ringstrasse, in the very heart of one of the great cultural cities on Earth, I said it out loud:\n\nI. Am. Queer.\n\nSo be it. I again ran around catching snowflakes on my tongue: a dumb, crazy, American lesbian who was giddy at the thought that she would be fucking a wonderful Austrian girl. \n\nI had no idea what that really meant, or what to do\u2014but I knew that it was going to happen or I would die trying this very evening. The Lord would have to look out for Himself until tomorrow at least. And maybe for a long time afterward. Well, one step at a time.\n\nFinally I headed over to Sabine's apartment. I knocked\u2014no answer. Of course. It was way too early. I slowly walked around her neighborhood, going into the stores where she shopped, tracing her route to work and everything else I could think of. I found a cute little shop and looked for a present. I found an adorable teddy bear for her.\n\nAfter a long time, I returned to her apartment. I knocked again\u2014no answer. Fuck. Ok. Teddy and I took another, longer lap of the neighborhood, this time with horniness singing its siren song through my entire body and soul. My hands were shaking with nervousness, anticipation and desire.\n\nA third time. Knock\u2014no answer. Are you fucking kidding me? I headed down the hall, wondering where to walk this time. Then I heard a clunk behind me.\n\nI turned, and the door opened. It was her. Just like I had dreamed\u2014but so much more beautiful and sexy. God, she was beyond belief. I dropped the bear.\n\nI ran to her and we embraced as though we wanted to crush each other. I bit her lip. She sunk her teeth into my neck. And then we were kissing, tongues swirling, dancing\u2014and now, hips grinding. God, oh fuck we needed each other. Two dying souls needed each other.\n\nWe parted, burning with a hunger that had nothing to do with food.\n\n\"We should get something to eat,\" Sabine whispered. \"I haven't eaten all day.\" Her voice was quivering. I had no capacity to do anything except bend to her will. We rescued teddy and went to eat.\n\nWe headed to \"our\" Italian place. It was close and good. We had pizza and pesto\u2014our usual. And we had wine. We ate in record time, hardly speaking, just wolfing down food, eye gazing and grabbing onto each other to assure ourselves that we were not dreaming.\n\nAfter we ate, Sabine pulled out her cigarettes, but I shook my head. We headed straight back to her place. She found a bottle of wine and started to open it, but I just reached for her and we began kissing. I felt desperate. I was insatiable.\n\nShe gave in eagerly and we dropped to our knees, tongues dancing in each other's mouths. Then we started licking each other's lips in between deep kisses. Then nipping gently. Then biting. Devouring. We became like animals, rolling into a groping, kissing, biting, sighing growling heap on the floor. \n\nSuddenly we stopped, looked at each other and began giggling uncontrollably. Our faces were damp with each other's saliva. Then we fell silent, held each other's faces and gazed deeply into each other's eyes. We kissed once more and relaxed into a cozy embrace.\n\nSabine wobbled into the kitchen and returned with the wine and two glasses. She plopped down on the floor with me and we drank, our eyes never leaving each other. She scooted closer and we were right next to each other. She was scruffy and red-eyed from her long day of travel, and smelled like cigarette smoke. I was freshly showered, well put together, and was desperate with desire.\n\nShe was still beautiful; I was still a mess.\n\nHer face, as usual, was impassive. Boyish. Her hands began to caress my hair. I closed my eyes, giving in to her touch. She began kissing me again. As our tongues met, I felt warmth, joy and happiness along with the arousal. \n\nShe paused, gauging my reaction. It suddenly dawned on me that she had no idea of my experiences over the past week. When we parted, I had been uneasy with too much physical contact. She held back, not wanting to push me into something I wasn't ready for. Well, things had changed.\n\nI grabbed her hair and pulled her face to mine, kissing her deeply and hard. I burned with desire. She looked at me with astonishment. I just smiled and nodded and she came back for more.\n\nSoon, she was kissing me hard, aggressively, demandingly, and I returned her ardor with compound interest. She pushed me back and pounced like an animal, biting my neck and chest, alternating the nips with deep, passionate kisses.\n\nHer bites became harder\u2014it was like mating with a young wolf. Yes, I thought, a wolf. Canine. Masculine. Not a tiger. Not feline.\n\nMy wolf-woman continued to prey on my quivering body, and I yielded completely. Surely she knew she had me by now\u2014that she could pull down my jeans and take me. Surely she knew. She just seemed not to care about completing the conquest of the woman-virgin she now had gasping in her arms.\n\nNo, she was only focused on giving me pleasure; sensations that kept fountaining up like an endless geyser. \n\nShe held me down, one paw firmly against my chest. Now she was kissing and nipping my neck again, and I was gasping and writhing under her. I moaned and cried out for her to devour me\u2014to consume my body and soul.\n\nPushing my hair aside, she nibbled my earlobe, and I felt another warm flood between my legs. By pure instinct, my back arched and my hips thrust upward, pushing my groin against her thigh. I wrapped my legs tightly around her and began humping\u2014an action born out of pure animal need. I wanted her to unzip me, to tear me open and to see every part of me.\n\nNo. She continued to kiss every square millimeter of visible skin, patiently guiding me toward our common goal. I relaxed as I realized that she would take me there. She was helping me, as one helps a child take her first few steps.\n\nAt last she unbuttoned my shirt and pulled it away. Her hands slipped to my back as she reached underneath my t-shirt, looking for the bra clasp. When she found that I wore no bra, her eyes dilated and she made a growling sound deep in her throat.\n\nHer furious, predatory animal lust became even more savagely intense. And it was all directed at me.\n\nIn any other setting I might have been afraid and put off, but here? Now? Her look set me aflame. I grabbed her shirt and tore it off. Her bra gave way instantly and her small tits swung free.\n\nShe pressed her leg hard against my pussy and yanked off my t-shirt, moving her mouth down to my erect nipples. I felt her hot breath as she gasped at their size, then she closed in and sucked one into her mouth.\n\nChristmas in Heaven cannot compare to that moment. I swooned as she began to suckle on me sending arrows of pleasure spearing into my groin. I remembered my own efforts a few hours earlier. They were laughably feeble by comparison. I moaned\u2014crying out my pleasure and desire. Just as I had fantasized, Sabine was indeed an expert lover.\n\nShe remained at my breasts forever, and I lost myself in pleasure. She continued to suck, allowing me to be her lover, her mother, her daughter, her friend, her nurse\u2014to flow through every permutation of womanhood, filling my soul even as she set my body aflame.\n\nBy the time she was removing my pants, I was beyond caring about anything except giving every atom of myself to her. I could not live unless every fiber of me was unveiled and made totally available to her. \n\nI should have been embarrassed at how wet my underwear had become\u2014but with her it was a sharing of my complete desire for her. \n\nI delighted in the look of wonder on her face as she touched me and found me gaping, hot and wet. Without hesitation, her face pressed fully into my musky wetness and her tongue instantly found my clitoris, my being, my soul. I felt like I was flowing into her mouth.\n\n\"Praise God from Whom all blessings flow. Amen.\"\n\nThe Doxology surged through me as I fucked my hips up into Sabine's eager mouth. I was become Saint, Sinner, Whore, Child of God. Bitch. And more: Lesbian. Homosexual. Queer. \n\nI finally surrendered to being just Kate\u2014a woman who was loving Sabine with all of her being.\n\nGod has accomplished wondrous works indeed. And the day he invented the clitoris was one of His best. Sabine relished mine, alternating between licking and sucking it. When she settled into gliding up and down in a steady, rhythmic flow I reflected that date of the invention of the tongue was also on the short list of Best Days Ever.\n\nI had a blessed 30 seconds of relief; I was finally being touched where and how I needed it most. Then Sabine's fingers slipped into me and I felt an unfamiliar pressure as she probed up and forward. Involuntarily, my hips jerked upward.\n\nThen something was swelling inside me and the rumblings of a massive volcano began to boil up. Heat and pressure surged through my genitals as my back arched and my hips began to thrust rhythmically. I was going to erupt. Violently.\n\nI tried to tell her to stop\u2014I could feel that I was going to piss everywhere\u2014but I couldn't make a sound. I reached down with one hand, trying to stop her. My hand fluttered uselessly then fell away as my hips quickened their spastic dance. I felt like my entire body was quivering. Then she pressed firmly with her fingers and I had no choice: I had to bear down. I did, and then burst open.\n\nI fell into a bottomless warm pool as waves of liquid warmth surged out from my genitals, radiating through my body and into my limbs. It felt like simultaneously giving birth and being sucked back into the womb. \n\nWaves of pleasure ran through me and I could feel myself flooding out to Sabine, my love, my soul. I cried out as my back arched and my hips thrust even higher. Her fingers pressed, and another fit of spasms tore through me. I was tearing apart. Bursting.\n\nIt finally ended, and I fell back, exhausted. Dazed. Then I began weeping. I sobbed uncontrollably, overcome with emotion. Sabine crawled up, took me in her arms and held me as I cried. She began to cry too. The frayed ends of our spirits met, knotting our souls together.\n\nHer face was wet with my fluids and our tears. She kept holding me and kissing me and telling me that she loved me. I cried myself out and we cuddled there covered in my fluids and snot and tears. It seemed horribly messy.\n\nWhat we had found together, though, was the kind of love that people dream about. Who cares about a little snot, sweat and tears? I giggled. \n\nEven Winston Churchill would approve.\n\nSabine helped me up and guided me into the bathroom. She ran a beautifully warm shower and we hopped in and washed each other, kissing all the while. Our soapy hands roamed freely, sometimes lingering with sexual intent, but more just exploring and savoring each other. By the time we were done, we were wonderfully clean, very turned on and more deeply bonded than ever. We dried each other, and she led me to her bed. It was freshly made with clean sheets.\n\n\"I made it before I left,\" Sabine explained. \"I wanted our first time to be perfect.\" She shook her head. \"But I think we got too carried away,\" she added, gesturing to the living room.\n\n\"It was perfect, Sabine. More perfect than you will ever know,\" I assured her. She got into bed and I joined her. As we got in, the bed creaked slightly and I thought of Jan and Janneke. The idea of Sabine's bed creaking as we made love got me very aroused.\n\nWe began kissing again, snuggling into the warm sheets and into each other. I think we may have fallen asleep in between bouts of kissing, or we may have just kissed for hours and hours. I only know that every time I was aware of anything, Sabine's face was there and we kissed. And I was in Heaven.\n\nAgain she got on top of me, but as she began to play with my clit, I would not let her go down. I needed her with me. \n\nShe understood and penetrated me with a finger\u2014gentle and soft. She worked me, every sense alive to my responses. \n\nSoon, she realized that I needed more, and a second finger was added. Better. Her fingers began curling and I arched my back, wanting her to find that magic spot again. The bed began creaking in rhythm with her hand, and I became extremely aroused. It was happening\u2014the Lord had heard my prayers. Our bed. My woman. Taking me. I spread my legs wide\u2014it was just as I had imagined it, except better.\n\nShe held her fingers still, teasing me, making me fuck against them. I grunted with the effort and pressed down hard, wanting to bury her whole hand in me. Immediately a third finger entered. When I moaned, a fourth followed instantly. \n\nNow I was fucking my hips and begging, and the bed was creaking wildly. She smiled and shook her head as if to say, \"not yet.\" She kept me dancing, twirling on a tightrope over the Canyon of Bliss.\n\nMy pussy was on fire with desire and I could only arch my back and fuck against her relentless hand. As my begging turned into moans, Sabine's thumb expertly slid up and found my clitoris, trapping it between her thumb outside and her fingers inside. She pushed on me and I flew off the tightrope, spinning out into oblivion.\n\n\"I'm coming,\" I gasped, wide-eyed.\n\n\"You're fucking right you are,\" she replied, pressing firmly. I again burst into 10,000 million pieces. \n\nReassembly, however, was quicker and much less traumatic this time. I was home\u2014with my lover.\n\nWe began again.\n\nSabine again reached between my legs, but now I needed to explore her. I pushed her on her back and began kissing her, slowly working my way down her neck. She seemed to protest\u2014but only briefly. She yielded, and it became Christmas morning for little Kate.\n\nLike a child tip-toeing downstairs to peek under the tree, I began to slowly investigate the treasures that awaited me. I became fascinated with the details of her. The texture of her skin; her taste; her smell. \n\nSabine's shoulders were quite broad and square, and I loved licking along her collarbones, tracing the strong outline of her upper body. She had well-defined muscles in her arms, and sensing that she was strong and powerful made me giddy with excitement. \n\nShe didn't shave and I loved kissing under her arms, then nibbling along the sides of her body. And then up onto her slender tummy, and then\u2014oh yes, and then to the undersides of her breasts and finally to the nipples. I loved sucking and nibbling on her nipples, taking my turn to be mothered by her. She stroked my hair and pressed me to her bosom, to her heart\u2014all tenderness and softness. Then, as my tongue swirled around, she would growl with animal lust. All woman. All mine. \n\nI made the circuit of her upper body several times, until she was writhing and scissoring her thighs with desire. I took the cue and began working my way downward, beginning my journey to the Promised Land. The fertile expanse opened before me, ripe and gaping. The soft hair of Sabine's legs tickled my chest as I slid down her body, bringing myself face to face with her most intimate area.\n\nThen I saw the most wonderful present that awaited me. Santa had saved the best for last.\n\nIt seemed to have a magnetic pull: I felt my face being drawn to it. I touched the outer wrappings and heard Sabine sigh. I pulled them apart slowly and carefully, not wanting to disturb the treasure within.\n\nI extended my tongue and gave an experimental lick. Slightly strange tasting, but also wonderful. I tried again, this time running my tongue up and down her lips. This was getting better. I enjoyed the taste, the feel\u2014everything about it. Again, I ran my tongue up and around, covering the outer lips thoroughly. Oh yes, this was wonderful. I did like girls\u2014from head to toe. Yep. I was definitely gay.\n\nSabine groaned. \"Kate, you are fucking killing me,\" she sighed. That got me back on task. Where was I? Oh yes...\n\nI found another set of wrappings within the first. I gently used my hand to open her wider. Then I could finally see my real present: the lovely jewel within. Her clitoris extended from its hood, fully erect. \n\nI licked her inner lips and a soft moan escaped her as she grabbed the sheets with her hands. Then I slid my tongue upward and began to experience the clitoris-tongue combination as giver. \n\n\"Tis more blessed to give than to receive.\"\n\nAlmost immediately, she began moaning, a low, guttural growl of pure desire. I just kept licking up and down her shaft, trying to remember what she had done to me. My novice efforts seemed to meet with some favor, as she moved her hands to my head, clutching my hair and holding it firmly in place.\n\n\"Ja,\" she gasped, lapsing into German. \"genau. nicht \u00e4ndern,\" telling me that I had found the exact spot. I kept licking in a steady rhythm, scarcely daring to breathe, wanting this to be absolutely perfect for the woman I loved beyond anything.\n\nHer body quivered, and I reached a finger down to her vagina, circling her opening. Her moans rose in pitch. \"Fuck yes, Kate,\" she began, then grunted, \"ahhhh. Scheisse. Weiter! Weiter!\" she returned to German, urging me to continue. I would not have stopped in any case.\n\nAlmost immediately, her ass and legs became tense and her head snapped back. I recognized the now-familiar signs of an impending orgasm.\n\n\"Ahhh. Ja...und...JETZT,\" she cried out, telling me exactly when her orgasm started. Her hands held my head firmly as she ground her hips up and she shook with the spasms of her climax.\n\nI slid upward and we began kissing passionately. Soon, we were lost in each other again, swimming around ourselves, finding new possibilities for touching and tasting each other's essence. Exhaustion finally overtook us, and we simply held each other, our mouths pressed together, physically unable to stop kissing. We somehow drifted off to sleep for a short time.\n\nI awoke with Sabine's tongue slowly running over my lips. I opened my mouth, and we were back into our eternal kiss. Halfway between sleep and waking, halfway between nuzzling and making love, halfway between complete relaxation and arousal, we floated together.\n\nSabine's hand trailed down my body and found my clitoris. Under her expert fingers, it swiftly became erect and my half-awake state instantly galvanized into urgent desire. I needed to feel her, and reached between her legs. She was wet too, and swiftly opened for me. I got my finger on her clit and began circling it in imitation of her work on me.\n\nWe caressed each other, gazing into each other's eyes, wondering who would come first. It became a contest\u2014who would blink first? I am very competitive by nature, and this contest excited me\u2014but she had years of experience playing with pussies and I was a novice. I had no chance.\n\nHer eyes blazed fiercely as she circled my clit, making it achingly erect. The she smiled slyly as she relaxed the pressure and slowed almost to a stop. Her finger slowly coaxed pleasure out of me as I squirmed. I could feel my clit get more erect as it seemed to reach out for more contact. I could feel myself getting flushed. My nipples popped into full erection.\n\nSabine's lip curled into a little sneer. She slid two fingers inside me and put her thumb on my clit. I succumbed. And the wolf-woman returned. She rolled me on my back, holding me down again, ravaging me again. I was powerless.\n\nI felt myself swelling inside again. I knew exactly what she was going to make me do. Again I was going to erupt.\n\n\"Du wirst wieder ausspritzen.\"\n\nAusspritzen. A wonderfully descriptive word: \"to spray out.\" Yes, I was going to be spritzing aus. Very soon now. I moaned loudly. She kicked the sheets out of the way so they wouldn't get too wet.\n\nThis was now becoming comfortable, familiar territory. Sabine led my dance. Twirl here, spin there. She turned me inside out. Filling me, urging me upward.\n\nThe bed was squeaking again. I could imagine how Jan had fucked Janneke. Moving up and down; in and out. Bringing them to orgasm. Yes. And how he spritzed into her. Flowing out and into his woman.",
        "Now my woman and I were together and our bed was squeaking. It was time for me to spritz aus for her. \n\nI prayed that I could do it again. Instead of messy and off-putting, it now seemed very intimate. She knew my body and how to make it respond. And I wanted her to have total access to all of me\u2014and to control me completely. Total surrender, total union.\n\nI saw Sabine's pert breasts bouncing in rhythm with her arm as she fucked me. Further down, I saw her beautiful, sexy pussy. Yes. She was a woman. I was going to climax with a woman. That meant that I was a lesbian. For sure. No wonder about it now. Just clarity. Certainty. Passion.\n\nMy inner muscles clenched as I bore down. A lesbian.\n\nMy back arched and my hips rose. A lesbian.\n\nMy orgasm hit, and as the waves of pleasure coursed through me, I could feel myself giving my fluids to my lover. Gushing out. Ausspritzen. Giving everything I had.\n\nShe accepted my gift eagerly, welcomingly. And then we were kissing again, and the world was perfect and complete and content. Except that we could not get enough of each other.\n\nNow I was the one who thirsted. I needed to taste her again, to help her go where I had so recently been. As I moved downward, though, she intercepted me.\n\n\"Nein, liebchen,\" she murmured. \"I need you with me. Oh God, I need you with me, Kate.\" I instantly wrapped my arms around her. She smiled. \"Let me make it another way this time,\" Sabine said gently.\n\nMy professor had another lesson in store for her eager pupil.\n\nShe gently pushed me on my back, then raised one of my knees, keeping my foot on the bed. She mounted my up-thrust leg, pressing firmly against it, and began moving rhythmically back and forth. She took my hands and placed them on her ass. I got the idea and helped her press more firmly against me.\n\nWe smiled at each other as we played together. Now it was Sabine's turn to dance for me, giving herself to me, yet still in control. \n\nI was her eager audience, her supporting cast. I felt her swell open, then she began making my leg wet with her juices. Her face set with concentration and she began breathing more heavily, working herself harder against me. I watched, spellbound, as she moved through her response cycle.\n\nShe groaned and my leg became very wet. Sabine desperately tried to press down harder. Her mouth fell open and she got a faraway, desperate look in her eyes. Wide-eyed she looked down at me, imploring.\n\nI pressed my leg upward firmly, and my hands gripped her ass. I began urging her hips to move faster. She was surrendering to me at last, allowing herself to need me in this most vital of moments. \n\nI did not fail her. Within seconds, a bright crimson flush spread across her chest.\n\n\"Ich komme,\" she gasped.\n\n\"Alles f\u00fcr mich,\" I answered. \"Ich liebe dich.\"\n\n\"Ach. Ich komme...ich komm'...und...JETZT,\" she gasped as she began shuddering.\n\nTogether, we began another magical journey through a woman's orgasm. And in that moment, with Sabine shuddering and grunting and swearing as I held her, I realized that it didn't mater who was doing the coming. \n\nWe would always be in it together. \n\n========================================\n\nWe remained lovers for the rest of that magical year and stayed together for several years after I returned to the States. Unfortunately time and distance took their inevitable toll and we went our separate ways. Barely a day goes by, though, that I don't think of her. \n\nShe left me with a broken heart, beautiful memories, tons of frequent-flyer miles and a smoking habit that took years to break. It was easy to rid my body of the nicotine, but every time I lit up I was back in Vienna with Sabine. And it took me years to kick that habit.\n\nWhen I think of her now, I realize that I was lucky enough to have found my soul-mate for this lifetime. And maybe it's fair to say that I was lucky enough to have lost her. My Sabine will be always young, beautiful and my first, magical love.\n\nWe lived every emotion possible with and through each other. \n\nWe did well.\n\nStat rosa pristina nomine, \n\nnomine rosa tenemus. \n\nSabine.\n\n[And what is left of the rose \n\nis only her name. \n\nSabine.]"
    ],
    "authorname": "KatieAnnBB",
    "tags": [
        "lesbian",
        "romance",
        "loving couples",
        "masturbation",
        "oral sex",
        "g-spot"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/sabine-43"
}
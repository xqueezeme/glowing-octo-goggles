{
    "title": "The Ponytail Express Ch. 13",
    "pages": [
        "Ponytail Express\n\nChapter 13: Interrogation Techniques\n\nWith Oni about to impale herself on his diamond hard erection, Fred was struck by a pair of truths. First, the interrogation of Tandy. In the movies, it was standard fare for both good and bad guys to intimidate and torture the prisoner. For Fred and crew, wanton, hedonistic sex was required. With Oni's juicy pussy inches from his spit-greased cock, along with Deb locked in a passionate embrace with Mia while they played a game of tonsil hockey, the wanton aspect was covered. The hedonistic part was Tandy, tied to a chair while eating Deb's pussy.\n\nThe second truth concerned the developing nature of his pheromones. His bodily fluids performed their magic on the biochemical makeup of a woman, convincing them he was the most desirable male on the planet. His pheromones incorporated elements of each woman's scent, adding to his, creating a \"super scent\". Recent urges led him to fear this new super-scent was influencing him.\n\nThe silken voice of Oni brought him out of his reverie.\n\n\"Now Fred, you need to keep your cock hard so it can properly kiss my womb.\"\n\nHer voice, prompted by a look at her body along with a whiff of her signature scent, sufficed hardening his cock. He watched a magic trick as his dick disappeared into Oni's needy pussy.\n\n\"mmmmhhhhhfffffred!\"\n\nHer voice was music to his ears. Their eyes locked as she slid herself down his rod, her dark eyes normally piercing, now needful, pleading.\n\n\"So good!\" she cried, emitting a cross between a laugh and a sob.\n\n\"Fuck, you're so tight, Oni.\"\n\n\"Almost. There.\" She said between moans of pleasure.\n\nFred grabbed the exotic vision by the ass while the other held her hand. By exerting pressure on her ass, he could further invade her tight crevice.\n\n\"Mold my pussy into the shape of your dick, Fred,\" she begged, tears rolling down her cheeks. Goosebumps dotted her flesh. Their hands squeezed each other tightly.\n\n\"Fuck, you're so sexy, Oni.\"\n\nShe blinked in rapid succession, her body spasming in orgasm. Legs buckling, she bottomed out, her ass kissing Fred's balls with a wet, slapping thump, causing her to cry out in sexual bliss.\n\nFred leaned forward, embracing her with one arm, since Oni had his other in a death grip as she rode out her orgasm. Her pussy spasmed, squeezing his cock in all the right places, causing him to swell with desire.\n\nHe nuzzled her neck, kissing it wetly before bouncing her on his cock, applying a short staccato rhythm, using quick strokes while keeping her as completely full of him as possible. The noises Oni made were like mana from heaven, urging him onward. The exotic vision turned her mouth into Fred's neck, kissing, biting, and moaning as he rearranged her insides. Her second orgasm, unaware her first wasn't over yet, approached like a freight train.\n\nFred's own orgasm was imminent. Enjoying full control of Oni's body, he kept administering short, swift strokes, his rhythm gradually increasing. His balls slapped her pretty, heart-shaped ass.\n\n\"My life for you, Fred,\" she murmured into his neck reverently.\n\nAfter that, Oni descended into a nonsensical version of both English and her native language.\n\nClose by, Mia whinnied in orgasm, but Fred's focus was solely on impregnating Oni. With a last thrust of his rod, he grunted, releasing his seed into the willing broodmare's channel. She cried into his neck, overwhelmed by her second orgasm tearing through her. Still quivering from orgasmic aftershocks, Fred saw those dark eyes fill with emotion as she attempted to regain her composure, staring at him. Fred's cock was still embedded inside her, still hard.\n\n\"I love you so much, Fred.\"\n\n\"Do you love me so much you'll do whatever I want?\"\n\nShe looked at him through exhausted, satisfied, adoring eyes. All she could do was nod.\n\n\"You'll make an excellent mother, Oni.\"\n\nShe smiled wearily.\n\n\"Thank you for your cum, my Love.\"\n\nNot far away, Deb's high-pitched keening accompanied their moment.\n\n\"It's time, Oni.\"\n\n\"Are we going to fuck again, Love?\" she asked, moving her hips around his member with a sigh.\n\n\"Not exactly,\" he said, moving to get up with her still wrapped around him. \"We're going to interrogate Tandy now. And I'll need your help.\"\n\n\"Anything for you, Love.\"\n\nFred realized he should have been completely wiped out, but every submissive action seemed to energize him. With Oni clinging to him, Fred ambled to where the prisoner's \"torture\" was taking place, his cock still hard inside Oni, who moaned softly with every step.\n\nMia and Deb had moved their coupling to the floor directly in front of the lawyer. The fit blond was on all fours with her back arched, offering her ass to Mia, who had her tongue directly up Deb's anus. Three of Mia's fingers were currently sawing in and out of Deb's pussy. It was a train Fred wanted to get on, but it was interrogation time. The firm of Yull, Petechons and Graham were no doubt on their way.\n\nThere was a sudden relief when he extricated his cock from the sweet confines of the exotic beauty's sodden muff. He kissed her once more while setting her down, drawing a sweet moan when he scooped his cum out of her with two fingers.\n\n\"Tandy, here's a treat. Tell me how this tastes.\" She practically dove at his two fingers, eagerly sucking and licking the tasty treat.\n\n\"It tastes like sweet Italian creamer in my morning coffee,\" she said in amazement.\n\nFred was having trouble focusing on the interrogation, with Mia rimming Deb close by. He noticed Oni barely registered the lewd act playing out near them. Her attention was fixed on him.\n\n\"Oni, please get dressed and check on our other prisoners.\"\n\nHis order snapped her out of her post-coital bliss.\n\n\"Yes, my Love.\"\n\nFred wondered at this new version of Oni materializing from the old. He feared he might have to make adjustments.\n\n\"Please let me suck your cock, Fred,\" Tandy blurted. \"I'll do anything you want. You can untie me or leave me tied up if that's your kink. Please, let me suck that incredible looking thing.\"\n\nFred automatically moved, straddling the sitting lawyer, offering his cock. It was a deal she couldn't refuse.\n\n\"Start with the balls,\" he said.\n\nHe watched as she enthusiastically went to work on cleaning the mess he'd made of Oni's vagina. Her tongue felt great, almost soothing. Perfumes, lotion, and soap couldn't hide her natural scent from the mental catalog he kept of his women. She looked up at him as her tongue moved up his hard shaft to the glans.\n\n\"Oh God,\" she moaned. \"Soo good!\" her mouth clamped down on his rod as she blew him.\n\nJust when she'd built up a steady rhythm, Fred pulled away, backing off.\n\nBewildered, she looked at him like he just struck her.\n\n\"Tandy, as of now, you'll do what I say. If you don't, you won't get any more dick. Understand?\"\n\n\"Yes, Fred,\" she obeyed in an almost whining tone.\n\n\"Address me as sir, Tandy.\"\n\n\"Yes, sir,\" she stammered. It had taken a matter of minutes to transform this woman into a willing servant. Fred could smell her subservience; he didn't know whether to be impressed or frightened.\n\n\"Mia, Deb, I hate to say this, but you need to break it up. We have to get going. Deb, where is Tandy's cell? Oh, there it is.\"\n\nFred untied Tandy's bonds as Deb and Mia quickly untangled themselves.\n\nDeb rose first, grinning.\n\n\"Sorry Freddy, Mia and I got rambunctious.\" She moved to get dressed.\n\nMia followed close after. \"I blame Deb's asshole.\"\n\nThe pair giggled as Fred handed Tandy's cell to her.\n\n\"Let them know everything is okay. If someone is on the way, send them back if you can.\"\n\nTandy began texting. As she did, Fred began recording on his own cell.\n\n\"I recorded your fight on my cell and sent it off before locking it back up, so they know you won. I locked it before I assumed Deborah choked me out.\"\n\n\"You deserved more than a choking,\" Oni said, checking on Guppy and Mr. Terry. \"Fred, Guppy is going to need a hospital.\"\n\n\"What Oni said. You deserve a lot more than a choking,\" Mia agreed.\n\nTandy continued, \"The idea was to entice your group into killing Eddie Terry and his bodyguard. His confession along with the ensuing investigation may end up implicating a major client.\"\n\n\"Which is?\" Deb and Fred asked in tandem.\n\nTandy wanted to resist, but she looked at the gorgeous, lipstick smudged cock pulsating in front of her. \"NireCue Institute,\" she said, inhaling Fred's wonderful scent. That smell made everything feel better.\n\n\"Are they inbound and if so, how long do we have?\" Fred asked.\n\n\"A group is on the way. I let them know I'm okay. They're asking if you're still here. What do you want me to do?\"\n\n\"Request they call you.\"\n\nAs Tandy sent the message, Fred put on his clothes.\n\n\"Clean as much stuff up as you can, everyone. We'll leave the place like we found it. Tandy, your explanation will be easy. We were interested in both who owned the casino and who was investigating the human trafficking ring.\"\n\nHer phone rang while they spoke. The lawyer picked up after the third ring.\n\n\"I'm okay. Casino-related information. They're still alive. He wants to speak to you. Okay.\"\n\n\"Fred here, who am I speaking with?\"\n\n\"Name's Marcus. Is Mrs. Graham hurt?\" An older man, African American by the tone. Used to being in authority.\n\n\"No.\"\n\n\"That's good, Fred. Should I expect weapons?\"\n\n\"Considering we have attempted kidnapping and aggravated assault charges pending on your side of the court, I should ask you that question, Marcus. We just defended ourselves. If you plan on painting a different picture, then I'm liable to hire a defense attorney. Know any good ones?\"\n\nMarcus let out a good-natured chuckle.\n\n\"I like you, Fred.\"\n\n\"Good. I'll be waiting to see you in person.\"\n\n\"We're just getting into the elevator.\"\n\nFred hung up the phone, giving it back to Tandy, who was trying to regain her own composure.\n\n\"Clean yourself off, Tandy.\"\n\nReluctantly, she went to the bathroom.\n\n\"You fuckers killed me twice!\" Eddie Terry let out an uncharacteristic sob.\n\n\"Aw, you're breaking my fucking heart!\" Mia said, voice dripping with sarcasm.\n\nEddie Terry mumbled something that made Deb stop cold in her tracks.\n\n\"What did you say?\" Her usually warm facial features were glacially cool as she moved closer.\n\n\"First Minka, now Guppy. You beat them both. No way you should be able to do that!\" Eddie said accusatorially.\n\nFred saw fear in the criminal's eyes as Deb replied. \"Well, I did. Fuck you very much.\"\n\n\"So, are you daddy's little soldier, or daddy's little slut?\" Eddie teased.\n\nFred wasn't sure which of the girls was going to kill him. Deb gave him a cool look, deciding not to take the bait.\n\n\"Eddie Terry,\" she said calmly, \"I command you to shit yourself and fall asleep.\"\n\nFred opened the door when he heard the knock. A six-and-a-half-foot black man in an expensive suit was at the door. Three men were behind him, dressed like secret service.\n\nWhat made Fred's blood run cold was the black man had a knife. It wasn't obvious, hiding in his suit jacket. The only reason Fred knew was that it still had the Chameleon's scent on it. This man had almost killed her.\n\n\"Marcus, I presume?\"\n\n\"Hello, Fred. Can I come in?\"\n\n\"Hell yeah, you can. We're just in here visiting with Tandy.\"\n\nDeb and Oni had their cell phones out, recording everything. Fred turned his off; it was low on power. Mia still had the pillowcase filled with spare change.\n\n\"So, what happened here?\" Marcus asked. The question wasn't addressed to any specific person. Fred waited for Tandy.\n\n\"Eddie Terry and his bodyguard Guppy disobeyed protocol and tried to kidnap the test subject.\"\n\nFred could feel all eyes in the room on him, gauging his reaction. It wasn't a surprise; NireCue knew, so the lawyers did, even handing out filters so their olfactory senses weren't affected by his scent. Did they not know how potent his bodily fluids had become?\n\n\"Mrs. Graham, I'm thinking we should probably call Fred by his actual name.\"\n\nFred had been getting in some good whiffs of Marcus.\n\n\"Of course, Mr. Gibson.\"\n\nFred exchanged glances with Deb, who silent mouthed, \"Iris?\" It was a question he didn't need answered.\n\n\"Deborah, Mia, and Onvipa came up in time to save Fred's life.\"\n\nMarcus looked at the pair of criminals, then at the women. A satisfied grin materialized on his chiseled face.\n\n\"I suppose I should thank you. These two have been a pain in the ass over the last 24 hours. Looks like they've hurt you a bit. If you follow us back to the institute, we can patch everyone up.\"\n\n\"Now that's a real kind offer,\" Fred said politely, \"but I think we'll take our chances elsewhere. So you work for NireCue, not YP&G?\"\n\n\"That's the size of it, Fred,\" Marcus said. \"We know you have questions and we'd like to provide you with answers on top of patching up your wounded.\"\n\nFred took time to stare at each woman. Deb, her toned body relaxed, locked eyes with him and shook her head no. Mia's body language said she would probably rebel if Fred agreed to Marcus's offer. Oni had become a fanatically loyal servant who wanted to have his babies. There was no doubt she would kill for him. They needed to have a long talk.\n\nAll Fred's life, he adapted to situations outside of his control. Constantly moving from town to town, his dad was a dedicated cop, his mother a devoted stay-at-home parent. Nancy Markinson was still alive and well on the other side of the state, living modestly off dad's benefits while working part time as an office admin. Even college wasn't his decision; it was his parents'.\n\nHere he was again, another situation where someone bigger and scarier sought to dictate terms. Fred wasn't having it.\n\n\"Marcus, you tried to get us to kill those two ass-clowns over there so you could blackmail us into being your servant. You're also running a global human trafficking ring. If you want to be friends, you've got a funny way of showing it.\"\n\n\"Fucking A,\" Mia said, nodding at Fred. Both Oni and Deb listened to the conversation, but they were positioned in places they could launch into combat from.\n\n\"Well said, Fred,\" Marcus admitted. \"I can tell we're at an impasse. What I can do is make you an offer. Come in, we'll give you a check-up. I can assure we won't harm you.\"\n\n\"Neutral ground,\" Fred said in as commanding a tone as possible. \"We choose a neutral place. You send someone to conduct tests, bloodwork, that sort of thing. I don't want to see anyone with a nose filter or other defense against my scent.\"\n\nMarcus nodded. \"Sounds fair. We'll meet next week on Sunday at 12pm. You pick the place. Finals should be over by then.\"\n\n\"My house,\" Deb said, her voice pleasant, calm. \"We can meet at our house next week Sunday.\"\n\n\"Ned Stallings residence,\" Marcus said, rubbing his chin in thought. \"Sounds good to me.\"\n\n\"Are you a part of the NireCue security detail?\" Fred asked.\n\n\"What, I can't be a doctor?\" the big man challenged. Fred blanched.\n\n\"I'm fucking with you, Fred,\" he teased. \"I'm security for NireCue. Sticking close by to make sure you're okay.\"\n\n\"Nice. I'm pretty sure my life's been threatened at least four times in the last 24 hours, so it's great to see you take an interest in my well-being.\"\n\nMarcus's grin disappeared.\n\n\"Just fucking with you,\" Fred teased. \"next week, the Stallings residence, noon. And who shit themselves?\"\n\nMarcus and his team left quickly, taking both Mr. Terry and Guppy with them.\n\n\"They bricked our cellphones,\" Deb said. Deb and Oni both had to reboot their cells, whereas Mia and Fred were okay.\n\n\"That went better than I thought,\" Tandy said as the Fred and girls prepared to leave. \"I could pull some strings to have you keep this suite for the night.\" The lawyer's tone was suggestive.\n\n\"Tandy, how long have you been married?\"\n\nShe pivoted to the new subject. \"Six years, four months.\"\n\n\"Happy or unhappy?\"\n\n\"Unhappy.\"\n\n\"I'm in the market for a defense attorney.\"\n\n\"Then you should make an appointment.\"\n\n\"One that can suck a cock exceedingly well.\"\n\n\"I'm free tonight.\" She tried to sound nonchalant, but Fred knew how turned on she was.\n\n\"You're free all the time for Fred now,\" Oni said.\n\nMia sized her up. \"You're bottom rung, Tandy. You'll be doing what we say.\"\n\n\"When we say it,\" Deb added.\n\nFred motioned for the lawyer to approach.\n\n\"Tandy, I want you to contact Mia for a time this week to spend some quality time. If it's concerning me directly, make it urgent and I'll respond quickly. You will obey Mia as you obey me.\"\n\nWhile he made the lawyer repeat what he said, Mia took her cue.\n\n\"We've never been properly introduced,\" she said, invading the lawyer's personal space. The shorter woman moved to step back.\n\nMia said, \"Stay still.\" With that, the redhead kissed Tandy tenderly on the lips. Her nostrils flared as the lawyer hungrily returned the taller, stronger woman's insistent kiss. As her passion mounted, Mia suddenly pulled away.\n\n\"Tandy, that was very good. Call me with your availability for Fred and I'll set up an appointment.\"\n\nThe flustered lawyer was too aroused to say anything other than a soft \"Okay.\"\n\nFred and the girls left.\n\nIt was a pleasant surprise finding out just how good a masseuse Mia was. He felt her fingers and hands on his cock and balls, his ass, including his asshole. The tall redhead got into every nook and cranny. As Fred lay on his stomach, he looked to the side, watching Mia work Deb's pliant body. Listening to his lover's soft moans, then cries, her pitch raising until that familiar orgasmic note was hit. He had to remind himself that for as many times as he'd orgasmed today, Deb easily eclipsed him.\n\nHe heard Mia's soft but strong tongue whipping Deb into a frenzy along with the \"splotch, splotch\" of her fingers. He hoped Oni hadn't gone back to her room. He wanted to speak to her, but he was so exhausted he was powerless to resist falling to sleep.\n\nHe woke in the bed without remembering how he'd gotten there. Had he been carried? Mia was definitely strong enough. Had he done it under his own power and been too exhausted to remember? He rolled over, keeping his eyes closed. Voices floated in his consciousness, giving him a chance to eavesdrop.\n\n\"Are we falling in love with each other?\" Deb asked, her voice a whisper.\n\nOni responded, \"I'm in love with you, D. I'm also in love with Big Red. What I feel for Fred is beyond even that.\"\n\n\"Fuck guys,\" Mia said, \"what happened tonight was even weirder and sexier than last night. I'm not sure if it's love, but I'm feeling what you're both feeling.\"\n\n\"Oni, please promise me you don't end up worshiping Freddy like he's some sort of god. I know you're going through some emotional shit right now and I'm here for you, but every time you treat Freddy like he's a god, it bothers me, as I'm sure it bothers him.\"\n\n\"D, I love you as both a sister and a lover. You may not believe in gods, but I do. A god doesn't have to be white beards and billowing robes; they can be a college student with a harem of hot women.\"\n\n\"Oni, I'm calling bullshit. NireCue made him into a freak factory and now they're trying to figure out what to do with him.\"\n\n\"If I can interject ladies,\" Mia said, \"you both have a good point. Oni, you're free to believe Fred's a god, just don't start worshiping him. You're going to need to get ahold of yourself, especially if you plan on being a mom.\"\n\n\"I won't be alone. Fred is going to fuck a baby into a lot of women. Deb, are you on birth control?\"\n\nDeb breathed. \"No. Why?\"\n\nMia chuckled.\n\n\"What's so funny?\"\n\n\"D, what the fuck?\" Oni said, incredulous. \"Fred has been injecting you with his patented baby batter three times a day since Tuesday. You're probably already pregnant.\"\n\n\"I'm safe guys. Really.\"\n\n\"How do you figure?\" Mia asked, chuckling.",
        "\"He came inside you too, Mia,\" Deb said.\n\nThe redhead sighed. \"Yeah, he did. I guess it's a good thing I have PCOS.\"\n\n\"What is that?\" Oni asked.\n\n\"Polycystic Ovarian Syndrome. It's a hormonal imbalance thing that means I don't ovulate.\"\n\nOni sniffed. \"I'm so sorry, Red.\"\n\n\"Don't be, Oni. We all have our roles. Deb and I will be den mothers and you'll be an actual mother.\"\n\nOni said, \"I think Deb will be an actual mother, too. Fred will put a baby in her.\"\n\n\"Oni, you're cruising for a bruising,\" Deb said.\n\nMia whispered, \"I love that we're just lying here together. I feel incredible. And Deb, Oni has a point with Fred.\"\n\n\"Please explain.\"\n\n\"Deb, promise not to get mad at me.\"\n\n\"I can't make that promise, Mia, but I'll try.\"\n\n\"Oooh, this sounds serious,\" Oni said conspiratorially. \"Should I get some popcorn?\"\n\n\"Fuck you, broodmare,\" Mia chuckled. \"Deb, I know you value your independence. You don't fancy yourself as serving Fred, but you're a slave just like the rest of us.\"\n\n\"I disagree.\"\n\n\"Let me ask you this,\" Mia said. \"Why do you smear Fred's cum on yourself?\"\n\n\"Simple. It feels good.\"\n\n\"You're marking yourself as his,\" Oni said.\n\n\"Deb, in some ways, it's amazing because you've been fucking Fred since Tuesday. Oni and I fucked Fred for one day and Oni wants to have his children. I'm...\"\n\n\"You're what, Red?\" Oni asked.\n\nDeb said, \"Is it Niamh?\"\n\nMia's tone was thick with uncharacteristic emotion as she shared with her lovers. \"Part of it, yeah. The other part of it is more complicated, but I'll try to sum it up. You both know I don't want to be owned. Hell, I fought Mr. Terry for years regarding his rights to me. My terms, my way; it hasn't always worked, but the quest continues.\"\n\n\"Fuck.\" Deb whispered.\n\n\"Oh, Red,\" Oni said.\n\n\"Hey, don't weep for this one,\" she joked, \"I'm like a big ginger cat landing on its feet.\"\n\nDeb said, \"It's what I find attractive about you, Mia.\"\n\n\"What, that I'm a ginger?\"\n\n\"No! You've been through a ton of shit but your spirit remains unbroken.\"\n\n\"Red, I agree with D. That's a total turn-on. More so than just your huge jugs,\" Oni joked, sending the women into giggles.\n\n\"Well, now don't both of you suck my pussy through a straw just yet. I'm not finished summing things up. You all swoop in and rescue me, but now I'm with a guy who owns the shit out of me, in a situation I feel like I have less and less agency in because I can't tell if I'm being manipulated. It's fucking with me on a lot of levels.\"\n\n\"You share my concerns about being a slave. Like it's not your choice,\" Deb said.\n\nThe next thing Mia said blew Fred's mind.\n\n\"Concerns, Deb? I know for a fact we're his slaves. I wouldn't be lying here hoping he wakes up, puts a collar around my neck and fucks me up the ass while you both make me airtight with strap-ons. That's not a feeling I normally have.\"\n\nYou could have heard a pin drop. Fred had to remind himself to breathe.\n\n\"What you're saying may be true, but I don't feel like a slave. I feel like this has all been my choice.\"\n\n\"Me too,\" Oni agreed.\n\nMia, clearly exasperated, asked, \"Really, girls?\"\n\n\"Mia, I know what you're going to say, and you're not wrong. His scent is taking me-us-to places we never thought or wanted to go. You know if you asked Freddy he'd let you go. The other alternative is we band together like today and help resolve this thing with the Institute. There's got to be an inoculation to this, or antidote they'll eventually create.\"\n\nMia's voice was low and clear. \"Who said I wanted a way out? See, that's what I'm trying to come to grips with, ladies. I want Fred to own me. I was going to ask you both to help me pick out a collar that I could give to him. How fucked up is that?\"\n\n\"Jesus, Mia,\" Deb said.\n\n\"That's fucked up, but hot,\" Oni said, silken voice tinged with arousal. \"Almost as hot as Niamh wanting to be a part of the harem.\"\n\n\"Jesus, you two,\" Deb said again, \"thanks a lot.\" Her tone was accusatory.\n\n\"What did we do?\" Mia asked.\n\n\"Now I'm thinking about watching Freddy rail my sister.\"\n\n\"Holy shit,\" Oni said, \"Deb's older sister is amazing.\"\n\n\"Really?\" Mia asked with interest.\n\n\"Picture an older, more fuckable version of Deb.\"\n\n\"Get the fuck out of here,\" Mia said, amazed. \"Show me a picture, stat.\"\n\n\"Sorry, not moving from the bed,\" Oni responded.\n\n\"Well, I'd like to say Niamh's off the menu, but my cousin has her own plans. She'll start going into huge withdrawal symptoms sometime tomorrow, so I'll only leave a few hours for the date. I'll talk Fred into getting Keira from the medical center to watch her.\"\n\n\"Mia, would you have sex with your cousin?\" Oni asked.\n\n\"You don't need to answer that,\" Deb said.\n\n\"No, that's fair, considering. I would, in the right context. I'm not against the concept of incest if both parties benefit. Like, for instance, if Deb wanted to get it on with her sister, I'd be down for watching that.\"\n\nDeb sighed. \"Enough about incest. So far, Freddy has seemed up to pleasing us. What do we think about that?\"\n\n\"Are you asking if we should bring in another spool of sausage?\" Mia asked.\n\n\"Fred's the only man for me.\" Oni said, her tone final.\n\nDeb said, \"While I agree Freddy is the only man for us, that doesn't mean bringing another dick to the party would be a negative.\"\n\nMia said, \"Did you gals notice how when his cock softens, he sniffs you and gets hard again? Holy shit, that makes me nip the fuck out.\"\n\n\"Yeah,\" Oni said with a titter.\n\n\"Me too,\" Deb added with a chuckle. \"Back to this slave thing.\"\n\n\"Jesus Deb,\" Mia chuckled, \"I want to be Fred's sub. I know you're probably the obvious choice, but you need to be dominant over the entire harem. I may have to share that designation with Thalina.\"\n\n\"Yeah, I think Thalina was looking for Oni to be her Dom. I'm not into that sort of thing,\" said Deb.\n\nOni's breath signaled she'd fallen asleep.\n\n\"That's too bad, Deb. If we were a pack of wolves, you'd be the dominant female.\"\n\n\"You're pretty dominant yourself, Mia. It's pretty sexy.\"\n\n\"Confidence is sexy, isn't it?\"\n\n\"It is. I'm glad we freed you.\"\n\n\"I am too.\"\n\nFred fell asleep to the sound of wet, deep kisses.\n\nHe awakened in a tangle of beautiful women. Oni was draped over him possessively, her drool caked on his chest. Mia lightly snored next to the deep, even breathing of Deb. Even asleep, she looked sexy.\n\nThe urge to begin the day with raunchy, hedonistic sex was great, but Fred let the women be. They were his women now; he thought of them no other way.\n\nHe put in for room service, wanting to deliver breakfast in bed as a romantic gesture. He went next door after showering and cleaning himself up to check in on Niamh.\n\n\"Morning, Fred,\" Niamh breathed, smiling at him while throwing her hips into her fingers. It didn't seem to bother her a bit since he'd caught her wet-handed. \"Could you do me a favor?\"\n\nFred walked to the foot of the bed, grinning as his shorts tented. Niamh spread her legs out, giving him a better view as her fingers noisily plunged into her juicy depths.\n\n\"You're going to start really feeling withdrawal symptoms today, Niamh. Eat a lot of protein and stay hydrated. The bathroom will be your friend.\"\n\n\"Your cock juice has protein, doesn't it, Fred?\" her face was petulant yet pleading, her emaciated body riddled with the yellowing of needle marks. Given all that, her pale skin looked almost otherworldly in the soft orange light of dawn. \"Please use my cunt however you wish.\"\n\nFred was dressed in shorts and no shirt. He immediately took his shorts and briefs off, causing Niamh to grin in expectation.\n\n\"I like that hard cock, Fred. It's a beautiful cock. It wants to be in here.\" The delicate beauty put both feet on the bed, raising herself into the air, enticing him further by rolling her hips invitingly. \"My cunt wants to be tamed. Claim me, Fred. Induct me into your harem.\"\n\n\"I will, Niamh, but not today. Don't pout, I made a promise to your cousin.\" He walked to the side of the bed, drawing closer to the porcelain beauty. \"Now, show me your panties.\"\n\nWith surprising agility, she plucked them off the bed, swinging them around her hand.\n\n\"Drench them in your cunt juices.\"\n\n\"Oh shit,\" she whispered, biting her lower lips petulantly. Stretching the pink fabric out, she scraped the gusset over her vulva, slowly inserting the fabric inside her.\n\n\"Niamh, you and I both know you're already in my harem. You're already mine.\"\n\n\"Please make it official, Fred. Fuck this unworthy slut, please.\"\n\n\"Give me your panties.\"\n\nShe stopped masturbating, moving to her knees on the bed. Fred knew she was trying to lure him in with a game of keep-away.\n\n\"Niamh, please hand me your panties.\"\n\nShe adjusted, still playing the part of the petulant Lolita. In her prime, she would have been impossible to refuse.\n\nThe delicate creature drew close to Fred, eyeing his engorged purple monster with awe.\n\n\"It's calling to me.\"\n\n\"What's it saying?\"\n\n\"Protein shake,\" she giggled.\n\nHe took the panties, touching her hand, his lingering fingers working like an electric current. Her nipples stood at full attention.\n\nBefore she moved to start physical contact, Fred retreated.\n\n\"You and I are going to masturbate. First one to cum loses,\" Fred said, grinning.\n\nFred moved back to the foot of the bed. Niamh moved close to the foot to be as close to him as possible, still on her knees. Her nightie came off to match Fred's nudity.\n\n\"You have an awesome body, Fred,\" she said. \"Fucking sinewy. You'd be even more handsome with a beard.\"\n\nFred went with an old maneuver he remembered enjoying with Deb. He made a show of sniffing her panties in front of the delicate beauty before wrapping the drenched fabric around his cock.\n\n\"Oh god, that's so hot, Fred,\" Niamh panted.\n\n\"If you think that's hot, wait until you hear what's going to happen soon.\"\n\n\"What's going to happen?\"\n\n\"You're going to watch me take Mia in the ass today.\"\n\nHer half-lidded eyes widened in pleasant surprise.\n\n\"I can watch you make her into your anal slut?\"\n\n\"Yeah.\"\n\n\"Make her into your anal slave?\"\n\n\"Yes.\"\n\nThe porcelain beauty trembled. \"Oh shit. Oh. Ohhh, shit I'm going to fucking cum.\"\n\n\"Niamh, before you cum,\" Fred said through clenched teeth as he approached his orgasm, \"Deb, or Oni. Which one do you want to lick your pussy?\"\n\n\"Both!\" she squealed, her body quaking in orgasmic glee.\n\nBoth the dirty talk and Niamh's body responding pushed him over the ledge. He filled Niamh's panties with his seed.\n\nThe brunette's post orgasmic satisfaction was pleasantly interrupted by Fred, moving in close above her.\n\n\"Protein is an important part of your diet, Niamh.\"\n\nKissing her on the forehead, he handed her panties back to her.\n\nFred got dressed and left the room, taking pleasure in watching Niamh slurp his cum out of her panties.\n\nBefore he turned to leave, she looked at him, cum on her lips.\n\n\"When?\" she asked.\n\n\"Soon,\" he answered.\n\nBreakfast was served. Oni was first to wake.\n\n\"Oni, good morning,\" Fred said, offering a tray with a bowl containing steel cut oatmeal with currants, mango and hemp seeds along with coconut turmeric and a bowl of fresh fruit.\n\nAs her bleary eyes cleared, she smiled.\n\n\"Morning, Fred, love of my life,\" she said. \"You spoil me.\"\n\n\"You deserve to be spoiled.\"\n\nThe girls woke up and Fred offered Mia a bacon and cheese frittata. Deb got an avocado, chevre and bacon omelet.\n\n\"What's chevre?\" Mia asked.\n\n\"Cheese made with goat's milk,\" Oni said.\n\n\"Sounds yummy.\"\n\n\"It is,\" Deb said, \"want a bite?\"\n\nFred and Niamh got a classic egg scramble and another bowl of fruit. The conversation was both light and fun. The food disappeared quickly, as everyone had a healthy appetite. The group was all smiles.\n\n\"I know this is going to sound funny,\" Fred said, \"but this feels good.\"\n\nDeb looked at him, refilling her glass of lemon water.\n\n\"Fred, do you have something you need to tell us?\" she asked.\n\nHe wasn't sure what she meant until it occurred to him Deb could smell Niamh's panties. The crazy girl had put them back on.\n\n\"Yeah. Hey, Mia?\"\n\n\"Yep, Fred?\"\n\n\"Niamh tried to get me to fuck her this morning.\"\n\nMia almost did a spit take. Niamh blushed in embarrassment. Deb and Oni held their breath.\n\n\"Did you, Fred?\" the redhead challenged.\n\n\"We had a deal. Tell you what I did and let me know if I was out of line.\"\n\nMia looked at him. \"This better be good, Fred.\"\n\n\"I jacked myself off into her panties while she masturbated on the bed.\"\n\nOni murmured, \"That's hot.\"\n\nMia grimaced. \"That's a pretty liberal take on the rules we laid out, Fred.\"\n\nNiamh added, \"Fred shot his load into my panties and handed them back to me. I'm wearing them right now.\"\n\n\"Jesus, that's hot,\" Deb muttered.\n\nFred felt the temperature in the room rise. Mia and Niamh communicate wordlessly, staring at each other. Mia's tight, hardened stare softened.\n\n\"Damn, this situation is so fucked,\" the redhead said. \"I don't want you to have sex with Fred until after you've fully recovered. I'm thinking six weeks at least. Can you wait that long?\"\n\n\"Okay, Mia,\" Niamh responded. \"I still want a position in the harem, though.\"\n\n\"Another member of the Ponytail Express,\" Oni giggled.\n\nDeb smiled pleasantly, watching intently as things unfolded.\n\nThe redhead regarded her cousin with a serious look. \"You're a grown woman, Niamh. I guess I thought you might wanna to spend some time outside of a harem, you know? I like the idea of you being free.\"\n\n\"But that's just it,\" Niamh answered, moving to take her cousin's hand. \"Here with you and the others, I feel better than ever. And the orgasm I had with Fred... it was like waking up from a nightmare. I feel... like Snow White, waking from a dream.\"\n\n\"Aw, Fred is your prince,\" Oni said, her voice brimming with emotion.\n\nThe cousins hugged tightly, seemingly oblivious to the fact one was naked while the other wore soaked panties. Fred's cock stirred along with Deb and Oni's nipples.\n\nHe cleared his throat. \"Mia, I'll stay true to my word. I won't have sex with Niamh until after you give me your seal of approval. However, Niamh wants to be included in the proceedings.\"\n\nThe two continued to hug, but the tone of it changed, becoming more sexually intimate as their bodies pressed up against each other. Fred could smell their arousal build and wanted to do some fantastically dirty things to them.\n\n\"A woman's touch on Niamh would be beneficial to her, wouldn't it, Mia?\" Fred asked.\n\nThe cousins parted. The pair stood at the side of the bed, bodies still pressed up against each other.\n\n\"Would that be okay?\" the porcelain beauty asked softly.\n\nThe redhead sighed, trembling. \"When you ask like that, I have to say yes.\"\n\nNiamh smiled at her cousin, kissing her on the cheek first, then lightly on the lips. Mia tensed slightly, and her cousin sensed it enough to pull away.\n\n\"Not you, silly,\" the delicate beauty said with a giggle. \"I want Deb and Oni to touch me while I watch Fred fuck your asshole.\"\n\nAny reservations Mia previously had melted away, leaving behind a lust-crazed amazonian who wanted Fred to churn her ass like butter.\n\n\"Sold!\" she said.\n\nFred, already sitting with Deb in his arms, kissed her wetly on the mouth.\n\n\"How you doing, Deb?\" He asked.\n\nShe grinned back at him. \"Pretty good. I think you should wear Mia's ass out.\"\n\n\"Don't forget about me,\" Oni said, sliding into Deb and Fred's embrace. The trio exchanged intimate, wet kisses while their hands explored familiar but still thrilling territory.\n\nMinutes later, using lube from last night's massage, Fred's cock glistened as he lay on the on his back, comfortably on the bed, while Mia straddled him, moving to impale her tight puckered rosebud onto his girth.\n\n\"Your cock's grown since last night,\" Deb said, raising her lips from Niamh's nipple.\n\nOni, Deb, and Niamh reclined on the couch facing the bed. Both the exotic beauty and the fit blond worked the porcelain seductress's meaty tits with both mouth and hand, exploring their bodies.\n\n\"In for a penny,\" Mia said, her voice dripping with need as she lowered her ass onto Fred's eager dick.\n\n\"Fuuuck!\" the redhead groaned as she felt glorious cock penetrate her back passage.\n\n\"So tight,\" Fred grunted. \"So fucking good.\"\n\nPoised majestically above him, the freckled vision wiggled her delightfully rounded ass down his shaft until his balls kissed her ass. Her strong, calloused hands gripped his chest; full, tightly curled rust-colored locks partially hid her freckled face and intense green eyes. Mia took one of Fred's hands, moving it to a large, pillowy soft breast. They both palmed it, her hand partially over his.\n\n\"Fred, what you're doing to me,\" she said breathlessly, \"I've never experienced.\"\n\n\"You feel love,\" Fred said, his voice soft but carrying over to the others. \"You love me like I love you.\"\n\nSomething wet hit his chest, and he realized it was tears. He felt her increase her pace.\n\n\"You can tell me, Mia,\" Fred said.\n\n\"I lo- please, nuuuh,\"\n\n\"Whenever you're Uh! Ready, Mia,\"\n\n\"Goddamn Fred, I fucking love you!\"\n\nHer pace quickened. She looked up at the ceiling and Fred grabbed her neck, holding it in her hand, slightly squeezing.\n\n\"Own me!\" she roared.\n\nFred squeezed her neck harder, pinching her nipple painfully with the other. The redhead whinnied, and Fred released his tight hold on her neck as a powerful orgasm ripped through her body. Juices spilled out of her cunt, onto his pelvis and lower stomach.\n\n\"I love you!\" she cried between whinnies, shaking those powerful hips, desperately fucking Fred with her asshole. \"Destroy my ass, Fred! Scorched fucking earth!\"\n\nFred barely heard Niamh's orgasmic cries over her cousin's louder exclamations, glancing over to see Deb licking her pussy while Oni worked her tits and neck. The trio's hands were all over each other, exploring each other both inside and out.\n\n\"Your ass is mine, Mia.\"\n\n\"Destroy it!\"\n\n\"Taking your ass, Mia! Here it comes!\"\n\n\"Unload your cock juice into my ass! Give me your cum!\"\n\nThe redhead whinnied again, breathing in gulps of air.\n\n\"Kiss me, Mia.\"\n\n\"Anything for you!\"\n\nShe lowered her body down to his while grinding her ass into him.\n\n\"You're stuffing me so full. Cum inside, you magnificent bastard!\"\n\nFred grunted, taking Mia's mouth with his own. His eyes locked onto hers. He erupted like a volcano, releasing his molten lava into her quivering rectum.\n\n\"I can feel it in my stomach, it's so warm.\"\n\nFred eventually pulled out of Mia's puckered anus with a wet \"spluck,\" followed by a splash of cum gushing out of her backside onto the bed. He looked over at the trio of women still pleasuring each other.\n\n\"Deb, why don't you come over and clean Mia.\"\n\n\"Oh god, Fred,\" the gorgeous redhead said, her voice husky. \"You're going to have my cousin watch Deb eat your cum out of my ass, aren't you?\"\n\n\"If she likes,\" Fred agreed.\n\nDeb extricated herself from Niamh's pussy as Oni moved to take over her spot. \"Oh, she likes.\"\n\nMia kissed Fred on the mouth, offering her anus to Deb in front of her cousin. The sexy blond glided over, first palming the redhead's gorgeous, rounded ass before french kissing her cr\u00e8me-filled rectum.\n\nOni and Niamh made out, masturbating each other while watching the lewd proceedings.\n\nMia began whinnying again, cumming for a third time, sweat dripping from her brow, freckled skin covered in a sheen of sweat. Fred offered Mia his cock, covered in ass juice, and she eagerly began sucking.\n\nDeb raised herself off her morning dessert, locking eyes with Fred, who was enjoying his morning blowjob, her mouth full of a sexual elixir of bodily fluids.\n\nGracefully, she moved back to the pair of women. She took both women under the chin, leading them to where Fred could see what happened next.",
        "Deb fed Fred's seed to Niamh through a raunchy, cum-drenched kiss. Niamh followed suit, swallowing some, but sharing the rest with Oni through an erotic, full mouthed soul kiss. Oni then went full circle, giving what was left back to Deb, who swallowed the rest.\n\nIt was too much for Fred, who came a second time into Mia's mouth. The redhead downed his second helping of baby batter greedily.\n\n\"Welcome to the harem, Niamh,\" Deb said.\n\nTO BE CONTINUED"
    ],
    "authorname": "A_Gavin_MaCross29",
    "tags": [
        "cousins",
        "college",
        "harem",
        "male dominant",
        "anal",
        "dialogue",
        "masturbation",
        "oral sex",
        "group sex",
        "lesbian"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/the-ponytail-express-ch-13"
}
{
    "title": "The Steamy Chase Ch. 08",
    "pages": [
        "Comments, critiques and tips are welcome. \nDean Broody vs. Kayla Cooper\n\n***\n\nKayla walked around, taking in the vast rooftop. There were so many lights one would think it was a stage. And she could see movements in some of the buildings around. Kayla knew that just as she could see them, they could also see her. What had she gotten herself into? She went to stand against the smooth stone railings and looked down just as the major lights on the rooftop went off. Dean. Kayla turned to see him walking away from some switches on the wall. Though some of the lights were still on, Kayla didn't think anyone looking from the surrounding buildings would be able to see their faces. For some reason, Kayla felt a thrill, an excitement within, in anticipation of what was about to happen. She was so excited that her knees shook and her pussy clenched with lust, the throbbing between her thighs almost painful. Agonizing. She felt Dean's arms slide around her waist from behind and leaned into him with a sigh.\n\n\"You have exactly five seconds to tell me you don't want this Kay.\" Dean husked into her ear, causing a delicious shiver to dance down her spine. \"If you don't stop me before I finish the count, there's no turning back.\" He said slowly, swallowing against a lump of lust threatening to unravel him.\n\nKayla felt her heart beat so fast it wouldn't have surprised her if it had jumped out of her chest. This was it. There was no turning back...because she had no intention of stopping Dean.\n\n\"One.\" Came Dean's sexy voice even as his hand found its way under her skirt.\n\n\"Two.\" Dean's other hand pulled down the neck of her top, together with her bra and started gently pulling on her nipple ring.\n\n\"Oh God.\" Kayla moaned, her legs parting of their own accord.\n\n\"Three.\" Dean's tongue flicked around the outer shell of her ear even as his fingers rubbed slow circles around her clit, which was soaked with her own juices and Dean's cum.\n\nKayla's eyes rolled back into her head in reckless pleasure, her lips parting in a silent cry. Dean's touch, in addition to the setting, was evoking within her feelings so powerful it was taking Kayla to another level she had never been before.\n\n\"Dean...\" She breathed as Dean's wet lips landed on her neck. If he hadn't been holding her, she'd have fallen.\n\n\"Four.\" Dean murmured, stepping forward and pinning Kayla against the railing. \n\nHe coaxed Kayla to leaned forward in such a way that her stomach comfortably rested on the rail. She felt Dean lift and push her skirt up around her waist, felt the breeze on her bare bum and shivered. Kayla heard the unmistakable sound of Dean's zipper being lowered. What she didn't know was that Dean had simply reached inside to pull out his hard throbbing cock without even unbuckling his belt. She moaned when she felt Dean's hard hot cock on her thighs that were already creamy with his cum. \n\nKayla thought she had seen it all, felt it all...but what she didn't know was that there really was a cloud nine. And Dean was just getting started on one. \n\n\"Five.\" Dean growled and entered her soaked pussy to the hilt. God he was huge. It took biting her lip to hold in her scream. \n\n\"Ah, God.\" She gasped, her body shuddering as her muscles gripped the cock embedded inside her. Kayla's desire spiralled beyond her expectation as shattering ecstasy made black spots dance in her vision. \n\nKayla felt so good, every muscle in Dean's body trembled with pleasure. She might be impaled on his cock, but Dean knew his body was totally in her power. Having sex with someone you love was euphoric. Being in love made the whole experience simply exquisite and sensuous. He grunted as fire shot from his brain, down his spine, into his legs and back to his balls. A wave of dizziness crashed over him at the intense pleasure he was deriving from being inside Kayla, under the stars. His toes tingled. Dean caressed Kayla's butt with reverence. He thought she had the sweetest, sexiest butt ever, and wondered what it would feel like to be inside that hot arse, squeezed by it, milked by it... \n\n\"Fuck!\" Dean bellowed, gripping Kayla's hips tightly with renewed urgency, and then silently calling on all the angels for control, he slowly pulled out and thrust back into her gently and rhythmically. \n\n\"Dean.\" Kayla gasped brokenly at the exquisite feeling of Dean gliding deep inside her, aided by his cum and her cream. \n\nHer cries of excitement built as he gradually increased his tempo. Before long, he was fucking her long and hard, fighting to hold on to his control. When it came to Kayla, Dean really didn't have any choice but to let go and feel. The woman was too damned sexy for her own good.\n\n\"Kay,\" he gasped as he drove himself deeper still. \"Christ, you feel so good.\"\n\nHe was tireless and relentless, taking his pleasure and giving her pleasure so intense, she couldn't suppress her moans, much as she tried. When he angled his hips and stroked over and over that sensitive spot inside her, Kayla gave up and cried out lustfully, no longer able to hold in the sound as her toes curled almost painfully inside her high-heels from pure pleasure. She didn't care who heard her cries at that point. Her body shook with mindless ecstasy. \n\nThe sounds she was making were so erotic Dean couldn't help but smile in triumph. Kayla sounded sexy as sin. Dean leaned down and tuned her face to his for a sizzling kiss. Their kiss was rough and passionate, so full of pent-up desire. When he released her lips, Kayla opened her eyes for the first time since he stated fucking her and gasped when her eyes fell directly on a couple looking right back at her from one of the buildings. It was obvious they couldn't see her face but they could see the action. There were about five other people watching them from different buildings. One man was busily wanking off whilst staring at them. Kayla surprised herself by getting even more turned on. Watching others watching you fuck was definitely a turn on. Naughty, but definitely smutty and salacious. Every nerve ending in her body came alive, tingling with excitement.\n\nKayla rose onto her toes and then rocked back on her heels suddenly, thrusting onto Dean, taking over even as she stared back at their audience. Nothing existed on Earth but Dean's body, his hard cock driving her crazy. Kayla fucked herself on that cock. When she started rotating her hips erotically, first to the left, and then to the right, gyrating sexily against Dean and squeezing his cock tightly, he was floored. His eyelids fluttered. The pleasure in his groin was almost unbearable.\n\n\"Oh fuck, baby.\" He husked in surprise, stilling his movement to enjoy the sight of Kayla fucking herself on his cock. \n\nIt was a sight Dean wasn't ever going to forget. She looked erotically stunning. She'd grabbed tightly onto the rails with both hands and bent forward, taking Dean more deeply inside, and was squeezing his cock tightly within her body even as she rotated her hips.\n\n\"Kay, that feels amazing.\" A helpless gasp tore from Dean's throat. \n\nHis breathing became rapid and chaotic. Primal groans that sounded like he was in pain burst forth irrepressibly when Kayla clenched her vaginal muscles even tighter to increase his stimulation, to drive him crazy. He felt the unmistakable sensation of his balls tighten up and knew what was about to happen. He wasn't ready for that.\n\n\"Enough.\" Dean growled. His hands gripped Kayla's hipbones, trying to hold her still as he took several deep breaths. \"Hold still, please.\" He pleaded.\n\nDean pulled Kayla's body upright against his. One of his arms coiled around her waist whilst the other massaged her exposed breasts, pulling and rubbing her nipples. He started thrusting into her slowly. His lips brushed against her ear, his breathing still harsh. \n\n\"God, you're one hot chic.\" He panted in her ear.\n\nHolding her tightly against his body, Dean started pounding into her vigorously, his mouth latching on to the pleasure point behind her ear to suck sensually till she thought she'd go mad.\n\n\"Dean, so good.\" She whimpered brokenly as her head lolled back on his shoulder and her eyes squeezed shut in bliss. Her back arched as her body trembled with the beginnings of a release. Her body tensed, waiting, ready to let go... God, she was almost there... \n\nDean pulled out, and even as a stunned gasp tore out of Kayla's lips, he turned her around to face him.\n\n\"Dean...\" Kayla gasped. She could barely catch a breath. A frustrated whimpered left her lips.\n\n\"How far do you want to go?\" He whispered staring into her confused glazed eyes. \"I need to know Kay.\"\n\nKayla's breath hitched in her throat. She blinked to get her eyes to focus and stared incredulously at Dean. \"Christ, why did you...\" Kayla started heatedly but stopped her line of questioning when she saw Dean's expression. He'd raised an eyebrow challengingly and was waiting for her to answer his question. \n\nKayla's body was strung so tight, the ache was eating her up so much that tears of frustration stung her eyes. What the heck had Dean done to her? Was she so addicted to sex that being denied an orgasm got her this unsettled? This could only be one person's fault \u2013 Dean's. She glared at him.\n\n\"Further than you ever went with her.\" She husked, breathing hard. She knew she should be mindful of what she was saying but she was too wound up and frustrated to care. \n\nThat's all Dean needed to hear. He bent to kiss her pouting lips, biting her lightly on her lower lip. \"Hey relax, I'll fix this. Just, not now. You'll thank me later.\" She raised her eyes to his and saw those dark blue eyes promising more...much more, later. \n\nHe picked her up bridal style and walked to a nicely covered steal table. On every national holiday, Dean's parents spent time up there so he wasn't surprised the table was there. Dean bent Kayla over the table so that her butt was on the edge and her high-heeled feet were firmly planted on the ground. \n\n\"Reach out and hold the edge with both hands.\" Dean commanded in a barely controlled voice.\n\nWithout the slightest of hesitation, Kayla reached out with both hands and held on to the edge of the table like it was her life line. She had no idea what Dean was going to do but she trusted him not only to keep her safe, but to give her every pleasure she imagined and more. She felt Dean raise one of her legs onto the table, opening her up even more for his eyes. Kayla blushed. Dean lightly smacked her arse, and then lined his pulsing erection with her wet pussy. He slowly sank all the way inside, pulled back almost to the point of withdrawal, and then slammed back inside her tight heat. \n\n\"Oh, sweet Lord.\" Kayla's eyes closed in ecstasy. \n\n\"Like that?\" Dean asked in a low voice, loving how out of control Kayla was.\n\n\"Love it, baby.\" Kayla moaned.\n\nDean fucked her with long, deep strokes. To him, there was nothing more thrilling than Kayla's moans and mewls of pleasure. Those sounds spurred him on like a man possessed. His muscles burned from the strain, but he kept pumping his hips, kept pushing in and pulling out of that divine heat, that tightness that was consuming him and swallowing him whole. Only the feel of Kayla around him, the sound of her moans and the blinding love he felt for her kept him sane. He was overwhelmed by desire and need. \n\nThen Dean felt it, Kayla was about to come. He could feel it in the way she tensed up, the way her breath hitched, the sweet mewling sounds she was making, which she always made just before she fell off the edge. He felt Kayla tightening, constricting around him... He wasn't ready to allow her that relief just yet.\n\n\"No you don't.\" Dean rasped and pulled out of Kayla. \n\n\"God, please don't stop Dean. Please!\" Kayla sobbed, not even caring that she was begging. She needed to come so bad. \"Dean, please, need to come, please...\"\n\n\"You beg so sweetly my love. But we're still not there yet.\" Dean growled going down on his knees behind Kayla. \n\nKayla felt Dean's breath on her arse and turned to look behind her. \"What are you doing?\" \n\n\"Don't let go Kay. And look forward.\" Came his stern command.\n\nDean knelt behind Kayla and stared at her delectable creamy arse. Thanks to the remaining light, every inch of her beautiful arse was exposed to him and it was such an arousing sight. Christ! His eyes went to what he was looking for...that tiny puckered pretty pink hole. His breath hitched at the clenching hole. \n\n\"Beautiful,\" he breathed.\n\nLeaning down, Dean dropped tiny kisses on her arse, gradually inching towards her crease. He could hear Kayla making tiny lustful sounds that went straight to his cock. He realized her forehead was on the table, probably out of shame? Dean vowed to work on that. He didn't want Kayla feeling shame where he was concerned. \n\nWhen Kayla felt the wet flick against her back entrance, she was so shocked she tensed up. Ignoring Kayla's shocked and grunted protests, Dean flicked the tip of his tongue slowly but firmly across the tight opening.\n\n\"Dean...\" Kayla breathed. \"What...\"\n\n\"Relax.\" She heard Dean mutter. \"And hold still.\"\n\nClosing her eyes and breathing deep, Kayla tried to do as Dean demanded. She felt Dean's hot tongue thoroughly wetting her hole with saliva, licking and swirling his tongue in tormenting little circles against that sensitive flesh. Jesus! It felt wonderful. \n\n\"Oh my God.\" Kayla cried out, her fingers curling more tightly over the edge of the table. She'd never felt anything like that, had never even thought anyone could do that. \n\nDean felt elated at Kayla's response. He had feared she would stop him and had been pleasantly surprised and thrilled that she hadn't. Her gasps and moans of pleasure stabbed Dean with a fresh bolt of lust. His tongue teased and licked at her, then that tongue eased inside her and Kayla went nuts.\n\n\"That feels fantastic, Dean.\" Kayla moaned, pushing back against that wicked tongue, needing more. \n\nDean repeatedly drove his tongue in as far as he could and drew back, then proceeded to tongue-fuck her like his life depended on it. Kayla was going out of her mind. It felt simply amazing. Her nipples tightened into even harder pebbles. Goose bumps rose along the surface of her skin. Kayla was in heaven.\n\nWhilst driving her out of her mind with his wicked tongue, Dean pushed a finger into her soaked pussy, getting it wet for his next move. When he felt her hole had loosened up enough, he pulled out his tongue and then using only the faintest touch, tapped the sweet rosette with the pad of his thumb. Kayla groaned. And it was a good groan. He replaced his thumb with his lubricated finger and gently wriggled the very tip of his finger, using slow, gentle pressure on the already relaxed opening. Dean prodded Kayla's hole, taking it slow, just enough to drive her crazy but not to hurt her.\n\n\"Try to push me out baby. But don't clench on me.\" Dean instructed. \"And take a deep breath.\"\n\nKayla did as he asked and Dean watched the tight hole swallow his finger to the first knuckle, stretching to accommodate him. Kayla gave a long moan when she felt Dean's finger pop into her arse. It felt different, dirty and so good. \n\n\"Oh God!\" Kayla whispered, loving the sensation so much even her voice trembled.\n\nShe writhed against the table, pushing her arse back onto the finger lodged inside her. When Dean slowly sank in his finger to the second knuckle, Kayla cried out as pleasure threatened to steal her sanity, and never return it.\n\n\"That feels wonderful, Dean.\" She gasped, grounding her arse onto his finger. She'd completely lost track of where she was. Moaning loudly and repeatedly, Kayla gyrated her hips in a shameless dance. \n\nDean worked his finger in and out, sliding deeper and deeper into her, loosening all the clenching muscles. Kayla's thigh muscles quivered as she grew frantic, her hips thrusting erratically as she fucked herself on that awesome finger, whimpering, pleading. She wanted more.\n\n\"Dean...\" She cried out.\n\n\"I'm right here, Kay.\" Dean husked as he stood up from his crouched position, his think, long finger fucking Kayla with skilled precision. \"I'm going to make you feel so good baby.\"\n\nStill working his finger in and out of Kayla, Dean rubbed the head of his hard throbbing cock against her wet slit, then entered her with one deep thrust, delighting in Kayla's scream of pleasure. \n\n\"Oh God, oh God, oh God!\" Kayla panted her litany of lust as pleasure battered her senses with the double assault. The pleasure of having Dean's cock back inside her completely shut her brain down. \n\nDean knew that just like Kayla, he was decidedly not in control anymore. He would have been worried had it not felt better than anything. He was too turned on to think. He thrust his finger into her arse as he pounded his cock into her pussy, his hips pumping in synchronicity with his finger. Dean felt Kayla tighten on his cock and almost lost his balance. He cried out as he bore down, the frayed remains of his discipline totally gone. He thrust forward, grinding deep, rotating his hips to intensify their pleasure, burrowed deeper and deeper whilst finger-fucking her arse like there was no tomorrow. \n\n\"Oh, holy hell.\" Dean growled. He felt like he was flying to pieces and never wanted the amazing feeling to end but also knew it had to end before he lost his mind.\n\nHe reached beneath Kayla with his other hand, his fingers hovering so close to her aching clit but not touching. Kayla could feel the heat of his hand and didn't understand why Dean wasn't touching her clit as she was dying for him to do. The sensation was driving her crazy, getting her wound up.\n\n\"Dean please...\" She moaned in frustration. She needed to come so bad.\n\n\"Tell me what you want my love.\" Dean husked. \"Tell me.\"\n\nKayla's eyes shot open in surprise at Dean's demand. Did he seriously want her to spell out what she wanted? But what she saw when her eyes opened made her breath hitch in her throat. Someone...Jean, was leaning against the railing directly opposite the table they were fucking on, his ankles were crossed, a hand stuck inside his pocket, a cigarette stuck between his lips...watching them fuck. Jean's eyes locked with hers.\n\nSweet Jesus! For how long had he been watching them, Kayla wondered. And he was close enough to see them clearly and hear every word spoken. But even as she wondered and flushed shamefully, Kayla couldn't call a halt to what was happening. She was too far gone on pleasure to stop. Something about Jean watching as Dean pounded into her, made this more exciting. Shameful in a way, but exciting. There was something so highly erotic about it that Kayla instantly felt the beginnings of an explosive release within her body. It felt like Dean was everywhere, inside her pussy and her arse, fucking vigorously into her from behind, and at the same time, looking directly at her. Kayla felt her orgasm bubble just under the surface of her skin, waiting for a touch to her clit to burst forth. \n\n\"I want you to touch me.\" She breathed, staring back at Jean with a look of lust, desire and...defiance? \n\nJean smiled slightly. He would give it to her...she had balls, he thought. Now he knew exactly why his brother was so over the moon for her. Kayla was what they called, 'Classy Sizzle'. She was defiantly worth losing an 'I-love-youginity' over. Dean lost his to a deserving chic for sure.\n\n\"I'm already touching you, baby. You're going to have to tell me exactly where you want me to touch you.\" Dean's voice sounded so sexy a shiver raced down Kayla's spine.\n\nWhat was Dean doing to her? He knew perfectly well where she wanted his touch. Why did he want her to spell it out? She was dying. Going out of her mind. She had been denied completion for too long and just wanted that tiny touch that would set her off. With determination, Kayla wriggled he hips downward, trying to get closer to the hand hovering over her clit. But Dean knew what she was trying to do and made sure her clit never touched his hand. A sob tore out of Kayla. ",
        "\"Tell me Kayla.\" He cajoled. God, he loved this woman. \"Just tell me.\"\n\nShe almost squeezed her eyes shut in shame, but couldn't look away from Jean. She was nearly hyperventilating from need. What was he going to think about her if she blurted out what she wanted to Dean? Then Kayla saw it...it was very slight but she saw it clearly... Jean's nod of encouragement. In the end, her body's need overpowered her apprehension and shame. Kayla licked suddenly dry lips.\n\n\"My clit.\" She whispered. Then in a stronger voice she said; \"Touch my clit please. I need to com...\"\n\nBefore she could finish her request, Dean's fingers were strumming her clit as though they were working on a guitar's strings. Kayla went berserk, squirming and writhing as sensation overload threatened. Her eyes started to go hazy just as a loud cry tore out of her throat, she bucked against those fingers, totally drunk on pleasure. Dean didn't know if she even realized she always made those mewling sounds in the back of her throat whenever she was about to come. It drove him crazy. She couldn't hold still, it felt like she was on fire. She was close. So damn close...\n\nWhen Kayla exploded, she didn't moan or cry out. She screamed, long and hard as she convulsed around Dean, clamping down on his cock. Nothing could stop her from flying apart, exploding into a million pieces, burning under the pressure of Dean's invading finger, strumming fingers and thrusting cock. Her scream tore across the rooftop, carried over the wind to any listening ear. Her surroundings disappeared until all she knew was Dean and the pleasure he was giving her, and Jean, whose eyes never left hers throughout her orgasm. She was in a state of euphoria, a sublime pleasure that simply blew her mind. It felt so good it was almost painful. She forgot to breath, she lost all sense of hearing, her vision blurred and her heart threatened to burst from her chest, her eyes widened...\n\n\"Breathe.\" She saw Jean mouth at her and exhaled the breath she had been holding for longer than it should have been possible.\n\n\"Oh my God, Dean.\" Kayla gasped. Her mind was still blank. God, she was dying. Right there on that metal table. And she didn't care.\n\nWith a quick jerk of his hips, Dean pulled out of Kayla and turned her to lie on her back. Then plunging back into her, he closed his eyes and began to ride her with obvious intent, hard and rhythmically, with just one goal in mind...to come. He was so out of it, his thrusts grew increasingly vigorous as his excitement got the better of him and he lost his rhythm. His body was tense, face contorted with pleasure. Kayla had never seen anything sexier in her life. She knew she wouldn't mind seeing that look every day and every night for as long as she lived.\n\nKayla couldn't take her eyes off him. He was simply gorgeous. She felt such an overwhelming love for him, a wave of tenderness so profound it brought tears to her eyes. Lifting her hips, she gyrated against him, wanting to give him more pleasure. She squeezed him inside her, tighter and tighter. \n\n\"Fuck, Kay. Yes, baby. Squeeze me. Just like that.\" He whispered, coming undone.\n\nKayla rocked even harder against him, clenching her muscles. But in doing so, she also unintentionally stimulated her swollen clit against his pubic bone. When she felt the beginnings of an unexpected orgasm, she reached up and brought Dean's head to hers and captured his lips in a kiss so sweet and at the same time so wild, Dean's orgasm slammed into him without warning. \n\nHe threw his head back with a loud cry and went completely still as he poured his cum into her. He came so hard his world went white. \n\n\"Be mine, Kayla.\" He growled even as his body trembled with ecstatic ripples. \"Please.\"\n\nThat passionate plea was her undoing. Kayla's orgasm slammed through her, rippling through her entire body, causing her muscles to tighten up rhythmically on Dean's cock, milking him pleasurably and prolonging his orgasm. They were both on a high so amazing it was indescribable.\n\nKayla didn't know exactly when she started chanting Dean's name. All she knew was that she couldn't bring herself to stop. And that in itself, was driving Dean out of his mind. When their tremors eventually stilled, Dean collapsed beside her, cuddling her in his arms with so much tenderness.\n\n\"Christ...You'll be the death of me Kay.\" His chest rumbled with a low, primitive sound. Then his mouth descended on hers, kissing her with so much passion, telling her through the kiss just how much she meant to him. \"I love you. I love you so much it fucking breaks me.\" He whispered around the lump in his throat. Then went right back to kissing her.\n\nWhen they came up for air, Kayla cupped Dean's cheeks in her palm and looked into his eyes, her own shimmering with irrepressible tears. \"And I love you Dean. I love you with everything that I am. And I'm yours. Just as you're mine.\" Her voice cracked as her throat squeezed shut with emotion. When Dean's handsome face blurred, she blinked and tears spilled from her eyes into her hair.\n\n\"You're incredible, you know that?\" Dean husked, gently wiping at her tears with the heel of his hand.\n\nKayla only smiled, then remembering Jean, she turned her head to the side where he had been standing. He wasn't there.\n\n\"He's gone.\" Dean said quietly, knowing who Kayla was looking for. \"Did it bother you?\" When Kayla indicated with a shake of her head that it hadn't, Dean dropped a kiss on her swollen lips. \"You were amazing, baby. That was off the hook!\" He gave her a delirious smile, his dimples showing.\n\n\"You are so frigging gorgeous.\" Kayla gushed, then promptly added when Dean blushed; \"And so adorable.\"\n\nDean groaned. \"Are you trying to emasculate me woman? I just fuck your brains out and the best you can come up with is, I'm adorable?\" Dean gave a mock scowl.\n\nKayla's entire body shook uncontrollably against Dean's with laughter. \"Oh baby, you know you always rock my world. You are one hell of a good lay Mr. Broody.\" She purred. \"Come here, let me show you just how much.\"\n\nWhen Kayla's weaved her fingers inside Dean's hair, he moaned and his eyes drifted shut. Lowering his head he took her lips, tracing the contour of her lush swollen lip with his tongue before probing into her mouth. He run his tongue along the ridge of her teeth, the roof of her mouth, and then stroked the surface of her tongue. She sighed, trembling, as her lips parted wider to allow his tongue deeper. When she started sucking on his tongue, Dean shuddered with a groan, feeling his cock harden inside Kayla.\n\n\"Ahh,\" Dean gasped, fighting the urge to thrust up into her. \"Kay, we have to stop.\" He groaned. \"I want you in a proper bed.\" He tore his mouth away from hers and pulled out of her warmth.\n\nPulling out a handkerchief from his pocket, Dean wiped Kayla clean as much as he could, then he wiped himself and zipped up. When he pulled Kayla off the table, he had to hold her for a while as her legs just wouldn't stop shaking. He tucked her head beneath his chin and stroked her back with one hand.\n\nThey could hear the faint sounds of Foy Vance's 'Guiding Light' playing and Dean swayed Kayla to the music. \n\n\"When I need to get home you're my guiding light, you're my guiding light.\" He sang along in his flawless baritone, making Kayla melt even more.\n\n\"Oh God, he can sing too.\" She whimpered in awe. \"You're killing me here.\"\n\nDean laughed and nuzzled her ear. \"You okay?\" He whispered into her ear.\n\n\"I'm good.\" She said gazing up at him adoringly. God, she wanted him again. Desperately. How could she want him again already? Kayla sighed. She was addicted to Dean Broody, Kayla thought as a ripple of delight streaked down her spine. God help her. God help them both as there was no power strong enough to stop her from lusting after Dean for...as long as she lived. Damn!\n\n***\n\nWhen they eventually got downstairs, they both headed straight for the washroom to clean up. Kayla blushed to the roots of her hair when Dean insisted on cleaning her up himself after quickly cleaning himself up. \n\n\"I can do it myself Dean.\" She protested. No longer cloaked under the lethargic intimacy usually shared right after sex, Kayla felt too shy to allow that. \n\n\"I know. But I don't want you to feel shy around me Kay. Ever! Now come here.\" Dean's determined look indicated that he wasn't in the mood to be argued with. \"Besides I can do a better job 'cause I can see every...\"\n\n\"Will you shut up?\" Kayla groaned, covering her eyes. Dean roared with laughter.\n\nHe picked Kayla up and laid her on the wide vanity. Then he proceeded to wipe her clean with a warm washcloth. By the time he was done, Kayla felt as good as new. Dean went to bring her bag so she could restyle her hair and re-do her make up.\n\n\"You look beautiful.\" Dean murmured, looking at her with so much desire her breath caught in her throat.\n\n\"Thank you.\" She smiled.\n\nJosh, Sam and Alan had already left with their partners and the kids. So had Alice. Ron, Jean and Tyler were sitting by the pool with Michael, conversing and sharing a bottle of Camus. \n\n\"There you are.\" Michael Broody turned to smile at Dean and Kayla when they entered the pool area. \"Sweetheart, Lucy wants to see you.\" Michael addressed Kayla. \"Show her to our bedroom son.\" He instructed Dean and turned back to his other sons, who had been conversing the whole time Michael had been talking to Dean and Kayla.\n\nBy the time they got back inside the house, Kayla was a nervous wreck. \n\n\"Oh my God Dean, she knows.\" Kayla breathed, clutching at Dean's hand.\n\n\"Knows what?\" He asked, genuinely confused.\n\n\"What do you mean, knows what? She knows we had sex up there. What am I...\"\n\n\"Baby?\" Dean stopped and turned to face Kayla, taking both of her hands in his. \"Listen to me. The last thing my mother would do is condemn you for having sex. Wrong mother. How the fuck do you think she gave birth to seven ki...\"\n\n\"Dean, you know what I mean.\" Kayla whimpered, cutting him off.\n\n\"I know.\" Dean said with a chuckle. \"I was just trying to make you feel better. But seriously, I don't think my mother sees anything wrong with having sex Kay. You can always tell her we didn't have sex if that will make you feel better.\" Dean chuckled. \"But wait...she might wanna check. See for herself...she's a gynecologist you know...\"\n\n\"Will you get serious for just a second Dean?\" Kayla screeched hitting Dean on the arm.\n\n\"Ouch.\" He cried out in mock indignation, rubbing his arm. \"That's assault Madam Law Student.\" But when he saw the genuine worried look on Kayla's face, Dean sobered up and hugged her to him. \"You'll be fine. My mother already adores you, Kay. You have nothing to worry about. Okay?\"\n\n\"Okay.\" Kayla whispered feeling slightly better.\n\n\"Shall we?\" Dean asked stepping away from her and taking her hand in his larger ones.\n\nDean rang the bell on his parents' door and opened it. \"Mum?\"\n\n\"In here, baby.\" Lucy called out from somewhere inside the room. \n\nKayla noticed that they were standing in a living room. Lucy was probably in there somewhere, she thought. She turned to follow Dean into another room and gasped. Michael and Lucy Broody's bedroom was the biggest she'd ever seen. \n\n\"Hi Kayla.\" Lucy was sitting up in bed, with her back against the headboard, holding a TV remote. She was reducing the volume on the program she was watching. \"Come here darling. Come sit beside me.\"\n\nKayla went to stand awkwardly beside the gargantuan bed and looked down at her shoes.\n\n\"Climb in.\" Lucy laughed. \"Don't mind those. They are lovely by the way. Come on.\" She patted the space beside her.\n\nBut Dean quickly went down on a knee to undo the straps around Kayla's ankles, and then removed her shoes. \"There, you'll be more comfortable this way.\"\n\n\"Thanks.\" Kayla smiled at him and climbed onto the bed beside Lucy.\n\nLucy waited till Kayla was comfortably seated beside her, then turned to her son with a slow wink. \"You may leave.\"\n\n\"Alright, alright, I'm going. See you later, babes.\" Then Dean was gone. \n\nLucy increased the volume on the program she was watching on the giant flat screen TV. 'Iron Chef America'. Bobby Flay was up against Michael Symon.\n\n\"I just love Michael Symon. He's definitely going to win this.\" Lucy gushed. \n\n\"Wanna bet?\" Kayla drawled before she could stop herself.\n\nLucy laughed. \"Oh, so you're a fan of this program too huh?\" She asked turning to look at Kayla.\n\n\"I love it Dr. Broo...\"\n\n\"Ah, ah, none of that. Call me Lucy.\" Lucy said, turning back to the program. \"Tell me, who's your favourite Iron Chef?\"\n\n\"Bobby Flay. Oh but I love Symon too. And Morimoto is simply a master. And I think Marc Forgione is cute. Alex...\"\n\n\"You love all of them don't you?\" Lucy laughed, captivated by the excitement in Kayla's eyes.\n\n\"I do actually.\" Kayla said with a laugh. \"Especially Bobby Flay. Come on, the guy even grills bananas.\"\n\n\"Tell me about it.\" Lucy said and they both burst into laughter. \"Okay then, let's see who wins. If my Michael wins...\"\n\n\"I knew it. You love Symon because he's called Michael.\" Kayla teased, suddenly feeling at ease around the elderly woman.\n\n\"You got me there.\" Lucy laughed. \"And he can cook too.\" She added. \"So if he wins, what do I get?\" Lucy asked.\n\n\"What do you want?\" Kayla shot back.\n\nLucy Broody went quiet for a full minute, then in a soft voice, she said, \"Love my son. Don't hurt him.\"\n\nKayla's eyes instantly filled with tears. \"And if I win?\" She whispered around the lump in her throat.\n\n\"What would you want?\" Lucy asked.\n\n\"I'll love the hell out of him.\" She whispered fiercely, the tears finally spilling down her cheeks.\n\n\"Come here.\" Lucy said, gathering Kayla into her arms and wiping her cheeks with a tissue.\n\nAnd that's how both women watched the show, with Kayla tugged comfortably beside Lucy, her head resting on the older woman's shoulder. When Michael Symon won, both women laughed softly.\n\n\"We both win.\" Lucy murmured. \"Welcome to the family, Kayla.\"\n\n\"Thank you Lucy.\" Kayla whispered and adjusted herself more comfortably against Lucy.\n\nWhen Dean and his father entered the room about an hour later, it was to find both women fast asleep, with Kayla still cuddled beside Lucy. Both men just stood there staring at the women in their lives. Then Dean took out his phone from his pocket and took a picture of the most heart-tugging sight he'd ever seen.\n\n\"I think that one is yours.\" Michael said, pointing at Kayla with a chuckle when Dean pocketed his phone. \n\nDean picked up Kayla's bag and shoes from the foot of the bed where she had left them, leaned down to kiss his mother on her forehead and then picked Kayla up bridal style, making sure his dad didn't see her naked butt. \n\n\"Good night Dad.\" He said strolling towards the door. \n\n\"Night son. Talk to you tomorrow.\"\n\n***\n\nKayla opened her eyes when Dean laid her on his bed. \"Where are we?\" She stretched.\n\n\"My house.\" Dean said starting to strip out of his clothes. \"You fell asleep with my mother.\"\n\n\"Oh...\" Her eyes widened. \"You mean I've been asleep all this while?\"\n\n\"Yes. You're obviously tired. I'll be right back.\" Dean said entering his en-suite bathroom. \n\nKayla heard water running even as her heavy eyelids fluttered shut. When Dean came back into the room, in all his naked glory, it was to find Kayla fast asleep.\n\n\"Wake up, baby.\" He said sitting beside Kayla on the bed to gently shake her.\n\nKayla groaned and opened her eyes slightly to look at Dean. \"I just wanna sleep.\" She pouted. \n\nThen her eyes opened wider when she took in Dean's sexy naked body. \"You know, if I wasn't feeling so sleepy, I'd rape you.\" She murmured, making Dean laugh.\n\n\"Well too bad you're feeling sleepy.\" Dean said stripping off Kayla's clothes. Then he picked her up and carried her into the bathroom.\n\nThe bath, which was big enough for six people, was filled with water, steam rising gently above the foam. Dean placed her inside the warm water and got in behind her so that Kayla sat between his legs with her back against his chest and her head on his shoulder. Dean's legs encased Kayla, and his cock hit right at the cleft of her arse. He was hard.\n\n\"Dean...\" Kayla breathed.\n\n\"Take no notice of that baby. I can't help it.\" He said in a calm voice as he lathered and washed her.\n\n\"But I want it.\" She whined. She suddenly wanted Dean so much every muscle in her body had tensed to the point of hurting. Who wouldn't, if they were around all that naked hotness currently stationed behind her?\n\n\"Kayla, you're virtually asleep. The last thing you need right now is sex.\"\n\nKayla wiggled her butt against Dean's erection, smirking when she heard his groan. \"Kay...stop that.\" \n\nShe grabbed his right hand and brought it to her lips, dropping a gentle kiss into his palm. Then she drew one of his fingers into her hot mouth. Kayla could hear Dean breathing hard behind her. She sucked his finger gently, drawing her mouth back to the tip, and working her tongue along its underside, before she sucked it deep again.\n\n\"Oh fuck!\" Dean groaned as his eyes drifted shut. Kayla could feel his body trembling against her. \"Kay, please.\"\n\n\"I want you.\" She breathed.\n\nWith a growl Dean wrapped his left arm under her breasts, using his fingers to caress her nipples, plucking, pinching and twisting them till a cry left her lips. Then his right hand burrowed into the water to find Kayla's pulsing clit. It was already swollen and begging for attention. Dean pinched it between his thumb and fingertips, stroking it front and back, working her into an insatiable frenzy.\n\n\"Oh God, yes, Dean. So good.\" Kayla gave a long moan.\n\n\"Is this what you want?\" Dean husked against her neck, his mouth sucking on that sensitive spot at the base of her neck.\n\n\"Yes, yes. Oh God, I'm going to...\" She cried out as her body shuddered and twitched in orgasm, riding every contraction. \n\nKayla gasped over and over as she came apart. Then her body instantly went lax against Dean, all soft and sweet. Dean had never felt such overwhelming love and tenderness in his heart as he felt at that very moment.\n\nDean removed his fingers from her clit knowing that she would be sensitive from all that stroking. He quickly rinsed Kayla and got her out of the tub to dry her. She was fast asleep even before her head touched the pillow. Dean got into bed and drew her into his arms, and then pulled up the comforter to cover them, totally ignoring his erection. He smiled when she mumbled something unintelligible and snuggled into his chest. \n\nHe loved her so fucking much. Dean leaned forward to drop a kiss on Kayla's forehead and then drifted off to sleep with a contented smile on his face. \n\n***\n\nDean woke the next morning to an exquisite feeling around his cock. Damp heat engulfed him. With an involuntary moan, he looked down and saw Kayla between his leg, her lips sliding over the crown of his already hard cock, and then moving down to suck about half his shaft into her hot mouth. \n\n\"Fuck!\" Dean's hands went to her head, not to direct her but simply to touch her.\n\nLife ceased to exist. There was nothing left but the sensation of her mouth on him, swallowing him down until half of his cock disappeared into her mouth. Shit! Didn't she have any gag reflexes? He watched her pull back to flick her wet little tongue over his tip, swirling it around in a way that caused a shiver to run down his spine. Dean let his head fall back with an agonized groan. \n\n\"That feels so good,\" he mumbled. It wasn't just the feel of her hands and mouth, but the sight of her doing what she was doing, that sent his mind into a blissful frenzy. \n\nKayla was determined to drive Dean out of his mind. She had fantasized about giving him a blowjob for a while now. Having no idea how to go about it, Kayla had surfed the internet to learn all there was to know about giving head. She had actually gone further to practice on bananas. And from the sounds Dean was making, she had gotten it right. Once Dean was glistening with moisture from her clever tongue, Kayla curled her hand around the base as she slowly worked him deep. Her flushed cheeks hollowed as she sucked him in. Though Dean's cock was too big to fit into her mouth, she was determined to get him down her throat.",
        "\"Oh God, Kay...\" Dean choked out, threading his fingers through her hair. He wanted to grab the back of her head and fuck her face, but had to make a conscious effort not to hurt or scare her. \n\nKayla looked up at Dean with glassy green eyes glazed with lust. Dean took in her flushed face, cherry-red cheeks, and blood-red lips and thought she was the most beautiful creature in the universe. \n\n\"Fucking gorgeous, baby.\" Dean moaned, watching Kayla suck his cock like a pro.\n\nThe sight of her burned into his brain, shredded his control even as her tongue rolled around his shaft and teased, driving Dean out of his mind. Her hand stroked him at his base even as her other hand moved down to cup his balls. She left no part of his length unexplored by those wet, delectable mouth and her hands. Her ministrations sent a shiver across Dean's skin, causing his back to arch involuntarily. His entire life was focused between his legs in that moment, Kayla's mouth causing delicious sensations which he could feel all the way to his toes. When Kayla moved down to lick and suck on his ball, Dean almost jumped off the bed.\n\n\"Holy fuck.\" He breathed as his fingers tangled in Kayla's hair, squeezing tightly...possessively. A primal whimper came out of his throat, a sound of pure excitement set free.\n\nThose lips latched onto his balls felt amazing. Kayla kept stroking his leaking cock the whole time. Then with a naughty look in her lovely eyes, she released his balls and moved that hot mouth back onto his cock. A ragged grunt escaped Dean's mouth as she closed her mouth around the fat head of his cock, engulfing it fully, and then proceeded to suck hard even as her hand twisted and pumped the length of his cock not covered by her mouth.\n\n\"Good God, woman. What are you doing to me?\" He groaned. His cock throbbed and his balls ached with the need to come. \n\nWith his eyes practically rolling back in his head, Dean's hips rocked slowly, undulating sexily against Kayla's lips. His breathing became ragged and choppy as his chest heaved. The pure pleasure of her tongue slicking up the underside of his dick and her hands rolling his balls was more than he could take. Jesus. \n\nWith an animalistic growl, Dean's fingers tightened in Kayla's hair and he took control. He held her head exactly where he wanted it and started to slowly thrust into that hot mouth, watching Kayla's face the whole time for signs of distress. There was none. Dean was careful not to go too deep but Kayla surprised him by actually trying to take more of him in. She took Dean as deeply into her mouth as she could, felt the head of Dean's cock at her throat and relaxed, trying to take him in further. When Dean felt his cock hit the back of Kayla's throat, he thought he'd died and gone to heaven. It felt so good. \n\n\"Christ!\" Dean choked out, his balls tightening instantly. He was shocked at the skill Kayla was exhibiting. Though the muscles in her throat seemed to constrict around his shaft, she didn't gag...didn't choke. Fuck!\n\nKayla locked eyes with Dean, taking in his face which was lost in pleasure, and wanted him that way forever. She felt humbled and at the same time thrilled that she had such a profound effect on such a blatantly sexual person. Kayla therefore wanted to give him maximum pleasure, one he would never forget. Though her eyes watered, she didn't pull off the huge cock stuck down her throat. Even as her mind screamed... too much, too thick, too fast, too deep, her throat worked convulsively, accepting the battering intrusion, taking all of him. \n\nDean couldn't help but be amazed at what Kayla was doing. Even as he hovered around cloud nine, he was still wondering how Kayla got so skilled in giving head. Was it beginners luck? Had she done it before? If she had, who was the guy? 'Cause whoever the guy was, Dean wanted to meet him...and beat him to a pulp...well, after giving him a grateful handshake of cause. Much as he hated the idea, he acknowledged the fact that he had taught her well.\n\nThen Kayla did the unthinkable...she started humming around the head of the cock lodged in her throat. How the fuck do you manage that with a cock lodged so deep down your throat? But even as he wondered, Dean knew he didn't stand a chance. He lost it.\n\nHe felt his balls draw tight, felt himself about spiralling over the edge. \"Kay, fuck, move, gonna come,\" he groaned, but Kay wouldn't budge. She rather chose that moment to swallow around his cock. \n\nWith a loud scream and snap of his hips, his climax tore into him from his toes on up. Dean let his head fall back as his hips moved, just letting the sensations drive him. Holding Kayla by the hair, he speared his shaft down into the willing throat, spilling hot and thick cum down her throat. The excruciating ecstasy was so intense, the world disappeared.\n\n\"Fuuuuuuck!\" Dean felt like he was going to die of pleasure as every organ in his body clenched in hard spasms.\n\nKayla's throat rebelled. She gagged, her eyes watered but she didn't let go. Dean immediately loosened his hold on her head and stopped pumping his cock into her throat. So much cum spurted out so quickly, Kayla couldn't swallow all, the excess spilling out of the corners of her mouth.\n\nThe climax shattered Dean, hitting so hard, he lost his breath. His gut cramped. Dizziness assailed him as his chest heaved with each gasping breath he took. His body jerked spasmodically, riding the aftershocks, his orgasm leaving him entirely disoriented. Kayla didn't let him go until she'd wrung every blessed drop from him. Just as the sucking on his over sensitized cockhead became too much, Kayla eased off and licked gently up and down his softening shaft, not willing to give up that feeling of Dean's cock in her mouth.\n\nAfter licking his cock and her lips clean, Kayla crawled up to partially lie on Dean. She was panting from all the exertion. She looked at Dean's closed eyes, noting the shudders that still rocked his body. He was gorgeous. \n\n\"Come on, open your eyes.\" She whispered.\n\nWith some effort, Dean pried open his eyes. He was feeling all floaty and sated, his mind buzzing from the most amazing high. Brilliant dark blue eyes, which looked dazed, turned on Kayla. He was obviously still lost in a world of his own. Jesus! \n\nWild horses couldn't have stopped Kayla from leaning down to kiss him senseless. When he parted his lips to invite the invasion of her tongue, she plunged in. Thrusting her hands into his hair, she held him still for the onslaught of her mouth. She utterly devoured him, ravaged Dean's willing mouth. When Kayla eventually came up for air, Dean watched her so intently, she couldn't tear her eyes away.\n\n\"Good morning,\" She said softly.\n\nDean kept staring at her, making her flustered.\n\n\"Quit looking at me like that,\" Kayla whispered.\n\n\"Like what?\" Dean croaked.\n\n\"Like...that.\" Kayla muttered and closed her eyes, suddenly feeling shy.\n\n\"I'm sorry. That was...there are no words for what you just did, Kay.\" There was no tease in Dean's voice, and Kayla slowly cracked her eyes open. \"Jesus Christ, Kay,\" Dean run his fingers through his hair with a moan. \"I've never experienced anything like that.\"\n\n\"So you liked it?\" She asked quietly.\n\nDean's mouth fell open. \"You...you really have to ask that? Seriously? That was out of this world, baby. I'm...I don't...how were you...fuck!\" Dean couldn't string his question together.\n\n\"You're wondering how I knew how to...\" Kayla trailed off blushing even harder.\n\n\"Hell, yeah.\" Dean rasped. \"How the fuck did you know how to do that?\"\n\nKayla hid her face against Dean's neck and groaned. \"I researched on the net.\" She murmured against his skin.\n\n\"Holy fuck,\" Dean whispered. His heart soared. She had done that for him. \"I love you so much, baby.\"\n\n\"I know. And I love you too.\" She whispered right back.\n\nDean held her tightly to him, thanking the gods that had made this possible because he really didn't see himself without Kayla in his life. All of a sudden, whenever he was with Kayla, he got that feeling...that spark, that he'd never felt with anyone. They lay wrapped in each other's arms in a comfortable silence till Kayla broke it.\n\n\"Dean, about Jean, I know I said I was okay with it but...what is he going to think...\" She trailed off because she really didn't know how to put it.\n\nDean placed a kiss on her hair and gave her a slight squeeze. \"Don't worry about Jean, Kay. He only wanted to test me. If I wasn't serious about you, I would have invited him to join. It would have been up to you to say no.\"\n\nKayla looked up at Dean. \"Really?\" At Dean's nod, Kayla grinned. \"But you didn't.\"\n\n\"Let's just say he got his answer. Kay, we've done a lot of things. I'm not proud of everything we've done but hey...we're just guys having fun. Now not only Jean, but all my family knows you're where I draw the line. You're mine. Mine only. And I don't joke with what's mine.\"\n\nKayla had never heard words so heartfelt and beautiful. \"I love you, Dean Andrew Broody.\" She said with a tremulous smile.\n\n\"You know I...\" Dean groaned when his phone rang. He reached for it with a frown but his face lit up when he saw the caller.\n\n\"Tristan. Isn't it too early for you to be awake?\" Dean drawled knowing Tristan's weekend usually started from Fridays. The boy was a party animal.\n\nTristan chuckled on the other end of the phone. \"You said you were going to call last night. What happened?\"\n\n\"Something came up.\" Dean said, drawing Kayla closer to him.\n\nTristan went quiet for a moment and then said, \"Put the phone on speaker Dean.\"\n\n\"Buzz off asshole.\"\n\n\"Just do it. Jeez.\" Tristan laughed.\n\nWith a groan Dean turned to Kayla and asked, \"He wants me to put it on speaker. Do you mind?\"\n\nKayla laughed and shook her head, no. Then she surprised Dean by screaming Tristan's name.\n\n\"Sup Sexy?\" Tristan laughed. \"How was your trip?\"\n\n\"It was amazing. I need to sit you down and tell you all about it.\" She gushed.\n\n\"Yeah? Bet you fucked your brains out like nobody's business.\" Tristan drawled.\n\nKayla roared with laughter. \"I sooo didn't Tris. You're not going to believe what happened darling. I met this gorgeous hot guy, who I was dying to smash to the moon and back. But guess what...\"\n\n\"What?\" Tristan asked eagerly.\n\n\"He wouldn't put out.\" Kayla said ignoring Dean's incredulous look.\n\n\"Nooo.\" Tristan gasped in a mockingly hoarse voice.\n\n\"I swear...\" Kayla groaned. \n\n\"Are you two for real?\" Dean cut in making Kayla and Tristan burst into laughter. \"Damon?\" Dean called when he heard Damon's chuckle in the background.\n\n\"Leave me out of this Dean. You know Kyle's birthday is in two weeks right?\" Damon asked.\n\n\"Oh yeah. We're gonna party. Hey how's Ken?\" Like all the friends, Dean was worried about Ken, Kyle's twin brother who was fighting cancer.\n\n\"Spoke to him this morning. He's good.\" Damon answered. \"What's up girl?\" He addressed Kayla. \"Missed ya.\" \n\n\"I'm great my love. And I've missed you more.\"\n\n\"That idiot treating you good?\" Damon drawled with a smile in his voice.\n\n\"Hmmm...he's trying...\" Kayla started but couldn't finish because Dean pounced on her.\n\n\"Oh really?\" He roared, tickling Kayla mercilessly.\n\nDamon and Tristan couldn't help but laugh too as the two love birds' contagious laughter rang out on the other end of the phone. Their laughter quickly turned into kissing sounds, and then moans.\n\n\"That's it. We're outta here guys.\" Tristan said with a chuckle and hanged up, leaving Dean and Kayla to get back on cloud nine.\n\nAnd oh what a sizzling trip it was. Sometimes it was gentle and slow, other times it was frenzied and harsh and brutal. They just couldn't stop. They didn't leave the bed till noon. And even that, it was due to hunger pangs.\n\nDean and Kayla were in their own blissful world. But just when they thought nothing could touch them...\n"
    ],
    "authorname": "adjoaq",
    "tags": [
        "exhibition",
        "bonding",
        "blowjob",
        "bath",
        "outdoors"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/the-steamy-chase-ch-08"
}
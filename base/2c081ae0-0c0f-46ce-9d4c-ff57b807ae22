{
    "title": "Red Lace Trilogy",
    "pages": [
        "Red Lace Trilogy, Part One \u2014 Party Across the Hall\n\n\u2014\n\nHave you ever done something impulsive? I mean really impulsive, like, to the brink of craziness or beyond? I'd lived my whole life, and grown to be a middle aged forty-five year old woman, without doing such a thing, but...and oh, baby, is this a big 'but'...a few days ago I went there, to that impulsive, crazy place where only impulsive crazy people go. Turns out, it was right across the hall.\n\nIt started innocently enough, as long as you think it's 'innocent' when a middle aged woman gently flirts with a much younger man. You see, a good friend of mine, a woman about my age named Jill, had to take a two-week vacation from work very suddenly, due to her mother falling and breaking a hip. Jill, who has three cats, asked if I would mind house-sitting for her, to look after her apartment and take care of her cats and the fifty or so houseplants that would need watering while she was out of town. I said sure, I'd be happy to help out. I don't have any pets, and just a few plants, so my own place pretty much takes care of itself.\n\nSo I moved into Jill's cute apartment, an old fashioned 'flat' in a vaguely Victorian four-plex. I brought a soft-sided suitcase packed with my things \u2014 books, magazines, clothes, my toiletries and yes, a small vibrator. My apartment is only six miles away, so bringing just one small suitcase was enough.\n\nYou walk through the front doorway at Jill's building and enter a hallway, with her apartment door on the right and another apartment on the left. A fancy old wooden staircase leads to the upstairs hallway, with a similar layout of two more apartments. It's a tidy building; it's clean, and it always smells good, in an old house, old wood kind of way.\n\nJust moments after arriving, I was in the hallway trying to get Jill's key to work in her somewhat reluctant lock when a very cute younger guy came in off the street. He said \"Hi\" and looked at me a little bit more than would be usual. Turns out he's Jill's across the hall neighbor, and he wasn't aware she'd had to go out of town. His name is Jack.\n\n\"Yes, she said she might be be gone for two weeks,\" I said. \"My name's Allie.\"\n\n\"Allie? Wow, I like that name. You're my first Allie.\"\n\nI smiled, probably more than I should have. But really, what a charming thing to say, right? Jack stood and watched me for a few seconds as I tried the key again.\n\n\"I think we all have trouble with our locks,\" he said. \"The landlord is supposed to replace them all someday.\"\n\nIt was then that the key turned, and Jill's door opened, but this handsome young man's presence was so distracting I'd forgotten about the cats. As quick as that, two of them were into the hallway, like furry streaks of lightning. Jack, very kindly, helped me corral them, and, also quite gentlemanly, he didn't just walk into Jill's apartment with a cat in his arms. He waited at the door for me, with a very pleasant look on his face, calming the spooked-looking kitty. Jill had never mentioned this nice neighbor to me, and I wondered why.\n\n\"How long have you lived here, Jack?\"\n\n\"Oh, wow, just a few weeks, I guess. Yeah, I just paid my second months rent. I like it here. Your friend seems nice.\"\n\n\"Yes, she's...(a bit lonely, like me, I wanted to say)...she's very nice. We've been friends since high school.\"\n\n\"Oh, wow.\"\n\nJack and I said a pleasant goodbye, and I slowly settled into my new surroundings. The cats, somewhat aloof at first, got used to me more and more. After a day or two we were like old friends, with not one but two of them on my lap in the evening, with the third close by my shoulder. They were missing Jill, I'm sure, but I was glad I was a reasonable substitute.\n\nI spoke to Jack in the hallway and out on the front steps, three times, I think, over the course of that first week, and I must say he's a very attractive young man. I use the word 'attractive' in its literal sense, meaning if I was a twenty-something girl, and single, I would absolutely make a play for more of his attention. He has that certain magnetism that many men don't have. I suppose it's just my own internal magnet, aging and somewhat worn out as it is, that just happens to be the type that's pulled in by his. Of course, other than being charming and friendly I'm sure he didn't feel the same tell-tale pull that I did, but it was fun to dream about. Nice fantasies. And when combined with the new-to-me sensuousness of lying naked in bed with the soft fur of warm cats against my skin, while bringing myself to orgasm with my trusty vibrator, well, yes, they were very nice fantasies, indeed.\n\nI was halfway through the second week of house-sitting when Jack told me, out in the hall, that he was hosting a party at his apartment on Friday night, a bachelor party for a very good friend of his. \"I hope we don't bother you too much. I've already told the people who live upstairs,\" he said, gesturing at the staircase. \n\n\"Oh, no, you won't bother me,\" I said, smiling. \"I'll expect to hear lots of boisterous fun. It's a party after all, right?\"\n\nJack smiled, in that way that he does, the way that melts my heart a little bit and makes me yearn for youth.\n\n\"So...,\" I said, curious, \"...are bachelor parties still...naughty, these days? The old stereotype is for a naked girl to come out of a giant cake.\"\n\n\"A cake? Really?\"\n\n\"Yes. But that goes way back to my grandfather's time. It was just a way to make the stripper a surprise, even though I'm sure everyone expected one. A stripper, I mean.\" I'm afraid I blushed, and my blush caused Jack to blush. I embarrassedly asked him, \"Are strippers still...part of the fun?\"\n\nJack's face, a quite beautiful shade of fleshy pink, showed smirking mischief when he nodded. \"There's...one coming. It was my brother's idea.\"\n\n\"Oh, you have a brother? He's coming to the party?\"\n\nJack nodded, his eyes looking at mine, differently now. It was a bit of bashfulness, I think, from talking about strippers and such. He and I were only very casual acquaintances, after all, and then there's the age difference between us. It got me to wondering just how old his mother is, and how old\u2014or how young, I should say\u2014the stripper would be. None of it was any of my business, of course, so, before I said something embarrassing, I bid him adieu, saying, \"Well, have fun at your party.\"\n\nI suppose it was right around then, or just a short time later that evening, when I started daydreaming about the bachelor party, wishing I could be a fly on the wall on Friday night, curious as to how young men in their late twenties blow off steam in such a situation. I was curious, too, about Jack's brother. Could he be, say, eighteen or twenty years older than Jack, and single, and, oh, I don't know, maybe perfect for me? It was a ridiculous thought, fun for a few moments, but then the truth of it all came crashing down \u2014 I couldn't marry the brother and be in love with Jack, too. It would all be much too messy. I smiled, picked up a soft cat, and held its warmth against my face and neck. It made me want to get naked and roll around in bed with the furry critters once again. I was beginning to understand the whole 'Cat Lady' thing. Lots of warm fur and a vibrator. What more does an old gal need?\n\n-\n\nSoon it was Friday evening, the beginning of my last weekend at Jill's place, and this, dear friends, was when I somehow lost my mind. I wish I could say there was a plan, or some forethought, but I can't remember any. I do remember standing quietly, and invisibly, I hope, watching young men arrive for the party, me sneakily watching through lace-curtained windows as they parked their cars on the street and made their way up the building's front steps. Jack's brother was one of them, easy to recognize due to the resemblance. There was close to a dozen cars already parked when arrivals slowed to a trickle. A few of the cars were expensive \u2014 a BMW, a Lexus, two very sporty Nissan's. The party was quickly audible to me, not in an overly loud way but there was a somewhat steady din of music and conversation, with occasional rising decibels when something more interesting went on. There was no sign of a stripper yet, and yes, I was watching for her arrival. I'll call it a deep curiosity. Maybe it was my yearning for youth again, with the jealousy that goes along with it. Can you tell yet that being middle-aged is not my favorite thing?\n\nAnd then, there she was. At least I thought it might be her, a young woman who looked to be in her late twenties, wearing skin-tight spandex shorts and a rock and roll t-shirt that was scissored off to bare her midriff, just below her big breasts. Yes, she looked the type. The hair, the make-up...the whole package. A stripper in all her glory, ready to go to work at a job that suddenly seemed so exciting to me it made my brain tingle.\n\nA strange sort of slow motion overtook me. I feel as if I stared at her forever as she started walking past the parked cars, her eyes searching house numbers as she went. The next thing I knew I was outdoors, on the sidewalk, heading toward her as she approached. \"Are you the...girl for the bachelor party?\" I asked. She nodded and said \"Yes.\"\n\n\"It's all off,\" I said. \"You won't be needed. I'm sorry.\"\n\n\"What?\" she griped. \"What the fuck! Oh, sure, the one time I don't get paid ahead of time. Where's the asshole who hired me? I told him...I told him a cancellation would still be two-hundred. Do you have it?\"\n\n\"Is...his name Jack?\"\n\n\"No. Brandon.\"\n\n\"So...I don't know him, but...I'll pay you. Stay right here. I don't want anybody to see you.\"\n\n\"Don't want anybody to see me? What the fuck's wrong with me! Jesus Christ, lady!\"\n\nThis young woman was clearly pissed, and I couldn't blame her. I was fucking things up for no good reason. Even I didn't understand what was happening. I held my hand up, as if she was a dog I was training to 'stay,' and I went down the street and into Jill's apartment, as quickly as I could. I remember hearing the party, louder when I was in the hall, and I remember scrounging through my wallet like a fast moving thief, nearly ripping my 'emergency money' out of the secret zippered compartment. There was five fifties there, and I felt so guilty about what I was doing I took it all with me and gave it to the stripper girl, out there on the sidewalk.\n\n\"Sorry,\" I said. \"Is this okay?\"\n\nShe looked and saw an extra fifty, nodded, said \"Yeah.\" She looked me over for a quick second. \"What are you, his mother?\" \n\nIt struck me funny, and I let out a cackled laugh. \"No,\" I said. \"How much do you get paid if you actually do the work?\"\n\n\"Five Hundred. Plus tips. I fuckin' shoulda had that tonight.\"\n\nI turned and left her there, the memory of her slightly perplexed look still vivid in my mind even today.\n\nIt only took a few steps toward the front entryway of Jill's building to put me into a quiet panic. The odd thing was, I knew exactly what to do. If I was going to be the stripper\u2014and yes, that's where my crazed mind had gone\u2014I needed lingerie, and it just so happened I had already found and ogled Jill's dresser drawer that was full of the sexy stuff, a week or more ago. I guess maybe I'm nosy, but...isn't everybody? So, like a crazed lunatic who scares cats, I burst into the bedroom and dumped the contents of her sexy undies drawer on the bed, rummaging through the soft things like there was a bomb ready to go off with its timer ticking down to zero. Fast, in other words. But there truly was no great rush. Why I didn't relax into this surreal moment I'll never know \u2014 perhaps I knew that if I'd taken a few seconds to think I'd certainly have realized what a fool I was about to make of myself, and what a mess I'd already made of Jack's party.\n\nAnd so I kept myself in a flat-out rush, without time to think. Stripping myself bare, I put on Jill's skimpiest, laciest bra and panty set. Nearly ripping her shortest skirt off of a closet hanger, I put it on, then slipped into her white satin 'boyfriend shirt', tying its shirttails around my middle, leaving it completely unbuttoned so as to show off the ridiculously sexy red lace bra that I was nearly tumbling out of. My breasts are just mid-sized but they're bigger than Jill's delicious little bra, so the overall effect was just what I said to myself in the mirror \u2014 \"Wow!\"\n\nMy hair, already a bit mussed at this point, seemed ready for the full mess-it-up treatment, so my frantic fingers did the job. Jill's shoes fit me pretty well, thank God, so I put on a pair of hideous gold sparkled high heels, a pair I can only imagine she bought for a wedding, maybe, or perhaps Halloween. I'd already been playing with her makeup for nearly two weeks, so I knew right where to find her reddest lipstick and her rosiest rouge. After a quick, shaky-handed application of thick black eye-liner and clumpy mascara, I was out the door, with my handbag over my shoulder, wondering what in the fuck life was throwing at me. I mean literally, my thoughts were spinning, the dazed kind of dizziness that doesn't affect your balance, just your judgment. \n\nI knocked on Jack's door.\n\nJack answered, with music and the sound of happy laughter spilling out all around him into the hallway. With a beer bottle in his hand, he had a big smile when he opened the door, but his face quickly went blank as his eyes met mine.\n\nMy mouth opened and words came out. \"You ordered a stripper? Sorry I'm late. Is it all right if I...come in?\" \n\nJack looked past me, out into the hallway, but no one else was there. \"Seriously?\" he said.\n\nHe didn't look crushingly unhappy, his face still oddly neutral, so I nodded, and I blushed. And then he blushed right along with me, same as we'd done once before. I said, \"The girl was here, but...she had to leave. But there's no need to ruin your party, right? Will I...do?\" \n\nJack took his first serious look at me, at how I was dressed, and my mussy hair, and my red lips. I think I saw the first sparks of lust in his eyes. I hope I didn't imagine it. He looked as if he was somewhat concerned for me, in a sweet kind of way, and he said, \"I mean...yeah, come on in, but...only if you really want to.\"\n\nI nodded, staring at him as if I couldn't look away, and I felt the tingles of sparks between us, thrown from our mutually twinkling eyes. He took my hand, and suddenly\u2014if ten frantic minutes can be considered sudden\u2014I was stripper at a bachelor party.\n\nAs he ushered me into his apartment, I asked him, \"Who's Brandon?\"\n\n\"The big guy, with the red shirt. Why?\"\n\nThe mood in the room changed in such an unusual way when the guys saw me. Some yelped and whooped, others stared. I saw Brandon approaching.\n\n\"Sorry honey,\" I said to him, my voice tinged with some sort of inner-city accent I'd never heard come out of my mouth before. \"Your little Trixie couldn't make it. It was last minute, so you get the mature variety. Ya like it okay?\"\n\nIt was the moment of truth. I was sweating even though I was ice cold. Brandon looked me over, with a lecherous pair of eyes that nearly made me shiver. \"Fuck yeah,\" he said. \"You're fuckin' hot. Same price?\"\n\n\"Yeah, honey,\" I said. \"Plus tips, o'course. You fuckers'll wanna give me thousands after I'm done with ya.\"\n\nThe room erupted in whoops. My blood pressure shot through the roof, and my pussy got wet. I'd never felt such a wildly mixed bunch of feelings in all my life, and I'll be damned if I didn't love it.\n\nWhich brings me to this thought, this confession, which may make this bizarre, over the top behavior I'm telling you about easier to understand: I had dreamt of this moment, this wet pussy, heart pounding minute I was so thrillingly experiencing, for nearly thirty years.\n\nIt was the summer just after my high school graduation when my year-older brother suddenly enlisted in the Navy. It was a last minute decision he'd made, and he was gone in a flash. I talked to him on the phone a few days after he'd left, and he asked me to get rid of some things from his bedroom, things he knew our mother and father\u2014but especially our mother\u2014wouldn't approve of. His hiding places were pretty good, I must say. There was a half empty bottle of Wild Turkey bourbon, three different styles of marijuana smoking pipes, and a ziplock bag containing a few scraps of weed and two pills that I flushed down the toilet\u2014I found out later they were Ecstasy. There was also a stash of pornography that boggled the mind. How could so many magazines and VHS tapes be hidden away in such a small bedroom? I couldn't help but laugh even though I was a bit horrified. Conservative young me, who hadn't ever had her hands on anything even close to porn, suddenly had a nicely curated collection.\n\nOf course I found it more than a little worrisome, 'holding' such a stash of porn, but I mustered the nerve, keeping all in hiding places of my own. I read every word, looked at every picture, and watched every videotape before disposing of almost all of it, very carefully, just a little at a time, in the household trash which I had very kindly volunteered to take out to the curb each week, just so I could get away with my nefarious riddance.\n\nEventually, I was left with just one videotape and three magazines, all of which I kept for quite some time. My reasoning for keeping the movie was that I'd fallen in some sort of love with its male star, a mustachioed hunk of a man with a huge cock who fucked like a god for hours on end. Of course, with the movie being a fictional narrative, with plenty of creative editing, it, and he, ruined me for real-life men. No sexual encounter in my real life had ever come close to that kind of porn perfection. Is that why I've never married, never settled into a truly long relationship with a man? Gosh, I hope not, but maybe a little of me is that shallow.\n\nI can hear you asking: Hey, Ellie, what's the deal with those three magazines you kept? I'm glad you asked, because I'm pretty sure they are a big part of what led me to be standing in Jack's apartment, me dressed like a slut, surrounded my young male drinkers at a bachelor party. Maybe you're starting to realized that it sounds a lot like one of the erotic encounters written about in Penthouse Forum, a small format, Reader's Digest-sized magazine that became my favorite part of my brother's collection.\n\nYes, Penthouse Forum. The thought of those old, small, somewhat glossy magazines still gives me a happy tingle, even all these years since they had such a powerful effect on me. They were full of stories of deeply sexual encounters, the types of things I mostly, in my late teens, never even knew existed. Something as simple as a threeway, which I had never heard of, was a wildly mind-expanding thing to learn about. As was couple-swap swinging, and a real classic: giving sexual favors, oral and then full-on fucking, right there on the street, to a police officer who'd pulled you over because your taillight was out.\n\nMy barely eighteen-year-old brain was boggled by these things, not to mention turned on, more and deeper than ever before. But it was two other stories that really got to me, on some sort of a sub-atomic level. One was the story of a girl who wanted to go camping with one of her best friends, a boy, but he was going 'just with the guys this time.' She found out where they were going, a remote woodland with a pond, and she showed up there in the dusky light of the fading day, and she took off all of her clothes, with all the clothed boys watching, and she skinny dipped in the pond. And she walked out of the pond, dripping wet, and she stayed naked, amongst the clothed boys, and she drank whisky and beer with them, and...well...there's plenty more to the story, but that first part alone is more than enough to make my pussy wet.",
        "Just as wildly arousing was the story of a woman who'd lost a bet with her husband. The wager was high, and she lost, her penance being she had to serve drinks and snacks to all his male friends, she wearing very nearly nothing at all, just little panties and high heeled shoes, at Sunday afternoon's football-watching party at their house. It took place down in the dimly lit basement rec room, with no windows, the smell of beer and cigars thick in the air. She told, in her nicely written little story, of having 'C' cup breasts with easily excited nipples, just like mine at the time, I remember thinking, mine that I thought were too small to be attractive to men. But no, hers where very attractive to them indeed, and at the point in the story when she'd had numerous hungry mouths on them I think I blew a gasket.\n\nSo yes, this fantasy of mine, of me, stripped naked, the only woman in a group of clothed men, is one that's been simmering in the back of my mind for decades. I'd thought it had gone away, to tell the truth, but no, it turns out it was a fantasy that was lying in wait, quiet and invisible, waiting for the perfect moment. And then Jill's mother broke her hip.\n\nThere in Jack's apartment, dressed in my stripper outfit, the roomful of eyes on me tingled my skin with goosebumps. Brandon asked, \"What's your name? Want a drink?\"\n\n\"Oh,\" I said. \"Yeah, something strong. My name's...Trixie.\"\n\nHe smiled, and Jack did, too. \"I thought that was the other girl's name,\" Brandon said.\n\n\"Yeah,\" I said, thinking quick. \"We're all Trixie. Don't you know that? And you're all Joe.\" I looked around, starting to get a better feel for who was there, pointing out a few. \"That's Blond Joe, and that's Dead Head Joe, and that's Big Eyed Joe.\" It was too much to name all of the dozen or more, so my eyes circled back to Brandon. \"And you're Big Joe, and this guy...\" I said, settling my eyes on Jack, \"...this guy here is Gorgeous Joe. Damn, honey, anybody ever tell you you're beautiful?\"\n\nI think I can truthfully say I was as stunned as Jack was at the things that were coming out of my mouth. Without trying, or thinking about it, I'd slipped into a character, and it seemed right, or easier maybe, to stick with it and not be the real me. \n\nA red plastic cup holding about a half a pint of whiskey was placed in my hand, along with ten fifty-dollar bills. I took a much needed drink. It's not my usual, straight whiskey, or straight anything for that matter, and I'm afraid my face showed it. My eyes went to Jack's, where they seemed to like to be, and I saw him smile at my throat-burning grimace.\n\nAll the other guys seemed a little shy of me, which was fine with me. If I'd been quickly surrounded by a hungry herd it might have frightened me into sensibility. Instead, I stuffed the money in my handbag, took another sip of whiskey, listened to the southern rock music, and took a deep breath.\n\nBrandon asked me, \"Did you bring music?\" His eyes looked at my handbag, a decidedly conservative looking one for a stripper to be carrying.\n\n\"Oh,\" I said. \"No. Yeah, some of the girls do, don't they. No, I just like to...improvise.\"\n\n\"What do you like, rock, or metal or something?\" asked Brandon. \"Jack, you got any Aerosmith?\"\n\n\"I can stream pretty much anything you want,\" Jack said.\n\n\"Aerosmith. The Toys in the Attic record,\" Brandon said. \"Those are some stripper classics, right Trixie?\"\n\n\"Fuck yeah,\" I said, even though I wasn't sure of what I was saying yes to. I know Aerosmith, but that particular record? I didn't really have a clue. \n\nWhen I was in my twenties and thirties, I was told that I dance pretty well. And I've always enjoyed it, having a few drinks, getting out on the dance floor at a club, or even at a wedding or other kind of event. It's always been easy for me to get the feel, the sexiness, the rhythmic flow of it all, but\u2014and this is another big 'but'\u2014doing it all alone, with nobody to groove off of but myself and the music, wasn't something I'd done since I was a teenager, when I used to practice dancing behind the closed door of my childhood bedroom. So when I heard Aerosmith suddenly playing over Jack's speakers, and I heard the volume go up quite loud, I panicked a little.\n\n\"I wanna meet the guest of honor,\" I said to Jack, raising my voice above the music. \"Who's the bachelor?\"\n\nI followed Jack as I took another big sip of rocket fuel whiskey, my lips warm now, my throat feeling friendlier to the octane of it. Jack introduced me to Justin, a muscular but still babyfaced guy who was to be married the very next weekend.\n\n\"Babyfaced Joe,\" I said to him, and I winked, the first time I'd done that in I don't know how long. He smiled. We chatted for a minute or two, me asking how long he'd known his girl, and what she though of him having a bachelor party.\n\n\"Oh, she's okay with it. She's at her bachelorette party right now, and they've got a male stripper, so...\"\n\n\"Oh,\" I said. \"Good. Yeah, that'll...even things out, right? You drinkin' enough, honey? I want you buzzed.\" I looked around at everyone. \"All you assholes. Drink when I say drink. Got it?\"\n\nA boisterous cheer of agreement went up, and I pulled the trigger, pouring whiskey down my throat right along with them. \"Drink!\" I said again, and we all downed another slurp. It was the first inkling of my power, a power I hadn't expected. \"Fuck yeah,\" I said.\n\nTwo other guys worked up the nerve to talk to me, taking blatant looks at my open-shirted cleavage. The look in their eyes and on their faces absolutely gave me chills and goosebumps, the good kind. Jack was still with me, nearly beside me, so I said, \"This is your place, right, honey? Wanna show me where I can put this?\"\n\n\"Oh, sure,\" he said, seeing me take my big handbag off my shoulder.\n\nWith the music loud in my ears as I passed one of the speakers, I followed him to his bedroom. \"A water bed? Wow, I didn't realize you're a Don Juan,\" I said, smiling. Taking a quick glance over my shoulder to make sure nobody was watching or listening, I looked back at Jack, my smile gone. I asked him, \"What the fuck do I do now? The girl that's supposed to be here, what would she do? Do they...take everything off?\" I had a feeling that, in this age of everyday porn, keeping my panties on would probably be seen as a lousy job of stripping, but I wasn't exactly sure. \n\n\"Trixie, do you mean?\" Jack smiled like he knew my secrets. \"Yeah, she'd...take it all off. But Allie, really, you don't have to do...any of this. I gotta admit I'd love it, but...I can get you outta here if you want.\"\n\nI'm afraid I smiled like a smitten teenager. \"Really? You're...happy I'm here?\"\n\n\"Oh my God yes. This is the coolest thing ever. But I mean...even if you decide to leave it's cool. Just coming in here, like this,\" he said, eying my widely bare cleavage, \"you're, like, the most fun woman I've ever met.\"\n\nA hot shot of adrenaline hit my face, blushing it what I can only imagine was a deep crimson red. The insides of me felt better than most of the orgasms I've had when I said, \"So...fully nude then. What else would she do?\"\n\nJack's face turned a shade of crimson similar to mine, his eyes wide, sparkling with masculine excitement. I gave him a surprised but not unhappy look, my own eyes wide when I realized what he was about to say. \"Oh, wow,\" I said. \"A blowjob for the wedding boy?\"\n\nHalf of me hoped Jack would shake his head no, the other half of me hoping he'd nod yes. He shrugged his shoulders, but it was a yes shrug, I could tell. It was written in his eyes, and all over his face. \"She'd...definitely do a lap dance for him, and maybe for the others,\" he said.\n\nMy heart was thumping, enough for Jack to see and hear. \"Nude?\"\n\nThis time he nodded.\n\n\"Do strippers...kiss?\"\n\n\"I don't know,\" he said. \"That's up to you, I guess.\"\n\n\"How much touching do they let you guys do?\"\n\nJack shrugged.\n\n\"Up to me?\"\n\nJack nodded. A voice interrupted us. \"What are you doin', dude, helpin' her get naked?\"\n\nJack smiled, looked at me. \"This is my brother,\" he said, his small smile broadening into a bigger one. \"His name's Joe.\"\n\n\"For real?\" I said. I turned to the equally handsome brother. \"So that makes you Joe Joe. You're pretty gorgeous too, like your brother here. I might just get you two guys mixed up.\"\n\nAnd then I heard it: the tell-tale first notes of one of Aerosmith's most classic songs, Walk This Way. \"Oh, shit,\" I said to Jack. \"Now there's a song I can dance to.\"\n\n\"Fuck yeah,\" Joe Joe said.\n\nThe eyes of these two brothers fucked me up more than the whiskey I'd drank, their excited, smoldering, lustful gazes ushering me out into the living room as if I was floating. Free of my handbag and my drink, my body began moving to the powerfully rhythmic beat. I stood right in front of one of the speakers, to feel it's vibrations pump into my bones, into my spine, into my moving arms and my dancing fingers. I felt all the eyes on me, felt the strangeness of being the only one dancing. I closed my eyes, to escape it, just for the time being, the writhing of my pelvis increasing, warming, freeing, leaving the binds of stillness behind.\n\nThis is a striptease, I reminded myself, so I began. My eyes open now, with teasing glances at each and every young man. I felt the power again. Even now, so soon, everything, and everyone, seemed to be under my control.\n\nAs I danced I thought of another question I should have asked Jack: How long should I stretch this out? Instead of dwelling on it I went with the sweet flow of the moment, did what felt right, untied the shirt at my waist, played with the shirttails and the openness of it all as I danced, giving the boys a much better look at the full picture of my red-lace adorned breasts. I thrust them forward, knowing that, in the eyes of horny young men, breasts are tits, and tits are essentially magic.\n\nJill's sparkly gold high heels didn't fit me ideally, so I kicked them off, and then the white shirt slipped down my arms, giving me a goosebumpy tingle as it left me, dropping to the floor.\n\nThe song ended and the next one started, a faster beat. My hips swung to it, my whole body fully into it now, and I think I may have blushed when I heard the lyrics, the singer singing \"...but I really get her going when I whip out my big ten inch.\" A perfect stripper song? Maybe. The guys sure liked it, whooping, some of them eying me lasciviously, grabbing their crotches for emphasis.\n\nMost interesting to me was the smile growing on my face. My dance pirouetted me, I swung my skirt covered ass at the boys and they whooped. My heart nearly burst with joy. This is fun!\n\nJill's skirt's zipper is on the side, so right on the beat I thrust that hip toward the guys and slowly unzipped it. With my ass to them again, I swiveled my hips to the rhythm while my fingers helped the short skirt down, and down, and down some more, gravity taking it to my ankles; I danced my way out of it, kicking it aside. As soon as it was down and off I realized that I should have bent at the waist in a sexy way when I took it off, showing them a much more risqu\u00e9 view of my ass in panties, and I wondered if any of them were catching on that I'm not a pro.\n\nBut what they thought didn't matter to me much at that moment; I was in the zone \u2014 a place of whiskey, a place of dance, a place of sexual fantasy. The fast and relentless beat of the powerfully loud song had me there, the guys' eyes had me there, and the dark recesses of my mind had me there. I found myself facing away for a moment, toward the speaker and the wall; my hands reached behind, I unclasped the bra, and a professional stripper move came to me without even thinking about it: my hand and wrist held the lovely lacy bra cups over my tits and wildly aroused nipples while my other hand swept the straps off my shoulders. It was topless time, and I felt completely ready. Dancing a full, teasing rotation, I faced the wall again and let the sexy red bra drop. With nothing on now but Jill's little panties, with my dancing arms out to my sides, I turned, facing my spellbound audience, my body writhing with the beat, showing myself in a way I'd never done before.\n\n\"Fuck yeah!\" yelled Black Shirt Joe, and many of his Joe friends whooped their approval. You'd think silence from a guy would be a bummer to a woman in this situation, but when I looked at Jack his amazed-looking silent smile and sparkling eyes nearly gave me an orgasm. I hope I didn't wink at him, but, God help me, I think I might have.\n\nThe beat slowed considerably with the next song, and I realized I'd never thought about what a slinky, sensual song Aerosmith's Sweet Emotion really is. With my posture upright and arched, I reached toward the drink in Jack's hand, and he nicely came forth with it, smiling as he handed it to me. A big gulp of its whiskyness went down my throat, I handed it back to him, and, as I pushed Jill's little panties down my legs, bending deeply at the waist with my ass and pussy greeting my admirers, I felt like the sexiest woman in all the world.\n\nI tell you, it's impossible not to gyrate like a sensual slut when dancing to that song. With the panties kicked free of me, my body barefoot and fully nude, I joined hands with the spirit gods, closed my eyes, and felt completely in love with myself, for maybe the first time ever. My tits were thrust forward as I danced, to give them their best shot at looking youthful; my pussy may very well have been glistening with droplets of slippery dew; and my boys whooped and applauded. Applauded! And I wasn't even finished! My mind, already high, floated up to the heavens.\n\nThe next song wasn't perfect. No More No More wasn't the sentiment I was in the mood for. The beat was good, rockin' and steady, but the word 'no' just didn't fit the moment.\n\n\"Hey, Gorgeous Joe,\" I said to Jack. \"Give me something slow. Sade. Diamond Life.\"\n\nJack smiled, went to his iPad, and just like that the music of my teenaged youth was playing, the song, Smooth Operator, probably one I listened to when I devoured those Penthouse Forum magazines all those years ago. And oh, baby, did it ever feel good dancing naked to that song, with young male eyes devouring me.\n\nAfter a minute of it I was lost again. Then my eye caught Justin, Babyfaced Joe, the soon-to-be-wed bachelor. He was watching me intently, happily it seemed. I remembered what Jack had said, about a lap dance for the bachelor boy. As I danced, feeling the wild, tingly thrill of having my hands on my tits, I looked around at the furniture. The couch seemed perfect; more dangerous than a chair, and that excited me. I felt things inside me, horniness, stirred ever so deeply. With Sade's silky voice serenading me, and over a dozen young men expressing their approval, I danced over to Babyfaced Joe, took his hand, and led him to the couch. Others moved and gave us room, parting like the red sea.\n\n\"Here we go,\" said Tallest Joe. \"Yeah! \"\n\nThe couch's white leathery vinyl felt cold on my bare legs, giving my nipples another shot of hardness, as if they needed it; they'd been hard and tingly aroused since the beginning. I'm one of those women who, under the right circumstances, can just about orgasm from nipple play. But that cold white vinyl, and the heat of Babyfaced Joe's lap, which I was straddling, shot me full of goosebump tingles again, all the way from my mussy hair to the tips of my bare toes. I was kissing this nice young man, my mouth full of his and his full of mine, like big-time lovers on a hot date. The others whooped and cheered, and my boy's cock grew into a hard, denim covered lump under the bare wetness of my grinding pussy. Oh yeah, I was fuckin' horny.\n\n\"Fuck yeah, look at that ass,\" one of the Joes said.\n\n\"Sweet,\" said another.\n\n\"Hey Justin, what happens in Jack's apartment stays in Jack's apartment,\" another Joe said.\n\nJustin must have taken the words to heart, because his hands were suddenly on me, on my tits, then one on my tits and one on my ass, his kissing mouth tonguing mine with more even passion.\n\nMind you, I've been kissed, and I've been fucked, and I've had my horniness stirred, plenty of times, but never quite like this. This audience of horny Joes, this nudity of mine amongst them, and this twenty-something I was going at it with, I'll be goddamned if all of it didn't put me right over the top. With my mouth huffing right against his, and my pussy unable to stop its ecstatic grinding against his textured denim lump, I came, hard, in a writhing rocketburst of orgasmic fury, and yes, I was as surprised as anyone.\n\n\"Fffuckk!\" and \"Shit!\" and \"Oh my God, she came!\" were just some of the things I heard.\n\n\"Makin' me cum, huh?\" I said, huffing delirious whispers against Justin's lips. \"Is that what you do to girls? Huh? You just earned a fuckin' blowjob, if you want one.\"\n\nMy Babyfaced Joe nodded, looking a bit stunned by what had just happened. I sat up and began opening his pants, my eager fingers working his zipper right there by my spread open pussy. Was I glad I was halfway decently groomed down there? Yes, I was.\n\nLetting his hard cock out just an inch from my wet pussy seemed a bit much, so with Sade's music helping me, I slithered off of him, to my knees on the carpeted floor. My eager hands sprung his cock free, not very big but fully, youthfully hard, and my mouth went to happy work on it.\n\n\"Oh-h-h-ho Ffuuckk!\" a moaning Joe said. \"You assholes better hire Trixie for my bachelor party. Damn...she knows what she's doin'! \"\n\nI must confess, I do love sucking cock. It's a very rare treat these days, though, with so little man action in my life. So yeah, Babyface's hard one felt good in my mouth, especially so since I was still on horny fire from the surprisingly wild orgasm. Once again my hormones were raging out of control, and I couldn't help myself. Between wet, slippery mouthfuls of young cock I asked him, \"You wanna taste me, baby? Wanna lie down and let me sixty-nine you?\"\n\nThe perfection of Sade's sensual singing filled my head, keeping away any trace of sanity and clear thought. The next thing I knew, I was up on the couch again, the top of a sixty-nine with a still mostly clothed young man. His mouth latched onto my hot pussy, I threw my head back, loudly moaning. Others moaned too, and commented, saying dirty things. Sexy things. Hungry things.\n\n\"Let me suck your cocks,\" I heard myself say, my eyes not truly focused on anyone, just looking at the herd. Babyface eating my pussy felt so ridiculously good, better than anything, ever. I stroked his cock with my squeezing fist, my eyes watching pants opening, pants coming off, my ears hearing excitement, and surprise, and lust. Cocks were everywhere, some fully hard, some thick and drooping, some soft and embarrassed. \n\nBlack Shirt Joe was the first in my mouth, uncircumcised and wildly, stiffly aroused. His moan, so beautiful, made my full mouth smile. I tried not to look around; I think I didn't want to see Jack just yet, so I let myself get lost in the moment, lost in the scent and the feel, lost in the taste.\n\nBabyface gave me a nice little orgasm, my body shuddering. \"Fuck, baby,\" I said, writhing my hips, my pussy moving against his mouth. \"That feels so fucking good.\"\n\nMoaning again, with my mouth full of Black Shirt Joe's cock, stroking Babyface's hardness with my hand, I heard and felt him moaning differently against my pussy. His cum squirted, flying high, I felt its pulses in my hand, my mouth gave up Back Shirt's cock and lunged to the cumming one. I took what I could, but I'd missed quite a bit. Rather than make a mess, I swallowed it, moaning, feeling Babyface's orgasmic moans in my pussy and the slipperiness of his cum in my stroking fist. This was a scene worthy of praise, and it got it. \"God damn, a cum eating MILF,\" one said, others saying other things about me I never thought I'd hear. Still others were stroking their own cocks, one with masturbatory fury.",
        "\"Slow down, baby,\" I said, my lusty eyes finding him. \"Bring that over here. Let me help you.\"\n\nIt's a big cock, this one, hot in my mouth from his coursing blood and his stroking friction. He bounced the fat tip off my tonsils a time or two, gagging me, but then I tried what I've only occasionally been successful at: opening my throat to welcome him deeper.\n\n\"Fuck yeah, look at that shit,\" Joe Joe said, my half-gone mind recognizing the sound of his voice. Hearing him made me think of Jack, and the half-lost sensible side of me wondered what he was thinking as Big Cock Joe went fully balls deep down my throat.\n\n\"Jesus!\" Big Cock said. \"Oh, fuckin' God! \"\n\nI had to push him to back off, the length of his hard flesh slithering out like a wet, slippery eel, still strung to me with thick threads of sticky saliva. I coughed and my eyes watered. I brushed away a tear and my finger was black with Jill's cheap makeup. I must have looked a sight. \"Again,\" I begged, and Big Cock Joe went deep down my gullet a second time.\n\n\"Oohhh ffuuckkk! he groaned.\n\nAfter cumming, Babyface had gone mostly limp and lost his energy under me. I craved another mouth on my pussy. I craved being fucked. Yes, it seemed like too much, pure craziness, I knew it, but I craved it just the same.\n\nI dismounted the bachelor boy, sat him up and gave him a passionate kiss, me sitting sideways on his lap for a minute, the thrill of my nudity giving me goosebumps again. \"Your wife's gonna love that mouth, baby. Does my pussy taste good?\" He looked dazed, a little embarrassed. \"Any of you boys wanna taste me?\" I spread my legs like a slut, saw the nods, heard the \"Fuck yeah\"s. I wiggled off of Justin, reclined myself back against the couch cushion, feeling much too comfortable, and let anybody who wanted to eat my pussy go right ahead and do it. There were quite a few takers, six or seven, I think. As they gave me their best skills, I held each of their heads between my legs, my body now slouching sideways, so as to take hard cocks in my mouth, there at the side arm of the couch. Occasional moments of clarity let me see just how far into this insanity I'd fallen. I'd become the ultimate slut, maybe more so than I'd ever dreamed, and then I heard the magic words: \"Can I fuck you?\"\n\nIt was Big Joe, Brandon, the guy who thinks he hired me, there on his knees, with the angry purple tip of his pretty big hard cock just and inch or two from my pussy. \"Only if you give me a nice tip,\" I said, my 'character' accent suddenly back after a long, slow slip back to my normal voice. \n\nBrandon smiled, his face showing wide-eyed ecstasy as the hard length of him found the deep heat of my insides. When he was fully deep in my pussy he held still, his dark eyes looking deep into mine.\n\n\"Oh, fuck yeah,\" I whimpered, my voice my own suburban middle-aged self again. \"Fuck me...Fuck me.\"\n\nI'd lost my power, but I didn't care. It was he who held it now, he who heard my whimpering begs for \"more\", for \"deeper\", for \"harder...fuck me harder!\" It was the other young men, too, the power was theirs now; stuffing my mouth with their hardness, cumming on my face and in my hair; fucking my pussy deep and not so deep, sometimes hard and sometimes slow. With moans and gruff heavy breathing, some came deep in my pussy and some on my stomach, the mix of young man jizz dripping to a pool in my bellybutton, dripping off the sides of me onto Jack's white couch. \n\nThen, wanting even more, I gave myself doggy style, my mouth full more than not, rough hands on the soft fleshiness of my hanging tits, me on the floor, on the carpet, me a gang-bang fuck toy, a deep throat suck toy, me orgasming with spasms and trembling legs, over and over again. \n\nThen Jack finally gave me what I'd spent nearly two weeks craving, his gorgeous naked body and his gorgeous, big, uncircumcised cock, pummeling me in a relentless way on his waterbed, our hair wet after a shower, after everyone had gone. That was the astonishing orgasm that got to me, all the way to the depths of my soul.\n\nPenthouse Forum, and an eighteen-year old girl. Add twenty-seven years of frustration to the recipe, then stir in a beautiful young man. Whip up a dozen males until they're stiff, and fold them in. Cook thoroughly, and enjoy your cream-sauced gangbang. Some like it rare, which is pink inside. There's medium, of course, but a few might like to try it well done, turning up the heat, and keeping it there, until the meat falls off the bone.\n\n\u2014\n\nJill's hungry cats greeted me with meows and ankle rubs the next morning, Saturday. It was 9am. I made coffee even though I'd had some at Jack's, after morning sex, of course, me riding his nice cock for a half hour or more, in what I think they call cowgirl style. I wanted him that way so I could see him. He's even more handsome in the morning, if you can believe it.\n\nAfter feeding the cats, I took Jill's clothes that I'd worn \u2014 bra, panties, skirt, and shirt \u2014 downstairs to the laundry room to wash them, along with some of my own things. Down there in the basement of the old building, I noticed a new looking piece of lumber on the ceiling, held up against the bottom of the first floor by a metal post, and I realized it was something either the landlord or Jack had put in place to support the weight of his waterbed. Who even has a waterbed in the twenty-first century? I thought they'd disappeared long ago, like round sunglasses and Dinty Moore Beef Stew, but I guess all three are, strangely, still with us. I must admit the waterbed was fun, but I think it had more to do with the naked hottie I was fucking than the movement of the thing.\n\nJill came home not long after I'd put her sexy undies away, the red bra and panties nicely laundered and dried. The cats seemed pleased to see her, but not like a dog would be. I asked after her mother, as I'd done on the phone a few times, and she told me her mom's rehab was going well, she was up on her feet already, complaining about the food.\n\n\"My plants look better than when I take care of them,\" Jill said to me, looking around at her apartment. \"Everything go okay?\"\n\n\"Oh, sure, I enjoyed it,\" I said. \"It's so much brighter here than my place.\"\n\n\"Did you meet the neighbors?\" she asked. \"The old couple upstairs are really nice.\"\n\n\"Yes, I like them. Quiet, but nice. That other young woman up there is very quiet. I barely saw her.\"\n\n\"You must have seen the new guy, right across the hall,\" Jill said, gesturing with a sideways nod of her head. Her eyes smiled a little and sparkled. \"I just about dropped dead when I saw him move in. God he's a hunky one, isn't he? Makes me wish I was twenty years younger. I'd be all over that.\"\n\nI smiled. \"He had a party last night. He was very respectful, told the rest of us in the building that there'd be some noise. It was a bachelor party, for a friend of his. There was twelve of them.\"\n\nJill's eyes widened. \"Oh my God, were they all young and cute like him? I'm terrible, I would have been spying out my window. Did you see them coming and going?\"\n\n\"Yeah, they were all pretty cute,\" I said. \"I was distracted and didn't see them going, but, I saw them coming.\"\n\nAnd cumming, and cumming, and cumming, I wanted to say, though I'm pretty sure Jill would have been horrified. But you never know. I'm certain I'm not the only woman who's had a fantasy silently waiting, put to rest in the back recesses of the mind, lying dormant. You just never know when fate might make it real.\n\n\u2014\n\nRed Lace Trilogy, Part Two \u2014 Heat Sparks a Fever\n\n\u2014\n\nMy mother, bless her heart, recently fell and broke her hip. I went there, to my hometown, to be with her for the surgery and to get her into the rehab facility. Spending two weeks alone in my childhood home was a real head trip, me sleeping in my old room, in my old bed. I'll tell you one thing that's absolutely true: women's sex toys\u2014the vibrating kind, like the one I brought with me\u2014have improved markedly since I was in my late teens. I wish they'd been this quiet back in those days; the whisper-like hum of the new ones would have been greatly appreciated by me when I was a shy, under-the-covers teenaged girl.\n\nI felt bad leaving Mom after she'd gotten settled into the rehab, but two weeks of vacation time was all I had, so I hugged her and kissed her, and I came home to the little apartment I love. My good friend Allie, who moved in here while I was gone, took wonderful care of my three cats and my many, thriving houseplants. Allie looked so bright and happy when I got back, I think the change of scenery\u2014her little 'stay-cation' in my apartment\u2014pleased her and did her some good.\n\nGetting back to work was a drag. Vacations, even unusual ones like the one I'd just taken to care for my mother, always make me long for retirement. But I'm forty-seven years old, still twenty long years from retirement, so I slogged back into the work-a-day world, Monday, and Tuesday, and then on Wednesday a massive, region-wide power outage sent us all home early, in the late afternoon. Saying it was caused by the air-conditioning demands of the third day of a heatwave, the newscaster on my car radio thought the outage might last through the night. The 103 degree high temperature for the day lingered, and the night's low temperature was forecast to be somewhere around 92 degrees. Without air-conditioning, or even a fan.\n\nMy cats, with their thick coats of fur, moved slowly, didn't eat all that much, and seemed most content sprawling on the relative coolness of the kitchen floor. I made the rounds watering all my plants. Even with all my apartment windows open, not a breath of air seemed to be moving. Finishing my meager chores, I made a cold drink for myself, a faux sangria that always tastes good in the warm weather. You fill a glass halfway with red wine, splash in some orange juice, add some slices of fresh orange if you have them, and stir in some ice cubes. Armed with this bit of heavenly liquid fortification, and dressed in shorts and my coolest t-shirt, I went out front to sit in the shade on the building's entryway steps. Up and down the street quite a few people were out, sitting on their porches.\n\nI'd only been sitting there a few minutes when out through the front door walks my neighbor, Jack, a very good looking young man who's in his late twenties I think. He just moved into our four-plex building about a month ago. There are two apartments on the first floor: me, and now Jack, and I couldn't have wished for a more attractive and friendly across-the-hall neighbor. Just the other day I said to Allie, every time I see him I wish I was twenty years younger. He appears to be single, with no steady girlfriend, but I'm not sure of his exact situation in that regard.\n\nWhat I am sure of is that I got my first look at his chest and his young muscled abs, bellybutton and all. Due to the heat he was barefoot, wearing jersey cotton 'sweat' shorts. His white cotton, short-sleeved, button-up shirt was fully unbuttoned and open down the front, and if I didn't gasp with glee when I saw him looking like that I did a pretty good job of holding it in.\n\nI'll tell you right now I'm not a fan of this late forties speeding toward fifty age that I am. I'm not saying that if I was twenty-five I'd have the guts to make a play for Jack\u2014truth is I probably wouldn't have the guts\u2014but I would have at least held a glimmer of hope that he'd fall for me. But...those days are history, and nobody knows it better than me. The psychology of it would be easy to pin down if anybody cared to study me: I've given up on eating right, I have no interest in exercise beyond a simple walk to the nearby park every once in a while, and I haven't had a date in God knows how long. The last date I was on was a real turn-off, and, yeah, I've pretty much given up. My family genetics keep me slim, thankfully, because I sure as hell don't stay this way due to any effort on my part.\n\nAll of that gives you an idea of why Jack sitting down with me, saying \"Hi Jill\", with his shirt open and a smile on his face, made my old heart go pit-a-pat. Thankfully I'm a halfway decent conversationalist in such a situation, so I got things started.\n\n\"I hear you met my friend Allie,\" I said. \"She told me about how nice you were, coming over to warn her about your party.\"\n\n\"Oh, yeah, Allie's great. I like her.\"\n\n\"Oh, did you get a chance to talk to her much? She didn't say.\"\n\n\"Yeah, we...talked,\" Jack said.\n\n\"So, I hear it was a bachelor party, huh? What are they like these days?\"\n\nJack's face reddened even more than the hundred degree heat had already done to it. He shrugged. \"I don't know, just...the usual.\"\n\n\"Wow. You're gonna make a girl guess, huh?\" I took a big sip of my sangria. \"Okay, lets see. In the old days you would have all sat around and watched a dirty movie, on Super 8, or sixteen millimeter, but that's hopelessly outdated. I suppose the modern thing is...you didn't have...a stripper, did you?\"\n\nJack nodded, blushing a little. \"Yeah, we did. It's like you said, it's just what you do. Sorta traditional.\"\n\nI think my eyes were wide with wonder. \"Wow! Right here, in our building? A Stripper? That's...kinda cool.\"\n\nJack nodded, smiling. \"My friend Brandon hired one, but it got changed and a better one came.\"\n\n\"How do you know she was better?\"\n\n\"Because she was awesome. The best.\"\n\nI smiled. \"Oh, are you a connoisseur? An expert or something?\"\n\n\"No, all the guys thought so,\" Jack said, blushing even redder.\n\n\"Wow, a real crowd-pleaser, huh? Yeah, I can see it. If you're gonna take on a job, you might as well give it your all. But that's one job I just...can't really imagine. Not to mention that I'm not really built for it.\"\n\n\"Oh, I don't know,\" Jack said, giving my body a lightning quick, almost unseen glance. \"I think it's one of those things that's more about attitude.\"\n\n\"Maybe,\" I said. I took another gulp of ice cold orangey sweet red wine.\n\nJack's phone rang. He answered it, standing up from the front steps where we sat, walking very slowly up the sidewalk as he talked, toward where my car was parked. Then he turned, still talking, slowly walking back toward me. I tried not to stare, but a barefoot, open-shirted man is hard to completely ignore.\n\n\"That was my brother,\" Jack said to me, pocketing his phone. \"He said it's a huge blackout, more than the whole city. I was gonna go out and meet him somewhere, but there's nothing open, so he's coming over here. I guess we'll just listen to some tunes.\"\n\n\"Music? Do you have one of those generator things?\"\n\n\"No, just a battery rechargeable speaker. I can stream music to it from my iPad or my phone.\"\n\n\"Oh, nice. It beats silence, right?\"\n\n\"Hey, you're welcome to join us,\" Jack said. \"We're just gonna have a couple drinks, and...my brother's bringing some weed, though. I don't know if that bothers you or not.\"\n\n\"No, not at all,\" I said, making it sound like I was an old hand at getting high.\n\nI should make it clear that I'm not an old hand at getting high. I did smoke some weed in college, liked it okay, but I'm a drinks girl these days, and not even much of a drinker. As I sat there, glancing at Jack, both of us melting into a few moments of silence in the stifling, humid heat, my heart began to thump. Drinks, and weed smoking, in Jack's apartment, with a brother I didn't know he had. My first time in the interior of Jack's lair. This was all kind of a big deal in my little world, and yet the heat and the wine held me immobile, a slumping lump of old woman flesh on the front steps. Finally my sluggishly spinning mind got a grip. \"I'm gonna go in and revive myself, maybe take a cool shower.\"\n\n\"Oh, for sure,\" Jack said. \"Yeah, come on over whenever you want. We'll just be chillin'.\"\n\nSo, the shower was interesting. For some ridiculous reason I felt giddy, and sexy, because Jack knew what I was doing. I pictured him picturing me, my body wet and goosebumpy from the cool water. Of course I'm sure he wasn't picturing me, but my stupid lonely old brain wouldn't let go of the thought. And of course my stupid lonely old hands had to get in on the ridiculousness, soaping my too-small-to-be-a-stripper tits, and even cleaning my pussy much to vigorously, until, nearly gasping for breath, I stopped the foolishness. Walking into Jack's apartment with the embarrassment of a fresh orgasm written all over my face was not something I wanted to do.\n\nThe foolishness continued in my bedroom. Instead of reaching for simple cotton undies, shorts and a t-shirt\u2014a standard having-a-few-drinks-in-hot-weather outfit\u2014I found myself opening the drawer that holds my fancier lingerie, a drawer that hadn't even been opened in a year or more. The weird thing is, the absolute sexiest bra and panties I own, a blazing red exquisite lace set that cost a small fortune, were neatly folded right on top of the rest of the jumble, like they were laid out for me, glowing like the wind-stoked embers of a Devil's fire.\n\nLike an idiot, I put them on. It was just a fun try-them-on-for-a-moment kind of thing. Me and them are old friends, in a way, my only true splurge when it comes to lingerie. Did you know you can spend four hundred and fifty dollars on a bra and panty set? I never knew it, until I met an alluring, wealthy man about ten years ago. He was the gold watch type, with a thick gold bracelet around his other wrist. Sunglasses that cost more than my kitchen stove. You know the guy \u2014 the Mercedes SL with the top down, the golf tan that makes his bald spot look like a dark oil smudge on a garage floor. Oh, am I letting my bitterness show? I shouldn't. It was a short relationship. He thinks he dumped me, I think I dumped him. But we did have some fun. We fucked a lot, which was a first for me. I wasn't a virgin before we met, or anything like that, but it was the only relationship I've had in my life where sex was truly a BIG DEAL. Sex positions I'd never heard of, lots of oral of all kinds. He encouraged me to improve my oral skills, and I did, happily. In just two short months I grew to really love sucking cock, and then it was over, done, the relationship finished. I've only had a few dates since, and the last one tasted a little like death down there.\n\nSo, after my shower, in the stifling stagnant heat of my bedroom, I'm standing in front of my mirror in my French lace lingerie, thinking Oo la la, this bra makes my modest little tits look like freakin' magic, and a Frenchman could read Charles de Gaulle's biography right through the delicately see-through lace of these panties. Then I thought what the hell, I'll just throw a little shirt and some shorts right on over these pretty little things. It feels strangely awesome to have them on again, and they still fit! \n\nRed is a funny color, though. I'm not really a red girl in my general wardrobe, and this French lace is so very red that it shows through lighter colors easily, as I quickly found out when I put on a pale yellow shirt. But hey, it's kind of a cool look, and it's certainly modern. The shirt is a simple cotton button up, with a pleasing hemline and a cute little collar. Unpretentious. It's as cool a thing as I own for this heat. Since I was already sweating again, I went with it, with a few buttons open at the neck, the way I imagine you'd do in the tropics. To casual things up a little I threw on some old jean shorts I've had for years, nicely faded ones that fit me like a glove, even if they are a touch too short for a woman my age. Taking a cue from Jack, I left my feet bare, which felt surprisingly naughty.\n\nI silently crossed the hall, quietly knocked, and Jack opened his door and I smelled it: Weed smoke and candle smoke, intermingled to a waxy sweetness. The fog of it hung in the warm humid air like wispy streaks of cloud.",
        "\"Hey, wow, you look nice,\" Jack said. \"How was the shower?\"\n\n\"Oh,\" I said, feeling the quick internal hit of a bit too much blushing embarrassment. \"Good. Yeah. It cooled me off, but, I was sweating again five minutes later.\"\n\n\"Yeah, it's brutal. We should probably be outside, but, better to smoke in here, and chill with the tunes. Hey, this is my brother, Joe. Joe, this is Jill, my nice neighbor I was telling you about.\"\n\n\"Yeah, across the hall, cool,\" Joe said, his voice and eyes already a bit stoned. \"Cool neighbors are awesome. It's nice to meet you, Jill.\" He reached toward me without getting up, offering me a half smoked marijuana cigarette.\n\n\"Oh, wow,\" I said, surprising myself by reaching for it. \"Don't be mad if I take, just, one hit, maybe. I'm more of a...\" I held up my tall glass and made the ice cubes clatter.\n\n\"Cool, yeah, what are ya drinkin'?\" asked Joe. I told him my faux sangria recipe, and he said, \"Cool, yeah, I used to work at a place by the University; we made sangria in a big bucket. Sold gallons of the stuff. I got ripped on it, more than once. That shit sneaks up on you.\"\n\nI took a puff of weed, the heat in my throat bringing back old memories. And then I was high. Just...like...that.\n\nJack and Joe smiled at my giggles. The weight of the world lifted, and floated away. Giggles remained. The room felt womb-like, so warm, the air so thick. I could taste the candle smoke in my mouth, and I laughed. \"Okay, see? That's why I only take one puff. Jesus that's strong. Is that strong? What's this music? I love it.\"\n\n\"It's Phish. You've never heard them before?\"\n\n\"No, but I've heard of them. Aren't they like, Grateful Dead, sorta kinda?\"\n\n\"Yeah, a little bit. You like The Dead? We can play that if you want.\"\n\n\"No, I like this,\" I said, smiling. \"It sounds happy.\"\n\nI looked around at Jack's living room, definitely a bachelor pad. The big white couch dominated the visuals, that and the big speakers, part of a real stereo that sort of surprised me. I didn't think young people had old fashioned stereos much anymore. Of course it was silent, due to the power outage; Phish's music was drifting out of a small, white cordless speaker that sat on the coffee table in front of the couch. The last light of the day was filtering into the room through mini-blind covered windows, the candles not really necessary yet, burning more for atmosphere than needed light, although darkness was falling fast. My curious, weed-fueled gaze wandered around all four of Jack's walls, seemingly acres of off-white paint. I said, \"You really need some art, Jack. Ever go to that poster print shop at the mall?\"\n\n\"Yeah, I should get some stuff. Maybe you can help me pick some out?\"\n\nThe thought of it flattered me to the point of another bashful blush, my head nodding without thinking.\n\n\"Oh, fuck yeah,\" Joe said, smoke billowing from his open mouth, his mind seemingly oblivious to the conversation. \"You know, if I take a hit of this, close my eyes and meditate, I can convince my brain that it's air-conditioned in here, nice and cool.\" Joe inhaled another puff, held it, eyes closed, slouching his body back against the back cushion of Jack's white vinyl couch. \"Oh, fuck yeah,\" he said.\n\n\"That did not work,\" I said, feeling my own nice buzz. \"You can't just...convince yourself, can you?\"\n\n\"Yeah, try it, he said, reaching the weed toward me. \"You gotta really meditate on it. Really hard.\"\n\nLike an idiot I took his word for it, sitting myself down, near him on the couch, taking a bigger puff than my first one. I closed my eyes, thought of ice, and snow; thought of my cool shower; thought of shivering. But I was still sweating, getting stickier by the minute. \"You're full of it,\" I said, opening my eyes, giggling again. \"That doesn't work at all. It doesn't make me less hot.\"\n\n\"No,\" Joe said, his stoned eyes looking at me in a deeper kind of way. \"It makes you more  hot. It's your smile. You got the best fuckin' smile.\"\n\n\"Oh, please,\" I said, smiling uncontrollably, blushing and bashful again. \"You're talking to an old lady here. Don't talk to me about hot.\"\n\n\"Hey, I'm just callin' it like I see it,\" Joe said. \"Watchu think, bro?\"\n\nJack nodded, smiling. \"Definitely. I have no problem with the hot moniker.\"\n\n\"You guys are stoned,\" I said. \"It's like too much whiskey, closing time at the bar. Everybody starts to look good.\"\n\n\"No, no,\" Joe said. \"There's different kinds of hot.\"\n\n\"Oh, wow,\" I said, feeling the head rush of a really good buzz. \"Are we seriously having a conversation about women's hotness? I finally get to hear a real male point of view on the subject? This is awesome. You have to promise to be honest with me. Both of you. I want the straight scoop.\"\n\n\"Fuck yeah, always honest,\" Joe said.\n\nI either felt really bold, or the marijuana high had already succeeded in disconnecting my conversational filter. \"What kind of body type am I?\" I asked. \"And don't just say 'hot', because that's bullshit.\"\n\nI looked at both of the guys, but Joe spoke right up. \"Small tits, but sweet ones. Nice ass. Wicked nice long legs. What are you, like, five ten?\"\n\n\"Five nine. I'm high-waisted, though, like my mom.\"\n\nJoe nodded his stoned approval, eyes twinkling, smiling a little, taking another hit and passing the smoke to Jack.\n\nI spoke again, my thoughts still flowing out unfiltered. \"Tits and ass, you say. So, we're using the vernacular of the common man?\"\n\nJoe giggled. \"Yeah. Is that okay with you?\"\n\n\"Sure,\" I said. \"I...use it too, sometimes.\"\n\n\"Vernacular's a fun word,\" Joe said.\n\n\"And you're a fun boy,\" I said. I looked at Jack, sitting in a chair near me. \"So...what do you think?\"\n\n\"Oh, wow, about...your body, you mean? Joe pretty much got it right.\"\n\n\"Oh, you're weaseling out, huh? Is it because we're neighbors? I promise not to make it weird.\"\n\nJack smiled, in that way that's made me a little melty for weeks now. \"I like your posture,\" he said.\n\n\"My posture? Wow, that's interesting. Is it...unusual?\"\n\n\"Sort of. You just stand really nicely, and walk nicely. And, like Joe said, you got a nice ass.\"\n\n\"An ass man, huh? I never would have guessed.\"\n\n\"Why?\"\n\n\"I don't know, Jack, I guess when I look at you I...just figured you for a tit man.\"\n\nMy smile, at this point, was uncontrollable. This conversation I'd fallen into, in this smoky room, with these two young hunks, was like a happy dream that made me want to laugh. Jack passed me the weed and I took it. This third, big, deep puff made the inside of my brain feel like heaven.\n\n\"I like tits just as much as anybody,\" Jack said, smiling, \"but small ones are just as beautiful as big ones. It's all good.\"\n\n\"Where were you guys when I was younger and feeling so bad about mine?\"\n\n\"No!\" Joe said, genuinely shocked. \"You felt bad about them? Why?\"\n\n\"Seriously? A 'B' cup doesn't cut it in this world,\" I said. \"Not in the U- S-of-A. I always feel like it's maybe different in Europe.\"\n\n\"Fuck yeah, everything's hotter in Europe,\" Joe said.\n\n\"I think you're right,\" I said, chuckling. \"They make the sexiest cars, and the best wine that makes everyone horny. A European designed the only sexy bra that makes my tits look really good.\"\n\n\"Fuck yeah, is that a job?\" asked Joe. \"Designing bras? That's gotta be sweet! \"\n\nMore laughter, from all of us. Joe, on a roll saying amusing, off-the-wall things, said, \"Jack's old girlfriend had big tits.\"\n\nThis made me howl with laughter, until tears rolled down my cheeks. \"Oh, this I have to hear about! You guys aren't together anymore?\"\n\n\"No,\" Jack said. \"We had a place together. When we broke up, that's when I moved here.\"\n\n\"But..big tits, huh? Do you miss them?\"\n\nJack smiled. \"Only at night.\"\n\n\"And in the morning, and in the middle of the day,\" Joe said, laughing.\n\n\"Yeah, what about Emily,\" Jack said to him. \"You miss her tits even more.\"\n\n\"Oh, fuck, they were freakin' awesome,\" Joe said.\n\n\"See, now this is what I mean. You two are definitely tit men. I had a feeling.\"\n\n\"Yeah, but that's what girls don't get,\" Joe said. \"Us guys, we just like women. The details don't really matter. Emily, she was kind of...a big girl, I guess you'd say, but her tits, oh my God. You have cats, right Jill? Emily left me a cat.\"\n\n\"Oh, Wow! See, I thought you were a tit man and a dog guy. Turns out I was only half right. What's your cat's name?\"\n\n\"Rita. She's got long, sorta reddish hair. Me and Emily named her after watching an old movie, with that Rita Hayworth actress. Talk about a hottie.\"\n\n\"Oh, wow,\" I said. \"You like old movies? Which one was it, do you remember?\"\n\n\"Gilda. It was really good.\"\n\n\"Yeah, that's good one,\" I said. \"It's in that Film Noir style.\"\n\n\"What's that?\" asked Joe.\n\nI looked around, noticing the evening darkness outside for the first time, with the flickering candle light casting huge dark shadows in the room. \"It's kinda like this,\" I said. \"A dark, smoky room. A woman in the clutches of two handsome men. Men with dirty thoughts on their minds.\"\n\n\"What makes you think we have dirty thoughts on our minds?\" asked Jack, his eyes twinkling beautifully.\n\nFeeling very high, and suddenly flustered, I backtracked. \"Oh, I didn't really. It's just...how those movies go. This is so much like it, though, with this heat, and...the three of us so...sweaty.\"\n\nJoe re-lit the last of the weed, inhaled, blew a huge cloud of smoke into the stale, humid air. The candles illuminated it, the shifting, amorphous shape of the smoke cloud almost like the northern lights; the aurora borealis in black and white. \"If you think we have dirty thoughts on our minds, that means you have dirty thoughts on your mind,\" he said, smirking.\n\n\"I just thought that's what young guys think about all the time,\" I said. \"That was dumb, though. You wouldn't, with someone my age.\"\n\n\"What do you mean? That just makes it hotter,\" Joe said, tossing his cigarette lighter onto the coffee table.\n\nI looked at the interesting looks in his and his brother's eyes. \"Seriously? You guys are into...older women?\"\n\n\"There's no reason not to be.\"\n\nThe tall drink of sangria in my hand, empty now, had gone straight to my head, beautifully altering my beautiful high. \"All right then,\" I said, landing my gaze on handsome Jack's lovely eyes. \"Just what kind of dirty thoughts are we talking about?\"\n\nJack smiled, sat there for a few moments. \"I...shouldn't say.\"\n\nI smiled. \"Oh, weaseling out again? Because we're neighbors? I told you, I promise not to make it weird.\"\n\n\"I know what he's thinking,\" Joe said. \"A fuckin' super sweaty DP. Am I right, bro?\"\n\n\"Oh my God!\" I said, stunned, my body suddenly motionless. \"I watch porn. I know what that is.\"\n\n\"Hey, you asked, we told,\" Joe said, acting casual even though his suggestion had been such a full-on bombshell.\n\n\"You seriously...would want to do that...with me? \"\n\n\"Fuck yeah, but we're just answering your questions,\" he said. \"It's fun to say what we think, but like you said, we won't make it weird or anything.\"\n\nI swallowed hard, still barely able to move or breathe. Everything was suddenly very weird. I looked at Jack; his eyes told me his brother spoke the truth about the dirty thoughts in both their minds, but I still couldn't quite believe it. Jack? My handsome stud neighbor? Wants to put his cock...in my ass? It seemed as if I must have dreamed the last half hour, but no, there we all were, in flesh and blood, all three of us glistening with candle-lit perspiration.\n\n\"Jesus it's hot in here,\" I said.\n\n\"Wanna go sit on the front steps?\" asked Jack. I'm pretty sure he was being a nice guy, giving me a way to escape the weirdness, a way to mellow out, back to normalcy.\n\nI shook my head, slowly. \"No...let's...stay in here. I'm gonna go get a fresh drink. I'll be...back.\"\n\nEverything seemed to be slow motion: my thoughts, my speech. I stood and didn't know how I was doing it; I walked, feeling floaty. The guys didn't say a word as I left, me closing Jack's door behind me, me out in the hallway, a space that felt completely different from just forty-five minutes ago. My apartment felt like an oven, but everywhere did, so hot, so still, so sticky. My cats didn't budge to say hello.\n\nChecking my phone, which I'd left behind, there was a text from my friend Allie, from about a half an hour ago: Are you surviving the blackout? It's so F*ing hot! I'm imagining a naked man fanning me with a palm frond.\n\nI replied: Sorry I missed this, I was sitting out front on the steps. I'll see your naked man, and raise you 2 naked men. Am I awful?\n\nAllie replied: You go girl!\n\nI mixed my drink and took a deep breath in the eerie, stifling quiet of my apartment. Of course my mind was doing flip-flops: horny, then sensible, then horny again. As you can see, horny was winning.\n\nSo here's the thing: I'm no anal virgin. As I mentioned, Mr. Mercedes\u2014that's what Allie calls the rich guy I dated\u2014he was pretty damn good in bed, full of ideas that were new to me, and anal sex was one of them. I'm pretty much a game girl when it comes to the bedroom, so I tried it with him. And...I liked it. The smell and dirtiness of it was a turn on and a turn off, so sort of a wash, no pun intended. But the feeling of it, that was all good. I got off on it. I didn't have anal orgasms or anything like that, but if felt stupid good, I liked it, and Mr. Mercedes did, too. He said I was tight like a vice in there, and he's not even very big.\n\nThen along comes my dabbling in porn watching, and what do you know, I discover this Double Penetration craziness. I mean, come on! Who invented this stuff! Who was the girl? I want to know her name, and watch a documentary about her, because she was just flat out bonkers. Do you think it was in Victorian times, or back in the old West? Maybe a Medieval girl, or a Roman? Did Cleopatra take it in the pussy and the ass at the same time? Jesus, the mind boggles.\n\nI sipped my freshly made ice cold drink, thinking about how good it felt to be high on weed after all these years, and the next thing you know I'm in my bathroom, naked from the waist down, washing my asshole, looking through my medicine drawer for a ten-year old tube of sex lube. The hornies just weren't giving up, and my staid life was feeling electric for the first time in forever. Of course there was still the reality to deal with: two young guys who may be all talk, or may have just humored this older woman, because they felt sorry for me or something stupid like that. I was pretty sure they weren't assholes playing games with me. Jack's a genuinely nice guy, not the type who would fuck with a woman's emotions. So, my very horny mind was thinking that yes, they really do want to fuck me silly, and I'll be damned if I didn't really, really want them to. And they're brothers! I can check that fantasy off the list, too!\n\n\"I think I'm getting lucky, you guys,\" I said to my sprawled, lethargic cats as I straightened my skirt over my sexiest panties. \"Your Mom's gone crazy. Be nice to me later. Don't judge.\"\n\nI topped up my drink with a slug of wine from the bottle, put the tube of lube in my shirt pocket, and boldly strolled over to Jack's place. Both Jack and Joe had removed their shirts, lounging comfortably in just their shorts. The sight of them, there in the flickering, shadowy candlelight, and the sweet smell of smoke in the air, and the oppressive heat that I could almost taste, made me swoon a little, in a woderfuly good way.\n\n\"What's this music?\" I asked. \"I like this, too.\"\n\n\"Mazzy Star,\" Jack said.\n\nI stood and listened. A soft, echo-ey sounding band, with a mysteriously dreamy female vocalist, they sounded like the very air in the room \u2014 muggy, and smoky, and so very warm. \"This is sexy music. You guys surprise me.\"\n\n\"We were thinking the same thing,\" Jack said, smirking in a pleasing way.\n\n\"What, that I surprise you?\"\n\nHe nodded. It was a fun little moment between us, one I think I'd been dreaming of since the day I secretly watched him move into the building.\n\nI walked over to the couch, sat myself down, and tossed the tube of lube onto the coffee table. It felt like what a big-time gambler must feel when showing her hand of cards, a once-in-a-lifetime hand that wins a fortune.\n\n\"Ohhhh yeahhh!\" Joe said, smiling. \"For real? We're doin' this?\" He looked at his brother. \"Dude, this fuckin' building you moved into is sick! \"\n\n\"It just so happens I'm a fan of anal sex,\" I said, feeling a powerful blush on my face. \"And I've never...done the double...so...\"\n\n\"Fuck yeah,\" Joe said. \"Remember, before, when I said you're hot? You're, like, twenty times hotter now.\"\n\n\"Got anymore weed?\" I asked. \"If I'm gonna to sit here in my underwear, like I think I'm gonna do, I'll need a little more buzz to keep me from being embarrassed.\"\n\n\"Fuck yeah,\" Joe said. \"Let's get fucked up.\"\n\n\"You're awfully quiet tonight, Jack,\" I said. \"Was your brother the talkative one growing up?\"\n\nJack nodded. \"Yeah, he used to drive our mother crazy.\"\n\nI kept my eyes on him for a minute, my stoned, lazy gaze openly looking at his beautiful topless torso, all young and smoothly muscled, just hairy enough to make my mouth water.\n\nJoe looked nearly identical, maybe slightly more muscled, maybe a few beers thicker around the middle.\n\n\"Guys are so lucky, you can just take your shirt off when it's hot,\" I said.\n\n\"Hey, go for it,\" Joe said. \"Yeah, it's way too hot for clothes.\"\n\nHe lit another 'spliff', as he called it, handing it to me, a thin column of smoke rising from it. I inhaled deeply, feeling the acrid smoke rush through my throat, feeling my mind expand, almost instantly. Handing the spliff to Jack, I rode the rushing high, using my surprisingly long-feeling fingers to unbutton my shirt. \n\n\"There's that sweet posture,\" Joe said, eyeing my tits, my slightly arched back giving their small size all the prominence I could muster. \"Holy shit. You look good. That bra's hot.\"\n\n\"It's my favorite,\" I said, wiggling out of my tight jean shorts. I felt unbelievably wanton sitting there wearing nothing but my sexiest bra and panties, like a true slut, my pussy easily visible through the delicacy of the red lace.\n\n\"Shit, Bro,\" Joe said, eyes on my body but speaking to his brother. \"Didn't Trixie have that same stuff on? There must have been a sale or something. That's French, right?\"\n\nI furrowed my brow, wondering how this not-very-worldly guy knew about handmade French underwear from a New York City boutique. \"Okay, first of all, who's Trixie? And how do you know this is French?\"\n\nJoe, blowing out a big cloud of smoke, said, \"She was this stripper a friend of ours hired, for a bachelor party. She was somethin' else. Went totally rogue, off the hook. Best party ever. She had that exact same bra and panties.\"\n\n\"Jesus, Jack,\" I said, smirking. \"You told me she was good, but...off the hook rogue, huh?\"\n\nJack nodded sheepishly, not saying a thing. There was something odd going on in his head, I could tell.\n\n\"So Joe,\" I said, taking the spliff from his reaching arm, \"tell me how you know about French underwear.\"\n\n\"You'll think I'm fucked up, but...when she was fucking our buddy Justin I picked up her panties and...some of us guys passed them around for a sniff. I saw the little label inside. It said French stuff.\"\n\n\"Okay, wow! She fucked him? Is he the guy getting married? \"\n\n\"Yeah,\" Joe said, smiling. \"She called him Babyface.\"\n\nThat made me laugh, but wow, these revelations about what happens at a bachelor party were mind boggling, to say the least. \"So that's what you meant by off-the-hook rogue? Because she fucked him? Was it...right here with everyone watching?\"\n\n\"Yeah,\" Joe said. \"Blowjobs, and fucking. A total gangbang. It killed. Right, bro? It was fuckin' amazing.\"",
        "I was stunned, nearly speechless. \"Was she...a prostitute? \"\n\n\"No, just a regular stripper I think, sort of an older one, like your age\" Joe said. \"It was funny, she wasn't even great at the stripping part, but damn, the rest of it was off the fuckin' hook.\"\n\nSomething in my mind, like a short circuit, was playing games with me, making a total mess of my thoughts. I looked down at my panties, with my pussy showing through, and I saw a flashing mental image of them, and the bra, neatly folded on top of my drawerful of oddly jumbled lingerie. My hand went to the side of my panties and I stretched them a little, twisting the side so it was inside out, revealing the exquisite little label, the one I'd looked at and admired so many times back when this lingerie was new. I asked Joe, \"Was it...like this?\"\n\nHe leaned over and looked at the little label. \"Fuck yeah. See that, you've got good stripper taste. That shit's smokin' hot.\"\n\nHe looked like he wanted to put his hand on me, down there, on the damp part of my panties, but instead he sat back, and I was glad. I had questions to ask, and I didn't know if I was happy, sad, excited, or totally fucked up in the brain. \"This...Trixie...\" I said, my piercing gaze zeroing in on Jack's quiet, dark eyes, \"...do I...know her?\"\n\nJack didn't say no, and my heart sank. But then, when he silently nodded, I felt my emotions lift again, back to a place of strange happiness. \"Oh my God. Allie?\"\n\nJack nodded. \"I had nothing to do with it,\" he said. \"She just...did it somehow. She told me after, she saw the real girl out on the street and she paid her, told her to leave.\"\n\n\"Bro,\" Jack said. \"What the fuck. You know her? You know Trixie?\"\n\nJack nodded, looking embarrassed, like things were unraveling that he didn't expect. As I sat there, stunned, I knew it was a loss of secrecy that would badly embarrass Allie. It wasn't Jack's fault that her secret was coming to the fore, it was my fault, my stupid detective work. That, and Joe's easy honesty. \"He barely knows her,\" I said to Joe. \"Let's just say she's...a friend of a friend of a friend. Don't tell anybody, okay? We don't need to talk about it anymore.\"\n\n\"Got it,\" Joe said. He sipped on his whiskey. \"Yeah, that was a fuckin' night, though.\"\n\nI thought back, to Allie's satisfied looking eyes and smile when I returned home last Saturday. She truly seemed at peace with the world, more so than usual, and her texting in these days since I've arrived back home has been very flirty, more so than usual. And this lingerie \u2014 I have a pretty good feeling I left it down in the bottom of the drawer, out of sight, out of mind, purposely putting it there so I wouldn't think of Mr. Mercedes.\n\n\"Stand up,\" I said to Jack as I stood, reaching for him. \"Dance with me.\"\n\nMazzy Star's music, still ethereal and dreamy, is good for slow dancing, which is what I wanted. Embracing Jack was new and wonderful, our sweaty bodies sticking together all warm and nice. I whispered in his ear, \"Did you fuck her?\"\n\nJack nodded. \"Are you mad?\"\n\nI shook my head no, whispering, \"How many guys?\"\n\n\"Twelve, I think, plus me.\"\n\n\"She let...everybody? \"\n\nJack nodded. I looked at Joe, his eyes closed, lost somewhere, in the music I suppose. Jack's cock was hardening under his shorts, pressing against me. He clearly wasn't embarrassed by it. Was it me arousing him, or was it the thought of Allie? Did it matter? No, it did not matter, not to me, not this high, not when the hard cock in question belonged to my hunky young neighbor Jack. I slithered down his sticky body, to my knees, pulled his shorts down, took his big animal of an uncircumcised cock in my hand, then took the fragrant, sweaty thing into my mouth, my hunger quiet but eager.\n\n\"Fuck yeah,\" Joe said, Jack's lovely moan bringing him back from his closed-eye daydream.\n\nI didn't look at Joe, but I knew his gaze was on me. I could feel it, sense it, and it was a whole different sort of heat than that which was already smothering the three of us. Tickling rivulets of sweat dripped down my chest, into the hollow of my cleavage, creeping like a devilish dribble, down between my tits, tits that felt full of themselves, ready to party.\n\nJack's cock, his whole crotch, was slick with the scent of man. It wasn't unclean and gross, this was fresh sweat, manly, intoxicating, delicious. I felt like I couldn't get enough, a wilder hunger overtaking me, my thoughts so frivolous and so serious at the same time. I drooled and slobbered on the big cock, mouthing it hungrily, sideways and lengthwise, using my teeth, my tongue. I held the wildly hard length of him up out of the way and I sucked his balls; their soft, luxurious flesh seasoned with a saltiness that livened my taste buds like freshly made candy.\n\nMy hunger exploded when Joe was suddenly there, his body stripped naked, standing next to his brother, their cocks now a twin pair of huge, hard, one-for-each-hand shafts of wonder. I feasted on them, drooling and moaning, my young men moaning right along with me.\n\nJack kicked off his shorts, now naked like his brother. I'd won a contest, maybe for the best dream, and I was soon to wake up, I was sure of it. While trying to revive my long dormant deep-throat skills on Jack, Joe unclasped my bra. He helped me off with it, saying, \"Fuck yeah. Nice tits, Jill.\"\n\nHis hands, sweaty moist, big and strong, roamed the soft flesh of my chest, his playful fingertips playing with my wildly aroused nipples. Jack's cock got past my gagging point, thrusting as deep in my throat as any man's been. Yes, he was now my biggest. \n\nJoe, on his knees with me now, kissed my shoulders, the back of my neck, his hands each holding a breast, squeezing them the way I love them to be handled.\n\n\"You're a fuckin' deep throater, huh?\" He looked up at Jack. \"That feel good, bro? She's fuckin' hot as fuck.\"\n\nRed faced and gasping, I let Jack out of my throat, coughing and nearly choking. \"You now,\" I said to Joe. He stayed on his knees, leaning back, sitting on his feet, his cock pointing straight at the ceiling. I went at it, noisily gorging myself on the feast of it, gagging as I willed it from the back of my mouth deep into my throat. I'd shifted myself, on hands and knees now, arching my back downward and raising my ass, hoping Jack would take advantage. I sensed him joining us on the floor, felt his hand on the round curve of my ass. Joe was all the way deep in my throat when Jack's hand found my steamy wet pussy, and I wondered why I had waited so long to get lost in the pleasures of a threeway. Half a lifetime, wasted. So here, tonight, I had some catching up to do.\n\nI put my legs together so Jack could pull my panties down to my thighs; he brilliantly read my mind, mouthing my pussy from behind with his beautiful smile. Of course I only imagined the smile, but I think it's a pretty good guess.\n\n\"Fuck me, Jack,\" I said, glancing back at him over my shoulder. \"Fuck me.\"\n\nWith my legs together his big cock was a tight fit, thrusting, thrusting, thrusting into my slippery wetness. Mouth open and wide eyed, I looked into Joe's smiling eyes as Jack thrust his way home. Joe took hold of my head, guiding my open mouth to his wet, saliva slick cock, and suddenly I was there, the threeway slut I'd only dreamed of being, stuffed at both ends.\n\nIt didn't take long for me to cum. And cum, and cum, and cum. It felt stunningly endless, perfectly so, with Jack fucking me so very awesomely and Joe getting a little rough with my throat. Best...orgasm...ever. So far, anyway.\n\nJack, after fucking me so long, with such steady stamina in this oppressive heat, was left looking like he'd just had a hard workout at a gym, his whole body slippery looking, dripping with sweat. I stripped off the last bit of red lace from my body, pulled him down, placing him on his back on his nicely plush rug. Feeling ever so wantonly free, I sixty-nined him, just like that, just like the porn girls do. \n\n\"Fuck yeah,\" Joe said. \"Sweet ass, Jill.\"\n\nFeeling his hands there, both of them, fondling the curves of my ass and tickling my asshole as Jack ate my pussy, was as wonderful a thrill as I can remember. With my mouth full of Jack's cock, I moaned my happy approval as Joe's fingers played more forcefully with my tightest little hole, and I orgasmed in a trembling, leg-shaking way that was beyond anything...beyond everything. Just...beyond.\n\n\"Damn, Jill,\" Joe said, his hands still feeling my spasms. \"You're hotter than fuck.\"\n\nI sat up, riding Jack's face, my hands sliding up my body to my sweat-slick tits. I was suddenly sexier than I'd ever been, my happy eyes watching Joe watch me, my body writhing, my hands squeezing my tits, all for his visual pleasure. The goosebumps, all over me, gave away my thrilled excitement. My tugging hand guided Joe to his feet, his fiercely hard cock filling my mouth again.\n\nSomehow I shifted, and again my pussy was full of Jack's cock, my writhing body riding him, my mouth and tongue massaging Joe's sweaty balls as my hand stroked his length. Joe's hot cock slipped back into my mouth and I was once again cock-stuffed at both ends, this time upright, and I rode Jack's stunning hardness with increasingly unhinged fervor. If I'd been willing to empty my moaning mouth of Joe's hardness I'd have yelled: Yes! I love this! Oh my God, this is it!\n\nI came again, the orgasms coming to me with a never-before ease, an organic whoosh! that boiled my blood and trembled my muscles. I fucked Joe that way, too, him on the floor under me, Jack now in my mouth. The brotherly differences were wonderful, Joe more of a blue-collar fucker, his brother Jack more tender, more of an artist.\n\nJoe's hands, squeezing on my tits as I rode him harder, felt thug-like and needy. He looked the part, lying there with a bad-boy glint in his eyes. So I fucked him even harder, my sweat dripping on him, my pussy as tight as I could make it. He came, telling me about it with huffing, grunted words so I'd know and be able to keep his cum outside of me, but I wanted it deep, to feel his big-cock pulses, way up inside me, filling me with his bad-boy cum.\n\nI'd given up on Jack for the moment, so I leaned down and kissed Joe, his cock still deep inside me, and never has the first kiss of a night felt so electric.\n\nIt was then that I felt Jack, his fingers those of a lover, tickling through the sweaty crack of my ass, fluttering against the tiny muscled ring of my asshole. They were a quick tease, Jack's fingers were, but then I felt his face there, against my ass, his lips kissing my asshole before his tongue tickled there, the tip of it exploring, then pressing in. I moaned like a happy whore, right into Joe's kissing mouth.\n\nBefore these brothers, I'd never fucked a man and had him stay hard after his cumming. But these two, this Jack, and this Joe, they're special. Joe's cock was still so big, so long, filling me so wonderfully, so I began to fuck it again, both of us moaning, and Jack's loving face rode my slowly humping ass like a duck rides the waves. Then I felt his hand there again, and the different, slippery temperature of the lube. I slowed for him, coming to a stop, arching my back deep to give him my ass fully. I heard his heavy breathing as he teased my slippery asshole with the big tip of his cock. I pictured it there, Jack holding the foreskin back, his rock-hardness struggling to penetrate my tightest defense, then pushing through. \n\nHe and I both moaned loud, and Joe moaned, too. My head, thrown back now, aimed my wide eyes at the bare walls and ceiling. The music had stopped, warm batteries drained, the silence as thick as the smoky haze, silence that somehow added to heat. I felt Joe's cock, patiently waiting, throbbingly hard so deep in my pussy. Jack's cock, unrelenting, sought the same depths, so close as to maybe even feel the moving presence of the other, he and his brother massaging my electrified insides with an intensity of pleasure that I'd never felt before.\n\n\"Fffuuck!\" I barked, slapping my hand down on the rug. Then I barked it again, and again.\n\n\"Fuck yeah,\" Joe said. \"Let it go, baby. Let it all out.\"\n\nJack was all in now, two big cocks, so amazingly deep inside me, both of them beginning to fuck. What can a girl do in such a situation other that shriek like an ecstatic animal? It's all we are when we fuck, ecstatic animals, and so I let it all out, my animal instincts, writhing and screaming, my muscles tight and working, spastic more than not. I felt Jack cum, way up inside my ass, the feeling and the thought of it melting me, my body orgasming, my words a spewing, garbled muddle. In the middle of it, with both brothers pumping me so full of their manhood, Joe exclaimed \"Fuck yeah!\" \n\nHis brother Jack, still cumming, deep in the tight heat of my ass, could only muster grunts, beautiful ones that will haunt my happy memories forever.\n\n\u2014\n\nI had to go to work the next day, the power company's good work dashing all our hopes of a day off to recuperate from the sleepless night caused by the heat and...other things. \n\nAs much as I wanted to, having a 'fuck buddy' relationship with Jack seemed destined for failure, what with him being young, dating women his age, and me being... Yeah, a close to fifty-year-old shouldn't be doing that, as much fun as it sounds. When I saw him the next evening I told him how I felt about it, and, interestingly, we both fell right back into our nice friendly 'neighbors' relationship, with nary a mention of how wonderfully snugly his\u2014and his brother's\u2014cock fits in my ass. Jack and I both remembered it, though; how nice it fit and how nice it felt, the knowledge of it twinkling my eyes and his, in a new and lovely way.\n\nThen there was the little matter of my good friend Allie's unbelievable bachelor party gangbang, a thing so astonishing I still can't quite wrap my head around it. I knew that if I told her of my knowledge of it I'd have to tell her of my own tryst with Jack and Joe, and I decided I didn't want to do that. So I kept my secret, and I kept hers, and Jack, bless his kind heart, kept both of ours.\n\nTwo days after the heatwave brothers threeway, a strange thing happened. In the evening, after work, I did some laundry, down in the basement laundry room. It's just a household style washer and dryer, and a reasonably clean sink, for the four apartments to share. I did my usual work clothes and things, then I rinsed out my red French lace bra and panties, hand washing them carefully in the sink. I gently squeezed the rinse water out of them, smiled at the astonishingly sexy red of them, and tossed them into the empty clothes dryer, turning the temperature down to the 'Off/Air' setting, so as not to shrink the delicate things. And then, stupid me, sipping wine up in my apartment, I forgot about them.\n\nI asked Jack the next day, my heart beating like a school girl, \"Did you...take my underwear?\"\n\nHe didn't have a clue, and I could tell he was being honest about it. There are two other apartments in our four-plex building \u2014 an older couple live upstairs, and a single woman, younger than me, lives across the hall from them. I pictured the older man, a gentle, kindly sort, pilfering my sexiest undies, hiding them away from his wife, using them for God knows what. The thought of it excited me more than it should have.\n\nThe young single woman was probably a better suspect, her build similar to mine, slender, but with a bit more bust and booty. Would my things fit her? Maybe. Did she seem the stealing type? No, not at all. I thought of asking her if she'd seen my things, but I hate awkward confrontations. It's a real downfall of mine, personality wise. Believe it or not, I'm quite shy.\n\nVery easily, I decided that it was appropriate that my sexiest lingerie was gone, used up by the broiling hot flames of the sexiest night I'm sure I'll ever experience in my life. Not to mention a similar night for Allie, just a few days before. Yes, they'd done their job, those Devil Red undies, and the Devil himself must have slipped into the basement and stolen them away.\n\n\u2014\n\nRed Lace Trilogy, Part Three \u2014 An Unexpected Love\n\n\u2014\n\nI'm not a thief. Really, I'm not. I can't remember stealing anything before. So why do I have my neighbors underwear in my drawer? I mean, I can only assume it belongs my neighbor, the woman named Jill that lives down on the first floor. She strikes me as cultured, my one-time glimpse into her apartment revealing shelves full of books, healthy green plants, and nice art on the walls. She's my mom's age, I think, but seems younger. Definitely slimmer, which is another reason why I think this red lace lingerie is probably hers. Was probably hers. I can't give it back now. Not after wearing it. My ass is different shaped, rounder than hers I guess you'd say, so the panties are stretched to fit me now. And I readjusted the delicate little straps on the beautiful bra. I'd never know where to adjust them back to, to make it like it was. I feel really bad that I did all this, but, I mean, these panties and bra are like nothing I've ever seen. The color alone is, like, amazing. It's a red that just glows, in a bright but really soft kind of way; I've never seen a red quite like it. And the lace is just so finely made and beautiful. There's a small label inside both the bra and the panties; I can't read it because it's written in French. Wow, I just never knew underwear could be so beautiful. I'm guessing Jill must have more, so maybe she won't miss these. That's a bad way to justify my taking them, but...thinking about it that way makes me feel a tiny bit less guilty.\n\nThe red lace lingerie is so beautiful, and so perfect, I wanted to wear it to my friend's wedding. That's really why I stole it I guess. It was nearly a year ago when she asked me to be in the wedding party. \"Marissa,\" she said to me, \"I hope you'll be one of my bridesmaids. Will you? Please?\" I'm not really comfortable being in front of lots of people, but I told her I would. About a month ago I brought my pink bridesmaid dress over to show my grandmother, and tried it on for her. \"Oh, Marissa,\" she said. \"It's so revealing and so short. Are you sure it's what Karen wants? Maybe you got one of the shorter girls' dresses by mistake.\"\n\nI smiled. \"No, Grandma, this is what Karen wants. It's an evening wedding, at the casino. It supposed to be sexy.\"\n\n\"Well,\" my grandmother said, \"I don't like that idea at all. The bride should be the center of attention, not all you girls. I like the pink color, but this is more like a cocktail dress, and a rather tight one. Your bosom, and the curve of your behind, it's much too...\"\n\nI giggled. \"Grandma, it's fine. I like it. It fits way better than I expected a bridesmaid's dress would fit.\"\n\nSo you can see why the sexy red lace lingerie seems like the perfect thing to wear under the sexy little pink dress. It's almost like they're meant to be worn together, especially with the red high heels that Karen asked us all to wear. Finding that perfect bra and panties, there in my building's basement laundry, just days before the wedding, seemed like fate. Putting the whole outfit on, up in front of my bedroom mirror, I felt as pretty as I've ever felt in my life.\n\n-\n\nKaren's fianc\u00e9e is a guy named Justin. I like him. I met his parents and his best man, a big guy named Brandon, at the rehearsal dinner. The surprise, though, was seeing my neighbor there, the super cute guy that lives downstairs from me. Seeing him at the dinner was the first time we'd talked. His name is Jack. He's an assistant service manager at a Toyota dealership, and he said he thinks our little apartment building is the friendliest place he's ever lived.\n\nJack's brother Joe, another real cutie, was there at the dinner, and some other nice guys, too, all of them attendants at the wedding. The other bridesmaids and the Maid of Honor were all there, and Karen's parents, and quite a few other people. We did our rehearsal, had dinner and a few drinks. I can be kind of critical of people sometimes, but these were all very nice folks. It was a fun night, even for a shy girl like me.",
        "-\n\nThe next day, home alone with nothing to do, I was glad of it because it gave me lots of time to get ready for the wedding that evening. I'm not really good with people; the thought of being up in front of everyone made me nervous. We introverts need our quiet time, so having some nice 'alone time' at home before the wedding felt like a blessing. I thought about going downstairs, knocking on Jack's door, so we could talk about the rehearsal dinner last night and our wedding clothes and whatnot, but no, I could never bring myself to be that bold with a guy I'd just met, especially a cute guy like Jack.\n\nBeing a Saturday, I went downstairs to get my mail, and I ran into my neighbor Jill, the one whose red bra and panties I stole. The whole thing made me a little queasy, me being so new to thievery, not being used to those kind of situations. Jill was very nice, talking to me a little more than usual this time. She's a nice woman, almost my mother's age but so much different. I think it's because Jill lives alone. It gives her an air of independence and youth that my mother and father don't have anymore.\n\nJill and I talked about a few different things, but I didn't tell her about the wedding. Seeing as how she lives right across the hall from Jack, I wonder if she's friends with him. Maybe he told her about going to a wedding, and if I was to tell her, it might have been a complicated conversation; I always like to keep things simpler, especially when I'm talking to somebody new. Jill really is very nice, though, and she has amazing taste in lingerie. I'd love to get a look at some of her other things someday, although that seems a very odd thing to say \u2014 a person doesn't normally think about their neighbor's underwear. Maybe, the next time I see her, I'll ask her if she's ever traveled, and if she says she's been to France I'll know she bought the little red bra and panties there. I'd love to go to France some day, but I'm scared of flying and...I think that kind of trip will just remain a dream. \n\nDriving to the casino for the wedding, I almost didn't feel like me. With daylight lingering, and the pink bridesmaid dress being very much evening attire, it felt odd to be wearing it. It's so short that, sitting in my car's driver's seat, my legs looked long and remarkable womanly; almost like a model's legs. The red high heeled shoes aren't safe to drive with, not if you've had no practice at it, so I drove barefoot, and once, at a stoplight, I even took a peek at the red lace panties, easy to do because of how the dress had ridden up my thighs. It felt so naughty, and sexy, there amongst all the traffic.\n\nA few men looked at me \u2014 long, lingering looks \u2014 when I walked down the casino's main, front hallway, finding my way to the 'wedding chapel' that's part of the suit of rooms Karen rented for her wedding. Maybe a girl in a pink evening dress, with long legs showing above red high heels, isn't such a normal sight. Or maybe it's the low scoop neck of the little dress, or more accurately, all the fleshy d\u00e9colletage of my chest, there on view for the looking men; more and more looking men, as I walked. My goodness, what a certain kind of dress can do!\n\nThe wedding went off without a hitch. The wedding march, all of us in the wedding party making our way up the aisle, with organ music and everyone watching, was quite a thrill. Karen had found out about the coincidence of me living in the same apartment building as Jack, so she matched us up and he and I walked up the aisle together, arm in arm. I must say, it made my fast-beating heart beat even faster, pairing up with him like that. In a tuxedo he's a thing to behold. A real stud, or hunk, or whatever hot men are called these days. I caught him looking at my breasts just before the ceremony, and he blushed. Blushed! The way cute boys do! It was then that I wondered if I might have a drink with him at the reception, or maybe even dance with him. \n\nThe reception dinner had all the bride's attendants sitting next to her, and all the groomsmen sitting next to him. I didn't much like being up front like that, at the head table, on display. All I could think about was keeping my dress clean, so I ate very, very carefully. The champagne tasted good, though, tickling down my throat in a marvelously bubbly way. By the time the dinner, the cake, and the speeches were all done, I was smiling. A lot.\n\nUsually I'm not much of a dancer, but something about Karen's wedding \u2014 the place, the people, the music \u2014 it all got me going more than I thought I would. I didn't have a date, so that was awkward, but surprisingly, Jack didn't have one either. Most of the others had dates, or spouses, I think. It must have been odd for the dates, because they had to sit alone during the dinner while all of us in the wedding party sat at the head table. \n\nJack's brother Joe came with a girl named Brit, a real 'hottie' I guess you'd say. She wasn't at the rehearsal dinner, so I didn't meet her until we were all dancing. I could tell right away she's different than me \u2014 she's the type that's right at home on a dance floor; I could even picture her there all alone, with all of us watching, like a stage show, or maybe even doing a stripper routine, based on some of the moves she had. Not just the moves, but her body; it's the kind that draws the eye, men's and women's both, maybe for different reasons. I'm sure every man alive would say she's hotter than me, but I felt strangely superior to her in one way \u2014 I had the world's sexiest lingerie on under my little pink dress, and she didn't. She clearly didn't have a bra on, her fun little dress being one with built-in support. With her back bare, and her sides bare, I wondered how she was staying covered, but somehow gravity and physics were being defied, her breasts moving and jiggling and threatening to pop out as she danced up a storm. I watched for it, and I saw Jack watching, too.\n\nJustin's best man, Brandon, danced with his wife, Diana. She'd already had quite a bit to drink, I could tell, and she danced with a champagne glass in her hand, sipping from it, smiling. She's one who loves to dance but isn't very good at it. I envy people like that; people who just don't care what other people think of them. They just do their thing, smiling, with no worries. \n\nDancing sometimes becomes a group thing, and so it was with Jack and me, Brandon and Diana, and Joe and Brit. With the talented band playing pretty good song choices, the six of us had fun, and I was feeling the buzz from the champagne. That's when the music slowed, the first real slow-dance happening, Jack holding me in his arms for the first time, his strong body right against me. The lovely smell of his cologne, the smooth feel of the fabric of his nice tuxedo, it was all enough to make me dizzy. He surprised me with his dancing abilities, knowing more than me, so I let him lead, as a girl's supposed to do, and I'm afraid I melted into him much more that I should have. I wasn't his date, after all, just a barely acquainted friend and neighbor.\n\nThe tempo of the songs picked up again, as it usually does, but everything about the night felt a little different after that first slow-dance. I can't explain it really, just a slight softening, you might say; a blurring, or maybe a change of color. Jack's eyes looked softer, and deeper, and Joe and Brit looked even sexier, dancing dirtier, making us all smile as we watched them. The six of us seemed to be dancing closer, but maybe it was my imagination.\n\nAnother slow dance song, this one even slower, had me in Jack's arms again, and I felt happy there. The champagne, and his scent, it melted me again. With my eyes closed, I felt his hands, one on my back and one lower, flirting with the curve at the top of my ass, the place my grandmother was worried about. I smiled when I thought of her, and I smiled knowing Jack's hands were drawn to the places where the beautiful red lace was hidden underneath. I don't think I'd ever felt as sexy in all my life as I did at that moment, with that lovely song, the warm strength of Jack's body moving us so perfectly, so peacefully.\n\nA little while later, when the reception's beautiful energy started to wane, I was sad that it was all going to end. I knew some of the wedding guests were staying at the casino's hotel, upstairs, so when Joe invited us up to his room it didn't surprise me. I knew I should leave, maybe even leave my car there and call an Uber, because the champagne was making me a little too happy, but instead I went up the elevator with Jack, his brother, Brit, Diana, and Brandon, all of them feeling like new friends. The guys had all taken off their tuxedo jackets and their bow ties, all of them looking sexy in their black pants and bright white shirts.\n\nDiana was particularly drunk, but truthfully we were all somewhat tipsy, the elevator, the hallway and the hotel room all a bit of a blur in my mind. Brandon carried two bottles of champagne, stolen from the leftovers at the reception, and Jack had weed with him, a bag of it and a small pipe that he'd been carrying in his tuxedo jacket pocket. I hadn't smoked weed since college, but I'd liked it some back then, so, with the six of us sitting and sprawled on the two big beds, we got high. I know I probably shouldn't have, but it felt good, and with Uber available I knew I could get safely home.\n\nAnother one of the bridesmaids, a girl named Amber, is an old friend of mine. She texted me to see why I'd left without saying goodbye, so I told her were I was and she said she and her date would came up to join us.\n\nAfter putting my phone back in my purse, I sat on the bed again, next to Jack. It was hard not to notice Diana's black panties showing, but she obviously didn't care, her dress hiked up to the very tops of her thighs so she could sit the way she was. My instinct was to say something, maybe whisper in her ear so she could adjust things for more modesty, but I just sat there and marveled at her boldness. Of course I wondered what I would look like if I sat the way she was sitting \u2014 my red lace being so much brighter than black, it would most certainly draw everyone's eyes. The thought of it gave me a shiver.\n\nI'd been so caught up in Diana's exhibitionism for those few moments, I hadn't noticed Brit kissing Joe, until, that is, she said \"Weddings make me so horny,\" her voice right there against his lips, loud enough that it wasn't meant to be a secret. The thought of her saying it, out loud, in front of all of us, was almost as surprising as the sight of her hand on Joe's crotch, her fingers and the whole of her hand palming and fondling an obvious lump. Joe moaned into her mouth, kissing her, not saying a word about how close and watching we all were.\n\nI was going with the flow, just interestingly watching, but then...I have to admit Brit shocked me. She opened Joe's tuxedo pants, unbuttoning and unzipping them, and the next thing you know she went down on him and his fully hard cock was in her mouth! I mean...oh my God! I'd never seen a woman take a man so boldly, so out in the open. I was glad to hear the knock at the door, sure it would end this horny flare-up, but Brit kept on with the blowjob. It embarrassed me, my face red, I'm sure, when Amber and her date walked in. \"Oh my God,\" Amber said, her eyes on Brit's cocksucking mouth. She looked at me, as if to assess that I was in fact there, sitting on the bed and watching this lewd act, then she turned to her date, a good looking guy named David, and she asked him, \"Do you...want to stay?\"\n\nHe did want to stay, and that surprised me too. Brandon and his wife started kissing, getting handsy with each other, and I felt much too embarrassed, so much so that my embarrassment embarrassed me. I had no idea what to say to Amber when she walked nearer. I heard Jack quietly ask me \"Are you all right?\" just as his gentle hand touched my thigh, the bare part, just below the hem of my dress as I sat there, and my head swiveled toward him and I kissed him. Kissed him! As if I was someone else! I mean, I was high, and nicely tipsy, and a little turned on, but wow! I'd never done anything quite so impulsive, not since my teen years, and even then not so much. This felt new, and flat out crazy, and I kind of loved it.\n\nJack kissed me the way a girl always dreams it will be, his hand staying there on my thigh, more forcefully now but still gentle and lovely. I felt his fingers moving there, just subtly, and I found myself wishing they'd move more, those few inches to where I was getting wet for him. Never had I wished for such a thing in the presence of others, but this situation, this moment in time, felt so amazingly sexy and exciting.\n\nDuring this mind-melting kiss, I felt the bed move. With the other bed having four on it already, and the out-in-the-open blow-job happening there, Amber and Dave had chosen the bed Jack I were on, and as I was kissing him I heard her whisper in my ear, \"I never thought I'd be doing this with you.\" It was her fingers doing the doing, unzipping the back of my dress, making me moan into Jack's mouth in a whimpering way, my mind all in a dither. It was a strange feeling, almost like terror but so much warmer. \n\nI didn't know what to say to Amber, even more so now, so I kept kissing Jack. I wondered what Amber had meant, about doing this with me \u2014 had she done this before, been in a sexy situation, or maybe even...done more? Why did she unzip me? Does she think...I'm taking off my clothes?\n\nThese thoughts astonished me, but it was that same strange warm terror, a kind that was so new and oddly wonderful. I kept Jack engaged with my mouth, and I glanced at the others, on the other bed. Joe's moaning was relaxed now, louder and freer, and Brit wasn't quiet anymore, her own moans and wet blowjob noises getting louder. From talking to them at the reception I knew that they weren't steady daters, just casual ones, and I found myself wondering if they done this before, a blowjob so sensually wet and moaning.\n\nBrandon's wife Diana, she with the peak-a-boo black panties, was wiggling out of her dress as my glance lingered, her body swaying a bit, her drunk smile and drunk eyes giving away one of the reasons for her temporary disregard of the conventions of traditional marriage. The other reason appeared to be a solid case of the hornies, those drunk eyes of hers squarely on Joe's big cock being sucked. I can't say I blame her, it being the stuff of pure porn, right there in front of us all. To see a married woman, though, there with her husband, take off her bra and drunkenly lunge for another man's cock, joining in on the blowjob...that was the suddenly shocking thing that locked up my muscles, freezing me up like a scared child.\n\n\"Looks like we picked the fun room,\" Amber said, close behind me. I turned my head and gave her a look that said oh-my-god-can-you-believe-this, and she winked at me. Winked at me! Like she's an old hand at this ...this sex party kind of thing! I felt very old fashioned all of a sudden, like I'd somehow lost touch with the modern world and on this night I was being thrown head first into it.\n\n\"I'll show you mine if you show me yours,\" Amber said, smiling at me. \"Now I know why people always wear their good undies to weddings. That red's really pretty.\"\n\nYou know how when you put something out of you head, sometimes it really goes? That's what had happened with my unzipped dress; I'd made it go away in those few minutes since Amber had unzipped it, just put it out of my head as if everything was normal, but now she'd called it out \u2014 \"that red\" \u2014 and I felt half naked even though I was only unzipped. Jack must have seen the look on my face.\n\n\"We don't have to stay,\" he nicely said. \"Would you rather go to the bar or something?\"\n\nNot ready to verbalize my feelings, I shook my head and kissed him.\n\nDiana's voice hit my ears. \"Can I fuck him?\" she said, over on the other bed.\n\n\"Oh, shit, babe!\" answered Brandon. \"Yeah, I mean, if we're doin' this. Both of us, right?\"\n\nI glanced over to see, just as Diana was nodding. Already just about naked, wearing only panties, she grasped one of her soft, low-hanging tits and fed it to Joe's mouth, her leg bumping and pushing Brit aside as it straddled him.\n\n\"Sorry,\" Brandon said to Brit. \"She gets on a tear sometimes. Champagne fucks her up, and weed makes her crazy.\"\n\n\"That's okay,\" Brit said, taking off her dress, keeping her eyes on Brandon.\n\nThey seemed like friends, knowing each other I think, but this stripping and sex swapping seemed brand new, with a lustiness on each of their faces that seemed deeply thrilling. So much so that it excited me; a couples swap, with a marriage involved, so close I could almost reach out and touch it.\n\n\"Oh my God, you're sooo deep inside me right now!\"\n\nDiana said it, and Joe's cock was doing it, and I believed every word of it because he's big. What I almost couldn't believe was that it was happening \u2014 a crazy high drunken woman, fucking a big cock just a few feet away from me.\n\n\"Jesus,\" Amber said, her voice still close behind me. \"This is fuckin' hot. We doin' this?\"\n\nI knew it was David she was asking, not me, so I didn't look at her; I still didn't know what to say to her. In all our years knowing each other we'd never been in anything even remotely like this.\n\nDavid's answer must have been yes, or at least a nod in the affirmative, because Amber once again teased me to take off my dress, this time with a hand inside the back of it and a mischievous glint in her eye when I looked at her. She shimmied out of her own little dress, there on the bed, showing off a lacy black bra and panties that were even prettier than the black ones that Diana had worn.\n\nApparently I needed a push, so she stood on her knees on the bed, right behind me, and she eased my dress off my shoulders, slipping it down my arms.\n\n\"Damn, Marissa,\" she said to me, her eyes on my bright red lace bra. \"That's the hottest thing ever.\" She peeked down inside my dress, now bunched around my waist. \"Wow, matching panties, too. Damn. You win the prize, girl. I'm proud of you. Stand up and show me.\"\n\nAnd so I did. If I'd had to do the unzipping, and if it was a full unveiling, I maybe wouldn't have done it, but my pink bridesmaid's dress was already open, down off the top of me, bunched at my waist, so getting it off the rest of me was a quick move, and I was back to my sitting position again without much commotion. It felt sinful sitting there in such sexy undies, but surprisingly, it hit me as a thrill rather than an embarrassment. Jack put his warm hand on my back again, where it had been; I'm glad he kissed me again, so I didn't have to see whether the others were looking at me.\n\n\"Damn, Marissa!\" Amber said. \"You look amazing!\"\n\n\"Now that's sexy,\" Diana said, her drunk eyes smiling at me. It surprised me that she'd have the wherewithal to say something to me when she was drunkenly fucking her husband's best friend. \n\nBrandon and Joe had their eyes on my red lacy things, both of them looking almost surprised and speechless. It struck me as odd seeing as how I didn't know them well; they couldn't have known how out of character this all was for me. It did give me a wild thrill though, having their lusty eyes on me, looking at me like I was something special, so I kissed Jack again, and my hands started opening his fancy white shirt.\n\nEverything happened so quickly, me working his shirt, Jack working his pants. The excitement of it stopped me from stopping him, then his cock was there, so hard and big. Really really hard and big, and out, in the midst of a party, like it was no big deal, and of course it was there for me. So I took it, like a wanton girl, and I leaned my tingling self down and I took it into my mouth. Just like that I was a sexy party girl, a new and stunning thing. A wonderful thing, I must say, the whole of the room and this part of the night feeling like a happy dream. It was then, with my mouth getting hungrier and hungrier on Jack's cock, when I realized how very high I was. How very horny I was. How very carefree I felt. I listened to Diana letting herself go, her sexy noises getting louder, her fucking becoming wild and unrestrained, and my lust reared up in me as a powerful desire, to be fucked, by Jack, right there in that brightly lit party of a room.",
        "I'll admit to you now that I'm a porn watcher when I'm at home alone, and I'm a dildo user and a vibrator enthusiast. I'm not a priss or a prude, I'm just lacking in self confidence when it comes to myself and my body. I've never been on stage, never performed, never made music or sang, nothing more than the Happy Birthday song and other things like that. I've been fucked, quite a few times, but I've never done the fucking, if you know what I mean. So when I found myself giving Jack a blowjob, in the midst of others, it felt wrong and right, terrifying and exciting; a wonderful mixed up jumble of confusion. \n\nOn the other bed, Brandon had helped Brit out of her dress and her underwear. Somehow her full nudity seemed an escalation, even beyond Diana's boisterous fucking. Diana's panties though, which had been pushed aside by Joe's big cock, weren't a part of things for long. Seeing her husband with naked Brit seemed to fuel her sexual exuberance, her cowgirl-stye riding now thudingly hard, her big orgasm leading to her own sudden full nudity and a frantic switch to doggy style. Joe's big cock, fucking her hard from behind, made her cry out in bliss, just like the porn girls do.\n\nIt was as wild a scene over there as I'd ever imagined, just six feet away from us, and it infected my brain in a powerful, mind altering way. Jack was already laying back, his shirt open, his pants open and pushed down, his cock upright like a fleshy post, held that way by my hand at the base of it. He was fuckable the way men in my dreams sometimes are, so I mounted him and I started fucking him, his hands on my red lace tits, his cock filling me fuller than I'd ever been.\n\nAmber had David the same way, almost next to me. My eyes met hers, both of us with our pussies so full, both of us with looks of wonder and disbelief on our faces. Amber was braver than me, her panties gone, and as she fucked David I saw, from the corner of my eye, her hands reaching behind herself, unhooking her bra. I don't know why nudity seemed so much beyond the fucking. I suppose a corner of my mind was on the hotel room's door, unlocked, maybe, ready for anyone to open and see us there. Being nude in the brightly lit room seemed much too daring.\n\nAnd yet, Jack's cock, and his very aura, was lifting me toward an orgasm! A real, bubbling, glowing one that I could sense was going to give me a melt-down. I didn't want that, not there amongst everyone. Really, I didn't. But I wonder if it was the very fact that I was there that was making it grow, a blossoming orgasm that was beginning to lift me so far into the beyond.\n\nI came so hard, I could almost call it a blackout, or something even dreamily deeper. Yes, it was dreamily deeper, there was no blackout; I was there even though I was lost in it. Good God was it an orgasm! One that sent my entire body into spasms. My legs, especially, were trembling as never before. Was it simply Jack's wonderful cock, a bigger one than I was used to, or was it group sex and all it's magic; its sights, its sounds, its scents? The room seemed so much smaller than when we'd arrived, and so much warmer. So very, very warm, and yet I couldn't stop trembling.\n\n\"God, you're amazing,\" Jack said, his fiery, lusty eyes watching every detail of my spastic cumming. \"Take this off. I want your tits.\"\n\nIn my twitching, trembling daze, I let him unhook my bra, and I was nearly nude in the bright light of the room, freshly orgasmed, my skin flushed with reddening pink. I wondered if Amber would say something to me but she was fucking David furiously, herself rising to an orgasm that sounded like it might explode. It was then that I realized that everyone was occupied, doing their own thing, everyone fucking. I don't know if I've ever been so thrilled as I was in that moment; me, just plain Marissa, in the middle of a group sex orgy, my body still electric from the best orgasm of my life.\n\nThe feeling of Jack's cock inside me was so wonderful, but I wanted him in my mouth again, so I climbed off of him and took him, just like that, his hot, pussy-juicy cock thrusting into my mouth this time. Jack was feeling his oats and I wanted him to, wanted him to fuck my mouth, wanted him to take me, any way that he wished.\n\nI myself wished that he'd grab my by the hips and ram it into me doggy style. I was that far gone, that ready for anything. At least I thought I was, but the shock of something new sent tingling goosebumps all through me. David's hands had found my legs. I was on my knees, bent way down, sucking Jack's big cock, and I hadn't realized how close I was to David, him lying on his back as Amber rode him hard to her ever closer orgasm. I suppose in the back of my mind I did know David was there, and I did know my knees were right next to his head, and I suppose I did know how easy it would be to lift a leg over him and give his mouth my pussy, still halfway exposed under my tightly twisted red lace panties. His hands guided me there, the feeling of his mouth on my hot, electrified clit making me moan so loudly onto Jack's cock, just as Amber's big orgasm melted her down.\n\nIt was seemingly just moments later when David was behind me, my red panties down around my knees, his hard cock taking me doggy style. As he fucked me, so nicely, I watched Jack fuck Amber the same way, doggy style, the hard nipples on her biggest-in-the-room tits being tickled by the hotel's shiny bedspread. I couldn't help but marvel at the way she was giving herself to Jack, her doggy-style body spread wider than I was able to do with my panties at my knees, her ass turned upward in a deeper arched way than I think I was able to do. She looked the picture of fuckable, like a porn girl, and Jack, fully stripped of his clothes now, looked like the perfect stud as he fucked her. My goodness that man has a nice ass!\n\nDiana and Brit were double-teaming Joe, so Brandon made the first cross-over, climbing onto our bed wearing just his open shirt, stuffing his big cock into Amber's moaning mouth. A minute later he wanted me, shifting on his knees to give me his cock to fill my mouth with, the first time I'd ever had two men inside me at once. I came that way, soon after, my ripping orgasm another thing of wonder.\n\nI had to take stock of things at that point, as much as I could with my head spinning in such a euphoric way. I mean, I'm not a slutty girl, and these were slutty circumstances. Off the charts slutty, if you want to think of it that way. My grandmother would have said 'I told you so', blaming it all on the sexy little bridesmaid dresses. But isn't sex supposed to be fun? And who makes the rules, anyway. I've watched plenty of porn, and group sex is never anything less than fun for those involved. I'd always thought it would be one of those experiences you'd have and store away in the back of your mind, something to think about and smile, an exciting memory for when you're old. And here I was, in the middle of it, in the middle of a memory. I suddenly wanted to make more of it, to live it to the fullest, to make it a memory I would never, ever, forget. I flung off my panties and tossed them to Brandon, and I said to him, \"Wanna fuck me?\" \n\nHis type of man is another fantasy of mine, if I'm being honest. The big man, with huge shoulders and powerful muscles, with hair all over him and just one thing on his strong-man mind.\n\nHe smiled, looked at the red panties in his hand, threw them over onto the other bed, hitting Joe with them. \"Hey, check it out,\" he said to Joe. I don't know why it shocked me so, but it did, seeing my underwear played with like that. Joe was plenty busy, with Brit riding his cock and Diana riding his face, yet he took the time to look at my panties closely, even looking at the little label inside.\n\n\"What are you, a pantie sniffer?\" Diana asked him.\n\nWith a funny look on his face, Joe acted like the panties were unusual in some way. \"No, it's just...these are...really nice, don't you think?\"\n\n\"Let me see 'em,\" Diana said, grabbing them from Joe's hand. \"Maybe I should get some just like 'em if you guys are so into this kinda thing.\" She put her pussy against Joe's mouth again while she examined them, moaning as she tried to read the tiny label. \"Shit, they're French,\" she said. \"This is hot stuff, Marissa. Where'd you get 'em?\"\n\n\"Oh...I found them at...a little place somewhere,\" I said. It seemed so odd to be having a conversation when we were all in the middle of orgy sex, Brandon roughly pulling me into the position he wanted, him standing now, his shirt tossed aside, leaving him fully naked. He had me on my back, my ass at the edge of the bed, his strong arms lifting my legs up against his hairy chest. His fat cock found my pussy, his thrusting hips shoving it into me. The conversation was over and done, Diana huffing out cries as Joe ate her face-riding pussy, me yelping much too loud as Brandon's fucking was instantly hard and rough. My tit's flailed from it, my hands wanting to grasp them, to stop the wild movement that I'd never experienced, but I was so overcome with euphoria all I could do was grasp the bedspread with my clutching hands and hold on for dear life.\n\n\"Fuck yeah! \" Brandon bellowed. I lifted my head and looked at him, his very being seemingly on fire with rough sexual energy, then I let my head drop to the gyrating mattress again, my eyes on the white ceiling, and I and let him have his way with me, my grasping hands holding on, my mouth open to let forth the gasps and the short, sharp screams that emanated from somewhere deep within me. I'd never been fucked like this, and oh my God was it something!\n\nI think Diana was jealous of it, drunkenly mumbling something about him never fucking her that way, but my mind was rocketing off to somewhere wonderful and I'm not sure exactly what she was going on about. The next thing I knew she was on our bed, giving herself doggy style, ass up and shoulders down, to David, and also to Jack.\n\nAmber was the next to cross over, leaving us so she could team up with Brit on Joe, over on the other bed. I was only barely aware of it because my first rough-sex orgasm was rising up inside me, a thing of extraordinary explosiveness, my cumming seemingly endless, my screams a pointless blather of No!...No! and Yes!...Yes! Of course everything I uttered meant yes at that point, because oh my God was it good!\n\nBrandon left me there, limp and mumbling, unable to gather my thoughts. He was gone, back to the other bed, his cock pummeling Amber's pussy, her happy screams mixing with my euphoric confusion. Jack was with me again, opening my legs the way Brandon had, but this new bliss was softer, gentler, Jack's mouth on my pussy, making me wonderfully crazy. I held his head with my hands, holding him there, listening to the wild sex noises of the others, hoping this would never, ever end.\n\n-\n\nJack and I have become a couple. Living in the same small apartment building makes it almost like living together, but with more privacy when we want it, which isn't too often.\n\nIt was odd at first, our becoming a couple, seeing as how the wedding orgy was still fresh in our minds: strong memories of loosely swinging sex, Jack's brother Joe and Jack's good friend Brandon both fucking me so much, so hard, so wildly. David too, but he's not a close person in Jack's life the way Joe and Brandon are.\n\nYes, it's a strange way to start a relationship with a guy, but somehow it doesn't seem to matter and in just a short time we seem to have fallen in love. The real, butterflies-in-the-stomach kind of love.\n\nI haven't seen Brandon yet, since the wedding, but seeing Joe now gives me butterflies, too. I mean, how can I not think of his hard cock, and the way he fucked me with such uninhibited joy and strength. How can I not think of when he and Jack both took me, the handsome brothers inside both ends of me, a 'spit roast', I think I've heard it called. It happened on the hotel room's carpeted floor, between the two beds, just a few moments after Joe had fucked me right off the edge of one of them. I remember how cozy it seemed down there, my naughty brothers threesome tucked away below the sexy moans and orgasmic cries of the others. Now, whenever I see Joe, how can I not wonder if something similar might happen again someday.\n\nThe red lace bra and panties have been hidden away in the bottom of my underwear drawer since the wedding. I don't know why but I think of them as lucky, special in some way, because I wore them the night I fell for Jack, but they also stir up some guilty feelings in me, because I stole them. The other day, when I had some brand new lingerie on, Jack asked me, \"How come you don't wear the red ones anymore?\"\n\nHe and I had only been together for a few weeks, but already I couldn't hide me guilt, couldn't lie to him. So I confessed my thievery, how I'd found the red lace bra and panties down in the laundry room, telling him I was pretty sure they must have belonged to our nice neighbor Jill.\n\nI thought maybe he'd be surprised that Jill would own such things, but no, he was very calm and nice about it, sensing how guilty I felt about the whole thing.\n\n\"If you really feel that bad about it, why don't you buy her some new ones,\" he said. \"You could do it anonymously.\"\n\nIt struck me as a wonderful idea, one I should have thought of myself. I scoured the internet and found something very similar, from the same maker. As far as I could tell they were only available to order direct from France, and the $800 price for the bra and pantie set astonished me. As much as I wanted to, there was no way I could afford to buy them for Jill. When I told Jack about it, he said he wanted to pay for them.\n\n\"Why should you do that?\" I said. \"I'm the one who stole them.\"\n\n\"Because they're lucky,\" he said. \"They brought us together. I think they're...sort of magic.\"\n\n\u2014\n\nEpilogue\n\nMarissa and Jack weren't home when the delivery man knocked on Jill's door. Two weeks had passed since Marissa had placed the order, the package arriving battered but not broken. \"For me?\" Jill said, looking at it, her eyes on the customs label, the return address a lovely sounding street in Paris. \"I didn't order anything.\"\n\n\"It's got your name and address on it,\" the delivery man said. \"I'm just dropping it off. Have a nice evening.\"\n\nIn the quiet of her kitchen, Jill cautiously cut away the tape, keeping the shipping label intact so she'd know where it came from. Inside was a fancy box, dented a bit but lovely, it's color a matte gray, tied with black string. Inside the box, periwinkle blue tissue paper wrapped the delicate lace bra and panties, the soft, bright red color of the exquisite lace bringing a look of wonder to Jill's happy face. \"Oh my God,\" she whispered.\n\nJill had questions, but she knew they might never be answered. She went to her bedroom, took off her clothes, and tried on the beautiful new things while the Paris air was still a part of them. \"They fit,\" she said to one of her three cats. \"Oh my God, they fit good! Jesus, have you ever seen your old mom's tits look this good? Fffuuck.\"\n\nJill kept them on for a while, wearing them around the apartment as casually as she'd wear her sweats, even there in the living room, with her lace curtained windows giving a filtered view of her lingerie-clad sexiness to anyone on the street who cared to look. Sitting on the couch with another one of her cats, memories came flooding back to her, of wearing her lost red lace in Jack's sweltering hot apartment, the night of the city-wide blackout, the night he and his handsome brother Joe double teamed her and double penetrated her, sweaty anal sex at its off-the-charts best.\n\nJack was off limits now, she knew, he and the nice girl Marissa from upstairs now a happy seeming couple, but Joe's phone number was safely filed away on Jill's phone. \"God, I'm getting wet, you guys,\" she said to the cats. \"Why does French lace make me so horny?\" She thought for a moment and said, \"I hate to waste this on a dildo, you know what I mean? Think Jack's cute brother Joe is...maybe...home tonight?\"\n\nJill's cats didn't know, didn't answer her. A few minutes later, scrolling through the contacts on her phone, still relaxedly wearing nothing but the little pieces of red lace, she mustered her nerve and called young Joe. He was indeed hanging at home, like she'd hoped, but a few friends were with him.\n\n\"Oh, you're busy then,\" Jill said.\n\n\"No, it's just a few of us guys. We're just having a few beers, smokin' a spliff. You should come over.\"\n\n\"I should?\" Jill looked down at herself, so sexy and nearly nude in nothing but the red, its aura filtering into her brain, as if she was getting high from Joe's weed smoke, right through the phone.\n\nFifteen minutes later, her cats were alone again, the apartment quiet. One of them, a sleek, nearly black Siamese name Rune, climbed into the empty box that had come all the way from France. He circled twice, settled himself comfortably upon the periwinkle blue tissue paper and closed his eyes, ready for a dream."
    ],
    "authorname": "riverboy",
    "tags": [
        "bacheror party",
        "brothers",
        "dp",
        "gangbang",
        "older woman",
        "orgy",
        "phish",
        "threeway",
        "wedding",
        "stripping"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/red-lace-trilogy"
}
{
    "title": "Incubus Pupa Ch. 08",
    "pages": [
        "Disclaimer: All character engaging in sexual activity in this work of fiction are 18 years of age or older.\n\n**************************\n\nDriving to Sandy's house to pick her up for our date the following Sunday afternoon, I rode a rollercoaster of emotion. On the one hand, I was giddy about the addition of such a beautiful and intelligent woman to my harem, while simultaneously finding what looked to be an ideal home for my girls and me. \n\nIanthe was a delight, too, and I found myself enjoying telling her what to do more than I imagined I would. Whatever fallout she was dealing with at work from her subordinate's fuckup had kept her engaged since I'd bonded her a week prior, but she texted constantly. The good girl inside her needed my comfort and guidance, reaching out to reaffirm my tender regard. I responded quickly every time, knowing it was critical for me to solidify the still-fragile roles I'd established for us. \n\nShe had ducked out of a few of her team meetings when things went badly, contacting me by phone. As always, I gave her the peace she sought. It was enough to convey my approval of the harsh taskmistress work persona I'd seen her bring out before, commanding her to use it as necessary -- though not capriciously -- to get the job done correctly. I intuited that much of her suffering was caused by the regret of the sweet girl inside her. The frosty, calculating businesswoman outside had to act harshly toward others, and it didn't sit well with who she really was. Assuming the burden of guilt for her had helped Ianthe find a deal of tranquility, which made me genuinely happy to see. \n\nUnsurprisingly, given the nature of our bond, my orders carried overtones of sexuality for Ianthe, leaving her -- by her admission -- needy and pent up. One time she was so frustrated and distressed that I had to talk her through an intense masturbation session in the ladies' room to calm her down. Her relief finally arrived when I commanded her to cum. She had, violently. I could hear the sound of her gushing into the toilet over the phone. It gave me no end of satisfaction that she could squirt for me; that I could reach her on such a level sent my ego into the stratosphere. Afterward, I heard the amazement in her tone as she related feeling vaguely like I was actually inside of her. It intrigued me with the prospect of an added dimension to phone sex with my bonded girls. \n\nI suspected that Ianthe's team should have been thanking me for a much more mellow boss riding herd on them that day.\n\nOn the other hand, I had told my parents about my plans to move out and delay my college entrance, which went about as well as I expected. As I'd imagined, it was a whole lot of disappointed shaking heads, \"you need to think about your future\", \"we taught you better than this\", and \"you're not the son we raised\". They threatened to pull my college fund if I didn't matriculate next fall. \n\nI'd always had a good relationship with my parents, but I felt some rebellious resentment at how strongly they'd reacted to my decision. I knew them to be pretty strait-laced people, but you'd think I'd committed murder considering the heaping dose of scorn they gave me. I admitted that I could see it from their side; my decisions probably looked like I was on drugs. They'd asked as much, in fact, but I knew they didn't believe it -- they'd know it if I were doing that under their roof. \n\nIn the end, what hurt the most wasn't their anger, but the look of deep disappointment on their faces. The little sparkle in their eyes that told me they were proud of me. Proud of the man I was becoming. That light had gone dim.\n\nBut what choice did I have? This was my life now, and nothing I could do would change that. I wasn't going to run around hiding it all forever -- except maybe the part about being a demon with mind control powers who derived sustenance from sex. That part I would keep to me and my girls. \n\nAt least I'd ripped the band-aid off. The huffing and puffing would stop eventually, and there was nothing they could do to stop me in any event.\n\nWhen I pulled up to Sandy's house in my trusty Honda, she was sitting on the porch waiting for me.\n\nI wolf-whistled through the open window. \"Heya, Sweetheart,\" I shouted in my best creeper voice. \"You, uh...need a ride somewhere?\"\n\nShe looked up at me and beamed.\n\n\"Gee, I dunno Mister, I'm not supposed to take rides from strangers.\" \n\nWearing a t-shirt and skin-tight jeans with a pair of wedge sandals, she jogged over to the car. The word \"TINY\" emblazoned the white cotton tee across her mountainous tits in large black letters. I stared openly at them bouncing all over the place. \n\nShe opened the door and hopped in. My mouth watered at the sight of the letters on her shirt distorted by the intense gravity of her twin celestial bodies. It might have just been how tight her shirt was, or perhaps she wore a new bra, but damn, did they look big. Bigger than I remembered, that was for sure. \n\nSandy fastened her seatbelt, fussing with the shoulder strap endlessly to get it to lay comfortably between her breasts. My cock stirred as I watched her move it this way and that, lifting her tits and shifting her bra through her t-shirt to get it all just right. It seemed to take much longer than it needed to for her to get situated. The sight of the belt now nestled deep within her cleavage, left boob spilling over its top edge had me hungry for her already. \n\nPicking up where we left off, I replied, \"Ohh, but I can promise you you've never been for a ride like this. It's a magic ride.\" Holy shit, that was cheesy.\n\nSandy laughed at my idiocy as I put the car in gear and started off, trying to focus on the road. \n\nShe gave an exasperated groan. \"Ugghhhh, finally! I feel like I've been waiting forever for our date!\"\n\nI nodded. \"I've been looking forward-\"\n\nSandy cut me off. \"What did you say? It's hard to hear you when big Adam talks over you.\"\n\nI glanced over at her to find her staring at my crotch. Ah, yes, this again.\n\nSandy continued in her sweet voice. \"Yeah, I know, I heard it too.\" Her eyes rolled. \"He says some dumb things sometimes, but he does take good care of you...\" she bent to whisper conspiratorially with my crotch, \"so we need to keep him around.\"\n\nSmirking, I glanced over to watch her continue her conversation with 'little Adam'.\n\n\"But Adam, aren't you even going to come say hi to me? I don't want to talk to you through the door. C'mon, I got dressed up for you and everything,\" she pleaded, \"I saw this shirt and just knew you'd love it. Come see!\"\n\nAt this point, I was half-hard, but she knew talking to my cock always got me going, and this time was no exception as it inched toward the edge of my shorts. \n\n\"Hmm, I think I know what the problem is.\" She grinned devilishly.\n\n\"You don't want to see meee.\" She drew out the word, \"Uh-huh. You'd rather see my girls, wouldn't you?\" Sandy said knowingly, unfastening her belt and reaching beneath her t-shirt to unclasp her bra. She did that magic little dance that women do, and it emerged from under her shirt a moment later, the latter never having been removed. I shook my head in amazement. Now braless, her nipples and areola were showing through the thin white tee.\n\nLeaning over toward my lap, she pulled her arms behind her and started twisting her torso, setting her pendulous boobs swaying back and forth, over and over.\n\n\"I'm right, aren't I? I always knew you like them better than me. Well, fine, maybe a little preview. Here they are then.\" Sandy said haltingly, the weight of the shifting mass on her chest making a steady voice impossible. \n\nHoly fuck, her tits were insane. She must have grown, because they looked to be at least a cup size bigger. I nearly crashed the car into someone making an oncoming left turn across my lane of traffic as I focused on the way they hung in her t-shirt. Little ridges stretched her tee from under her armpits to the slopes of her boobs, making them look as if they weighed ten pounds each. More creases connected the pair in front. Overall, it looked like the thin little shirt was the only thing keeping her tits from bursting from her chest. And barely, at that. \n\nIt was so undeniably erotic that Sandy got her wish within moments as my cock grew to its full, dominant size. I'd chosen nylon running shorts and boxers for our date, knowing full well after the last couple weeks of impromptu encounters with the blond vixen -- in the back of my car, the school library, or on her Mom's fine living room couches -- how much she liked to access my equipment at a moment's notice. The vision of Sandy's bulging tits had the turgid head of my monster crawling down my leg, finally emerging into view. As it rose up and jutted out lewdly, the gossamer material of my running shorts slid back toward my root, exposing even more of it.\n\nSandy gave an excited little clap, bouncing even more in her seat. \n\n\"There he is! There's my big, strong man.\" She cooed, leaning over to bring her face in closer. \"Oh, my! It looks like someone's put on a little weight!\" she stroked it lovingly, \"Must be all that pussy you've been eating lately.\" She mused, \"I've heard it can be very...fattening. Eh, Adam? Well, not to worry, you've got it all in the right places. I'm sure you'll still have all the girls lining up to get a piece of you.\"\n\nI snuck amused glances at her as she took me in her hand, rubbing the entire length of my rock-hard cock with her face, nuzzling it from either side like a needy cat. It was her thing. She just loved my dick. I couldn't explain it. It wasn't even that she loved being fucked by it, or swallowing it to give me head -- though she did very much love both of those things -- this was something different. \n\nShe just had this compulsive need to hold it. To feel it against her skin. Get as intimate with it as she possibly could, especially near her face. One of her favorite things was to lay her head on my naked lap and fall asleep atop my spongy limp python. It was kind of endearing. I had to be distracted to pull that one off though -- with Sandy's beautiful lips so close to her prize, it usually didn't stay limp for very long.\n\n\"Are you going to give me a treat?\" she fattened her lower lip, using a pouting voice to say. \"Pleeeeese? I'll be good. I promise.\"\n\nI stepped in. \"Babe, you know you can't swallow it all. I don't want to get it all over the car.\"\n\nFinally, she looked up at me, addressing me instead of 'mini me' for the first time since getting in the car. \"Oh, c'mon! I know I can do it! I'm so close! Last time I only spilled a little.\" She protested.\n\n\"Sweetheart, I know you are,\" I soothed, \"and I am one-hundred-percent sure that you'll be able to take my full load eventually, but let's just...take it slow, okay? The time you're talking about wasn't even close to my first shot, if you recall...\"\n\nShe deflated, looking like a toddler that had been told \"no\" at the gumball machine. \n\n\"Gah, you make it so hard to say no to you, you sexy little nymph. Tell you what...how 'bout I turn on the faucet. You can suck on it some.\" I offered in consolation.\n\n\"Yay!\" Sandy cheered, brightening. Diving back in, she opened as wide as she could -- which was just barely wide enough -- and accepted my bloated head into her mouth. I removed the mental block that I had firmly in place now to cut off my flow of pre-cum, letting it trickle out. I had explained about being an Incubus and all that it entailed after she found out in the band room, so she never questioned the fact that I could do things other guys couldn't. \n\nWhat she was doing felt great, but wasn't exactly fellatio. She wasn't working me with the intent to make me cum, she just held me in her mouth and suckled from me. Though with the way she used her tongue to encourage the sweet liquid up my urethra with little licking motions, it was certainly stimulating enough. A moan of pleasure issued from her, and I detected a hint of \"Eau de Sandy\" wafting to me on the air currents in the confined space of the car.\n\nWe drove the rest of the way like that, her suckling at me, happily drinking the steady drizzle of pre-cum. She had told me before that it tasted like \"the sexiest dreams I've ever had\", which didn't make sense to me. How could something taste like dreams? Regardless, she couldn't seem to get enough of my syrup, so I wasn't about to complain. I relaxed into the seat as I drove, cool as a cucumber, indulging in the pleasant sensation of her warm, wet mouth.\n\nSoon enough, we arrived. I pulled into a parking space, noticing only one other car in the lot. Good. The lush, sprawling lawns of the park provided a gorgeous backdrop for the autumnal oranges, reds, and yellows splashed across the landscape. A paint-faded rowboat was moored to a rickety old pier clutching at the clear, placid waters of the lake just down over the hill within easy walking distance of the parking lot.\n\nNoticing the car had stopped, she pulled off me with a little 'pop', giving my tip a little lick to get the last of the pre-cum smeared on my skin. I shut down the water-works once more, adjusting myself and focusing on what I needed to do to get my erection to fade. \n\nI was familiar with the park, having been there several times in summers past for day camps, so I knew a great, secluded spot. Grabbing the cooler out of the trunk, I started to roll it down the hill on its wheels, looking back to Sandy as if to say, \"you coming?\"\n\nRunning to catch up to me, she grabbed my arm and hugged it, her soft breasts bracketing me. I swore I would never tire of that sensation if I lived to be a million.\n\n\"So, what's up? I thought we were going fishing?\" She inquired disinterestedly. \n\nI nodded. \"Yeah, but I figured it'd be more fun to have a little picnic. Hope you saved your appetite. I got a decent little spread in here: spinach salad with feta cheese, fried chicken, coleslaw, cantaloupe. All kinds of goodies for an afternoon with my baby. Oh, and I nabbed a bottle of my parents' wine too.\" I looked at her speculatively, \"Why? Did you want to go fishing?\"\n\n\"No, this is much better. Sorry though,\" she said sheepishly, \"I ate already, but I could nibble. You know I have an appetite; I feel like I'm always starving lately.\"\n\nNoticing that she left the bra in the car as she bounced along, I was pretty sure I knew exactly where the extra calories were going. But, thinking about it for a second, I realized that she was wrong -- I didn't know that she had an appetite. That was probably one of those things that good boyfriends were supposed to know. I needed to get better at this.\n\n\"No need to be sorry, Baby. It's my fault for not letting you know that I had changed my mind. But speaking of eating...I've been meaning to ask; have you been getting a little bigger? Up top, I mean.\" I nodded at her bust. \"Maybe it's just the shirt, but dayum, girl. You look...wow.\"\n\n\"You noticed, huh?\" She said with a hint of embarrassment, which I didn't understand. \"I almost wish it were the shirt, but no, they've definitely grown. I had to pick up some new bras yesterday 'cause most of my old double-Ds don't fit anymore.\" She looked down in inspection, scrunching her brows. \"It's just weird. I thought my girls were all done growing by the summer after tenth grade. I've gained a teeny bit of weight lately, but not enough to explain all this.\" She plumped them with her hands, setting off more hypnotic jiggling.\n\n\"Wait a minute... You're upset about this?\" I asked incredulously, thinking about how many women would give anything to be blessed with Sandy's endowment.\n\n\"It's not like that. I mean, I know you like my boobs, but I was a little worried you might think they're too big now. Don't most guys think double-Ds are ideal? If this keeps up, soon enough I'll have massive, disgusting cow tits. Ugh.\n\n\"But look, if you don't like them, I'll try really hard to get back to the way I was. I can eat better and lose that weight. If that's what you want.\" She looked deeply troubled. \n\nI was stunned. I'd never seen her like this. Hell, I didn't think she had it in her to be this insecure. But it only made me care for her more than I already did. I needed to set her straight quickly.\n\nI laughed out loud at the absurd notion. \"Sandy, relax! You are perfect, Babe!\" I said, articulating the words, \"and you look more beautiful than ever!\n\n\"Hell, you know me, Baby...I'm a boob man through and through. I'll love 'em no matter how big they get.\n\n\"And hey...\" I stopped walking and put the cooler down, reaching up to grab her hands, already suspicious that it was my power that was changing her, based on what Elias had hinted at. \"...please do not feel like you have to lose weight. Your body is perfect. Seriously. You are so sexy I don't even have words for it. I'll show you just how much I mean that before we leave the park today.\" My words were filled with implied promise.\n\n\"But this is good. This is what I wanted to do today; learn about each other.\" I said, using a back-and-forth hand motion between us, \"I know the cheerleader Sandy from school, but I want to get to know this Sandy.\" I tapped her breastbone. \"I want us to be about more than just fantastic sex. Hopefully, you do too.\"\n\n\"You're sweet.\" She giggled. \"Of course, I want that, silly. I'm going to be spending my life with you! I want to know everything about you.\"\n\nWe walked awhile further. What she said had me thinking about the permanence of this whole thing, which hadn't sunk in yet, and I was quiet as I noodled over it until we finally reached the spot I had in mind. It had a nice view of the lake, but was screened from the parking lot by a copse of trees. The shoreline of the lake cut closer to the forest on the opposite side, so it was nice and secluded. \n\nIt was one of those glorious early fall days when the humidity is low, but the warm rays of the sun still made the air feel hot. Unpacking the cooler, I laid out the blanket I brought along with several towels (it was always good to be prepared). I figured we could sit and enjoy the fine day and good company before eating. Maybe let Sandy work up a bit of an appetite.\n\nAs I worked, I caught her scanning the vicinity, presumably for other park-goers. She apparently found none.\n\n\"Mmm, looks like you picked the perfect spot -- I don't see anyone around. You don't mind if I get a little tan, do you?\"\n\n\"Hell no, I don't! Why do you think I brought this?\" I shook a little bottle of tanning oil I had brought in the hopes that we might have this opportunity.\n\nSandy giggled, clapping while she bounced in place before excitedly stripping down, throwing her clothes in a pile on the grass. Thankfully, she had removed her shirt first, so I had the opportunity to ogle her jiggling, swaying flesh as she shimmied out of the remaining articles of clothing. \n\nFinally naked, she walked up to me and closed my open mouth with a delicate finger, eyes full of fire. She gave me a peck on the cheek and plucked the bottle from my frozen hand, saying, \"Your turn.\"\n\nMy distraction and haste to get nude made me stumble out of my running shorts, falling over to peals of laughter from Sandy. I got up, preparing to have to salvage my dignity from her teasing, but found only a warm smile on her face. It occurred to me that she had changed. Or maybe went back to who she already was... Either way, there was no sign of that tittering silly cheerleader that liked to talk endlessly about what so-and-so thought about what's-her-face.\n\n\"Do me first?\" she asked sweetly, holding the bottle out.\n\n\"Ab-so-lute-ly.\" I took the bottle and poured a healthy amount out, rubbing it between my palms to warm it while she pulled her ponytail up into a bun and lay face down on the blanket.",
        "I straddled her thighs, unable to resist giving her a quick peck on the back of the neck before smearing out the oil to lay down a base. She cooed at the feel of my lips and hands on her warm skin. \n\nStarting at the top, I set fingers to the spongy, bunched-up flesh between her upraised arms and her neck, working it in while my thumbs felt that downy bit of hair at the nape. Pulling downward with the heels of my hands, I worked her spinal column, rubbing outward to the edge of her back over her deltoids and lats. Cheerleading had given her the perfect amount of definition. The feel of her silky soft skin was indescribable. \n\n\"Oh...ohhh....ooooo.\" Sandy rewarded me with a steady stream of appreciative moans as I labored. Pressing the sides of my thumbs into the skin next to her spine, I rubbed circularly, inching my way down toward her peachy ass. \n\nI was pretty proud of my massage technique, having honed it for years helping Ella deal with muscle pain and backaches from growing. My desperate crush on her had led me to look for any way I could help her, especially if it involved touching her. It had paid off too, since it seemed to have comforted her. I wondered if she remembered those times. \n\nOf course, with Ella, it was never a nude massage, and my limp cock most certainly hadn't been nestled into the little pocket between her ass and thighs while I worked on her back. Working my way down to the base of Sandy's, I started to rub the upper slopes of her glutes. \n\n\"Mmmmmm. Baby, that feels sooooo good.\" She murmured.\n\nThe feel of her soft, springy butt cheeks was heaven under my touch. Enthralled, I watched as my hands made circular motions in her deep tissue, smushing her cheeks together from the sides then abruptly letting them go. Watching those globes of muscle and flesh quiver as they fell back into their resting position. I couldn't help momentarily interrupting the massage to grab chunks of her sweet ass with my whole hand. My cock started to swell, pushing into the fold between her legs as if it was being called home for dinner. \n\n\"Ooooohhhhhhhhhh.\" Sandy's moaning was getting louder and more suggestive, and I could feel her spread her legs slightly, inviting my invader onward toward its reward. I wanted to enjoy our massage though, so I pulled my thick member up above her butt, laying its mostly hard length along her crack. \n\nThe oil was nearly all absorbed, so I gave her a different lubricant, letting my pre-cum flow. The purple head of my dick rested just above her cheeks, dribbling it furiously over her lower back. I spread and massaged it into her skin as I subconsciously thrust my pipe between her firm buns. She flexed her butt over and over, squeezing my cock like it was being grabbed like a hot dog in a bun while her low groans sent lewd thrills dancing up my spine. \n\nSensing that she wanted me to fuck her already, I decided to slow down our pace. Today should be about her pleasure, not mine.\n\n\"Sandy.\" I tapped her shoulder.\n\n\"Mmm?\"\n\n\"Flip over for me? I want to do your front.\"\n\n\"Awww, but I was hoping the big guy would find somewhere warm to play for a while.\" She pouted.\n\n\"Later, Babe, right now I want to make you feel good.\"\n\n\"Mmmm, that would make me feel good.\" She begged. For a moment I thought about indulging her, but then I thought back to her discomfort with her newly enlarged bust, and wanted to make sure she knew that I loved them.\n\n\"I promise, Baby, we'll get to it soon. I just want to give your girls a little loving. They've been teasing me all day, and I want a chance to get to know them better.\"\n\nShe giggled and rolled over. \"Alright then.\"\n\nI poured out more oil and set my hands to the pillowy mounds to smear it around. They were so large now that part of their mass hung off the sides of her chest. \n\nStarting at her breastbone, I began to rub the oil in, keeping my hands to the periphery of her boobs. Suspended on her chest like little sacks of some divine fluid, they fell away from my touch like oppositely charged magnets. I played with them for long minutes, reveling in the superlative softness of her breast flesh as I oiled them. Both hands together could just barely cover a single breast, so I did one at a time to massage them properly, rubbing the outer line of her pink areola with my thumbs in a circular motion while my fingers kneaded. Her nipples were stiff little soldiers standing at attention in the crinkled fields of her areola. I worked my way inward, taking her hard nipples in between the knuckles of my index and middle fingers and rolling them lightly.\n\nSandy gasped, exhaling a tremulous breath. God, I loved how sensitive her tits were. I licked from the outer rim of her puffy areola toward the nipple, tonging up the sides of her nubs. \n\nMy massive shaft lay upon her belly, reaching from where I sat above her lap almost to the valley of her breasts. My pre continued to drool all over her stomach, flowing down to coat her mons. I could smell her arousal sharply in the air now. I felt her pelvis tilting reflexively beneath me, begging to be filled, and I knew I couldn't make her wait much longer. \n\nThen I had a thought, and I did something I hadn't done before; instead of stoking her arousal, I suppressed it. The way she was going, she was going to light off long before she got to enjoy what I had planned for her. I reached out to her avatar and pushed calming sensations into it, sending relaxation to cool the furnace of passion that I'd been encouraging with my touch. Her breathing slowed.\n\nFrom underneath her knees, I drew her legs up and got her comfortable by setting a small stack of towels under her head. \n\n\"Adam.\" She chuckled nervously, \"Are you doing what I think you're doing?\"\n\nI brought my face in close to her needy pussy, giving her a sloppy grin in reply. Her scent was overpowering me, and my inner beast was slobbering at the prospect of the delectable meal set to table before me. The backs of my hands circled caresses into the sensitive flesh of her inner thighs, drawing in closer to her swollen pink lips with each revolution. \n\nUp close, I observed how lovely her flower was. A small triangle of short golden hair topped the gentle swell of her mons, cleft at the lower end by large outer labia that shared their color with her skin. Her tiny rose-colored hood was svelte, almost flush with her skin. But my favorite parts of all were her pretty little inner lips. They peeked through the slit at good half-inch, looking as fluffy and soft as little clouds of medium-rare roast beef. I had to fight the urge to bend in and suck on them and nibble them with my lips. Push their masses back and forth with my tongue, playing with them. But I started slowly, placing tentative licks along her outer lips, eliciting a moan of pleasure from above.\n\nHaving moistened up the area, I withdrew to reach into her hot sheath with two fingers, bending them to rub the upper wall of her in a come-hither gesture. She mewled in pleasure, arching her pelvis into my hand, which made vulgar squelching noises from my motions. Pools of titmeat wobbled upon her slender chest. The gooey warmth of her on my fingers felt incredible, and I saw the trail of honey weeping from her, flowing down over her rosebud. I was becoming overwhelmed by the intoxicating aroma of her arousal.\n\nI wanted this one to be a big one, so I reached into my bag of tricks once more. \n\n\"Ooooo, Adam, what are you doing to me? I feel like I'm melting.\" She moaned.\n\nI brought my face near once more, setting my thumb upon her little hood and rubbing gently as I enacted my fantasy upon her little pink lips. I sucked them in between my lips, rubbing back and forth and tonguing the bit inside my mouth. Sandy squealed in ecstasy, grabbing the back of my head and mashing it into her cunt. I gave up my teasing, sticking my tongue inside her as far as I could and stroking with it, licking each wall inside her as deeply as I could.\n\n\"Oh, yes! Oh, Christ, I'm gonna... Oh God, I feel like.... Here it comes, here it comes, here it commmmmmmmmes. Ohhhhhhh Goooddddddd! Ahhhhhhhh!\" Sandy crushed my head into her with a strength I wouldn't have believed she had, cumming explosively into my mouth.\n\nI was awash in a deluge of Vitae like I'd never felt before. Sensing that she seemed to have plenty more still, I marveled at her. She was certainly the Energizer bunny of my small harem. All that Vitae felt sublimely fulfilling, elevating a tiny part of me to godliness. A moment later, she realized she still had a death grip on the back of my head.\n\n\"Holy shit...\" she panted. \"Adam! In all my life...I've...never...cum like that. What in God's name did you do to me?\"\n\n\"Heh, I worked on your other erogenous zones with my mind while I ate you out.\"\n\n\"Well, whatever it was...Oh. My. Gawdddd, was it fucking incredible,\" she cried, closing her eyes as she flopped back to the blanket, looking completely drained.\n\nI slapped myself, thinking about how I told her that I wanted today to be about connecting, and doing things as a couple that didn't involve sex, and we'd just gone straight to it like a couple of...well, yeah, I guess we were a couple of horny teenagers. But I'd have to make more of an effort in the future. \n\nRight now, though, I was as hard as a diamond and needed to get off pretty badly. I promised her a good hard dicking, and I meant to deliver, but I wanted to wait on that. \n\n\"Baby, you mind doing something for me now?\" I asked.\n\n\"You know I will.\"\n\nI climbed up on top of her torso, straddling her stomach and lining my dick up with her cleavage.\n\nShe grinned, guessing what I intended. \"Ooooo, we've never done this before.\"\n\n\"Right? I can't believe I've never taken these babies for a spin. Now that the ride looks even more comfortable, I find I can't resist.\" I wore a goofy grin, knowing exactly how stupid my analogies were most of the time.\n\nSandy giggled, grabbing the sides of her tits with her hands and enclosing my cock in a soft, warm, oily cage of boob meat. She lowered her chin to her breastbone and opened her mouth, hoping to catch a chance encounter with the head of my cock as it thrust through the heavenly sheath of her tits. I didn't fuck around with finesse, just sawed into those glorious mounds hard and fast. She looked up at me with a crooked smile, and wrinkled her nose cutely as she pressed even harder on her tits. The added friction was all I could take, and I started cresting the hill, knowing release was imminent. \n\n\"Open up baby,\" she did so, looking like a baby bird ready to receive a worm from its mother, \"let's see you take...this load!\" I hissed, shooting the first geyser of cum straight into her waiting mouth. She recoiled slightly from the unexpected force on the back of her throat, causing the second one to miss its mark, covering her nose and most of her right cheek.\n\n\"Unnghh, unnngghh, unnggghhhhh.\" I grunted. Rope after lengthy rope sprayed from my cock, most hitting home within her mouth. I saw her swallowing as quickly as she could, vainly trying to get it all down while keeping open for more. Ultimately, as I expected, the volume was simply too much for her, and she choked, obscenely spraying gobbets of my thick cum into the grass. \n\nWe both laughed at the absurdity of the situation. \"That one doesn't count!\" she protested with a smile, \"it's a lot harder to swallow with my mouth open like that.\"\n\nI kept chuckling. \"I know, Babe, I know. You'll get it.\"\n\nWe cleaned up with the towels I had wisely brought and laid down next to one another, enjoying the sun on our skin as we listened to the chirping birds and the cyclic droning of the crickets.\n\nI broke the companionable silence. \"Sorry about that.\"\n\nSandy turned to face me. \"About what?\"\n\n\"Oh, just that I said I wanted today to be about getting to know each other better in a way that doesn't involve sex, and the first thing I did is spend 45 minutes eating you out and cumming all over your face.\"\n\n\"Well, most of that was you putting oil on me, to be fair. And you'll hear no complaints here, so it's whatever as far as I'm concerned.\"\n\n\"I know, but I want to make more of an effort with you and my other girls. Go on dates, have fun together, talk to each other.\"\n\n\"Ugh, do you have to bring them up? We're having such a nice time here.\"\n\nSandy hadn't exactly been as keen on the whole sharing thing as Christine was when I'd told her. Maybe it was harsh to just expect her to deal with what some would consider to be infidelity, but after going through the process with Christine, I'd realized what she said when I asked her was correct; it wasn't really a choice at all. It was an ultimatum. One I knew they'd all accept in order to stay with me. Not gonna lie, that part didn't feel great, but I didn't find myself as bothered by it as I might have been three weeks ago. And hell, people had been giving significant others ultimatums forever.\n\nSandy saw the logic behind it, at least. She acknowledged that she wouldn't be able to satisfy my needs by herself, and accepted that I'd need to have more girls around to do so, but she felt her time with me would be threatened. The point was fair.\n\n\"You're right, you're right. It's just you and me here. Let's talk about us.\"\n\nShe smiled. \"It's ok. It's not as if it won't come up from time to time. I just...need some time to get used to it, I think. I told you I'm okay with it, and I am, but I just want to be with you all the time.\" She looked down. \"I'm afraid they'll take you away from me.\"\n\nI grabbed her hand, pushing understanding in my gaze, but saying nothing. I realized that this was something I needed to let her work out on her own. Anything I said was only going to make it seem as if I wasn't committed to my polygamy, or prolong her period of adjustment.\n\n\"Well, just because I'm letting you step out doesn't mean I don't expect the full girlfriend treatment, Mister.\" She elbowed me. \"You better remember that. That means dates, surprises, text messaging, vacations together, and sex.\" Each item was ticked off on a finger. \"Lots and lots of sex. And then more sex.\"\n\nShe gave me a sidelong glance. \"I don't know if I really want you to answer this, but is it still just this girl Christine that I need to worry about?\"\n\nI winced. No use hiding it.\n\n\"Actually...\"\n\n\"Oh, Jesus, really? Well, you sure do work fast.\"\n\n\"No, but Sandy, this is good news.\"\n\nShe arched a skeptical brow.\n\n\"She's, that is, Ianthe, is loaded. She lives in this huge place over in Kings Glen. Remember how I invited you to move in with Christine and me? Well, the plan has changed. I'll be moving in with Ianthe, and I'm hoping you'll join me. We'll have a huge house all to ourselves. Can you imagine?\" I said excitedly.\n\nHer eyes widened. \"Really? I mean, I'm not sure what to think. You know I want to be with you, but moving into another woman's house...\"\n\n\"Baby, I'm not really getting into the details here, but you'll just have to take my word for it -- the house will be mine. She and I...we have a very unique relationship.\"\n\n\"Well, I'm sure that's great for you and all, but what happens when we get in a fight and she throws me out?\" She started to tear up. \"I had you first.\" Sniff. \"Shouldn't that mean something?\" Sniffle.\n\nI reached over and hugged her, momentarily distracted by the cool feel of her cushiony breasts on my chest. \"Shhh, Sandy.\" I soothed, \"Listen. That will never happen. I promise. Ianthe listens to me, and you're mine. You'll always be mine. I'm never going to let you go, Honey.\"\n\nSettling down within my gentle embrace, Sandy clutched at me desperately. Her sniffling slowly abated. I decided I needed to steer the conversation in another direction.\n\n\"God, I'm still trying to get my head around how we're bound now.\" I said, \"It's like, we have this bond that's supposed to last forever, but I haven't even thought about the implications of that. Living together, forever...it's like marriage, really. But something about marriage seems to have so much more weight to it, even though it's probably the complete opposite.\n\n\"Does it bother you? Being bound to me?\" I asked nervously. \"Be honest. Does it bother you that you'll be with me for the rest of your life? That's a huge deal.\" I could sense that my inner Fae was quiet now, having been sated, so I was comforted to know there would be no manipulation of her desires for our heart to heart without my direct involvement.\n\nShe thought for a moment.\n\n\"No.\" She shook her head. \"Well, I suppose I never absorbed the fact that it meant we'd be together forever, but honestly, knowing that you'll never leave me makes me feel better, if anything. \n\n\"Though I do see what you mean about the marriage thing. I didn't see myself getting married until I was much older.\"\n\n\"Sandy, I-\"\n\n\"No, no, silly. I'm not upset. It's just... How can I explain this? It's sort of like I lost something I thought I wanted, but eventually, I recognized that it wasn't that important. And what I got in its place is. Though, now that I say it out loud, that does sound like a bunch of hypothetical BS.\"\n\n\"No, that helps a lot. Thank you, Sandy.\"\n\nI bit my lip. I was relieved to know that she didn't regret me binding her, but there was still a sting of guilt over messing up the plans she'd had for her life, to some extent.\n\n\"But look, happy or not, Sandy, I still took something precious from you-\"\n\n\"Oh, stop it.\" She cut me off. \"You didn't take anything; I gave it to you. Willingly. And I'd do it again.\"\n\nI didn't think she saw how my power worked. Still, my guilt was tempered slightly by the fact that she genuinely thought it was her decision, true or untrue.\n\n\"Well, either way, you're precious to me, Sandy, and I want to give you as much happiness as I possibly can.\" I felt like I was reciting a wedding vow... Then again, was it really that different?\n\n\"I want to know all of you, Sandy. Tell me something about yourself. Something no one else knows.\"\n\n\"Hmm, well I don't have any juicy secrets or anything... Hmm.\" The gorgeous teen pondered. \"Wellll, okay, there was this one time...\" She smirked, recalling it. \"I was eight years old, and my parents were gone for a weekend retreat -- this was before my Dad left. My Grandma was visiting to look after me, but she was taking a nap upstairs. While she did, I took some of the extra paint from the storage room in the basement, and 'redecorated' several of the rooms on the first floor.\" She burst out laughing. \"The paint was everywhere! I took the paintings from the walls and tried hanging them in different spots, even tried to rearrange the furniture -- though most of it was too heavy for me at the time. The whole nine yards; I made all kinds of trouble.\"\n\nI snorted in disbelief, \"Paint!? Good God... Your parents must have flipped.\" \n\nShe tittered, \"Uh, yeah, you could say that. I thought I could spruce the place up some, add some color. I was a very determined little girl, I'll have you know.\" She said seriously. \"But truthfully, I've always loved art. I was never that good at drawing, or sculpting, or anything like that, but when it came to decorating...well...I just seem to have an eye for arrangements. Or at least, I thought I did... You've seen my room; you be the judge.\"\n\nThat was an invitation for disaster, and I wasn't touching it with a stick. I waited for her to continue.\n\n\"After my parents got everything cleaned up, replaced the carpets, repainted the walls, and got the dining room table resurfaced and stained, they decided to embrace my creative drive. They gave me one of the rooms in the basement to play around with. I'm thankful to have such supportive parents. Well...not so much my dad anymore, but, yeah.\"",
        "\"Is that what you want to study in college? Interior design?\"\n\n\"Yeah, that's how I'm leaning. I'm not sure if I want to do that or something else art-related. I love to create, and I used to love to play house, so the interests kinda gelled. Now though, I'm sort of having to reevaluate my aspirations.\"\n\n\"Why?\"\n\n\"Well, it's certainly looking like this...\" She motioned back and forth between us, \"isn't going to give me a traditional life. A couple of cute kids and a dog. Little house, nice neighbors, and a good school district. That sort of thing.\"\n\n\"Well, why not? If you want those things, I want to give them to you.\" An idea just popped into my head.\n\n\"I just had a thought. Sandy, what if I put you in charge of decorating the new place? Think about it; you could have a huge mansion as your playground.\"\n\nShe brightened, but remained skeptical. \"What, in this other woman's house? Are you suggesting-\"\n\n\"Yes, I am. Ianthe is happy doing what I tell her to, and I'm want to give you this. Well, I might not be able to give you complete carte blanche in every room, but just think of it -- you'd have all those spaces to play with, and the means at your disposal to make your designs a reality.\"\n\n\"But...it would feel weird. It's someone else's house.\"\n\n\"Would you stop saying it like that?\" I said, a touch of exasperation bleeding into my tone, \"It'll be our house.\" I paused, trying to understand and be patient. It wasn't her fault. In her shoes, I'd probably be thinking the same thing. \n\n\"Sandy, I know this is strange, but at some point, we need to get used to the fact that we're going to be living together. Whether it happens this way, or I go out and buy a new home that you are able to view as mine, and then we all move into that one, is sort of immaterial. In the end, the result is the same: all of us living under one roof. And that means sharing things. Not that everyone won't have their own things -- they certainly will! -- but our home will be all of ours.\n\n\"Wherever it is that we end up, I want you to feel like it's just as much your home as anyone else does.\"\n\nShe looked at me warmly, putting a hand on my cheek. \"Adam, you're sweet, and I appreciate your concern, but I think you're deluding yourself if you honestly think this Ianthe isn't going to feel she has more right of ownership than any of the rest of us do. Any of us except you, of course.\"\n\nI sighed, conceding the point. \"You let me deal with Ianthe. Trust me to make everything right, okay?\"\n\nSandy nodded. She wasn't completely mollified, but it appeared that I'd attained at least a measure of her acceptance.\n\n\"So, tell me a little about this new place.\"\n\n\"Well, it's...actually, why don't I show you,\" I said, reaching for my cellphone from the pile of clothes. \"Check it out. Ianthe gave me the address and I pulled it up on Zillow.\"\n\nI let her browse the site, giddy as her eyes widened scrolling through photo after photo of opulent spaces. The place was incredible. Eight bedrooms, seven bathrooms, a massive workout room, multiple home offices, a solarium, a theater room with stadium seating, a four-car garage (with additional detached four-car), and a black-bottom in-ground swimming pool. It even had a volleyball court with sand in it, and the grounds of the estate were surrounded by towering mature trees.\n\n\"Holy...\" Sandy said in wonder. \"This place looks like it could be on Cribs.\"\n\n\"Right? How about that master bath? That shower could fit like six people!\" My mind whirled with the possibilities.\n\nSandy was incredulous, \"And I'm going to live here?\"\n\n\"Well, I can't make you live there. But I sure hope you do. I want to wake up next to you every day. Eat breakfast, lunch, and dinner with you. Spend time swimming or watching TV or working out with you. Taking walks in the evening.\"\n\nShe snorted, \"Yeah, Monday, Thursday, and Friday.\"\n\nI scratched the back of my head, looking away. \"It's not like that.\"\n\n\"I know, I'm sorry. That was a cheap shot. I promise I'll try to get used to the idea.\"\n\n\"But don't you love it?\" I said enthusiastically. \"Think about all the things we can do with these spaces. I need you to help me decide how to use them all. Ianthe just moved in a couple of months ago -- I doubt she's even been in half of these rooms. Think of it as a blank canvas. Maybe use this one...\" I held up the phone, showing her, \"as the weight training room and yoga studio?\n\n\"And this one we could use to entertain guests, or make it a billiards room. What do you think?\" I gave her an excited look. \"There's even space here for nurseries and playrooms.\"\n\n\"Eventually, that is.\" I quickly added.\n\n\"Do you...want children?\" her voice was quiet.\n\n\"Honestly, I'm starting to think it's going to happen whether I do or not,\" I replied. \"But I think...yeah, I do. When the time is right, that is. When I'm inside you, I get this need to...breed you. It's strong, too. It's got to be part of what I am, because it's not something I've ever even thought about before.\"\n\nI looked up at her to gauge her reaction, and was relieved to see her nodding vigorously with an eager smile on her face.\n\n\"Adam! I feel it too! I used to think kids were nothing more than brats. It's why I've never done the babysitting thing, even though there's great money in that. But now... It's like you said. When you're inside me, filling me up, I feel this desperate hope that my birth control will fail, and you'll put a child in my belly.\" She looked down and laid a hand on her smooth stomach, eyes glazing before meeting mine once again, \"You're gonna think I'm weird, but this strange fantasy pops into my head sometimes when we make love.\"\n\n\"Oh? Will you share it with me?\"\n\nSandy's face turned a deep shade of red, and she looked down, demurring. \"No, it's too bizarre.\"\n\n\"Come on, pleeease? You can't drop that on me and clam up now.\" I nudged her.\n\n\"Well alright.\" She sighed. \"Promise not to laugh though.\"\n\n\"You have my word.\" I nodded solemnly.\n\n\"It's you, standing in a field of rich, black topsoil. You're naked, and your eyes are closed. Your beautiful cock is stiff and ready, and I can tell your balls are full and itching for release. I'm the field, somehow, but I'm more than that -- I'm also...inside you, working hard to pleasure you and make you cum. \n\n\"I'd done it before, and all I want is to make it happen again, and again, and again. Because when it does, it's miraculous. Thick white sap launches from you, and you stand on weak knees as you spray it everywhere. Launching it for yards in every direction, trying to cover as much of the ground as you possibly can with it. \n\n\"Each time a drop of it hits the soil -- hits me -- beautiful flowers in a million bright colors explode from the surface, growing rapidly as if in time-lapse, becoming full-grown in seconds. While you throw your seeds out, I put all my will into making my soil richer, more fertile, and more welcoming to the life you sprinkle everywhere.\"\n\nWoah, just the thought of that had me as hard as a rock. I almost wanted to enact it right here and now, but it was more important to me to finish our discussion.\n\n\"So, that's it. What do you think? Total weirdo, right?\"\n\n\"Sandy, no...\" I rested a hand on hers. \"It's...beautiful. Honestly, it's almost poetic.\" I said in awe.\n\nShe blushed, shaking her head. \"Anyway, that's what I feel.\"\n\nWith that we both lay back on the ground and look up at the azure autumn sky, puffy white cumulus clouds meandering by lazily. Both of us were absorbed in thought. \n\nIt was encouraging that Sandy so badly wanted to get pregnant -- whether it was a byproduct of her bond to me or otherwise -- but I still wasn't sure if she was connecting that part with what inevitably followed. We needed a more solid foundation before crossing that bridge, so we'd have to be careful.\n\nAfter several long minutes, I interrupted our reverie. \n\n\"Sandy, there's something I've been meaning to ask you.\"\n\nShe sat up and faced me, looking concerned, \"What?\"\n\n\"Why do your cheerleader friends call you 'Dee'?\"\n\n\"Oh, you had me going for a second there. Well, let's see...there my name: San-dee? And then, hmm, can you think of anything else about me that might start with deee?\" She drew out the word as she shot a meaningful glance at her boobs.\n\n\"Ahhh. Right.\" I grinned. \"Do you want me to call you Dee?\"\n\n\"Hmm.\" She thought for a moment. \"No, from you, I think I prefer Sandy. But your pet names for me are even better.\"\n\nI smiled warmly. \"You got it, Babe.\"\n\nThen I had an impulse, and I rolled over to lay on top of her, looked down into her eyes, and kissed her. \n\nBetween kisses, she giggled, saying, \"Oooo, Adam,\" smack, \"you always know,\" suck, \"just what I want.\" \n\nThe feel of her soft, nubile body beneath me -- breasts pressed into my chest, my left leg between hers -- was incredible. I caressed the soft flesh that pooched out from the side of her squished boobs. Suddenly, I reached further down her chest to her sides, tickling her mercilessly, pincering her leg between mine and rolling both of us over. \n\nShe shrieked with laughter, thrashing to escape my tickling fingers.\n\nWe tumbled over and over onto the grass, our bodies intertwined, skin sliding on skin until we came to a stop with me on top. I got to my knees, hands to either side of her face as she panted below me from the exertion. Her bun had come undone, and a curtain of golden hair haloed her face on the grass. Sandy smiled up at me with adoration in her clear blue eyes.\n\nLeaning in, I kissed her again, tenderly. \n\nThe rest of the afternoon was one of the best times of my life. We ate, and made love. Shared stories of our lives, and laughed together. We talked about the future, and cuddled on the blanket, watching the clouds stroll overhead. Finally, when the deep orange rays of the sun were just passing over the horizon, and the evening chill had started to settle into the air, we got dressed and packed up to go.\n\nI drove her home, and we said goodnight. Both of us excited about the future. I was right -- there was much more to Sandy than the girl that cheered for Fairfield High. And I was enjoying bringing the real her to the surface."
    ],
    "authorname": "Nexte100",
    "tags": [
        "cunnilingus",
        "harem",
        "incubus",
        "mind control",
        "romantic",
        "sci-fi",
        "teenager",
        "titfuck"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/incubus-pupa-ch-08"
}
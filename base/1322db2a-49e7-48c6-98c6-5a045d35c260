{
    "title": "The Password",
    "pages": [
        "\"Password?\" came the booming Voice, which appeared to emanate from swirling white clouds around the gates that I stood up to my knees on a cloud in front of.\n\n\"Password?\" I asked, puzzled.\n\n\"Password!\" insisted The Voice.\n\n\"Pardon?\" I am still confused.\n\n\"No, that won't do at all,\" The Voice sounded quite pissed off. \"Didn't they tell you that your password must be made up from letters, numbers and other characters, what I call the squiggly bits?\"\n\n\"No. Nobody said nothing about a password.\"\n\n\"Damnation! Nobody does what they are supposed to any more! Right, name?!\"\n\n\"Russell Charles Atkins,\" I recited, \"Usually known as 'Charlie'.\"\n\n\"You're not on my list.\" The Voice, wherever it was, sounded exasperated.\n\n\"Ah. Is that good or bad?\"\n\n\"What do you think?\" Now The Voice bordered on petulance.\n\n\"I dunno, I don't even know where I am,\" I said, \"Gates in front of a misty river, warm orange red sky above the far shore. Puffy clouds that appear to talk to me and swirly mists that I appear to be standing on as if they are solid ground. Where the hell am I?\"\n\n\"Well, Customer, Mr Russell Charles Atkins, what does this scene bring to mind?\"\n\n\"The Pearly Gates?\" I guessed.\n\n\"Do they look pearly to you?\" The Voice asked, with a degree of petulance.\n\n\"No they don't,\" I replied, \"What worries me more is what looks like a boat in the clouds, like the one that carries souls over the River Styx.\"\n\n\"Oh! Classical scholar, then, are we?\" The Voice snorted.\n\n\"No, I mend roads, put out 'men at work' signs, and general hard graft, or I used to before I retired last year; it's just that we had 'Jason & The Argonauts' on Betamax at home when I was younger, for the kids; I sat with them and watched it a lot.\"\n\n\"Well, there's no more Pearly Gates or River Styx, every mortal who dies comes through here first now. We've all gone PC, I'm not St ..., well, I'm not who you think I was any more, I'm referred to as 'Human Reception' now. No saints or angels or devils here any more. You are now a Customer, not a Sinner. Your password accesses the new system which determines where you go from here, up or down or in between.\"\n\n\"Well, nobody gave me a password.\"\n\n\"Mmm, let us go back to the end\u2014\"\n\n\"The end, don't you mean the beginning?\"\n\n\"Let me put it this way, Customer, what's the very last thing that your mortal memory remembers?\"\n\n\"Well, there I was walking to the shops for a bottle of milk and a paper, then looking up to see a piano swinging into a third floor window, thinking it's all right, it's only unlucky to walk under a ladder... Next thing I know I'm standing here like a bloody lemon in front of your not-so-pearly pearly gates.\"\n\n\"Mmmm,\" The Voice sounded somewhat cautious all of a sudden, \"Are you a test?\"\n\n\"What'd'yer mean, a test?\"\n\n\"Testing the new system, because this all sounds like a blessed set-up to me.\"\n\n\"What new system?\"\n\n\"New entry program ... Upstairs imposed it on us very recently, everything's changed and we're still learning the blessed thing.\"\n\n\"How's it work?\"\n\n\"First you have to make up a password\u2014\"\n\n\"Open sesame!\" I suggested.\n\n\"What?\" The Voice snapped. \n\n\"My password. I just made it up.\"\n\n\"No, deary me, Customer ... Mr Atkins ... you are really trying my blessed patience here. You have to pre-arrange your password with your 'Official Human Handler', at the point of your demise. Your 'Official Human Handler' enters your password into the system with a hand thingy. Beats me why in this new PC world we have to replace a single blessed word 'angel' with three blessed words for the same blessed thing. But then I was never consulted. I liked the old system, but they tell me that I'm old school. Anyway, no hand thingy means no password, and no password equals no entry beyond this point.\"\n\n\"I'll just wait here then, while you sort it all out,\" I said, after all it wasn't like it was my fault their so-called 'blessed' system was total bloody rubbish.\n\n\"You can't wait, Mr Atkins, you're holding up the queue.\"\n\nI looked behind me, no queue. No one, no nothing at all. A few clouds, maybe, far off in the distance, but definitely no queue.\n\n\"I can't see no queue.\" I told The Voice, with an element of challenge. I was becoming one dissatisfied Customer.\n\n\"Well, you wouldn't, would you?\" The Voice was really getting tetchy, now.\n\n\"Why not?\" Two can play at that game.\n\n\"Say you were the Taliban and you'd blown yourself up in a crowded marketplace; would you want to see the housewives, traders, passers-by and other victims immediately behind or in front of you in the queue?\"\n\n\"No, I guess not.\"\n\nJust then a thin weedy chap appeared from nowhere and stood beside me.\n\n\"I got here first, mate!\" I said, forcibly, establishing my claim, \"Ok mush?\"\n\nSo much for the bloody queue arrangement, it was more rubbish than the bloody new entry system.\n\n\"I'm your Official Human Handler Operative, sir, you were too quick for me.\"\n\n\"Jesus Christ!\" The Voice snapped, \"Not three words to replace one, but four! Heaven help us!\"\n\n\"What do you mean, 'too quick'?\" I said, ignoring The Voice. \"No, I bloody well wasn't too quick. 'First' I was walking along minding my own business, then, 'Second', I was standing here. I didn't see you for diddly bloody squat, so don't give all that 'I was too quick for you', mate. I reckon you were too bloody slow.\"\n\n\"Whatever. You need to make up a password, Russell Claude Atkins, consist-\"\n\n\"Wrong!\" came The Voice, \"This is not Russell Claude Atkins but Russell Charles Atkins - you cocked up, Official Human Handler Operative. And this isn't the first time that's happened with other Operatives lately, under this new blessed system.\"\n\n\"Impossible, he's the only Russell Claude Atkins in the system,\" said the Handler, \"I double checked.\"\n\n\"Tried searching with wildcards?\" asked The Voice in that superior tone that I guess comes naturally to it.\n\n\"No, I didn't, damnation!\" cried the Handler.\n\n\"Russell Claud Atkins, heavy smoker, weak heart, in his mid-thirties,\" gloated the Voice, \"I found him straight away ... on the Old System.\"\n\n\"Damn!\" the Handler's shoulders visibly drooped.\n\n\"I know Russ Atkins,\" I cried, \"He's famous, I've followed him all his career, he's about twenty-eight years younger than me; we just share the same first and last names. I didn't know his middle name's Claud, he kept that bloody quiet from the general public. He's just retired as England's highest paid footballer. His fianc\u00e9e is that lovely model, Cherry Bell. She's only about twenty and absolutely gorgeous! When they marry, they say it will be the glamour wedding of the decade.\"\n\n\"She's just left him, because he cannot give up his addiction to smoking, drink and drugs,\" commented the Handler, reading off his hand-thingy, \"Says that while he's still the only man she could ever love, she couldn't just stand there watching him kill himself.\"\n\n\"That's it, then!\" I cried, \"He dies of cancer, a dodgy ticker or an overdose, and I go back and live my full three score and ten!\"\n\n\"Says here ... 'Russell Claud Atkins ... dies of extreme old age ... in the arms of his ever-loving soulmate at the very end of a vigorous bout of monkey sex',\" boomed the Voice, \"According to the old system, that is.\"\n\n\"He dies of old age only because you took me in my prime by mistake!\" I moaned, \"Hey! Aren't I supposed to be the Customer here?\"\n\n\"It's got 'Claud' without an 'e' on the old system, but I've got the target down as 'Claude' with an 'e' on the new one,\" whinged the Handler. \"It's not my fault!\"\n\n\"CICO,\" I said. My grown up son's into computers and sometimes I understand bits of what he says.\n\n\"What's CICO?\" asked The Voice.\n\n\"Data input,\" explained the Handler, \"Crap In, Crap Out, meaning the results are only as good as the data that's typed in. I guess somebody input the wrong spelling.\"\n\n\"Send Charlie back,\" commanded The Voice, after a short pause.\n\n\"Can't, I'm afraid. It was a very old and heavy piano, baby grand, solid mahogany, real ivory, very messy pavement.\"\n\n\"Just take Russell Claud's soul then, and pop Charlie in his place,\" suggested The Voice, \"Sounds like Claud's living on borrowed time as it is.\"\n\n\"Oh great!\" I said, heavy with sarcasm, \"What about his lungs and liver? And his drugs addiction? My return to mortality looks like it's only going to be a bloody flying visit. And he's just buggered up his social life to boot.\"\n\n\"I'll fix all those addictions and their cumulative effects,\" The Voice said, \"I still have my executive powers, until the new system is fully integrated, that is. Handler, send him back to before Claud's fianc\u00e9e splits up with him.\"\n\n\"OK, Charlie, let's go.\" The Handler tugged my arm and the gates and clouds suddenly disappeared.\n\n***\n\nI appear to be in a huge private gym with picture windows obviously high up, showing the city skyline. There's only one guy in here. \n\nOh my God! It's him! Russ Atkins, household name, football star, now TV pundit, owner of several Manchester nightclubs, an on-line betting shop and endorsements of high quality international products. He's got it made for life. \n\nAt least he's in his home gym getting fit\u2014 \n\nWhat the f\u2014? \n\nNo, he's not getting fit. He's sitting at a bench press, sweating naked after a serious work-out, while swigging vodka from an ice-old bottle and he's holding a huge smoking spliff in the other hand. \n\n'No, Russ,' I want to call out to him, your body is a temple!', when the gorgeous Cherry Bell walks out of a shower room, wearing nothing but a sheen of steaming water and a towel wrapped around her head. If I wasn't so sure that they couldn't see me or the Handler I would have been mortified, but I relax and enjoy a view that Playboy Magazine would've mortgaged Hugh Hefner's Playboy Mansion right up to the hilt for.\n\nI can hear her say, \"Honey, no, you promised...\"\n\nThe Handler touches me lightly on the shoulder.\n\n\"You ready, Charlie? This might tingle a little.\"\n\nI nod that I'm ready. My eyes mist over and suddenly my point of view changes and this vision of loveliness called Cherry was now looking at me directly and disapprovingly.\n\nI'm sitting where Russ sat. I toss the spliff in my hand to as far as I can flick it, the half-full bottle of Stolly I put back in the ice bucket upside down. In the silence I can hear the alcohol glug-glug away.\n\n\"Cherry, I swear to you,\" I say, my voice sounding so different to how it used to before I was hit by the piano, \"if you love me as much as I love you, I will never touch another fag, another drink, another drug, ever again. Getting high on you, well, you ... my love ... I could never give up.\"\n\nHer frown turns to a smile and my cock rises impressively, even in my peripheral vision my cock is porn movie proportions, but I don't want to take my eyes of Cherry's baby blues. They are full of love and lust, they bore into me, her smile warm and her lips open and the tip of her tongue appears in anticipation.\n\nCherry steps up close, cups my head in her warm hands and, still maintaining eye contact, lowers herself onto Russ's, no, MY rampant cock. Surely, I think there's no way \u2014 but before I can even process the impossibility, her hot, tight, slick sheath is bottomed out and I am completely enveloped in her throbbing centre. Her lips mash against mine, her tongue comes into my mouth with a moan of utter pleasure before she sucks my tongue into her mouth like a runaway Hoover.\n\nBefore my mind explodes in utter ecstasy, in a silent prayer I apologise to my Uncle Claude for changing the name that I inherited from him to 'Charles'; if he ever hears my explanation I'm sure he'll be completely understanding. \n\nThe End"
    ],
    "authorname": "Spencerfiction",
    "tags": [
        "heavens door",
        "new system",
        "pc terminology",
        "pearly gates"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/the-password-1"
}
{
    "title": "What The Cat Dragged In Ch. 03",
    "pages": [
        "Hello,\n\nI hope some of you are enjoying this story, I think some of you are.\n\nThe plot will continue, but the intimacy begins to grow too.\n\npsyche b\n\n3. First Bite\n\nCreed heard a soft whine from the end of the sofa. He glanced away from CNN for a minute, watching the frail struggle with another nightmare. \n\nIt had been a little over a week since he found her, and in all, having her there hadn't been nearly as much of a pain in the ass as he'd thought it was going to be. She was a damn good cook and he only had to tell her once how he liked his food. She kept the place fucking spotless. She listened to him talk when he felt like talking. That wasn't such a big deal in itself. With the right threats he could make damn near anybody look like they were listening. She listened without the threats.\n\nAnd she smiled at him. Not an \"I'm trying to make nice so you won't hurt me anymore\" kind of smile either. At first he hadn't known what to make of it. A part of him was still convinced she was hiding something. He didn't think he would ever fully lose that suspicion. He wondered when she would stop smiling.\n\nShe whimpered again and drew her knees up tight against her chest.\n\nThe dreams were starting to get on his nerves. The first few days, her sleep had been relatively calm, but that was because her body was devoting so much energy to healing. Hell, he slept like that too when he was recovering from something major and she didn't have his healing factor. After that, he'd started hearing the little whimpers in the middle of the night. Sometimes he'd hear her cry. Usually, he ignored it. That was harder to do when she was next to him like that. He still had no idea how to calm a frail down, but he had to do something to shut her up.\n\nHe watched her stretch out again, but she was still trembling. He rolled his eyes and grabbed her ankle carefully. He didn't want to bruise her again, he just wanted to wake her up enough to quiet her down.\n\nThe soft sigh surprised him. He felt the relaxation go through her. He looked at her face, and realized the tension had left her forehead too. Well that was just fucking great. Now he'd have to stay like that for the rest of the goddamn night.\n\nHe turned his eyes back to his program.\n\n*~*~*~*~*~*\n\nKelly stepped out of the shower and caught a glimpse of herself in one of the tall mirrors in the bathroom. She couldn't get over the changes in her appearance in the last two weeks. Most of the bruises were gone now. The only ones that remained were the ones over her ribs and the ones he'd given her when he grabbed for forearm. The ones on her ribs had taken on an ugly, mottled greenish color. The ones on her arm still looked almost as fresh as the day it happened. There was still a twinge in her side now and then, and the ache was mostly gone from her arm.\n\nThe other changes she attributed to eating so well. Her hair had grown more in the last two weeks that it had in the last two months. She'd noticed that it had taken on the reddish tone that it used to have when she was younger too. Her face was fuller. Her ribs and hipbones were less prominent. Her breasts had a new fullness that threatened to make her bras inadequate. In spite of her loose-fitting clothing, she was certain that Victor had noticed some of those changes. \n\nKelly wasn't sure how she felt about that. Well, that wasn't exactly true. She knew how she felt, but it wasn't exactly logical to feel that way. It wasn't like she had a great deal of experience with things like that either. Up until the last week or so, she had been too preoccupied with her own survival and sanity to think about much else. For the moment, that concern was at least pushed aside. Now she was in the middle of nowhere with a very large man who made her heart race every time he so much as growled in her general direction. Not all of that heart-racing was fear either, although there was still a healthy dose of that. She got the impression that he liked it that way.\n\nThe rest was probably just her reading too much into things. Still, there were times when he would kind of force her to be close to him. She had no idea what to do during those times, but he seemed to enjoy how flustered she got.\n\nKelly pulled one of his shirts over her head and wondered if he looked at himself in that mirror when he stepped out of the shower. Instantly the image of him in just his sweatpants came to mind. It was how he ate breakfast most mornings, and she had all she could do not to stare. Now, she couldn't help but think of the way the mat of dark hair covered his sculpted muscles, accentuating each of them and making Kelly's fingertips practically itch to touch him. Just once. Of course there was also that little line of hair that descended from his navel-\n\nThe loud knock shattered the image. \"You gonna be in there all fuckin' night?\"\n\n\"No.\" Kelly pulled on a pair of panties and ran a brush through her damp hair. How long had she been standing there? She opened the door. \"Sorry.\" She kept her head down as she brushed past him, and hoped he didn't notice how deeply she was blushing. \n\n*~*~*~*~*~*\n\nFuck she was wet. He could smell it even before she opened the bathroom door. The air inside the bathroom was saturated with the scent. \n\nThe first time he'd smelled her arousal, he was sure it couldn't possibly have anything to do with him. It never had before, why should this frail be any different than all the others? It only seemed to happen when he was close to her though. The scent of her confusion came through clearly too. He had no way to interpret that other than she was pissed off at herself for letting him excite her.\n\nShe wasn't the only one who was confused though. He'd figured by now, he would have fucked her at least once and probably a whole hell of a lot more than that and been well on his way to being bored and breaking her completely. When he looked at her, he still wanted to fuck her hard and often, but he liked the fact that she didn't flinch when he touched her. It made him want to see exactly how far he could go before she did reject him. \n\nWhen he came out into the living room again, she was curled up, reading. She'd finished Moby Dick and had moved on to A Tale of Two Cities. She was doing her best to look like she was concentrating, but he could tell she wasn't. He grabbed a pad of paper and a pen off the counter and tossed them at her.\n\n\"I'm going into town tomorrow to get supplies. Write down what you want from the store.\" He grabbed the remote and raised from plasma TV from its hiding place in the console table.\n\n*~*~*~*~*~*\n\nKelly found it strange to be all alone in the cabin. She knew that she'd been alone the day he went looking for Dawes's shack, but she'd spent most of that time asleep. She realized that this was the first time in her life that she'd ever really been completely alone at home, and it didn't take her long to wonder how people lived that way. \n\nShe tried to keep busy with her housework, but even with adding extra tasks for herself there was only so much she could do. When everything was washed and polished, Kelly wandered from one lemon-scented room to the other. He'd told her before he left that he would probably be gone until late afternoon. It was too early to start dinner. She couldn't concentrate on reading. She'd never had the opportunity to get involved in the afternoon soaps, but she even tried those at one point. After fifteen minutes of seemingly pointless high drama, she abandoned that too.\n\nShe wondered if she would always miss him so much.\n\n*~*~*~*~*~*\n\nThe towns in this part of upstate New York were small and separated by anywhere from ten to fifty miles. People who lived there moved between them as if they were different parts of the same city. When he was at the cabin, Creed did the same thing. When he bought the land, one of the things that appealed to him was its central location. Usually, he avoided traveling between towns on the same day because it was generally a pain in the ass. Today he didn't have a choice.\n\nHe finished the first part of his errands in Hadley Falls, and then made the forty-five mile drive back to Siler's Lake. Siler's Lake had a population of around five thousand people, but they had at least a dozen bars that he knew of. Some of them wanted to be upscale clubs. Creed had no use for those. Some catered to the redneck set. He generally wasn't welcomed in those kinds of places. He pulled into the parking lot of the Watering Hole at a little before noon. It was a dive, but it was a dive where he knew the bartender.\n\nWhen he opened the door the smell of sweat, desperation, sex, illness, beer, grease, whiskey, anger and a thousand other sour things hit him. He'd smelled the same scent in every dive he'd ever been in. Some places were more heavily weighted with desperation, in others the topnote of anger carried with more intensity. In all, there was something comforting about the odor, and even he needed his comforts from time to time. He sat at the bar on stool that was more duct tape than vinyl, as far away from the other patron as possible. Without asking, the bartender put a beer in front of him.\n\n\"Been awhile since you been in.\"\n\nCreed halfway smiled. \"Miss me?\"\n\n\"Much as you missed me.\" The little man grinned, revealing a missing front tooth. \"You want your usual?\"\n\n\"Sure.\" \n\nThe other guy at the end of the bar was already half drunk and itching for someone to listen to his dumbass opinion on the state of the government. The bartender went over to oblige him. He brought Creed another beer when he brought him his 'usual' lunch of four half-pound hamburgers with onions and jalapenos. He'd ate two of them when the other patron's diatribe finished. The bartender wandered back.\n\n\"You live somewhere around Route 12, don't you?\" The air whistled through the gap in the man's teeth.\n\n\"Yeah.\" Creed had made no effort to keep his location a secret. He'd just made it clear he didn't welcome visitors. \"Why?\"\n\n\"There was some PI asking if anyone had seen a girl up around that way.\"\n\nHe finished chewing slowly, deciding on the best way to get at the information he wanted. \"What girl?\"\n\n\"Hell if I know. He said she was a scrawny little thing, mouthy.\"\n\n\"How's that different from any other woman?\" He smiled a little, not wanting to seem too curious. The bartender laughed a bigger laugh than one would expect from such a small man.\n\n\"No different at all I guess. PI said this one ran off with a boyfriend her parents didn't like.\"\n\n\"This don't seem like the kind of place kids run off to.\"\n\nThe bartender shrugged. \"Her parents found something in her diary about camping up here. He probably figured it was a good place to start.\"\n\nCreed made a non-committal sound. It was too much of a fuckin' coincidence. His mind was already following multiple courses of possible action to their most likely conclusion. The bartender walked away to give the other patron another beer. It gave him a minute to figure out if he wanted to ask any more questions. When the bartender wandered back, he asked the most obvious one. \"There a reward?\"\n\n\"Didn't ask. He gave me a couple of his cards though.\" He fished around in the piles of papers near the cash register. \"Here, no.\" He sifted again. \"This is it. Take it if you want. I got others.\"\n\nHe accepted the cheap business card and tucked it into his shirt pocket, but not before he noted the name, Ken Embry. \"Thanks.\"\n\n\"Another beer?\" \n\n\"Yeah.\" A few minutes later the other patron decided he had more to say about taxes or some shit like that. Creed left enough cash to cover his meal and went back out into the sunlight. He had some phone calls to make and he still had the supplies to pick up. That alone drove him more into the depths of pissed off than he already was. He told himself that the next time he did this, the frail would be with him.\n\n*~*~*~*~*~*\n\n\"Link.\" The man on the other end of the line said. The hacker was eating something. Creed didn't think he'd ever talked him when the reclusive little shit wasn't shoving something in his fucking mouth.\n\n\"I need some information on Ken Embry,\" Creed said. \"He's a PI out of Telford, New York.\"\n\n\"Gimme a sec.\" Creed could hear staccato typing. He'd waited to make the call until he got somewhere private. \"This guy must've really pissed you off.\"\n\n\"Why?\" He didn't bother trying to hide the little growl in his voice.\n\n\"'Cause you sound like you're about to tear somebody apart, that's why.\"\n\n\"Depends on what you tell me.\"\n\n\"Ken Embry? This guy is strictly small potatoes, how the hell is he even on your radar?\"\n\nHe growled. \"Just tell me what you found or you'll be on my fuckin' radar, and if you think I can't find you-\"\n\n\"Okay, okay.\" The voice had risen an octave and he started talking faster. \"He works alone. His financials are shaky as hell. Looks like before he started doing the PI thing he worked in a grocery store stocking shelves. Clearly doesn't know shit about keeping his computer records safe. He works mainly for the CoH, but it's mostly background checks, shit like that.\"\n\n\"Open investigations?\" \n\n\"Just one that he's got record of, some runaway teenager named Kelly Demmer.\"\n\nThe name Demmer was familiar to Creed, but he couldn't place it. \"I want details. Send 'em to me.\" He ended the call without waiting for a response. He started unloading bags from the trunk.\n\nThis guy sounded like a first class idiot, but given enough time, he might just stumble on to something. The way Creed saw it, he had four options. He could just turn the frail over and be done with the whole fucking mess. He could use the frail for awhile and then kill her, like he had planned to in the beginning. He could meet with Ken Embry and kill him, or he could lead Mr. Embry on a wild goose chase, then kill him at the other end. \n\nHe dismissed the first two almost as quickly as he thought of them. He told himself it was because he didn't let other people dictate how or when he played with his toys and let it go at that. The other two wouldn't be as easy to choose between until he got the full report, but he was leaning toward the latter of the two. It would take a little longer, but it would provide a nice false trail for whoever followed after him.\n\nHe walked up the outdoor steps that took him over the small hill that sheltered the house from the road. He saw her sitting on a stump in front of the house, her legs crossed Indian style. The sun had re-emerged a few days ago and all but the most deeply sheltered pockets of snow were gone. He knew that wasn't why she was sitting outside though. From the few things she'd said about her past, he knew there were long stretches when she didn't get to see daylight, much less sit outside in it. He knew what that felt like. \n\nHe snapped a branch as he started down the other side. No need to scare the hell out of her.\n\n*~*~*~*~*~*\n\nKelly had wanted to hug him as soon as she saw him coming down the steps, but she stopped herself and took some of the bags instead. There was something wrong though, she could see it as soon as she looked at him. There was a tension in his jaw. She waited until they were inside, but before she could ask what was wrong he set everything down and started to walk away.\n\n\"Start putting this shit away. I gotta check on something.\" He took one of the bags with him and disappeared down the hall before she could say anything. A minute later she heard his bedroom door close. \n\nKelly looked at the piles of grocery bags and started filling the pantry and the fridge. Once she finished, she started reheating the beef stew she'd made the night before last. She knew he didn't really care for vegetables on their own, but he would eat them if they were covered with enough gravy. After that, she took a small bunch of the grapes he'd bought for her. Kelly couldn't remember the last time she has fresh fruit. With the first bite she closed her eyes and savored the sweet, juicy taste. When she opened them again, he was leaning against the breakfast counter, grinning at her. Kelly blushed deeply.\n\n\"I don't know shit about picking out fruit,\" he said. She could still see the tension in his jaw.\n\nShe smiled shyly. \"You did a really good job. Thank you. Do you want to try one?\"\n\n\"Nah. Here.\" He handed her the bag he'd taken with him. \"I'm sick of looking at those ugly fuckin' dresses.\" He wasn't quite looking at her as he said it. Kelly opened the bag curiously, and was surprised to see it was full of clothing. \n\n\"You didn't have to-\"\n\n\"You gonna stand here and talk all day or you gonna get outta that damn thing?\"\n\n\"I will, but what's wrong?\"\n\nHe looked surprised that she would ask the question. \"What do you mean?\" \n\n\"Since you got back you look, I don't know, somewhere between worried and angry.\"\n\nHe watched her, as if thinking about whether or not to tell her. \"Get changed.\"\n\nKelly opened her mouth to say something, but his narrowed eyes and the low growl that was rising from his chest made her think better of it. He was still blocking most of the doorway, so she had to squeeze past him. Those few seconds of contact brought a deep blush to her cheeks and made her heart flutter a little bit. \n\nOnce she was in the bathroom, Kelly wasted no time in unpacking the bag. She found three basic pairs of sweatpants in light gray, black, and hunter green with matching shirts, there were also three t-shirts in dark gray, light gray and light blue. They could have all been traffic cone orange, Kelly wouldn't have cared. She hated those dresses as much as he did. She put on the light gray pants, and light blue t-shirt, figuring the rest should be washed before she wore it.\n\nEverything was a size small, but it was still too big for her. She made the pants work by the tightening the drawstring and rolling up the waist. The shirt would have to work as it was. She picked up the dress and thought about tossing it in the trash. She couldn't quite make herself do that. She stuffed it back in the remnants of her backpack.\n\nHe was prodding the fire when she walked into the living room. She went into the kitchen to stir the warming stew. When she turned around again, he was behind her. Kelly jumped back a little. He just grinned. The way his intense eyes slid over her body, she felt as though she was standing there naked. He moved one clawed finger in a slow circle.\n\nShe shook her head a little. \"I don't-\"\n\nHe leaned in closer. \"C'mon frail, you know you want to.\" His voice was a soft, dangerous purr that made Kelly's knees go weak.\n\nShe swallowed hard crossed her arms over her stomach, trying to get hold of herself. She turned slowly, her eyes down.\n\n\"That wasn't so bad, was it?\" His tone was the same. He lifted her chin with one knuckled finger, forcing her to look into his eyes. \"Was it, frail?\"\n\n\"No.\" Kelly whispered, her eyes were wide as she looked at him. He grinned and stepped back.\n\n\"Better than those fuckin' dresses.\"\n\n*~*~*~*~*~*\n\nCreed's plans were in place. Embry had a pretty good smokescreen of competence going, but it didn't take long to find the useless asshole hiding behind it. He was half tempted to use just end it quickly, but the fact that Stepdaddy Stan had sent anyone at all meant that he wasn't going to just give up. A false trail would take longer, but he was sure that it was the right way to do it. \n\nShe fuckin' knew something was wrong too. The worry and tension were rolling off of her in waves, and not the kind of tension he enjoyed either. At nearly midnight he glanced over at her. She was still sitting up, hugging her legs, her chin resting on top of her knees. Even in the dark room, he could see the curve of one breast through the wide armhole of the shirt she was wearing. \n\n\"Someone is looking for me, aren't they?\" She spoke softly, her head didn't turn.",
        "\"What the fuck would make you ask something like that?\" If he didn't know better, he would swear she could smell it on him.\n\nShe looked down at her blanket covered toes and shrugged. \"Since you got back from town, every time you look at me you look....\" she paused, searching for the right word. \"Upset, or worried, or trying to figure something out.\"\n\nHe grunted. \"And you assume it's about you?\"\n\n\"I didn't at first, but every time you look at me it's....different.\" She took a deep breath. \"Besides, it's been two weeks at least since Stan heard from Dawes.\"\n\nHe was just too fucking curious about the whole thing. He muted the TV. \"What'd you do to Stan exactly?\"\n\nShe looked up at him, for the first time in hours. \"I have no idea really. Whatever it was has been wonderfully effective in driving him to distraction though.\" He saw the corners of her lips twitch, and mischief sparkle in her sea-glass eyes.\n\nHe chuckled. \"Maybe it was that sharp tongue of yours, frail.\"\n\nHe turned a little to face him, and adjusted the blanket so it was over her shoulders as well as her legs. \"Maybe.\" He noticed she was sitting closer than usual, the little smile was still on her lips. \"That's been getting me in trouble since I learned to talk though. I think I've always been too much my father's daughter.\"\n\n\"What the fuck does that mean?\"\n\nShe looked away again, a different kind of smile played at her lips. \"Family legend says he was some kind of mercenary before I was born. I don't know if I believe that, but he did have a way of seeing through what people say and do to what they are. My mother used to say I got that from him. Stan hates it because no matter what he did, I wouldn't treat him with the reverence he thought he deserved. Though he is tenacious.\"\n\nCreed knew where that was going, and he wasn't going to listen to that shit. \"You ain't going anyplace.\"\n\n\"He's not going to give up-\"\n\n\"And I don't give up what's mine until I'm damn good and ready.\"\n\nShe let go of her knees and sat up a little straighter, her eyes wide. \"Yours?\"\n\n\"Mine.\" He said firmly. He smelled her fear first, then arousal and confusion.\n\nHe could see her searching for something, anything to say. She got up and wrapped the blanket around herself. \"I need some water, I'm sorry.\" Her face was hidden in her hair. \n\nHe followed, turning her to face him and trapping her in the corner between the sink and the cabinet. He could feel the anger building. If she fucking rejected him he'd-\n\n\"What do you mean, 'yours'?\" She was looking up at him, trembling. He hadn't been expecting a question.\n\n\"What the fuck d'you think it means?\" Wilson would have known what to say to her. Some flowery shit about love or whatever it was frails wanted to hear. What could he tell her? That he liked the fact that she went through hell and came out the other side stronger? That he liked her sharp tongue or the fact that she understood his sarcasm? That there were times when she smiled at him that he actually felt fucking human for a minute? 'Mine' should have been enough.\n\nShe was holding the blanket around herself as if it were a shield. \"I don't know how to be....be anybody's.\" She turned her head away, hiding her face again. \"I'd disappoint you-\"\n\nShe bit down on her lower lip when he twisted his hand in her hair, forcing her to look up at him. \"You think I'm gonna let you disappoint me?\" He could hear the little whimpers die at the back of her throat, and he eased the pressure on her hair just little. \n\nShe looked like she might be about to say something, but he decided he didn't want to hear it. He growled and caught her lower lip in his teeth, grazing the sensitive flesh with one fang, just hard enough to draw blood. He expected her to fight, but the hesitant hand on his shoulder held him closer. Her arousal spiked, so did her fear, and between all that and the flavor of her blood it was all he could do not to fuck her right there. He sucked on her lip and teased the inside of her mouth with his tongue. \"Mine.\" "
    ],
    "authorname": "psyche_b_mused",
    "tags": [
        "victor creed",
        "virgin",
        "threat",
        "kiss",
        "ownership"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/what-the-cat-dragged-in-ch-03"
}
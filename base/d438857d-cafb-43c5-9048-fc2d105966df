{
    "title": "The Achen Enforcer Ch. 03",
    "pages": [
        "CHAPTER 3\n\nTwo days later, in the morning, Bode led Lyric past residential buildings and the park, past a center with a small theater and the robotic medical clinic. People drifted out of Bode's path as they tended to, not looking at him. Lyric was behind him, walking as exiles had to walk when they were with an Achen citizen.\n\nHe kept his eyes on her and on what was around them.\n\nThe weather was getting cooler, early autumn, a chill in the mornings. Lyric was dressed in a warm wrap. He didn't go fast, having given them enough time not to have to hurry, not wanting for her to arrive limping and then have to stand around.\n\nThe path opened to the Achen Square. They began their journey across the space, Bode's gut getting tight. He stopped when heard the sound of the transports, signaling her. As he had told her, Lyric came directly behind him and to his side, almost touching his shoulder and back, sheltering there.\n\nFive of the Achen Guard passed riding three transports. They were yelling, laughing. They had an exile woman on one of the transports. She had her eyes closed tight, clinging to the bar, her face pulled in a grimace. They'd gone to the farms to choose her.\n\nTwo of the transports swooped by an older exile domestic carrying laundry, the woman stopping where she was and closing her eyes tightly as they came close. They banked at the edge of the square and came back, ignoring her this time. They got near Bode, who turned his head and looked at them.\n\nThe Achen Guard veered away, no laughter now, glancing at him, and then they swarmed to a stop in front of the barracks, which housed the Achen Guard during their tenure. They were just young Achen men, receiving some training in marksmanship, but armed and on the transports, they were deadly.\n\nBode saw Lyric watching as they yanked the woman off the transport and stripped her right there, pushing her between them, pulling off her clothing. Her voice was loud, yelling, other Achens in the square ignoring all of it.\n\nThe men pulling the naked woman through the door and into the barracks and shut the door. It was expected of the Achen Guard. Their service was voluntary, but they couldn't have a companion until they had done their three years.\n\nWhen Bode began walking again, Lyric followed. In the center of the Achen Square, there was both a tall scaffold and also a larger-than-life statue of Magistrate Ilija holding up a plantling in his cupped hands, a man valiant enough to take control of a panicked settlement and turn half the population out to starve.\n\nThe scaffold in the center of the square was tall. People saw and made way for Bode, clearing a space, moving away. At the top of the scaffold were two magnetized poles. Lyric walked well because they went slow, not even limping when they arrived. Everyone who sponsored an exile or had chosen a companion was required to attend, as well as all of the exiles in the city, short blasts from the same horn that was used in the games to alert them.\n\nThe magistrate arrived.\n\nBode had put on his blacks this morning, the badge that declared his office, and then the holsters, buckling them to his hip. Lyric had seen the rods and reacted, staring at them and then at him. He'd met her eyes and she'd looked away. Exiles were familiar with the rods, a source of fear, a symbol of Achen cruelty. Bode had the punishment rod in one holster, the execution rod at his hip in the holster under it, lethal.\n\n\"Stand here,\" he said to Lyric, pointing to a place not far from the stairs. \"Don't speak to anyone, even if they speak to you. I've recorded a sponsor's directive. You won't be punished for it.\" He mounted the stairs, his face expressionless. When Bode reached the top, he turned and walked to stand in front of the poles, waiting.\n\nHe wasn't going to have time to take Lyric back to his rooms. She would have to come with him to the Enforcer's Division, to the charnel room, with the body.\n\nThe condemned exile was led up the stairs naked, his wrists and ankles in the marchettes. He was yelling and fighting. Bode glanced. Lyric was watching, her face tilted up. The Achen guards brought the exile's wrists and ankles to the posts where they sucked in, the man standing upright with his arms and his legs spread.\n\nThe magistrate mounted the stairs, joining them on the platform. He stepped to the enhancer, drawing himself up. \"Citizens of Achen,\" he said, his voice echoing in the space. \"No person dislikes what is about to happen more than I do. This exile assaulted one of our citizens. I want to be clear. This is not a punishment. His choices have been made, and he has already been sentenced to death. What the Achen enforcer does to him before he is executed is not for him. It is for the other exiles, so that they may learn better.\"\n\nThe crowd was quiet, Achen citizens whispering among themselves, exiles watching with careful expressions of studied indifference or averting their eyes. Nobody ever looked at the enforcer unless the enforcer was looking somewhere else, but Lyric did, her eyes fixed on him. He met them briefly, his eyes shifting when the magistrate turned to him.\n\n\"You may begin, Enforcer,\" the magistrate said. \"Two minutes, maximum setting, no grace and all of him.\"\n\nMaximum setting was rare, two minutes an eternity. It was a heavy sentence. Bode walked up to the exile and administered the bracer that would keep him from passing out from the pain, in the meat of his shoulder. The exile looked at Bode's face. His looked sick, pale with fear.\n\nBode spoke low, without moving his lips much. \"It has an end. Try to remember that.\"\n\n\"Set the clock,\" the magistrate said below.\n\nAn Achen at the bottom of the stairs hit a button and the top of one of the poles opened. A time display showed there, red numbers, a downward count.\n\n\"Run clock,\" Bode said.\n\nThe countdown began. Bode triggered the rod, maximum setting, touching the exile's shoulder. The man's yells began and then screams ripped through the courtyard, the exile arching as Bode ran the rod across his chest, down his ribs and to his belly, finding nerve centers, lingering.\n\nThe exile was jerking as Bode walked around behind him, passing the rod from one hand to his other around the pole without stopping. It ran up the back of the exile's leg, over his ass, and then down the other. The exile hadn't stopped screaming, becoming frantic, and now there were words interspersed as he began to beg, the tip coming around on his hip, traveling down the front of his leg, moving to the other with no break.\n\nIt was a long two minutes. In the last twenty seconds or so, the tip of the rod moved up the exile's inner thigh and caressed his balls and cock. The man's screams reached toward that note and found it and had nowhere left to go. The clock buzzed, the rod lifting. The exile collapsed into the restraints, still crying out, his voice slow to die.\n\nBode put the rod away, his movements practiced and economical. He pulled out the executioner rod. He looked at the magistrate, shifting his gaze once, seeing Lyric standing, her face averted. Em\u00ecl was next to her, Gram on her other side, both of them looking at her, Em\u00ecl talking. Bode faced forward.\n\n\"You may execute him now, Enforcer,\" the magistrate said.\n\nBode raised the rod. He touched the exile's chest and triggered it, a crackling noise. The exile arched. In a moment, he was hanging from the restraints. Bode walked forward, felt for his pulse and nodded to the magistrate. He gestured, the guards coming up with a litter, Bode reversing the polarity and releasing the body, the guards catching it.\n\nThe guards place the exile's body into the canvas and then rolled it, putting it on a litter to transport to the Enforcer's Division where Bode would place it on the belt in the charnel room to be cremated. He followed the body down the stairs, people dispersing. Bode walked to collect Lyric first, the guards going on without him.\n\n\"Little brother,\" Em\u00ecl greeted him. \"Grotesque, as always. Are you aware that you smile while you do it?\"\n\n\"Half-brother,\" Bode said. \"I just imagine that it's you.\"\n\nEm\u00ecl laughed, a short bark, beginning to move away, Gram his shadow. \"You're a death rattle, Bode. Don't forget what I said, little lame companion.\"\n\nBode turned, putting his hand on Lyric's arm, walking her toward the Enforcer Division. They followed the body. They had to catch up, Lyric having difficulty, the guards walking quickly. Bode couldn't afford for them to lag too far behind. By the time they got there, Lyric was limping. The guards waited as Bode opened the door with his handscan, a print signature, the Achen guards guiding the litter.\n\nBode walked across to the back room, his hand on Lyric's arm again, and opened the door to the charnel room. He saw one of the guards give Lyric a pitying glance where usually there was no pity. Bode could almost read his mind. So beautiful, and far too sweet-looking to be the enforcer's companion, the men imagining what he had done to her to make her limp so badly.\n\n\"Put the body there,\" Bode said, pointing to the conveyor belt and hitting a button, an electronic buzz as the oven heated, small pock sounds emerging from the heating metal.\n\nThe guards heaved the exile onto it indifferently, releasing, the body crashed onto it.\n\n\"Be careful of the equipment,\" Bode said, impassive.\n\nThe Achen Guard weren't soldiers, like in the old books. They were volunteers, primarily composed of young Achen men. It was an Achen tradition. Many older Achen men had retired from the Achen Guard. The Achen Guard did the bidding of the magistrate in return for privileges, the always-first-place-in-line kinds of privileges. In return, the magistrate had their loyalty.\n\n\"Sorry, Enforcer,\" one of the guards said, the men meeting each other's eyes, that check-in. They made their escape.\n\n\"Stand there,\" Bode said to Lyric, pointing to a place out of the sight of the cameras.\n\nLyric limped over, turning around and putting her back against the wall.\n\nBode's hand went into his pocket, flipping the switch. It would show him guiding the wrapped body into the oven, and he didn't have long.\n\nHe moved fast, going to the conveyor belt, heaving the exile onto his side and finding the end. \"Pay attention to where you're standing so you can return to it,\" he said to Lyric, pointing. \"Get the clothing from the middle drawer.\"\n\nShe seemed surprised, looking around and fixing her spot in her mind and then limping fast, finding the drawer and opening it. She pulled out the clothing. Bode unwrapped him, the exile keeping his body stiff, which helped. Bode finally found a naked shoulder, and then the exile was sucking air, coughing.\n\nBode held onto him, getting him sitting up.\n\nThe exile groaned, breathing fast. \"That fucking hurt, you evil bastard,\" the exile said, his voice strained.\n\n\"I tried to warn you, Jorden. Can you walk?\"\n\nJorden nodded and then looked when Lyric came with his clothes. She avoided looking at him and he pulled the clothing onto himself to hide his genitals, that exile modesty. \"Who's she?\"\n\n\"My companion,\" Bode said, his hands busy, ignoring Jorden's sharp look, directed at him. \"Her name is Lyric, from Tr\u00edafarm. Will you get news to her father, Devos, that you saw her and that she's well?\"\n\n\"Aye. I know Devos,\" Jorden said.\n\nBode brought the Achen marchette key to Jorden's marchettes. The removal of the marchettes was authorized, the exile being, according to the Achen computers, a dead man. They sprang open, the skin under them white and shrunken. He saw Lyric stop in closing the drawer, staring at Jorden's wrists, Jorden also staring at them, turning them over. No exile in Achen or the farms was ever without the marchettes, put on when they were five years old.\n\nUntil the exile died, of course, and the marchettes were reclaimed to go on to the next generation. Which meant Jordan was free. He couldn't be tracked. It was what Jorden had wanted, what he had come to request from Bode. Bode hadn't ever had anyone do it voluntarily before.\n\n\"I might have endured it just to beat that fucking Achen, I have to say, no offense to you,\" Jorden panted.\n\nBode laughed low. \"None taken. Was it worth the price?\"\n\n\"Yes, to have the weight of those fall away from me,\" Jorden said, nodding, still breathing fast, gazing at the marchettes that were sitting beside him. He looked at Bode, taking breaths between the sentences. \"I want to thank you, Enforcer, for allowing it. I know it was a risk for you. I'm happy it's done.\"\n\n\"We've got three minutes until the loop ends. Congratulations on your freedom, Jorden.\"\n\nJorden took a deep breath, standing up, shoving body parts into clothing, Lyric helping. He was shaking badly. Bode handed him a water bottle and Jorden drank, nodding his thanks and handing it back.\n\n\"Remember to wait until nightfall to go. Stay back, in the mouth of the tunnel,\" Bode said. He walked, pulling up a hatch, waving the exile on. \"Here,\" Bode said, removing and holding out a small bag from his pocket.\n\nJorden turning around while he was still on the stairs, taking it reflexively. He looked down at the bag and up at Bode.\n\n\"It's food,\" Bode said. \"It's not much. I had to carry it on me, but I imagine you didn't eat much before your ordeal, and it's hours until nightfall.\"\n\nJorden looked surprised. \"Thank you, Enforcer.\" He paused, looking at Lyric. \"Anything you want me to tell your father?\"\n\n\"That I love him. Tell him the enforcer treats me as well as he can and not to risk himself coming to Achen again,\" Lyric said quickly.\n\nJorden nodded, moving down, Bode throwing the hatch, catching it, and gently putting it down, making sure the seams were flush. \"Go stand over by the wall where you were, as close as you can get,\" he said to Lyric.\n\nShe went as quickly as she could, standing with her back to the wall like she had been. Bode found his mark on the floor, knowing no matter what he did, there'd be the slightest glitch. He waited, looking at the clock, a few more seconds before the loop would end.\n\nHe pressed the switch, moving casually, turning off the oven, his face impassive. \"Come here. Don't speak.\"\n\nLyric came over slowly, limping.\n\nBode picked up his slate, recording the termination of the exile, subject Jorden, number 5892470, recording that the body was cremated, the marchettes removed and disabled, and archiving it. He took Lyric's arm, bringing her out of the charnel room, not looking at her. The door locked behind him. She was still limping, all the walking they'd done at a fast pace.\n\nShe glanced at his face when he slowed. \"Thank you, Enforcer,\" she said softly, her breathing fast, her cheeks flushed.\n\nHis eyes slid to her and then he glanced up at cameras, not answering. When they came out of the door, he walked much more slowly. Bode helped, taking a little of her weight. They made their way toward the park, an amble. They didn't speak.\n\nBefore they got there, nobody looking and no cameras here, Bode went to the edge of the embankment, bringing her with him. She slipped and slid down the side of it, Bode keeping her upright, glancing at her foot.\n\nAt the bottom was a gully, and he was not risking her foot on those rocks. He swept her up, Lyric holding on to his neck. He carried her over it, aware of her eyes on his face. He stepped on one rock, and then another, finding his balance, her arms tightening. He looked down and smiled at her, Lyric looking so surprised to see it, and then he made the other side. He didn't set her down, since it wasn't far and he didn't mind.\n\nThe outlet tunnel was there. He put her on her feet, taking her hand and going into it, and then found the smaller ladder not far. Putting her in front of him, he watched her climb up, looking all around, a kind of cement loft, light falling from a grate in the roof. It was quiet, small piles of dried leaves, autumn making them colorful.\n\n\"We can't make too much noise, although I don't imagine they would know where it was coming from,\" he said in a normal voice. He walked and got a blanket. \"But we can speak here. There's no surveillance. The blanket isn't the cleanest, but it's soft to sit on.\" He set it on the ground.\n\nWhen he gestured, she walked to it, limping. It was chilly down here. She saw him glance at her foot. \"I'm fine, Enforcer,\" she said under her breath. She sat, her hands coming around her knees.\n\nBode stood over her, removing his holsters and setting the rods aside carefully. He saw her eyes follow them. He sat beside her on the blanket and moved down, straightening her leg, pulling off her shoe carefully. He held her foot, his touch gentle, looking at it. It was swollen. He pressed, a dispersed, general pressure, watching her face. \"Does it hurt when I do that?\"\n\n\"No,\" she said, glancing at him. \"It feels good. Sometimes I rub it. It gets tight.\"\n\nHe continued to rub, staying gentle. \"I've never brought anyone here,\" he said. \"I found this pipe when I was young. I told my teacher, Maeter Ton, about it, but he couldn't come here. It would have been too much of a risk for an exile, and he wasn't agile. I don't think anyone knows it's here anymore. Unfortunately, it doesn't lead anywhere interesting. At the time, I was sure he would like it as much as I did. I don't know what I was thinking.\"\n\nHer glance was curious. \"You were a child, I imagine. I had a place like that, a big tree all by itself in the field by the edge of my father's property. I thought it was magical. I couldn't get up there, though, after...\" she said, gesturing at her foot.\n\n\"How did it happen?\"\n\n\"A cast iron winch fell on it. I shouldn't have been playing there. I was seven. The exile mender at Eftafarm, he set it, but he said there were too many small bones crushed. In Achen, they put it under a machine and I watched as the metal arms and instruments opened my foot and did things. I couldn't feel it. Then the machine put a covering on it. After I went home, after it released one day and came off, my foot was practically whole. But they told me the computer said I was lame permanently. It will never be completely right.\"\n\n\"You walk much better now,\" he said.\n\nHe kept rubbing, feeling the tension in her foot ease, seeing the lines of pain in her face relaxing. She exhaled. \"Thank you,\" she said, her eyes searching his face. \"I don't know which one you are.\"\n\nHe reached for her shoe, putting it back on and moving back up to sit beside her. \"The man or the monster?\" he said.\n\nShe hesitated and then she nodded.\n\n\"Sure you do,\" he said. \"I'm both. Have I ever failed to pleasure you?\"\n\nHer eyes slid away from his and she flushed. She didn't want to talk about that. \"Why are you helping the exiles?\"\n\n\"My mother was a companion. She was executed by the magistrate, my father, when I was eleven.\"\n\n\"You knew her?\"\n\n\"Yes,\" Bode said. Most exile companions were sent home to the farms after they were requisitioned for a child, the infant taken and given to the Achen wives to raise. It wasn't good for the child to stay with the exile parent. The child could become attached, and would be an Achen citizen. \"I grew up in my rooms.\"\n\nShe made a face. \"It's so boring in the rooms,\" she said.\n\nBode gave a soft laugh, happy she would still speak to him. \"I spent most of my time on the computer. I got very good at it. And I lived with Maeter Ton after my mother died, and he was a teacher, so I studied a great deal.\"\n\n\"Is your teacher how you learned about them? The council?\" Lyric said.\n\n\"Yes. Maeter Ton contacted the Council of Ten when I was fifteen and persuaded them I could be trusted. By the time I was sixteen, I had set up a communication relay for messages. When I was seventeen, shortly after I met you the first time, I became the enforcer and found the passage out of the charnel room under the rolling storage shelves. What did Em\u00ecl say to you?\"",
        "She looked away. \"I didn't speak to him, Enforcer, as you said.\"\n\n\"I know. What did he say?\"\n\nHer profile was clean, long lashes.\n\nShe reported it faithfully. \"He said that I shouldn't look away,\" she answered. \"That no matter how handsome you were, this was the ugliness in you, and that I should watch. That you took pleasure from pain and he knew you had done terrible things to me. That he was going to take me from you, and that the magistrate would allow it and not to fear you because you wouldn't be able to do anything to stop it.\" She stopped, adding, \"And that I'm beautiful.\"\n\n\"You are beautiful,\" Bode agreed, distracted. Thinking. After a few moments, he focused on her. \"Is your foot rested? Are you ready to go back and have me be a prick again?\"\n\n\"Not really,\" she said under her breath as he rose, putting out his hand.\n\nHe drew her up. When she was steady, he folded the blanket and put it back, picking up the holsters and buckling them, seeing her eyes on them again. \"We'll walk slowly. I swear that this has an end, Lyric.\"\n\nHer face got that way it did right before she was going to cry. \"How does this end ever? I am trapped here now and you're cruel because you say you have to be,\" she said, and then she looked down, her voice getting low. \"After I went home from the munificentia, I thought about you. I told myself I was being silly. I knew that you were an Achen. I just never imagined I would be your companion.\"\n\nBode approached her, his hand going to her cheek, stroking, her skin soft. \"I didn't think I would see you again, either,\" he said quietly.\n\nShe looked up and then leaned into him. Bode felt a wave, his eyes going to her mouth, his heart beginning to pound. Lyric. Fuck, everything in him wanted it. He clenched his jaw and stepped away. \"Don't fear, dahlia,\" he said. \"You won't be trapped here with me forever.\"\n\n\"What can you do?\"\n\nBode took her hand and smiled at her, Lyric looking surprised again. \"Free you, of course.\"\n\nHe brought her back, his hand still on her arm, the rods in their holster bumping on his thigh. People's eyes darting to him and then away. Her foot was better because they'd rested it, but he still walked her slowly.\n\nPeople made way for him in the halls, finding a reason to go another way or retreat until he'd passed. If they did walk by him, they avoided his eyes. Lyric watched the other Achens and then looked at him, his eyes flickering, acknowledging that she'd noticed.\n\nWhen they got to his rooms, Bode propelled her toward the bathroom without speaking to her, always careful. Lyric took the hint, going in and closing the door.\n\nWhen she came out, he stripped her, which she fought nicely, her soft grunts of effort and then her shriek when he brought her and sat, smacking her bare bottom.\n\nHe was keenly aware he was still in the blacks of his office, Lyric over his knee, that he was still wearing his badge, that he still had both rods hanging off his hip. When he pulled her upright, he saw her glance at them again. For a moment, he saw her on his table, her nipples under the rod, her legs spread, his cock aching he was so hard now. His face was impassive.\n\nHe brought her to the wall. Forcing her to her knees, he put her wrists on the wall above her head, evenly spaced. He went and made himself a drink, slipping off his shoes and standing at the window, his back to her, looking out. The glass was heavy. He listened to the ice. Lyric was quiet. She'd learned that lesson early with him, for sure.\n\nEm\u00ecl was a braggart. But the magistrate favored Em\u00ecl because he was the heir, the next magistrate. Em\u00ecl's mother had been Fati, an Achen woman, the magistrate's wife, and not a companion like Bode's mother. And Tibrus was proud of his eldest son, proud of his family line, tracing it back to the first magistrate, Ilija. It was possible Em\u00ecl could persuade Tibrus to take Lyric from Bode, if Em\u00ecl could find some sort of excuse.\n\nTheir father wouldn't do it outright, at least not just to please Em\u00ecl. But Tibrus would reward cleverness. Em\u00ecl had signaled he was going to try. Bode sipped again, thinking.\n\nHe turned, his eyes sliding to her. He couldn't seem to find a bottom to it, this need for her. It had just gotten worse. When he turned, she looked away. His eyes went to her body, her hair wild, black curls with a red nipple peeking through, her navel. Her round hips, the naked puffy triangle between her legs. His eyes returned to her mouth, full and pink. He felt a deep sinking in his gut and then a surge. Yes, that was what he wanted.\n\nThere was no point in waiting anyway. Bode threw down the rest of his drink. He approached her, looking down at her. He slowly unbuckled his belt with the rods, holding her eyes. He pulled them off, setting them aside within reach, still in their holsters. Her eyes went to them and she began to breathe faster. He grinned, squatting in front of her, reaching for her. She squirmed away and he slapped her breast.\n\nShe stayed still after that, letting him play with her nipples, her cheeks flushing. She didn't meet his eyes. He tugged and rolled, her breathing getting faster.\n\nHe reached for her pussy and she gave a cry of rage, her legs free, kicking at him. Bode laughed, grappling with her. When he was done, she was sitting on her heels with her legs spread, his hands on her knees pushing them open. His face was close to hers. He looked down at her pussy and then up at her eyes. He slowly licked his fingers and reached to touch her clitoris, long strokes over the whole area, ending by pushing his fingers into her pussy a little, gently.\n\nShe closed her eyes, her face flushing more as he worked her the way she liked. Lyric's hips were moving, tiny motions, meeting him. She was biting her lip. He leaned forward and dipped, capturing a hard nipple, increasing the motions of his hand, her clit a hard nub now. Her pussy skin was soft and getting slippery. She tensed, panting, offering her nipples as he stopped, withdrawing his hand. He straightened and stood over her.\n\nHe was still in his blacks. Opening his pants, he cleared the cloth. He was very hard, jutting. When he brought his cock close to her mouth, she turned her face away sharply.\n\nBode squatted in front of her again, his hand running idly up and down his length, sensitive. \"You know what I want, companion. I know you saw Em\u00ecl do it at the arena. You're going to take me in your mouth until I come. If you think of refusing, think about this, instead--I have the punishment rod right there. Sometimes when a woman is sent to me, her punishment includes touching the rod on her nipples,\" he said, rubbing a hard bud and going to the other, pinching and alternating. \"Would you like that? I could pull it out now.\" Fuck, he was turned on.\n\nShe shook her head, breathing fast. He reached under her. She'd gotten very wet, his fingers slippery. \"I punish their pussies, as well. I touch the rod right here,\" he said, stroking her clitoris, small tugs, telling her the truth. \"I'd like to punish you with it. Do you want me to? I could make you come screaming.\"\n\n\"No,\" she said quickly, but she pulsed against his fingers. \"Please, don't.\"\n\nHe looked down at her pussy, thinking about it, her clit a hard, distended nub covered in slick. He hadn't ever done it to a woman who was already aroused. His cock convulsed, deep and long. He wanted to. He rubbed faster. She panted and then tensed, going still, her eyes unfocusing. He pulled his hand away. Lyric released her breath, turning her face into her arm.\n\nHe straightened. \"Get on your knees.\"\n\nHer knees came down. Her wrists were still restrained above her. Bode brought his cock near her mouth again. \"If you don't do exactly what I say right now, I'm going to get the rod and punish you between your legs until you come.\" He held her eyes, telling her the truth again. \"I want to, so you're going to have to dissuade me. You wouldn't like it at all until you did.\"\n\nShe looked at his cock. He gave her a moment to decide. He'd be happy either way.\n\n\"Lick me,\" he said.\n\nShe grimaced and leaned forward, her tongue coming out. She licked him.\n\n\"More,\" he said, putting his hand against the wall above her, grunting lightly as she began with small fast licks all around the head. \"Good. Slow down.\"\n\nShe began licking all around the head more slowly.\n\n\"That's right,\" he said, looking down, stroking her cheek and then slapping her lightly. \"Do that for a time. Make me enjoy it, pretty companion, as long as possible, because you're not going to like the next part. You're going to want to make me come as soon as possible.\" He grunted when she did that, using her whole tongue, running all over his cock. \"The ridge under,\" he breathed, his cock aching and jumping. \"Lick there.\"\n\nYes, that felt good, distracting him. His breath released when she found that place, the triangle under the head of his cock, tonguing it. He grasped her hair behind her head, angling, slipping between those full lips. \"Suck gently, just the head,\" he said, his hips jerking, breathing fast, looking at her, watching her do that. \"Now more, all around. In and out of your mouth. Just like that. Fuck.\"\n\nHe pulled out, rubbing her spit up and down his cock. \"Open your mouth,\" he said, squeezing down his length, his cock heavy in his hand, hard and thick.\n\nShe hesitated and then opened. He put his cock at her lips, rocking into her mouth. \"Suck all the way down to the tip and then push back in. Take me as deep as you can.\"\n\nHer spit was everywhere, her hair brushing his thighs. She couldn't take his cock deep, but she did what he said. He let her pleasure him, the urge to thrust getting stronger. He began pulling her head closer by her hair. He hit the back of her throat and she immediately gagged, coughing. He pulled out, continuing to work himself with his hand.\n\nShe looked up at him, her mouth wet and swollen.\n\n\"This is the part you're not going to like,\" he said, breathing heavily. \"Open your mouth.\"\n\nHe wasn't going to last long anyway. She looked reluctant. He fisted her hair, her face tilting up, his eyes sliding to the rod, his cock lifting in his hand, a surge. Lyric also glanced at the rods and opened her mouth, pushing him in, Bode looking down at her again.\n\nHe held onto her hair and pushed into her throat. His head dropped back as he began to thrust, long slow strokes. She was struggling, her throat trying to expel him. He grunted.\n\nHe pulled out as she gasped for air, panting and gagging. He waited. \"Again,\" he said, thrusting into her mouth, rocking, and then deep into her throat, guiding her with his hand in her hair. He let her breathe again. He could do this forever. After three or four times, she was a mess, her hair everywhere, spit everywhere, completely sexy.\n\nHe pulled out, letting her breathe. He was panting as much as she was, working himself with his hand. He could have done this a great deal more violently. When she had found her breath, he waited a little more and then brought her to him, a sharp jerk, nudging her lips. He pushed deep, thrusting fast, fucking her throat. He felt it on him, his cock filling with pressure.\"Pretty companion,\" he breathed, thrusting, the rough hair at the base of his cock touching her lips. He grunted. \"Swallow it.\"\n\nHe cried out, pleasure starting low, his balls tight. He began to release, holding her there. She was struggling, everything about her warm soft heat and pressure. His cock lifted, giving her the last of it. He grunted hard, shuddering, and then he pulled out of her throat.\n\nShe immediately heaved her breath, coughing, her head hanging. She gagged once, and then again, swallowing. He watched her, reaching down to grasp her hair and pull her head back. She looked up at him, still panting, her mouth swollen.\n\n\"Spread your legs.\"\n\nShe didn't move.\n\nBode smiled lightly and traced her full lips with his finger, pink, slippery with spit and his cum, his breathing still fast as well. \"Are you refusing to do what I say?\" His cock stirred, still thick, her eyes shifting to it. He could do both, too. His cock moved again.\n\nShe opened her legs.\n\nBode squatted. His fingers went to her pussy. \"Look at me. Don't stop looking at me.\" He brought her up fast, his fingers deep in her pussy, coming out and rubbing her clit, going in again. He watched her eyes, enjoying her pleasure, that beautiful deep color like grain liquor.\n\nShe fought it and his cock stirred again. She shook her head and cried out when he pinched her clit, tugging, his other hand pinching her nipple, going to the other. \"Come on my fingers,\" he said softly. \"That's it.\"\n\nShe arched, making a strangled sound, climaxing, humping his hand. Her legs spread more, pushing herself back against the wall behind her. He stroked her after, up and down her slit as she winced away. Letting her close her thighs, he straightened.\n\nPutting on his clothes, he walked back and slapped the wall, freeing her and going into his office. Bode shut the door."
    ],
    "authorname": "semiosis50",
    "tags": [
        "non con",
        "reluctance",
        "bdsm",
        "sci-fi",
        "maledom"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/the-achen-enforcer-ch-03"
}
{
    "title": "Moonlight Window",
    "pages": [
        "My wife and I never knew how fulfilling a resort stay could be.\n\nMy wife, Lara, and I checked into a beautiful, very expensive country resort in Vermont. It was late Spring, and the grounds were covered with blossoming bushes. We were there for what we hoped would be a really romantic three-day weekend.\n\nWe reserved a ground-floor room on the mountain side of the resort. Those rooms had small patios instead of balconies like the upper stories. The bellman, Norm, showed us the sliding glass door to the patio, and said to keep it locked when we weren't in the room. He explained that the opening in the hedge that partially shielded the patio was designed so that we not only had a view of the mountain, but also had direct access to the hiking trails that linked the three resorts in the area.\n\n\"Occasionally hikers use the benches in the resort's patios to rest for a moment if the adjacent rooms look unoccupied. We haven't had any problems with people doing so, as the trail is privately owned by the three resorts, and our clientele tended to be very upscale. I recommend being as safe as possible, though.\"\n\nHe clicked the lock and said, \"You know. Just in case.\"\n\nNorm showed us the maps of the trails, and explained that between the three resorts there were several really great restaurants along with some casual ones.\n\n\"We already have a reservation at Jefferey's,\" I said.\n\n\"Excellent!\" he replied. \"It's probably the best one. Try the dessert chef's new creation, the spiced pears.\n\nPointing to the check-in package I had tossed on the coffee table, Norm said, \"Did they explain your Resort Card at the front desk?\"\n\nPulling the blue and green cards from the check-in package I said, \"Well, they said they were our room keys and could be used to charge things like meals and stuff from the convenience store.\"\n\n\"They're more than that,\" the Norm said proudly. \"You can use them for the spa, and they work the gate at the pool and the door to the Fitness Center. Your card will open the garage gate, too. Did you know that all three of the mountain resorts have reciprocal agreements?\"\n\n\"No. What sort?\"\n\n\"Your Resort Card will let you pass from one property to the other, and you can even use it at the restaurants at the other two resorts. You use the pools there, too. It is your key and your resort ID. The resorts are designed so that you can hike all day without having to go to your home resort. When you feel like eating or taking a cool dip, you can go to the nearest one and use the amenities. We get as many of their guests as they get ours, so everything works out evenly.\n\n\"We just ask that you bring your own swim attire. Towels and everything else are provided at each pool and changing room.\"\n\nLara said, \"I'm lovin' this already!\"\n\nWe tipped the Norm and decided to relax.\n\nWe spent the remainder of the afternoon at the pool, and then came back to the room for a shower. We sat in the patio with some cold sodas until it was time to dress for dinner. The patio had two benches with a table between them. We sat together on the bench facing the opening in the hedge and spent an enjoyable half hour looking at the mountain and saying hello to the passers-by on the trail.\n\nWe looked at the trail maps in the check-in package and planned a couple of hikes. We are both in our mid forties. We're not terribly athletic, but we can both walk a country trail for hours without getting exhausted. One of the reasons we picked this hotel was do a little hiking.\n\nIt was getting towards dinner time, so we started to dress.\n\nLara put on a simple black dress with a pearl necklace. As she put on the necklace, she winked. I smiled, knowingly, but that is for later in this tale.\n\nLara's 30B bust line and full hips were accentuated by the pencil dress, and her legs by the three inch high heels. With them, her 5'5\" frame was about three inches shorter than me. Beth's brunette hair came down just over her shoulders and nicely framed her delicate neck and deep cleavage.\n\nI looked into her soft, brown eyes and said, \"Sweetie, you are still the sexiest woman I have ever seen.\"\n\nShe said, \"And you are the hunkiest hunk I have ever seen.\"\n\n\"'Hunkiest hunk?'\" I said. \"Talk about breaking the mood of a tender moment!\"\n\n\"Your flattery caught me by surprise, Honey. It was the first thing that popped into my head,\" she said sheepishly.\n\n\"I got something I can pop in your head after dinner,\" I leered.\n\nI had put on my sport coat and slacks by then.\n\nLara said, \"'Pop' my ass. Put on your tie and let's go. I'm hungry, hunk.\"\n\nI laughed as I put on my tie and we left for dinner.\n\nJefferey's, the resort's famous steakhouse, was owned by Chef Jefferey Whittenstone. He was not only a world-class chef and master of all things meat, but he was known for being one of the most demanding chefs in the business. His pastry and dessert chefs had to be among the finest in the industry, and he expected them to constantly create new sensations.\n\nWe were a little early, so we sat in the lounge and had a drink. Lara had a martini, and I had a single malt scotch, Glendronach 15-year-old.\n\nThe meal was incredible, and so was the wine we ordered with it.\n\nThe steaks were nothing short of sensuous! My ribeye was cooked to medium rare perfection. Its dry-aged flavor was as good as I had ever experienced, and it was so tender that I didn't need a steak knife to cut it.\n\nLara's filet was juicy and tender to a fault. She teased me with a bite when she held out a morsel on the end of her fork. As I tried to bite it, she moved it back just a little. When I stopped to figure out what her game was, she slowly touched the piece of steak to my upper lip and coated it with its juice.\n\nShe pulled the fork back a little, saying, \"Taste the juice before you bite into the steak.\"\n\nI ran my tongue over my lip as instructed.\n\n\"Incredible! The smoke from the grill, the fatty juice from the meat and the light touch of seasoning are all there in one simple lick.\"\n\nShe put the fork back to my mouth, and I took the morsel with my teeth.\n\n\"Oh,\" I sighed. \"Mine is great. Yours is even better.\"\n\nEvery bit of the meal was that good. The asparagus with B\u00e9arnaise sauce, the mushrooms saut\u00e9ed in marsala, and the fresh-baked French bread with sweet butter were all sheer perfection. We expected good food, but that meal was one of those rare ones where everything is so good that you wish you could lick the plate.\n\nWe don't normally drink very much. The wine was so well paired with our steaks, though, that we finished the whole bottle in spite of our pre-dinner drinks.\n\nThe spiced pear desert that Lara ordered at our Norm's suggestion involved spiced pears poached in cream and rum over house-made vanilla ice cream.\n\n\"Wow! He really knew what he was talking about,\" she said. \"Sam, this is finger-licking good.\"\n\nTo prove the point, she scooped up a finger-full of the sauce and held it out for me to taste.\n\nNormally that would have been out of place for us, especially in an elegant restaurant. The pre-dinner cocktails and the wine had gotten to both of us a little, and I leaned over and sucked the sauce off her finger. It was fantastic!\n\nI leaned a little closer to her and whispered, \"I would like to get a pint of the sauce to go so I can lick it off a little more than your finger.\"\n\nShe smiled and whispered back, \"There are a few 'licking places' I have in mind for starters.\"\n\nI used my Resort Card to pay for the meal, and we headed back to our room. Jefferey's was a five minute walk from our room. We strolled casually back, arm-in-arm. The resort had a lot of little odd corners and nooks where guests could sit and look at the mountain and the valley below.\n\nWe found a deserted one and used it for a little romance. I took Lara in my arms.\n\n\"I was serious back in the room. I still think you are the sexiest girl I have ever known.\"\n\nShe looked up into my eyes.\n\n\"I love it when you say that. After all these years, I still believe you are the perfect man for me.\"\n\nWe kissed for a few minutes, enjoying the quiet moment in each others' arms.\n\n\"Let's continue this back in the room,\" I said.\n\nWith that, we walked the rest of the way back and entered the room.\n\nBefore I could turn on the lights, she grabbed my hand, led me to the bed and sat me down. The Moon was full, and the room was flooded with its light. I could see her reach for her zipper as I quickly took off my coat and tie.\n\nShe asked, \"Hon?\"\n\n\"Yeah?\"\n\n\"Menu? You pick tonight.\"\n\n----------\n\n\"Menu\" is shortcut for the sex menu we invented during our marriage. Sometimes she would let me pick the selection, and sometimes I would let her. It was like ordering off a Chinese menu.\n\n\"Column A\" referred to our attire. It included slips, half-slips, panties, stockings, garter belts, bras, and accessories (velvet ribbon choker, dangly earrings, high heels, etc). Well, that is, for her.\n\nFor me Column A consisted of me being naked or having on shorts to start. Lara never wanted anything else, except for one time on a cruise ship when she wanted to watch me do a striptease out of my tux. It didn't really turn out to be that sexy, and after that, it was just \"naked\" or \"shorts.\"\n\n\"Column B\" meant just physical sex. The items in Column B included a straight fuck (missionary or cowgirl), oral sex, mutual masturbation and so on. The menu required that Column B always start with an appetizer of extended foreplay or a taste of something from Column C. That was understood.\n\n\"Column C\" meant voyeurism and fantasies: a trip to Fantasy World with the other putting on a show. Well, uh, that's not exactly accurate. It meant me masturbating while she put on a show until she climaxed. I love to watch her doing something sensual and then masturbating, and she just loves getting me horny and watching her do it.\n\nShe said it made her feel desired, and I always told her that she was.\n\nColum C fantasies included bedroom sex, public sex, sex while someone watches through a window, sex where someone stumbles upon us some place where we had thought we were in private . . . well, you get the Idea.\n\nAh, Fantasy World! I made up stories about situations where people could watch her, and she loved every word. The wilder the situation, the more she loved it. But they were only stories. I knew she would be mortified if anyone but me actually saw her naked, let alone masturbating. The stories drove her wild, though, and she usually had an orgasm while I was telling them to her.\n\nThe reason I was such a successful storyteller is that most of the stories were based on her teenage masturbation fantasies.\n\nShe described those fantasies years ago.\n\n\"Whenever my sister was not around, I would go to our bedroom and masturbate with my hairbrush. I would imagine men standing around me, rubbing on their cocks and ejaculating as I came.\n\n\"Sometimes I would imagine the men touching me or licking me,\" she confessed.\n\nAny time we fucked and she was having a hard time reaching climax, all I would have to do would was stand up and watch her while she masturbated. If I even leaned over as if to lick her belly or thighs, she would often cum before my mouth ever touched her. It was really great to have a reliable \"ejector button\" whenever we needed to finish and she couldn't seem to.\n\nShe told me about those fantasies well before we were married, and it brought me closer to her knowing that she was willing to share something so intimate with me. What I didn't know at the time was that another level to those fantasies had developed.\n\nAfter we were married for a few years, she finally confessed something else to me.\n\n\"Honey, there's something that I want to share with you, and I hope it excites you as much as it does me.\"\n\n\"Believe me. You have my undivided attention,\" I said with anticipation.\n\n\"For some time now, I have been fantasizing about having women watch and touch me, too.\"\n\nThat had hit me like a bombshell! Like most guys, I sometimes thought about a threesome, but hearing my wife say that she fantasized about it, too, made me grab her.\n\n\"Excite me?\" I asked. \"Hell, just your telling me is just about to make me cum!\" I said as I tore her clothes off and fucked her right there.\n\nTrue to my word, I came fairly soon. Too soon. It was so soon that I had to put a finger in her pussy while I watched her masturbate.\n\nI decided to try out this new Column C menu item right away.\n\nAs she rubbed on herself, I said, \"How would you like to have a woman's hands stripping of your clothes while I watch her doing it to you?\"\n\n\"Oh, yeah!!\"\n\n\"She's going to put her hands on your breasts and caress you through the silk of your slip.\"\n\n\"I want that. I want her to touch me. Make her lick my breasts!\" she panted. \"Oh. Yeahhhh!\"\n\nShe responded as I expected, and a few more comments about a woman licking her breasts and caressing her body were all it took to bring her to a gasping, screaming climax.\n\n\"Ohhh. Lick me! Touch me! I want to feel it nowwww! Ahhhhh, yeahhhhhhh!\"\n\nWe sat and cuddled after that session. I asked her where the heck that fantasy had come from.\n\n\"You know Carmen and Helen, right?\" she asked.\n\n\"The two lesbians at your firm? Yeah, I met them and their partners at the company picnic and at the Christmas party. They seemed nice.\n\n\"Hey! Wait a minute! Don't tell me you did it with one of them!\"\n\n\"No, nothing like that, silly. You know I would never cheat on you! I'm surprised you even thought that!\"\n\nShe gave me a playful punch on the arm.\n\n\"Sorry. My mind was so full of erotic possibilities, and that just popped out. So where did you get the idea?\"\n\n\"Okay,\" she continued, \"everyone at work knows they are lesbians, but it's only because they openly bring their partners to company events. They are smart and hardworking. They are great to be around and their sexual orientation is never an issue.\n\n\"I really love them as valuable employees and good friends, and would never bring up their sexuality in the workplace.\n\n\"Carmen is one of the paralegals who do research for me, you know. One day about two months ago when I was feeling horny at work, but was unable to do anything about it at my desk, she came in to give me the brief on a case we were trying the next week. As she handed me the folio, a couple of papers slipped out and fell on the floor. She knelt down near me to pick them up. She was wearing one of those tops with a straight neckline.\"\n\nShe drew her fingers across her chest to show the size of the opening at. I nodded and said I knew the kind of top she was talking about.\n\n\"Like your yellow summer dress.\"\n\n\"Yes. That's it. Well, kneeling in front of me like that, I got a good look at her breasts. She was wearing a light blue bra, and I could see all the way down to her waist.\"\n\n\"Into downblouse erotica now, are we?\" I joked.\n\nTo my surprise, she said, \"Uh, yeah, I guess I am. Looking at her breasts hanging there in front of me got me even hotter. I could imagine her partner, Paula, caressing them. It made me still hotter.\n\n\"When she got up, handed me the folio and left, I had to go to my bathroom and rub on myself until I came! While I did it, I fantasized about watching those breasts while she watched me rub on my pussy. It was the first time I had ever thought about masturbating in front of a woman, and I couldn't believe how hot it made me.\"\n\n\"It's a good thing partners at your firm have bathrooms in their offices,\" I commented, \"because fingering yourself in the public bathroom might have attracted attention.\"\n\nShe nodded in agreement.\n\n\"And I can't believe how hot it's making me right now,\" I added.\n\nLara smiled and started stroking me as she continued.\n\n\"I began to have thoughts about what it would like for me to masturbate while Carmen or Helen watched. When I masturbated alone or made love to you, I would often think about those women watching me and maybe taking off my clothes and touching me. It always made me cum fairly quickly, too. I was pretty sure I could never actually do it, but thinking about it is completely erotic. After a while I added mutual fondling where another woman and I caressed each other. It took me a while to get comfortable enough with it to tell you.\"\n\n\"Oh, Lara, that's so hot! I can see it in my head right now!\"\n\n\"So, you would like to see a woman undress me, lay me on the bed and watch me masturbate in front of her?\"\n\n\"Ah. Fuck yeah. Hot . . .\"\n\n\"And what would you think about her touching me? Maybe with her hand on my bra? How about her hand under my slip?\"\n\n\"I . . . think-nk-nk it's . . . Ohhhh! Yeahhh!\"\n\nI discovered that she had also found an \"ejector\" button for me, as well, as I came in her hand as she was talking.\n\nAfter that, any time I was having trouble getting off, Lara would whisper in my ear something like, \"Helen is downstairs right now. I'm going to bring her up, and you can watch us slowly take off our dresses and caress our bodies through our slips.\"\n\nShe never had to make it much past the \"slip\" part before I came. Both of us had a fetish for silky slips, half slips, camisoles and demi-bras. I kept Lara well stocked in them, and she loved to wear them while we were making love or watching each other masturbate. I loved the sensuous feel of her body through the silky material, and she thoroughly enjoyed my looking at her in them.\n\nOver time, we \"invited\" other women we knew into our fantasy world, and even just made some up.\n\nThe Menu is also a handy tool when \"shopping.\" If we are in a lingerie shop, all ether of us has to do is hold up an item and say to the other, \"Column A?\" A thumbs up means she tries it on. A thumbs down means it goes back on the rack.\n\nThe same thing applies when we are searching for new characters to inhabit Fantasy World. If one of us spots a hot woman, asking the other \"Column C?\" is answered with either a nod of the head or a shake. No one else knows what the hell we are talking about, so we can even do it at parties!\n\n----------\n\nNow I was sitting on the bed at the resort thinking about what I wanted that night.\n\nI could see her running her hands up and down her body over the dress while I deliberated, and she could see me getting aroused.\n\nI said, \"Forget Column A. You're already wearing it. I think I want Column B, heavy on the foreplay.\"\n\n\"The dress,\" I said. \"Take it off.\"\n\n\"Oooo. Sweetie wants a strip show and pussy tonight. I like that! One main course from Column B and a taste from Column C. Kinky!\"\n\nShe reached up and pulled the dress from her shoulders. As she slid it down, I could see that she was wearing a lacy black demi-bra and a silky black half slip.\n\n\"I hope that's the one with the slit up the back. See that chair? I'm planning on bending you over it and using that slit.\"\n\nThe slit was trimmed in soft lace that matched the lace on her bra. The feel of either of them whenever I fondled her in them drove me wild! Feeling the silky slit on my dick and balls while I pumped her from behind was even better!\n\nShe replied, \"You're in luck. I'll bend over so far that you can see me with my fingers on my pussy, and when you're hard, we'll do it with the slip still on.\"\n\nGod, did she know just how to push my buttons!\n\nShe swayed while her hands played over her body. She caressed her breasts and slowly moved down her torso and then put her hand inside the waistband of the slip. I could see her hand working under the nylon.\n\nShe turned around and bent over, and in the moonlight I could see her hand massaging the crotch of her panties through the now-open slit in the slip. She worked herself for several minutes, and I watched with my hand in my shorts.\n\nFinally, I walked over to her. She turned around and slid her hand down my shorts. To her satisfaction, by penis was rock hard. She pulled my shorts all the way down, and I stepped out of them as she gave my penis a teasing lick as her face passed by. It sent a shudder through my body, and I stood her up.",
        "\"Forget the chair. Turn around and put your hands on the door,\" I said.\n\nShe turned around and did as I said.\n\nThe glass door was covered by the thin privacy curtain. The heavy light-blocking drapes were open, but the thin nylon privacy curtain let us see out without anyone seeing in as long as we didn't turn on the lights.\n\nWe could see the moonlight on the mountain, and the whole scene with her standing silhouetted against the mountain was incredibly erotic. I could see her hips and breasts covered in silky fabric that I was longing to caress. The pearl necklace around her neck shone in the moonlight and added to the sexy ensemble. I had plans for it later.\n\n\"You're overdressed,\" I said.\n\nShe was bent over with her hands still on the curtain-covered glass door. I reached through the slit, which went almost to her ass, and started to pull down her panties.\n\n\"Do my legs,\" she purred.\n\nShe had her panties on over her garter belt and black silk stockings. We both loved the feel as I slowly lowered her panties while caressing her silk-covered legs. The stockings were the type with the black seam down the back. We both adored retro-looking lingerie. As I caressed her legs she moaned slightly.\n\n\"Ohhh. I love your hands on my legs. There! Stay there for a little while. Mmm. Lower. Yeah, feels good. Yeah, behind my knees. Oh, right there. Ahhh. God, I love those fingers!\"\n\nFinally the panties were on the floor, and she stepped out of them. I threw them across the room.\n\nWhen I stood up, the head of my erect penis brushed over the cool silky cloth of the half slip. I stood behind her, enjoying this sensation as I reached around her and cupped her breasts. Her breasts were firm for a woman in her forties, and could best be described as tear-drop. They needed a bra for cleavage, but were still fairly pert, even without one.\n\nWith the demi-bra on, her breasts were high and tight. I could feel her pink nipples hardening under the bra as I played with them. Her nipples weren't huge, but they were more than enough to go past my lips and teeth and into my mouth when I sucked on them.\n\nI whispered again, \"I'm going to watch you lift up your slip and caress your pussy for a while before I lean you way over and fuck you from behind.\"\n\nBefore she could respond, I saw movement out of the corner of my eye. I looked toward the source of the movement and saw that there were two people sitting on one of the benches in our patio! The privacy curtains distorted the image, so I couldn't see clearly what they were doing.\n\nI said, \"Lara, don't move or make a sound.\"\n\nShe froze.\n\nI pulled the curtains open an inch or so.\n\nWe could now see that there was a couple sitting not ten feet away, and they were engaged in some really heavy petting! Her hand was rubbing on his crotch, and his hands were rubbing on her breasts as they passionately kissed. They looked to be in their late twenties or early thirties, and both were in very good shape. They were wearing hiking shorts, loose tops and tennis shoes.\n\nWe stood there transfixed for a moment and watched them feeling each other up in the bright moonlight. I could feel Lara breathing heavier now, and I could tell that her hand had moved to her crotch. She was rubbing her pussy through the silky slip!\n\n\"Mmmmm,\" she moaned softly.\n\nI whispered, \"Are you enjoying watching them?\"\n\nShe gasped, \"God, Yes! So hot.\"\n\nMy hands roamed freely over her breasts, stomach and hips. I moved my hand closer to her pussy, and could feel her hands rubbing on herself. When I went back to her breasts, I could feel her nipples standing out as hard as I had ever felt them.\n\nThe alcohol we had consumed and the incredibly erotic moment got the best of me.\n\nAlthough I was afraid that Lara would panic, I decided to whisper something daring in her ear.\n\n\"Would you like to . . . return . . . the favor?\"\n\nHer body tensed, and I was preparing for her to call me all sorts of names as she ran to the bathroom to hide.\n\nInstead, I heard her faintly whisper a husky, \"Yes.\"\n\nHer body trembled as she said that. I was so aroused by this I had to concentrate on what I was doing to avoid coming all over the back of her slip!\n\nI slowly pulled the privacy curtains far enough apart that we were now exposed. Lara let out an involuntary gasp when she realized that she was now every bit as exposed as we had discussed in our sex talk.\n\nThe woman caught the movement, and looked up.\n\nI could see her surprise, but before she could do or say anything, I put my finger to my lips. My pulse was pounding, and I was excited beyond anything I could imagine!\n\nShe didn't move, but her guy sensed a change and also looked up. The man started to take his hands out of the woman's blouse, but I shook my head and reached back to resume fondling my own wife's breasts.\n\nAs I caressed them through the black fabric of the bra, I nodded to the couple that it was okay.\n\nI told Lara, \"Slowly pull up the front of your slip until it's at your waist.\"\n\nShe hesitated, and I whispered, \"If you don't cross the line between fantasy and reality here . . . now, you may never have this chance again. If you ever wanted to act any of it out, this . . . this is it.\"\n\nI felt her bend over to grab the hem of her half slip. I could feel her pulling it up and she gasped again when she realized that her pubic hair was now visible to two complete strangers.\n\nAs she did so, I could see the couple's eyes get bigger.\n\nThis was a scene right out of some of our fantasies. Hotel windows, park benches, balconies on cruise ships. Our fantasies often started with locations where people could stumble across us as we were having sex, and we would talk about them getting turned on by our behavior.\n\nThe couple on the bench might as well have stepped out of one of our fantasies and into out patio. They were the right age and build, and they were doing exactly what we often described in our sex talk.\n\nThe couple turned to face us so they could get a better look. The woman unzipped the man's pants and took out his penis. Needless to say, it was rock hard and looked to be in excess of six inches long.\n\nLara moaned when she saw it. We had talked about this and we had fantasized about it for two decades.\n\n\"Look at his dick, Lara. Look at him, he's hard at the sight of your pussy. I want you to remember the first time a stranger did that for you.\"\n\nShe had ever seen a penis other than mine being stroked in front of her. She knew she was stepping out of our fantasy world into reality. And the woman . . .\n\nShe whispered hoarsely, \"She's beautiful. She's doing it. For me, Sam, for me. She's really doing it.\"\n\nThe woman stroked the man's penis with one hand while she moved the other hand toward her own crotch. Her legs opened slightly, and her finger caressed her pussy through her hiking shorts.\n\nI reached down and put my finger in Lara's pussy from behind. I couldn't believe how wet it was! Taking it out, I bent her a little farther forward and slid my penis against her labia from behind for a few rubs.\n\nLara said, \"I want you inside me now!\"\n\nI obliged her and pushed it inside her as far as I could go. My penis is about seven inches long, and when Lara bends over like that, I can get it beyond her ass and most of the way into her pussy.\n\n\"Ahhh. You feel so good inside me. I want them to see you fucking me.\"\n\nThe woman's eyes were transfixed on my wife's crotch. I don't know if she could actually see my penis, but Lara had moved her right hand back to her pussy, and I could feel her rubbing on her clit. I was certain that our female guest could see that, because her lips slowly parted and I could see her tongue running over them lightly.\n\nWe continued like this for a minute or so. No one wanted to move for fear of breaking the moment.\n\nI screwed up all the courage I could muster.\n\n\"Lara, signal to the woman to come closer. Let her get a better look at your wet pussy.\"\n\nLara grunted, \"Yes,\" and motioned for her to come closer.\n\nTo our surprise, the woman reacted instantly and moved towards us. It seemed she wanted us to invite her over. Then she got down on all fours a few feet from us and watched Lara's hand playing over her pussy. She couldn't take her eyes off my wife!\n\nThe man moved up behind her and started to finger her pussy through her shorts. The woman arched her back and turned her face up with her eyes closed when he did this. I couldn't hear through the double-pane glass door, but imagined her moaning, too.\n\nI reached over and unlocked the sliding door. Lara tensed up when she heard the door unlock, and she palpably began to tremble.\n\nI simply said to my wife, \"Your move.\"\n\nIt seemed like forever, but still trembling, she reached over and grabbed the door handle. She hesitated for another moment and then I saw the door open slowly. The woman opened her eyes and looked back at Lara's pussy. There was now nothing but air between my wife's pussy and the woman's trembling lips.\n\nThe woman crawled toward my wife until her face was inches away from Lara's thighs. She reached out and caressed the silky stockings Lara was wearing.\n\nLara shuddered, and I was afraid she was going to cum right on the spot.\n\n\"Oh, yes. Oh, yes. Oh, yes.\"\n\nLara then held her breath, and the woman moved her hands up to Lara's stocking tops. She leaned closer, and I could now feel her heavy breath on my balls as she examined Lara's pussy.\n\nThe man had followed the woman, and he now had her shorts down. He maneuvered her shorts and panties off, and had his erect penis poised behind her. I could feel her hands press against Lara's legs as the man penetrated her.\n\n\"Ohhh,\" she moaned as he entered her.\n\nWe now had two men fucking their women from behind while one of the women had her face inches away from the other's pussy. Absolutely out of a dream!\n\nThe woman pulled back slightly and looked up at Lara. She said nothing, but it was clear that she wanted some sign from Lara.\n\nLara reached down and caressed the woman's face with the back of her fingers. The woman took and kissed Lara's hand.\n\nWhat came next was unbelievable. Lara put her hand behind the woman's head and pulled it toward her. Her other hand was still holding up her half slip.\n\nWhen the woman's tongue touched Lara's clit, Lara dropped her hem and reached out for the frame of the door for support.\n\n\"Oh, god,\" she moaned. \"Lick it\"\n\nI heard the woman respond, \"Yes.\"\n\nJust that. One word and she was back to licking my wife.\n\nLara's knees buckled slightly, and I knew she could have toppled over if not for the extra support the door had provided.\n\n\"Oh! That feels so gooood. I want you lllick . . .licking . . .oh don't stop. AHH.\"\n\nThe man continued to fuck his girl; the girl continued to eat my wife, and I continued to fuck my wife. It didn't take long.\n\nThe man came first into the woman's pussy. I could barely hear him. He clenched and made a low sound.\n\n\"Nngggg,\" was all that came out.\n\nI thought that he was afraid of alerting any nighttime strollers on the trail. As he came, she came, too, moaning softly but intensely.\n\n\"Ohhhh! Mmmmmmm!\"\n\nThe moans against Lara's clit were the final straw for my wife. She came as hard as I had ever felt, contractions gripping my dick. She doubled over, barely hanging on to the door frame. She was not quiet.\n\n\"Oh yes. Ahhh. Oh GOD! AHHHH!\"\n\nHow she stayed upright long enough for me to finish I will never know, but half a minute of furious pounding, and I, too was spent.\n\nThe couple dressed and sat on one of the benches as Lara and I straightened up. I could see the couple whispering to each other, but we couldn't hear what they were saying.\n\nLara and I were in shock, standing there realizing what we had just done. I held her tight, and we didn't say a word.\n\nThe couple came back over to us, and the man held out his hand. As I took it, he started to introduce himself.\n\nI held up my other hand and said, \"No names. Not for now, if that's OK.\"\n\n\"Yeah, it is \"Have you ever done anything like that before?\"\n\nI told him, \"No but we have had fantasies about doing exactly what just happened. I mean word-for-word fantasies about just that! My wife has never actually been with a woman, but has fantasized about it for quite a while.\"\n\nHe said, \"The two of us have been together for over two years, and we tried a couple of threesomes with women.\"\n\nThe woman joined in.\n\n\"I like the occasional girl, but he never liked the thought of doing it with another man watching, even though I thought that would be hot.\"\n\nThe man said, \"That' true, but that the way things happened tonight, I didn't feel threatened at all. You (meaning me) and I never touched\".\n\nThe woman asked Lara, \"Would you ever consider doing that again?\"\n\nI almost fainted when Lara's response was to grab the other woman, kiss her full on the mouth and run her hand into the women's shorts!\n\nThe woman was surprised, and let out a little moan for a second.\n\nWhen Lara's hand came out she sniffed it briefly, then took her finger covered in pussy juice and another man's cum and sucked on it.\n\nThe girl looked at Lara, smiled and said, \"I guess that's a yes.\"\n\nShe gave Lara a light kiss and said, \"10 pm tomorrow?\"\n\nLara looked at me. I nodded.\n\nLara said, \"Wear something sexier than hiking shorts.\"\n\nThe girl laughed and said, \"Just wait.\"\n\nLara hugged the man and the woman, and I hugged the woman. Standing there naked, I couldn't quite bring myself to hug the man, so we just shook hands and they disappeared into the night.\n\nLara and I returned to our bed as if in a trance. Later, we fucked again. This time we didn't say much at all. What had just happened was so erotic and fresh that there was little else we could say to improve on it. I know we made love, but I can't remember any of the details. All I remember is that it took quite a while, and that we both came for the second time that evening with an intensity that surprised us both.\n\nAfter, we talked about what had just happened.\n\nLara confessed, \"One of my deepest fantasies lately has not just to have a woman watch me while I masturbate or even to have a woman and I caress each other. I've begun to have fantasies where I actively make love to a woman while you watch! Touching each other, and even licking each other. I never told you because I didn't know how you would take deeper lesbian desires.\"\n\nWhenever she had talked about lesbian fantasies during sex talk, it was always the same: A lesbian would sensually take of Lara's clothes and caress her or eat her while I watched. Maybe they would caress each other through their lingerie. She never told me that she wanted to reciprocate with the woman beyond a little petting.\n\nMy erotic stories during lovemaking had been limited to the same scenarios.\n\nShe said, \"I don't want to fuck another man, but I'm extremely turned on by the thought of another man watching me making love, either to you or to another woman.\"\n\nShe stuttered for a second, and then said, \"I -- I think I would also be turned on by the thought of another man watching me make love with you and another woman at the same time.\n\n\"You know I would kill you, painfully I might add, if you snuck off and fucked another woman behind my back.\"\n\n\"Yeah, I seem to remembering you saying that the day before we were married. Not the kind of thing a guy forgets.\"\n\n\"Well, I've been thinking, uh, maybe if that one joins us, it might be okay.\"\n\nShe waited for a response, but I was too stunned to talk for a second.\n\nShe looked anxious, and asked \"Well honey?\"\n\nI just grabbed her and kissed her harder than I had ever kissed her before.\n\n\"Not just her doing you or me, but all three of us doing each other?\" I said when we broke apart.\n\n\"Yeah,\" she said.\n\n\"I'm in!\"\n\nWe cuddled and gently fondled each other as we went to sleep that night.\n\nThe last thing I remember was Lara licking my ear and whispering, \"10 pm tomorrow, hmmm?\"\n\nThe next morning Lara said we needed to talk about what was going to happen that night.\n\n\"We don't really know them beyond what we experienced last night. While I could take a week of 'last nights' in a row, I think we should be careful. They seemed nice enough, but we should have some ground rules. Is there anything you don't want to do?\"\n\nI said that I was in agreement with the guy.\n\n\"I don't mind him watching, but I want no physical contact between him and me.\"\n\nLara said, \"I don't want him fucking me, either, but I don't mind if he does his girlfriend while she and I make out.\"\n\nI said, \"That might involve some incidental touching by him in the course of moving around.\"\n\nLara thought for a minute and said, \"I wouldn't mind an occasional brief touch,\" and then quickly, \"if it was OK with you, too.\"\n\nI replied, \"As long as it is only a little casual touching, his dick does not get near your pussy or mouth, and that he's not touching me, it's OK, I guess.\n\n\"By the way, is there was anything that you don't want the girl to do to you.\"\n\nShe frowned and sat quietly for quite a while and thought about it. Watching her think about the boundaries she was going to set for lesbian sex was kind of a turn-on itself.\n\nHer face suddenly became very calm.\n\nShe looked directly into my eyes and simply said, \"No.\"\n\nGasping, I said, \"Even anal?\"\n\nAgain very coolly, she said, \"Even anal.\"\n\n----------\n\nLara and I had talked about anal sex some time ago. It wasn't that I particularly wanted to do it. I had brought up the subject when we were still dating years earlier only to see if she really wanted me to do it to her.\n\nI made it clear that I hadn't really enjoyed it when I tried it with Sarah, a girl I knew in college. Sarah had never done it either. We fumbled about for a little while, and I finally got the head of my dick in, but her groans of pain turned me off. We stopped and abandoned the idea.\n\nLara told me back then, \"The one time my old boyfriend tried it with me, it hurt too much for me to derive any pleasure at all. The jerk insisted that my asshole would become used to it.\n\n\"I coolly replied, 'Yeah, and you could probably get used to cigarette burns on your scrotum, but you probably don't want to endure what it takes for your balls to get that numb.'\"\n\nBeing a lawyer, my wife can be devastatingly effective with a few well chosen words when she wants to be. Though she was only a law student at the time she displayed the same skills, and the boyfriend dropped the subject like a hot potato. We laughed when she told the story.\n\nLara said, \"Watching him wince while I said it was priceless. We broke up a week or so later, and I always suspected that he feared pissing me off enough to actually see me holding a lit cigarette.\"\n\n-----------\n\nWe hadn't spoken about anal in years, but now she was telling me that her back door might be open for business under the right circumstances.\n\nTo be certain, I said, \"If that girl brings a dildo or strap-on and wants to play hide-the-salami with your rectum, you're okay with that?\"\n\nLara started to laugh and said, \"Yeah. Right now, I'm so turned on by the thought of her that nothing's off the table. If it turns out to be too painful, I'll stop her, but for now I don't want to rule anything out. One thing, though. Now that you brought up the subject, we're driving into town this afternoon.\"\n\nShe started for the bathroom.\n\nI asked, \"What do you need in town?\"\n\nShe turned and said, \"I saw a Walgreens in town.\"\n\nShe continued towards the bathroom.\n\nI asked, \"What do you need at Walgreens?\"\n\nOver her shoulder, she said, \"About a pint of personal lubricant.\"\n\nI stood there, stunned.\n\nAs she closed the bathroom door, she popped her head back out and said, \"Ya know . . . just in case.\"",
        "Then with a smile and a wink, she closed the door.\n\nAfter she finished in the bathroom, she came out and asked me if there was anything else I needed to add to my list.\n\nI told her, \"I'm not interested in anything that would result in tasting his or my cum, or in anything involved with feces or piss. If the woman wants to stick her tongue or finger in my ass, that would be OK, but dildos are out.\"\n\nLara raised her eyebrows at this. She had never tried sticking anything up my butt. She held up her hand and wiggled her index finger, laughing while she did that.\n\nNow it was my turn. I walked to the bathroom.\n\nWhen the door was almost closed, I stuck my head out the door and said, \"Maybe we should make it a quart. Ya know . . . Just in case.\"\n\nWith a smile and a wink, I closed the door to the sound of her laughter.\n\nAfter the trip to Walgreens, Lara and I had lunch in town and then spent the rest of the afternoon on the hiking trails that connected the three resorts. There were a number of trails, and we walked a few miles. The trees and flowers were beautiful, and the sunshine felt good. The trails were everything we had hoped for.\n\nWe talked about a lot of things, but didn't bring up what was going to happen later. We seemed to touch and hold hands a bit more than usual, and that was saying a lot. We often touched or kissed, but that afternoon there seemed to be an urgency to do it more often, and sometimes there was a slight tremble when she held my hand. I was unsure if it was fear or anticipation.\n\nWe had a more casual dinner that night at the resort's diner, and it was punctuated by martinis before dinner and a couple of Mai Tais afterward while we listened to the band in the lounge. The meal didn't come close to the one we had at Jefferey's the night before, but we were just looking for comfort food. Steak is wonderful, but sometimes you just want meatloaf and MPG (mashed potatoes &amp; gravy). It was exactly what I wanted.\n\nThe adjacent lounge was dark and comfortable. There was a pretty good jazz band, and we sat and ordered our drinks. A really good Mai Tai is smooth and fruity, and doesn't even seem all that alcoholic. The bartender knew what he was doing. Bacardi Light, Meyers Original Dark and a thin float of Lemon Hart Demarara combined with a house-made Mai Tai mix. Smooth as a baby's bottom!\n\nWe were done with dinner and music by 8:30, and left for our room.\n\nLara put her hand to her mouth and said, \"Oh, No!\"\n\n\"What's wrong?\"\n\n\"I think they'll have to come to the patio again. We never told them what room we were in.\"\n\n\"Yeah. You're right, come to think of it. Oops.\"\n\nI thought for a minute about the events to come and said, \"We need to decide on some boundaries.\"\n\nShe said, \"I think it would be best to exchange first names only. Last names could come later, if we all agreed, but for right now first names will do.\n\n\"When I whisper in your ear if you liked watching her eat my pussy, I'd like to have a name instead of just calling her 'that girl.' I'd also like to be able to give her instructions by name instead of just ordering, 'Hey, you! Go crawl over and suck my husband's cock.'\"\n\nI told her, \"You are really wicked! I like that side of you.\"\n\nShe ran her hand lightly over my crotch and said, \"Any time, dear.\"\n\nWhen we got to our room, she suggested that I wear what she picked out, and she would wear whatever I picked out. I agreed, and we both headed for the dresser and closet.\n\nShe had me wear the sports coat from the night before, a pair of khakis and a colorful tie with a light blue shirt.\n\nI picked out a red dress and the same underwear she had been wearing the night before with the exception of a pair of lacy red panties.\n\nAs I got dressed, I watched her get dressed, too. Watching her shapely legs become encased in black silk, and her breasts rise up in the demi-bra gave me a hard-on. Thinking that another woman would be caressing her legs and breasts in an hour was so erotic I started masturbating right then and there.\n\nLara came over and said, \"Having a little hors d'oeuvre are we? Lets not get those pants stained.\"\n\nWith that, she took off my pants and pushed me down on the bed.\n\nWhile I stroked my penis, she did a little dance for me. She had the garter belt, stockings and bra on, but had not yet put anything else on. She ran her hands over her breasts and down her torso. She fingered her pussy, finally inserting a finger inside. She took it out and licked it.\n\nShe said, \"Mmm, good. But not quite as flavorful as last night.\"\n\nI remembered her sucking on a finger coated with the other girl's pussy juice and her boyfriend's cum.\n\n\"Oh, shit. AHHHHHH!\"\n\nI came so hard that Lara forgot the tissue box she had ready and went to the bathroom for a towel. After drying me off, she said that we had better get ready. I agreed, and we got dressed.\n\nWe poured some ice water and sat in the easy chairs, waiting for . . . Well, waiting for the next chapter in our new uncharted life.\n\nA few minutes to 10, there was a knock at our patio door. When I opened it, there they were. He was wearing a white dinner jacket and black pants. She was wearing a slinky green evening gown with some sequin trim.\n\nThey looked magnificent, but they also looked a bit nervous.\n\nHe said, \"Sorry we didn't come to your door. We completely forgot to ask for your room number.\"\n\nI said, \"We just realized that, too, a little while ago.\"\n\nI turned to speak to Lara. She was staring at the three of us with all the subtly that a hungry golden retriever shows while looking at five pounds of lamb chops. Her look was so lustfully-intense that I almost laughed.\n\n\"Honey,\" I said, \"Come over here and let's introduce ourselves to our new friends.\"\n\nAs Lara approached, I held out my hand to the man and said, \"I'm Sam and this is Lara. We decided we should at least use first names so we're not yelling, \"Hey you! Lick a little to the left.\"\n\nThat had the desired effect. They laughed and relaxed. \"Sounds good,\" said the man. \"I'm Bill and this is my girlfriend Beth.\"\n\nI held out my hand, and Bill gave me one of those man-hugs where you are part shaking hands and part patting the other guy on the back. The ladies weren't so restrained. They said hello to each other by name as they hugged and exchanged a soft kiss.\n\nBill asked what we had in mind.\n\nI said, \"Maybe we can start with a few ground rules.\"\n\nBeth said, \"That's a great idea. Bill and I thought about it, too, and Bill said that he wasn't into guys.\"\n\nNervously, Bill said, \"I would just as soon leave physical contact between another male sexual partner and me out of the proceedings.\"\n\nLara laughed at his formal sounding terminology, and asked, \"Contract language? What are you, a lawyer or something?\"\n\nBill blushed, and said that he was.\n\nLara exclaimed, \"Small world! So am I. Let's not tell each other any more about our practices, or guessing last names might be too easy. New England is too small a territory to think we might not know the same people. Anyway, Sam here owns a small tech firm. What do you do, Beth?\"\n\nBeth said, \"I worked as a legal secretary in Bill's firm until our dating became serious. When he asked me to move in with him, we decided it was time for me to quit my job as we certainly didn't need the money. We didn't want people at work spreading rumors that I was fucking my way to the top, either.\n\n\"I got bored playing at being a housewife, though,\" Beth continued, \"and I went out and found a part time job doing my hobby.\"\n\nShe smiled and left us dangling on purpose.\n\nI decided to bite, and said, \"OK, so what's your hobby?\"\n\nShe grinned and said. \"I work in a lingerie shop.\"\n\nWe all laughed, and I suggested we get back to the ground rules.\n\nBill said, \"I'm fairly easy. I mostly liked to fuck Beth and sometimes watch her with another woman. Beth and I agreed that she could do whatever she wanted to do as long as I was there when she did it.\"\n\nI said, \"I feel the same way about sex with you, Bill, and I'm very relieved that we're in agreement. I don't have a problem with you fucking Beth while she and Lara are having an, uh, 'encounter.'\"\n\nI didn't feel comfortable yet saying, \". . . while your wife sucks my wife's pussy.\"\n\nBill said, \"I have to admit that I was a little turned on last night when you were fucking Lara. I could feel her bumping into Beth while you did it, but that's about as close as I want to come to another man during sex.\"\n\nLara said, \"Good ground rule: you can both fuck at the same time as long as there are two women between you to act as insulators.\"\n\nBill and I laughed nervously.\n\nBill said, \"Well, I for one am glad that's behind us.\"\n\nThe ladies laughed, and Beth said, \"We were also glad when the two of you were behind us! But what about you Lara? What are your rules?\"\n\nLara took Beth's hands between hers. She looked intently at Beth's eyes as she spoke.\n\n\"I am married to Sam. He's the love of my life and the man of my dreams. The only penis I want to see near me is his. I'm not into pain or piss. But when it comes to sex with you, Beth, there . . . are . . . no . . . other . . . rules.\"\n\nBeth gasped when Lara said this.\n\nShe looked as deeply and intently into Lara's eyes as Lara had looked into hers.\n\nShe softly said, \"Lara, I'm going to make you very happy you said that.\"\n\nThe ladies kissed deeply for ten or fifteen seconds.\n\nThen Beth said, \"Lara, what do you and Sam suggest for tonight?\"\n\nBefore I could say a word, Lara said, \"I've been thinking about this all day. We have two honeys here who like to watch. I suggest we torture them, but in a nice way.\"\n\n\"And how are we going to do that?\" asked Beth with a devilish grin on her face.\n\nI could tell she was going to be fun!\n\nLara dragged one of the two small easy chairs to the other side of the room, leaving the other where it was. The bed and the center of the room were now between them. She took my hand and led me to one of the chairs. She motioned for Beth to take Bill to the other.\n\nOnce we were seated, Lara said, \"OK. Beth. It's time for you and me to get to know each other. While we are doing that, the boys have to stay seated with their hands on the arms of their chairs. They have to stay fully clothed, and they can only take their hands off the arms of their chairs to take a drink of ice water from the table next to Bill's chair or the dresser next to Sam's.\n\n\"The first one to touch his cock stops the show, and the offender gets an immediate blowjob from his lady, and is then sent to the bathroom.\n\n\"I thought of the blowjob after I formulated the plan, as we don't want either of them in the bathroom jerking off without us in order to avoid a case of blue balls.\n\n\"After the exile, the show will continue until the second victim can't stand it either. He gets a blowjob, and then the two of us are really going to go at it. You can decide what that will entail, Beth.\"\n\nBeth congratulated Lara on being so devious and sexy at the same time.\n\nBeth asked, \"Boys, should we leave the curtains open or closed this time?\"\n\nI suggested we close them this time, and Beth walked over and closed the heavy drapes.\n\nWith the two of us seated in our chairs, Lara walked over to Beth. She stopped a few feet away to take in all of Beth. Beth did the same to Lara.\n\nBeth was a couple of inches taller than Lara. The green dress she was wearing hugged every curve of her athletic body. The contrast of the green dress and Beth's auburn hair was spectacular. Her hair was nicely coiffed into a chignon held in place atop her head with a large black and gold comb. Her face was beautiful. A chiseled nose, soft, round eyes and thin pixyish lips. Her bodice was cut low, and was finished with two twists of fabric that draped elegantly over her breasts. The dress flowed all the way to the floor.\n\nIt was the kind of dress that a torch singer in the Forties would have worn, and Beth filled it out to perfection. I guessed she was about a 32B. Just looking at her gave me a hard-on.\n\nMy Lara was also a sight to see. Her red dress hugged her body, which was just a little more ample than Beth's slender frame. Her bra made her breasts seem to defy gravity, and the dress was cut to present a d\u00e9colletage that would make most women extremely jealous. The dress ended just above the knee, and the effect of the red dress and seamed black silk stockings was incredible. The high heels really accentuated her shapely calves.\n\nThe two ladies examined each other for more than a minute. It was electric. You could have heard a pin drop as Bill and I waited for the next move.\n\nI could see the anticipation on Lara's face. Her deep-set eyes were transfixed on Beth. The nostrils of her soft nose flared once in a while as if she was trying to catch the scent of the woman before her. Those full lips were slightly parted, as if ready for the next kiss.\n\nLara broke the ice by walking to Beth and putting her hands around Beth's waist. Beth responded by putting her arms around Lara's neck and pulling Lara's mouth to hers.\n\nTongues, soft biting, wet lips. They kissed sensuously for what seemed like eons to me, and then Lara started to move her hands slowly up from Beth's waist. Her hands cupped Beth's breasts through the dress. She lightly fondled them while they kissed.\n\nWe heard Beth as Lara did this.\n\n\"Mmmmmmm,\" was all she could manage thought the kiss.\n\nBeth finally broke off the kiss and turned my wife around. This surprised Lara and she laughed a little while she was spinning. That ended as soon as Beth reached around and started playing with Lara's breasts. Lara leaned her head back on Beth's shoulder and let the younger woman explore every inch of her body through the dress. Neck, breasts, waist, hips, and thighs: Whatever Beth could reach while standing behind my wife, she caressed. Lara responded to Beth's touch will little sounds.\n\n\"Oh . . . Yeah . . . Ahh, yes . . .\"\n\nLara's eyes were closed, and she started swaying at Beth's touch. Whenever Beth's fingers went inside the bodice of Lara's dress and caressed her nipples through her bra, Lara gasped.\n\nThey continued like this for several minutes. My cock was about to burst out of my pants. I looked over at Bill, and saw that he was in about the same predicament that I was. I wondered how long we could last.\n\nBeth turned my wife around and took her by the hands. She slowly moved Lara's hands to her breasts.\n\n\"Feel me. Think about what you like, and do it to me.\"\n\nLara started to fondle Beth's breasts. Lovingly, she explored them through the dress and undergarment beneath. She traced the exposed skin above with a finger, then cupped them to feel their firmness. She played with the two twists of fabric that divided the exposed cleavage from the rest of the green dress. She ran her hands up and down the green dress, also caressing everything she could reach.\n\nBeth responded to the touch with about every variation of, \"Mmmmm\" I could imagine.\n\nLara could see the yearning look on Beth's face. She knew it was time to go one step further.\n\nBeth's dress was strapless, and it had a zipper on the side. Lara found the zipper. She stepped back slightly and looked into Beth's eyes as she slowly pulled the zipper farther and farther down until it stopped.\n\nIn what would later be identified the turning point of the weekend, Lara addressed Beth, looking square into her eyes without blinking.\n\n\"Beth, I want to see you without the dress. I want to see what someone who works in a lingerie shop wears under this stunning dress when she is going out to have sex with another woman and her husband while her own lover watches. I want to see it now.\"\n\nThe tone of her voice stunned me. My wife had gone from the melting, would-be bi-curious wife to the Ice Queen in the snap of a finger. Knowing her, it was like seeing two different women in the same body. There was no nervousness in it, and she was speaking as calmly as if she were asking one of her paralegals to show her a file.\n\nI realized that my wife wasn't doing this out of curiosity any more. She really wanted a lesbian affair, and now that she had one that she could control and that had my approval, she was going to enjoy it!\n\nShe had made an intellectual decision that whatever she needed out of it she was going to get. I had seen her like this a few times before.\n\nOnce, when we went bungee jumping the first time, I was a nervous wreck. She, on the other hand, decided that she wanted every ounce of pleasure she could get. As soon as she made up her mind that she was going to do it, she went for it with everything she had. She didn't just drop from the bridge; she jumped out as far and as high as she could, laughing and screaming all the way down.\n\nThe jumpmaster looked at me and said, \"First time my ass! How many times has she done this?\"\n\nIn that instant, I knew that Lara was just about to make that same jump with Beth. I just hoped Beth was ready for the ride of her life!\n\nBeth was a little taken aback by Lara's sudden calm, direct demeanor and her commanding tone. Even though she was the one who had several lesbian encounters before, I suspected that she knew she was about to risk being dominated by someone with an iron will to get what she wanted.\n\nBeth stood still while my wife slowly pulled the slinky green dress down around her waist and then let it drop to the floor. Lara stepped back to admire Beth, and then held out her hand. Beth reached forward and took it. Lara pulled Beth forward, and the redhead stepped clear of her dress.\n\nShe was wearing a lacy black bustier with tiny red ribbons sewn into the lace at the cups. The bustier ended just above her navel. It had a lace-up back closure that looked very Victorian. The cups cradled Beth's tanned breasts so that her cleavage was deep. They left almost everything north of her areolas bare. The way they mounded made me want to run my hands and tongue over them, but I was stuck in that damn chair! An odd thought crossed my mind. I remembered Groucho Marx saying, \"You could play Pinochle on a shelf like that!\" Now I knew what Groucho meant!\n\nI wondered for a second how anyone could get a piece of lingerie not only to fit perfectly, but to enhance every asset it touched. Then I remembered Beth saying she worked in a lingerie shop. This woman knew her trade!\n\nHer tummy was flat and toned. She was wearing a pair of black lace panties with the same tiny red ribbons and lace that accented the bustier. They appeared to be a set. The panties, like the bustier, worked her assets to make a man drool. The front was cut so as not to hide any part of those sexy thighs. The waist seemed to sit no more than a millimeter above where I imagined her pubic hair ended, and gave just a suggestion through the material that she was not shaved.\n\nShe was not wearing a garter belt, but had thigh-high white stockings with wide lace at the top that held them in place. The contrast of the black lace panties and the wide white tops was, as one of my artillery buddies in the army used to say, designed to \"fire for effect.\" They were a barrage on the senses. Since the human eye naturally follows from dark to light, the tops of her stockings drew my eye from the black garments right to where she wanted me to look: the area on her upper thighs that lead to her pussy. Ansel Adams could not have made better use of light and dark.\n\nBeth was a masterpiece in high heels!\n\nShe was absolutely elegant, and I almost couldn't believe this was the same person who had been making out on out patio bench in hiking clothes and then crawling to my wife on all fours the night before!\n\nLara started running her hands over Beth's breasts again. She traced every curve and made a point of running the backs of her fingers where the fabric ended so that her fingernails glided over the exposed edges of the flesh. Beth responded to this by losing her footing for a second, and Lara steadied her as Beth straightened her knees again.",
        "Lara reached up and took the comb from Beth's hair. The chignon dropped and became beautiful red waves that caressed her back just below her well defined shoulders. Lara pulled up handfuls of hair and put her face against them, inhaling deeply.\n\n\"Beth, your hair is beautiful. No. It's more than that. It's sensually, femininely pinup-girl beautiful! I swear, you look like a painting by Vargas who stepped off of the canvas and into my arms!\"\n\nBeth blushed as such flattery, and looked down. Lara put her hands up to Beth's face and lifted her head.\n\n\"Never be embarrassed by your beauty, Beth. Revel in it and enjoy every sensual look and compliment you ever get. You are an angel. You are my angel.\"\n\nMy wife slowly turned Beth around. She pulled Beth into her and started to rub up and down her torso from behind. As she got closer and closer to Beth's panties, Beth started to breathe a little more heavily.\n\n\"Ahh. Oh, yes, Baby. Your hands feel so good on my skin.\"\n\nLara's left hand moved to the waistband of Beth's panties, and then her fingers disappeared beneath the silky black material.\n\nBeth closed her eyes.\n\n\". . .feels sooo good. Mmmmm.\"\n\nLara suddenly smiled and said, \"I love it! I hate women who feel they have to shave their pubic hair. Fur is so much sexier.\"\n\nMy guess was correct!\n\nBeth kept her eyes closed and purred, \"I knew you would like it after last night. When I saw that you only trimmed your bikini line like I do, I knew we were kindred spirits.\n\n\"The last girl I made love to shaved her pussy, and she got pissed when I said it was like eating an ice cream sundae without the sprinkles.\"\n\nThey both laughed for a second, and I thought the joke had broken that dramatically-erotic moment. I was wrong. Lara's fingers had reached their target. Beth had just started to say something more when Lara touched Beth's clit.\n\n\"Ahhhhh,\" was all the sound that she made.\n\nIt was like an electric shock. Beth stuttered and couldn't get out what she wanted to say. Her knees bent slightly, and she leaned back harder into Lara. Her breath was ragged now.\n\n\"Yeah. Uhhh. Uhhh. Yeah,\" she repeated over and over.\n\nThrough the lace, I could see that Lara's hand had gone beyond Beth's clit, and was now circling and probing her labia. Gently, tenderly, Lara teased and caressed everything but her clit. She wanted to make this last!\n\nThe momentary light laughter was over, and Beth showed every sign of extreme arousal. She was ready to be taken completely by Lara, and she was anticipating her next intimate caress.\n\nAt that moment, I caught movement, and saw that Bill had his hand inside his zipper. I said, \"Put the show on pause, girls. Beth owes us a blowjob demonstration.\"\n\nLara's little game had horribly backfired on her and her new plaything. Bill's timing could not have been worse. My announcement instantly broke the spell they had been under.\n\nLara pulled her hand out of Beth's panties, and Beth looked at her boyfriend with extreme disappointment.\n\n\"Crap, Bill,\" she panted, not completely composed yet. \"Couldn't you have given us a couple more seconds? That's the shittiest timing we have ever had!\"\n\nBill grinned sheepishly at her and replied, \"Sorry honey. In a few more seconds my dick would have ripped right through my slacks.\"\n\nYou could see a dark spot on the black trousers where his pre-cum had made a mess.\n\nBeth moved over to Bill and pulled his penis out of his pants. It wasn't slow, and it wasn't seductive. She just pulled it out. It looked a bit painful, too, Beth saw with no small amount of satisfaction. Bill winced when she did it, but his dick was still quire erect.\n\nIt was rock hard, in fact, and in this light I could see that it was six or seven inches long. Like me, he was circumcised.\n\nWithout a word, Beth had her mouth around Bill's shaft. This woman knew more than lingerie, too. She used her lips, teeth, tongue, and if she still had tonsils, I'm sure she was using them, too. She knew exactly what stimulated Bill. Even though I previously had no desire to look at another man's penis, I couldn't take my eyes off of this performance. I had to hand it to Beth, Lara could learn things from her. She knew the geography and how to travel it! There was the tip, the base, the shaft, the underside of the head where it met the shaft, and, of course the whole head. Each part got attention.\n\nI imagined her mouth on my cock. I could almost feel her lips as she satiated him orally.\n\nAfter all that watching and waiting, it was only a matter of a minute or two before Bill shot his load into Beth's mouth. She kept after him, though, not even stopping for an instant. After fifteen or twenty seconds, I could tell that Bill was completely finished, but she was still going strong.\n\nHe was at that point where pleasure becomes pain when you are over stimulated. He was having incredible contractions, and I almost felt sorry for him. Almost.\n\nBill was trying to speak, but only sounds were coming out, \"Uuuthhh. Nnnnnmrrrr.\"\n\nBeth finally lifted her head from Bill's pants and said, \"Oh, sweetie. Was that 'Beth, no more?' Are you sure you don't want another little lick or two?\"\n\nBill shook his head. After Beth stopped torturing him, he regained a little composure and caught his breath.\n\nSome cum dripped from her mouth when Beth spoke. She had already swallowed a lot of it, and she started to use her finger to capture what had escaped and return it to her mouth.\n\nBill said, \"Sweetheart, I think you sucked a few back hairs right out through my cock. One of your best. Honey, I'm sorry I interrupted you, but the two of you were making me so impossibly damned hot!\"\n\nWatching that stunning woman in incredibly sexy lingerie giving that amazing blowjob right in front of me was more than I could take.\n\nI said, \"Honey, I'm going to have to give up, too!\"\n\nLara said, \"I was wondering how long you could last,\" as she walked over to my chair.\n\nBy this time I had unzipped my pants and had my cock out, not wanting an upset Lara to do what Beth had done to Bill. Lara started to lick around the shaft, and then slowly work her way up to the head. I was in ecstasy! She didn't display the blowjob variety that Beth had demonstrated, but she was good. Unlike Bill, I lasted less than a minute and then blew a wad into my wife's mouth. What happened next started me on my way to my next erection.\n\nInstead of spitting out or swallowing my cum, my wife calmly walked over to Beth, grabbed her by the back of her head and kissed her! Beth had not swallowed all of Bill's cum yet, and I could see them swapping the two loads back and forth until they both decided to swallow what was left. Lara looked at me and Beth looked at Bill, but we were both speechless. Neither said a word. They just licked their lips.\n\nLara walked into the bathroom and came out with glasses of water and some mouthwash. Beth looked puzzled for a second, and then Lara reminded her of Rule Number One.\n\n\"Bill and Sam don't want to taste any cum,\" she said.\n\nBeth nodded, and they drank a little and then rinsed with the mouthwash.\n\nLara turned to Beth and said, \"Rules are rules. Now it's your her turn to direct.\"\n\nBeth addressed Bill and me. She didn't waste words.\n\n\"Strip.\"\n\nWhile we were doing that, she stood in front of Lara and reached behind her to unzip her dress. She slowly, methodically pulled the dress down, savoring every curve. There wasn't an inch that she didn't kiss as the dress made its way to the floor. She spent some time licking the exposed skin around Lara's breasts, and she made a slow banquet of her stomach.\n\nReturning to Lara's breasts, she remembered and performed the fingernail trick where the demi-bra ended and Lara's flesh began.\n\n\"Oh, god!\" she moaned. \"Sam, you have to learn this. It's like a snake is licking my skin. Mmmmm.\"\n\nAfter a while, Beth started using her fingers, fingernails and tongue to explore Lara's torso. Like Beth had done earlier, Lara responded to each new touch.\n\n\"Oh, kiss a little lower . . . Yeah, Ahh, right there . . . Oooh, oooh . . . Nnno, tickles, ahhh . . . Mmmm, nice.\"\n\nWhen the dress was down to Lara's waist, Beth didn't just pull it off. Instead, she lowered her hands to the hem and slowly ran her hands under the dress and half slip. She caressed Lara's thighs and licked the bare skin above her stockings. Her head was now under the dress, with her kneeling in front of my wife.\n\n\"Lara, you smell wonderful. Your pussy was so sweet yesterday I couldn't get enough of it.\"\n\nI then heard sucking kisses begin that must have been Beth on Lara's thighs. I heard Beth slowly enticing Lara.\n\n\"Tonight (smack) I'm going to (smack) suck (smack) on your pussy (smack) until I have you (smack) in orbit (smack).\"\n\nWith each kiss, Lara sighed or gasped with pleasure. She was playing with her own breasts, and she squeezed them with each sigh and gasp. Her eyes were closed, and her head rolled as Beth changed position under that sexy red skirt. Each sound expressed a yearning desire for the next kiss.\n\n\"God, Bill,\" I said. \"Your wife is leaving hickies on Lara's thighs!\"\n\nBill, who was stroking his dick, said, \"Yeah. She likes that kind of stuff. One time she left monkey bites all over my ass. I forgot about them when I played golf the next day, and the guys cracked up when they saw my butt in the shower. Cracked up, but were jealous!\"\n\nI had seen a lot of sexy images, but the sight of my wife standing there half naked with a woman kneeling in front of her with her head buried under her skirt was more than erotic. I couldn't see what Beth was doing, and imagining what was going on below that black half slip was more erotic than seeing it.\n\nBeth finally pulled the dress all the way off, but left the black half slip. She got to her feet and kissed Lara. Lara kissed her back a little. By \"a little,\" I mean that she grabbed the back of Beth's head and stuck her tongue so far in that I thought I might see it coming out of an ear!\n\n\"Beth, I never imagined anyone doing that,\" she finally said when she broke the kiss. \"Not even in my wildest fantasies had I ever even thought of thigh sucking! Wow, girl. I liked that!\"\n\nThe two women were now standing in their lingerie in the middle of the room. Beth pulled Lara to her and kissed her again passionately. She pulled Lara's half slip away from her hips and let it fall to the floor. She reached down and picked it up.\n\nShe said, \"We're going to need this for later. I'll show you a little trick you're going to love. \"\n\nWith that, she pulled Lara onto the bed and started to caress her from head to foot, barely avoiding her pussy each time she got near. She gave Lara the most sensual massage I have ever seen. She lingered at her neck, kissing and rubbing it.\n\n\"Ohh. Down where it meets the shoulder, Beth. Ahh.\"\n\nShe fondled, kissed and licked everywhere: Behind the ears, under the chin, along her shoulder blades, over each individual rib, down her spine and all over the small of her back. She even sucked the dimples behind Lara's knees! I thought I had discovered that spot, but Beth knew just how to work it.\n\nLara made husky sounds now. Each new caress brought sighs, moans, and even a giggle when Beth hit another ticklish spot.\n\nFinally, Beth reached for the waistband of Lara's panties and slowly pulled them down and then off, keeping her face as close to Lara's pussy as possible. I was certain that she was going to go for Lara's pussy, but she didn't. She was just teasing Lara.\n\nLara had opened her legs a little for the same thing I thought she was going to get, but Beth moved up and unhooked Lara's bra instead.\n\nShe took it off, and started to suck on Lara's breasts. Lara's nipples had a slight cone shape, and they melted into dark pink areolas that were a little smaller than a poker chip. The nipples were hard and responsive, and with each lick and kiss, Lara sighed.\n\nBeth started to bite and pinch the nipples. Lara was seriously moaning by this time, and I saw her hands roaming over Beth as her nipples got sucked.\n\n\"Sssuckk it. Oh, Baby, yeah! Use your tongue!\" and \"Ahh. Do that again on the other one. Yeah, the areola, Akkkhh, YEAH!\"\n\nBeth stopped for a moment and kissed Lara.\n\n\"I want to shift gears now. I want to prolong this as long as I can. How would you like to peel this thing off me?\" holding her breasts though her bustier.\n\nGleefully, Lara sat up and began working on the laces that held the bustier on. She looked like a ten-year-old unwrapping a present. As she undid each eyelet, she kissed the bare skin below, working from top to bottom. When they were all undone, she moved to be in front of Beth again.\n\nShe pulled the opening at rear and literally peeled the bustier off Beth.\n\nAs it came off, I could see that Beth needed little help from the bustier. Sure, they gave her bosom a shelf effect, but the fact was that her pear-shaped breasts didn't need any help to keep them from sagging. Unlike Lara, she could pass the \"pencil test\" with flying colors. Lara went after them as soon as she saw them.\n\nBeth squealed with delight at having her breasts sucked!\n\nLara had her face buried in them, and was doing every form of licking, sucking and biting she could think of.\n\nBeth's groans and murmurs gave testimony to Lara's effectiveness at licking and sucking. Beth had her eyes closed, now, and jerked a little each time Lara did something new.\n\n\"Bite it, no gently . . . yeah, like that. Now tongue and lips . . . Oh yeah, suck them, su-su-uuuuahh YESS!\"\n\nIt went on like that for minutes as Lara went from one breast to the other.\n\nI could see from where I was sitting that Beth's small nipples were hard, and that they were enjoying the attention Lara was giving them. Lara's work had turned them from light to dark pink by now.\n\nLara turned her attention to Beth's mouth, and they kissed again for a few minutes.\n\nBeth suddenly pushed Lara away slightly and sat up. She looked at her for a moment, and then appeared to have made some sort of decision.\n\n\"It's time you tasted something I know you have been dreaming about. Sam, come over here and watch this.\"\n\nShe didn't have to ask twice. I was on the bed in a flash.\n\n\"Lara,\" she cooed, \"I'm going to walk you through this. I know you have never tasted another woman, and I'd like to guide you, if I may, to get you started.\"\n\nLara knew then that she was going to go down on her new friend, and experience something that she would never experience again: her first taste of pussy. Knowing her state of mind in this adventure, I was not surprised when she answered immediately.\n\n\"You may. Let's get started, lover.\"\n\nBeth told Lara, \"Pull my panties off.\"\n\nBeth raised her hips so Lara could do it. Lara grabbed the waistband and pulled them off slowly. As the waistband passed Beth's pussy, I heard Lara catch her breath as she saw and smelled what she was about to taste. I helped her get the panties the rest of the way down.\n\nLara was sitting there looking at Beth's pussy. She was idly running her hand over Beth's pubic hair in lazy circles. I could tell that she was enjoying looking at what she had only dreamed about touching until yesterday.\n\nAfter a while, Lara said, \"Beth, my angel, tell me everything you want me to do.\"\n\nBeth said, \"Lara, I'm going to spread my legs a little. I want you to start running your fingers from my stocking tops to just short of my pussy.\"\n\nLara did as Beth asked.\n\n\"Mmmmm. That's right. Little, soft rubs. Yeah. Think about how you like it done. Oh, Yeah!\"\n\nLara and then followed along as Beth continued.\n\n\"Now move a little closer to my labia. Yeah, that's it. Now circle them slowly until you get right on . . . THEMMMM, yeah, like that. Ahh. That's it. Whew! Next, I'm going to have you spread my labia and look at my clit. Have you ever seen another girl's clit, Beth?\"\n\n\"No,\" whispered Beth.\n\n\"Look at it closely. Every girl has a slightly different shape and size. Look at how it is formed, and think of your own. Have you ever done yourself in front of a mirror?\"\n\n\"Yeah. Mine is similar to yours, but just a little longer, and the folds around it are not as rounded.\"\n\n\"Good. Now I want you to start getting me wet. I want you to put two fingers inside me now!\"\n\nBeth did as she was instructed. Beth arched her back a little as the sensation went through her body.\n\n\"Oh, yeah. You know how to do that. GGGGGoooood.\"\n\nBeth's pubic hair matched the hair on her head, and it was trimmed so that it ended just below the top of her labia. Her labia were round and soft-looking. She was different than Lara, who had fuller labia with far more definition along the slit. Lara's fingers inside the slit were working their magic, not only on Beth, but on me, as well.\n\n\"Now put your tongue on my clit. I want you to pull it up with your lips, and then lick it. Remember how it sits in the folds. I want you to separate the folds with your tongue and then put your lips right on my clit.\"\n\nAs Lara followed Beth's instructions, Beth's voice got raspier and softer until she couldn't speak at all. She just softly moaned and bucked her hips as Lara ate her out.\n\nBy that time, Lara had started to experiment on her own. My wife was now doing things to this new friend that I had only seen in porno movies. She started burying her tongue in Beth's vagina while fingering her asshole rim.\n\n\"Oh, baby. That feels so good. Give it to me.\"\n\nThen she lifted Beth's legs straight up, rested them on her shoulders and ran her tongue around Beth's ass.\n\n\"Ahhh. Yess. YESS. Oh, GOD YESSS.\"\n\nI couldn't believe what I was seeing! Lara gave the brown ring a couple of minutes' attention, and then she moved back to Beth's clit. She started fingering her again with her tongue on her clit.\n\n\"Oh, god, I'm almost there! Suck it, SUCK IT!! Ahh, yeah!\"\n\nI had been rubbing on my cock while watching the show, and was close to orgasm. I moved next to Beth so I could fondle one of her breasts while I masturbated, and she smiled slightly when I touched one. She was way past telling Lara or me what to do, and I knew she was close to coming.\n\nOne more look at my wife with her face buried in Beth's pussy, and I came all over Beth's breasts. Watching me cum was apparently as good for Beth as me watching Lara eat Beth out. Just after my sperm hit her breasts, Lara started to buck against Lara's face, pulling it in tighter and tighter.\n\nShe let out a long, almost growling moan, \"I'm coming. Lara, you're making me CUMMMMMMM!\"\n\nShe arched her back as much as she could from that position, and then sank back on the bed. She had strained so hard that her face was red as a beet.\n\nLara stopped tonguing Beth and sat up. She pulled me to her and kissed me hard. I could taste Beth's pussy juice on Lara's mouth, and it was sweet. I knew that I would enjoy getting some directly off Beth.\n\nI looked over at Bill, and he was using a hand towel to clean himself up.\n\nI pointed to him, and Beth and Lara looked in his direction.\n\n\"I guess he came to the same conclusion I did.\" I said.\n\nLara lay down next to Beth, and they started kissing, my cum smearing between the two as they hugged.\n\nBeth said, \"You were great. I can't believe that was your first time eating pussy! And that thing you did with my asshole. Wow! I've never gotten anyone to do that before.\"\n\nI had just gotten back with a warm, wet towel so they could clean themselves.\n\nI told her. \"When Lara decides to do anything, she pours everything she has into it, body and soul. You're just lucky you didn't bring a vibrator or dildo, or you would be sitting funny for a week!\"\n\nBeth gave me a devilish smile, and said, \"Bill to throw my purse over here.\"\n\nI couldn't believe it when she pulled out a small pink hard plastic vibrator!",
        "\"I didn't bring any lube,\" Beth said, \"so Lara and I can only use this on our clits tonight.\"\n\nNow it was time for Lara to flash a devilish smile.\n\n\"Hey, Bill. Toss me that Wallgreens bag on the dresser next to you.\"\n\nLara and I looked at each other. Neither of us had arranged it, but as Lara pulled out one of the bottles of personal lube and held it up for Beth to see, we simultaneously exclaimed what we both had been thinking\n\n\"Ya know . . . Just in case.\"\n\nBeth squealed with delight as Lara and I laughed at our inside joke.\n\n\"Lara, you vixen. Now you're going to get a real treat!\"\n\nWith that, she grabbed the lube and got the vibrator really slippery. She told Lara to spread her legs wide, and then I saw Beth turn the vibrator on and move it down to my wife's pussy. Beth began to passionately kiss Lara, and at the same time she teasingly moved the vibrator over and around Lara's pussy lips.\n\nThe four inch long vibrator was less than three quarters of an inch in diameter, and with that much lube on it Beth was able to slide it easily up into Lara's vagina.\n\nLara let out a little scream, \"HAH!\" as it went in to the hilt.\n\nWe played with toys like that before, but the thought of a woman shoving it in while Bill and I watched made it ten times more exciting. Lara was thrusting against Beth's hand now. I knew she could feel Beth's fingers holding the end of the vibrator as it went in all the way over and over again. She was going wild. Just when I was wondering why Beth had not put the vibrator on Lara's clit and finished everything, Beth pulled away from their continuous kiss and asked a quite unexpected question.\n\n\"Do you want it up the ass?\"\n\n\"Yes!\"\n\nLara said that without hesitation, and lifted her legs way up so her butt was in the air. Beth knelt between her legs and applied lube not only to the vibrator but also to my wife's asshole.\n\nShe also squirted lube on her slender index finger, and said, \"Honey, brace yourself. I'm about to prime you for the main event.\"\n\nWith that, she stuck her finger into Lara's ass. Lara cried out with pleasure as Beth digitally buggered her.\n\n\"Oh . . . Feels sooo good.\"\n\nBeth pulled her finger out, added more lube and then did it again and again. Each time, my wife squealed with pleasure.\n\nShe told Lara, \"I need to get enough lube inside your anus so that the vibrator won't hurt when it goes in. Most men, and even some women just try to jam something in our dry assholes, and that's why most women never get a taste for anal. You have to start gentle and you have to start out small.\"\n\nBy now my wife was just lying there groaning with pleasure at the slippery anal invasion, and I'm not even sure she heard what Beth had said. When Beth added even more lube to the vibrator and turned it on again, Lara sure reacted to the sound. She raised he legs almost over her head and moaned in anticipation.\n\n\"Now, now,\" she said several times.\n\n\"Here it comes sweetheart. Let me know if there is any pain, and I'll stop.\"\n\nWhen the vibrator entered her, she shrieked again with pleasure.\n\nBeth asked, \"Any pain?\"\n\n\"Nnno. More!\"\n\nBeth started to lick Lara's clit.\n\nShe looked at me and said, \"Stick in as many fingers as her pussy will hold.\"\n\nBeth was oriented over Lara's tummy, with her hand reaching around to work the vibrator and her tongue on Lara's clit. The space open at Lara's was a little congested, and I could only get two fingers in.\n\nNot thirty seconds later, I felt Lara's pussy contract around my fingers as wave after wave of orgasm swept over her.\n\n\"Oh, god, oh, god, yess, yess, Oh, Oh, OHHHHH!\"\n\nBeth said to keep going, and we kept licking and thrusting my wife until the shoved us away and moaned for us to stop.\n\nBeth and I lay down next to my completely spent Lara and cuddled with her for a while. We looked at Bill, and it was fairly obvious by the stack of tissues that he had come at least once more while the ladies fucked each other's brains out.\n\nBeth asked Lara, \"Did it hurt, honey?\"\n\n\"No. Your lube job and the small diameter of the vibrator were perfect for a first time. I was a little uncomfortable at first, but it was not painful. After the first few seconds, it wasn't even uncomfortable. I think I was afraid it was going to hurt, and when it didn't, I loosened up and just went for broke.\n\n\"I never imagined I could derive so much pleasure from a double penetration, but I would do that again.\n\n\"One of my professors at law school said that I was born with the gift for oral argument. You, my sweet were born with the gift of oral sex!\"\n\nShe kissed Beth again as we cuddled for a bit. Bill was sitting in his easy chair with his feet on an ottoman. He was lazily rubbing his mostly-flaccid penis as he watched us on the bed.\n\nAfter a while, we started a little idle rubbing and touching again. Beth got up and grabbed Lara's half slip from the floor where she had dropped it. It was very soft and silky, and she ran it over Lara's body.\n\n\"Lay there and tell me how this feels on each part of your body,\" she said. \"Let's start with your hands. Hold them out.\"\n\nLara closed her eyes and smiled as the silky fabric caressed her.\n\n\"It feels cool and silky. Very sensual.\"\n\n\"Do you like the sensation?\"\n\n\"Yes, very much.\"\n\n\"I'm going to run it up your arm and across your shoulders now. Tell me what you experience.\"\n\n\"It feels like taking off a slip. It's very slinky on my skin.\"\n\n\"How about your breasts?\"\n\n\"Oh, that's great. A slip never slides across my breasts for that long when I put it on or take it off, but when you prolong the contact, it amplifies the sensation. Oh! Wait a minute. What changed?\"\n\n\"Lara, I first used the smooth body of the slip on your breasts and nipples. What I am doing now is running just the lace trim against your nipples. Tell me what you feel.\"\n\n\"It's like a million tiny fingers, or maybe carbonation. Each little variation in the fabric catches the nipple and provides a new level of friction. Wow. I never knew! The sensation is almost like a vibrator.\"\n\nBeth moved to the edge of the bed and lay there with her legs on the floor and her butt half off the bed.\n\n\"Now it's time for you to get me off again, Lara. Sit up and do what I say.\"\n\nLara sat up and Beth handed her the slip. Beth reached down and held her labia slightly open.\n\n\"Hold the slip by the waistband, and start moving it upwards against my pussy. As you pass my pussy, move your hands a little towards my stomach, so the fabric runs past my clit.\"\n\nI sat there, fascinated. I had never heard of anything like this, let alone witnessed it.\n\n\"Mmm. That's good. A little more towards my stomach. Yeah, now it's on my clit.\"\n\nBeth continued, \"Now raise it and lower it, just using the silky side, no lace. Ahh, that's it. Down again. Let it slide down by itself. Oh, yes, that's good. Real good. Again three more times. YESS. YESS! Now turn it so the lace along the slit is touching my pussy and riding up against my clit. Sam, she will be able to pull it up, but you will have to help her by pulling it down.\"\n\nLara slid it up, and I grabbed it to pull it down.\n\nBeth yelled, \"Akkkkh!! Gently! Gently! It's not a chainsaw. Just let it tickle. I probably won't be able to say much more, so just remember. Be gentle. (softly) Gentle . . .\"\n\nLara and I worked that lace over her clit for several minutes. We held it so gently that I don't think it was in contact all of the time. Beth had been right. After about ten seconds, she just lay there with her eyes closed. She started to softly moan. It became louder and irregular. She began moving her hips up and down as if she were fucking the slip!\n\nHer moaning became rhythmic, following the movement of the slip and her hips.\n\n\"Ohhh, ohhh, uhh yaahhh.,\" and then, \"Oh, God, yes, yes, yess, YESSSSS!\"\n\nHer hips bucked, and she came hard, pussy juice flowing out and wetting the slip. She grabbed the slip.\n\n\"Nnnnn. Ssstop slipppp.\"\n\nShe pulled it out of our hands, bunched it up and bit down on it hard as the waves of her orgasm dissipated.\n\nWe watched her breathing go from ragged to slow over the next minute. Finally I asked her how it felt.\n\n\"It's wonderful to masturbate with silk or nylon like that, but when someone does it to you, it can drive you wild. You have to be careful, though,\" she said, rolling her eyes and laughing. \"Long before I was into girls, a school friend told me about it when I asked her why she was walking a bit odd. I gotta tell you the story.\"\n\nBill sat up and smiled. Lara and I sat up like we were about to hear campfire story.\n\n\"My friend said that she and another girlfriend had heard about the 'slip thing' and also heard that it was more intense if you were tied up when it was done to you. They talked about it and got themselves worked up thinking about it. They had never touched another girl let alone each other, so they were afraid to 'do it.' Maybe they thought it would turn them instantly into lesbians. I don't know.\"\n\n\" They were playing Truth or Dare at a slumber party with a few other girls one day, and her girlfriend dared her to let the other girls do 'it' to her. She was afraid to chicken out of a dare, so she agreed. Apparently, no one warned her about what to do it with or how to do it. Her friends tied her arms with sheets and held them over her head across the bed. Her pussy was on the edge of the bed on the opposite side.\n\n\"Laying there tied by a bunch of girls who also never had been with another girl, they stripped off her pajama bottoms and tied her feet to the frame on the other side. Then they did it to her with a chiffon petticoat.\n\n\"It was the only thing they had that looked like a slip, and it sure got her off! The problem was that they didn't stop while she was climaxing. They did it for more than a minute more with that relatively coarse fabric while she screamed. Her girlfriends had never seen a woman climax, and they thought the screaming was part of the orgasm!\n\n\"She said that her labia and clit were red and swollen for three days.\"\n\nLara said with mock seriousness, \"No chiffon and stop at the orgasm. Good safety tip!\"\n\nWe all had a good laugh, and Beth went over to Bill to cuddle for a while.\n\nLara looked at Beth, and said, \"It looked like you enjoyed the edge of pain with the lace. Are there any other activities that bring you to that pleasurable edge?\"\n\nI could sense a slight change in Lara's tone. I had a feeling my wife was about to make that leap off the bridge.\n\nBeth said, \"Stretching my pussy to its limits sometimes brings me pleasure.\"\n\nShe reached out to Lara, took her hand and looked at it.\n\n\"Sometimes Bill inserts three well-lubed fingers. Four is way too much, and he has never been able to get the whole hand in. Not even close.\"\n\nShe kissed Lara's hand and brushed it over her cheek.\n\n\"Your hand is soft and smooth, Lara, and it's half the size of Bill's. I think you could get your whole hand in there. But not right now, sweetie. The slip left me a bit over stimulated, and I don't know if I could take it.\"\n\nLara had indeed decided that now was the time to see how far she could get away with dominating Beth.\n\nShe said, \"Oh no you don't, Beth. You can't tell me you like something that erotic and tell me you can't take it right away. Your only choice in the matter is to tell me if you want it lying on your back from above or on your knees from behind.\"\n\n\"Not yet, Lara. Like I said, I'm a little worn out right now,\" Beth said tentatively.\n\nLara pulled Beth back to the bed and pushed her down. She held her there by the shoulders.\n\n\"Now!\"\n\nBeth saw the look on Lara's face. She looked pleadingly at Lara.\n\n\"Please,\" she said. \"Not yet.\"\n\nLara's tone was stone cold now. She bent over Beth with a stern expression.\n\nShe just said, \"Choose.\"\n\nShe released Beth and got off of her.\n\nBill sat up at this. He picked up the tone in Lara's voice, and I guess he was curious to see how his girlfriend would react. I was a bit curious, too, for that matter.\n\nBeth had a strange look on her face. It wasn't fear, but it something like that. With a trembling voice she moved to the center of the bed, spread her legs wide open and spoke in a small voice.\n\n\"Please, Lara. Lube your hand really well. Please.\"\n\nLara was starting to enjoy this game a lot. She got on top of Beth again, and as she straddled her, the younger woman turned her face to the side.\n\nLara said, \"It's called fisting, Beth. Fisting. Look at me. Look me in the eyes right now and tell me you want me to fist your cunt! Say it. Say 'Please Lara, fist my open, wet cunt.'\"\n\nBeth was almost in tears, but she looked up at my wife and whimpered, \"Please Lara, fist my open wet cunt.\"\n\nLara picked up the tube of lubricant and held her hand over Beth's face while she applied a generous amount. Beth watched as Lara's fingers became shiny with the lubricant, not ten inches over her face.\n\nLara moved down so she could kneel between Beth's white-stocking legs. Without a word or any other foreplay, she started to work her fingers into Beth. First she put in three fingers. They slid in easily.\n\n\"Tell me that feels good, Beth\".\n\nBeth managed to get out. \"Yes, it does.\"\n\n\"Tell me you want another finger. Tell me you want more. Say it!\"\n\nBeth said, \"Please give me more, Lara. I want you to give me more.\"\n\nLara put four fingers together, with her thumb tucked inside the fingers. This time, there was more resistance, and Beth cried out.\n\n\"Tell me to keep going, that you want my whole hand,\" ordered Lara.\n\n\"Keep going, Lara. I want your whole hand inside me now,\" cried Beth.\n\nThere may have been some pain in her voice, but most of what I heard was pleading. She was begging my wife to fist her in front of Bill and me. She was turned on, now, by what was happening!\n\nLara added a little more lubricant and gave a final push. Her hand went all the way into Beth's vagina, and her pussy closed around the older woman's slender wrist. Lara looked at me and saw what must have been a really amazed expression.\n\nShe said, \"Go down on Beth while I fist-fuck her. Let's drive her insane!\"\n\nBeth cried out, \"Give it to me Lara. I want to be fisted and licked. Please!\"\n\nI didn't need any more encouragement than that. I moved right over so that I could lick her. With the lube on Lara's hand and her pussy juices, she was really wet. As my tongue flicked over Beth's clit, I could see and hear my wife moving her hand in and out of Beth's cunt a few inches from my face. She never moved her hand out all the way out. She just moved it out far enough to see the end of her wrist before plunging it back in as far as she could shove it.\n\nBill seemed to be in shock. He had never seen Beth dominated before. He later told us that he had no interest in domination, so he had never tried it. He had to admit, though, that it turned him on to see Beth ordered by my wife. He came a little closer so he could watch the expression on her face as Beth fisted her.\n\nWith my licking and Lara's fisting, Beth came again in about four or five minutes.\n\nAs her orgasm built, she started talking to Lara.\n\n\"Please Lara. Fuck my dirty little cunt. I want you to do it until I cum.\"\n\nLara said, \"Tell me you want my husband to lick your twat. Spread your legs so he can get a better look at me fisting you! Say it!\"\n\n\"Oh, Lara. I want Bill to suck my clit. I want him to spread my legs wide apart so he can look at you punishing my cunt.\"\n\nThat drove her over the edge. This time she screamed loud enough that I thought she might be heard in another room. She groaned a little when Beth pulled her hand out, I moved away from her pussy and then Lara climbed on top of her. Lara held her tightly by the shoulders and kissed her deeply. Without hesitation, Beth kissed Lara back.\n\nBill and I sat on opposite sides of the bed and watched our ladies hug and caress each other. I wish someone had taken a picture our faces. I don't think either of us had been that flabbergasted in the last twenty years!\n\nI don't think any of us fully understood what had just happened. Beth, who was bigger and in better shape than my wife had just allowed herself to be dominated by Lara.\n\nAfter several minutes of silence, Lara tenderly spoke to Beth.\n\n\"Sweetheart, are you okay? Are you hurt at all, honey?\"\n\nBeth was still in my wife's arms. Lara pulled Beth's face to hers gently for a light kiss on the cheek.\n\nBeth beamed back, \"Except for the fact that I'm probably going to walk wrong for a few days, I've never been better.\"\n\nShe kissed Lara back, and seemed to be content to have Lara hold her.\n\nShe looked at Bill and said, \"Honey, I'm sorry to have to say that that was the most erotic experience of my life. I want your tongue where Sam had his the next time we do that, 'cause I love you so much and want you to be part of that experience.\"\n\nBill kissed his girlfriend and said, \"You know I will, Honey. I've told you over and over that I'll do just about anything to make you happy.\"\n\nI asked Beth, \"Ready for another round?\"\n\nShe knew I was kidding by that time, but she played it to the hilt. She turned to Beth and clung to her like the heroine in a bad play featuring Snidely Whiplash.\n\n\"Please, Sir, no more!\"\n\nWe all laughed again, and agreed that we were all about worn out. We decided that Bill and Beth didn't have to walk all the way back to their neighboring resort.\n\nThe bed was king sized, and there was enough room for all four of us to get under the covers. The ladies took the inside, and Bill and I were on the outside. It was two o'clock in the morning, and we had been fucking on and off for nearly four hours. Within minutes after turning out the lights, we were all fast asleep.\n\nI awoke the next morning with Lara's silk covered legs entwined with mine. I kissed her.\n\n\"Good morning,\" she said when my kiss woke her up.\n\nShe turned over to find Bill and Beth still sleeping. I nearly choked when I saw my wife pull the covers down and lightly touch Bills penis.\n\nI whispered in her ear, \"So much for not wanting any penis but mine near you.\"\n\nShe whispered back, \"Oh, shut up and watch. I'm barely getting it started\"\n\nIt only took a few strokes before it was hard, and Lara took Beth's hand and placed it on the shaft. That woke Beth, but Bill was still asleep.\n\nLara whispered to Beth, \"Sam and I want to see you give your man a little 'morning delight.'\"\n\nBeth looked at Lara and asked, \"Did you do that?\" indicating Bill's erect member.\n\nLara nodded, and Beth turned her attention to Bill. She gently stroked him until he woke up. He kissed her, and she told him to lay back and enjoy the ride. She stroked him for a few minutes and then went down on him.\n\n\"Beth, I love your mouth,\" Bill as he enjoyed the ride. \"Do you thing with the underside of the head. Yeah. Oh, baby!\"\n\nBill asked for several more specific actions. Apparently, Beth had blown him so many times that he had cataloged each of her techniques. She did every one of them on cue! It was like watching the dance master giving instructions the prima ballerina. Every request performed with perfection.\n\nBill then gave Beth a series of three instructions. It was like he knew the last three numbers of a combination. No, it was that he did know the last three numbers of a combination.\n\nWhen Beth stared on that sequence (I think it involved the scrotum, the hole in the very tip of the head, and a kind of modified \"deep throat\" technique), I found that Bill had said his last intelligible words for the remainder of the process. His remaining ability to speak consisted of what seemed to be random vowels and consonants strung together.\n\n\"Oh, ahngkaahhh! Ohhowyaaak! Ah ah ah AHHHH!\"\n\nLara and I watched as Beth's extraordinary oral talents brought him to climax.",
        "Bill lay there for a few minutes, nearly comatose, then got up and sat in his easy chair, spent. Beth got up and quickly rinsed the cum out of her mouth, per Rule Number One.\n\nLara told her to get back in bed. I sensed another chapter in The Tale of the Ice Queen was about to unfold.\n\nWith that cold tone, she turned away from Beth, as if Beth was an inanimate object, and spoke to me.\n\n\"Bill, would you like to fuck Beth?\n\n\"Sure, if she will eat you out while I fuck her and watch,\" I replied.\n\nThat perked Bill up enough that he turned his head just a little to watch. Beth on the other hand, froze where she was. She knew.\n\nLara addressed Beth sternly, saying, \"Beth I want to see my husband's cock inside you. You will lay there and take it. I'm going to sit on your face while he fucks you. Now I want to hear you say you want my husband's dick in your cunt.\"\n\nBeth looked at Bill to see what his reaction was, but Lara grabbed her head.\n\n\"You talk only to me! Now say it.\"\n\n\"P-p-please have Sam fuck me,\" stuttered Beth.\n\n\"What else?\" demanded Lara.\n\n\"I want you to sit on my face so I can taste your pussy.\"\n\nShe looked almost terrified as she said this, and I suspected that in the cold light of day, she was afraid that Bill would lose respect for her if she let my wife humiliate her like this. Last night everyone was in the wild throes of passion, but to let Lara dominate her again in the morning frightened her.\n\nI told her, \"Beth, honey, look at Bill.\"\n\nLara said, \"It's okay. Look at him.\"\n\nWhen Beth did, she saw that he was pounding his meat like a young boy with his first porn mag. It was obvious he found this scene extremely erotic.\n\nLara caught the hint.\n\nShe said, \"Beth, tell Bill that you want to be my slave for the next hour, and beg him for permission to do it!\"\n\nBeth turned to Bill, but she was having trouble getting the words out.\n\nLara winked at me and had me hand her the pearl necklace she had been wearing last night. (Remember those pearls?) They were faux pearls, with graduated sizes from four to twelve millimeters. I knew what was coming. Lara and I often did a version of this.\n\nShe deliberately made a point of coating them with personal lubricant directly over Beth's face.\n\nShe said, \"Beth, these are going up your cunt. I'm going to pull them out one at a time. Each time I pull out a pearl, I want you to tell Bill what I just ordered you to tell him. One word per pearl.\"\n\nWith that, she pushed the necklace up inside Beth's vagina.\n\nLara pulled out the pearls, one at a time. Beth turned to Bill, who had stopped masturbating. He was as intently curious about what was going to happen next as I was.\n\nBeth did not say anything when the first pearl came out, and my wife slapped her on the ass.\n\n\"One word for each pearl, Beth. Now!\"\n\nWith each successive pearl, we heard Beth whimper, \"Bill, - I - want - to -- be - Lara's - slave - for -- an - hour. -- Please - give - me -- your - permission!\"\n\nLara said, \"Now that wasn't so hard, was it?\"\n\nWith that, she jerked the rest of the pearls out, making Beth gasp. The middle pearls were 12mm, about half an inch, and Lara had just gotten to those.\n\nTurning to Bill, Lara said, \"What about it Bill?\"\n\nBill said, \"Beth, you have my permission. You have no idea how hot this is making me.\"\n\nHe resumed his stroking as he said that.\n\nLara straddled the younger woman's face and then pulled Beth's face into her pussy. I opened Beth's legs and fingered her pussy, which was already pretty wet from the pearl experience. Then I got on top of her and fucked her. My wife's ass only a few inches in front of my face.\n\nI could hear Beth making slurping sounds as she tongued and sucked my wife's pussy.\n\nI could see a little dried lubricant still on my wife's ass, and I had an idea. I pointed to the lube tube, and Bill tossed it to me. I got my index finger nice and wet, and I reached out and just played with the rim of Lara's anus. I probed just a little bit, but didn't stick much of it in.\n\nLara was now getting a semi-DP. She had a tongue a little way into her pussy and a finger a little way into her butt. I couldn't even begin to imagine how that must have felt.\n\nLara cried out, and said, \"For god's sake, whoever is fingering my ass, just stick your fucking finger in already!\"\n\nThat was all the encouragement I needed, and my middle finger was now feeling the inside of my wife's rectum for the first time. I had never felt anything like it, and I could feel Lara's muscles pulse as she built to a loud, groaning climax and came first.\n\n\"Eat me, slave! Eat my cuuunt . . . ohhhh, god!\"\n\nFeeling her climax from an unfamiliar cavity was exciting and very, very erotic.\n\nI pulled my finger out of her ass. She shuddered and then swung off our new lover's face so she could watch Beth and I fuck. She reached down and played with Beth's clit until we both came.\n\nIt wasn't a quiet climax, either.\n\nLara was saying, \"Fuck my husband good or I will fist you without lubricant. Tell him you want his dick in your cunt. Say how much you liked licking my pussy!\"\n\nBeth repeated each command. Towards the end, it didn't come out very clear, but the poor girl tried to form the words Lara ordered her to say. In the final moments it was just wild, unabashed variations of, \"AHHHHHHH!\"\n\nWhen I felt Beth's pussy start to contract, I was so far gone that I came, too. I don't remember what I was yelling, but I hope it didn't shock anyone who may have been passing by in the hallway.\n\nSpent, I lay next to Beth, only to find my wife's hands once again on Beth's pussy.\n\nShe said, \"Beth, I'm going to do something now to your cunt. I don't care how sensitive you are right now. You are going to take it and then take whatever comes next. Now tell me I can do whatever I want to your cunt. Tell me I own it!\"\n\nBeth told her, \"Please do what you want with my pussy.\"\n\nLara stopped her and lightly slapped Beth's face. It was not meant to hurt Beth, simply to show Beth who was in charge.\n\n\"I didn't say 'pussy.' I said 'cunt.' I have a pussy. Slaves have cunts. Now say it right, slave.\"\n\n\"P-P-Please, Lara. Do whatever you want with my cunt. You own it.\"\n\nLara rewarded the submission with a kiss, and said, \"There's my Good Girl.\"\n\nI thought she was going to finger Beth, but instead, she spread Beth's pussy lips wide open and buried her face in her cunt! I could hear her licking and sucking. Beth, who had just climaxed, was squirming about with what must have been a sensory overload.\n\nLara emerged from her pussy. She turned around and looked like she was about to kiss Beth. She mumbled a single command\n\n\"Open.\"\n\nBeth obediently opened her mouth. I could see that my wife had just sucked some of my cum out of Beth and was now letting it flow into her mouth as they kissed! Beth was swallowing it as fast as it was deposited. Bill came so hard we would have to clean cum off the rug three feet from where he was sitting.\n\nWhen Lara was done, she lovingly caressed Beth's hair and kissed her. She softly told Beth that she was a beautiful woman again, and not a slave with a cunt.\n\n\"You're my angel.\"\n\nShe motioned Bill over, and the three of them spooned with Beth in the middle.\n\nBill said over and over, \"I love you Beth, I love you.\"\n\nBeth said, \"That was some of the hottest sex I had ever imagined.\"\n\nWhen Beth was finally composed, she asked Bill if what she had done was okay with him. Bill told her that he knew it was only role-playing, and that it turned him on a lot to watch it.\n\nShe said, \"But Bill, you have told me that you are not into domination,\" after which she shrunk away from him a bit.\n\nHe immediately reassured her, pulling her closer again and saying, \"Lover, doing it myself and watching Sam's sex goddess do it to you are two different matters entirely. I don't didn't care for the former, but I couldn't get enough of watching the latter.\"\n\nSmiling, he said, \"Look, Beth, I know you're not signing up for a dog collar and a rubber gag for around the house. What you two just did was just a made-up play.\n\n\"Anyway, I think if a real dominant/submissive couple saw what the two of you were just doing, they would have spit up their breakfast with laughter! I don't think they turn the act on and off like a light switch.\"\n\nBeth finally laughed began to kiss Bill and Lara passionately, one after the other. She confessed that she had been incredibly turned on, and might have done anything that Lara commanded. She was initially terrified that if she acted out this fantasy, that Bill would lose respect for her. Now that she knew Bill loved it, her playful side emerged. She lightly rubbed her hand over Bill's penis while she looked at Lara.\n\n\"Can you give Bill a taste of your 'power,' Laura?\" she asked.\n\nLara asked Bill if he was game, and Bill said, \"Why the fuck not? After what I've seen tonight nothing would surprise me.\n\n\"Go ahead,\" he grinned, \"and make it rough.\"\n\nTo our surprise, Lara reached back and slapped Bill hard enough to turn his head. It must have really stung!\n\nLara yelled at him, \"Now that I have your attention, slave, I want you on all fours licking my pussy. Now!\"\n\nBill got down on all fours in front of my wife and stuck his tongue in her pussy. I didn't know what to make of another man eating out my wife at her command.\n\nBefore I could say anything, Bill started laughing and got up.\n\nHe looked at Lara and said, \"Nah. I'll just stick to fucking my wife and jerking off.\"\n\nAll four of us cracked up, and Beth realized that it would have been that easy to stop Lara's domination if she had really wanted Lara to stop.\n\nBeth sat up and then knelt facing Lara. Her head was down, and she had her hands folded behind her back. Short of being tied up, I couldn't think of a more submissive pose. She was now role-playing to the hilt.\n\n\"Can I call you Mistress?\" she asked in a voice that seemed to be coming from a schoolgirl.\n\nThat actually took Lara by surprise. She thought about it for a moment and then spoke softly.\n\n\"Yes you may, but only when I'm dominating you during sex. It wouldn't sound right otherwise, and I'd be embarrassed\".\n\nBeth gently took Lara's hand and guided it to her pussy. She pushed one finger inside herself. With one of Lara's fingers in Beth's cunt now, she looked into Lara's eyes.\n\n\"Lara, please order me to call you Mistress.\"\n\n\"Slave, call me mistress!\"\n\n\"Thank you, Mistress!\"\n\nThen she took the finger out of her pussy and sucked on it. Lara took Beth's hand and did the same thing with a finger in her own pussy.\n\n\"I see,\" she said, \"You are welcome, slave!\"\n\nShe also removed the finger and licked it. They both giggled and hugged.\n\nWe all took turns in the bathroom and then got dressed.\n\nBill said, \"We may be a bit over-dressed, but I think breakfast would be in order.\"\n\nWe all agreed. We walked to the coffee shop and asked for a corner booth away from others, if possible. The waitress said her name was Deb, and that she was going to be taking care of us. Deb looked at our attire, winked, and led us to a secluded spot.\n\nOur attire suggested that we may have had a \"sleepover\" the previous night. I guessed Deb saw this a little more often that I might have thought two days ago.\n\nWe ordered and then sat back with our coffee.\n\nI could tell there was a bit of tension. Beth broke the silence.\n\n\"I guess we all want to know what happened last night and again this morning. My journey started the first night at that moonlit window.\n\n\"Since I turned twenty I have been somewhat attracted to women, but never had thoughts about domination or submission until Lara had motioned me over the first night. The sight of an older woman in the moonlight, dressed in a black vintage slip had awakened something inside me, and I suddenly felt compelled to get on my hands and knees in front of Lara.\n\n\"I can't explain it. The thought of Lara standing over me exited me so much that I couldn't resist the impulse.\n\n\"I thought it may have been a transient impulse until last night. When Lara coldly said she wanted to see what I had on under my dress, the feelings started to come back. When Lara demanded that I ask for the fisting, I completely lost control, and would have been willing to do just about anything Lara demanded.\n\n\"The sex this morning was unexpected. When Lara started making demands again in front of Bill, I lost some confidence, though the physical act of being dominated was still as erotic and satisfying as the night before. I was afraid Bill would be disgusted if I continued. Now that I know Bill will support and encourage me beyond that first episode, I am becoming very comfortable with my lust for submission.\n\n\"The odd thing is that my desire is not continuous. Bill was right when he said a real D/s couple wouldn't turn it on and off like we did. They would probably have the lifestyle. We just acted out a fantasy.\"\n\nShe turned to Lara.\n\n\"Don't get me wrong, it was a hot fantasy. An erotic fantasy. A wicked, wonderful sinful fantasy . . .\"\n\n\"Got it. You liked it,\" Lara said, deadpan.\n\nWe cracked up again.\n\nBill said, \"By the way, sweetie, how did you know the abbreviation was \"Ds?\"\n\nBeth tickled him and said, \"You forgot, Honey. I work in a lingerie shop? We have a leather section, remember? And by the way, it's a capital D, a slash and a small s.\"\n\nBlushing, Bill said, \"Oh, right. Lara, how did you know Beth wanted that fantasy? You two were really in tune together whenever you both turned it on.\"\n\nLara said, \"I sensed something in Beth when she crawled to my pussy on all fours. The next night when I told Beth that I wanted to see what she had worn to a voyeuristic lesbian tryst, Beth's body language confirmed that my suspicions were probably right.\n\n\"I had never thought about domination, but thought it would fun to try if Beth wanted to go along with it. I just wanted to do something wild and new. My first attempt at it was so sexually exiting that I knew I would want it at least once every time Beth and I meet. I hope that is okay, Beth.\"\n\n\"I think it's way more than okay!\"\n\nBill was surprised by Lara's statement.\n\n\"You mean you had never thought about dominating anyone, man or woman, before last night?\"\n\nLara said. \"That's right. I just felt that Beth would enjoy it, and I suddenly found it hot for the first time in my life. The worst I figured could happen would be that Beth would tell me to go fuck myself, which wouldn't be such a bad thing either with all of you watching.\"\n\nThe three of us laughed.\n\nBill turned to Lara with a thoughtful look.\n\nHe finally said, \"Lara, I think I may have some insight here. My guess is that you are a litigator, and have cross examined witnesses in court. Am I right?\"\n\n\"Yeah. Why?\"\n\n\"You're good, right? Win a lot of cases by tripping up witnesses for the other side?\"\n\n\"Yeah. So?\"\n\n\"When you said your professor commented on your gift of oral argument, I think he saw in you the ability to read people. I'll bet that when you are cross-examining a witness, you can read when he's lying.\"\n\n\"Sometimes, I guess. I don't think about it when I'm doing it. I always thought about it as an instinct.\"\n\n\"That's my point. You read Beth's emotions and body language, and your instinct took over. You decided in a flash that she would play your game with you.\"\n\n\"Wow,\" chimed in Beth, \"my lover has superpowers!\"\n\nWe all picked up our coffee mugs and toasted Lara.\n\nI said, \"Here's to Fister-Woman, Master Mind-Reading Sex Ninja!\"\n\nWe had another laugh at Lara's expense, as the toast really made her blush.\n\nBill rubbed his face where Lara has slapped him. It was still a bit red.\n\nLaughingly he said, \"Damn, Lara, I'm sure glad you hadn't practiced doing that. Any harder and I'd be checking out how good my dental coverage is.\"\n\n\"Sorry, Bill. That was kind of intentional. When Beth suggested that you and I try a . . . what was it Beth? . . . oh, yeah, a D/s role play, I couldn't think of anything else that I still wanted to do. My pussy was getting worn out, and I had just had my ass invaded for the second time in twelve hours. I figured if I gave you a good smack, you might not want to do anything else.\"\n\nBill laughed and said, \"I was only going to try it for a few seconds so that Beth could see that I tried. I will tell you, though, that slap made it a lot easier to decide to stop.\"\n\nLaura held out an open palm and said, \"Happy to help, Sport. Any time you need a fresh one, come see me.\"\n\nBill leaned over and gave her a little kiss.\n\n\"If I ever need a professional beating, I'll be sure to look you up.\"\n\nAnother round of laughter.\n\nI asked Beth what her relationship was like with Bill. She kissed him with genuine affection.\n\n\"I would do just about anything for him.\"\n\n\"Do you act out all of your fantasies? Lara continued.\n\n\"We try most of them, but some are not successful. Bill could get a few fingers inside me, but his hands were too large to fist me without extreme pain, for instance, and Bill won't let me stick anything up his ass.\"\n\nLara and Bill held their palms together. Bill's hand was twice the size of Lara's.\n\nLara said, \"No wonder he couldn't fist you! That hand would have split either of our anuses in two!\"\n\nI said, \"Great breakfast conversation, you two. Ass-splitting-anal-over-easy with a side of fisting.\"\n\nLara intentionally picked up an especially runny part of her over-easy eggs, and slurped it off the fork.\n\n\"Oh, sorry, sweetie,\" she said with a smile.\n\nBill said, \"Think about the sequence of events. The first night was a spontaneous event. There was no pre-planning. The moonlight and the fact that the two of us had had been madly petting were enhanced by the sudden fear of discovery, followed immediately by an invitation from a sexy woman in sexy underwear. Beth, this caused you to react instinctively. Whatever latent desires you had about having a woman dominate you were exposed that night when Lara motioned you over. We were all caught in the heat of passion.\n\n\"There is no way we could have planned that meeting. Even if we could have thought it up, none of us could have done it cold. Finding that patio seat next to what we thought was an empty room was the only setup that could have ever worked. It was random, but it was magic.\n\n\"By the way, you two, we had been hiking all afternoon, and found ourselves close to you resort. We used our Resort Card to have a light dinner at the diner here, and were on the way home when we decided to fool around a little on your patio bench.\n\n\"The next day, you discovered that Lara was in the same profession as me. Until I took you away from it, you worked in an office where people like Lara told you what to do on a daily basis. Now you had a woman like that ordering her to do what you secretly yearned to do the most: to have sex with a woman in front of me and to obey her commands.\"\n\nBeth thought about it for a minute.\n\n\"There might be something in your theory. Very methodical. Very lawyerlike.\"\n\nLara and Beth took a sip of coffee.\n\nWith a straight face, Bill said, \"Thank you, Sweets. It's either that or you are just a submissive slut who wants to be tied up and spanked by a Grade A piece of dominant ass like Lara here.\"\n\nLara and Beth both laughed so hard they spit coffee all over the tablecloth and had to wipe their noses.\n\nBill gave me a high five and said to Beth, \"Babe, you do what you want to do. As long as I'm a part of it and you don't get hurt, I'm with you all the way. If you want a hot babe like Lara to boss you around once in a while, it's fine by me as long as I get to watch. I've never had a woman turn me on as much as you do, and I'll do almost anything to make you happy. Maybe someday you'll even accept my proposal.\"",
        "Lara gasped, turned to Beth.\n\n\"You had this love-hunk propose to you and you didn't say yes?\"\n\nBeth said, \"Well, no, not yet.\"\n\nLara gave Beth a look with a raised eyebrow and asked, \"You're not thinking about going totally lesbian are you?\"\n\nBeth actually blushed, and said, \"Oh, no. I like guys. Girls are more of an occasional urge.\"\n\nLara said, \"I don't get it. You have a sexual madman here who takes good care of you. Not just your physical needs, but your emotional needs as well. Girl, where in hell are you going to find another man who will support you in either working or staying home, who will give you great sex, who will let you suck pussy whenever you get the urge, and who will let you fuck other men when it suits you? On top of that, he likes it when you want a woman to slap you around. Beth, it doesn't get any better than this!\"\n\nWe didn't know that Deb had just brought our food and had set it on a stand just behind our booth. She was red as a beet, obviously having heard my wife's last comments.\n\nShe brushed against my leg as she reached over me to serve Lara. She almost put her tits in Beth's face when she reached over her to serve Bill.\n\nWhen she bent over, I could see down her uniform top. Her breasts were encased in a red push-up bra, and the view was panoramic!\n\nWhen she saw me staring at them, she just continued to serve Bill, giving me a little smile.\n\nWhen she was done serving, Lara got her attention.\n\n\"How much did you hear?\"\n\nDeb blushed again. She turned to Beth.\n\n\"Enough to know that you'd be crazy not to marry him!\"\n\nWith that, she rushed off with her serving trays.\n\nBeth said, \"Hay Sam, did you enjoy her boob show while she tried to get me to lick her titties?\"\n\nI laughed and said I did.\n\nLara, said, \"That's wonderful, you pervert. You better tip big.\"\n\nLara asked, \"Well now that we know each other, what's next? I know the last two nights were pretty good ice breakers, but now that we've actually made the big commitment to sit together and have breakfast we need to talk about the future.\"\n\nBeth laughed and said, \"Yeah. Sex is OK, but nothing bonds us together like bacon.\"\n\nShe then stuck a strip of bacon half into her mouth and leaned over Bill towards Lara. Lara nibbled the exposed strip right down to Beth's lips, and ended it with a light peck on the lips. Bill and I applauded.\n\nBill said, \"I know the weekend was really great. It appears it was an eye opener for everyone. What Beth and I would like to know is this: Was this a one-time fling so you two could fulfill a fantasy, or do you think you would really like to get together once in a while for some more world-class sex?\n\n\"We have to check out today, and we would really like to see the two of you again. I don't think we could find another couple like you in a million years.\"\n\nI looked at Lara questioningly, and she responded by squeezing my hand and nodding. I pulled out my cell phone.\n\n\"I guess it's time to start exchanging last names and contact information.\"\n\nBeth breathed a sigh of relief.\n\nShe looked at Lara and said, \"I was so afraid that I was going to lose the only woman who really understands my needs. I mean, my life with Bill has been a dream, but that other part of me was waiting for the right person to release it. I know that you had yearnings to be with a woman, and I was thrilled to be your first. I know we will all provide each other with a safe environment to explore our fantasies.\"\n\nI picked up my coffee and toasted, \"Here's to fantasies!\"\n\nThey all clinked coffee mugs with me. We all promised that no subject for discussion would be taboo, though we were certain that once in a while one of us would come up with a fantasy that the other three wouldn't try.\n\nI leaned towards the others.\n\nIn a low voice, I said, \"Speaking of wild fantasies, if you two do get married, can I watch my wife fuck Beth with a strap-on in her wedding dress?\"\n\nWe all cracked up again until Beth got quiet, and looked down at her coffee cup.\n\nQuietly, she said, \"I think that may be a possibility now. You two have brought me closer to saying 'yes' to Bill than I have ever been. If I decide to marry him, I can think of no better way of sealing our friendship than going wild on our wedding night.\"\n\nTurning to kiss Bill, she added, \"As long as he gets to fuck me first, of course.\"\n\nLara turned to me. She was blushing. I asked her what was wrong, and she whispered something in my ear. I nodded.\n\nShe turned to Bill and Beth and said, \"If you two get married, I'm going to give you both a present. Beth, I'll do you in your wedding dress with your choice of strap-ons. Bill, I just got permission from Sam to break my rule about penises other than his. If this girl marries you, we want you to fuck me as well. Flat-out boy-girl straight fuck with both of these two watching.\"\n\nBeth said, \"Oh god, I'd really love to see that. You would do that for Bill?\"\n\nLara nodded, and the two of them hugged. I saw Beth's hand ride up on Lara's leg.\n\nI barely heard her whisper, \"Thank you, Mistress.\"\n\nShe removed her hand from my wife's crotch. Beth blushed again.\n\nLara said, \"You're welcome.\"\n\nAfter we exchanged names, phone numbers and addresses, we discovered that we only lived about an hour away from Bill and Beth. We agreed to spend a weekend at their house in three weeks.\n\nBill said, \"I wish we had another day here, but we have to check out and get on the road.\"\n\nWe all stood up and hugged. Beth kissed me, and Lara kissed Bill. Lara then kissed Beth full on the mouth for about a minute while they embraced. When they broke apart, I could see that they were both crying. After everything that had happened over the weekend, I decided that was the sexiest thing I had seen yet.\n\nOut of the corner of my eye, I saw someone watching as they kissed. It was Deb, across the room. She apparently thought it was sexy, too, as I saw her wipe a tear away.\n\nBill said, \"Thanks for breakfast and a really great weekend,\" and they left.\n\nAfter Bill and Beth left, Lara and I sat down again to have a little more coffee. She rubbed my leg under the tablecloth.\n\n\"I guess we have some more menu items to add to Column C,\" she said.\n\n\"And when we're with them, there are a few more Column B choices, as well. Let's see, factoring in three people instead of two, we probably tripled Column B.\"\n\n\"Too bad they had to leave today. What are we going to do for the rest of the day?\"\n\n\"Anything you want to do.\"\n\nShe said, \"Anything?\" in a playful tone.\n\nI said, \"Yup. Anything.\"\n\nI was expecting her to say antiquing or hiking or swimming. Maybe a trip to the spa for a massage and sauna.\n\nShe leaned over and whispered in my ear, \"Well, then let's find out what time Deb gets off work.\"\n\nI laughed and said, \"I think I've created a sex monster! I like it!\"\n\nShe just leaned over and gave a kittenish growl in my ear. I would have taken it as a joke, but her left hand lightly brushed my penis through my slacks as she growled. That and the fact that she was playing with her pearl necklace with her right hand.\n\nWhen I pulled out my Resort Card and held it up for Deb to see, Lara squeezed my arm, and I knew I might be in for another memorable evening."
    ],
    "authorname": "PanesOfGlasss",
    "tags": [
        "lesbian",
        "anal",
        "d/s",
        "role-play",
        "lingerie",
        "oral",
        "fantasy",
        "masturbation",
        "humor"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/moonlight-window"
}
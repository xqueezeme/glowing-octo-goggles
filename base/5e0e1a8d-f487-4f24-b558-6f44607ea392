{
    "title": "Two Hundred Dollars Ch. 22",
    "pages": [
        "78 Dollars\n\nLaura felt a shiver run through while she clung to Kent, letting the last of her orgasm run out.\n\nDrunk orgasms are the best orgasms. Oh, god, his erection is still poking me.\n\nThe preacher in her head had fallen silent. The harshness of the last round of spankings had cleared out any objections on his part. She'd earned this orgasm the hard way and he couldn't reproach her. Laura sighed with relief.\n\n\"You okay?\" Kent whispered.\n\n\"She's fine,\" Bailey taunted. \"She got a good hard spanking.\"\n\nLaura kept her eyes closed as she straightened up in Kent's lap. With a deep breath she opened her eyes.\n\n\"Yes, I'm wonderful.\" she told them. She speared Bailey with a look, \"Your turn?\"\n\n\"Delightfully ambiguous,\" Bailey replied. \"My turn for what?\"\n\n\"Spankings,\" Laura insisted. \"At least at first.\"\n\nLaura felt Bailey's stare force a blush to her face.\n\nWhy am I embarrassed? We're both here in our underwear, bending over and offering our butts for a dollar at a time.\n\nKent still had her wrapped in his arms, but the moment she wiggled her shoulders at him, his grip relaxed and she stood up.\n\nStill in my panties, but I guess nobody else is wearing anything more, so it's fine. Probably.\n\nShe held out both her hands, palms up, offering Kent's lap to Bailey.\n\n\"Over his lap?\" Bailey asked, her eyes darting to the erection supported tent in Kent's shots.\n\n\"That's up to you,\" Kent replied, leaning back and stretching his arms out as if he owned not just the couch but the entire house.\n\nEven though it's my house, it does sort of feel like he owns the place. King for a day, or something like that. He's not even embarrassed about his hard-on.\n\nLaura watched her friend's mind working as she made her marks on the portable board. While Kent directed all of his attention on Bailey, Laura took a better look at the shape of his penis stretching out his shorts.\n\nNothing for him to be embarrassed about, mind you.\n\n\"You did doubles,\" Bailey noted, catching Laura's attention again.\n\n\"I did,\" Laura tilted her chin up haughtily, hoping Bailey hadn't caught her ogling.\n\n\"Well,\" Bailey said. \"I may as well keep my panties on, if that's the case.\"\n\n\"Seven too dumb a number?\" Kent asked.\n\nBailey smirked at him.\n\n\"You could always make it six, Bai,\" Laura taunted. \"That's an even number, too.\"\n\nEw, why am I making it sound like I want to see her naked?\n\nTo Laura's relief, Bailey didn't respond to this, deep in consideration of how she wanted to pay off her dollars.\n\nBailey held out her hand for Kent, who took the proffered appendage and rose from his seat.\n\n\"Here,\" she said as she knelt on the couch and put her arms on its back. Bailey looked back over her shoulder at Kent, \"Doubles, right?\"\n\nKent adjusted his shorts and spoke, \"When you're ready.\"\n\n\"I'm ready.\"\n\nLaura pulled her legs in to her chest to curl up in the corner of the couch, squeezing her thighs together as tightly as she could, watching Kent lay both of his hands gently on Bailey's cheeks.\n\nLook at her, just begging for it. We're both of us so ridiculous. Playing this crazy game like it's about the money.\n\nIn that brief moment of post-orgasmic clarity, Laura saw the silliness of the whole thing. Moments later, however, rationalization swept in.\n\nIf we didn't have the money driving us forward, what would that leave behind? Why would we be counting? Why take off our clothes to try to make things kinkier?\n\nWithout Bailey's debt to pay off, all of the pretense washed away and Laura didn't want to look at what it left behind. She took a deep breath as the first two spankings cracked off her friend's cheeks and Bailey exhaled in heat.\n\n\"Forty eight and nine,\" Bailey breathed out.\n\nI think my orgasm is about to cause her orgasm. But maybe that's taking too much credit.\n\nAnd Laura's orgasm had come as a great relief. For three days she'd tried to mount the hard arm of that little chair in her room. Seventy two hours of non-compliance from her genitals had left her mentally irritated and physically sore.\n\nMy parts know what a penis feels like now, and they won't accept any substitutes.\n\nAnother crack echoed through the room and Bailey shouted out, \"Fifty, fifty one.\"\n\nThree straight nights of quietly straddling that piece of wood, trying different layers of t-shirts and sweat pants on top of it. You name it, I tried it. Nothing worked.\n\nAdd to that she'd had to deal with the guilt of her mental preacher shouting imprecations at her.\n\nShut you up tonight, though, didn't I, you self-righteous bastard?\n\nKent's spankings, two at a time, had come hard enough to satiate her need for penance. She'd taken those slaps to her butt willingly, acknowledging the sinfulness of her sexual desire. The sting of his hands on her flesh had soothed her shame and let her, at long last, reach orgasm.\n\nOh, god.\n\nIt welled up inside her again as Kent's palms bounced off Bailey's cheeks.\n\nI can't hide it if I do it again. How can I even do it? I'd have to use my fingers, and they'd both see me.\n\nLaura decided she'd feel far more embarrassed about that than she had about her previous orgasm and did her best to hold off the burning between her legs by clenching her thighs, even as Bailey called out her numbers, \"Fifty two, fifty three.\"\n\nKent took a long wind up for his last two spankings, and gained a satisfying echo.\n\nBailey cried out a high pitched squeak and followed it with a protesting exhale, before she counted out the last numbers, \"Fifty four and five.\"\n\n\"That's gotta be the record,\" Laura observed quietly, though neither of her friends paid her any attention.\n\nIn a moment, Bailey had turned around, stood up out of the way and shoved Kent onto the couch. The moment he thumped down, she spread her legs around him and settled into his lap.\n\n\"Oh, thank god,\" she declared, closing her eyes and throwing her head back as she began thrusting against Kent.\n\n\"Fu-uck,\" Kent breathed back.\n\nI've never seen Bailey like this. She's gone all... loose... and weird. Her body is just twisting away against him, yanking on his shoulders so hard to get her thrust.\n\nKent took hold of Bailey's hips, though Laura couldn't fathom why. It didn't give him one iota of control over the speed and force of Bailey's maniacal movements. The boy merely hung on for his life while Bailey used his body.\n\nThis is crazy. It's like I'm not even here. They won't even notice if-\n\nBefore she could even complete the thought, she slipped her right hand down between her legs, taking the precaution of crossing her ankles in hopes they wouldn't see her.\n\nThey can't see me right next to them, Laura saw the bleary, glazed looks in their eyes. They probably can't even see each other clearly, never mind.\n\nWith three fingers of her right hand, she pushed down on her clitoris, trying to shape her fingers so it felt like Kent's erection pressed against her. She felt the passion of her two friends, the heady mix of alcohol and hormones, and pushed harder.\n\nLook at her! Look at her! She's going to come right now...\n\nLaura held back her groan of ecstasy as Bailey squealed with delight on Kent's lap.\n\n\"Jesus,\" Kent complained, his chest and abdominal muscles locked up tight as a bulwark against his own impending orgasm. \"Jesus Christ.\"\n\nBailey's thrusts relented and she wrapped her arms around Kent's neck as her head rested against his neck.\n\nWatching her come makes me come. Oh, my god.\n\nIn the back of her brain, the preacher reared up, and she cringed as she prepared to hear his raspy voice. How many more spankings would it take to shut him up over this second orgasm?\n\n\"Did you come?\" Bailey stared at Kent in astonished doubt.\n\nKent shook his head in unsteady reply.\n\n\"Laura,\" Bailey whispered as she eased off Kent's lap. An unearthly glow lit Bailey's eyes as she turned to glare at her friend, \"You want to see it?\"\n\n\"See?\" Laura stammered. \"See what?\"\n\nBailey tilted her head once and then ticked her chin down toward Kent's groin.\n\n\"I, uh,\" Laura had trouble finding her voice. \"Not here. In my room. Come on.\"\n\n\"Can you walk?\" Bailey asked Kent.\n\n\"Yeah,\" he gasped. \"Sure, yeah.\"\n\nNo one is noticing that I can't walk, Laura thought as she tried to take command of her enervated knees, the third shot was probably a poor idea.\n\nHer mind half blank, Laura snatched the little white board as Bailey helped Kent up.\n\nLook at the size of his hard-on! Laura watched as Kent adjusted his shorts so the waistband held him in a little better.\n\nStill in their underwear, the girls took Kent's hands and led him down the hallway to the bedroom.\n\n\"He needs to come,\" Bailey said to Laura earnestly as they crossed the threshold. She glanced down at the erection tenting his shorts. \"Or his brains might explode out his ears.\"\n\nLaura snickered, which was enough to hide her anxiety, and Bailey dragged Kent with her as she sat on the foot of the bed and faced him.\n\n\"You've never seen one, right?\" Bailey chided, an impish grin on her face.\n\n\"No,\" Laura said.\n\n\"Then watch.\"\n\nKent closed his eyes, the tension in his body visible in every muscle from his narrow stomach up to his neck even as his face shaped a soft, weary smile.\n\nI really feel like he's ready to explode, but there's still this weird kind of serenity in his body, like he's at peace because he knows it's us.\n\nBailey pulled at the waistband of Kent's shorts, pulling them over his erection and Laura got her first peek at the swollen, dark red head, its tip glistening with a bit of clear fluid which hadn't wiped away on his shorts. In a moment, Bailey had the clothing out of way and it dropped to the floor of Laura's bedroom.\n\nGood god.\n\nLaura hadn't known what to expect, but the hardened shape angled just above the horizontal didn't come across as nearly as frightening as she'd thought it would.\n\nWhy should I be afraid of a penis anyway? Bailey's the one touching it. She's taking care of things and I'll just watch.\n\nThe skin, stretched out and away from the head, looked mostly pink, but hosted a few, faintly darker veins under its surface. Laura watched Bailey stroking the soft skin, gently up and down, stretching it to partially cover the head and then sliding back down the length of his shaft.\n\n\"Come on,\" Bailey said, and it took Laura a moment to realize to whom she spoke the words.\n\n\"Me?\" she squeaked.\n\n\"You know you want to touch it,\" Bailey looked at her through her eyelashes. \"So touch it.\"\n\nLaura set the white board on the corner of the bed at Bailey's right hand and walked around behind Kent to approach from his right side. He lifted his arm to embrace her and pull her in tight.\n\nOh, my. I've never felt him like this.\n\nKent's passion has become a tangible force, clinging to her, pulling her into his body. She raised her right hand and curved it around the lower part of his erection, below where Bailey gripped him, and stroked in time with her rhythm.\n\nThe skin is stretched, but somehow soft. And I can feel the puffy veins under the surface.\n\nA stammering whimper of a gasp issued from Kent's throat, and Bailey smiled.\n\n\"Christ,\" Kent whispered.\n\nBailey let Laura take over and picked up the white board from where she'd discarded it so she could make another tick. She grinned maniacally up at Kent as she got up to kneel on the bed, almost eye to eye with him.\n\n\"One more dollar,\" she said, and turned her back on him. \"And I don't want a mess on my panties.\"\n\nBailey took the waistband of her underwear between her fingertips and pushed them down to her knees and then wiggled them off her ankles.\n\n\"Can you last four more before you come?\" she taunted as she bent over.\n\nKent grunted in response and reached over Laura's head to lay a hand on Bailey's lower back.\n\nShould I keep stroking him? Laura wondered. I've got no room.\n\nPerplexed, but refusing to be left out of events, she furrowed her brow.\n\nNo room? That's quitter's talk.\n\nShe moved around to Kent's left side even as the first spanking landed.\n\n\"Fifty six,\" Bailey squeaked.\n\nLaura laid down on her left side next to Bailey, finding a comfortable way to get her hand on Kent's erection while the second spanking cracked down.\n\n\"Fifty se-ven,\" her friend sang out.\n\nKent grunted.\n\n\"Are you going to make it?\" Bailey asked him. \"Faster, Laura!\"\n\nA rapid exhalation issued from Kent's throat as she jerked him, the tip of his erection glancing off Bailey's naked cheeks. Swinging wildly, he struck the side of Bailey's cheek.\n\n\"Fifty eight,\" Bailey called out, pushing her hips back into his penis.\n\nA louder crack snapped off her cheek.\n\n\"Ow! Fifty nine!\"\n\nOh. My. God.\n\nLaura sensed a change in Kent as he struck Bailey's cheek for the last time, and knew what she felt instantly. Semen pumped up the length erection, right under the middle part of her thumb.\n\nI can actually feel it surging past my fingertips, under my hand. Shouldn't I see it coming out... Oh!\n\nThe white fluid launched out of the tip of his penis, a long, airborne stream that spread itself out from the cleavage of Bailey's cheeks and up her back.\n\nMechanically, unable to believe what she saw, Laura kept madly pumping away, feeling and watching as she and Kent laid out strips of semen up Bailey's back and down her cheeks, dripping down her thighs to the curve of her knees.\n\nStunned and wide eyed, Laura kept her motion going even after Kent had stopped strafing her friend and she could only wring out little droplets that fell onto the bed sheets between Bailey's calves.\n\n\"Okay, Laura,\" Kent gasped for breath, all tension in his body evaporated.\n\nShe snatched her hand and suddenly noticed a trailing drop of semen dotted the back of her thumb.\n\nHmph. What do I do with that?\n\nBailey let out a sigh and stretched out on the bed, keeping her legs tightly together as she arched her back and looking over her shoulder.\n\n\"Quite a mess you made,\" she scolded.\n\nKent smirked and reddened slightly.\n\n\"She complains,\" Laura comforted Kent, \"but I'm pretty sure she wants a picture.\"\n\nBailey eyes widened and she fixed Laura with an incensed glare.\n\n\"Well, don't you?\" Laura asked.\n\nWith her lips firmly pressed together, Bailey looked away from both of them and sheepishly nodded.\n\n\"Hurry,\" Bailey said. \"It's cold already.\"\n\n\"And it's going to drip on my bed,\" Laura pointed out, although it didn't seem particularly runny at the moment. \"Where's your phone?\"\n\n\"Backpack,\" Bailey replied, then squealed and shivered, clenching her thighs and cheeks more tightly. \"Front pouch. Hurry.\"\n\nLaura unzipped the pouch in question and withdrew the phone.\n\n\"Do you have to-?\" she started.\n\n\"No,\" Bailey said. \"I already disconnected everything. Just do the picture.\"\n\nKent stepped away from the bed and pulled his shorts up.\n\n\"Aw,\" Laura moped, \"You don't wanna be in Bailey's picture?\"\n\n\"Are you gonna let me keep a picture of you?\" Kent retorted.\n\n\"True that,\" Laura acknowledged as she lined up the shot. \"Oh, Bai, the candlelight's not enough.\"\n\n\"Just use the room light, then,\" Bailey scolded impatiently.\n\n\"Alright, alright,\" Laura flicked on the switch and began snapping images.\n\nI don't know what I was expecting, but that is a lot of semen all over her. Look how she's squeezing her cheeks together. There's a little puddle right at the top of her crack that'll drip right between them if she relaxes even a bit.\n\n\"Okay. We're good, Bai,\" Laura announced.\n\nShe turned off the lights again as Bailey waited.\n\n\"I need, like, a towel or a facecloth or something?\" she wondered aloud. \"Please?\"\n\n\"Oh, sure,\" Laura darted across the hallway to the bathroom, her mind still reeling from what she'd seen.\n\nShe soaked the facecloth hanging above the sink in reasonably warm water and brought it back to Bailey. \"Here ya go.\"\n\nBailey reached around her back a wiped herself from lower back down to thigh, scrubbing hard at her cheeks.\n\n\"Very messy, Kent,\" she chided.\n\n\"Aiming was Laura's job,\" Kent advised, leaning back in Laura's reading chair.\n\nLaura felt herself start to giggle uncontrollably.\n\n\"Oh, come on,\" she defended herself. \"As if I knew what would happen!\"\n\n\"That's fair, Bai,\" Kent pointed out.\n\n\"Yeah, Bai,\" Laura added. \"You put the loaded gun in the hands of an amateur.\"\n\nBailey stood up and faced both of them, wearing only her transparent bra, her glare set to melt steel. \"Mind if I wash off real quick?\" she suffered a wry, twisted grin. She waved with one hand at her cheeks. \"I'm not putting my underwear on like this.\"\n\n\"Go ahead,\" Laura ticked her chin toward the hallway and gulped.\n\n\"We'll wait here,\" Kent sighed with contentment.\n\nBailey eyed them both carefully, decided that neither of them posed a threat to do anything in her absence and stepped out of the room and across the hall to the shower. Laura sat on the edge of the bed, carefully avoiding the little wet spots resulting from her recent work, and turned to face Kent.\n\nWith his eyes closed, he looks so calm. It's amazing how all that tension in his muscles just evaporated the moment I made him come.\n\nSomething inside Laura cracked, almost like a knee joint popping or a spine twisting out of and back into shape.\n\nI made him come. I did that!\n\nA small whimper came out of her and Kent's eyes opened.\n\n\"You okay?\" he asked.\n\n\"Uh-huh,\" she replied quickly. \"I've just never... never...\"\n\n\"I know,\" Kent nodded. \"That's why I ask.\"\n\n\"Is it always like this?\"\n\nKent raised a gently mocking eyebrow, \"No, I usually have three or four girls at a time. Two is paltry, really.\"\n\n\"Ha-ha,\" Laura felt face flush. \"I mean, this messy?\"\n\nKent shrugged, \"I dunno. I don't always see it come out, right?\"\n\n\"You don't?\"\n\nKent leaned forward and Laura felt a moment of stark honesty approaching.\n\n\"Sometimes it's in my shorts or between our bodies,\" he shrugged, \"But sometimes, with Bailey or some girlfriend I had before, it's where I can see it come out. But not normally.\"\n\n\"Oh.\"\n\n\"How is it normally for you?\" Kent's voice stayed casual and level.\n\nHe just told me how he masturbates. Now he expects me to return the favour? There's no reason for me to tell him... except he was honest with me. Don't I have to be honest with him? Do I, like, \"owe him\" or something?\n\nLaura didn't feel forced to answer. It only seemed to her that her sense of courtesy demanded it of her. She'd asked him first, after all, which implied a quid pro quo.\n\nThis is the dumbest place to worry about Ethics, isn't it? Do I have to answer? Do I want to answer?\n\nShe jerked her head at the chair on which he sat. \"There.\"\n\n\"Here?\" Kent looked around himself at the uncomfortable chair. \"You sit here and... what?\"\n\nLaura shook her head, then ticked her chin at one arm of the chair, \"I, kinda, sit on the arm.\"\n\nKent jerked his right arm off the armrest as if it had given him a splinter. \"You straddle it? That works?\"\n\n\"It did,\" she moped. \"But it hasn't since...\"\n\n\"Since?\" Kent prodded.\n\n\"Since you,\" she said. \"On Monday. I didn't know what the real thing felt like before, and now I do.\"\n\nLaura shrugged sadly.\n\n\"Good thing I'm here, then,\" Kent leaned back more comfortably. He thumped his fist down on the wooden centrepiece of the armrest. \"Seems a bit too hard, actually.\"\n\n\"I did come down too fast on it once,\" she blew air up through her hair. \"That hurt. But I usually fold up a shirt in between.\"",
        "\"Well,\" Kent said. \"Let me thank you for not forcing me to compete with a solid piece of oak.\"\n\nLaura snickered and broke out in giggles again.\n\n\"I mean, that's a pretty high bar, so I'm glad I'm competing from the other side.\"\n\nDoubled over in giggles, she heard the shower cut off and saw Bailey step out of the shower.\n\nShe didn't even take off her bra, or close the door. She's probably still worried we'll do something without her.\n\nBailey reentered the bedroom, briskly towelling herself off.\n\n\"What did I miss?\" Bailey asked, seeing Laura's uncontrollably embarrassed giggling.\n\n\"Laura's masturbation technique,\" Kent supplied helpfully.\n\n\"Ke-ent!\" Laura cried out, reddening and giggling more.\n\nOh, I'm losing my mind. What even happened to me? I was in the choir. The choir! And now I'm taking pictures of my friend's butt covered in semen.\n\n\"She told you?\" Bailey looked shocked. \"She never told me.\"\n\n\"We never really talked about that,\" Laura defended.\n\n\"And?\" Bailey turned to Kent.\n\nKent put his index and middle finger on the wooden section of the arm rest and pushed downward, splitting the fingers until they straddled the wood.\n\n\"Oh?\" Bailey looked surprised. She turned back to Laura, \"Is that why you asked about the rolling pin?\"\n\n\"I was competing with a rolling pin?\" Kent wondered anew.\n\n\"I never used a rolling pin!\" Laura defended. \"Ew. We make food with that. It was just an example.\"\n\n\"Well,\" Kent said. \"The important thing is that we're here to educate you, right?\"\n\n\"Yeah, thanks,\" Laura had never felt so grateful for the relative darkness of candlelight.\n\n\"We make food with a spatula, too,\" Bailey pointed out, pulling her panties back on. \"You didn't have a problem with that.\"\n\n\"Well, not that spatula,\" Kent pointed out, nodding toward the doorway and, by extension, his backpack in the living room.\n\n\"You brought that spatula?\" Laura asked in fright.\n\n\"Of course, we never use a spatula at all, really,\" Kent continued with a vague look in his eyes, ignoring her. \"What are spatulas for, anyway?\"\n\n\"Cake batters,\" Laura said. \"Stuff like that. Did you bring it?\"\n\n\"Huh?\" Kent shook himself and looked at Laura. \"Yeah, why? You gonna make a cake?\"\n\nBailey threw herself down on the bed, lying on her stomach and propping herself up on her elbows to face Kent. \"She obviously needs a harder spanking.\"\n\n\"You want a cake?\" Laura desperately offered, her hands splayed out palms up. \"I can bake a cake.\"\n\nOh, don't say it. Don't say it.\n\n\"She's been a ba-a-ad girl,\" Bailey went on, heedless of Laura's plea. \"And the spankings make it okay.\"\n\nLaura felt herself redden, standing there in her underwear in the middle of her bedroom. She sucked in a sharp breath through her nose, closed her eyes, and folded her arms. When she opened her eyes again, she saw that Kent watched her.\n\nIt's not even mockery. It's worse. It's kindness, for god's sake.\n\n\"What do you want, Laura?\" he asked, his voice the silky opposite of Bailey's sandpaper coarseness.\n\nShe put her hands on her face, her palms cooling her warm cheeks, and sighed.\n\n\"I need you to spank me,\" she sighed, her shoulders slumping. \"I think I'll feel better after you do.\"\n\n\"All right-\" Kent started.\n\n\"And!\" she added. \"I'm making a cake first. Or at least cupcakes.\"\n\n=============================\n\nLaura disappeared out of the room and Bailey turned to look at Kent, lounging comfortably in Laura's incredibly uncomfortable chair.\n\n\"Can we just admit,\" Bailey asked, \"how much weirder this just got?\"\n\nReally, Bai? This is the threshold for weirdness?\n\n\"Sure,\" Kent shrugged, \"I suppose we can say that. But I don't really have units or benchmarks for weirdness, so I can't say by how much.\"\n\nBailey hummed a non-response and turned to the white board lying at her side, \"Should you fix this now?\"\n\n\"Yeah.\"\n\nShe tossed it across the room to him.\n\n\"What was that?\" Kent said. \"You owed me one hundred thirteen when I came over. You paid me twenty nine back in cash and you've done seven dollars since.\"\n\n\"Seventy seven dollars,\" Bailey solved for him.\n\n\"Sounds right,\" Kent said, wiping the board and changing the number. \"Though I don't think the night is over.\"\n\nHe cocked an ear toward the doorway, hearing Laura rummaging around.\n\n\"It doesn't take that long to find a spatula in an otherwise empty backpack,\" he pointed out.\n\n\"No, it sounds like she's-\" Bailey cut off as the distinct sound of a blender started up. \"She's baking cupcakes.\"\n\n\"That's weirder, too,\" Kent held up a finger, \"But not significantly so.\"\n\n\"Should we-?\" Bailey started.\n\n\"Hey!\" Laura called down the hallway as the blender stopped. \"You guys coming out?\"\n\nBailey and Kent glanced at each other, shrugged simultaneously, and roused themselves.\n\n\"I kind of thought we'd hit the end of the night,\" Bailey admitted.\n\n\"Laura has other ideas,\" Kent gallantly waved Bailey ahead of him through the door.\n\n\"Are you just letting me go first so you can look at my ass?\" she paused to look at him.\n\n\"Yes,\" he nodded amicably. \"Although it looked better all splattered.\"\n\nBailey's eyes narrowed and she continued through the door into the hallway. When they reached the kitchen, they found Laura working under the fluorescent glow of the kitchen lights under the cupboards. She had already mixed up a bowl of chocolate batter and started the oven warming.\n\n\"Actually making cupcakes,\" Kent commented, not knowing what else to say.\n\n\"Felt right,\" Laura announced cheerfully and held up the bright red spatula.\n\n\"How did she do that so fast?\" Bailey wondered.\n\n\"Just flour, eggs, milk and cocoa powder,\" Laura replied as if Bailey were a particularly stupid child. \"A little baking powder and sugar and we're all done. Lickety-split.\"\n\nShe carefully used the spatula to dole out twelve evenly distributed lots of batter into a muffin pan, wiping the last of the batter off the spatula to even them off.\n\n\"There,\" Laura announced. \"See? Easy.\"\n\nThe tray went into the oven next and she rinsed off the spatula.\n\n\"Should be good enough, right?\" Laura asked as she handed the clean spatula to Kent.\n\n\"You want it with the spatula?\" he confirmed as he took it from her.\n\nLaura took the white board from his left hand in exchange, \"Only seventy seven left.\"\n\n\"Well past halfway,\" Bailey put in, a note of satisfaction in her voice.\n\n\"Yeah,\" Laura sighed \"You erased the marks, though. Does this mean we start counting from one again?\"\n\n\"Naw,\" Bailey said. \"We're going for a record, remember?\"\n\nLaura quietly put four tick marks on the board.\n\n\"Four dollars?\" Kent felt his jaw drop.\n\n\"That's eight with the spatula, right?\" Laura said. \"But you have to spread them around. That's the deal.\"\n\n\"Right,\" Kent said. \"Where do you want me to do it?\"\n\n\"Here,\" Laura said, and turned around to grab the corners of the oven to brace herself. \"And Kent?\"\n\n\"Yeah?\"\n\n\"Make it really fast, okay?\"\n\n\"Really fast?\"\n\n\"Yes.\"\n\n\"With the spatula?\"\n\n\"Yes.\"\n\n\"All eight of them?\"\n\n\"Yes, do it already!\" she yelled at him.\n\n\"Okay, okay.\"\n\nI've never seen Laura like this. The guilt over her orgasm must really be weighing on her mind.\n\nWith her demand still ringing in his ears, he started laying into her right cheek, delivering four hard strikes all around the flesh unprotected by her scant black panties.\n\n\"Sixty! One!\" she shouted with a pause for a wince, \"Sixty two. Sixty three!\"\n\n\"Fast enough for you?\" Bailey taunted, taking a spot leaning against the counter next to the oven.\n\nLaura let out a faint hiss and whispered, \"Perfect.\"\n\nKent went for her left cheek next, landing a second array of evenly distributed strikes.\n\n\"Sixty four-five-six,\" Laura muttered. \"Sixty seven!\"\n\nShe stood straight up, grabbing her cheeks with both hands and rubbing them.\n\n\"Feel better?\" Kent asked.\n\nLaura turned to face him, her lips pressed together in thought before she finally spoke, \"Yes, actually.\"\n\n\"Four more dollars,\" Bailey announced.\n\n\"Are you trying to get rid of it all in one night?\" Kent asked her.\n\n\"No way can my butt take that much,\" Bailey waved him off.\n\nLaura closed her eyes and sighed, pressing her cheeks against the oven door. Kent guessed that the outside of the door might still be cold and she did it to soothe her cheeks.\n\n\"You need some ice on that?\"\n\n\"Maybe,\" she answered.\n\n\"Uh-huh,\" Bailey quipped. \"Well, I'm not the Spatula Queen, over there, so I'll-\"\n\n\"Spatula Queen?\" Laura rose up indignantly.\n\n\"Yeah, exactly-\"\n\n\"You should curtsy when you address me,\" Laura intoned gravely.\n\nBailey gave Laura a half-squint, \"No.\"\n\nWith a roll of her eyes, she turned to Kent, \"I'm still gonna call her the Spatula Queen, too. Even in front of other people.\"\n\n\"You wouldn't!\"\n\n\"They'll never know what it means,\" Bailey pointed out haughtily, \"they'll think it's a joke about cupcakes.\"\n\n\"I keep wanting to put on an apron,\" Laura remarked. \"It's weird baking in my underwear. Well, that would be weird anyway, but you know what I mean.\"\n\n\"We won't get the bonus dollars if you put anything else on,\" Bailey reminded her.\n\n\"I know,\" Laura sighed. \"Still.\"\n\nKent thought for a moment, then looked her in the eye, \"How much does the apron cover?\"\n\nLaura levelled a hand across the tops of her breasts, \"From here,\" she put her other hand just below the crotch of her panties, \"to here.\"\n\nKent smirked and looked over at Bailey, who snickered in response.\n\n\"What!?\" Laura asked, looking back and forth between them in a panic.\n\n\"He's thinking of letting you switch,\" Bailey laughed. \"Can't you see?\"\n\n\"Switch?\"\n\n\"Your underwear,\" Kent said. \"In exchange for the apron. Just so you'll be comfortable in the kitchen, you understand.\"\n\nLaura stuck her chin out, shaking slightly, \"Oh, gee thanks. Always thinking of me.\"\n\n\"Always,\" Kent nodded sharply. \"But you're not allowed to switch back.\"\n\nLaura darted a look over at Bailey, \"Should I?\"\n\n\"Your body,\" Bailey rolled her eyes. \"Not mine.\"\n\n\"Well,\" Laura looked down at the floor thoughtfully, \"it'll be different, at least.\"\n\nKent watched as Laura gave one last look at Bailey.\n\nShe's checking. Making sure she's not stepping over some invisible line that'll come back to bite her later. I didn't realize how complicated this whole thing is between them. And now all three of us are in so deep.\n\n\"Fine,\" Laura said and promptly turned on her heel to open a drawer.\n\nPulling out a floral, pink and yellow apron, and with the ease of years of practice, she did the ties up behind her back first and then around her waist.\n\nIt covers her a little farther down than she said, Kent noted, but we can let that go since it's so much narrower at the top then I expected.\n\n\"Now the underwear,\" Bailey prodded.\n\n\"Getting there,\" Laura protested, fiddling with the apron to try to stretch it properly across her breasts.\n\n\"Uh-huh.\"\n\nLaura slid her panties off first, stepping out of them by turning her knees outward so she didn't accidentally flip the front of the apron up and show too much of herself to Kent. She set the panties on the back of a chair at the breakfast table. She reached behind her body to unhook her bra. Even through the apron, with Kent standing directly in front of her, he could see the impression of her breasts fall slightly and loosen as they lost their support.\n\nLast, Laura slid the bra forward, down her arms under the apron. This she carefully laid it aside over top of her panties.\n\n\"That's a lot of sideboob, Spatula Queen,\" Bailey noted.\n\nLaura gulped in reply but kept her body directly facing Kent.\n\n\"He's already seen your boobs,\" Bailey added.\n\n\"I know,\" Laura's eyes darted around before they focused on Bailey. \"Isn't it your turn with the spatula?\"\n\n\"Haha,\" Bailey replied, \"I still prefer the hand.\"\n\n\"Do you?\" Kent asked.\n\n\"Yes,\" Bailey said as she picked up the white board and made her four ticks. Taking Kent by the hand, she pulled him into the living. \"C'mon. Over your lap.\"\n\n\"All sixteen of them?\" Kent asked in shock, paused, and felt the need to clarify. \"Over my lap?\"\n\nBailey pushed Kent onto the couch and closed her eyes, taking a deep breath, before she knelt at his side, sitting on her ankles. She opened her eyes, panting and appearing slightly delirious as she wearily looked up at he ceiling.\n\nKent waited patiently, his hands folded over the waistband of his shorts. Bailey's eyes lowered until he found her staring at his shorts.\n\n\"You getting hard again?\" she whispered.\n\n\"Yeah, a little.\"\n\n\"Good,\" she breathed.\n\nLaura came to sit down on the knee high coffee table in front of them, crossing her legs to keep Kent's prying eyes out, since the apron did nothing for her from his angle.\n\n\"Christ,\" Bailey whispered and, not making eye contact, laid herself over his lap, keeping her cheeks high in the air.\n\nThat's a lot of altitude she's got there, Kent noticed, she's really bending at the hips and keeping every muscle in her ass really tight around her curves. She's got to want it bad.\n\nHe didn't completely understand what Bailey felt, but he knew women could stay horny after an orgasm when men usually needed a break.\n\nOn the other hand, between Spatula Sideboob Queen over there and the Bailey's ridiculous need for bare-ass spankings, I'm not doing all that badly either.\n\nKent put both of his hands on Bailey's lower back and started stroking her cheeks with his fingertips, drawing a soft moan from her lips even as she pushed her hips back even farther.\n\n\"You're already pretty red, Bai,\" he told her quietly, sinking his fingertips into her cheeks.\n\n\"I'm fine,\" she murmured back, just as softly. \"Come on.\"\n\n\"Alright,\" Kent kept his left hand on her lower back and set his right on her left cheek, for she'd pushed her cheeks so far back and away to his side that he could reach either one easily as long as he aimed for the upper part of her cheek.\n\nShe's not letting me get at her seat, but I guess that's okay. If she's really going to make it through all sixteen, she can have it wherever she wants. The only question is how hard to go. I've really focused on the low side of her cheeks so far tonight, so I guess she'll need it pretty hard up high if she's going to feel it.\n\nStill, Kent felt a bit of trepidation. What, he wondered, would happen if all of this had worn Bailey out? She still looked misty-eyed and horny, but how long could that last?\n\nStart hard. I have to in case she wants it that way. And if it looks like it's too much, change angles and use that as an excuse to dial it down a little. If I start out too soft, she'll think it's pity and then we're all in trouble, aren't we?\n\nHe moved his hand to the outside of her left cheek, the easiest place to strike. It should even give Bailey some satisfaction because, as much as she had locked her body in place, striking sideways should give her some movement. She braced herself, inhaling, and he brought his hand back down.\n\nA satisfying crack echoed through the room, and Bailey moaned as her body wavered.\n\n\"Sixty-eight,\" she enunciated each syllable clearly and then ducked her head back down.\n\nThat wasn't a protest, so I must be doing this right.\n\nBailey's body, laid out for him in profile, radiated heated into his lap and abdomen.\n\nHe struck her again, same spot.\n\n\"Sixty nine,\" she muttered, then added a whisper, \"Kent, dammit.\"\n\n\"You alright?\"\n\n\"Do it, already,\" she pleaded, her tips twisting in some unclear agony. \"Do it.\"\n\n'Spank' do it? Or some other 'do it'? I hope she means spankings, because I don't know what else I can 'do' here, given our relative positions.\n\nHe landed two more hard slaps to the side of her nearest cheek.\n\n\"Seventy, seventy-one,\" she moaned, turning her hips toward him to offer the farther cheek.\n\nAs Kent spanked her, he began to realize the method to the madness of the twisting of her body.\n\nWherever I put my hand, she turns her body to bring her other cheek toward it. She doesn't really want my hand on her ass at all. But we have to finish the spankings, don't we? What happens if we cut them short and she's burned off less money than Laura? The horror...\n\n\"Seventy five,\" she announced in a panic when he'd finished four on her right side.\n\nHe spared one glance for Laura, who watched her friend's cheeks in wide-eyed shock. Laura had uncrossed her legs, planting her feet on the floor as she leaned forward, heedless of how much the dim light from the kitchen played between her thighs to show the trimmed little bit of hair she maintained between her legs.\n\nWhen Kent paused, however, Bailey moaned in protest and Laura looked up to meet Kent's eyes, the flick of her eyebrows asking Kent why he'd stopped. He nodded at her apron and the view she'd accidentally given. Laura's knees twitched, starting to come together in embarrassment, but she held them in place by force of will alone, daring him to stare.\n\nKent smirked in reply and returned his focus to Bailey.\n\n\"Come on,\" she grunted at him.\n\nInstead, he placed his palm between her spread and taut cheeks, letting his fingers wrap around, underneath, so his fingertips gently touched her lips.\n\nBailey moaned, pushing her hips back into his hand. He withdrew his hand and slapped her left cheek, drawing forth the screech of a cat in heat.\n\n\"Seventy six.\"\n\nAgain, he prodded her with his fingertips, not intruding but only stroking, and then added a slap to her right cheek.\n\n\"Seventy seven,\" her words came through a desperate sob.\n\nBack and forth he went, poking lengthwise along her lips, deeper and deeper with each spanking, listening to her count, until his last spanking shook the room.\n\n\"Eighty three!\" Bailey called out, and pushed up against his left hand, still resting on the small of her back.\n\nKent kept that hand in place, keeping Bailey down, and pushed the fingers of his right hand harder against her panties, spreading her lips and gaining access to her clitoris, hardened and poking against him.\n\nA muffled moan loosed from her mouth as she buried her face in the hard surface of the couch.\n\nThis must be the least comfortable place to have an orgasm, but here we are and she needs it now.\n\nAt a guess, Kent felt that Bailey wanted some restraint, so he held her down with his left hand, fingers splayed, as hard as she could while her body twisted against his hand. Her genitals, he also took under advisement, didn't require that much force.\n\nAlways safer to go gentle anyway. Worst case scenario? She'll think I'm teasing her and have to beg for it harder.\n\nBailey didn't need harder. The gentle tickling, the force of his hand on her back and the pressure on her sore cheeks worked just fine. With little more effort, fortunate given the awkward bend of his wrist, her moans increased in volume. She started to buck against his left hand, requiring him to hold her down even more strongly, the palm of his right hand against her vagina squeezing in the opposite direction.\n\nThis is what she wants? To be held down? All right, then.\n\nLocked in place, his fingers working her clit, he saw her reach her limit. A long, groaning climax ensued, Bailey's vocal chords expending their energy into the hard cushion of the couch as Kent held her body in place, continuing to stroke her lips as muscle spasm after spasm shook her body from end to end.\n\n\"Okay, okay,\" she begged, her voice mewling. \"Enough, enough.\"\n\nKent stopped his stroking, carefully holding her body in place until he felt she had regained her own stability and started to sit up. He watched Bailey's face as she came into view. A few strands of reddish hair, tacked with sweat, spread over her brow and draped across her closed eyes. Her cheeks had reddened worse than her ass and her chest rose and fell in rapid, panicked breaths over which she clearly tried to exert control.",
        "\"All right?\" he asked.\n\n\"Yeah,\" Bailey opened one bleary eye at a time and stared straight ahead at the wall. \"Yeah. Christ. Yeah. I'm good.\"\n\n\"Your ass had enough?\" Kent wondered.\n\nShe took several seconds to compose her response, \"Maybe, yeah.\"\n\nThey both turned to look at Laura, who jerked back in surprise and pushed her knees together.\n\n\"Cupcakes anyone?\" she asked, and stood up quickly before bolting to the kitchen. \"They're ready!\"\n\nFacing directly away from them, Laura opened the oven door and leaned over to the retrieve her baked goods.\n\n\"That is gorgeous,\" Kent complimented, the light from the oven shining at him directly between her parted thighs.\n\nLaura pulled out the tray and turned, side on, to lay them on the kitchen table.\n\nEven her breasts, shaking loosely under the apron...\n\nLong past subtlety, Bailey slid a hand up his thigh, under his shorts and touched his erection.\n\nNot quite ready, yet, Bai. It's only been -- how long has it been?\n\nLaura, behind Bailey, moved on to the fridge.\n\n\"What are you doing, Laur?\" Bailey mistily called over her shoulder as she continued to stroke Kent, her tone conveying a vague disappointment with her friend's distraction.\n\n\"Whipping some cream,\" Laura protested as she poured fresh cream into a small bowl. \"Just take a second.\"\n\n\"Whipping cream,\" Bailey whispered, her eyes meeting Kent's for the first time since her orgasm.\n\n\"For the cupcakes,\" Kent answered quietly.\n\nBailey continued her gentle stroking, bringing his penis to full staff, as Laura ran her blender again and whipped the cream.\n\n\"What are you planning?\" Kent asked Bailey, but only earned a shrug in reply.\n\nHalf in a daze from Bailey's ministrations, it seemed like no time at all to Kent before Laura finished her work in the kitchen and brought forth a tray with a plate of cupcakes, paper napkins and a bowl of freshly whipped cream, both of which she laid on the little coffee table.\n\n\"You put some cream on top,\" Laura said. \"Then you eat them.\"\n\nBailey turned to look at Laura, then back at Kent. \"Cream on top,\" Bailey repeated. \"Then you eat them.\"\n\nKent laughed softly as Bailey withdrew her hand from his shorts and reached for a cupcake. She used the spoon in the bowl to dab some whipping cream on it, then held it up to Kent's mouth. He took a bite of the rich, decadent treat and hummed in appreciation.\n\n\"Nice, Laur,\" he complimented her as Bailey took a bite of the same cupcake.\n\n\"Spatulas have more than one purpose,\" Laura defended as she sat on the table next to her treats, \"You're welcome.\"\n\nLaura took a second cupcake herself and slowly sank her teeth into it, letting the whipped cream touch her nose.\n\n\"Is it extra delicious because we're horny?\" Kent wondered, \"or just because we're drunk?\"\n\nLaura hummed as she swallowed and smiled while Bailey held out the last morsel of cupcake to Kent. The whipped cream, warmed by heat of the fresh cupcake, slid off the pastry and fell on Kent's shoulder, dripping cold and sliding down toward his chest.\n\n\"Ha!\" Kent shouted from the shock of the cold, and reached for it, but Bailey blocked his hand at the wrist. \"Huh?\"\n\nShe lowered her head down to his shoulder, opened her mouth wide over the whipping and caught it before it slid any farther. That accomplished, she slid her mouth upward and sank her teeth into the tendon of his neck.\n\n\"Ah!\" Kent protested, the jerk of his shoulder setting him free from Bailey's grip.\n\nShe smirked as she righted herself and swallowed the whipping cream.\n\n\"Huh,\" Laura blurted out in surprise.\n\nBailey turned to look at her friend with narrowed eyes.\n\nThat's the most diabolical glare I've even seen from you, Bai. What's in your head now?\n\nLaura, taken aback by Bailey's intensity, turned away to look at Kent.\n\n\"There's a bit of cream,\" Kent told her, tapping his nose.\n\n\"Where?\" Laura wondered, fake innocence saturating her voice as she leaned forward.\n\nKent twisted his lips, restraining himself from rolling his eyes, and leaned forward to gently kiss Laura on the nose, sucking up the tiny dot of cream on its tip.\n\nLaura giggled softly, but her tone became more nervous as Bailey stood up. When Bailey went around the coffee table and stood behind Laura, the giggling stopped entirely.\n\n\"Bai?\"\n\nBailey put her hands on Laura's back and leaned over to speak into her friend's ear. \"I can show him what you want.\"\n\n\"I -- um,\" Laura stammered.\n\nBailey spoke slowly, a temptress with a voice more transparent than her underwear, \"Do I have to help you?\"\n\nLaura only whimpered and Kent realized that Bailey hadn't put her hands on Laura's neck, so much as the ties on her apron at the back of her neck, offering to untie them.\n\nWhat are we up to now?\n\nWith a nod, Laura acquiesced and took a deep breath to push her breasts up against the apron.\n\nBailey undid the ties on Laura's apron, whispering to her, \"Lean back.\"\n\nWith her back arched, Laura put her hands on the table behind her and leaned back into Bailey as the front of the apron fell to her waist, exposing her breasts to Kent's eyes once more. With Laura's eyes closed, Kent looked into Bailey's cryptic gaze instead.\n\n\"It's what she wants,\" Bailey's practical tone came through. \"Couldn't you tell?\"\n\n\"I try not to make assumptions,\" Kent replied, still mystified, \"Most of the time it's better spelled out.\"\n\nHe remained confused until Bailey reached for the bowl of whipped cream.\n\nOh, god.\n\n=============================\n\nOh, god, Laura thought.\n\nShe didn't need to look to see what Bailey planned, but kept her head back and her gaze on the ceiling.\n\n\"It's basically all she talks about,\" Bailey spoke to Kent as if Laura had temporarily ceased to exist. \"You squeezing her tits.\"\n\nThe spoon clinked on the edge of the bowl and Laura shivered.\n\n\"Oh, really,\" Kent whispered back.\n\n\"Come sit here,\" Bailey said, tapping the space on the table next to Laura.\n\nLaura felt the table strain as Kent sat next to her, his breath on her shoulder telling her that he'd straddled the table so he could face her.\n\n\"After that,\" Bailey said, \"this has to be the next thing she wants.\"\n\nOh, Bai, oh, Bai, oh - Ah!\n\nThe scoop of whipped cream hit her right breast like an icicle, chilling right through her flesh and back to her spine, an electric tingle that flowed right down to her tailbone.\n\n\"There we go,\" Bailey added, \"just right.\"\n\nWith said statement, Bailey referred to the way the cream, stiff but melting against her flesh, moved slowly to touch her areola.\n\nI can't look, I can't look, I can't look. My nipple must be standing straight up.\n\nLaura held her eyes closed as the gob of whipping cream enveloped her entire nipple, a cold numbness flowing through her entire breast. Thankfully, at that moment of maximum chill, she felt the table creak as Kent leaned forward. His hand touched her thigh, high under the apron, bracing his body as his warm breath played over her chest.\n\nHis mouth must be open now, yawning wide.\n\nThat mouth pushed down on her breast, sucking up the whipped cream, removing the cold and replacing it with warmth.\n\nKent closed his lips, trapping her nipple between them, and applied suction directly to that stiff, cold tip. Laura felt a moan burst upward from her stomach and lurch out of her throat and she spread her legs against his hand.\n\nHis tongue poked out between his lips, swirled around her nipple in slow circles as his hand slid up her thigh. Laura spread her legs, welcoming him in closer.\n\nIf my fingers worked, surely his will, too.\n\nHer body shivered anew when his fingertips brushed against her hair.\n\nOh, god. Three in one night? I am such a crazy, stupid mess already.\n\nLaura felt her brain blank out with bliss as Kent's finger slid between her lips, embarrassingly wet, and touched her clitoris. As he circled her nipple, so he stroked her clit, and her involuntary moans grew in strength.\n\nHe's not pushing hard enough to come! I'm there, but it's not hard enough!\n\nShe bucked against his hand, but Kent didn't get the idea. It meant a bit of awkwardness, but she used her left to reach under her apron and push his hand hard into herself.\n\nHe's got to be twisting his neck pretty badly to stay on my boob, but I don't care right now. This won't take long.\n\nA moment later, as if the universe had a certain respect for that sort of self-fulfilling prophecy, Laura felt her orgasm hit. Well beyond moaning, a sheer scream of delight came from her fully open mouth, and lightning lit her body up from the hand pressed against her vulva to the mouth firmly attached to and suckling upon her creamy breast.\n\nShe crooned out her third orgasm in a state of mindless ecstasy, heedless of how many spankings the evil little man in her head would demand for his silence.\n\nSome interminable count of seconds later, she regained control of her brain and sat up, forcing Kent to relent from his determined tongue work.\n\n\"Wow,\" Laura whispered.\n\n\"That's what you wanted?\" Kent asked.\n\n\"Yeah,\" she rasped back.\n\n\"You needed Bailey to tell me, though?\"\n\nLaura nodded again, then twisted her lips and frowned, \"Some things are hard to say.\"\n\nA little messy, she looked down to survey her breasts, I can't put my apron back on like this.\n\nShe took one of the paper napkins off the tray and wiped her right breast with it, soaking up the little that Kent had left behind. As she fastened her apron around the back of her neck, Kent pointed to the space between her legs.\n\n\"Might wanna wipe the table, too,\" he said.\n\n\"Eek!\" Laura cried out as she stood up.\n\nSeeing the little wet spot, she panicked. My... my juices. Mom'll freak out! She wiped the spot up immediately, hoping they'd find no visible stain.\n\nWhat does that stuff do to wood, anyway?\n\nBailey and Kent laughed at her and she frowned back, hands on her hips.\n\n\"Come on, you,\" she glared at Kent and held out her hand. \"No way you're messing up any more of my furniture.\"\n\n\"I -- uh -- all right,\" Kent stammered as Laura pulled him to his feet.\n\nHolding his hand, she turned her back on him, pulling him along.\n\nHe sucked on my nipple! her brain cried out. A boy! With whipped cream and everything!\n\nSomething deep inside wanted to tell her she'd done something awful, sinister and sinful, but the angry voice couldn't reach the surface of her mind.\n\nI'm so far beyond that now. So far. I won't let them take me back there. Never!\n\nInstead, Laura pulled Kent into the bedroom, distantly aware that Bailey trailed along.\n\nI feel drunk. But it's not like being drunk. It's like... like... Drunk Plus. What does Kent want? What should I do to him?\n\nWhile her heart informed her of its willingness, her brain didn't spark with creativity.\n\n\"Spank me,\" she told Kent, pulling herself so close their noses almost touched as she glared at him. \"Until you come.\"\n\nShe felt Bailey jam the white board into her hand.\n\nRight. The spankings should count, shouldn't they?\n\nLaura took the marker and carelessly thumped down three marks on it, \"That should be enough, right?\"\n\nEnough to make him come, and enough to keep out any bad vibes about how much fun I'm having. Two birds with one stone.\n\nShe turned her back on Kent, got her knees up on the bed and bent over until her apron covered breasts touched the bed's surface.\n\nIt's the same thing Bai did, really, except I'm wearing an apron, she chided herself on her lack of originality, but at least I'm taking a lot more spankings.\n\nBailey, taking her cue from the last round, had already pulled Kent's shorts down.\n\n\"Look at you, erect-o-saurus,\" Bailey said as she sat next to Laura.\n\n\"Uh-huh,\" Kent rolled his eyes and then set his right hand on Laura's right cheek.\n\n\"Oh, god,\" Laura wondered aloud. \"What number are we on?\"\n\n\"My last was eighty-three,\" Bailey voice pulsed oddly and Laura took a moment to realize she'd started handling Kent.\n\n\"Okay,\" Laura announced her readiness.\n\nKent started smacking her then, consistent slaps to the side of her cheek, giving her barely a moment to call out each number before he landed the next.\n\nAs she called out, \"Ninety,\" she felt something brushing up against her tailbone, just between her cheeks.\n\nIt's him... his erection... Bai is jerking him right against my butt.\n\nA mewling whimper came out of her throat, stalled by the need to count out, \"Ninety one.\"\n\nKent had run out of cleverness as well, for he struck the exact same spot on her ass with each shot, desperately trying to get them all in before his orgasm robbed him of any pleasure.\n\n\"Ninety three!\" Laura squeaked out, surprised even then by the increasing force of his strikes.\n\nBailey did warn me, didn't she? 'I don't recommend it,' she'd said. Oh, well.\n\n\"Ninety four!\"\n\nShe took a deep breath, preparing to call out the last one, but it didn't fall. Instead she just felt the head of his erection, tickling her tail bone. Both of her friends panted with exhaustion behind her and she turned to look. Kent had closed his eyes and grabbed tightly onto her sore cheek, squeezing her flesh so hard it hurt almost as much as the spankings. Bailey, red with the fury and determination of her effort, pumped away at Kent's erection.\n\nLaura saw Kent's upper body rear back as he tried to hold off his orgasm until the last moment.\n\nThen, finally, his hand unclenched her swollen cheek and she sighed with relief, not having realized how tightly he'd gripped her. The alleviation in her mind only lasted a moment.\n\nOh, crap! Laura turned away and closed her eyes, cringing because she knew what came next.\n\nThe loud crack off her right ass cheek could have woken the dead, never mind the neighbours.\n\n\"Ninety five!\"\n\nKent grunted and she felt both of his hands grabbing her hips and a strange warmth appeared on her back, immediately turning cold. Goosebumps formed all over her back and her cheeks, drawing a shiver.\n\nIs that... is it?\n\nShe turned around just in time to see his reddened erection, poking out over her cheeks, white fluid dripping down onto her flesh as Bailey milked him.\n\nHe's coming on me. He came on me. Ohmygod, he came on me.\n\nHis semen didn't have the runny quality it had had before. Spread over her back and cheeks, it didn't flow anywhere to threaten the bed sheets -- although the strap of the apron around her waist might need a rinse afterwards.\n\n\"Oh, god,\" Kent whispered hoarsely. \"Oh, god.\"\n\nBailey had released him and turned to smile at Laura, \"I think he's finished.\"\n\n\"Ninety five spankings and two orgasms?\" Laura replied incredulously. \"He'd better be.\"\n\n\"I, uh, yeah,\" Kent managed to pull his shorts back up and sit on the bed on her left.\n\n\"I need to clean up,\" Laura insisted, squeezing her legs together as she stood up.\n\n\"You want a pic?\" Bailey asked.\n\n\"Um...\"\n\nDo I want a picture? Laura looked over her back.\n\n\"Okay, real quick,\" she told Bailey, \"before it runs down.\"\n\nThey took the picture while she stood up, but she had to untie the apron around her waist.\n\nNo identifying clothing, Laura remembered Bailey's rule.\n\nBailey took the pictures, saved them properly, and Laura ran to the washroom to clean herself. She ducked into the shower and sprayed herself with cool water, scrubbing the sticky trails off her back and down her butt to her thighs.\n\nIck, ick! Get rid of the evidence. Clean up, clean up!\n\nShe tried to blitz through is as quickly as she could, ruthlessly towelling herself dry. When she got back to the bedroom, Bailey had laid Kent out on the bed.\n\n\"I don't think he can make it home,\" Bailey winced.\n\nLaura gulped and spent only a heartbeat thinking about it. \"That's fine,\" she told Bailey, \"why not? We can all sleep over, right?\"\n\n\"No parents?\"\n\n\"Not until Sunday.\"\n\n\"Alright, then,\" Bailey nodded.\n\nWith Kent in the centre of the bed, Bailey curled up by his left arm and Laura took the right.\n\nThis is both cozy and weird. I don't know how I imagined my first sleep over with a boy, but this wasn't it.\n\nA small breath of a laugh escaped through her nose.\n\nBut it's just fine."
    ],
    "authorname": "xtorch",
    "tags": [
        "cream",
        "debt",
        "ejaculation",
        "masturbation",
        "messy",
        "nudity",
        "orgasm",
        "spanking",
        "stripping"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/two-hundred-dollars-ch-22"
}
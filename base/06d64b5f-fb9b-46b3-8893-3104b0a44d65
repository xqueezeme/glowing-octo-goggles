{
    "title": "Women's Studies Ch. 09",
    "pages": [
        "Christmas was over, and the next few days began to settle into somewhat of a routine. Around seven in the morning our mother would depart for work at the hospital, leaving my sister and I alone for most of the day. While being at home again was awkward and stressful, that nine-hour period where it was just Audrey and I made the whole thing worth it.\n\nMost mornings, I would wake up to Audrey slipping underneath my covers just after our mother had gone. It was so comforting to have her there with me. Living with Kennedy and Abigail, I had grown accustomed to never having to sleep alone, and the soft feeling of her arms encircling me was relaxing enough to put me right back into a gentle coma for the next few hours.\n\nAfter waking up, we would spend most of our time lounging around the house, enjoying each other's company. We did at least try to have some normal sibling interaction, but the longer we were together, the harder it became to keep our hands to ourselves. I'd been missing her something fierce for the last few months, and being completely honest with myself, I didn't know when we would get the chance to be together again. Knowing this, we didn't hesitate to take full advantage of what time we had.\n\nIt did feel naughty, defiling our mother's house like we were though. The only room we stayed away from was our mother's bedroom. For some reason it just felt extremely awkward for both of us. Many of our mornings started out in the kitchen. I loved bending Audrey over the counter as I fucked her from behind while we waited for the coffee maker, her Victoria Secret sweatpants down around her thighs with me thrusting into her welcoming pussy. We even tried to do it on the porch swing, but after three minutes of fighting the stinging cold we relented, rushing back inside to the warmth with our clothes in our hands.\n\nI think our favorite place, or at least Audrey's, was on the sofa in the living room. She liked to face away from me and slowly ride my cock while we talked casually and watched television. It was strange how she could make something so erotic, and as taboo as incest, feel so natural. I must have to admit, it might have been my favorite place as well. Having her warm pussy slowly work my cock as she leaned back against me felt wondrous.\n\n*** *** ***\n\nIt was New Year's Eve, and the sun had just begun its descent, and with our mother in the house I was lounging on my bed with a book. Audrey and I had been in a near constant state of taboo sibling bliss, making it easier for us to keep our distance when our mother was around. All it would take was one overly familiar touch or gesture for our mother to begin suspecting what was really going on between us.\n\n\"Hey.\" Audrey leaned into my doorway, startling me. \"I have a surprise for you,\" she smiled before pulling a shopping bag into view.\n\n\"Really?\" I asked, putting my book aside. \"I thought we already exchanged gifts?\"\n\n\"You're really going to go there after you bought me this necklace?\" she asked, smiling as she fingered the platinum chain dipping between her cleavage. \"Besides, this has been the real gift all along.\"\n\nAudrey sauntered into my room and set the large bag in front of me before joining me on the bed. I wasted no time pulling out the tissue paper, revealing what was underneath. It was clothing, and the only kind I wanted. Inside was a short plaid skirt and a cute but mangled looking top and some fishnet stockings. Underneath it all was a shoe box containing black, strappy, four-inch heels.\n\n\"This looks like-\" I started.\n\n\"The first girl clothes you ever wore,\" Audrey finished, resting her chin on my shoulder. \"And might I say, you looked so fine in them,\" she added with a little purr. \"That's not all. We're going out tonight...or I should say, Lexi and I are going out.\"\n\n\"What?\" I started. \"What about mom?\"\n\n\"She'll never know a thing. You've been moping around since you got here, and I thought this would cheer you up,\" she said, smiling mischievously. \"Besides, it's New Year's Eve. We have to go to a party.\"\n\nEver since I returned to Colorado for the holidays, I'd been living as Alex again. It was rough pretending not to be Lexi, but the last thing I needed right now was for my mother to know about who I had become. Sure, I might wear cute panties underneath my boxers sometimes to retain some small measure of my femininity, but actually dressing up was something I hadn't risked. In Arizona, nobody knew me at all, but too many people knew Alex in Denver.\n\nAudrey pouted while she waited for my answer. It seemed like I had a lot of secrets building up in my life. Part of me missed the simple days, before, when I had nothing to hide. It was foolish though. I much preferred who I had become. I just didn't enjoy the stress that came with it. Having to become Alex again had only added to my anxiety. In the end, it came down to a yearning I had to be myself again.\n\n\"Okay,\" I finally said with a nervous smile. \"But where am I going to change? I don't want mom seeing any of this.\"\n\n\"I've thought it all out for you,\" she assured me.\n\nShe had. True to her word, she laid out a plan that seemed foolproof.\n\nWith a night as Lexi in my immediate future, I felt butterflies in my stomach. It had only been a little over a week, but just the thought of slipping into those cute clothes and heels had me fidgeting nervously all through dinner.\n\nAudrey helped me wash the dishes after our meal, and then we began getting ready. Almost an hour and a half later, I stood barefoot in front of the mirror in my room. My cock was tucked under a pair of Audrey's black lace panties and I was dressed in my short plaid skirt, fishnet stockings, and tight-fitting Ramone's t-shirt that looked like someone went crazy at it with a pair of scissors.\n\nI twisted and preened a little as I looked at myself in the mirror. There were so many cuts in the t-shirt you could see a lot of bare skin, as well as parts of my red bra underneath. My hair was already done, looking roguish and girly. Even without makeup on, I felt sexy, I felt like myself, and a wave of contentment washed over me.\n\nWith a little sigh I began with the next step. With my breast forms already in place, I chose a puffy jacket that wouldn't show my form as much, and it took serious will power not to get an erection as I slid my baggy jeans on over my fishnets. By the time I was ready to go, my mini skirt was sitting high up around my abdomen, so as not to make my pants bulge awkwardly, and I had a beanie covering my hair. While I couldn't see Lexi in the mirror any longer, I could feel her in the tight skimpy clothing hugging my body underneath.\n\nIt didn't take much effort for us to get past our mother. She did gripe about how late the hour was when we were leaving, but with a promise not to get into trouble, and to keep it quiet when we came home, we were out the door.\n\nWe rushed to my car, and I threw Audrey the keys so she could drive. With every step I took, I could feel the slight wisk, wisk, wisk of my jeans as they ran against my fishnets and it was driving me up the wall with arousal and anticipation.\n\nWe weren't on the road for five minutes before Audrey pulled into a parking lot. As soon as the car stopped, I was sliding my pants down my legs exposing my black panties and fishnet legs. I kicked my shoes and pants off and pulled my skirt down over my hips. Next, I stripped off my bulky jacket exposing the bulges of my now obvious breasts, and after several minutes with my makeup I was Lexi again.\n\nI couldn't stop smiling at my reflection in the visor mirror. I felt whole.\n\n\"I knew you needed this,\" Audrey smiled at me from the driver's seat. \"Shoes,\" she said pulling those strappy four-inch heels out of the over-sized purse she'd slipped past our mother.\n\n\"Do you think it's weird?\" I asked, taking the heels from her and leaning over to slip them on and fasten the straps. \"I feel more like myself like this than I ever did as Alex.\"\n\n\"It's not weird to me,\" she said reaching out to yank off my beanie and adjust my hair.\n\n\"Can I ask you why I'm dressed like Punk-Rock-Hooker-Barbie, and you're wearing that cute dress?\" I asked. \"You're not going to pimp me out, are you?\"\n\n\"No!\" she laughed, smiling at my joke. \"Here, get my zipper for me,\" she said, pulling her hair out of the way as she turned in her seat.\n\nI eased the zipper down the back of her dress and quickly discovered that she had done the same thing I had. She was wearing her real outfit underneath her mother approved one.\n\n\"I learned this trick in middle school,\" Audrey explained, as she worked her dress down over her hips.\n\nShe was wearing a black corset dress with a skirt shorter than mine.\n\n\"We're going to freeze to death dressed like this!\" I realized.\n\n\"We'll be indoors for most of it,\" Audrey said. \"Besides, we'll have our coats. Our legs might get a little cold, but that's the price we pay for being hot,\" she said, smiling as she used her mirror to make her respectable eye shadow darker.\n\nWith our makeup and wardrobe change complete, we were back on the road. Thirty minutes later we pulled up outside a local spot downtown that was famous for their New Year's bashes. We huddled around our knee-high tan trench coats as Audrey got a ticket from the valet. Once the car was sorted, Audrey pulled me along by the hand as we passed the line of people waiting to get in.\n\n\"Right this way, Miss Allen,\" a large muscular man said as he held the door open for her, and by association me.\n\nIt was obvious that there was no pretense tonight. These people knew exactly who my sister was. Previously, when my sister and I would go out she would use a fake name, so people wouldn't harass her. As much as she enjoyed being Playboy's Miss June 2013, it did tend to attract the wrong sort of attention more often than not.\n\nAfter checking our coats, we were escorted to our private table in the VIP section. The table was huge, especially for just the two of us. It was placed in the corner with a plush cushy bench circling it like a horseshoe.\n\n\"You sure this table will be big enough?\" I asked Audrey wryly.\n\n\"When I called earlier, I just asked for a table,\" Audrey said shrugging. \"I didn't think about size. I'm sure we could fill it up with some new friends though.\"\n\nAs late as our mother thought it was, it was still early in the evening, so Audrey ordered us some champagne while we waited for the party to come into full swing. Three glasses in and I was feeling a really good buzz when I finally blurted out, \"I think I want boobs,\" almost a little too loudly.\n\n\"What?\" Audrey asked, choking on her drink a little.\n\n\"Boobs!\" I said again, more quietly this time.\n\n\"When did you start thinking about this?\" she asked, wiping her mouth with a napkin.\n\n\"For a while now,\" I sighed. \"I love how my breast forms look,\" I said, unconsciously feeling them, \"but I wish they were real. I want to be able to feel them...and I don't want to feel embarrassed because they're not real,\" I finished feeling nervous.\n\n\"Let me put this out there first; good for you,\" Audrey said, putting her hand on mine. \"Now I have to say this; you do realize that it's going to be impossible to hide breasts from our mother. The cat will well and truly be out of the bag after that. Is that something you're ready for?\"\n\n\"That's a scary thought,\" I said, staring at my hands as they fumbled with my champagne glass. \"It's a shitty thing to say, but...I don't really have any feelings toward her. I don't hate her, but I don't particularly care about her either. She has always made our lives miserable in one form or another. If she can't handle this then it won't really be like I lost anything. Let's face it, we wouldn't have even come home for Christmas if it wasn't for the fact that we could see each other.\"\n\n\"You're kinda right on that count,\" Audrey said. \"Well, maybe after this mom will give me less shit for doing porn,\" she said jokingly with a playful nudge.\n\n\"The hell she will!\" I said in mock seriousness. \"Especially when she finds out you're the one that turned her only son into her second daughter!\"\n\n\"You wouldn't!\" Audrey said.\n\n\"I don't know...\" I said gravely, only ruining it by the smile I could no longer hold back. \"I guess it depends on how bad she takes it.\"\n\n\"Tell her you met a hot Satan worshiper and he turned you into his sissy princess!\" Audrey laughed. \"Anything but the truth.\"\n\n\"Oh yeah, like that will make things better!\" I laughed.\n\n\"It would for me!\" Audrey giggled before downing the rest of her champagne and raising her hand to catch a server's attention. \"We're going to need something a little stronger over here!\"\n\nAfter sending someone for more drinks, Audrey dove right back into our conversation.\n\n\"So how big do you want these new breasts of yours to be?\" Audrey asked after ordering us rum and cokes. \"You thinking something like this?\" she mused as she groped her own breasts through her corset top.\n\n\"I don't know,\" I answered truthfully. \"I don't want them to be too big, you know?\"\n\n\"Well, with how small you are you won't need to go very big for them to make an impression,\" she said. \"What about the size you are with your breast forms?\"\n\n\"I like this size, but to be honest I think I like them mostly because, if they were any larger, it would be impossible to hide the fact that they're fake. As it is, I can never show any cleavage,\" I mused, idly feeling the size of my breast through my top. \"Maybe a little bigger won't be too bad.\"\n\n\"Just make sure they're not too big,\" Audrey cautioned. \"You don't want to look top-heavy. Try to find a size that matches your hips and ass. That way you'll look proportionate.\"\n\n\"Really?\" I thought. My ass wasn't huge or anything, but it was pleasantly feminine and...obvious. It had a way of sticking out. Kennedy liked to call it a bubble butt.\n\nAfter our drinks arrived, our conversation changed course and we began talking about our plans for the next year. Mine were obvious; I wanted boobs and I was going back to school. With that out of the way I mostly listened to Audrey talk about her plans for photo shoots and video's she was up for, as well as a possible chance of her being cast in a mainstream movie playing herself. It was supposedly one of those raunchy high school comedies that we loved to watch.\n\nShe had met a casting director at a party a couple of months ago and this movie was slated to start filming sometime next year. They had been talking back and forth about the script for some time now.\n\nAround ten-thirty the party really started to kick into full swing and Audrey pulled me off the sidelines and onto the dance floor. It had only been a few weeks since the last time I'd been out dancing with the girls, but I had missed it. It felt nice having Audrey's body against mine as we rocked our hips against each other to the music.\n\nThis overwhelming feeling of being myself again washed over me, and I couldn't stop smiling as we danced. I smiled so hard my cheeks began to hurt, but that didn't stop my contentment.\n\nIt didn't take Audrey long to find her hands on my ass beneath my skirt as she pulled me tighter against her body. She was straddling my thigh and I knew exactly what she was doing. We had been here before, what felt like ages ago.\n\n\"You're such a bad girl,\" I purred into her ear as I let one of my hands slide down her back and onto her ass, giving it a squeeze. \"Do you want to cum all over your sister? Right here in front of everybody?\"\n\n\"Yes!\" she quivered.\n\nPeople had no doubt noticed how sexy we were dancing, but with so many people pressed around us, I could probably slip my cock inside her without anyone seeing. My mind even contemplated it for a few moments, but that risk was beyond me. Instead, I pulled her body harder against mine, enjoying the sounds she was making into my ear.\n\n\"Cum for me,\" I urged her. \"Cum for your baby sister!\" I moaned into her ear.\n\nI firmed my leg and began pulling her harder onto my thigh by her ass, making her really grind into me. I could feel her slick juices leaking through her panties as she rode me, the thin material of her panties dragging across my fishnet stockings, creating a subtle vibration that caused her to shudder with each pass.\n\n\"Oh, Lexi!\" Audrey moaned as she came. As loud as the music was, she was loud enough that I worried someone might hear it for what it was and notice how she was trembling in my arms with me being the only thing keeping her upright on her shaking legs.\n\nWith the thumping beat of the music, Audrey and I held each other as we slowly swayed, looking to the world like two lovers in a slow dance.\n\n\"You know, if that's what you wanted, we could have gone back out to the car,\" I chuckled into her ear. \"We could've really had some fun.\"\n\n\"Down girl,\" she said, giving my ass a pat. \"There's still plenty of time for that later.\"\n\nWhen Audrey's legs became a little more steady, we danced for a bit longer before taking a break to rest our heeled feet. While she went back to our private table, I found my way to the bar to order us another round of drinks.\n\n\"Two rum and cokes,\" I said once I reached an open spot at the bar. I stood, idly tapping the counter as I waited for my order, when a man to my left spoke up.\n\n\"Hi, I'm Josh,\" he said, offering me his hand.\n\n\"Oh hi, I'm...\" I trailed off. \"...Lexi,\" I finished, taking his hand awkwardly.\n\n\"It's nice to meet you,\" he smiled warmly.\n\nThe reason for my shock wasn't because an attractive man wanted to talk to me. That had happened many times before. The shocking part was that I knew him. Not as Lexi mind you, but as Alex. Standing in front of me was the same Josh that had taken pity on me when I was in high school and taught me how to defend myself. I had spent countless hours with him on the mat as close, if not closer, than we were now.\n\n\"It's nice to meet you too,\" I said a little more calmly, trying not to make too much eye contact.\n\n\"So how do you know Audrey?\" Josh asked me.\n\n\"Audrey?\" I asked dumbly.\n\n\"Yeah, the girl you were dancing with,\" he said, glancing back towards where we had been dancing moments before.\n\n\"She's my sister,\" I said blushing. I knew the second I said it that it was the wrong thing to say. How was it that I could lose my mind and my somewhat quick wits? Get a grip! I thought. He's not that good looking!\n\nHe really was though. I had never really seen it before, but he was tall and lean with dark brown hair and hazel eyes, and the way he was smiling at me sent a small tingle down my spine. All of this coupled with my shock and I had turned into some sort of mindless bimbo.\n\n\"Ah...Audrey doesn't have any sisters,\" he said, clearly not believing me. \"She's got a brother. I know him...Alex.\"\n\nAs soon as he said my name, I flinched slightly. His eyes narrowed as he scanned my face more closely and I tried more studiously to avoid his gaze.\n\n\"Alex?\" he said in clear disbelief. \"No fucking way!\"\n\n\"Shut up!\" I snapped at him, looking around nervously. \"Keep your voice down.\"\n\n\"Wow!\" he said shaking his head. \"When did this happen? Does everyone know but me?\"\n\n\"It's been a while now,\" I said quietly, taking a seat on an open stool next to him. \"And you're the first person to meet Lexi that has also known Alex.\"\n\n\"How did all this happen?\" he asked, leaning closer so he could speak softer.\n\n\"It's a long story, and an incredibly private one, but the important part is that it did happen,\" I said, not wanting to go into everything at the moment.\n\n\"You look...\" he said, unable to find his words, until, \"Just...incredible!\"\n\n\"Wow...Thank you,\" I said, unable to believe how well he seemed to be taking this.\n\nJosh had always been a great guy. He was always there to stick up for the little guy, and he made it a habit to never judge people. I guess it really wasn't that much of a surprise that he would be okay with something like this. Another thing I hadn't really foreseen, was the way he was looking at me now.",
        "He was quiet for a few moments as we sat there at the bar just staring at each other. Well, it was more me watching him as his eyes traveled over my body. I was enjoying his attention, and the fact that he wasn't disgusted the moment he found out gave me a warm feeling. I could feel his gaze, tracing my every curve, causing me to shudder. I never knew a simple look could feel so intimate.\n\n\"Two rum and cokes,\" the bartender announced loudly over the noise around us as he set my drinks down on the counter. \"That will be twenty dollars.\"\n\n\"Do you want to come sit with us?\" I asked Josh as I handed my money to the bartender.\n\n\"Sure...yeah. I'd like that,\" he said, finally peeling his eyes from my body to look me in the eyes again. \"Are you sure your sister won't mind?\"\n\n\"I'm sure she'll be fine,\" I replied as I got up.\n\nBeing the gentleman that I already knew he was, he carried the drinks for me as I showed him back to our table.\n\n\"Hey!\" Audrey exclaimed. \"You found a new friend!\"\n\n\"An old one in fact,\" I commented. \"This is Josh, he's the one who taught me how to fight.\"\n\n\"You're that Josh?\" Audrey asked smiling. \"I've seen your handiwork. She put some jack ass on the floor a few months ago...wait...\" Audrey paused, looking back to me. \"He knows... about...\"\n\n\"Yeah, he knows.\" I laughed. I was still coming down from my own shock at him finding out, but it was nice to see that look of shock running through someone else for once.\n\n\"We haven't officially met before, but we went to school together,\" Josh said as he held out his hand. \"I was a couple of years ahead of you.\"\n\n\"It's nice to meet you, Josh,\" Audrey said, shaking his hand.\n\nAudrey and I spent a lot of time talking with Josh as the night went on, but for some reason he seemed more focused on me. It was strange, I had known him as Alex, and here we were talking about things as if I was Alex, but with my new perspective as Lexi. I wasn't sure how to describe it other than to say it was as if both of my worlds seemed to have merged.\n\nThe longer we talked, the more at ease I felt, and I was definitely enjoying how his eyes wandered over my body. If I didn't know better, I would have thought he was flirting with me a little.\n\nAs midnight approached, we were all well and truly intoxicated. The three of us stood among the masses as our host initiated the countdown. Hundreds of drunken souls waited with bated breath as the seconds counted down to the new year.\n\n\"Three...Two...One!\" the announcer called. \"Happy New Year!\"\n\nA loud cheer burst through the crowd, and masses of confetti were shot into the air from all directions to drop like snow, all while 'Auld Lang Syne' played through the speakers.\n\nIn all fairness, I had never thought much about the New Year. To me it had always just been another day, lacking any huge impact on my life, unless you count having to remember to change the year when I wrote the date. This time I felt a little differently, but that could have just been the alcohol.\n\nWith the confetti still falling around us, my sister pulled me in for a New Year's kiss that I hoped Josh didn't see too closely. For us, it was very brief, but there was no mistaking that quick slip of her tongue reaching out instinctively to mine. Not a moment after my lips parted with Audrey, I was spun around to face Josh, and to my shock he pulled me in for a much more enthusiastic kiss than Audrey delivered. It lacked the tongue, but the way he held me in his arms as his lips clasped with mine made my knees weak. When he finally pulled away, I was gulping for breath and praying that my cock stayed tucked firmly inside my panties.\n\nAudrey quickly wiped the shocked look from her face and replaced it with another one of approval.\n\n\"Now that was some kiss!\" she laughed, putting an arm around my shoulders as I stood there nervously. Before I could make a fool of myself and say something stupid, Josh finally spoke.\n\n\"Do you want to dance?\" he nearly blurted out.\n\n\"What, with you?\" I asked, surprised by the question. \"What I mean is, you want to dance with me?\"\n\n\"Yes,\" he said simply, holding my gaze with a small smile.\n\nI cast a nervous glance to Audrey before she quickly began shooing us away. \"Go! Go and have some fun!\" she smiled.\n\nWith the quick celebratory moment gone, the party resumed, and music played out through the speakers again as Josh pulled me out onto the dance floor.\n\n\"You're shaking!\" Josh exclaimed as we began dancing together.\n\n\"I'm sorry, I'm a little nervous,\" I said. \"You're the first guy that's danced with me that actually knows who I am.\"\n\n\"Well that, my dear, is a shame,\" he said, pulling me a little closer to him.\n\nThere was still a small space between us, but we were so close together I could feel the warmth of him against my skin, and the smell of him filled my senses, sending more tingles across my body. Butterflies began forming a mosh pit in my stomach, and I was beginning to hope that this wasn't just some drunken fever dream.\n\nThe feelings I was having were conflicting. Sure, I had feelings for Danny, but he was so far away. Josh was here right now, and he knew exactly who I was. Danny was still a mystery, wrapped in an enigma of uncertainty. I still didn't know if I could risk telling him my secret. I'd had nightmares of how that scenario ended. Here, right now, there were no nightmares. Seizing onto the moment, I pretended to stumble slightly into him, closing that last bit of distance between us.\n\nI was relieved when he held me a little tighter to him. More so, I was excited to feel the soft bulge of his crotch pressing back against me. He wasn't hard, but just feeling him against me like that set me off.\n\nMy hormones, and the alcohol, conspired without my consent and I began rubbing against him more, making sure that he felt me. My hands traveled his strong back as I worked my hips trying to tease his cock to life.\n\nSlowly, he began to move with me. At first, his grinding was subtle, almost accidental, but the more I worked my tight body for him, the more he pressed. It wasn't long before I could feel his iron-like cock rubbing hard against my leg and pelvis. Despite the sweat building up from the body heat surrounding us, his arousal, and the way his hands roamed my body, sent chills through me.\n\nOn impulse, I turned to face away from him, pressing back against him as I continued to undulate my body to the rhythm of the music. I loved the way his hard cock felt against my ass, and I relished knowing that it was for me. Needing more of it, I began to grind harder into his crotch.\n\nI reached for his hands on my waist and began to move them along my body. First sensually up my sides, then down low, just beneath the hem of my skirt where they met bare thigh. I could feel his hot breath on my neck as I teased him, and at the same time myself.\n\nI let his hands rise further along my smooth skin, lifting the sides of my skirt and exposing my thighs nearly to my hips, while the middle of my skirt still hung low enough to hide my secrets.\n\nMy breathing became heavy as my eyes became clouded by lust. I knew what I wanted to ask, but where it would take me was a place I had never been before. My heart was racing right along with my rum soaked mind. I wanted this. I needed him inside of me, but could I even dare to ask? The part of my mind drowning in alcohol thought it was the best idea I'd had tonight.\n\n\"Do you want to go somewhere?\" I whispered into his ear nervously as I tried to catch my breath. My eyes were shut tight as I waited the solitary moment for him to respond.\n\n\"God, yes,\" he breathed.\n\n\"Where?\"\n\n\"My place isn't too far from here,\" he answered, sounding a little hopeful.\n\n\"Give me a second to find Audrey,\" I told him as I straightened my clothes and tried to tame the mess that had become of my hair. \"I'll meet you right outside.\"\n\nIt took me a few moments to find my sister. She seemed to have found some company in my absence and I had to pull her away from a small group of people to talk to her.\n\n\"Hey...I'm going to go...with Josh...for a while...\" I said, trying my hardest to keep the blushes from my face.\n\n\"Do you want me to wait up for you?\" she asked slyly, giving me a knowing look.\n\nNothing could stop my blushes after that.\n\n\"I don't know...\" I trailed off.\n\n\"Call my phone when you need me to pick you up,\" she offered. \"I don't care what time.\" Then in a lower voice she leaned in. \"I want details!\" she nearly squealed in her hushed voice.\n\n\"Thank you!\" I said, giving her a quick hug before making my way to the exit as fast as my drunken mind and high heels would allow.\n\n*** *** ***\n\nThe car ride to Josh's was awkward. I was still so ramped up from earlier, and I could think of nothing to talk about except the things I wanted to do with him. Thankfully he hadn't been lying when he said he didn't live far.\n\nMy high heels clicked loudly as I followed him down the concrete path towards his condo. My head was a little fuzzy from all the drinking, and my heart was fluttering nervously.\n\n\"So, this is it,\" he said, opening the door to his apartment. \"It's not much, but it's home.\"\n\nAs I stepped inside, I felt like he was underselling it. It was a good-sized studio, furnished with dark wooden furniture and red throw rugs and curtains. Even the throw pillows and his large bed against the far wall matched the theme. For a guy, it was very nice.\n\n\"This looks amazing!\" I said, as I took it all in.\n\n\"Thank you,\" he smiled, fiddling with his hands. \"Ah...would you like something to drink?\"\n\n\"Maybe later,\" I said, a sudden forwardness possessing me as I took a step closer to him.\n\nThis close, I could again smell the intoxicating scent of his cologne filling my head. I felt a tingle run through my body like electric current as I reached my arms up to wrap around his neck. I stared deep into his eyes before rising further onto the tips of my toes and pulling him down for a kiss.\n\nIt was the same as before, my entire body felt charged, and I couldn't stop myself from squirming against his body. My hands were shaking again. I knew what was ahead of me and the anticipation, and no small amount of fear, were filling me up. Our kiss lingered with our tongues dancing to take my breath away while I tried to build my courage to take the next step. You've gone this far, I thought as I steeled myself.\n\nStill holding his lips to mine, I let my hands slowly fall down his chest until they met with the cold metal clasp of his belt. With trembling fingers, I clumsily fumbled my way through unbuckling his belt and pants and lowered his zipper.\n\nI could already tell how hard he was with his cock pressing into my waist. I let my hands work of their own accord as they slipped into his boxers to find his throbbing cock. It was so warm, and with my fingers wrapped firmly around him, I could feel the quick, steady pulse of blood surging into him.\n\nAs I began to make short strokes on his shaft, Josh moaned into my mouth. My heart was beating so fast that it felt like my chest might burst. My own cock was painfully hard in my panties, and from that sign alone I knew I couldn't stop now. As scared as I was, I was ready.\n\nI felt Josh's hands begin to bunch up the bottom of my shirt and I instinctively released his cock to raise my arms for him. In a swift motion he peeled my top off of me, and as soon as my hands were free, I resumed our kiss and attacked the buttons on his shirt. It didn't take long before I was sliding it off his shoulders and onto the floor.\n\n\"Josh?\" I panted, holding him to me as I relished in the feel of his hard, bare chest. \"I've...never done this before.\"\n\n\"Don't worry, we'll go slow,\" he promised.\n\nI felt his hands beneath my skirt as they rose up to my hips to hook his thumbs around the waistband of my panties. Ever so gently, he slowly worked them down ,inch by inch, over my hips and ass. My cock was begging for freedom with every movement he made. As soon as they were halfway down my thighs, they finally fell to the floor and my cock sprang free.\n\nFeeling my bare cock rubbing against his wasn't an experience I had thought about before, but I loved it. I couldn't help but thrust my hips and grind myself harder against him. With little to no warning, I felt Josh's hands firmly grasp my bare ass as he lifted me from the ground. Instinctively, I wrapped my legs around his waist as he carried me to his bed.\n\nHe gently laid me down on my back before he began kicking off his shoes and working his pants off. While he did that, I quickly worked my heels off, and shyly tried to hide my cock under my skirt while I waited.\n\nI felt a little over dressed as he joined me in bed in nothing but his skin, while I was still wearing my fishnet stockings along with my skirt and bra.\n\nMy butterflies ran rampant as Josh climbed into bed with me, and I could feel the heat of my skin rise. He gently kissed the soft skin on the insides of my legs as he slowly worked his way up between my thighs. I had both of my hands holding my skirt down, hiding my cock shyly as he inched his way closer.\n\nThe closer he came, the slower his movements became. I didn't know if it was from apprehension or if he was just teasing me, but I knew what effect he was having. I could feel my cock throbbing in my hands, with my precum already leaking through the cloth of my skirt.\n\nMy eyes were shut tight as I lay before him. I knew shutting them couldn't protect my modesty, but with the anxiety running through me it was all I had.\n\nI felt his warm breath drift underneath the hem of my skirt, tantalizing my cock, and then his fingers brush against my knuckles as they clutched to my modesty. With his hands on mine, he slowly raised them, his lips still dancing inside my thigh.\n\nWith my hands no longer controlling my erection, it stood proudly. I could feel his cheek brushing against it as he kissed the last few inches of my thigh. When his fingers wrapped around my cock, my body jerked, and when I felt his warm mouth engulf the tip of my cock, I gasped. His tongue swirled around my swollen head as my body squirmed from his sensual kiss. I wasn't sure, and at this point I was having a hard time thinking at all, but the way he moved, so sure and confident, I didn't think that this was his first time.\n\nAs his skilled mouth continued to make love to me, I felt myself relax, and I let go under his gentle touch. My hips began to slowly rock as he bobbed up and down my shaft. As my body moved uncontrollably, one of my thighs hooked over his shoulder and I let my fingers glide through his hair.\n\nI couldn't have anticipated what being with a man might feel like, but this felt incredible. I had received a blowjob before, but the way it felt to have his strong hands on my body as I lay helpless in front of him was exhilarating. He was such a large man, with muscles and hair in all the right places, I felt incredibly vulnerable, and under his control.\n\nHis fingers began to rub along the small stretch of skin below my balls, causing me to squirm from excitement. With every stroke his fingers came closer to my rose bud until they were gently brushing along the edge, causing me to moan louder as I rocked my hips forward.\n\nHis fingers pulled away for a moment, but when they returned, I flinched at the cold wetness that accompanied them. He continued to rub circles around my tight little hole, slowly adding more and more pressure until, with only a little pain, his finger slipped inside of me.\n\nMy fingers running through his hair gripped tighter as he played with my ass, slowly stretching me open for him. It didn't take long before he slipped in yet another finger, causing a little more pain. I felt his fingers travel even deeper inside of me until they brushed against my sweet pleasure spot, summoning a jolt of pleasure to rush through my body.\n\n\"Oh God!\" I finally spoke, as he slowly fucked me with his fingers. In response to my cry, I felt him moan on my cock, sending vibrations through me, and adding to my pleasure.\n\nI finally opened my eyes to see him staring up at me from around my cock. He continued to slowly suck as he watched me and played with my ass. After a few final sucks, Josh let my cock fall from his lips. He eased his wonderful fingers from my ass, causing me to groan from their absence, and he slowly climbed up between my legs to hover over my body.\n\nMy heart was racing; hammering against the inside of my chest. This was it.\n\nHis lips, still wet with his saliva and my precum, came down upon mine in a passionate kiss. As our tongues swirled, I felt the tip of his hard cock press against my wanting hole. My arms wrapped around him tighter as the pressure built. Even with all the practice I had with my toys, I wasn't prepared for an actual cock.\n\n\"Oh fuck!\" I cried out when his head finally pierced my hole.\n\n\"Are you okay?\" Josh asked concerned.\n\n\"Yeah, I'm okay,\" I replied, taking deep breaths. \"You're a little big.\"\n\n\"Thank you,\" he joked with a blush, causing me to giggle.\n\nLaughing wasn't such a good idea. I felt like I was being split open from his size as it was. With every contraction my sphincter tightened around his cock.\n\n\"Let me know when you're ready,\" he said, holding still as my ass accommodated itself to his size.\n\nWith each slow breath I took, I could feel his cock throb in time with his pulse. The pain never really went away, but there came a point where the pleasure from his cock outweighed that discomfort.\n\n\"I'm ready,\" I said nodding my head. \"Just be gentle.\"\n\n\"Tell me if you need me to stop,\" he said, giving me a soft kiss as he slowly sank another inch inside of me.\n\nHe gradually began working the tip of his cock in and out, ever so slowly inching his way further inside of me. With every inch, it felt like I was being split open anew, but the sensations his cock was causing prevented me from stopping him. When I finally felt his balls resting against my ass, I gasped in relief.\n\nI felt so small with him on top of me, and his manly scent drove me wild as he filled me to bursting with his cock. I could feel every inch of him, every ridge and vein, as he slowly thrust into me. With every stroke, the head of his penis pressed against my prostate sending bursts of pleasure throughout my body.\n\nI clung to him as he deflowered me, one hand feeling the muscles on his back ripple with his movements, and the other on his firm ass urging him on. I felt high with pleasure as he made love to me...as he took me.\n\nMy own cock stood painfully hard between us, grazing across his stomach with his every forward motion, sending even more tickles through my body.\n\nNearly all semblance of pain had vanished, and the only feelings I had were from pleasure. I had played with myself before, but nothing could compare to how his cock was filling me up so completely.\n\nSurrounded by all of those wonderful sensations, I couldn't believe that I had ever had any trepidation. Now, with him finally inside of me, my anxiety evaporated, and I lost myself to the act. I began trying to thrust myself back onto him, but from my position and angle, it was useless.\n\n\"You feel so incredible inside of me,\" I purred.\n\nHis lips pressed back to mine passionately, and his thrusts became more firm in response.\n\nI loved the way I felt, dominated by him and vulnerable, but my lack of participation was bothering me. Without really thinking, in one lithe movement, I tucked his arm along my side, my leg sliding up to set my foot, and with a twist of my hips, I flipped us over, landing on top of him with my palms flat to his chest and a mischievous smile on my face.\n\n\"That's dirty fighting,\" Josh admonished playfully.\n\n\"You taught me there was no such thing,\" I replied automatically, still wearing my sly little smile",
        "After leaning forward to give him a playful kiss, I sat up straight and began riding him. It was a new experience for me. I started out awkwardly moving about, but with my hands braced on his taught abs, I quickly found what I needed. Being on top, I was in more control of the angle, adding even more pressure to my prostate.\n\n\"Holy shit!\" I cried out, gasping from the added pleasure.\n\nMy moans grew louder as I rode him, letting his cock sink into my ass faster and faster. With the added speed, my cock began to bounce in front of me, slapping against his stomach. Precum was flinging from the end of my cock leaving a shiny, sticky mess on his skin.\n\nJosh's hands were on my hips, guiding me as he made small thrusting motions to meet me as I sank down his shaft. The pleasure was rising, and I could feel that warm pulsing sensation building.\n\n\"Oh God, Lexi!\" Josh cried. \"I can't hold off any longer!\"\n\nA moment later I could feel his cock swell, stretching me even farther as I slammed myself down his shaft. As his warm cum filled my ass I felt my own impending climax nearing.\n\n\"I'm...I'm...\" I tried in between my moans.\n\nAfter only two more thrusts I slammed my ass down hard onto his cock and the pleasure filling my body burst, enveloping my entire being. My cum began seeping from my cock to pool on Josh's stomach, and in my exhaustion, I collapsed on top of him, smearing my cum between our bodies.\n\nAs I lay there on his heaving chest, I could still feel the ebb and flow of ecstasy rolling through my body like tidal waves. There was also something else. Not a physical sensation, but an emotional one. For so long I had been living, dressing, and thinking as a woman. I had only recently really stopped fighting what I was becoming, and tonight I had truly become a woman.\n\n\"Aww,\" I lamented tiredly as I felt his deflating cock slip from my ass, leaving me feeling hollowed and empty. Mustering what little strength I could summon, I eased myself off to lie next to him\n\n\"That was incredible!\" I sighed happily, still feeling the flood of endorphins coursing through me.\n\n\"Tell me about it,\" Josh replied, staring blankly at the ceiling. \"Are you sure that was your first time?\" he asked. \"Because you felt like a professional.\"\n\n\"A professional?\" I laughed, giving his messy belly a smack. \"You sure know how to talk to a lady.\"\n\n\"I didn't mean...not that you were...\" he tried. \"What I meant was you did really great for it being your first time.\"\n\n\"I know what you meant,\" I laughed, enjoying seeing him flummoxed. \"I'm giving you a hard time.\"\n\n\"Oh, I'll give you a hard time,\" he said, nudging me playfully.\n\n\"I think you already did that,\" I sighed contentedly.\n\nI must have been so tired; I didn't realize I had fallen asleep. When I woke again, it was still dark outside. I had the overwhelming urge to pee, and after some searching in the dark, I found his bathroom.\n\nAfter doing my business, I cleaned myself up a bit. My makeup was a bit of a mess, and my dark eye shadow looked horrible, but Josh, being a guy, lacked the necessary makeup remover. After doing the best I could, I shut the light off and tiptoed back to bed, slipping beneath the covers to cuddle up to him.\n\nThe next time I woke, it was to the incessant sound of my phone ringing. It took me a few moments to remember where I was. Alcohol contained such wonderful properties. Seeing Josh next to me brought everything back into focus. Remembering the events of last night, and how peacefully I was sleeping, I groaned as I crawled out of bed to find my phone.\n\n\"Hello?\" I answered quietly, seeing that it was Audrey.\n\n\"What happened to you?\" she asked. \"You were supposed to call me.\"\n\n\"What time is it?\" I asked pulling the phone away from my ear for a moment to answer my own question. \"Shit!\" It was almost nine in the morning.\n\n\"Where are you?\" she asked.\n\n\"I'm at Josh's house, we fell asleep,\" I said as I tried to find my clothes.\n\n\"I know you're at Josh's, I just don't know where that is,\" Audrey replied a little impatiently.\n\nI could hear another voice yelling in the background.\n\n\"Stop yelling!\" Audrey snapped. \"Do you think shouting at the top of your lungs is going to change anything?\" she said harshly. Then back to me. \"Text me the address and I'll pick you up.\"\n\n\"Thanks, Audrey,\" I said before, \"Wait...can you bring me some clothes?\"\n\n\"They're still in the car,\" she said a little more quietly into the phone, obviously not wanting our mother to overhear.\n\nThat's who's voice was in the background. If our mother knew I hadn't come home with Audrey last night she must have been livid.\n\n\"I'm leaving right now, so text me that address,\" she said before hanging up.\n\n\"Everything okay?\" Josh asked from the bed causing me to jump.\n\n\"You're awake,\" I said\n\n\"Yeah, is everything alright?\" he asked again, sitting up in the bed leaving his hard, bare chest exposed.\n\n\"Yeah...well no. Not really,\" I said. \"I have to get home.\"\n\nI felt kind of bad running out like this.\n\n\"Can I give you a ride?\" he asked. \"It won't take but a minute for me to get dressed.\"\n\n\"My sister's coming to get me,\" I said as I searched for my top. \"My other things are in her car. I've been staying at my mom's for the holiday and she doesn't know about the new me.\"\n\n\"I don't blame you,\" he said standing up to slip on a pair of boxers. \"I've met her a couple times.\"\n\n\"What's your address?\" I asked, punching it into my phone as he spoke so I could send it to Audrey.\n\nAfter hitting send, I finally spotted my t-shirt sticking out from under the couch.\n\n\"I really wish I didn't have to leave!\" I complained, half my words muffled by my shirt as I pulled it over my head. \"I really did have a great time with you.\"\n\n\"It's okay,\" he said stepping over to me. \"I understand. I had a really great time too. I hope I'll be able to see you again sometime,\" he said with his hand outstretched, holding my lacy underwear.\n\n\"I think I would really like that,\" I said smiling as I took his hand, the soft fabric of my panties sliding between our fingers.\n\nNot wanting to just run out on him, I rose up onto my tiptoes and placed a soft but sensual kiss on his lips.\n\n\"You have my number,\" he smiled after our lingering lips parted.\n\nWith that, I sank back down to my heels and took a step back so I could slip on my panties. Moments later I was securely tucked away and almost presentable. Josh and I sat on the couch and talked for a few minutes while I put my high heels back on. It felt strange, but oddly refreshing, to have such a normal conversation, especially after the things we had done together. In what felt like no time, my sister texted that she was outside, and I had to say goodbye.\n\n*** *** ***\n\nThe click of my heels on the pavement was my only company as I walked down the sidewalk towards the street. I tried to walk normally, but every step I took was a subtle reminder that, while I might have been a girl yesterday, today, I woke up as a woman. I wasn't sore so much as I had a warm, throbbing sensation steadily reminding me of last night's events.\n\n\"I am so sorry!\" I told Audrey as I climbed into the car. \"I didn't plan on falling asleep. Just...after...and with the alcohol...we just fell asleep. I hope you didn't have to put up with too much from mom because of this.\"\n\n\"It's not your fault,\" Audrey said, slowly pulling the car back into the street. \"I fell asleep too. Last night got pretty wild.\"\n\n\"So...After, huh?\" Audrey asked as I frantically stripped out of my clothes in the passenger seat so I could change. \"After what, exactly?\"\n\n\"We just hung out and talked,\" I tried. I was putting all of my focus into my clothing to avoid her, and the blushes that were fighting to creep onto my face.\n\n\"Oh, I'm sure one of you was hanging out,\" Audrey ribbed. \"Come on! You can't hold out on me now! You did it, didn't you?\"\n\n\"Did what?\" I asked, knowing that I was losing the battle of the blushes.\n\n\"Did IT, is what!\" Audrey laughed. \"Oh my god! You did, didn't you! Someone got their V-Card stamped last night!\"\n\n\"Stop it!\" I laughed, embarrassed.\n\n\"Awe! Come on. I'm happy for you,\" Audrey reassured me. \"I need some details. How was it? Did you like it? How did you do it?\"\n\nShe seemed to have a thousand questions, and I grudgingly answered them all while I slowly removed my breast forms as we sat parked in the far end of a nearly empty grocery store parking lot. Well, at first it was grudgingly, but Audrey had a way of drawing things out of you and making it feel natural. By the end I was smiling with her as I described my orgasm.\n\n\"That sounds so hot,\" Audrey said.\n\n\"It felt hot,\" I replied as I began removing the remnants of my makeup. \"So, what do you think we're in for when we get home?\"\n\n\"Nothing as pleasant as last night, I'm sure,\" Audrey sighed. \"At least for me. Just apologize and keep your head down. I'll take care of it.\"\n\nI felt bad as we pulled up the drive to our mother's house. Audrey was always there to take the heat for me, even in high school. Because of her profession, it was as if I could do no wrong in our mother's eyes because at least I wasn't her good for nothing porn-daughter.\n\n\"Thank God you're okay!\" mom said, pulling me into a hug as soon as we entered the house. Not a second after she released me she was yelling again. \"Where were you? You've been out all night!\"\n\n\"I fell asleep at a friend's house. I'm sorry mom,\" I said hanging my head.\n\n\"You smell like alcohol. Did you let your brother drink?\" she demanded, turning on Audrey. \"You know he's not old enough. What kind of sister are you? He could have been passed out drunk in a ditch last night for all you knew! Sometimes I wonder how you could even be my daughter...the lack of decency and common sense...\"\n\nAudrey stood there and took it like a champion. She never said a word as our mother berated her and said so many horrible things about her. It seemed to go on and on, and she just held her ground like a loving shield for me once again.\n\n\"Shut the fuck up!\" I shouted, even scaring myself a bit. Dead silence followed as both my mother and sister stared at me with open mouths. \"I'm tired of this shit,\" I continued in a somewhat quieter voice. \"All you do is talk shit about Audrey. So, what if she wants to do porn? Maybe if you weren't such a bitch during our entire childhoods, she wouldn't have picked a job, any job, that would keep her from ever having to come back here.\"\n\n\"You think she's going to go to hell?\" I asked. \"Well guess what. You can save her a seat because you'll probably beat her there. Oh, you're so religious, read the bible every day, but I guess you're just too stupid to learn the lessons. 'Judge not lest ye be judged.''\" I finished, finally running out of wind\n\n\"Now you listen here,\" mom started.\n\n\"No!\" I said firmly. \"You listen! We might be your children, but we are not children anymore. What we do with our lives is our choice.\"\n\nWith that I stormed upstairs through their shocked silence. I had made my choice the moment I had opened my mouth. I quickly grabbed my duffel bag and began packing my things into it. It was a tight squeeze with all the things I was bringing back with me. I had to grab an old backpack from my closet to put my girl clothes into.\n\n\"You in here?\" Audrey asked as she slowly opened my door.\n\n\"Yeah,\" I said turning to see her.\n\n\"You're leaving,\" she observed, seeing my bags.\n\n\"After that?\" I asked. \"Yeah, I'm going back to Arizona. I don't have to stay here, and being there alone for a couple days would be better than staying here for another minute.\"\n\n\"Thank you,\" she started. \"For standing up for me. You didn't have to do that.\"\n\n\"It was about time that I did,\" I said hanging my head in shame. \"I should have done that a lot sooner. She has no right to treat you like that.\"\n\nWith tears in her eyes, Audrey pulled me into a bone-crunching hug.\n\n\"I love you, Lexi,\" she whispered.\n\n\"I love you to, Sis,\" I whispered back.\n\nShe held onto me for a while longer before regretfully releasing me.\n\n\"Hey, before I go, can you do something for me?\" I asked.\n\n\"Sure, anything.\"\n\n\"Can you sign this for Kennedy?\" I asked digging through my bag to pull out a copy of the Playboy issue with her on the cover. \"It's for Christmas.\"\n\n\"Yeah,\" Audrey laughed, wiping a tear away. \"I'll sign it for her.\"\n\n\"Are you sure she wouldn't want me to sign a new one? I have boxes of them at my place in California. This one seems rather...used,\" she smiled, holding it up delicately between two fingers.\n\n\"I think it will mean more that it's this one,\" I said knowingly. \"It has...sentimental value.\"\n\nShe opened it up to the centerfold, and after a moment of thought she began to write. A minute or so later she handed it back to me, and I carefully tucked it back into my bag.\n\nAfter that I was all set. As Audrey and I walked down the stairs together I felt sad that I wouldn't be able to see her again for a while. The time we had spent together had been wonderful and much needed, but after finally standing up to our mother, staying would have been counterproductive.\n\nAs we made our way outside, I found no trace of our mother anywhere. Audrey stood in the cold with me while I stowed my things in the back seat of my car.\n\n\"I'm going to miss you,\" I said, pulling her in for one last hug.\n\n\"I'm going to miss you too, little sis,\" she said holding me tight.\n\nWithout warning, her lips met mine in a kiss so passionate that I almost reconsidered leaving. Her lips pulled at mine and our tongues danced. I lost a moment before both of us realized where we were and pulled away. Over Audrey's shoulder I thought I saw the curtains move, but I wasn't worried. It would have been hard for our mother to see anything at this angle, and if she had, I had no intention of returning. Not for a long time at least.\n\nWith one last goodbye, I got into my car to begin my long drive back to Arizona...my new home.\n\n*** *** ***\n\nI had only been on the road for an hour before I stopped the car to change. I was so tired of being Alex. Instead of finding a place to change, I just pulled off to the side of the interstate. It was too late in the morning to find another place with any amount of privacy.\n\nI climbed into the passenger seat for more room, and with the heater all the way up, I began to strip out of my horrendous boy clothes, tossing them into the back seat. This last time, I had only been wearing my 'Alex' clothes for a short time, but as I slid on a pair of powder blue panties, it felt nice knowing that I wouldn't have to wear boy's clothes for a very long time, if ever again.\n\nI took great care in applying my breast forms while I imagined what my new breasts might feel like. I was dead set on getting them now. I had been thinking about them for a while, but after talking to Audrey, I knew I was going to get them, and soon. Scottsdale, Arizona was the boob job capitol of the world, or so I'd heard. It shouldn't be too hard to find me some boobs. The more I thought about it, the more excited I was. By the time I slipped on my bra I was grinning from ear to ear.\n\nI was on my knees, leaning over the front seats searching for my leggings and low-rise jeans when I heard a loud metallic tapping on my passenger window. Frightened and embarrassed because I was in my underwear, I grabbed the first thing that I could to cover myself up.\n\nThe tapping came more insistently now, and a loud voice called out, \"Highway Patrol, I need you to roll down this window.\"\n\n\"Shit!\" I cursed. I was damn near naked. Could this day get any worse? I thought to myself.\n\n\"Miss? Roll down your window,\" he called again.\n\nHolding my 'Alex' hoodie to my chest in a desperate attempt at modesty, I rolled down my window. Outside stood a hard-looking Highway Patrolman in his late forties.\n\n\"Is ah...is everything alright?\" he asked, seeing my state of dress.\n\n\"Everything's fine officer,\" I said, completely embarrassed.\n\n\"I noticed you stopped here on the side of the road and thought you might have been having some car trouble.\"\n\n\"No. No trouble,\" I said. \"I was just changing my clothes.\" I blushed.\n\n\"Do you mind if I see some license and registration?\" he asked.\n\nI froze. I had those things all right, but they were both for Alex, a man, and here I was a half-naked girl.\n\n\"Miss?\" he prompted me further.\n\n\"Yes, I have them,\" I said reluctantly.\n\nI popped open my glove box and grabbed the registration, and after an embarrassing moment searching in the back seat with my ass exposed to the officer, I came back with my wallet and ID.\n\n\"Here you are,\" I said, avoiding his eyes.\n\nHe looked them over for a few moments and then his eyes narrowed as he looked from my ID, then to me, and back again.\n\n\"Just wait right here,\" he said a little curtly. \"You can finish getting dressed.\"\n\nI rolled my window back up as he walked back to his cruiser and quickly began pulling on my thick black leggings and jeans. It wasn't against the law to dress as a woman, but I was still embarrassed. Not of being dressed like a girl, but that some stranger, even a police officer, knew I was a guy. That's how regular people would see it anyway.\n\nBy the time he returned, I was completely dressed in my tight jeans and my cute long sleeve t-shirt.\n\n\"Looks like everything is in order, Miss,\" he said handing back my information. \"You know, it's not safe stopping on the side of the road like this. That's why you only do it when it's an emergency, you see? I'm not going to write you up for anything. I have a fair idea what this was about, just try to be a little safer.\"\n\nI was so relieved. That hard look he'd previously worn had disappeared, and now he looked more fatherly as he smiled back at me.\n\n\"Thank you...so much,\" I said taking my papers back.\n\n\"You know, I have a niece like you. Hell of a girl,\" he said shaking his head. \"Not a lot of people get it though. Drive safe young lady.\"\n\nWith that he turned and walked back to his car. This was one thing I had feared since I had become Lexi, that I would get into trouble and have to give someone my real ID. I couldn't believe how well this had gone. Aside from this cop seeing me nearly naked, this whole thing just turned my day around.\n\nThe patrol car passed me as I climbed back into the driver's seat, and after checking my mirrors, I pulled back onto the interstate, setting my compass toward Arizona to make the long drive back home. One thing was certain, sitting down for twelve hours, there was zero chance I would be thinking about anything except last night."
    ],
    "authorname": "Son_of_Battles",
    "tags": [
        "incest",
        "transexual on male",
        "anal",
        "oral",
        "crossdressing",
        "transsexual",
        "first time",
        "new years",
        "party",
        "caught"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/womens-studies-ch-09"
}
{
    "title": "Lessons Learned Ch. 05: Study Buddy",
    "pages": [
        "The doors to the classroom were locked when I arrived. A small group of students milled around each of the doors, talking in low voices. Zach was leaning against the wall, head down, as he read a novel. Reggie and Tyler stood a short distance away. \n\nAs I approached, Reggie nudged Tyler, and they both watched me come to a stop next to Zach. \n\n\"Hey, geek, you know what chapter we're supposed to be studying this week?\" Reggie asked. I didn't like the predatory gleam in his eyes. \n\n\"Sexual Health and Dysfunction,\" Zach replied absently, then jerked his head up to meet my eyes, as he realized I was standing beside him. He started to smile. \n\n\"Maybe you can explain premature ejaculation to your research partner.\" Reggie and Tyler snickered. \"What was that girl's name again? The one you screwed for, like, thirty seconds?\" \n\nIf I could have shot flames from my eyes, and melted the two of them on the spot, I would have done it. Zach's smile dropped and he flushed a deep red. Even though he had told me about the experience, I knew he was feeling deeply embarrassed to be publicly reminded of something he considered a failure. \n\n\"Why don't you go screw yourself and leave him alone?\" I asked angrily, glaring at the two of them. \n\n\"Ooooo, Zach, I made your mommy mad.\" Reggie raked me up and down with his eyes, smirking. \n\nI was prevented from responding by the appearance of Dr. B and the custodian. It seems the classroom doors had been locked and Dr. B had gone to search for someone with a key. \n\nI stayed, locked in a glaring contest with Reggie, until Zach nudged my elbow and nodded toward the open classroom door. Reggie mouthed the word 'bitch' at me before he turned to push his way through the door, ahead of the others waiting to get inside. \n\n\"Don't worry about it, Brinna,\" Zach whispered after we'd found our seats. I continued staring holes through the back of Reggie's skull as the third member of their merry band of assholes, Lee, came through the door and took his seat next to Tyler. \n\nTo make things worse, the videos we had to watch consisted of a variety of sexually transmitted diseases. There were no concerns about getting hot and bothered based on the content of these particular videos. Zach looked distinctly pale under the low lighting in the classroom. I was a little nauseous myself by the end. \n\nDr. B handed out a one page quiz for us based on the content of the video. Once done, I insisted Zach let me turn them in. Normally, Zach assumed the duty of taking our papers to Dr. B at the front desk. He had told me Tyler and Reggie would stare at my ass whenever I went up to the front desk, and he didn't like it. \n\nI smiled politely at Dr. B as I handed him the papers, then turned to make my way back to my desk. The path back to my chair took me past Reggie's seat. He looked up from his paper as I approached, and I raised my right eyebrow at him. He rolled his eyes and looked back down. Just then, I tripped over something in the aisle, reaching out to break my fall. My hand landed on Reggie's desk, knocking over his open can of soda. The sticky liquid cascaded out, flowed over his paper, and splashed primarily into his lap. \n\n\"Oh!\" I said, apparently horrified that I had been so clumsy. \"I am so sorry, Reggie. My foot got caught on something.\" I gave him the most innocent look I could muster. \"Are you all right?\" \n\n\"God dammit,\" he hissed, belatedly reaching to right the nearly empty can. \"You are such a bitch.\" \n\n\"Go get some paper towels from the restroom and clean that mess up, Butler,\" Dr. B demanded. I sashayed back to my seat as Reggie stood to comply. \n\nZach was looking at me, wide-eyed and speechless. He realized that I had engineered the 'accident' at Reggie's desk. I grinned at him, causing Zach, causing him to duck his head to avoid anyone seeing his answering smile. \n\n\"Thursday we'll be covering the section on sexual dysfunction. Now get out of here and make sure you do the reading,\" Dr. B warned, dismissing the class. \n\n\"Reggie looks like he could have been the victim of premature ejaculation himself, with that big wet spot on his pants,\" I observed to Zach, pitching my voice low. Not so low that it wasn't heard by the three guys sitting closest to us. I could have sworn I saw Lee cover a smile. \n\n\"That fucking bitch,\" I heard Reggie tell Tyler as Zach and I slipped past them. \n\n\"You didn't have to do that, Brinna,\" Zach told me, once we were outside the classroom. \n\n\"I didn't have to,\" I laughed. \"But it sure was fun. Who knew revenge could be as sweet as a Coke?\" Then I shrugged. \"He really can't prove it was anything except an accident. And I did apologize, after all.\" \n\n\"Oh yeah,\" Zach said sardonically, \"that was some sincere apology.\" Laughing, he opened the library door for me. \n\n\"We have to go to the Reference Desk and check on some journals I ordered for our paper and I think we both need some time to get the images from Dr. B's horror movies out of our heads.\" \n\n\"It was smart, what you did. I mean, when you had us both go to Student Health and get checked.\" He cleared his throat. \"I mean, I know I wasn't, you know, active, but it was a good idea. You know?\" He caught my look. \"Not that you needed to be checked, or um, ah hell,\" he said in frustration, \"I'm not saying this right.\" \n\n\"It's okay, Zach. I get it.\" He gave me a relieved smile. \n\nI sent Zach to the Reference Desk to retrieve my journal order, while I headed for the nearby copy machine. I suggested he introduce himself to Jen, the girl at the counter. \n\nJen worked the Reference Desk a few hours a week. I knew Jen from work study staff meetings, and I had used her help before when doing research for papers before. She was a cute girl; I knew she had recently broken up with a boyfriend and had been lamenting the lack of 'decent men' in her life. \n\nI leaned against the copy machine and watched Zach approach the desk. I could tell by his hesitant step he was feeling uncertain. He knew I was watching him closely, although a casual observer would not notice my interest. \n\nHe spoke to Jen, at one point indicating me over by the copy machine. I waved when her head turned to find me, and she nodded back. She responded to Zach, then disappeared into the stacks to retrieve my order. \n\nHe brought the small pile of journals to me at the copier, looking for all the world like he'd love to be anywhere else right now. \n\n\"You could have told me you ordered a bunch of journals about sex studies,\" he accused. I simply grinned at him. \n\n\"I told you they were for our paper.\" \n\n\"Yeah, well.\" He cleared his throat. \"What now?\" \n\n\"Let's make copies of the cover and articles, then we can return the journals.\" \n\nI made Zach go back to the desk a second time, to ask Jen for a stapler, then a third time to return to the journals. As we made our way down to the basement, I told him I thought he should ask Jen out. \n\n\"What?\" he asked incredulously. \n\n\"She's a pretty nice girl. She's cute. You just need to make some small talk, then ask her out. You know, it doesn't even matter what her answer is, it'd be good practice for you.\" \n\n\"But\u2014I don't know her at all. Why would she want to go out with me?\" he considered. \"I don't even have a car, where would I even take a date?\" \n\n\"Zach, it's a college campus. There are activities on campus all the time. Sports, movies, bowling nights, festivals, workshops, speakers, all kinds of things.\" I nudged his arm. \"And you can get to know her on the date.\" I gave a contented sigh. \"Yup, that's your new homework. You need to start asking girls out. Check the calendar in the Student Activity Center, see what's happening on campus, and start asking some girls if they'd like to go with you to something. You don't have to ask Jen if you don't think you'd like taking her out. But you should be asking at least two or three girls a week.\" \n\n\"Couldn't you just stick to finding ways to torture Reggie, and not me?\" He gave me a half-smile, sounding hopeful. \n\n\"Confidence is sexy, Zach, remember?\" I shut the door to the office, flipping the lock and turning to him. \"I want you to feel confident anywhere you go. Walk into a room like you know exactly who you are, what you want, and where you're going. Don't be afraid of rejection, because there's always someone else out there who will see your confidence and respond to it. Get immune to rejection; it can happen to anyone. Some people let it diminish them, and some people shrug it off as just one of those things you can't control, so you shouldn't worry about it. Stop looking at your flaws because you're missing all the good stuff about yourself.\" I paused to catch my breath. \"Lecture over.\" \n\nZach looked thoughtful as he set his backpack down by the door. \n\n\"I can't ask a girl out this week. My best friend is coming to visit this weekend, so I'll be busy.\" I gave him a skeptical look. \"Really, Brinna! You can meet him Friday if you want.\" He grinned, pleased to have found a way out of his assignment for this week. \n\nI playfully rolled my eyes as I dug the copied articles out of my backpack. \n\n\"So, tell me about this best friend,\" I said, setting the papers on the desk and sitting down behind it. I patted the chair next to me and Zach sat down, turning toward me. \n\nI learned his best friend's name was Matthew. They'd gone to school together since Zach, as a twelve year old kid, moved into Matthew's freshman English class. He and Zach took turns visiting each other at their different colleges; this semester was Matthew's turn to visit. It was easy to see that Zach looked forward to seeing his friend. By his own account, Zach was so shy that it had been difficult for him to make many friends at this campus. \n\n\"So when is your grandpa coming to visit?\" \n\n\"A week or two after midterms.\" He smiled happily, excitement shining on his face. There was something infectious about it and I found myself smiling back. \"You're really pretty when you smile like that, Brinna.\" Almost as soon as the words were out of his mouth, his eyes widened slightly and he appeared anxious. \n\n\"Thank you, Zach,\" I said neutrally, trying to help him past his sudden discomfort. He turned his attention to the papers on the desk, cheeks slightly flushed. Impulsively, I brushed back a lock of hair that had fallen across his brow. He let out an almost imperceptible sigh as I touched him. \"Want to look through these articles and see if there's anything we can use for our paper?\" \n\n\"Sure,\" he said, sounding relieved to have a distraction. \n\nWe worked together in a comfortable silence, underlining information we thought might be usable for our research paper, making notes. As in the past, I admired the intensity that Zach brought to the work. Oddly, I was having difficulty concentrating on reading with his quiet presence at my side. \n\nI pushed through the remainder of the last article, then shuffled it to the side of the desk. Shortly after, Zach also finished his work, too. \n\n\"What did you think?\" \n\n\"I think the research on partners discussing, their, uh, sexual fantasies is, um, really interesting,\" he said hesitantly. \n\n\"So do I,\" I answered, standing up and stretching my arms up over my head to work the kinks out of my back. I dropped a hand onto Zach's shoulder, causing him to turn his head toward me. \"Do you have a fantasy you'd like to tell me about, Zach?\" I asked in a low voice. He swallowed convulsively. \n\n\"I had a dream about you this weekend. Us, I mean. I don't know if I, uh, can tell you about it. It was, it's, uh. It was intense.\" \n\n\"Now I have to hear it,\" I said teasingly. \"You can't say something like that and then not tell me.\" I rubbed his shoulder gently. \"Push your chair back from the desk a bit.\" He complied, glancing up at me. I gave him a smile before I threw one leg over him, straddling his legs as I sat down on his lap. We were now face to face, separated by several inches. I felt Zach's hands come up and settle on my hips. \"Is this all right?\" I asked, cupping his face in my hands. \n\n\"Yeah,\" he breathed. \n\n\"Tell me about your dream and I'll tell you what I did this weekend,\" I cajoled. \n\n\"D-do you want me to go down the hall first?\" \n\n\"To jerk off?\" He nodded. \"No. If you take your dick out to stroke it today, I want you to do it for me.\" Zach took a sharp breath and his fingers tightened on my hips briefly. \"Touch me if you want to, Zach.\" I leaned forward and gave him a little kiss. \"Anywhere. I want you to,\" I said softly against his mouth before nibbling lightly on his bottom lip. \n\nZach ran a palm slowly up my spine, his fingers stopping to explore my bra strap. \n\n\"Anywhere I want?\" he inquired. \n\n\"Mmm-hmm.\" I murmured, kissing the corner of his mouth. I dropped a hand back to rest on the back of his neck, rubbing gently as I kissed along his jawline. \"Tell me about your dream. Your dream about us.\" \n\nZach's hands trailed along the seam of my bra, coming around front to cup my breasts through the layers of fabric. He dropped his hands and began to unbutton my blouse from the bottom up. He worked carefully, pausing to exhale shakily when I took his earlobe between my teeth and nibbled it lightly. I paused myself when the backs of his fingers deliberately brushed over the flesh of my breasts not covered by the bra. Zach snapped the clasp open and quickly pushed my blouse and bra off my shoulders. I shook my arms free and he tossed my clothing onto the desk behind me. \n\nZach covered my breasts with his hands, massaging gently. I pressed myself against his palms, kissing and nipping at his neck. \n\n\"I dreamed we were in class,\" Zach began hesitantly. \"It was just a regular class day. Dr. B was lecturing. Then he said we didn't have any videos to watch because we were going to see a live demonstration.\" His fingers began working on my hard nipples. I felt the flare of heat between my legs. \n\n\"Go on,\" I urged, prompting him to both keep talking and keep touching me. \n\n\"Dr. B looked at us, then told us to come up front so we could demonstrate.\" Zach gulped. I dug my fingers into his hair as he dropped a hand down to stroke my inner thigh. \n\n\"Demonstrate what?\" I placed a hand over the top of the one he was using on my breast. \n\n\"How to fuck.\" His hand slid to the juncture of my thighs. \"Anywhere?\" he asked again. \n\n\"Are you teasing me?\" I asked with sudden insight, intrigued. \n\n\"A little?\" He sounded uncertain, causing me to smile against his neck. \n\n\"Anywhere.\" A wordless murmur escaped me when he pressed his hand between my legs. \n\n\"Are you, um, aroused?\" He slid his hand back and forth in short strokes. \n\n\"I'm wet,\" I whispered to him, smiling wider as his hand pressed harder. \"Tell me the rest.\" \n\n\"He made us come up to the front of the class. Only, when we got there, we were naked and-and they were all looking at us.\" \n\n\"How did that feel? Being naked with me in front of the class?\" I wished my layers of clothing weren't separating me from his touch. \n\n\"I-I was embarrassed. But I was also rock hard.\" I felt his lips suck gently at the flesh where my shoulder and neck met. \"They were all so quiet, just staring. I didn't know what to do. And then you, um, you bent over the desk.\" His hands moved on me restlessly, grasping, losing the smooth movements he had been using. \n\n\"Then what?\" I asked breathlessly, an image having formed in my head at his words. I found his mouth and opened his lips carefully with my tongue. He gave a soft moan, his hands tightening on me. I lifted my mouth from his. \"You know Dr. B's desk is really similar to this one.\" I paused to let that idea take root in his mind. \"Tell me what happened next.\" \n\n\"You looked at me over your shoulder,\" Zach answered, and I saw his lips quirk into a smile. \"You said, 'Come on, Zach, it's for a grade.'\" \n\nI laughed, my body warming from head to toe. Zach chuckled, setting his forehead against my shoulder. The laughter did nothing to diminish how turned on I was by his recollection. If anything, it increased it. \n\n\"What did you do?\" I prompted, snaking a hand down to feel the hard bulge between his legs. The back of my hand brushed the back of his, the one he was using to rub my pussy. \n\n\"I fucked you,\" he said with heat. I caught my breath. I needed the rest of my clothing off. I needed Zach's hands on my bare flesh. \"I fucked you from behind while everyone watched.\" \n\n\"Oh, Zach,\" I moaned softly. \n\n\"I woke up with my cock in my hand, stroking hard,\" he whispered. \"I came, wishing I was inside you.\" He turned his head, burying his face in my neck. \"I want to see your pussy, Brinna. Show me. Please show me. I'm so hard for you right now. I just want see and touch all of you.\" \n\nI disengaged from him and stood, reaching for the button of my slacks. Zach gently pushed my hands away. \n\n\"Let me.\" He reached for the fastening with hands that shook slightly. He fumbled a bit with the button, then pulled the zipper down. I slipped my shoes off, and kicked them out of the way, as he tugged the slacks down over my hips and let them puddle at my feet. His eyes locked on the lacy black panties covering my dripping pussy and licked his lips. His eyes rose and found mine. \n\n\"Go on, Zach. Time to find out.\" I smiled warmly at him. He took a deep breath and hooked his fingers into the waistband, pulling the lightweight material down over my thighs. He released his grip as he reached my knees, letting my panties fall to join my slacks on the floor. \n\n\"Real,\" he muttered, his fingertips coming to rest at the top of the triangle of red, tight curls between my legs. He let his fingers trail lightly through the curls as they sought out his ultimate destination. \n\nHis fingers brushed lightly over my outer lips and I shifted, spreading my legs a little wider to give him better access. \n\n\"Zach?\" \n\nHe tore his eyes away from my snatch and looked up at me. \n\n\"Would you like me to lay on the desk so you can get a better look?\" He nodded. \"And Zach? I need you to keep your clothes on. I'm incredibly turned on and I might go further than we should right now.\" \n\n\"Maybe you should go down the hall and get yourself off,\" he said finally, giving me a smile. \n\n\"Maybe,\" I said with a light laugh. \"Let me clear the desk.\" \n\nI turned to move the papers, my blouse, and bra from the desk top. Zach's hands found my bare ass and stroked it. I put my hands flat on the desk and pressed back into his palms. My nipples were rock hard, my pussy felt drenched, and I wanted to beg him to put his cock inside me. I settled for letting him knead my ass cheeks with firm fingers, as I tossed everything across the desk into the chair on the other side. \n\nI moved away from Zach's questing fingers, to the end of the desk. I hopped up onto the edge and slid back just a bit. The movements made me aware of the slickness between my legs. I leaned back, lowering myself carefully onto the hard surface. Zach moved away, puzzling me, until I saw he had gone to get the pillow from atop the yoga mats. He placed it behind my head, then stood beside the desk, trailing his fingers lightly over my skin. I looked at the cock bulging in his pants and licked my lips. In response, he tweaked my nipples, then leaned over to take the one closest to him into his mouth. I moaned as he used his tongue to toy with the hard nub, while his fingers continued to explore across my belly. When they reached my mound, they hesitated. He straightened and looked into my eyes. \n\n\"Can I look at you, Brinna? I really want to see you.\" He swallowed hard. \"And touch you.\" \n\n\"Get your chair,\" I told him, placing my ass near the edge of the desk and spreading my legs wider. I bent my knees and put my feet on the top edge of the desk. \"Oh god, I feel like I'm at the gynecologist,\" I said with a small laugh. ",
        "\"I hope this isn't like that,\" Zach said sincerely, then gave a responding chuckle. \n\nI closed my eyes as Zach rubbed his hands along my inner thighs, slowly, kneading in soft circles, almost as if he were handling my breasts again. I sighed contentedly when I felt him brush his palm across the top of my triangle of curly red hair. \n\n\"I can see how wet you are,\" he said softly, as I felt the first brush of his fingers on my outer lips. \"Should I, I mean, I don't really know what to do. I don't want to hurt you.\" He sighed heavily. \"I'm so fucking hard, Brinna.\" \n\n\"Try this,\" I answered in a husky voice. I ran my hand over my stomach and stopped with my palm resting on my mound. I extended a finger, and lightly traced over my outer lips. I heard Zach shift in the chair. I felt him lean forward, his breath touching my inner thigh. I dipped my finger into the hot liquid oozing from my depths, then smeared it around my swollen lips. Using my fingers, I spread my pussy wide for his view. \n\n\"Oh, god,\" he muttered. \n\n\"Go on,\" I urged, deeply aroused despite the nature of my position on the desk. \n\nI twitched slightly when his finger first touched me. He began repeating my movements, from scooping up some of my juices to smearing it around my hot sex. My breathing became heavier when Zach hesitated at the entrance of my pussy. \n\n\"It's like a rose,\" he said finally. \"Like petals on a rose.\" \n\n\"Zach, that's strangely romantic,\" I responded. \"And very sweet.\" I shifted restlessly, my body craving more. \"Put your finger inside of me,\" I urged. Without further prompting, he slowly pushed his finger forward, slipping easily inside of my wet hole. I moaned, unexpectedly loud, causing Zach to freeze. \n\n\"Am I hurting you?\" he asked anxiously. \n\n\"God, no. It feels good. This is so...I don't know. I've never done anything like this, it's so...\" I trailed off, not even sure of the words I needed. \n\n\"It's hot, Brinna. So fucking hot. I'm still not sure I'm not having the best dream ever.\" He resumed slowly moving his finger in and out of my pussy. \"Will you show me what you like? I want to know what you like.\" \n\n\"All right.\" I gently pushed his hand away, scooting myself back on the desk, moving into a more comfortable position. What I really wanted was to bury my fingers in my sopping hole and get off. \"Stand up and move in closer,\" I said, \"then let me have your hand.\" \n\nGuiding him with my hand spread over the top of his own, I pressed both our index fingers into my slick hole. He made an ecstatic little sound, and I worked our fingers around gently inside me. \n\nHis finger began to move a little faster and more firmly inside of me, so I removed my own hand. He didn't really know what he was doing yet, moving his finger with no specific rhythm. He was nowhere near my clit, but it still felt good. \n\n\"Two fingers now, Zach. Not too fast. Feel your way around.\" \n\nHe explored while I lay under his hand. He seemed to finally catch a rhythm, working two fingers inside of me until I was on edge. Unconsciously, my hips found the rhythm of his hand and I began to move slowly against his fingers. \n\n\"Fuck,\" he moaned. \"My cock is going to explode in my pants, Brinna. I need to cum soon. I'm sorry.\" \n\n\"Shut up, Zach,\" I said kindly. \"I don't want apologies. I need to cum too, and I'm the one trying to teach you self-control.\" \n\n\"I want to see you cum. Please?\" he asked eagerly. \n\nI was breathing hard now, excited beyond measure at the research partner I had found for myself. He was so much more than I had originally hoped for: eager, willing, and intrigued by it all. Inside our little room, he was slowly growing beyond his shyness. \n\nI gently pushed his hand aside and two of my fingers dove in to replace his. With my thumb, I rubbed my clit, as I stroked fingers in and out of my drenched slit. \n\n\"Zach,\" I breathed, \"you get me so wet, I never expected it to be like this.\" With my free hand, I toyed with one breast, pinching and pulling my nipple, teasing myself. \"Oh god,\" I whimpered, my hand moving faster as my hips flexed just enough to push against my fingers. \"Look what you do to me.\" \n\n\"Brinna, I'm sorry, I need to\u2014I need to jack off. I might cum first,\" he warned. \n\n\"It's okay,\" I moaned, aware he was taking his cock out of his pants while he watched me get myself off. \"Do it. Do it, Zach. Stroke your cock for me.\" \n\nHis hip pressed against my leg, and his free hand dropped to my inner thigh, though he didn't crowd me as I continued to work my pussy with my hand. I could feel the strokes he made through his connection with me. It took me to a new height of arousal to know he was pumping his cock in his fist, so very close to me. \n\n\"Brinna,\" he moaned, stroking himself hard and fast, \"fuck, here it comes.\" I heard Zach cry out softly as something warm and wet hit the back of the hand. Oh god, he'd come on the hand I was using to get off! \n\nThen it was my turn to moan as his second spurt hit my hand and wrist, and, with that, I came hard. The moan became a harsh shout as I envisioned the erotic scene we had created. My pussy spasmed relentlessly against my rocking fingers. I lost track of Zach as I rode the high on my orgasm. \n\nFinally my hand slowed, then stopped. I opened my eyes to look for Zach. He stood in the same spot, dick in hand, watching me. \n\n\"That was amazing,\" he gushed. Then he blushed and became shy with me again. \"I'll go get you something to clean up. Sorry.\" \n\n\"Stop,\" I said, freezing him in his tracks. I carefully removed my drenched hand and sat up. His hand had never left my thigh. He slid it up my leg and touched my damp curls with the tips of two fingers. \"Go on,\" I said, \"but gently. I'm still sensitive.\" I grabbed his wrist, ready to restrain him if he became too eager too fast. \n\nHis fingers slowly invaded my depths. I closed my eyes briefly, small electric currents of pleasure throbbing inside of me, connecting my pussy and nipples together on one circuit. \n\n\"You could cum again, couldn't you, Brinna? I mean, if I knew how to make you, you wouldn't have to wait like a man, you could cum for me now.\" \n\n\"Yes,\" I said with a low throaty growl. \n\n\"Would you? Make yourself cum again for me?\" \n\n\"You do it,\" I said, opening my eyes. \"Give me your hand again.\" \n\nZach removed his fingers from my drenched pussy. Instead of giving me his hand immediately, he brought the fingers to his nose and inhaled deeply while he watched me. \n\n\"You smell good, Brinna. How do you taste?\" He didn't wait for an answer. He sucked his fingers into his mouth, then pulled them out slowly. \"God, Brinna. You're fucking delicious.\" \n\nMy pussy throbbed in response to his words. I moved to reinsert my fingers inside my waiting pussy, but Zach shook his head. \n\nHe hastily tucked his half limp prick in his pants and zipped up. \n\n\"Let me clean you up a little. Do you want to use the mats? It might be more comfortable.\" He dug the wipes and paper towels out of the desk drawer and cleaned his cum from my body and the desk. \"I'm sorry I couldn't hold back and wait for you,\" he said softly. \"I got overexcited watching you. Come on.\" He helped me off the desk, spread the yoga mats and retrieved the pillow. I lay back and let him fuss over me. \n\nOnce I was settled, he hovered over me on his hands and knees. I continued to watch him quietly, enjoying his solicitous attitude. He leaned down and pressed a kiss to my lips. \n\n\"I need you to teach me how to kiss you. I'm no good at it, I know. You can show me how. And I want to learn what you like, so I can get you as hot as you get me.\" His eagerness was sweet and heart wrenching at the same time. It did more to me than I liked to admit. \"You'll show me, won't you?\" \n\n\"Yes.\" \n\n\"Can I still touch you anywhere?\" \n\n\"Yes.\" \n\nHe smiled suddenly, sliding down my body until his mouth was near my aching pussy. He glanced at me, anxiously seeking permission. \n\n\"Go on,\" I whispered and watched as he bent his head to run his tongue over my slit. \"Oh god, Zach,\" I moaned. He was inexperienced, yes, but made up for that with his obvious desire to please me. \n\n\"Delicious,\" he muttered. I felt his tongue probing delicately between my sopping lips. His mouth pressed against my opening and I set one hand lightly on his head to encourage him. He moaned against me, sending small vibrations into my flesh. \n\nI placed my feet flat on the mat, knees bent and open wide to allow him full access to me. He licked me, inadvertently running the tip of his tongue over my clit, causing me to groan and writhe beneath him. I fought the urge to grind myself against his mouth. Being a fast learner, he repeated the motion of his tongue and found my sweet spot again. \n\n\"Is that your clit, Brinna? Should I keep going?\" He shifted slightly, reaching down to adjust himself. \"I'm hard again, but I'll do better this time, okay?\" He smiled bashfully. \"Tell me what you did this weekend.\" \n\n\"Zach!\" I protested. \n\n\"Please?\" He slipped a finger inside of me. \"I'll do anything you want. I'll ask that girl out, if that's what you really want. You said you'd tell me what you did if I told you about my dream.\" He added a second finger. \"I told you, now you tell me.\" \n\nAppreciating his turnabout of my teasing earlier, I exhaled heavily, pushing my frustration away. Smiling at him, I reached up and began to toy with my nipples while he watched me, eyes hot with desire. \n\n\"I never dreamed I'd be between your thighs, watching you play with your tits and tasting your beautiful pussy,\" he said. \"It's better than any fantasy I ever had. Now tell me.\" \n\n\"I used the vibrator you bought for me, Zach,\" I said in a sultry voice. \"I thought about having your cock in my mouth and how you came down my throat. I fucked myself with it, just like you wanted. I came so hard remembering being with you last week. I called out your name when I came. And I came more than once. I got off at least four times this weekend, just thinking about you and your big cock.\" \n\nI pulled at my nipples while Zach rocked his fingers in and out of me. \n\n\"I want to suck your cock again, Zach, but first I need to cum. I'm going to play with my clit now. Watch closely because, next time, you're going to be the one who gets me off.\" \n\nI used two fingertips to rub and grind my clit, while Zach continued to work inside me with his fingers. The closer I got to my second orgasm, the more noise I began to make. I was full of small sighs, soft moans, and wordless murmurs as I rubbed my fingers in a tight circle on my clit. I fucked Zach's fingers with abandon when I felt myself on the verge of orgasm. \n\n\"Ooooohhhh, I'm cumming, Zach,\" I ground out. \"I'm cumming.\" My hips bucked and I felt my pussy spasm on his fingers, drenching them in my juices. \n\n\"Fuck that's hot,\" he said. I grabbed his wrist to stop his hand moving, as the throbbing inside of me slowed and I fought to catch my breath. His free hand stroked up and down my thighs. \n\nI sat up, and Zach leaned in to kiss me, as he slipped his hand from my damp folds. \n\n\"I can taste myself on your lips,\" I whispered to him. \"You did great, baby.\" I kissed him again. \"Now trade me places with me and let me taste you again.\" \n\nZach's cock stood out proudly, as I knelt between his legs. Taking his cockhead in my mouth and teasing it with my tongue, while applying steady suction, I had him ready to come within minutes. He cried out sharply as he began to spurt into my mouth. I swallowed rapidly, taking everything I could from him as I squeezed his shaft, gently milking every drop from his spent cock. \n\n\"I'm going to make you cum next time,\" he promised me. I smiled at his assurance. \"Do you have any idea how hard it is to sit next to you in class, watching sex videos, and not being able to touch you?\" \n\n\"I think I can relate to how that feels,\" I laughed. He gathered my clothes and insisted on helping me dress. \"It's so sexy to sit next to you and know that, not long after class, we'll be together in here.\" I straightened my blouse with a short tug. \n\n\"Will you kiss me before I go?\" he asked hopefully. \n\nI smiled softly and threw my arms around his neck, pressing myself against him. \n\n\"Is this what you want?\" I asked, and slanted my mouth over his. I kept it simple, showing him with my actions what I liked. His arms came around my waist, holding me tight against him, as he slowly began to respond to my lead. \n\n\"Yeah, that,\" he answered breathlessly when I drew back. \"Brinna? Thanks for today,\" he said shyly. \n\nI almost rejected his thanks as unnecessary, but his sincerity stopped me. Instead, I gave him a quick peck on the cheek and stepped back. \n\n\"Try not to smirk at Reggie and Tyler when they talk about my hair color next time,\" I teased with a smile as he was leaving. Zach gave me an answering grin over his shoulder. He walked out the door with a slight bounce in his step. I wondered if he was aware of it. \n\n\"See you Thursday,\" he said happily, before adding, \"Red.\" \n\nTo be continued \n\nThanks to Andyinoz for the continued editing assistance!"
    ],
    "authorname": "M8dOvGlaz",
    "tags": [
        "cunnilingus",
        "exhibitionist",
        "fellatio",
        "geek",
        "masturbation",
        "nerd",
        "oral sex",
        "red head",
        "voyuer"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/lessons-learned-ch-05-study-buddy"
}
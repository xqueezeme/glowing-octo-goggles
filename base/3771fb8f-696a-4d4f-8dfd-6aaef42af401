{
    "title": "The Ponytail Express Ch. 17",
    "pages": [
        "Ponytail Express\n\nChapter 17: Practice\n\n\"How do you feel this morning, Kitten?\" Jessica asked, grinning as she took in the scene.\n\nEarly Wednesday found Deb performing one of her workout routines for Jessica, only in the nude, except for her collar and a buttplug. Initially, the wholesome, girl-next-door blond wasn't sold on the new accessory, but it was growing on her. Not just because of how it felt while she was doing her side-plank routine, it was the strenuous and extremely enjoyable bout of wake-up sex. The sexy Italian woman introduced the anal plug to Deb only an hour before, and the sensations she felt with it in while Jessica pounded her cunt with the strap-on were quite enjoyable. Deb reasoned the plug must have tightened her vaginal canal, making penetration even more enjoyable. It was a whole new ballgame back there.\n\nSpeaking of ballgame, Deb looked forward to the first practice for the Ponytail Express, for several reasons. Mainly, the chance to see Freddy for the first time since Monday morning. It had been a long couple of days, and like a drug addict, she was jonesing hard for his cock. However, Deb was punishing herself, learning to cope with the current situation. Jessica constantly put her through the paces in a mistress-slave relationship that was different, but in its own way, an eye-opening experience.\n\nSecond, Deb wanted to see how the first practice shook out. There were details that needed to be worked resolved. She knew the nucleus of the team was strong enough to last the season, but it would be interesting to see how the other pieces fit into the complete puzzle.\n\nThe text from Freddy last night was another eye opener. The Dasnas were working for the Enemy, which in this case was someone like Freddy. Oni's parents were slaves to someone else's scent, prompting the fit blond to wonder who in her family worked for this mysterious individual.\n\nIf they had gotten to her father, it could make this Sunday a disaster. Ned Stallings had a lot of war buddies, military and government connections that made him a valuable target for an influence operation. This worry caused Deb to check in with her parents. Both were well; dad was enjoying his retirement, and mom was busy making dad redecorate the basement bathroom.\n\nThe Stallings family were going to have another blowout Fourth of July party at their lake house in another month, and Deb was going to invite both Freddy and Mia. This weekend she would inform her parents of the status of her relationship with Freddy. They already knew she was seeing him, but they didn't know it had gotten to marriage levels of serious. Deb could hear the arguments now and was planning counters and strategies to increase the odds of success.\n\n\"I like the form on the crunches,\" Jessica said, her tone appreciative.\n\nThe blond Italian didn't know how deep in thought Deb was about PTE business; instead, she saw one of the most athletic women she knew performing a cardio circuit that had to be seen to be believed. Jessica hid her sense of awe but couldn't hide her attraction towards the fit blond. Since agreeing to be Jessica's slave, she hadn't batted an eye over anything she'd been made to do. Given, Jessica wasn't pushing any rules, but she knew it had to be demeaning. There had been some hesitancy when she had introduced the butt plug to Deb's asshole, but she took to it like a trooper.\n\nIn fact, she seemed to enjoy it. Jessica's feelings of jealousy and envy were turning into infatuation. She enjoyed having Deb in her bed. She especially enjoyed the one-handed handstand while doing the splits. The anal plug glittered.\n\n\"Showoff,\" Jessica murmured.\n\n\"Sorry, Mistress, just testing the limits,\" Deb grinned. Her voice was eerily even, considering she was currently upside down.\n\n\"Speaking of which, I think it's time to test your jump rope skills,\" Jessica announced.\n\nJessica undressed as Deb arched her back and, like a snake bent over backwards, putting her feet on the ground.\n\n\"Wow, you did that like one of those gymnastic freaks at the Olympics.\"\n\nDeb grinned, flexing into a standing position. Her face was deeply flushed, and Jessica could tell it was because of the butt plug.\n\n\"How does my sign of affection feel in your ass, Kitten?\" Jessica asked.\n\nDeb, still in the nude, rested her hand on her cocked hip before answering. \"It feels good, Mistress. It expands my anus, which tightens my vaginal canal. When you doggy-styled me this morning, the plug made it feel like it was stuffing me. It made me feel fuller. Thank you for the discovery.\"\n\nJessica's tan cheeks flushed. \"Come to me, Kitten.\"\n\nDeborah complied, sauntering over to her mistress. Jessica stuck out her tongue, and Deb leaned in, taking it into her mouth, sucking on it like a good slave. She embraced Jessica, who then embraced Deb.\n\nJessica's resolve broke into a passionate kiss. She felt like she was in trouble, given her feelings for her slave. She wanted to care for her; protect her. Was this responsibility? If it was, why was it making her feel this good?\n\n\"Permission to speak candidly, Mistress,\" Deb requested between their erotic tongue battle. The sexy lovers stared into each other's eyes as they kissed. Deb's mouth was smeared with Jess's lip gloss.\n\n\"Of course, Kitten,\" the sexy Italian said, her voice showing she wanted another round of lovemaking, more intimate than the last. She couldn't stop kissing Deb's lips. They were so kissable; her tits were amazing. They were a full C cup and looked sexy as hell on Deb's athletic frame.\n\n\"I'm changing; getting better by the day from the feel. I couldn't track the changes when they were happening a week ago. I'm more aware now. It's because of Freddy's scent; it woke something up inside of me, Jessica. Something amazing.\"\n\n\"Like what, Deb?\" Jessica asked. She'd seen enough horror movies to be wary.\n\nDeb looked deeply into Jessica's almond brown eyes, hand caressing her olive hued cheek. \"You'll be going through changes too, Jessica. The longer you're in the inner circle, the more it'll affect you. You can be the best jump rope artist in the world.\"\n\nJessica answered Deb's question by pulling her slave in for another make-out session. Their lips smacked together as they slurped and sucked on tongues and lips. Deb nibbled on Jess's chin. The Italian was going to have to reapply her makeup, but she was okay with it since it was her sex-slave. Her lover. Being this close felt right. Deb's body was electricity itself. Jessica could feel it when her slave's fingers entered her own love canal, causing her hips to swivel invitingly.\n\n\"You didn't ask permission when you entered me, Kitten,\" Jessica said, her breath catching in her throat as she moved her hips in tight circles, her pussy greedily accepting the slender digits curling inside, stimulating her nerve endings, sending her on an upward path towards ecstasy.\n\nDeb looked into Jessica's eyes again. Understanding passed between them. Attraction and need. Jessica felt protective about the sexy creature finger fucking her. Jessica's hand squeezed those incredible tits, fluttering and pinching the erect nipples, admiring the intricate tattoo under those marvelous orbs. The fit blond's body was near perfection before, but she was moving inexorably to another level.\n\nAnymore thoughts dissolved into passion as Jessica found her slave's pussy and started sawing her fingers into and out of her own love canal. There was a different feel to it because of the anal plug. With her thumb, she maneuvered the plug around, causing Deb to moan in her high-pitched way.\n\n\"Thank you, Mistress! Your fingers are a fucking gift to my dirty cunt!\" Deb said as she keened.\n\nJessica kissed her slave hard on the mouth. Deb's mouth was so wet. Her saliva tasted so sweet, with a slight tang of pussy and a lingering taste of Fred's cock. The sexy Italian shivered as her pussy spasmed around Deb's exceptionally strong fingers. It was like her slave was giving her the pleasure she craved. She ached for Deb's intimate touch and was receiving it in spades.\n\n\"Kitten,\" she panted, \"Tell me.\" Her hips ground into her slave's hand. Deb had three fingers in her Mistress's drenched love canal.\n\n\"I'm your property, Mistress Jessica,\" Deb said, crying through her moans as she fought to maintain coherent speech. Both women stood, but were dangerously close to collapsing because of the impending dual orgasms.\n\nIt hit both lovely women at the same time. The pair were locked in a deep soul kiss up top while their fingers slurped and squelched into their sopping cunts below. Their hips contacted each other periodically, their breasts molding into each other, erect nipples pressing together. Sweat from Deborah's body coated Jessica, but she didn't mind. Quite the opposite, in fact. She yearned for anything the fit blond gave.\n\nBefore biting Deb's shoulder, Jessica said, \"So good, Kitten!\" she really had no words for her feelings. Actually caring for someone more than herself was akin to navigating an alien landscape for Jessica.\n\nShe was learning, though.\n\nSomehow, the pair stood, each supporting the other while riding out their delicious orgasms. They maintained eye contact, and a special connection was made through them.\n\n\"The best jump rope artist in the world, huh?\" Jessica finally said as she nuzzled Deb's wet tongue with her own.\n\nDeb eyed Jessica adoringly. \"Anything you want to be, Mistress,\" she cooed, offering her fingers, slick with the sexy Italian's juices. Jessica followed suit, offering her fingers to Deb. The two feasted on their own juices for a bit, eyes never leaving each other. It was hot, intimate, and erotic.\n\nEventually, the pair had to end their romantic interlude. After a shower, both talked about how excited they were at the prospect of softball practice. Deb saw the meaningful glances Jessica gave her, knowing full well the sexy Italian was falling under her spell, even as she was her willing slave.\n\nDeb found she didn't mind it much. She saw how aroused Jessica got when she called her Mistress. There was something empowering about it. It wasn't a kink, but she understood and was no longer averse.\n\nAcross town, in the hotel room Oni reserved herself days ago, Fred woke up to discover he was spooning Oni. The two had spent a lot of time talking about the incident yesterday with her parents and how to proceed.\n\nThey filtered the communication to the other members of the harem in different ways, intending to tell Mia and Deb in person either during or after practice. Since the tall redhead and her cousin Niamh had Fred tonight, he would most likely tell them then. Oni would find Deb after practice and bring her up to speed.\n\nFred knew there was an invisible someone out there who possessed the same ability he had, only they had more control over it than he. Oni's parents were members, tied by the scent, or at least an older version of it. Fred suspected whoever possessed the ability was older than himself. He also suspected it was someone in the Stallings household. Ned Stallings seemed the likeliest suspect.\n\nIt made little sense, though. Why would Deb's father willingly give his youngest daughter to someone like Fred? Was that part of the plan? Did her father really care about her that little? It couldn't be. Maybe it was Marcus, masquerading as a cog in the wheel, masking his overseer status, snug in a servant type role while his catspaws played out his agenda. It would be something Fred would do. It seemed like ages ago when Deb suggested controlling the mayor and her daughter.\n\nOne thing was certain. Whoever it was, they were giving him a lot of space, content to let him learn at his own pace. It didn't feel like a malevolent presence, but it was someone that obviously felt like they were in control of the situation.\n\nWhatever the fuck they wanted, it would have to wait as Fred's erection was sandwiched between Oni's soft, sinewy thighs. A slow wiggle sent tremors through his diamond hard cock, causing him to move his hips.\n\n\"Morning, Lover,\" Oni said, through a soft sigh. Her silvery voice music to his ears. He kissed her neck lovingly.\n\n\"Morning Oni,\" He countered, sawing his cock back and forth between her thighs, grazing her vulva.\n\nHer intake of breath was heard and appreciated as Fred kept a slow, languid pace. Oni was wrecked yesterday by the news, but she was coming to grips with the news. Her parents seemed concerned, but also wanted Fred, or at least his abilities.\n\nTo take back a country. It all seemed far-fetched to him, like a silly movie idea. Man gets mind control ability, helps people out. Sort of like the old Hulk TV show with Bill Bixby. This week, Fred assists a family in a small mining town, as the cruel boss does bad things to anyone who opposes his ironclad rule. What the Sakul family needed was the CIA, not one man.\n\nOni's slinky body contorted, her hips moving as her thighs slowly directed Fred's hard penis into her greedy little love canal.\n\nFred couldn't get over how tight Oni was. She could get him to cum just by flexing her cunt muscles, but she wasn't happy with that. Instead, she took care of him, moving her body sensuously, moving her body into his cock as it drug across her vulva. Her own juices lubricating the large member until it started catching on her entrance a few times, causing her to yip in pleasure.\n\n\"Fuck me, Oni,\" Fred whispered. She turned her head, her lips meeting his as her body contorted and flexed, her cunt pulling his cock into it. Her ass eventually started contacting the base of his cock as they lay on their sides.\n\n\"This is Itchy Buttocks, Fred,\" Oni said, chuckling.\n\nFred responded by putting a hand on her haunch, stopping her gyrating hips. Raising up her leg, he began pounding her pussy with strong, insistent thrusts.\n\n\"Oh. Oh. Ugh! Don't you fucking stop!\"\n\nFred and Oni enjoyed a good, hard fucking, each pushing the other to their limit in a back-and-forth game of oneupmanship. Fred eventually \"won\" the game as Oni went over the edge in an intense orgasm. Fred soon followed suit, filling her womb with his cum yet again.\n\nA bit later, the two lay in bed, soaked in each other's juices.\n\n\"Is there anything I can do for you today, Lover?\" Oni said, her silvery voice was adoring, worshiping.\n\nOni hadn't given up on her family, but events of yesterday made her even more dependent upon him. Discovering they both had been part of a two-decade long experiment wasn't all that revelatory for himself, but Oni's involvement was a new wrinkle. Being the daughter of political dissidents living in exile in the States was something he was more than prepared to live with.\n\n\"Be mine, Oni,\" Fred said, smiling at her.\n\nShe looked at him with a playful adoration. \"I'm yours, Fred, but I have to ask you something.\"\n\n\"Yeah.\"\n\n\"I like to tease people I love. I haven't teased you much since we started fucking each other's brains out, but I'd like to start. Would that be alright?\n\nHe looked at her. \"A million times, yes, Oni. I want you to be you. In fact, I want all of you to be yourselves, not something manufactured. I don't want robots, I want women with their own feelings. You can be my slave and still be yourself.\"\n\nOni let what he said sink in. \"Did you just call me a slave?\" she asked, staring at him.\n\nHe stared back, his face a resolute mask. \"Oni, we both know you gave yourself to me willingly. I would say you're more than my slave, but in the end, you're mine. Exclusive rights to all three of your holes. If I tell you to kill someone, what would your answer be?\"\n\nShe grinned coyly. \"I'd ask who they were.\"\n\nHe returned the smile. \"And then?\"\n\n\"I'd kill them for you,\" she said, sheepishly. \"No hesitation, Fred. I guess I am your slave.\"\n\n\"How do you feel about that?\"\n\nShe mulled it over. \"If you want to go there, I want a fancy collar, with 'Killer' somewhere on it. Send me out on assassination missions, but nothing in town.\"\n\nFred looked at his future wife. \"How about we wait until after you give birth?\" he asked, holding her close.\n\nShe began fisting his prick back to hardness.\n\n\"How about we shut the fuck up and you fuck me again, Master?\" she asked teasingly. \"Then we talk about what our daughter's name is going to be.\"\n\nWednesday passed by in a flurry of activity. Over lunch break, Fred used the conference room in the student union to get some spare time with Iris Gibson. Before the hour was over, she had given him an enthusiastic blowjob. Her inexperience was obvious, but enthusiasm won her points. She couldn't deep throat him, much to Fred's disappointment. Still, he gifted her with a mouthful of his semen. She couldn't take it all, and he made sure most of the excess landed on her face.\n\n\"Rub it in,\" he suggested.\n\nIris obeyed, treating it like lotion. Fred could see his cum seep into her pores, slowly but steadily making her his.\n\nFred added Martha Boltzman for a lunch date on Friday. He looked forward to giving her a healthy dose of baby batter, making her his, like her twin sister Mary.\n\nIris left the room with both lunch and a dessert. The want in her eyes made Fred's cock stir. It would have been simple to fuck to her. She wanted it; needed it. He could tell her body craved his cock.\n\nHe reluctantly let her leave but couldn't stand it. He strolled over to the Lit class, sticking his head through the door. Alexandra was in the middle of teaching class, but when she saw him, he quickly came out into the hallway.\n\n\"Fred, is everything okay?\" she asked, concerned.\n\n\"I want you. Right now,\" he said. He pushed her up against the wall beside the door, out of sight of her class, but anyone in the hallway would see. He put his hand on her crotch.\n\nHer eyes widened in surprise, followed by a flush of her cheeks. She wet her lips with her tongue, grinning slightly.\n\n\"Just a moment, Master,\" she said, softly.\n\nShe went back into her class, and let them know they were ending early. Fred stood down the hallway as people emptied, confusion on their faces. Alexandra was out of the room before half her vexed students.\n\nThey walked into the teacher's lounge. An older woman was there, but Fred ordered her to leave.\n\nAlexandra locked the door and, in short order, Fred bent her over the desk and gave her a hard fucking. The professor was as insatiable as Fred, moving her hips in time with his thrusts, mewling encouragement when she could.\n\n\"Please breed me, Master,\" Alexandra begged as he took her from behind. \"Fill my dirty cunt with your seed. Make my pussy yours!\"\n\nFred gave his professor what she begged for.\n\n\"Take all of it,\" he said through clenched teeth as he drove his cock deep into her with each spurt of his seed.\n\nUnlike Oni, he couldn't tell if she was pregnant yet, but he didn't care. He enjoyed using Alexandra's body and seeing her just abandon her class like that aroused him. She clearly no longer cared about her job.\n\n\"How much are you making a year, Alexandra?\" Fred asked as they worked to make themselves presentable.\n\n\"Seventy-five thousand dollars, roughly,\" she answered, scooping Fred's cum out of her pussy and applying it to her ample breasts. Almost absently, she rubbed it in, ending up licking her fingers like someone who just ate a plate of hot wings.\n\n\"I'll pay you more if you work for me as a personal assistant,\" he said.\n\n\"If you're serious about your offer, I'll resign tomorrow,\" she said. \"And move in with you.\"\n\nFred was okay with that.\n\n\"Master, you have exclusive rights to this body. It's yours, now and forever. You don't need to pay me for my services, unless you want to.\"\n\nHis cock sprang to life, and he took her again. Neither cared who walked by, or if anyone walked into the room. The pair fucked savagely, Alexandra cumming again, long and hard. Fred pumped more of his seed into her needy womb.",
        "Fred loved his dominance over his sexy teacher. A part of him wanted to fuck her during class while she lectured.\n\nAs it was, someone did, but Fred ordered them to forget what they saw and leave, and that's what they did. While he did that, Alexandra hadn't stopped moving her hips as she continued to please her Master.\n\nWednesday afternoon eventually came for Fred, and with it, Ponytail Express practice. Mia came in with Niamh on a new motorcycle. The tall redhead seemed to enjoy her rock star status and added to it with her entrance.\n\nFred had been early, greeting the women as they came in. He was met with a lot of meaningful eye contact and a ton of sexual energy. Most of the women flirted openly with him, since all had unknowingly drank from the punch that was laced with his cum last Saturday.\n\nWhen he saw Deb arrive with Jessica, she took his breath away. Fred wondered how in the fuck she looked even more beautiful than usual. She saw him and immediately started eye fucking. It was the high point of his day up to that point. Deb meant so much to him. He almost didn't even register Jessica's arrival, which was nice as well.\n\nWhen Deb saw Fred, her heart soared. She was reminded how much he mean to her\n\nPractice began with a rah-rah session, followed by what was a hard and competitive practice. The women were playing for keeps and Deb worked to motivate the women into believing the city championship was all but theirs, provided they worked hard enough to achieve it.\n\nFred coped with the added attention his newfound influence provided. Rather than getting eye fucked, it was more accurate to say he was getting eye gang-banged. Every woman on the team noticed him when he walked and talked.\n\nAnd Fred's senses could see the communication. Even women that hadn't found him attractive at Saturday's meeting were more introspective today. Caslyn and Imani ranked among that number. The feisty Tanzanian smiled shyly at him, and Fred sent her a grin back.\n\nFred's scent was communicating through his body, hardening his cock, making him want to arrange a little after-practice group session in the public restroom, introducing women to his cock through various holes. During practice, taking women on by one into the dugout for blowjob practice, where the rest of the women could see and perhaps provide extra feedback. His truck was also available for personal or group sessions.\n\nDuring practice, Fred was surprised to find when he thought about either Deb, Mia or Oni, they would look over at him. He wondered how many practices it would take to fuck both Mia and Deb on the pitcher's mound, and it would start off an outdoor orgy. Fred thought a lot about while watching his women practice.\n\nHe liked the dugouts, too. It was made mostly of cement and wood, while it had a roof to keep out any rain, which it was supposed to do tomorrow. The bench was wood and only comfortable if you brought a cushion device. Fred was armed with a notebook and a couple of pens. He wore shorts and underwear that were frequently dampened by his pre-cum secretions.\n\nOffensively, it was clear who the stars were. Deb and Iris stood out. Mia was in a class by herself, a mix of Roy Hobbs from The Natural, and Dotty Hinson from League of Their Own. Except, of course, Fred had turned her into a nymphomaniacal freak with large, D cup lactating breasts that might were approaching DD size. Fred was okay with DD breasts. Cat Dennings, a movie star, DD cups and they looked fine.\n\nEvery time she hit the ball, it was loud and impressive. She hit a towering 420-foot shot over the center field wall that would have counted as a home run in any major league baseball stadium.\n\nFred thought it might be a problem. Mia was so good that scouts from colleges might come looking for her, bringing unwanted attention. He thought about it as he watched her fielding grounders. She looked over at him and winked, smiling. A couple of other women giggled, looking over coyly as well. Mia said something obviously hilarious, and all three broke out in laughter. All three were also more aroused from whatever it was she said.\n\nWhen batting practice began, Deb, Mia, and Iris were on the mound and Deb signaled Fred to come out. Oni jogged in from center field and the entire team was loosely gathered.\n\nFred struggled to keep his libido in check. The urge to put a baby in every woman on the field was strong, almost overpowering. They all wanted it. Deb especially craved it. He was going to breed her, then the rest. Some of them already knew; the rest would eventually discover what it was they needed. What it was they craved.\n\n\"Underhanded fast pitch, Freddy,\" Deb said, snapping him out of his reverie. Four sets of erect nipples were on display. \"Do you know how to pitch?\"\n\nFred nodded.\n\nDeb looked around at the collected women. \"Kayleigh, Jessica, Imani, and Oni, you're all in the outfield. Delilia and Niamh will replace you as come in to take batting practice.\n\nNo one complained.\n\n\"Don't disappoint me, Fred!\" Oni yelled.\n\nLaughter ensued among the women.\n\nFred gave the women a show. Before he started throwing, he took off his T-shirt. For the last week, women had been putting him through his paces. He was lean, gristly muscle. From afar, he looked like a guy who could put on a few pounds.\n\n\"Can someone take my shirt?\" he asked.\n\nFaces flushed. Most of the other women immediately looked at Deb, but it was Mia who trotted back out to the mound. She grinned that \"Oh, shucks,\" grin that was so fucking hot. When she went to grab the shirt, he didn't let go. He took her hand, pulling her in closer.\n\n\"Are you going to get fresh with me in front of the other women, Fred? Cuz that would be hot as fuck,\" she muttered, only slightly resisting as she let herself get pulled in.\n\n\"Have you picked out a collar for tonight yet?\" Fred asked.\n\nShe flushed then. He knew how close she was to cumming. It was her fantasy. It was what she wanted.\n\n\"N-no, Fred. Should I?\"\n\nFred nodded. \"You and Niamh both. Pick out collars worthy of your position in the Express. Co-Captain,\" he added.\n\nHe hit the right button. As she walked back, Fred knew her panties were now soaked.\n\nFred slowly but surely learned how to pitch. It was just batting practice for the women. He wasn't looking to strike anyone out and cheered whenever someone hit the ball well.\n\nIris put a ball over a right field wall and everyone was impressed. Deb was a solid, line-drive hitter. Jessica was pretty good.\n\nNiamh needed work, but Fred thought it was great she was out trying. The alabaster beauty replaced Kelly Loeffler on the team roll. Now that Kelly had been reunited with her fianc\u00e9, Edward, she had little time for softball. Fred considered Edward a pal, and when he graduated from Law School, he might even become his lawyer.\n\nCaslyn Wilson was a dynamo at 5'4-inches. She was a compact woman, and fast. Short auburn hair and freckles dotted her face, and she had a determined, lively manner that infected women around her. She had been neutral to Fred, but as he threw batting practice, she began checking him out.\n\nThere was a running question among the uninitiated that Fred heard thanks to his heightened senses. The question was what in the hell was going on with other members on the team falling over themselves. Interactions like the one he had with Mia were leading women to believe Mia was vying with Deb for Fred's affections. Oni ran up and hugged him, giving him a big juicy kiss on the lips, and the rumors suddenly changed.\n\nThere was another question, which was how chummy Jessica and Deb were together. Folks thought the two rarely got along, and now Jess was fawning over the fit blond Co-captain. Fred wasn't a fan of all the drama, but he loved watching the bodies. He looked forward to owning the bodies.\n\nDefensively, the stars were Oni at center field, Bailey at catcher, and Caslyn at her second base-shortstop role. The best defensive configuration was Mia pitching, with Deb at shortstop and Caslyn at second base. Team defense was stout all over, but especially up the middle, but you couldn't discount Iris at third base. The woman was phenomenal. Fred thought how much better she would be with a daily dose of cock when his cell buzzed.\n\n\"Let's talk.\" Was the text he received from unknown.\n\nFred was in the dugout, watching practice, armed with a notebook and pen. He was busy solidifying Deb's notations on different lineups, depending on pitching rotation, comprising Mia, Deb, and Iris. He noticed Iris waving to someone and followed the line to none other than her father.\n\nMarcus was present, wearing slacks and a gray t-shirt under a colorful Hawaiian collared shirt. It was clear the text was from him.\n\nFred got up and walked over. Oni, Mia, and Niamh noticed with some worry. If Marcus wanted to do anything violent, there was nothing anyone could do. As Fred closed in, the wind died down and he got a good enough whiff to know Marcus had been talking to the Dasna family. Oni's mom sucked his cock earlier today. Marcus hadn't even bothered to shower.\n\nFred came over. Marcus was standing, leaning on the fence, seeming to be a father watching his daughter.\n\n\"Hiya, Fred.\"\n\n\"Hello, Marcus,\" Fred responded.\n\n\"The Ponytail Express is going to be a tough team to beat this year,\" the big man commented.\n\n\"I couldn't agree more. Anything on your mind?\"\n\nThe six-and-a-half-foot black man straightened, looking down at the much smaller Fred. The man looked like he was carved out of granite.\n\n\"Yeah, Fred. I have a request.\"\n\nFred turned to the practice, glancing at Iris in her third base position. The gorgeous chocolate-hued athlete was suddenly far more interested in what was going on outside of the diamond. She wasn't the only one. Oni switched places with Imani in the outfield to be closer. Thalina played first base but was watching. It was like practice slowed down a bit.\n\n\"Shoot,\" said Fred.\n\nThe irony of his words wasn't lost on Marcus.\n\n\"Don't believe the Dasna family.\"\n\nFred thought about what he wanted to reveal to Marcus before continuing. He knew Marcus was fucking Oni's mother, and it was almost a given she was within earshot.\n\n\"What makes you say that, Marcus?\"\n\n\"They've been through a lot. They nearly got themselves killed in their previous home and it wrecked them.\"\n\n\"Help them out, did you?\" Fred asked.\n\n\"How much did Masani tell you?\"\n\n\"May wants me to help them take control of Thailand.\"\n\nThere was a notable silence before Marcus broke out into laughter. It was loud enough some girls looked over. Except for Oni, who wasn't laughing.\n\nFred spared a glance at her before shrugging. \"Marcus, I don't mind if you're laughing at me. I hope, for the sake of you living out today, you're not laughing at the Dasna family.\"\n\n\"Calm down, Fred. I'm not laughing at their misfortune; I'm laughing because helping them take back their country is the least of the shit you'll be able to do.\"\n\nFred looked at the big man for signs he was fucking with him, but Marcus returned his gaze evenly, his eyes still glinting with humor.\n\n\"You don't need to blow smoke up my ass, you know,\" Fred said, keeping his tone even.\n\n\"No smoke-blowing needed,\" Marcus said. \"Helping the Dasnas take back their country is a silly thing to get hung up on. I want you to know whatever you intend to do with Iris, you have my blessing.\"\n\nEvery sense Fred had told him that Marcus was telling the truth. Was he so important all the parents in the know wanted him to fuck their daughters?\n\n\"So you're saying it would be okay if I knocked up your daughter?\"\n\nMarcus looked at Fred. \"As long as it's her choice, then I'll back my daughter's play. Til you fuck up. If you fuck up and I have to come after you, it's an 'all bets are off' situation that not even Deb will save you from.\"\n\nFred looked at Deb, caught her eye, and smiled. \"Marcus, on your best day, you couldn't beat Deb Stallings.\"\n\nThe big man chuckled. \"How do you figure, Fred?\"\n\n\"If you can't take out Minka, then you can't even shine Deb's shoes. That's a fact.\"\n\nFred felt good delivering that information to Marcus. It was dangerous because Fred was soft and squishy compared to Deb and the Chameleon, but he felt the need to get under the big man's skin.\n\n\"That's an interesting collection of facts, Fred,\" Marcus said, his voice taking on a more serious tone. \"It makes me feel like we can't be friends.\"\n\n\"That's entirely up to you, Marcus. I'm glad you're giving me your blessing to date your daughter. I guess we'll have to see where that goes.\"\n\n\"Where's Minka?\" he asked.\n\nFred laughed like Marcus had previously.\n\n\"Not a chance in hell I'm answering that question until you play nice.\"\n\n\"Fred, we are playing nice.\"\n\n\"Where's your boss?\" Fred countered.\n\nMarcus turned to Fred, who turned and actually took a step towards Marcus, looking up at the icy rage play across his face. He was a dangerous man, but a puppet.\n\n\"Where's Minka, Fred? Last chance.\"\n\nFred narrowed his eyes. \"You're a toilet paper man in a paper towel world.\"\n\n\"What?\"\n\n\"It means unless you came here specifically to start shit, then you're a fucking idiot.\"\n\nFred knew Marcus wasn't here to see his daughter. He couldn't give less of a shit about softball practice. He wanted to know what Fred was doing about what had been revealed. Revealing his knowledge about The Chameleon struck a chord with the big man. What had she done to him? It said a lot that Marcus was close-lipped and touchy about it. He suspected The Chameleon used to work for whoever Marcus called Boss.\n\n\"Normally I would hit you so hard, your mother would feel it,\" Marcus said, grinning. \"Let's start over.\" He offered his hand in a handshake.\n\nFuck that, Fred thought.\n\n\"Scarface is not better than the Godfather,\" Fred yelled, before turning around and marching to the dugout.\n\nMarcus left soon after. The practice ended, and Fred fielded a lot of questions.\n\n\"How are you, babe?\" Deb asked, giving him a hug.\n\nNot for the first time, Fred's nostrils flared as he inhaled the scent of his future wife. He wanted to rip off her clothing and establish dominance with the entire softball team, making all the women present understand their places.\n\nInstead, he settled for kissing her meaningfully on the lips. She took his tongue in, aware of the women watching, but not really caring.\n\n\"I'm good, Deb,\" he said, giving her ass a playful squeeze. She leaned into it, smiling.\n\nHe saw Mia looking at him and waved her over.\n\n\"Long time no see, Scorekeeper,\" Mia said, embracing him, then pulling back and kissing him on the lips, giving him her tongue. He sucked on it before releasing her. The redhead was holding hands with Deb, who watched with desire, her face a beautiful, sweaty mess.\n\nHe looked at Oni, finding her at his side, looking up.\n\n\"Saving the best for last, lover?\" she asked, her silvery voice music to his ears.\n\nThe pair exchanged a wet, intimate kiss as she melted into his arms.\n\n\"What the fuck is going on?\" Caslyn asked, her voice incredulous, and turned on. Her relationship with her boyfriend had been tense since Saturday's meeting, and she knew it was because she wanted Deb's boyfriend. Why was she letting him kiss the other women?\n\n\"Fred's dating a few of us,\" Deb said to the team.\n\n\"What does that mean?\" Martha Boltzman asked.\n\n\"It means Fred's cock is dope as fuck,\" Mia said.\n\nWhile there was scattered laughter at what the redhead spoke, Fred offered his hand to Caslyn. She hesitated before taking it. He pulled her in for a kiss; tentative at first, but gaining passion, until the 5'4-inch caramel-haired woman's hands were all over Fred. He let her hand feel the hard cock in his pants before he said, \"Cum for me, Caslyn.\"\n\nSome of the closer women heard it, but all saw Caslyn's body spasm, and Fred kiss her one more time on the forehead while she came down from what was obviously an orgasm.\n\n\"Holy shit,\" Caslyn said, as Fred spun her back in the circle of women that had surrounded him.\n\nJessica was next. \"Scorekeeper,\" she said before kissing him full on the mouth. Her hand sought his cock immediately, slipping under the fabric to grasp what she had been craving. He loosed her right breast so her scorekeeper could fondle it.\n\n\"I'm going to put a baby into you soon,\" Fred whispered to her. It was enough for her to leak into her panties.\n\nThe women of the Ponytail Express found themselves drawn towards to The Scorekeeper, allowing their lips to be claimed by him. Most got to caress his cock or feel his ass. Some, like Thalina or Niamh, got to do a little more, but each woman took a turn, giving themselves to him in a sexual rah-rah. They were excited by the practice, sweaty and aroused. He gave them all orgasms, not as a parting gift, but as a reminder of things to come. They would all be his.\n\n\"I wanna suck your dick again, Scorekeeper,\" Mary Boltzman whispered after their kiss.\n\n\"You'll get your chance, Mary. Maybe I'll have a surprise for you,\" said Fred. The surprise, of course, was the next time she blew him, she wouldn't be alone. Her twin sister would be with her. \"Come for me.\"\n\nNiamh sucked on Fred's tongue before saying, \"Looking forward to tonight's festivities.\"\n\nFucking both Mia and her Niamh was something worth looking forward to. He could smell the anticipation on them as well.\n\n\"You and me both, Niamh. Did Mia tell you?\"\n\n\"Tell me what?\"\n\n\"After practice, you and your cousin should pick out slave collars.\"\n\n\"And a chain?\" she asked.\n\nFred nodded.\n\n\"Holy fuck, Fred,\" Niamh breathed.\n\nThe last woman was Imani Austin, a fetching Tanzanian who brazenly stuck her hand down Fred's pants while they tongue-wrestled.\n\n\"So hard,\" she muttered, her voice full of need. Her breasts mashed up against his chest felt incredible.\n\n\"Fuck,\" Fred muttered. \"Meet me tomorrow afternoon at lunch for a date and you can put it in your mouth.\"\n\n\"Okay,\" Imani said. Still, Fred had to get her to release her grip on his cock.\n\nDeb walked out and kissed Fred one more time, suggesting she was both the first and the last.\n\n\"Come for me, Deb,\" he said.\n\nHis command wasn't quite enough to make her orgasm, but she was close. As he held her, she whispered in his ear.\n\n\"I'm wearing a butt plug. The next time we fuck, I'm keeping it in, Freddy.\"\n\nHe whispered back. \"The next time we fuck, you're going to call me Master.\"\n\nThat pushed her over the edge. \"Thank you, Master,\" she mewled. Fred nearly came himself.\n\nHe looked at the ring of women as they closed ranks around them, touching him, touching her.\n\nAll fifteen women, not counting Alexandra or Kelly Loeffler. He had them all. The Ponytail Express was officially more than a softball team. They were not all his harem, but they soon would be.\n\nAnd he would impregnate all of them.\n\nTO BE CONTINUED"
    ],
    "authorname": "A_Gavin_MaCross29",
    "tags": [
        "softball",
        "harem",
        "male dominant",
        "anal plug"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/the-ponytail-express-ch-17"
}
{
    "title": "Dwelling in Desire Ch. 10",
    "pages": [
        "Notes from the author:\n\nHello my lovelies. I want to thank all of you for your patience and kind comments so far in this series. This chapter is the turning point I have been working towards, similar to Chapter 14 of See Through Me in its difficulty to write. I've been struggling for weeks to find some momentum, and think I finally found it. This segment may be a little turbulent as there are both time shifts and narrator shifts at a higher than normal frequency. I am just as eager as you all to...progress things, and that is the biggest reason for this. Hopefully it isn't too rushed. Enjoy and let me know your thoughts. XOXO\n\n--J\n\n**************\n\nChapter 10\n\n\"Ladies and gentlemen we are now seating first class passengers. Please proceed to gate twenty-three with your boarding passes ready.\"\n\nThe past three weeks had flown, and I prayed the next two days would be just as swift. I'd kept rigidly on the opposite side of our travel party since early this morning. The farthest from Bethany I could manage without being blatantly obvious. Luckily, she and Kate were deep in discussion through most of it.\n\n\"Joe, I don't suppose you accidentally booked me a seat near Bethany?\" I grumbled as we got in line. I knew my seat was next to Joe, but I didn't know if Bethany was in close proximity, and it had me grinding my teeth.\n\n\"Please Curt, my sadistic energy is all but exhausted on Kate. But don't worry, I'm sure you'll get plenty of opportunities this weekend,\" Joe chuckled.\n\n\"Thanks a lot for that mental image Joe. The last thing I need right now is a boner for my best friend's fucking wife,\" I whispered, pissed at Joe's cocky grin.\n\n\"You'd prefer a boner for her best friend?\"\n\n\"By far. But please don't try anything Joe. I'm begging you.\"\n\n\"You'll be glad to know, Curt, that I plan on sleeping through this flight. Had a tumble too many with Kate last night, and I'm exhausted.\"\n\n\"Christ,\" I muttered in annoyance at the new mental image.\n\nBut despite its pissing me off, Joe's comment was a fruitful one. Sleep. I would sleep through the flight.\n\nAs we inched towards the entrance to the plane, I could hear Bethany up ahead, laughing and chatting with Kate. Her laugh was so fucking cute. God help me but there was no other way to describe it. Cute. Cute. Cute. Fuck.\n\nWhy couldn't she have an obnoxious Roseanne Barr type laugh? Something to make her less desirable. Less feminine. Less pant tightening.\n\nBecause I could not catch a fucking break. God would have none of it.\n\nJust chill out, for fuck's sake.\n\n\"Thank you sir, you're in B4 just over there,\" the flight attendant directed.\n\nJoe was in the window seat, immediately next to me, and Kate and Bethany were in the row just in front of us. Margot and Randall sat across the aisle from me, and Kate's parents were across from her.\n\nKate's mom and dad were nice, I supposed. A bit distant. Of course the circumstances were understandably awkward. Their daughter pregnant and hurrying to the altar as a result, or so it seemed.\n\nThey'd regarded Joe and me rather icily, and who could blame them? Had Kate been my daughter, I would have immediately objected to her marrying someone old enough to be her father. Someone who hadn't even bothered to ask for her hand. Oh yes, and the knocking her up thing. Great way to start a relationship with the in-laws. I didn't envy Joe the awkwardness during his brief interactions with Kate's parents, but somehow he kept it together.\n\nI knew that Joe and Kate's reasons for getting hitched were not purely based on the pregnancy. They loved each other, it was clear. And I was fucking jealous as hell.\n\nJoe's words passed through my mind.\n\nTo look in a woman's eyes and know she is only for you, that she adores you and wants you more than anything, would do anything for you, Curt, there is nothing like it.\n\nI wanted it so fucking badly my mouth watered.\n\nSuddenly Joe broke my train of thought with his light snore. He was already long gone and the flight attendant had just begun with the safety protocol. After smirking at his lucky pompous ass, I followed suit.\n\n---\n\n\"Wakey wakey, eggs and bakey,\" came a soft feminine voice, accompanied by a familiar giggle.\n\nI grudgingly opened my eyes to discover Kate and Bethany perched over their seats and staring down at us. It was an odd combination of shock and arousal that stirred in me, waking up to the two beautifully amused female faces. Refusing to wait for things to get more awkward, I punched Joe in the arm to knock him out of his slumber.\n\n\"Shit! What the hell?\"\n\nJoe was not a morning person. At least not when I punched him.\n\n\"Wake up, ass-wipe. We've landed,\" I declared.\n\n\"I love the pet names men give each other,\" Kate rolled her eyes as Bethany grinned in amusement.\n\n\"Ha, don't even get me started!\" Margot cackled. \"I gotta deal with these putzes at their worst all week!\"\n\nIt was so weird to hear Margot laugh. Apparently not even she was immune to the uncharacteristic love in the air.\n\n\"Okay Donovan, move your ass so we can get off this plane,\" Joe grumbled.\n\n\"I like the plane Joe,\" I teased. \"These seats are divine, don't you think? Besides, I believe Kate said something about eggs and bakey, and I'm starved.\"\n\n\"Eggs and bakey will come later,\" Kate smiled.\n\n\"I'll hold you to that Kate,\" I winked. \"I want my bakey.\"\n\n\"And if I don't make good?\" Kate whispered with a mischievous grin.\n\n\"Then your husband will punish you,\" Joe interjected in a low voice, obviously put out by his fianc\u00e9's flirtatiousness.\n\n\"Husband? What husband?\" Kate laughed in challenge.\n\nBethany's face turned rosy. She'd been quiet this entire time, and assuming she hadn't already been apprised of Joe and Kate's mutual kinks, she was fast becoming aware.\n\n\"Your husband to be,\" Joe growled. \"Now move your ass Curt! The sooner I can get Kate alone the better.\"\n\n\"Uughhh, TMI you guys,\" Bethany rolled her eyes, but her flushed cheeks betrayed her.\n\nGetting up and shifting towards the exit behind Margot and Randall, I called back to Kate, \"I'll expect that bakey after we get settled at the hotel.\"\n\nYoung female giggles.\n\n---\n\nThank Christ for fucking baseball.\n\nIt gave us an excuse to hide away from the women. Bethany, Kate, Margot, Kate's mom, Joe's sister-in-law, and Joe's mom were all in the kitchen laughing and gossiping. At least as far as I could tell. Probably making regular jokes at our expense. But hell, they could make all the jokes they wanted. As long as I didn't need to see or be near Bethany.\n\nSpeak of the fucking devil.\n\nBethany sauntered in, and I couldn't help but look at her. Especially when she fucking bent over. She gracefully yet seductively set an offering of chips and dip out on the coffee table, and quietly returned to the kitchen. I caught a couple of the guys staring at her ass as she left, and fought against the fiery possessiveness that rushed through me.\n\nShe'd made no eye contact with me. None. No chatter, no smile, no nothing. Just chips, and gone.\n\nWas it pure ego that made me think she was purposely avoiding me? Probably. Hell, I was avoiding her. It made enough sense that she would be battling similar demons as I. She felt the same.\n\nI was ripped out of my train of thought by Joe's grunt as he rose from the couch.\n\n\"Another?\" Joe prompted, nodding towards my finished Coke.\n\n\"Yeah, sure,\" I grunted, though I really couldn't have cared less what he put in front of me. Not unless it was a hell of a lot stronger.\n\nJoe took additional drink requests and then disappeared to the kitchen.\n\n\"Say, we really appreciate you guys choosing to come out to our area for the wedding,\" mused Joe's father Dean. \"It's nice that the hotel is only a twenty minute drive from our house.\"\n\n\"No sweat Dean,\" I smiled. \"Kate apparently fell in love with the lake view and Joe would never refuse her a thing.\"\n\n\"Well that's encouraging at least,\" grumbled Mike, Kate's father. He was a tall, silent, ominous looking man, and I could sense his protectiveness of his little girl.\n\n\"Rest assured Mike, Joe will see to her every need. Without fail,\" I looked him in the eye, leveling with him.\n\nHe just redirected his attention to the game, which suited me just fine.\n\nI wanted to defend Joe, but I definitely wasn't one for long speeches.\n\nJoe returned with drinks, and we all returned to our mutual task of the moment. The one activity that brought men together better than anything else.\n\nAvoiding the women.\n\n---\n\n\"Hurry up damn it Curt!\" Joe rammed on the door to my hotel room. \"The rehearsal is in ten fucking minutes and you'd better fucking be there.\"\n\nI was being a pussy. Casting an undeserved glare at Jerry Seinfeld, I grudgingly rolled off the bed. I'd been ready to retire after the game that afternoon, eager to escape the agony of mundane chitchat, when I'd learned of the rehearsal and subsequent \"rehearsal dinner\" at six pm. Christ.\n\nI shoved into my shoes and buttoned my shirt, but stubbornly skipped the tie.\n\nSteeling myself for another couple hours of misery, I exited the safe haven of my hotel room and headed down the hall to the lobby.\n\n---\n\nOne hour later...\n\nAs I sat staring across the table at Bethany, I knew Joe had set this up. And Kate had likely had a hand in it. I had to look. There was virtually nowhere else to look.\n\nA couple of times, her eyes met mine, and just as quickly averted. It was fucking miserable, as I had expected, and I struggled to keep my simmering rage in check.\n\nBethany had done nothing wrong. She deserved anything but the negative energy I was carrying in spades. I was a loose cannon, and I needed to get away.\n\nBut no mother fucking dice.\n\nChrist how I wanted a drink.\n\n---\n\nOh God, he would not stop staring. And the thing was, I liked it. But it was strange. As much as I wanted to reciprocate, I was terrified by the look on his face. He looked hungry again, like he wanted to...hurt me. Or something. I knew he would never do anything to hurt me. But the look in his eyes. It was utterly carnivorous.\n\nHad I done something? Said something?\n\nThe last thing I'd said to him was that we needed to call a truce. Oh...\n\nWas that what had him all bent out of shape? That I had more or less rejected him? I hadn't thought of it as rejection at the time. More like a confession that I felt the same, but couldn't act upon it. I hadn't meant to hurt his feelings. I wanted to preserve our professional relationship.\n\nWell at least I wasn't the only one suffering. My stomach had been in knots trying to keep my distance from him and avoid eye contact. It was hard this evening especially, being forced to be in close proximity, and not let on that there was this looming tension between us. The killer was when he'd had to walk me down the aisle at the rehearsal. It was so creepy. So awkward.\n\nBut beneath my shirt, my nipples had been hard. All. Day. Long. I wanted to believe it was the breeze from the lake. But I knew it was him. He kept me on edge. In a constant state of arousal.\n\nWhat would it be like, to be with him? Would it really be so bad? Was I making too much of this? Should I just agree to...whatever it was he wanted? Should I offer myself to him?\n\nAll these questions were now taking over my mind, and I was nearing my breaking point. Perhaps Kate was right. Maybe it was time to throw in the freaking towel. There were definitely worse ways to go.\n\nI chanced a look up at him. And this time I held his gaze for a few moments. I wanted him to know. I wanted him to see how much I wanted him. How I was yearning.\n\nAnd as I fought to keep my eyes on his, I saw them turn softer. The beast was gone, and was suddenly replaced by neutrality...and then understanding. And then, sadness.\n\nHe'd always been so dominant. So...together. Even when he laughed. He always exuded confidence. The uncharacteristic look on his face was striking. It sent chills through me, and I had to look away.\n\n---\n\nWe'd just finished an amazing gourmet apple cobbler courtesy of the hotel's apparently award winning chef, and I was instantly regretting it. I had to fit into that dress tomorrow, and my belly was so full right now it was hard to be optimistic.\n\nEveryone was rising from their seats, saying their hurried goodbyes, which thankfully I didn't have to partake in. Awkwardness was already thick in the air, what with the tension between me and Curt. Who was suddenly nowhere in sight.\n\nI got up and looked this way and that, curious as to where he'd gone. I hated that I cared, that I'd noticed at all. I saw a pair of broad shoulders in a dark jacket disappear through the French doors, and immediately went after them.\n\nWhat was I doing?\n\nLet's say you do catch him Beth...what will you say? What is there to say? Weren't you the one who insisted upon this horrible truce? He's leaving you alone. Why are you chasing him?\n\nI made it through the French doors, and saw him now halfway down the hall to his room. I slowed my pace, and tried to regulate my breathing, hoping not to give myself away.\n\nSay something Beth! \n\nNo, fucking walk away Beth!\n\n\"I want to make a pact with you,\" I called to him as loudly as I dared.\n\nCurt froze in place.\n\nHis broad shoulders were so amazing. So sexy in that dark sport coat. He was so fucking sexy! His hair was so...bad boyish. His neck, back, and arms so strong and dominant. And that was just his back.\n\nI paled as he slowly turned towards me and leveled me with his stare.\n\n\"I'm not sure I care much for pacts,\" he stated plainly.\n\nI swallowed. I deserved that. He was right.\n\n\"I understand Curt. I'm sorry. But this is about Joe and Kate,\" I explained.\n\n\"Is it?\" he smirked.\n\n\"Yes,\" I lied. \"We have to promise that tomorrow will be about Joe and Kate only. We can't draw attention. If you stare at me the way you have been, if you make me feel the way you have been, if I blush and stammer and falter, we might distract from those who really matter. It is their day tomorrow, and we have to keep up appearances. We have to make a pact to keep things...normal.\"\n\n\"And how have I made you feel?\" Curt asked, zeroing in on that small but critical flaw in my improvised speech.\n\n\"You know how I feel,\" I frowned. \"You know.\"\n\nHe stepped towards me, and I don't know why, or how, but I did the same. Until we were at an arm's distance.\n\n\"I'll agree to your terms, Bethany. For Joe and Kate,\" he said firmly.\n\nI swallowed as he held out his hand. A handshake. To seal the deal.\n\nI didn't want to shake his hand. It was physical contact. I couldn't touch him at all of my own will, or God knew what would happen. But I'd asked him to make a pact, and he'd done the responsible thing. The least I could do was give him the courtesy of a handshake.\n\nShoving aside my insecurities, I slowly joined palms with him.\n\nSuddenly Curt pulled me off balance, and I gasped as I stumbled closer to him. Dangerously close.\n\nI very nearly fainted when I felt his warm lips make contact with my hand.\n\nHis soft, hot, tender lips were thorough against my skin. It was a raw, sexual interpretation of the traditional chivalrous gesture.\n\nMy jaw dropped from the shock of it, especially when he captured my gaze, his lips still affixed to my hand. It was that look. That carnal look. The beast.\n\nThe silence stretched for what felt like minutes before he finally released me.\n\n\"This is the last time Bethany,\" he warned softly. \"The last pact.\"\n\nWith that, he turned and proceeded to his room, leaving me speechless, fruitless, and hopeless as I stood there in the stuffy hallway.\n\n---\n\nThe next day...\n\n\"Beth, is anything wrong?\" Kate asked as she helped me with my hair.\n\n\"Everything's fine Kate! For goodness sake stop fussing,\" I admonished her.\n\n\"I'm just concerned sweetie,\" she explained as she fastened the flower in my hair with a pin. \"You've been so quiet.\"\n\n\"Kate, this is your day. Yours. I won't discuss anything but how breathtaking you look, and how you are going to knock Joe's socks off!\" I crossed my arms and smirked at her.\n\n\"Fine,\" she laughed. \"But when this wedding is over missy, I am going to drag it out of you if I have to string you up a tree!\"\n\n\"Deal,\" I answered noncommittally.\n\n\"Here,\" she shoved a glass into my hand. \"Have some mimosa. It'll relax you.\"\n\n\"And make me have to pee,\" I teased. But I indulged her and took a couple sips. It was pretty good, I had to admit.\n\nThe wedding coordinator had had the hotel staff bring in some crackers and fruit, along with bottled water, and apparently mimosa. They were extremely hospitable and really had the wedding routine down to a science. They'd even supplied a robe so Kate wouldn't stain her dress while she had a snack.\n\n\"Thanks for helping me find this place Beth,\" Kate mused. \"I am completely in love with the views, and the staff has been amazing. Plus the spa! That massage was so relaxing!\"\n\n\"It was nothing Kate. I love you to bits, you know that.\"\n\n\"And also...\" she paused. \"Thanks for not judging me. Joe and I, we have a different relationship than most. And what with the pregnancy and all...just, thank you for not judging me.\"\n\n\"You're in love Kate,\" I stated. \"Anybody with eyeballs can see that. Who am I to object? I wouldn't take it from you for anything in the world Kate. I love you.\"\n\nWith that, she immediately pulled me into a hug.\n\n\"Don't cry now,\" I laughed. \"That makeup artist cost bookoo bucks. Save it for the altar.\"\n\n\"And you'd better save sweet words like that for your toast!\" Kate admonished, sniffing.\n\n\"Aww jeez, I have to make a toast?\" I teased.\n\n\"Umm yeah?? Maid of honor?\" Kate slapped me on the arm.\n\n\"Maybe the wedding coordinator can cook something up for me. She seems to have everything else accounted for,\" I joked.\n\nIn truth, I had not prepared a toast. But I tended to be decent enough at speeches on the fly. Speech was the only subject in school other than art that I seemed to have any flair for. I'd just keep it simple. It didn't take much to make Kate cry.\n\n\"Okay ladies, we're just about ready!\" called Shelly the wedding coordinator.\n\n\"Here we go!\" I squeezed Kate's hand excitedly as she grinned.\n\n---\n\nOne hour later...\n\nThe wedding had gone off without a hitch, and while it was strenuous to say the least, I'd managed not to gawk at Bethany the whole time. I'd taken in a good eyeful when we were flung together to proceed down the aisle to await Joe and Kate, but after that, I'd grudgingly kept it to a minimum.\n\nWhat really caught my eye was the huge flower in her hair. It suited her. It suited her sweetness. Her innocence. Plus the pink dress looked like it had been crafted especially for her. An excellent choice. Not only did the shade compliment her sun kissed complexion, but the bodice hugged her in just the right way. The only thing I didn't like about it was that every man in the room had equal enjoyment of it.\n\nKate looked enchanting as well. Her gown was long and flowy, in a soft ivory. Not overly formal looking, but exquisite nonetheless. Her hair was down, and thankfully the lakeside breeze was moving in our favor.\n\nThe vows were brief, for which I was infinitely grateful, after which time I escorted Bethany quickly and dutifully back to the bridal suite to do whatever. I did what the coordinator told me. And as soon as I was given the all clear, I made my way over to the garden where the band was getting set up and the bartenders were standing at the ready.\n\n\"Any special requests?\" the guy at the lead mike called out to me.\n\n\"Requests? Don't you have a routine?\" I chuckled.\n\n\"More or less, but sometimes we'll switch it up it depending on the crowd, the age range, the party size, etcetera. Plus, this was practically a spur of the moment gig for us. Normally we book a few months out.\"",
        "\"Ah,\" I nodded. \"Well I guess my only request would be no Prince.\"\n\n\"Can't do Prince anyway man,\" the guy laughed. \"Just a bit beyond my range.\"\n\n\"Can I get you anything sir?\" called one of the bartenders.\n\n\"Water?\" I requested. I still hadn't gotten used to the awkwardness of asking for anything other than an alcoholic beverage. They always looked at me funny, and I couldn't blame them. Not this guy though.\n\n\"Coming right up,\" he responded professionally. No judgment, no hesitation.\n\n\"Say,\" I called back to the wedding singer dude, \"Did they request anything for the first dance?\"\n\n\"Nah,\" he shrugged. \"We usually do some Sinatra or Gershwin if they don't request anything. You got any ideas?\"\n\n\"Yep,\" I grinned. \"It will be perfect.\"\n\n---\n\n\"Good evening folks! Hope you've been havin' a good time tonight. It's time for the bride and groom to have their first dance! Joe and Kate, come on down!\"\n\nI struggled to keep from laughing as Joe turned red. He was not the 'get out there and dance' type. But this was one occasion he could not get out of.\n\nKate dragged him out on the dance floor, thankfully with little fuss. She deserved her special day, and Joe knew it.\n\n\"This song has been specially dedicated folks, enjoy,\" Freddie added, just before the guitar kicked in.\n\nJoe pulled Kate to him, and began a slow dance.\n\n\"Wise men say...only fools rush in...but I can't help...falling in love with you...\"\n\nMy suggestion for the Elvis classic was partly joking, but it was undeniably appropriate. This was one of those classic love songs that paints a fairytale picture of how we want life to be, instead of how it actually is. But the look on Joe's face, on Kate's, said that every word was spot on.\n\nJoe looked so different now. So...peaceful.\n\nI saw his hand on her lower back, his fingers cradling her and grasping her simultaneously. It was loving. Possessive. Protective. It was what I wanted with Bethany. And I wasn't allowed to look at her, let alone hold her.\n\n\"Like a river flows...surely to the sea...Darling so it goes...some things are meant to be...\"\n\nI had to hand it to Freddie. He'd knocked the spur of the moment arrangement clear out of the park. And the small but festive crowd strongly agreed. The applause was thick as Joe and Kate finished their dance.\n\n\"Now, for all of those special people out there who swore they wouldn't dance, this one's for you!\"\n\n\"I won't dance...don't ask me...I won't dance...don't ask me...\"\n\n\"You're up fucker,\" Joe whispered behind me, just before Kate pulled me out of my chair and onto the dance floor with her.\n\n\"Ahh Jesus,\" I groaned as she dragged me to the center of the crowded dance floor.\n\nOnce we were situated and moving at a leisurely pace with the song, I smiled down at her.\n\n\"So how are you babydoll? Enjoying yourself?\"\n\n\"Immensely,\" she grinned. \"Tell me, did you have anything to do with that 'dedicated' song for Joe and me?\"\n\n\"Maybe,\" I replied smugly. \"It seemed to fit the bill quite nicely.\"\n\n\"Curt, you are a romantic. It's a wonder you're not taken. Handsome, well off, thoughtful, funny...\"\n\n\"Stop it Kate, you're making me blush!\" I chuckled. \"Besides, it's bad luck to flirt with the best man after the wedding.\"\n\n\"Is it?\" Kate mused. \"I hadn't heard that one. Does that rule also apply to her maid of honor?\"\n\n\"Sadly yes,\" I played along. \"I'm quite the prude actually. So don't go trying anything.\"\n\n\"Don't worry Curt. I won't try anything,\" she grinned.\n\n\"May I cut in?\" Joe purred behind us.\n\n\"Please! Take your wife off my hands Joe. She was getting a bit too touchy feely for my delicate sensibilities anyway.\"\n\n\"Perfect,\" he smirked. \"Then you won't mind taking Beth here off mine.\"\n\nBefore I could object, he all but shoved Bethany into my embrace, and immediately spun Kate away.\n\n\"Let's fall in love...why shouldn't we fall in love...\"\n\n\"Shit,\" I muttered under my breath.\n\nJoe had definitely set this one up.\n\n\"Hi,\" Beth graced me with a word as we fell into a lazy two-step.\n\n\"Am I allowed to look at you while we dance with each other?\"\n\n\"Yes,\" she replied, irritated by my spiteful comment. \"Just act normal.\"\n\n\"Normal,\" I smirked. \"Normally I don't dance. Especially not at weddings.\"\n\n\"I've danced at more weddings than I care to count,\" Bethany sighed. \"Always a bridesmaid never a bride if you know what I mean.\"\n\n\"Well they haven't tossed the bouquet yet,\" I offered.\n\n\"I've asked Kate to skip that part, since I'm the only bridesmaid, and there are so few unmarried female guests. I want to skip that humiliating tradition just for once.\"\n\n\"Aaww, you can't skip the bouquet toss!\" I teased. \"The bride and groom had a first dance, which means that we are doing things by the book, and the bride has to toss the bouquet. Right?\"\n\n\"Well technically, we've broken with tradition since you danced with Kate right after the first dance.\"\n\n\"Not to mention the whole knocked up thing,\" I chuckled.\n\n\"Exactly,\" she smirked, but afforded me a slap on the chest for my joke at the bride's expense.\n\n\"Hey I've been meaning to ask you something,\" I whispered, pulling her closer to me.\n\n\"What's that?\" she asked, trying to pull away, but I held firm at her waist.\n\n\"Am I the only one who calls you Bethany?\"\n\nWe danced in silence for a moment before she answered me.\n\n\"Yes.\"\n\n\"Why didn't you just tell me to call you Beth, like everyone else?\"\n\n\"I don't know. I guess because I like it.\"\n\n\"You like it?\"\n\n\"Yeah,\" she blushed. \"I like it when you call me Bethany.\"\n\n\"Why do you like it?\" I pulled her close again, noticing that she'd managed to gain some distance.\n\n\"Curt please,\" she begged, pushing at my chest. \"You promised.\"\n\n\"Tell me,\" I growled.\n\n\"I don't know damn it!\" she whined, pushing at me again. When I wouldn't relent, she continued.\n\n\"I guess...I just like the way it sounds coming out of your mouth.\"\n\n\"Interesting,\" I mused before granting her a little distance.\n\n\"Ahem, may I cut in?\"\n\nA look of relief passed over Bethany's face as we were interrupted.\n\n\"Hey Mrs. M!\" I greeted Joe's mom with all the charm I could muster as Bethany slipped away faster than cash on a drunken night in Vegas.\n\n\"Curtis,\" she smirked as I took her waist, careful not to hold her too tight as we fell into a light rhythm.\n\n\"So Curtis, did that impressive erection appear before, during, or after your dance with the bride?\"\n\n\"Gina,\" I warned.\n\n\"What happened to Mrs. M?\"\n\n\"You can rest assured that I have no romantic interest in Kate,\" I declared sharply.\n\n\"Oh heavens Curt, I was teasing you! It's only too obvious how smitten you are with Beth. She's a sweet girl isn't she?\"\n\n\"What do you mean obvious?\"\n\n\"Sweetie, I've been around long enough to know a smitten man when I see one. You're crazy for her! Have you told her?\"\n\n\"She has an idea,\" I growled. \"We've agreed to keep things on a professional footing.\"\n\n\"Ha! Professional my ass,\" she laughed. \"You were practically pawing at her Curt!\"\n\n\"Shit,\" I muttered. I prayed that no one else had noticed. I'd barely been aware of it myself.\n\n\"Don't worry dear, I've an eye for these things. I doubt anyone else took notice. So, what do you think of my new daughter in law?\"\n\n\"She's a dream Gina. A dream. Joe is head over heels,\" I smiled, thankful for the change in topic. \"And she makes terrific pie!\"\n\n\"Well I always wanted the best for my boy,\" she laughed, her eyes full of joy.\n\n\"You got it. Now for the love of Christ, can I go sit down now? Please?\"\n\n\"Ugh, fine, leave an old woman alone on the dance floor,\" she pouted.\n\n\"What old woman?\" Dean cut in before winking at me, and twirling her away, much to my relief.\n\nThe night was still young, and I was ready to hole myself away in my room and drink myself stupid. Or sleep. Or both.\n\n---\n\nFour hours later...\n\n\"So old man, when are you gonna settle down already?\" Joe mused.\n\nI frowned into the fire after risking a quick glance over at Bethany. She was fast asleep with Kate in a chaise lounge on the other side of the fire pit.\n\nSwallowing, I grudgingly replied, \"I don't know Joe. I'd tell you to fuck off, but I'm past that. Maybe it's the wedding fever, maybe it's that I'm getting older. But I'm done pretending that I'm not in love with her.\"\n\n\"Then tell her,\" Joe said seriously.\n\n\"She won't go there Joe,\" I explained. \"She wants to stay focused on the project. Her career.\"\n\n\"Persuade her,\" Joe urged.\n\n\"No,\" I shook my head. \"I won't push her. I won't be the one to take away her dreams.\"\n\n\"You do love her,\" Joe smiled.\n\n\"Yeah,\" I shook my head in disbelief.\n\nThe fire crackled, and I admired the two young sleeping beauties, neither of whom could hold their liquor apparently.\n\n\"Well I'm beat,\" Joe sighed. \"Shall I take Beth to her room, or can you handle it?\"\n\nJoe knew very well what my response would be. No way in hell would any other man take care of Bethany tonight. Not even Joe.\n\n\"Good,\" he grinned when he observed the look on my face. \"Shall we?\"\n\nWe both groaned like old men as we rose from the lounge chairs to see to our women.\n\n---\n\nI felt dizzy, swaying back and forth, back and forth, bounce, bounce, bounce.\n\nI recognized the dark burgundy carpet, the outdated striped wallpaper, and the musky spicy fragrance of a man.\n\nA man had me over his shoulder, and was apparently carrying me down the hallway. Was I drunk? Had I passed out? Who the heck was carrying me?\n\n\"Helloooo, who are you please?\" I asked.\n\n\"You're awake. Good,\" came a deep husky voice.\n\nCurt.\n\n\"You can put me down now silly!\" I giggled.\n\n\"I think I'd rather get you safely into your room first Bethany. Can't be too careful.\"\n\n\"Uhhuhhh,\" I teased. \"I'm sure you have only the purest intentions! Please, I can walk, just put me down.\"\n\n\"No,\" he answered gruffly.\n\n\"Uffff, boys,\" I muttered.\n\n\"Here we are,\" he announced, thumbing through my purse, I presumed to find my key card.\n\nOnce we were through the door, he promptly carried me over to the bed and dropped me down onto it.\n\n\"Whoooaa,\" I moaned as the room went all spinny.\n\n\"Here,\" Curt reappeared with a bottle of water, or what looked like a bottle of water.\n\n\"Drink,\" he ordered.\n\n\"Why?\" I giggled.\n\n\"You need to stay hydrated, help flush out the booze.\"\n\n\"You are implying that I'm drunk,\" I frowned as I took a sip of water.\n\n\"Well you are. Glad to see you're coherent enough to get my meaning though. Get some rest Bethany.\"\n\nAs he rose from the mattress, it bounced and I had to collect myself again. Maybe I really was drunk.\n\n\"Where are you going?\" I pouted.\n\nHe would just leave me all alone?\n\n\"I'm gonna go to bed. We have a flight tomorrow, don't forget.\"\n\n\"Why don't you stay?\" I asked sweetly.\n\n\"Stay?\"\n\n\"Yeah,\" I scooted to the edge of the bed and dangled my legs all seductively. \"Stay.\"\n\n\"Why would I do that?\" he smirked, stepping closer.\n\nThe lights from the foyer were shining behind him, silhouetting his features. It was striking, and reminded me of something, but I couldn't remember what.\n\n\"You could make love to me,\" I suggested. \"Isn't that what you want?\"\n\n\"Beth...\"\n\n\"What happened to Bethany?\" I purred, rising from the bed on unsteady feet.\n\nWhere were my shoes? Had he taken off my shoes? I was glad to be rid of them anyway. My feet had hurt for hours in those damned things.\n\nI sauntered up to Curt, as gracefully as I could manage, and buried my nose in his shirt, trailing my hands along his torso in appreciation.\n\n\"Mmmm, you smell so nice Curt! What is that smell?\"\n\n\"Enough Beth. You need some time to recover.\"\n\n\"Oh come on Curt, don't you want me? I'm dressed all pretty for you!\"\n\n\"You're stunning love, but you need rest. And water.\"\n\n\"And you,\" I finished.\n\nCurt sighed and firmly grasping my arms, walked me backwards to the bed. He pulled back the covers and gently eased me under the sheets.\n\nCurt was tucking me in! Oh God how I wanted him to undress and tuck himself in with me.\n\n\"I thought you wanted me,\" I sniffed, pouting as sexy-like as I could manage.\n\nCurt paused with a frown.\n\n\"I do want you.\"\n\n\"Then why won't you just take me?\" I whined.\n\nI hated sounding like a bratty little girl, but seriously, why didn't he just take me? I was offering myself. I wanted him.\n\nCurt shook his head and turned away. \"Goodnight Bethany.\"\n\nAs he stalked towards the door to leave, I pulled the only bargaining chip I could think of.\n\n\"Would it make any difference if I told you I was a virgin?\"\n\nThe moment it escaped my lips I knew it was a mistake. What had I been thinking?\n\nCurt froze in his tracks. I saw his shoulders rise and fall with a deep breath. That jacket was so fucking sexy on him.\n\n\"No Bethany, it wouldn't.\"\n\n\"Why not?\" I taunted. \"I thought men liked virgins. Being the first to lay claim and all that.\"\n\nHe turned and approached the bed so quickly I didn't know what was happening. I barely had time to squirm before Curt was straddling me, caging me in place with his arms.\n\nOh my God...\n\n\"It makes no difference Bethany,\" Curt growled. \"Virgin or no, it makes no difference. Because when I take you, it will be on my terms. In my bed. In my own time.\"\n\nHis golden eyes glowed, bright with fiery lust, and I throbbed between my legs as I felt his body heat penetrate the covers.\n\nI swallowed as he leant in closer, and I thought for sure he was going to kiss me. I shivered when he instead touched my cheek, running his fingers through a few stray tendrils before trailing his index finger over my mouth.\n\nCurt traced along my lips, applying just the barest hint of pressure as he gazed into my eyes expectantly. What was he doing?\n\nGoing on instinct, I ever so slightly opened my lips for him. His fingertip penetrated, dipping softly and subtly past, venturing along my teeth before I granted him access beyond.\n\nI stared in wonder as his jaw dropped slightly, as though he were taken aback by my compliance. He looked mesmerized and aroused. Aflame with desire just as surely as I was.\n\nGently, he eased his index finger deeper into my mouth, exploring for a moment before I caressed the warm digit with my tongue, and sucked. It was unintentional...pure instinct.\n\nThe look on his face was one I would never forget. It was one of a man on the brink of losing control. His nostrils flared and his eyes looked wild.\n\nWithdrawing and sitting back on his haunches, Curt gripped his thighs and shook his head. He seemed in a state of conflict.\n\nReleasing a deep breath, he nodded in quiet approval.\n\n\"Goodnight Bethany. Sleep well.\"\n\nI lay there in stunned silence as he climbed off the bed and saw himself to the door.\n\nDear God, what had just happened?\n\nI replayed his words in my hazy brain.\n\n\"When I take you, it will be on my terms, in my bed, in my own time...\"\n\nWhen. When. Not if. When.\n\nAnd then his finger. My employer's finger had been in my mouth. And I hadn't objected. At all.\n\nWhat did it mean?\n\nIt meant I should never. Ever. Drink. Again.\n\n---\n\nTo be continued..."
    ],
    "authorname": "joodle",
    "tags": [
        "bdsm novella",
        "oral",
        "first time",
        "romance",
        "bdsm romance"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/dwelling-in-desire-ch-10"
}
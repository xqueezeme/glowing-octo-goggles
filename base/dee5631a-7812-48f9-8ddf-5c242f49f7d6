{
    "title": "Bent Backwards Ch. 08",
    "pages": [
        "Ch 8 Life in the Void\n\nA sharp pain shoots up my foot, as I walk down the hallway. I wince and look down.\n\nShit.\n\nI've stepped on a shard of glass. Even though it's been more than two weeks, and even though I've vacuumed so many times, I'm still finding tiny pieces of glass around my apartment. I look down at the ball of my foot.\n\nThis one's cut deep.\n\nI hobble to the bathroom, pulling the glass out carefully and running cold water over my foot. As the water runs red, I try not to think about why there are bits of broken glass all over the place. I try not to think of what happened that day. I will Common Sense to take the reins, but this time, I'm a little too slow.\n\nCall him, whispers The Dreamer, just call him to see if he's okay.\n\n \n\nCall him, says My Dick, call him and fuck him. \n\nI take a deep breath. He was incredibly clear. \"Don't call me\", he said. \"Lose my number\", he said.\n\nI haven't treated him well. I see that now. In my madness, I didn't properly consider that he wasn't privy to my little arrangement -- It's love with Liza, it's fucking with Oliver. I thought that he understood. I thought that he knew where I stood. Even though I never used words, I thought that he understood that I'm committed to Liza.\n\nI've been thoughtless and selfish. It sickens me when I think I what I've done. This isn't me. I've never treated anyone like this before. I've spent my whole life trying to do the right thing, trying to do what's expected of me. I've spent my whole life feeling like a huge, under-cover nerd. Scared of getting into trouble. Scared of doing the wrong thing. Now, I'm just scared.\n\nI feel alone and afraid. I can't believe the void that he's left. I'm in a black hole.\n\nMy chest feels tight, when I think of the look on his face, when he left. I try not to think about it. I use so much energy trying not to think about it, but I can't always help it. Nothing in my life, has ever felt worse, than the way I feel, when I think how I've hurt him. It wakes me, in a sweat, in the night. Twisting me. Wringing me out.\n\nNow, I find myself staring in the mirror. I look at my face. I look just the same, but I find myself looking at my reflection and asking, who the hell are you?\n\nHow the hell did I let everything get this out of hand?\n\nNow, after everything that happened, I have to show him a little respect.\n\nIt's not disrespectful to check if someone's alright, croons The Dreamer.\n\nMy phone's in my hand. I look at the screen. I call up his number and then spend a long time looking at that, too. I don't want to make things worse, but I want to know he's okay. I need to know he's okay.\n\nI hit dial quickly, shocked, but not surprised, at how hard this simple action makes my heart pound. It's clattering so loudly in my chest, I can't hear the dial tone.\n\nCall ended.\n\n \n\nWhat?\n\nI must have hung up by mistake, so I quickly press 'call' again. This time, I raise the phone to my ear carefully, breathing slowly out of my mouth, to try to calm myself down.\n\nI hear a single dial tone, and then nothing.\n\nCall ended.\n\n \n\nWhat the fuck?\n\nThe realization hits me slowly at first, and then all at once. I feel as though the back of my knees have been kicked in, when it dawns on me, he's blocked my number.\n\nThat same, dreadful, dark feeling from before, threatens to overcome me again. Twisting me. Knocking the breath out of me. I quickly retreat to my room and lie on my back, on the bed. I stare at the ceiling, as I beg myself to calm down.\n\nWell, I think at last, I guess he knew I'd crack eventually. Maybe he knows this side of me better than I know myself. Maybe, he always did.\n\nI'm still feeling shaky.\n\nBe grateful, says Common Sense, he's done you a favour.\n\nI don't feel grateful though. Far from it. Instead, I'm consumed by a terrible feeling. It's hot and it's dark and so uncomfortable, it's almost physically painful. It twists in my heart like a cold, steel blade.\n\nThink about Liza, I tell myself. This is what I've taken to doing, when these dreadful episodes befall me. Don't think about him, just think about Liza. \n\nI close my eyes and think about the day that I met her. It was a day to remember. I was in second year at university. I was studying in the library, sitting at a communal desk, head down, when she walked over. I noticed her immediately. Anyone with a pulse would.\n\nShe was tall, with a body that would have been hard to forget. But that wasn't the main thing about her. No, far from it. She carried herself with a certainty that was uncommon for women, or for men, for that matter. Seeing her there in that library, with the wall of books behind her, her hair pulled back in a high ponytail and her black rimmed glasses, framing her dark, intense eyes, I was captivated.\n\nI distinctly remember thinking; she looks like the queen of this whole damned place.\n\nShe took a seat opposite me, as I tried not to stare. She didn't seem to notice me at all.\n\nMaybe she has a boyfriend, I thought.\n\nIt's not that I'm arrogant. It's just that usually, girls look a little, just a quick little flick of their eyes, at the very least. Not her though. Not even a little. I couldn't concentrate worth a shit, but I stayed in my seat, stealing surreptitious glances at her, until at last, she packed up her things and got ready to leave.\n\nSay something, you idiot, I berated myself.\n\nI wanted to say something so witty and wildly intelligent, that this beautiful, terrifying creature would fall into my arms. That's a lot of pressure for anyone, especially for me, at nineteen.\n\nInstead, I kept my head down, trying not to follow her with my eyes, as she got up, pausing briefly when she got to my side. I looked up. If I had to guess, I'd say my expression probably resembled a rather pitiful mixture of shock and alarm. Without giving any hint of the gravity of its contents, she dropped a folded, yellow Post-It note on the book that was open in front of me. I looked up at her quickly and then down at the note. I'm pretty sure I didn't look very bright, at this point.\n\nI picked up the scrap of paper and unfolded it quickly, and nearly died of shock right there in the library, when I read it. There it was, scrawled plain as day, in her neat, girl-handwriting:\n\nWant to fuck?\n\nI looked around quickly, pretty sure I was being pranked. I looked up again. This time, her eyes met mine. This time, a slow smile spread across her face and something about her seemed to be saying, \"I dare you.\"\n\nYou better believe, I shoved my books in my bag and got up at double quick speed. Ready to follow wherever she was going. Ready to follow, without any question.\n\nI wasn't a virgin. Far from it, in fact. I'd been having sex for years, some of it actually pretty good, or at least, not half bad. For some reason though, I've always felt that something about that first time with her, changed me. Something about that afternoon, there in that dorm room with Liza, made me a man.\n\nAfterwards, we were getting dressed. She wasn't awkward at all. She hardly seemed aware, that she'd just rocked my world.\n\n\"I, um, can I buy you a drink sometime?\" I asked, as I got ready to leave.\n\n\"Ethan,\" she said, with a bemused little smile, \"I'm not looking for anything serious.\" As if, a drink was some kind of commitment.\n\nIt continued that way for the rest of our varsity days. Every once in a blue moon, when I least expected it, I'd hear from her. It was always the same. It was amazing, but before I left, my offer of a drink, dinner or a movie, was always abruptly declined.\n\nAfter graduating, I lost track of her for a while. Best I could tell from her very sporadic up-dates on social media, she seemed to be travelling around south east Asia, alone.\n\nI'd just come out of an almost-serious relationship, when I saw her name in my mailbox. I wasn't as hung up on her as I had once been, but still, my heart skipped a beat when I clicked on the message and read:\n\nI'm thirsty...I could do with a drink\n\nSo, we finally got to have that drink. Turns out, Liza was right. Right from the start, before I even took her home that night, we were serious. Almost overnight, we became Ethan-and-Liza.\n\nIt was easy, falling for her. We're such similar people. Both strong and ambitious. Both independent and fiercely competitive, but not with each other. In fact, no-one has ever had my back harder. We never fight. We don't need to. We want the same things and we see life the same way. Right from the start, we talked about a future together.\n\n\"Marriage?\" she asked, not long after we started dating.\n\n\"Definitely.\" I said, \"Kids?\"\n\n\"Two,\" she smiled, \"a boy and a girl.\"\n\nI nodded in agreement, though, in truth, when I think of the future with Liza, I've always seen the two of us, and two, wild little boys.\n\nThis is what you want, I tell myself again, as I feel myself gradually coming back to my center, it's what you've always wanted. A wife and children. This is what everyone wants. Everyone. All three of my brothers are married. Jake and Tommy, already have kids. \n\n \n\nThis is what everyone does.\n\n \n\n*\n\n\"It feels like it's been a while since you saw Oliver.\" Says Liza, a few weeks later, as she gets ready for work.\n\nMy heart lurches and I'm lost for a second, I feel a sharp pain in my chest, as I scramble to think of a response that won't invite further explanation.\n\nA big part of me longs to tell her everything. I don't know if I can keep living with this. Every time I turn to the internet for advice, I read, \"The only reason to tell someone about cheating after an affair has ended, is to alleviate your own guilt.\" I don't want to do that. I deserve my guilt. I know I failed Oliver. Now, I desperately, desperately want to do the right thing by Liza. I have to. I have to do that, at least.\n\n\"Uh, no,\" I lie, \"I saw him last week. We went out for drinks. He got a promotion at work.\"\n\nAt least the last part's true, though the only reason I know about it, is because of an up-date Kip put on Facebook.\n\nSince meeting Oliver, I've told Liza so many lies and I've hated each one. It doesn't come naturally to me and every time I do it, it feels like it costs me something. Something big. Something I miss. Something I can't get back. For some reason, something about this lie feels even worse than usual. This one, seems to stick in my throat, burning, leaving my mouth tasting like bile.\n\nI pull my laces tight and head out for my run. Pounding the pavement, seems to clear my head and though it hasn't worked yet, I'm sure at some point, I'll run far enough, hard enough, that sleep will finally remember my name. I'm running so much that Liza seems under the impression I'm training for a marathon. Maybe, I am.\n\nEvery day, I run. I run till it hurts. Till my lungs burn. Every day, I consider running past Oliver's house. Just to see if he's home. Just to see if he looks okay.\n\nJust to be clear, says Common Sense firmly, stalking is a big no-no.\n\n \n\nOooh, says The Dreamer, sounding a little defensive, 'stalking' is a bit strong, wouldn't this just be observing intently?\n\n \n\nStalk him, pulses My Dick, stalk him and fuck him and fuck him.\n\nEvery day, I keep it together. Every day, I stay far, far away from his place. I don't go anywhere near him. He asked me not to.\n\nInstead, I run one of the routes, we used to run together. I run further and further. I try not to think it, but I can't help it, I remember running with him. Running behind him, watching him move. Overtaking him, letting him watch me. It never took long, before he'd have to adjust himself a little.\n\n\"What's wrong?\" I used to tease, \"You got a dick problem?\"\n\nHe'd roll his eyes, trying hard not to smile, \"Yeah,\" he'd say with a chuckle, \"I've got a dick problem.\"\n\nI'd run ahead, making him chase me, till we got to the alley. I knew this place. It was always deserted. I ducked into it, whispering, \"Psst,\" when he got close.\n\nI remember the look on his face, that first time, when he realized my intention. His eyes wide and his brows raised, as if to say, \"Seriously?\"\n\n\"Uh, huh.\" I nodded.\n\nHe started laughing. His laugh was so sexy. That husky, machine gun cackle, was nothing short of infectious. His eyes creased so much when he did it, they almost looked as if they were closed.\n\nWe took cover behind the industrial bins, wasting no time, as we both reached into the other one's shorts. Each finding the other hard and in need. Stroking quickly, looking around now and again, to make sure no-one would catch us.\n\nHe laughed the whole time.\n\nHe laughed almost the whole time.\n\n*\n\nI can't sleep. \n\n \n\n \n\n \n\n \n\nI can't sleep.\n\n \n\n \n\n \n\n \n\n \n\nI can't sleep.\n\nI feel like I'm walking through water. Deep water. My movements are sluggish. Everything's black. It's dark. It's the middle of the night. Lately, it always is. The song is still stuck in my head. Over and over, I hear it, even though I won't let myself sing it, or play it.\n\nWhy am I still feeling like this?\n\nI made my choice. The thing with Oliver is over. It imploded. It ended badly. Like I knew it would. Worse. It ended, way worse than I thought that it would.\n\nI've done the right thing. I should be feeling better by now.\n\nWhy am I not feeling better? Why can't I stop thinking about him? Why won't this madness end? Obviously, Liza is the right choice. Marriage and children. That's what the future holds for me. That's always been the plan. It's what everyone wants.\n\nI pace up and down for a while, before heading to the spare room. Liza's moving in in less than a month. I've been going through things, clearing out, making space for her. I haven't tackled the spare room yet. The truth is, I've hardly been in there, since he left. I haven't been able to bear it.\n\nI open the door and flick on the light. It's too bright. My eyes take a second to adjust.\n\nIt's just a room, I tell myself.\n\nIt's just a room, agrees Common Sense, but if Liza finds what's in here, it's going to be a total shit show. \n\n \n\nI try not to look at the weight bench, or to think of what we did to each other on it. Instead, I open the closet and stare hard at the old toolbox, I've shoved all the way to the back. I pull it out, at last. This is where I hid the toys, the cuffs and God knows what else. One thing is certain, all of it, is deeply incriminating. My face burns with shame.\n\nGet rid of it, says Common Sense. Get rid of it all.\n\n \n\nHang on a sec, says My Dick, twitching a little, keep the fleshlight, at least. \n\nI am going to get rid of it. Obviously, I will. I'm going to get rid of it all. I don't want any of it here. I'm going to get rid of it, soon.\n\nJust not tonight. \n\nNo, tonight, I let myself slide down the wall and onto the floor, pulling the green army jacket he once wore, down from the rail in the closet, dragging it over my face.\n\nDon't be such an idiot, I think, as I breathe in. His smell is gone. Long gone.\n\nThat doesn't stop me though. I think of the way he looked in my jacket, the collar turned up at his neck, as I breathe in again. I think of the way he smiled, as he shrugged it on. He looked so happy. I think of the way he looked, when I took it off.\n\nOh God. \n\nThink of something else, I tell myself quickly.\n\nIt doesn't help. I land on something way worse, something I'm too tired and too horny, to stop.\n\nI remember him here. Standing there, right in the middle of the room. I remember the way I tackled him to the ground. My arms around his waist, lifting him off his feet, both of us landing in a heap on the gym mat. Him kicking and bucking, giggling like crazy. Squirming, until I pinned him down. I remember the way he looked up at me. Not laughing now.\n\n\"Top or bottom?\" I asked.\n\n\"Hmm,\" he said thoughtfully, raising his chin slightly, \"how about both?\"\n\n\"Both?\"\n\nHe nodded slowly, his eyes glinting mischievously.\n\nHe's greedy, but I like how he thinks. \n\n \n\nHe thinks like I think.\n\n \n\nI fetched the condoms and lube from my bedroom, he got a few toys out and was already almost undressed by the time I got back. His shirt was off and he was on his back on the mat, lifting his hips as he pulled off his jeans. I stood still for a moment, watching his abs clench, as he eased his jeans down.\n\nI tossed a handful of condoms on the floor next to him, making him raise his eyebrows, when he saw how many I'd brought.\n\n\"Jesus.\" He smiled.\n\nI took off my clothes quickly, stepping on the legs of my jeans, hopping a little as I pulled my feet free. I knelt down beside him, right near his head, facing his feet, lifting one leg over him, giving him full access to everything he needed.\n\nI licked his shaft slowly, long, broad strokes, as I cupped his balls, weighing them, stroking them, until they tightened and drew themselves up to his body. He worked a toy into me, in and out, over and over, until I relaxed. I did the same to him, but I used my fingers. Both of us were moaning. Moaning softly. Moaning just enough, to show we were ready.\n\nI moved down, positioning myself between his legs, holding his knees and spreading them open widely. He looked up at me lazily, eyes tracking me slowly.\n\nIt didn't occur to me then, but somewhere along the line, he stopped minding me seeing him like this. Really seeing him. I see that now. I shouldn't have missed it. I should have been paying closer attention, but things being what they were, I never could see straight, when I was with him.\n\nI took his dick in my hand, stroking him firmly, as I entered him. Right away, he was rolling his hips, arching and bucking. He was open, letting me in. Every thrust felt like heaven. Pure heaven. His tight ring pressing and clasping my dick, as the toy in my ass put pressure on just the right place.\n\n\"Oh God, it feels good.\" He said, or maybe, that was me.\n\nHe was thrashing now, head back, hands clawing the mat. Breathing hard, open-mouthed and loud. I was still inside him, when he reached for a condom, sheathing himself quickly, letting me know what he wanted. I eased the toy out, with a small grunt, and then straddled him, sinking down, taking him all. He filled me completely.\n\nIt didn't take long. Rocking my hips back and forth on him, quickly drove me insane. Made me come undone. I came undone completely. I came and I came, shooting a shocking sized load on his chest and all over the mat.\n\nAfterwards, when he was done too, he looked around and said sheepishly, \"I think we're going to have to hose the whole mat down.\"\n\nWe lay on our backs for a while, smiling and sighing, taking a minute to recover. He got up first, pulling himself up to a sitting position.\n\n\"Hey,\" he said softly, rubbing his fingers over my knee, \"you better be careful, you've got a rug burn. I hope Liza won't see it.\"\n\nHe eyed me quizzically, as if he'd just asked a question. He hadn't, but if he had, I knew what it would be; \"Do you and Liza still do it?\"\n\nOf course, we still do it. \n\n \n\nOf course, we do.\n\nJust, not like we used to. Not like before. When I think of it now, it hasn't been like that between Liza and me, for a very, very long time. Long before Oliver, even.",
        " \n\n*\n\nI'm so tired.\n\nI can hardly stay on my feet. I feel unsteady.\n\n \n\nIt's Friday night. I'm home, and Liza has just popped in to pick up a pair of shoes she needs for a work function this evening. She's on the phone to a colleague. She doesn't sound pleased. I don't need to hear his side of the conversation to know, he's failed her in some way and, boy, has he been put in his place. Her voice is calm and professional, as it always is. Still, I can tell just by looking at her, he's just had his weekend comprehensively ruined.\n\nI see her there, standing at the dining table, and, as she hangs up the phone, I'm struck at once by a visceral contrast.\n\nLiza's body is curvy and supple. Soft. Soft in all the right places. But, inside, there's a hardness about her. It's always been there. It's part of her strength. It's in the way her lips rest, the way her jaw sets, when she's not talking. It's in the way her eyes hit their target. Decisive. Always, right in the center. Bullseye. She knows who she is.\n\nOliver's different. His body is hard. Strong. Muscle and sinew. Rock solid bone. But inside, there's a softness about him. Even when he's sadistic, something about him is gentle. His smile is tender and sometimes uncertain. He's wasn't scared to show me his flaws. He wasn't scared to show me the places he's weak. He's the only person who's ever made me feel safe. He knows who he is.\n\nHe knows who I am, too.\n\nThere was something about him that reminded me of a soft place. A soft place to land. He was my soft place to land.\n\nOh God, I think when I finally, finally, let it hit me, I miss my soft boy. I miss him so much. \n\nThe pain that engulfs me, threatens to flatten me. Rolling into me like thunder. Hitting me square in the chest. Leaving me physically reeling. I steady myself on the counter, trying not to clutch my chest, as my heart aches. My breath coming in great, awful, uneven gasps.\n\n\"Ethan,\" says Liza, \"what's wrong? You look awful.\" She walks over to check on me. \"Are you okay?\"\n\nI close my eyes quickly, so she can't see what's inside them, but I can't lie. \"No.\"\n\nShe makes me sit down and brings me a glass of water, placing her hand on my shoulder.\n\n\"Can you tell me what's wrong?\" she asks.\n\nI try to steady my voice. \"I, I don't know how to explain it.\" I say at last. It's as close to the truth as I can manage.\n\nShe's quiet for a while, and when she speaks, she speaks quietly. \"Ethan, I think you're depressed. You're not sleeping well and you've been stressed and low for a long time. I think you should see the doctor. I can make an appointment for you.\"\n\nI know her well enough, to know she means business. Truthfully, I'm pretty sure she's right. I'm not okay. I'm far from okay. I don't think I've ever been further from okay. Far from helping, time is making things worse. So, I just nod.\n\n\"Do you want me to cancel my plans for tonight?\" She says, wrapping her arms around me.\n\n\"It's alright, I'll be okay.\"\n\n\"I can come over afterwards, but it will late.\"\n\n\"No,\" I say, \"I'm exhausted. I want to try to get an early night.\"\n\nA little while later, after she's gone, I get a message from her.\n\nEverything's going to be fine, you'll see. I love you.\n\nI type a message back. Quickly. Almost reflexively. The same message I've sent her so many times before. A message, I've always meant. A message, I've never questioned once.\n\nI love you too, Li\n\n \n\nOnce I've pressed send, I look down at the message I just sent. I read it again. I read it over and over.\n\nI love you too, Li\n\n \n\nLi\n\n \n\nLie\n\n \n\nLying\n\n \n\nLiar\n\n \n\nLiar, liar,\n\n \n\nPants on fire.\n\n*\n\nThat night, I fall asleep quickly, but my body jerks me awake before very long. I'm dazed and confused, heart pounding. I look around me and yet again, I feel the walls all around me closing in.\n\nWhy won't this stop? I think in desperation.\n\n \n\nI've done what's expected of me. I made the right choice. \n\n \n\nYou made the safe choice, accuses The Dreamer.\n\nMy heart drops. I feel like I've been punched. Every drop of air feels like it has been sucked out of my lungs, as the realization hits me.\n\nI made the safe choice.\n\nFor the first time, lying there in the dark, I let myself think. I let myself feel. I feel everything, all at once. I think about how I love Liza. I love her a lot. She's my best friend. I think about how I've always told myself that was enough.\n\nI think about Oliver, and it breaks me open. For the first time, I think about him, without stopping myself. I think about how I used to feel when I was with him. I think about how we used to laugh together. We laughed until I felt like I couldn't breathe. I think about the times we sat next to each other on the sofa, not touching. Just sitting close. Completely content. I think about the moments right after we were done, when we were spent, when my defenses were down. Those few minutes, when I forgot I was supposed to fight it. I think about how it felt when we collapsed into each other's arms. I think about how for those few seconds, time seemed to stop. Those brief moments of stolen time made me feel like I'd come home.\n\nI think about the neat, little box I tried to put him in.\n\nHow stupid of me.\n\nOliver doesn't have hard edges and sharp corners. He's not made up of straight lines. He can't be contained.\n\nThe truth circles me slowly.\n\nMaybe, I'm not made up of straight lines, and maybe, I can't be contained, either.\n\nNow, for the first time, lying there in the dark, I let myself wonder -- what if, the wall I've built around my heart isn't a white picket fence? What if, those are steel bars? What if, instead of building the life I've always wanted, I've built a cage for myself? What if, instead of choosing the right thing, I've chosen a prison.\n\nI toss and turn all night. Hot. Sweating. Feeling feverish, until at last, in the early hours of the morning, I make a decision.\n\nTomorrow, I think, tomorrow. I have to see Oliver. \n\n \n\nThe thought of seeing him, leaves me so petrified, I feel hot and cold at the same time. A terrible fear grips me. One that's been trying to break through my subconscious for a while.\n\nWhat if it's too late? \n\n \n\nIt's been weeks and weeks since I saw him. Two months, and a few days.\n\n \n\nWhat if I'm too late?\n\n \n\nAs I lie in my bed, I'm doubled over. The pain that consumes me is so pure and intense that I can't breathe. My heart pounds viciously, as if its sole purpose is to try to escape my body. My throat aches with longing and with regret.\n\nI know in my heart; two things are true. Firstly, I have to end things with Liza. I can't marry her. I can't do that to her. No matter what, I can't do that to her. Secondly, I have to see Oliver. Even though nothing has ever terrified me more, I have to see him. Even if it's too late for him and me, I still have to see him. I have to. Even if it's too late, I have to face him. I have to look him in the eye and tell him I'm sorry. I have to tell him he wasn't crazy.\n\nEven if it's too late, he needs to know, I felt it, too.\n\n*\n\n \n\n \n\n \n\n \n"
    ],
    "authorname": "herdirtymind",
    "tags": [
        "anal",
        "gay romance",
        "oral"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/bent-backwards-ch-08"
}
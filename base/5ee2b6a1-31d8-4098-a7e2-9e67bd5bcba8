{
    "title": "Taken by the Viking Ch. 11",
    "pages": [
        "Trish followed her morning routine like the good girl that she was, her expression thoughtful and compliant. He wondered if she realized how automatic it had become for her. She never fought him anymore on how he wanted to dress her or putting in her plug. In fact, if he paused or took his time with part of the routine, she patiently waited for him to get back on schedule. Whenever they had to deviate from it, she became antsy and restless. \n\nToday he dressed her in light a light pink dress and then... they had to deviate from the schedule. He wasn't able to take his time brushing out her hair before braiding it, something that he normally took the most time with, and of course she noticed immediately.\n\n\"What's going on?\" she asked, her eyes big and wary as the led her from the room, holding her hand. \n\nHe smiled down at her. If he'd had his way, they'd still be back in the room, where he could take his time with her hair and then maybe fuck her again. \"Sorry, little girl. We've got things to do today.\"\n\nHe had a bet to win. \n\nBreakfast went by without too much trouble, other than Trish barely picking at her food until someone pointed out she wasn't eating. As soon as he frowned at her, she started to. The change in routine had rattled her, but it was necessary. It really was going to be a busy day. After breakfast, he picked up the food for Pet and Toy before heading out into the hall, and his com-unit rang. \n\nAs planned. Which was why he'd made sure to keep Trish moving this morning. He'd wanted to ensure she didn't miss any of her meal. \n\n\"Yes.\"\n\nThe Wolf's voice sounded tinny in the ear piece, but it ensured Trish wouldn't be able to hear any of the conversation.\n\n\"We're going to be leaving soon. Are you ready to show your girl the passageways?\"\n\n\"Yes.\"\n\n\"Not going to change your mind on the bet?\"\n\nHis lips almost curved. \"No.\"\n\nNot when his baby girl's hand tucked trustingly in his, her fingers had clung to his as he'd lifted his hand to answer the com-unit, not wanting to let go. She didn't even try to pull her hand away anymore, blatantly or sneakily. The change in her behavior had been slow enough, subtle enough, that he didn't always even notice the new ways in which she'd surrendered until he went over each day's events in his mind. \n\n\"Alright then. Do it.\"\n\n\"Yes Sir.\"\n\nReclaiming Trish's hand, Jordan turned, taking them off route. Which he knew would bother her. Another step outside the routine. \n\n\"Where are we going?\" she asked, her voice a little higher than usual. More anxious. His cock stirred, but he pushed his appreciation away. Time for that later.\n\n\"You're going to see a secret, little girl.\"\n\nHe turned into a small hallway where one of the tunnels was. They were all marked by the Wolf's sigil, but not all sigils were tunnels. The sigil was simple, it looked a bit like an S with a horizontal line through the top curve. The Wolf had chosen as a nod to his old name - Scott Thorne. Since Jordan had an entrance to the tunnels in his rooms, as did the Wolf, Trish, Bella, and Alex would all have ample opportunity to attempt escape. Jordan thought the Wolf's plan was complex, but the Moon made it necessary. Simply releasing captives with the information didn't do any good because the Moon officials were erasing their memories of the information. So the Wolf wanted to counter that. But first, they needed to test out the new serum and see if they could break its hold. \n\nThe Wolf also thought the individual in question might have something to do with it. The usual captives he took tended to be a bit weak-minded. Obsessed with themselves and even interested in the Wolf. Slave had nearly creamed herself when she realized she'd been 'chosen.' Pet and Toy were completely different. Jordan and Zaida had originally been aiming to take Alex and Lisa - the Wolf had no interest in Ken and therefore they'd had no interest in Bella - but circumstances had allowed for a much more interesting pairing. Jordan was glad. He'd thought Lisa was another weak link; Bella was the better choice.\n\nSo. Now for the test.\n\nFacing the sigil on the wall, Jordan pressed his fingers across the shape quickly. The right end of the bar, the left end, the bottom curve, the top curve, and then on each place where the S intersected the horizontal bar, going left to right. The wall sank inwards and slid silently to the side. Trish's reaction was adorable. Her jaw dropped and her eyes went so wide they practically bugged, and he couldn't help but chuckle at her. \n\nTaking her hand, he pulled her into the passageway alongside him. He could practically hear her brain already working. She was smart. She'd already realized that the sigil was present in his rooms as well, and the implications of that. \n\n\"Are all of them like that?\" she asked.\n\n\"No,\" he answered with a casualness he didn't quite feel. Despite his bet with the Wolf, there was a small tightening in his stomach now that he'd revealed one of the secrets within the compound. Would she try to use it to leave him? He'd felt sure the answer was no when it was just a hypothetical. Not that he would allow her to leave him. But... he wanted her to choose to stay. He didn't like that thought though. He'd never understood before why the Wolf had insisted on a formal choice being declared when it was obvious the couples in the compound were fine with their arrangements. Finally understanding why Marek had asked Laura for a formal choice made him feel... vulnerable. Jordan brushed it away, clamping down on his emotions as he lengthened his stride, trying not to feel like he was running from something. \"All the passageways are behind symbols, but not all the symbols have passageways. They're not commonly known, although everyone knows they're there. You could get lost in them if you don't know where you're going.\"\n\nAs if to emphasize his point, they had already reached an intersection that branched off into four other passageways; five including the one they had just come from. Jordan had them memorized, but for someone who didn't have a map, they could be quite confusing. On the other hand, with a good enough sense of direction, it wouldn't be too terribly hard to figure out some kind of pathway to the outside. \n\n\"But what are we doing in here?\" \n\n\"There was a... disturbance on our usual route,\" he lied, hoping that was the end of her questions. He didn't like the way her questions made him feel. Like she was looking for an escape. \n\nShe hadn't been actively doing so since the first few days after he'd taken her and he'd liked it that way.\n\n******\n\nPassageways. That went all over the compound. \n\nIf she'd known about this, she could have escaped days ago!\n\nThe elation she'd expected to fill her chest was strangely... flat. Small. In fact, it didn't feel like elation at all. Just confusion. Confliction. \n\nPlain old idiocy.\n\nShe should be happy about this. \n\nAnd she could share it with Bella and Alex. \n\nTrish glanced over at where Jordan was standing, talking with a small group of soldiers. Their time outside had already been interrupted several times. That wasn't entirely unusual, but it did seem like there were more than usual and, definitely unusual, Jordan didn't always talk to them with Trish there. He kept stepping away.\n\nShe knew that the Wolf and Cora were doing whatever mission they'd been planning today. That much was obvious. Which was probably why Jordan had less time and had needed to take a detour this morning. Because he was left in charge. And that was why he kept getting up and abandoning her too.\n\nNo, not abandoning. \n\nBecause she didn't feel abandoned. She was just fine being on her own. She'd been on her own for almost her entire life before coming here. Just because Jordan usually made sure to leave her with company didn't mean she felt abandoned or lonely or anything now.\n\nShe was just off kilter. Her emotions still upset and roiled by being part of a near-orgy with someone she considered a friend. That was all. She just hadn't wanted to admit it because... because...\n\nBecause she hadn't wanted to admit how much she liked it.\n\nJust like she didn't want to admit that she felt lonely and a little abandoned by Jordan.\n\nTrish locked her traitorous thoughts away, turning towards what she knew she should be doing with her newfound information. Her Stockholm's Syndrome could wait.\n\n\"Bella,\" she whispered loudly, trying to focus her voice to where Bella was sitting by the side of the pool, watching Alex pounding his way through the water as he often did. \"Hey Bella...\"\n\n******\n\nAfter telling Bella about the passageways, Trish was a bundle of nerves for the rest of the afternoon, but Jordan didn't seem to have noticed her conversation with Bella. He acted completely normally. Held her on his lap through meals, kept hold of her hand whenever they were walking somewhere... and when he had to run and do something with Trace, he left her with Chevie and Trix. She was relieved not to be left with Marek and Laura. \n\nWaving to Laura from a distance and acting like everything was okay was one thing, actually interacting with her? And Marek? Trish wasn't sure if she was ready for that yet.\n\nShe actually felt a little grateful to Jordan for leaving her with Chevie and Trix, even though she wasn't sure he was doing it to be considerate or if they were just available and convenient. Part of her wanted to think the latter, but another part of her reluctantly acknowledged just how tune with her desires - not just the sexual ones - Jordan often was. She could absolutely believe he'd purposefully left her with the people she was the next most comfortable with who weren't Marek and Laura, because the next time she saw the couple he'd want to be there to support her.\n\nWhich was a weird thing to think about a kidnapper rapist, but... Jordan wasn't exactly the normal kidnapper rapist, if there even was such a thing. \n\nObviously the Earth citizens didn't have the same mentality about kidnapping or rape that the Moon did. Not that she really thought the Moon was a more moral place; they were just better about hiding their sins under shiny, glamorous disguises rather than leaving them out in the open, uncaring who saw.\n\nWhen he came back and took her to dinner, he was just as normal as before. His hand caressed her bottom while they were eating, making her skin tingle, as if in anticipation of the spanking she knew she'd get if he knew she'd shared information with Bella. It made her more fidgety than normal as the anxiously awaited for some sign that he knew what she'd done... \n\nBut none came.\n\nAfter dinner he took her back to his room almost immediately.\n\n\"I missed you today,\" he murmured, leading her over to the bed. \n\nTrish didn't respond, even as a stupid trickle of warmth wound its way around her chest at his unexpected statement. She just looked up at him, tilting her head to the side, wishing her body wasn't already heating and preparing itself for him. There was no denying her reaction, but she could still wish she didn't have it at all.\n\n\"Come here.\" He didn't need to say the words, as he pulled her between his thighs while he sat on the edge of the bed, but the order made her shiver anyway. Jordan pulled her in for a kiss, his lips and tongue demanding her participation as his hands slid under the pink skirt of her dress and squeezed her ass. Trish stiffened for a moment before softening into his grip, her hands on his shoulders as he groped her, his fingers caressing and teasing her sensitive places. The plug in her ass jiggled as his fingers brushed over it, jostling it slightly and awakening the nerve endings there. \"Good girl.\"\n\nHis lips slid down her neck as he pulled her forward so that she was no longer standing but was straddling his lap on the bed. Trish's head fell back, giving him greater access to her throat as his hands kneaded her buttocks.\n\nShe wasn't participating... but she wasn't fighting either. There was pleasure in passivity. Peacefulness in submission. She didn't want to think; she just wanted to feel.\n\nThe com on Jordan's belt chimed and she felt him stiffen with agitation beneath her. She pushed away her own wave of disappointment, feeling strangely vulnerable as he clicked the button on the earpiece he was wearing. \n\n\"Yes...\" His eyes cut to her, blanking out, shutting down the desire that had been flaring in them. \"I'll be right there.\"\n\nShe was not disappointed... she was definitely not disappointed. \n\nIt was just an inevitable byproduct of being aroused and being left hanging. Her body was disappointed. That didn't mean that she, as a person, was disappointed.\n\n\"Stay here, baby girl. Don't touch yourself. You don't have to stay up if I take too long,\" he said, picking her up off his lap and setting her down on the bed beside him. \n\nLeaning down, he kissed her, hard and thoroughly, making her pulse race. Trish didn't respond, she was too busy trying to control her wayward emotions and wound up libido. It was all his fault that she'd gotten used to having her desires taken care of immediately. Now she was all wound up and... yeah, she was definitely not going to masturbate. Not because he'd told her not to, but because that would be admitting that she wanted to. \n\nShe wasn't that lost yet.\n\nLetting out a long sigh, Trish flopped back onto the bed, trying to ignore the way her nipples tingled and her pussy pulsed between her legs. \n\nShe was NOT looking forward to him returning and taking care of that. She definitely wasn't. Not even a little.\n\nStupid body.\n\n******\n\nEntering the security room, which was only about a minute's walk from his room and two minutes away from the Wolf's sleeping quarters, Jordan's gaze immediately went to the cameras.\n\n\"Report.\"\n\n\"Nothing so far,\" Bruno said, pointing at the two relevant cameras. \"Well, Pet and Toy have been getting it on again, but that's nothing new.\"\n\nJordan sat down in the chair next to the other man, much more interested in the other camera, which showed Trish flat on her back on the bed, her legs hanging off of it at the knee. Her face was all scrunched up and her lips moved like she was arguing with herself. That or she was speaking so quietly the audio couldn't pick it up.\n\n\"I bet Lenore that Toy is going to be the stupid one,\" Bruno said. Used to the other man's need for conversation, Jordan just listened with half an ear as he watched the two monitors. \n\nEventually, Bella caught his attention as she started calling for food, saying she was hungry. Per the Wolf's orders, her request was ignored. Jordan doubted she was all that hungry anyway; she wasn't very good at hiding her feelings and she looked more determined than anything else. \n\n\"What do you think?\" Bruce muttered. \"Worried about us doing exactly what we're doing?\"\n\n\"Possibly,\" Jordan said. The answer was probably yes, but he wasn't always good and predicting how others thought. He almost cracked a smile as she waved her arms around, but his attention was immediately taken by Trish, who had just gotten up from her spot on the bed and was now pacing around the room, studying the sigils on the walls.\n\n\"Oh ho...\" Bruno said with a slight air of excitement. \"It's a race!\"\n\nAs Bella waved her arms and requested food again, Trish walked up to one of the sigils and stroked it. Unlike the Wolf's sleeping chambers, every sigil in Jordan's room was the entrance to a passageway, allowing him short cuts all throughout the compound. With Trish's back to the camera, he couldn't see her expression, and he found his muscles tensing.\n\nHe didn't like this. He didn't like this at all. \n\nBella was now pacing around the room while Alex continued sleeping in the bed. They'd exchanged a few words, but now she was restless and he was still out of it. On the other screen, Trish began to press her fingers to the sigil.\n\n******\n\nShe almost shrieked when the wall recessed and opened, leaving her staring into a passageway that looked just like the one she'd gone through earlier with Jordan. An exit - a possible exit, anyway - right in his room. \n\nKeeping her feet firmly planted in his room - as if there was some kind of invisible line on the floor - Trish gripped the side of the opening and leaned forward to look right and left down the passageways Three possible directions to go in. But no way of knowing where any of them went.\n\nSwallowing hard, Trish straightened and stepped back. After a moment, the wall slid shut again.\n\nShould she go through it? Explore? \n\nShe looked around the room, her heart pounding... \n\nFrom the moment she'd opened the passageway she'd expected someone to grab her. It couldn't possibly be this easy.\n\nCould it? \n\nJordan knew she knew about the passageways, yet he'd left here all alone. Because he trusted her not to leave? Because he thought she was too scared to leave? Or because she was being watched?\n\nOf course, if she was being watched, wouldn't someone have come to stop her by now? \n\nThink... don't be stupid, think. What would Bella do?\n\nTrish didn't mind admitting that she admired Bella. She didn't know if she could handle what the Wolf did to Alex and Bella and she was always surprised by how well Bella seemed to handle everything the Wolf threw at her. Even Alex didn't always handle things as well as Bella. He fought, but there were times when he seemed close to breaking. Bella bent... she went with the flow... and she didn't break down the way Trish did, and she didn't seem like she'd given up either. She didn't seem to be messed up in the head like Trish either.\n\nSo. Trish had told Bella about the passageways. Would Bella just go running down one, without knowing where she was going? No... of course not. That would be stupid. It would be far too easy to become lost. Plus, there was no way of knowing who else was in the passageways, and there weren't any hiding spaces.\n\nBella would wait. She wouldn't risk everything right away.\n\nThe door slid open behind Trish and she jumped, spinning around guiltily as she realized she was standing in front of the passage entrance. It didn't matter that it was closed, surely it was obvious what she'd been thinking about.\n\nStepping through the door, Jordan lifted his eyebrow at her and Trish felt her mouth go dry with fear, even as her nipples hardened and her pussy clenched. Fear made sense... her other reaction... well it only made sense because of how accustomed she'd become to being Jordan's sexual play thing. Her body was excited because it thought its orgasm was coming.\n\nShaking his head, Jordan made a tsking noise. \"You're been a naughty little girl.\"\n\n\"No I haven't,\" she said, her voice squeaking on the lie. \n\n\"Oh yes, you have. You told Bella about the passageways, didn't you?\" He stalked forward; imposing and completely in command, his voice silky and heavy with sexual intent.\n\nTrish shook her head, unable to speak, as she backed away from him, right up against the wall under the sigil. It felt like her heart was going to pound right out of her chest and she wasn't sure if it was with fear or excitement. She wanted to say only fear, but fear wouldn't make her nipples pebble or her pussy pulse. And, she realized, she couldn't really say she was actually afraid of Jordan either.\n\nHe might spank her. He might punish her in a sexual manner. His punishment might hurt, but she absolutely believed he would not harm her. \n\n\"Naughty girls are punished, baby girl.\"\n\nA little whimpering sound escaped her throat, but there was no mistaking the way her pussy clenched at his words. His words might sound like a threat, but her body interpreted it very differently than she would have weeks ago. \n\nHe halted, only a couple feet away from her, when his com unit chimed. Again, Trish felt that same whirl of relief and disappointment that she had earlier.",
        "\"Yes?\" he asked, his voice full of impatience, his hand at his ear. Although his eyes had averted when the com unit first chimed, his gaze came back to her almost immediately, his eyes narrowing slightly and Trish felt her mouth go dry. \"Which direction? I'll be right there. Send the Vaughn and Taylor.\" Another press of the button and his hand dropped away from his ear piece. \"So, you didn't tell Bella, little girl? I'm going to prove you wrong right now.\"\n\n\"I... I...\"\n\nIgnoring her, Jordan took a small ball gag out of his pocket, stepped forward and placed it at her lips. \"Open up, baby girl.\"\n\nShe opened her mouth to protest, but he just popped the gag between her lips and took no time at all in fastening it about her head. The rubbery taste filled her mouth and she scrunched up her nose in distaste. Ignoring her expression, Jordan took her hand in his and pulled her away from the wall so he could press his fingers against the sigil. Trish's heart started pounding again, her palms going damp.\n\nHe knew. He knew she'd opened the door... he had to... \n\nPanic skittered, but there was nothing she could do, especially while he was still holding onto her. \n\nWith quick, decisive steps, Jordan pulled her into the passageway, making her half-run to keep up with him. Fortunately they didn't have very far to go. At the first intersection Vaughn and Taylor joined them. Vaughn raised his eyebrows when he saw the gag in Trish's mouth, making her blush, but he didn't say anything. She ducked her head, staring at the ground, thankful when Jordan pulled her past the duo, jerking his head for them to follow.\n\nAt the next intersection, he came to a sudden halt before entering the cross section. He slid his hand up Trish's arm to her shoulder and pressed down, gently but firmly. Understanding, she sank to her knees, feeling confused. Anticipation hung in the air.\n\nJordan had said he was going to prove Trish wrong... surely Bella wasn't in the passageways NOW?! Why hadn't she waited? What had she been thinking?\n\nMaybe she wasn't as smart as Trish had given her credit for. \n\nThe sound of footsteps coming down the hall from the left, light but quick, made Trish hang her head as she felt tears prick her eyes. How stupid was Bella?! Trish had thought the other woman had more common sense. \n\nBut maybe she shouldn't have given a Moonie that much credit.\n\nAs soon as the contemptuous thought passed through her mind, Trish wanted to reel back in horror. Her inner voice sounded just like the other Earthers. But then again, wasn't there reason? \n\nThe look on Bella's face when she came into view, full of curiosity and a kind of glee before she caught sight of Jordan and the others and her expression changed to horror, made Trish feel even more like screaming a bunch of insults at the other woman. She almost wished she'd never told Bella. Even though she understood the temptation of the passageways, she'd resisted, thinking what would Bella do. Apparently she'd overestimated Bella's intelligence.\n\nThe brunette froze, and then suddenly slumped forward, her hands going to her knees to help hold her up. \n\nAt least she realized how much trouble they were in. \n\nJordan's hand came down on Trish's head and stroked her hair, making her shiver as arousal and apprehension slid through her. Her body still hadn't completely gotten the message that she was in trouble. Or maybe it had and her responses were just all messed up because of the way pain and pleasure had become intertwined for her. \n\n\"What bad girls you two are,\" Jordan said, his deep voice laced with satisfaction. His fingers slid into Trish's hair, wrapping it around his fingers near the roots, and he pulled her up. It hurt, but not in a bad way, and she wanted to moan in embarrassment at her reaction. As Jordan turned, he looked at Vaughn and Taylor, jerking his head back towards Bella. \"Bring her.\"\n\nWith his hand on the back of Trish's neck, he led the others down more passageways, some of them sloping downwards, and making Trish's head spin with how easily he navigated the labyrinth. Bella had been a complete idiot to even enter them without getting more information. Unless she'd somehow come across more secrets between when Trish had told her about the sigils and now? \n\nTrish was writhing with emotion, not all of which was logical... after all, there were times she wasn't even sure she wanted to escape, but now that the first real chance of doing so was gone she found herself furious - at Bella. Logically she knew she should be more furious at the Wolf or and Jordan, yet she couldn't stop feeling angry at Bella's complete idiocy. After all, the Wolf and Jordan were behaving in a manner that made sense to them. Trish might have issues with how society on Earth had reformed in the wake of the splitting of society between the Earth and the Moon, but at least she could understand how the Wolf and Jordan turned into the people they were. She could understand their behavior even if she didn't condone it.\n\nShe couldn't understand Bella's sudden stupidity.\n\nThe room Jordan took them to had quite a bit of familiar equipment in it. This was obviously the room below the Wolf's main hall, the one that came up through the floor. That or it was an exact replica, because it had the same bed and wooden structures that rose to the dais... but there were quite a few implements hanging on the wall that didn't rise with it. \n\nShe whimpered as Jordan pulled her over to a pair of cuffs hanging from a hook in the ceiling and stripped off her dress before raising her arms above her head to secure her to the cuffs. Once she was in place, he knelt down to spread her legs apart and attach ankle cuffs, setting her feet apart just wide enough for her to still be able to balance while exposing all the soft, sensitive areas between her legs. Little whimpers rose in the back of her throat as her eyes flitted around the room, trying to ignore the stares of the soldiers hanging in the doorway, focusing on Jordan and wondering what he was going to do now.\n\nMoving back to Bella, Jordan cuffed the brunette's hands in front of her, leaving her kneeling a few feet away from where Trish was trussed up, before going back to ignoring Bella and focusing on Trish.\n\nA sound of distress whined in Trish's throat as Jordan came back to stand in front of her, cupping one of her breasts in his hands. Her head tipped back to look up at him as she trembled, her eyes pleading with him. \n\nShe was sorry she'd told Bella about the passageways. She really, truly was. If she'd known Bella would do something so stupid...\n\nLeaning forward slightly, Jordan squeezed her breast, his voice low enough she doubted anyone else cold hear it. \"Vaughn and Taylor are going to stay here and watch. It's part of your punishment. Although, I think you like being watched more than you want to admit, little girl.\" \n\nTrish shook her head, even as her nipples puckered. Jordan moved slightly to the side so she could see the two soldiers watching in the doorway, and she bit back a moan as her pussy clenched. It didn't matter that the gag would muffle the sound; he would still be able to hear it and he would know he was right. His free hand closed around her other breast and he kneaded the soft flesh, keeping his touch lighter than her body craved, making her back arch, pressing her breasts into his hands as her body demanded more contact. \n\nWhen he moved away, she shuddered, and this time she couldn't stop the whimper, the sound of which was loud enough to be heard even through the gag. \n\nThen his fingers closed around her nipples, and Trish felt her pussy convulse as he pinched and tugged on the tender buds, giving her body exactly the stimulation it craved. Her breasts felt heavy and swollen as Jordan tormented her nipples.\n\nHis head lowered again, so he could whisper in her ear. \n\n\"What do you think, baby girl? Should I ask Taylor and Vaughn to help me punish you? What about Bella? Do you think she'd make you feel as good as Laura did? You were a naughty girl for telling Bella about the passageways, but you were a good girl for staying in our room.\"\n\nA small sob caught in her throat. \n\nHe knew.\n\nAnd some part of her fluttered when he called her a good girl. \n\nThen he released her nipples, leaving them throbbing and aching, and pulled out his favorite pair of clamps to use on her. The little buds felt like the pulsed when she saw what he was holding, as if in anticipation. They would hurt... but in a way that made her cream. Because her body was a traitor of the worst sort.\n\nShe shuddered as the clamp closed over one of her nipples, closing her eyes and holding as still as possible, breathing through the initial pain. A moment later, her other nipple spiked with pain as Jordan placed the clamp. The chain hanging down between her breasts brushed against her stomach, making her shiver as the cold metal touched her skin. Jordan's fingers moved up and down the sides of her body, soothing her, distracting her from the painful bite of the clamps until it began to meld with the pleasure curling through her. \n\nWhen he stepped away, moving around behind her, Trish opened her eyes and flushed at the three sets of the eyes that were on her. She wanted to hide, but she couldn't. She wanted to curl up in embarrassment that they could see her arousal, but it was already too late. \n\nTHWACK!\n\nTrish sucked in a breath as the first blow landed on her ass, her body arching in reaction to the shocking swat across her ass, pushing her clamped breasts out at the soldiers in the doorway. The bulges in the front of their pants made it clear they were enjoying the show. She felt Jordan had positioned her to deliberately show her off, taunting Taylor and Vaughn with his dominion over her body. This was a completely different kind of exhibitionism from Marek and Laura and she knew that Jordan wouldn't have done this if she hadn't told Bella about the passageways.\n\nIf she hadn't been bad.\n\nTHWACK!\n\nThe paddle - she was sure it was a paddle - landing across her ass cheeks broke her away from the tendril of guilt and remorse trying to work its way into her brain, and she shrieked as the red hot sting encompassed her entire bottom. \n\nTHWACK! THWACK! \n\nWith every smack of the paddle, her body jerked, making the chain between the nipple clamps bounce so that the clamps pulled on her poor nipples, biting into her skin and making the tender buds throb painfully. Trish did her best to hold still, but it just wasn't entirely possible.\n\nTHWACK! THWACK!\n\nAs she panted, fingers slid into her hair, pulling her head back and making her want to shudder and moan at the sensation. It felt good to have her hair pulled, to feel Jordan's hot breath on the side of her neck as his lips grazed over her throat and up to her ear.\n\n\"Your pretty ass is turning very dark pink, baby girl, but I don't know if you've been punished enough... I think I'm going to turn your ass nice and red and then fuck it while everyone watches. Would you like that?\"\n\nA sob rose in her throat, because some part of her body wanted to say yes, even as the rest of her wanted to scream no. This was totally perverse. She was bound, gagged, and completely at his mercy, and yet she could feel wetness beginning to coat the tops of her thighs. If he let her go now, she might break her jaw fighting off the need to masturbate herself to orgasm.\n\nIt was sick... it was wrong... and knowing that didn't change anything.\n\nTHWACK! THWACK!\n\nTrish screamed into the gag as the paddle thudded against her sensitive skin, her ass on fire from the repeated smacks. Her nipples throbbed as the chain jingled between her breasts and tears slid down her cheeks.\n\nTHWACK!\n\n\"Stop!\" Bella's voice cut through the air, filled with horror and guilt. If Trish wasn't so distracted by her throbbing, roasted bottom, she would have been able to focus on her anger. Her anger that her current position was Bella's fault... her resentment that she was the one strung up and spanked. Bella's voice dropped to almost a whimper. \"Please.\"\n\nAt least Bella did feel guilty even if she wasn't the one being punished for her stupidity.\n\n\"Feeling guilty, Pet?\" Jordan asked, satisfaction in his voice. Trish wanted to kick him. \"Would you like to help her?\"\n\nBlinking back tears, Trish turned her head to see Bella nod her head.\n\nHeat seared her backside as Jordan pressed himself against her from behind, the fabric of his clothing abrasive against her reddened ass. His hand stroked down her side, moving to her center to curve over her mound, his fingers dipping into her pussy. The caress made her tingle, her pussy throbbing as his fingers stroked her sensitive folds, and she groaned in denial as he lifted his hand away to show off her cream coating his digits. Vaughn and Taylor murmured their appreciation, making her shudder in embarrassment and arousal. \n\n\"When she cums, her punishment ends,\" Jordan said, stepping around Trish to drag his wet fingers over Bella's lips. Trish groaned into her gag again. Seriously? Her punishment for telling was to be spanked, but Bella's punishment for doing was to eat Trish out? Then again, Bella wouldn't have been able to do anything if Trish hadn't foolishly told her about the passageways. So maybe it really was her fault for being in this position.\n\nHer fault for thinking she could trust Bella not to behave recklessly.\n\nJordan turned back towards Trish, giving her a good view of the wide, leather paddle, which he tapped against his leg before he stepped out of her sight range again. Behind him, Bella moved on all fours with her wrists cuffed together in front of her, which made crawling difficult. She knelt almost between Trish's legs, and Trish closed her eyes, wishing herself far, far away even as her body shuddered in anticipation.\n\nThe other woman couldn't possibly know, but even though Trish's ass was on fire, even though she was embarrassed by the presence of a small audience, she wasn't just a little aroused... she was well on her way towards orgasm. Something Bella and the two soldiers would probably realize when it didn't take too much for her to cum, adding to her embarrassment and shame.\n\nTHWACK!\n\nThe blow jolted Trish's hips forward and she screamed behind her gag at the renewed fire searing her skin, her chest heaving as she struggled with the sensations. Suddenly there was wet pressure against her pussy, a tongue sliding through her sensitive folds, sending her body careening into the confusing and erotic mix of pleasure and pain. \n\nTHWACK!\n\nTHWACK!\n\nNow the jerking of her body wasn't just accompanied by the throbbing pulls on her nipples, but also by Bella's mouth pressing against her pussy. The other woman was doing her best to keep up with the movements of Trish's body, making Trish writhe with the maelstrom of sensation consuming her. Whenever she opened her eyes she could see Taylor and Vaughn watching, their gazes hot with lust, their cocks pressing against the front of their pants... it was a punishment to know they were witnessing her discipline, and yet her shame at enjoying their audience was part of that punishment as well. \n\nA few more thwacks of the paddle against her hot bottom, and then suddenly Jordan was standing behind her again, his fingers pressing slickly into her asshole and reminding her of what he'd promised. Trish groaned, half in denial, half in relieved excitement. She wanted to cum so badly and yet Bella's mouth wasn't quite able to get her there on its own. Jordan's fingers pumped, filling her ass, making her writhe with pleasure as her inner muscles tightened in anticipation. \n\nThen his cock was pressing into her rear entrance, stretching her wonderfully, his skin hot against her bottom, and Trish was forcibly reminded of the other night with Laura and Marek... except this was much more primal, much more raw. That had been intimate and hot and sensuously erotic despite her protests... this was primitive, painfully ecstatic, decadently depraved... she felt nearly mindless with the assault of sensations as Jordan's hands came up to cup her breasts, squeezing them tightly and making her nipples throb even more between the clamps as he began to thrust powerfully into her from behind. Unlike when he'd been beneath her while Laura licked her, now Jordan had full control over his thrusts into her body and there was nothing gentle about his movements.\n\nHe was fucking her ass hard, her seared bottom screaming in discomfort as he rubbed against the tenderized skin, his hands kneading her breast flesh and making her nipples swell larger, causing the clamps to bite even deeper into the tender buds. Bella's tongue was working Trish's clit, making her moan and whimper as she was caught up in the cacophony of sexual rapture, pain and pleasure wrapping around each other in her body until it didn't matter what either Bella or Jordan did, it all felt the same... winding tighter and tighter around her core, until her body arched dramatically and she shuddered between them in abject ecstasy. Her head fell back against Jordan's shoulder and he bit down on the spot between her collarbone and her neck, making her scream as her ass spasmed around his cock. Bella sucked hard on her clit and if Trish's arms hadn't been holding her up she would have collapsed as her muscles turned weak under the force of her orgasm.\n\nJordan's cock throbbed inside of her ass, her muscles milking him of his cum. He held her completely still, allowing Bella to take long, sucking pulls on her clit as Trish trembled, held in thrall by the ecstatic agony rampaging through her body. As her euphoric high began to recede, Trish slumped, panting for breath behind the gag. She felt Bella pull away from her pussy and sighed with relief.\n\n\"You were so good, baby girl,\" Jordan crooned in her ear, his voice mellow and soothing. The praise slid through her as he continued to stroke her, telling her how beautiful she was, how well she'd taken her punishment, before bending down to undo the restraints on her ankles. His warm hands briskly rubbed where the cuffs had been before he straightened and, one arm around her waist to hold her up, undid her wrist cuffs from the chain above.\n\nShe leaned against him, practically nuzzling into him for the soothing comfort his big, strong body provided when she was feeling so weak and muzzy. Strong arms wrapped around her, picking her up and carrying her until he settled her on his lap, letting her lean back for a moment.\n\nTrish let out a sharp cry as he released her nipple from the clamp around it, pain tingling through her as sensation returned. Immediately hot warmth engulfed her nipple, his tongue laving away the pain, soothing her, letting the sensation wind around the floaty sense of satisfaction she was basking in. He released the other and she whimpered, relaxing as his mouth provided the same comfort for that tender bud, leaving her feeling weak and throbbing, and completely satisfied and strangely serene. \n\nFingers slid through her hair and she sighed softly in pleasure at the simple sensation. She felt so floaty and nice... safe... comforted... satisfied... she throbbed, but pleasantly now. \n\nWhen he suddenly stiffened beneath her, Trish made a disgruntled noise, but he kept his arm around her shoulders, holding her against him, and she leaned into his shoulder, seeking the warmth and strength of his body. Later she'd ponder why she would crave such attention from the person who had caused her distress, but now she just leaned into it, uncaring about her motivations. \n\nJordan's chest rumbled, his fingers on his earpiece. \"Yes... Yes, Sir.\" He shifted Trish on his lap, his arms coming back down around her and holding her securely as he looked over at Bella, and then at Taylor and Vaughn. Trish blinked, her eyes half-lidded as she remembered they weren't alone in the room. \"The Wolf is back. Take her to him.\"",
        "For the briefest moment, Trish thought Jordan meant her and she nearly panicked, a feeling of betrayal surging up... and then she realized that, of course, he'd been talking about Bella, and she went limp with relief as Jordan's hands caressed her exhausted body, his lips pressing against her forehead and the top of her head while Taylor and Vaughn got Bella to her feet and led her from the room. \n\nBefore, Trish might have worried about what was going to happen to Bella... right now, she wasn't sure she cared. She'd probably feel guilty about that later.\n\n******\n\nAfter giving Trish a bath and redressing her in a pretty blue dress, Jordan brushed out her hair and she was finally starting to feel normal again. \n\nNormal and yet... \n\nNot.\n\nEmotionally she was all messed up.\n\nShe was still resentful of Bella, but now she did feel guilty for not caring what was happening to her... it hadn't occurred to her until now that Jordan was waiting for the Wolf to return and punish Bella himself. Just like Trish trusted Jordan wouldn't hand her over to the Wolf, perhaps Jordan hadn't wanted to take liberties with Bella that he wasn't approved for. Which meant Bella might be suffering, horribly, right now, while Trish was being bathed and pampered and having her hair brushed dry with gentle hands. \n\nYes her bottom still throbbed, and was sore inside and out... but what Jordan did to her was never as terrible as what the Wolf did to Alex and Bella. \n\nOn top of that, she was all too aware of how content she'd been to just lay in Jordan's arms and be coddled by him after he'd spanked her with a paddle and raped her ass. She was far too aware that her anger at him was... lacking. Even when she tried to stir up some righteous anger in her breast it just felt kind of tired... lackluster... false. Because her nipples and bottom might be sore and sensitive, but so was her pussy, and even though the punishment had hurt at the time the sensitivity of all her parts right now wasn't exactly a punishment. \n\nIt felt good.\n\nShe was so messed up.\n\n\"Jordan?\" she asked, her voice high and hesitant as she pushed away her troubling emotions.\n\n\"Yes, baby girl?\" He was still using the same low, deep, soothing tone that had made her so muzzy after he'd punished her. \n\n\"What's happening to Bella?\" \n\nThe movement of the brush through her hair slowed for a moment before picking up again, and Trish felt her muscles tighten. Normally Jordan answered her immediately, no matter what she asked, even if sometimes his answers weren't very long. That he didn't want to answer her meant something very not good was probably happening. \n\n\"I believe she's with the doctor,\" he said finally.\n\nA shiver went down Trish's spine. Jordan never let Margolis anywhere near her, even when he was by her side, which said a lot to her. \n\n\"What's he doing to her?\" Her voice had dropped to a whisper. She really did feel bad now. Not just for the resentment she'd felt towards Bella earlier, but because she doubly wished she hadn't told Bella about the passageways. Not that it was Trish's fault Bella had behaved stupidly, but Bella couldn't have done so if Trish hadn't given it away.\n\nJordan's voice was even, nearly toneless. \"Margolis likes electricity and pain.\" \n\nWhen Trish shuddered again, his hand slid from her hair and down to her chin, pulling her head back so he could plant a soft kiss on her forehead.\n\n\"She'll hurt, but she won't be harmed, baby-girl,\" he said gently. \n\nTrish closed her eyes, trying to fight against the new emotions welling in her - relief that Jordan had chosen her instead of the Wolf, gratitude that he wasn't as terrible as some of the others, guilt and horror for poor Bella, and a sense of wonderment that - for once - Jordan had given her the answer to a question she hadn't actually asked out loud. Because he wanted to comfort her.\n\nAs he went back to brushing her hair, the gentle, repetitive motions soothing the turmoil inside of her, Trish found herself leaning her head against his inner thigh. But even when she noticed what she was doing, she didn't pull away."
    ],
    "authorname": "Goldeniangel",
    "tags": [
        "punishment",
        "taken",
        "non-con",
        "noncon"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/taken-by-the-viking-ch-11"
}
{
    "title": "Westrons Pt. 12",
    "pages": [
        "General Vis hadn't changed the direction of her advance, but she did move faster. Her central brigade made contact with the rearguard of the Crolian army. She called in the northernmost wings of our army, and fought a battle near a village called Henach. \n\nShe trounced two enemy regiments, and took 600 prisoners. She also captured 4 enemy standards and 9 guns. \n\nLangoret, Avette and I defeated 12 enemy regiments. We took 3,200 prisoners, captured 21 standards and 65 guns. We counted over 1800 dead. \n\nThe remainder of the Crolian army melted away. They left behind virtually all of their ammunition and supplies, including the Crown Prince's solid silver dinner plate and all the other luxurious fittings of his sprawling command tent. \n\nOur losses were 262 dead and 471 wounded. Only a small number of those belonged to Avette's regiment. Langoret's and Aneli's regiments had paid heavily for their victory. One in three was a casualty. \n\nMajor Chardeia was dead. So was Oshide. \n\nThe Crolian Crown Prince was stunned by the swiftness and the magnitude of his defeat - and he didn't even know all of the details yet. He was eager to talk to me; I got the feeling that he wanted to reassure himself that I was some kind of military genius, which would explain how I'd beaten him. \n\nNot a female, nor a Westron, but a male Pylosian. \n\n- \"You know, Colonel,\" he said, \"my Royal Father would pay handsomely for the services of such a talented commander as yourself. I am certain that we could match - or easily surpass - what the Westrons are paying you.\" \n\n- \"That's nice to know, Your Highness. But I'm not a mercenary. I'm Pylosian - not Penchen.\" \n\n- \"Land, then? A title? The King could be very generous ...\" \n\nI wasn't even remotely tempted. Not after I'd seen the half-eaten corpses in the bastion at Tonol. Not after Oshide. \n\nBesides, the chubby Prince was beginning to get on my nerves. He reminded me of several of my classmates from AFOTA. \n\nI figured out a way to kill two birds with one stone. I called Captain Faregil to my tent. She was a brown-eyed, brown-haired woman, who looked far too pretty to be such an effective officer. \n\n- \"Captain, I have two documents for you: the first requires that you command the escort which will take our esteemed prisoner to Cercen. The second is to notify you of your promotion to Acting-Major.\" \n\nThree birds, actually: Chubby off my hands, Faregil rewarded for her valour and intelligence (she'd make an excellent 2nd-in-Command), plus she could carry letters to Kanitz for me, and describe the battle, firsthand, for our esteemed Chancellor. \n\nI was smiling as I held out the documents to Faregil ... only she wasn't taking them from my hand. Instead, she couldn't even look me in the eye. \n\n- \"Sir ... I'm sorry, but ... I can't accept the promotion.\" \n\n- \"Of course you can.\" I said. \"No one deserves it more.\" \n\n- \"I ... I can't, Sir. I'm married ...\" \n\n- \"I know. What difference does that make, Faregil?\" I was thoroughly confused. \n\n- \"I love my husband, Sir. I can't be ... one of your concubines.\" \n\n- \"My what?\" \n\n- \"I'm not his concubine.\" chipped in Tallia. \n\n- \"Me neither.\" said Yehla. \"I'm his bodyguard.\" \n\n- \"Wait - you thought ...?\" I was blushing fiercely. \n\n- \"It's not like that at all.\" said Tallia. \n\nPoor Faregil was more embarrassed than I was. \n\n- \"There is no such -\" I began ... until Tallia put her hand on my arm. \n\n- \"I think that Captain Faregil needs to hear this from someone else.\" said my aide - and lover. She led Faregil from the tent. \n\nBy that time, I understood what she was thinking. She'd come to the conclusion that working closely with me meant ... sleeping with me. \n\nI'd never had sex with Chardeia. But Faregil had been at Tonol (where she'd also distinguished herself). She had to know about Themis and me. \n\nThen she also knew that I'd had sex with Tallia ... Oshide and Yehla ... even Countess Aneli. I could readily understand how she'd mistaken my intentions. \n\nTallia returned - alone. \n\n- \"What did you say?\" I asked. \n\n- \"Nothing. I took her to see Colonel Langoret.\" \n\nThat did the trick. The next time I saw Faregil, we were both embarrassed from the get-go. Neither of us could get a word out, for a moment. \n\n- \"I'm so sorry, Colonel.\" she said. \n\n- \"Perfectly understandable. I can see why you thought ... what you did. But promotion in this regiment will be by merit, if I have anything to say about it. Merit alone.\" \n\n- \"Colonel Langoret explained it to me, Sir. About her hemmer, and -\" \n\n- \"I understand. Does that mean that I can address you as Major Faregil?\" \n\n- \"Yes, Sir.\" She smiled. \"Thank you, Sir.\" \n\n- \"Glad to hear it. Would you do one thing for me, Major, before you leave for the capital? Please tell the rest of the regiment that promotions will never be contingent on ... sexual activity. I don't want anyone else to think that.\" \n\n- \"As you wish, Colonel.\" \n\n*** \n\nEveryone in the army knew that a cease-fire was imminent. The destruction of their Northern army and the capture of Prince Ellem Anry would force the Crolians to a truce, at the very least. It might even lead to a more permanent peace. \n\nGeneral Vis designated zones for us to occupy, and then came to see us. \n\n- \"You've done remarkably well.\" she said, to Langoret and to me. \"The Queen will be very grateful.\" Her tone was mildly patronizing. \n\n- \"Congratulations on your victory at Henach.\" I said. \n\n- \"Thank you.\" said the General. \"Yes, both battles were quite decisive.\" \n\nI avoided looking anywhere near Langoret. I wasn't sure that I could keep a straight face. \n\nThe General had brought several aides with her, to catalogue and calculate the value of the spoils we'd taken. She was probably eager to figure out her share of the proceeds. \n\nThat was an uncharitable thought, I knew. But I was rapidly growing less and less thrilled with our Commander. \n\nVis was astonished to learn that Tallia had already performed a thorough inventory of everything we'd captured. There was very little for her aides to do - and no chance for them to pocket valuable items. That silver dinnerware was going straight to the Queen, if I had anything to say about it. \n\nIn a bit of a huff, now, Vis proceeded to question us thoroughly about the actions of Colonel Avette on the day of the battle. \n\n- \"I don't quite understand, General.\" I said. \"Colonel Avette contributed directly to our victory. Yet you make it sound like she's ... accused of some kind of wrongdoing.\" \n\n- \"She disobeyed a direct order, Colonel.\" said the General. \"She will have to answer for that.\" \n\n- \"You're serious? Avette came to our support when Berandot wouldn't, and you want to punish her for that?\" \n\nLangoret reached out to put her hand on my arm. General Vis didn't miss that gesture. \n\n- \"Colonel Avette will be the subject of an inquiry.\" she said. \"There is nothing that I can do about that.\" \n\n- \"That's total bullshit!\" Luckily for me, I'd spoken in Terran. Vis recognized my tone, but the words meant nothing to her. \n\n\"A Pylosian expression ...\" I explained. \"It means that ... Colonel Avette deserves every consideration.\" \n\n*** \n\n- \"Complete and utter bullshit!\" I repeated, when the General had gone. \n\n- \"You have to be more diplomatic.\" said Langoret. \"Insults won't help Avette. Try to understand the General's position.\" \n\n- \"Fuck her position.\" I was steaming. Vis would've fit in perfectly at AFOTA. \"Instead of thanking us for winning the war, she tried to imply that Henach was just as significant as Limset. That's crap - and it's disrespectful to every soldier in both our regiments - and Avette's.\" \n\nLangoret kept her cool. \"All true, Cook. But the General is no doubt embarrassed, to be so outdone by her subordinates. Her faction will not be grateful, that you've eclipsed her so completely.\" \n\n\"There's nothing to be gained by rubbing her face in it. We should try to be as conciliatory as possible.\" \n\n- \"So Avette is subject to an inquiry? And nobody says shit about Berandot?\" \n\nLangoret didn't answer. She just waited for me to cool down. \n\n- \"Politics, Cook.\" she said. \"The Chancellor can explain it better.\" \n\nThe only bright spot that day was when Tallia decided that I'd had enough rest, and was ready for some sweet houghmagandy. \n\n*** \n\nAvette's inquiry was something of a spectacle. I wished I could have been there. Apparently, Berandot appeared, to testify that her subordinate had disobeyed a direct order. \n\nAvette fired back, accusing Berandot of cowardice, and of a politically-motivated attempt to leave Langoret and me hung out to dry. That took courage - or maybe she was just really, really angry. \n\nOf course, she was all alone. Neither Langoret nor I were invited to be part of the proceedings. No one spoke on Avette's behalf. \n\nBerandot didn't dispute the assertion that her actions had been politically motivated. Nor did she deny that she'd left us exposed to a crushing defeat. \n\nBut she didn't like the accusation of cowardice. \n\nWords were exchanged. The upshot was ... a duel. \n\nAvette and Berandot were going to settle the issue - with pistols. \n\n*** \n\nYehla was pregnant. \n\nShe was happy. I was torn - happy for Yehla, but ... I couldn't help wondering if Oshide had also been pregnant when she was killed. \n\nTallia understood. I didn't say a word, but she knew - somehow - what I was feeling. She wrapped me in her arms, and held me close. \n\nYehla caught on. She asked me if she could name her child Oshide - regardless of whether it was male or female. \n\n*** \n\nAvette missed. \n\nBerandot 's shot hit Avette in the forearm, shattering it. \n\nHonour was satisfied. \n\n*** \n\nLangoret and I went to visit Avette, afterwards. She looked tired - exhausted, really. The broken arm had to be painful - it wasn't a clean break. \n\n- \"I'm so sorry.\" I said. \n\n- \"Why?\" she said. Her pale eyes were surprisingly fiery. \"My only regret is that I missed.\" \n\n- \"You did the right thing - and they're punishing you for it.\" I said. \"It's so ... unfair.\" \n\n- \"Cook - would you ... let me speak to Langoret? Alone? Just for a moment.\" \n\nThat threw me, just a bit. I excused myself. \n\nLangoret came out half an hour later. She held up her hand, when I started to ask what Avette had said. \n\n- \"It's complicated, Cook.\" said Langoret. \"Avette is ... politically significant, now - and she knows it.\" \n\n\"She wants to be part of our brigade. Her regiment, to train with ours.\" \n\n- \"That's great!\" I said. \n\n- \"That's not all. She wants a title. She knows that you have Kanitz' ear, and that Kanitz has access to the Queen. She's asking us to call in favors for her.\" \n\n- \"And? Because it sounds like there's more ...\" \n\n- \"She wants you for her next hemmer. She wants a child by you.\" \n\n\"Don't feel too flattered, though. I suspect that she wants to do it mainly because it will infuriate Berandot.\" \n\n*** \n\nThe Crolians didn't muck about. They sued for peace, ceded the province around Limset and Henach, and paid a staggeringly huge ransom for Crown Prince Chubby. \n\nOur troops were recalled to the capital. \n\nIt was a bit of a whirlwind after that. General Vis and her brigade held a victory parade for Henach. The Crolian prisoners were marched through the streets of Cercen. In some ways, it reminded me of Roman triumphs. \n\nThe Aneli and Langoret regiments paraded the following day - and Avette's regiment was included. \n\nThe citizens of Cercen could count. They saw the prisoners, and all of the captured banners and guns. They went absolutely wild when the Crown Prince of Crolia rode by, on an ox-cart. He waved to the crowd, as if he was winning an award. \n\nThe people could also see how few of us there were. We were missing the dead, the seriously wounded, and the females in hemmer (and there were quite a few of those - I suspect the powerful emotions unleashed in battle had something to do with it). \n\nThe troopers who could march deserved it. It was their victory, more than mine or Langoret's. Naturally, they sang dirty songs, and managed to make it sound as if we'd won at Limset because I'd had a four-way with Tallia, Oshide and Yehla the night before the battle. \n\nAvette wasn't going to miss it; she marched with her troopers, broken arm strapped to her side. She got a fair number of cheers, too, from what I heard. The crowd may have understood that she alone had come to help Langoret and me; it was more likely that they knew about her duel with Berandot. \n\n*** \n\nLangoret, Avette and I were presented to the Queen and her sisters. \n\n- \"This is becoming a habit with you, Colonel Cook.\" said Maia Matila. \"If you are going to win a victory every year ... I can only hope that I'll see you even more often.\" \n\nShe was still the loveliest woman I'd ever seen. And I was cognizant of the honour she was doing me. But I couldn't wait to mumble a platitude to her older sister, Maia Ariana, and move down the line to the youngest Royal - Princess Maia Simonia. \n\nThemis, to me. \n\nShe leaned forward, to whisper in my ear. \"I'm so proud of you, Cook.\" \n\nThat was all the reward I needed. \n\n*** \n\n- \"A title for Avette?\" said Kanitz. She didn't sound happy. \n\nGeneral Vis' little charade about censuring Avette had come to nothing. After the duel with Berandot, and the Queen's open mark of favor, Vis' friends must have told her that criticizing Avette would come across as petty jealousy. The General quietly let the matter drop. But I wanted a more tangible reward for the only commander who'd come to our aid. \n\n- \"Langoret seems to think it's a good idea, too. \" I said. We were sitting in the Chancellor's study, with Countesses Aneli and Langoret. Airta hovered in the background. \n\n- \"Colonel Langoret is not a member of our faction.\" said Kanitz, a bit stiffly. \n\n- \"Really? After Tonol? The supply depot at Napore? Limset?\" \n\n- \"Don't be an ass, Cook.\" said Aneli. \"Langoret's a good commander, and she's had the fortune to work with you over the past few campaigns. What we're trying to work out is whether we can trust her - politically.\" \n\nThat struck me as funny, considering that Kanitz didn't trust Aneli (or anyone else, for that matter). \n\nLangoret chose her words carefully. \n\n- \"I came to the conclusion,\" she said, \"that the Queen's party, in particular Colonel Cook and Chancellor Kanitz, represented our best chance for victory.\" \n\n\"That proved to be correct. But I believe that we will have to fight the Crolians again. Unless something significant occurs, I will continue to support the Queen - and Cook.\" \n\nWow. Langoret was good at this. I wanted to kiss her (Truth be told, I wanted more than that, but she was devoted to her fianc\u00e9e/boyfriend). \n\n- \"Five to ten years.\" said Kanitz. \"The Crolians may recover sooner, but we have time.\" \n\n- \"All the more reason, then, to build a stronger party.\" I said. \"Avette is respected for her courage. And she's a good Colonel. We can work with her - train her regiment up to the standard of ours.\" \n\n- \"Party and army are not quite the same thing.\" said Kanitz. \"You are asking for the moons.\" \n\nLangoret and I wanted a title for Avette. We also wanted more 3-pounders, more rifles, and more troops to train in the tactics that had been so successful at Limset. \n\n- \"We can afford this.\" I said. \"Avette is worth it.\" \n\n- \"We'll see.\" said Kanitz. She brushed aside a stray lock of her frizzy hair. \"Can you stay this evening, Colonel? I'd like to discuss a few matters over dinner.\" \n\nLangoret didn't react. Aneli did. \n\n- \"Don't wear him out, Wenzla.\" she said. \"I can feel my next hemmer coming - and it has to be Cook.\" \n\n- \"He will be in tip-top shape for you, Aneli.\" \n\n- \"He'd better be.\" \n\nLangoret and Aneli were escorted out by Airta. Once the door closed behind them, the Chancellor laughed aloud. \n\n- \"I do love politics!\" she said. She twirled, and spun on her heel. Then Countess Kanitz threw herself at me. She wrapped her arms around me, and kissed me on the lips. \n\n\"Oh, Cook ...\" \n\nShe kissed me again, more gently. \n\n\"I broke every rule, to let you in the army. To give you a commission. I let my instinct guide me, when normally I rely entirely on logic. And look what you've done!\" \n\nShe was still kissing me. I responded as any man would, with a spectacular woman. Then she surprised me, by leaning against me, her head against my chest. \n\nThat seemed to suggest that ... she just wanted to be held? In all the time I'd spent with her, Wenzla had never shown a soft, sentimental side. Political calculation, intelligent conversation, mind-blowing sex ... but never warm and fuzzy, like this. \n\n- \"Will you have dinner with me?' she whispered. \n\n- \"Of course.\" \n\nShe looked up at me. \"I'm sorry. What I really mean is ... will you stay tonight, and take me to bed?\" \n\n- \"Of course I will.\" I answered. What an incredible woman. She didn't need hemmer to arouse me; just the thought of spending the night with her had me hard as a rock. She could feel it, too. \n\nOnce we'd sat down in her apartments, I decided to tackle the things on my mind while I still could. \n\n- \"Oshide saved my life, just before she died.\" \n\n- \"I know. She was one of my best. I shall miss her.\" \n\n- \"Does she have a family?\" \n\n- \"They are well-looked after. I owe them a debt, too.\" \n\n- \"Yehla is pregnant.\" \n\n- \"And she will be cared for.\" said Kanitz. \"Have no fear, Cook: we value loyalty, here.\" \n\n- \"Then why won't you give Avette a title?\" I asked. \n\n- Politics, first?\" said Kanitz. \"Very well. Of course we'll grant her a title.\" \n\n- \"You will? But -\" \n\n- \"I had to sound at least a little reluctant ... that's how the game is played, Cook. If we gave in too easily, then Aneli would want more. She already has a title - she would want access to the Queen, and to be part of our inner councils.\" \n\n\"Fortunately, your friend Langoret is neither greedy nor overly ambitious - would that there were more like her.\" \n\n- \"I see.\" \n\n- \"Don't sound so disappointed, Cook. You and Langoret will be rewarded. Aneli will gain prestige ...\" \n\n- \"I'm not looking for a reward.\" I said. \n\n- \"It's not entirely about what you want.\" she said. \"The Queen must be generous - and it must be known. Loyalty and skill have to be celebrated. Besides, we know some things that you would like - even if you don't - yet.\" \n\nI was reminded of what she'd told me - that I was a political neophyte, a guppy in shark-infested waters. \n\n- \"You told me that I shouldn't trust you.\" \n\n- \"Nor should you, Cook. But the Queen is grateful, and you know that the Princess holds you dear. I may be devious ... but I'm not blind to your skills, and your merits.\" \n\n\"There are times that I wish that I was your aide-de-camp ...\" \n\nThat sounded very much like an invitation to me. I stood up, and went around the table. I picked her up, and carried her into the bedroom. \n\nShe was more than ready for me - she didn't 'require many preliminaries', as she would have put it. So, naturally, I teased and tortured her as if she was a pleasure slave. \n\nI went down on her until she begged for mercy, and pleaded with me to enter her. Finally, I stripped her completely, bent her legs back until her ankles were past her ears, and drove my full length inside her. \n\n*** \n\nIn the morning, she washed my cock and balls with a wet cloth, sucked and licked me back to full mast, and then rode me at a leisurely pace until she came. She pulled back, when I warned her, and I shot my load all over her stomach, and mine. \n\n- \"That was very nice.\" she said. \"More sedate than last night, but I enjoyed it.\" \n\n- \"I'm sorry. I got ... carried away. I hope I didn't ...\" ",
        "- \"You didn't hurt me, Cook. I understood. You were a little upset, and a little bit angry ... and you channeled that energy into me. I would have told you immediately if I hadn't enjoyed it.\" \n\nThat made me feel a little better. \n\n\"You know,\" she said, \"if we can sign a lasting peace, I may want you to give me a child.\" \n\nI made a sound something like a 'gleep'. \n\n\"A daughter?\" said Kanitz \"To follow in my footsteps, perhaps? Or yours?\" \n\nAfter a quick breakfast, she was all business once again. She took me back to her receiving room, and passed me a bundle of papers. \n\n- \"Read these, Cook. I will return, shortly.\" \n\nThe first paper was a letter. \n\nCongratulations, you lucky bastard! Tell Langoret that I'm pleased for her as well. Damn you both - why couldn't I have been there? \n\nThere's nothing happening down here - well, a few skirmishes between outposts. I lost a little piece of my ear when a Crolian missed me by an inch or so - don't know if he was lucky, or I was! \n\nIt looks like the war may be over. It won't last, though. Before you know it, those bastards will be back at our throats. Trust me on that. \n\nWhen that happens, I want to be wherever you and Langoret are - because that's where the action will be. \n\nPlease don't forget me! \n\nYours, \n\nTudino \n\nTudino! The real victor at Tonol ... Langoret and I had set the table, but it was Tudino who'd delivered the crucial, decisive blow. And she wanted to work with us! \n\nThere were two more applications - or petitions, I suppose - asking to serve with me, or me and Langoret. I didn't know any of the names. \n\nThen there were drawings of a building, a map of Cercen ... I had no idea what they meant. I was still trying to make sense of them when Kanitz returned. \n\nShe had several soldiers with her. \n\n- \"Colonel Cook, these are your new bodyguards.\" said the Chancellor. \n\nIshana was a hard-faced, slightly older female. I wouldn't have been surprised to hear that she was wanted for murder in all three kingdoms. She had dark circles under her eyes, and sharp, angular features. \n\nMadze was a big girl, with brown hair, powerful arms and a cleft chin. \n\nNasta was a tall, blue-eyed blonde. If I'd met her at home, I would have guessed that she had Russian or Ukrainian blood. Except for one thing: she had a wide, flattened nose. \n\nKoroba was a skinny blonde, with brown eyes, which reminded me of Themis. But the Queen's sister had a lush body, generous hips and full breasts. This girl was thin, and sharp-featured. She also met my gaze straight on. \n\nThere was one more thing I noticed, at first glance: Nasta looked like a nice girl. The other three had hard eyes - killers, if I wasn't mistaken. \n\n\"Ishana will arrange a rotation, so that you aren't left alone.\" said Kanitz. \"We don't want any ... accidents.\" \n\nThen her tone softened. \"Can you come back tomorrow night? Spend the evening with your friends, but I would appreciate it if you could join me for dinner again.\" \n\n- \"I would be honoured.\" \n\n- \"You can trust these women, Cook. They were all friends of Oshide.\" \n\n*** \n\nIt was decidedly weird, knocking on Talley's door, with four women like these. Tisucha was completely unfazed; she embraced me warmly, and then invited my bodyguards in. \n\n- \"We won't disturb your reunion, ma'am.\" said Ishana, who seemed to be the leader of the squad. \"We can watch from outside, for now. But if Colonel Cook is staying the night, I'd prefer to have one or two of us inside, then.\" \n\n- \"I have blankets and pillows,\" said Tisucha, \"if you don't mind sleeping on the floor.\" She didn't mention that I'd be sleeping there, too. \n\n- \"Perfect. Thank you.\" The four of them left. \n\n- \"I'm glad that you have bodyguards.\" said my hostess. \"Tallia told us about the attempt on your life. And that poor girl Oshide ...\" The rest of the family appeared. \n\nTalley actually embraced me. \n\n- \"You did it. Goddamn - you actually did it!\" He broke out another special bottle. \n\nTallia hugged me, and kissed me on the lips. Then, suddenly, it got a little awkward. Esyle was standing shyly behind her sister. I wasn't entirely sure how to greet her, after what her sister had told me. \n\nEsyle had tremendously long dark brown hair, which hung down her back almost all the way to the top of her ass. She wasn't quite so slender as Tallia; 'a little more meat on the bone' would be one way to describe her. \n\nTallia was more exotically beautiful, like her mother, but Esyle was lovely in her own way, with a certain vulnerability that made me want to cherish and protect her. \n\nBetter not to delay - even if I made a faux pas, that would be better than to leave her hanging. I stepped forward, and took her in my arms. Just a hug - but a warm one. \n\n- \"Welcome home.\" she whispered. \n\nThey had questions about everything. Tallia had already described the battle for her family, from her perspective. Now they wanted to hear it from my point of view. Talley, so far as I knew, had never had a military career, but he asked technical questions, more to show off his own knowledge than to hear my answers. \n\nTisucha kept the food and drink coming, without seeming to miss one word of the conversation. But it was Esyle who kept attracting my attention. She sat quietly at the end of the table, her mouth slightly open. Her eyes never left me, except when I glanced her way; then she'd blush and look down. \n\nI knew what the sisters wanted; Tallia had spelled it out for me, quite clearly. They hoped to share me. \n\nIt was flattering, of course, and the idea was intriguing. But to have Tallia's sister sitting only a few feet away, watching, and listening to every word ... it was definitely odd. I hardly knew Esyle. \n\nShe'd been barely 16 when I first arrived. I was 25 now, but felt as if I'd aged a decade in the past two years. Esyle still seemed very young to me. \n\nI was thinking like a Terran, of course. There was nothing wrong with having sex with someone you'd just met - but that wasn't what was happening here. Esyle wanted to sleep with me, and then be a partner for life - along with her sister. \n\nI caught their mother watching me, too. She knew what her girls were planning - and she approved! Tisucha eventually called an early end to the meal, and tried to hustle her husband upstairs to bed. Usually, Talley would have gone, after only the mildest of protests. \n\nTonight, though, he broke that pattern. \n\n- \"You go ahead, dear.\" he said. \"The boy and I have a little talking to do.\" \n\n- \"Don't be too long. Your daughters need to talk to Cook, too.\" \n\n- \"I'll call them when we're done.\" he promised. \n\nI braced myself for one of two things: \n\n- a father and son-in-law heart to heart (maybe Talley was going to tell me to stay away from Esyle, or to choose one daughter and stick to her exclusively) \n\n- or, some male bonding over military matters \n\nIt was neither. \n\n- \"What'd you say to Kanitz?\" he asked. \"Did you shit the bed?\" \n\n- \"Pardon? What do you mean?\" Talley was speaking to me in Terran slang. If anyone was listening, they were unlikely to understand a word. \n\n- \"The Chancellor called me up on the carpet - gave me the 3rd degree about Pylos.\" He glared at me. \"What did you tell her?\" \n\nTalley and I were on the same side on this one - in fact, we were the side - there was no point in keeping secrets from him on this subject. I related my astonishing conversation with Kanitz, including her shrewd questions about my failure to write letters to any of my friends back in Pylos. \n\n- \"You're telling me that she guessed?\" said Talley. \"Holy shit ...\" \n\nHe poured us both a stiff drink. \n\n\"We are royally fucked, boy.\" \n\n- \"Not necessarily.\" I said. \"She could have exposed me immediately - but she didn't. Hell, she could've made us both disappear, if she wanted to.\" \n\n- \"That's true.\" \n\n- \"I think she's curious. But she doesn't question our loyalty - either of us.\" \n\n- \"As long as we're useful.\" said Talley. \"My maps, you on the battlefield.\" \n\n- \"Exactly.\" \n\n- \"Alright. S'long as neither of us says anything stupid. By that, I mean s'long as you don't say anything stupid. Maybe we should compare notes - get our stories straight.\" \n\n- \"That's a good idea.\" I agreed. \"Tomorrow, though? We should do that when we're sober.\" \n\n- \"Mmm. Yeah.\" \n\nTalley finished his drink, and climbed the stairs to his room. I don't know if he told his daughters that we were done, or if they'd been listening all along, but Tallia and Esyle came down a moment later. \n\nTallia poured us another drink. \n\n- \"Well? How do we do this?\" she said. \n\n- \"It's not a we, yet.\" I replied. \"There has to be Esyle and me, before anything like that. But I think that we need to discuss it, first.\" \n\nIt wasn't entirely my imagination: I'm pretty sure that Esyle flashed me a look of gratitude. She seemed to be eager, but also terrified, in equal parts. \n\n- \"Alright.\" said Tallia. She began rolling up her sleeves. \n\n- \"He means me and him.\" said Esyle. \"Just the two of us.\" \n\nTallia seemed a little disappointed. She looked to me for confirmation. \n\n- \"That's exactly what I meant.\" \n\nBig sister gave in. \"Fine, you two work it out. But I want to hear everything in the morning.\" She kissed me, and stroked my hair as I caressed her leg. \"Goodnight, then.\" \n\nShe left me alone with her sister. \n\n- \"You can relax, Esyle.\" I said. \"I'm not going to insist that we copulate on the floor.\" \n\nShe surprised me by grinning. \"I'm not afraid of the physical act, Cook. Mother and Tallia have described it for me - many times - and it sounds wonderful. Tallia even said that it's very exciting to do it on the floor.\" \n\nThese women were never going to cease amazing me. Here I'd thought that Esyle was a blushing virgin ... but she was worried about something ... \n\n- \"What is it that you are afraid of?\" \n\nEsyle took a deep breath. \"I'm sorry ... it's just that ... I don't know if Tallia and I have given you a choice in the matter. If I know my sister, she simply told you that you would be my first, and then that we would share you afterwards.\" \n\n\"I don't believe that we ever asked how you felt about it.\" \n\nI'll admit it: I was touched. I reached out, and gently placed my hand over hers. \n\n- \"Thank you, Esyle. For thinking of me.\" \n\n- \"Oh, Tallia thinks of you, Cook. She just assumes that she knows what you would like, without the need to ask. But she loves you dearly.\" \n\n- \"And I love your sister, too. But I learned to love her, when we were working together, day after day, sharing meals, sleeping in the same tent ...\" \n\n- \"I'm not very military, I'm afraid.\" \n\n- \"I know. I don't expect you to be. One Tallia is plenty. But what I meant was ... we had time to discover that we liked each other. I knew that I was attracted to her, but I found out that I admired her quick thinking, her cheerfulness ...\" \n\n- \"You want to know me better, and decide if you like me ... before you decide if we should copulate? I don't understand ...\" \n\n- \"No. It's not about ...\" Suddenly, I had the urge to laugh. Here I was trying to talk myself out of sleeping with a lovely young girl. \n\n\"You're very attractive, Esyle. Of course I want to copulate with you. And I like you - very much. That makes it even more appealing to me.\" \n\n- \"It increases your pleasure, if you like your partner?\" \n\n- \"Well ... yes, it does. But we Pylosians ... we can differentiate between fucking, and making love.\" I proceeded to explain the two concepts to her. \n\n- \"So ... you fucked Countess Aneli, and gave her a child, but you make love with my sister.\" Esyle frowned. \"I'm not sure that I understand, Cook, because some of the things Tallia described sound more like fucking.\" \n\n\"Perhaps I should ask my mother whether she fu-\" \n\n- \"Yes! Splendid idea.\" I interrupted. \"The point is ... I'd like to get to know you better, Esyle. Before we commit to the kind of relationship that I have with Tallia.\" \n\n- \"I see. You want to fuck me, but you're not sure if you like me.\" \n\n- \"No! I mean ... I do like you. Very much. I just don't know if ... we should commit to a long-term relationship, when we don't know each other all that well yet.\" \n\nEsyle nodded. \"I'm sorry, Cook. I'm not trying to be difficult. I just don't see why we can't copulate, and then decide if we have a future together.\" \n\n- \"Ah - because ... that might make you feel bad, if I'm with your sister, but you and I decide that we aren't right for each other ...\" \n\nEsyle smiled, suddenly. \"I think that I'm beginning to understand! You don't want to copulate, and then discover that you don't really like me ... because you're afraid to hurt my feelings. You're worried about me.\" \n\nHer smile grew even broader. \"That's very sweet.\" \n\nWhat a woman. What a planet. \n\n*** \n\nI slept on the floor, with hard-faced Ishana on one side of me, and the big blonde, Nasta, on the other. \n\nIshana snored. \n\n*** \n\nKanitz had invited me back to the Palace. That was just was I needed, at this point: another erotic encounter with an amazing woman, while I tried to work out in my head if I wanted to have sisters as my lovers, in a long-term relationship. \n\nShe insisted on showing me more diagrams of a building in Cercen. I didn't understand what it was, or why she was consulting me about it. \n\n- \"I am not consulting you.\" she said. \"The Queen is trying to decide if she should give it to you.\" \n\n- \"Wait - this building? It looks like ...\" There was no Westron word for 'mansion'. \n\n\"It's practically a ... Palace.\" \n\n- \"It is a Palace, Cook. It's called the Belere, and it once belonged to the Queen's great-aunt. She was a very good general, you know.\" \n\n- \"The Queen wants to give me a Palace?\" \n\n- \"How else is she to reward you?\" \n\nShe could buy me more 3-pounders, I thought. But it made sense, all of a sudden. She couldn't very well give me a title - since their disasters with a male army, the Westrons had undergone a profound social and cultural revolution. \n\nNobles, officers, the entire army ... these were the preserve of females. I was an anomaly - and a potentially dangerous precedent. \n\n- \"That's ... very generous.\" I ventured. \n\n- \"An address in Cercen could be beneficial for your social standing.\" said Kanitz. \"You can't very well continue to sleep on Tisucha's floor.\" \n\n\"Your aide could turn it into a sort of ... headquarters, for you, when you're in the city.\" \n\n- \"Thank you.\" Kanitz hadn't said a word about Talley. No mention of her meeting with him. Maybe it wasn't going to be an issue. \n\n- \"Dinner in an hour.\" she said. \"I have some business to conclude. Can you find your way upstairs, to my rooms?\" \n\n- \"I know the way.\" \n\nKanitz leaned over, and kissed me on the cheek. \n\n- \"Good.\" \n\nI washed up, in a porcelain basin, and then wandered out to her balcony, to look out over the city. \n\nA Palace. The Queen was going to give me a Palace. Tallia would be in her element, updating the furnishings, finding staff to keep it clean, to maintain the gardens ... \n\nWould Esyle like it? Would she want to live there, if Tallia and I had to go back to war? \n\nI found myself grinning, as I looked at the rooftops of Cercen. This was not at all what I'd expected, lying in stasis aboard a Halygon ship, on my way into exile. \n\nIt was a thousand times better. Successful general, respected by able soldiers like Langoret and Tudino ... hero of the hour, with a grateful Queen looking to reward me ... on a planet of fascinating women, who loved talking about sex, having sex, and especially having sex with yours truly ... \n\nPlus I had the ear of the Chancellor, a fascinating woman who engaged me at every level. I heard her footstep behind me, and turned around, wondering what she might be wearing this time. \n\nIt wasn't Kanitz. \n\n- \"Hello, Cook.\" \n\nI couldn't catch my breath. \n\n- \"Princess ...\" \n\n- \"No. Only Themis.\" she said. \"Always Themis, with you.\" \n\nMaia Simonia. Themis. Bright yellow hair, amazing brown eyes ... she was wearing a simple shirt, and plain military breeches. It didn't matter; she could have worn a burlap sack and made it look great. \n\nBesides, the simple military attire immediately took me back to the camp outside Tonol. Two years ago ... and I remembered it all, like it was yesterday. \n\nShe closed the gap between us, and took me in her arms. Then she tilted her head upwards, and our lips met. \n\nFor her, it was a hug, and a tender kiss. For me, it was like my first kiss with the girl of my dreams. I was instantly hard, and my knees were trembling. \n\nShe pulled back, and drew me into Kanitz' rooms. \n\n- \"Will you have dinner with me?\" she asked. \n\n- \"I would rake the Palace grounds with you. I'd empty the chamber pots, if you asked me.\" \n\nI'd forgotten the simple beauty of her smile, the incredible sensations I experienced when she laughed. \n\nShe steered me to the table, and sat me down. Then she sat down opposite me. \n\n- \"I've missed you so much.\" she said. \"Even now, we're only meeting because Kanitz wants to create some sort of hold over you.\" \n\n- \"What?\" \n\nMy aide Themis was back. \"I wanted to be here, Cook. But it would never have happened if Kanitz didn't think that it might give her some advantage over you.\" \n\n- \"Why? She doesn't need any ... advantage.\" \n\n- \"My sister and her Chancellor are afraid of you. They fear that you might flirt with one or two of the other parties, and discover what they're willing to offer you.\" \n\n- \"You mean a party like the one that tried to kill me?\" \n\nThemis frowned. \"Don't make a joke of it. I was very afraid for you. I still am.\" \n\n- \"Let's not talk about politics.\" I suggested. \n\n- \"Fine. But you should know: Kanitz will try to use you. That's why I'm here, tonight. To exert some ... leverage on you.\" \n\n- \"I would never hurt you. Or your sister. You don't have to worry about my loyalty.\" \n\n- \"Yet they do, Cook. You mustn't trust that they have your best interests at heart.\" \n\n- \"I appreciate the warning.\" \n\nThemis shook her head. Then she stood up, and transferred her meal to the spot next to me. She moved her chair, and sat right beside me. \n\nThen she smiled, and leaned closer. \n\nI kissed her. She gave up the pretence of eating a meal, and wrapped her arms around me. The sensation was incredible, for me, but I had to remind myself that she wasn't in hemmer. My nagging erection had no place here. \n\n- I worry about you.\" she said, softly. \n\n- \"And I you.\" \n\n- \"Don't. I'm in no danger. My sister negotiates alliances, and Kanitz investigates the advantages to be gained by marrying me here, or there. But they've yet to find a good match.\" \n\nI didn't like hearing her talk about this. Themis wasn't mine - and never could be - but that didn't make it any easier to hear about the royal matchmaking. I really didn't want to know who they were planning to marry her to - he could be the nicest guy in the Kingdom, and treat her like a Princess ... well, as she deserved. I just didn't want to know. \n\nYes, I recognized the irony. She was alone, and chaste, while I was off with Tallia and Kanitz and my bodyguards and Aneli ... and I was the one feeling jealous. \n\n- \"That is why this evening is bittersweet, for me.\" she said. \"It's part reward, and part bribe.\" \n\n- \"Tell me about our daughter.\" I suggested. \n\nShe did, and for a moment I enjoyed the illusion that we were a married couple, discussing our child. \n\n- \"I follow your career - everything you do.\" she said. \"Kanitz lets me read your reports - I love finding out what's going on, from your perspective.\" \n\n\"I know you've copulated with Kanitz. She was very complimentary. But I think I'm happier about your aide - Tallia? I'm told that she's exceptional. Is she good to you? It must be wonderful to have sex whenever you want.\" ",
        "Nope - not even remotely the oddest conversation I'd had. Themis was genuinely pleased that I was with Tallia. She just didn't seem to feel any jealousy at all. \n\nNeither of us was very hungry, but eventually we ate a little bit. Mostly we just wanted to sit close together, our hands frequently touching. \n\nKanitz herself found us sitting that way, some time later. \n\n- \"I'm sorry.\" she said. \"Time to go.\" Then she left the room to give us a last few moments. \n\nThere was nothing more to say. Themis held me tight, and kissed me. Then she was gone. \n\n*** \n\nMy bodyguards were waiting to escort me back to Talley's house. \n\n- \"You alright, Colonel?\" asked the tall blonde. Nasta, I think it was. She'd seen the dreamy look in my eyes, and noticed that I wasn't particularly paying attention to my surroundings. \n\n- \"He's fine.\" said Ishana, the hatchet-faced squad leader. \"Follow us. Keep your eyes and ears open.\" She led the way, and I went along, still floating several inches off the ground. \n\nIt was a fine night. The moons were quite far apart, which allowed a thousand stars to sparkle and shine. I was trying to conceive of a scenario which would allow me to marry Themis. If I saved the Queen's life ... maybe the grateful monarch would give me her sister's hand. \n\nIn the morning, I knew that I'd snap out of it. I had absolutely nothing to complain about. Tallia was wonderful. And there was Esyle to consider. There was nothing at all about my situation to regret. \n\nWe were almost to the landing when Ishana suddenly stopped, and drew her sword. She thrust out her left arm, and shoved me backwards. \n\nI hadn't been paying any sort of attention, and the quick movements caught me off guard. Ishana's push caught me off balance, and I stumbled. \n\nHalf a dozen shadowy figures were rushing towards us. I saw the glint of cold steel. \n\nIshana engaged a pair of them, but they weren't interested in her. It was me they were after. \n\nOut of nowhere, the little blonde - Koroba - sprinted up on my left. She had a pair of pistols in her hands. At a range of two yards, she fired; I couldn't tell if she hit anything. Then she lunged forward, with amazing speed, and practically touched her next target with the end of her second pistol. That shot was muffled - but it didn't miss. \n\nBy the time I recovered my balance, I knew that I wouldn't be able to draw my own sword. Besides, it was only a fancy dress smallsword (a gift from the citizens of Tonol, for my part in the battle that saved them). It was more of a fashion accessory than a weapon. \n\nI side-stepped quickly, and the blade aimed at my stomach sliced through my shirt and waistcoat. It might have taken an ounce of flesh with it. \n\nThere was an arm attached to that sword, which I grabbed with both hands. Then I fell to the ground, taking my assailant's arm with me. It snapped like a dry stick, and I discovered that the person who'd tried to stab me was female - she shrieked in pain. \n\nThen the big blonde, Nasta, stepped in, and nearly separated the assassin's head from her shoulders with a powerful sabre cut. \n\nThe surviving attackers fled, but Ishana didn't pursue. She turned, instead, to make sure of me. \n\n- \"Is he alive?\" she hissed. \n\n- \"I'm fine.\" \n\n- \"He's not just alive.\" said Nasta. \"D'you see what he did?\" \n\n- \"I saw.\" said Koroba. \n\n- \"Eyes and ears!\" snapped Ishana. \"They might come back.\" \n\nI doubted that. Three of my bodyguards were present, and there were four figures on the ground. The others were probably running for their lives. \n\nWithin a few moments, we heard whistles, and Palace Guards came running. They'd heard Koroba's first shot - one of the reasons she'd used her pistols. \n\nI wasn't daydreaming anymore. My heart was pounding. But I knew that I was alive only because of these talented fighters, and their vigilance. \n\n- \"Thank you, Ishana.\" I said. Then I thanked each one in turn. \n\n\"You saved my life.\" \n\n*****"
    ],
    "authorname": "AspernEssling",
    "tags": [
        "assassination",
        "bodyguards",
        "sci-fi",
        "fantasy",
        "intrigue",
        "military history",
        "victory"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/westrons-pt-12"
}
{
    "title": "Pledging Tau Geta Delta Pt. 06",
    "pages": [
        "\"Well, well, look who finally made it.\" Alex laughed as I stumbled through the kitchen and managed to collect up something resembling breakfast. I shot the spunky blond a quick glare before I poured myself a glass of orange juice. I was feeling a bit run down after so many late nights in a row. Even the afterglow of last nights marathon sexing wasn't enough to offset the fatigue.\n\nI was a bit surprised it had taken this long for me to get hammered by that lack of proper rest. I suppose the excitement, tension and everything else had kept me rolling. That and the sex, so much amazing sex. I never imagined having sex as a girl would feel so good, and it had a way of masking other issues. Unfortunately, so many late nights in a row could not be denied forever.\n\n\"How are you not exhausted?\" I grumbled as I plopped onto the seat across of Alex. I hadn't had much of a chance to talk to her for the last couple of days since we had both gone on the pickup challenge to the same bar. She'd acclimated to becoming a woman far better than most of the other pledges, or at least she faked it better than them. It had taken me longer, but now that the initiation week was almost over, I'd actually gotten used to being a girl.\n\nIt was a strange thing. When the Tau Geta Delta President turned all of us from guys into girls, it had been a huge shock. They offered us the option to back out, but if we wanted to join the frat we had to stay a girl for a whole week and we had to take on a variety of sexual challenges. I'd never have imagined that joining a Fraternity would mean I'd end up sleeping with a professor, my best friend, some random guys and a sorority girl. In the end, it had been a wild week of impossible sex.\n\n\"Catnaps. I swear by them.\" Alex smiled at me. I knew she wasn't lying either. I hate to admit I wish I'd have thought of it. There had been plenty of times I could have slept over the last couple of days and managed to keep from ending up on the wrong side of the fatigue curve. Normally, I managed to get enough sleep so napping was always just a lazy notion to me, but this week I could have used it.\n\n\"Well, they certainly work for you. You're looking almost radiant this morning.\" I tried to claw my way back to a good mood. It certainly wouldn't do me any good to grumble my way through the day. Besides, I had at least one more challenge to get through, and I hadn't even heard what it was yet.\n\n\"Why thank you. You look particularly ravished yourself this morning.\" She grinned back. I shook my head at her little joke. We'd all been spending a lot of time in bed, and last night wasn't an exception. It had been a kind of weird experience really. As a guy, the notion of two girls getting it on was a top voyeuristic fantasy of mine. The reality was both amazing and a bit more awkward than I would have thought.\n\n\"So, did you enjoy your visit over to the Deltas?\" I turned things back around to Alex. We'd bumped into each other on our way to the Tau's sister sorority last night. The day's challenge had been to sex up a girl, and with few other options, many Taus had ended up making use of the Delta's willingness to help. I'd spent most of the night in bed with the Delta who had counseled me right after my transformation. Meredith was a smoking hot brunette who kept me busy for hours.\n\n\"Yeah, of course!\" Alex blushed a bit. \"Well, actually, I got crazy nervous. It was just so weird making out with a girl, you know? It took me a little while to relax and just forget about my girly side for a bit.\"\n\n\"I know what you mean. It's kind of funny since I would have loved watching it as a guy, but it was a bit weird playing with another girl like that. Not that I didn't enjoy it.\" I smiled. Our transformations hadn't just been physical, we'd acquired the memories of the girl we'd become as well. Everyone outside of the Taus and Deltas remembered us as the girls that we remembered being. It was kind of strange having a set of girl and guy memories of my whole life rattling around in my head. I remembered being Alison as much as I remembered being a guy. The trick of it was, Alison was straight, and it was a bit of a challenge for her to get it on with another girl, even if my guy side was practically drooling over the idea.\n\n\"Yeah, I never thought I'd actually feel weird squeezing on a girls boobs.\" Alex giggled. \"So have you heard today's challenge?\"\n\nI sensed her desire to change the subject. I was actually a bit surprised, since Alex was usually the one to press everyone about what they'd been doing as girls and proudly proclaim her own conquests. I suppose everyone had a limit, but it was surprising to see her hit hers on this point. Still, I didn't feel like pressing the matter either.\n\n\"I just managed to get through a shower and pull on some clothes, so no.\" I took a drink. I was just glad I didn't have an early class today. That gave me the chance to relax and recover a bit.\n\n\"Okay, so, today we need to find someone and sex someone up in a public place. You know, on the campus green, in a corner of the library. Any place without a door to keep people out. Bonus points for not getting caught. And it doesn't matter who you choose, except it can't be another pledge.\" Alex explained the rules for today. I nodded. It followed with the general kinkiness that most of the challenges liked to promote.\n\n\"So they waited till our feminine modesty to fully kick in before giving us this one.\" I laughed. My stomach twisted a little just thinking about it. I had never been much of an exhibitionist before, but as a girl I found that I had a stronger sense of modesty. As I'd gotten more used to my girl instincts, those had slowly started to take over. A couple of days ago I wouldn't have been nearly as uncomfortable walking around naked, but now I didn't know if I could manage to do it.\n\nThe thought of having sex in a public setting just set off all kinds of bells in my head. The modesty angle was just one. The companion to that was the kinky thrill of avoiding detection. Sure, I didn't want anyone to catch me in the act, but the risk of getting caught had a way of unleashing the kinky senses in my head. I squirmed in my seat a bit at the notion.\n\n\"Oh yeah, these Tau bastards are all kinky.\" She faked a grumble.\n\n\"Like you aren't.\" I giggled. From what I knew of Alex, she was one of the kinkiest pledges. For a while I thought it was just bravado, but after seeing her in action I didn't doubt it anymore.\n\n\"Yeah, well, if I was the one setting up these challenges, you would be able to walk straight or sit down for a week after changing back.\" She smiled wickedly. Then blushed again. \"At least as a guy, my girly side was a bit more tame. A bit.\"\n\nI laughed when she held her fingers up with just a little light between them. I had to remember that Alex as a girl had also gotten private lessons from the kinky professor that liked to give students lessons in bondage and submission. One time had been wild enough for me, but I suspected that Alex had taken the whole course, at least in her memories.\n\n\"Then I'm glad you're not in charge.\" I smiled. My stomach did a quick flip just thinking about the notion of Alex being in charge of anything. With her manic personality it would either be a rapid and spectacular disaster, or an entirely different kind of horror if she actually managed to succeed.\n\n\"Hey! If you give me just half an hour in my room with no restrictions I'll make sure you're singing a different tune when I'm done.\" Alex's eyes turned wolfish as did her smile. I imagined that some kinds of kinkiness surpassed gender boundaries, and I'd just stumbled across one.\n\n\"Uh... maybe some other time.\" I backed away a bit and picked up my glass. I was happy that I really did need to get going.\n\n\"Anytime. Alison, or at least until tomorrow night.\" She giggled and switched from predator to cute smiling girl in the blink of an eye. It was kind of scary that she could do that in an instant, but I knew that I'd done it as Alison in my girly memories. I suppose it was just one of those skills that women tended to pick up.\n\n\"I'll think about it.\" I smiled and gave her a pat on the head as I walked by. I had to admit I was a bit curious . After all the weird stuff I'd gone through this week, it wouldn't be that much crazier to jump on this opportunity. I just wasn't sure I was ready to have her undivided attention.\n\nShe blew me a kiss as I left. I shook my head. She was just teasing now. All it did was leave me wondering what kind of person Alex was as a guy. I knew I hadn't changed so much, but there were important differences too. In some ways, it surprised me how much I had stuck to the same path, but then I suppose that was part of the magic, so that I wouldn't be completely disoriented by the whole gender swap. If Alison was a completely different person then the old me, it would probably have been too jarring. All that meant Alex must have been some overly crazy and enthusiastic guy as well. It was just hard for me to translate that kind of spunky energy over to a guy. I guess I'd find out in a day when we all changed back.\n\nFor now I had another problem. I still had one more challenge to go through with. That meant picking a guy and a place. Neither was an easy thing. I knew I could get Max to do virtually anything anywhere. He was enough of a kinky cad that I didn't worry about that. The problem was whether I wanted to call him again while I was still a girl.\n\nIt had been weird enough sleeping with him. He was my best friend, and I'd spent a night and the next morning screwing him like a woman possessed. It had been pretty much the best sex I'd had as a girl, and had set off a slew of crazy notions. It didn't help that my girl half had romantic feelings for him, or that my guy half was still a bit appalled at all the things I'd done with my buddy. To say that I was conflicted was to put things mildly.\n\nThat didn't change the fact that my panties got wet just thinking about humping Max in some secluded, but public place. I just worried that the Alison part of me wouldn't be able to keep my feelings for him in check and spending more time with him wouldn't help that. There was still a looming question that I didn't dare think about. I wasn't ready to consider it, especially when I thought about Max.\n\nThe easiest path for now was just to get to class. I could get Max to meet me at will if I decided to call him. Until then, I could consider other options. I had run into a couple of other guys after all. Or I could just pick some random guy. It couldn't be that hard to seduce some unsuspecting freshman into the bushes, especially if I pulled out all of my womanly charms.\n\nAs I doodled my way through my morning classes, I knew I really didn't have a choice. My mind was made up, I just didn't quite want to admit to it. I'd come to enjoy the random sex the last few days had brought, but nothing compared to my time with Max. I couldn't deny the way he made me feel, as much as I might want to. It was more than just a raw sexuality, it was something special and terribly scary.\n\nThe very reason why I was reluctant to call on Max was the reason I wanted to even more strongly. As I got used to becoming a girl, it had meant thinking of myself as Alison, and even more so thinking of my life through her eyes, not those of my old male self. In one fell swoop, I'd attained what my girl side had wanted for years, a real chance at having Max as more than just a friend.\n\nThat reality unleashed its own set of crazy feelings. As much as my heart fluttered when I thought about him, my stomach twisted anxiously. I had insisted that our sex was just a friends with benefits kind of thing. How would he react if I wanted more? No matter how much I wanted him as a boyfriend, I would crumble if he pushed me away now.\n\nMy mind raced, and those very thoughts fueled an entirely different reaction from my male consciousness. I was a guy! I didn't want a boyfriend, Max or otherwise! I wasn't even going to be a girl in another day, right?\n\nThat was it. It was the thought I'd been fighting not to have for days. If I didn't think of the question I wouldn't have to answer it. I'd gone to great lengths of mental gymnastics to avoid it, do draw short of the real issue. Sometime tomorrow, I would have a choice, probably the scariest and most impossible choice I'd ever had to make. I would need to decide to become a guy again or not.\n\nI shook my head. I didn't want to think about this. I didn't want to have to decide it. As soon as my class ended, I took a brisk jog through the campus, trying my best to clear my head. No matter what I had a mission to complete, the last thing I needed was to end up failing the challenges. I must have been quite a sight running along the sidewalks with my skirt flapping in the breeze, but I needed to burn off the nervous energy sparking inside me.\n\nAll I had left was twisted logic, anything that would help distract me. I didn't have the willpower to argue with myself any more, or to take the hard path. Before I thought about it any more, I sent Max a text to tell him to swing by the front of the library in a few minutes. I set about focusing myself on what I was going to do next and leaving the big issues for later.\n\nFirst, as kinky as Max was, I worried a bit that he wouldn't be down for this kind of thing. I knew I could push him into it, but I figured the best chance would be for me to spring it on him before he had a chance to prepare himself. He certainly wouldn't say no once I had a hand down his pants.\n\nI didn't have long to plan before I saw him walking up towards where I was sitting. My heart skipped a beat again just from the sight of him. I'd avoided it since I'd left his room yesterday morning for just that reason. My girl senses were on full alert and ready for the big silly lug. My male self only gave me a whimper of objection against the rising heat flowing through me. It wasn't just watching a hot guy, it was that Max was a hot guy and he was mine!\n\n\"Hey hot stuff!\" I waved until he spotted me. I swooned when he smiled. It was just a crazy feeling to get so worked up from just having a guy smile at me. I knew it was as much because that guy was Max as any other reason, but that didn't exactly help me feel any less weird.\n\n\"Ali, hi. What's up?\" He asked. I knew I was probably interrupting his midday break, but I'm sure he wouldn't mind by the time I was done.\n\n\"Well, I spotted something really crazy back here. I just had to show you.\" I nodded towards the bushes along the library's side wall. It was a nice semi secluded spot. There was nothing much there, but the bushes were thick, tall and nearly all encompassing. So long as we didn't make too much noise, no one would notice us.\n\n\"Really, what is it?\" Max asked as I grabbed his hand. I gave him a good tug and started pulling him towards my little sanctuary. I could see the befuddled look on his face, and the growing wariness. I noted that I did like to pull pranks on Max, and given my rather silly behavior, he was probably expecting something like that from me now.\n\nIn a way he wouldn't be wrong. I was certainly going to spring a surprise on him, and I was certain he wouldn't expect it. I giggled and looked back at him as we rounded the corner.\n\n\"Oh, just something round, soft and you won't be able to resist wanting to play with.\" I teased. If he was on his game, he'd figure it out, but I knew once he got confused, he rarely managed to get a puzzle, until the solution was smacked into his head.\n\n\"What?\" His eyebrows furrowed in confusion.. I'd succeeded at least that much. Now all I needed to do was prepare him for the springing of my little snare. If there was one thing I knew, it was Max's weaknesses. As we worked our way into the little clearing between the bushes and the billing I could feel my heart racing.\n\nIt wasn't like I was an exhibitionist or anything. The notion of having sex outside where anyone could find us was both exhilarating and nerve wracking at the same time. I couldn't even be sure that Max would go along with it. My stomach was twisting almost as much as my pussy was quivering. It was the crazy kind of nerves that came with asking someone out for the first time.\n\nNow that we were here, I let go of his hands. I wavered, not really sure just what to do for a moment. I turned my back to him and started to unbutton my blouse at record speed while trying to hide that fact from him. His stupefied state wouldn't last long. I lamented the fact that I hadn't picked out a front release bra today, but at least the one I'd chosen was cute and frilly.\n\n\"Weren't you going to show me...\" Max's words trailed off when I turned back to him with my shirt open and my lace covered breasts on display. His eyes bulged as he took them in, and it took him a second to snap out of their hypnotic effect and look up at me with a mix of puppy like happiness and raw confusion.\n\nI didn't say anything. I stepped towards him, grabbed his hands and pulled them to my chest as my lips went for his. I had to go up on the tips of my toes to make it, and everything came together in one perfect instant. He squeezed me instinctively as his hands cupped my soft chest. His lips were passive until the shock wore off and his tongue came to life, his hands on my breasts and our tongues nearly down each other's throats.\n\nHe let me down gently until I was standing on just my whole feet, with my neck tilted back for him. His hands were tender and strong. It still felt strange having my chest squished and molded like this, but it felt wickedly good too. The girly part of me was in full control now, with Max in my arms and my tongue dancing with his.\n\nAfter an eternity we came up for air. We both panted, half from denied breaths and the other half from the lust building up inside us.\n\n\"Why you wicked little girl.\" Max smiled as his squeezes brought little gasps of pleasure to my lips.\n\n\"Oh, you haven't seen anything yet, hot stuff.\" I giggled as I slid my hands down and started to unbuckle his pants. I could feel his cock pressing against his pants, already hard and eager for me. It was hard to express just how happy and horny that made me. It was strangely validating to know I'd aroused him so quickly. The trick now was to keep him off guard until he was too far gone to even think about breaking free. As soon as I had the buckle undone, I pushed down his pants and boxers in one quick push.\n\n\"What are you... whoa!\" Max gasped as my hand slid around his cock and I ran my fingers up his hard shaft in a way I knew would drive any thought of objecting straight out of his head. I had something of an unfair advantage when it came to knowing what guys liked and I wasn't afraid to use it.\n\nThere was one other thing I knew guys really liked and before I even thought about it, I'd given Max a quick kiss and then slid down. I fell onto my knees and for the first time, I was staring at a guys cock. Sure, I'd seen them a lot in the last few days, and looked at my own when I'd had one, but this was different. My eyes were inches away from his throbbing hardness, and it wasn't until I started to open my mouth that my male mind caught up with what my girly side was doing.\n\nAs Alison, I'd done this a few times, mostly out of curiosity more than anything else. My old boyfriends had liked it though, and I had too, in a wicked way that I hadn't been quite willing to admit at the time. Now, I was kneeling before Max, and I wanted to do something special for him, something that he'd not soon forget, and to my girl side, going down on him was a perfect way to show him my affection.\n\nMy guy side was not so quick to agree with the idea, but it was too weak to hold me back now. I bent in and gave him one long lick, from the base of his cock to the bulging tip. From the way he groaned, I knew he was doing everything he could to resist making more noise. Max liked to let his passion fly, but right now, given where we were he knew he couldn't draw attention to us.",
        "I wasn't going to make it easy on him, or give myself a chance to back out either. I opened my mouth, and with my lips wrapped around his tip, I took his whole cock into my mouth, licking and sucking all the way down. This time Max let out an audible moan as I rubbed the whole length of his cock with my tongue. My mouth filled with the masculine taste of his shaft and I shuddered from head to toe, but especially between my legs.\n\nMy male side was just in shock now, unable to quite come to grips with the scene I had created. I was kneeling before Max, with my shirt open, my breasts freshly fondled and my mouth full of throbbing cock. It was an embrace of my feminine side that left that old part of me reeling. I'd never been gay or even curious before, but I did my best to reassure that traumatized part of me that I was a girl now, and I had enjoyed getting eaten out more than once, this was just returning the favor and experiencing another facet of being a woman.\n\nThe truth was, beyond those fading objections, I was actually enjoying myself. It was fun playing with his cock, and doing my best to pleasure him so much that he couldn't restrain himself from making noise. A careful suck, a teasing flick of my tongue and the pressure of my lips as I bobbed my head over his cock all combined as a flurry of pleasure that forced him to lean back against the outer wall of the library.\n\nI debated as I teased him. It wouldn't be hard to get him off now, but it was always possible that he would regain his composure and object to doing more once the cloud of lust cleared. I'd sprung this on him so far, and the demands of his arousal were no doubt in control now. If I let him recover, he might not be so accommodating, and I needed him to get me off in public as well for the challenge to be completed. Not to mention the fact that I was extremely horny right now as well. I wasn't going to let him off the hook so easily.\n\nI gave him a few more tender sucks and then slowly pulled my lips off of him with a lewd pop. He was looking down at me, his chest heaving with ragged breaths and I knew just how hard it was for him to hold himself together. I smiled back up at him. Now it was time for the next round of kinky fun.\n\nI turned around, still on my knees and then fell down onto all fours. I'd managed to do a bit of planning for this moment. While I hadn't been able to ditch my bra, my panties were entirely a different matter. I knelt in front of him, on my knees, held up with one hand while I reached back and grabbed the hem of my skirt. My smile must have been ear to ear when I pulled up and showed him my bare and dripping wet pussy.\n\nThe look on his face was worth it. The mixture of shock and the wonder of providence was just so terribly cute. Here he was, half naked with his cock freshly sucked and a girl presenting herself for him. I don't think there was a straight man alive that could resist at that point.\n\nHis look of excited bafflement turned to inquiry as he moved behind me. I shook my head eagerly. I wanted this just as much as he did. I was so hot and horny that I'd have done just about anything to get his cock inside me now. I whimpered with anticipation when his hands started to rub my bare ass. The ache to be filled was just so strong now.\n\nMax must have felt it as well, and he didn't waste any time on preliminaries. He rubbed along my slit just long enough to find the entrance to my quivering passage and then thrust into me hard. I had to bite my lip to keep from crying out from the wonderful sensation of his cock sliding into me. As wet as I was, and as hard as he was made his entry easy, even as I felt the friction from this position drive me wild.\n\nIt took all my will to not let half the campus know what I was doing. I was a noisy girl in bed. I had discovered that over the last few days. I knew the guys enjoyed it, and the feelings that were stirred up by sex made it just so hard to be quiet. Now, the struggle to hold in all of those feelings was driving me wild, almost as much as the hard cock pounding away between my legs.\n\nWe quickly found a hard, fast rhythm that we knew couldn't last. I just felt so good, and the wickedness of doing this in such a public place was driving me even more wild. If I looked carefully through the bushes I could see the edges of people walking by. They were so close, and yet, if we kept quiet, they'd never know just what was happening.\n\nStill, we were panting, and the smack of our naked flesh was a sound few college students wouldn't recognize. That just made me even hotter, wetter and for Max's benefit tighter. The wickedness of doing this was just too much.\n\n\"Oh yes, harder, yes...\" I panted as Max gripped my hips and slammed into me. I did what I could to meet him, shifting my hips and grinding against him when he was all the way inside me. It was wild, raw and most of all crazy hot.\n\nOur panting grew louder as our pace increased. I was losing control of my voice as well. My discipline slipped with every wonderful thrust and as the needs of my body just grew stronger. Everything was driving me wild, from the way my breasts jiggled in my lace bra or the way my hair billowed around me as I bounced back and forth. Everything reinforced my inner sense of being a woman getting seriously fucked.\n\nI knew Max was feeling something similar from the way his grip tightened and his thrust grew harder but more uneven. We were panting together, our ragged breaths filling the air as he finally squeezed my waist and thrust hard and deep. The sudden force of it broke through my restraint and we both let out muffled moans of pleasure.\n\nNot screaming out in pleasure was probably the hardest thing I'd done that week. Every part of my soul wanted to cry out as loudly as my orgasm was intense. I'd never cum like this before, and it all of my remaining strength to keep from collapsing right in that spot and simply melting in place. My whole body was quaking with pleasure as I felt Max filling me with his seed.\n\nI dropped my head, panting as I lock my elbows and just tried to hold steady and enjoy the numbing warmth flowing through me. I tried to savor the moment, panting and sweating while I knelt there.\n\nThat's when I heard a quiet, slow clap. It took a moment to register through my pleasure wracked mind, but when it did, that sound tore through everything. My eyes snapped towards it, and that's when I collapsed onto the ground.\n\n\"All right lovebirds, get dressed.\" A bemused looking campus officer stood in our escape route with her hands on her utility belt. I don't think I could have blushed a deeper shade of red than in that moment. Max was still lodged inside my upturned and very naked ass. Worse yet, she'd probably been watching us for at least a little while and that thought just made things worse.\n\nWe didn't reply. Max pulled his rapidly deflating cock out of me and we turned away from her as we stood up and got dressed. Max pulled his pants back on in a flash while I made sure my skirt went back down over my ass and my hands worked as hard to get my blouse buttoned as they had to open it up a few minutes ago.\n\nFinally, we turned back to her, both blushing furiously. My mind was racing. I'd been caught! Just what was she going to do to us? What would the Tau's say? Was I going to be arrested? Whatever afterglow I'd had was squelched by the series of wild and scary questions boiling up inside me.\n\n\"You know how many rules you two were breaking just now, right?\" She gave us a stern glare as we wavered in front of her.\n\n\"Y... yes, Ma'am.\" I stammered as Max nodded beside me. It wasn't that she was so much older than me, but I didn't want to risk upsetting her not when she held my future in her hands.\n\nFor a minute she just stood there, looking over our disheveled, panting selves. I could feel my heart pounding in my chest. She managed to keep a very dispassionate expression that just made my hair stand on end.\n\n\"You won't be doing anything like this again, will you?\" She asked. My heart must have skipped a beat at that. A glimmer of hope had appeared.\n\n\"No. We definitely won't.\" We responded emphatically in unison.\n\n\"Good. Then get out of here.\" She stepped away from the exit and I don't think I've ever bolted that fast before. We were half way across campus before either of us slowed down.\n\n\"That, was wild!\" Max shouted when we'd finally made enough turns to have lost that campus cop even if she'd been following us. I could feel the adrenaline rush as well. The thrill mixed with the lingering effects of my orgasm to leave me surprisingly ready for more.\n\n\"Yeah, wow.\" I panted and pulled myself up to Max again for a big wet kiss. Our wild passion reflected in a moment of crazy public affection before I pulled back.\n\n\"How about we head back to your room?\" I gave him a wink. I'd never have expected it, but getting caught was making me even more horny now that we'd escaped. I couldn't remember needing to fuck this bad again so soon.\n\n\"Yeah! Let's go.\" Max smiled, a bit surprised, but I could tell he was just as eager for another round as I was.\n\nWe ran the rest of the way to his room. I knew at least the next round would be wild, passionate, and needy, if my own feelings were any gauge. I followed him just a few steps behind, so I could enjoy his ass.\n\nI'd never thought it would be so much fun chasing after a guy, or catching one. The truth was, I was wild for one other reason, and no matter what I chose, spending another afternoon in his bed was a great way to keep from worrying about it. I'd have no choice but to make my decisions all too soon.\n\nThe End ( Part 6 )"
    ],
    "authorname": "Farleven",
    "tags": [
        "gender bending",
        "fraternity",
        "magical change",
        "college",
        "pledge",
        "initiation",
        "sex games",
        "public sex"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/pledging-tau-geta-delta-pt-06"
}
{
    "title": "The Ward Ch. 07",
    "pages": [
        " Thanks, Rumpole, for your knowledgable encouragement. Thanks readers, for being so nice. Hope you like this one x.\n\n***\n\nBy the time Nicholas reached the front doors, they were already open. His mother stood at the doorway, wrapped in a red silk gown. \n\n\"Delighted to make your acquaintance, Lord Jaromir,\" she thinly smiled, her blue eyes watchful as they took in the visitor's appearance and moved beyond him to the quiet yard. \"A peculiar hour to call upon us without escort.\"\n\nAleksis shrugged sheepishly. \"I was clumsy with my mount, Ma'am,\" he confessed with a boyish grin. \"A most humiliating spectacle. If it would not be an imposition, might you accommodate me for the night? My servants will come at daybreak.\" \n\n\"Presuming they would know where to find you,\" Mary replied, glancing to Nicholas as he came to stand beside her. \n\nThough the timing was inconvenient, Nicholas was quite pleased the impressive visitor from Edmund's ball had found his way to their abode. The estate was certainly large enough to keep a gentile guest ignorant of the more sinister proceedings. \"Well then, Lord Jaromir, won't you please-?\"\n\n\"Nicholas!\" Mary sharply warned, narrowing her eyes at Aleksis' calm demeanour as though seeing him for the first time. \n\nA courteous smile still played about Aleksis' lips, though the warmth in his eyes vanished. \n\n\"I have seen you before tonight,\" Mary said slowly. \"Haven't I?\"\n\n\"You are so esteemed in society, I believe our paths must have crossed,\" Aleksis bowed.\n\n\"It should not depend upon my verbal invite for you to pass this threshold,\" Mary concluded, keenly appraising Aleksis' unusual appearance; his magnetic black eyes and shining gold hair. \n\n\"I would never be so audacious to enter a respectable home without invitation,\" Aleksis lightly protested.\n\nDressed in a beige riding outfit that seemed more appropriate for a midday expedition, only his black cloak was suitable for the night. He was confident, entirely alert and hardly unsettled by arriving on foot unaccompanied by servants.\n\nNicholas glanced between Mary and Aleksis, thoroughly puzzled but not daring to enter the conversation, as it was clear his mother was captivated by some mystery. \n\n\"And you might hesitate for reasons beyond propriety,\" Mary said shrewdly, her astonishment quickly melting to an exuberant triumph as her suspicions began to unfold.\n\n\"Other reasons?\" Aleksis lazily queried. \"Ma'am, I am quite fatigued-\"\n\n\"And likely famished, too,\" she interrupted, her deep cobalt eyes fixed on his perfectly shaped mouth. \"Your behaviour and appearance bring to mind a strange legend...\"\n\n\"Am I to be tasked with disproving superstition at this hour?\" Aleksis politely inquired with a weary tone to suggest he was being unfairly teased. \"It is hardly kind of you.\"\n\n\"I am not known for kindness, my Lord. Indulge me,\" Mary challenged, showing her teeth in a sinister smile. \n\nSilence fell for a time, only offset by the hoot of an owl from the forest and the gentle rustling of trees. \n\nAleksis' relaxed stance slowly straightened to an intimidating height. All frivolity dissolved from his expression, which was overtaken by a surreal severity unsuited to such a young face. At last, it seemed an unspoken understanding had been established. \n\nBoth Mary and Nicholas unconsciously shivered when his chilling gaze passed between them. Without another word, he briskly turned on his heel and strode from the property. \n\n\"That man...\" Mary trailed off, watching Aleksis' imposing figure sweep through the gate entrance and into the dark. She briskly shook her head and fixed a piercing gaze on her son.\n\n\"There is more to the girl than we anticipated,\" she said sharply, dismissing the servants with an abrupt wave of her arm. \"Make her talk to my satisfaction, Nicholas, or I will.\" \n\n***\n\nNicholas took a moment to gather his thoughts before entering Sage's prison. Her eager expectation touched with surprise at his return confirmed she was acquainted with the strange arrival. \n\n\"A pleasant visitor,\" Nicholas remarked, his eyes drawn to her lovely breasts. \"He has fascinated my mother, and I must caution you now that she is running out of patience with you.\"\n\nSage snorted. \n\nNicholas sighed deeply, toying with Sage's hand wearing the blue diamond ring, stroking her dainty fingers. \"She will break you, kitten, or worse. I will do everything in my power to prevent it, but there is only so much I can avert without your cooperation...\"\n\nSage fell into cautious silence, mulling over her disappointment and fear. Aleksis had not rescued her and she knew exactly why. Powerful as he was, that power would not extend far if he could not cross the Stiles' threshold. He was lucky to make it through the gate entrance.\n\nLost in her troubled thoughts, Sage jerked with surprise when the lower end of the platform slipped to a decline with her still secured to it. Nicholas went about attaching a new set of cuffs to her wrists, the shackles connecting to a chain looped through a ceiling beam. He steadily pulled until she was completely upright, her toes just brushing the ground, then fiddled with the fastenings on her wrists and ankles and the X-platform fell away from her. \n\nHorrified, Sage stared down her body, her breasts exposed with the thin strings attached, her unfastened gown slipped down to the floor. Her arms were completely extended above her head; she was almost completely suspended.\n\nNicholas quietly considered her beautiful figure; her firm, youthful breasts and smooth, flat belly. Flawless fair skin and long, graceful legs. Lustrous, shining dark hair that was like the finest silk to touch. \n\n\"I never intended to treat you this way,\" he admitted, \"not before I could train you to enjoy it. But there is no time. My mother is determined.\"\n\nNicholas paused by the opulent bed, considering the wall holding a strange assortment of sinister implements and selected a small whip. When he stood before Sage, he was solemn. \n\n\"I do not want to do this, Sage,\" he warned, using the butt of the whip to force her chin up. Staring into Sage's unique sapphire eyes, his other hand carefully threaded through her hair, affectionately holding her in place. \"Do not force my hand.\" \n\nSage wisely bit back a savage retort, but Nicholas registered her mood. \n\n\"Ah, kitten,\" he said regretfully, releasing her hair.\n\nIt happened so quickly, Sage barely registered a sudden swish and ear-splitting crack through the air. A searing pain flashed up her back, and she screamed. \n\n***\n\nAlekis circled the entire estate, with no new discovery that might allow his trespass. In a rare show of frustration, he buried his fist into a sturdy tree; the ancient, thick oak broke apart, no match for his strength. \n\nStill breathing heavily, he froze and keenly listened. He sniffed the air curiously. \n\n\"Impossible,\" he mused, immediately tracking the scent. In the blink of an eye he rounded the corner and pulled up with surprise. \n\nSimon cried out and scrambled back, falling into a hedge. Twisting onto his front to crawl away, the boy became aware of being airborne.\n\nAleksis tightened his hold on the scruff of Simon's tunic, lifting the lad higher to look into his eyes. \n\n\"What are you doing here?\" Aleksis sharply questioned. When Simon continued to gape at him, the vampire gave him a little shake. \"Answer. Why are you near these grounds?\"\n\n\"Sage left with Lord Stiles,\" Simon rasped, shaking with fear. \"I cannot believe she would do so willingly. The others would not help without Lord Bard's permission. I stole a horse and-\" \n\n\"I knew it was too soon to expect Edmund,\" Aleksis muttered, gently releasing Simon, who sank to the ground and remained there. \"And what did you expect to achieve alone, boy?\" \n\n\"I don't know,\" Simon stubbornly kicked his foot into the dirt. \"More than you have, thus far. I know you are here for her.\"\n\nDespite his frustration, Aleksis found himself grinning at the boy's impudence, yet another quality he missed about Sage. As he continued to stare at Simon, the mirth slowly faded from his face. \n\n\"When Edmund and his loyal Steward arrive, they will have no authority here,\" Aleksis stated, his fine brow contracted with a foreboding thought.\n\nSimon cowered as Aleksis thoughtfully circled him, his gleaming black boots seeming to skim across ground without touching it, he moved so lithely. \n\n\"Neither you nor I, alone, can aid Sage as things stand.\" Aleksis paused and looked to the sky. \"But I could take a route that would be dangerously effective. It would bring into question my longstanding notions of responsibility. I would be fully accountable for what ensues.\" He sighed harshly. \"They will torture Sage, or worse, unless she speaks. I cannot allow it.\"\n\n\"A-Are you going to k-kill me, to strengthen yourself?\" Simon stuttered as Aleksis ceased pacing and crouched before him. \n\n\"Only if you choose,\" Aleksis answered, ruffling the startled boy's unruly curls with a sad smile. \"You are witchblood, Simon.\"\n\n***\n\nNicholas laid the whip aside, removing his gloves to wipe sweat from his brow. \"You are uniquely defiant, Sage,\" he said curtly, not without admiration. \"But you cannot win this battle. My hand was not heavy, and I chose a kind lash. You won't even scar.\"\n\nSage weakly lifted her head, cheeks damp with tears, her eyes still filled with withering contempt. \n\n\"Did you know,\" Nicholas continued, \"My mother has a lash that draws a strip of flesh with every blow?\" \n\nSage merely raised her eyebrows in a silent dare. Nicholas irritably smacked his lips at her courage.\n\n\"I suppose you have discerned that you are more valuable to us alive,\" he added, turning to the door as a servant knocked. He bade them enter, and a manservant quickly placed a bowl of steaming water with a cloth on the table before bowing out. \n\n\"Well, since you were so unaffected by the lash, you'll hardly feel this sting,\" he remarked, soaking the cloth before applying it to the welts on Sage's upper back. \n\nSage hissed as the saltwater sharply reacted against her raw wounds. Nicholas quietly chuckled behind her, his free hand smoothed around her belly and up to gently cup a pouting breast. A groan passed through Sage's grit teeth when he found her nipple and pulled, rolling the hardening peak between his fingers at the same time he pressed the damp cloth into a particular sore point with unnecessary force.\n\n\"Do you enjoy pain?\" he murmured by her temple; his tongue traced the shell of her ear. \n\nCasting the cloth aside, he stepped close again, grinning when she moaned at the contact; his clothed chest flush against her back and both hands roaming her body, her breasts, down her inner thigh...\n\n\"Urgh!\" Sage snarled her displeasure as he fondled her, unwilling to waste words on him. He would ignore her pleas, and she had no intention of giving him the information he wanted. It was a hopeless case.\n\n\"Perhaps a more pleasurable pain, hm?\" he breathed.\n\nSage clenched her fists, taking deep breaths as she felt something hard and warm seemingly spring from nowhere and rub her buttock. Nicholas stepped away for a moment, only to return to face her, rubbing his slickened member between her legs. \n\n\"If you still insist on preserving your virginity...\" he said thickly, thrilled by their perfect positioning and the glimmer of real fear in Sage's eyes. \n\nHolding her steady with one hand on her breast, he lined up with her pussy and tensed his hips, sighing with pleasure as his cock slowly slid into her, just a little.\n\nSage couldn't wipe the horror from her face, until Nicholas seized her jaw and forced their lips together. Being joined at two ends seemed the worst thing thus far, and she'd much prefer he whipped her again.\n\nNicholas groaned with delight and frustration, eager to bury himself completely and fuck the untried girl as she hung helpless for his pleasure. A girl who rejected him at every turn. And still, she offered nothing.\n\nNicholas quickly withdrew his cock before causing reckless damage, then stepped closer, re-angling, his hands squeezing the taut flesh of her buttocks. Then his fingers slid inwards, already oiled form applying to his cock, and began to pry her back passage.\n\n\"No!\" Sage broke her silence. \"Nicholas, please, no!\" \n\n\"Who was the visitor you expected?\" he slurred, struggling to speak through a distracting mixture of lust and triumph. \"Who is that man to you?\"\n\n\"H-He...he...\" Sage managed, but it was clear to them both she had no intention of answering.\n\n\"Kitten,\" Nicholas ground out, working two fingers inside her. No matter how she strained and struggled, she had nowhere to run. \"It is too late for you, now.\" \n\nSage bit her lip, silently weeping as he eased his fingers out, and moved to stand behind so he could caress the front of her body. Sage squealed with discomfit when his hand cupped her sex, and began to toy with her soft, warm folds, still wet from his actions before, his fingers dipping in. For a while he continued to simulate her as she futilely squirmed, her smooth, delicate skin perspiring beautifully by the glow of candlelight. \n\nNicholas smiled as her breathing accelerated from anger, frustration and arousal. He wrapped an arm about her, lifting her slightly to guide his cock where he wanted it. Then his hand returned to the apex of her thighs, fingering, rubbing, pinching and circling her swollen nub, finding it easily despite her hips jerking to avoid him. Gently relaxing his hold on her waist, he let her slowly descend, feeling the initial resistance against his cock, until Sage's body inevitably yielded and the tip of his cock pushed through.\n\nSage yelped and pulled on her chains, using them as leverage to stay above, but Nicholas' arm increased pressure, his hand worked more urgently on her pussy.\n\n\"Stop! Stop!\" she sobbed, arching against his chest to disengage him.\n\n\"Shh,\" Nicholas crooned. \"I've hardly entered. Relax, Kitten, and it will hurt less, I promise.\" So caught up in the act, all thoughts of interrogation had left his mind, which was now hazed with ecstasy. \n\nCrying angrily, Sage closed her eyes with disgust and succumbed to the inevitable, forcing herself to stop tensing and adjust to his size. \n\nNicholas shuddered with delight, feeling her obey, her unused channel indignantly spasmed around the invasion. He held position and continued to toy with her more gently, then slowly lowered her some more.\n\n\"Stiles!\" Sage shrieked. After kicking out in a panic, she quickly stopped struggling; it only aided his entry. The initial burning sensation eased, she was uncomfortably impaled, but at least the pain subsided. She could feel his unyielding girth embedded inside her, pulsing with delight. It was currently the worst violation she could imagine experiencing. \n\n\"Breathe deeply,\" Nicholas kindly advised. \"Relax and breathe, Sage. It is not so bad if you are mindful...\"\n\nSage heeded his direction, Huffing and forcing her tension to dissolve. It wasn't easy, but it helped, and the fact it both made the act more endurable but was also cooperative on her part, only further enraged her.\n\n\"Gods, Kitten, I cannot remember an experience as divine as this,\" Nicholas panted, slowly sinking a third inch which wrung a strangled whine from her throat. \"When we are married, I will have an artist portrait this moment...one of many...\"\n\nLost in sensation, his fingers delved into her front, feeling his shaft through the soft barrier. His cock twitched impatiently as it partially slid out, and he breathed the scent of her hair, licked her neck, kissed her turned cheek and slowly pushed back into her. \n\nSage began to feel delirious, suspended in the air, naked in the arms of the man she hated most. The forced the rise and fall of her body, his cock working in shallow thrusts while his fingers tormented her most sensitive place. There was pleasure, pain, and no dignity for her. The act would appear slowly erotic to any viewer, which only made it more hateful.\n\n\"My little virgin...you are all mine now...\" Nicholas bit her shoulder, groaning into her skin. Sage arched, her head fell back on his shoulder, heavily frowning. The unusual back penetration, the rude touch to her front, the bite...\n\n\"Good girl,\" Nicholas cooed, his voice unsteady and strained. \"I never dreamed we would finish together our first time....\"\n\n\"N-No!\" Sage's pretty face constricted as a powerful sensation began to build, it was unpleasant and seemed to burn, surging from her aching sex and tremoring about his cock gently working inside her. \n\nSage groaned desperately and the chains rattled; her clit painfully stimulated, somehow accentuated by the violation as a harsh pleasure streaked through her body, like a defence mechanism to cope with the unnatural act. \n\n\"Yes...Yes!\" Nicholas grunted, feeling fresh juices coat his fingers as Sage seized up in his arms with a loud cry. He gasped, holding her tightly to his chest and emptying inside her tight warmth, enjoying her chest heaving under his supporting arm, knowing perfectly well her nipples were hard. \n\nWith her head still lolled back against Nicholas' shoulder, Sage continued to draw deep breaths, fighting to regain composure in the wake of her most horrible life experience thus far. Nicholas held position for a while, both of them panting and exhausted, before carefully sliding out of her aching behind and almost staggering to sit on the bed. He smiled lazily, watching his cum drip down her thighs. \n\n\"You took me at a mere half-length,\" he mused. \"I do not know what motivates my kindness with you, kitten. Perhaps this is true love, after all.\" He hoarsely chuckled when she ignored him. \"I will teach you pleasures of which Edmund has no knowledge. That strait-laced do-gooder would bore you to death, believe me. I will make a far more interesting husband, Sage. Your life will never be dull.\"\n\nSage glared with such speechless rage; Nicholas laughed heartily.\n\n\"I've preserved your virtue,\" he reminded her. \"You might thank me.\" Considering the time that had passed, he sobered. \n\n\"I whipped you, you divulged nothing, and we both took our pleasure,\" he summarised, as though it balanced all grievance between them. \"Games aside, Sage, you must give me something to tell my mother.\"\n\n\"I would love to tell her many things!\" Sage spat. \n\nNicholas impatiently shook his head, tucked his cock away and worked at the fastenings on Sage's wrists and ankles. Once free, she was too weak to offer much fight, and ended up on the bed under Nicholas, her hands and feet tied with rope. He pulled her hair, holding her to the soft duvet. \n\n\"How can I make you understand?\" he insisted. \"The difficulty you present is not worth the cost. You can still live a very comfortable life with me, Sage. I desire to make you happy.\"\n\nSage spat in his face, and his grip on her hair tightened painfully, his fierce gaze did not waver. \n\n\"My mother will not be denied. If you refuse to yield, she may determine you a lost cause and act accordingly. There is no middle ground.\" His eyes hardened and he wiped her saliva from his cheek. \"There is no middle ground, Sage. Understand?\"\n\n\"I'm not simple!\" Sage sneered at him, twisting angrily in his arms. \"I take your meaning, and I don't care. The sooner the better, if it means I will be free of your presence. Let her dispose of me.\" \n\n\"That is my fear,\" Nicholas answered, clawing a hand through his dark hair with frustration. \"You are too foolish, kitten.\" \n\n\"All your fixation and schemes and tricks will amount to nothing!\" Sage taunted through her teeth. \"All this effort to merely discard me!\"\n\n\"You won't be discarded,\" he said quietly. \"You are witchblood. She will have uses for your body.\"\n\nSage shuddered and tried to roll him off her, but it was pointless. \"They will come for me.\" ",
        "\"Who?\"\n\nSage averted her eyes. \"Edmund.\"\n\nNicholas grunted dismissively. \"You had better hope that he doesn't,\" he warned, lowering his head to trail kisses up her neck. \"He is no threat. The danger to you lies within these walls. And I so want to keep you, kitten.\"\n\nHe thoughtfully kissed the side of her mouth before vacating the bed and pulling the blanket to cover her nudity. Before leaving the room, he picked a specific chain from the wall, forced it about Sage's neck and locked it around one of the bedposts.\n\n\"I enjoy your hatred,\" he announced, readjusting his clothing back to modesty. \"I will be your Master, Sage. I will also protect you, as best I can.\"\n\nSage made a snarling sound and turned her face to the bedding.\n\n\"There is no way out for you,\" Nicholas informed her, watching her irritably wriggle against her binds beneath the duvet, delighted to have finally found a woman he considered a worthy companion. But she was no good to him dead. \"I may have found a way to buy you more time.\" \n\n***\n\nA servant knocked and announced Nicholas into his mother's chamber. She was still awake, sitting listlessly by candlelight with a glass of wine. \n\n\"Did you find success with our guest?\" she inquired.\n\nNicholas glanced behind as the servant closed the door to give them privacy. \"Sage knew that Jaromir had arrived, before he made his presence known. They are connected.\"\n\n\"That we already know,\" Mary said with wry impatience, sipping her wine. \"I hope you did not spend the last hour exchanging pleasantries.\n\nNicholas relaxed against the door and crossed his arms. \"I whipped and violated her, to no avail but my own pleasure. Whatever she does or does not disclose, we cannot verify it. Even if she reached a point of cooperation, we cannot trust her to demonstrate it. We cannot empower her in the slightest, mother. It would be foolhardy.\"\n\nMary tapped her nails along the table.\n\n\"She can be forced to marry me,\" Nicholas carelessly went on, still appearing nonchalant. \"Which was the original basis of our pursuit.\" \n\nMary sighed harshly; her lips pursed with displeasure. \n\n\"Jaromir will return for her,\" Nicholas quickly added, before she could overrule him. \"I know how deeply he interests you. You saw the manner of his departure; he will return and we could question him.\" \n\n\"I suspect that endeavour could be our demise.\" Mary finally looked up from her nails. \"I chose this girl for more than your amusement, Nicholas.\"\n\n\"As I am aware,\" he swiftly replied. \"She is rare on account of more than spirit. It might not be prudent to irreparably damage her. If you've taught me anything it is to act with calculation and not prematurely.\" \n\n\"You are defending her welfare,\" Mary tartly surmised, her eyes shrewdly narrowed. \"How strangely romantic of you, Nicholas.\"\n\n\"We value tradition,\" he retorted, his tone still respectful. \"A husband is master and protector of his wife.\"\n\n\"Even if she despises you to her dying breath?\"\n\nNicholas' determination did not waver. \"Then that is her choice. I hold to my standards.\"\n\n\"Are you yet married?\" Mary smiled at Nicholas' angry flush. \"Very well, you have made a compelling point. There is little to be revealed by her corpse. She is more useful to us alive and I suppose I should put your fears to rest, darling, I never intended, nor do I intend, to murder the girl.\" Her smile widened to a taunting grin when Nicholas exhaled with visible relief. \n\n\"So, are you appeased that your love is safe?\" she teased, coyly batting her lashes. \n\n\"Thank you, mother,\" he answered through his teeth, disliking the insinuation of his weakness. \n\n\"You say you violated her?\" Mary purred. \"How?\"\n\nNicholas could smile genuinely this time. \"We bargained to extend her virginity. I fucked her another way.\" \n\nMary's face transformed; her eyes sparkled with amusement. \"If she is truly disobedient, sometimes the whip handle is more convincing, than the lash.\"\n\n\"I will keep that in mind. On this occasion, my cock sufficed.\" \n\n\"I'm sure she enjoyed it,\" Mary laughed.\n\n\"I ensured we both did,\" he smugly bowed.\n\n\"I dispatched a messenger to hasten the clergy,\" Mary informed him. \"I want the spell underway long before daybreak.\" \n\n\"I shall enjoy the last hours of Sage's resistance,\" Nicholas smirked.\n\nStill chuckling, Mary dismissively waved a hand and turned her attention back to her wine. \n\n***\n\nSage stirred with a distressed moan, feeling stifled under the weight of a man. Nicholas was at her back, thankfully clothed, but still revoltingly close. \n\n\"Merely hours till dawn, Kitten,\" he smiled into her hair, knowing she was awake by the way she tensed with loathing. \"I know you will make me a proud husband and father.\" \n\n\"I look forward to disappointing you,\" she retorted. \n\nNicholas laughed; his cock hardening. \"Oh, Sage...\"\n\nThe doors burst open. Nicholas jerked up with surprise as Mary hurried into the room, a flock of servants following. \n\n\"The Guard is here,\" she said sharply, her angered gaze on Sage. \"They will not be refused. We must hide her, quickly.\"\n\nSage's scream for help was caught under Nicholas' palm. \"I thought the Guard-?\"\n\n\"They are not all in our employ!\" Mary snapped, her eyes roaming the room as the torture implements and chains were quickly covered by servants. \"They must have a very compelling reason to intrude with such insolence.\" \n\n\"Edmund,\" Nicholas muttered, stuffing a cloth into Sage's mouth and roughly securing it with rope. \n\n\"What could he possibly-\" Mary frowned, a heavy tread fell behind her and she swept around.\n\nA large man in a black leather uniform crossed his arms in the doorway, observing at the servants scurrying about the room. With dark green eyes, of great height and study build, he might be very handsome if his face was not grim and foreboding; mouth set in a thin line. \n\n\"I convinced them to begin at the West Wing,\" he announced, his voice naturally cold. \"If they find matters of the occult...\"\n\n\"I am not a fool. Stephan, could you not have warned of this?\" Mary hissed, glancing behind him to check none approached. \n\n\"You are fortunate I was advised at all,\" Stephan drawled, his soulless gaze drawn to Sage's struggle. \"This pretty thing is the cause of upheaval?\" he inquired; eyebrow arched as Nicholas continued to restrain her. \"I've not seen her before. Who is she?\"\n\n\"Nicholas' fianc\u00e9,\" Mary snarled. \"Who ordered the search?\"\n\n\"A strange coincidence of characters commanded the attention of the Guard's most senior,\" Stephan smiled wanly, still observing Sage, his eyes flickering between her flushed face, her young breasts; his lips twitched as Nicholas forced her down, exposing the red stripes on her upper back. He sighed; the sound both bored and wistful.\n\n\"You have been accused by two very noble families, who demanded immediate action. The matter could not be ignored, or delayed.\"\n\n\"Two? I take it Lord Edmund Bard was one?\" Mary snapped.\n\nStephan gently bowed; his crossed arms belied the respectful gesture. \n\n\"And the other?\" Mary demanded. \"Lucille Amelie?\"\n\nStephan gently shook his head. \"Does a lady besides yourself ever enter this residence willingly?\" he mused. \"You may keep your little bird but be sure she remains silent.\"\n\n\"Who was the other, if not Lucille?\" Mary spat, her cheeks bright red with aggravation. \n\nStephan turned with a curious gleam in his eyes. \"Lord Habern,\" he softly answered, scrutinising Mary's reaction. \n\n\"Habern?\" Mary uttered incredulously, feeling overwhelmed as she tried to piece together the connection between Edmund, the ominously handsome stranger, Lord Habern and Sage.\n\n\"Lords Bard and Habern,\" Stephan confirmed, inclining his head. \"Two of our town's most prestigious, respectable families have spoken against you.\" \n\n\"Habern,\" Mary softly repeated, as though uncovering a shocking betrayal. \"Under my very nose this entire time.\"\n\n\"Many have staked a claim upon this unknown, pretty bird,\" Stephan remarked, his bored tone turned silky as his focus switched to Sage's desperate struggle. \"And so fresh. I could arrest and discipline her...\"\n\n\"She attracts no little attention. Her presence in your chambers would be quite conspicuous after she made half the town's acquaintance this evening,\" Mary said acidly, unwilling to entertain the prospect. \"She is also resilient; not your average scared peasant or childish miss. You could not tame her without damage.\" Again, she cast a vicious stare Sage's way. \n\nStephan softly chuckled. \"My tactics are not all hot pokers and thumbscrews. I would relish the task,\" he said lightly. The humour soon left his face and he smacked his lips, considering the current situation. \"I presume your dungeon has occupants?\"\n\n\"Three or five girls,\" Mary shrugged. \"Of course, had I known my home would be raided...\"\n\n\"Keeping slaves is within the law for noble households, barely, if they are foreignly acquired and not mistreated beyond...\" he looked cynical. \"Will they speak against you?\" \n\n\"Those still with tongues might dare.\"\n\n\"I trust they are all peasants of the lowest connections?\"\n\nMary sullenly nodded.\n\n\"If they offer incriminating testimony, I will see it short-lived,\" Stephan said. \"You will not be arrested but prepare to pay handsomely for vindication. Given the nature of what will be uncovered, interrogations are unavoidable, but you may yet dodge open scandal. Choose your scapegoats wisely.\" \n\nThe sound of collective running grew closer. Not servant footfall, the boots of the Guard. \n\nWith the room moderately presentable, Mary ordered the servants leave. They fearfully skulked past Stephan, who paid them no heed and continued to stare between Mary and Sage. \n\nTurning on his heel, he left the room to meet his colleagues, firmly drawing the bedroom doors closed behind him. Stephan could be heard from the other side advising his companions the Lady of the manor would meet them downstairs.\n\nTaking a moment to compose herself, Mary viciously tightened her bed robe, cast a last poisonous glance to Sage, who glared right back at her, and stalked from the room. \n\nUnhurriedly arranging her loose hair, Mary haughtily descended a tall staircase, coldly observing the assembled men and servants below. \n\nStephan was debating with two animated members of the Guard, the others stayed well out of it. Even from a distance it was clear the two spoke heatedly, whilst Stephan's manner was calmly dismissive. \n\n\"Forgive me for not offering refreshment,\" Mary called, her tone hostile. \"But I do not take kindly to my home being overrun at this hour.\"\n\nConversation ceased as all watched Mary's confident approach. When she reached the group, the servants bowed their distance. The majority of the guard politely stepped back, leaving Stephan and the two who defiantly stood their ground. One was quite young for his station, fresh-faced with an ambitious determination for justice burning in his dark eyes. The second was older, lean, bald but with a large moustache and an air of grave concern about him. \n\n\"My Lady,\" Stephan bowed with impeccable graciousness and a small smile of contempt. \"We would not have dreamt of intruding upon your premises and privacy if we were not compelled to do so.\"\n\n\"What have you to say for the women kept below the South Wing?\" Snapped the younger man, his hand still on the hilt of his sword. \"Young peasants found in unspeakable-!\"\n\nStephan whirled on him with an eyebrow raised, and the man choked down his angry words and took a resentful step back. \n\n\"Below the South Wing?\" Mary faintly echoed with a shocked gasp. \"Beneath the kitchens? Tis a cellar, I believe,\" she frowned with deep thoughtfulness. \"Much of my home, I am mortified to admit, is managed by servants. One could not expect me to be privy to what occurs in every room of an estate so large,\" she explained. \"And, of course, Nicholas would never venture where servants dally. And you say peasant girls...\" she shuddered and touched a hand to her cheek.\n\n\"Then on the morrow I shall expect a list of your servants who access that part of your home,\" Stephan bowed again. \"They will be arrested and unlikely to return to your employ. The ones who run will be captured and granted less leniency. I advise you to make arrangements for their replacement.\"\n\n\"How upsetting for such events to occur under my roof!\" Mary sighed sadly.\n\n\"Where is Lord Stiles?\" Queried the bald man, endeavouring not to sound accusatory. \n\n\"I suspect he eloped tonight.\" Mary snapped her fingers at one of the servants against the wall. \"Search his quarters.\" The servant immediately bowed and sprinted up the stairs. \n\n\"I will accompany him,\" advised the lean Guard. Stephan's hand shot out to grip his arm. \n\n\"We do not take liberties in noble households,\" he said bitingly, as Mary inspected her nails with a yawn. \"If the Lord is at home, he is likely fast asleep in his bedchamber, and I will not have his privacy violated in this manner.\" He turned his attention to Mary. \"Are you acquainted with Lord Bard's fianc\u00e9?\" \n\n\"Why, yes,\" Mary answered, her eyes lightened. \"A lovely girl I met tonight at their engagement ball. Why do you ask?\"\n\n\"Lord Bard and her uncle, Lord Habern, claim she is being detained here.\" \n\nMary's eyes widened. \"Her uncle, you say?\" \n\n\"Yes, my Lady,\" Stephan smirked, his amusement clear. \n\nMary quickly recovered from the fact Stephan deliberately omitted to mention the detail in private. \"It is quite strange they would think-\"\n\n\"A number of Lord Bard's servants, and one of his guests, Lord Garrick Clifford, witnessed her departure from the Bard estate with your son.\"\n\n\"Oh, dear, I hoped to avoid scandal,\" Mary airily responded. \"It pains me to admit they flirted obscenely at tonight's ball, and several observed it. I'd not be surprised if they had eloped and returned married.\"\n\n\"I would be,\" the young Guard rudely muttered under his breath, which earned him a scorching glare from Stephan to hold his tongue. \n\nThey fell into awkward silence, until the returning servant rapidly descended the stairs to bow low to Mary. \"He is not in his chambers, my Lady.\"\n\nStephan smiled thinly. \"Then our search is complete, and we have no cause to trespass further.\" He bowed for the last time. \"My deepest apologies for disrupting you at this late hour, my lady.\"\n\nExpressionless, Mary watched the servants escort the Guard from the main hall. \n\n***\n\nOutside the property, Edmund angrily paced the ground while Habern remained in his carriage. After exchanging strained formalities, they decided to await the Guard separately, both with their own reasons for secrecy.\n\nWhen the Guard emerged, Edmund ran over and Habern hastily exited the coach to join them. \n\n\"Well?\" Edmund snapped, staring heatedly between the men, most could not meet his eyes and backed away to leave Stephan to address him. \"Where is she?\"\n\n\"My Lords, I am afraid our search was almost fruitless,\" Stephan gestured to where a group of wretched young women were being assisted to a carriage normally reserved for prisoners. \"Perhaps fortunate, as we do not lightly tolerate baseless accusations against esteemed families. However, Lord Bard, your fianc\u00e9 is not-\"\n\n\"Nonsense, Stephan, she must be,\" Habern said sharply. \"She left the Bard manor with Stiles-\"\n\n\"And she is not here,\" Stephan lightly bowed, seeming to tire of the act. \"Perhaps it is unsurprising with the alleged intrigue between Lord Stiles and-\"\n\n\"She hates him!\" Edmund raged; his hand white on his sword handle.\n\n\"That often appears the case in affairs of indiscretion,\" Stephan said with condescending sympathy. \"But it is not for me to comment on personal matters between Quality. I can only confirm your fianc\u00e9 is not here. I recommend reporting her absence to town so we can commence an official investigation...unless she should return with an explanation, which I deem quite likely.\"\n\nBoth Habern and Edmund seemed to undergo inner battles unable to be voiced civilly. Stephan suppressed a smile at the entertaining spectacle and cleared his throat. Before he could continue, Edmund was in his face; tall enough not to be intimidated by Stephan's formidable height.\n\n\"You know there are wrongs committed here,\" Edmund snarled with such aggression Stephan almost stepped back. \n\n\"And I find much reward in that knowledge,\" Stephan softly countered for Edmund's ears alone. \n\nA deadly rage flashed in Edmund's eyes; his attention shifted from Stephan's smug gaze to the black and silver insignia on his chest. It was a symbol of integrity, the colours indicative of high rank. \n\nEdmund gripped the leather patch and tore it clear of Stephan's uniform with brute force, grinding the piece to the dirt beneath his heel. \n\nStephan staggered from the strength and speed of Edmund's pull, drawing the curiosity of the others. But Edmund was clearly not finished, and Habern quickly stepped between the men.\n\n\"Stephan, you dropped this,\" Habern announced with a slightly raised voice, retrieving Stephan's badge from the ground to lightly dust with his gloves.\n\nStephan paused a heartbeat before accepting it with a savage grin starkly different from his cool composure. \"My Lords, I am afraid your presence here is unwelcome and it is time you took your leave.\" \n\nStephan tilted his head when Edmund's sword drew three inches from the scabbard. \"Your title only shelters you so far, Lord Bard,\" he cautioned softly, and by now the entire yard was watching. \"Consider your next motion carefully.\" \n\nEdmund relaxed his hold, allowing the heavy sword to fall back into the sheath. \"This will not be forgotten,\" he quietly threatened. \"You, particularly, will be remembered.\"\n\n\"I should be honoured to retain a place in your memory, my Lord,\" Stephan pleasantly replied, his voice laced with vindictive mockery. Accepting the reigns of his horse from a servant, he mounted with surprising agility for a man of his size. \n\nLed by Stephan, the men on horseback moved in single file, the carriage of liberated women drawing behind. Stephan paused by the front gate and pointedly waited. \n\n\"I would be grateful if you called on me, Edmund, there is much to discuss,\" Habern brusquely muttered with a short bow before retreating to his carriage, wringing his gloves. \n\nHabern's carriage passed through the gates. Edmund and Stephan stared at each other for a long minute until finally, Edmund stalked to his mount, took his time getting comfortable in the saddle, and gently eased the horse to slowly walk by the waiting group and through the front entrance. \n\nAt last the courtyard was empty, and the servants quickly closed and locked the gates. \n\n***\n\nSage knew the hurdle Aleksis faced, and that he would not abandon her. But time was of the essence; she would soon be married and have all her nightmares manifest. Whatever ceremony Mary had planned for her was likely to be more than verbal vows. She would just have to rescue herself. \n\nWhen Mary reappeared with two servants carrying a dress, Sage kept her angry gaze on the floor and offered no objections when told she would wear it. Nicholas was surprised and clearly relieved that Sage didn't challenge Mary in her current mood. \n\nThe gown was blue velvet, almost black, with an intricate pattern of glittering diamonds and sapphires sewn throughout. It was impressively regal, but not a wedding gown. It dipped low in the front, and similarly at the back but more extensively, a long V that only ended at the start of the skirt. The full, round curves of Sage's breasts were almost fully exposed, the material lining only just managing to cover her nipples. \n\nA diamond link under the bust prevented the top half of the dress from dividing completely. The connecting skirt was tightly laced across her pelvis, the material bountiful and flowing, sections solid velvet with the rest sheer silk layers. As Sage walked, her long legs would be inevitably visible in a way both artistic and obscene. Majestic as the gown was, its revealing nature would be considered nothing less than scandalous if viewed in polite society. ",
        "All in all, Sage was sensually striking and at first glance would appear an exceptionally important slave rather than a noble lady.\n\n\"A shame she is marked,\" Mary observed the red stripes down Sage's smooth back as the servants continued to fit the dress, another began to comb her tresses for braiding. \"Perhaps her hair should be out?\" \n\nNicholas circled Sage like a ravenous lion, overjoyed by the sight of her and hardly believing he finally trapped his prize. \"The lashing was mild, and the marks are not unsightly. She will be beautiful, either way.\" \n\n\"True,\" Mary admitted with a sardonic smile. \"You are pleased to distraction, Nicholas.\"\n\n\"Aye, mother.\"\n\n\"See that it does not cloud your good sense,\" she cautioned, accepting a glass of wine and seating herself by the window to oversee Sage's preparation. \n\nNicholas made a dismissive sound, still staring appreciatively. Sage was elegantly pretty, but there was something in the way she held herself, the flash of hatred in her eyes, her quiet dignity, that inexplicably pleased him. After such a prolonged chase of an elusive girl unique to all others, the victory was titillating. \n\n\"You are oddly cooperative, Sage,\" Mary gently commented, watching a servant carefully apply rouge to Sage's cheeks. \"Dare we hope you finally accept your position here?\" \n\n\"I am merely curious how you mean to force my vow,\" Sagely said sweetly; the servant painting her lips instinctively drew back when she showed her teeth in an angry smile. \n\n\"Your presence is all we require,\" Mary answered, relaxing in the chair. \"I believe you are aware of blood vows.\" \n\nSage stiffened, then quickly tossed her hair to mask her reaction. \"That is a vulgar practice.\"\n\n\"And wise of you to acknowledge it,\" Mary smiled. \"I would never believe you ignorant of the ritual. When I have your compliance, you will be very forthcoming about the charming gentleman who called upon us.\" \n\nThough infuriated by the circumstances, Sage repressed a smirk. The Stiles had no idea how thoroughly Aleksis had educated her. \n\nA knock, and the door opened. A young man entered and bowed, his eyes on the floor. \n\n\"The clergy have arrived, mistress. They wait in the underground.\" \n\n\"Is the courtyard clear?\"\n\n\"Aye, mistress. The front gates barred and locked.\" \n\n\"Have all soldiers stationed in case that young fool tries something heroic. He is to be rebuffed, not harmed; at worst taken prisoner and transported to town.\"\n\n\"Aye, mistress.\"\n\nMary rolled her eyes. \"He is a Bard, after all, and they are always obstinate in these matters.\" After a reviving shake, Mary smoothed the skirts of her gown as she stood. \"It is time.\"\n\n***\n\nOnce the guard were well toward town, Edmund backtracked and secured his horse a short distance from the Stiles' estate. \n\nCreeping through the still forest, as he drew close to the property, he carefully peered from behind a large tree through the gates to count the men in the courtyard. \n\nThere were no more than twelve, loitering in pairs. Four on horseback. They were not too alert; they had never been called to guard the manor before now and were in collective agreement that Lady Stiles was overreacting in the wake of a humiliating visit by the Guard. \n\nEdmund found a tree which curled up and over the ornate fence, pulled a long dagger from his boot and carefully held it between his teeth, and began to climb. \n\nFinding a good position to crouch on a thick bough, he cautiously moved the dagger from his mouth to tightly grip in his hand. Sweat beaded along his forehead as he watched one of the horsemen wander toward him, closer and closer, lazily humming a crude ditty about young ladies who bed their brothers. \n\nEdmund's sharp gaze moved from the lone soldier to the others, silently plotting. Once he struck, there would be no room for consideration. For the first time, he was very glad for his warring experience. He had stood in rivers of blood, fought grim battles in the dirt both with and without weapons, slit his share of throats, strategised attacks and fended off ambushes. \n\nIt had been a while, but his instincts and confidence were in check. Though he never imagined he'd engage thus with his childhood neighbours in his hometown, he was nonetheless grateful for his experiences.\n\nTwelve men...Edmund winced. He'd fought off groups in the war, but all were injured, including himself, and luck was on his side. \n\n\"Psst.\"\n\nEdmund very nearly lost his footing on the bough and stared up at Aleksis, perched on a higher branch. Aleksis' black eyes glittered in the shadow; the moonlight fell across his smiling lips through the trees. Attractively dignified in fine clothes despite his current positioning, the man was certainly surreal. \n\nEdmund started with surprise when Aleksis deftly used a sign language he'd not seen since the battlefield. It was too sophisticated for Edmund to comprehend and he shook his head and signalled for Aleksis to repeat. Aleksis smirked impatiently and gestured with slower emphasis.\n\nLeave the men on foot. The riders are yours.\n\nEdmund nodded, remembering his steed's hysterical reaction to meeting Aleksis on the road. \n\nThey continued to watch each other, until Edmund was distracted by movement below and realised the horseman was almost directly below him. He looked back to Aleksis, who seemed to observe him with an intent curiosity. \n\nTaking Aleksis' stillness as confirmation, Edmund agilely moved so he was roughly aligned above the rider. He jumped, his boots skimmed the horse's behind and he tightened his thighs to avoid an unfortunate impact between his legs.\n\nThe horse gasped and reared up when he landed; Edmund took advantage of the backward momentum, seized the soldier's collar and slit his throat. Before Edmund could throw him from the saddle and resume control of the steed, the soldier relinquished his grip on the reins and fell, clutching his neck spurting blood. \n\nCompletely unsettled, the horse turned and its panicked attention landed on Aleksis. The next second the horse galloped screaming toward the main group and Edmund was on his back staring at the sky.\n\nA soft chuckle from above, and Aleksis hauled Edmund upright. \n\n\"You may wish to consider unsheathing your sword,\" he advised, his black eyes bright on the dying soldier. \n\nEdmund snarled and swiftly drew his weapon as Aleksis dashed into a cluster of four approaching soldiers. The ground rumbled, and Edmund turned to find a horse bearing down upon him, the rider's face twisted with anger. \n\nEdmund nimbly ducked aside and shoved his sword upward, through the rider's thigh and into his gut. Withdrawing the reddened blade, Edmund seized the saddle and tried to mount as the soldier collapsed to the ground on the other side. \n\nThe sword was weighty and affected Edmund's balance. For a few desperate seconds he hovered uncertainly, one foot in the stirrup, the other angling to lift over. Edmund cursed angrily when the sword tilted the wrong way and he tumbled down the horse to land on his ass. \n\nA deep laugh rang out as foreign against the collective sounds of terror. Aleksis was watching, laughing at him, with one hand crushing the neck of a man, his other wiping excess blood on his beige vest. \n\nThe other horsemen repeatedly urged their steeds to Aleksis, and soon realised their mounts would not go near him. Their attention switched to Edmund.\n\n\"Shall I assist you into a saddle, Edmund?\" Aleksis cheerfully called, before becoming preoccupied with another three men attacking him. \n\n\"Fucking immortal!\" Edmund seethed, stabbing his sword to the ground to push himself upright in time to brace for the two riders charging his way.\n\n***\n\nLooking formidably angry, Sage allowed the servants to bind her hands behind her back. She managed to preserve her icy silence, though twitched irritably when Nicholas collared her. \n\n\"If I said that these circumstances are regrettable, neither of us would believe it,\" he murmured, tracing the leather strap from the fitted choker to the handle, his other hand caressed her shoulder; applying a light pressure that signalled ownership. \n\nRefusing to look at him, Sage swallowed spiteful words and allowed him to lead her out, like a prized pet to be exhibited. \n\nMuch of the mansion was in darkness, whether for privacy or general gloom. Sage's shoes were surprisingly low-heel, and very uncomfortable. There was no leather lining or insulation to soften the material against her feet. Indeed, much of the design seemed impractically composed of jewels, which rubbed abrasively against her heels and toes. Beauty and pain; it was not surprising the Stiles fashioned such a thing.\n\nThe journey was long as they crossed the border from the main estate into a steep stone staircase. The accompanying servants lit large candles to precede the group, and eventually Sage found her eyes adjusting to the pitch black surrounds. \n\nThe stone floor was very old, though swept clean, would still dirty the soles of their shoes and the hems of Sage and Mary's dresses. Still ogling his bride-to-be, Nicholas chuckled lowly when he noticed her hands behind her back were balled into tight fists. \n\nFinally, they reached a large room, with gaps in the ceiling to let the bright moonlight through so that the candles were no longer necessary. Sage turned to give Nicholas a last glare of contempt that made his mouth run dry with desire. Standing illuminated, dressed as she was, with such ferocity on her pretty face and her dark hair shining as though silver-coated, was a powerful image, and only made him feel more empowered for owning her. \n\nFour robed men, their faces concealed, stood quietly conversing at an alter which had clearly been brought to the premises for this purpose, as it was immaculately finished and certainly not ancient as the surrounds. Mary haughtily swept forward to have words, and the robed men turned to consider her. Sage felt sickened, as though she'd been snared by inferior beings that would make the most of their catch. \n\nShe stood stiff and hostile as one of the robed men approached her. He walked about her still figure, nodding to Nicholas as he passed. Standing closer, he stroked her cheek, pleased by her elegance, his thumb settled under her chin to gently tilt her face to the moon. He drew back with a gasp, then looked excitedly back to his observing companions. \n\n\"Gods, she is not only witchblood! She is - YARGH!\"\n\nSage viciously bit the man at the tender place between thumb and forefinger, drawing blood. Nicholas immediately jerked her collar and seized her hair to hold her back. \n\nThe bite was a good effort on Sage's part, and she maintained an expression of ladylike innocence despite the unsightly blood smeared down her chin. Aleksis would be proud. \n\n\"I apologise,\" Mary said coldly, looking annoyed but not dismayed in the slightest. \"I thought her too pretty to be muzzled for the ceremony.\" \n\n\"It is not too late!\" Spat the priest, nursing his bleeding hand and hurrying back to the others. \"If she weren't invaluable, I would-\"\n\n\"Finish your sentence,\" Mary demanded. \"She is, what?\"\n\nThe priest growled in pain, hurriedly bandaging the wound with the servants' assistance. \"She has been groomed, a long time, for...I've not seen it before with my own eyes, but it appears genuine, the signs are...\" \n\n\"Make your point without explanations!\" Mary barked. \n\n\"Beneath her ear, the faintest markings,\" he muttered, the others rushed to inspect Sage, who began to show reluctance at being manhandled by the hateful group. \"She is being prepared for a transition that would be gruesome agony if carried out within a shorter timeframe, if the chronicles are to be credited.\"\n\n\"What transition?\" Mary breathed, afraid to hope. \n\n\"It is impossible, but-\" he broke off as the others closed in on Sage, forcing her head back to display her neck. They paused to allow a servant to clean the priest's blood from her mouth and chin.\n\nFor a long time they scrutinised her. \"It is true,\" one whispered. \"The marks are almost invisible, but they are there.\" \n\n\"And most conspicuous under moonlight inspection, as per the chronicles.\"\n\nThey observed Sage, who glowered back at them, feeling extremely unsettled by a discovery that surprised her just as much as them. \n\nOne priest let out a long exhale. \"A blood ceremony will have no effect on her, if it's as suspected.\"\n\nMary made an exasperated sound. \"What do you mean?\"\n\n\"The blood in her veins is more than her own. She could be too powerful to yield to a temporary hypnotic.\" \n\nNicholas watched Sage's reaction. She seemed to understand, but she was clearly astonished. \n\n\"Where did you find her?\" a priest questioned Nicholas.\n\n\"The forest.\"\n\n\"The forest? She is no savage. Who are her guardians?\" \n\n\"I believe we met one tonight,\" Mary cautiously answered. \n\n\"The young man?\" Nicholas exclaimed, looking extremely sceptical. \"Jaromir? Mother, he is not even older than-\"\n\n\"Be silent!\" Mary snarled, impatiently turning back to the small group of robed men. \"Well, what are we do to now? I have the Guard raiding my premises and nobles reporting the girl kidnapped. I hoped to present her convincingly in love with Nicholas by daybreak!\" \n\n\"Had we known her origins we would have proceeded differently,\" the tallest sourly replied. \"By her features, even a half-wit would know she is noble. You led us to believe she could possibly be peasant.\"\n\nNicholas snorted and Mary shot him a warning look. \n\n\"I was never equipped to verify her origins so there is little point chastising me for it,\" she sweetly countered. \"What are we to do now?\" \n\n\"Well, we should attempt the ceremony,\" one priest ventured. \"This is only a suspicion, after all.\" \n\n\"Very well,\" another nodded. \"There are uncertainties, but this may work. And if she delivers us a girl...Do you know her to be fertile?\" he questioned.\n\nMary looked as though she was surrounded by imbeciles. \"How am I to know? She was discovered in the forest!\" she exclaimed. \"I've no reason to suspect her barren. Proceed with the ritual and I will otherwise keep her here until you return with better judgement!\" \n\nThe priests were slightly taken aback by Mary's temper, but there was a silent concession amongst them that Mary possessed an advantage in Sage. \n\n\"Bring her to the altar,\" a priest directed Nicholas, pointing to the altar where an ancient book was fitted. \n\nSage frantically resisted, dug her jewelled heels to the floor but was carried forward by Nicholas. \n\nThe group of priests began to chant a prayer in repetition. Mary joined them, drawing a small vial from her dress and uncorking the lid. \n\nSage desperately struggled but was held down. The binds on her wrists were cut loose and her right hand forced forward to the altar, lightly sliced to yield a trickle of blood. Chanting with the priests, Mary ensured several liquid drops from the vial mingled with Sage's.\n\nSage snarled her disgust as words bounced about the room, her name and Nicholas' echoing around the group, the insidious drops absorbed by her blood flow. She twisted in Nicholas' arms until they faced each other. \n\nFor the first time Nicholas perceived Sage was unsettled and uncertain, her usual hatred toward him replaced by a helpless panic. \n\nUnable to block her ears, Sage gazed back at Nicholas. Her pale eyes widened with innocent bemusement, struck by his attractive features; strong jawline, well-crafted cheekbones and his sultry deep blue eyes staring into hers with besotted desire. \n\nNone could deny he was very handsome; it was a shame about his character. If he were noble-minded and of Edmund's disposition, they would have beautiful children. And if Edmund was raised to be callous and cruel, if he pursued her with impure intentions, she would hate him just as much. If Edmund were the villain, and Nicholas the hero...If by some confusion Nicholas was the hero...\n\nSage let out a small scream of frustration, recognising the symptoms of a disastrously intrusive spell. She shook her head and almost broke free, but Nicholas was prepared for it. Sage's fight ended as faintness crept up, her eyelids grew heavy, the tension in her limbs dissipated and she relaxed in Nicholas' arms. \n\n***\n\nPanting on his back, Edmund was utterly exhausted, but undefeated. Accustomed to fighting disadvantaged, he'd battled the riders and won. The subsequent sword fights posed no challenge. Toppling the soldiers from their mounts sapped his strength, and he was irritably aware Aleksis was thoroughly entertained by his failure to ascend any of the beasts; they were too skittish, and Edmund was unlucky in his manoeuvres.\n\n\"I never expected you to defeat four soldiers on horseback,\" Aleksis admitted, an ounce of respect creeping into his voice. \"I see your time in the war was productive, though your equestrian skills are quite lacking.\"\n\nEdmund rolled the body of a man off him and slowly got to his feet to glower at Aleksis.\n\nSatisfied there were no immediate threats, Aleksis cupped his hands to his mouth, his fingers linked in a strange way. A sharp, almost musical whistle passed through his hands and echoed into the night. \n\nEdmund pulled his sword from the fallen man with a grunt and straightened in time to see a shadow streak across the courtyard at a speed too great for his eyes to follow. The figure swept by Aleksis and crashed through the front door. Seconds later, the screams began.\n\n***\n\nA full half hour passed before the chanting ceased, and all watched Sage, who did not stir. Nicholas looked from her passive face to his mother's. \n\n\"Is it done?\" he whispered. \n\nMary pressed a finger to her lips. The priests moved in, and Nicholas gently turned Sage in his arms so they could examine her, particularly the markings by her pulse. One pursed his lips and retreated, gesturing Mary to join him while the others continued their examination. \n\n\"Well?\" Mary breathed.\n\nThe priest angled his head both ways in a so-so gesture. \"She lost consciousness, that much is authentic. It is a promising sign. But the markings may weep the bad blood, if her blood is superior.\" \n\n\"Bad bl-? Those drops are sacred! Decades old!\" Mary insisted. \"She could not possibly-!\"\n\n\"The markings are there, and they are colouring. It would make sense.\" He glanced over his shoulder, the others now watching. \"We will know more when she wakes. You said she is educated above the norm? Intelligent?\" \n\nMary's lip curled. \"I would call it insolent cunning.\" \n\n\"I see,\" he muttered. \"The time-frame is shortened when the subject is wilful. Strength of mind carries substantial influence in spells such as these. We may have to...\"\n\nAll perked up when Sage sighed deeply and stretched, her head contentedly falling back to Nicholas' chest. When her eyes fluttered open, they widened, and she immediately crossed her arms to conceal her cleavage. \n\n\"What...\" she jerked around to see whose arms were closing about her. \"I...I...\" she stammered, gazing up wonderingly at Nicholas. Forgetting her audience, she arched against him, her arms snaked about his neck and tightened, drawing their lips together. \n\nNicholas forgot himself and banded an arm about her waist to strengthen the embrace, sensing he'd be forgiven for an open display of intimacy considering the victory. He feverishly kissed her lips, her cheeks, her neck and returned to her mouth that obediently parted for his lips and tongue. She was exquisite softness in his arms, entirely compliant, and Nicholas felt his heart thunder against his ribcage, the blood pulsing fiercely down to his cock. Ending their kiss, he lightly sucked her lower lip before drawing back to stare curiously into her eyes. \n\n\"Mine?\" he murmured, trailing a finger down her jaw.",
        "Blinking in a sultry daze, Sage breathlessly nodded. \n\nMary exhaled with relief as the priests exchanged pleased glances.\n\n\"Continuously observe her markings,\" the priest advised Mary. \"The trance would last three days, but with what you've shared and what I have seen, I would not take her into society after the next twenty-four hours.\" \n\n\"I only need her to publicly recognise Nicholas as her husband,\" Mary said dismissively, satisfied by the way Sage continued to watch Nicholas from under her lashes, both shy and impatient for him. \"I am more interested in her knowledge.\"\n\nThe priest nodded with an ironic smile. \"And when she resumes her senses, she will appear to have convincingly lost those senses.\"\n\n\"Unfit nobles are assigned home treatment before the asylum. Her husband will have full authority, even Bard would be powerless,\" Mary chuckled. \"Oh, she will be a lively patient.\" \n\n\"That will please Faustus,\" the priest remarked, watching his colleague with the bitten hand continue to glare resentfully at Sage. \n\nFull of self-importance, Mary strode to the entwined couple. \"Nicholas, the altar. It is time you are wed.\"\n\nStaring as though he witnessed an impossible miracle, Nicholas stood and drew Sage up with him. When she dizzily strained onto her toes for more kisses, Nicholas playfully withheld. Anticipating a short period where he would enjoy the most passionate trysts with her willing and eager, he threw back his head with a sudden laugh of gay abandon. \n\nThe priests formed a circle, Mary stood to the side, and Nicholas took position behind Sage. Sage grinned stupidly as Nicholas' fingertips trailed up and down the sides of her arms, his lips by her ear whispering intimate promises that she seemed not to hear. \n\nOne priest licked his finger and turned the page of an ancient book, dipped a quill to where some of Sage's blood had spilled, and began to write. \n\nEnjoying the sight of Sage so enchanted with her son, Mary tittered, admiring the girl's elegance, her beauty, her flirtatious feminine charm that she'd determinedly withheld from them till this moment. \n\nBending his head, Nicholas drew Sage's hair aside to press a sensual kiss to her neck. Mary's smug smile vanished completely when Sage failed to suppress a shiver of revulsion.\n\n\"Wait!\" Mary shouted.\n\nSage lunged for the altar, seized the knife used to cut her hand and turned to plunge it into Nicholas' chest as he gripped her shoulders.\n\nNicholas' mouth fell open, his eyes bulged with disbelief and he slowly dropped to his knees. \n\nMary caught her son before he toppled, and cradled him in her lap, anxiously considering the long blade in his chest. \"Breathe easy, darling, this is just...\"\n\nAn ear-splitting roar filled the room. After a startled moment, the witnessing servants fled, and could be heard screaming to sudden silence where they encountered the source of the sound. \n\nSage was immediately released as the clergy ran for their lives, through a smaller tunnel likely avoiding the house and leading back to high ground. \n\nMary turned to Sage.\n\n\"You!\" she snarled.\n\nA figure bounded from the shadows, and Sage blindly followed the priests as something landed upon Mary and Nicholas. Their shrieks followed her, and she covered her ears, only stopping for a moment to kick off the painful shoes and continue her flight barefoot. \n\nBy the time she burst through the open hatch and drew a breath of fresh, chilled air, Sage pulled up abruptly and almost fell back down the stairs when she collided with Edmund, who was preparing to enter the hatch. Aleksis stood waiting, the clergy dead at his feet. \n\nFaint with bewilderment, Sage glanced about the courtyard where horses ran loose; the bodies of Mary's knights scattered throughout. Aleksis had dispensed with them, and Edmund had clearly contributed his share of work to the battle. \n\nEdmund quickly sheathed his bloodied sword, and Aleksis strode forward, wiping the red from his palms to break the collar from Sage's throat. Before Edmund could object, Aleksis turned with Sage in his arms and locked eyes with him.\n\n\"Run,\" he ordered, his tone brooked no argument. \"I can carry her at a speed which you cannot, and once she is safe, I must return here.\"\n\nEdmund started when one tower went up in flames, for a moment mesmerised by the enormous estate he'd known his whole life falling to chaos, from where the echoes of screams, smashing, and a ferocious howling reverberated through the property. \n\nWhatever was in the underground had backtracked to the mansion where the majority of servants were stationed, and they were spilling out the exits in hysterical clusters. Clearly candles were toppled in the carnage, little fires growing in number and flaring throughout the estate. \n\nPulling himself together, Edmund noticed he was alone and sprinted to the forest. \n\n***\n\nAfter running for several minutes that felt like an eternity, Edmund sighted Aleksis gently lowering Sage to sit on the forest ground. Aleksis straightened to face Edmund, curtly gestured to Sage's stunned, limp figure. Edmund blinked and Aleksis was gone, a slight swirl of breeze in his wake.\n\n\"Sage!\" Edmund rushed forward and fell to his knees, drawing her against his chest. \n\nSage's breath hitched and her fingers closed over his shoulders, holding him close. Edmund drew back, concerned.\n\n\"Sage, are you hurt?\" he demanded in a whisper, tentatively inspecting her. When his fingertips brushed her back she quietly whimpered, and Edmund felt the most intense rage of his life surge through him when he saw the red lash-marks etched across her soft skin.\n\n\"They're dead, Edmund,\" Sage confirmed weakly, sensing his fury. \"There's naught to be avenged, now.\" \n\n\"It's not enough.\" Edmund's face tightened with grief, and he gently held her by the waist, his eyes glittering with angry tears. \"Gods, it will never be enough. I should never have left you, Sage. I'm so sorry.\"\n\nSage smiled with a tired sigh. \"Edmund, there's not-\"\n\nEdmund's hand slipped between them to cover her mouth. \"Don't move,\" he breathed. \"We're being watched.\"\n\nSage's eyes widened pleadingly, silently begging for no more horrors. Edmund gave her a reassuring smile, his other hand slowly moving to grip his sword handle. \n\nA large stick cracked under a heavy step, followed by a deep, guttural snarl. Edmund drew a deep breath as the volume increased, then abruptly stood, drawing his sword and bracing to fight.\n\nThe curious figure staggered closer, panting raggedly; the veins in his face visibly black against gaunt, pale skin. Soft brown eyes turned wild and fierce; front teeth extended past his lower lip, grazing his chin and drawing blood. \n\n\"What in the... Gods...Simon?\" Edmund gasped, readjusting his hold on the sword with dismay. \n\nSage cried out when she recognised Simon, who jerkily fixed his attention on her, his nostrils flared, deeply inhaling. Horrified, Sage gaped at the meek servant boy; transformed to a creature of violent instinct.\n\n\"Be still,\" Aleksis quietly cautioned, slowly stepping out from the trees. \"Do not strike, Edmund. You will only antagonise him.\"\n\nSimon twisted, his burning gaze now on Aleksis, who held out both hands, palms facing upward. Simon stepped back with a grunt and shook his head as though a bothersome insect pestered him, then resumed staring at Aleksis, who was suddenly closer to him, entirely calm. \n\n\"Aleksis, what have y-?\" Sage gasped but stopped when Simon whirled toward her. \n\nAleksis sharply clapped his hands together to recapture the boy's attention.\n\n\"Silence,\" he softly ordered, holding Simon's gaze with an unblinking intensity, the effect hypnotic. \"Retreat slowly, both of you.\"\n\nAfter recent events and the spectacle they faced, Sage was ready to succumb to hysterics. But Edmund slowly retreated to her side and gently pressed her shoulder. Immediately Sage's hand went to his and clenched around it. Slowly, she allowed him to draw her to her feet, and the pair carefully backed away into the forest. \n\nOnce a safe distance, Edmund sheathed his sword and wrapped his cloak about Sage. She stumbled with fatigue and he swept her into his arms before she could fall. He carried her to his mount, felt her shaking against his chest, tears wet against his throat. \n\n\"I hope you realise what he has done, Sage,\" Edmund said lowly, the words sickened him but couldn't be denied. \"The way Simon was... that is the future he plans for you.\" \n\nSage curled up tighter in his arms, feeling nauseous. She couldn't tell Edmund the terrible thing the priests discovered in the Stiles' underground. \n\nThe journey to Edmund's home was in silence. Sage feigned sleep and enjoyed the warmth of Edmund's chest against her back, though it smarted a little from the contact. His scent was familiar, his arms were about her and she could finally rest. \n\nThe night's terrors and discoveries weighed too heavily on her mind for sleep, despite her exhaustion. Though Edmund's horse was graceful, Sage felt the slight ache where Nicholas had raped her, refreshing the memory every step of the way; impossible to forget. At least she had the last word by the knife, though something else had the pleasure of taking his life. But the fact she fleetingly admired Nicholas, entirely confused him for a desirable man, would pain her forever. \n\nEdmund made no comment when Sage viciously tugged the ornate diamond ring from her finger and threw it aside, where it tumbled into the dark. \n\nWaiting servants sighted their steady arrival and quickly unlocked the front gates to make way for them. Sage looked up and saw Joel's silhouette in one of the windows. \n\n\"I will wait here for Aleksis,\" she murmured, feeling Edmund tense behind her.\n\n\"I would not like you to meet him alone, Sage.\" \n\n\"Very well.\" Sage swallowed, preparing for her next demand. \"I must speak with him privately, Edmund. It is important. If you could arrange for a mount-\"\n\n\"Sage-\"\n\n\"I would prefer not to leave these grounds in his arms,\" she candidly interrupted. \n\nEdmund dismounted in silence and turned to the who had rushed out to meet them. After a moment of deep thought, he nodded, though clearly displeased. \n\n\"Have Alina saddled for my lady, and bring a change of clothes,\" he ordered, and turned to lift Sage down. \n\nHe stared down at her, noting her revealing dress, the streaks on her face where tears had fallen and dried. The unspoken truth that she had been brutalised. But he was still entirely in the dark about what transpired. There was so much to say, but he'd no idea where to begin.\n\n\"I am well, Edmund,\" Sage quietly reassured him, sensing his anxiety. \n\n\"I cannot believe that!\" he exclaimed, lowering his voice when she looked unimpressed. \"You must be tended, and you must rest. I'll not press you with questions tonight, Sage, but after everything...\" he stopped when two servants arrived, leading Sage's horse. \n\nSage smiled briefly and reached to stroke Edmund's cheek. \"Assist me, Edmund.\"\n\nEdmund paused; his body frozen by a tough decision. He wanted to drag Sage over his shoulder and forcibly carry her into the estate. But he'd promised himself long ago he would never again interfere with Sage's free will. By her manner there was still affection, most importantly, she trusted him and if he turned on her now, the aftermath would be unsalvageable. He would have to respect her decision and trust her to return.\n\nDrawing a deep breath, Edmund reluctantly lifted her into the saddle. Sage reached for his hand, drawing his frowning attention from her blistered feet in the stirrups, so small and fragile. \n\nA maid tentatively approached with a small bundle of clothing. When Edmund ignored her, the flustered girl hurriedly held the package up to Sage, who accepted it with a cool smile and nod of thanks.\n\nEdmund shook his head. \"Sage, I beg you-\"\n\nAleksis cleared his throat, waiting at the border of the estate. He had changed attire, there was no evidence of the bloodshed he'd wreaked. Though he seemed politely composed, there was a cold impatience about him. \n\n\"Dawn approaches,\" he said pointedly, before turning to stride from the road into the forest.\n\nSmoothing a calming hand down the nape of her unsettled mare, Sage directed the horse to follow, avoiding glancing back to Edmund, who she knew stared until she left his view.\n\nThey went deep into the forest, away from the crude dirt path until Sage was forced to tie her horse to the bough of a tree and dismount. Waiting several metres away, Aleksis turned his back as Sage unpacked the clothing bundle, discarded the jewelled gown and dressed in a sky-blue travelling dress.\n\nOnce Sage finally laced her shoes and approached, she met his inquisitive gaze for a simmering moment, then let hers fall.\n\nObserving her unsettled demeanour, Aleksis pursed his lips, his face severe. \"Well, Sage? What weighs on your mind?\"\n\n\"You could identify it better than I, Aleksis.\" Her resentful gaze lifted from the ground to his handsome face, she touched her fingertips to her pulse. \n\nAleksis sighed with harsh resignation. \"Sage-\"\n\n\"You deceived me!\" she blurted furiously, unable to contain her feelings any longer. \"You had me believe it was my decision!\"\n\n\"Sage, it was your decision,\" he reasoned. \"I only began when you made your promise. You made your choice first.\"\n\nSilent tears stole down her cheeks. \"And why keep it secret? In case I had a change of heart?\"\n\nAleksis bit his lip, his eyes defensively angry. Sage woodenly nodded, feeling strangely composed though her world seemed catastrophic.\n\n\"This is why sunlight would not bother me?\" she said bitterly. \"Because of a slow conversion?\"\n\nAleksis made a curt gesture. \"My own change was sudden and a terrible ordeal...well, you saw Simon. I would not have you endure it. I was fortunate that the physical agony was hardly worse than my state of mind at the time. My emotions... Sage I wanted to spare you pain, and so you will be stronger than I was...\"\n\n\"But, Aleksis, you commenced it,\" she uttered, her face blank with dread as she came to an abrupt discovery more painful than the last. \"That is how you could recently enter my dreams and speak in my mind.\"\n\n\"I've been strengthening our connection-\"\n\n\"You've been poisoning me,\" she flatly interjected. \"You know what that means.\"\n\n\"Sage, no! I love you!\" Aleksis vehemently declared, taking her hands and holding them to his chest. She allowed it, but would not look at him, no matter how desperately he tried to catch her gaze, it remained coldly fixed on his chest. \"Sage, listen to me. I would never do anything that would-\" \n\nHis voice died when she met his eyes and gently withdrew her hands to distance herself. \n\n\"Sage, please, you must understand-\" He tried again but was silenced by the grief on her face. \n\n\"I think I could feel it,\" she said distantly, her eyes troubled. \"Perhaps I never entertained the possibility because I trusted you and I thought...\" she looked down, raising a hand to halt Aleksis when he moved to hold her.\n\nSage cast her mind back to the recent whirlwind events. The sudden exposure to Edmund, falling headily in love, anticipating a life she never imagined she might live; the bustling household so different to her isolation with Aleksis. Both existences were happy. Except...\n\n\"Can you tell me that I still have a choice, and claim it truth?\" she murmured, her voice level despite the tears dripping down her face. \n\nAleksis looked desperate, his eyes pleading with her to relent.\n\n\"It was never a matter of convincing, was it?\" she slowly continued. \"Your scheme was more intricate. I had to choose you willingly, so I would never find out what you have done.\"\n\nA mournful silence followed. They knew each other's thoughts; the same terrible weight burdening their minds. Finally, when she felt composed enough to speak again, Sage voiced it.\n\n\"It's not just for love that you won't permit my natural life with Edmund.\" She paused expectantly to see if he would deny her accusation or contradict it. \n\nAleksis seemed to choke, his chest trembled with emotion, his face tightened, and for the first time Sage saw a strange fluid leak from his eyes. It was inky black, and terrifying against his pale, flawless complexion. Still, he did not speak to his defence. \n\n\"So, it's true,\" Sage softly clarified; her lips twisted to a broken smile. \"I'm already dying.\"\n\n \n"
    ],
    "authorname": "Bellie444",
    "tags": [
        "intrigue",
        "love triangle",
        "medieval",
        "obsession",
        "old world",
        "prisoner",
        "romance",
        "sodomy",
        "vampire",
        "witchcraft"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/the-ward-ch-07"
}
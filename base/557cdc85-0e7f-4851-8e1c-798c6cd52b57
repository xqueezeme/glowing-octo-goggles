{
    "title": "The Jerkoff Club",
    "pages": [
        "Remember the first time you jerked off? How intense the feeling was and the sight of your cum shooting out of your dick? Well, I don't either but I still do it almost every day even though I am over thirty and married. Most women don't understand the need men have to masturbate all the time but other guys do. Even though we never talk about it, or if we do it's in the past tense. Like \"oh yeah when I was a teenager I did but not any more.\" Bullshit. I knew that wasn't true of any of my friends: we talked about fucking all the time and would swap porno tapes back and forth with each other. We would kid each other about what we were going to do with the tapes as if it was some surprise that we whacked off to them when the wife or girlfriend wasn't around. But no one would come out and directly say it, don't ask don't tell kinda stuff. So I decided to make things easier for all of us.\n\nOne week I set up a guys night at my house on a Friday night. My wife and kid were at her sister's for an overnight stay so I knew I had the house to myself. It was going to be me and 3 of my best buds - Steven, David and Tom. The guys all arrived within a few minutes of each other and I had every thing ready. \"All right guys I've decided we should start a monthly club.\"\n\n\"What kind of club? You mean like poker night or bowling?\"\n\n\"No. A Jerk Off Club.\"\n\nThe three of them didn't say a word just stared at me. Then they burst out laughing.\n\n\"Are you fucking kidding me? What kind of gay shit is that? I'm not jerking off with any guy.\" David said angrily. \n\n\"I don't jerk off at all I'm married now. \" Tom said. \"I just watch porn to get turned on. Then I fuck my wife when she gets home.\" he smiled.\n\nMy friend Steven didn't say anything. He and I had gone to high school together and we had jerked off lots of times in each others presence. Hell I had shown him his 1st porno movie at 18 at the end of our senior year. He got so hard he was shifting uncomfortably on the couch so I asked him if he had ever jerked off before and he said yeah so I told him to go into the bathroom and do it if he wanted. He did and came out looking relaxed so then I went in and did it too while he waited. We watched a few more movies together over the next month, doing the same routine when one time I just took it out in front of him and said \"It's better when I am watching the movie, ya know? You can go in the bathroom and wait until I'm done then we can switch.\" \n\n\"No that's ok. I feel the same way. Would you mind if I did it next to you?\" His eyes kept shifting from the screen to my cock in my hand as I gently rubbed up and down.\n\n\"Go ahead.\" I replied. He quickly started pawing at his belt and pants and soon a hard 8 inch cock sprang out. It was thick and stiff as a rock. He started pounding it watching the fucking on the screen. We sat there side by side two 18 year old horny teenagers jerking off until we both came. Good times.\n\nWhen he didn't say anything I knew he was flashing back to that day. I also knew from his smile that he was in. I just had to convince the others.\n\n\"Tom get real and be honest. I know you fuck your wife. Hell we all fuck our wives. But the never want to have sex as much as we do. If they did we wouldn't need porn. You gonna sit there and tell me that all the tapes we swap back and forth, all the times you watch when she isn't home, you NEVER jerk off?\" I asked skeptically.\n\n\"Well...\" he said sheepishly \"maybe once or twice.\"\n\n\"Bottom line. I like porn. No I LOVE porn. My wife doesn't as much and rarely watches with me. I know you guys love porn and we already watch sports together so why not porn?\" Steven and Tom just laughed but David looked pissed. He was very uptight about some things and admitting he jerked off was one of them. \"I'm not joining any jerk off club. That's sick.\"\n\n\"Look I have some ground rules so just hear me out ok? First rule of jerk off club is you don't talk about jerk off club, to paraphrase Brad Pitt. None of us here would discuss it with anyone else.\n\nSecond is if you come to the club you cum at the club. No one just sits there so the others get embarrassed. Either we all do it or it doesn't happen. I got a two hour tape so this is how it will work. For the 1st half hour nothing happens. We just sit there and watch so everyone has a chance to relax and get turned on. At the end of the first half hour, I pause the tape and we have to take our pants and shirts off. That's the time that anyone who wants out can leave. After we are in our underwear the tape starts again.\" I said.\n\n\"Are we just gonna sit there not talking?\" asked Steven.\n\n\"No, talking is okay. Shit I tell the women on the screen how I would love to do them. Trash talk is encouraged in my book.\" \" Ok we're in our underwear now what?\" asked David.\n\n\"Well for 30 minutes or so we just sit watching, get comfortable being together with hard dicks. At the 1 hour mark the bottoms must come off, no exceptions. At that point jerking off is allowed to begin. No hiding all bent over either. We've come this far and someone is going to be the biggest, someone is going to be the smallest, no big deal. I have baby oil and towels all set up down stairs if you want to do this. Last thing is after you cum, no one gets dressed until the last guys cums. I'm not making anyone ashamed being the only guy with his dick out with the others waiting.\" I had even written them down.\n\n1 If you come, you cum no exceptions. 2 First half hour you just sit and watch; no touching yourself just get nice and horny. Talking to the screen and each other is encouraged to establish bonding. 3 At 30 minutes pants off. Once the pants come off you're committed. Before that you can leave no hard feelings. 4 After one hour briefs come off. At this time stroking and jerking off is to begin. 5 No hiding yourself. Everyone is going to look at everyone else. 6 Cumming is to be done publicly. Announce when you are about to cum. Someone has to be first, someone has to be last. 7 No one is to get dressed until last man shoots. You must sit there and wait so as to not make the last man uncomfortable. \n\nSteven stood up and clapped his hands together sharply. \"I'm in! I haven't seen a good porno in months and I could do to bust a nut.\"\n\nTom said \"I guess so, if you guys are.\"\n\nDavid was stubborn. \"C'mon down watch the first half hour, if you want to leave when the pants come off ok.\" I pleaded.\n\nI really wanted all of us to share in this ultimate male bonding experience and he was a good friend. He grudgingly agreed, stood up and followed us into the rec room down stairs. I had everything ready. I had arranged my two lounge chairs and the couch so as we all had a clear view of the screen and each other. I knew if we couldn't all see each other the guys would get self conscious. Me, I'm a freak at heart. I love to watch people cum and have no problem letting anyone see me shoot. The tape I had rented was a compilation tape that was edited for the most content. A bunch of scenes cut together eliminating all of the forced acting. I sat on the couch with David while Steven and Tom each took a chair.\n\n\"Ok here we go!\" I said excitedly. The tape started and the first thing we say was a set of huge tits bouncing up and down around some lucky guys cock as she sucked on the head.\n\n\"Damn you weren't playing when you planned this\" Steven laughed. \"I love bitches with big knockers.\"\n\n\"Who doesn't?\" David said with a soft smile next to me.\n\nFor the next half hour, we saw 5 quick scenes of sucking and fucking. In the first five minutes I was hard but I couldn't tell about the other guys. I checked the clock and said \"Time out. Clothes off time.\" \n\nThis was the test. The club was going to start or fail right here. So as to break the tension I quickly stood up and unzipped my jeans. With a quick motion I pulled them down, my hard cock straining at my underwear, making a tent. I could feel three sets of eyes locked on my cock as I pulled my shirt over my head. I tossed it next to the couch on the floor with my pants and sat down.\n\n\"Hurry up guys I want to see more of the tape.\" Steven pulled open his belt.\n\n\"No problem, I'm ready to bust if I don't let him out.\" He pulled of his clothes and Tom quietly got undressed too. That only left David. He was horny I could tell. His eyes were glued to the screen the whole time. He looked at the three of us in our underwear and sighed. \"I can't believe I'm doing this.\" He quickly ripped his shirt and pants off and sat back down without looking at us.\n\n\"Put the tape back on before I change my mind.\" I started the tape back up and sat back with my legs stretched out in front of me. My dick was standing up proud and tall tenting my underwear and I didn't care who saw it. Steven's dick was biggest from what I could tell and David, Tom and I were all about the same size (not like I had a ruler to measure with) so I was glad no one was going to be made to feel really insecure. \n\nOn the tape was a foursome with 2 guys banging away on two girls doggie style. \" That's right tap that ass!\" I said loudly, trying to break the tension I could feel building as the 1 hour mark got closer.\n\n\"Man look her tits shake\" David moaned \" now that's a set of tits I could cum on.\" he was fondling his dick thru his under wear. I looked to my left and Tom and Steven were also rubbing their rods.\n\nI certainly was ready so I stopped the tape again. \"Ok drawers off. Its jerk off time.\" I pulled my underwear off and my cock spring up happily. The guys looked at me standing there with my dick bobbing in their faces. \"Tom hand me the baby oil\" I ordered.\n\nHe blinked and handed it to me. I squirted some into my hand and rubbed it onto my shaft. I closed my eyes and hissed. It felt so good! I re-opened my eyes and sat back down stroking myself. Going first once again broke the spell. Steven was next to take the bottle and use it. He shot the oil directly onto his cock. It gleamed as it slowly dripped down the sides. His hand slid up and down as he said \"start the tape man start the tape, I gotta bust!\" \n\nTom just shrugged and helped himself to the oil. He put some in his hand and reached under his underwear to apply it.\n\n\"Un uh Tom. Take em off. We are all gonna shoot a load in front of each other. That's what this is all about. Jerking off and enjoying porn to the fullest.\"\n\nTom looked at me and Steven stroking our dicks with our balls hanging out. He looked over at David still in his underwear. \"I will when he does.\"\n\nDavid looked nervous. He looked at me and at my dick in my hand. \"It's just the guys here. No one is going to know. Just us.\" I told him. He then stood up and yanked down his underwear. His cock was thick and red and a drop of precum was oozing out of the top. \"I've never used baby oil. I only use my spit. Does it feel better?\" He asked.\n\n\"Oh yeah, lots better.\" Tom said. He stood up and handed over the bottle to David. Before he sat down he pulled his briefs off too. David put some oil into his hand and spread it on his cock. His eyes got wide and his legs fell open as he stroked.\n\n\"Damn that's nice.\" he looked at me and jerked his chin towards the television. \"Start it.\"\n\nSo there we sat. Fours guys in tee shirts and no under wear. Dicks in hand stroking away as women fucked on screen. The smell of sex was is the air: I could hear hands moving on cocks, balls being rubbed. The guys were totally into it now. There were no more inhibitions about others in the room, we all wanted, no needed to cum! For about ten minutes we talked about what we liked about the women - \"nice tits...man I wanna fuck her...suck that dick baby....that's a hot looking ass...cum on her ass man... cream those tits buddy yeah!\" I kept taking my eyes from the screen to look at my friends. Seeing them jerk their hard cocks was really turning me on! \n\nSoon I felt that familiar feeling building up in my balls. \"I think I'm gonna shoot soon guys.\" I called out. \n\n\"I've been close ever since I put the oil on.\" Tom said pounding away. \"I just didn't want to go first.\"\n\n\"Shoot whenever you want.\" I told them all. \"As a matter of fact....\" I stammered. On the floor I had spread out an old towel to be the cum catcher. I got off the couch and knelt down next to it. \"Ah ah ah ah AHHHHHH! I said as my orgasm hit. Jets of hot sticky cum shot out of my dick onto the towel. After being hard for an hour, watching porn, watching three guys jerk off, knowing I was being watched, I just came and came for almost a full minute! \n\nAs I was still shooting, I felt David kneel next to me. I looked at him as he grunted and began to cum. He was looking at the screen at a woman sucking off 2 guys at once.\n\n\"Suck me bitch, drink it all\" he said through clenched teeth, his cock in a death grip as cum arched out of the tip to splash onto the towel. I sat back onto the couch, my cock drooping. David was shaking as his orgasm subsided. \n\nTom and Steven watched us and cheered. \"Woo wee that was a big load you shot.\" Steven said as he sat forward.\n\n\"I'm ready now.\" Tom got on the floor too. \"Wait for me!\" he said.\n\nDavid rejoined me on the couch. He looked at me and mouthed \"wow\" as he sat back panting. \"That was great\" he whispered to me. \"Watching with other people is really fucking hot.\"\n\nWe sat and watched as Steven and Tom knelt side by side watching the screen, their hands flying on their dicks, their ass cheeks trembling. Steven suddenly sat straight up and yelled.\" OH YEAH!\" and cum freaking erupted from his cock! I mean it was like a sprinkler turned on. Mere seconds later Tom shook like he was having a seizure and began shooting too. David and I began chanting \"shoot, shoot, shoot\" as the two of them emptied their loads. Hot gobs of semen spurted from their cocks to join David and my loads on that poor towel. Between the four of us we soaked it!\n\nWhen they both finished cumming they sat back in their chairs, chests heaving. Their dicks glistened as they began to shrink.\n\n\"That was one of the best nuts I have ever shot to a porno.\" Steven said panting.\n\n\"I knew watching together would be fun, but I didn't think I could jerk off with other guys and not feel funny or kind of gay about it. But I have to admit it wasn't like that. It was really fun and it was fucking hot watching you guys shoot; my own nut felt spectacular! \" David said looking at me and the other guys.\n\n\"So is the Jerk Off Club official now? \" I asked innocently.\n\n\"Definitely.\" Tom said firmly.\" Once a month we have got to get together and do this.\"\n\nSo on that day the Jerk Off Club was officially born. We've gotten together every month for the last year at one of our houses when the spouse was away and every time its been terrific. Watching porn with the guys is great and if you play your cards right, follow the rules I've created, and you are a close as we are, you could start your own club too. "
    ],
    "authorname": "MADDRAPPER",
    "tags": [],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/the-jerkoff-club"
}
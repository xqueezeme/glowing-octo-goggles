{
    "title": "Like Minded Neighbors Ch. 03",
    "pages": [
        "I sat at the kitchen table for a while with just my top on and thought about what I'd done with Steve and Jim. Jim had left my panties shoved up into my pussy, telling me to leave them there until he got home from the hardware store. As I reflected on my behavior and the way Steve and Jim watched me masturbate, one could say I was basking in the afterglow of my first exhibitionist masturbatory success when the phone rang. I should have just let ring, but since the phone was so close, I stood up, took a step to the phone and picked it up.\n\nIronically, it was Shelly, Steve's wife. As I said before, Shelly and I were friends, closer than close, and she was someone who knew me almost as well as Jim did.\n\n\"So, what's up?\" Shelly asked.\n\n\"I'm in the kitchen, cleaning out my cabinets.\" I said. \n\n\"Oh!\" Shelly replied. \"That doesn't sound like fun to me. Want some help?\"\n\n\"Uh..... well, to tell you the truth, I'm not really dressed.\" I answered, peering down between my legs and looking at the few inches of panties dangling from my pussy .\n\n\"Well, you're not naked, are you?\" Shelly asked, laughing.\n\n\"No!\" I said, chuckling. \"I'm not naked, Shelly. Not entirely, anyway.\"\n\n\"Well, it wouldn't bother me if you were.\" She said, laughing into the phone. \"I'll be over in five minutes.\"\n\nShit! I scrambled up to the bedroom to throw on a pair of shorts and ran back downstairs. When Shelly said five minutes, she really meant two, and even though I didn't take time to put on a bra, I was at least covered now. \n\nI let Shelly in and she giggled when she saw my loose breasts under my shirt and my nipples poking out. \"That's a cute look.\" Shelly said, snickering. \"Got your high beams on, I see.\"\n\n\"Stop it!\" I replied. \"I'm just trying to take it easy and be comfortable today, that's all.\"\n\nWalking over to take a look at the cabinets I was cleaning out and all the stuff strewn all over my counter, she said she didn't have much to do and would be glad to help me finish. So, over the next fifteen minutes she gave me some ideas on how to move things around and we got started on it. While we were working, I decided now would be a good time to see what she knew about the boys trading our worn panties back and forth between the two of them. I knew I had to be careful, though, because Shelly was no dummy. She'd be able to see through any smoke screen I tried to lay out.\n\nShe was standing on one of my chairs, reaching up to the highest shelf in one of my cabinets. \"Shelly,\" I began, \"can I ask you a personal question, uh, about you and Steve?\"\n\nWithout even looking down at me or thinking about it, she said, \"Beth, you know you don't have to ask permission to ask personal questions.\"\n\n\"Well,\" I replied, \"okay, but, feel free to stop me if you think I'm getting where I don't belong.\"\n\nShelly looked at me and shook her head. \"Spit it out, girl!\" Shelly said. \"There's nothing off limits between us. You know that.\"\n\n\"I was just wondering how Jim feels when other guys look at you.\" I said. \"I mean, when you're out together and guys start checking you out. You know what I mean - like they're undressing you. Does he get mad?\"\n\n\"Are you kidding?\" Shelly answered, as she stepped down off the chair and threw her hands up in the air. \"It's more like the damn fool loves it.\"\n\n\"It used to bother me,\" Shelly continued, as she reached into my cabinet with a handful of cans, \"but, I think it actually turns him on. Sometimes he'll ask me to go braless, or even commando when we go out, and he'll always find a way to put me in a potentially compromising situation, if you know what I mean.\"\n\n\"Yeah, I know exactly what you mean.\" I said, feeling a little relieved. \"Jim's the same way. We even....... uh..... oh, never mind.\"\n\n\"What?\" Shelly said. \"Come on, Beth. What were you going to say?\"\n\n\"This is embarrassing, Shelly.\" I replied, hiding my face in my hands, and then peeking out behind them and looking at her. \"We go to the mall sometimes, and, I kind of tease other guys while Jim watches.\"\n\n\"No way!\" Shelly said, looking down at me from where she stood on the chair. Her eyes lit up and her face broke out in a big grin.\n\nNodding my head, I answered, \"Uh huh.\"\n\n\"And he gets off on that?\" She asked.\n\n\"Oh yes.\" I answered. \"Big time.\"\n\n\"That's way cool!\" Shelly exclaimed. Then after a second, she added, \"That's not so uncommon, Beth. A lot of men like to show their wives off in an innocent way. I guess it's their way of being the alpha male and displaying their domination.\"\n\n\"Uh, maybe so.\" I replied. \"But, what we're doing isn't that innocent. Then we run home and have sex for hours.\"\n\n\"You mean you're exposing yourself, or something?\" Shelly asked, looking at me intently and waiting eagerly for an answer.\n\n\"Well, not all the way!\" I exclaimed, feeling my face turn red. \"I mostly let guys look up my skirt, that's all. Stuff like that.\" \n\n\"Beth, you naughty girl!\" She chided as she stepped down from the chair, smirking at me. \"You're an exhibitionist?\"\n\n\"Shelly, please don't say it like that.\" I replied. \"I do it for him. It turns him on.\"\n\n\"Judging from how red your face is right now, I'm betting it turns you on, too.\" Shelly said. \"But, hey, if it works for you guys, and no one gets hurt, then I don't see anything wrong with it!\"\n\nShelly stopped and looked at me for a few seconds. Then she smiled and crooked her head and asked, \"You promise to be truthful with me?\"\n\n\"Sure.\" I replied, reaching for an armful of things to put back into the cabinet.\n\n\"When Steve came over to pick up Jim for their trip to the hardware store, were you wearing that shirt? Did my husband see your nipples?\" Shelly asked.\n\nI turned even redder, and Shelly instantly knew the answer to her question. \"Yes.\" I said.\n\n\"And, I bet Jim was fine with it. Wasn't he?\" Shelly asked. \n\nI nodded my head and told her I was sorry, but, Shelly didn't seem to be upset at all.\n\n\"In fact,\" Shelly added, \"I wouldn't be surprised if Jim was all for it. He was probably in heaven and I bet Steve wasn't complaining, either. You know how guys are about boobs and nipples.\"\n\nI looked up at Shelly and gave her a half grin. \"Please don't get mad at Steve.\" I begged. \"It wasn't his fault. It was kind of a set up. He walked right into it.\"\n\n\"Oh, Beth!\" She said, laughing out loud. \"I'd never be mad at Steve for that. He's a guy and all guys look at boobs and nipples. That's how they're wired.\"\n\nThen, she took my hand and led me to my kitchen table and sat down across from me. \"To tell you the truth, I'm a little bit surprised, though.\"\n\n\"Why?\" I asked.\n\n\"Beth, you're kidding right?\" She said.\n\n\"What?\" I replied.\n\n\"Haven't you ever seen those two guys together when they didn't think anyone was watching?\" She inquired.\n\n\"Huh?\" I asked.\n\nShelly's face went stone cold. \"Beth, I'm being serious now.\" She said. Then, reaching out and putting her hand on top of mine, she asked, \"You really haven't noticed?\"\n\n\"Noticed what?\" I asked.\n\nShelly took a deep breath and looked over at me, asking, \"Remember when I said I was surprised a minute ago?\"\n\n\"Uh huh.\" I answered.\n\n\"That's because I think Steve's might be more interested in Jim than he is in you.\" After Shelly said it, she looked at me and waited for me to say something.\n\n\"Well, I know those guys are always together.\" I said. \"The two of them are as thick as thieves.\"\n\n\"No,\" Shelly said, \"that's not what I mean.\" Then leaning forward and looking at me, she said it again. \"I think Steve's interested in Jim more than he's interested in you.\"\n\nFor the life of me, I couldn't understand what she was talking about, and then it hit me like a freight train. \"You mean, interested like as in, uh, more than his friend?\"\n\n\"Beth,\" Shelly said very seriously, \"I know we've never discussed it, and I guess there's a chance I could be wrong, but, it seems to me Steve might have a little crush on Jim, and, I think Jim might feel the same way, too.\"\n\n\"You mean they're gay!\" I asked, not believing any of it.\n\n\"Oh, hell no!\" Shelly exclaimed. \"Jim loves you more than he loves himself, and I know Steve loves me with all his heart. I just think those two have grown to be very close, and I think they both have some curiosity about each other.\"\n\nI stopped to consider what Shelly was saying, and once I gave it some thought, there were some things that were kind of strange. Shelly and I sat there together for the next thirty minutes exchanging notes about our husbands and things we've noticed. Shelly mentioned how Steve always comes back from the gym with a hard-on, and wanting to have sex when ever Jim goes with him. Thinking back over the last several weeks, I realized I'd seen the same kind of behavior with Jim. He comes back from the gym all worked up, and before I know it, he's all over me. Not that I'm complaining, but, yes \u2013 it's been happening.\n\nThen, Shelly brought up how they are always together, \"If you watch them closely, they're always touching \u2013 always doing that fist bumping thing, or slapping each other on the back, or putting their arms around each other's shoulders.\"\n\nIt was true, I never gave it much thought, but it was definitely true. I've seen them do those things tons of times and I just thought it was guy stuff. \n\n\"Shelly,\" I said, softly, \"did you know they were exchanging our panties? Jim has been giving my panties to Steve, and Steve's been giving your panties to Jim?\"\n\n\"No!\" She said, obviously surprised to hear it. \"How long has that been going on?\" \n\n\"I don't know, but, it's true.\" I replied. \"I overheard them talking about it over the phone. They take the panties we wear after we have sex and swap them back and forth. They even stroke them selves into our panties before they give them back.\"\n\n\"Beth, are you absolutely sure they've been doing that?\" Shelly asked.\n\n\"I'm positive.\" I answered. \"This morning I overheard Steve tell Jim he was going to bend you over in your kitchen, have sex with you and then get your panties when you took a shower and give them to Jim when they went shopping.\"\n\nShelly sat there for a second. \"That sneaky bastard.\" She hissed. \"He snuck up on me in the kitchen and started kissing me. The next thing I knew he was pushing me over the counter and pulling up my shirt. I tried to pull my panties down but he stopped me and just moved them aside and put it in me.\"\n\nThen she looked up at me in shock. \"Beth, those panties were soaked with cum when I took them off. I almost rinsed them out there was so much, but, I just threw them in the hamper.\"\n\n\"I'll bet you ten bucks Jim's got them now.\" I said, sitting there solemnly. \n\nAll of a sudden, Shelly started smile as she looked up at me. \"Beth, I wonder if our husbands have a little bi-curiosity thing going on.\" Shelly curiously asked. \"Why else would they be trading panties with their cum in them? Fresh cum.\" \n\nShelly went on to tell me a story that I would have never believed if it wouldn't have come directly from her mouth. Apparently, Steve had been bi-curious for some time \u2013 at least as far back as when they were dating. He'd never acted on it, though. He'd never played around or experimented with another man, but, Shelly told me he was honest about it from the start. Shelly never felt threatened by it because Steve seemed to be content just fantasizing about it. \n\nShe told me they had an old VHS tape from years ago they watched from time to time when they had sex. The plot was pretty cheesy, but, the crux of it went like this: two couples get together like they're going to swap partners. The gals take off their panties and make their husbands jack off into them. Then, once the panties are creamed with their husband's cum, each husband offers his wife's panties to the other man, and they lick and suck them clean \u2013 each man eating the other man's cum.\n\nThen, the wives have sex with the opposite husband, making each man get the other one hard, and then cleaning their messy pussies when they were done. The tape ended with the men fondling, stroking and sucking each other, and then all four of them having sex together.\n\nAs I listened to Shelly tell her story, I thought about the boys exchanging our panties, and how Jim was so excited about eating me out that night I played my little game \u2013 the night I pretended I was going to meet an old boyfriend. I told Shelly about that night, how excited Jim was to go down on me the instant I walked in the door, and how he dove back in and licked me after he'd fucked me and cum inside me.\n\nShelly confided in me, too. She said Steve always licks her after he cums in her, and it was something they'd been doing since they were dating. Shelly said she was just as thrilled about him doing it, as he was to do it. She even told me how much he loved it when she kissed him with a mouthful of sperm from a blow job.\n\nThe more we talked about it, the more things came to light. For instance, I mentioned Jim's insatiable interest in my panties, and Shelly just nodded her head. \"Uh huh..... Steve's a panty monster, too.\" She said. \"He's got a very strong panty fetish, Beth. And I mean very strong. There's no doubt about it.\"\n\n\"I don't know about you,\" Shelly added, \"but, none of this surprises me now. I've always expected that Steve would eventually find a guy he could experiment with and work out his curiosity. And, to be totally honest with you, I've always looked forward to this happening. Not only for him, but, for me, too.\"\n\nI couldn't deny my own interest, either. I knew Jim well enough to know he wasn't gay. But, after talking with Shelly, I had to admit that Jim might be curious, too. There were just too many coincidences between what Shelly was saying about Steve and what I was seeing in Jim. We both agreed we didn't feel threatened by it, and Shelly said that with as much time as they spend together, one of them would eventually try something, and it would probably be Steve. \n\n\"What do you think we should do?\" I asked her.\n\n\"Well,\" she answered, \"first we better be sure of what we're saying here. Then, if we're right, I say we find a way to tell them its okay and then we get these guys together!\"\n\nShelly looked at me, waiting for me to say something \u2013 to either agree or disagree. I knew exactly what she meant by getting them together, and that scared me. I'd heard stories of husbands turning leaving their wives, and I didn't want to lose Jim like that.\n\n\"Look,\" Shelly added, \"we'd just add some encouragement, gently nudge them together and watch what happens. I'd rather have Steve getting what he wants at home \u2013 from me and you and Jim \u2013 rather than out on his own. Think about it, Beth.\"\n\n\"You mean just let them have each other?\" I asked.\n\n\"No,\" Shelly said, chuckling, \"I mean we allow them to do it with our approval and in our presence. If we don't, we run the risk of them sneaking around behind our backs. The way I see it, we really don't have a choice. If we don't manage this \u2013 the two of us - they're going to eventually get up the nerve to act on it themselves, and then they'll feel guilty about it, and they'll want to hide it and keep it a secret.\" \n\n\"How about this,\" Shelly said, \"let's just keep our eyes open for right now. In the mean time, use your feminine skills to see what you can find out from Jim and I'll do the same with Steve. We'll compare notes and decide what to do next.\"\n\n\"Oh!\" Shelly blurted out loudly. \"Remember that tape I was telling you about? Do you want to watch it?\"\n\n\"You mean now?\" I asked.\n\n\"Absolutely.\" Shelly replied. \"It'll give you an idea of what Steve's been seeing and I wouldn't be surprised if he hasn't let Jim borrow it.\"\n\n\"The boys will be back from the hardware store pretty soon.\" I answered. \"They've been gone well over an hour now.\"\n\n\"I can fix that.\" Shelly said. \"I'll be right back.\"\n\nShelly ran out the front door leaving me sitting at the table thinking about everything \u2013 the way I'd exposed myself to Steve; learning they were exchanging our panties; hearing Shelly tell me about Steve being bi-curious and thinking Jim might be, too. It was complex and complicated, and I was just to the point where I realized I was in overload when Shelly rapped on the door and let herself in. I was still sitting at the kitchen table when she sat down across from me and slid the video tape over to me.  She had her cell phone in her hand and a huge grin on her face. \"This will keep 'em busy for at least another two hours \u2013 I guarantee it.\" I watched as she pushed the buttons on her cell phone, held it up to her ear and grinned like the Cheshire Cat. \n\n\"Hi, Baby.\" She said. \"Are you still out with Jim?\"\n\n\"So, you're still at the hardware store?\" She asked into her phone, smiling over at me. \n\n\"Good.\" Shelly said. \"Can you pick something up for me while you're out?\"\n\n\"Okay. I want you to go the adult store over on Crescent Avenue and get some of that anal lube we use. We're out.\" Shelly said to Steve, looking over to me and trying hard not to laugh into the phone.\n\n\"But, Baby,\" she said, softy, \"I was thinking you might want to play with the strap-on tonight.\"\n\nShelly sat there for a moment listing intently. I couldn't hear what Steve was saying, but, I was shocked she'd say something like that in front of me.\n\n\"Well, if you want me to fuck that cute little ass of yours tonight, you'll just have to deal with it.\" Shelly said. \"I don't care what you say to Jim.\" She added. \"Tell him anything you want. Tell him your wife is a horny, wanton slut and needs a new vibrator. Then, go look at the toys and pick something out to surprise me, and when you go to the register, pick up one of those bottles and you're set. Or as far as I'm concerned,\" she said, holding back a laugh, \"just tell him I want you fuck me in the ass tonight and I won't let you do it without the lube.\"\n\nShe listed again for another minute, grinning over to me and listening. After another few seconds, she nodded her head and said, \"Oh, good, Honey. Tonight I'm going to make you moan like a school girl. Don't let me down, now.\"\n\nAfter another few seconds, she hung up and set her phone down. \"It'll take them forty five minutes to get there, and probably thirty minutes to shop and then another forty five minutes to get home. We've easily got two hours, and that's plenty of time to watch the tape!\"\n\nI could see the sparkle in Shelly's eyes after she said it. But, she must have seen the look of surprise on my face, too. \"What's that look for?\" Shelly asked. \"The strap-on?\"\n\nI nodded my head and cracked a small smile. \n\n\"Think what you will.\" Shelly simply said. \"He likes it up the butt, and its fun for me, too. Don't go getting shy and innocent on me, either, Beth. I'll tell you a little secret \u2013 once you take your man with a strap-on, you'll own his heart forever. And they love to be touched and played with back there. Don't pretend you don't know that.\"\n\n\"I know what you're saying.\" I replied, looking over at her. \"Jim likes to be touched there, too. I just never though about actually sticking something in there, you know, except my finger.\"\n\nShelly looked at me and gave me a knowing smile. \"Trust me, Beth. He might not think he'll like it before you do it, but, I promise you this - he'll thank you afterwards.\"\n\nShelly smiled and held the video tape up, saying, \"Wanna watch this now?\"\n\n\"I guess so.\" I said, getting up and pointing to the living room where the big screen TV is. As we walked, I asked Shelly, \"So, you said Steve has a big panty fetish, huh?\"\n\n\"The biggest!\" Shelly replied. \"I call him my Panty Boy.\"\n\n\"Does he ever, uh, do anything weird with your panties?\" I asked.\n\n\"You mean like sniff 'em, or jerk himself into them?\" Shelly said. \"He does that all the time.\"\n\n\"No.\" I answered. \"I mean, uh, this is hard to ask, Shelly. But, does he ever push your panties up into you? Up inside your vagina?\"",
        "Shelly stopped dead in her tracks and turned to face me. \"It's called Panty Stuffing.\" Shelly said. \"And yes, he does. But, I'm curious why you're asking me that.\"\n\nI pulled her over to the couch and we sat down. Then, turning toward her I explained. \"This morning, Jim did that to me. It's the first time he's ever done it.\" I said. Then I told her how he told me to leave them in and he'd take them out later.\n\n\"See! What did I tell you?\" Shelly said, raising her hands and pointing her finger at me. \"I told you those two were close. I bet Steve got him started on that.\"\n\n\"You think so?\" I asked.\n\n\"Beth, don't be so na\u00efve!\" Shelly replied, crossing her arms across her chest. \"Do you still have them shoved in you?\" She asked.\n\nI began to blush and turn a deeper shade of red than every before. \"Uh huh.\" I answered softly. \n\nWith a sly grin on her face, Shelly said, \"Show me.\"\n\n\"What?\" I replied, thinking she was just joking.\n\n\"You heard me, Beth.\" Shelly said back to me with that same sly grin. \"We're both females here,\" she added, \"and besides, if you're really an exhibitionist it shouldn't bother you at all. You might even enjoy it.\" Shelly smiled at me and settled back into the couch, waiting.\n\nNow, Shelly and I were close, and, we've shared a lot of private things. And, not even counting the secrets we were sharing this morning, we carried on like we were sisters most of the time. We'd seen each other's breasts numerous times and we'd seen each other in our panties while we were trying on clothes. I even knew she kept her pussy perfectly waxed because Steve liked her that way.\n\n\"Come on.\" She urged. \"I'll tell you something really secret about me if you do?\"\n\n\"Like what?\" I replied, trying to turn the tables on her.\n\n\"Well, you told me how you like to expose yourself.\" Shelly answered. \"I'll tell you something I really like. Something just as nasty, Beth.\"\n\n\"You go first.\" I said, challenging her to put her money where her mouth is.\n\n\"Okay, no problem.\" She said. Then, starting to blush, herself, Shelly leaned forward on the couch and rested her elbows on her knees and said, \"I like to be spanked.\"\n\nI broke out in a big smile and started to shake my head like I didn't believe her.\n\n\"Really, Beth.\" She said, reaching out to touch my knee. \"I'm telling you the truth.\"\n\nI listened to Shelly tell me about her spanking fantasies. \"Just like you get off on exposing yourself to other guys, I get off on being spanked.\"\n\nShe told me being spanked puts her in a completely different place, physically and emotionally. She told me how she loved the submission aspect of being scolded and then receiving her spanking. \"Being forced to undress myself in anticipation makes me shake and I get so incredibly wet, Beth. And, Steve's really good at it, too.\" She said. \"He makes me get completely naked, and sometimes when I'm over his lap, he'll stuff my panties in my mouth like a gag, or sometimes he'll push them inside my pussy. He doesn't really hurt me, it's more of a sting, but he uses his hand and sometimes a paddle. He bought me this little leather whip thing that's kinda nice, too.\"\n\nShe went into a lot of detail. She told me sometimes she gets spanked on her butt, and sometimes on the fleshy parts of her pussy. Sometimes, Steve made her beg for her spanking, and sometimes he'd just walk up to her, take her by the hand and tell her she was going to get spanked. \n\n\"Then afterwards,\" Shelly said, \"he'll make me suck him, or he'll take me from behind and pound into me as hard as he can.\"\n\n\"One time,\" she continued, as the blush on her face seemed to darken and she became obviously embarrassed, \"Steve spanked me in front of one of his old college cronies. This guy was in town for a business meeting and we went over to his hotel for drinks and dinner. I drank way too much in the bar and Steve started kidding around, telling the guy he was going to have to spank me when we got home. I'm sure the guy was joking when he offered his room at the hotel for Steve to spank me, but, a minute later we were on the elevator and Steve was whispering to me, telling me to be brave and let it happen.\"\n\nI sat riveted to Shelly as she told me the story \u2013 how Steve made her stand in the middle of the room and take all her clothes off in front of this guy. Every time she took something off, she had to hand it to him. She said it was agonizing when she got down to her bra and panties, but, she did it.\n\nWhen she took her panties off, Steve told her to turn and face the guy and offer him her panties. \"It was so humiliating, Beth.\" Shelly said, obviously affected by what she was telling me. \n\n\"He told his friend not to feel sorry for me.\" She continued. \"And, when Steve pulled me over his lap, he made me spread my legs and then he held me open from behind and showed his friend how wet I was. And, Beth,\" Shelly said, almost breathlessly, \"I'd never been so wet in my entire life. When he pulled me open, it was like all this juice ran out of me. That's no exaggeration, I swear it.\"\n\nAnd so, Shelly was spanked in front of Steve's old college friend. She'd get a few swats and then Steve would finger her pussy and rub her clit. Then, she'd get a few more swats and he'd fondle her again. Steve kept it up until he made her cum.\n\n\"I have no idea how many times he actually spanked me,\" she explained, \"but I heard his friend say something about how my butt was turning red. And, when I came, it was like all the lights were going on and off and sirens were blaring. My butt was stinging, my legs were kicking, my privates were opened up and I had the mother of all orgasms, Beth. That's no bullshit. It was awesome.\"\n\nWhen she finished speaking, Shelly said it was the single most thrilling sexual episode of her life. Once they got back home, they had sex for hours and I could see just by the look in Shelly's eyes how memorable it was for her, especially when she was being spanked in front of her husband's old friend.\n\n\"Wow.\" I said, as I stood up. \"That was an amazing story.\" Then, putting my fingers into the waistband of my shorts, I kept my end of the deal and pulled my shorts down to my knees and turned to Shelly so she could see what Jim had done with my panties.\n\nShe leaned in to look at me closer, and when she did, I spread my feel as far apart as I could with my shorts at my knees and looked down at her. \n\n\"Yep.\" She said as she stood and unsnapped her jean shorts. A second later, we were both standing there with our shorts pulled down and I could see about two inches of a pair of panties hanging down from her hairless pussy lips. \"Now you know why I wanted to see.\" Shelly remarked. \"It seems our husbands were coordinating more than a trip to the hardware store this morning.\"\n\nTo be continued "
    ],
    "authorname": "BethB",
    "tags": [
        "panties",
        "masturbation",
        "exhibitionist",
        "voyeur",
        "panty stuffing"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/like-minded-neighbors-ch-03"
}
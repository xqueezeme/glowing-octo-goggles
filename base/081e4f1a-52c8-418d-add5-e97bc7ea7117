{
    "title": "Transformations - Return to Sinful Suburbia Ch. 04",
    "pages": [
        "Comments welcome. \n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 \n\nIt was strange to see Christine carry Jeffrey from her car and into Betty Cavendish's house. \n\nJeffrey was thin but very tall, and now of course he had those flared hips and big boobs. \n\nYet Christine carried him like he was a doll up the driveway and through the front door. \n\nStranger still, she passed him without so much as a groan into Betty's waiting arms. \n\n\"Thank you, oh, thank you,\" Betty sobbed as she raced up the stairs, showing no more effort than Christine with her burden. \n\nChristine turned to Carrie and smiled. \"I'll need to help her for a few minutes. She opened her purse and pulled out a pair of white goggles with attached earphones. \"You can wait in the living room. Put these on - there's a sort of orientation video. It explains everything a lot faster than I can.\" \n\nCarrie stared at the goggles. \"Are those going to hypnotize me?\" \n\nChristine laughed. \"No, I told you: no more hypnosis. It just tells you what you need to know. You can ask the woman on the video questions, and she'll answer them. No tricks, no lies. Just the truth. I think you can handle that now.\" \n\nCarrie took the goggles. \n\nChristine touched Carrie's cheek. \"There are wonders. You'll see.\" She turned and went up the stairs. \n\nCarrie stared at the goggles and walked into the living room. \n\nShe almost screamed when she saw David Cavendish standing in the middle of the room. \n\nShe remembered Mr. Cavendish, Betty's husband, from church. \n\nHe had changed. \n\nDavid Cavendish had seemed tall and imposing when she had seen him in church. \n\nHe was tall, but no longer imposing. \n\nDavid Cavendish was dressed in a black latex bodysuit from his neck down to his toes. It looked slick as if it was coated in some sort of lubricant. \n\nHis head was shaved, even his eyebrows were gone, and his skin looked pale in contrast to the inky black outfit. \n\nHe stared at the floor. \n\nThe crotch of the suit was open, and his small cock was trapped in a gleaming silver chastity. \n\n\"Mistress, I am David Scum di Cavendish. I was abusive to my goddess, and now I serve. I am Sub Slut class, Whore Caste. How may I serve you, Mistress?\" His words were oddly slurred. \n\nCarrie stared in shock. \"I... I don't need anything.\" \n\n\"I have been modified for your pleasure,\" he said, eyes still on the floor. \n\nHe opened his mouth. \n\nCarrie took an involuntary step back. \n\nDavid Cavendish's glistening tongue slid out of his mouth. The pink flesh was easily a foot long, covered in bumps and protrusions like a dildo. It moved sinuously, like a snake, curling side to side and then up and down. The tongue throbbed and pulsed, vibrating and twisting. \n\n\"N... No... thank you.\" \n\nThe tongue slid slowly back into his mouth and he closed his pale lips. \"As you wish, Mistress.\" \n\n\"You can... go,\" she said. Feeling ridiculous dismissing the man in his own house. \n\n\"Yes, Mistress.\" He bowed and walked out of the room. \n\nCarrie watched him leave. \n\nThen she sat down on the overstuffed couch. \n\nHow could they do that to someone? Carrie thought. Had he consented to being made into a rubber suited freak? Somehow she doubted it. \n\nShe stared at the goggles, unsure if she wanted to put them on - not that she was afraid of the video, no, she was suddenly terrified that Mr. Cavendish would come back in the room while her eyes were covered. \n\nBut, her curiosity won out. \n\nShe put the goggles over her eyes and fit the earphones over her ears. \n\n*** \n\nIt was disorienting as the Cavendish living room disappeared. \n\nA spinning pink and blue SlutzNet logo spun against a black background. It was three-dimensional, and she felt like she could reach out and touch it. \n\nWhite noise hissed in her ears as the screen went black. \n\nSlowly, the light returned. \n\nShe was sitting on a couch in a brightly lit, airy living room. Outside, ocean waves crashed on a perfect beach. \n\nThat much made sense - it was an artificial reality projected into her eyes and broadcast to her ears. \n\nWhat didn't make sense was that she could smell the ocean. She could feel the warm beach breeze blowing through the open windows. \n\n\"There are subcarriers, both audio and video. The impulses are jumping across your synapses, stimulating olfactory nerves and your sense of touch,\" a woman's voice said. \n\nCarrie turned her head to the right. \n\nA woman was sitting in a chair across from the couch. She was beautiful, with kind brown eyes and long brown hair. The woman wore a dress that appeared to be made out of white gauze, and her naked body was clearly visible through the flimsy fabric. \n\nAround her neck was a white choker with an inverted pentagram medallion hanging from it. \n\n\"My name is Cum Slut Cathy.\" \n\nCarrie almost laughed. \n\n\"I know. Silly. Lots of us, especially the first of us, have silly names. Officially, my name is Cathy Greene di Hecate. Designation Perverter - also known as a White Witch. Whore Caste. I'm the second White Witch they made after Maria Marapova.\"  \n\n\"I don't know what any of that means,\" Carrie whispered. \n\n\"No, but you'll have answers soon.\" \n\n\"Where am I?\" \n\n\"This is my Mistress Hecate's house in Havana.\" \n\nCarrie wrinkled her brow. \"Are you real?\" \n\nCathy laughed. \"Sort of. Cathy is real, and, I'm a complete copy of Cathy's mind housed in a part of the SlutzNet AI - talking to me is just like talking to the real Cathy. In the beginning, we tried to let SlutzNet handle orientation all on his own but, well, he's a bit cold. People reacted better when they talked to me.\" She reached out and took Carrie's hand. \"You can ask me anything, Carrie. I'll only tell you the truth.\" \n\nCarrie stared at Cathy's hand in hers. It was so real! Her skin was soft and warm, her grip firm but comfortable. \n\n\"Mr. Cavendish? Why did you people do that to him?\" Carrie asked. \n\nCathy paused for a moment. \"Sometimes things aren't as they seem. Did you like Mr. Cavendish?\" \n\n\"Yeah, he seemed nice...\" \n\n\"There's that word. Seemed. Mr. Cavendish used to hurt his wife. He broke her wrist twice, her nose once. He was abusive, though she did everything she could to hide it from everyone around her - but, you can't keep secrets from us, Carrie. We can read minds.\" \n\n\"So, that's why you turned him into a... sub slut?\" \n\nCathy shook her head. \"No. We're rarely that kind. Normally, a man like him would have been treated much more harshly. Strangely enough, Betty Cavendish begged us to turn him into what he is. She saved him. Love is... complicated.\" She looked away and there was more than a little pain in her eyes. \"We don't choose who we love.\" \n\n\"How did you get involved in this?\" Carrie asked. \n\nCathy smiled. \"I used to live in a place called Latigo Key - it's in Florida. Have you heard of it?\" \n\nCarrie thought for a moment. \"Yeah. In school, we studied it. Everyone on the island disappeared overnight. They called it the second Roanoke colony. But, that was twenty years ago. You must have been a kid.\" \n\nCathy laughed. \"I haven't aged in twenty years. As a matter of fact, I was in my late thirties then. How old do I look now?\" \n\n\"I don't know. Twenty-five?\" \n\n\"We're immortal, Carrie. You're going to be immortal as well. All of your friends, too. You'll be with them forever. No one is ever going to grow old or get sick or die.\" \n\n\"Even slaves like Mr. Cavendish?\" \n\nCathy frowned. \"Yes.\" \n\n\"That's cruel.\" \n\n\"Yes.\" Cathy squeezed her hand. \"No system is perfect...\" \n\n\"Slavery isn't right.\" \n\n\"Neither is abuse.\" \n\n\"Yeah, but I have a feeling we're all going to be slaves, aren't we? Even if we've never hurt anyone.\" \n\n\"We will all serve, yes.\" \n\n\"What if I say no?\" \n\n\"You can't.\" Cathy sighed. \"Carrie, you have a choice of what you want to be in the New World Order, but understand: the new order is coming. There are millions of us, thousands more everyday, all over the world. Governments can't stop us, armies can't stop us, religions can't stop us. There is no defense against us. But, you can choose your place within what's coming.\" \n\n\"And, if I don't choose?\" \n\n\"Then the choice will be made for you. Right now, that would most likely be Professional Caste - you would serve in a professional capacity.\" \n\n\"Do I get to choose the profession?\" \n\n\"Perhaps. It depends on what is needed. But, if a career can't be found? They'll put you in Whore Caste. Most likely as a Street Whore like your friend Cheryl.\" \n\nCarrie swallowed thinking about Cheryl with her huge breasts and Barbie doll body. \"Anybody could... use me?\" \n\n\"Yes. We serve, Carrie.\" \n\n\"How long do I have to decide?\" \n\n\"A few days, a week at the outside. Religious Caste will force the issue after that, and there won't be anything we can do.\" \n\n\"I... don't understand everything.\" \n\n\"No,\" Cathy said with a smile. \"But, I'm about to show you. Those subcarriers? They can explain everything to you in seconds. Sort of like downloading something into your brain. Are you ready?\" \n\n\"Are you going to hypnotize me?!\" \n\n\"Absolutely not. It's just knowledge, nothing more.\" \n\nCarrie nodded slowly. \n\nCathy smiled. \n\nWords and images poured into Carrie's mind. \n\n*** \n\nIn Manhattan, Brittney lay curled against Maria in their bed. She was naked except for her lensless black plastic glasses. \n\nMaria had her arm around the smaller Street Whore. \n\nBrittney chewed on her pink sucker as she watched a cartoon on the flat screen television mounted on the far wall. \n\nMaria looked up from her tablet and rolled her eyes. \"Why must you watch this?\" \n\nBrittney took the sucker out of her mouth. \"I identify with it.\" \n\n\"Pinocchio was a ridiculous movie when I saw it in the 1950s, it is ridiculous now. How can you identify with a wooden puppet?\" \n\n\"I don't identify with the puppet. I identify with the cricket,\" Brittney said and returned to chewing on the candy. \n\nMaria shook her head. \"You identify with Jiminy Cricket?\" \n\n\"Yes.\" \n\n\"Why?\" \n\n\"He's Pinocchio's conscience. Everybody needs a Jiminy Cricket in their life.\" \n\nMaria laughed. \"Wait, are you saying you're my Jiminy Cricket?\" \n\n\"Yes,\" Brittney said without looking away from the TV. \n\n\"And, I'm Pinocchio?\" \n\n\"Yes.\" \n\nMaria shook her head. \"Okay, how am I Pinocchio?\" \n\n\"You want to be a real person, but you don't know how. You're selfish, and your nose doesn't grow when you lie, but you lie all the time. If there was ever a person on this earth who needed a Jiminy Cricket? It's you. That's my job. I'm your cricket.\" \n\nMaria stared at her in shock as Brittney watched the cartoon. \n\n\"Don't be mad,\" Brittney said. \n\nMaria scoffed. \"Don't be ridiculous. I'm not mad. Half the words that escape your pretty lips are gibberish. Just... you can say those things when we're alone, but not when someone can hear you. It sends the wrong message about our relationship.\"  \n\nBrittney snuggled deeper into her arm. \"Yes, Mistress.\" \n\nMaria watched her for a long time, wondering if she was still Bubble Brain Brittney, or if somehow the genius of Britt Connors was regaining control? \n\n*** \n\nCarrie must have fallen asleep. The next thing she knew after getting the brain dump, Christine was easing the goggles off her face. \n\nShe blinked in the bright living room lights. \"I... did I fall asleep?\" \n\nChristine stroked her hair. \"You were exhausted.\" \n\nCarrie looked down and realized her legs were spread wide, the latex panties visible. She closed her thighs. \n\nChristine laughed. \"Don't be modest on my account.\" \n\nCarrie laughed as well. \"This is going to take some getting used to.\" \n\n\"You'll adapt.\" \n\n\"How's Jeffrey?\" \n\n\"Sleeping in bed with Betty - my guess is she won't let him out of her sight till the morning. Has he ever slept with a woman?\" \n\nCarrie looked shocked. \"No, he's gay.\" \n\nChristine shook her head. \"He's going to have to be flexible on that.\" \n\n\"I don't get it - everybody has to be bi except the straight men?\" \n\nChristine shrugged. \"Morpheus gets to choose. We just obey.\" \n\n\"He sounds like a dick.\" \n\n\"Probably. Never met him. Only one I know who met him in person is Maria Marapova, and she doesn't talk much about him.\" \n\n\"She's one of the White Witches?\" \n\n\"Yes.\" \n\nCarrie nodded. \"Cum Slut Cathy mentioned her.\" \n\nChristine stroked her cheek. \"How's the brain feel?\" \n\n\"Full.\" She felt like an entire library had been installed in her mind. Carrie now had full understanding of the methods for transforming humans. And, she felt a complete distance from normals - a detachment bordering on callousness. \n\nChristine smiled knowingly. \"Come on, let's get you home.\" \n\n*** \n\nBetty Cavendish lay naked on the bed beside Jeffrey and stroked his big Futa cock gently. \n\nHer husband's face was between her thighs, the 'dyke tamer' tongue snaking in and out of her tight pussy. \n\nJeffrey thrashed and moaned on his back, the video goggles over his eyes, receiving his orientation from Cum Slut Cathy and SlutzNet. \n\nMaking her husband her personal slave had been a mercy in a way. She had almost allowed Sugar Tits and Dr. Demona to make David into Worker Caste - a de-sexed laborer who would be shipped to the sugar cane fields in Cuba. \n\nHis tongue snaked deeper inside her and she moaned. \n\nHe deserved to be transformed into Worker Caste. She had spent many years covering bruises with makeup. \n\nBut, somehow making him a submissive was more fitting. \n\nJeffrey came, his cum jetting up from his thick cock with each pump of Betty's practiced hand. \n\n*** \n\nCarrie took the steps two at a time. She had decided to throw any pretense of self-control out the window. \n\nIt wasn't the Transformed way, after all. \n\nShe was going to her room, she was going to strip, and she was going straight to Mark's room. \n\nSmiling, she opened her bedroom door. \n\nMark was in her bed, smiling. \n\nCarrie laughed as he threw back the sheet, showing that he was already naked. \n\nShe tore off her skirt and blouse, but Mark grabbed her and pulled her on top of him before she could take off the latex bra and panties. \n\nCarrie started to kick off her heels. \n\n\"No, leave them on,\" Mark laughed. \n\nShe fell giggling on top of him. \n\nHe kissed her and then tapped her nose with his index finger. \"Hey, don't lie to me anymore, okay?\" \n\nShe nodded thinking about the ruse she had used to go meet Jeffrey. \"I'm sorry.\" \n\n\"We're a team, okay?\" \n\n\"I know. From now on. I promise.\" She raised up and pulled the tight rubber bra off, freeing her big breasts. \n\nMilk poured onto Mark's chest. \n\n\"Oh, fuck!\" Carrie gasped. \"My ambrosia came in. Guess I'm going to need those nipple clamps.\" \n\nMark didn't say a word, he just drew her thick left nipple into his mouth and sucked. \n\nCarrie moaned, feeling milk drawn from her breast for the first time. Her nipple felt connected by a line of electricity to her clit. \"Fuck!\" \n\nMark laughed as he drank down her ambrosia. \n\nCarrie reached back to slide down the panties, but Mark was ahead of her - his fingers grasped her panty crotch and yanked it to the side. \n\nCarrie maneuvered her hips, felt the tip of his hard cock... and then he surged inside her. \n\nThey both cried out as he sank balls deep inside her. \n\nMark switched to the right breast and nursed as he began fucking her slowly. \n\nShe rotated her hips, riding his cock. \n\n*** \n\nIn their bedroom, Nathan fucked Christine standing behind her. \n\nChristine moaned and laughed as they watched Mark and Carrie on the closed circuit television. \"Mission accomplished,\" Christine whispered. \n\n*** \n\nCarrie felt her orgasm building as Mark found the expanded ring that had once been her cervix. His cock was the perfect length to press against and through it, and her tummy convulsed with each thrust. \n\nMark smiled up at her, his hands massaging her still lactating breasts. \n\nCarrie had always loved sex, but their bodies were now made for it. \n\nSex before now seemed like something filmed in black and white. \n\nCarrie and Mark's world was now in vivid color. \n\nShe screamed when she came, muscles moving inside her where muscles should not be. She was squirting and lactating at the same time. \n\nMark rose off the bed, his cum spurting into her, his hands holding her waist, forcing her to stay in place. \n\nShe collapsed on him, exhausted, body still clenching and pulsing in delicious waves. \"I love you,\" she whispered. \n\n\"I love you,\" he answered. \n\n*** \n\nThe next morning, Carrie and Mark showered together. \n\nIt turned into sex, of course. The big shower was made for sex. \n\nMark pressed her against the tile wall of the shower and lifted her long right leg, balancing it on his shoulder. \n\nThen he had pressed himself against her and pushed his cock deep inside her. \n\nWhen they finally got out of the shower, Carrie's clothes were gone. \n\nIn their place was a red latex skirt that wouldn't go quite to mid-thigh. Matching red stiletto thigh boots, and a red latex halter top. \n\nThe halter's neck was a silver inverted pentagram brooch. \n\nTwo red plastic inverted pentagram nipple clamps lay beside the outfit on the padded bathroom bench. \n\n\"Wow,\" Mark said. \n\nMark's clothes were what he had brought in: a white t-shirt and faded jeans. \n\n\"So, I'm supposed to dress like a fetish slut, and you get to dress normal?\" Carrie asked. \n\n\"Yes, thank Morpheus,\" Mark laughed. \n\nShe shoved him. \"You're such a dude.\" \n\n*** \n\nThey went downstairs. \n\nCarrie was a little apprehensive about walking in the stiletto boots, but she had to remind herself they were really no higher than the heels she wore yesterday. \n\nShe was actually more disturbed by the fact the skirt barely covered her upper thighs and she wasn't wearing panties. \n\nChristine smiled up at them as they came downstairs. \n\n\"Did you switch my clothes?\" Carrie asked. \n\nChristine laughed. \"Yes.\" \n\n\"Not exactly proper for working at the Catholic Church - even if we are doing kinky shit in the office,\" Carrie said. \n\n\"Oh, you're not going to work today,\" Christine said as she led the way into the kitchen. \n\nNathan was standing there drinking coffee. \n\nBut, there was also a goddess in the room. \n\nCarrie and Mark both stopped and stared. \n\nThe woman was tall and buxom, dressed in a long, white latex dress that accentuated her big breasts. Her green eyes sparkled under her thick red hair. \n\n\"White Witch,\" Carrie whispered. She was literally the most beautiful woman Carrie had ever seen. \n\n\"Carrie, Mark? This is Mistress Sugar Tits. She's a Perverter - White Witch is not the preferred term,\" Christine said. \n\nShe held out her hands and held both Mark's and Carrie's. \n\nShe smiled at Mark. \"Fully transformed, I see?\" \n\n\"Yes, Mistress.\" \n\nShe winked at Mark. \"Just call me Sugar.\" \n\nShe turned and smiled at Carrie. \"But, this one... not fully transformed yet.\" \n\nCarrie gasped, feeling her head tingle. \n\nShe's going to hypnotize me! Carrie thought. \n\nWords formed in her head. No, I only want to show you what a White Witch can do. \n\nIt was as if Sugar had spoken out loud, but her lips never moved and only Carrie could hear. \n\nTelepathy. You can talk back if you like. \n\nThis is amazing, Carrie thought. \n\nOh, you haven't seen anything yet. \n\nImages and sounds rushed into Carrie's head. Sugar Tits at a place called Stallion's, in her harem with Ray. He was a Whoremaster and she could feel his big cock deep inside Sugar. \n\nOnly, it wasn't Sugar. Carrie could feel it. \n\nShe almost fell, but Sugar released her and Mark's hands and instead grabbed her waist and steadied her. \"I've got you.\" \n\nMore images. Dr. Demona, Sister Asmodea. \n\nSugar suddenly frowned. \n\nThe White Room. All the White Witches, together: Maria, Lisa, Gwen, Michaela, Constance, Cathy, and Sugar Tits. War. They were talking about war with the... ",
        "The images stopped and it was Sugar's turn to stagger back. \n\nMark put his arm around Carrie's shoulders. \"Are you okay?\" \n\nShe nodded. \n\nSugar blinked. \"You're... very strong, Carrie.\" \n\n\"Told you she was smart,\" Christine said. \n\nSugar nodded and smiled. \"Not everyday a human can pull information from me. Let's talk.\" \n\n*** \n\nSugar drove the white Mercedes convertible west out of town. \n\n\"Nice car,\" Carrie said from the passenger seat. \n\n\"Perks of working for the Church. Don't know how they get all these nice cars - a little afraid to ask, to tell you the truth.\" \n\n\"The Church. You don't like them,\" Carrie said. \n\n\"What you saw in my head? I need you to keep that between the two of us.\" \n\n\"You can make me forget, can't you?\" \n\n\"Yes. But, I don't want to do that. I will if it will make it easier on you, though?\" \n\n\"No. I won't say anything.\" \n\n\"Thanks,\" Sugar said. \"I love to drive. I used to be a UPS driver. So, sometimes when I need to think? I just get in a car and drive.\" \n\n\"Where are we going?\" \n\n\"Just outside town.\" \n\n\"Stallion's?\" Carrie asked. \n\nSugar laughed. \"Wow, you were paying attention during our little mind foreplay, huh?\" \n\nCarrie laughed. \n\n\"No, actually, we're going to a motel on the edge of town. I have something to show you.\" \n\n*** \n\nJeffrey woke up in bed with Betty Cavendish. It was disconcerting, first of all because he had an erection. \n\nAnd, second, because his stomach and lower body was glazed with his own cum. \n\n\"Good morning,\" Betty said. She had her arm curled under his shoulders. \n\n\"Did we have sex?\" \n\nBetty laughed. \"Not exactly. I gave you hand jobs during your orientation. And, David went down on your pussy a few times as well. You were very frustrated - that's normal. Your sex drive is amped up from the changes.\" \n\nJeffrey leaned up and stared at the foot of the bed. \n\nDavid was sleeping on the wood floor. \n\n\"So, we had sex.\" Jeffrey whispered. \n\n\"Yes, Jeffrey, we had sex. Do you remember your orientation?\" \n\n\"Jeffrey Bernstein, Futanari Type 2, Whore Caste... yes, I remember.\" \n\n\"There aren't many Futanari that started out as males. Most are girls like me.\" \n\n\"Am I supposed to feel privileged?\" He asked icily. \n\nBetty frowned and looked on the verge of tears. \"No. This was unforgiveable. It wasn't supposed to happen this way, Jeffrey.\" \n\n\"This can be undone, right? Dr. Demona can undo it?\" \n\nBetty nodded. \"Yes. You haven't had transformative Ambrosia yet. I can take you to her lab today.\" \n\nJeffrey turned away. \"I... I know you were trying to make me happy.\" \n\n\"I promise you, I was. We all are. All of Whore Caste are trying to make things better.\" She reached under the covers and stroked his right thigh. \n\nJeffrey jumped. \"Don't.\" \n\nShe took her hand away. \"Can I just show you how you'll feel as a Futanari? You know about your cock, but you were completely out of it when Christine and Carrie played with you last night, and you were asleep when David and I touched you. Don't you want to know how it feels?\" \n\n\"I'm gay. I don't want... a woman to touch me.\" \n\nBetty looked at him and then burst out laughing. \"Sweetheart, I'm a woman with a dick. You're a man with a pussy. You still want to apply labels to yourself?\" \n\n\"I'm still a man.\" \n\n\"Well, actually? Your genetic code has been re-written - your sex chromosomes are XX not XY.\" \n\n\"God! And, you're sure she can undo all this?\" \n\nBetty bit her lower lip. \"Yes, but please? Let me just touch you once? What will it hurt, and then you'll know.\" \n\nJeffrey sighed. \n\n\"Then, just try for yourself. Just touch your pussy.\" \n\nJeffrey reached down and stroked his hard cock. \n\nHe hesitated with his fingers on the bottom of his dick. \n\n\"Don't be afraid.\" \n\nJeffrey reached down and touched the wet lips. \n\nHis cock lurched as he stroked the tender folds. \n\n\"Inside,\" Betty whispered. \n\nJeffrey eased his middle finger gently inside - the first time he had ever fingered a pussy. \n\nHe gasped at the feeling of being penetrated. \n\nBetty smiled at him. \n\nHe pushed deeper, feeling the tight, wet channel. His body felt warm and liquid. Jeffrey was conscious of his breathing - hard and fast. \n\nThere was something just under the base of his cock. He touched it and cried out. \n\n\"You have more than on clit,\" Betty whispered snuggling closer. \"Your cock is a clit, but they gave you another.\" \n\n\"God, it feels so good,\" Jeffrey whimpered. \n\n\"Slow strokes, up and down,\" Betty suggested. \n\nHis juices were leaking out, wetting his inner thighs. \n\nHis big cock felt like it was made of iron. \n\n\"Let me, please?\" \n\nHe looked at her, his eyes half closed. \n\nShe lifted the sheet, exposing their naked Futa bodies. \n\nJeffrey reached out and stroked her cock. \n\nBetty smiled and nodded. Then she reached over and slid two fingers under the base of his cock. Her middle and index fingers moved across his clit in delicate circles. \n\n\"Oh, Jesus!\" \n\nBetty laughed. \"That's right. Not so bad, huh?\" \n\nHe shook his head, lost in the sensation of having his clit fingered. \n\n\"I feel... something is...\" \n\nHis pussy began to clench, and Jeffrey screamed. Cum erupted from his dick even though he wasn't stroking it. \n\nHis female orgasm was enough to trigger his ejaculation. \n\n*** \n\nThe motel on the edge of town was plain. Not exactly run-down, but it definitely had an air of 'no-tell motel'. \n\nAt this time of morning, the parking lot was mostly empty. \n\nCarrie was surprised to see a limousine parked in front of one of the rooms. \n\nA bored looking chauffeur leaned against the black car smoking a cigarette. \n\nSugar pulled into a space beside the limo. \"So far, we've showed you the gentle side of what we do - it's what we want for everyone. We don't want to force people, Carrie. We want them to be happy. Sometimes, that's not an option.\" \n\n\"Whatever it is that you're going to show me? I'm in. Okay? I want to make my choice.\" \n\nSugar smiled. \"Yes, but... you don't know what the choices are yet.\" \n\n\"Whore Caste or Professional Caste. And, I don't think I can handle being a whore... no offense.\" \n\nSugar laughed. \"None taken.\" \n\n\"So, Professional Caste...\" \n\nSugar shrugged. \"Not Religious Caste?\" \n\nCarrie stared at her. \"Why would you suggest that? You hate them.\" \n\nSugar blinked. \"No! I don't hate them. I don't hate anybody.\" \n\n\"Look, I was in your head for a moment. You hate them. And, I kind of hate them too - I'm not even sure why.\" \n\n\"We disagree with Religious Caste. But, we don't hate them.\" \n\n\"You're expecting a war with them. You don't have a war with people you don't hate.\" \n\nSugar shook her head. \"We don't want a war, Carrie. We hope it doesn't come to that.\" \n\n\"I'm not going to be Religious Caste and I don't want to be a whore, so there's really no need to show me anything else.\" \n\nSugar reached out and stroked her cheek. \"Yes, there is. Come on.\" Sugar opened the driver side door and got out of the car. \n\nCarrie got out of her side. \n\nThe air stunk of cigarette smoke. \n\nSugar paused as she closed the car door. She turned to the chauffeur. \"You hate cigarettes. The smell of them makes you feel sick. Never smoke again.\" \n\nThe chauffeur stared at her for a moment. Then he went into a fit of coughing. He dropped the cigarette on the pavement and rubbed it out with his shoe. \n\nSugar walked around the car and took Carrie's hand. \n\n\"That man,\" Carrie whispered. \"Did you just make him stop smoking?\" \n\nSugar laughed. \"Yes. I reached inside his head and made it impossible for him to ever smoke again. Saved his life, most likely. It's one of the nice things about being a White Witch. We can make people stop smoking, stop being an alcoholic, stop abusing drugs. We can make a husband stop hurting his wife, turn bad people good, make cowards into heroes.\" \n\n\"That's really amazing.\" \n\nSugar shook her head. \"Remember you said that.\" \n\n\"Why?\" \n\n\"Because I'm going to show you how terrible we can be.\" \n\n*** \n\nLife wasn't easy for a gay Jewish kid even in the somewhat progressive suburbs of Ithaca. But, Jeffrey had always personally accepted his sexuality. \n\nNow, his world was turned upside down, and he was no longer sure what or who he was. \n\nHe was scissoring with Betty, the sheets thrown back off the bed. \n\nHe had his cock deep inside Betty's pussy - something he never imagined doing. \n\nAnd, her cock was deep inside his pussy as well. \n\nThey pushed and ground their crotches together, moaning and gasping with each thrust. \n\nDavid stood at the foot of the bed. He watched and attempted to rub his cock through the cock cage. \n\n\"N... No! You can't cum, David. Just watch,\" Betty commanded. \n\nWhen he had first arrived at the Cavendish house, he had been struck by how quiet David Cavendish was. Of course, David wasn't wearing bondage gear when Jeffrey had arrived. \n\nThinking back on it, he must have been wearing it under his clothes. \n\nThe dual sensations of penetrating and being penetrated was driving Jeffrey mad. \n\nWas he a man making love to a woman? Or, was a he a woman being made love to by a man? \n\nOr, was it just what Betty had said? Was he trying to apply labels to himself that no longer mattered? \n\nHe felt his orgasm growing, both the masculine and the feminine. \n\nBetty came first, her pussy spasming around him as her cock sent jet after jet of cum deep inside him. \n\nHe came then, pumping cum into her as his own pussy squeezed and pulsed. \n\nJeffrey screamed along with her, holding her hands tight in his, pulling them even closer together. \n\nHe went limp inside her and she turned around to lay beside him. \n\nHe stared into her eyes and smiled. \n\n\"David, clean us,\" Betty said without taking her eyes off Jeffrey. \n\n*** \n\nCarrie stepped through the motel room door and into insanity. \n\nA man was pacing back and forth in the cheap motel room wearing nothing but a black g-string. He had a cellphone to his ear. \"Fuck that! You tell them I want 51% of the company or they can go fuck themselves.\" \n\nHe was early middle aged, black hair turning gray at the temples. \n\nHis body, though, was pure Junior Whoremaster. His muscles bulged like those of a high performance athlete, and the g-string was packed full of cock and balls. \n\nBut he was only of passing interest. \n\nThe two women tied naked to the queen sized beds were a different story. \n\nThey were tied spread eagle with leather straps on their wrists and ankles anchored at the corner of the bed frames. Each had a piece of duct tape covering their mouth. \n\nThey screamed and writhed on the bed. \n\nThe woman on the left was a tall blonde with terrified blue eyes and smallish breasts. \n\nThe woman on the right looked a bit older with black hair and darker skin. She looked more pissed off than terrified. \n\nCarrie almost ran out the door, but Sugar caught her hand and held it. \n\nDon't be afraid, Sugar whispered in her head. \n\nWe have to help them! Carrie thought back. \n\nWe can, to an extent. I told you I was going to show you the hard part of serving Morpheus. This is it. \n\n\"Mr. Case is a VIP in the Professional Caste,\" Sugar said as she knelt gracefully between the two beds. She nodded back toward the man in the g-string who had returned to his cellphone, seemingly disinterested in the two women struggling on the beds. \"He owns several companies, including a chemical company that supplies most major US municipalities with chemicals to treat their water supply.\" \n\nCarrie went pale. \"You mean...\" \n\n\"Yes, dear. We're going to use his company to lace Church medications into the drinking water of every major US city,\" Sugar said without looking up. She reached out with both hands and touched the temples of both women. \"You don't have to be afraid. No one is going to harm you. As a matter of fact, you're going to become beautiful objects of desire, immortal. You're going to experience life so intensely that everything before will seem dull and depressing.\" \n\nThe two women stopped struggling, their eyes rolling back in their heads. \n\nSugar looked over her shoulder at Carrie. \"Come here and put your hand on my hand.\" She nodded toward the blonde who was breathing steadily but heavy. \n\nCarrie hesitated. \n\n\"It's okay. Come here.\" \n\nCarrie stepped beside Sugar and reached down. She touched the back of Sugar's warm hand as it caressed the blonde's left temple. \n\nCarrie jumped - it felt almost like an electric current was passing through Sugar's hand and into the blonde's head. \n\n\"Relax. You can feel her thoughts through me if you let go.\" \n\nCarrie closed her eyes. \n\nThoughts and images rushed into her head. \n\nSugar laughed. \"That's right.\" \n\nThe woman's name was Deborah, and she was an admin in Mr. Case's headquarters. She was twenty-four and she had a fianc\u00e9. They were getting married in two weeks and he had a small cock but that was okay because she loved him and she didn't know why she had gotten on the plane with Mr. Case and she didn't know why she had sucked his cock or why she had gone down on Brooke because she wasn't gay and Brooke was a B-I-T-C-H and... \n\n\"Slow down, Carrie. The stream of consciousness will overwhelm you unless you hold it back. Make it slow down,\" Sugar said. \n\nCarrie became aware her heart was pounding and her forehead was sweating. She pushed the thoughts away, pulling herself out of Deborah's consciousness. \n\nThe woman had been called into her boss's office this morning and found herself completely overcome by his smell... \n\n\"Pheromones,\" Sugar said. \"His pheromones enthralled her and the brunette, Brooke, as well.\" \n\nCarrie jumped when she realized Mr. Case was standing behind her. \n\n\"Yeah, you people need to do something about the fucking pheromones. They were happy to fuck and suck for the first couple of hours, but then they came out of it and started fighting like wildcats.\" \n\n\"People become immune to pheromones after a while, Mr. Case. We explained that to you,\" Sugar said. \n\n\"Goddamned annoying. You going to fix them or what?\" \n\nCarrie felt a surge of images coming from Sugar: she wanted to castrate him. \n\nCarrie almost gasped. \n\nLove, Sugar said telepathically to Carrie. We're about love, unconditional and boundless. This man doesn't even know what the word means. He values no one but himself. Sometimes we have to ally ourselves with horrible people to achieve our goals... \n\nBut, it won't always be that way, will it? Carrie thought. \n\nA smile spread across Sugar's lips. No. It won't. \n\nSugar looked up at Case. \"You want sexretaries, correct?\" \n\n\"Yeah, big tits and asses. But, still able to do their jobs. I want the blonde to be my good girl, the brunette to be my bad girl. You do that?\" \n\n\"Yes,\" Sugar said. She turned back to the women. \"Sleep now.\" \n\nBoth women went limp on their beds. \n\n\"Get my purse, please, Carrie?\" \n\nCarrie nodded and grabbed Sugar's purse off the floor. \n\nSugar took it and removed a bundle of syringes and vials. \"Both are highly intelligent, there won't be any problem expanding them to H cups. Will that be satisfactory?\" \n\n\"Sounds good,\" Case said. He turned away and returned to his cell phone. \n\n\"Draw five CC's of Titty Grow in two syringes,\" Sugar said as she stood up and leaned over Deborah's sleeping body. \"She's a healthy C cup, five CC's will get her to an H.\" \n\n*** \n\nWhores were tiresome. \n\nEven torture was becoming mundane. \n\nLevi ordered the eunuch to hold his wife's legs apart as he tried to force his cock into the slut's ass. They were in the basement dungeon on a low, rubber sheeted bed. \n\nShe moaned and laughed as Levi tried to force his girth inside her. \n\nHe would have preferred screams, but the hypnosis drugs had turned the woman into a wanton slut along with her offspring. \n\nThe two girls waited patiently for their turn. \n\nThe mother's sphincter finally gave up the fight and Levi sank his cock inside her. \n\n\"I love you,\" the woman whispered. \"So much bigger than my husband.\" \n\nThe eunuch stared down at them, unfazed by his wife's insult. \n\n\"Shut up, slut,\" Levi groaned as he began to thrust. \n\nA Church agent walked up beside him. \n\n\"What?\" Levi groaned. \n\n\"We finished our analysis. One of the burner phones purchased by Madison Fuchs was used a few minutes after Styx was murdered two miles from the crime scene,\" the agent said. \n\nLevi stopped in mid-thrust. \"Who did she call?\" \n\n\"Another burner, unfortunately we've been unable to determine who purchased it or where it was used. Shall we bring her in for questioning?\" \n\nSister Illia walked up behind him and put her hand on his shoulder. \"Tread carefully. She is Whore Caste.\" \n\nLevi shrugged away and pounded hard against the woman beneath him. \"No. Continue to watch her.\" \n\nIllia smiled. \n\n\"But, have a strike team ready to take her. When we take her, we'll take her friends as well. Donny Fuchs, Jason Moore, Belynda Moore, and Lisa Moore. \n\nIllia gasped. \"Levi, Lisa Moore is a White Witch. Abducting her will get the attention of Sugar Tits and Maria Marapova...\" \n\n\"Don't lecture me!\" He thrust hard into the woman. \"They are traitors. I was tasked with getting to the bottom of this.\" \n\n\"Then let me contact Sister and inform her...\" \n\n\"I am the Church in Ithaca! I don't need Havana and I don't need Sister! Fuck Whore Caste. They murdered Styx. I'll do as I please.\" \n\nIllia stared at his muscled back as he pounded furiously into the woman. \"Yes, Bishop.\" \n\n*** \n\nCarrie stood by Sugar and looked at the beautiful creatures on the motel beds. \n\nBoth women had been attractive, but now they were wet dreams. \n\nBoth were six feet tall with long legs, full hips, and oversized breasts. \n\nTheir pussies were bare and dripping and inscribed above their clits was the inverted pentagram tattoo that marked them as Whore Caste. \n\nTheir hair was now lustrous and full. \n\nThey differed in skin tone: Deborah, the blonde, was a pale milky white while Brooke, the brunette, was a deep tan. \n\nTheir lips were full and red, their eyes a pale almost translucent blue. \n\nDeborah and Brooke slept peacefully, their impressive chests rising and falling steadily. \n\nSugar knelt and eased the engagement ring from Deborah's finger. She pulled a pair of pliers from her bag and gripped the ring in them. \n\nThe metal snapped, turning the back of the band into a wicked pair of pincers. \n\nShe smiled weakly at Carrie. \"It hurts. But, I'm controlling her pain. She won't feel it.\" \n\nSugar held the pliers against Deborah's sex. \n\n\"God, don't do that!\" Carrie whispered. The ring's pincers were poised at the woman's clit. \n\n\"I have to. It's the rule. Engagement and wedding rings are repurposed to show they are committed to the Church.\" She pressed the pliers together. \n\nThe pincers closed on the hood of Deborah's clitoris with a tiny squirt of blood. \n\n\"Jesus,\" Carrie whispered. \n\nSugar pulled out a spray bottle and directed a clear mist at the wound. \n\nThe bleeding stopped. \n\n\"Wow,\" Carrie said. \n\n\"Magic. Now it will just feel good,\" Sugar said as she tugged gently on the ring. \n\nDeborah moaned and squirmed on the bed. \n\nSugar laughed. \"Yeah, that definitely feels good.\" \n\n\"When they wake up, won't they be pissed off? I mean, they didn't want this,\" Carrie said. \n\n\"They would be angry, yes. But, they won't be.\" Sugar put her hands on their temples again. \"Come over here and touch my hand again.\" \n\nCarrie put her hand on top of Sugar's against Deborah's temple. \n\n\"Now, I'll show them paradise.\" \n\nCarrie gasped as images and sensations flew past her. A thousand different sexual pleasures. It was convincing, so convincing. The promises of joy and happiness, fulfillment. Love. \n\n\"You're... programming them.\" ",
        "\"Seducing. Opening up worlds for them they didn't know existed. And... I'm pushing buttons inside them...\" \n\nThey moaned and Carrie moaned as well. \n\n\"Deborah, so sweet... so kind. Brooke... naughty.\" Sugar giggled. \"Like sweet and salty... they go together. Now, we make them love each other.\" \n\nIntense affection! Brooke and Deborah were like lovers now, but it was more. It was a sisterhood, a bond. \n\nCarrie felt herself falling. The images poured into her mind. She was Deborah one second, Brooke the next. \n\nNo, Sugar whispered in her mind. You are Carrie. And, you will be more than them, more than most humans can even dream of. Your choice, Carrie. It will be your choice, but you already made it. \n\nCarrie stopped falling. Sugar had anchored her in place. She was confused by the words, but comforted. Sugar was immensely powerful, but she wasn't evil. \n\nSugar laughed out loud. \"Hmm, you think I'm not? Little one, good and evil mean nothing to us. Only compassion versus malevolence. You know, I wouldn't even have known the difference a while ago. But I do now. Absolute power corrupts absolutely, and you either accept that or you spend your life worrying about it. Accept that you are both good and evil but embrace compassion over malevolence.\" \n\n\"You're taking their will,\" Carrie whispered as she felt the women's freewill subverted and twisted. \n\n\"Yes.\" \n\n\"It's... wrong.\" \n\n\"But, necessary. I'm giving them something more important: satisfaction.\" \n\nCarrie nodded slowly. \n\nSugar pulled her hands away from the women's faces and stood up. \"Untie them,\" Sugar murmured. She looked drained. \n\nCarrie undid first Deborah's and then Brooke's bonds. \n\nBoth women sat up and looked around the room. \n\nSugar took Carrie's hand and stepped back. \n\nDeborah and Brooke looked into each other's eyes and burst into giggles. \n\nBrooke got to her feet and jumped on top of Deborah. \"What are you laughing at, you little slut?\" \n\nDeborah broke into a gale of laughter. \n\nBrooke's fingers found Deborah's clit ring and pulled. \n\n\"Naughty bitch!\" Deborah moaned and then kissed Brooke hard as the brunette's fingers slid into her pussy. \n\n\"Finally,\" Mr. Case said as he laid his phone on the dresser. He slid off his g-string exposing his still flaccid cock. \n\nSugar turned and smiled at him. \"They aren't complete yet. They need to be sterilized, and then they need their final ambrosia.\" She held up a blue dildo with a pistol grip. \"Care to do the honors?\" \n\nCase smiled, his dick growing hard as Sugar handed him the sterilizer dildo. \n\nCarrie looked on in horror. \n\nSugar stroked the small of Brooke's back. \"Arch your back so your master can sterilize you, Brooke.\" \n\nBrooke moaned into Deborah's mouth and thrust out her hips. \n\nCase pushed the blue dildo into her wet pussy. \n\n\"Keep going till you hit her cervix,\" Sugar said. \n\nHe slid it in slowly. It stopped about halfway in. \n\n\"Good. Now, pull the trigger.\" \n\nThe dildo made a snapping sound. \n\nBrooke cried out as Deborah held her in a tight embrace. \n\nThe brunette was hyperventilating. \n\nCase watched with a wicked grin as the dildo began to slide deeper. \n\nA moment later, it was fully embedded in her pussy. \n\n\"I'm so full,\" Brooke whispered as Deborah covered her face in kisses. \n\n\"Pull it out and do Deborah,\" Sugar said. \n\n*** \n\nWith both women sterilized, Case wanted to fuck them. He climbed onto the bed. \n\nSugar put her hand on his shoulder. \"They need their Ambrosia.\" \n\nCase glanced angrily over his shoulder. \"For fuck's sake, how much longer?\" \n\n\"We'll need your DNA for the binding,\" Sugar said. She looked at Carrie. \"Sweetie, do you think you could make Mr. Case cum?\" \n\n\"Wh... What?!\" Carrie asked. \n\nCase looked at her hungrily from the bed, his cock looked like a fireplug sticking out of his groin. \n\n\"It's okay if you can't. Not everyone is cut out for Whore Caste. We need accountants and lawyers as well. I'm sure I can make him cum,\" Sugar said as she undid the neck of her dress exposing her big breasts. She looked into Carrie's eyes and sent her thoughts, You can choose to be afraid of what you could be, I won't judge you. But, you could try and feel what real power is. \n\nPower? Are you kidding? How powerful would I be if I let him have me? Carrie thought. \n\nSugar smiled. Silly girl, who do you think has the power here? This imbecile? Control him, if you're brave enough. Her eyes dared Carrie. \n\nCarrie stared at Case. He was practically drooling. \n\nShe stood straighter, thrusting out her chest. Then she smiled and walked toward the bed, one foot in front of the other. Her hips swayed. \n\nAnd, she saw it in Case's eyes: he was dumbfounded. \n\nShe reached out without hesitating and grasped his cock. \n\nCase groaned. \n\nCarrie jacked him slowly, the thick cock like iron in her hand. She kept her eyes on his. \n\nThick precum dripped in long strands from his cock. She caught some with her fingers and lubed her hand with it, stroking him harder. \n\nSugar was smiling beside her. Whore Caste is not the best term for us. We are sirens. Sex goddesses and gods. See how we manipulate them? Even Professional Caste like Case - oh, he believes he's a Junior Whoremaster, but he will never be one of us. We are love, and someone like Case could never be that. \n\nCarrie smiled. \"Cum, Mr. Case.\" \n\nAnd, to her amazement, he did. Case groaned as his cum spurted out. \n\nSugar caught some in her hand. \"Very nice.\" She held the cum in her left hand and pulled a jar out of her purse. \"Open this, please?\" \n\nCarrie smiled at Case and licked a drop of cum from her own hand. Then she took the jar and opened it. \n\nSugar held her left hand over the mouth of the jar and let the thick cum drip into it. Then she licked off the excess and replaced the lid. \n\nShe shook the jar and opened it again. \n\nShe smiled down at the girls who had stopped fingering each other and were completely engrossed in watching what was happening between Carrie, Sugar, and Case. \"Ladies, this is your Transformative Ambrosia. It is infused with your master's cum. Once you drink it? You will be immortal. And, you will be Mr. Case's property for all eternity. You will be Brooke di Case and Deborah di Case. Your old lives will be over.\" \n\nThe girls clung to each other and stared at the milky liquid in the jar. \n\n\"Do you want to be owned?\" \n\n\"Yes,\" Deborah whispered. \n\n\"Yes,\" Brooke agreed. \n\nSugar smiled. \"Then drink.\" \n\nThe girls took the jar and poured the contents into each other's mouths. \n\nA moment later, they dropped the jar on the bed and fell convulsing into each other's arms. \n\nCase stared at them. \n\n\"They'll come around in a few minutes. They belong to you, Mr. Case. Body and soul.\" Sugar picked up the jar and put it back in her purse in a Zip Lock bag. \"Come along, Carrie.\" \n\nThey stepped out into the afternoon sun. \n\nCarrie squinted as Sugar closed the motel room door behind them. Hours had passed, but it seemed like only minutes. \n\n\"You have questions,\" Sugar said. \n\n\"How can you live with what you did to Brooke and Deborah?\" \n\n\"What? You mean when I made them immortal? Or, was it when I made them into sex goddesses?\" \n\n\"When you took away their will!\" \n\n\"Oh, that. What would have happened to Brooke and Deborah if I hadn't?\" \n\nCarrie shrugged. \"I don't...\" \n\n\"Mr. Case would have dialed a number on his cellphone and brought in Religious Caste. They would have used hypnosis drugs to do an approximation of what I just did, because as powerful as Bishops and Mother Superiors are? They can't do what White Witches do. Oh, they're amazingly good at torture - inflicting pain is their religion.\" \n\n\"So, you're the lesser evil?\" \n\nSugar sighed. \"I hope. If you want to know about how barbaric Religious Caste is? Ask your lover Christine.\" \n\nCarrie frowned. \"What do you mean?\" \n\n\"Christine McGee was brutalized by a Bishop named Styx. He didn't seduce and gently mind control her the way I just did for Brooke and Deborah. He tortured and terrorized her, then he pumped her full of hypnosis drugs and indoctrinated her. It took hard work from Nathan and another MILF Whore to bring her back.\" \n\nCarrie stared at her. \"I... didn't know.\" \n\n\"Well, now you do.\" Sugar took Carrie's hands. \"The world is going to change. The Church is coming.\" \n\n\"A war is coming,\" Carrie whispered remembering what she saw in Sugar's head before. \n\n\"I hope not, Carrie. We don't want a war. But, sides have to be chosen. Everyone has to choose a side.\" \n\n\"I... I want to be Professional Caste.\" \n\nSugar nodded. \"And, I want you to be one of the most powerful beings to ever walk the earth.\" \n\nCarrie shook her head. \"You want... no! I'm not like you!\" \n\n\"You're smart - smarter than me. You think a normal person can pick up on my telepathy the way you do? You think a normal person can follow my thoughts right back into my head? Not one person in a thousand could do that.\" \n\n\"You want soldiers in a war! I don't want to be a warrior. I don't want to fight.\" \n\nSugar smiled. \"Last night, you picked up a lead pipe to protect your friend. You held off a Church agent who could have twisted you into a pretzel and a MILF Whore who could have scrambled your brain with her hypno-eyes. If you were a man, we'd be making you a Whoremaster right now. You might not want to be a warrior, baby, but you are one. I think you'll be one of the most powerful White Witches since Maria Marapova.\" \n\nCarrie pulled away. \"I'll be evil. I'll actually start to enjoy the things we did in that motel room!\" \n\n\"You already did enjoy those things.\" \n\nCarrie's eyes widened. \"No! I...\" \n\n\"Carrie, I can read non-transformed minds pretty well. You were completely turned on in there.\" \n\nCarrie turned away. It was true. She had been turned on by all of it. The transformation of Brooke and Deborah, the mind control, even Case's domination of them. \n\nBut, the thing that turned her on the most was taking control of Case. \n\nSugar had told her the truth: she had power over him in that room. \n\nAnd, it was intoxicating. \n\nSugar's hands grasped her shoulders from behind. \"I want to make you a goddess. You already have a goddess's body - let me give you the powers to match.\" \n\n*** \n\nCarrie lay on her back on a motel bed. She could hear Case fucking Brooke and Deborah on the other side of the thin wall. \n\nSugar sat on the bed beside her. She opened her bag and pulled out another jar. \n\nCarrie eyed it warily. \"Transformative Ambrosia?\" \n\nSugar nodded. \"White Witch formula. It's pure. Do you want to be bound to someone? I just need some of their DNA...\" \n\n\"No. Unbound. I want to be unbound.\" \n\nSugar smiled. \"Not even Mark?\" \n\nCarrie smiled back. \"I'm already bound to him.\" \n\nSugar nodded. \"You're lucky.\" \n\n\"No Mr. Sugar Tits?\" Carrie asked. \n\nSugar laughed. \"Well, I'm bound to my Whoremaster Ray - but, he's in love with a robot.\" \n\nCarrie stared at her. \"What?!\" \n\n\"It's a long story. Ray and I love each other, but we're not in love. I think you understand that, don't you?\" \n\nShe thought about Christine and smiled. \"Yeah. I do.\" \n\nSugar stroked Carrie's hair. \"All you have to do is drink, only... quite often, when a White Witch is created, she has... visions.\" \n\n\"Visions?\" \n\n\"Yes. Sometimes we see the future... well, we think it's the future. Maybe it's just a dream. We don't know... but, whatever you see? Only share it with other White Witches. We don't want Religious Caste to know what we see.\" \n\n\"But, I mean it can't be the actual future, right? It's just an hallucination?\" \n\nSugar shrugged. \"People say it can be pretty realistic. At the beginning, we usually saw Morpheus, but now? The visions are different.\" \n\n\"How?\" \n\nSugar shook her head and smiled. \"Better to see for yourself.\" She opened the lid on the jar. \n\nCarrie licked her lips. \"You won't leave me, right?\" \n\nSugar smiled. \"Never.\" \n\n\"Okay.\" \n\nSugar tilted the jar to her lips. \n\nThe liquid poured into her mouth and fireworks went off in her mind. She felt like she was being electrocuted and having an orgasm at the same time. \n\nSugar took the jar away. \"Anything?\" \n\n\"Feels amazing.\" She felt strong and her mind was racing in a dozen different directions. \n\n\"No vision?\" \n\n\"No, I just feel...\" Her mouth clamped shut as ever muscle in her body seized. \n\n\"Carrie!\" \n\nThe room went black. \n\n*** \n\nThe room was shaking and there was a rumbling sound coming from somewhere under her. Carrie had her eyes clamped shut. \n\n\"Second stage ignition. Freedom is 100 nautical miles downrange,\" a voice said in her ear above the rumble. \n\n\"Altitude 97,000 feet.\" \n\nCarrie opened her eyes. Something glass was over her face and she was hyperventilating. She was lying on her back in a seat. \n\n\"Golly, Carrie, I'm totes scared!\" Cheryl said. \n\nShe looked to her right. Her friend was sitting beside her wearing a space helmet and a clear plastic spacesuit. Cheryl had a death grip on Carrie's gloved right hand. \n\nTank sat to Cheryl's right, holding Cheryl's other gloved hand. \"It's okay, baby. Ray's got this.\" \n\n\"Just breathe,\" Mark said. \n\nShe turned to her left. \n\nMark was smiling beside her, pressing his glass helmet against hers, his gloved hand squeezing hers. \n\nIt was a spaceship filled with row after row of people. \n\nThey were all transformed. \n\nShe was pressed back against the chair by the acceleration. \n\nHigh above, she could see two Whoremasters at the controls. \n\n\"Altitude 110,000 feet.\" \n\nShe looked down her body and gasped when she saw her very pregnant belly. \"Pregnant. I'm pregnant,\" she whispered. \n\n\"Ain't we all,\" Cheryl giggled. Her own bare belly showed through her transparent spacesuit and she looked ready to pop. \n\nA man floated above Carrie, and he smiled down at her. \n\nBut, that wasn't possible, the g-forces should have sent him crashing down. \n\nInstead, he floated, his brown hair swirling from an unseen wind. He had kind eyes. \"Hello, Carrie.\" \n\n\"Hi,\" she whispered. \n\n\"What did you say?\" Mark asked. \n\nShe looked at Mark. \n\n\"He can't see me,\" the floating man said. \"My name is Adam.\" \n\n\"Where are we going?\" Carrie whispered. \n\n\"The beginning... sorry, being a god means you say cryptic things a lot.\" \n\n\"Carrie, are you okay?\" Mark asked. \n\nShe nodded. \n\nAdam's face was inches above her helmet. \"Tell her.\" \n\n\"Tell her what? Tell who?\" \n\nAdam smiled. \"Angela. Tell Angela she will always be my angel. I will never abandon her. Tell her for me?\" \n\n\"I don't know an Angela.\" \n\nHe laughed. \"Of course, you do.\" He floated away. \"When you're immortal, there are so many beginnings. Few endings, but infinite beginnings. Time to go back to yours. Be brave, Carrie. I have someplace to be.\" \n\n*** \n\nCarrie sat bolt upright. \"Wait!\" She was hyperventilating. \n\nSugar wrapped her arms around her. \"It's okay. Carrie? It's over. You're back.\" \n\n\"Spaceship. I saw a spaceship. God, I was in it.\" \n\n\"A spaceship?\" Sugar whispered. \n\nCarrie nodded. \"I was going somewhere in a fucking spaceship... that couldn't be right, could it? I mean, where would I be going? It was a ship filled with the transformed. Mark was there, and my friends Cheryl and Tank, and a whole lot of other people.\" \n\n\"O... Okay.\" \n\nCarrie touched her stomach. \"We were pregnant. Cheryl and I were pregnant... and somehow, I knew my baby was Mark's, and Cheryl's was Tank's.\" \n\n\"Pregnant?! That can't be right. We can't...\" \n\n\"I know. Maybe it was just some kind of hallucination.\" \n\n\"Maybe,\" Sugar agreed. \n\nCarrie laughed. \"I mean, part of it was completely impossible. The rocket engines were running, and I was pressed into my seat, but this guy named Adam was just floating in mid air...\" \n\nSugar went pale. \"What? Who did you say?\" \n\n\"He said his name was Adam. He said he was a god.\" \n\nSugar stared at her open mouthed. \"Did he say anything else?\" \n\n\"Do you know this Adam?\" Carrie asked. \n\n\"No. But, others have seen him. I... what did he say?\" \n\n\"I asked him where we were going, and he said, 'the beginning'. And, he said to tell Angela that she would always be his angel and he would never abandon her. Do you know who Angela is?\" \n\nSugar stared at her. \n\n\"Sugar? Do you know an Angela?\" \n\nSugar nodded slowly. \n\n\"Who is she?\" \n\nSugar licked her lips. \"Me. I'm Angela.\" \n\n\"You're Angela? But you don't know him?\" \n\nSugar shook her head. \n\n\"How can that be? Do you think he meant a different 'Angela'?\" \n\n\"I don't know,\" Sugar said. \"What did he look like?\" \n\n\"Tall, brown hair, handsome, maybe a few years older than me. When he looked at me, I just felt... at ease. Does he sound familiar?\" Carrie asked. \n\n\"No. I've never met this person.\" \n\n\"Okay, well...\" Carrie stared at Sugar. \"Oh, God.\" \n\n\"What? Did you remember something else?\" Sugar asked. \n\n\"I... love you.\" \n\nSugar laughed. \n\n\"No, really, Sugar. I love you. And, Christine. Mark, of course, but Nathan as well. And, Cheryl and Tank. Oh, my God.\" Carrie burst into tears. \"What's wrong with me? Am I high?\" \n\nSugar nodded. \"Sort of.\" She hugged Carrie against her. \"It's an empathy from transformation. All Whore Caste get it to a degree. Maybe it's to temper the evil.\" \n\nCarrie sobbed. \"Am I always going to be a blubbering mess like this?\" \n\nSugar kissed the top of her head. \"No. You'll adjust. It...\" \n\n\"...passes after awhile,\" Carrie said. Suddenly, Carrie could complete Sugar's thoughts for her. \n\nSugar smiled and stared into her eyes. Yeah, it's like that, Sugar thought. \n\n\"I can read your mind... how? I thought when you were transformed...\" \n\n\"White Witches can communicate telepathically. Only with each other. Carrie, no one knows we can do this. It's our secret, you mustn't let anyone else know about the power. Not even Christine or Mark.\" \n\n\"I won't. The white room I saw in your head?\" \n\nSugar nodded. \"It's a telepathic construct, a way for us to meet in private. Even among the White Witches, only a select few know about the white room. You mustn't talk about it.\" \n\n\"You have a lot of rules,\" Carrie said as she snuggled against Sugar. \n\n\"Yes. A few. One for instance: you have to wear white from now on.\" \n\nCarrie laughed. \"Too bad. I really like this red latex outfit.\" \n\n\"Oh, I thought you might.\" She took the neck of Carrie's halter in two fingers and squeezed. \n\nCarrie watched as the red latex turned brilliant white. \n\n\"Hey! You knew I would choose to become a White Witch, didn't you?\" \n\n\"Not too many turn us down.\" Similar pinches to the skirt and the boots rendered them the same shade of white. \n\n\"Also, this is for you.\" She held up a white latex choker with a platinum inverted pentagram medallion. \"Part of the uniform.\" \n\nCarrie leaned forward and Sugar fastened it around her neck. She stared at the medallion. \"What now?\" \n\n\"Lunch. I'm starving,\" Sugar said. \n\n\"You mean lunch out? I can't go into public wearing this. I mean this motel is one thing.\" \n\nSugar kissed her. \"Trust me.\" \n\n*** \n\n\"I want a double cheeseburger with extra bacon and cheese, loaded tater tots, a large coke, oh, and a chocolate shake,\" Sugar said. \"And, do you have pie?\" \n\nThe haggard waitress nodded. \"Yes, Ma'am, we have cherry, apple, and lemon meringue.\" \n\n\"Can I get a piece of each?\" Sugar asked. \n\n\"Sure.\" \n\nCarrie stared at Sugar from the other side of the booth. \"You're going to eat all of that?\" \n\nSugar smiled and nodded. \"Aren't you hungry?\" \n\n\"If I ate that much, I'd be big as a house,\" Carrie whispered. \n\n\"No, actually, you won't. Your metabolism is through the roof. You can eat twice what I ordered and not gain an ounce.\" \n\nThe waitress looked from Sugar to Carrie and back in confusion. \n\n\"Forget I said that,\" Sugar said. ",
        "The waitress's eyes glazed over. \"I'm sorry, Ma'am. Did you say something?\" \n\n\"No,\" Sugar said with a smile. \n\n\"I'll... have what she's having,\" Carrie said. \n\nThe waitress walked away, and Carrie's eyes were drawn to the girl's hips swaying in the tight pink outfit. She shook her head. \"God, not only am I super horny, I'm an absolute lech. I feel like a frat boy.\" \n\nSugar laughed. \"So, you like looking at pretty girls now? There's no crime in that.\" \n\n\"There are several crimes in what I want to do to her,\" Carrie groaned. \"I have the urge to...\" \n\n\"Transform her?\" Sugar said. \n\n\"Yes! God, I want to... modify her. Change the way she thinks and looks.\" \n\n\"And, make her happy?\" Sugar asked. \n\nCarrie nodded. \"I do. If you weren't here to stop me, I might... God, I don't know what I might do to her, to everyone in the diner.\" She looked around the restaurant at the people talking and laughing, eating salads, burgers, and sandwiches. \n\nShe wanted to turn the room into an orgy. \n\nSugar laughed. \"Tempting, isn't it?\" \n\nCarrie grinned wickedly. \"Let's do it.\" \n\nSugar took her hand. \"No. You're still high from transformation. We can hurt people, Carrie. Trust me, I know what I'm talking about. I created a few monsters my first day - they still haunt me. That's why we don't just make White Witches and walk away anymore. Tomorrow, you're going to be paired with a White Witch named Lisa. She's going to be your mentor.\" \n\n\"Did she make any monsters?\" Carrie asked. \n\nSugar raised her eyebrows. \"She destroyed entire families.\" \n\nCarrie nodded. \n\n\"You can learn from our mistakes.\" \n\nCarrie took another look around the room. \"It would be fun though.\" \n\n\"Oh, I didn't say we couldn't have fun,\" Sugar said and winked. \n\nThe waitress brought their sodas. \n\nCarrie looked up at her. She was haggard looking, but not as old as Carrie had thought in the beginning. She had dark circles under her light green eyes and unkempt curly red hair. Her face had a sadness to it. \n\n\"Go ahead,\" Sugar said. \n\n\"What?\" Carrie asked. \n\n\"Her.\" \n\n\"How?\" \n\n\"Take her hand,\" Sugar said. \n\n\"I'm sorry? What?\" the girl asked. Her nametag said Roxy. \n\nCarrie reached out and grabbed the girl's hand. \n\nShe tried to pull away. \n\n\"Calm,\" Carrie said. \n\nRoxy stopped struggling. \n\n\"Sit beside me,\" Carrie said. \n\n\"I... can't... the boss doesn't let us sit when we're on shift,\" Roxy said. Her eyes were half closed. \n\nSugar stood up. \"Who's your boss?\" She looked around the restaurant. \n\n\"Bill, he's at the register.\" \n\nCarrie craned her neck. A heavy set bald man was staring toward them. \n\n\"Bill, Roxy is going to sit here with us. That's okay, isn't it?\" Sugar said over the din of the crowd. \n\nBill stared at her blankly for a moment. Then he smiled. \"Yeah, sure. That's fine. I'll cover her tables.\" \n\nSugar sat down. \"Proceed.\" \n\n\"Sit beside me, Roxy.\" \n\nThe redhead shook her head slowly. \"N... No, I don't want to.\" \n\n\"Stronger, Carrie. She can't resist you. You're giving her too much leeway,\" Sugar said. \n\n\"Sit beside me, Roxy,\" Carrie said. She pushed with her mind. \n\nRoxy's eyes fluttered shut and she sat down beside Carrie, still holding her hand. \n\n\"That's better,\" Carrie said. \n\n\"Much better,\" Sugar agreed. \"Look inside her mind. She's very afraid right now. She can't understand why she can't make herself walk away.\" \n\nCarrie squeezed Roxy's hand. \"No, Roxy, don't be afraid. I won't hurt you. I promise.\" \n\n\"Better,\" Sugar said. \"Now, you need to go inside her mind - gently! This is very invasive. It's the same thing as penetrating her for the first time.\" \n\n\"I know.\" Carrie whispered. \n\nA couple at the next table were staring at them. \n\nSugar looked at them and smiled. \"Your girlfriend wants to try anal, but she's afraid you'll think she's weird. Take her back to your apartment and show her she's wrong.\" \n\nThe couple appeared to nod off. Then the man sat up and shook his head. \"Check, please?\" \n\nCarrie giggled. \"You're terrible. Does she really want to try anal?\" Carrie whispered. \n\nSugar shrugged. \"She does now. Continue.\" \n\nCarrie looked into Roxy's eyes. She felt herself fall into the green irises. \"Roxanne... Dumont. Twenty-three. Single... no, a boyfriend. She wants to get married. He's hesitant.\" Carrie frowned. \"Show me your wrist.\" \n\nRoxy looked half asleep. She raised her free hand above the table revealing black and green bruises in a ring around her slim wrist. \n\n\"No, no, no,\" Carrie mumbled. \"No. He is not sorry, Roxy. And, no, getting married and getting pregnant won't help that.\" \n\nRoxy whimpered. \n\n\"He's mostly verbally abusive...\" \n\n\"But, he's evolving,\" Sugar said. \n\n\"Yes. She's so timid...\" \n\n\"They like timid. Men like her boyfriend look for timid,\" Sugar said. \n\n\"Let's go hurt him,\" Carrie whispered. And, she could. Her mind filled with images of tortures that would have made the Spanish Inquisition look tame. \n\n\"No. If we started going after every asshole in the world, we wouldn't have time to save the world. But, we can save her.\" \n\nCarrie reached out with her free hand and caressed Roxy's face. \"She thinks she's ugly. For fuck's sake...\" \n\n\"Low self esteem. Fix it.\" \n\nCarrie closed her eyes. Then she opened them. \"Should I? Is it right?\" \n\nSugar laughed. \"There are no right or wrong answers, Carrie. Let her go, if you want.\" \n\nCarrie shook her head. \"No. No way.\" She stared intently into Roxy's eyes. \"You're beautiful. And, you know that. You're not vain, but you're not going to delude yourself into thinking you're ugly, either.\" \n\nRoxy sat up a little taller. \n\n\"What do you want to change in her, Carrie?\" Sugar asked. \n\nCarrie shook her head. \"No. Roxy, what do you want to change?\" \n\n\"Interesting,\" Sugar whispered. \n\n\"Short. I'm short,\" Roxy whispered. \n\n\"We can fix that.\" Sugar opened her purse and pulled out a vial of Gam Grow and a syringe. \n\nA man two tables over stared at Sugar's hands. \n\nShe looked at him. \"Insulin. Ignore it. Better yet, go jack off in the men's room.\" \n\nThe man nodded and left his table. \n\n\"Wicked,\" Carrie giggled. \n\n\"Mind control can be very entertaining.\" She handed a syringe to Carrie. \"In the thigh. You have to go through to the bone.\" \n\nCarrie nodded. \n\n\"Imagine her leg is totally numb before you inject her. Let go of her hand and touch her temple instead - the closer you are to her brain the better.\" \n\n\"Okay.\" She touched Roxy's temple and imagined that Roxy's left thigh was numb. \n\nCarrie took the syringe in her left hand. \n\n\"It's important to keep thinking about her leg being numb - if you're afraid it will hurt her? It will hurt her. Understand?\" \n\n\"Yes.\" She held the needle in her fist and brought it down on her thigh. \n\n\"Don't stop. All the way,\" Sugar said. \n\nThe bone made a crunching sound when the needle hit it. \n\n\"Now inject.\" \n\nShe squeezed the plunger and sent the Gam Grow into her thigh. \n\n\"She'll be four inches taller in an hour - at least one leg will be,\" Sugar said. \n\nCarrie pulled the needle straight out and laid it on the table. \n\nSugar covered the empty syringe with a napkin. Then she handed a second full syringe to Carrie. \"Now the other leg.\" \n\nCarrie almost jumped out of her skin when Bill showed up at their table with their orders. \n\nHe stared in confusion at Roxy and the syringe in Carrie's hand. \n\n\"Nothing to see here. Just give us our food and go back to the register,\" Carrie said. \n\nHe blinked. \"Will there be anything else?\" \n\n\"No, thank you,\" Sugar said. \n\nHe turned and walked away. \n\nSugar picked up her burger and took a bite. \"Keep going. I'll setup the shots.\" \n\n*** \n\nBy the time they finished eating, Roxy was barely recognizable. She was four inches taller with wider hips and a narrower waist. Her breasts were a healthy DD. She had also been slutified. \n\nThe injections after her thighs had required Sugar to put everyone in the diner to sleep for four minutes. \n\nRoxy sat quietly by Carrie's side as Carrie and Sugar ate. \n\nAs Carrie downed the last of her shake, she ran her fingers through Roxy's hair. \"What happens to her now?\" \n\nSugar smiled. \"Whatever you want. I can send her to Stallion's. They'll ship her off to Havana to the Whore Market. Most likely she'll end up in a household - we call them Orgy Whores. Full time party girls. It'll be like a permanent beach vacation for her.\" \n\n\"Oh... can... I mean can she just be her? Can't she just stay here and live her life?\" \n\n\"Just as a sex goddess?\" \n\n\"Yeah.\" \n\nSugar smiled. \"For awhile. Until the Church takes over.\" \n\n\"I don't want her going back to that dick.\" \n\n\"Absolutely not. We don't tolerate people who hurt Whore Caste.\" She reached over the table and took Roxy's hand. \"You've looked inside her head and let her change anything she wanted about herself. Now comes the difficult part - changing her mind.\" \n\n\"Do we have to?\" Carrie asked. \"I mean, she just got her dream body. Maybe she doesn't need any modifications to her mind.\" \n\n\"Maybe not. But, what if we had used that logic with you? What if we didn't influence you? Would you have been happy just having a perfect body?\" \n\nCarrie frowned. \"I... I didn't think about that.\" She looked at Roxy and smiled. \"I mean. We could just change a few things.\" She bit her lower lip. \n\n\"Not here,\" Sugar said. She stood up. \"I can't put the restaurant to sleep that long.\" \n\n\"Where are we going?\" \n\n\"Ladies room.\" \n\nSugar and Carrie walked back to the restroom with Roxy between them. \n\nThe restroom was empty. \n\nSugar locked the door behind them. \n\nCarrie stood close to Roxy and smiled. \"Kiss me.\" \n\nRoxy blinked. \"No. I'm not gay.\" \n\nCarrie laughed. \"Neither am I. Kiss me. You've wanted to all your life - kiss a girl. You want to know what it feels like. I'll show you.\" \n\n\"Her thoughts or yours?\" Sugar said as she hopped up on the row of sinks and sat down. \n\n\"Does it matter?\" Carrie said with a smirk. \n\n\"Nasty girl.\" \n\nCarrie laughed. \"Kiss me, Roxy. A nice, long, soul kiss.\" \n\nRoxy leaned forward and put her arms around Carrie's neck. \n\nRoxy turned her head to the side and Carrie kissed her, tasting the girl's full red lips. She eased her tongue inside Roxy's mouth, finding her small tongue and playing with it. \n\n\"You two want to be alone?\" Sugar asked. \n\nCarrie looked at Sugar, lust burning inside her. \"Don't you dare leave.\" \n\n\"Hmm, in that case?\" Sugar spread her legs and the rubber dress slid up her thighs. Her pussy was wet and dripping. \n\nCarrie winked. \"Look, Roxy. Isn't Sugar beautiful?\" \n\n\"I... guess.\" \n\n\"She's beautiful. All women are. Men too. You don't have to be a good girl anymore. You can be naughty. Let your mind go,\" Carrie whispered. \n\n\"I think you're getting the hang of this,\" Sugar said as she slowly stroked her clit with two fingers of her right hand. \n\nCarrie took Roxy's hand and led her to stand between Sugar's thighs. She let go of Roxy's hand and moved around behind her. She raised her hands to Roxy's temples. \"She's very pretty, isn't she, Roxy?\" \n\n\"Yes,\" Roxy whispered. \n\nSugar put her arms around Roxy's neck and scooted forward. \n\n\"You liked kissing me, didn't you, Roxy?\" Carrie asked. \n\n\"Yes,\" Roxy said. \n\n\"You'll like kissing Sugar as well. Go on. Try it.\" \n\nRoxy leaned forward and Sugar kissed her. \n\n\"That's right,\" Carrie said as she pulled down the zipper on the back of Roxie's dress. \n\nThe girl began helping, shrugging it off her shoulders as Sugar kissed her fervently. \n\nIt fell to the tile bathroom floor. \n\nCarrie unhooked the simple white bra the girl wore and laughed - her DD breasts had overstuffed the B cup bra, and, once free, her breasts shoved out of the cups on their own. \n\nCarrie eased it off her arms and tossed it in the wastebasket. \n\nThe girl's Ambrosia was coming in quickly and she dribbled a few small drops from her nipples. \n\nSugar stopped kissing her and opened her purse. She pulled out two inverted pentagram nipple clamps and clipped them in place. \"You'll need to wear these or you'll wet your blouses,\" Sugar whispered. \n\nRoxy moaned. \"Yes... Mistress.\" \n\nSugar smiled. \"Such a good girl.\" She kissed Roxy again. \n\nCarrie took a step back and looked at the white cotton panties stretched across the girl's ass. They looked ready to rip, and her juices had rendered the back and crotch almost transparent. \"No more panties for you,\" she whispered in Roxy's ear. Then she reached down and tore the back of the panties in half. \n\nRoxy moaned into Sugar's mouth as Carrie ripped the panties again and finally tossed the shredded cloth into the waste bin. \n\nThe girl had sparse red pubic hair. \n\nCarrie rummaged in Sugar's purse till she found a bottle of green liquid. She poured some in her hand and warmed it. Then she reached between Roxy's legs and applied the liquid to the girl's crotch from just below her navel to her anus. \n\nRoxy squirmed against Carrie's hands as she massaged. Carrie made sure to massage the depilatory deep into all Roxy's folds. \n\nThe red pubic hair began to slide off. \n\nCarrie took a few handfuls of paper towels and began wiping the green liquid away. All the remaining hair came with it, leaving Roxy's sex smooth and wet. \n\nCarrie tossed the paper towels in the trash and then stood up behind Roxy again. She put her hands back on Roxy's temples as the girl kissed Sugar. \"You're bisexual. It's a lot more fun. You'll see. You're also done with your fianc\u00e9. Nobody gets to hurt you anymore. When you leave work today, get your friends together and get them to go with you back to your apartment. Get your stuff and leave.\" \n\nSugar stopped kissing Roxy. \"And, if he ever lays a hand on you again? You're going to find out your new body is a lot stronger than it used to be. You break his arm - don't kill him, but break his arm. Understand?\" \n\n\"Yes, Mistress.\" \n\n\"Good girl.\" Sugar put her hands on Roxy's shoulders and pushed her down to her knees. \n\nRoxy stared at Sugar's pussy. \n\n\"Go on. You know you want to, Roxy,\" Carrie said as she ran her nails across Roxy's back. \n\nRoxy closed her eyes and kissed Sugar's cunt. \n\nA moment later, she began kissing and sucking Sugar's clit. \n\n\"God, so good,\" Sugar whispered as she wrapped her fingers in Roxy's hair. She pushed her harder against her pussy. \n\nCarrie retrieved the sterilizer dildo from Sugar's purse. \n\nSugar smiled at her and winked. \n\nCarrie knelt behind Roxy. She pushed the blue dildo against Roxy's pussy. \n\nThe girl moaned into Sugar's pussy. \"What are you doing?\" \n\n\"Loving you. Just relax. You're going to fuck a lot of guys from here on out. Can't have you getting some weird disease. You want me to do this, Roxy.\" \n\n\"Y... Yes. I want you to do it,\" Roxy whispered. \n\n\"See?\" Carrie slid the dildo inside. \n\nRoxy rotated her hips and rocked them down, taking the dildo as deep as she could. \n\n\"Right there.\" \n\nClick! \n\nRoxy cried out and Sugar stroked her hair. \"It's okay. It's all over now.\" \n\nCarrie held the pistol grip firmly. \n\nThe dildo slid forward. \n\nRoxy gasped. \n\n\"Don't stop eating her pussy, Roxy. You want to make her cum, don't you?\" Carrie asked as the dildo slid deeper and deeper. \n\n\"Ooo! Oh, God!\" \n\nRoxy came, her lube squirting around the dildo and pooling on the floor between her legs. \n\n\"Suck, girl,\" Sugar moaned as she pushed Roxy's face firmly against her crotch. \n\nRoxy licked and sucked harder. \n\n\"Yes! Oh, God!\" Sugar came, wetting the waitress's face with her juices. \n\nCarrie slowly pulled the huge dildo out of Roxy's pussy and smiled up at Sugar. \n\n*** \n\nCarrie zipped up Roxy's dress. The fabric was stretched tight over the waitress's new curves and she was showing a mile of legs. \"Remember, don't go back to your apartment alone. You have friends who can go with you, don't you?\" \n\n\"Yes, Mistress,\" Roxy said. \n\nCarrie stroked her cheek. \"You don't have to call me that.\" \n\n\"She does,\" Sugar said as she applied lipstick to Roxy's lips. \"Get used to being called 'Mistress'.\" \n\nSugar finished applying the lipstick and handed Roxy a card. \"This is my card.\" \n\n\"Stallion's Adult Video?\" Roxy asked as she read it. \n\n\"Yes. Now, if you get into trouble or even if something scares you? Either call that number or just go there. Tell them Sugar sent you. You're not alone.\" \n\nShe smiled. \"Thank you, Mistress.\" \n\nThey led her out into the restaurant. \n\nPeople turned and looked at the three of them. \n\nMouths dropped open. \n\n\"What are they staring at?\" Roxy asked. \n\n\"You,\" Carrie said. \"They're staring at you.\" \n\n*** \n\n\"Whoo! That was amazing!\" Carrie yelled and danced in the parking lot. \"Let's do it again! I want to fix more people.\" \n\nSugar laughed. \"Get in the car, you nutcase.\" \n\n\"How do you do it? How do you control yourself? We can do so much good.\" \n\n\"And bad. We can do a lot of bad,\" Sugar reminded her as she opened her car door. \n\nCarrie hopped in beside her. \"It's like a drug. We see broken people and we fix them.\" \n\n\"Sometimes they're not broken. Roxy wasn't broken. She just hadn't found her way yet. We took that choice away from her.\" \n\n\"For the better! I mean, she's like Super Roxy now. She's empowered!\" \n\n\"But, it wasn't her choice. What about Brooke and Deborah, did we fix them?\" \n\nCarrie groaned. \"No, but that wasn't our fault. We had to do that to keep Case happy...\" \n\n\"And, what happens when his usefulness comes to an end? Believe me, it will. What happens to Brooke and Deborah? Hmm? Worse, what happens if they suddenly comprehend what we did to them? We'll pay for all these transgressions, Carrie.\" \n\n\"So, you're saying we shouldn't transform them?\" Carrie asked as Sugar drove them back to the suburbs. \n\n\"No. We have to. I have faith that we really are saving the world - if nothing else? We're saving it from the Religious Caste.\" She reached over and took Carrie's hand. \"We just have to think before we act and know that everytime we change someone, there are consequences. We have godlike powers, but we aren't gods. Remember that.\" \n\n*** \n\nCarrie walked up the driveway to Christine's house. \n\nSugar had made Carrie one of the most powerful creatures on earth, but she had also made her terrified of that power. \n\nShe unlocked the front door to find Christine waiting for her. \n\nThe older woman looked her up and down. \"Wow. I guess I have to call you Mistress now, huh?\" \n\n\"No, you don't.\" She pulled Christine into her arms and kissed her for almost a minute. \n\nChristine smiled at her. \"That was nice.\" \n\n\"I love you.\" \n\n\"I know. I love you too.\" \n\nCarrie looked behind her and saw Mark staring at her. She held out her hand. \n\n\"You're a White Witch,\" he whispered. \n\n\"Still want me?\" She asked. \n\nHe nodded. \n\n\"Good.\" \n\nHe took her hand and kissed her. \n\nCarrie stood holding the two of them close. She kissed Christine again. \n\nThen Christine kissed Mark. \n\n\"You just going to stand there?\" Carrie asked as she smiled at Nathan. \n\nHe was staring at the three of them from the kitchen doorway. \n\n\"No. I'm not,\" Nathan said. He walked to them and kissed Carrie, then his wife. \n\n\"Dinner?\" Christine asked as they clung to each other in the hallway. \n\nCarrie shook her head. \"How about we just go to bed?\" \n\nThey all smiled."
    ],
    "authorname": "wayneandanntriskelion",
    "tags": [
        "bimbofication",
        "body modification",
        "bondage",
        "femdom",
        "futanari",
        "groupsex",
        "lesbian",
        "oral",
        "romantic",
        "mind control"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/transformations-return-to-sinful-suburbia-ch-04"
}
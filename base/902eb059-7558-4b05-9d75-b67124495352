{
    "title": "The Real Buffy Ch. 01",
    "pages": [
        "DISCLAIMER:\n\nThe stories in the \"Celebrity\" section of Literotica are all fictional parodies - none are true, nor are they approved of by the celebrities named in the stories. Authors write these fictitious stories about famous people for the same reason that Larry Flynt made fun of Jerry Falwell, because they can. The Supreme Court of the United States, the country where this site is located, has ruled that parodies involving famous people are perfectly and totally legal under the United States Constitution. The specific case law on this was decided in the case of \"Hustler Magazine, Inc. et al. v. Jerry Falwell\" in 1988. No harm is intended toward the celebrities featured in these stories, but they are public figures and in being so, they must accept that they are fair target for parodies by the public. We believe in the first amendment, and more broadly, in the basic principle of free speech and this section may push the boundaries of that principle, but the United States Supreme Court has approved of this type of material. We believe that the Supreme Court was correct in their decision.\n\n* \n\n\"They don't make vampire movies like they used to,\" I sighed softly to myself. I felt a moment of nostalgia as I exited the theatre. I missed guys like Bela Lugosi. They knew how to portray a vampire! \n\nThe young woman I was followed from the movie turned down an alley. I followed quickly and caught up with her. I spun her around and was seriously tempted to say, 'I vant to suck your blood.' \n\nI'd never actually used the line because I was afraid my prey would burst into laughter, or worse, I would. I did try hiding my fangs in the crux of my elbow for a while, but quickly stopped after I lost my quarry once. This cute little blond jostled my elbow by accident and my arm blocked my eyes. She scampered away and I was too embarrassed to chase her. \n\nNow I just went for the simple approach. I made eye contact, put them in a trance and fed. Not all that flashy, I know, but it did the trick. I smiled slightly as I met my latest victim's gaze. I could normally transfix a woman in moments. It came from long years of practice.\n\n\"Look into my eyes,\" I said in my most mesmerizing voice. Okay, so I did steal one line. I couldn't help it. I really liked the sound of it. Unfortunately, the young woman refused to comply.\n\n\"Oh please!\" she said with a roll of her eyes. I sighed. This was going to be one of those nights. \"Mister, you've got to be kidding! Bela Lugosi died almost fifty years ago and although I'm sure he'd appreciate your dedication to his version of the Dracula myth, don't you think it's a bit outdated?\" I fought hard not to grit my teeth because that could be very dangerous with bicuspids like mine. \n\nI reached out and grasped the young woman's jaw, forcing her to make eye contact. She didn't really fight me at first. She sighed loudly and acted like she was just humoring me. It was a little embarrassing, but so be it. It's not like there was a crowd watching. As soon as her eyes met mine, I smiled. It would get easier now, or so I thought. \n\nShe started falling into a trance as I worked my old black magic on her. I was impatient because I was hungry, but centuries of experience forced me to take my time. She was nearing the point where my control would be strong enough to allow me to feed when she made a sudden motion with one hand and water sprayed toward my face. Only my vampire enhanced reflexes allowed me to get my arm up in time to block my eyes and the bulk of my face. The burning started. \n\nI immediately knew what she threw at me from the intensity of the pain. Only holy water could burn so quickly and cruelly! My forearm was blistering, so was a small patch of skin on my cheek. The rest of the dreaded fluid had doused my clothes.\n\n\"Oh shit!\" I cried as I quickly reached for my shirt. I could already feel the sting as the holy water absorbed into it. I ripped the cloth away from my body and threw it on the ground. \"You bitch! That was my favorite shirt!\"\n\n\"Wow!\" the young woman said, looking at me. \"You keep in great shape for a dead guy.\" I glared at her, but she seemed unimpressed. I shook my head and turned to walk away. Tonight was a lost cause. I wasn't going to feed on this woman. She was crazy. I was hungry, but not that hungry! \n\n\"No you don't!\" the young woman cried, pulling out a large silver cross. Okay, maybe it wasn't that large, but this was one of those cases where size doesn't matter. Really.\n\nI bared my teeth, hissed and fell backwards. I had no intention of letting her touch me with that thing! It was like being branded with a hot iron!\n\n\"Nice teeth,\" she smiled.\n\n\"Who the hell are you?\" I asked with a frown. \"And do you always walk around with holy water and a cross?\"\n\n\"I'm Buffy,\" the blonde smiled. \"And yes, that precisely what I do. Sometimes, I even bring a sword or crossbow. Of course, my personal favorite is always with me. Meet Mr. Pointy.\" She produced a small wooden stake. Actually it looked more like a wooden knife.\n\n\"You're kidding right?\" I asked despite the evidence.\n\n\"Not at all,\" she replied, flipping the stake in her hand confidently.\n\n\"Young lady, I may be old, but I still keep in touch with the real world,\" I said, watching her carefully for sudden moves. \"Buffy the Vampire Slayer was a decent television show and a barely passable movie. You're not trying to tell me it was based on fact?\"\n\n\"Why is that so hard to believe?\" she shrugged. \"You're a vampire. I'm the Slayer. It's simple really.\"\n\n\"But you don't even look like either of the actresses who played the part,\" I said. I knew it was a stupid statement, but I was just stalling, trying to gather my thoughts. She was obviously offended by my comment. I could understand considering that she was not nearly as small as either of the actresses or anywhere near as pretty. Don't get me wrong, she wasn't ugly or even plain. She just wasn't the Hollywood actress type. \n\n\"You're not Angel either! Or even Spike for that matter!\" she snapped, and then added a little more calmly, \"And your face still looked pretty ordinary to me when you were about to feed on me.\" I smiled despite myself. \n\nI enjoyed watching the actors 'vamp out' on the television show, but it always struck me as a little far-fetched. Could you imagine the pain that kind of a transformation would cause every time it happened? Of course, it was still pretty cool. It might even have been useful if it were real.\n\n\"Touch\u00e9,\" I said.\n\n\"So, what's your name?\" she asked, and then added before I could answer, \"Mind you, I don't really care, but it would be rude to kill you now without knowing. I mean, don't you think we're passed the simple kill phase?\"\n\n\"Certainly,\" I said planting a fake smile on my face. If this deluded girl wanted to talk instead of trying to kill me for another few moments, who was I to argue?\n\n\"Your name?\" she prompted.\n\n\"My friends call me Vlad,\" I answered, allowing the innate sex appeal of my kind to flow across the gap between us.\n\n\"I'm not one of your friends,\" she said with a shake of her head.\n\n\"Why not?\" I asked, smiling seductively. \"It seemed to work for Buffy and Angel on the television.\"\n\n\"Vlad, I'm afraid I'm going to have to kill you if you don't stop trying to play with my mind,\" she said, looking rather scary as she glared at me with Mr. Pointy in her hand. \"I mean sooner, rather than later. You're going to die tonight anyway.\" \n\nShe sounded completely confident in her prediction. I wasn't so sure, but the truth was that I wasn't really a particularly violent vampire. Those kinds seldom lasted. Some village or group of vigilantes always hunted them down and killed them. I found out the hard way early on that it paid to remain anonymous.\n\n\"So, is your real name Buffy?\" I asked, refraining from trying to take control of her mind. She smiled.\n\n\"That's better,\" she said, relaxing slightly, but not nearly enough for my comfort. She used one hand to crack her neck. She did it by grabbing her own chin and twisting her head until I heard a low crack. It wasn't a pleasant sound. Truthfully, it was even a bit intimidating. She turned her head the other way and cracked her neck again as she answered, \"My real name is Beatrice, but I thought it inappropriate for a Vampire slayer. It means 'bringer of joy'. So, I changed it to Vacuna when I first became the Slayer.\"\n\n\"Vacuna the Vampire Slayer,\" I smiled. She fought off a grin of her own.\n\n\"I know, I know,\" she sighed. \"But I was young and it means 'Victory'.\"\n\n\"Why are you using Buffy now? Doesn't it mean 'Small Rodent'?\" I asked.\n\n\"'Little Rabbit' actually,\" she grinned. \"I only started using it the last few years. You'd be amazed at how many vampires recognize the name. It saves time.\" I nodded in understanding.\n\n\"Thinking about changing it again any time soon?\" I asked inanely. I was still trying to figure a way out of this mess without resorting to violence. It didn't help that my stomach was growling.\n\n\"I probably will,\" she sighed again. \"But the truth is I can't find a name that doesn't sound silly with the suffix 'the Vampire Slayer'.\"\n\n\"How come I've never heard of the Slayer until the movie came out?\" I asked, this time honestly curious. \"I mean I've been around for centuries, you would think I would have heard.\" I wasn't being completely honest. I'd heard rumors over the years, but I'd always thought they were silly.\n\n\"Please, don't remind me!\" she groaned. \"The Watcher's council still hasn't forgiven me for letting the proverbial 'cat out of the bag'.\"\n\n\"What happened?\" I asked, filing away the fact that the Watcher's council really existed for later.\n\n\"How was I to know that the cute little girl I saved from a large vampire nest was related to a crazy writer who would come up with the idea of making my life a movie?\" she asked defensively, but then she shook her head and added, \"I really shouldn't have told her the truth, but it took us almost a full day to escape and I had to tell her something to keep her going.\"\n\n\"Didn't you make her promise to keep it a secret?\" I asked.\n\n\"Of course!\" she snapped. \"But I should have known better than to take a child's word. Not a one of them can keep a secret! I still remember the day I confide in Dawn about my crush on Xander.\"\n\n\"You actually liked Xander?\" I asked, unable to resist.\n\n\"Yes,\" she replied with a role of her eyes. \"But the real Xander is nothing like the television version. Okay, they are both hunks in their own way, but the real one knew it. Dawn told him about my feelings and he was all over me.\"\n\n\"What did you do to him?\" I asked.\n\n\"Nothing,\" she replied, and then sighed and added, \"At least not until he dumped me for Cordelia. That slut!\"\n\n\"So, was there really an Angel or Spike?\" I asked with a smile. She looked at me carefully and then tilted her head at an odd angle.\n\n\"No,\" she replied. \"I don't mix business with pleasure.\"\n\n\"That's too bad,\" I said. She suddenly started laughing.\n\n\"You're not like the other vampires I've talk to,\" she said with a shake of her head.\n\n\"Do this often?\" I asked with a raised eyebrow.\n\n\"The job gets stale without making it interesting,\" she replied, and then smiling added, \"I once spent a night with a vampire who also happened to be a chef. It was a bit ironic to me considering, but he really seemed to enjoy his work. He shared some of his favorite recipes with me. I felt bad when the sun rose and he burst into flame.\"\n\n\"Didn't he put up a fight or try to run?\" I asked incredulously. That was the death I feared most. The damned sun!\n\n\"Oh, we were well past that,\" she said in a matter of fact tone. \"I found him the night before feeding on one of the waitresses. We fought. I won and chained him to a large pole in the yard.\" \n\n\"That was cruel,\" I shuddered visibly.\n\n\"Hey, I gave him a choice!\" she said defensively. \"I was willing to use Mr. Pointy, but he wanted to see the sun once more before he died.\" I shook my head. It took all kinds. It was her turn to ask some questions.\n\n\"So just how old are you?\"\n\n\"Very old,\" I answered.\n\n\"That's not an answer,\" she said. I shrugged. She frowned and added, \"You know, you look familiar.\"\n\n\"People say that to me all the time,\" I replied, but she continued to stare at me.\n\n\"You look like...\" she began, and then suddenly swallowed hard and raised Mr. Pointy. \"You look like the only vampire who ever escaped me.\"\n\n\"I find it hard to believe that someone escaped you,\" I said, trying to calm her, but she was ignoring my words.\n\n\"Just one,\" she said carefully. \"It was a couple of years ago.\"\n\n\"Do you know his name?\" I asked calmly. I needed to keep her talking.\n\n\"Dracula!\" she said with her eyes opened wide.\n\n\"That's impossible,\" I said, smiling calmly. \"I'm Dracula.\"\n\n\"What?\" she snapped.\n\n\"I said that I'm Dracula. This other vampire must have been an imposter,\" I shrugged, and then frowned briefly before adding, \"Unless...\"\n\n\"Unless what?\" she asked. I shook my head.\n\n\"Did this vampire have blond hair?\"\n\n\"Yes,\" she nodded. \"That's what threw me at first. He has your features, but the hair was blond. He also has one blue eye and one brown.\" I sighed loudly at the news.\n\n\"Well, it's nice to know Vlad junior is still alive,\" I said. \"You would think it's not too much to ask for a son drop a post card every century or so.\"\n\n\"You mean...\" she began.\n\n\"Yes, Beatrice. I'm the original count Dracula. The other Dracula is my son Vlad.\"\n\nBeatrice surprised me then by launching herself at me. As I said earlier, I'm not a particularly violent being, but then again, I haven't survived as long as I have by being a pacifist either. I backhanded her across the room.\n\nThe fight was short and vicious. She was strong. So strong that we were evenly matched in that area, but she was in her mid to late twenties at best. I was quite a bit older and more experienced. Still it was a close thing. I could see how she survived so long out of her teen years.\n\n\"No!\" she cried as my teeth sunk into her neck. I expected the rush that came with feeding, but with Beatrice it was quite a bit more! Slayer blood really was more potent! \n\nWhat I hadn't expected was the surge of sexual energy that accompanied it. I heard Beatrice's groan of pleasure. It matched my own. I continued to feed until I was full. She was weak now and her blood made me even stronger. I felt younger than I had in years, maybe centuries.\n\n\"I should kill you,\" I said as I lifted my head from her neck.\n\n\"Go ahead! Do it!\" she cried. \"I always new this day would come! I don't want to live as your slave!\" I frowned.\n\n\"Who said anything about making you my slave?\" I asked.\n\n\"So what? You'll just let me go?\" she asked in disbelief. I hadn't moved off of her yet. The sexual tension was still pliable between us.\n\n\"Yes, if you give me your word that you'll won't hunt me,\" I offered.\n\n\"But I'm the Slayer!\" she argued. \"I can't let the real Dracula go!\"\n\n\"Why not?\" I asked with a smile. My cock was wedged between our stomachs. It was hard and I knew she could feel it.\n\n\"You're a killer! You kill women and innocent children!\" she snapped.\n\n\"I haven't killed anyone in over a century,\" I frowned. \"And I've never killed a child, innocent or not.\"\n\n\"Are you trying to tell me Dracula has a soul?\"\n\n\"My dear, all living things have a soul,\" I sighed. \"I don't know who told you different. I always found that part of the television show a little annoying.\"\n\n\"But Vampires are dead! They drink blood and kill for the pure pleasure of it!\"\n\n\"Please!\" I snorted. \"Vampires are not dead! We may be demons of a sort, but we like to mix with humans. It's been my experience that the dead pretty much keep to themselves.\"\n\n\"But...\" she almost stuttered. \n\n\"Besides, very few vampires actually kill at all, much less indiscriminately. Even if it were true, what does that have to do with having a soul? I've met some pretty twisted individuals with truly black souls in my life. Most of them were human.\"\n\n\"But your own son killed a whole school bus full of children!\" The news was disappointing to say the least.\n\n\"Vlad is a problem child,\" I sighed. \"But what is a father to do? I keep hoping he'll outgrow it.\"\n\n\"How old is he?\" Beatrice asked, sounding stunned. The fact that I was still lying on her in the alley probably helped. So did the loss of blood.\n\n\"A little over two hundred,\" I admitted.\n\n\"And you're still hoping he'll outgrows it?\" she asked incredulously. \n\n\"A parent never gives up hope.\"\n\n\"Oh please! Just kill me now and get it over with!\" she cried. I didn't immediately react so she added, \"If you don't, then I'm going to hunt you and all your kind down with my last dying breath!\"\n\n\"Spoken like a true Slayer,\" I laughed as I stood and helped her up. She stumbled twice. I actually had to hold her steady. Maybe I took a little too much blood, but it was so delicious!\n\n\"I think it's time you go on your way,\" I said. \"It's been interesting meeting you, to say the least.\"\n\n\"This is crazy!\" she cried.\n\n\"Think you can make it on your own?\" I asked in concern, ignoring her comment. \"You're pretty weak.\"\n\n\"I'll be okay,\" she replied, still looking at me in disbelief. I shrugged and let her go. She took two steps and passed out, hitting her head on the pavement.\n\n\"Shit,\" I grumbled at her still form. \"I should just leave you here.\" Yet, I couldn't do it. It was late and this wasn't a good neighborhood. \n\nI picked her up and brought her to my car. The trip to my 'lair' as the say wasn't really all that far. It was an old mansion that had seen better days. Of course the gates still worked and I paid quite a lot for the security system. Inside was actually in good repair.\n\n\"Emma! Martha! We have company!\" I called as I carried Beatrice into the house.\n\n\"Oh Vlad!\" Emma cried in annoyance from the top of the balcony. \"You haven't picked up another stray? They are so hard to get rid of!\" Emma was dressed in a gown that was in style when she was a human. It still looked good on her curvy body. The green went well with her dark hair and pale skin. \n\n\"I drained too much of her blood and she fell,\" I explained as I climbed the stairs.\n\n\"Couldn't you just leave her there?\"\n\n\"She bumped her head,\" I replied. \"There's no telling what would have happened to her.\"\n\n\"Oh, okay,\" Emma sighed loudly. \"Who is she anyway?\" I didn't want to answer, but it wouldn't be fair. What if Beatrice somehow escaped?\n\n\"She's the Vampire Slayer.\"\n\n\"Buffy?\" Emma asked in surprise.\n\n\"That's her professional name. Her real name is Beatrice,\" I said as I carried the unconscious Slayer to my bedroom.\n\n\"Oh damn!\" Emma said, looking at me oddly. She then turned, stuck her head out the doorway and called down the hall, \"Martha! Pack your bags! I'm ready to visit your sister in Greece!\"\n\n\"You hate Greece,\" I frowned.\n\n\"True, but it's going to be safer there than here for a while,\" Emma said. \"You're got that look in your eyes and that's always dangerous.\"\n\n\"Really Emma?\" Martha said as she walked into my room. I smiled. She was the youngest of us at a mere fifty-three years old. Of course, she look somewhere in her mid twenties just like the rest of us.\n\n\"Yes dear,\" Emma smiled.\n\n\"Vlad, are you coming too?\" Martha asked.\n\n\"Maybe next trip.\"\n\n\"Who's that?\" she asked, seeing Beatrice in my bed.\n\n\"You don't want to know!\" Emma said. \"Just go pack your stuff. We're leaving tonight.\"\n\n\"Are you sure?\" I asked. \"You know how I get after I feed.\"\n\n\"Isn't that why you brought her home?\" Emma asked. I could never fool her.\n\n\"Don't you want to join us?\" I asked. Emma was a dynamo in bed. She was slowly teaching Martha all her tricks.\n\n\"Not likely,\" she snorted.\n\n\"Okay, then I guess you'd better take the private jet,\" I sighed. \"I'll miss you two.\"",
        "\"Call my cell when you're done,\" Emma said, pushing Martha out the door. She then grinned and added, \"Or after you've tamed her. I wouldn't mind trying a Slayer.\"\n\n\"I will,\" I smiled.\n\n\"If she doesn't kill you first.\"\n\n\"I'll call you tomorrow,\" I replied, ignoring her warning. Emma shrugged, gave me a quick kiss and then frowned briefly before disappearing. I checked Beatrice's bump as I heard Emma and Martha thumping around. They were gone rather quickly. \n\nI sat next to the Slayer and watched as the night sky grew lighter. Near dawn, I pulled the thick, dark drapes over the windows and changed the candles in the room. We had electricity, but I liked candles. They made a room seem so much warmer. \n\nIt was hours since I fed and I was still really horny. It must have been the Slayer blood. I convinced myself that Beatrice looked uncomfortable so I undid her clothes and began taking them off.\n\n\"What are you doing?\" Beatrice said groggily as I was unbuttoning her jeans.\n\n\"Just trying to make you comfortable,\" I replied, never stopping. I pulled her pants off. She blinked hard a couple of time while I removed her panties.\n\n\"Hey!\" she said, obviously coming more awake. \"What's going on here? I thought you said you'd let me go!\"\n\n\"I did,\" I replied. \"And you proceeded to faint and bump your head on the ground. I had to bring you back here and my housemates abandoned me out of fear.\"\n\n\"Now what are you doing!\" she cried as I started pulling off my own clothes.\n\n\"Trying to make myself comfortable,\" I laughed.\n\n\"I am not sleeping with you! You're Dracula!\"\n\n\"Yes you are,\" I replied calmly. \"You'll have to take the place of Emma and Martha. I hope you're up for it. If it makes you feel any better, just call me Angel.\"\n\n\"But...\" she began. I cut her off.\n\n\"I can sometimes read minds,\" I blatantly lied. \"You want this as much as I do.\"\n\n\"I do not!\" she cried, but she was blushing. I crawled into bed with her and pulled her lips to mine. She fought as first, but it didn't last very long.\n\n\"Oh Angel!\" she panted. \"I've always dreamed of meeting you! Why should that actress get all the fun?\"\n\n\"I love you Buffy!\" I said, deciding to play along. She smiled despite the fact that she had to know I was lying. \n\n\"And I love you too! Now take me!\" she cried, opening her legs wide. \"It's been so long since I had a new lover!\" I smiled and got between her legs. Instead of pushing in I leaned forward and buried my face in her pussy. She quickly became soaked. Her pussy was like a furnace in no time at all. Unable to resist, I bit into her thigh and tasted her blood once again. It was just as stimulating as the night before!\n\n\"Hey!\" she cried. \"None of that! You already drained me! You keep that up and I'll pass out again!\"\n\n\"I don't want that!\" I smiled, showing my blood-tinged bicuspids. Beatrice surprised me by groaning.\n\n\"Come up here! Now!\" she demanded. I shrugged to myself and moved up. My cock was damn near raging with the power of her blood! I put the head of my dick into her pussy and pushed in with one stroke. \"Not so fast!\"\n\nI ignored her cry and started fucking. I was too horny to be patient. Thankfully, she was just as bad! She had her hands on my ass pulling me deep with every stroke.\n\n\"Oh Spike!\" she cried suddenly. \"Now I know where you got your nickname from!\"\n\n\"Are you supposed to be Buffy or Faith now?\" I teased.\n\n\"Well, Faith is more wild in bed,\" she grinned.\n\n\"Faith it is!\" I laughed, picking up the pace. Beatrice moaned happily. We were both sweating badly by now. I attempted a bad English accent and added, \"Come on Love! I always knew you'd be a better lay than that stuck up bitch Buffy!\"\n\n\"Oh Spike! Give it to me! Fill me with your cum!\"\n\n\"Only if you beg me to, Buffy!\" I said, changing our shared fantasy once more.\n\n\"Oh Angel! Please come in me!\" she said, doing her own fair share of changing.\n\n\"Buffy, you know I'd do anything for you!\" I said, trying to play Angel. \"But if I cum in you I'll be a demon again!\"\n\n\"I don't care!\" Beatrice cried, biting at my shoulder. She was still stronger than an average woman even with most of her power drained by my earlier drinking. Her bites actually hurt, but only in a good way! I was a fast healer after all!\n\n\"Beatrice, I'm close!\" I gasped.\n\n\"Me too Vlad!\" she said, both of us no longer pretending. \"Please let go! I want to feel you cum in me!\"\n\nI kissed her and started fucking as fast as I could. My teeth grazed her lips and cut them slightly, but Beatrice didn't stop kissing me. I hunched up and slammed into her one last time so hard that the bed broke! It didn't matter. We were both too busy cumming to care!\n\n\"That was incredible!\" I said as we lay side by side panting, trying to recover.\n\n\"Yes, it was,\" Beatrice sighed. She then kissed me and added, \"Thank you.\"\n\n\"Thank you,\" I grinned. We lay like that for a while. I didn't sleep very much normally, but I was close when I felt the bed shift. Beatrice was getting up quietly. I sighed, opened my eyes and said, \"You needn't sneak away. You can leave at anytime.\"\n\n\"Thanks, Vlad,\" she said. \"But that only makes doing this harder.\"\n\n\"What?\" I asked with a frown.\n\n\"This!\" she cried, pulling the drapes away from the window and letting the sun come it. I raised my hands and blocked my eyes. \"I'm so sorry!\" she cried.\n\n\"No need,\" I said as I stood and looked out the window.\n\n\"But...how...you can't...\" she said, not making sense. I took her into my arms and gave her one last kiss.\n\n\"Beatrice, do you really think I'd have untreated windows in this day and age?\" I asked. She looked around desperately. I guessed what she was thinking and quickly added, \"Please don't break my furniture trying to smash the glass. It's bullet proof and quite a number of other proofs. All you'll end up doing is breaking my antique furniture.\"\n\n\"I'm doomed!\" she cried. I shook my head and sighed loudly.\n\n\"You are not doomed,\" I insisted. \"Why don't you get dressed and I'll drop you home. I'm sure someone will be worrying about you by now.\"\n\nBeatrice moved as if she kept expecting a trap. I drove her where she directed and let her off between two buildings that blocked the sun, just in case she was going to trying something stupid again. Thankfully, she was still weak.\n\n\"You can't let me go,\" she insisted as I opened the door for her. \"I'm the Vampire Slayer! I know where you live!\"\n\n\"Yes,\" I nodded. \"And when you're in the mood, feel free to visit me again. There are still so many things left for us to explore.\"\n\n\"You're serious?\"\n\n\"Of course,\" I shrugged. \"I'll be your Angel or Spike or anyone else you desire.\"\n\n\"Even Riley?\" she asked. I rolled my eyes.\n\n\"Yes, even Riley,\" I said. \"Just as long as you be my Buffy or Faith. Maybe even Willow once in a while.\"\n\n\"Oh no!\" she said earnestly. \"Even I won't play such a slut!\"\n\n\"She wasn't that bad,\" I laughed.\n\n\"Maybe not the television version, but the real one is a real nymphomaniac!\"\n\n\"Hmm, interesting,\" I said. \"I can't wait to meet her.\"\n\n\"Meet her?\" Beatrice asked.\n\n\"I'm sure you'll be bringing her and the rest of the Scoobies when you assault my mansion,\" I grinned. She didn't bother to deny it.\n\n\"Why are you doing this?\" she asked.\n\n\"I like you,\" I shrugged. \"Besides, life gets boring without it's little challenges.\"\n\n\"One of us is going to die the next time we meet,\" she said in a somber voice.\n\n\"They say a woman's orgasm is like a small death,\" I joked.\n\n\"Will you please be serious!\" she snapped. \"I'm feeling terrible about what I'm going to have to do. You've been kind to me other than the blood drinking.\"\n\n\"You liked that too,\" I said knowingly.\n\n\"Look, just consider yourself warned,\" she said sounding flustered.\n\n\"Done,\" I said seriously. \"Be sure not to come on Friday. I'll be out of town and I'd hate to miss you and your friends.\"\n\n\"You don't sound worried at all,\" Beatrice frowned.\n\n\"Actually, I'm petrified. I just hide it well,\" I joked. Beatrice gave me one last look before turning and walking away. I was already driving away when she left the alley. It wouldn't do to get caught unaware. I drove home with a smile on my face. My phone rang when I was almost there.\n\n\"Hello?\" I said. \"Emma! I was going to call you later.\" I sat listening for a moment. \"No, actually everything went well enough.\" Again, I listened. I finally sighed and added, \"I know you hate Greece and aren't particularly fond of Martha's sister, but it's not really safe to come home yet.\" I pulled into my driveway and parked the car. \"\n\nWhy? Well, because I'm expecting the Slayer and her friends to attack in the next day or two.\"\n\nI had to hold the phone away from my ear while Emma yelled. She was a sweet girl, but her nagging could get old after one hundred and fifty years.\n\n\"I know, I know,\" I sighed. \"I'll be careful. Just be ready to return when I call. I think you and Beatrice will be good friends once things settle down.\" I nodded to myself as Emma finished her half of the conversation. \"Yes, I'm sure she'll be willing to let you taste her blood. It really is amazing!\"\n\nI hung up the phone and started walking around the house. I'd need to call the cleaners in tomorrow. The place was in decent shape, but I hadn't had a party in years. I couldn't wait until Beatrice and her friends showed up."
    ],
    "authorname": "JoeDreamer",
    "tags": [
        "humor",
        "vampire"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/the-real-buffy-ch-01"
}
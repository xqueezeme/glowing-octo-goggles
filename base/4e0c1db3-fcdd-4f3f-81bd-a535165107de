{
    "title": "Ashley's Tale - Demon's World 06",
    "pages": [
        "Chapter 21\n\nThe President said in shock, \"The missiles are gone! And what is that your showing me, where is that? We still had seven minutes.\"\n\nI sighed and said, \"I destroyed four of them, the fifth was the response you ordered. Through that portal is the capitol city in the Elven dimension.\"\n\nI started to wonder if I broke myself. I was expecting the numbness I had felt at killing a handful. I had potentially just killed millions, yet all I felt was that towering rage. Fucking Elves.\n\nWhen the President was silent for a minute or two I looked over, he was looking at me in shock. I closed the portal, figuring I had enough footage.\n\nI said softly, \"Sorry sir, we haven't been too forward on how much power Witches actually have. Actually what I did wasn't that hard, it was the ability to speed up our perception of events that allowed me to move so quickly, or in another perspective, slow down the missiles enough to destroy them. You know we can control gravity, I just crushed the charges out of alignment to cause a normal explosion.\"\n\nI sighed, \"The last one was simply a matter of opening a portal right in front of it.\"\n\nHe nodded soberly. \"I need to step down our readiness and call some world leaders. I assume you got that footage for the news?\"\n\nI slowly nodded, \"We are probably their only intelligence source, if we don't show them what they caused by not following our demands, they might not find out.\"\n\nHe cleared his throat meaningfully. I guess I lost my right to a thank you by nuking a city, even if the man had given the order. He was probably just a little to freaked out, I know I was.\n\nI sent the video to Karen as I opened a portal to the condo and stepped through. I had no interest in making threats, or answering questions, I would let the video it speak for itself. The message couldn't be any clearer.\n\nI couldn't look anyone in the face, so I jumped in the shower. It's not every day you both save your world, and commit an atrocity, in a string bikini full of sand...\n\nWhen I came out I grabbed a beer, I wasn't going to get drunk again, I just needed one to relax a little. Was I even allowed to say I was a Witch that loved life after what I did? The fact I had saved many millions of lives didn't seem nearly as important at the moment. Once again, the ball was in their court. I just had to hope I wouldn't be forced to do anything like that again.\n\nI stayed in the background the best I could for the rest of the day. I didn't want to mess up everyone else's day. It was around nine at night when I took Harmon home, I gave him a wistful kiss on the cheek, some first date this turned out to be.\n\nHe said as I moved to leave, \"It is never easy making a decision like that. All you can do is save as many lives as you can, sometimes that makes you make hard choices. Don't let it make you a hard person, you are a wonderful woman Ash, it would sadden me if that were to change.\"\n\nI nodded. I knew he meant well, but his words angered me. I didn't want to be responsible for the whole damn world, and make decisions to attack others. With my new enchantment active, I opened a double portal to the condo and stepped through, turning off the enchantment with a thought collapsed the portal.\n\nWe talked briefly about Harmon, they all liked him as I thought, as I hoped, they would. But this news brought me no joy at the moment. I decided I needed to meditate on everything tomorrow, the one fear I had above all, was that with my full power I would become a monster, misuse it. I couldn't help but wonder if that's exactly what happened. \n\nI knew it was all mixed up, without that power millions would have died on my world. If I hadn't done it, then next time they would have no reason not to launch a lot more, or do something worse.\n\nThat night was one of the few in my life I didn't want sex at all, Bonnie and Tom held me as I fell asleep, as I wondered why I couldn't cry...\n\nIt was Sunday, so I slept in and had a late breakfast and drank a cup of coffee. The anger had slipped away while I rested, now I just felt depressed. Logically I had to do what I did. This wasn't like in the Demon dimension where I could easily overpower and banish the people challenging me. I didn't feel guilty for not finding a peaceful solution, there didn't appear to be one.\n\nI started meditating on it, but didn't come up with much outside of what I already knew. It was both horrific and necessary. I regretted it, but I wouldn't change it even if I could. They had tried to kill millions with five nuclear missiles, we had responded by sending just one of them to their world. I wasn't by any means happy with it, but I knew I would eventually come to terms with it, and continue living my life.\n\nIf only there was some way to track them down, we could have done things differently. But there was almost no point in playing the what if game. What was, was.\n\n\"Ash?\"\n\nI sent, \"Hi Harmon, what's up?\"\n\n\"I wanted to ask you to dinner tonight, for our date. Also, could you let the others know I want to see them too for our dates? Tom told me about it yesterday, but I have no way to contact them.\"\n\nI frowned, \"That won't work well long term, I'll make necklaces for the other three and they can contact you. That way I will only have to play taxi and not messenger.\"\n\nHis sent sounding amused, \"Good idea. So I will see you tonight?\"\n\nI pondered that, I was a little worried about leaving the dimension, but I could make the necklaces now and have them contact me if the crap hit the fan.\n\nI sent, \"Sounds good, I'll see you tonight then.\"\n\nHe told me to take care, and I got started on three more necklaces. I felt Bonnie's presence as I was finishing them up and opened my eyes and looked up at her. She had a shy smile on her face.\n\n\"Want to go shopping with me?\"\n\nI smiled back, wondering why she was feeling shy and nervous, but said, \"Sure, take this necklace, you'll be able to chat with Harmon on it, not to mention the rest of us, if you ever need us quickly.\"\n\nI convinced her to stop by the healing center on the way, and gave the other two to Tom and Gloria with some instructions on how to use them. Then I followed Bonnie to the store. I had expected clothing, or shoes, and understood her feelings as we walked into the sex toy shop. I already had a lot of toys, and was confused for a moment until I saw the things she picked out.\n\nI really didn't have anything in my toy box for bondage or spanking. I could guess by her feelings I was here to object if there was anything I was unwilling to do. We left with an assortment of things, nothing that would cause too much pain, I think the thrill for her was mostly the idea of control, and I was more than happy to play pet to her mistress anytime.\n\nWe stopped for lunch on the way back, I wasn't that hungry from my late breakfast, but I got a salad and soda. Bonnie was a wonder, we didn't talk about the nuke, or the Elves, she just drew me out and drowned me in the everyday. We left the restaurant and headed back home, when I went up the stairs I started feeling emotions, and the flavor was familiar to me, I knew them well. Too well in my opinion.\n\n\"Ma'am, would you come with us, we need your help.\"\n\nI sighed, kissed Bonnie briefly on the cheek and then followed my two favorite homeland security agents down the stairs. When we got in the car they briefed me on the way over to the building.\n\n\"Those Elves have been showing up at our building since four am, one of them told us all that were coming were there now, so we came to get you. I can't say it hasn't been tense, but as far as we can tell they haven't done anything, they appear to be clear of any devices or weapons as well, but I can't know if our searches were effective. Damn nightmare these Elves are.\"\n\nA ball of anger grew in my stomach, but I did the best I could to push it down. Yes, they made me a mass murderer... killer really, since they declared war on us of a sorts, but still. I managed to keep a hold of my emotions however since this is what we wanted, what we were hoping for.\n\nThey led me down to a room that looked like it belonged in a college, it was more of a lecture hall. As I walked in one of the Elves approached me. I didn't bother with pleasantries.\n\n\"Is this all of you?\"\n\nHe said in an inflection without emotion, \"In America yes, the agents have coordinates for you for Russia, China, Africa, and South America. There are also... hold outs.\"\n\n\"Hold outs?\" What the hell?\n\nHe almost looked embarrassed, \"When you first aired that broadcast, many of us wanted to leave but were overruled; they thought it was a bluff. There are still twenty three Elves that think you are bluffing about the bomb in our dimension, despite the fact you have accurate pictures of it. There are over five hundred of us at the sites, but still, you will need to hunt down the last twenty three.\"\n\nOh right, he says that like it will be easy. This one was four feet away and I still couldn't feel him with my extra senses or magic. Oh, I could feel his life force with my Witch magic, but unless touching I couldn't feel his DNA, just life.\n\nHe asked, \"Where will you send us?\"\n\nI sighed. I didn't really see a reason not to let them go home, we were shielded now. So were they once upon a time though.\n\n\"I can either send you back home, or send you where we banished the three tribes, which is a world filled with life, but nothing intelligent. Except maybe eight very angry ex Rulers or wanna be Demon Rulers. But I'm sure you can handle them.\"\n\nHe asked politely, \"If you would, we prefer the banishment planet? We would be executed at home for failing so badly in our mission. We felt the only way to redeem ourselves was to give in to your demands in the hopes you keep your word and that our people will be safe.\"\n\nI raised an eyebrow and asked, \"You would trust us to keep our word? Why did you not seek peace then?\"\n\nHis lip curled, \"Witches we have found to be trustworthy, and respectful of life. It is you we trust. The humans we would never trust, not that some individuals are not worth trusting, but as a group your governments can be ruthless, plus things change over time. As far as seeking out peace, it was not our orders.\"\n\nI nodded and couldn't really think of anything else to ask. Except where the twenty three were, but I didn't think they would be willing to betray them in that way, just a feeling.\n\nOh, there was one more thing, \"Is what you did to those Angels and Demons permanent, will they always be crazy arsonists now?\"\n\nHe shook his head, \"Their normal thought patterns should reestablish themselves over a few weeks time. I'd suggest you hold them until then.\"\n\nRight, that shouldn't be an issue. It would be harder to get them released than anything else.\n\nI turned on my enchantment and opened a double portal to the banishment world and the Elves started going through...\n\n\u2003\n\nChapter 22\n\nThe two goons... homeland security agents, gave me the coordinates for the other four places. It took a good chunk of the afternoon to get it finished up. I went to send what I just did and learned, to Cat and my mom, but I couldn't connect. They must have been hopping dimensions. I wondered what the twenty three Elves left were getting up to, but right now we were in a purely reactive stance.\n\nI jumped in the shower and started getting ready for my date. I chose my slinky little black dress, and accessorized with bright red pumps and ruby earrings. I put my hair up in style and made my nails a nice red tone. As for my lingerie, I passed on them all together.\n\nI kissed Bonnie and Tom goodbye, and then opened a double portal to the field, then a portal directly to his dining room. He smiled and got up. His eyes caressed over the length of my body slowly until he met my eyes.\n\n\"You look amazing Ash.\"\n\nI said, \"Thanks,\" as he kissed my cheek then led me to the table. I was getting the full treatment tonight, he even pushed my chair in. It was not a Demon or Angel thing, and I wondered just how good his spies were before we closed off the worlds to travel. Well, except for us anyway.\n\nEither way, I was flattered by the effort.\n\nBusiness as a subject was almost unavoidable, I let him in on my progress and what was going on, and he went over how the Demons were reacting to being jailed. Not that badly according to him, there were a few more challenges lately, but the most affected by the lockdown were the ones craving power and their own demesne. Most of the other Demons didn't really care, as it didn't change their lives one bit.\n\nAfter a while we transitioned into more personal things. As the night went on, my need of him grew. He was older, but still quite handsome. His strength and power as a Demon-Angel offset by his personality, and the obvious affection he had for me made me quiver inside. He had his affairs over the millennia of course, but I didn't think any of them appealed to his Angel side like the Witch in me did.\n\nBy the time we finished our multiple course dinner I was more than ready to say yes when he asked if I would join him in his room. Hell, I'd have said yes if he invited me to lie on the dinner table. He took my hand as we walked through the halls of his palace, I squeezed his hand gently and caressed his palm slowly with my thumb. I had a ball of anticipation in my stomach. When we got to his room he pulled me to him and wrapped me in his strong arms.\n\nI sighed in pleasure as our lips met, this time with no inclination to push him away. I melded my body against his as he deepened our kiss, his tongue licking along my lips, darting into my mouth as I parted them slightly. I could feel his large bulge growing against my stomach and I ground my body against his, rubbing my hands on his powerful chest. I moaned into his mouth as his hands left my back and grabbed my ass tightly, pulling me against him.\n\nHe whispered, \"You are the most amazing and beautiful creature,\" before he started to kiss and suck on my neck while he unzipped my dress. \n\nI stepped backward slightly and the dress slowly slipped off my body into a pile on the floor. He lifted me up and I wrapped my legs around him. He was still kissing my neck and I mewled in pleasure as he carried me to the bed. He sat me down on it, then ran his hands around my hips and down either side of one of my legs, before slipping off my high heeled shoe and bringing my foot to his mouth, he kissed my toes.\n\nMy core tightened as he did the same for my second leg. He stared hungrily down at my now naked body, then slowly brought his gaze back to my eyes as he started taking off his clothes. I was beyond ready and would have done anything he asked of me at that moment.\n\nI couldn't help but glance down as he freed his tool, he was large. Not grotesquely so, but he gave Tom's nine inches a run for its money. When he finished undressing, he lifted my foot again and kissed it once before putting it on his shoulder, he did the same with the second, then pulled me to the edge of the bed as he stepped forward.\n\nI gasped in pleasure as he slowly fed his length into my willing and welcoming body. He started to rock in and out slowly, all I could really do was rock my hips slightly up, otherwise I couldn't move much. He held my legs tightly with his arms, but teasingly ran soft circles with his fingertips down my inner thighs. I was almost frustrated that I could not touch him with my hands, but my body surrendered to his invasion and touch.\n\nWhen his hands finally made it to my middle he separated my hood and started fingering my swollen clit lightly. I exploded in bliss as my center started to milk demandingly on his hard pole, but he just picked up speed slightly, the slap of our flesh growing a little louder as he continued to flick my clit. I could feel his pleasure as he held it back, and I could feel his pleasure and satisfaction at mine.\n\nI gasped loudly, \"Oh god, faster, that feels incredible.\"\n\nHe pushed me to ecstasy over and over, finally releasing within me during my fourth trip to heaven. \n\nHis voice sounded strained, \"I can't hold much longer!\"\n\nI wrapped my power around his, and increased his bliss and mine, tying them together as he filled me with his seed. As we came down he pulled out, and then joined me on the bed.\n\nI said sheepishly, \"Sorry about that.\"\n\nHe laughed. \"Sorry? About what?\"\n\nI shrugged, \"I felt it, that second of fear when I reached for you with my succubus power. I should have realized that's been a worry for you for a long time.\"\n\nHe shrugged. \"It took me by surprise, I never met one that would connect that way except to feed, or kill. Still, feel free to do what you just did as much as you want.\"\n\nI giggled. \"Anytime,\" and I kissed him hard and passionately, then got softer as the kiss went on, until we were barely brushing lips, \"How about now? Unless you're too old, you probably need your rest,\" I said teasingly.\n\nI sighed in mock disappointment.\n\nHe growled. \"I'll show you too old.\"\n\nAnd he did, multiple times, and very well.\n\nI wanted to curl up against him with my head on his chest and stay the night, but it was our first date and there were rules attached to that. He still had four other dates to get through. Although I had a feeling Tom and his date will be some sporting event involving lots of beer.\n\nI kissed him good night, shimmied into my dress, picked up my high heels and opened a double portal straight to the condo.\n\nI tried to reach mom or Cat again, but no luck. I was starting to get worried and was angry at myself for not teaching them the dimensional communications necklace. What if they were in trouble? I shuddered, trying to think of what could take out both Cat and my mom and failing to think of something, except of course, the element of surprise.\n\nThere wasn't much I could do about it, so I went to bed, I had work early in the morning...\n\n\"PRICE!\"\n\nI walked over and poked my head in, \"Yes captain?\"\n\nHe said without looking up, \"Billy Sanders has a new group of raw trainees, wants you to stop by at nine. Take your partner with you and hit your beat right after, understand?\"\n\nI smiled, \"Yes sir.\"\n\nTodd and I headed for the training facility. I hadn't seen Billy since the last time he called me to kick his class's butt. It was a good training tool, make sure they wouldn't do anything stupid in the field. We headed inside and went to the martial arts training room. I waved to Billy and he smiled back and nodded.\n\nBilly then went through his usual speech, don't try hand to hand with non-human races under any circumstance, and pointed me out as the one to prove it. It went predictably, and I didn't mess around this time, just took them down fast and hard. The point was to prove it was a bad idea, not make them think they could just learn more to compensate. That's what stunners and the Demon and Angel partners were for.\n\nThen something happened, a small slip of a girl blocked my attack, then another. She was about an inch taller than me, jet black hair and gray eyes. She even almost got a hit on me, she slipped under my guard with a jab but I moved out of the way. I had to embrace my Witch magic to slow things down, then I took her down hard. Still, just my Demon speed should have done it, it wasn't that she was fast, she just moved to block before I had even started my swing.\n\nI read her quickly and my mouth dropped open in shock. She was an unrealized Witch. It happened sometimes, if a Witch was raised in child care for some reason, like the mother dying, which is rare, but it happens of course. No one was there to release her power when it was ready.\n\nShe was like my mother had been, her power hadn't been released but she was bursting with it at the seams, she had kept up for a moment because of that. Probably a little time slowing and perhaps reading the immediate future. I put a hook in her so I could find her later, now certainly wasn't the time to tell her any of that. I finished with the rest of the class, and was getting glared at now by all of them. They would get over it, and maybe I even saved one of their lives.",
        "I found out her name was Amanda Darnell. I felt a little guilty as I checked out her record, she was adopted when she was five, again much like my mother. She was only barely eighteen, had graduated high school two years early and had her bachelor degree in crime. She put in her application on her birthday. I also noted her address was out on Long Island.\n\nNothing I could do about it now, so I grabbed Todd and we hit our patrol area.\n\nBy lunch not much had happened, then I got contacted by Gloria during lunch.\n\n\"Ash?\"\n\nI sent back, \"Hi Gloria, everything okay?\"\n\n\"Have you seen the news? Five world leaders have been killed, one in Europe, the rest in South Africa.\"\n\nOh crap. That's so not good.\n\n\"Do you know when it happened?\"\n\nShe sent back, \"Hours ago, you know they hold this stuff back for a while, just thought you would want to know.\"\n\n\"Thanks Gloria.\"\n\nAfter a few seconds Gloria sent, \"Oh, could you get me to Harmon tonight? And pick me up when I call? We have our date tonight.\"\n\nI sent back, \"Sure, can do, what time?\"\n\n\"Around seven, I'll be at the condo when I get off.\"\n\nWell, wasn't much I could do, there was no way could I catch them if they had hours to leave the scenes of their assassinations. I was glad they had backed off from the nuke idea, perhaps they weren't as sure it was a bluff as they professed after all. They seemed to be going back to their destabilization tactics, though much worse than before.\n\nThe rest of the day I went over and over things, I couldn't see a way I could track them down, not without help and immediate reports if something happened anyway. I doubted that would happen. When we knocked off work we went to the bar again, this time I didn't get drunk. This time I didn't have anything eating away at me. Stress yes, but no guilt.\n\nI wasn't sure if I was in denial, or if I had really come to terms with sending a nuke across dimensions, but there it was. I felt okay with things. Perhaps it helped that those assholes were still trying to destroy the world with their twenty three person force.\n\nI had the thought that they deserved to be jailed just as much as the Demons, if not more so. It made me kind of sad, I wondered is that all the multi-verse comes down to? People and races striking out against each other in fear? Then I remembered all the races my mom and Cat had met with over the last few weeks, and I realized it was just that the assholes who want to kill us are just that much more noticeable.\n\nIf I cheated I was sure we could have won, but since I suck at pool without magical help, Todd and I wound up buying most of the rounds for Kim and Bonnie. I left the bar right before seven, I had to play taxi in a few minutes. I told Bonnie I had something to do, so she stayed at the bar with Todd and Kim.\n\nI just went into the ladies room and opened a portal to the condo and stepped through. Gloria was there and she looked stunning. I gave her a light kiss on the lips. \"Ready?\"\n\nShe nodded, and I opened a double portal to the field, after we went through I took her to the dining hall. Then I took a double portal back to the condo. I started to wonder if I could enchant something that would let me go wherever I wanted in one hop. It was easy with my new enchantment to go from anyplace, but I still couldn't go anywhere that wasn't enchanted to block the gravity waves. At least, not in one step.\n\nI went ahead and took off my uncomfortable and dull work clothes and put on a pair of jean shorts and a tight red shirt. I slipped my feet in a pair of sandals. Much better. Amanda lived in Wantagh, so I opened a portal to the train platform on the LIRR, the only destination I knew in that area. Her house was just a mile from there, and it was a nice neighborhood, so I just started walking.\n\nHer house was kind of nice, and I was sure she was home, thanks to the magical hook I'd put in her earlier. I knocked on the front door, and an older woman answered that was probably her adoptive mother.\n\nI opened my mouth to ask after Amanda, but I was cut off by the fear on her face.\n\n\"You're that Witch from the television! What are you doing at my house, leave now, we don't like your kind,\" and she slammed the door in my face.\n\nI breathed out a quick sigh. That would complicate things. How do you go about telling your racist adoptive mother that you're a Witch. I frowned, what if Amanda was prejudice too? I shook my head, no reason to borrow trouble, I already had plenty of it.\n\nI shrugged, turned around, and started walking for a bar I saw by the train station, and sent a message even an unrealized Witch could receive. Of course she had no way to talk back, I just had to hope she would listen and come.\n\n\"Amanda, this is Ashley from this morning in your training class. We need to talk, and it's very important. Can you meet me at the bar by the train station? I think I scared your mom, so I decided to retreat, but we really need to talk.\"\n\nI sat at the bar and ordered a beer as I waited...\n\n\u2003\n\nChapter 23\n\nA soft voice filled with amusement said behind me, \"Are you trying to corrupt a minor officer Price? Inviting me down to a bar and all...\"\n\nI finished the last few sips of my beer and turned with a smile on my face. \"Corrupting you sounds like fun, maybe another time though. Will you come with me for a little while? This isn't the best venue for our chat I think.\"\n\nShe looked at me curiously and nodded. I led her outside and through a portal to beach in Hawaii, it was about two thirty in the afternoon and the sun felt good. She had a concerned look on her face and I asked, \"How do you feel about Witches, I couldn't help but notice your mother...\" I trailed off.\n\nShe shrugged. \"I don't know, I haven't given it much thought, why did you bring me here?\"\n\nI pulled a seed from my pocket and quick grew it into a flower in full bloom and handed it to her, \"To show you just a little what it means to be a Witch.\"\n\nShe walked along the beach next to me silently, then asked in a low voice, \"Why would you want to show me?\"\n\nI turned and looked right at her, and said, \"You know, Witches are human, they are born with their power locked up, unrealized. At a certain age, when a mother is sure their daughter can handle it, the magic is released. Sometimes though, very rarely, a child of a Witch loses their parents, and goes into the foster system. Those young Witches stay unrealized, unless they are recognized at some point.\"\n\nShe shook her head at me in denial, so I said, \"But even unrealized, the power can bleed through, like knowing where a punch is coming from before its thrown, or having an eidetic memory and graduating school two years early. Perhaps you have even had the feeling that everything around you is moving just a little slower than you are at times.\"\n\nHer voice sounded strained and close to panic, \"But I want to be a cop, and I don't want my mom to hate me. It has to be a mistake.\"\n\nI said softly, \"As for the first, you can still be a cop on the taskforce. I can't really help you on the second one. Amanda, it is your choice, no one, least of all me, would force you to release your power. But you could do a lot more with it, than without, as far as helping people. But you will always be different, even if you don't realize your power. I know you know what I mean. You have stood out your whole life.\n\n\"Do you want a bee... soda?\"\n\nI let her think things over as we found a drink vendor and got some drinks. I considered showing her other applications of power, but I didn't want to oversell it, or scare the wits out of her.\n\nAmanda asked, \"If I said yes, how would I learn? Would you teach me?\"\n\n\"Partly, I would be happy to. I know a couple of other Witches that would get involved as well, including my mom. My mom was in the same situation, she was actually a few years older, in a post graduate program when she found out what she was.\"\n\n\"Can I think about it? This is kind of big, you know?\"\n\nI smiled, understatement. \"Of course, you ready to go home?\"\n\nShe nodded.\n\nI gave her my number so she could call and promised not to nag her... much, and opened a portal to her front lawn. When she stepped through I closed it and opened another to the condo and stepped through.\n\nI giggled and squirmed as Tom grabbed me from behind and bent me over the couch. I playfully tried to get away until he smacked my ass hard.\n\n\"Be a good slut and be still.\"\n\nI couldn't resist pushing back against his hardening member and grinding myself against him one more time. I gasped in pleasure as he spanked my other cheek. He pulled my shorts down forcefully and started taking me from behind while pulling back hard on my hair. It was a fast and furious kind of fuck, and I started bucking hard back against him as he drove into me. I felt his pleasure as he expanded and shot into me making me reach my own bliss.\n\n\"Oh god Tom, fill me!\" I mewled and whimpered in pleasure.\n\nAfter that, we spent a while in the bedroom and right as I was about to fall asleep in his arms, I was called for taxi service.\n\n\"Ash, can you come get me?\"\n\nI got up and put on a robe while I sent back, \"Be right there Gloria.\"\n\nI did my three hops, returning with a very happy Angel holding my hand. She decided to stay the night here, so I took my robe off and we got into bed with Tom. Right as I lay my head back down, I felt an inter-dimensional portal open in my living room. Sighing with annoyance, I got up, put on the robe and stomped out with a frown... that turned into a relieved smile as I saw both Cat and my mom.\n\nThe third person though, was quite a shock. It was that Felesian leader guy that picked up the cat slaves back on the Demon dimension. I sat down on the couch.\n\n\"Welcome back, umm, what's going on?\"\n\n\"Hello Leader, it is nice to see you again.\"\n\nOh crap, the cats are telepathic?\n\n\"Indeed, though I hid it on the Demon world, lest your surprise ruin your plan to help return our people. I knew what you were immediately of course, and went along with things. I thank you for your kindness in returning our people.\"\n\nCat was smiling like the cat that got the cream, it was my mother that finally explained.\n\n\"The Angels were no help, they can't help us locate the Elves, so Cat and I started looking for a race that could. At first the Felesians were wary of us, until this one recognized us in you, and opened a dialogue. They can't manipulate others with their minds, but they are far stronger readers and mind voice senders than the Elves, they can help us track them down.\"\n\nI went over what happened briefly, saying there were only twenty three left. Then I asked the Felesian why he was helping us, I was a bit wary. He didn't seem offended, he merely answered.\n\n\"I agreed to discuss it with your mother and den mother, because of your kindness. As far as a price, I was not joking about Demons destroying our old dimension, your den mother has volunteered to block our dimension if we help you with your Elf problem.\"\n\nDen mother? Oh, Cat, Witch elder or leader, got it. I nodded slowly. I also told mom I found another unrealized Witch, and she was thinking about having her power released. I didn't see any reason to hide anything, I had a feeling the Felesian already knew my whole life story. I also mentioned the Elves turned to assassinating world leaders while they were gone. Then I asked what we had to do, I assumed they had a plan of some sort. Did I leave anything out?\n\n\"Oh right, I'm also dating the leader of the Demon dimension.\"\n\nI got a good giggle out of mom's response. Talk about bringing home the bad boy. I knew she would be fine when she got to know him, I was just enjoying the shock value a little too much. I realized my comments had been disordered and stuff, but I was really tired and wanted to go back to bed, feeling a little scatterbrained. Plus, I was still shocked there was another telepathic race, and I actually knew them already.\n\nCat nodded toward the... cat. Then said, \"He will locate and send us a mind picture of where an Elf is and we will portal there and get him. The Felesian will stay here in safety though, he is just here to help locate.\"\n\nWow, he could scan the whole world, they weren't kidding about the more powerful part. I sighed in resignation as I used power to refresh my mind and make me feel well rested, something I had put off in the hopes of returning to bed, another sleepless night was coming.\n\n\"Just let me go change quick and we can get started.\"\n\nI just put on the jean shorts and shirt from earlier and went back out into the living room. I also grumpily gave the necklaces I had made to Cat and mom.\n\nCat asked, \"What's this?\"\n\n\"I got sorta nervous and worried when you were both gone so long. Now you have no excuse not to check in.\"\n\nMom studied it for a second then smiled, \"They are like mine, but work over dimensions? That's great. Sorry for worrying you, the Felesians were wary at first, we didn't want to leave and come back.\"\n\nThe Felesian, who still wouldn't give me his name, fed us intel and pictures good enough we could portal to. The first four Elves didn't see us coming and were overwhelmed quickly and banished. After that, things got a bit difficult, even apart they could keep in constant communication. They last nineteen were either ready for us, or on the move.\n\nIt took us a long time to round them up, we probably caused a number of international incidents as well, a few of them collected a bunch of police and controlled them enough to fight us, badly, but the problem was they were both a distraction, and innocent. Bystanders couldn't see the Elves of course, so all they saw was three Witches appearing and attacking their local police force.\n\nIt was a damn mess. I hoped we could straighten it out with the President's help.\n\nCat went back with the Felesian when we were finished. I could hardly believe it, no more Elves. I felt a weight drop off my shoulders. My mom said she would handle the press and the President and try and smooth things over. It was about five am, so I shrugged and started a pot of coffee. I was too wired to sleep, and wouldn't really be tired until tonight anyway, after my magic recharge.\n\nI guess every good deed isn't punished, if I hadn't looked into freeing the Felesian slaves, and just pursued my own goals, the Elves would probably still be here. I don't know why, but I just started crying. It was a cathartic cry, and I felt my stomach unravel from the knots it had been in. When I ran out of tears, I took a sip of coffee, glad to just relax without anything to worry about, and then my phone rang.\n\nOf course it did...\n\nI answered and heard Amanda's voice, \"Will you help me?\" she sounded like she was crying.\n\n\"Where are you?\"\n\nShe said through tears, \"Out in front of my house.\"\n\nI opened a portal and stepped through. Oh hell, she had a suitcase.\n\n\"What happened? No, never mind that for now, come through.\" We stepped back through the open portal.\n\nI poured her a cup of coffee and we sat at the table. I hardly knew her, but she was a sister Witch, and there wasn't anything I wouldn't do, including airing out my second bedroom.\n\nShe said, \"I know it was dumb. But, I always tell my mom everything, and she always talks me through things. I know I shouldn't have told her...\" she shook her head miserably.\n\nShe continued, \"I was going to get an apartment in the city after the academy, the commute is hell on time from Long Island, but, I was thrown out of the house, and I can't afford one yet without a salary...\"\n\nI said softly, \"You can stay here if you want, although you might not approve some of my lifestyle choices.\"\n\nShe asked, \"Why would you do that?\"\n\nI shrugged. \"Witches are family Amanda, there aren't that many of us.\"\n\nShe narrowed her eyes, \"Even if I don't choose to release my power?\"\n\n\"No strings attached, I said it was your choice and I meant it. Although that doesn't mean I won't nag you on occasion,\" I smiled at her.\n\nI couldn't imagine what she was feeling, and I wasn't surprised when my attempt to cheer her up failed. Her emotions were all over the place.\n\nTom walked in, kissed the top of my head and said, \"Morning love, did you sleep?\"\n\nHe poured a cup of coffee and did a double take and said, \"Who's this?\"\n\nI said, \"Tom, meet Amanda, an unrealized Witch who needs a place to stay, Amanda, meet Tom, he is an Angel and healer, he is also my mate. One of them anyway.\"\n\nAmanda frowned, \"One of them?\"\n\n\"Yes, I'm half succubus, Demon, because of that I have two lifestyle choices. Polyamory, or just being a total slut with complete strangers. I prefer the first.\"\n\nShe asked curiously, \"How many?\"\n\nTom said, \"Oh, she's got two in the bag, and working on two more. Although it's more accurate to say we all have each other. It's not like she is dating four of us, we are all dating all of us.\"\n\nHer eyes widened a bit when Bonnie and Gloria came in wearing robes and kissed me on the cheek as they went for coffee. All I had to say was thank god I was the only one that wandered naked in the house, which would stop if Amanda stayed with us.\n\nAfter redoing the introductions I asked, \"So what do you think, or are you completely freaked out?\"\n\nHer emotions were still all over the place, but it was hard to tell if that was because of her hateful mom, or that and my living arrangements.\n\nShe raised her eyes at me and waggled them as she said suggestively, \"You did good Price, their all hot as hell.\"\n\nTom laughed and started choking on his coffee...\n\n\u2003\n\nChapter 24\n\nAmanda decided to move in, and she turned out to be quite humorous and open minded as we talked over breakfast. She is still devastated about her mother, but seemed to be trying to work through it. I was sure it would take a long time, but she would heal. We had her settled in the second bedroom before it was time for work.\n\nBefore we left, Tom pulled me aside and asked if I could enchant our bedroom to be soundproof, as some of our games and role play got very loud. I agreed to take care of it after work, I was also planning on doing one gravity wave enchantment a night for the rest of the week, then two on Saturday and Sunday.\n\nI wasn't sure how much good it would do, but I wanted to block the Elven dimension. Perhaps they already had Elves seeded all over, but this would prevent more of that, and some of those Elven scouts would eventually die out freeing their worlds from Elven influence all together. It wasn't perfect, but as a long term plan it was the best I had.\n\nI hoped they wouldn't be able to find and disable the enchantments, they were tiny, and space was big. I thought if they could find it, they would have killed me that night last week, instead of trying to force me to remove the enchantments for them. It was far from perfect or sure, but that is how life works, if they ever become a threat again, at least we know how to stop them now.\n\nWork was a slow day again, and though I knew the Elves weren't behind everything, I was curious about comparing last year's numbers to this next year, once it passed, to see how much the statistics changed. \n\nMy mother contacted me at lunch, the explanation of what we were doing, and the request from the president to dismiss the charges, had gotten us off the hook for most of what we did last night. Two of the countries refused to reconsider things, and didn't drop the charges against us. My mother, Cat, and I were still on the most wanted list in them.\n\nI snorted. That's gratitude for removing the invaders that wanted to destroy us? Nice... but I kind of saw it coming. No magic fixes for the real tensions between races; we just got rid of the Elves increasing those feelings through social sabotage.\n\nI took Bonnie to Harmon for their date after work, I was surprised he had convinced her to have it in the Demon dimension, but I wasn't going to argue. Then I sat down and enchanted my walls to be sound proof before I took care of the first enchantment for locking down the Elven dimension.",
        "When I came out of my two hour trance, Amanda started questioning me on what I'd done, and why, and what it was for. I could see she was intrigued by the explanation, and she left the kitchen with a thoughtful look on her face.\n\nWith Tom and Gloria at work, I watched movies with Amanda until late. I had to go pick up Bonnie when she called, and I could tell she was a convert and onboard with adding Harmon to our group. At least, for the next stage of our relationship with him.\n\nThe next day at work, we actually did have to make an arrest. Now that people started to get back into their normal lives, with the imminent threat of the Elves gone, the bad had come back with the good. After work I picked up Harmon, he had cleared his evening to do something with Tom. They had seemed to start a friendship at the beach, so I wasn't too worried that would change.\n\nAfter I did my enchantment for the day, once again I saw Amanda sitting at the kitchen table staring at me, this time with a determined look in her face and her emotions were all curiosity.\n\nAmanda asked tentatively, \"I think I will. I'll have to change tracks at the academy, but I think it will be worth it. So... what do I have to do.\"\n\nI smiled, glad she had decided to release her power and said, \"Nothing at all really, just sit still.\"\n\nI reached out across the table and touched her forehead. It was not a difficult thing, I released her power then sat back.\n\nShe said, \"That's it? I don't feel any different.\"\n\n\"It takes time, your full abilities would be overwhelming. In a few days you will start to feel the emotions of others around you, and even their surface thoughts when you touch them. I can start teaching you how to get in touch with nature after that.\" \n\nShe asked, \"You mean like growing a flower?\"\n\nI grinned. \"Actually that one isn't that easy, we'll probably start with lightning, calling a storm, sensing magic flows.\"\n\nShe looked at me askance and said, \"Shooting lightning is easier than growing a flower?\"\n\nI said, \"Think about it, to grow a flower you need to understand the life of a flower, its structure, how it works in its entirety. Lightning is simply applying a positive and negative charge.\"\n\nWe talked about things for a while until she turned in for the night.\n\nBonnie pulled me into the bedroom and kissed me softly. I smiled when I saw the toys on the bed. Everything had been a little hectic and we hadn't had a chance to break them in yet. I had also decided that five in the group complicated things too, if those two worked out we would probably need to close the group.\n\nWe played for quite a while. My body was tied up, my ass was stinging and I was a quivering mess with the force of my last orgasm when Tom and Harmon walked in the room. After that, things got even more fun, as a succubus I had always wanted to be a centerpiece in an orgy, to feel the power of pleasuring so many at once. Best of all, this would be with family, the ones I loved and was growing to love as opposed to meaningless sex with strangers, the reason I had never done it before. It was an amazing night...\n\nThe week continued and it felt downright normal to me. There were no emergencies, no feds at my door, no threats to Earth.\n\nOn Sunday afternoon I deployed the gravity wave enchantments into orbit around the Elven world. I had considered telling them in some way, or explaining why, but decided that wouldn't matter. Afterwards, I took a portal to a deserted island and meditated.\n\nI had a large loving family that was going well, a new Witch to train and pass on the joy of what we were. I still had full control of my magic, and things were good at work as I continued to get along with my partner. I was starting to wonder yet again, when the other shoe would drop. It was bound to happen sooner or later, life just wasn't this easy for me.\n\nI considered that we might want to get a house, four plus one visiting a lot and we would need the space. More rooms so we could have one on one time, without kicking the rest of the group out of the main bedroom we would all share. Plus with Amanda there, it would just make sense. Plus, we never did get that bigger shower, and I really wanted one.\n\nI felt a portal open and Cat stepped out.\n\n\"You picked a good spot, I come out here a lot myself. No need to go, just wanted to congratulate you and wish you luck.\"\n\nI frowned, \"For what?\"\n\nShe looked at me scathingly in that way she had, I hated that, and said, \"For such a strong and intelligent Witch you can be incredibly dense.\"\n\nI opened my mouth to object, but she stepped back through the portal and it closed. I thought about what she had said and my conclusion shocked me. I scanned to be sure, and then smiled wistfully. A girl, half Angel, quarter Witch and Demon. Hopefully her life would be easier than mine had been so far. She would be another first, a mix of three races. I smiled, we would definitely need that house now.\n\nI gently rubbed my stomach as I thought, for the other shoe, this wasn't so bad..."
    ],
    "authorname": "Magicwrtr",
    "tags": [
        "succubus",
        "angel",
        "witch",
        "demon",
        "polyamory",
        "elves",
        "magic"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/ashleys-tale-demons-world-06"
}
{
    "title": "The Steamy Chase Ch. 02",
    "pages": [
        "Comments, critiques and tips are welcome.\n\nDean Broody vs. Kayla Cooper\n\n***\n\nA gasp ripped from Kayla's throat as exquisite sensations tore through her body from the point where Dean's cock slowly circled her slick swollen clit, his heavy breathing the sexiest sound she had ever heard. Kayla unconsciously moved against Dean. \n\n\"Kay...\" Dean groaned deep in his chest, a helpless sound of tormented pleasure. \"Do you have any idea how crazy you're driving me?\" He husked, grazing her throat with his lips.\n\nEven as she squirmed against the pleasurable sensations Dean was building inside her, Kayla was asking herself how the fuck she got to that room which was obviously not hers. And why wasn't she getting up to run away? This was obviously not one of her erotic dreams about the crazy, hot Dean Broody. Dean was there for real, ready to fuck her. She had a lot of questions to ask but those exquisite sensations running through her that very moment made all those questions seem unimportant. She could already feel the tension building again, could feel the pleasure coil inside her tighter and tighter with the rubbing of that cock against her clit. Dean's cock felt enormous against her and it scared the living daylights out of her but she wanted to be filled with it, feel it move inside her, wanted that promised pleasure. God, how she wanted it.\n\n\"Dean.\" She whispered thrusting up against Dean.\n\n\"Do you want this Kayla?\" Dean knew he was at the edge of his control but the last thing he would ever do, would be to fuck a woman without her consent.\n\nKayla hesitated. \"Yes. But...let me see it first.\" She whispered. \n\n\"Let you see what?\" Dean raised his head to look at Kayla. He looked confused.\n\n\"Let me see your cock.\" She looked flushed.\n\nThe request sounded strange to Dean but he shrugged, rising up to kneel between Kayla's thighs. And at Kayla's gasp, Dean grinned, flashing those cute dimples that never failed to melt Kayla. He was used to girls reacting like that whenever they saw his cock. He loved it. What man wouldn't?\n\n\"Scared?\" He drawled. \"Hey don't tell me you've never seen one this big before. You're Kay-fucking-la baby.\"\n\n\"Dean, that won't fit.\" She gushed out, staring at his erection. It was huge.\n\n\"Wanna bet?\" Dean answered with a chuckle, getting back into position and wondering why Kayla was acting all scared. He knew he was hung but there were guys bigger than him. And Kayla looked like an experienced enough chic. Why the fuss? Maybe it was just an act...he could play along.\n\n\"Dean really...\" Kayla started but Dean silenced her weak protest with a kiss so sweet, it made her forget all about his monster cock. \n\n\"Look at me, Kay.\" Dean whispered against Kayla's lips.\n\nShe opened her eyes and stared up into blue eyes glittering with need.\n\n\"You are so beautiful. And I want you so much.\" Dean crooned, his voice dark and rough. \n\nKayla felt a delicious tightening within her core at his words. Oh God! Just his voice, low but throbbing with lust, and she was melting. She was burning for him. But this was Dean...he fooled around a lot. He was never serious with anything, especially girls. Kayla licked suddenly dry lips and tried to look indifferent. \n\n\"I already said you could fuck me Dean. No need to give me lines.\" Kayla murmured, her face flushed. \"Just do it.\"\n\nDean's eyes had followed the movement of Kayla's tongue and he lowered his head to taste those swollen lips again. Kayla shuddered when his lips touched hers. His tongue pressed into her mouth as she moaned into the lustful possession and whilst still kissing her, Dean thrust in slow, wanting to savour the pleasure of entering into her tight sheath. Then he felt it...a barrier. When he tried pushing against it, Kayla whimpered...in pain?\n\n\"Oh Fuck!\" Dean swore and froze. Kayla was a fucking newbie. \"Why the fuck didn't you tell me you're new at this Kayla? Fuck. I could've really hurt you.\" Dean made to pull out but Kayla crossed her legs around his hips, stopping his movement.\n\n\"Let me go Kayla.\" Dean said tightly.\n\n\"Why?\" She asked in a small voice. \"Should my being a virgin make me any less desirable?\"\n\n\"I don't do Marys, Kayla. You ambushed me. You should have fucking told me you're a...nun. I wouldn't have touched you with a long pol...\"\n\nKayla fought the tears that threatened to fill her eyes. \"What are you afraid of Dean?\" Kayla asked, cutting Dean off. \"That I'll be stuck on you if we have sex?\"\n\n\"Well yeah. Hey, you're a...\" He struggled with the word.\n\n\"Virgin, Dean. It won't kill you to say it.\"\n\n\"Virgin.\" Dean whispered, still shocked at the discovery. Then he exploded. \"Fuck, I want to. I want to, Kay. More than I've ever wanted any fucking thing in my entire life. But you will probably expect commitment from me immediately I take on this... You know what I mean. I'm not ready for any such...\"\n\n\"You have my word Dean.\" Kayla said quietly, cutting him off. \"We're both adults here. I'm twenty-four...not exactly a spring chicken. And you're what...twenty-eight? I vote we fuck our brains out and forget this night ever happened. What do you say? Are you man enough to fuck a virgin? No strings attached.\"\n\nBy the time Kayla finished her speech, her heart was breaking. She congratulated herself on her outward calm because inside, she was a total mess. She was damned if she was going to expose herself this way to a man and go away with her virginity intact as though she were some diseased freak. That would be the ultimate blow to her ego. That she had been rejected because of her virginity.\n\n\"Kay...\" Dean groaned, his voice tinged with warning. Was that a challenge? \"I will hold you to your word.\"\n\n\"Hey dickhead, if you were the last man on earth, I would remain a spinster for life. How about that? Do we have a deal?\"\n\nBut Dean had already resumed rubbing her pussy lips with his huge cock head, his face again, buried in the side of her neck with lusty moans coming out of his throat. Dean Broody never backed down from a challenge. He raised his head to look down at Kayla with eyes filled with so much lust, Kayla's breath hitched in her throat. She thought he was breathtakingly hot. With his jet black hair, dark blue eyes, dimples that looked so adorable on him he got away with almost anything, muscles standing out in his arms and his sexy abs, Dean was one of the strikingly handsome men Kayla had had the pleasure of knowing. He was her hottest wet dream and incredibly sexy.\n\nWith a groaned Dean reached between them and grabbed his rock hard leaking cock, pumping it as he rocked against her. \"Deal.\" He growled and pushed past the barrier. \n\nKayla screamed. \n\n\"Shit!\" Dean groaned. \"I'm sorry Kay. Relax. Don't clench on me.\" He instructed as he kept sliding in slowly till he was fully embedded inside her. She was soaked, tight, and blazing hot inside. When she unconsciously tightened around Dean's cock, he almost went out of his mind with pleasure. \n\n\"Fuuuuck! God, that feels good.\" Dean groaned uncontrollably. \n\n\"No, it doesn't feel good,\" Kayla cried out, trying to catch her breath. \"Why the fuck do people do this if it's this painful?\" She gasped.\n\n\"And why the fuck are you allowing me to do this if it's that painful?\" Dean growled. \n\nHe fought for breath, for control. Her muscles were gripping him like a fist. Dean knew if he didn't gain some form of control, he would end up hurting her by plunging wildly into her. All he wanted to do was plough into that tight sweet warmth and never stop.\n\n\"How long before the pain goes away?\" Kayla breathed.\n\nDean chuckled. \"Do I look like a babe to you? How the fuck am I supposed to know?\"\n\n\"Dean...\" Kayla groaned.\n\nDean tenderly smoothed the wet tendrils of hair away from Kayla's forehead. He sighed, laying his forehead against hers as he stared down at her. \"It won't last long Kay. Just breathe.\" Dean said, his voice soft. She reacted more to the sudden tenderness, the caring in his voice than to the promise he'd just given her. She hoped he was right, though. She did still hurt. The throbbing was insistent.\n\nDean's breathing was laboured. He sounded out of breath. His face rested in the hollow of her shoulder. She was too tight, too hot and slick. Staying unmoving inside her when all he wanted to do was thrust in hard and deep was killing him. But it was her first time and he didn't want to hurt her. He nipped at her skin with his teeth and tickled her at the same time with his tongue. The sweet torture made Kayla forget some of the pain. His tongue rubbed her earlobe. Kayla let out a sigh of pleasure and clenched her pussy walls around Dean.\n\n\"Fuck.\" He groaned and covered her mouth with a searing kiss. He devoured, consumed and possessed her. \"You're so tight,\" he whispered against her lips. \"So hot and sweet, Kay, it's like being surrounded by the sweetest fire on earth.\"\n\nThen Kayla was moving against him. She couldn't control it. Pleasure danced sinuously with a spark of pain. The combination drove her crazy. Dean withdrew, then holding his cock, gently teased her clit with the head until her face muscles went lax with pleasure. Then gripping her tightly, Dean slowly sank back into her, taking her slowly, allowing her body to adjust to his size. Kayla gasped at the heavy fullness and thrilling pressure inside her and shifted her legs further apart to give him better access. Dean wanted to take her gently and sweetly, and show her how damned good it could be. \n\nShe uttered a soft moan and matched his slow rhythm, her mouth seeking his again. He set a gentle pace, though from the way he gritted his teeth, Kayla could tell he wanted to pound into her. Instead, he eased in and out, so slowly that her eyes nearly rolled into the back of her head from the pleasure. She closed her eyes and lost herself in the feeling of his penetration, loving the way he stretched her delicate inner body beyond its limits. \n\n\"Better?\"\n\nKayla nodded. \"It feels so good.\" She gasped. \n\nWhy the fuck had she waited till now to do this? Kayla wondered. What she felt when she touched herself, came nowhere near the ecstasy she had felt from Dean's mouth, or the pleasure she was feeling now. She gave a wail when she felt Dean's cock brush over something inside her. The lingering pain was instantly replaced by blinding pleasure. \n\nShe gasped and shuddered and clutched at him. \"What was that?\" \n\n\"Ever heard of a g-spot?\" Dean whispered against her lips, gently working that spot back and forth with his cock until Kayla was a trembling mess in his arms. \n\nHer arms tightened around him as she whimpered his name. Her moans of pleasure were music to his ears. When she clenched around him, Dean gave an ecstatic rumble that echoed through his chest making Kayla shiver. She watched his face twist into a grimace of sublime pleasure, his eyes closed, his body arched, tight and tense. He looked as hot as fuck!\n\n\"Put your legs around me Kay.\" Dean ordered, his voice harsh with determination.\n\nWhen she did as he commanded, he let out a low growl and seemed to lose control. Rolling his hips rhythmically, Dean's breathing became more erratic as he set a slow, fluid pace. Then he increased the rhythm, causing Kayla's mouth to opened, a gasping cry issuing from it. Her pupils dilated in bliss as her hips pushed up against him, demanding more. Kayla was on fire. She had never felt this, never known this, never even dreamed it would be this mind shattering. It felt so good she thought she'd go mad.\n\n\"Don't stop, please don't stop...\" Kayla moaned brokenly.\n\n\"Oh baby, I couldn't even if I wanted to.\" Dean groaned, his voice shaking.\n\nKayla's insides started quickening and she bucked against Dean taking him deeper. Each thrust stroked the intensity of her pleasure even higher. She writhed frantically against him, her head twisting against the sheets, her body desperately begging for release.\n\n\"Dean...\" She whimpered.\n\nDean answered by leaning down to take her engorged pierced nipple into his mouth, pulling on it whist thrusting harder and deeper into her. Kayla couldn't stand the exquisite pulls on her nipple ring and the hard rubbing of Dean's cock on that particular spot within her. The ecstasy she felt that particular moment was so overwhelming, it made her dizzy, yanked the breath from her chest and unfurled ripples of pleasure at the base of her back. She could feel her muscles knotting up and quivering, winding up for an explosion. \n\n\"Oh my God, Dean!\" Kayla cried out. \"I...I'm...\" What she had felt earlier when he ate her out was nothing compared to the intensity of the oncoming orgasm, and though it scared the hell out of her, Kayla reached towards that explosion. She was absolutely going out of her mind...\n\nDean released his hold on her nipple and looked into her unfocused eyes. Her eyes didn't leave his; they glazed over, lost in bliss. Dean thought Kayla had never looked more sexy, erotic and hot, as she did that very moment.\n\n\"Just let go, baby. You don't have to hold back.\" He husked.\n\nThen his hand was moving between them, his fingers finding her hard clit. All it took was one flick, and she came undone...Kayla exploded. She screamed his name as she convulsed around him, her eyes widening as she clenched even tighter around him. All those competing sensations, the pain, the pleasure, the burn and heat, blended into one breath-taking, exploding fireball of ecstasy. \n\n\"Dean...oh God.\" She sobbed, her eyes rolling back in her head.\n\nHer cries were incoherent as she rocked against him, her nails drawing creases in his back. Her legs clasped his hips, her back arched, whilst hard, racking shudders of orgasm kept tightening her body to near breaking point as pleasure ripped through her. Her cheeks were wet with sweat and tears as she gasped for breath. \n\nHer orgasm was the most beautiful thing Dean had ever witnessed. Her slender body arching to him, her mouth parted with her head thrown back in total bliss as her juices poured out around his cock...Dean felt a part of his heart melt. Shit! He groaned.\n\nWith those exquisite unending contractions around his cock, Dean didn't have any choice but to follow Kayla into that bliss. He slammed in hard and deep and froze as his cock jerked, then exploded, pouring himself into her as he found his release. He gritted his teeth, praying unsuccessfully for control. He growled deep in his throat as he felt his control slip away with the rippling power of his ejaculation.\n\n\"Fuck, Kay!\" Dean roared and started thrusting into Kayla again, riding out his orgasm. He couldn't seem to stop coming. He wanted to fuck her and fuck her, and wake up the next morning and do it all over again.\n\nKayla kept contracting around his thrusting hardness, trapping him deep inside her and milking every drop of his seed. His hands were hard on her hips, his male cries harsh and pulled roughly from the depths of his chest as his body shook above hers for long seconds. Dean knew he had never had such an intense feeling before. Sex had never been this intense...exquisite...mind-blowing.\n\nFinally, blissfully, the violent tremors of rapturous pleasure eased and Dean collapsed on top of Kayla, his mouth at her neck as he fought for breath. \n\n\"Christ Kay,\" he breathed rolling over so that a still trembling Kayla was on top of him, \"you're amazing.\" He kissed her deeply, their tongues imitating the act they had just finished. \"Are you okay?\" He asked against her swollen lips, his thumbs wiping the tears that couldn't seem to stop flowing, from her eyes.\n\nKayla nodded, confused by the flood of emotions that swelled in her chest for him. \"That was so much more than I ever imagined.\" She whispered. Nothing had prepared her for this. She lay dazed on his chest, in utter contentment, savouring the spine-tingling moment, too fulfilled to think.\n\nDean rolled to his side, and slowly withdrew from her, drawing a moan from her. He saw the bloody remnants of her innocence mixed with his cum on his cock and froze. What if he had hurt her bad? Dean knew he had gotten rough at a point. He hoped she was okay. Then it hit him...he hadn't used a fucking condom. \n\n\"Shit!\" Dean muttered.\n\n\"What?\" Kayla asked in a soft voice, still shaking.\n\n\"Nothing. Be right back.\" Dean said, jumping out of the bed and entering the adjoining bathroom. \n\nHe felt like a slimy bastard. What the fuck had he been thinking going in raw? Dean's thoughts were in turmoil. He was so rattled he didn't even want to think about the major 'what-if'. He was a condom fanatic. That was only to be expected with all the medical people in his family. But for the first time in his life, he had fucked a woman without latex, had totally forgotten to use one. He wasn't worried about catching anything from Kayla and knew Kayla had nothing to worry about, where he was concerned because he was clean. But the other... He knew he definitely had to do something about it. The problem was he didn't think there was a pharmacy shop on that small Island that would have what he needed. He had to wait until they got back into town to get anything because the probability that Kayla was on the pill was very low. \n\nShit!\n\nAfter quickly cleaning up, Dean came back with a damp washcloth and gently slid it between Kayla's thighs, wiping her clean. He took it back to the bathroom and crawled back into bed, bringing Kayla's body close against his chest and covering them with the covers. Kayla snuggled closer to him, burying her face in between Dean's neck and shoulder as his body wrapped protectively around hers. Her last thought before drifting off to sleep was that it felt good having those arms around her. She dropped a gentle kiss on Dean's neck and slept. \n\nDean kissed her forehead, her nose, her mouth. It was such a tender thing to do, so intimate. He kept running his fingers through her short hair and then moved his hand down to stroke her back. He couldn't seem to stop touching her. He felt a sudden primeval feeling of possessiveness inside him for the feisty hot beauty in his arms and buried his face in her short hair with a low groan. Damn, if that hadn't been the best fuck of his life. The fiery heat and melting passion he found in Kayla was more than amazing, it was terrifying. Kayla sighed in her sleep and snuggled even closer to Dean. His cock twitched. Fuck! \n\nDean's last thought just before he drifted off was that he was screwed, and not just literally. "
    ],
    "authorname": "adjoaq",
    "tags": [
        "virgin",
        "deal"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/the-steamy-chase-ch-02"
}
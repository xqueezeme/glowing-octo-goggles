{
    "title": "The Creators Ch. 01",
    "pages": [
        "Editor's note: this story contains scenes of non-consensual or reluctant sex.\n\n*****\n\nBook One: Sentience and Divinity\n\nChapter One: The Life Giver \n\nBRANDON \n\nMy twin sister is dead, but she's not gone. Death is a tragedy in the village of Towerhead, but it's not a rarity. Farming accidents, disease, famine, natural disasters, you name it, it kills people in Towerhead. So eight years ago, when the oxen-pulled carriage ran my sister into the dirt, it was a tragedy, but it wasn't an anomaly. I had seen this play before; the townspeople rushing to the accident, the driver sitting in shock, the wails and screams of the bereaved, and the solemn procession that followed. My mother and father were devastated, my classmates were consoling and understanding, but I just stood there like an asshole pointing to the translucent figure to my left. \n\n\"Uh, guys?\" I said. \"She's right here.\" \n\nAt first, people thought it was just my coping mechanism. Hell, I thought that must be the case, but Angela never went away. She talked to me, and I tried to ignore her. She didn't like being ignored, so she started screaming at me. When I finally relented with an exacerbated, \"WHAT?!\" her only response was to smile brightly and say, \"whew, I thought I was talking to myself this whole time. I was worried people would think I was going crazy!\" And that's when people thought I was going crazy. I agreed with them, of course; obviously, I was going insane. I tried meditating, religious counseling, and even old pagan rituals, but nothing made her go away. Then Angela started feeding me test answers in school, and telling me where to pan for gold in the river, and showing me where the game was when I was hunting. The apparition's proclamations were so accurate that I could no longer deny her existence. Angela was dead, but she wasn't gone. \n\nAfter my parents tried an exorcism to relieve me of the 'demon that plagued my soul,' I stopped trying to prove to people that Angela was real. Towerhead is a lovely town, but it is a small town, fifty miles removed from civilization. Magic is looked down upon, and any anomaly that can't be explained in ten words or less is either 'god's blessing,' or 'the devil's work,' depending on the general mood, and 'the devil's work' was usually solved with pitchforks and pyres. So I kept Angela to myself, but as I grew older, her constant presence in my life started to present new and interesting problems. You see, Angela never left me. I mean never, and as an eighteen-year-old boy, privacy was a concern of mine. \n\n\"OK Angela,\" I hissed at her as I sat upright on my bed, \"we need to talk about boundaries.\" \n\n\"I was just curious to see what you were doing,\" she said with a big-eyed look of innocence. \"It looked like you were wrestling with a squirrel under the sheets.\" \n\n\"Mm-hmm,\" I said frankly, \"a squirrel.\" \n\n\"A really big squirrel,\" she smiled impishly. \"The kind of squirrel all the women of the town would just love to see.\" \n\n\"Angela, get the fuck out of my room.\" \n\n\"Oh, my mistake,\" she giggled, \"looks like it's a chipmunk. Not a very impressive one either. Kind of sickly looking, and diseased, and limp\u2014\"\n\n\"Angela...\" I growled. \n\n\"You know,\" she said, completely unfazed by my irritation, \"if you would just listen to my advice, you wouldn't have to wrestle rodents under your bedsheets every night.\" \n\nI sighed, and pulled up my pants beneath the sheets. It was going to be another one of those nights. Angela's ethereal body matured as I did, but her personality... well, let's just say existing in a single-peered state didn't do much for her social development. Sometimes Angela left me alone, but as we grew older, she became more and more... curious about my nightly activities. \n\n\"How do I put this nicely...\" I said, \"...your advice with women is fucking terrible.\" \n\n\"It is not!\" Angela huffed. \"I feed you great lines; you just deliver them horribly.\" \n\n\"Trish, are you doing anything tonight? Yeah you are... this guy.\" I recited the last line Angela had given me, completing the phrase with a double-thumb-point to myself, just like she had said I should. \"That one was a real panty-dropper.\" \n\n\"I think she liked it,\" Angela insisted.\n\n\"She laughed, then slapped me in the face.\" \n\n\"She's just playing hard to get.\" \n\n\"She's really taking the game to heart then.\" \n\n\"Hey! At least a woman touched you this time!\" \n\n\"That's not really the kind of connection I'm looking for,\" I replied with a wry smile. \n\nAngela looked like she was going to say something else for a moment, but then she sighed, and drooped her shoulders. \"OK,\" she said sheepishly, \"it wasn't my best line.\" \n\n\"It was absolutely terrible,\" I said, letting her rest her weightless head on my shoulder, \"but I appreciate the effort.\" \n\n\"Just not the results,\" Angela sighed. \"You know, I spent hours thinking of that one.\" \n\n\"I don't think women really go for pickup lines. I think talking to them like actual people might be an interesting tactic.\" \n\n\"We've tried that,\" she smiled ruefully up at me, \"you're no good at it.\" \n\n\"It doesn't help when you're hovering over my shoulder, constantly giving me unwarranted advice,\" I chuckled, and then changed the pitch of my voice to mimic hers. \"Smile, Brandon. Sit up straight! Look her in the eyes, hold the eye contact, hold it... hold it... don't you fucking blink, you're killing it! Hold it... Don't look at her tits! OK, smooth recovery; hey, what's wrong? You look like you need eye drops; holy shit, they're red! Oh fuck, she's getting up; quick, say something clever! Oh god, why did you say that?! Quick, uh... flex your muscles! Sing her a song! Propose to her! Pull your cock out and... she's gone.\" \n\n\"I do not sound like that!\" Angela giggled. \n\n\"That was basically a transcription of the last date I went on, and yes, you sound exactly like that.\" \n\n\"Well, I gave you solid advice,\" Angela insisted, \"you just didn't follow it right.\" \n\n\"Your feminine intuition is a true wonder. Clearly, my mind is too weak to comprehend your genius.\" \n\n\"Clearly,\" she replied, decidedly ignoring my sarcasm. I looked over at her and sighed. Angela was objectively beautiful. Her face was girlish, with big blue eyes, a pointed nose, flushed cheeks, and a smattering of freckles. Had she been alive, her hair would have been strawberry-blonde, her complexion would've been subtly pale, and her figure would've been long-limbed and slender. Instead, her ethereal skin was a light-blue hue, her hair was starkly white, and her form was a fleeting wisp that barely held together in the wind. It must've been hell for her to see what she could have become. \n\n\"Are you still going to Tera's house tomorrow?\" she asked me, her voice soft and fearful. \n\n\"What other choice do we have?\" \n\n\"Go to Drastin. Seek the guidance of a wizard.\" \n\n\"We're fifty miles from Drastin, and we don't have the coin for a wizard.\" \n\n\"And you think Tera can help?\" \n\n\"They say she's ancient; older than Towerhead itself, and she's cheap.\" \n\n\"She's a succubus, Brandon,\" Angela hissed. \"She's where the dying widowers go to spend their last days; if you're that desperate to get laid, we can just spend the money on a whore.\" \n\n\"She'll take my coin as payment,\" I said firmly. \"She'd be run out of town if she took unwilling men.\" \n\n\"You're 'Crazy Brandon;' no one would second-guess her if she said you came to die. A young man like you might be too tempting a prize.\" \n\n\"We'll just have to take the risk. We can't keep living like this.\" \n\n\"Living.\" Angela scoffed. \n\n\"You know what I mean.\" I said, \"We need help, or at least, we need answers. Tera can probably give us the latter; what's happening to us can't be unique.\" \n\nTERA \n\nI smelled the young man before I saw him. I could smell his vigor, his strength and his youth. He smelled delicious, but I stayed my desires. I had created a delicate symbiosis with the townsfolk of Towerhead; they sent me their old and dying to feed upon, and I provided them with healing and medicine. It was a tenuous relationship, but it worked as long as neither side overstepped themselves. The old and dying came willingly, wanting to spend their last days in pleasure and comfort, but if a young man were to come along, I was to reject him. So I grew nervous as he approached my door, and I pondered for a moment if I should act like I wasn't home. If the townsfolk saw this man enter my abode, it would raise questions, and the god-fearing people of Towerhead usually answered questions of magical beings with pitchforks and torches. He knocked on the door, and I sighed. \n\n\"One moment,\" I called to the door, adjusting myself in the mirror. I was naked, of course. Clothes were such a bother, unless they were lingerie, in which case they were wonderful fun. Still, I couldn't risk unintentionally tempting this boy with my bronze body. My gravity-defying breasts and robust backside might've seemed vulgarly exaggerated on another woman, but my thick thighs, toned abdomen and defined shoulders framed me with an athleticism that pulled it all together. My big violet eyes belied an innocence that had been corrupted centuries ago, my high cheeks expressed an austerity that had never been there, and my luscious lips bespoke disgusting desires, the one honest thing about my liar's portrait. I was a beautiful human woman in all aspects, save for the demonic horns curving from my wavy black mane, and the long thin tail that grew from my tailbone. I was a predator, but I was retired. I tossed a baggy tunic over my perfection, and walked to the door. \n\n\"Yes?\" I asked, opening the small window at the front of the door where only my violet eyes could be seen. \n\n\"Are you Tera?\" the young man asked. He looked to be in his late teens, blond of hair, slight of build, and obviously nervous as hell. Thank god; I thought he might be another suicidal young man looking for an easy way out. He was not here for my salacious services.\n\n\"I am,\" I said, trying to keep the natural seduction out of my voice. \"What can I help you with?\" \n\n\"It's...\" he trailed off, \"...it's kind of complicated, can I come in?\" \n\nSo, an embarrassing ailment of some kind. God, I hoped he didn't come for an erectile dysfunction cure. \n\n\"Roll up your sleeves, take off your boots, splay your hands, spread your legs, lift up your shirt, and spin around three times,\" I replied. \"Then show me your gold.\" \n\nThe young man did as I requested, and I took an indulgent moment to admire the toned muscle of his abdomen and the veins in his forearms, then told him he could stop. I told him to turn out his pockets, and he did, relinquishing the pouch of gold he had, as well as fishing hooks, twine and some lint. I gave him another studious once-over, checking the loose spots in his clothing for signs of a weapon before I finally opened the door. \n\n\"Come in,\" I said with what I hoped was a welcoming smile, and not the seductive smirk I naturally wore, \"but leave your boots outside; I don't want you to track dirt in.\" \n\nI walked over to my desk, trying my damndest to keep my gait from turning into a sultry strut, then I sat down behind it, and gestured for the young man to take a seat across from me. He sat awkwardly and twiddled his thumbs, and I pulled out my notebook and quill. \n\n\"So, what ails you?\" I asked, trying not to leer. \n\n\"I'm not sick,\" he entwined his fingers nervously. \"I have a... I have a spiritual problem.\" \n\n\"I'm not a therapist. I suggest you take your spiritual problem up with the town priest.\" \n\n\"It's not like that. I mean... I mean I have a spirit following me.\" \n\n\"Mm-hmm,\" I nodded, making a note on the paper, \"paranoid schizophrenia. There's no cure, but I do have herbs that can dull the hallucinations.\" \n\nThe young man stared at me for a moment, then cocked his head as though listening to something. He nodded to his imaginary friend, and I made another note on my paper. \n\n\"You're not writing my symptoms on that paper,\" he said. \n\n\"Whatever are you talking about?\"\n\n\"You're drawing a cartoon of me with my shirt off, and a very generous bulge in my pants.\" \n\nI started upright in my chair, slammed my notebook on the table, and flushed with embarrassment. I was about to explain myself, but the boy cut me off. \n\n\"You have three bottles of five-hundred-year old wine, a closet full of lingerie, and a hidden door in your back room,\" he said, cocking his head as he listened, \"and behind the hidden door, is\u2014\"\n\n\"Stop!\" I screamed, my heart racing. \"Don't you say another fucking word!\" \n\n\"...your daughter,\" he finished, \"combing her hair and looking out of a one-way window.\" \n\nI stared back at him in disbelief as I subtly reached beneath the desk, and grasped the stock of the crossbow riveted to the bottom of the tabletop. \n\n\"I bet you can see this, too,\" I whispered, and aimed the bolt at the man's crotch. \n\n\"I can't see anything; it's my sister who scouted the place while you searched me.\" \n\n\"Where is she?! Is she with my daughter?!\" \n\n\"She's actually sitting on top of your head, trying desperately to punch you before you shoot me in the balls,\" he responded, his voice wavering. \"If my promise it worth anything to you, Tera, I promise I won't tell anyone about your daughter.\" \n\nI tensed my finger on the trigger, weighing my options in my head. The people of Towerhead barely tolerated me as it was, and if they found out I had bred, I had no doubts about what they'd do to me and my daughter. But if I killed this boy, people would ask questions. Death is commonplace in Towerhead, but murder isn't. A missing boy, last seen walking down my path? I might as well tie myself to a stake and light the match. I eased my finger off the trigger and sat back, but kept my hand resting on the stock. There were two possibilities with this young man: either he'd possessed an astral being and named it his sister, or... well, that was the only option, really, because the alternative was impossible. Nearly impossible, anyway. Those legends were older than I was, and I was five-hundred years old. \n\n\"OK boy,\" I said, looking at him sharply, \"where are you keeping the gemstone?\" \n\n\"The gemstone?\" \n\n\"That's how you captured the astral being, isn't it?\" I replied. \"The charm on the doorway should have detected it though, so you couldn't have brought it with you...\" I looked the young man over, running through the options, \"...though you wouldn't need a gemstone if you're really an elf. Hmm... no pointed ears, and your eyes aren't the right shade of blue... the freckles certainly don't fit... wrong shade of blond, too...\" \n\n\"I... uh...\" the young man said, shifting nervously, \"I have no idea what you're talking about.\" \n\n\"Nymphs don't need gemstone's either,\" I mused, my options dwindling, \"but you certainly aren't one of those\u2014I would know\u2014OK, I give up; how did you capture the astral being without a gemstone?\" \n\n\"Like I said,\" he replied, looking very nervous, \"I don't know what you're talking about. I don't have a gemstone, and I don't know what an astral being even is.\" \n\nI leaned forward, staring intently at him as my finger twitched against the trigger of the crossbow. Something clearly alerted him to the danger he was in, because he flinched as my hand angled into the shooting position. \n\n\"An astral being is a force a nature from the cognitive plane,\" I said, searching for recognition in his eyes, \"it's what makes magic work. There are thousands of types of astral beings, and more than a few of them can give the user the power to snoop around my fucking house.\" \n\n\"I'm being honest with you,\" he hissed, his shaking voice barely a whisper, his body visibly trembling. \"Please let me go.\" \n\n\"I'm sorry, boy,\" I tightened my finger on the trigger, and tilted the crossbow upward so that the sites zeroed-in on his stomach, \"but I don't believe you.\" \n\n\"Mom!\" Justina's voice screamed from behind me. \"Stop!\" \n\nJUSTINA \n\nIt appeared to me as a glint of blue light. It glared against the wall, and I studied it, trying to figure out what prism in my room could create such a solar projection. Then I realized the glint was shining counter to the sunlight, and I became even more intrigued. \n\n\"What are you?\" I asked the glint, stepping in front of the sun coming from my window, and noting that my shadow did not cast upon the light. \"An astral being?\" \n\nThe glint vibrated against the wall as if in answer to my question. Neither an affirmative, nor a negative, but still a response. I reached out and touched the spot, and felt nothing. An astral being wasn't nothing; they had some substance to them. So, not an astral being. I looked at the extensive library Mother had collected over the years, pondering which tome had the answers to this intriguing mystery. Mother was a doctor at heart, but me, I was a scientist, and a damned good one at that. Of course, it was rather easy to be an astute academic when spending eighteen years locked in a room with nothing but books. I rubbed my thumb and forefinger against the tip of my left horn in a ponderous motion, and ran my eyes over the spines of each expansive volume. \n\nHistories of The Arcane Arts, A Collection of The Mystic Texts, a blue woman standing behind me, The Testaments of\u2014\n\nMy gaze swept by an old spyglass sitting on the shelf, then darted back as my heart jumped in my throat. The fish-eyed reflection of the spyglass showed a blue woman screaming into my ear. I turned my head slowly to the left, feeling my terror rising in my throat, but I saw nothing. I turned my gaze back to the spy glass, and there she was. My curiosity overtook my fear, and I leapt into action. I ran over to my dresser and pulled out my hand mirror. I aimed the glass toward the glint on the wall, but didn't see the woman in the reflection. I turned the glass away from the glint, slowly angling it until it appeared at the very edge of the reflection. And there she was, right where the glass met the wood frame of the hand mirror. Aim the glass too directly, and she was gone, but aim is so that the glint just barely showed on the edge, and she appeared. She was young, beautiful, and obviously terrified. Why was she scared? What was she trying to say? \n\n\"What?\" I asked. \"What is it?\" \n\nThe blue woman stopped, realizing I could see her. She pointed to the door of my room, which was hidden behind the bookshelf on the other side. I nodded. She assumed a sitting position, her body supported by nothing, then she brought her arm forward with her index finger pointing outward, and clenched her finger. \n\n\"Sitting and smoking?\" I asked. \"Someone's sitting and smoking outside?\" \n\nShe shook her head furiously, and brought her other hand in front of the one clenching her index finger. She cupped the other hand as if she was holding something in front of her, flexed her index finger, and jerked her arms back. Jerked her arms back as if... as if in recoil from pulling a trigger. Mom's crossbow! Mom was going to kill someone! I ran to the bookshelf, undid the hidden latch, and burst into the room. \n\n\"Mom!\" I screamed, holding the mirror in my hand. \"Stop!\" \n\nBRANDON \n\nIf I hadn't skipped breakfast, I would have shit myself already. Angela was flitting frantically from Tera's head to the bookshelf in the corner, racing back and forth in a blur of translucent light. She told me I was in danger, she told me Tera had her hand on the trigger, then she left me alone with the succubus and went to the hidden room that housed the monster's offspring. In hindsight, I probably shouldn't have mentioned the girl; it was pretty obvious Tera wanted her to remain secret, but I had to think of some way to convince her beyond all doubt that Angela was real. Then she went off about astral beings, and magic, and all the shit you'd never hear about in Towerhead, and now my testicles were staring down the sites of a crossbow.",
        "\"I'm sorry, boy,\" Tera said, her violet eyes narrowing, \"but I don't believe you.\" \n\nI seized up in horror just as the hidden door came flying open, and a naked young woman burst into the room. \n\n\"Mom!\" the teenaged succubus screamed. \"Stop!\" \n\nTera jolted upright, squeezed the trigger on reflex, and the bolt thudded into the wood between my legs. I groaned, slid down the back of the chair, and peed a little. \n\n\"What?!\" Tera screamed, and ran to her daughter. I couldn't help but notice that the woman moved with a naturally seductive grace; her hips shifted dramatically, her ass bulged from cheek to cheek with each step, her sinuous spine seemed to dance above the exaggerated tilt of her pelvis. I realized through my numb terror that she'd been dialing-down her natural charm from the onset. If I knew anything about women, perhaps I would've noticed her anxiety beforehand. \n\n\"Look!\" the daughter said to Tera, holding up a hand-mirror and angling it so that it faced almost perpendicular to their faces. Tera stared intently, and then her eyes widened. Behind her, Angela was jutting her hands in the air with both middle fingers raised as she screamed profanities that the succubi couldn't hear. Tera looked from the mirror, to the empty space behind her, and then to me. Her face broadened into a wide-eyed expression of awe, and her hands moved to the laces of her tunic, and untied them. The cloth that covered her fell to the floor, and the impossibly curvaceous body beneath it stepped forward in all its bronze glory. I stared with my mouth agape shock as she approached me with a predatory gait. \n\n\"Whoa-whoa-whoa-whoa!\" I stammered, my feet kicking against the ground as I tried to right myself in the chair. \"I'm more than willing to pay in gold; you can put your clothes back on!\" \n\n\"You're still in your infancy, aren't you?\" she asked, her astonished expression contrasting the low, sultry tone of her voice. \"You don't even know what you are, do you?\" \n\n\"What you're doing is very illegal!\" I said, simultaneously trying to get out of the chair and kick at the approaching monster. \"They'll burn you for this!\" \n\n\"Mom,\" the daughter said from behind Tera, \"what are you doing?\" \n\n\"We're in the presence of divinity, Justina,\" Tera said, not looking back at her daughter, only staring at me with her glinting violet irises, a hunger growing behind them. \"Empires have been burned to ash, genocides committed, continents plunged into chaos just for a chance... just for a chance at the opportunity we have before us.\" \n\n\"A Creator?\" Justina asked, her voice barely a whisper as if the very words themselves were holy. \n\n\"A Creator,\" Tera smiled down at me, stopping out of reach of my kicking foot, \"but still just a babe; still vulnerable, still moldable, and still unbound.\" \n\nTera caught my foot with deft reflexes. I gasped. Her touch seeped into my skin, suffusing the muscles beneath with a pleasurable lassitude, making me unwind and go limp. My posture softened into the chair, my abdomen unclenched, and my leg went loose in her gentle grip. My heartbeat slowed in my chest and became heavy, my panic washed from me, and my inseam tightened with impossible arousal. I'd never been this hard. \n\n\"Still just a babe,\" Tera smiled warmly, carefully letting my foot drop to the floor, \"still weak and afraid and looking for answers. I have the answers you want, boy; let me give them to you.\" \n\n\"Brandon?!\" Angela screamed in my ear, \"Brandon?!\" \n\nHer words seemed distant and faded, as if she were calling from a mountaintop. Tera's hand slid up my leg, her fingertips never leaving me, never giving me a chance to break from their lustful prison. She knelt between my legs as her other hand curled its elegant long fingers about my waistband, and began to pull down. \n\n\"No,\" I whimpered hoarsely, my resolve fading, \"please...\" \n\n\"Don't resist me,\" Tera whispered, her eyes brimming with promise, her voice dripping like honey. \"I'm not going to hurt you. I'm going to give you ecstasy you cannot imagine.\" \n\n\"Brandon!\" a faintly familiar voice echoed in my ear. \"Don't give in; fight it!\" \n\nTera pulled my pants past my knees, and her hungry violet eyes fell on the engorged member between my legs. She traced her fingers along my inner thighs, pathing felicitous tingles that breached the skin, and sank deep in my muscles, turning everything beneath her touch to jelly. I helplessly watched my manhood engorge before her, becoming so full that it felt near to splitting with the pressure. Her violet irises gleamed, each orb reflecting a fisheye of my curved arousal. \n\n\"Wow,\" she muttered, her voice a gentle song, \"you truly are divine. What is your name?\" \n\n\"Brandon,\" I muttered, unable to refuse her, and quickly losing the resolve to even try. \n\n\"Brandon,\" she hissed, a snake-like tongue flicking running across her full purple lips, indenting the glistening outline to reveal its pliant texture. \"What are your desires, Brandon? What have you always wanted to do to a woman that you could not?\" \n\n\"I...\" I droned, not knowing what to say, \"...I don't know.\" \n\n\"Ah,\" she smiled knowingly as her gentle fingers came together, wrapping coolly about my raging heat, \"a virgin. This must all be so confusing to you. Don't worry, Brandon; I'll be gentle with you. You're safe with me.\" \n\nHer violet irises topped her whites, never breaking our gaze as her plush lips descended, her fingers sliding worshipfully down my shaft to rest comfortably about the flat of my pelvis. I could feel her breath caressing my raging organ from the purse of her lips, and then I felt their pillowing touch form around my tip. I gasped. She licked the froth of precum that had pooled at my peak, the forked tips of her tongue like velvet daggers against me. I groaned, and the corners of her mouth quirked in a smile. She took me in. Her lips puffed about my girth in an air-tight seal, and her long reptilian tongue wrapped around me, stroking me in its lewd hold along her descent. Her eyes twinkled as she consumed inch after inch of me; her lips sucking softly, drawing me ever deeper into her. She hummed a lecherous tone when my tip pushed past the resistance of her throat, and then, quirking her stuffed mouth devilishly, she slid me easily into the tight wet channel of her throat. I could see the indentation of my girth bulging from her neck as she just swallowed around me, taking me ever deeper into her coiling esophagus until her lips squished around my base, her nose pressed into my pelvis, and her throat tightened about her meal. \n\nMy head dropped against the back of the chair, a pleasured murmur slipping from my mouth. She winked at me knowingly, hummed a satisfied note of satiation, then rotated her lips to a symphony of gurgles and squelches. I splayed my legs wide by the gentle guidance of her hands, and her head filled the void between them. I dared to rest a hand in her raven hair, my fingers marveling at the silken texture. She smiled around my cock when I finally reciprocated her affection, then she drew upward. My god, it felt like she was trying to milk me! Her lips sucked with a gentle determination that seemed to pull my insides up my shaft, leaving a sheen of her spit to coat my bulging meat. Her tongue ran along the underside of my manhood the whole way up, then wrapped around me again, squeezed, and pulsated as she descended once more. I felt my control slipping from me with each pass of her terrible mouth, every part of me that she touched seeming to deteriorate in a blissful surrender. \n\n\"Oh... fuck...\" I managed to say as her head moved up and down, up and down; gradually building up speed, but retaining its gentleness. Somewhere deep in the corridors of my mind, I heard a voice screaming my name. I knew the voice, but I didn't know where I knew it from. Its owner wasn't visible to me any longer. \n\nANGELA \n\n\"Brandon!\" I screamed, floating inches from his face. \"Brandon?!\" \n\nHis eyes were glazed over, his mouth was moaning, and his face bore an expression of pure bliss. Below me, Tera fed upon my brother with deep, passionate passes. I gave her head a useless, frustrated kick, then looked over to Justina. The teenage succubus bore a slenderer figure and a fuller face than her mother, but her features were otherwise the same. More importantly, she could see me! I didn't know how she could, or what I looked like to her, but I knew she saw me with her naked eyes. She was sitting behind the desk, watching her mother feast on my brother. I rushed over to her, and stopped short when I realized what she was doing. Both of her hands were between her legs, the tendons in her forearms flexing as she pushed her fingers inside herself. She moaned and gasped quietly as she watched the debauchery, and I let out a frustrated scream and sent a kick flying into her face. \n\nHer hair moved. It was a subtle thing, something that could be mistaken for a trick of the wind, but I saw it. I kicked at her again, and strands of black hair brushed slightly past her face. There was something about Justina, something that let her see me, and now, feel me. Whatever connection there was between us was growing stronger, and I needed to exploit it, and fast! I didn't know how much longer Brandon could remain himself, but by the expression on his face, I could tell he didn't have much time. \n\nI dropped in front of the moaning teenager's face, and saw her eyes blur, then refocus. She squinted as though she wasn't quite sure if there was something before her. I tried punching her in the eye, but my fist just passed through her, only disturbing a single eyelash. I tried again with similar results, then scrambled for other options. I bit at her cheeks, kicked at her gut, slapped at her ears, and only got ineffective responses. I felt the frustration boil inside me near to despair, then I stopped, and looked down. \n\nWell... she is a succubus after all. Maybe violence isn't the right route. \n\nI took a deep breath, and steeled myself. \n\nAlright Angela, you can be sexy. I know she's a seductress from the depths of hell, and you're a dead virgin whose only sexual experience is catching your brother masturbating, but you got this! Confidence! I am a sexy beast! I have the best pickup lines, and my feminine intuition is second to none! I'm not a dead virgin; I am the angel of pussy! \n\nI floated down between Justina's legs, and stared blankly at the calculus-level math problem that was the vagina. \n\nOk... that's clearly the labia, and that's the clitoris, and that's the... what the fuck is that? C'mon Angela, you have a vagina, you should know this! Ok, maybe I'll just put my fingers right... there. Hey, I can feel that! Oh my god, I can feel that! \n\n\"Hey, Brandon!\" I yelled over my shoulder, \"I'm touching Justina's\u2014\" Oh right, Brandon is being enslaved by a psychotic whore; back to work.\n\nI pushed a little harder, but my fingers simply passed through Justina's glistening pink skin. She didn't seem to notice that we had made contact, but I knew that I was making progress. I gritted my teeth, then touched her again, this time on the clitoris. My fingers connected with the flesh, and I could feel her warmth radiating into me. I didn't try to push harder, but simply caressed the erogenous bead until it reddened and swelled. I looked up to see if she was feeling it, and smiled as her eyes slowly cast downward. \n\nOh yeah, that feels good doesn't it, Justina? You like it when I do this... when I do this thing to your... is that the vestibule or the frenulum? OK, dirty talk needs work, but baby steps, Angela; don't try to hit a homerun with every swing. Just stick to the clitoris, and everything will be fine. \n\nThe contact became more and more real with every pass of my fingers. At first, I could only sense the warmth of her skin, but soon after I felt the wetness of her, the delicate texture, then the quivering of pleasure. Justina's expression became a mixture of confusion and desire, and for the first time in my dead, adolescent life, I felt... something. It was a strange feeling, an emptiness\u2014no... a craving. My breath quickened in my chest, and an aching desire crept between my legs. I wanted to please this woman; I wanted to see her need brim behind her beautiful violet irises, and then I wanted to fulfill it. Without really knowing what I was doing, I withdrew my hand, and lowered my lips to her depths. I took an indulgent inhale, and I could smell her! The sweet stink of her hormone-rich arousal wafted into my nose, and leaked its seductive tendrils into my primal mind. I grinned broadly, and pushed my face against her. \n\nJUSTINA \n\nAt first, it felt like the wind in my hair. Then, I felt one of my eyelashes bend. Then... then I felt something else. I glanced downward, and saw a shimmer in the air between my legs. I cautiously withdrew my fingers, wondering if the sensation I felt was just an errant brush of my hand, but I still felt it. That girl... she had no substance before, but now, I could feel her. It was a slight feeling; a gentle brush that started against my outer-lips, then withdrew, then continued again against my clit. She stayed there, and the feeling became more pronounced the longer she lingered. What started as a soft tickle became a gentle caress, and then I felt heat. Soft wet heat pressing against my petals, running through them with unpracticed, boorish motions. Was she... was she trying to eat me out? I widened the spread of my tan legs and looked down in fascination. The tender folds of my pussy pressed and deformed seemingly on their own as the wet heat ran through them. It felt good, but I still giggled at the inexperienced nature of the motions. \n\n\"Are you a virgin?\" I laughed. \"Lick once for 'yes' and twice for 'no.'\" \n\nThere was a tentative pause, then a single stroke ran through me. I shivered at the feeling, and laughed at the character behind it. I could tell she had to think about it; she was embarrassed about her inexperience. It was bizarre to be eaten out by a sexually-insecure specter, and I suspected most people would run away from the experience, but not me. I was a succubus, but more importantly, I was a scientist. Understanding came from extensive research, and hands-on research was the best kind. Curiosity mixed with arousal, and I felt a giddy sense of exhilaration in my chest. \n\n\"Did I feel your fingers before?\" I asked, biting my lower lip in excitement. \n\nA single lick coursed through me, flattening my labia and wetting my inner-lips. \n\n\"I thought I did,\" I smiled. \"Do you want me to teach you how to please a woman, my ghostly little pervert?\" \n\nA resounding 'yes' smeared across me, and my legs twitched in delight. I let out a girlish squeal and clapped my hands together. \n\n\"OK,\" I smiled, shifting my hips and spreading my legs wider, \"put your middle two fingers inside me like this,\" I said, turning my wrist so that my palm faced the ceiling, and extending my ring and middle finger, \"then, curl them like this,\" I said, slightly bending my fingers forward, \"and press along the top. You'll find a spot, and believe me, you'll know when you've hit it. Once you get there, just rub along it nice and slow.\"\n\nShe did as I taught her, and she was an avid student. I corrected her form only once before she had her fingers on the sweet spot, and she attacked it with sensual doggedness, turning my breaths into delighted moans. \n\n\"Now,\" I grinned, watching in fascination as my pussy was spread open and violated by nothing at all, \"put your mouth right here,\" I gestured to my clit, \"then wrap your lips around the hood, and gently\u2014and I mean gently\u2014suck on it.\" \n\nI looked down as my clit reddened with a pressure I couldn't see, and my hood pinched between invisible sucking lips. My erogenous bead and the fleshy cap that bore it were stretched from my pussy, then sucked carefully into the pleasuring mouth of the ethereal woman. This time, I didn't moan. This time, I let out a cry of delight as the feeling surged through my nethers. Her fingers pressed harder against my spot, her lips sucked with more voracity, and an exhilarating rush of euphoria expanded within me. Holy shit, this girl was making me come! \n\nANGELA \n\nI'd always considered myself to be heterosexual. I mean, I didn't really know what my sexuality was, but I assumed that if I were alive, I'd like men. Now, I still might've had a disposition for penis, but this pussy... well, it wasn't bad. Justina was delicious. I tasted her desire as it leaked into my mouth, permeating its flavor upon my palate until it was saturated. I grinned up at her as I twisted her clit between my sucking lips, watching in pride as the woman's face became a portrait of ecstasy. I made her moan, whimper, and scream; and her weak feminine tones only made me hunger for more. My invading fingers pressed along her ceiling, and I centered on her weak spot. It was easy to find; the face she made when I touched it, the convulsions that wracked her when I pressed onto it, and the flexing nature of her soft abdomen when I rubbed it, were all the evidence that I needed. Watching her pleasure flourish from my hand and mouth made my arousal grow, and I grinded my thighs together beneath myself, almost feeling the skin that should've been there. It was maddening to be able to feel the parts of my body that touched Justina, but not the parts within me that seemed to scream with unfulfilled need. The frustration only compelled me to eat the woman with more passion, and I pressed my face harder against her tender petals, and sloppily devoured her. \n\nThe connection between Justina and I became stronger with each passing second; it was like she was somehow sharing her capacity to feel with me. Her pleasured face looked down at me, her luscious lips fell agape and quirked in a wondrous smile, her big violet eyes shone with astonishment, and her brow furrowed and creased with lines of pleasured exertion. Her chest heaved with her euphoric expirations, jiggling her petite breasts with each rise and fall. A sheen of sweat glimmered from her tan flesh, and her spread legs began to twitch with sporadic convulsions. She was coming. I hummed a moan as I sucked her parts deeper into my mouth, toying her sensitive pearl with the tip of my tongue, my lips drawing around her. The long bouts of breath accelerated, becoming short and sputtering exhalations interrupted by manic laughs of pure delight. Her abdomen twitched in a chorus of convulsions, and she threw her head back and screamed as a fountain squirted from her urethra, and splashed through my ethereal figure. \n\nAnd then, I saw something. A connection, a line of energy running from my mind to hers, a blue spiraling flame of rope that bridged our very selves. I could feel its magnetic pull on my temples, and I knew I had to charge up it. I focused all the will of my being, and launched my consciousness up the connection. \n\nBRANDON \n\nTera left my cock with a parting kiss, strings of precum bridging her luscious lips and my tip. She smiled up at me as she rose, planted her palms on my thighs, and slid her perfect form up my torso. Her succulent breasts squished against my chest, her toned abdomen stretched and flattened against my belly, and her thick thighs spread around my waist, and squeezed softly. Her hands clasped gently together across the back of my neck, her long, elegant fingers trailing pleasantly through the hair behind my ears. Every part of me she touched melted into a relaxed and weakened state, save for the tension between my legs that only grew tighter. \n\n\"Are you ready to become a man?\" she smiled down at me, her voice a melody of sweet lust. Her forehead touched mine, and her sparkling violet eyes shone their excitement into my own. I could only grin stupidly back. ",
        "\"You know you can touch me,\" she whispered, crinkling her nose affectionately as she smirked. \"I'm not a display at a museum.\" \n\nI reached behind her, and rested my palms on the fat of her ass. The quirk of her devious grin beckoned me to continue, so I squeezed. She gasped slightly through her smiling mouth, and planted an affectionate peck on my closed lips. I squeezed harder, the delectable flesh forming pliantly in my hands, protruding from my gripping fingers. She kissed me again, and her tongue flicked across my mouth, beckoning it to open. I did, and I tasted the sweet flavor of her invasion. Her lips sucked with gentle hedonism, drawing with a slurping smack as her tongue toyed with my own, playfully inviting me to engage with her, slithering along me and wrapping me in wet hold full of tingling sensations. She parted from the embrace in a gasp, and I could feel her heart thrumming through her pressing breasts, her violet irises consumed by her pupils. She reached back, grabbed my cock, and positioned it against herself. The heat coming from her was like a furnace, and the dew dripped upon my tip, moistening me, readying me. I felt her petals give way to my rigid head as her weight shifted slowly backward. Her tight membranous lips unfurled and engulfed me, consuming me torpidly, savoring every throbbing inch I had to give. \n\n\"That's it,\" she whispered, her words breathy and rapt, \"let me take you all the way in.\" \n\nShe moaned softly as I sank into her, and her moan grew in its intensity the deeper I ventured. My balls pressed against her taint, and her demonic tail curled behind her in satisfaction. Her wet purple lips parted to yield a soft whimper, and her confident eyes wilted into an expression of vulnerability. \n\n\"God, Brandon,\" she gasped, \"you're so deep inside me!\" \n\nFor a moment, she lost control of herself, and I felt a surge of my former mind break through my lustful haze. She regained her composure faster than I could react, and she clenched around me in a hold that nearly caused me to come right there. \n\n\"You almost had me there,\" she winked, smiling, moaning as she began to shift her hips. \"I can enslave most men with just a touch, but you're not most men, Brandon.\" \n\n\"What are you talking about?\" I groaned, gripping her by the hips as she gyrated on top of me, her thighs squeezing my waist, her ass rotating behind her, my cock stirring her insides as she pulled me deeper into her gripping heat. \n\n\"You're a god, Brandon,\" she gasped, seemingly getting turned on by the very idea, \"you're a Creator, a force of nature more powerful than a hurricane, and you're all mine.\" \n\n\"Tera,\" I growled in pleasure, \"I'm just some fucking guy.\" \n\n\"That's very modest of you,\" Tera laughed, her mirth melodic and sweet, \"but come now, Brandon; even if you weren't a god, you're much, much more than just some fucking guy.\" \n\nShe moved with impassioned fervency, arching her back, pushing her fat ass out from her body, pressing her silky torso deeper against my belly, thrusting her supple breasts upward, squishing them against my chest and chin. The rotations of her hips drew me ever deeper, and I could feel the contractions streaming inside her with every subtle thrust of my pelvis. My cock glided slickly though her sucking and squelching insides, rubbing along her clit as I drove in contest with her lascivious motions. \n\n\"What makes you think I am what you say I am?\" I asked, locking into her rhythm and pumping as she pushed our pelvises together. \n\n\"Your sister is dead, Brandon,\" Tera smiled, her mouth partially agape and exhaling sweet tones, \"but she's still here. How much power do you think it takes to defy death itself?\" \n\n\"But,\" I sputtered, gritting my teeth as I forced an orgasm down, \"I didn't do anything!\" \n\n\"Yes, you did,\" Tera gasped, reaching behind me and clutching my shoulders for leverage, dragging her warm soft body against mine, \"you just didn't know what you were doing. Extreme stress can unlock the power of a Creator,\" she turned my chin up to meet hers, and she displayed a set of sparkling white teeth between her lush lips, \"or extreme pleasure.\" \n\nHer hand moved from my chin and entangled in the hair at the back of my head. She gently pulled backward, and I compliantly tilted my head to reveal the vulnerable curve of my neck. She kissed me there, softly, comfortingly, and I felt my mind lose its need to question her. I couldn't sense... what was her name again? The woman... the girl... she was always with me, wasn't she? Where was she? Where did she go? It didn't matter; nothing but Tera mattered. Tera's thighs gently squeezing my waist, Tera's soft abdomen sinking into my belly, Tera's warm breasts squishing against my chest, and Tera's tender kisses sucking love against my neck. The warmth of her body, the softness of her flesh, the soothing nature of her motions, and the tight delicate heat of her insides were the only things present in the world. She massaged me from within, drawing me deeper into her lust with the lewd muscles of her erogeneity as her seduction drew me further from my mind with the gentle guidance of her enslavement. \n\nANGELA \n\nMy mind was flooded with fractured memories, odd sensations, blurs of images and words, and a swirling tempest of different emotions. It was maddening, excruciating, and utterly confusing, but I gritted my mental teeth, and stormed through it, hoping it would calm. Eventually, it did, and I opened someone else's eyes. \n\nHello? a voice called from the depths of my mind.\n\nJustina? I asked, looking down to see a beautiful naked body stretching below me. \n\nAre you the ghost? Justina asked. The one whose fingers were just inside me? Is your name Angela? \n\nYup! I responded brightly. That's me! How'd you guess that? \n\nYour mind is in my brain, and our thoughts are open to each other; this is truly fascinating, Justina said, a touch of awe in her mental voice. Can you move me? \n\nI looked down at my\u2014our\u2014hand, and tested the nerves. It splayed just like I wanted it to, and I moved it in front of my eyes, turning it over along the wrist as a flood of emotion poured into me. Though there was a strange disconnect between my thought and the action it prompted, the sensations of mortal flesh were something I had been so far removed from that I'd nearly forgotten them. Oh my god. Oh my sweet Holy Mother above, I could FEEL! \n\nOh my god, I thought, my mental voice quivering as though tears were welling. I can feel everything! \n\nIt's so beautiful, Justina sniffled, this means so much to you! \n\nWhy are you getting all teary-eyed? \n\nWe share the same mind now, Justina said, her words wavering in the same euphoria I felt. Emotions are just chemical reactions in the brain prompted by external stimulus, so your emotions are my emotions, and visa-versa. I've been trying to stay emotionally blank for you; I don't want to contaminate the sample. \n\nYou're quite the little scientist, aren't you? I said, flipping through the pages of our mind, experiencing the memories of Justina. Always doing experiments, always forming a hypothesis, always\u2014 I cut off as I got to a particular memory. I let it linger there, feeling extremely awkward. \n\nHey, stop that! Justina yelled. Stop feeling awkward, you're making me feel awkward! \n\nJustina, I said, experiencing this memory in her mind, feeling the emotions she felt then mingling with our present emotions. Are you gonna... are you gonna explain this one to me? \n\nMom says I'm not old enough to feed myself, so I take the left-overs; can you stop feeling so fucking uncomfortable?! It's completely natural for a young succubus! \n\nYou're sucking sperm out of your mother's gaping asshole, I said frankly, feeling the breadth of the memory; tasting the memory of her mother's ass on my tongue, feeling the memory of her mother's fingers in my body, feeling Justina's past arousal, her present annoyance, and my own disgust mix into a concoction of volatile emotion, and it feels like you both really enjoyed the experience. \n\nYes, it's a wonderful mother-daughter bonding moment; there's a whole brain full of them if you're feeling frisky, but for now, I think we should keep our memories in check; I certainly don't want to remember your death\u2014STOP REMEMBERING YOUR DEATH! \n\nSorry, I said, feeling Justina's horror fade as I pushed back the memory, but you brought it up. It's kind of hard not remembering something when someone else mentions it. \n\nOK, Justina said with an exaggerated exhale, as if she were breathing the memory out of her, what's the plan? \n\nThe plan? I asked. I don't have a plan; I've just been winging it. I don't even know how I got here!\n\nI suddenly realized that I could help Brandon. I looked down at the crossbow under the desk, and Justina immediately seized control of our motor functions. \n\nNo, no, no, Justina said firmly, that is not going to happen. This is still my brain, and this is still my body; you're not using it to kill my mother. \n\nAt least help me pull her off of him! I yelled. \n\nI'm willing to help you, but my mother is hundreds of years old, trained in elite combat, and could easily seduce me if she so desired. Besides that, I quite like her, and don't feel like straining our relationship. \n\nBut you're willing to help? I asked. \n\nHold on a second, Justina said, and I could sense her carefully shuffling through the pages of my subconscious, try to keep your mind neutral. \n\nWhat are you doing? I asked her as the memory of me frantically flying between Justina's room and the space above Tera's head appeared in our mind. \n\nTesting a theory, Justina replied, showing me the idea she was forming in our mind, a Creator's power is unlocked during times of extreme pleasure or stress. Knowing a crossbow is being aimed at your testicles is probably pretty stressful. \n\nWhat the fuck is a Creator?\n\nAn ancient being with god-like power\u2014I know you don't believe me, but for now, just hear me out.\n\nThe memory slowed to a crawl. Brandon was looking at me fearfully, his eyes begging me to find a way to save him. As the memory passed, I saw a blue tendril of power burst from his mouth, and fly right into my chest. It was so fast that it could barely be seen, and I was so scared that I hadn't noticed it in the moment, but now it was as clear as day. The blast of power was the manifestation of a plea, but it wasn't really a plea, it was... a command. As the recollection slowly passed, I somehow intuitively knew what the command said: \"find help.\" \n\nAnd you did, Justina said, Brandon gave you the power to interact with me. I could see some form of you when no one else could, but that's not all he did. \n\nThis time, one of Justina's memories played before our eyes. It was of Justina bursting from her concealed room and looking at Brandon. Another stream of power flowed from Brandon's mouth, words that he didn't form with his lips, but with the pleas of his heart. \"Help me,\" they said to Justina, and then another blast of power shot to me, \"get her to help me.\" \n\nBrandon created a connection between us, Justina said. He didn't know what he was doing, but he did it. Succubi connect with other species in only one intimate way, so our connection strengthened with our lust. I have another crazy theory if you want to hear it. \n\nI'm all ears, I responded, trying to keep my confusion in check for fear of messing with Justina's progress. \n\nYou are the complete manifestation of Brandon's power, Justina said, he should have exhibited some signs of his godhood by now, but to everyone else's eyes, Brandon is just some guy. That's because he's poured every ounce of his divine strength into keeping you 'alive.' He doesn't know what he's doing, but every time external stress prompts him to use his power, his first instinct is to give it to you, to protect you, or for you to protect him. He can't help himself; ever since he saved you from passing on, his divine reflexes have been trained to you. Now, here's the kicker; you ready for this shit? \n\nUh... sure, I said, feeling a little intimidated by Justina's words and the tone of her thoughts. She seemed to talk faster and faster, as if her revelation was bursting from her subconscious in a manic vomit of words. She was obviously extremely excited about what she'd found. \n\nThe kicker is, Justina said, allowing a dramatic pause, you're in my head now. My brain is supporting your existence without Brandon's help, but he doesn't know it. He has the power to save himself right now! \n\nWe need to tell him! I said excitedly. \n\nNo, we don't, Justina chuckled. We just need to watch, and wait. Extreme pleasure unlocks the power of a Creator, Angela; let's watch your brother come inside my mom. \n\nTERA \n\nOh my god, this cock is good!\n\nIn all my years of debauchery, I'd never lain with a man like Brandon. His rigid member pierced into my most sensitive depths, separating my folds and violating my sanctity, threatening the very entrance to my womb! His motions were timid and shy, which was perfect for me, because if this man started gaining confidence, he'd own me in a second. Still, even though he was inexperienced and awkward, he resisted me. It was infuriating and arousing at the same time. He should've been mine by now, but he wasn't. I watched his eyes, waiting for them to turn violet, waiting for them to reflect the enslavement of his mind, but they stayed a stubborn blue. \n\n\"Come to me, Brandon,\" I whispered in his ear, leaking my intoxicating tones into his mind, \"become mine.\" \n\nI ground my hips with increased fervency, my motions bordering on desperation. My ass jutted and deepened the angle of my arching back, causing the folds of flesh along my waist to crease about the bend around his arms. I brought my pelvis forward in the continuation of my motion; flexing my abdomen against his belly as my hips drove against him. His cock stirred my insides with the movement, and my passionate assault only served to drive me further into the depths of my own manic lust. I was losing control of myself in my attempt to take him. His timid thrusts started to grow in their ardency, and I felt the panic rise with the ascension of my pleasure. \n\n\"Why do you resist me?\" I asked him, trying to keep the seduction in my voice, trying to make the nearly-uncontrollable pleasure. \"Don't you want me?\" \n\n\"Yes,\" he replied hoarsely, seemingly unaware that he was gaining an edge on me. \"God, I want you!\" \n\n\"Then give in to me,\" I pleaded, now unable to keep the desperation from ringing in my tones. \"I'll do anything you want, Brandon; there are no depths I won't stoop to for you.\" \n\nMy words only encouraged him to thrust harder. A sharp inhale of breath shot through my gritted teeth as I combated the feeling inside me, vainly resisting the ecstatic impaling of my sucking innards. I felt my control wane, and my body move without my permission, compelled by the euphoria building within me. The controlled deliberate grinds of my hips changed from steady oscillations to whorish, needful motions. Instead of seductive circular passes, I began to rise and fall in congruence with Brandon's thrusts, fucking myself as he fucked me. His cock impaled me, his length piercing the deepest reaches of my lust, his girth stretching me all the way to my hollowed bottom. My clit ran along his shaft with each pass of our grinds, and the feeling of it rubbing along him as he defiled me sent aching pleasure deep into my pelvis. I knew I should stop; I knew I should cut my losses, but I couldn't help myself. Oh god, it was too good! I no longer moaned with the sultry pleasure of a woman in control, but cried out with the panicked yelps of a slut being broken. The easy smile I once wore was replaced with gaping oval that only pleaded for more, and the blissful gaze of my eyes turned to wide-eyed, teary windows of uncontrollable ecstasy. \n\nSuddenly, Brandon changed. His grip on my ass tightened until it hurt, and he pulled me close to him, pressing my body to his. I held to him desperately, clinging to his shoulders, unable to pull myself from the pleasure he was forcing into me with each squelching impale. He held my pelvis in stasis, trapping it with his strong arms, and he thrusted into me in a fury of blasts, plunging deep, impacting so violently that my fat rippled up my ass. I screamed into his chest, tears welling in my eyes as the pleasure ripped up my spine, scorched through my synapses and compelled me to whine in feverish need for the alpha's seed. His motions became violent, turning my elegant body into a blur of jiggling tan flesh and flailing hair, and I reveled in it, longed for it, dug my nails into his back and begged for it. \n\n\"What happened to you, Tera?\" Brandon asked, teasing mirth in his voice. \"Did you just give up on me? I'm insulted; I thought you really wanted me.\" \n\n\"Brandon!\" I screamed, looking through tear-streaked eyes at his face above me. \"Stop!\" \n\n\"Stop?!\" Brandon laughed, pumping into me so hard the chair was shaking beneath us. \"Isn't this what you wanted?\" \n\n\"I'm sorry!\" I screamed, the pressure ballooning uncontrollably inside me. \"Just please, stop!\" \n\n\"It doesn't sound like you really want me to stop,\" Brandon grinned down. \"Is this you playing hard to get? I fucking hate it when women play hard to get!\" \n\nBrandon gripped my ass in a vice-hold, squeezing the flesh until it stung beautifully. He picked me up like I was nothing, turned us around, and then unceremoniously dropped me into the chair. I couldn't help myself; I squealed in delight at his savagery, and spread my legs wide to either side. I vainly held my arms out in front of me, but the defense was half-hearted at best. I wanted him to take me. He grabbed my outstretched wrists, and pinned them against the chair behind my head; his face hovering over mine, his body looming threateningly as his pelvis smashed into my spread-legged vulnerability. \n\n\"Oh, god!\" I found myself screaming, the words coming from my mouth without my permission. \"Fuck me, Brandon! Make me your whore!\" \n\nThat was not a dignified sentence, but it was the desire of my heart. Brandon laughed as he launched his body against mine, shifting me brutally against the back of the chair, forcing me up and down with each merciless drive of his hips. I stared up at him with eyes full of submission, my lips quivering and pleading for more abuse, more pain and pleasure. He let go of my hands, and I clutched the back of the chair as one of his hands found a flailing breast, and the other, my throat. I growled an animalistic tone as he clenched both hands, squeezing and deforming the succulent mammary fat as he constricted my windpipe. \n\n\"Choke me like a bitch!\" I hissed, my tongue snaking out in serpentine hedonism. \n\nMy back arched from the chair, bringing my chest closer to him as I squeaked pathetic tones of my ascension. It was building and building, rising past the point of no return. The quaking, churning ecstasy of my depths rose with the melting of my mind, breaking the will to remain myself. My spread legs curled around Brandon's waist and brought him deeper into me; my whorish body demanding to be filled as often as possible. His tip pushed into the resistance of my cervix, and my bodily arch wrenched a violent thrust forward, propelling all but my head and shoulders off the chair. I screamed, and screamed, and screamed. Brandon's rigid heat throbbed inside me, and he growled with the escalating fervency of his passion. The pressure built past the critical point, and I was held in a stasis of paralytic euphoria for a brief, but seemingly endless, second. And then, I burst. The feeling rushed inside me, coursing through every nerve in my body, and I blasted a stream of my release onto Brandon's pelvis. He roared cathartically, and then blew inside me. His hot viscous seed poured into the ruined depths of my body, and pooled its delectable fire into my womb. My blurred vision got a glimpse of the man, and I saw him... I saw him for what he truly was. Bright blue power encased him, seemingly electric in its aura. It coursed through every vein in his body, and showed brightly from his eyes. His eyes did not bare irises, but were simply glowing ovals of energy. He stood for a moment, looming over me like the god he was, and then he collapsed onto the floor. ",
        "BRANDON \n\nThe world came back to me. I was lying naked on a bed of pink silk and fine linen. Tera's profile focused above me, her face looking concerned. Upon seeing the slit of my eyes, her expression widened into an endearing, almost motherly smile. A surge of fear ran through me, and I strained to get up and flee, but a searing pain in my head stopped me. Tera rested a cool hand on my forehead, and I noticed that her touch did not affect me. \n\n\"Shhhh,\" she cooed softly as she gently guided my head back to the pillow, \"don't exert yourself, Your Grace.\" \n\n\"Your grace?\" I murmured. \n\n\"Is that not how you'd like to be addressed?\" Tera asked, her face obviously worried. \"Have I offended you?\" she collapsed to her knees beside me, and began crying at my side. \"Please forgive me,\" she whispered, \"do not take my ignorance as insult.\" \n\n\"What the fuck...\" I mumbled, my head swimming with pain. \n\n\"My mother is very taken with you,\" Justina said from the other side of me. \"I think you might've broken her, actually.\" \n\nI turned my head to the right, and saw Justina's nubile body sitting beside me. She smiled brightly at my confused face. \n\n\"If you seduce a succubus,\" Justina explained, \"her powers backfire. Instead of enslaving you, you enslaved her.\" \n\nTera's face shined with unconditional love. Her big violet eyes brimmed with faithfulness, and her posture was servile and adoring. \n\n\"I think she worships you now,\" Justina chuckled. \"After you passed out, she wouldn't let me touch you. She hovered over your body like a protective mama bear, and I had to convince her that you'd be very angry with her if you came-to on a wooden floor.\"\n\n\"Is the bed to your liking?\" Tera asked hopefully from my other side, still on her knees. \"I wanted to build an altar, but Justina told me you wouldn't appreciate the ostentation.\" \n\n\"An altar...\" I mused, smiling weakly to myself, \"...that would've been interesting.\" \n\n\"Then I will build you an altar!\" Tera proclaimed firmly, standing up and opening a nearby drawer, \"I will build you a shrine! I will turn my humble abode into a temple for your worship! Stupid Justina and her stupid recommendations; of course a god needs an altar! Why did I listen to her? Please forgive my stupidity, your... your... forgive me, but I do not know your preferred title.\" \n\n\"Your Holiness will do fine,\" I said, smirking at Justina as she barely controlled her laughter, \"and I don't need a temple; I need some aspirin.\" \n\nTera cursed herself for her lack of foresight (of course his holiness needs an aspirin, god, I'm so fucking stupid!), and then bustled into the kitchen. \n\n\"She wouldn't shut the fuck up about you,\" Justina sniggered. \"All she could talk about was how she was going to be your most faithful disciple, how she'd worship you endlessly, how she'd gladly give her life for you.\" Justina glanced curiously at the slight bulge in the sheets between my legs. \"You must be something else, Brandon.\" \n\nTera bustled into the room with aspirin capsules in one hand, and a bottle of her most expensive wine in the other. Apparently, water was too lowly a drink to grace my divine lips. She once again cursed herself for her foolishness, and then ran back into the kitchen before returning with the wine in a glass. She walked over to me reverently, then got on her knees, and lifted the aspirin and wine above her head, casting her eyes downward as though she were presenting me with a holy offering. \n\n\"I know what she did was wrong,\" Justina said as I accepted Tera's offering, \"but try not to take this too far; I would like my mother back, eventually. Now, your sister\u2014\"\n\n\"Angela!\" I said, nearly choking on the wine. I turned on Tera and yelled, \"where is she?!\" \n\nTera cowered on the floor, prostrating herself and wailing about how she wasn't worthy. Justina's hand touched my shoulder, and I gawked when I saw the color of her eyes. \n\n\"Hey Brandon!\" Angela's girlish voice sung from Justina's lips, whose irises were now my sister's pale blue, \"I'm inside a succubus; how cool is that? Well... I guess you know how cool it is, don't you?\" she sniggered. \"Turns out, all you had to do to get laid was prove you were a god! Why didn't I think of that before?\" \n\n\"How the hell...\" I said, peering into the familiar eyes set in the face of another woman, \"...what did you do?\" \n\n\"It was you, actually,\" Justina said, her eyes returning to violet. \"You subconsciously created a connection between your sister and myself.\" \n\n\"Can she leave?\" I asked. \n\n\"Justina says I shouldn't,\" Angela piped-in, her blue eyes showing on the succubus's face. \"She says too much of your power is tied to me, and that I should stay in here or I'll stunt your growth.\" \n\n\"All of your power was used on her,\" Justina said, violet eyes returning. \"The exertion of keeping her around was a drain on your potential. Think of your power as a muscle; to develop, it needs to be worked in increments. If it's constantly under stress, it will atrophy.\" \n\n\"Justina says you might be able to create a new body for me!\" Angela interrupted, abruptly changing Justina's eye color. \"She says you're the Life Giver.\" \n\n\"The what?\"\n\n\"There are three Creators,\" Justina said, coming back to the forefront. \"Life Giver, Earth Former and Heat Bringer. You are Life Giver, obviously.\" \n\n\"And the other two?\" I asked, \"Are they alive?\" \n\n\"The three always arrive at the same time,\" Justina nodded, \"always born beneath the same moon.\" Her expression grew grave for a moment, and she paused, before continuing, \"What my mother tried to do, others will try as well. You're worth more than empires, Brandon, and powerful people will seek you out if it becomes known that the gods have returned. None of the other three have yet been discovered, or if they have, whoever owns them is keeping a very tight lid on it.\" \n\n\"If I'm as powerful as you imply, how could anyone 'own' one of us?\" \n\n\"You're still young and weak,\" Justina replied. \"Mom almost had you, but there are many ways to control a person. Seduction, manipulation, and worse.\" Justina stared levelly at me, \"You're still a person, Brandon. These people who would seek to control you, they'd find a way to get to you. They'd offer you immeasurable wealth, or they'd take your family hostage, or they'd capture you while you're still in your infancy, and torture you until your mind breaks.\" \n\nI felt a shiver run through me. \n\n\"The only way to protect yourself is to grow stronger. You need to practice your craft in secrecy, you need to find allies who will not betray you, and you need to guard those who love you. But most of all, Brandon; you need to find the other two.\" \n\n\"Why?\" \n\n\"Because if the gods are set upon each other, the result is apocalyptic. In the past, society surged forward when the Divine Trinity stood together, and collapsed when they fought. We need to find the other two and get them to safety and secrecy, or those with ambition will claim them for their own ends, and make enemies of you.\" \n\n\"How can I trust you?\" I asked Justina, narrowing my eyes. \"How do I know you're not one of these ambitious people?\" \n\n\"Because I know everything there is to know about her,\" Angela spoke from Justina's mouth, her eyes turning blue, \"and though she's a dirty, nasty little girl, Justina is a good person.\" \n\n\"Your sister and I have no secrets,\" Justina said, her eyes turning violet. \"Our thoughts, intentions and emotions are one.\" \n\n\"Psst, Brandon,\" Angela said conspiratorially, her blue eyes twinkling in Justina's face. \"Justina really wants to fuck you. Just don't let her do it while I'm in here!\" \n\n\"I'm more than a little curious,\" Justina confirmed, winking a violet eye, \"but we'll shelve that thought for the time being; you don't need two useless women groveling at your feet.\" \n\n\"She's still a virgin!\" Angela giggled, coming back to Justina's face, \"Her only sexual experiences have been with her mom!\" \n\n\"Not just my mom,\" Justina chuckled, eyes turning violet and rolling up, as though she were addressing her own forehead, \"you and I had some fun, didn't we?\" \n\n\"Oh yeah,\" Angela laughed girlishly, her awkward composure contrasting Justina's confident grace, \"I might be a lesbian; I don't know.\" \n\n\"Well, we'll shop around a bit,\" Justina said, violet eyes addressing her forehead again, \"find a strapping young lad in Drastin, and see if your preferences change.\"\n\n\"Only if your mommy ever lets you feed yourself,\" Angela sniggered, eyes turning blue. \"You better warn me next time you decide to share dinner with her. I don't want to be anywhere near that.\" \n\n\"Drastin?\" I asked, \"Why are we going to Drastin?\" \n\n\"Mom has connections there,\" Justina said, violet eyes casting toward me, \"people who know how to be discreet, people who have information that few others have.\" Justina glanced downward at Tera, who was still prostrating beneath me. \"You should probably release her; she won't be of much use to you if she's constantly on her knees.\" \n\n\"I don't know,\" I smirked at Justina, \"I kind of like her like this.\" \n\n\"Have your fun with her for the rest of the night,\" Justina sighed, \"she deserves that much for what she tried to do to you, but release her in the morning.\" \n\n\"How do I do that?\" I asked. \n\n\"Just tell her she's free,\" Justina replied, \"she'll beg you to keep her, but you just have to insist, and eventually, she'll leave your service.\" \n\nJustina stood up and walked to the door, but stopped before she passed the threshold. \"You'll need to protect your parents,\" she said to me. \"Angela tells me they won't believe the truth, so here's a convenient lie: you took a loan from slavers, and you put your parents lives up as collateral. Tell them that if strange men come to Towerhead, to hide in this house. No one would suspect to look in a succubus hovel.\" \n\n\"They'll hate me.\" \n\n\"But they'll live,\" Justina said, and then looked down at her groveling mother. \"Don't be too rough with her; we'll be doing a lot of walking, and we can't have her limping the whole way.\" \n\nShe gave me a parting smile and a wink, and then left the room. I sighed, then turned my attention to the beautiful tan monster worshipping me by the side of the bed. \n\n\"Tera,\" I smiled down at her, lifting her chin with my hand, \"come pay homage to your god.\" \n\nExcerpt from Arbitrus Gen's Journal, Chapter One, Page One:\n\nThe purpose of this journal is not to catalogue events; it is a warning to those who will ignore the past. Many of you know me, either famously or infamously. I am, of course, the Heat Bringer. Or rather, I was. Furok took my power from me, but I gave it willingly. My sacrifice was to no avail, but it was a sacrifice I needed to take. I foresaw what would happen. There is no greater curse than knowing what will come, and being helpless to stop it. You, dear reader, are not helpless if you act. You can do simple things. Tend to you flock, raise your children right, and of course, give all praise to the Holy Mother, for she is the only god. I know what you're thinking right now; who am I to praise the Holy Mother when the Maternal Order excommunicated me? Well, the Maternal Order is nothing but a house of frauds in nun's clothing, desperately trying to make you believe that they hold the keys to heaven. I denounce them, I curse them, and I gleefully pray they all burn in hell. Does it sound harsh? I don't think it is. Making oneself the gatekeeper of eternity is akin to pretending to be God, and there is no greater sin. And so, that is how I will begin my rumination on Creators. \n\nIt is tempting, I know, to think of Creators as gods on earth, but they are people just like you; just as fallible, weak, and wicked as you. Not to say that you are these things in your entirety, but in accordance with the gospel, we are all the children of the Holy Mother and the Unholy Father. Creators are no different. You may choose to step on an ant, or you may choose not to. That is how Creators views you\u2014the ant to be or not to be stepped on. You may choose to guide the ant to paradisial fruit aplenty, but that is just as harmful to the ant. Dependence is a form of worship, and I implore you, reader, not to worship those who see you as insects. Give all providence to the Holy Mother in the highest throne. This life is fleeting, but your soul is everlasting. Creators, as powerful as we are, cannot take away your rightful place in heaven. We know this, so the wicked of us will try to convince you that there is no heaven, that this plane of existence is the only one you can experience, and so you should worship the masters of the elements. \n\nIn this regard, there is no Creator more dangerous than the Life Giver. While the Earth Former shapes mountains and canyons, and the Heat Bringer can melt glaciers and cities, only the Life Giver can imitate God's true power. But make no mistake; it is an imitation. The Life Giver's miracles are abominations, and they persist everlasting in pernicious ways. These immortal things bide their time throughout the ages. They hide in temples of their own making, and create of their world, a heathen hell on earth. It is likely that you will never cross a Tethered One, but if you do, you will never be seen again. And if you ever cross a Sentient... well, God help us all then. \n\nStay in the light. Stay in the grace of the Holy Mother. We are all her children beneath the sun, so remember the old hymn. \n\nForever they will live as one, like two lovers in the sun. Shining from creation's birth, to hold a tether to the earth."
    ],
    "authorname": "White_Walls",
    "tags": [
        "blowjob",
        "ghost",
        "noncon",
        "seduction",
        "slavery",
        "succubus",
        "teen",
        "virgin"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/the-creators-ch-01"
}
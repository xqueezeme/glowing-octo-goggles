{
    "title": "New Girl in Town Pt. 03",
    "pages": [
        " All characters are at least 18 years old \n\n****\n\n\"So how much trouble am I in,\" Jessica asks as I join her at our biology table.\n\n\"Pardon,\" I ask.\n\n\"Roxie's mad that I told Ray and Staci they could sit with us isn't she?\"\n\n\"She's worried.\" I share.\n\n\"Are you?\" \n\n\"Not really. Ray's always seemed like a decent guy and Staci seems to have to changed this year, maybe because she's with Ray now.\" I answer.\n\n\"I guess I need to bring a few weeks worth of brownies to get back on Roxie's good side huh?\" she asks.\n\nI chuckle. \"Just talk to her. Roxie's a sweetheart once she trusts you but she's slow to let people earn it.\"\n\n\"So I should be good by the time we're getting measured for caps and gowns then?\"\n\n\"Just catch her after school sometime and talk to her one on one.\"\n\n\"It'd help if I knew when she had to stay late.\"\n\n\"Roxie's in chorus so she stays most afternoons.\"\n\n\"She is,\" Jessica asks.\n\n\"Sings like a songbird,\" I tell her.\n\n\"Wow, I'd have never guessed that.\"\n\n\"She hides things really well but she opens up to the right people.\"\n\n\"Cool, I can try and catch her after practice today.\"\n\n\"Already,\" I ask. \"I thought your games didn't start for another month.\"\n\n\"You've been having football practice for how long already?\"\n\n\"Point taken,\" I laugh.\n\n\"It's more of a meeting to get to know each other before the season starts anyway.\"\n\n\"There you go,\" I tell her. \"If you want me to I'll tell Roxie to look for you afterwards.\"\n\n\"That's something I should probably do on my own. I don't need you there drooling over my volleyball uniform anyway.\"\n\nShe teases.\n\n\"I don't drool.\"\n\n\"Uh huh, keep telling yourself that Jake.\"\n\n\"Not one drop,\" I argue.\n\n\"Do you really want to put that statement to the test right here? Remember what you said happened in geometry before you answer.\" She teases.\n\n\"I think I need a new lab partner.\"\n\n\"No one's as fun as I am and you know it.\"\n\n\"You're confusing \"fun\" with \"torturous\" you know?\" \n\n\"You love it and you know it.\"\n\n****\n\nAfter the volleyball meeting finishes Jessica hurries toward the auditorium hoping that she hasn't missed Roxie.\n\n\"Are you in a hurry Tall Girl?\" She hears Roxie call out from the stairwell she just passed.\n\n\"Roxie,\" Jessica asks as she skids to a stop. \"I was hoping to catch up with you.\"\n\n\"How'd you that I stayed after school?\"\n\n\"Jake told me.\"\n\n\"Of course he did,\" She sighs, \"well what do you need?\"\n\n\"To apologize for one,\" Jessica answers as the pair begin to ascend the stairs towards Roxie's locker.\n\n\"The Ray and Staci thing,\" She asks. \"It's fine. I just have trouble accepting new people especially ones that come straight from Patrick's inner circle.\"\n\n\"It seems like each of you have had bad experiences with Patrick.\"\n\n\"Mine is more to do with that walking Neanderthal Jamie but since he's Patrick's minion I just lump them all together.\"\n\n\"I don't like him very much either.\" Jessica shares.\n\n\"He used to be much worse, believe me.\"\n\n\"I'd like to hear about it; that is if you want to tell me.\"\n\nRoxie opens her locker while she thinks it over then turns to Jessica as she closes it. \"Do you have a ride home?\"\n\n\"My dad's supposed to pick me up in about an hour. We didn't know how long the volleyball meeting was going to run.\"\n\n\"Text him and tell him that I'll bring you home. It'll give us time to talk.\"\n\n\"Thanks Roxie, I appreciate it.\"\n\n****\n\n\"As you all know next Friday is our annual Blue and Orange scrimmage,\" Coach Yates explains to the team. \"Coach Pennington will head up the second team while I have first team. I will be evaluating both teams so I'll know where we stand for the season opener. Positions can shift with great play so I expect a hundred and ten percent out of each and every one of you.\"\n\nCoach Pennington taps his clipboard and takes over. \"I'll call your name and which team, either one or two. When you hear your name go stand with your coach.\"\n\nHe rattles off the majority of the first team and surprisingly both Ray and I are still waiting.\n\n\"Jake, you're my quarterback.\" Coach Pennington announces surprising me since I thought I had been demoted to third string. \"Ray, I've got you too.\"\n\nRay and I join the rest of our team as the last few names are called out. \n\nCoach Yates begins talking. \"These are the teams that will be practicing together next week in preparation for the game. My boy's will have the football field and Coach Pennington's team will meet on the baseball field starting Monday. Now I want you to get some rest over the weekend and be ready to bust ass on Monday!\"\n\n\"That's it,\" Patrick asks.\n\n\"That's it,\" Coach Yates answers. \"You boys worked hard all week so enjoy this afternoon off because once the season starts and we go after my record this will be the last one for a while.\"\n\nPatrick and the rest of First team don't have to be told twice and head towards the parking lot. The rest of us look at Coach Pennington who laughs. \"You guys heard Coach Yates, go enjoy your weekend.\"\n\nA few begin to leave but I announce, \"If anyone wants to stay and run routes I'm game.\"\n\nMost start to decline until Ray chimes in. \"I'm waiting for Staci so I'm in. Let's do this.\" \n\nA few others shrug and line up with Ray. \"All right then, let's run curl routes to start out.\" \n\n****\n\n\"Thanks again for the ride Roxie,\" Jessica says as Roxie unlocks her passenger door.\n\n\"Not a problem,\" Roxie answers. As she cranks up her car she nods towards the GPS. \"Pop in your address then we can chat.\"\n\nJessica does as she's asked and soon Roxie is pulling out of the parking lot.\n\n\"So the whole Jamie thing happened our freshman year,\" Roxie begins to explain.\n\n\"When you and Jake became friends?\"\n\nRoxie nods. \"This is how we became friends honestly. Jamie had made me the target of his particular brand of humor since the first day of school since I was so different from everyone else.\"\n\n\"Huh, that's odd. All the guys at my old school were all into the girls with unique piercings.\"\n\nRoxie laughs and as they're stopped at a stop light she pulls out a picture and hands it to Jessica.\n\n\"Who's this,\" She asks as she looks at the shyly smiling girl with braces, thick glasses and long brown hair.\n\n\"That's me,\" Roxie answers.\n\n\"No way,\" Jessica exclaims.\n\n\"Yes way and I'm sure you know his feelings about nerds.\"\n\n\"He's so clich\u00e9d like he just stepped out of one of those Revenge of the Nerds movies from the eighties it's not even funny.\" Jessica remarks.\n\n\"He'd start up in the hallways every chance he saw but the cafeteria was the worst. He had his biggest audience there so he would really lay into me there.\"\n\n\"Jerk,\" Jessica adds.\n\n\"His favorite thing to do was to step in front of me when I had just gotten my lunch tray and try and get me to spill it. It happened a couple of times and all his football buddies just laughed and laughed at the little weirdo. Especially the times I'd start to cry. Fuckers.\"\n\nJessica reaches over and lays her hand on Roxie's. \"I'm so sorry Roxie. That's awful.\"\n\n\"It was but that's where Jake comes in. One lunch Jamie starts in on me but he didn't get more than a word or two said before I hear this huge clatter right behind him. He turns and I see this whole mess of spaghetti all over the back of his jacket. Right there behind him stands Jake with an empty tray. Jamie was beyond pissed but that's all I saw because Shelly and Jody swooped in and got me out of there. I guess they were worried there was going to be a fight but the teachers had heard the commotion and were already getting there as we got outside. Jake joined us a little while later and thus began our little lunch group.\"\n\n\"So how come you and he didn't hook up?\" Jessica asks.\n\n\"Who says we didn't?\" Roxie counters with a sly smile.\n\n\"I do,\" She answers confidently. \"You're too friendly with each other to be ex's and if you were together I'd have seen you holding hands or kissing or something by now.\" \n\n\"You are a smart one Tall Girl. No, Jake and I never hooked up but I love him to pieces and not just for saving me from that hulking Neanderthal but for how he treats me.\"\n\n\"How's that,\" Jessica asks. \n\n\"Well when sophomore year came around, my transformation as it were had taken place. Braces gone, glasses gone, long pain in the ass hair gone and the real me came out. I got even more stares than mousy me did but Jake walked up the first day, gave me a hug and asked me how my summer went. He didn't make a big deal out of all the changes, he just accepted the new me. I'll always love him for that and kick anyone's ass that messes with him.\"\n\n\"Do you think I'm messing with him Roxie?\"\n\n\"Yes but not in a bad way I just hope that doesn't change. I mean you don't seem the type but I've been fooled before but that's Jake's story to tell.\"\n\nAs she finishes they pull into Jessica's driveway. \"Would you like to stay for dinner?\" Jessica asks.\n\n\"Uh, I'd probably freak your parents out Jessica.\"\n\nJessica smiles at the use of her name but then shakes her head. \"My sister will love you and my parents like meeting my friends. They aren't judgmental about how anyone looks.\"\n\n\"I guess if they let you come back to school after meeting Jake they can't be all that bad.\" Roxie laughs as the pair head inside.\n\n****\n\nSaturday \n\n\"Thanks again for going out shopping with me today Shelly,\" Jessica says as the pair get into Shelly's car.\n\n\"Not a problem Jess,\" Shelly states. \"I needed to get out anyway. So what are we looking for today?\"\n\n\"I need to get some stuff for volleyball. Athletic tape, new socks, hair bands all in the school colors.\" Jessica explains as Shelly pulls out of the driveway.\n\n\"I take it you got a list of stuff at your meeting yesterday.\"\n\nJessica nods. \"Coach Morrison passed one out before we got to mingle. I'm glad that she's also my French teacher. She's really excited for this year.\"\n\n\"What about you?\"\n\nJessica nods. \"Now that it's getting close I'm getting amped up for it. We get our uniforms next week.\"\n\n\"I know someone else who will be thrilled. Tight shorts for Miss Tight Shorts,\" Shelly teases and they both burst out laughing.\n\n\"Did he finally tell you I put that in his phone?\" Jessica asks.\n\n\"After I pestered and pestered him for it.\" \n\n\"Did he tell you why?\"\n\n\"Yes he told me about the volleyball conversation you had. I'm so glad you came along this year. He's had it pretty rough but with you around he seems to be having fun again.\" Shelly shares. \n\n\"I keep getting that impression but no one seems willing to give me any details.\" Jessica answers.\n\n\"It's not that we aren't willing it's just that it's Jake's story to tell, ya know? It's my hope that he tells you soon. Now get us some tunes going, please.\"\n\n\"Any preference,\" Jessica asks as she flips through the stations.\n\n\"I'm a rock n' roll girl thanks to Jake, Bobby and Roxie but I'll listen to pretty much anything that isn't sappy. What about you?\"\n\n\"Rock is good, pop is okay, and I'm not too thrilled with country or the sappy / angsty stuff.\"\n\n\"Jessica, we're teens. We're supposed to be all about the angst.\" Shelly jokingly points out.\n\n\"Oh I know right,\" Jessica answers. \"Everything is terrible especially on a bright and sunny Saturday. Why can't it be raining and gray out?\"\n\nShelly laughs as she hangs a left into a neighborhood. \"Shortcut,\" She explains. \"So you've been here a week, any prospects on the boyfriend front?\"\n\n\"Not really, I mean Patrick is the only one that's really overt in his interest in me but you already know that I'm not really into him. Besides I'm only here for senior year and then off to college so I don't see the point in starting anything serious.\" \n\n\"Oh,\" Shelly says.\n\n\"That said,\" Jessica says as she sees the back of a shirtless guy mowing a lawn ahead. \"I would give serious thought to rethinking my stance if that hottie were to ask me out.\" \n\n\"The guy mowing there\" Shelly asks concealing her smile.\n\n\"He looks hot right?\" Jessica asks. \n\n\"Hey if you're interested let's stop and see if the feeling is mutual.\"\n\n\"Shelly, No!\" Jessica shouts but Shelly is already slowing and pulling into the driveway.\n\n\"Wooo, looking hot there!\" Shelly shouts out the window as Jessica scrunches down in the seat trying to make herself as small as possible.\n\n\"Ha Ha, very funny Shell,\" I state as I stop the mower and wipe the sweat from my face with the shirt hanging from my waistband.\n\n\"Jake,\" Jessica says confused as she turns toward the sound of the voice. \"I didn't recognize you with your shir... ball cap on.\"\n\n\"Nice save,\" Shelly whispers as Jessica's blush deepens.\n\n\"Hey Jess,\" I say giving her a smile as I walk over to the car. \"What are you two up to today?\"\n\n\"Out scoping for hotties right Jess,\" Shelly jokes as Jessica allows her eyes to drift over Jake's chest, down his abs to where she can see the start of his chestnut colored nature trail just above the snap of his jeans. \n\n\"Um hmm, hot,\" Jessica answers dreamily.\n\n\"You can say that again, you're all red. Shelly not running the air for you?\" I ask.\n\n\"It's been on the fritz,\" Shelly lies.\n\n\"Want me to give it a quick look?\" I ask.\n\nShelly fiddles with the knob and cool air begins rushing out before she turns it back off. \"No, it's working fine now. I'll have dad look at it when we get home.\"\n\nI nod. \"Well if I see any hotties, I'll be sure to give you a heads up.\" I tell them and notice Jessica look at my chest, then look away quickly but then back again. \n\n\"Jess here has already spotted at least one.\" Shelly says.\n\n\"Shelly!\" Jessica shouts.\n\n\"Of course she has,\" I state tugging my cap off, my shirt free and then pull it on. I see a look of relief and possibly regret play across her face once it falls into place. \"Shelly knows where all the eye candy lives.\"\n\n\"Can't blame a girl for liking to drive around and if I happen to spot a nicely shaped guy I may make a mental note. Nothing wrong with that now is there,\" Shelly asks.\n\n\"My cousin the stalker,\" I laugh and Jessica joins in.\n\n\"You call it stalking, I call it passive observation.\" Shelly states then nods towards the front of my house. \"Like right now I'm passively observing your mom headed this way.\"\n\n\"Oh, should we go? I don't want to get you in any trouble Jake.\" Jessica states.\n\n\"Nah, I was due a break anyway and mom just wants to say hey to her favorite niece.\" \n\n\"I'm her only niece,\" Shelly points out with a smile.\n\n\"That doesn't make my statement any less true. Jess, do you want to hop out and meet her,\" I ask Jessica.\n\n\"Guess it's only fair. You did have to meet my parents after all.\" She answers.\n\n\"Fair's fair,\" I smile as I reach inside, unlock her door then open it for her.\n\n\"Thank you,\" She says. As she steps out Shelly comes over from the driver's side to join us.\n\n\"Hi Aunt Pammy,\" Shelly says as my mother gets closer.\n\n\"Hi Shelly Bell,\" my mom, Pamela Gibson says giving her a hug.\n\n\"Mom, this is Jessica. Jessica this is my mom, Pam.\" I introduce them.\n\n\"Hello Mrs. Gibson,\" Jessica says.\n\n\"Jessica,\" Mom asks, \"Jessica from your date tonight?\"\n\n\"It's not a da...\" I begin to answer but Jessica interrupts me.\n\n\"Yes ma'am. It's so nice to meet you.\" Jessica says smiling warmly at my mom.\n\n\"Oh honey it's so nice to meet you. I was beginning to think he'd never go out again.\" Pam shares.\n\n\"Mom,\" I sigh and Shelly just giggles.\n\n\"Well, it's true.\" Pam states. \"You know that if it wasn't for football season and Bobby you wouldn't leave the house on the weekends.\"\n\n\"Welcome to Thoroughly Embarrassing Theater where tonight's guest will begin to wish he were dead.\" I state.\n\n\"I'll do my best to get him out more Mrs. Gibson.\" Jessica assures her with a laugh.\n\n\"You'll have no problem with that dear; he has a weakness for blondes.\"\n\n\"Mom,\" I nearly shout but she just \"tuts\" at me before turning back to Jessica.\n\n\"You come by anytime Jessica, you're more than welcome.\"\n\n\"Thank you Mrs. Gibson I'll certainly try.\" Jessica answers.\n\n\"We should probably get going Jessica unless you want Jake to die of embarrassment before your date that's not a date, tonight.\" Shelly tells her.\n\n\"You girls be safe and make sure you come back okay?\" Mrs. Gibson says before heading back into the house.\n\n\"We will,\" Jessica answers as she waves goodbye before turning to me. \"We'll let you get back to mowing Jake. See you tonight?\"\n\n\"Count on it.\"\n\n\"We're off to pick up some volleyball gear now.\" Shelly announces.\n\n\"No shorts yet, sorry Jake. You'll just have to wait until next week.\" Jessica jokes.\n\n\"I'll find a way to manage. You two be safe and if you find some hot guy to take you tonight instead of me, let me down gently okay?\"\n\n\"Oh she's already,\" Shelly begins to say.\n\n\"Decided that I won't break our date tonight no matter who we run across,\" Jessica interrupts.\n\n\"Yeah, it'd break my mom's heart,\" I joke and wave as they back out of the driveway. \"I'll see you at six.\"\n\n\"Six,\" Jessica calls back then waves before Shelly pulls off.\n\n****\n\n\"I'm not sure if I should kill you for stopping back there or thank you for not telling Jake I thought he looked hot.\" Jessica says. \"That's not how any football player's body I've ever seen has looked.\"\n\n\"Seen a lot of those have you?\" Shelly teases. \n\nJessica blushes. \"A few girls on my volleyball team dated football guys and they had pool parties a lot.\"\n\n\"Funny you should mention pools because that's why Jake looks the way he does. He picked up swimming a few years back to keep in shape.\"\n\n\"It's working really well.\" Jessica lets slip. \"I mean half the girls in class would be after him if they knew how he looked out of those baggy shirts he wears.\"\n\n\"Probably but he needs someone who wants him for more than how he looks.\" Shelly states.\n\n\"He's been down that road before I take it?\" Jessica asks.\n\n\"In a way but that sort of leads us back around to the story that he needs to tell you when he's ready.\"\n\n\"Don't you mean \"if\",\" Jessica asks.\n\nShelly shakes her head. \"No, I meant when and I think its coming sooner than I thought it would.\"\n\n\"And that's a good thing?\"\n\n\"I hope so,\" Shelly answers as they arrive at the sporting goods store. \"Now let's get you geared up.\"\n\n\"In Wildcat colors if anyplace has them. My old school's colors were red and white; nothing groundbreaking but easy enough to find. The navy blue yeah but burnt orange, really?\" Jessica asks.\n\n\"Oh you'll have no problem finding that around here.\" Shelly shares.\n\nShe leads Jessica in and over to a section that looks as if it's the school store. \"Oh wow,\" Jessica says looking at the pennants, pom poms, socks and other assorted items all in the school colors.\n\n\"When you're school wins the state championship it's kind of a big deal especially in a small town like this.\" Shelly explains.\n\n\"Can I help you ladies,\" A salesperson asks from behind them.\n\n\"Just getting a new Wildcat outfitted,\" Shelly answers.\n\nThe sales clerk sizes up Jessica and asks, \"Cheerleader, right?\"\n\n\"Volleyball,\" Jessica corrects her.\n\n\"Ah, with the height I should have guessed.\" the woman says then begins pulling items from the shelves. When she finishes she notices Jessica's questioning look. \"My daughter spent her four years on the team so I know Coach Morrison's list by heart.\"\n\n\"Cool,\" Jessica says. \"How'd she like it?\"\n\n\"She loved it. She's at NC State this year and is going out for the team there.\"\n\n\"That's awesome. Tell her best of luck from a new Wildcat.\" Jessica says.\n\n\"I will and you knock'em dead. I heard a rumor that we're getting an all-state transfer this year. Now let me ring these up for you.\" \n\nAs the woman walks away, Shelly whispers, \"After you Miss All State.\"\n\n****\n\n\"Jake's here,\" Sarah announces and jumps to her feet when she hears the rumble of his engine.",
        "Mr. Golden laughs and nudges Jessica. \"It looks like someone's more excited for your date tonight than you are.\"\n\n\"She's just anxious to set up her tea party.\" Jessica tells him.\n\n\"Am not,\" Sarah states as she reaches the door. \"What's ank shush mean?\"\n\n\"Sarah, you know how Jess's knees have been bouncing for last hour. That's what anxious mean.\" Dr. Golden laughs.\n\n\"Mom,\" Jessica shouts.\n\n\"I wasn't bouncy,\" Sarah adds.\n\n\"No you weren't so maybe let Jessica greet her guest.\" Dr. Golden suggests.\n\n\"Will that stop her from being bouncy?\" Sarah asks.\n\n\"Probably,\" Mr. Golden answers with a chuckle.\n\n\"If you all keep this up, I'm not letting Jake in.\" Jessica announces but rescinds that when Sarah begin to pout. \"Fine, he can come in, say hey, set up your tea party but then we've gotta go. The seminar starts at seven.\"\n\nJessica opens the door as my finger is reaching to ring the bell. \"Hey Jake,\" she says with a smile on her slightly flushed face.\n\n\"Hey Jess, uh is everything all right? You look a little flushed.\" I ask as she ushers me inside.\n\n\"It's just a little warm in here,\" She answers.\n\n\"She was all bouncy,\" Sarah states.\n\n\"Bouncy,\" I ask as Jessica shakes her head.\n\n\"Jess has a tendency to bounce her knees when she's feeling anxious.\" Dr. Golden explains. \"Welcome back Jake, it's nice to see you again.\"\n\n\"Thank you ma'am, I'm glad to be back.\" I tell her.\n\n\"How's your car running Jake? I sure would like to take her for a spin.\" Mr. Golden tells us.\n\n\"Next time daddy,\" Jessica answers. \"We should probably get going.\"\n\n\"After,\" Sarah chimes in giving Jessica a look.\n\n\"After you set up your tea party with Sarah,\" She tells me.\n\nI kneel down to Sarah's level and ask. \"What day is good for everyone Sarah?\"\n\nSarah looks to her mom and dad who stifle their laughs before Dr. Golden answers. \"Any day after school is good for us Jake. I know you have practice and that can run late at times.\"\n\n\"Not next week,\" I answer. \"The Blue and Orange scrimmage is on Friday so the coaches usually don't push us too hard the week of.\"\n\n\"What's the Blue and Orange scrimmage?\" Mr. Golden asks.\n\n\"It's our tune up for the season. First team plays against second team for a full four quarters.\" I explain.\n\n\"Sounds fun, we should go to that.\" Mr. Golden says looking over at his wife who nods.\n\n\"If it's okay with Jake,\" Jessica asks.\n\n\"It's fine with me. You get in for free and most of the students come out to watch.\"\n\n\"Even Roxie,\" Dr. Golden asks.\n\n\"I take it that you've met Roxie,\" I chuckle. \"She has been known to make an appearance.\"\n\n\"How about you come over Monday then? You can eat dinner with us, give us details on game time, have your tea party and then we can work on homework together.\" Jessica suggests.\n\n\"I really wouldn't want to impose on your dinner,\" I tell her.\n\n\"It wouldn't be an imposition Jake. We'd be glad to have you over for dinner.\" Dr. Golden assures me.\n\n\"We're used to having Jessica's friends over. Our house back in Charlotte felt like teen headquarters.\" Mr. Golden states.\n\n\"As long as you're both sure then I guess our tea party will be Monday Sarah. Is that okay with you?\" I ask.\n\n\"Yep,\" She answers with an enthusiastic nod.\n\n\"Okay then,\" I stand and turn to Jessica. \"We should probably get going.\"\n\n\"Right, just let me grab my purse.\"\n\n\"What time should I have her home by?\" I ask as Jessica departs.\n\n\"How long is the seminar?\" Mr. Golden asks.\n\n\"They're usually around an hour long and then there's a question and answer period afterwards. They can go a half hour to forty five minutes but we aren't required to stay for that to get the extra credit.\" I explain.\n\n\"Well her curfew was midnight,\" Mr. Golden begins but Jessica cuts him off as she reappears with her purse.\n\n\"It was one and it still is.\" Jessica states.\n\n\"That was back in Charlotte where we knew where every place you were going was. Until we get the lay of the land your curfew is midnight.\" Dr. Golden tells her.\n\n\"Twelve thirty,\" Jessica counters. \"And I'll text you each place we stop.\" \n\nMr. Golden sighs and looks at his wife who nods. \"Fine, twelve thirty, but text us so we know where you are.\" \n\n\"I'll text and check in at each place we stop so it'll map on your GPS.\" Jessica answers then proceeds to give her family hugs before leading me towards the door.\n\n****\n\n\"I get to drive already,\" Jessica asks as I lead her over to passenger side of my car.\n\n\"Not until you've gotten a feel for how she drives.\" I answer as I open the door for her. \"What, guy's don't open doors for girls in Charlotte?\"\n\n\"Sure but that's usually reserved for dates isn't it?\" She asks as she slides in.\n\n\"Isn't that what this is? I mean I've heard all around school that's what this is.\" I joke as I hop in.\n\nShe shakes her head. \"This can't be a date because I'm not dressed up enough for that.\"\n\n\"I don't know, you look pretty amazing from here.\" I smile.\n\n\"You better watch it mister because if you keep paying me compliments this could turn into a date pretty quick.\"\n\n\"Duly noted,\" I answer. \n\nAs I crank my car, Jessica giggles. \"Wow, she really does sound like a hell beast.\"\n\n\"Nah, she just purrs a little loud.\"\n\n\"Uh huh,\" She answers. \"So do you have any good tunes to listen to or are the local stations our only hope?\"\n\n\"Pop the glove box.\" I tell her.\n\nShe does and notices the auxiliary slot immediately. \"Oh cool,\" She states.\n\n\"Yeah I know it throws off the old school feel but I need my music when I'm driving and as you've probably found out, the stations around here are kind of lackluster.\"\n\n\"All right then, I'm in charge of the music so hand over your phone and I'll find us something.\" She states holding out her hand.\n\nI do as she requests and soon she's scrolling through my music.\n\n\"Ooo, this looks interesting,\" She states finding something she wants to hear. A moment later Take It Off by The Donna's begins playing out of the speakers. Soon Jessica is bobbing her head along with beat with a smile on her face.\n\n\"Like that huh,\" I ask.\n\n\"Love it,\" She answers. \"I can how you turned Shelly into a rocker. I can't wait to see what else you've got in here.\" \n\n****\n\n\"Well, what's the verdict?\" I ask once I've found a parking space at the planetarium.\n\n\"Of the ride, the town, the planetarium or the music,\" Jessica asks.\n\n\"Up to you,\" I answer before getting out.\n\nShe meets me at the front of the car and we begin walking towards the entrance.\n\n\"The town looks nice,\" She states after some hesitation.\n\n\"Not big enough right,\" I ask.\n\n\"Growing up in a big city was nice but this place seems... I dunno... cozy.\" She answers.\n\n\"Cozy huh,\" I tease.\n\n\"There's nothing wrong with cozy.\" She answers tucking a strand of her ash blonde hair behind her ear. I give her a smile then she reaches out and clasps my hand. I'm confused but I'm not going to yank my hand away from a beautiful girl though I do give her a \"what's going on\" look.\n\nShe smiles and nods her head towards her right. Looking over I see Lee Ann and Dean walking along behind us.\n\n\"And,\" I whisper.\n\n\"Sometimes it helps to give people a little nudge,\" she answers with a smile.\n\n****\n\n\"It's so nice to see lab partners come together to these things.\" Mrs. Harper states as she greets us just inside the planetarium lobby.\n\n\"We wouldn't miss it.\" Jessica answers with a smile.\n\n\"Did you have to drag Jake or vice versa?\" Mrs. Harper jokes nodding down towards where our hands are still clasped together.\n\n\"Well since this is a new city for me I didn't want to give Jake an opportunity to lose me.\" Jessica answers.\n\n\"Jake wouldn't let that happen.\" Lee Ann says as she and Dean join us.\n\n\"Well well, another pair of lab partners arrives together. This is looking to be a great year in this class.\" Mrs. Harper states. \"Lee Ann, were you worried about Dean escaping you as well?\"\n\nI look down and see that Lee Ann and Dean are holding hands as well.\n\n\"No ma'am,\" Lee Ann giggles.\n\nMrs. Harper sighs. \"Okay let's go into the amphitheater for the presentation and I expect the four of you to sit close to the front.\"\n\n\"We'll be with you in just a minute Mrs. Harper.\" I tell her.\n\nShe nods and leads Dean and Lee Ann inside.\n\n\"Problem,\" Jessica asks.\n\n\"You've got a text to send.\" I remind her.\n\n\"Oops, almost forgot.\" She answers then pulls out her phone and narrates her text as she types. \"Checking in. We're at the planetarium. Heading inside now to meet up with teach. Thank Jake for reminding me. Hugs from your Jessi G.\"\n\n\"Jessi G,\" I ask.\n\n\"It's our code to let them know everything is fine. If I don't sign or sign anything other than that and they'll come running,\" She explains.\n\n\"Oh wow, that's not good. I mean the idea is great but isn't that something you shouldn't be telling me?\"\n\n\"If I thought for a second that I'd need it with you I wouldn't be here. Now come on before Mrs. Harper comes looking for us.\"\n\n****\n\nMrs. Harper gives us a nod when we enter the auditorium and Jessica leads us to a pair of seats just in front of Lee Ann and Dean.\n\n\"Nice move with them,\" I whisper to Jessica while we're waiting for the speaker to begin.\n\n\"It worked didn't it,\" She asks nodding to Dean and Lee Ann.\n\n\"I wasn't complaining but if you ask me to make out with you...\"\n\n\"You'll do it without any hesitation.\" She finishes and I just shake my head. \"Don't worry, your lips are safe.\"\n\nDisappointment flows through me but I chuckle. \"That might just be the meanest thing you've said to me yet.\"\n\nShe shakes her head. \"Shut up. Just put your arm around me and watch the presentation.\"\n\nIt's my turn to shake my head but I do as she asks. A few moments later Dean puts his arm around Lee Ann.\n\n\"I'm a matchmaking genius,\" Jessica shares in a whisper.\n\n\"You're something,\" I tell her.\n\n\"You know it,\" She answers as she lays her head on my shoulder just as the lights begin to dim.\n\n****\n\n\"Are you guys heading over to the Thunderbird?\" Dean asks when we all gather at the front of my car after leaving the planetarium.\n\n\"What's the Thunderbird?\" Jessica asks.\n\n\"Don't worry about it and no we're not.\" I answer them both.\n\n\"It's the local make out spot,\" Lee Ann tells her.\n\n\"Oh really,\" Jessica asks nudging me.\n\n\"It's an abandoned drive in theater just outside of town.\" I explain.\n\n\"The woods have all grown up around the place so it's nice and secluded.\" Lee Ann adds.\n\n\"Sounds spooky, let's go see it!\" Jessica says excitedly.\n\nDean and Lee Ann laugh while I shake my head. \n\n\"It's too dangerous to explore at night,\" I answer her. \"I'm thinking of taking Jess to Smitty's for ice cream.\"\n\n\"Ooo, have you been yet Jessica?\" Lee Ann asks and Jessica shakes her head. \"You are in for a treat.\"\n\n\"Best ice cream in the state.\" Dean shares.\n\n\"Ice cream, you say. We might be going to the make out spot and not to explore.\" Jessica teases.\n\nAgain, Dean and Lee Ann laugh while I shake my head.\n\n\"Well we'd better get going before I tease my way out of ice cream. You guys have fun and we'll see you Monday.\" Jessica tells them.\n\n\"Enjoy your ice cream,\" Lee Ann says then hugs Jessica whispering a thank you into her ear as she does.\n\n\"You guys be safe if you head out there.\" I tell Dean who nods.\n\n\"I doubt we will. It's only our second date after all.\" He answers.\n\n\"My driveway is just as good for making out anyway,\" Lee Ann laughs. She grabs Dean by the hand and pulls him towards where they parked.\n\nJessica giggles then says, \"I believe someone mentioned ice cream.\"\n\n\"I did,\" I answer as I open the door for her.\n\n\"Such a gentleman,\" She says giving me a smile. \"How is it that you're single?\"\n\n\"That's a long story for another time,\" I tell her.\n\n\"Whenever you want to talk about it, I'll be here.\"\n\n\"Thanks but I believe I promised a pretty lady some ice cream.\"\n\n****\n\n\"What are you going to get?\" Jessica asks as she looks over the menu behind the cashier.\n\n\"I usually get a vanilla cone dipped in chocolate.\" I answer.\n\n\"That sounds yummy,\" She says.\n\n\"It's almost as good as our sundae's,\" the cashier shares.\n\n\"Ooo, those are my weakness,\" Jessica says with a laugh then makes her decision. \"I'll take a hot fudge sundae please.\"\n\n\"One hot fudge and one dipped cone comes to five seventy three,\" the cashier states.\n\nJessica reaches into her purse but I'm already handing over six dollars. \"I've got it Jess,\" I tell her.\n\n\"Oh okay, thanks,\" She answers.\n\nA few minutes later, we're seated at an outdoor table enjoying our ice cream.\n\n\"How's yours?\" I ask.\n\n\"It's really good. I'm going to have to get mom and dad to bring Sarah here. She'll love it. I gotta text them. At place called Smitty's. BEST ICE CREAM EVER!! Hugs Jessi G.\"\n\n\"I guess I should swing by here before our tea party then?\"\n\n\"Get her all wound up on sugar? You're a lot braver than I am Jake.\" Jessica laughs. \"Seriously thanks for that. Most guys wouldn't pay Sarah any attention much less let her drag him to her room for a tea party.\"\n\n\"It's nothing really. She's like a mini-you so of course I couldn't say no to her.\"\n\n\"Can't say no to me, can't say no to my sister, you are in big trouble Jake.\" She teases.\n\n\"I trust you not to take too much advantage of me. Now Sarah on the other hand,\" I laugh.\n\n\"Sarah is going to eat you alive.\" Jessica announces with a giggle. \"Don't worry though; I've got your back. I won't let her get too far out of hand.\"\n\n\"You'll keep me out of tutus?\" I ask.\n\n\"Not a chance,\" she answers laughing. \"I'll bet you've got great legs.\"\n\n\"Well on that note, I should probably be getting you home.\"\n\nShe pulls out her cell phone. \"It's only a little after ten.\"\n\n\"It's a small town.\"\n\n\"We could always check out that drive in.\" She suggests.\n\n\"I can see that text going over so well with your folks. The cops would be there before we got halfway up the screen.\" I tell her.\n\n\"Wait, you climb the screen?\" She asks confused.\n\n\"There's a staircase inside it. For maintenance, I suppose back when it was in operation. The view at the top is great.\"\n\n\"Of all the people making out below,\" She teases.\n\n\"Ha, ha,\" I say, \"of Belews Lake and of the city lights as long as it's a clear night.\"\n\n\"Like tonight,\" She hints.\n\nI shake my head. \"Tonight would be good but I don't have all my gear with me.\"\n\n\"Gear,\" She asks.\n\n\"The stairs there are good but not great in places. It helps if you can see so I would normally take some headlamps and chemlights with me. Without them it'd be too dark and I'm not willing to risk my favorite volleyball player's ankle before the season even starts.\"\n\n\"Okay I'll give you that one,\" She says then giggles, \"even if I do know the main reason you don't want to risk it is so you don't miss out seeing me in my uniform.\"\n\n\"I happen to think you'll look great in orange and blue.\"\n\n\"I'll make sure to come and find you when I get my uniform so you can give me your honest opinion.\"\n\n\"Without drooling,\" I joke.\n\n\"Yes, without drooling please,\" She laughs.\n\n****\n\nMr. Golden looks up from his laptop when he hears a familiar rumble outside.\n\n\"Is that them already,\" Dr. Golden asks looking up from her hospital papers.\n\n\"I'd say so unless you know another car that sounds like that.\" He answers then looks at the time. \"They're a full hour and a half ahead of curfew.\" \n\n\"You don't think something happened do you?\" Dr. Golden asks.\n\n\"Her texts didn't indicate anything was wrong,\" He answers as they see the headlights play across the living room. \"I guess we'll know in a few minutes.\"\n\n\"We're back,\" Jessica announces quietly a minute later as she leads us into the living room. \"I assume Sarah's asleep.\"\n\n\"About an hour ago,\" Dr. Golden answers. \"Is everything all right?\" \n\n\"We got thirsty after the ice cream.\" Jessica answers.\n\n\"Your place was closer, I hope that's okay,\" I ask.\n\n\"Of course that's perfectly fine,\" Dr. Golden answers getting to her feet. \"Let me get you some glasses.\"\n\n\"We've got it Mom,\" Jessica tells her but she and Mr. Golden follow us into the kitchen. They sit at the table while Jessica steers me towards the stools at the bar. \"Water okay for you,\" She asks.\n\n\"Please,\" I answer. She pulls two bottles from the fridge and hands me one as she sits.\n\n\"Glasses Jessica,\" Dr. Golden sighs.\n\n\"It's just water mom.\" Jessica answers as she takes a sip.\n\n\"So how was the exhibition?\" Mr. Golden asks us.\n\n\"It was pretty interesting but the ice cream afterwards was the best.\" Jessica tells them garnering a laugh.\n\n\"We could tell. I've never seen you use that many exclamation points in a text before.\" Dr. Golden laughs.\n\n\"It's really good ice cream,\" Jessica answers as she fails to hide the blush that's tinting her cheeks. \"You'd have gotten more exclamation points if I could have talked Jake into taking me to the local make out spot.\"\n\nHer parents eyes go wide then they turn towards me and I know I'm about to be tossed out on my ass.\n\n\"Oh not like that. It's an old drive in and you know how I am about seeing abandoned places.\" Jessica explains quickly when she notices the look on their faces.\n\nA look of relief crosses their faces but I think I should take this time to leave.\n\n\"I should be getting home,\" I announce getting to my feet.\n\n\"I'll walk you out,\" Jessica says joining me.\n\n\"Thank you for the water,\" I tell her parents.\n\n\"Anytime,\" Mr. Golden answers but the smile has faded from his face.\n\nOnce we're outside Jessica apologizes. \"I'm sorry that I shot off my big mouth but don't worry, I'll fix it.\"\n\n\"It's fine Jess, you don't have to fix anything.\" I tell her.\n\n\"No I do,\" She states. \"I messed up and this \"date that isn't a date\" was the best date I've been on in long time.\"\n\n\"I find that very hard to believe. You're beautiful, smart and fun to be around so forgive me if I find it hard to believe that an exhibition on weather and some ice cream is the best you can get.\"\n\n\"The abandoned drive in would have shot it straight to the top of the best date ever. I'm being serious.\" She shares.\n\n\"I think it would have gotten me shot by your parents more likely.\" I answer.\n\n\"I'm going to fix that.\" She reiterates. \"Everything will be fine for when you come over on Monday after school.\"\n\n\"Yeah, we should probably postpone that.\"\n\n\"Are you going to let my little Sar-bear down Jake?\"\n\nI sigh. \"You're abusing knowing that I can't say no to you. You know that right?\"\n\n\"How'd you put it the other day, I only use my powers for good, I think it went.\" She answers.\n\n\"All right, I'll be over on Monday as long as it's still okay with your parents.\"\n\n\"It will be, I promise.\" She tells me then glances back towards the house. \"I should be getting back inside.\"\n\nI nod and open my car door. \"See you Monday Jessica.\"\n\n\"I'll text you tomorrow, if that's okay.\"\n\n\"Sounds good, night Jess,\" I say giving her a smile.\n\n\"Night Jake,\" She replies. I watch her walk away as I crank my car and wonder how an actual date with her would have ended differently. \"Get it out of your head Jake, she's out of your league.\" I tell myself as I pull out of her driveway and head home.\n\n****\n\nMonday\n\n\"You're positive that it's okay that I come over tonight,\" I ask Jessica as we sit down for lunch.\n\n\"Oui,\" Jessica answers.\n\n\"Oh, she's busting out the French on you Jake. What'd you do wrong?\" Staci asks with a laugh.\n\n\"He refuses to listen to English so I thought another language might get through his thick skull.\" Jessica states.\n\n\"I did nothing and leave my bone density out of this,\" I defend.\n\n\"You forget that we know you Jake,\" Roxie chimes in. \"So what'd the goofball do Jessica?\"\n\n\"He doesn't listen,\" Jessica answers, in English this time.\n\n\"Oh I listen; it's the believing that I have a problem with.\" I answer.\n\n\"Is this still going on,\" Shelly asks as she and Jody join us.",
        "\"Still,\" Ray asks.\n\n\"Does someone want to bring the rest of us up to speed,\" Bobby asks.\n\n\"After their date that wasn't a date Saturday night Jessica let slip to her parents that Jake told her about the Thunderbird.\" Jody answers.\n\n\"Dean told her,\" I sigh.\n\n\"Technically it was Lee Ann and I didn't say Thunderbird, I called it the make out spot,\" Jessica chimes in still typing on her phone.\n\n\"Whichever,\" Jody says not one to let the truth get in the way of juicy gossip. \"So Jessica's dad chased him out of the house.\"\n\n\"That didn't happen,\" I tell them.\n\n\"Daddy had a gun and a pitchfork too,\" Jessica shares then hands me her phone. \"Answer that when it rings.\"\n\n\"Why am I answering your phone?\"\n\n\"Because you can't say no to me,\" She smiles.\n\nI sigh and sit there as she tells the others about what actually happened on Saturday.\n\n\"Oh Jessica, that was so bad,\" Staci says once Jessica finishes.\n\n\"I didn't mean it how it came out,\" Jessica tells her.\n\nWhen her phone begins to ring, she turns to me with a smile, \"Answer it, it's for you.\"\n\nI look, see that it says \"Mom,\" and sigh but I answer it anyway. \"Hello Dr. Golden.\"\n\n\"Hello Jake,\" She answers. \"Jessica texted that I needed to call and assure you that you are still welcome to come over tonight.\"\n\n\"I'm sorry she bothered you with this ma'am.\"\n\n\"I'm on lunch myself so it's no bother. Jessica clarified a few things after you left Saturday and everything is fine. We're looking forward to seeing you tonight.\" She tells me.\n\n\"Thank you ma'am,\" I tell her. \"I'll be there as soon as practice lets out.\"\n\n\"We're looking forward to it Jake. See you then.\"\n\n****\n\n\"Sarah, what are you doing?\" Mr. Golden asks as he watches his youngest bouncing her legs in rhythm.\n\n\"Being ank shush,\" She answers causing him to laugh.\n\n\"I was not that bad Sar-bear,\" Jessica answers stifling her own laugh.\n\n\"You have better rhythm Sarah,\" Dr. Golden shares as she joins the family in the living room. \"Jessica do you want to go ahead and order the pizza or should we wait for Jake?\"\n\n\"I checked with Mr. Pennington after class and he assured me that practice wouldn't run late so I can probably go ahead and order it. Jake said he'd pick it up on his way here.\" Jessica answers. She pulls out her cell and calls the local pizza place that Jake suggested and places the order. \"Forty minutes,\" She tells them once she hangs up. \"Sarah do you have any homework that you want some help with before Jake gets here?\"\n\nSarah shakes her head.\n\n\"I think that Sarah wants to do her homework with the big kids.\" Dr. Golden tells her.\n\n\"Is that true Sar-bear?\"\n\n\"Uh huh,\" Sarah tells her.\n\n\"Okay, you can help Jake and me with our work and we'll help with yours.\" \n\n\"After tea,\" Sarah says.\n\nJessica giggles and nods. \"Of course, you can't get any good work done before tea.\"\n\n****\n\n\"Thank you for picking up the pizza for us Jake,\" Dr. Golden says as we're seated at the dining room table.\n\n\"It was no trouble ma'am. Dickinson's is right on the way here.\" I answer.\n\n\"That's good to know because if it's always this good I think it's our new pizza place.\" Mr. Golden shares and gets nodded heads in agreement.\n\n\"So tell us about this game on Friday Jake,\" Jessica says after taking a drink. \"What time does it start and anything else we need to know?\"\n\n\"Game time is six but there's a pep rally before so kick off won't be until six thirty.\" I answer.\n\n\"And you say most of the school attends,\" Dr. Golden asks.\n\n\"Yes ma'am,\" I answer.\n\n\"Will your family be there,\" Mr. Golden asks.\n\n\"Yes sir,\" I answer. \"It's most likely the only time they'll see me play so Mom and Dad will be there.\"\n\n\"I've met his mom so I can introduce you guys to them when we're there,\" Jessica tells them.\n\n\"We'd like that,\" Dr. Golden says.\n\nSarah, having had her fill of adult conversation announces that she's done eating. \"Can we have our tea party now?\"\n\nI laugh and nod. \"Lead the way Sarah.\"\n\n\"You've got thirty minutes Sarah then we have to do homework, you included,\" Jessica tells her little clone. \"I'll save you some pizza to take home,\" Jessica tells me.\n\n\"Okay come on then,\" Sarah says taking Jessica's hand.\n\n\"I thought this party was just for you and Jake,\" Jessica asks.\n\n\"Mr. Bear thinks you should come too,\" Sarah answers.\n\n\"Can't turn down an invitation from Mr. Bear,\" I quip.\n\nJessica sighs but gets up from the table. \"I guess I can't but I'm keeping an eye on the clock so we can get our work done.\"\n\n****\n\n\"Wow, okay so that's how you do geometry.\" I state as Jessica, Sarah and I are seated around their kitchen table.\n\n\"That's it,\" Jessica declares. \"I can't believe you were having trouble with it.\"\n\n\"I've never been great with math.\" I answer.\n\n\"I am,\" Sarah states proudly.\n\n\"That's good,\" I tell her. \"Would you like me to sneak you into my class so you can take all my tests for me?\"\n\n\"She'll be in high school soon enough thank you Jake,\" Dr. Golden says as she joins us.\n\n\"You just come over and I'll help you here,\" Sarah informs me.\n\n\"Yes ma'am,\" I answer as Jessica and her mom giggle.\n\n\"So Jake I assume that college is in your future.\" Dr. Golden states.\n\n\"That's my hope,\" I answer. \"It feels like I've been filling out scholarship and grant forms since kindergarten.\"\n\nShe nods and takes a seat at the table. \"Do you have a major in mind or just waiting to see what grabs you?\"\n\n\"I'm leaning towards marine biology.\" \n\n\"Really,\" she asks her smile brightening even more. \"Jessica loves the ocean. We have a place down at Sunset Beach that we go to every summer.\"\n\n\"You should come this year,\" Sarah announces.\n\n\"Sarah,\" Jessica cries out with a laugh.\n\n\"We'll see Sarah,\" I answer also laughing. \n\n\"Let's not make plans just yet Sarah,\" Dr. Golden advises her. \"You should show him your room Jess. She's got it decorated just like the beach house.\"\n\n\"Some other time,\" I state pulling my books together. \"I should be getting home before I really overstay my welcome.\"\n\n\"Well you're welcome anytime Jake.\" Dr. Golden assures me.\n\n\"Thank you ma'am, I appreciate that.\" I answer.\n\n\"Come on, I'll walk you out.\" Jessica states as she gets to her feet.\n\n\"Thank you for all your help with my homework.\" I tell Sarah.\n\n\"Anytime,\" Sarah laughs as Jessica closes the door behind us.\n\n\"See, I told you that everything was going to be okay.\" Jessica points out as we walk towards my car.\n\n\"When you're right, you're right,\" I respond. \"I'm just glad your parents are the understanding types.\"\n\n\"Well telling them how your concern for my well-being is the reason you didn't take us to the drive in probably helped.\"\n\n\"I'm just glad you left out that you think it was based purely on seeing you in your volleyball uniform.\" I answer.\n\n\"Who says I did,\" She asks.\n\n\"I do otherwise your dad would have met me at the door with a gun and a five second countdown to get off his lawn.\" I answer.\n\n\"He likes you Jake,\" She states. \"I'm sure he'd have given you ten seconds... maybe even fifteen.\"\n\n\"Thank God for good first impressions,\" I joke.\n\n\"They work wonders.\" She smiles then glances back towards the house. \"I should be getting back inside.\"\n\n\"Yep,\" I answer. \"I'll see you tomorrow.\"\n\nShe nods and heads towards the door. I get into my car and give her a wave. She waves back before heading inside and I back out of her driveway not noticing Patrick's car parked on the street just a couple of houses down.\n\n****\n\n\"Believe me now,\" Patrick asks Jamie as they watch Jessica close the door.\n\n\"They aren't together,\" Jamie points out. \"The pussy didn't even try to kiss her.\"\n\n\"Probably because her damn folks were watching out the window,\" Patrick snorts. \"Did I tell you how they didn't leave me alone with her for even a second?\"\n\n\"A few times now,\" Jamie sighs. \"I'm still wondering why you are so hung up on this girl.\"\n\n\"She's a challenge and I like challenges.\" Patrick tells him then laughs. \"And if I get a chance to stick it to Jake again then all the more reason, right?\"\n\n\"As long as I get to see his face when you do it, I'm all for it.\" Jamie adds.\n\n\"I may need a little help from you on that front.\" \n\n\"I don't know Patrick, Pennington was watching us like a hawk after the whole Ray thing and I'm first team so I'm not even with them this week.\" Jamie states.\n\n\"Yeah but there is the game coming up and I can guarantee that you'll get some shots on him. Besides you owe him and I figure that laying him out in front of the whole school will even you guys up.\" \n\nJamie laughs. \"I like the way you think.\"\n\n\"Of course you do,\" Patrick chuckles. \"Now let's get this plan in gear.\""
    ],
    "authorname": "AuroraIncident",
    "tags": [
        "football",
        "volleyball",
        "virgin",
        "bullies",
        "high school",
        "nerd",
        "first time",
        "ice cream",
        "date"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/new-girl-in-town-pt-03"
}
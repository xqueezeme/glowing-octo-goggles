{
    "title": "On The Train Ch. 03",
    "pages": [
        "This storyline has become a favourite of mine. If your comments are any indication, you, the readers, have enjoyed it as well. \n\nSo, Samantha and Alex are back for round three. \n\nI hope you like this one, too. \n\nThanks for your time. \n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSaturday morning. Alone in my bed. \n\nShit. \n\nI sniffed the pillow where Samantha's head had rested during last night's urgent satisfaction of our desires. I could smell her perfume. It made her absence feel even more empty. \n\nThe good news...and good was a relative term...is that I could look forward to Samantha gracing my bed every Friday. It's an appointment I was only too happy to make, and one I would never break. \n\nSpeaking of relative terms, I now had two new ones; Cassandra and Chloe. As incredibly beautiful as their mother, if it weren't for Samantha, I would still have a quandary; assuming I had the opportunity, which of the lovely, buxom twins would I choose to pursue? \n\nCassie was the more grounded of the two, in my limited experience. More like her mother. Intellectual, yet humorous. Loyal, but strong enough to step away when that loyalty was betrayed. \n\nChloe, save for a different hairstyle, was a carbon copy physically, but polar opposite in personality. Equally intelligent, she chose to display her wild side regularly. It was the side of her mother that only I got to see. \n\nNow all of this is a moot point; an exercise in useless daydreaming. The reason was simple. I loved Samantha. The rest of the world didn't exist. \n\nI was still lying there, looking wistfully at her empty pillow, when my phone rang. I retrieved it from the bedside table, and looked at the display. My heart did a little jig. \n\n\"Sam?\" I answered. \n\n\"Good morning, Alex,\" she said, in her usual, throaty way. It wasn't her bedroom voice, and she had called me 'Alex', not something more affectionate. I could guess why. \n\n\"Hi Sam. Kids got your tongue?\" I laughed. There was a pause. I could picture her gritting her teeth, and trying to keep a straight face. \n\n\"Yes, it is a lovely day. Do you have plans for today?\" she asked. \n\n\"Do you have any idea how much I want to rip your clothes off?\" I responded, stirring the pot. \"I'd love to spend hours between your thighs, licking that luscious little kitty of yours.\" A little reminder of last night's festivities. \n\nA whimper of agony came through the phone, then became a giggle. \"Well, if you could come over to help us, we'd appreciate it. I'll feed you of course, to make it worth your while. The girls and I are packing up Frank's books and stuff from his office. The boxes are a bit too heavy for us.\" \n\nShe was doing a good job holding her end of the fictitious conversation, giving me information, but not letting her daughters know what was really being said. I couldn't let her off that easily. \n\n\"So, Cassie and Chloe are nearby, and you have to play it platonic. I understand.\" She gave me an 'mmmm hmmm'. \"I'd be happy to come over and help, but I'm going to need more incentive than lunch. Like those soft, pouty lips, wrapped around my hard cock, sucking gently,\" I laughed. \n\nShe repeated the whimper, then hissed a barely audible \"Knock it off!\" \n\n\"Sorry honey,\" I chuckled. \"Just messing with you. I'll take a shower and be there ASAP.\"\n\n\"Thanks Alex. See you soon,\" she replied. \n\n\"I know you can't respond, so just listen. I love you, Samantha Fordham,\" I said honestly. \n\nThere was another pause. The whisper returned. \n\n\"I love you too.\" \n\n***\n\nI pulled into Sam's driveway, and parked. After months of knowing Samantha... and several weeks of 'knowing' her... I was coming to her house for the second time in two days, and I couldn't even act normally. \n\nI rang the bell, and waited patiently. From inside I heard footsteps. The door swung open. \n\n\"Hi Alex,\" Cassie smiled. \"Come on in. Mom's upstairs, and we're going to make some breakfast in a few minutes. I can offer you a coffee?\" She closed the door behind me. \n\nCassandra was certainly her mother's daughter. The body language, hair colour, eyes and general affectations were pure Samantha. She was beautiful now, and if Sam was any indication, would age very well. \n\nI accepted the offered coffee, and followed her into the kitchen, watching her cute ass wiggle along the way. She was wearing shorts, and an oversized t-shirt, off the shoulder, where a bright pink bra strap was revealed to complete the look. I sat at the island, on a stool, and Cassie poured me a cup. She leaned forward as she passed it across to me, giving me a full view of her breasts hanging enticingly in her bra. \n\nThere's no way it was accidental. She was flirting, probably another trait inherited from her mother, who was a champion at turning me on with a subtle flash of cleavage, or a glimpse of smooth thigh. Cassie was being pretty blatant about it, and I was just playing along. \n\n\"Hi Alex!\" I heard from behind, and turned to see Chloe bounding into the room. Bounding... and bouncing, as the bikini she was wearing was hardly up to the task of restraining her own remarkable pair of breasts. She was wet, fresh out of the pool, so the suit was a bit more transparent than it would have been dry. A bit of darker areola showed through the damp white fabric. As expected, Chloe took blatant to new levels, and she came to an energetic halt immediately in front of me. Her boobs stopped a second or two later, jiggling deliciously. \n\n\"You're here to help us?\" she smiled, her eyes sparkling. I nodded. \"Cool!\" she giggled, and turned to fetch something from the fridge. Whatever she was looking for was on the bottom shelf, and her straight legged bend put her own bottom on full display, with only a string of fabric covering her asshole. \n\n\"Jesus, Chloe!\" Cassie gasped, rolling her eyes. \"You're such a tart!\" \n\nChloe stood up, and grinned. \n\n\"I don't hear Alex complaining\" she laughed, opening her bottle of water with more vigour than necessary, to shake her breasts for my viewing pleasure yet again. \"You're just jealous because I have nicer tits!\" \n\n\"We're twins, you moron, and we wear the same size... everything, even bras!\" Cassandra pronounced, letting me know her own endowment was equal to her sister's beauties. She was piggybacking on Chloe's flirt. Smart girl. Of course, Chloe was no dummy either, and she had a parting salvo of her own. \n\n\"Eh, whatever...I hardly ever wear a bra, anyway,\" she winked, and wiggled away upstairs to change. \n\nIt was getting a little warm in here for me, with the girls doing their best to tempt me in their direction. Thankfully, Samantha arrived to rescue me. \n\n\"Hi Alex,\" she smiled, and pecked me platonically on the cheek. \"Thanks for coming.\" She paused, realizing her inadvertent double entendre, and remembering last night, when I did exactly that... cum... deep inside her. She fought back the grin that tried to take over her face, letting it only tickle her lips. \n\nWith Mom in place, Cassandra behaved herself a bit more. She still flirted... As far as she knew, I was available, and since her sister obviously wanted me, she naturally did too. I was the unwilling prize of their sibling rivalry. \n\nMoments later, Chloe returned, sans bra as advertised, wearing a skin tight, sky blue shirt, and tiny black shorts. Her nipples were poking holes in the fabric where it stretched across her unrestrained bustline, punctuating the phrase across the front : \"I'm only responsible for what I say. How much you understand is your problem.\" \n\nWithin seconds, the three of them were flitting about the kitchen like a well choreographed team. I just tried to stay out of the way, and was largely successful, unless they didn't want me to be. \n\nChloe was the first to 'accidentally' rub against my back. \"Oops,\" she whispered, sliding past and dragging her soft orbs across my upper back. Cassie wasn't about to let that go unchallenged, and pressed her own breasts against my shoulder as she reached around me to retrieve my coffee cup. She similarly christened the other shoulder when she brought it back full. \n\nI glanced at Sam, who was busy pretending not to notice her daughters' behaviour, and suppressing a smile. She was getting a laugh out of watching her girls torturing me, but I knew she wouldn't let it go too far. \n\n\"Why don't you head for the table, Alex?\" Sam suggested. \"We'll be in shortly.\" \n\nI beat a hasty retreat, grateful that I would be able to curtail my erection before it became noticeable. Of course, the girls would be disappointed, as that had been their goal. \n\nI wasn't alone long. All three of them soon joined me, carrying plates, and trays of delicious food... eggs, bacon, sausage, toasted english muffins, french toast... all my favourites. Sam had listened intently to our chit chat on the train, for long before we became intimate, and now she was proving it. \n\nCassie put her plate and cup across from me, smiling softly, and was just about to sit when her mother asked her to get something from the kitchen. She left the room, and Chloe immediately took the vacant seat, swapping her mug in place of her sister's. Upon her return, Cassie glared at her sister ominously, but said nothing, taking the spot opposite her mother. \n\nI didn't expect that this meal would fare any better than last night's sushi order had, and I was right. Everyone loaded up, and dug in quickly. \n\nI had a piece of bacon poised for consumption when I felt Chloe's foot, sliding suggestively up my calf. I looked at her, and watched her eat her sausage in a decidedly sexual manner. I had a feeling that if Cassandra had been in that seat, it would have been her foot worming its way up my leg, and her lips miming a blowjob on a sausage. The same for Sam. I was in flirting hell. \n\nChloe took advantage of her spot in my direct view, pressing her breasts into the edge of the table, and dragging them up to rest on top with high beams fully displayed. She tried to pretend she didn't know what she was doing, but I knew better, even thought I'd known her less than 24 hours. Chloe was fully aware of her effect on me, as was Cassie, and most importantly, Samantha as well. The girls had been taught by the master, and I was happy to be her plaything. \n\nThe table was hiding my lap, which had become more than a little crowded. I couldn't help it. Chloe was a very beautiful young woman, and I wasn't blind, so her supposedly innocent displays weren't missed by my libido. Add Cassie and Sam to the mix, and I was powerless to resist. \n\nThe plates were empty, and I was sufficiently fed for now, so I helped load the dishwasher, and we headed for Frank's office, just down the hall. \n\nThe ladies had been busy. No less than fifteen boxes were already full, and waiting for me to move them out to the garage. Frank would be sending someone to retrieve them from there tomorrow. I picked up the first one, and made my first trip. Sam was close behind me. \n\n\"Turn right,\" she said quietly, directing me to my goal. I really didn't need the guide, but she probably had other reasons for doing it. \n\nI followed her directions, and found myself in the garage. She closed the door behind us, and leaned against it, beckoning me with her finger. She didn't have to ask twice. I put the box down, and moved into her embrace, for a kiss that made everything right again. \n\nShe felt so perfect in my arms, with her big, soft breasts squashed between us. We tangled tongues, and pawed at each other, trying to keep from making any noise. I was nibbling her neck, and groping her tits, but she remained in control, and reminded me that we didn't need to get caught. \n\n\"Easy honey,\" she smiled, adding another kiss. \"I just wanted to see how you're holding up. The girls are pretty relentless, aren't they?\" \n\n\"You could say that,\" I whispered back. \"Chloe is really laying it on thick.\"\n\n\"I see that. Do you need me to tell them to knock it off?\" she asked. \n\n\"No, I can handle it,\" I smiled. \"It's kind of fun, in a way... as long as you're okay with it.\" \n\n\"Well...\" she whispered, thinking for a second, \"yeah, I'm good. I trust you, and I trust them to keep being themselves. I just know I'm going to get so much flack from them when they find out about us. Eventually.\" \n\nShe gave me one more kiss, and let me get in a parting grope before she opened the door and went back inside, leaving me alone in the garage with my thoughts, an erection, and a box of books. \n\nI found two 2x4's standing in the corner, and laid them on the concrete floor to keep the boxes from getting damp. Yeah, Frank was an asshole, and he cheated on Samantha, but that was past. I could give him at least this much consideration. \n\nOf course, if he hadn't agreed to Sam's demands, I would have been pissing into the boxes. \n\n***\n\nI was sweating as I dropped the twentieth box on the pile. Man, this guy had a lot of books. His office had been more of a library, but we were nearing the end. \n\nI went back inside, and found no one in the office. There were still about ten shelves full, so we weren't done yet. Where did they go? \n\nWandering out into the kitchen, I heard girlish giggles coming from outside by the pool, and followed the sound. \n\n\"Ah, there you are!\" I laughed. There you are indeed. \n\nChloe and Cassie were both in bikinis again, and Samantha had changed into a sundress. Three sets of tits with miles of delicious cleavage were being offered to my eyes. \n\n\"We're taking a break,\" Sam giggled, peeking over her sunglasses. \"Out of boxes for the moment, and I needed a drink,\" she smiled, lifting her glass. \"Why don't you grab one yourself, and relax.\" \n\nA little rest sounded like a great idea, so I poured myself a cool drink, and took a seat, looking over at the ladies, arranged so nicely on their lounges. Chloe had the white bikini on again. Cassie's was blue, and only slightly more modest. Samantha's dress was a bluish green, like her eyes, and showed her legs quite nicely, as well as her boobs. It was quite a view. \n\nSam slurped up the rest of her drink through the straw, and rattled her glass, looking at the empty vessel with disdain. I jumped up, and took it from her, earning a smile and a thank you. \n\n\"Put about three fingers of rum in that sucker, please,\" she laughed. \"I'm not driving anywhere.\"\n\nI guess this had to be hard for her. Even though she was happy to be free of his betrayal, every one of Frank's books that came off a shelf was a reminder that her marriage had failed. No woman wants that. I put a fourth finger of rum in the glass, to ease her angst just a bit more. \n\n\"Jesus!\" she gasped, taking a sip. \"If you're trying to get me drunk, you're going about it the right way. I should remind you that I am a married woman... for a little while longer, anyway.\" There was a tinge of sadness in her voice. \n\n\"I'm not married,\" Chloe piped up, \"so you can get me drunk. Please do!\" \n\n\"Oh Chloe,\" Cassie sighed. \"You have all the tact of a bulldozer.\" She smiled at me, and dabbed at the sweat in her cleavage. She was more subtle, but equally dangerous. \n\nA few minutes later, Sam had finished her drink, and stood up. \n\n\"Alright, you two,\" she clapped her hands at her daughters. \"Take my car, and go get us more boxes. Cassie... you know the place. I think another dozen should do it. We need more tape, too.\"\n\n\"Is Alex coming with us?\" Chloe asked, eyeing me hopefully. \n\n\"Alex did all the heavy lifting, so he gets to rest for longer,\" Sam pronounced, ending the dialogue. She looked at her watch. \"It's almost lunch time. Bring back some pizza, as well. I'll call it in.\"\n\nThe girls hustled inside to change, and Sam looked at me softly. \n\n\"That should give us a bit of time alone,\" she giggled quietly. \"I really need you. Last night just didn't satisfy my appetite.\"\n\nSam was on the phone ordering the pizza when her daughters came back downstairs. Chloe had a fresh, provocative t-shirt on... 'I know right from wrong. Wrong is the fun one'... but still no bra. She plucked the keys from her mother's hand, and they headed out the door. \n\nI went to watch them go, and Sam finished on the phone, joining me a few seconds later. She pressed herself against my back, and we both sighed when the car was clear of the driveway. \n\n\"We've got forty minutes,\" she giggled, as I turned in her arms. She dropped to her knees, and wrestled my cock free of my pants and underwear. \"I believe you said something about these lips...\" she pouted, \"... around this big hard cock. Mmmmm hmmm.\" She wasted no time, plunging her mouth over the head, and starting a smooth rhythm of bobs and strokes. \n\nI leaned back against the front door, and closed my eyes. Her lips were divine, coaxing my cock to full height, and she sucked happily for about five minutes before pulling back. She stroked me with her hand while she talked to me. \n\n\"As much as I'd like to just suck the cum out of your balls right here, I really need you to fuck me.\" She stood and led the way, up the stairs, and into her bedroom. \n\nShe quickly pulled the dress off over her head, and posed for a moment in her matching blue bra and panties. Walking slowly over to the bed, she sat softly. \n\n\"There hasn't been much action in this marital bed, lately,\" she said quietly, \"and certainly no love.\" Laying back, she rolled her head in my direction. \"Let's show it how it's done.\" \n\nI smiled, and stripped off my clothes, joining her on the nicely appointed king sized mattress. She welcomed me into her arms with a kiss, and rolled atop me. I unhooked her bra, and freed her perfect breasts, letting them rest on my chest, while she continued to peck and kiss me playfully. My hands slid inside the back of her panties, cupping the firm flesh there. Rolling us back over, she smiled as I dragged her panties off down her smooth legs, then spread wide, showing me her very wet vagina. \n\nI knew we were on a deadline, but I just had to lick that gorgeous gash for a few minutes. She moaned as my tongue found the target, delving between her slick labia to taste her juices again. Last night, I had wanted to eat her, but we had a tight time window then, too. I restrained myself to a minute or two of grazing on her succulent folds, then moved up to mount her. \n\n\"Oh shit, Alex,\" she groaned, as I speared her, balls deep. \"Fuck my cunt, you beautiful man! Make me cum!\" \n\nNow there's an idea. \n\nI was leaning up on my arms, looking into her eyes as I drilled her hard. She was gasping in time with my thrusts, a lusty smile on her face. Her bed was a little more springy than mine, and was magnifying the effects of my deep strokes, making her boobs jiggle even more energetically. \n\nSam followed my gaze down to her bountiful, bouncing chest, and laughed, rolling her shoulders to make her breasts even more obvious. \n\n\"Cassie and Chloe may have younger ones,\" she smiled, cupping her tits suggestively, \"but I've got bigger ones!\"\n\nBigger indeed... And I love bigger. Bigger leads to bouncier, and bouncy boobs are my absolute favourite. Put those big bouncy tits on a woman as beautiful and wonderful as Samantha Fordham, and it's little wonder I had fallen for her like a ton of bricks. \n\nI was looking deep into her incredible eyes, getting lost in their blue / green depths. I would never get tired of those eyes. I hoped I'd still be looking into them decades from now. \n\nA sharp gasp from Sam roused me from my musings, and I looked down at her. \n\n\"Oh yes, oh yes, oh... fuck... yes... YES!... YESSSS!\" she screeched, arching her back under me, while wrapping her legs even tighter around my waist. Her pussy clamped down on my shaft with vice like pressure, and she blushed purple with exertion, then relaxed suddenly, panting for air. I watched her breasts shudder and shake with each gasping intake. ",
        "I kept going, reaming her cunt relentlessly. Sam moaned incoherently, and lolled her head from side to side, eyes closed. Soon, her eyes opened again, fluttering as she fought to focus on my face. \n\n\"Whew!\" she sputtered, rubbing her face. \"That was really... Wow! Thank you!\" \n\n\"Anytime, my sweet,\" I grunted, still plunging deep into her receptive, drenched vagina. \"More?\" I asked. \n\n\"Mmmmm, yes please,\" she smiled, pulling me down for a grateful kiss. Those big melons pressed their firm fullness against me, while her tongue danced so happily with mine. I was driving into her, full length strokes that ended with a moan and a slap as our bodies collided. Sam's pussy was making sloppy noises, as she overflowed with lubrication. Maybe the rum was to blame. We'd have to try brandy sometime. \n\nSamantha groaned, deep inside our kiss, and clawed at my back, announcing the arrival of another orgasm on track number one. She pushed me away from her lips, and screamed, as her body quaked yet again. Panting and snorting like a prize filly being ridden hard, she stared holes in my face. The second orgasm just fuelled her fire. \n\n\"Oh fuck YES!\" she hissed. \"Pound my pussy, you fucking stud! Give it to me as hard as you like! I love it! Just fuck the living shit out of me, my love. I'm yours forever! Finish for me! Shoot that hot cum on my big tits, and in my mouth! Come on, honey... Hurry! The girls will be back soon!\"\n\nOh yeah. Got so carried away fucking this exquisite woman, I almost forgot about her daughters. Now that she reminded me, I couldn't help get a mental image of them standing in the doorway, watching me ravage their mother's vagina. It got me boiling. I wonder what Sam's reaction would be? \n\n\"Too bad we can't just let them know,\" I whispered in her ear. \"Imagine them coming home, and finding us right here. You, naked, with your long, slender legs wrapped around me, as I fuck your cunt hard.\"\n\nSam grunted, then moaned repeatedly. \n\n\"Fuck me, Alex! I'm cumming again,\" she smiled, as I found high gear, and really slammed her pussy hard. She gritted her teeth, and groaned through the waves of pleasure. I got caught up in the tide as well. I pulled back, and aimed my slick covered cock at her chest. \n\nSam scrambled up on her elbows, and opened wide, anticipating the first shot, I adjusted my azimuth for the new target, and sent it. \n\nAmazingly, I hit the bullseye on the first try, as a stream of semen arced through the gap between us, and splashed across her extended tongue, going right down the hatch. The second also hit the target, with minimal over spray, but after that, my aim was considerably less accurate. By the time I was done, gobs of goo hung from her eyebrow, nose and chin, and a small pool was collecting in her cleavage. \n\nI flopped on the bed beside her, and we both tried to replenish our depleted oxygen supply. \n\n\"Okay, baby,\" she smiled, still panting. \"I hate to kick you out, but they'll be home any minute. Get dressed, and go downstairs. Try not to look like you've been fucking me senseless. I'll clean up, and be down soon.\" \n\n***\n\nI was using the downstairs powder room, answering the call of nature, and clearing my own plumbing, when the girls got home with the pizza and boxes. I heard them pass on the way from the garage to the kitchen. Then I heard them talking, and realized I could actually hear quite well. The kitchen and bathroom shared a wet wall, and probably the same vent system. I sat quietly, and heard Cassie leave Chloe alone with Sam. \n\n\"Mom... can I ask you a question?\" Chloe asked. \n\n\"Sure honey,\" Sam replied. \"What about?\" \n\n\"It's about Alex,\" Chloe answered. \"How well do you know him?\" \n\nMy ears perked up. Did she know something? There was a pause, then Sam spoke. \n\n\"I don't know. Pretty well I guess. We sit together on the train every day, both to and from work. We've been talking for months. He's a very good listener, and a very good friend,\" she said. \"Is there a question about him?\" \n\n\"Well, I suppose, but it's personal,\" Chloe stated. \n\n\"Then you either ask me, and I tell you what I know, or you ask him yourself. Which is it going to be?\" Sam demanded. \n\n\"Is he, like, gay or something? I've been practically begging him to ask me out. I wore my hottest bikini, and bounced around without a bra all day, but he's not interested. I'm afraid I'm losing my touch,\" Chloe said desperately. \n\nSamantha laughed. I exhaled, and relaxed. \n\n\"Chloe, my darling daughter... there's never a dull moment with you around, is there?\" she smiled. \"Are you asking me if I know why Alex isn't hitting on you, despite your best efforts?\"\n\n\"Yes,\" Chloe replied bluntly. \n\n\"What does your sister say?\" Sam deflected. \n\n\"I didn't ask her. She wouldn't tell me anyway. She's been doing the same thing, in her own, pathetic way,\" Chloe answered. \n\n\"I see,\" Sam giggled. \"I think Alex has a girlfriend, honey. That's probably why he's not jumping on you. He says he's quite happy with her.\"\n\nI was still listening, but I'd heard enough. Besides, they'd soon come to see if I had gone down the drain, so I flushed the toilet and washed my hands, then walked out and went to the dining room. Sam and Chloe joined me a moment later, the Cassie was right behind them. \n\n\"Pizza!\" Samantha called, as she put the boxes on the table, with a smile. \n\nI was smiling too, but mine was for a personal reason. The conversation I'd overheard had touched my heart. I loved Samantha even more than ever. \n\nOur quick coupling may have satisfied one hunger, but it raised another, and I attacked the pizza with vigour. \n\n\"Jeez Alex, you must really be working hard with the boxes,\" Cassie commented. \"You're really packing it away!\" \n\nMy mouth was full, which gave me a chance to consider my response, and glance quickly at Sam. She was suppressing a smile and hiding behind her own slice of double pepperoni and cheese. Yes, working hard...that's why I'm hungry... certainly not because I just finished fucking your mother to three orgasms upstairs, moments before you got home. No, it's just the boxes. \n\n\"Yes,\" I smiled between bites. \"Heavy boxes.\" \n\nSpeaking of boxes, by the time we were done, the pile in the garage was eight wide, and four tall. My job complete, Samantha walked me out to my car. \n\n\"Thanks for all your help, Alex,\" she said loud enough for her daughters, peeking out the front door, to hear. She turned her back, and continued, at a more private volume, \"And I do mean all your help. I'll call you later from bed.\" \n\nThe girls both waved as I backed out, and Chloe blew me a kiss. \n\nApparently, the news that I had a girlfriend wasn't enough to stop her. \n\n***\n\nWhen my phone rang that night, I was ready. It was already in my left hand. My right was busy holding something else. \n\n\"Hi baby,\" I answered. \n\n\"Hello darling,\" she intoned, in a throaty whisper. \"I hope I didn't work you too hard today. With the boxes, I mean. The bedroom doesn't count.\" \n\n\"I'm a bit sore, but I'll live. If you were here, I'd show you,\" I laughed. \n\n\"If I were there, I'd let you. I'd probably insist on it,\" she chuckled back. \"I assume you are in bed?\" \n\n\"Yes, honey, I am,\" I replied. \"What are you wearing?\"\n\n\"Absolutely nothing, except a smile,\" she sighed. \"I'm horny.\"\n\n\"Only on days that end in 'y',\" I smiled. \n\n\"Sarcasm will get you nowhere,\" she laughed, \"even if it's true. Before we get to business, I need to tell you something. Chloe was asking questions about you today. She's more than a little interested.\"\n\n\"Really?\" I answered, deciding to keep my completely innocent eavesdropping to myself. \"What did she want to know?\" \n\n\"Well,\" Sam giggled, \"first she asked if you were gay! She can't believe you're not all over her. I don't know if you noticed, but she was throwing herself at you.\" \n\n\"Um, yeah, I got that impression. What did you say?\" \n\n\"I told her that I was sure you had a girlfriend, and it wasn't a slight on her considerable feminine wiles,\" she said softly. \"I just didn't tell her I saw your girlfriend, every morning, when I looked in the mirror. I wonder how they'll take that bit of information?\" \n\n\"I'm sure, when the time comes, they'll be fine,\" I suggested. \n\n\"I hope so. Nothing I can do about it right now, anyway.\" A sexy purr reverberated in my ear. \"So, my love... If I was in your arms right now...\" \n\n\"Mmmmm, well, after I finished kissing your sweet lips, and sucking on your tongue, I think I'd slide down your body, kissing every inch along the way,\" I whispered. My hand... the right one... began to stroke my stiff cock. \n\n\"Oh god,\" she breathed, \"tell me more. Let your words guide my fingers.\" \n\n\"Your nipples... I would latch on, and suckle you like a hungry baby,\" I continued. \n\n\"Mnahhhgnh!\" she gasped. \"Yes darling, that's so good! Suck my tits!\" \n\nI could see her, laying there, tugging her stiff nipples, and pinching them the way I did with my lips. \n\n\"Soon enough, I'd move down between your legs, to lick your juicy pussy,\" I teased. My cock was rock hard. \n\n\"Oh shit, yessss...\" she groaned. \n\nI yearned for the time when we could be together, and do to each other every night the things we could now only describe. \n\nSoon enough. \n\n\"My tongue traces a line, from your tight little asshole, up through your soaking pussy, to circle your clit...\" I told her, listening to her moans of joy... \n\n***\n\nWednesday evening, I was resting at home after work. The day had been pretty normal... train in both directions, great conversation with my secret darling Samantha, boredom at work in between... but it was about to become a turning point. \n\nThere was a knock on my door. Unexpected, but not unlikely. I answered it. \n\n\"Hi Alex!\" Chloe sang brightly. \"Surprise!\" \n\nSurprise? Surprise? What's a stroke feel like? I might be having one, right now. \n\nShe stepped in before I could even react, and closed the door behind her, leaning against it. I tried to gather my wits. \n\n\"Chloe... How did you find me?\" I asked, buying time. \n\n\"Mom's car has GPS, and you're on the list. She sent me out to run some errands, and I found you by accident.\" She stepped forward, and I stepped back, trying to maintain the gap between us. \"Or maybe it was fate,\" she smiled, taking another step. I retreated again. \n\nI barely survived her flirtatious behaviour when I had others around to dissuade her from going all out. Now, alone with her, my apartment suddenly felt waaaay too small. I matched her, step for step. \n\n\"Alex, my mother says you have a girlfriend,\" she asked softly, walking closer. I moved away. \"Is that true?\" \n\n\"Um, yes... that's true,\" I replied, looking around for an escape route. I couldn't afford to get cornered. \n\n\"Is she here, now?\" Chloe purred, continuing her advance. \n\n\"Um, n-n-no,\" I stumbled, angling away. \n\n\"Too bad,\" she giggled, \"Maybe we could share you?\" \n\nThat caught me by surprise, and I hesitated, letting her change her path, and trap me in the kitchen. \n\n\"Alex, I've seen the way you look at me,\" she whispered, gliding closer. I was running out of room. \"I know you find me attractive, and I'm sure you have guessed how I feel about you.\"\n\nOh shit, I thought as my butt hit the counter top. She had me. \n\n\"Chloe... Please...\" I whimpered, as she closed ground. One step away, I realized that my cock was betraying me, and was hard as steel, despite my conscious thoughts to the contrary. Maybe she won't notice.... \n\n\"Alex! My goodness! What have we here?!\" she gasped. Her hand caressed my bulge. \n\nShit! I closed my eyes, and could feel her breath on my neck. \n\n\"That's some cock, Alex,\" she breathed. \"It seems to be willing. Maybe it would help if I took some clothes off?\" \n\nI opened my eyes, and she was smiling. \n\n\"Ooooo, you are interested!\" she grinned, and began to unbutton her blouse. \n\n\"Chloe, please, you don't understand,\" I begged. \"I can't. If the situation were different, I would love to...\" Her fingers opened the neck of her blouse wider. There was no bra under it. My eyes snapped shut again. \"Shit! Chloe, no...\" \n\nI grabbed her hand and pulled it away from my crotch, then pushed her back against the cupboards. \n\n\"Oh yes, Alex! Be forceful! Take what you want!\" she gasped. Her chest was heaving with her excited breathing. \n\n\"Chloe,\" I said sternly, \"I'm trying not to hurt your feelings, but you're not making it easy. I've told you 'no', and I mean it. Now, knock it off!\"\n\nI was angry... at the situation, not being able to be honest, and myself, for letting her get the better of me. When I looked into her eyes, she had one last trick. If flirting wasn't enough, and blatant seduction wasn't enough... \n\nTears. \n\nNot fucking fair. Women know that men can't stand a woman's tears, so they always have a trump card. \n\n\"You don't think I'm pretty?\" she sniffed, adding a pout for good measure. \n\nOkay Alex, I thought, be careful here. She's trying to get you to admit that you think she's hot. If you do that, she'll use it against you, and take control again. Of course she's pretty... and gorgeous... and built. I'll bet she's an absolute demon in bed, and if her tits are like her mother's, then they're spectacular, albeit a cup size smaller. Whether or not she's fuckable isn't the issue. Talk about a stupid question. My cock wasn't hard by accident. The issue is Samantha. Remember her? The woman you love? The woman who's already been cheated on once. You can't do this. \n\nBut, you don't want to hurt Chloe either, do you? You can't just reject her, without reason, and giving her a reason that isn't a lie might be dangerous. It might fuck things up completely. \n\n\"Chloe... you don't need to ask that,\" I replied carefully. \"Yes, you are very pretty. If my heart wasn't already spoken for, I would be honoured to have you on my arm.\" \n\n\"It's not your heart I'm interested in,\" she giggled, pushing the tears aside for a moment. \"At least, not right now... and I'd rather be under you, than on your arm.\" As expected, she was pushing me back, trying to regain the upper hand. Her blouse was still open, showing me almost half of each firm globe. Yep, those are nice tits. \n\nI put my hand on her shoulder, and stopped her advance. She shuddered at my touch. \n\n\"No. I'm saying no, Chloe.\"\n\nShe looked at me in shocked disbelief, as though no one had ever turned her down before. That may well have been the truth. Her expression changed to one of disappointment, then a bit of anger crept in. \n\n\"Fine! Be like that!\" she spat. \"You have no idea what you're missing!\" She held her blouse in both hands, poised to rebutton it, with just a hint of her areolas showing. \"Last chance?\" \n\nI shook my head. \n\n\"She'd better be worth it!\" she snapped, and turned away, buttoning up. \n\nShe was hurt, and angry... exactly what I was hoping to avoid. She wasn't leaving me much choice. \n\n\"Chloe,\" I sighed, \"come here, please.\" \n\n\"Fuck you!\" she snarled. \"You had your chance!\" \n\nI took a seat on one of the bar stools of my breakfast bar, and asked again, gently. \n\n\"Please, let me explain. I know I've upset you, and I apologize for that, but if you'll hear me out, maybe you'll understand. I'm asking for your help.\" \n\nMy tone, and asking for help, seemed to soften her a bit. She crossed her arms over chest, and stood in place, obviously annoyed. \n\n\"Alright... I'm listening,\" she said quietly. \n\n\"Before I start, I need to ask a question, and I need you to be absolutely honest with me. May I?\" I asked. \n\n\"Whatever,\" she rolled her eyes. \"Ask.\" \n\n\"How do you feel about your father, and what he did to your Mom?\" I offered. \n\n\"What the fuck does that have to do with this?\" she scowled incredulously. \n\n\"It's important, Chloe. Just answer me honestly.\" \n\nShe seemed to relax, and understand that I was serious. She uncrossed her arms, and walked over, taking a seat next to me. Her brow furrowed, considering her response. \n\n\"Um, let's see, well... first off, he's my father, and on that level I'll always love him and respect him. But as a woman, I find his conduct disgusting. I'm amazed my mother didn't dump him years ago, and if I had known about him cheating, I would have told her in a heartbeat. If I was in her place, married to him all those years, and he did that to me? Well, I'd be the hottest widow in prison.\" She sat back, and crossed her legs, then stared at me. \"Honest enough?\" \n\n\"Yeah,\" I smiled, \"that will do. One more caveat... you can't tell anyone. No one. Not even Cassie. No one can know this, or that you know this.\"\n\n\"Fuck!\" she said in exasperation. A smile crept into her expression. \"This must be pretty juicy. Alright. I swear. Not a word. Now tell me.\"\n\n\"I have a girlfriend...\" I began. \n\n\"Yeah, I got that from Mom, and you already used it as an excuse. You'd better have more than that, or I'll be pissed,\" she grinned. \n\n\"I do.\" Oh boy... Do I ever. How to phrase this?  \"My girlfriend is someone you know.\" I hoped I wouldn't need to elaborate any further. She was a smart girl. She'd probably figure it out. \n\n\"That's it? That's the big secret... that I know your girlfriend? I want details, not riddles,\" she laughed, but I remained silent. \"That's all you're giving me to work with?\" \n\nI smiled and nodded. \n\n\"I know so many people,\" she said, tapping her lip with a thoughtful fingertip. \"Okay, so you're not gay... that erection proves you like girls,\" (I blushed), \"so eliminate the males. I assume it's not someone I know from where I'm living now. Too far away.\" She was studying my face, reading my reaction as she spoke. \"That leaves this area. Hmmm. That narrows the field considerably. I can't think of any women I know who would need to keep...\" she paused, and her eyes opened wide, \"... a... secret? No!\" \n\nChloe put her hands over her ears, desperately trying to un-hear what she now knew. Her eyes were screwed shut, and she was breathing in sharp snorts. \n\n\"Oh, no, no, no, no, no, no, no, no, no, no, no...\" she whispered. \n\n\"Yes,\" I smiled. \"I'm in love with your mother. That's why I can't... you know... with you. You understand, now?\"\n\n\"You've been...\" she sighed, \"... you know... with her, though?\"\n\n\"Uh, yeah,\" I answered, bracing for a possible shit storm. \n\n\"How long?\" she asked bluntly. \n\n\"Just since she decided to end it with your father. It just happened.\" Okay, it was mostly true. Close enough for now. \n\nHer eyes opened again, and she smoothed her hair. Her breathing returned to normal. \n\n\"I came on to you pretty hard,\" she said softly. \"You must really love her. Thank you for not, um... you know.\"\n\n\"It wasn't easy,\" I smiled. \"You're pretty persuasive, and very much your mother's daughter.\" \n\n\"Really?\" she smiled. \"Thank you. There's no one I'd rather be more like. My mother is a wonderful woman.\" \n\n\"Don't I know it. That's why I love her,\" I said, touching her hand. \"So now you know. I'm trusting you, big time, but I'm glad someone else knows. It was making me crazy.\"\n\n\"Wait... Did you two?...Yesterday? While Cassie and I were out,\" she giggled. \n\nI didn't answer, but there was no way to stop from smiling. \n\n\"Hmmm. I thought she was more relaxed after lunch. I put it down to the rum, but now I can see it. How close were we to catching you? It had to be a quick one,\" she smiled back. \n\nI held up finger and thumb, indicating 'close'. \n\n\"Well, take your time from now on,\" she laughed. \"Mom deserves it.\"\n\nChloe stood, and stepped in for a hug. She really did feel delicious. Her boobs were very soft. \n\n\"Oh, and I'll, uh... I'll wear a bra around you from now on,\" she snickered, but didn't rush away from my arms. \n\n\"No need,\" I chuckled. \"I'm allowed to look, as long as I save it for her.\" ",
        "\"Yeah. Cassie would probably know something was up, anyway. It would be so unlike me.\" She pulled back, and looked into my eyes. \"You're sure I can't tell her? I share everything with her. It feels weird keeping secrets.\"\n\n\"Let's keep it tight for now. I'll talk to your mother, and see what she says. I'm probably on thin ice for telling you, as it is.\"\n\nChloe nodded, twisted an imaginary key in the lock on her lips. \n\n\"I'd better get going. Mom will begin to worry. Thanks for confiding in me, and thanks for not... you know,\" she giggled. I walked her to the door, and opened it for her. She was just about to step out when she wheeled around, and... kissed me! Hard, right on the lips!\n\nI was stunned into immobility, and she didn't just peck-and-go. Her tongue wiggled past my lips, and probed my mouth. I tried not to kiss her back, but it was pretty difficult no to. I pushed away, but she had a firm grip on my head. Finally, she released her embrace. \n\n\"I thought so,\" she smiled. \"We could have been great together!\" \n\nWith that she was gone, save for a flutter of her fingertips and a lusty laugh as she walked away. \n\nI closed the door, and took a deep breath. \n\n\"Wow... definitely her mother's daughter.\" \n\n***\n\nThursday morning, I was in my usual spot on the train. Samantha boarded from her station, and sat across from me, a smug smile on her face. \n\nLast night, I briefly considered telling her that I had spilled the beans to Chloe, and why. That would have been the best course of action, but it would have completely destroyed the mood of our nightly obscene phone call. So, I held back, waiting for today, on the way to work. It was going to be a different conversation than usual, that was certain. \n\n\"I really had fun last night,\" she said quietly. \"I'll have to let you do that for real some time.\"\n\nSam had become more interested in anal play recently, and last night I had described in detail what I wanted to do to her butt. She had cum twice in rapid succession, perhaps with her finger taking the place of my tongue. I smiled at her and nodded. \n\n\"Anytime you'd like,\" I laughed. \"On a more serious note, I need to talk to you about something important. I should have told you last night, but I wanted to do it face to face.\"\n\nA concerned expression crossed her face. I suppose my words might have been taken in a disconcerting way. I tried to ease her mind. \n\n\"It's okay... I'm not leaving,\" I added. She looked around, and lowered her voice. \n\n\"You're not proposing, are you?\" \n\n\"No!\" I gasped, then matched her conspiratorial tone, \"unless you want me to.\" \n\n\"Hmmm,\" she smiled, relaxing visibly. \"Not today, okay? I'll tell you when.\" She sat back and recrossed her legs. \"Okay. What's so important?\" \n\nI had rehearsed this. Why was it suddenly so scary? \n\n\"I had a chat yesterday...last night actually... with Chloe.\"\n\n\"What?!\" she gasped. \"How? When? What did she say?\" \n\n\"It's okay, honey,\" I smiled. \"She went out to run errands, in your car, right?\" Sam nodded, and rolled her eyes. \n\n\"Fucking GPS!\" she hissed. \"I should have deleted that, shouldn't I? I guess the horse has already left the barn. Sorry about that. So... What did you talk about.\"\n\n\"Well, when she first arrived, she seemed to be more interested in fucking than talking,\" I told her. \n\nSam looked at me. Her eyes lost focus, and she spoke softly. \n\n\"Uh huh. You didn't...?\" \n\nI switched to the seat next to her, quickly. Her eyes followed me, but she didn't turn her head. I took her hand, and could feel the tension in her body. \n\n\"Samantha? No!... Of course not!\" I replied. She exhaled, and relaxed. She looked at me and smiled weakly. \n\n\"Sorry. Fresh wound. I should have known better,\" she said, looking guilty. \"Forgive me?\" \n\n\"Nothing to forgive, baby,\" I patted her hand. \"That's exactly why I never would, but it's also why I had to do what I did.\" \n\n\"That's going to take some explaining. What did you do?\" \n\nI took a deep breath, and started. \n\n\"Well, she was coming on pretty strong. I was trying to stay away from her, but she was not going to take 'no' for an answer, and kept pursuing me.\" Sam giggled. \n\n\"I'm sorry... I just have this picture of her chasing you around the apartment.\" The giggle grew louder, then she gained control. \"She, uh, she's pretty headstrong, isn't she? Did she catch you?\" \n\n\"Yes. Yes she did. Cornered me in the kitchen. Started to unbutton her top. Also grabbed my crotch, before I could get her to listen to me. She even tried the crying routine.\"\n\nSamantha sighed. \n\n\"Where did I go wrong? She always was a child with a mind of her own. I'll talk to her,\" she apologized. \n\n\"No need. We came to an understanding, but I couldn't just reject her without some kind of reason. I didn't want to hurt her, but I didn't want to lie to her either.\" \n\nRelatively speaking, Sam figured it out instantly. \n\n\"You told her, didn't you?\" she sighed, tilting her head back, and closing her eyes. \n\n\"Yes.\"\n\n\"Oh boy,\" she breathed. \n\n\"I swore her to secrecy. She promised not even to tell Cassie. Or you, for that matter. She's on our side. You should have heard what she said she would have done to Frank if she was you. I think we're still good.\"\n\n\"Yeah, you're right. I know it had to happen at some point, and at least Chloe can keep her mouth shut. Cassie can't know until the divorce is final, or I'm sure she'll blab. Not intentionally, of course, but she always had loose lips. I had just hoped it wouldn't come out yet,\" she smiled. \"Should I explain it to her?\" \n\n\"Yeah, she asked if she could tell her sister, but I told her it was up to you, so it would be better if you told her,\" I replied. \n\nSam leaned against my shoulder. Several minutes of silence followed. She finally turned to me and smiled again. \n\n\"Any more surprises today?\" she asked. \n\n\"No Ma'am,\" I shook my head. \n\n\"All righty then,\" she giggled, and rested her head back against me. \n\n***\n\nFrom what Samantha told me, before we got down to the fun part of our nightly call, Chloe took the news that she was to remain muzzled as well as could be expected. She even agreed that her sister was a gossip, and promised to keep her silence. \n\n\"You really surprised me this morning,\" Sam laughed. \"I had no idea Chloe came hunting for you in person. Have you recovered?\" \n\n\"No permanent damage,\" I replied. \"I admit I was a little surprised to see her at my door, as well. At least I got my exercise running away from her.\" \n\n\"I can't get that picture out of my head,\" she snickered. \"You, on the retreat, with Chloe stalking you like you were an antelope on the African plains! I guess it's lucky I caught you first. You might have preferred a younger model instead.\" \n\n\"Nah, I prefer my women perfected by time, like fine wine. Anything else is just grape juice,\" I laughed in return. \"Seriously, Sam... I love you, just the way you are. I wouldn't change a thing.\" \n\n\"Alex, honey... I, uh... you always know just what to say to ease my mind. I love you too,\" she whispered. \"Now, if I recall correctly... you started us off last night, didn't you?\" \n\n\"Um, yeah, I guess I did,\" I replied. \n\n\"Alright. Then it's my turn,\" she growled. \"I'm on my knees, in front of you, unzipping your pants. Your cock... Mmmmm, I just have to have it... to feel the velvety skin of the head, and the hard, hot shaft, as I suck it into my mouth.\"\n\n\"Oh god, Sam, yes, suck my cock,\" I breathed, stroking myself slowly. \n\n\"Mmmmm, I can taste you. The sweat... the salty sweetness of your pre-cum, leaking out into my mouth... \n\n***\n\nFriday arrived. Most people have the attitude 'thank god it's Friday' simply because they don't need to work on the weekend. It was a respite from the mundane rat race lives they lived. \n\nTo me, T.G.I.F. had a much more personal meaning. Tonight, there would be no phone sex. Tonight, I would again feel my darling Samantha's body in my arms. I would again taste her lips, and smell her hair. For me, Christmas came every Friday, until it would finally be an everyday occurrence. That day couldn't come soon enough for me. \n\nThis time, Sam was the one with the interesting news, and she had a smirk on her face as she sat beside me on our morning commute. \n\n\"Just when you thought it was safe to go back in the water,\" she giggled. \"I had an interesting chat with Cassie this morning. She was asking if you were coming over again this weekend. You may have dealt with one, but the other is still after you.\" \n\n\"Ack!\" I gasped.\" What did you say?\"\n\n\"I said you had a life of your own, and it wasn't fair to assume that you were available. I hoped that would be enough, but she had obviously thought this through.\"\n\n\"So, she had a rebuttal?\" I asked \n\n\"She reminded me that she and Chloe were only here for one more week, and that there was still plenty to do,\" Sam replied. \"That's true, but I still think she has ulterior motives for wanting you to help.\"\n\n\"Yes, I've seen those motives in action,\" I laughed. \n\n\"Then she said that having you around would be handy. More hands make light work... you never know when some muscle might be needed... that sort of thing. Mostly, she was trying to justify asking you to give up your weekend,\" she smiled. \"I'd say she wants another shot at you.\" \n\n\"I must say...your daughters are doing wonders for my ego!\" I smiled. \"Too bad Cassie doesn't know who she's really competing with. I'm sure she'd admit defeat, if she did.\"\n\n\"Talk about good for the ego!\" she laughed, fanning herself for effect. \"She's right about one thing though; I might just need your help... with something that only you can do, if you get my drift.\"\n\nI smiled, and nodded, then lowered my voice. \n\n\"Speaking of which...\" \n\n\"Oh yes... I'll be there,\" she whispered. \"It's going to be a looooong day! If only we didn't need to be so careful. I'd meet you for a quickie in the bathroom at lunch!\" \n\nYes, if only... Come on lawyers! Get your shit together! Finalize the divorce, and free us to be together! \n\n***\n\nSam was right... It was a looooong day, made even looooonger by the aforementioned lunchtime quickie that we both knew wasn't going to happen, but that we both desperately wanted. \n\nThe train home made it even worse. Sam sat across from me, smiling warmly, looking just so damn delicious in her light summer dress. The motion of the train seemed somehow more pronounced today, but maybe it was my sexually fired imagination. Whatever the reason, Samantha's big, beautiful breasts were making me crazy, jiggling and bouncing with the ride. Not enough to be obvious, but more than enough for my hyper-attentive eyes, which registered every ripple and twitch of her sumptuous flesh. \n\nApproaching Sam's stop, she stood quietly, and patted my shoulder as she passed. Her touch fanned the embers again, but I knew I had to wait until eight tonight, before the flames erupted completely. At least that was only about an hour and a half away. \n\nI found a TV show to distract myself with for a few minutes, and took a shower after that, resisting the urge to jerk off under the warm, relaxing spray. Freshly cleaned and dried, I dressed casually, and went to see what our dinner options might be. \n\nThe knock on the door came earlier than I expected. Answering it quickly, I opened the door wide. My breath caught in my throat. \n\nSam stood silent, holding her purse in both hands in front of her. Black, high-heeled, calf-high boots adorned her delicate feet. A trench coat covered her from mid calf upward, it's sky blue colour working perfectly with her eyes and platinum mane. She was smiling at me. \n\n\"Hi, lover,\" she whispered, stepping in. \"I'm sorry if my being early is a problem. I couldn't stay away any longer.\" \n\nI closed the door behind her, and realized I hadn't breathed recently. When I turned to face her, she was inches away, eagerly anticipating my kiss. I didn't make her wait. Our lips met softly, and we wrapped each other in an embrace that spoke to our feelings. When we finally separated, we remained in each other's arms. \n\n\"I need to apologize to you,\" she said softly. \"When you told me, earlier this week, about Chloe, and that she knew about us, I was a little concerned. As it turns out, it's been a bonus, being able to talk to someone about my feelings for you. We haven't had many chances, as Cassie keeps popping up when you least expect her, but Chloe and I have had a few quick conversations. She's on our side, as you said, and she's even running a little interference for us with her sister. And... \" she smiled, stepping back with a little twirl, \"...she helped me pick my outfit for tonight. I think you're going to like it.\"\n\nWell, now that you mention it, I thought. Boots, check... trenchcoat, check... I wonder what's underneath? I don't see anything but skin through the neck of the coat. Is she naked under there? \n\n\"Samantha... are you going to make me beg?\" I asked. \n\n\"Hmmm, that has a certain appeal,\" she giggled. \"All that power could go to my head, though. I'd be willing to settle for you asking nicely.\" \n\n\"Please, darling, love of my life... Queen of my heart... fairest of them all... take off your coat,\" I asked. \"Show me.\" \n\nShe extended her right leg, letting an expanse of stocking covered thigh part the folds of her coat. Smoky black, the stockings were actually more like fishnets, and went with the boots nicely. She teased me with the view for a moment, then tugged at the belt, beginning to loosen it enticingly. She turned away, hiding the flesh she revealed as she opened the front. She draped the coat off her shoulder, showing me nothing but skin, and a provocative smile. With both shoulders bare, she pulled the coat closed and turned back to face me. Again, only skin, and a little cleavage. With a final flourish, she opened her arms. \n\nOh good lord! My mouth hung agape. \n\nDefinitely not naked. What she was wearing was so much better than naked. \n\nIt was a bustier, with matching thong and garters. Black, with a blue pattern of silk on the surface, it started at her navel, and ended with a strapless demi-cup, that almost covered her nipples. Almost. A deep V revealed her d\u00e9colletage. Long garters went from the upper half, down under the waist of her thong, to hold up the stockings. As she turned to display her back, I saw how it was laced up, and of course, her fantastic ass, with only the string of floss between her cheeks. She tossed the coat aside, and faced me, giving the impression of a little girl, unsure of her new dress. \n\n\"Do you like it? Does it make me look pretty?\" she giggled. \n\nPretty? Are you fucking kidding me? Pretty? Oh my god! My cock was doing its impersonation of a titanium spear. She was the hottest, sexiest, most unbelievably fuckable piece of femininity I had ever seen... and thanks to Frank's idiocy, she would soon be my own, personal MILF, for the rest of time! \n\n\"Um, you said Chloe helped?\" I croaked, trying to keep from stepping on my tongue. \n\n\"Yes. I suppose 'helped' is an understatement,\" Sam smiled. \"She bought it for me. I think she's got great taste.\"\n\nI had a brief mental picture of Chloe's body in the outfit. Sam's big tits were spilling out the top, so it's possible... maybe likely... Chloe bought it for herself, and gave it to her mother after she realized she wouldn't be wearing it for me. Either way, Sam looked spectacular, and she was going to get fucked so hard tonight. \n\n\"Tell her I said thank you,\" I laughed, as I scooped Sam up, and headed toward the bedroom. \"And, since she'll be gone in a week, you can tell her what she's missing, too. Why should she have all the flirting fun?\"\n\n\"Ooooo, that's cruel!\" Sam chuckled. \"Fair, but cruel!\" \n\n***\n\nIn the bedroom, I laid her softly on the bed. The only thing wrong with the outfit was the thong, blocking my access to her delicious pussy. I solved that problem by tugging the small triangle of fabric off over her hips, and tossing it across the room. \n\n\"There's the kitty,\" I whispered, and took my place between her stockinged thighs. I peeked up her body, through the valley of cleavage on her chest, and saw her beautiful eyes smiling back at me. \n\n\"I can't believe I almost stopped you, the first time you went down on me. Fucking Frank! Depriving me of decades of getting my pussy licked!\" \n\n\"Well, I can't speak for his motivation, but I'm never going to stop. You're just so fucking delicious!\" I smiled. Talk was getting in the way of what I wanted to do. \n\nI started by reaching for her newest favourite target with the tip of my tongue. She sensed my goal, and lifted her legs higher, grasping behind her knees. She pulled them to her chest, making it easier for me to target both entrances. \n\nI aimed for her tight little sphincter, and pressed my wet tongue against it. Sam groaned, and shifted her hands, spreading her cheeks for me so I could get at her ass without restrictions. Her puckered rear entrance flexed and danced under my tongue, indicating her enjoyment quite nicely. Sam didn't mind telling me about it either, just in case there was any confusion. \n\n\"Mmmmm yes, you bad boy. Lick my ass! I had no idea it would feel so wonderful! It's incredible!\" she gasped. \n\nAfter a few minutes of this action, her butt hole was sufficiently lubricated, and I shifted my attention to her visually exotic and aromatically enticing pussy. My fingertip took over for my tongue, teasing her little rosebud and insinuating itself inside the tight ring gently. While my digit was digging in, my tongue was circling her clit, causing more sounds of joy from Sam. \n\nSoon, I had one finger slowly probing, in and out of her asshole, going as deep as the second knuckle, and my tongue lapping along her labia. She was getting wetter, and wetter, and her breathing was becoming a bit ragged. Pleasure was overwhelming her, and her dialogue had broken down into guttural, animal moans and groans. I went back to attack her clit once more. \n\nIt was as though I touched a live wire to her, and she went off like a firecracker. She still had her legs up, so arching her back as she normally would was off the list of physical demonstrations, but she had a new one for me. She rounded her back, and rolled back and forth like a rocking horse, all while screeching at the top of her lungs and gushing honey from her delicious depths. My finger was buried in her back door, and I was slurping up her chick slick eagerly. Still wailing like an air raid siren, she grabbed my hand in desperation, and tore the intruder out of her clutching sphincter. \n\nHer body wilted, draping her thighs over my shoulders. I looked up her body as she gasped for air, watching her belly and chest heaving with each tortured breath. I waited patiently, licking her juicy snatch with long, comforting strokes. She moaned softly, and ruffled my hair. \n\n\"Baby,\" she breathed quietly, her voice hoarse from screaming, \"that was the most incredible thing I've ever felt. My ass is still tingling. You know, someday you'll have to fuck me properly in the butt. I'm afraid it will hurt though.\"\n\n\"Well, whenever you think you're ready, I volunteer for the dangerous mission,\" I saluted. \n\n\"I'll begin training,\" she laughed. \"Until then, there's another entrance that could use some hard cock, and it's quite ready for action.\"\n\nI watched her long, stocking clad legs spread gracefully. Her right hand reached down, and three fingers dipped easily into her dripping folds, before withdrawing, and spreading her labia. Her bright pink interior peeked out, presenting a fresh target. \n\nI knelt in position, aiming at her pussy, and looking into her eyes. I pressed into her dampness, as her eyes fluttered in bliss. \n\n\"Ohhhhhhhhhhhhhhh yessss, honey... all the way to the bottom!\" she groaned, wrapping me in an embrace of arms and legs. \"Do it baby! Just fuck me! Fuck me hard!\"",
        "I looked into her eyes, burning with lust. Her lips were drawn into a sexy snarl. She was one sexual woman, and wasn't shy about asking for what she wanted. As if I didn't have enough reason to question Frank's intelligence, I found myself once again wondering what her was thinking when he cheated on Samantha. I had been there in the office, and knew at least one of his trollops. Corrine was pretty, but she was a stick in the mud compared to Sam's luxurious curves. I found it hard to believe she was better in bed than Sam. I'm not sure anyone could be. My opinion might have been biased by my feelings, though. \n\nI hooked my arms under her legs, splaying her wider, and started to thrust into her. I began at a firm but sustainable pace, wanting this to be a long, languid session, building to a mind numbing climax. \n\nSam's boobs were bouncing nicely, having escaped the small amount of containment the demi-cups offered. I was still looking into her eyes, reading the emotions on her face. Her mouth was agape, a wide sexy smile quite evident. Her eyes fluttered, and her panting breath became a moan, telling me she was close again. \n\nI kicked it up a bit, drilling her harder, and she came quickly, grunting and blushing deep red. With her orgasm achieved, I eased up a little, and kept stroking deep into her sopping wet cunt. \n\nI watched as she recovered, a grateful smirk on her lips. Her hand touched my chest softly. \n\n\"Let me ride you for a while,\" she smiled. \"Please, I want to fuck you as beautifully as you've been fucking me.\"\n\nI nodded, and pulled out, watching her eyes as she gazed at my hard cock. It was soaked with her fragrant lubricant from the balls to the tip. I laid on my back and let her take control. She gave my cock a quick suck, moaning at her own deliciousness, then squatted and impaled herself on it. \n\n\"Mmmmm, back where it belongs,\" she moaned, as she settled in my lap. She rocked, side to side, getting comfortable, and hung her beautiful tits in my face. \"These, too. Suck my nipples, darling. You know how I love that.\" \n\nOh yes, I know how you love it, and you know I love nibbling those thick, stiff buds. I'll take care of your perfect puppies, honey. You just ride the horse. \n\nWhile she established her own rhythm of strokes with her hips, I took two handfuls of her magnificent breasts, and latched on to her left nipple. Tweaking the right one, I sucked and bit the left gently, to her obvious enjoyment. I swapped tits every thirty seconds or so, and she soon began to bounce more energetically. She leaned back, pulling away from my lips, but not beyond the reach of my hands, and I continued to fondle her globes firmly while she cut loose. \n\n\"Fuck! Such a nice, big cock!\" she gasped, spearing herself frantically. I laid back, and watched the spectacle of her hair and big jugs flying wildly. \"Oh fuck, oh fuck, ohfuckohfuckohfuck... Ngahhhhhhnn! YESSSS!\" she screeched, cumming again. She sat high, head thrown back, mouth wide open in a muted, gurgle. She held my hands for support, in a grip that was stronger than I expected. At last, her grasp on both my hands and my cock relaxed, and she braced herself off my chest, easing forward to rest against me.\n\nWe laid quietly, while I stroked her hair, and listened to her catching her breath. Moments later, she sat up wearily, and lifted off me. She took a position on her hands and knees, the dropped her chest to the surface of the bed, butt high in the air. Her intent was pretty clear, but she voiced it anyway. \n\n\"Arf, arf, sweetie,\" she giggled. \"My pussy wants a load of your hot, thick cum inside it.\"\n\nI had always liked it doggy style, and didn't need to be asked twice, scrambling into place behind her. I slipped my dick back inside her warm sheath, and grasped her hips. The garters that held up her stockings framed her curvaceous backside perfectly, adding to the fire I felt watching my shaft split her pussy wide open. \n\nThere's really no way to fuck gently in this position, is there? Just as well she wanted it hard then. \n\nI pounded her cunt, slamming my hips into her firm yet cushioning rump with each furious stroke. Sam yelped and moaned, begging for more, a request I was happy to grant. I was beginning to feel that familiar tingle, and knew I would soon be flooding her womb with spunk. She sensed it, too, pushing back against my crushing thrusts. Loud slaps echoed through the apartment, and I grunted through the last few desperate stabs into her soaked vagina. \n\nI felt her pussy twitch, as her orgasm preceded mine by mere seconds. Over and over I felt the ecstasy of cum surging out through my cock, spilling deep inside her. We both groaned in unison at the delightful sensations we were giving each other, and collapsed in a sweaty pile on the bed. \n\nSilence filled the room. Only our ragged breathing marred the stillness. \n\nAs I lifted off her, pulling my softening penis out with a wet 'pop', I patted her ass. \n\n\"Don't forget to tell Chloe I enjoyed her choice of lingerie,\" I laughed. \n\n\"I'll do that,\" Sam giggled, \"and I'll tell her I enjoyed it as well. That'll teach her to come after my man!\" \n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSam and Alex are far from done. \n\nI ask for your comments and feedback on this story. Perhaps you have suggestions for future chapters? \n\nAnd of course... Click those stars, please."
    ],
    "authorname": "ilikeithot6308",
    "tags": [
        "milf",
        "blonde",
        "big tits",
        "older woman",
        "younger man",
        "romance"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/on-the-train-ch-03"
}
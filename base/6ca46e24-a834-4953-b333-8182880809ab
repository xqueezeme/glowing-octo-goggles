{
    "title": "The Naked and the Dead",
    "pages": [
        "This story is an attempt, possibly ill-advised, to mix erotica and mystery. It takes a while to become, hopefully, erotic and is rather long. I hope readers enjoy it. Unless the comments are negative, there will be a subsequent installment to conclude the story.\n\nThis story is a work of fiction. Real institutions are mentioned, but they are used fictitiously. Insofar as the author knows, no real person affiliated with any of those institutions has ever behaved as described in this story. Any similarities between any character in this story and any real person are coincidental and unintended. I encourage comments on this story, both favorable and unfavorable. Thank you for reading.\n\n________________\n\nThe Stoltz/Martin file consisted of two banker's boxes. It was sitting on my desk when I came in for my first regular day at work. I pulled out the envelope of photographs. In life, Rita Martin has been a beautiful woman. Even the harsh crime-scene photograph of her dead nude body captured some of that beauty. \n\nI was the newest member of the Special Investigations Unit of Ohio BCI, the criminal investigation arm within the Office of the State Attorney General. The small SIU staff provided support to local law enforcement and investigated sensitive cases and cold cases referred by local law enforcement. Stoltz/Martin was sensitive and cold.\n\nBrett Stoltz was the elected county auditor of a suburban/rural county just north of Cincinnati. At 48, Stoltz was a political \"up and comer\" who had established his conservative, \"family values\" credentials. Rita Martin, a divorcee, had been treasurer of Stoltz's first campaign for auditor. When Stoltz won, he made Martin his chief deputy. According to the file, it was common knowledge that Stoltz and Martin were lovers.\n\nStoltz and Martin had been found on the floor of her kitchen. Both bodies were nude. Both victims' hands had been bound behind their backs with flex ties. Both Stoltz and Martin had been shot twice in the head, at close range, with a .22 caliber gun. The coroner estimated that Stoltz and Martin had died between 9:00 and 11:00 p.m. the night before their bodies were found. That had been almost two and a half years ago.\n\nThere was little to go on. Entry to Martin's house had not been forced. No potential forensic evidence, other than fingerprints and DNA belonging to Martin and Stoltz, had been found in the house. The county sheriff had investigated and eliminated as suspects everyone known to have connections to the victims. The only evidence was the bullets themselves and a neighbor who saw an unfamiliar grey pick-up truck was parked outside Martin's house around 10:00 p.m. on the night of the murders.\n\nI had not been a cop before joining BCI. Rather, I had been a practicing lawyer. I had joined a large Southwest Ohio law firm straight out of law school. I became disillusioned after three years of unceasing pressure to generate ever more billable hours while striving to relieve wealthy individuals and large companies from the consequences of their actions. An older partner in the firm, who was something of an outlier, had become a mentor. He was personally and politically connected to the state Attorney General. He used those connection to get me the job at BCI. \n\nAfter a solid week of reviewing the Stoltz/Martin file, it looked to me like the Sheriff's people had done a thorough job, notwithstanding the intervening pandemic. I had zero expectations as I pulled out the folders containing Brett Stoltz's and Rita Martin's credit card statements for the three years preceding their deaths.\n\nThe only mildly interesting thing in the statements were charges from something called \"Citrus Cove Resort\" in the Orlando, Florida area over the Halloween weekend, a week before Stoltz and Martin were killed. The amount of the Citrus Cove charge led me to speculate it might be room charges for a multi-night stay. Going back in time, I found other charges from Citrus Cove Resort about every month to six weeks throughout the period covered by the statements. Sometimes Stoltz paid, sometimes Martin did. Apparently, no one had investigated these credit card charges.\n\nGoing online, I learned that Citrus Cove was a large, expensive \"clothing optional\" resort. The resort's website photo gallery confirmed that \"clothing optional\" meant nudist resort. That Stoltz and Martin went there regularly seemed at odds with Stoltz's public image. Did it have anything to do with their murders? Probably not, but it was the only thing I found that hadn't been investigated already.\n\nI e-mailed a letter to the resort with head shot photos of Stoltz and Martin. I asked for everything the resort could tell me about Stoltz or Martin. The letter produced a phone call from a man named Bob Williams, who identified himself as the owner and manager of Citrus Cove. Williams confirmed that Stoltz and Martin had been regular guests for a little over three years before they died. Williams didn't remember much about Stoltz or Martin beyond that they seemed to be pleasant people, tipped well, and never had any problems. \"They seemed to be quite friendly with some of our other regulars,\" Williams added. \"Many of those other people are still regulars. They probably remember more than I do.\" Williams chuckled. \"I guess you'd have to come down here and ask them.\"\n\n\"When would I be most likely to find people who knew the victims?\" I asked.\n\n\"Now that it's spring,\" Williams replied, \"you're likely to find a few regulars here any weekend.\"\n\nThe boss would not like me going to interview people at a nudist resort in Florida, but I didn't see anything else to do with the case that hadn't been done already. I wrote up a proposal for my boss. A day later, I was in my boss's office.\n\n\"This case is high enough visibility that we can't ignore anything, no matter how dippy,\" my boss intoned. \"I have no choice but to let you follow up. But, remember you are not on vacation. There will not be any charges from this nudie place on your expense forms. Also, you are not there to get dirt on Stolz or Martin. Unless it leads to the killer, no one finds out that Stoltz and his girlfriend regularly went to Florida and ran around naked. Also,\" the boss instructed, \"call the Florida Department of Law Enforcement before you go. We don't want them thinking we're investigating something in their jurisdiction without telling them, and someone with a Florida badge may get farther than you will.\"\n\nAs I neared security in the Orlando airport, I started looking around for my FDLE contact. I didn't see any men that fit my mental image. As I passed security, a young woman wearing a jacket over a dress held up a small sign that said \"Mueller.\" As I started walking towards her, she lowered the sign and turned on a dazzling smile.\n\nThe woman appeared to be about my age, late twenties. She had shoulder-length light brown hair, prominent cheekbones, a strong chin, and bright blue eyes. While her jacket largely concealed her figure, its swell suggested an attractive chest. Her dress stopped just above her knees. Her calves were nicely shaped with some noticeable muscle. \n\nOf course, shaking hands had become a major faux pas. The young woman's hand was extended to show me an FDLE photo ID card bearing her picture and the name Gail MacDonald. I pulled out and displayed my BCI ID. \"Nice to meet you Mr. Mueller,\" Ms. MacDonald said. She made it sound like she meant it.\n\n\"My pleasure,\" I replied. I did mean it. I hadn't interacted with a woman anywhere near as attractive as Gail MacDonald since my girlfriend had dumped me because I left law practice.\n\nWhen I picked up my one bag at baggage claim, Ms. MacDonald said, \"You travel light.\"\n\n\"On my salary, I can't afford a large wardrobe,\" I replied.\n\n\"I'm with you there,\" MacDonald said with a smile. \"Don't worry about a rental car,\" she added, \"I'm your chauffer while you're here. What's your schedule?\"\n\n\"I'm supposed to meet the owner of this 'Citrus Cove Resort' between 1:30 and 2:00,\" I replied.\n\n\"Good,\" MacDonald said, \"we've got time to drop your bag and get lunch. You can fill me in on the case. Where are you staying?\" I told her. MacDonald made a face. \"Your expense allowance must be about as bad as mine.\"\n\n\"Hey, I had to get special approval for this motel,\" I said, \"our expense allowance for in-state overnight travel is only $ 40 per day.\"\n\nMacDonald smiled. \"You win. Your expense allowance is worse than mine.\"\n\n\"And I get snow, don't forget,\" I added.\n\nI guessed that MacDonald was good at interviews. I had only met her a few minutes earlier and she already had me at ease. Her appearance undoubtedly helped. She was beautiful, which made her sort of instinctively likeable, but didn't appear to work at being beautiful, which many people find off-putting.\n\nOver lunch, I explained the case to MacDonald. She asked several insightful questions. We agreed that she would start the questioning of each person we talked to because she was a Florida officer. I had no more official status in Florida than any other tourist.\n\nOn the drive to Citrus Cove, I asked Gail what, if anything, she knew about the place. \"Tourism,\" she responded, \"is our most lucrative industry. Nude resorts are a significant component of that. We have more in Florida than any other state. Don't assume that the people who go to nude resorts are all leftover hippies or even that they are liberals. The resorts here draw a lot of doctors, lawyers, bankers, and insurance agents. I expect Citrus Cove has a high percentage of people like that. It is an expensive place to stay. It is considered on par with the state's top-end clothed resorts.\"\n\nEntering the resort grounds, we had to identify ourselves to a guard who opened the gate for us. He told us the office and front desk was the first building on our right and asked us not to drive beyond it. I hadn't spent time at any type of resort, so I had nothing to compare it to, but the building we parked in front of looked expensive and elegant to me. To my relief, the front desk staff was clothed.\n\nBob Williams, also clothed, took us to a small conference room. A woman about his age was already in the room. MacDonald and I both showed our IDs. Williams introduced the woman as his wife Sandy. \"She is part-owner and is really the one who keeps the place running,\" Williams said.\n\n\"Rita and Brett came so regularly and fit in so well,\" Sandy said, \"we were a bit mystified when they just quit coming. We didn't know they had been murdered. How awful!\"\n\n\"Did you know that Mr. Stoltz was an elected official in Ohio?\" Gail asked.\n\n\"No, but we don't ask what our guests do,\" Bob Williams said. \"We have a few Florida elected officials who visit from time to time and at least one member of Congress.\" \n\n\"Did you know Mr. Stoltz and Ms. Martin's marital status?\" Gail asked.\n\n\"Again,\" Bob Williams said, \"that is not something we ask our guests.\"\n\n\"My impression,\" Sandy said, \"was that they were married to each other. They acted like it.\"\n\nGail asked, \"what else can you tell us about either Mr. Stoltz or Ms. Martin or about any of their stays here?\"\n\n\"We try to get to know our regular guests,\" Sandy said. \"If you'd asked me that question two and a half years ago, I probably could have told you something. When we didn't hear from them for several months, I decided they probably weren't coming back and put them out of my mind.\"\n\nI asked, \"Do you think there are any guests on the grounds who knew Mr. Stoltz or Ms. Martin?\"\n\n\"Yes,\" Sandy said. \"Ward and Annette Jackson are here. I think they spent time with Rita and Brett when they were here. I warned them you were coming and might want to talk with them.\" Sandy Williams stood up. \"Come on,\" she said, \"I'm sure they're at their usual spot by the pool.\" Gail and I followed Mrs. Williams outside.\n\nThe pool area at Citrus Cove provided one of the biggest shocks of my life. We were on a concrete patio was textured, to give traction when wet I assumed. There were two swimming pools\" one sort of kidney-bean shaped and another rectangular one with a volleyball net across it at the middle. There were a couple of in-ground hot tubs. On the far side of the open area, in front of a two-story building I took to house guest rooms, was a bar with a thatched awning. Almost everywhere, there were lounge chairs. Most of the lounge chairs were taken, as were all the stools in front of the bar. Maybe twenty people were in the pool playing volleyball. More than that were in or sitting on the side of the other pool.\n\nThe facilities weren't what shocked me. Out of maybe a hundred people in the area, Gail, Mrs. Williams, and I were the only people wearing any clothes. Without even turning my head, I saw more bare breasts, buttocks, vaginas, and penises in one minute than I had during my 29 years before that. No one seemed embarrassed. To the contrary, everyone looked like they were happy and having fun. I was aware Gail was looking at me, trying to gauge my reaction, I guess. Just then, I didn't feel right looking at her.\n\nWe followed Mrs. Williams as she threaded her way between the lounge chairs. I was struck by an oddity. The three of us were normally dressed. Everyone else was stark naked, yet we were the ones who stood out. \n\nMrs. Williams stopped at the foot of two lounge chairs placed side-by-side under a tree. A nude man lay on his back in one chair. A nude woman lay on her back in the other. I guessed they were both in their forties. Both looked fit and deeply tanned. The woman's legs were spread, giving a clear view of her vagina. She didn't close her legs when we walked up. That made me a little uncomfortable.\n\n\"Annette, Ward,\" Sandy Williams said, \"these are the police officers I told you about.\" MacDonald and I showed our ID cards.\n\nWard Johnson looked at both IDs and then said, \"Ohio? Aren't you out of your jurisdiction?\"\n\n\"I'm not,\" Gail replied. \"You knew Brett Stoltz and Rita Martin? They were murdered in Ohio. We are hoping you have information that can help us catch their killer.\"\n\n\"We knew a Brett and Rita who used to come here a lot,\" Annette Johnson said. \"I don't remember their last names, if we ever knew them.\"\n\nI showed Mrs. Johnson photos of Rita and Brett. She looked at them and handed them to her husband. \"Those are the people we knew,\" Ward Johnson said after a moment. \"Murdered? Why?\"\n\n\"That's part of what we are trying to find out,\" I replied. \"What can you tell us about them?\"\n\n\"We met them here, damn, maybe four or five years ago,\" Ward said. \"I don't remember exactly how. They were fun people to be around. It got to the point where they'd tell us when they were coming, and we come here on the same dates. There were two other couples that were part of our group. We'd all get together here when Rita and Brett came in.\"\n\n\"Did either of them ever mention any concerns, problems, trouble they were having?\" I asked.\n\n\"Not that I can recall,\" Annette answered.\n\n\"Did you know that Mr. Stoltz was an elected official in Ohio and Ms. Martin was his chief deputy?\" I asked.\n\n\"No, but I'm not surprised,\" Ward said. \"Brett had the charisma you'd expect of a politician. Rita was charismatic too, and a bit of a flirt.\"\n\n\"And they were physically beautiful people,\" Annette added. \"Especially naked.\"\n\n\"Were you here when they came for Halloween two years ago?\" I asked.\n\n\"Yes,\" Annette replied.\n\n\"Was there anything unusual or anything bothering either Brett or Rita?\" I asked.\n\n\"No,\" Annette said.\n\n\"Wait a minute,\" Ward interjected. \"There was something. I think they saw someone here whom they knew from home and were not happy about it.\"\n\n\"Were upset that someone from home saw them here?\" I asked.\n\n\"I don't think that was it,\" Ward said. \"More like it was someone whom they disliked. You know who you should talk to is Jason and Carrie, uh, Danner I think is their last name. They were closer to Rita and Brett than we were. I think Rita and Brett sometimes visited their home. They live around Ocala somewhere.\"\n\n\"Is there anything else you can tell us?\" I asked.\n\n\"I don't think so,\" Ward said.\n\n\"Ward's right,\" Annette said, \"I remember now. Brett saw a man that he knew from somewhere else. I don't think Brett or Rita talked to the man. I remember Brett saying something like, 'what's that asshole doing here again?'\"\n\nWe thanked the Johnsons and left. Back in the office, we asked Bob Williams about Jason and Carrie Danner. Williams checked a computer and said they were regulars whose stays had coincided with Stoltz and Martin.\"\n\n\"Can you give me their address?\" Gail asked.\n\n\"I'd better not, unless you have a warrant,\" he replied.\n\n\"Mr. Williams,\" I said, \"we don't believe they are in any trouble. We want to talk to them as part of finding out who murdered two of your regular guests.\"\n\n\"I'll tell you the town,\" Williams said. \"It's Eureka. You can find them from that.\"\n\n\"Thank you,\" I said.\n\nAs we walked from the building to Gail's car, she said, \"That seemed like a pretty nice place.\"\n\n\"Would you go there, as a guest I mean?\" I asked.\n\nGail smiled. \"Ian,\" she said, \"I grew up in the Keys. I doubt there are many people who've lived in the Keys who haven't done some skinny dipping or nude sunbathing. I remember one Sunday the summer after my senior year of high school, we had a party on one little island. About 30 of us, girls and guys. Everyone stripped off. Didn't they do things like that where you grew up?\"\n\n\"Not that I was aware of,\" I replied somewhat sheepishly.\n\n\"You've been deprived,\" Gail said. She stopped and did something on her notebook computer. \"I've got an address and phone number for the Danners. It's too late to get up there and back today. Let me call them and see if they'll talk to us tomorrow.\" She made the call, had a brief conversation, and reported \"Mrs. Danner says they'll both be home all day tomorrow. We're welcome to drop in any time.\"\n\nGail drove me back to my motel. \"I'd go to dinner with you, but I've got a commitment tonight,\" she said before dropping me off.\n\nI found food at a carry-out fast-food restaurant and bought two 20 oz. beers at a convenience store. I took those back to my room. After I ate, I pulled out my laptop. Over the years, I had become very facile at searching the internet. I was bored and curious. I powered up the laptop to see what I could learn about Gail MacDonald.\n\nThere was, of course, nothing online about her since she had joined FDLE. Information about law enforcement officers, down to home address and phone numbers, was usually confidential. I did learn that she had been born 28 years earlier in New York City. Apparently, her family had moved to the Keys when she was small. She had gotten her Bachelor's in criminology, with honors, from the University of Florida. To my surprise, I also discovered that Gail had been a Florida Gators cheerleader for three years. A bit of digging turned up a seven-year-old picture of her in uniform on the sidelines. She looked good in the form-fitting cheerleader outfit that stopped just below her ass. However, I thought Gail was more beautiful now than then. I was impressed that Gail had reached the semi-finals of the state girls' tennis tournament as a singles player in her senior year of high school and that she had graduated high school as class salutatorian.\n\nGail picked me up the next morning. She had thought that the drive to Eureka would take a couple of hours. That might have been true had traffic on I-75 not been so heavy. There were only brief stretches between Orlando and Ocala where we got up to the posted speed limit. We had been talking about the case when Gail asked, out of the blue, \"why does someone who was in the top ten percent of his law school class and had a job at a prestige law firm become a criminal investigator?\"\n\n\"You've been doing your homework,\" I commented. I explained why I had left law practice. Then, I asked \"why does a cheerleader at big time sports university major in criminology?\"",
        "Gail laughed. \"You've done your homework too. I like solving puzzles. Piecing information together to figure out who did what appeals to me. There are some awfully bad people out there. Getting them sequestered from society seems worthwhile. I also think I can help do law enforcement more humanely.\" \n\nGail paused, then said, \"you were fifth in the Big Ten at 185 pounds your senior year of wrestling. Why wrestling? Why did you want to be that intimate with another guy?\"\n\n\"We didn't think of it as being 'intimate,'\" I replied. \"Wrestling is a combat sport. You're trying to impose your will on another person, they're trying to impose their will on you. It is tough sport that requires strength, agility, tremendous endurance, and a high tolerance for pain.\"\n\n\"You don't think physically dominating someone can be intimate?\" Gail asked.\n\n\"I suppose it could be, depending upon your intent and the other person's,\" I said. \"The body contact wasn't the source of the gratification.\" Changing the subject, I asked, \"why did someone who was one of the top high school tennis players in the state become a cheerleader?\"\n\n\"What's wrong with being a cheerleader?\" Gail asked.\n\n\"What's wrong with being a wrestler?\" I countered.\n\n\"Point,\" Gail said. \"I wasn't that good at tennis. I made the state semis by luck. Three girls who were better than me were injured that year and couldn't play the tournament. The best player in the state had already signed with an agent and was ineligible. Some other girls who probably would have beaten me were upset so I didn't play them.\"\n\n\"Why cheerleader?\" I asked.\n\n\"I like sports,\" Gail replied. \"It's tough to get Florida football tickets, even for students. Being a cheerleader guaranteed I got into the games. It's a lot of work, with a fair amount of gymnastics involved, so it kept me in shape.\" Gail paused, giggled, and added, \"and I enjoyed being in front of tens of thousands of people.\"\n\nI wasn't sure whether, or how, to follow up on Gail's last comment. Instead, I asked, \"any siblings?\"\n\nGail laughed again. \"You didn't find that out? Yeah, I've got an older brother. He's in the Navy up in Norfolk. You've got a sister, don't you?\"\n\n\"Yeah,\" I said. \"Amy's ten years older than me. Mom and Dad had me relatively late in life. Amy does something in advertising in New York.\"\n\nOnce we were off the freeway, we went east through the center of Ocala and made a series of turns to go generally northeast until we were on a secondary road on the east side of a lake. Gail's GPS said the Danners lived on that road.\n\nThe entrance to the Danners' property was just a sandy track surrounded by untended brush. No house was visible. A quarter mile up the track was a gate with an intercom box on a post. Gail identified us and the gate opened. Inside the gate, the track became a black-top drive surrounded by careful, and no doubt expensive, landscaping. Another quarter mile ahead, we saw a large house of a mock antebellum design. \n\nCarrie Danner answered the door. \"Any trouble finding us?\" she asked. \"We're a little isolated here, which we like. We leave the area out by the road grungy, so no one drives by and thinks there's anything of value back here.\"\n\nMrs. Danner appeared to be in her late thirties or early forties. She had blonde hair with no visible dark roots and a round, cute face. Her terrycloth robe did not disguise an ample figure. I assumed she had a swimsuit on underneath. \"Jason is out by the pool,\" she said. \"Follow me.\" She turned and led us through the house. As we approached a sliding glass door through a breakfast alcove, Mrs. Danner took off her robe and slung it over a chair. She had nothing on underneath. Gail glanced at me and smiled. \n\nWe followed Mrs. Danner's tan ass onto a patio. A slender nude man sat at a table under an umbrella. Beyond the table was a large pool. The man stood and faced us as we approached. He was very tan, but what you noticed was that he had an extraordinarily long dick. When we reached the table, Mrs. Danner turned to face us, displaying two unnaturally large breasts and a blonde landing strip between her thighs. \"This is my husband Jason,\" she said.\n\nWe introduced ourselves and the four of us sat at the table. \"You want to talk about Brett and Rita,\" Jason said. \"We knew them, well, I think. When we abruptly quit hearing from them a couple of years ago, I did some research online and found out they had been murdered. We were sad. Brett and Rita were vibrant, fun people. But, I'm not sure how we can help you.\"\n\n\"You interacted with them at Citrus Cove,\" Gail said, \"that is a different environment from their lives in Ohio. Did anything happen or did either of them say anything there that might help us find the person who killed them?\"\n\nJason sat silently for a couple of minutes before a slight smile crossed his face. \"Well,\" he said, \"if we're going to talk about what happened at a nude resort, it seems to me you should take your clothes off too.\"\n\n\"Mr. Danner,\" I said, \"that is not necessary or appropriate. Ms. MacDonald and I are law enforcement officers. As a citizen, you have a duty to tell us what you know that may help us catch a murderer. You cannot expect us to strip naked to interview you!\"\n\n\"Mr. Mueller,\" Jason said in an even voice, \"you're from Ohio. You have zero authority here. Ms. MacDonald, you're the Florida officer. Can you compel force us to talk to you?\"\n\n\"We can get a court order,\" Gail replied.\n\n\"To investigate an Ohio murder when you have nothing to show that I or my wife have any relevant information?\" Jason retorted. \"I don't think so. But, if you want to try, I have lawyers in Miami on retainer who can deal with that. It's your choice. You can spend months and thousands of tax dollars trying to force us to talk or you can get your clothes off and we'll gladly tell you everything we know today.\"\n\n\"It's only fair,\" Carrie added. \"We're nude.\"\n\nDanner pissed me off. I started to respond more forcefully when I felt Gail's hand on my forearm. To the Danners, she said, \"let me talk with my colleague a moment.\" \n\nGail led me a few feet away from the Danners. Just above a whisper, Gail said, \"Ian, he's messing with us, but I think he wins this one. You know we can't force them to talk. We drove all the way up here. These people may know something valuable. I don't think we have any choice but to grin and bare it.\"\n\nGail had valid points. I was also intrigued that she hadn't objected to Jason Danner's request that we strip naked. And, to be honest, the opportunity to see Gail MacDonald in the nude was too good to pass up. I agreed.\n\nWe went back to the table. \"In the interest of securing your cooperation with a minimum of formalities, we will agree to your condition,\" Gail told the Danners. Gail and I were both wearing knit polo shirts with the logos of our agencies embroidered on them, khaki pants, and shoes. Gail used one foot to push the back of her shoe off her heel and slipped her foot out, the repeated the process with the other shoe. She undid the belt on her pants and pulled her shirt out of her pants and off over her head.\n\nI was transfixed watching Gail start to strip. Gail stopped, looked at me, and said, \"uh, Ian?\" I got the hint. I kicked off my shoes, pulled off my socks, and pulled my shirt off over my head. \"That's better,\" Gail said. She unzipped her pants, let them drop to her feet, and stepped out of them. She put her shirt and pants over the back of a chair. There was nothing special about her underwear, but, in only a bra and panties, Gail MacDonald looked fantastic.\n\nI was undoing to hook in the waistband of my pants when Gail took her bra off. I never have learned bra sizes, but Gail's breasts were gorgeous: firm, upturned, and proportional to her body. I think it was the realization that Gail's nipples were hard that started getting me hard. I looked away from Gail and tried to focus on my annoyance at Jason Danner for putting us through this. Only, I wasn't that annoyed at him.\n\nThere was some tenting in my boxers as I took my pants off. I looked at Gail. She was standing in her panties waiting for me, I guessed, so we'd get fully nude together. Gail put her hands on the waistband of her panties, smiled at me, and began to push her panties down. I looked away, pushed my boxers off, picked up my clothes, and tossed them on a chair. I heard Gail say \"Ian.\" I turned and looked at her. I had thought Had seen beautiful women. Looking at Gail MacDonald in the nude was the first time I had ever seen true beauty. Gail smiled again.\n\nCarrie Danner broke the silence. \"You two both look great nude.\"\n\n\"Carrie is right,\" Jason said. \"Now that we're all on a level playing field, what can we tell you?\" Gail and I sat down at the table. Gail opened her notebook computer to take notes.\n\nJason and Carrie knew what Brett and Rita did in Ohio. To protect them, Jason and Carrie had never visited Brett and Rita in Ohio. In addition to their stays at Citrus Cove, Brett and Rita had visited the Danners' home several times. The home visits were so that the two couples could swap partners for sex, which they didn't want to do at Citrus Cove. Brett and Rita were both described as energetic, enthusiastic, and creative sex partners.\n\nAs the interview went on, it dawned on me that it actually felt nice to be sitting on the Danners' patio with no clothes on. It had grown warmer as the afternoon progressed, but the occasional breeze felt good on my bare skin. Fortunately, my partial erection had subsided.\n\nLate in the interview, we got to something of more than prurient interest. \"There was something strange,\" Jason said. \"The last three times Brett and Rita came to Citrus Cove, there was also this strange dude there. We go to Citrus Cove a lot and those are the only times we've seen him there. Brett and Rita both knew the dude, they called him 'Mark,' but they weren't friends with him. I'm sure neither of them talked to him. The first time they saw him at Citrus Cove, Brett and Rita were surprised. When they saw him the second and third times, they were annoyed. I think they thought the dude was stalking them.\"\n\n\"Did any of you report the man to the resort?\" I asked.\n\n\"There was nothing to report,\" Jason replied. \"He kept his distance and didn't do anything. We all thought he was watching Brett and Rita, but we couldn't prove it.\"\n\n\"What did this man look like?\" Gail asked.\n\n\"Older,\" Jason said, \"I'd guess 50 or so. Big guy, about six feet. Big shoulders, big chest, big arms, bit of a beer gut. Grey hair in a crew cut and a lot of grey body hair.\"\n\n\"He had a small dick,\" Carrie added.\n\n\"And,\" Jason said, \"he had a large tattoo of the Marine Corps logo on his left forearm.\"\n\n\"Why do you think the tattoo was the Marine emblem?\" I asked.\n\nJason laughed. \"My dad was in for 25 years. I grew up around Marine bases. I know that logo.\"\n\n\"Is there anything else you can tell us about this man?\" I asked.\n\n\"Each time he was there, he was with this short, fat woman,\" Jason said. \"They were with each other but didn't look like they were together, if you know what I mean. I figured the dude needed her to get in the front door.\"\n\n\"What do you mean?\" I asked.\n\n\"Citrus Cove doesn't allow unaccompanied single males,\" Jason said. \"If the dude showed up by himself, he wouldn't get in.\"\n\nIt had gotten warmer during the interview. I could feel sweat on myself and could see perspiration between Gail's breasts. As we finished, Carrie Danner said, \"you both look hot. I mean that both ways. Take a dip in the pool before you get dressed.\" \n\nGail stood up, an inspiring sight, and said, \"thank you. That's kind and we'll take you up on that.\" To me, Gail said \"come on Ian.\" I followed Gail's tight, sweat ass to the edge of the pool, where she gracefully dove in. I followed somewhat less gracefully. Thankfully, Gail was still under water and didn't see me.\n\nGail swam across the pool and stood in water about chest deep along the far wall. I swam over to her and stopped about two feet away. We stood facing each other. \"This is nice,\" Gail said. We looked at each other for a moment before Gail giggled and said, \"we'd better go. If traffic's like it was coming up, we'll get back late.\" Gail swam back to where we had dived in. I followed. I had a complete, and very beautiful, view of Gail as she boosted herself out of the pool. Once she was on the pool deck, she turned and smiled at me again.\n\nAs we drove back towards Ocala, Gail asked, \"what did you think?\"\n\n\"The guy with the Marine tattoo is definitely interesting,\" I replied.\n\n\"He is,\" Gail replied. \"What did you think about doing the interview in the nude?\"\n\n\"Honestly,\" I said, \"it was much more pleasant than I expected. What did you think?\n\n\"I enjoyed it,\" Gail said. \"Did you like what you saw?\"\n\n\"Well,\" I said, \"you're a beautiful woman clothed and even more beautiful nude.\"\n\n\"Thank you,\" Gail said, \"that's sweet. You look great nude too.\" Gail giggled. \"You have a very attractive dick.\" That was a new one, but I liked it.\n\nAfter a few minutes' silence, Gail said \"we need to get naked together again.\"\n\n\"Definitely,\" I replied.\n\nIt was almost 7:00 p.m. as we approached Orlando. \"You want to get dinner?\" Gail asked.\n\n\"Sure,\" I said, \"but it is Saturday night. I'm sure you have other things to do. Don't think you have to disrupt your life to entertain me.\"\n\n\"No, I don't have anything planned tonight,\" Gail replied. After a moment, she added, \"I'm not seeing anyone these days.\"\n\nWe had dinner at an Italian restaurant by a small lake. We talked for almost three hours. Little was shop talk. The more I learned about Gail MacDonald, the better I liked her. I hoped she felt the same way.\n\nAs we reached the street from the restaurant parking lot, Gail paused for a moment. Finally, she turned back the way we had come. \"Ian,\" Gail said, \"I thought about inviting you home. I've only known you about a day. I like you, but that's way too fast. I hope you're not disappointed. Please keep in touch and let's see if this goes somewhere.\"\n\n\"Gail, I'm not disappointed because I have no expectations,\" I said. \"I like you too. I will stay in touch.\"\n\n\"Thank you,\" Gail said.\n\nOn the drive back from Eureka, I had called Bob Williams at Citrus Cove. I told him about \"Mark\" and asked whether he could find any information to identify him. Gail drove me back to Citrus Cove about mid-day Sunday. Williams met us in the lobby. \"I remember this guy,\" Williams said, \"because he always paid cash. No one pays cash anymore. I think the information he gave us is crap though.\"\n\nWilliam handed us a small file. The man had given his name as \"Siddiq Obama,\" and listed an address in Santa Claus, Indiana. There was a photocopy of probably the worst fake ID I had ever seen. It purported to be an Indiana driver's license, but Indiana was spelled \"Indana.\" I showed it to Williams. He shrugged and said, \"he paid cash up front.\"\n\n\"Is the picture our guy?\" I asked.\n\n\"Yeah,\" Williams said, \"that's a fair picture.\"\n\n\"May I have a copy of this?\" I asked.\n\n\"Take it,\" Williams said. \"That old, I'm surprised we hadn't tossed it already.\"\n\nThe rest of Sunday afternoon was Gail's tour of Orlando. Thankfully, that didn't include any theme parks. We had pizza at a small place that night and another long conversation. I didn't know whether I could solve the case, but I'd do everything I could to stay in touch with Gail MacDonald.\n\nBack in Ohio, I met with Bennett Charlton. Charlton had chaired the county political party while Brett Stoltz had been auditor and when Brett and Rita were murdered. I wanted to see if Charlton knew our mystery man.\n\nI showed Charlton the fake ID from Citrus Cove. \"That's Mark Anwell,\" he said without hesitation. I waited. \"Mark is a Marine vet. I think he was in Afghanistan and Iraq. He showed up here about seven years ago. He was working at a gun store and got involved with the party. He lived way out in the northwest corner of the county. He was a ward chair for us for a while, but we had to remove him.\"\n\n\"Why?\" I asked.\n\n\"Mark changed jobs. He went to work as a salesman and instructor at the gun store Ezekiel Stone runs beside his 'Church of the Rock' and became a follower of Stone. We're very conservative in the Party but, according to Stone, we're all totally debauched. According to him, you only marry once, for life. He doesn't recognize divorce and even widows and widowers are supposed to remain completely faithful to their deceased spouses. Stone got into it with Brett early in Brett's first term. Stone was claiming his strip center with the gun store, coffee shop, and clothing shop was tax exempt religious property. The school district protested that, and Brett determined the stores were not exempt. Stone took it all the way to the Ohio Supreme Court, which upheld Brett's decision. Brett was on Stone's shitlist from that point on. Stone kept sending me letters and e-mail saying that Brett and Rita were defiling the party by being unfaithful to their spouses. They were both divorced!\"\n\n\"How did Anwell tie into that?\" I asked.\n\n\"That's what got Mark removed,\" Charlton answered. \"He sent things on Party letterhead to folks in his ward repeating what Stone said about Brett and Rita, making it look like that was the Party's position which it definitely was not.\"\n\n\"Do you know where Anwell is now?\" I asked.\n\n\"I do not,\" Charlton responded. \"I haven't seen him since, well, right around the time Brett and Rita were killed. I heard he left the area, but I don't know that. It's ok with me if he did. I always thought Mark was a bomb waiting to explode.\"\n\n\"Do you remember what he drove?\" I asked.\n\n\"When I knew him, he drove an old grey Ford pick-up,\" Charlton said.\n\nI didn't have enough for a warrant, but I had a strong suspicion Mark Anwell was involved in the Stoltz/Martin murders. I wanted to talk to him, but didn't know where he was.\n\nI talked to Gail by phone at least every other day. I reported what I'd learned about Anwell and that I couldn't find him. \"Maybe he decided he likes Florida,\" Gail said. \"Give me a day or two to see if I can find him down here.\"\n\nWith the Stoltz/Martin investigation in limbo, my boss made me lead investigator on another potential hot potato in Northwest Ohio. A County Engineer had been using county employees, equipment, and money to install swimming pools, build patios, and pave driveways at the homes of other county officials, including the prosecutor and the county's only trial court judge. I was in rural northwest Ohio when Gail called my cellphone.\n\n\"I found Anwell,\" she said excitedly. \"He lives near a place called Cross City in Dixie County. That's on the Gulf side of the State up near the top of the peninsula. It's really the middle of nowhere. It looks like he showed up there about a month after your murders.\"\n\n\"Any idea what he does?\" I asked. \"I wonder whether he'd talk to us if we just showed up unannounced.\"\n\n\"No idea what he does,\" Gail said. \"I'll drive up there and look at his place. That might indicate what sort of reception we'd get.\"\n\n\"Be careful,\" I said. \"If I'm right, he's already killed two people.\" \n\nGail called a couple of days later. Anwell lived on a small piece of dry land surrounded by swamp. He had a barbed wire gate across the track leading to his shack. \"I looked at the house through binoculars,\" Gail said. \"According to the deputy who went with me, it used to have windows. Anwell covered the whole shack with metal. Instead of windows, there are now small slits.\"\n\nLater in our conversation, Gail asked, \"you have a webcam, don't you?\" I answered that I did. \"Let's start using Skype,\" Gail said, \"I want to see you.\" Of course, I wanted to see Gail and mentally kicked myself for not suggesting Skype.\n\nMy Skype calls with Gail became a nightly event. On Saturday nights, we'd each have a drink, or two, and talk for hours. The second Saturday we did that, I risked asking Gail, \"Don't you have a date on a Saturday?\"",
        "\"I'm having a date,\" she replied with a smile. I sure wasn't arguing. I'd rather talk to Gail over the computer than be in person with any woman I could think of.\n\nAfter about two weeks, Gail appeared on my screen one night in a robe. After our greetings and \"how was your day\" exchange, Gail took her robe off. She giggled. \"You haven't seen me naked since April. I thought you'd like another look.\" She panned the camera down the length of her perfect body.\n\n\"Thank you,\" I said. \"You are more beautiful than I remembered.\"\n\n\"Ian,\" Gail asked, \"do me a favor?\"\n\n\"Sure,\" I said, \"anything.\"\n\n\"Take your clothes off too,\" Gail said.\n\nGail didn't have to ask twice. I stripped off quickly. Following Gail's lead, I panned the camera down my body.\n\n\"Damn Ian,\" Gail said, \"you stay in great shape.\" Gail had her camera placed so that I could see her face, shoulders, and breasts. As we talked, I noticed that her right arm was moving. Her hand was out of the image at the bottom.\n\n\"What are you doing Gail?\" I asked.\n\nGail giggled again. \"Masturbating,\" she said. \"Want to watch?\" She tilted her camera down so I could see her hand between her thighs. She spread her thighs and moved the camera slightly so I could see her two fingers in her vagina, moving back and forth.\n\nWatching Gail made me hard. I took my camera off my monitor with my left hand, aimed it at my dick, and began stroking myself with my right hand while I watched Gail. \"Shit Ian,\" Gail said, \"that's hot.\"\n\nI stopped talking so I could listen to Gail as she got more aroused. I tried to match the pace of my jerking off with what I saw Gail doing to herself on my screen. As her fingers moved more rapidly, Gail's hips began to buck in her chair. Through the speakers, I could hear her rapid breathing and periodic moans. \n\nBetween her increasing rapid breaths, Gail started exhorting me to stroke faster. Jacking off was a lot more stimulating with a beautiful woman watching. However, I feared I would come before Gail did.\n\nMy fear was realized. I shot while Gail's fingers were still frantically rubbing. \"Oh . . . Ian . . . that's . . . HOT!\" Gail said as she increased her pace even more. A few seconds later, she emitted a loud moan and her hips moved violently, then relaxed. Gail and I had just had our first orgasms together, several hundred miles apart.\n\nWhen Gail got her breathing under control, she said, \"Ian, we have to do that again, like every night.\" In fact, we did start masturbating together over Skype every night. That only increased my desire to be with Gail in person. However, the County Engineer case precluded any trips out of state for the immediate future.\n\nIn addition to masturbating, Gail and I talked a lot. We had several shared interests and a lot of the same attitudes. I soon realized that Gail MacDonald was a highly intelligent and interesting person. I was a little embarrassed that I was falling in love with a woman whom I'd only met in person once.\n\nThe Stoltz/Martin investigation was at a standstill. However, I caught a break in the County Engineer case in mid-June. I dropped in on the Engineer's administrative assistant one evening. She had been in that office since long before the current Engineer was elected. I don't think she approved of her boss, or maybe she was trying to cooperate to avoid prosecution herself. Regardless of her reasons, she was a goldmine. The Engineer had her keep detailed records for each \"off the books\" project on his personal notebook computer. The records included the official for whom the work was done, the county employees who did the work and their hours, the county equipment used, and the materials costs. The records also showed the legitimate county projects against which these costs were charged.\n\nThe assistant's information was enough for us to get a search warrant. I and two other BCI agents, and five state troopers, executed the warrant at the Engineer's house on July 4 as he and his family were preparing for a party for colleagues and donors. We knew about the party and timed it so the troopers' cruisers were in his driveway as the Engineer's guests arrived.\n\nWe seized Engineer's computers and electronic devices. Our computer people accessed everything easily and it turned out to be even better than we expected. In addition to the records his assistant entered, the Engineer had e-mail from the judge, the prosecutor, the sheriff, and a county commissioner requesting work at their homes and confirming that they would owe nothing. Within three weeks, the county elected officials had been arrested and charged. The AG got to hold a press conference touting his commitment to fight public corruption and misuse of taxpayer dollars. \n\nAs the Engineer case broke, I had what turned out to be a significant conversation with Gail on Skype. \"Ian,\" she said, \"since I was in high school, I've been fascinated with the idea of people seeing me exposed. Playing a tennis match or cheering a game with nothing on under my skirt or doing it completely nude. I get, well, excited thinking about how that would be. I never had the courage when I was in school and, now that I'm a cop, I have to be careful not to do something that would cost my job.\"\n\nI don't remember what I said in response. I was curious why Gail was bringing this up.\n\n\"You don't know my best friend Alexis,\" Gail went on. \"We cheered together. She's now the assistant manager of a resort over on Sanibel. A couple years back, she hooked up with a guy who has some restaurants on the islands and around Ft. Myers. He and Alexis live on Captiva. They're into some interesting stuff.\"\n\nI still had no idea where Gail was going.\n\n\"Of course,\" Gail said, \"Alexis and I have talked about my exhibitionist fantasies for years. She's always wanted me to act one out. She thinks I'd enjoy it. I've also told her about you.\"\n\nI laughed. \"What have you told her?\"\n\nGail looked straight into her camera, like she was looking into my eyes. \"I told her that I'm hooked on you.\" Gail paused, before she quickly said, \"Alexis has offered me a chance to act out. It sounds like it would be fun, but I need you.\"\n\n\"What do you want to do?\" I asked.\n\n\"August is the slow time on the islands,\" Gail said, \"so Alexis and her guy aren't terribly busy. What she wants to do is invite five or six couples who are friends of theirs to their place for drinks and dinner. After all the other guests arrive, you and I would come out nude. We'd chat, have drinks, and eat dinner as the only nude people in the group.\" Gail took a deep breath and added, \"after dinner, we'd make love with everyone watching us. Alexis says the people she'll invite are all into sex and she trusts them, so no one would rat us out. There wouldn't be any pictures or video. It sounds hot. Will you do it?\"\n\nI didn't say anything for a moment. I just looked at Gail on my monitor. I realized how deeply in love I was with her. I was touched that she wanted me to share something so intimate and exhibitionistic with her. \"Yes, I'll do it,\" I replied. Gail's face lit up.\n\nI hadn't been at BCI long enough to have vacation time yet, but I was in good standing from the County Engineer case. That was in the hands of a special prosecutor now and Stoltz/Martin was still in limbo. My boss readily agreed to give me a week off in August.\n\nGail met me in Ft. Myers airport. She was beautiful on my monitor every night. She was much better in real life. As I walked past security, she ran up and gave me a hug like I'd never had before. We kissed for a long time in the middle of the airport concourse.\n\nGail's friend Alexis Morgan would probably be the most beautiful woman in any room Gail wasn't in. She had reddish brown hair and small freckles on her face. She was taller than Gail with bigger breasts, hips, and thighs. She also had an extremely outgoing personality. Her partner, Jean-Paul, was older, quieter, and sort of blended into the background. I would learn that he was an outstanding cook, a sharp businessman, and an engaging conversationalist.\n\nTheir house on Captiva Island was on the Gulf of Mexico side. The main floor was one level above ground to allow for any storm surge. The floor above that had a large bathroom and two bedrooms with floor to ceiling picture windows looking out on the Gulf. Jean-Paul made a point of telling us that he and Alexis had both put money into buying the house and were joint owners. My sense was that Alexis and Jean-Paul were committed to each other.\n\nThe dinner party would be on Saturday evening. Gail and I arrived on Friday. As we had drinks before dinner, Alexis said, \"Ian, Gail has wanted to show herself off for years. I'm thrilled she's found someone she's comfortable doing it with and someone who is willing to do it with her.\"\n\n\"I'm wouldn't say I'm comfortable,\" Gail interjected. \"It isn't till tomorrow and I'm already nervous.\"\n\n\"The anticipation is part of the thrill,\" Alexis replied. She looked at Jean-Paul, who nodded, and then took a large photo album from a shelf. \"To get you into the right frame of mind, I want you to look at pictures of some of the things Jean-Paul and I have done.\" Gail and I were sitting together on a sofa. Alexis handed us the album and we spread it across our laps.\n\nThe first picture in the album was a full-length picture of Alexis from her right side. She was standing by herself in a warehouse or storeroom. She was nude. Her arms were extended above her head and her hands appeared to be tied to something out of the picture above her. Alexis was smiling. The next two pictures were of Alexis in the same position but were taken from in front and behind her. Alexis was a lovely woman. The fourth picture was the same scene except there were several clothed people standing around Alexis. In the fifth picture, people had their hands on Alexis's breasts and buttocks. The sixth picture was of Jean-Paul walking towards the camera, apparently in the same room as the other pictures. He was nude and had an erection. Alexis and Jean-Paul were both in the seventh picture. Her hands had been released. She was kneeling in front of Jean-Paul with his penis in her mouth.\n\nAfter seeing the blow job picture, I looked up at Alexis. Jean-Paul had gotten up and was standing beside her with an arm around her back. They both looked pleased. \"That was a fun scene we did in Ft. Myers with some friends,\" Alexis said. \"The next pictures are from a scene in Miami.\"\n\nGail flipped to the next page in the album. It was shot from above. Alexis and Jean-Paul were lying faceup on what looked like hospital gurneys. There appeared to be about two feet between the two gurneys. Both Alexis and Jean-Paul were nude. Their ankles were tied to the corners of the gurneys, holding their legs somewhat apart. Straps had been fastened across their thighs just above the knee, across their abdomens, across their shoulders, and across their foreheads. From the picture, I assumed they were completely immobile. If you had just described the picture to me, I'd have thought it was weird. However, the image was very sexy.\n\nAfter we had looked at the picture for a time, Alexis explained. \"Once we were strapped down, they let a bunch of people we didn't know into the room. There was a bar on a wall to my right. People could get drinks and touch us. Jean-Paul and I had told the organizer that guests could stimulate us to orgasm. We were in that position for a couple of hours. I got off about six times.\"\n\nJean-Paul chimed in. \"Of course, it's different for a guy but women came by to stroke me enough that I was hard for the whole two hours. A couple brought me close then stopped. Thankfully, none of the men stroked me although I couldn't have done anything about it if one had. Right before the scene ended, the woman who organized it stood between Alexis and me. She fingered-fucked Alexis until she came with one hand and stroked me until I shot with the other. Turn the page.\"\n\nThe next picture was the same as the first except Alexis was very flushed and her nipples looked hard. You could see semen on the head of Jean-Paul's dick. Gail took my hand and squeezed it. To Alexis and Jean-Paul, Gail said, \"that is just, wow!\"\n\nAlexis smiled. \"Those two are my favorite scenes,\" she said. \"We've done some others. You cannot appreciate it until you've done it how gratifying it is to be completely exposed and come in front of other people. You're both going to learn. Your first turn is coming in about 24 hours. You will love it.\""
    ],
    "authorname": "HStoner",
    "tags": [
        "bondage",
        "cybersex",
        "exhibition",
        "group nudity",
        "masturbation",
        "public nudity"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/the-naked-and-the-dead"
}
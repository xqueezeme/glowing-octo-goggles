{
    "title": "Her Governess Ch. 03",
    "pages": [
        "Author's note:\n\nWelcome to the third of four chapters in a story about two women engaged in a consensual D/s relationship. I really appreciate the feedback from chapters one and two -- I find your comments and emails are helping me to understand the story better. Through your comments, I'm seeing angles and themes that I hadn't realized were there as I was writing and editing -- it's been an eye-opening experience. So thanks for so generously helping my development as a writer. I hope you enjoy this chapter, and thank you for reading! The final chapter should be along in a week (or so).\n\nNote that this chapter contains a fairly intense spanking scene towards the end. Just thought I'd mention it, in case it's not your thing...\n\n*\n\n\"All your tests were negative,\" said Dr. Lynne Noori, handing a printout to Ashley.\n\nKara knew it had been kind of her doctor to accept Ashley as a patient, given how busy she was already, and was grateful for the accommodation. It would have been terribly awkward to approach a strange doctor about having blood tests done for sexually-transmitted infections. \n\nAshley's eyes widened and the blood drained from her face.\n\n\"All of them?\" Her voice was mingled horror and disbelief.\n\nDr. Noori looked puzzled by the reaction, and Kara rubbed Ashley's arm reassuringly.\n\n\"No, Ash, that's a good thing. 'Negative' means they didn't find anything wrong.\"\n\nRelief flooded the younger woman's face. \"Oh! I thought she meant negative as in bad.\"\n\nIt had been eleven days since Ashley's epic orgasm in the collar and leash, and the level of intimacy between them had only increased since then. There were nightly massages, with Kara giving or receiving, or both. She'd stroked her young ward to a second orgasm exactly a week after the first, and the following day Ashley had asked to reciprocate with her mouth; a bold, out-of-nowhere request that had caught Kara by surprise. \n\nShe'd been trying to bring Ash along slowly to ensure she was comfortable and had time to adjust to the changes, but the submissive woman had jumped in with both feet and suddenly it was Kara struggling to keep up. Ashley seemed more comfortable each day immersing herself in Kara's control, and eager to enjoy and reciprocate any intimacy Kara showed her.\n\nIt had been awkward to raise the issue of possible sexual infections -- Kara didn't want to offend Ashley. But Chad had forced the young woman into plenty of unsafe situations and Kara wanted to understand what risks she and Ash would be taking once they started 'exchanging fluids'. If treatment was needed or precautions had to be taken, better to know up front rather than after it was too late.\n\nAshley had been understanding about the sensitive topic and readily agreed to the tests, although she'd been disappointed that mouth-to-genital contact would have to wait more than a week until the test results came in. Kara had herself tested too, just to show Ashley she wasn't in it alone.\n\nBut now they'd both been given a clean bill of health, so the gloves were off, so to speak. \n\nShe was little more than five weeks into her new life as a governess, and Kara had to admit she was enjoying it. Ashley was a delightful submissive -- earnest, hard-working and enthusiastic -- who preferred a firm hand and thrived under high protocol and stricter dominance. Knowing there was a young woman eager to obey her every command was arousing and powerful. Kara found that being the one in charge brought with it new emotions: sometimes protective and maternal, sometimes hot and lustful, sometimes frustrating and even confusing. \n\nBut hitting the right balance -- finding her dominant 'voice' - was getting easier over time. She learned something new each day, and her admiration for her late Master Peter grew with every lesson. Now she understood that what appeared so simple on the surface was a lot harder than it seemed, and that being a dominant required as much dedication and commitment as being a submissive.\n\nShe hadn't lost sight of the \"non-kink\" goals she had for Ashley -- a job, an education, supportive peers, hobbies and interests, and eventually some counseling. She'd had success addressing some of those lofty objectives, and had ideas for how she could encourage Ashley to develop the other 'vanilla' parts of her life that had been so neglected.\n\nAnd a visit to the workshop was one of those ideas.\n\n*\n\nEverything about the workshop reminded her of Peter.\n\nThe clacking of the key in the door lock. The high-pitched beeps as she disarmed the alarm system. The hum of the bright rows of fluorescent lights overhead. The smell of sawdust. The grey, paint-splattered concrete floor. The saws, drills, lathes, hand tools, saw horses and work benches. The lumber stacked up against the far wall. The finished and half-completed kink furniture stowed here and there -- wherever space could be found.\n\nPeter was everywhere here. This was his space, his domain. The workshop was a temple dedicated to his profession and most beloved hobby. She'd joined him here, spent hours working alongside him, learning at the feet of the master until she was almost as proficient as him. But no matter how long she'd spent there, it had always felt like HIS space. HIS world, that he'd happily shared with his beloved wife.\n\nKara found tears welling as she surveyed the quiet work space. She hadn't come here much since his death. There hadn't been any reason, until now. \n\n\"This place is huge!\" Ashley gasped from just behind her. \"All this was his?\"\n\nKara nodded. \"When we got married, we wanted to live in the city but workshop space is so expensive there, and neighbors don't appreciate the noise. So he found this out-of-the-way industrial park and leased this space. We're surrounded by factories and warehouses, so no one cares about the noise.\"\n\n\"And you know how to work all this stuff?\"\n\n\"Yes. He literally taught me everything I know about carpentry. But even after fourteen years I don't have half the knowledge he did. I'm competent, but Peter was passionate about it.\"\n\n\"That's so cool,\" Ashley said, and the awe in her voice was hard to miss.\n\nKara shoved the keys into her coat pocket and wandered deeper into the workshop. \n\n\"Normally we'd be in work boots if we were building something, but your winter boots should be okay for now. Just watch your step.\"\n\n\"What was it you wanted to show me?\" Ash said, following behind.\n\n\"I'm thinking of getting a booth at Ero-Con in June, and re-starting the business. I've been getting lazy since Peter died and I need something to fill my time productively.\"\n\n\"You're going to sell this stuff?\"\n\n\"Sell, and also take custom orders. The custom orders bring in the most money.\"\n\n\"Yeah?\"\n\n\"Once Peter got an order for a working, medieval-style rack... a slab that a prisoner gets chained to and his arms and legs get stretched in opposite directions. The guy paid almost twelve thousand dollars for it.\"\n\n\"No way!\"\n\n\"Wealthy kinksters will pay for quality, stylized work. The rack was the centrepiece of a pretty impressive dungeon.\"\n\n\"So you want me to help out at Ero-Con?\"\n\n\"If you like. And if you want, I'll show you how to build things, too.\"\n\n\"That would be awesome!\"\n\nKara smiled at her ward's enthusiasm, then led the way further into the cluttered work space. \"Let me show you some of the finished works. Ever seen stocks?\"\n\n\"I think so.\"\n\nKara stopped in front of a waist-high, padded bench connected to a headboard that had three small circles cut into it. She un-clasped a latch and half the headboard lifted open on a hinge. \n\n\"Take off your coat and lie on your stomach on the bench. Put your neck in the middle hole and your wrists in the holes on either side.\"\n\nAshley carefully did as requested, leaving her bent double, rear end presented to her governess.\n\n\"I'm going to lock you in, just so you can experience it. If you feel uncomfortable, say the word and I'll open it right away, okay?\"\n\n\"Sure.\"\n\nKara closed the top of the headboard, careful not to pinch Ash's skin or trap her hair, then locked the latch.\n\n\"What do you think?\"\n\nAshley made a half-hearted attempt to free her wrists but quickly gave up. \"I guess I'm stuck.\"\n\n\"Mmm. And this cute bum is thrust out here, ready for anything I wanted to do.\" Kara rubbed her hands over the back of Ash's yoga pants, then slipped her fingers under the waistband and slowly drew them down to mid-thigh, along with her panties, baring her pale ass.\n\n\"Hey!\"\n\n\"Just demonstrating,\" Kara said, allowing plenty of tease in her voice. \"Tell me if you want out.\" She ran her fingernails lightly over the smooth skin, then allowed her fingers to caress the inner swells of her cheeks and drift lower to her soft inner thighs.\n\n\"Feels amazing.\" Ashley parted her legs as much as the waistband would allow.\n\n\"It's a very submissive position to be in. Everything is available to my eyes and my fingers. I'm free to enjoy this tight little bum hole...\" Kara's gently teased the sensitive ring with the nail of her index finger, amused by the way it tightened and released reflexively.\n\n\"Yes, Miss.\"\n\n\"I can tease these pussy lips...\" Kara traced her finger lower, stroking Ash's outer labia. Already the smooth contours of her ward's pussy were becoming familiar; Kara had spent many long minutes tormenting that sensitive flesh in the weeks Ashley had been staying with her.\n\nAshley gasped and strained against the waistband, fighting to spread wider. \n\n\"Or even this naughty clit...\" She licked her middle finger to wet it, then reached down to give light feather-touches to Ash's already-engorged pleasure centre. \n\n\"Please...don't stop.\"\n\n\"Hungry already? You just came three days ago.\"\n\n\"Yes, Miss, very hungry. I'm always hungry for you. Please?\"\n\n\"Hmm, maybe a little longer then.\"\n\n\"Oh, thank you!\"\n\nKara obliged the younger woman for almost another minute, drawing out sighs and wetness, then let her fingers drift away from her hard clit. Ashley groaned her disappointment but didn't complain.\n\n\"Of course, having a bare bum so nicely presented lends itself to a spanking as well. Shall I demonstrate?\"\n\nAsh hesitated, but only for a moment. \"Yes, Miss. Please?\"\n\nKara stroked her palms over the soft flesh in front of her. \"Very well. Maybe a light spanking, just so you get the full experience. I want you to count each one, and tell me whether you want the next one harder, softer or the same. Clear?\"\n\n\"Clear.\"\n\nKara drew back and paused. She'd never struck anyone before, and wasn't sure how much force to put behind her blow. She decided to start gentle and let Ashley guide the proceedings. The first spank was soft; little more than a tap.\n\n\"One. I can take it harder, Miss.\"\n\nKara struck again, swinging with more force. Ash's bum quivered under the stinging slap, then turned a very faint tint of pink.\n\n\"Two. That stings a little. Maybe just a touch more?\"\n\nThe third swat caused a mild stinging in her palm. The sound of flesh hitting flesh echoed in the empty workshop.\n\n\"Three. I think...I like it just like that.\"\n\nKara delivered the fourth smack, then a fifth and sixth, getting a good feel for how much strength to put behind each one. When Ashley had counted off the sixth, Kara returned her fingers to her pussy and found it wetter than she'd left it.\n\n\"Someone enjoyed that.\"\n\n\"Yes, Miss.\"\n\n\"You like being spanked?\"\n\nThere was a brief pause. \"I like it when YOU spank me.\"\n\nKara bent and gave a slow kiss to each of Ashley's buttocks, then eased her panties and yoga pants back into place. She tripped the latch on the headboard and lifted the top half, freeing her ward.\n\n\"How did it feel to be helpless?\"\n\n\"It was hot,\" Ashley said, beaming her an excited smile. Her face was slightly flushed. \"But I wasn't really helpless since I knew you'd let me out if I asked.\"\n\n\"Always. I'd never do anything against your will.\"\n\nAshley grabbed her hand and held it fondly. \"This is neat, though. You built this?\"\n\n\"Yes, I did this one, almost by myself.\"\n\n\"What else have you got here?\"\n\n\"Let's see...\" Kara led her by the hand to a workbench. \"Oak paddles of different sizes and weights. These ones,\" Kara indicated mini-spatulas, \"are for delicate areas; breasts, inner thighs, pubic mound. They give you one hell of a sting but don't leave any real bruising, although they mark up your breasts pretty nicely for a day or so.\"\n\n\"You tested them out?\"\n\n\"It's more accurate to say they were tested ON me,\" Kara said with a rueful smile, then picked up a paddle with a face the width of a salad plate.. \"These big boys are strictly butt paddles -- they can produce some pretty serious pain and bruising.\" \n\n\"Those were tested on you as well?\"\n\n\"Oh, yes. It was...memorable, let's put it that way.\"\n\n\"Do you like being spanked?\"\n\nKara gave her a wink. \"I enjoyed it when HE spanked me, yes.\"\n\n\"But were you into serious pain?\"\n\nShe hesitated, unsure of how much she wanted to reveal. But she was a governess, after all -- educating Ashley was part of her duty.\n\n\"When I was really aroused...totally absorbed in the moment and feeling Peter's control strongly, pain became...something else. Something I wasn't afraid of. I didn't LIKE it, exactly, but I kind of craved it. The pain added to the depth and intensity of the moment. When I was in the zone like that, he could smack me with one of these big boys and it would pull me in deeper, force me to let go and surrender whatever emotions I was withholding from him. It didn't have to be a paddle -- sometimes he'd slap my face or hurt my nipples.\"\n\nKara looked at Ashley and found her paying rapt attention to her words.\n\n\"But it had to be done right -- just the perfect amount, at just the perfect time. And I had to be good and heated up -- if he'd smacked me with one of these big boys right off the top, I'd have hated it and probably would have safe-worded immediately.\"\n\n\"Wait...you had a safeword?\"\n\n\"Yes, right from the very start. 'Yellow' when I needed him to ease off a bit, and 'red' when I needed a hard stop. Not too original, but easy to remember.\"\n\n\"Did you use them a lot?\"\n\n\"At first I 'yellowed' a fair bit. As Peter and I got more familiar with each other, he became a lot better at reading my comfort level and pain tolerance so I didn't need it as much. But it was always available to me.\"\n\nAshley was quiet for a few moments, processing the words.\n\n\"Do you think we could try that? With the pain, I mean, and forcing me to surrender all my emotions to you? I think...I kind of get like that, too. Not with Chad, but with my first Master. And that first time with you...I liked hurting my nipples. It kind of made the feeling stronger. Maybe I'd like it even more if you did it.\"\n\nKara was quiet as she thought it over. On one hand she was happy to hear Ash expressing her preferences -- that had to be a positive sign; an indication of emotional health. But Kara didn't know if she had the skill or the confidence to balance the pleasure and pain properly. Even Peter hadn't done it right every time -- there had been plenty of false starts and safewords, and even some hurt feelings once or twice. They'd been together for years before he'd mastered it. But once he did...it was an experience like no other. She wanted Ash to have that.\n\n\"How comfortable are you with safe-wording?\"\n\n\"I guess if you needed it, I should probably have one too, right?\" Ash said.\n\n\"It would help me a lot if I could trust you to use them. We'll talk about it in more detail before start thinking about pain.\"\n\nKara held Ash's hand and led her around the large workshop, pointing out the danger spots, where the fire extinguisher was and what each of the tools did. Ashley paid close attention, and it seemed the younger woman might have a genuine interest in the work. \n\nShe knew Ash could get into carpentry with a one-year college diploma and a four-year apprenticeship, but she'd need her high-school equivalency to get into college. Kara had been thinking of ways to 'nudge' her towards getting her education; maybe an interest in carpentry would provide the motivation Ashley needed?\n\n\"Maybe on the days you're not at the bakery you'd like to join me in the workshop? There are a few pieces that are almost ready -- they just need sanding or staining or painting. You could start there and learn your way around, then start using the power tools. What are your thoughts?\"\n\n\"That would be so cool!\"\n\n\"Naturally, you'd get a share of the profit from anything we sold. I'm not expecting free labour.\"\n\n\"Oh, come on. I could work free for ten years and it wouldn't make up for what I owe you. Just put it towards rent or my share of the expenses. How's that?\"\n\n\"Hmm. I'm not sure if that's fair or not. Let me give it a bit more thought.\"\n\n\"I know whatever you decide will be perfect.\"\n\n*\n\nIt was Wednesday evening, the day after the workshop visit. Kara was in black Lycra -- a black Lycra bustier and open-crotch thong with five-inch black heels. She carried a black, leather crop, a pair of chrome handcuffs and the chain leash that Ash had become so fond of in the last couple of weeks.\n\nShe walked through the open door into Ash's bedroom to find her ward naked in her collar, sitting up straight on the side of her mattress, waiting as instructed. The way her eyes widened and mouth dropped open when she got her first glimpse of Kara's outfit was a genuine, wordless compliment.\n\n\"You look amazing,\" Ashley said in a quiet, awed voice.\n\nKara flashed her an appreciative smile. \"We're going to be trying some new stuff tonight. As always, if anything makes you uncomfortable I expect to hear about it right away. Is that clear?\"\n\n\"Yes, Miss.\"\n\n\"I'll be putting handcuffs on you. Any time you want me to remove them, I want to hear you say it in plain English. I'll let you out immediately, no questions asked. Understood?\"\n\n\"Yes, I understand.\"\n\nKara stopped in front of Ashley and gently stroked her cheek. Ash closed her eyes and pressed against Kara's warm palm. And then the tender moment was over, and Kara clipped the chain leash to Ashley's collar. A gentle downward tug on the leash had Ashley sliding off the mattress and onto her knees.\n\nKara put her through her paces for a minute or so, kneeling, standing, up on her toes, back to kneeling, all directed wordlessly by little pulls on the leash. Ash's pretty green eyes never left Kara's face the whole time. \n\nThen Kara got the younger woman kneeling and tugged downward again.\n\n\"Hands and knees,\" she commanded.\n\nAshley quickly complied. \n\nKara turned and walked toward the doorway. A faint pull on the chain had Ashley crawling behind her on the hardwood. She'd never made Ash crawl before and Kara was careful to walk slowly and remain alert for signs or reluctance from the younger woman, but there were none.\n\nShe led her crawling submissive to the living room, then silently tugged her to a standing position. Kara walked around behind Ashley and leaned in close to her left ear.\n\n\"How did it feel to crawl for me?\"\n\n\"It was so hot, Miss. Thank you.\"\n\n\"Put your wrists behind you.\"\n\nAsh did so immediately and Kara took her time fastening the cuffs to one wrist, then the other, making sure they were tight but not pinching.\n\nShe walked around in front and again ran Ashley through the stand-kneel-stand-toes routine by tugging the leash, coaxing her more deeply into a submissive state. Finally she tugged Ash into a kneeling position on her cushion in front of the couch. Kara put a double-folded white towel down on the couch cushion before standing in front of Ashley, heels shoulder-width apart. The open crotch of her black thong framed her smooth mound and labia perfectly, right in front of the younger woman's face. The panties been Peter's favourite.\n\nKara used the tip of the crop to stroke Ashley's shoulders and arms as she knelt, then tossed it onto the couch.",
        "\"Tonight is all about my beautiful pussy, do you understand?\" She added an extra edge to her Domme voice.\n\n\"Yes, Miss.\"\n\n\"What is tonight about?\"\n\n\"Your pussy.\"\n\n\"No. Try again.\"\n\nAshley paused. \"Your beautiful pussy.\"\n\n\"Much better. Until I say otherwise, your eyes are to be here,\" Kara ran her fingertips over her own slit.\n\nAshley lowered her gaze as directed. Kara noted the hunger in those green eyes and had to suppress a satisfied smile. Her ward was so easy to read.\n\n\"I expect my beautiful pussy to have all your attention and respect. It gets your complete focus at all times, understood?\"\n\nAshley nodded.\n\nKara wrapped the leash around her hand several times to take in all the slack between her hand and Ashley's collar.\n\n\"Do you like what you see?\"\n\n\"Oh yes, Miss, so much.\"\n\n\"Lean closer. I want your nose right here.\" Kara tapped her smooth mound with her index finger.\n\nAshley leaned in and touched the tip of her nose to the spot indicated. Kara felt a surge of arousal at the intimate contact. She was growing to enjoy having a compliant and submissive partner, and her mind was alive with possibilities. \n\n\"Breathe in deeply through your nose.\"\n\nShe heard Ash inhale, then felt hot breath on her thighs as her ward exhaled in a loud, shuddering breath. The sensation caused shivers down her legs.\n\n\"What are you smelling?\"\n\n\"Your...beautiful pussy.\"\n\n\"Do you like that scent?\"\n\n\"God, yes. So much.\"\n\n\"I made it clean and smooth, just for you.\"\n\nAshley groaned and took another greedy breath through her nose.\n\n\"Would you like to kiss it?\"\n\n\"Yes.\"\n\n\"Is that any way to ask?\"\n\n\"Can I kiss your pussy, Miss?\"\n\n\"Say please,\" Kara admonished, emphasizing her words with a gentle tug on the leash.\n\n\"Please...let me kiss your pussy?\"\n\n\"Do you remember how to kiss my mouth?\"\n\n\"Soft and...slow. And I don't pull back until you do.\"\n\n\"You'll kiss my pussy the same way, do you understand?\"\n\n\"Yes, Miss.\"\n\n\"Very well. You may kiss the spot where your nose is.\"\n\nThe feel of Ashley's soft, warm lips against her intimate flesh caused Kara's heart to hammer in her chest and her pussy to tingle and throb. Kara allowed the kiss to continue for almost ten seconds before using the leash to back Ashley off, and both of them were breathing harder by that time.\n\n\"How did that feel?\"\n\n\"Like a dream.\" Ash's voice was barely louder than a whisper.\n\n\"You've been thinking about that for a while.\"\n\nAshley nodded, eyes still locked onto Kara's sex.\n\n\"And what other thoughts have you been having, my naughty ward?\"\n\nThe younger woman's face flushed pink. \"My mouth on you...making you come.\"\n\n\"Have you ever licked a pussy before?\"\n\n\"Yeah.\"\n\n\"Have you ever licked a pussy as beautiful as this one?\"\n\n\"No way...yours is a million times better, Miss.\"\n\n\"Mmm. I like how that sounded. You may have another kiss,\" Kara purred.\n\n\"Oh, thank you! Now?\"\n\n\"Yes.\"\n\nAsh didn't need further prompting, pressing another hot kiss to the same soft skin as the first, and it caused a ripple of lust to roll through Kara's pelvis and stomach.\n\nKara stepped back again, and made a show of peeling the tight thong down her legs and past her knees, then let it drop to her ankles. She raised her heels one at a time and gracefully stepped out of the leg holes of the thong, leaving it in a tiny heap at her feet. \n\nShe let out some slack in the chain leash, then held out her hand. \"Pick those up and give them to me.\"\n\nAshley hesitated for a moment, then slowly bent forward and brought her face to the floor between Kara's high heels. When she straightened again, the skimpy panties were held lightly between her teeth, her face a deep pink, green eyes lust-filled and hungry and still fixed on Kara's now-naked pussy.\n\nKara made no move to take the panties, instead standing over her submissive ward, leash in hand, and patted Ashley's head gently.\n\n\"Is my good girl having fun?\"\n\nAsh nodded vigorously.\n\nKara allowed herself a chuckle, then slowly sat down on the couch, knees wide. \n\n\"Come closer. Put your chin right here,\" Kara said, tapping the towel between her legs. Already she could smell her own arousal in the air.\n\nAshley shuffled forward on her knees, then leaned forward and rested her head on the towel, between Kara's thighs, the tiny thong still hanging from her lips. Kara enjoyed the sight of her desperately horny submissive: flushed cheeks, emerald eyes, her wrists linked behind her by gleaming, chrome cuffs; her naked, kneeling form huddled between Kara's wide-spread knees.\n\nBeing the dominant one DEFINITELY had its perks!\n\nKara took the panties from Ash's mouth. \"Now watch closely and I'll teach you the proper way to lick a beautiful pussy like this. You DO want to lick it, right?\"\n\n\"Yes...so much!\"\n\n\"Tell me how much you want to lick my pussy.\"\n\n\"I've been thinking about it non-stop for, like, two weeks. I can't wait to taste you. I want you real bad, Miss Kara.\"\n\nKara paused, allowing the need to build, then lightly grazed her index finger over her own labia as Ash looked on intently. A leisurely caress trailed down the soft length of her left outer lip, then up the right one. Ashley's gaze followed the finger's movement as though hypnotized.\n\n\"You will begin with long, hot, slow licks, starting way down here at the bottom,\" Kara touched the lower swell of her left pussy lip, \"And finishing right up here next to my clitoral hood.\" Her finger traced the route she'd just described. \"Then you'll start all over again at the bottom. One lick on the left, then one on the right. Back and forth, again and again. You are NOT to touch my clit with your tongue. Is that clear?\"\n\nAshley was panting now. \"Yes...yes, Miss. Very clear.\"\n\n\"You're going to do a good job?\"\n\nAsh nodded eagerly.\n\n\"Each lick will be exactly perfect?\"\n\n\"Yes, Miss, I promise.\"\n\n\"You'll continue until you're told to stop. I want a long, sensual tongue massage.\"\n\n\"Oh...please? Can I begin?\"\n\nKara held the moment for a few extra beats. \"You may begin.\"\n\nAsh moaned, lowered her head and extended her tongue. Her warm, ragged breath caressed Kara's pussy and the lower swells of her buttocks as she brought her face down, then dragged her hot, slippery tongue up over Kara's outer lip.\n\nThe feeling was heavenly -- so much different than when Peter had licked her. Not better, exactly, but somehow knowing that her young submissive was obediently SERVING her infused the sensation with an extra emotional kick. It wasn't more arousing than her late husband's skilled tongue, but it was pushing different buttons, that was for certain.\n\n\"Mmm. Very nice. Slow down a little...I don't like to be rushed.\"\n\n\"Ohhh...yesss.\" Ashley slowed her tongue as instructed.\n\nKara sighed and leaned back into the soft couch, allowing herself to simply enjoy, enthralled by the sight of her beautiful Ashley servicing her sex. Each lick brought an accompanying quiver of excitement in her pussy and tummy. By the ravenous look in Ash's eyes, Kara suspected the arousal was mutual.\n\nSeveral minutes flew by. Kara found she was in no hurry to move it along.\n\n\"Is your pussy wet, Ashley?\"\n\n\"God, yeah.\"\n\n\"Mmm. But that doesn't matter does it? Whose pussy is the most important right now?\"\n\n\"Yours, Miss. You taste so good...\"\n\nKara allowed the younger woman to lick for a few minutes longer, but then decided to move on, aware that the strain on Ashley's bent-over back, neck and knees would get agonizing after a while. And almost as important...Kara was feeling the approach of an absolutely mind-blowing orgasm and didn't want to deny herself for much longer.\n\nShe used the leash to pull Ash's face away from her pussy. Her submissive groaned her disappointment and rested her saliva-soaked chin on the towel between Kara's legs.\n\nKara used the fingertips of both hands to pull back her clitoral hood, fully exposing the glistening pink bead to Ashley's hungry gaze.\n\n\"What do you see, my little pet?\" she teased.\n\n\"Your clit, Miss. Please...can I lick it?\"\n\n\"Shall I tell you how to treat a pretty clit like this one?\"\n\n\"Yes...please.\"\n\n\"Okay. I want you to put your lips around it...keep it nice and warm in your mouth. Then you gently swish your tongue over it, back and forth. Not too fast...it doesn't like to be hurried. Would you like to give that a try?\"\n\n\"Oh, God...I can't wait.\"\n\n\"Let's hear you ask nicely.\"\n\n\"Please, Miss Kara, can I do your clit?\"\n\n\"Mmm. Get busy.\"\n\nAshley put her lips on Kara's sex, her tongue quickly finding Kara's engorged clit. With the first pass of her submissive's soft, delightful tongue, Kara knew she wouldn't be able to hang on long. She felt so immersed in the intimate scene with Ashley, so connected to her, and so ready to surrender a powerful climax to Ash's desperately eager tongue.\n\n\"Look at me,\" Kara breathed, suddenly needing to see those gorgeous, green eyes on her when she came. \n\nNo sooner had Ashley gazed up at her, mouth sealed over her throbbing clitoris, then Kara tipped over the edge. Her come was a deep one, beginning down in her sexual core and exploding out in spasms and waves that brought a low, strangled cry of release. She felt her sex clenching and grabbing and her hips rising automatically to grind her pussy into Ashley's delightful, hot mouth. The spasms and aftershocks seemed to last more than a minute. \n\nAs they slowly died off, Ash's soft tongue began to feel too intense against Kara's super-sensitive clit. She gently pulled up on the leash, bringing Ashley's head, shoulders and chest up to rest on Kara's naked lap, taking the strain off the younger woman's lower back and neck.\n\nIt took a long time to recover her breath. How long had it been since her last hard come? Two months? She vowed to treat herself much more often. \n\nShe stroked Ashley's black hair and caressed her face, wet with saliva and the sticky remnants of Kara's arousal.\n\n\"Oh, Ash...that was amazing. I haven't felt that much pleasure in a long time. Thank you.\"\n\nAsh didn't reply right away; she was still aroused, still panting. After a few minutes her breathing calmed and when she spoke, her voice was quiet and filled with certainty.\n\n\"I love you, Miss Kara. I love you so much. Thank you for letting me serve you.\"\n\n*\n\nI love you.\n\nThey'd been words spoken in the heat of the moment. Emotion was high. Ashley was over-heated and drifting in a submissive haze when she'd confessed her love. In a situation like that, it was easy to use the wrong word, or to mistake intense lust for something more. Right?\n\nKara lay in bed early the next morning, eyes closed, trying to make sense of what had happened. Trying to decide what happens next.\n\nIt was all her fault, of course. She'd known Ashley was young and emotionally vulnerable. That was part of the reason she'd brought her in, after all. To protect her and keep her safe. To build her up and show her a different side of the submission she craved. A warmer, safer side. She'd planned keep Ashley close by until the young woman was in a better place emotionally, financially and educationally. Kara hadn't planned how the relationship would end, but she'd always half-assumed it would, at some point. \n\nOr at least, that's how she'd imagined it in the beginning. \n\nBut Ashley's sudden declaration of love was forcing Kara to question her own feelings toward her so-called ward, and she was discovering those feelings went deeper than she'd initially thought.\n\nForty days. That's how long she'd known Ashley. And despite their brief association, Kara was beginning to consider a future that included the younger woman. Ash had stepped into the void left by Peter's death and provided companionship, intimacy and emotional support. She evoked in Kara some strange, wonderful mixture of maternal caring, sexual hunger and...maybe something more? Or something else, in any case.\n\nBut was that allowed? Was that okay? Kara was twenty-two years Ashley's senior. More than twice her age. Literally old enough to be her mother. By holding onto Ashley, Kara would be depriving the young woman of a 'normal' life -- a husband, kids, a traditional family. Being in a relationship with someone so much older might be a hardship for poor Ash.\n\nKara groaned and pulled the pillow over her face. Those were the same arguments her mom had used to discourage her from marrying Peter. He's too old. What could you have in common, anyway? You'll regret not having kids. He'll be in a nursing home when you're still in your prime. Rational arguments that hadn't been the least bit effective in dissuading her.\n\nPeter had been good to her, and good FOR her. She didn't regret anything about their relationship except that it ended about a hundred years too soon. So why couldn't she be that for Ashley? \n\nIf that was what Kara wanted...\n\nOr what Ash wanted. The confession had been spoken in passion, after all. Ashley might have forgotten all about it after a good night's sleep, after the lust dispersed and sanity returned.\n\nMaybe there was no need to over-think this. \n\nKara tossed the pillow aside, rolled out of bed and threw on a robe. There was no reason to hide in her bedroom. She'd go out, have some breakfast with Ash and just play it by ear. More than likely, the younger woman would never bring it up again.\n\n*\n\n\"May I ask a question, Miss?\"\n\nThey'd just finished a relaxing, low-protocol breakfast of French toast and coffee. She and Ash were dressed in baggy sweat pants and t-shirts -- her ward seemed to prefer wearing Kara's comically over-sized old shirts. Ashley was ready to begin her morning chores and Kara was about to pour herself a second coffee and retreat to the couch with her book. A perfectly normal Thursday morning.\n\n\"You can always ask,\" Kara said.\n\n\"Do you think you'd ever consider taking me as a slave? Like, officially?\"\n\nKara hesitated, wary of the rabbit hole this could lead her down. \n\n\"Are you asking because you're not happy with our arrangement? If you feel something's not working, we can discuss it, and make changes.\"\n\n\"No, no!\" Ashley said quickly, \"That's not it at all. Actually, it's kind of the opposite. Everything has been almost perfect so far. It's just...\" she trailed off, then knit her brow and bit her bottom lip, trying to come up with the right words. \n\nKara was content to wait, accustomed to the way the younger woman's brain worked.\n\n\"Okay, this isn't a complaint, so don't take it that way, alright?\" Ash said at last.\n\nKara nodded and smiled her encouragement.\n\n\"It feels like...you're trying really hard to meet MY needs, but...I want to be trained to meet YOUR needs. That's what would make me the happiest.\"\n\nKara was quiet as she absorbed the words. \n\n\"Like, last night, when you were telling me how to lick your pussy...that was awesome. I felt like I was really learning how to serve you. It was super-sexy, but also satisfying because you were opening up and showing me how I should behave in order to please you. You're the most awesome Domme ever, but I feel like I'm still guessing when it comes to making you happy.\"\n\n\"Wow...that's good feedback, Ash,\" Kara said, trying to decide what to do with it.\n\nShe tried to put herself into Ashley's position and almost immediately grasped the younger woman's point. One of the best parts of her own submission to Peter had been the feeling of serving him well. There was power in her mastery of his needs, his preferences. It brought her joy and satisfaction and a strange sense of security to know what he expected and what he desired. If Peter had been coy about his expectations or wishes, that would have diminished her enjoyment of their relationship. What fun is submission if you can't determine what the other person wants?\n\n\"I get that you're trying to go slow and not freak me out or anything. But...it sometimes makes it hard to know how to serve you like I want to.\"\n\n\"And you figure if I was your Mistress and not your governess, that would get me to open up and take charge a bit more.\"\n\nAshley nodded. \"But like I said, no way am I complaining. It's just...you know...Honesty is one of the Five Principles so I thought maybe I should say it, especially after last night was so amazing...\"\n\nKara smiled and reached across the table to rest her hand on Ashley's. \"I'm glad you said something. And it was a really insightful point. When you share your thoughts like that, it makes me a better dominant.\"\n\nAsh beamed at the praise.\n\n\"Well...let's try it, then.\"\n\n\"Really?\" The excitement in Ashley's eyes and the glee in her voice were an indictment of Kara's prior failures in this area. Another lesson in how-to-be-a-dominant!\n\nBut at least Ash had spoken up and made her thoughts known -- something she might not have done in the beginning. That counted as a win!\n\n\"How about this: inside the apartment, we'll be Mistress and slave. You know...on a trial basis. If it looks like it's working, we'll make it 'official', as you put it. If it's not working, we'll discuss it and make adjustments. What do you think?\"\n\n\"That would be SO incredible, Miss! I mean, Mistress.\"\n\n\"Please clear the dishes away and meet me in your bedroom,\" Kara said in a gentle, firm tone -- her 'Domme voice', as Ashley called it.\n\nHer newly-minted slave hurried to obey while Kara poured herself a second coffee and walked to Ashley's room and stood facing the bed. The couple of minutes it took for Ash to clear and rinse the dishes allowed Kara to put her thoughts in order. One thing was clear: she needed to be more open and assertive about her wishes, to give her slave the opportunity to truly serve her. Apparently, being too selfless wasn't a good look for a dominant.\n\nThe younger woman joined her and sat down on the side of the mattress, looking up at Kara eagerly.\n\n\"Up,\" Kara said, adding an extra edge to her voice.\n\nThe other woman hesitated a moment, then stood.\n\n\"I'm your Mistress and your elder. If anyone should be seated, it's me. From now on, you will never sit while I'm standing. Is that clear?\"\n\n\"Yes, Mistress.\" Ashley's demeanor was no-nonsense. The young woman took her rules seriously.\n\n\"And if we're both seated, and I get up?\"\n\n\"I'll get up at the same time.\"\n\n\"Very good,\" Kara said, and gave a brief smile. \"Please take off your clothes.\"\n\nAsh didn't hesitate this time. She pulled her too-big t-shirt over her head and peeled her track pants and panties down her legs and off, then stood at attention, gloriously naked and thin.\n\nKara stepped in front of her slave and brushed the hair away from her face with her fingertips. \"You probably have the most beautiful eyes I've ever seen.\"\n\nThe compliment brought a smile and faint blush. \"Thank you, Mistress. I'm glad they make you happy.\"\n\n\"They really do. That's why from now on, I want to be able to see them clearly. You will wear your hair so it's out of your face. Wear it up, pull it back in a ponytail, braid it, whatever feels most comfortable for you. I shouldn't have to push your hair away from your lovely eyes. Understood?\"\n\n\"Understood.\"\n\n\"Put your panties back on and fix your hair. I'll be back in a moment.\"\n\nKara went to her room and came back with three sheer, chiffon scarves -- red, white and black. Ashley was standing in the middle of her room, her black hair in a shoulder-length ponytail, naked but for a pair of tight, white briefs.\n\n\"You have a sexy, slim body, and I enjoy seeing it,\" Kara said.\n\n\"Thank you, Mistress. It belongs to you, so you can see it whenever you please.\"\n\n\"I'm glad we agree. From now on, no more baggy pants or over-sized tees. Put your hands over your head.\"\n\nAshley complied, lifting her arms straight up. Kara folded the white scarf lengthwise, then wrapped it over Ashley's small breasts and knotted it at her back. She walked a slow circle around her slave, savouring the way the gauzy strip of fabric showed the faint outline of her breasts and nipples, and left her shoulders and upper chest and her tummy and abdomen uncovered. Kara faced Ashley towards the full-length mirror.",
        "\"How does that look?\" \n\n\"Oh, wow. It looks really sexy.\"\n\n\"This is your uniform from now on, in this apartment. A pair of panties, and a scarf. If you get cold, you can ask permission to wear more. At night, you'll sleep in panties and nothing else. Any questions?\"\n\n\"No, Mistress. Thank you.\"\n\nKara paused to take a long sip of coffee. Ashley's gaze didn't leave her; the younger woman's eyes were eager and face pink with arousal.\n\n\"How does it feel to be dressed this way for me?\"\n\n\"Amazing. So sexy and...free.\"\n\n\"Tell me the three rules you just learned.\"\n\n\"Um...never sit while you're standing, keep my hair out of my face, and only wear panties and a scarf at home.\"\n\n\"Well done. Now, you have chores to do, correct?\"\n\n\"Yes, Mistress. Can I get started, please?\"\n\nKara nodded, and Ash hurried from the room, an excited grin on her face.\n\n*\n\nSaturday came, and they were in the car. It was late afternoon. Kara was wearing her long coat over an ankle-length, blue dress with a strap belt around the waist. It was one of her favourite dresses -- the fabric was silky, soft and light, the colour was brilliant and it showed just enough cleavage to be sexy without looking trashy. The fact that she'd been able to find matching four-inch heels made it even better.\n\nIn the passenger seat beside her, Ash had black yoga pants and a tight, black t-shirt under her coat. She was in her leather collar. On her feet she wore sneakers over black ankle socks. Kara had dressed her without a bra or panties after carefully checking in with her slave to make sure it would be only a little embarrassing and not traumatic. Just in case it became an issue later, Kara had packed underclothes for Ash in her purse.\n\nShe hadn't planned on attending the party this time around, with Peter's death too recent and Ashley's submission too raw. But the timing of the Mistress-slave agreement she'd made with Ash had been favourable, and she'd decided it might be fun AND help Ashley as well.\n\n\"So how long have you been in this club?\" Ashley asked. She seemed equal parts excited and nervous. Kara could relate.\n\n\"Six or seven years, at least. It's not an official club -- more like a formal get-together with my kink-aware friends. We meet every couple of months, usually at Bev's house.\"\n\n\"And everyone is over forty?\"\n\nKara chuckled. \"All the dominants are, although it just sort of turned out that way. It's not a rule or anything.\"\n\nThey called their group the MAMMs -- Middle-Aged Mistresses and Masters. Peter had been a founding member and there were twelve couples in the club, though usually only seven or eight turned up at any given party. It was with a sudden pang of grief that Kara realized it would be the first time she hadn't worn her collar to the event. Everyone there was aware of Peter's passing, and they'd all been at his funeral. \n\nShe was looking forward to seeing her friends again, and especially eager to introduce Ashley. The young woman didn't have any close friends, and there were a couple of submissives in the group that were close to Ash's age. Kara wanted to begin building a supportive peer group around her vulnerable slave.\n\n\"Is there going to be any...you know...sex and stuff?\"\n\n\"No sex. Maybe some 'stuff', but none of it involving you. I've put you off-limits for this party so you have a chance to get used to everyone.\"\n\n\"When you went with Master Peter, did you have to...do things?\"\n\nKara couldn't help a blush and hoped Ashley didn't notice. \"Oh, yes.\"\n\nShe caught Ash's eager smile from the corner of her eye. \"Like what?\"\n\n\"Well, last year we played strip poker. Or I should say the dominants played, and the submissives were the ones who had to remove their clothing.\"\n\n\"Did you end up naked?\"\n\n\"Ugh. I love my husband, but he was the worst poker player I've ever seen. I was naked in practically no time. And after I lost all my clothes I had to do 'penalties' whenever Peter ran out of chips and needed to 'buy' more, which was practically every other hand.\"\n\n\"Penalties? Like what?\" Ash was grinning ear to ear.\n\n\"Oh, God. Jumping jacks. Jogging in place. Kissing toes. Whoever donated the chips to Peter got to pick.\" Kara was beet red now, her face burning at the memory.\n\n\"No way! You did all that? Naked?\"\n\n\"Yes.\"\n\n\"Did you like it?\"\n\nKara paused, considering the question, then smiled despite her blush. \"I did.\"\n\n\"You get off on humiliation?\"\n\n\"Not 'get off', exactly, but there's a certain excitement to being naked and forced to do what someone else says. Well...not FORCED, but you know...required. Plus, it was a party. It was sexy and flirty, but no one was putting their hands on me or anything. Except Peter, of course.\"\n\n\"So, what am I going to have to do at this party?\"\n\n\"Everything your Mistress says.\"\n\n\"This is so cool...going out as Mistress and slave,\" Ash said, and Kara could hear the satisfaction in her voice.\n\n\"Just remember, when we get there, you need to be at high-protocol. Everyone is there to have a good time, but we take this Dom-sub stuff pretty seriously; it's an important part of who we are. If someone breaks protocol, it takes a lot of the enjoyment out of it for everyone. I want you to have fun, but be attentive and obedient to me. Clear?\"\n\n\"Yes, Mistress. Always. I promise.\"\n\n\"I intend to have you on the leash this evening. Is that going to be a problem for you?\"\n\nAsh was silent as she thought it over. \"As long as I'm with you, it'll be fine. Maybe embarrassing at first.\"\n\n\"Let me know if it gets to be too much.\"\n\nThere was another pause.\n\n\"You're not going to...give me to anyone, right? Like, I'm just with you tonight?\"\n\n\"Tonight and every night.\"\n\nAshley's relieved sigh was audible, and Kara reached over and patted her thigh reassuringly.\n\n\"Relax. Enjoy this. And let me know right away if any of it feels wrong. Understood?\"\n\n\"Yes, Mistress.\"\n\n*\n\nBev Flannigan carried her fifty years with the grace of a queen, her brown hair streaked with silver, her blue eyes lively and bright. The dress she wore was black, elegant and accentuated her modest curves perfectly. She answered the door of her expansive country home and her face immediately lit up in a delighted and welcoming grin.\n\n\"Kara! I was so glad to hear you were coming! I haven't seen you since...well...\"\n\n\"The funeral,\" Kara finished with a sad smile. \"I'm so sorry for not being in touch sooner. Things were rough, for a while.\"\n\n\"No wonder! Peter was such a beautiful soul...\" The hostess covered her mouth with both hands, trying to reign in her emotions. \n\nKara didn't want to get bogged down sadness -- not tonight of all nights. She merely nodded, then gave a gentle downward pull on the thin chain she held in her left hand. Beside her, Ashley dropped quietly to her knees on the cement doorstep, eyes downcast, cheeks blushing pink. She was accustomed to leash commands after all the practice she'd had at the apartment.\n\n\"I'm proud to introduce Ashley Mallory. She's been with me since the Masquerade at the beginning of February.\"\n\n\"Welcome to my home, Ashley, it's lovely to meet you.\"\n\n\"Eyes up, and greet Mrs. Flannigan,\" Kara prompted.\n\nAshley looked up into the other woman's face. \"Hello Mrs. Flannigan. Thank you for inviting me.\"\n\nThe woman nodded, then shivered. \"Oooh. It's so chilly out here -- spring hasn't come yet! Come inside, please.\" The other woman stepped inside and motioned them through the door. Kara briefly tugged up on the leash to get Ash onto her feet, then stepped inside. \"Artie! Coats!\" Bev called in a voice that was demanding but somehow not abrasive. \n\n\"Right away, Mistress,\" he said, descending a winding staircase to their left. He wore a thick, black leather collar, a tight pair of leather pants, and nothing else. Kara marveled at his perfectly-muscled arms, chest and abs. Truly impressive for a man of almost sixty.\n\n\"Looking incredible as always, Artie,\" Kara said, not trying to hide her admiring tone.\n\n\"Mrs. Meadows! Please, let me have your coats. It's wonderful to see you. The Mistress and I were hoping you'd come.\" \n\nIt was jarring to hear him call her by her last name instead of just 'Kara'. Removing her collar had changed the dynamic completely.\n\n\"This is Ashley,\" Kara said, then looked at her slave. \"You may greet Artie.\"\n\n\"Hello, Artie, it's nice to meet you. You look amazing!\"\n\n\"The Mistress keeps me busy,\" he said, with a subversive wink, then gathered their coats and begin fitting them with hangers from a nearby closet. Kara and Ashley removed their shoes.\n\n\"Everyone's gathering in the kitchen. Please, come in.\" Bev led the way, her heels clicking on the expensive ceramic tile in the hallway.\n\nKara leaned close to Ashley. \"You did well.\"\n\n\"Thank you, Mistress,\" she whispered back.\n\n\"Mrs. Flannigan is a psychiatrist and Artie is an orthodontic surgeon. Wait until you see this place -- I'm sure someone will give you the grand tour.\"\n\n\"It's huge!\"\n\n\"In the summer we'll go outside and you can see the grounds. They own all the land around here.\"\n\nThe kitchen was enormous, decked out in gleaming, white tile on the floor and black-and-white tile patterns on the walls. The counters were solid, black marble, and the high-end appliances were a uniform jet black in colour. A sizable crowd of people was milling around, picking at plates of pastries and finger sandwiches while cradling delicate wine glasses or gripping frosted beer mugs.\n\nFrom the looks of it, the two of them had been among the last to arrive, and their entrance caused a chorus of greetings and well-wishes. From the corner of her eye, Kara saw Ash shuffle a little closer to her.\n\nLeash in hand, Kara made the rounds and the introductions. It had been a good turnout -- eleven couples! She purposely saved the youngest couple for last.\n\n\"And this is Mr. Sato,\" Kara said as they stood in front of a handsome, powerfully-built man in a black three-piece suit who was just a couple of years younger than Kara. He was a police officer, a deputy chief. \n\n\"A pleasure to meet you, Mr. Sato,\" Ash said, accustomed to the greeting routine by now.\n\n\"A pleasure to meet YOU, Ashley. Please say hello to my slave wife, Jaycee,\" he nodded toward a much younger, black-haired woman dressed in a shimmering and ornate Japanese kimono. The woman made a deep bow.\n\n\"That dress looks so beautiful!\" Ashley said, her voice awe-filled. \"It's the prettiest thing I've ever seen.\"\n\n\"Thank you! That's so nice of you to say, Ashley,\" Jaycee replied with a bright smile. \"If you want, I have a few that are a little small on me -- you could borrow them. I have one that would be just perfect with your lovely eyes.\"\n\n\"Really? That would be so cool.\" \n\nThe two of them seemed to be hitting it off well, as Kara had hoped.\n\n\"John, would it be okay if Jaycee took Ash on a little tour of the place?\" Kara asked Mr. Sato.\n\n\"Absolutely.\" He turned to his wife. \"Get the young lady a drink and get permission from our hostess to show her around.\"\n\n\"Yes, Master.\" Jaycee made another deep bow and took Ash boldly by the hand.\n\nKara unclipped the leash from Ashley's collar. \"I'm going to mingle. I want you to accompany Jaycee and take a look around. Understood?\"\n\n\"Yes, Mistress.\" She looked uncertain but not uncomfortable.\n\nKara watched as the two of them slipped through the crowded kitchen, hand in hand. Mission accomplished.\n\n\"This was a great idea. Jaycee doesn't have anyone her age that's in the lifestyle,\" John said.\n\n\"I'm amazed, given how friendly she is.\"\n\n\"Yeah, well, with my job being what it is, we've got to be...selective...about how we roll.\"\n\nKara nodded, then smiled and gestured toward an ice-filled tub brimming with bottles of beer. \"Can I buy you a drink, officer?\"\n\n*\n\n\"That was unbelievable!\" Ash gushed. The two of them were in the car, heading home just after midnight.\n\n\"It was great to see everyone again,\" Kara agreed. \"And you made a really good impression. You seemed to fit right in.\"\n\n\"Everyone was so nice. Not like I expected at all.\"\n\n\"Oh? What were you expecting?\"\n\n\"You know...the Dominants would be sort of mean, and the submissives would be trying not to make them mad.\"\n\n\"It's not like that at all. What did you think of her dungeon?\"\n\n\"Scary, but also really cool. It had a dark, serious kind of vibe to it. Artie must live in constant fear that he'll end up down there.\" By Ash's tone, Kara couldn't tell if she was joking or not.\n\nShe chuckled. \"Actually, he's the one who keeps buying new bondage toys.\"\n\n\"Really?\"\n\n\"Yes. Peter even made him a few pieces. Did you see that rope-and-pulley system in the one corner? Peter made that. They bought a bunch of paddles from us, as well.\"\n\n\"The 'big boys', I bet. Man, I pity poor Artie.\"\n\n\"I pity him, too. And envy him, a little.\"\n\nAsh was quiet for a few moments. \"You miss it. Being submissive, I mean.\"\n\nIt was Kara's turn to lapse into silence, sifting through her feelings. \"I wouldn't change one moment of my fourteen years with Peter. I had so many unforgettable experiences, and felt such warmth and love from him,\" she said, then reached over and tickled the back of Ash's neck with her fingertips. \"But at the same time, I wouldn't change one moment of my time with you, either. I've enjoyed your submission a great deal. Being your Mistress is challenging and fun.\"\n\nAsh snared the tickling hand and brought it in for a slow kiss, then rubbed her cheek over Kara's knuckles. \"I love you, Mistress. Thank you for bringing me to the party.\"\n\nKara sighed inwardly, still not knowing how to react to Ashley's bold -- and maybe too-soon -- declarations of love.\n\n\"I'm so flattered that you feel that way about me after just a few weeks. I love that you're comfortable and that you feel cared for and fulfilled.\"\n\n\"Totally. A million percent.\"\n\n\"You seemed to be getting along with Jaycee. The two of you were giggling like a couple of grade school kids.\"\n\n\"That might have been because of the wine. I felt bad that Mr. Sato took her over his knee and spanked her in front of everyone, bare-assed.\"\n\n\"Well, he did tell her to tone it down. It's not like she wasn't warned.\"\n\n\"Yeah, but it was me that kept winding her up.\"\n\n\"Maybe next time I'll have him spank you, too.\"\n\n\"You wouldn't!\"\n\nKara smiled mysteriously. \"No? I guess we'll see, won't we?\"\n\n*\n\nKara lay in bed, unable to sleep. The party had stirred up the sadness and nostalgia inside her and it was keeping her awake. Seeing her kink friends without her husband and Master by her side had been different. Maybe even lacking, in some important way. That was no slight against Ashley, who had done everything expected of her, as she always did. \n\nStill, tonight more than most nights, Kara felt Peter's absence acutely. Her memories of attending the party with him were sweet ones, and she allowed herself to steep in them until the ache became too much to bear.\n\nAt last she kicked the covers off and rolled out of bed. She thought about throwing on a robe but the apartment was already a little warmer than usual -- with her slave's new, skimpy \"dress code\", Kara had been keeping the thermostat up a notch or two to prevent any chills. She padded out to the kitchen clad only in her panties.\n\nSome Chamomile tea would hopefully send her off to sleep.\n\nShe tried to be as quiet as possible as she filled the kettle and switched it on, and grabbed a tea bag from a cupboard. It was three in the morning, and Ash had retired to her bedroom almost two hours ago. Hopefully she was sleeping peacefully.\n\nThe memory of Ashley laughing gleefully with Jaycee at the party gave her a smile. There was no question that Kara's fondness for her new slave was strong, and growing, and with good reason. Ash had a wonderful blend of optimism and earnestness, and an appealing innocence that had somehow survived a long and horrifying ordeal. It gave Kara hope that she herself would one day be whole again -- if Ash had come through a three-year nightmare with her spirit intact, perhaps Peter's death wasn't insurmountable, after all.\n\n\"Mistress?\"\n\nKara turned to find Ashley standing in the kitchen doorway, topless in a blue pair of briefs, squinting against the brightness in the room.\n\n\"You're out of uniform,\" Kara said, disarming the comment with a wink at the end. \"I'm sorry if I woke you.\"\n\n\"Is everything okay?\"\n\n\"Just a little restless tonight, I guess.\"\n\nAshley considered for a moment. \"Can I please massage your feet as you drink your tea? Maybe that would relax you.\"\n\nKara was about to politely decline -- surely Ashley needed her sleep -- but stopped herself. Ash was eager to serve, and Kara should allow her the opportunity to do so. A foot massage would feel lovely. More than that, some company would be welcome in the melancholy night.\n\n\"You know, I think that would help a lot. I'll come to the couch after I get my tea.\"\n\nAsh seemed surprised by the response, then flashed a smile that looked almost grateful. \"Yes, Mistress. Thank you.\"\n\nWhen Kara entered the living room with her teacup, Ashley was standing in front of a pillow next to the couch, and didn't kneel until her Mistress was seated, as per the rule. \n\nThe couch cushions were cold at first against Kara's bare back and legs -- a strangely sexy sensation. A sensual reminder that she was sitting in her living room in her panties at three in the morning, drinking tea and having her feet serviced enthusiastically by a naked young woman. \n\nIn that instant, Kara truly felt like the Mistress that Ashley needed her to be. It was an epiphany, of sorts. A powerful moment of clarity.\n\nKara leaned back into the couch, breathed a contented sigh and allowed her slave to work her magic, enjoying her practiced touch and the warmth and intimacy of the act. Accepting Ash's gift of submission, taking pleasure in it, and -- just as important -- allowing Ashley the joy of serving well.\n\nNo words were spoken; none were needed. Kara finished her tea in comfortable silence.\n\n\"That felt wonderful. You've become so good at this in such a short time.\"\n\n\"Thank you for letting me massage you, Mistress. I really love it.\" Ashley pressed a slow kiss to the top of her Mistress' foot.\n\n\"Time for bed now,\" Kara decided. She stood, and Ashley immediately rose, too. \"Please rinse my cup and wait for me naked in my bed. I need to use the washroom.\" She handed the cup to a surprised Ash.\n\n\"In...your bed?\"\n\n\"You heard me,\" Kara said, flashing the young woman a quick smile before leaving the room.\n\nShe peed, washed her hands and rinsed her mouth, and when she entered her bedroom Ashley stood attentively next to the bed, naked. \n\nKara didn't hesitate but stepped boldly forward and gathered the younger woman into a gentle embrace, kissing her and running her palms up and down Ash's bare back. Even when she broke the kiss, Kara didn't step back but continued to hold Ashley close.\n\n\"You're incredibly important to me,\" she whispered. \"I'm grateful to have you in my life.\"\n\nIt wasn't an impulsive 'I love you', but Kara wanted her young partner to know her strong feelings were reciprocated.\n\nAsh's arms came around Kara's waist and squeezed tight. \"I love you more than anything, Mistress.\"\n\nThey held one another a few moments more, until the weight of the early hour grew tiring. Kara turned off the light and pulled her naked slave girl down onto the mattress beside her. It had been too long since she'd shared her bed, and the feeling of a soft, warm body next to her was comforting and welcome.\n\n\"I'd like you to rub my stomach until I fall asleep. That would feel heavenly,\" Kara said, stretching out on her back under the bed sheet.\n\n\"Yes, Mistress. Thank you.\" Ash whispered.\n\nKara slowly drifted off to the calming feel of Ash's slow caress on her belly.\n\n*\n\nOver the next week, Ashley took to the workshop with enthusiasm and a surprising competence. ",
        "Kara's initial ventures into the realm of carpentry had been clumsy and inept, even with Peter's patience and expert guidance. She'd been nervous and jumpy around the loud, dangerous-looking machines and didn't have a feel for working with her hands. Several times in those first few months she'd considered giving up and returning to her dead-end retail career, and it was only her love for Peter and her desire to be close to him that had kept her coming back to try again.\n\nBut Ash was different. Cautious but not fearful, she absorbed Kara's teaching with a truly impressive speed. The younger woman's meticulous, methodical way of thinking was perfectly suited to craftsmanship, and in just a few sessions she achieved a level of skill that had taken Kara months to realize.\n\nSaturday found them working together to assemble hanging stocks, and Ash's contribution let them complete four of the heavy, wooden neck and wrist restraints in just a few hours.\n\n\"I'll finish up this hinge. Why don't you sand down those paddles we started on Wednesday? Then we'll go get some lunch. We got a lot done this morning,\" Kara said. \n\nAshley nodded and went to work. She wore jeans and a long-sleeved shirt, work boots and a heavy denim smock. Kara had allowed her to wear her collar in the workshop -- there wasn't much chance of a 'vanilla' friend dropping by the remote workshop unannounced.\n\nAn hour later Kara stepped back to survey their progress. Four hanging stocks, two kneeling stocks, and two licking chairs were finished and stored out of the way against the workshop walls. Ash was finishing the last of a dozen oak paddles. At the rate they were going, they'd have plenty of inventory for Ero-con in June, less than three months away.\n\n\"What do you think?\" Ash said, coming up beside her and handing Kara a paddle. \n\nKara ran her fingers up and down the long handle and palm-sized, flat face. \"Perfectly done. Nice and smooth, especially on the edges. Great work!\"\n\n\"We should probably test it, just to be sure, Mistress,\" Ash said, and when Kara gave her a questioning look she could read the hunger in the younger woman's beautiful, green eyes.\n\nSaturdays were 'orgasm days' for her slave; a tradition that had gradually evolved over the two months they'd been together. Weekdays were for teasing and tormenting her submissive partner, while denying her sexual release. Ashley became increasingly attentive as the week went on and her frustrated arousal grew, and even more appreciative of touching, closeness and physical affection. \n\nIt was fascinating to Kara that Ash's pent-up arousal had such a pronounced effect on the young woman's emotions and behaviour. Had Master Peter noticed the same thing about Kara? It made her wonder what other nuances her husband had learned about her. Were discoveries like this all a part of 'mastering' a slave -- learning what made them tick?\n\nNaturally the same rules didn't apply to Kara, and most nights that week she'd enjoyed a powerful climax on Ashley's always-willing tongue, much to their shared delight. Since the night of the party, Kara had become more assertive about availing herself of the many perks that came with being a Mistress. She felt she was really growing into the role, and found it was growing on her as well.\n\n\"A paddle like this really packs a sting. Are you sure?\"\n\n\"Yes, Mistress. I think...I've been ready to try this for a while. I want to try it with you.\"\n\nKara held Ashley's gaze for several moments, reading the lust and eagerness there and finding no trace of fear.\n\n\"I suppose it would be fun to 'acquaint' you with the inventory. Go wash your hands, then take off your clothes and put your work shoes back on. Wait for me with feet apart and hands behind your head.\"\n\n\"Yes Mistress.\" Ash was already untying the smock.\n\nKara went to the thermostat and nudged the heat up by a few degrees, then went to the sink and washed her hands thoroughly under warm water. Finally, she stripped down to her black bra and panties, putting her work shoes back on for safety. She wanted to look as soft and sexy as possible for her young slave's first session with the paddle.\n\nShe grabbed one of the hanging stocks from where she'd leaned it against the wall and carried it back, letting the thick chains that were bolted to the top side of the stocks clink and rattle behind her as they dragged on the cement floor. She dumped the stocks on a workbench, then returned to her slave girl.\n\nWhen she came back she found Ashley naked and in position, cheeks flushed, eyes bright with desperate need.\n\n\"You look so sexy, Mistress.\"\n\n\"You too,\" Kara said, running her hands over the smooth skin on Ash's belly and hips. \"I can't wait to see how you look once the paddles start marking you up.\" She flashed a deliberately wicked grin at the other woman.\n\nAsh shivered, then nodded.\n\nKara hooked her index finger through the D-ring on Ashley's collar and guided her to a workbench. She used her grip on the collar to get her slave bent at the waist, then grabbed the stocks, un-latched the hinge and opened it up. Kara carefully positioned Ash's neck in the centre hole of the thick, oak board and her wrists in the two smaller holes on either side. When she closed and latched the stocks she took extra care not to pinch Ash's slender neck or wrists, or bind her hair uncomfortably. \n\nShe helped Ashley into a standing position. \n\n\"Is that comfortable?\"\n\nAshley squirmed a bit, feeling the weight of the solid oak pressing down on her narrow shoulders and confirming that her hands were securely pinned on either side of her head.\n\n\"Yes, Mistress.\"\n\nKara gathered the heavy chains that dangled from the top side of the stocks and gave them a firm tug, leading the younger woman to a position near the centre of the workspace. There were chain and rope pulleys secured to the rafters here, used for positioning wood frames that were too heavy or bulky to handle with muscle alone. \n\nKara clipped the chains on the hanging stocks to a pulley chain, then slowly raised the pulley until the stocks were dangling from the pulley chain. This relieved the burden on Ash's shoulders but also forced her to stand straight and prevented her from bending over.\n\n\"Mmm. Now I have your entire body to work with. Won't this be fun?\" Kara said, running her fingernails down Ash's back, from her shoulders down to the crease of her buttocks.\n\n\"Oh, yes, Mistress...\" Ashley's breathy reply turned into a loud squeal of protest when Kara dug her fingers into her unprotected sides, tickling her. Her elbows jerked and wiggled but couldn't free her wrists; she was helpless to defend herself. \n\nThe torment lasted only a couple of seconds, then Kara backed off and walked around in front of her slave. She reached between Ashley's legs and used gentle fingernails to graze her silk-smooth mound. Ash closed her eyes and breathed a happy sigh.\n\n\"Legs wider. Spread as far as you comfortably can.\"\n\nAshley obeyed and widened her stance so her work shoes were three feet apart.\n\n\"You're not to move your feet from that spot, is this clear?\"\n\n\"Yes, Mistress, very clear.\"\n\nKara began a slow circle of her slave.\n\n\"Today will involve both bondage and pain, so I need you to understand how safewords work. Pay close attention.\"\n\nAshley nodded.\n\n\"You have two safewords: yellow and red. If you say 'yellow', I'll immediately stop whatever I'm doing and check in with you. If you're restrained, you'll stay restrained during the check-in. Good so far?\"\n\n\"All good.\"\n\n\"Using the 'red' safeword is a kill-switch -- it immediately brings the scene to a close. You'll be freed from any bondage and we can discuss whatever was making you uncomfortable. Do you understand what I just said?\"\n\n\"Yes, Mistress. 'Yellow' means pause, 'Red' means stop.\"\n\n\"It's not 'bad' to use a safeword. I won't be angry or disappointed if you pause or stop the scene, but I WILL be disappointed if you allow a scene to continue past the point where you're okay with it. This is about trust; you trust me to respect your safewords and I trust you to use them if you need to. Clear?\"\n\n\"Very clear. I promise to use them if I have to.\"\n\nKara paused to run her palms over Ash's smooth buttocks, then gave them a light smack before continuing.\n\n\"Hanging stocks and paddle-spankings can sometimes create light-headedness. I'll be watching you closely for any signs, but if you feel dizzy or you start seeing dark spots or your breathing doesn't seem to be working right, I need you to 'red' immediately. And I mean IMMEDIATELY. Do you understand?\"\n\nAshley nodded.\n\n\"Out loud, please.\"\n\n\"Yes, Mistress, I understand. I'll 'red' if I feel light-headed or faint.\"\n\nKara stopped in front of Ashley and resumed the teasing fingernail caress of her mound and outer labia. The younger woman gasped but held herself still, as she'd been taught, allowing her Mistress to enjoy her at leisure. Already that subtle, sexy look of desperation was starting to show in her beautiful, green eyes. Kara's fingernails had inflicted hours of delightful torment on that soft skin over the past few weeks, including every night that week. Her slave girl was feeling a week's worth of pent-up need.\n\n\"You want the paddle, do you?\"\n\n\"Yes, please.\"\n\n\"It's going to hurt.\"\n\n\"I know, but I want to at least try.\"\n\nKara was quiet and continued to stroke and tease for another couple of minutes until Ashley was breathing hard through her mouth and begging with her gaze.\n\nKara leaned in and pressed a slow kiss onto Ashley's lips. The younger woman returned the affection hungrily. They held the passionate kiss for almost ten seconds before Kara pulled back.\n\n\"Don't go anywhere,\" Kara whispered, then walked to the workbench and returned with three paddles of different sizes. She set the two larger ones on the floor at her feet and brandished the smallest in front of Ashley's face. It was roughly the length and shape of a wooden spoon, but the oval face was flat and not concave.\n\n\"This little guy is for thighs, breasts and your sweet, tender pussy. He doesn't look too dangerous, but he's got a nasty little bite. Shall I demonstrate?\"\n\n\"Please, Mistress.\"\n\nKara slid the smooth flat of the paddle over Ashley's pubic mound, a sensual caress. She was thrilled to see a shudder pass through the younger woman.\n\n\"Okay. I'm going to sting you once. Don't fight the pain; accept it inside you. When the stroke is done, breathe in deeply, let the pain diffuse into you, then breathe it out slowly. Always breathe. Clear?\"\n\nAsh nodded.\n\n\"Out loud, please.\"\n\n\"I understand, Mistress.\"\n\nKara held Ashley's gaze as she tapped her labia lightly. She'd never used the paddle on someone before, but she wasn't too concerned; the instrument was too small and light to do any damage. She pulled back her hand and flicked her wrist, slapping the flat of the paddle onto her slave's smooth pussy lips.\n\nAshley gasped in surprise, jerked her hips backward to escape the pain and brought her knees together defensively. Kara didn't chase her but remained still, keeping her eyes on Ash's. In a few moments, her slave gave her a sheepish half-grin and moved back into position, feet wide apart.\n\n\"Sorry, Mistress. I know I wasn't supposed to move.\"\n\n\"You moved, and you forgot to breathe. I think we should try again, don't you?\" Kara was using her Domme voice now, firm but calm.\n\nAsh sighed, then nodded to acknowledge the reprimand.\n\n\"Say it out loud.\"\n\n\"Yes, Mistress. Please try again.\"\n\nKara spent a moment caressing her slave with the smooth flat of the paddle, then lightly tapped her pussy a few times to signal her readiness.\n\n\"Remain still, and remember to inhale when you feel the pain. Accept it into you.\" She drew back and slapped the paddle onto Ashley's pubic mound with a snap of the wrist.\n\nTo her credit, Ash didn't move her feet, although her entire body jerked in response to the sudden sting. She breathed in deeply through her nose, then let it out slowly through her mouth. Kara was quiet as her slave processed the pain. She'd been there herself; she knew a little of what Ashley was feeling.\n\nKara stroked Ash's pussy with her palm, a gentle, soothing touch.\n\n\"How was that for you?\"\n\nAshley's eyes were bright with excitement. \"It was...intense. May I please have another, Mistress?\"\n\nKara continued to caress Ash's mound and labia with the flat of her hand. \"I want to give you three more, one after the other, without pausing. Good?\"\n\nThe younger woman nodded.\n\n\"I need verbal answers.\"\n\n\"Yes, Mistress. Please give me three more.\"\n\nKara withdrew her hand and continued the caress with the flat of the tiny paddle. When her slave was again breathing heavily through her mouth, she tapped the instrument against her mound to announce her intention to begin.\n\n\"Don't move, and inhale through the pain,\" Kara said, then flicked her wrist and smacked the paddle onto the soft skin. Once...twice...three times. The fleshy slapping sounded loud in the quiet workshop.\n\nAshley gasped a quiet \"ahh\", her hips flinched and her eyes widened at the sting, but she didn't move and immediately sucked another deep breath in through her nose. \n\nKara crouched to examine the lightly punished pussy and found the smooth skin was pinking up nicely. She stood again and met Ash's eyes. \n\n\"How was that?\"\n\n\"Oh, I hated it...and loved it. Thank you, Mistress.\" \n\n\"How about this?\" Kara asked, stroking her fingernails lightly over the freshly-spanked skin.\n\nAshley gasped loudly and rolled her hips forward before she could stop herself. \n\nKara chuckled and continued to tease. \"Really cranks up the sensitivity, doesn't it?\"\n\n\"Oh, wow...\" She managed to regain control of her pelvis and was again still as her Mistress tormented her nethers.\n\nKara continued to tease until Ash was panting, sweating and quivering with the effort of being still, then she withdrew from Ash's pussy -- getting a groan of disappointment -- and slid the tiny paddle over the thin, pale skin of her right inner thigh. Ashley widened her stance automatically.\n\n\"I'm going to sting you three times, right here,\" Kara said, tapping the area. \"Remember to breathe. Are you ready?\"\n\n\"Yes, Mistress.\"\n\nThree quick smacks of the paddle left Ashley sucking in air through her teeth, then exhaling loudly, and then drawing a second deep breath. But she didn't move, accepting the pain her Mistress chose to inflict.\n\n\"Oooh...that stings bad.\"\n\n\"You took it well,\" Kara said in a voice that was low and even, then raised the paddle and begin to caress Ashley's left breast with the flat face.\n\n\"Oh, God,\" Ashley whispered, and Kara saw some genuine fear in her wide eyes.\n\n\"You wouldn't believe how much Master Peter enjoyed smacking my breasts with this kind of paddle,\" she said, giving her slave a rueful smile. \"And not just when we were playing! Beating my tits was his go-to punishment. Breaking protocol would earn me three hard smacks on each boob. Outright disobedience was six on each. I'd have to stand with my arms straight up in the air and my eyes closed so I couldn't flinch away from the blows -- that way he could hit the tops, sides, and even the undersides. Sometimes the welts would last for a day or even two. When we went out as Master and slave, he'd make me carry the paddle in my purse, as both a reminder and in case he needed to use it. In my fourteen years with him, I probably took more paddle strokes on my breasts than my bum.\"\n\n\"I guess I can't blame him. You've got awesome, big boobs,\" Ashley said, smiling at the story. The fear in her eyes was gone.\n\n\"I expect you'll find having a smaller set is both a blessing and a curse,\" Kara said, moving the paddle caress to Ash's right breast. \"On one hand, there's less surface area to sting with the paddle. On the other hand, it's going to be almost impossible to avoid these stiff nipples.\" Kara teased the nipples with the end of the paddle.\n\nAshley gave a resigned sigh. \"How many will I get, Mistress?\"\n\nKara returned a wicked smile. \"Dozens, maybe hundreds. Because I've decided to make this my go-to punishment for YOU, my pretty, little slave. I know you'll be VERY attentive when you discover the price for error, don't you think?\"\n\n\"Oh, Mistress,\" Ashley whispered, but her eyes showed excitement, not fear.\n\n\"Unless you've changed your mind about having a strict Mistress?\"\n\nShe shook her head. \"No way. I love it when you're strict.\"\n\n\"Then let's do three on each breast. I'll do three on your right, then we'll pause so you can breathe through it, then three on your left. Good?\"\n\n\"Oh, God,\" Ash said again, then nodded slowly. \"Yes, Mistress. Three on each.\"\n\n\"Close your eyes,\" Kara said. \"And maybe if you're a VERY good girl from now on, this lesson will never be repeated.\"\n\nAshley shivered in anticipation and lust, then closed her eyes.\n\nKara continued to smooth the flat of the paddle over her small, soft right breast, then tapped it gently three times to signal the start. She flicked her wrist and delivered three sharp stings to the front of the breast, over the hard nipple. One...two...three.\n\nAsh whimpered but didn't flinch away, and began her breathing almost immediately. Kara leaned close to her ear.\n\n\"I know, it's awful, isn't it? And you still have three to go on your left one.\"\n\nHer eyes stayed squeezed shut as she focused on breathing and pain management. Finally she nodded slowly. \"I'm ready, Mistress. May I please have the last three?\"\n\n\"Mmm. Such good manners,\" Kara said and began a gentle caress of the paddle on Ash's left breast, then signaled with a few taps, paused, and gave three sharp slaps. Ashley gasped and did her breathing.\n\nKara bent over and took her slave's right nipple in her mouth, sucking and licking gently, and was met with an immediate, needy moan. \n\n\"It feels SO good after the paddle,\" Ash said in a hushed tone.\n\nKara sucked a moment longer, then let the nipple fall from her mouth. \"I loved it when he sucked me after beating my breasts. The paddle made me regret my mistake, and his lips and tongue made me forgive him for the punishment.\" She moved her mouth to the left nipple, and at the same time resumed a teasing, fingertip caress of Ashley's mound and labia.\n\n\"I need you so bad, Mistress.\"\n\n\"I can feel it. Even your outer lips are messy now.\" Kara stood to gaze into her slave's pretty eyes again.\n\n\"Are you going to let me come?\"\n\n\"If it pleases me,\" Kara said.\n\n\"I'll beg for it.\"\n\n\"Oh, I know you will.\"\n\nKara teased the slippery folds until Ash's eyes were unfocused and lusty and her hips and core were trembling, then stepped back.\n\n\"Ooooh...please don't stop, Mistress!\"\n\n\"But we still have two paddles left to play with,\" Kara said, putting the smallest paddle on the floor and picking up the medium one. \n\nThe handle was longer -- about the length of her forearm, and the smooth flat of the paddle just a little wider than the palm of her hand. It was heavier, and the longer handle allowed for a more powerful swing and painful impact. She held it up so Ashley could see it, then slowly moved to the side of her body to allow for a better swing.\n\n\"This fellow here is strictly a butt paddle -- you'd have to be a real sadist to use it on someone's breasts or pussy and it could damage some of the softer tissue in those areas.\" Kara began to stroke the flat of the paddle over both cheeks of Ashley's bum. \"Even though the buttocks have more padding, this fellow delivers a big shock of pain and makes a loud noise that's kind of scary if you're not used to it. There can be some purple bruising, too. It's really important to breathe through each stroke. Even then, it can take some practice to manage the pain properly.\"\n\nAshley groaned, and Kara saw her buttocks tense and release as the paddle stroked them gently.",
        "\"Please...can you go a little light on the first one? Just so I can ease into it?\"\n\nKara smiled. It was wonderful to hear Ashley speaking up and asking questions, taking responsibility for her role in the scene. Another win!\n\n\"Absolutely. The first one will be at half-strength. I still need you to breathe through the pain, nice and deep, okay?\"\n\n\"Yes, Mistress. I'm ready for the first stroke.\"\n\nKara swung the paddle through the air, trying to gauge the weight and how hard to strike. She'd never hit anyone with an instrument this size, so she'd planned on going easy on the first blow even if Ash hadn't requested it.\n\nShe brought the paddle down and tapped Ash's bum three times, then drew back and delivered a weak blow to the middle of her right cheek. Her flesh rippled under the impact and the SMACK was louder than she'd expected in the otherwise quiet workshop. \n\n\"Oooh!\" Ashley protested, but didn't move her feet out of position. She did roll her hips forward and squeeze her buttocks tight before relaxing them again. She belatedly remembered her breathing, taking air in great gulps. \n\nKara was quiet while her slave worked through the pain. She stepped behind Ashley, pressed herself up against her back and bum, then reached around and found her engorged clit with her fingertips. The younger woman issued an immediate, wanton moan.\n\n\"You took that one well,\" Kara whispered into Ash's right ear. \"Would you like to try two at full strength?\"\n\n\"Yes...yes please,\" Ashley whispered back. \n\n\"Ask me to paddle your bum twice more.\" With her body pressed against Ash's, Kara could feel the other woman quivering in barely-contained pleasure as her clit was mercilessly tormented.\n\n\"Please, Mistress...hit my ass twice more.\"\n\nKara stroked and teased for another few moments, then stepped back and took up the paddle again. Ash's bum showed a fist-sized deep red blotch where the stroke had landed.\n\n\"We'll do one on the left, then a pause to check in, then one on the right. Breathe. Always breathe.\"\n\n\"Okay.\"\n\nKara swung the paddle through the air again, trying to estimate what a \"full-strength\" stroke would be, then tapped Ash's left buttock three times to announce the blow. When it came, the SMACK was loud and Ash grunted and jerked her hips forward reflexively, then breathed deeply through a wide-open mouth.\n\n\"Good girl. Nice and deep in...let the pain disperse inside you, then breathe it out,\" Kara said in a low, soothing voice.\n\n\"Oooh...okay.\" Her voice was almost a sigh and Kara recognized the tone. Ash's pain was becoming...something else. \n\nKara put down the paddle, stepped up behind her again, found her slave's clitoris with one hand and firmly rolled a nipple with the other hand.\n\n\"You're doing so well. Are we going to do one more?\"\n\n\"Yes, Mistress.\" Her voice was unnaturally calm and even.\n\n\"Mmm. Okay. Nice, deep breaths, right?\"\n\n\"Yes.\"\n\nShe held the younger woman a moment longer, then took up the paddle and tapped Ash's right cheek three times. The swing was a strong one and the paddle slapped down hard on her defenseless bum. SMACK.\n\nThe only sound from Ashley was a quiet grunt, followed by deep breathing. Her buttocks clenched and released and she rolled her hips down and back as the pain bit down deep. Both cheeks now sported a deep red splotch, and the one on her right cheek was verging on purple.\n\nKara dropped the paddle and wrapped her up in a tight hug from behind, feeling Ashley tremble and quake. She pinched the younger woman's nipples a little harder than usual and rolled them between thumbs and forefingers. Her slave moaned, gasped and squirmed, her breathing deep and laboured.\n\nKara put her lips next to Ashley's ear. \"I think we need to give you one with the big boy. Do you think you're ready for that?\"\n\n\"Yeah,\" Ashley whispered back, with no trace of fear or trepidation. There was no question, she was drifting now, floating through a deeply submissive state.\n\n\"Are we going to stop now?\"\n\nAshley slowly shook her head.\n\n\"What are we going to do?\"\n\n\"One...with the big boy.\"\n\n\"And you're going to breathe all the way through it, right?\"\n\n\"Yeah.\"\n\n\"What are you going to do when I spank you?\"\n\n\"Breathe.\"\n\nKara quickly retrieved the biggest paddle, then went around behind Ashley and hugged her tight again. The biggest paddle was more often used on men than women. The handle was as long as Kara's arm and the face was oval, a foot long and about six inches across at its widest part. It was a heavy, solid pain-delivery instrument.\n\nShe stepped back and swung the paddle through the air a couple of times, getting a feel for the heft and momentum. She took a breath and gently tapped her target three times, then drew back and smacked the paddle into both of Ashley's buttocks at the same time. It sounded close to a gunshot.\n\nThe noise that came from Ashley was a long, low moan. Her breathing was fast and hard, and punctuated now by sobs and sniffles. Her hips continued their rhythmic rolling and flexing.\n\nKara put the big boy down and grabbed Ashley around the middle with her left arm. With her right, she un-latched the stocks. She supported Ash with both arms as she came free of the stocks, then they sunk to the cold, cement floor, Kara still hugging her from behind. The younger woman was shaking and sniffling as Kara reached around her and plunged her fingers through her wet folds, working her clit in gentle, urgent, tight circles, drawing out desperate gasps and sighs.\n\nA few moments later, Ashley's sniffling was cut off when her long-denied orgasm hit hard. Her breathing paused and her whole body seemed to vibrate. Her thighs squeezed together hard on Kara's fingers and a loud, long, deep moan forced its way from her lungs. A trickle of hot wetness leaked through Kara's probing fingers. \n\nKara sat on the floor and hugged Ashley's slim, naked body as Ash quivered and panted and moaned and sobbed and spasmed, unable to contain or control her body or emotions. All the while, Kara whispered praise and encouragement. Even when the younger woman stilled and quieted, Kara kept Ash gathered against her warm, bare skin, careful to keep the trembling slave's temperature up as her heart rate dropped back to normal. \n\nIt was at least fifteen minutes before Ashley spoke.\n\n\"That was crazy,\" she whispered, then sniffed. \"I was...in so deep. It's never been like that for me. Thank you, Mistress.\"\n\n\"You did really well. You didn't hold anything back. Thank you for giving me everything, Ashley.\"\n\n\"I want that. For you to have everything. All of me.\"\n\nThey hugged for a while longer, enjoying the silence; the intimate communion between Mistress and slave. Kara knew from experience how depleting a deeply submissive state could be and was content to sit on the cold floor and support Ashley, even if it wasn't the most comfortable arrangement.\n\nFinally, Kara's back couldn't take the strain anymore. She released Ash and struggled to her feet. \"Just about ready for some lunch?\"\n\n\"No.\"\n\n\"No?\" Kara repeated, arching an eyebrow.\n\n\"I mean, can I please make you come, Mistress? I really want to.\"\n\nKara pretended to think about it, then hooked her fingers in the waistband of her panties and pulled them down and off. She stepped in front of Ashley, who was still sitting on the floor. \"Since you're down there anyway...\"\n\nNot needing a second invitation, the younger woman extended her tongue and began a series of long, slow licks along her Mistress' labia. \n\nKara had taught her well, and before long her hips were grinding against her slave's willing, practiced tongue. She closed her eyes and surrendered to the pleasure as an orgasm drew ever closer. When her climax hit she threw back her head savoured it, holding Ashley's face tight against her spasming pussy.\n\nShe hoped it would be the first of many joys they'd experience together in the workshop.\n\n*\n\n \n"
    ],
    "authorname": "GobLean",
    "tags": [
        "bondage",
        "consensual",
        "feet",
        "female dominant",
        "female submissive",
        "leash",
        "loving",
        "oral",
        "pain",
        "spanking"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/her-governess-ch-03"
}
{
    "title": "Happy Birthday to Me Ch. 03",
    "pages": [
        "<p align=\"center\">Happy Birthday to Me - Chapter Three</p>\n\n<p align=\"center\">Ten minutes past midnight\nLeaning out of the window to see the dim light outside\nLost quiet rainy night kisses passersby\nOnce you whispered in the rain:\nHappy birthday my loved one</p>\n<p align=\"right\">Ten Minutes Past Midnight, Sally Yip</p>\n\n<p align=\"center\"> * * * * * * * * </p>\n\n\"Hi Isabelle.\" David waved from his office. \"Grab a coffee and come over, got a problem for you to look into.\"\n\n\"Sure, give me a minute.\" Good. Anything to distract myself from thinking about last night. I shouldn't be feeling guilty about dancing with Albert and Henry but I was. Well, not about dancing with them so much as not drawing back when they pressed themselves up against me. I mean, the dance floor had been crowded, everyone was packed in, but still, I shouldn't have stayed there dancing with them when they did that. Not when they'd pressed themselves up against me. Not when I'd felt them so hard, so excited. Such ham sup lo's.\n\nSo I felt guilty about that. I also felt guilty about how excited I'd felt myself feeling them hard, feeling them rubbing against me. I felt guilty about that story I'd made up for Kam too, about me and Albert and Henry and him. I'd done that on the spur of the moment, knowing it was exciting my husband, but still, I felt guilt, guilt and just a little shame at what I'd said. That it had excited Kam was no excuse, not for me, although I'd enjoyed the results of that excitement.\n\nThree times in one night. \n\nI couldn't stop thinking of that either. It'd been so good. I enjoyed Kam making love to me so much. Giving myself to my husband, being taken by him, it was so enjoyable. I loved that feeling of his body on mine, possessing me, the excitement, the way he moved on me, moved in me, his hands on my body. The act of giving myself to him, of surrendering to him, the exquisite pleasure of that first hard thrusting penetration within my body, feeling his rampant excitement, knowing I was giving him such pleasure, feeling his satisfaction, all of that was so good, so pleasurable. \n\nWas it worth that feeling of guilt?\n\nI told myself yes, whatever I had done was worth it just to give Kam that pleasure, that enjoyment. But still, somehow I still felt a little guilty.\n\n\"Sorry David.\" I shook my head, picked up my coffee, walked into David's office.\n\nHis eyes, as they usually did, glanced from my face to my boobs, down my legs and back up again, pausing at my boobs for an inordinately long time before he managed to look me in the face again. \n\n\"You had a problem you wanted me to look at?\" Or did you just want to look at my boobs? \n\nIf I hadn't been thinking guilty thoughts, I'd have giggled. David was hunky. Good looking. And no, I knew I shouldn't think of my boss as hunky, but he was. If I was a single girl, if I wasn't married ... but I was. Almost, I sighed. Almost. David didn't look like the sort of guy who'd keep a girl waiting night after night...\n\n\"Ahhhh ... Yes ... Isabelle, could you look into these for me please, I need these checked, I think we're under billing somehow, the numbers just don't seem to roll up correctly.\" He smiled. \"Let me know if you need to go through anything with me, okay Isabelle.\"\n\n\"Sure, I'll do that boss.\" David loved going through pretty much anything me. Especially when I sat close to him or leaned over his shoulder. Probably I could have just brought along a blank sheet of paper and he'd have reviewed it with me happily. I found myself wondering if he got hard when he was working with me. Did he get hard like Albert and Harry had, just from looking at me? Was I that attractive? Really? Almost, I wanted to ask him. I was curious. The thought was actually an exciting one. Maybe I should review this one with him and see. Start another spreadsheet to record the results. Review work with Isabelle equals hard cock for David. A thought that brought a smile.\n\nOne that I thought about all the way back to my desk. I knew David was watching me. I wondered if he was getting hard watching my butt. I walked slowly, especially for him. Back at my desk, I found myself wondering what he'd be like. Would he enjoy bending me forward over his desk and making love to me? Would I enjoy that? If I was single and not married, could I do something like that? The image in my mind took my breath away. If I hadn't married Kam, would I do something like that? Would I?\n\nClosing my eyes, I pictured me, bent over the desk, David unbuttoning my top, releasing my bra, fondling my breasts, easing my panties off me, penetrating me hard, taking me, his hands mauling my breasts while he had me. I loved it when Kam was rough with me and took me hard. Now I was thinking of David taking me hard! God! My nipples were so hard, I was so wet just thinking about it. I squeezed my thighs together, wanting nothing more than to lie back and close my eyes and play with myself. Not at the office! I was going to go home early today and see what I could get Kam to do with me.\n\nGet to work Isabelle.\n\nIt was hard. I kept thinking about being bent over David's desk. I knew I shouldn't. I was married. Married to Kam. I made up stories for Kam, but that was to excite him, not me. Kam was all I needed. All I wanted. I loved Kam, I did. But still, it took a long time before I could concentrate on my work.\n\nMid-afternoon, I popped my head into David's office. He looked up right away, smiling. He tried hard to maintain eye contact but it wasn't working too well. It was so cute the way he liked my boobs. \"Got time to go through this with me David? I think I know what the problem is.\" A flaw in the financial calculation that generated the bills for a subset of the clients with a specific account setting. Pretty obscure and I had no idea how to fix it. That'd be a problem for the IT department.\n\n\"Sure, pull up a seat.\"\n\nI didn't. I gave him my notes and then perched on his desk, giving him a good look at my legs - and incidentally at my boobs as I bent forward to point out key findings from my analysis. Yes! He was getting hard. I saw him swelling inside his trousers. I moved around, my boobs bouncing, his eyes following. His cock jerking, pushing his trousers out. Score One for Isabelle's boobs. \n\nWhen I got back to my desk, I checked off the new column in my David Tracker spreadsheet. \n\nA girl has to find something entertaining to do at work. Teasing my boss was fun, and it did take my mind off my little problem with Kam.\n\nWhen I got home that night, I was disappointed to find Kam was too tired to make love.\n\nI had to satisfy myself with my fingers and my overworked imagination.\n\nMy imagination had me bent over David's desk being taken hard.\n\nMy fingers brought me to a very nice climax.\n\nKam was already fast asleep.\n\nMaybe tomorrow night.\n\nI didn't feel guilty at all.\n\n<p align=\"center\"> * * * * * * * * </p>\n\nThursday evening. I sat with Fan drinking tea while I waited for Kam to finish up. He was with a potential new client, a sales pitch, Fan said. She didn't have black rings under her eyes. With Tom in the States, she was probably getting enough sleep. I certainly was. Not that I wanted to.\n\n\"How's it working with Kam?\" she asked me.\n\nI blushed. \"It worked, but last night he was too tired again. And I really wanted too.\"\n\nI kind of thought I knew what worked now. I mean, I'd only ever had sex with Kam but I wasn't totally na\u00efve. Guys had been chasing me since my last year at High School. Maybe it was a coincidence that that was when my boobs started to balloon. I thought perhaps not. \n\nAnd over the last week I'd made up enough stories for Kam that I was very sure I understood what excited him. It shocked me more than a little that Kam really liked to think of other men being attracted to me. He liked them looking at me, he liked to think of them with me. It seemed a little strange to me, but it worked for him. As for myself, if my making up stories and pretending excited Kam, I was okay with that. It was actually kindof fun. I'd certainly found it exciting enough.\n\n\"Okay,\" Fan smiled knowingly, \"I know you're thinking about something. Tell me.\" She sounded so worldly. Fan the agony aunt adviser. I almost giggled.\n\n\"It's just...\" I shook my head. \"It's weird Fan, I know what gets him excited I think. It worked a couple of nights ago when I tried it again.\" I smiled. \"It worked really well.\"\n\n\"What worked, Isabelle?\" Fan asked.\n\n\"Uhhhh,\" I blushed. \"I'm not sure...\"\n\n\"Isabelle! It's me, Fan, remember me. I'm fucking Tom, Isabelle. He fucked me on his desk just before he flew out. Do I look embarrassed telling you things like that? No, I don't, so just tell me, okay.\"\n\nI was giggling and blushing now. \"Honestly Fan...\"\n\n\"Honestly Isabelle!\" Fan laughed. \"Tell me.\"\n\n\"Well,\" I lowered my voice. There was nobody around, but I was embarrassed. I mean, Fan was Fan, she was close to being a friend now, after I'd known her for almost a year, but still, Kam was my husband, this was personal.\n\n\"He likes ... he has these little fantasies that get him really worked up...\"\n\n\"Oh yeah,\" Fan nodded, \"Tom has those too. Half the guys I've dated have these fantasies ...\" She giggled. \"Mostly about things they want to do with me...or to me...\"\n\n\"Yeah, well, Kam's fantasies are all about things other guys do to me...\" There, I'd said it. I blushed, looking at Fan, waiting.\n\nShe shrugged. \"Yeah, some guys are like that, what does he like other guys to do to you?\" God, she sounded so matter of fact.\n\nI told her about what had happened the first time, with the American guy thinking I was a hooker and how excited Kam had gotten. \n\nShe laughed. \"That actually sounded like fun, Isabelle.\"\n\nI told her about Albert and Harry in the bar, how excited Kam had gotten over them. How he'd liked me dancing with them, how he wanted to know if they got hard. In the end, I even told her how they'd rubbed themselves up against me and about the story I'd made up for Kam and him and me and Albert and Harry. Fan covered her mouth with her hand and giggled again.\n\n\"Wow, that's hot Isabelle, you're really getting me worked up here too.\"\n\nNow it was my turn to giggle. I wasn't so embarrassed after telling Fan. They were right. A problem shared IS a problem half-solved. At least I could talk to Fan about this one. It wasn't like she'd gossip to my friends. We didn't have any in common. Tom wasn't exactly a friend.\n\n\"Yeah, but what do I do Fan? I mean, he needs this every time to get him excited enough. And I want to, you know...\"\n\n\"Fuck him?\"\n\n\"Yeah, I want him to fuck me a lot more.\"\n\n\"Give him what he wants.\" She giggled at my expression. \"No, not fucking other guys. Relax. But maybe tease him, dress up for him, kind of imply it.\" All of a sudden her eyes lit up. \"Hey!\"\n\n\"What?\"\n\n\"You two have anything planned tonight?\"\n\n\"No, nothing at all.\"\n\n\"Want to double date? Go out for dinner and then back to your apartment?\"\n\n\"Maybe, what were you thinking?\"\n\n\"That client in there with Kam, he's, you know, one of those expat guys, Kam's setting him up with offshore investment accounts, he was putting the make on me when he came in.\" She smiled. \"He's not bad looking and Tom's away, I'm getting bored, maybe we can ask him out with us.\" She grinned, a very naughty expression. \"Then we go back to your place and I make out with him, you can see if Kam likes that.\" She giggled, her cheeks a little pink. \"I don't mind you guys seeing me, I mean, it can be pretty exciting Isabelle, and I'm okay to put on a bit of a show if that helps you with Kam? I mean, you know I'm not that shy, right?\"\n\nFan looked at me anxiously, her cheeks a little pink. \"If you're okay with that? I mean, it was just an idea.\" \n\nFan? Blushing? I almost giggled but also, my heart was beating faster. A lot faster. I didn't say no right away. I should have, I knew, but it was so tempting. \"What about him?\" I asked cautiously, \"the expat guy? He might not go for that.\" I wasn't sure that I would either, I'd never thought of anything like Fan had suggested. Not for real. I'd made up stories, sure, but what Fan was suggesting was very real.\n\nFan giggled. \"He's a ham sup lo, one of those expat guys that likes to pick up Chinese girls. He'll go for it.\"\n\nI guessed Fan would know about guys like that. I didn't say that though. My expression didn't change. I thought about it. Seriously, I did. Was I that desperate? I thought about watching Fan with another guy. That excited me. It scared me but it excited me. I thought about someone else watching Kam and I. That was terrifying. Kam was the only man in the entire world that I had ever done anything except kiss with. Fan wasn't an issue. But could I make out under the eyes of another man, a man who wasn't my husband? That thought was terrifying. Somehow it was also exciting, but in a very scary way.\n\nI wondered if it would excite Kam. Another man seeing me make out with my husband. Oh my god. I told myself that I could always go back into our bedroom with Kam if he got really excited. I mean, I wanted Kam really excited, I did. I told myself that but in the back of my mind I knew Kam wouldn't want to go back to the bedroom if we did something like this. I didn't think Kam was pretending the way I was when I made those stories up for him. But just maybe it was worth trying? If it got Kam going, maybe it'd be worth it. Could I handle a little embarrassment?\n\nStop fooling yourself Isabelle, I told myself. You got embarrassed walking around in the mall in a little black dress a couple of nights ago. Now you're thinking about making out with Kam while Fan and some guy you've never met watch you and you watch them. That's not a little embarrassment. That's a lot. No. I couldn't do this. No way. Not even to get Kam so excited that he'd make love to me all night. All night? But it was only making out. But afterwards, after Fan and that guy had left?\n\nMy heart raced. I opened my mouth. \"Okay.\"\n\nI felt a little sick. Nervous? Yes. Very.\n\nFan squealed. \"Isabelle, this is going to be so hot!\"\n\nIf it wasn't, why was I even thinking about it? But I didn't say that.\n\n\"Fan,\" I whispered, my face a fiery red, \"I have no idea about anything like this.\"\n\n\"Relax Isabelle,\" she smiled at me. A reassuring smile. \"Leave it to me, okay, you just relax and go with whatever happens, if it works, it works, if it doesn't, it doesn't. Okay?\"\n\nI nodded weakly. \"Okay.\" Leave it to Fan. Close my eyes and think of Singapore? That wasn't very reassuring. \"But ... what do I? ... I mean how ...?\"\n\n\"Isabelle, relax, you're a woman. You're married. Kam knows what to do, okay. If we get that far, don't get fancy, just do what you want to do. I'll do the fancy stuff.\" She giggled. \"Been there, done that, who knows, you might learn something watching me.\"\n\nI probably would I thought, rather dryly. Fan might have been two years younger than me but she seemed to have a wealth of worldly experience. Rather a lot more than me. I swallowed nervously, feeling a black hole where my insides used to be. An excited yet completely terrified black hole.\n\n\"Okay,\" I whispered.\n\nThe conference room door opened. A shock ran through my body. Nervous fear? Terror? Excitement? Sick suspense? All of that and more as Kam emerged, smiling. A large tall gweilo followed him out. The face seemed familiar. I almost choked on my tea.\n\n\"Fan ... Fan ... that guy ... he's the American I told you about, the one that thought I was a hooker.\" What was his name?\n\nFan looked at him and giggled. \"Okay, that should make this a lot easier.\"\n\nI couldn't see how. My face was on fire. A minute ago I'd been bright red. Now I was burning. God, how much more embarrassing could this get?\n\nKam saw me sitting with Fan, smiled happily. Brought the gweilo over. \"Jim, this is my wife Isabelle, Isabelle, this is Jim Whitworth. You've already met Fan of course.\" He smiled happily at me. He must have forgotten that story and the business card I'd showed him. God, I hoped so. \"Jim's just signed on with us as a client Isabelle, I thought perhaps we could take him out to dinner.\" He glanced at Fan. \"Would you like to come as well, Fan?\"\n\nFan and I glanced at each other. Fan smiled at Jim. \"I'd love to Kam.\"\n\n\"Pleased to meet you ... Isabelle?\" I gulped and smiled as Jim took my hand, shook my hand very gently, very carefully. I could feel the power there, the strength in those hands. \n\nHe winked.\n\nI blushed wildly. He remembered. Oh my god. What was he thinking?\n\nFan smiled at Kam. \"How about you guys go grab a drink. Il Casino maybe? Isabelle and I can go upstairs and change and come back and meet you there. Forty five minutes okay boss?\" Fan was her professional best. Just, I wasn't sure which profession.\n\n\"Sounds great.\" Kam was enthusiastic. \"Does that work okay for you Jim?\"\n\nJames J Whitworth Three. That was it. \"Sure, that works just fine Kam,\" he smiled, blue eyes maintaining eye contact without any downward glances. Talk about self control. Despite myself, I was impressed. Also just a little offended. EVERY guy looked at my boobs. Was he gay? No, he couldn't be, he'd wanted me to call him. \"We'll see you ladies soon.\"\n\n\"Wonderful,\" I gulped, letting Fan lead the way. \"See you both at Il Casino.\"\n\n\"Oh my god ... oh my god,\" I was just about hyperventilating as soon as we were out of earshot. \"Fan ... Fan ... I'm sure he recognized me ... I don't think Kam remembers his name though.\" I rummaged through my handbag. Yes, I still had his card. I stared at it, mesmerized. \"God, I hope not.\"\n\n\"Stop freaking on me Isabelle, it doesn't matter what he thinks, it's perfect, don't you see.\"\n\nFan had got me as far as our foyer, she pressed the button, led me in.\n\n\"No, I don't, I don't see at all, he thinks I'm a hooker, I'm sure he does. He looked at me, he winked at me Fan.\" Jesus Jesus Jesus!\n\n\"So?\" Fan shook my arm. \"Isabelle, calm down, stop stressing. Really, it's perfect.\"\n\n\"How?\" I wanted to know how some really important client of my husband's thinking I was a hooker was perfect. It really didn't seem perfect to me. I was sweating. Me? Cool as ice Isabelle. Sweating? I was nervous. Nervous? I felt like throwing up.\n\n\"Well, we're already going for drinks and dinner, he's already put the make on me, he knows your Kam's wife but he thinks you're either doing the hooker thing on the side or playing games with Kam.\" Fan paused for a moment. \"Either way he won't say anything in front of Kam.\" She smiled. \"Relax Isabelle, this is going to be fun. Hey, do you have any dresses I can borrow?\"\n\nI looked at her tiny boobs. \n\nShe laughed. \n\n<p align=\"center\"> * * * * * * * * </p>\n\n\"You ladies look gorgeous.\" James J Whitworth Three and Kam both stood as Fan and I walked up to the table they'd staked out. Kam looked impressed. Jim looked at my boobs.\n\nFan and I had gone overboard. Neither of us were slouches in the bathroom. We'd used the en-suite together, it saved time. I'd been impressed at how toned Fan was. She'd made the same comment about me as we did quick underarm touchups.\n\n\"So you do Brazilians as well? Sexy.\" she'd giggled, eyeing me.\n\n\"Kam likes me too.\" I was a little embarrassed.\n\nShe did look pretty like that though. I hoped I did. Well, Kam liked it so I guess I did. We raced through our showers, did our hair and our makeup, looked through my clothes. Somehow, being naked in my bathroom with Fan wasn't embarrassing at all. She seemed to feel the same way. Although that did make me think about making out later on, where it wouldn't be just Fan and I. That made me twitch.\n\nWhat was embarrassing was when Fan found the pearl thongs I'd ordered online.\n\n\"Perfect,\" she squealed as she slipped into the white one. I didn't think so. I mean, they weren't actually panties. All they did was accentuate what should be covered up. \"You wear the black ones Isabelle.\"",
        "\"No way, Fan, not for going out in.\"\n\n\"Isabelle, are we doing this or are we doing this? I'm going to be a total little make out slut tonight so you and Kam can get it on, the least you can do is keep me company. And besides, it'll get Kam going when he realizes what you're wearing under your dress.\" She grinned. \"Make sure he realizes while we're making out that you wore it to dinner, okay, start getting him worked up early.\"\n\nThat thong would do that alright. Just thinking about wearing it out was doing it for me already. It was nothing but a narrow elastic hip band, with two strings of pearls that ran either side of Fan's sex, joining in a single strand that ran up between her butt cheeks. It did look sexy. From the slight glistening I could see on Fan's slit, it was doing it for her too. But really, it was the sort of thing you wore for sex, not for going out to dinner in.\n\nShe saw where I was looking and giggled. \"Wear it, Isabelle.\"\n\nI wore it. \n\nBlack suited me.\n\nIt took a few minutes to sort out dresses though. We'd both opted for little black dresses of course. What else? Fan found an older black tube dress of mine that was stretchy enough that it clung to her despite the marked difference in our boob size. With the exception of my boobs, we were pretty much the same size. She preened in the mirror while I slipped into one of my new dresses, a backless v-fronted one with a slightly loose skirt, long enough that the threat of embarrassment was substantially reduced. Fan didn't seem concerned at all. Neither of us wore anything else but shoes. Strappy black stiletto sandals for me, Fan wore her clunky heeled sandals that she'd worn to work.\n\nThe looks we got as we walked across the mall, across the bar and into the restaurant confirmed that we looked good. As expected of course. Two slender and very pretty Chinese girls, one with big boobs, in little black dresses. What's not to look good?\n\nHow did I feel? I was wearing nothing but a very revealing little black dress, black stiletto sandals and a string of pearls that any stretch of the imagination couldn't call panties. I was so wet the insides of my thighs were slippery. I felt terrified.\n\n\"Isabelle!\" The call and the wave from across the bar weren't expected though. My boss, David, was sitting at the bar with a couple of the guys from work, one of them was that expat British guy, what was his name, Robert somebody? They were with two of the girls from Finance. I knew them vaguely, Suzy Kwan and Nancy Wong. \n\n\"Hi,\" I'd given them a wave, \"meeting my husband, got to run\" and continued on to find Kam and Jim. I breathed a sigh of relief when I spotted them. The last thing I wanted was to be talking to David and the others from work dressed like I was, with pretty much everything I had on display. Bad enough that they'd seen me. I couldn't sit down fast enough when we found Kam and Jim. Actually, I did sit down really fast. Fast enough that my boobs bounced, one almost escaping from my dress, I captured it just in time. This time Jim took a long look. Kam looked. Fan looked.\n\nFan laughed. \"Isabelle, I wish I had boobs like yours.\" \n\nOf course that made Kam and Jim look some more. I blushed. Pink. Then red as I felt my nipples swell and harden, pushing against the thin material of my dress.\n\n\"I can see why,\" Jim said reverently, tearing his eyes away at long long last. A quick glance at my husband told me that he was pleased with Jim's compliment.\n\n\"My husband likes them too,\" I half-smiled, still embarrassed by that too close scrutiny, nestling in against Kam, one of his arms around me now.\n\n\"A man with impeccable taste,\" Jim smiled, this time at Kam.\n\nDrinks arrived. Kam knew what Fan and I liked, he'd already ordered. Chilled white wine for me, vodka, lime and soda for Fan. The waiter arrived with menus, we ordered, we did the social chit-chat thing, Fan busy flirting with Jim. She was good at it. I started taking notes. Jim ordered a couple of bottles of wine with the food. Thinking about Fan's suggestion for later, I drank more wine than I usually did. Two or three large glasses more. I had no idea how to suggest that Kam invite Jim to our apartment for drinks. I wasn't even going to try. I'd leave that to Fan.\n\nI still wasn't sure that I wanted to. The whole thing was making me feel more and more nervous. Nervous enough that I let Kam fill my glass yet again. On the other hand, Fan and Jim were definitely hitting it off. In the end, Fan didn't have to say a word.\n\n\"Why don't you all come up to our apartment for a few more drinks.\" Kam was waxing effusive. A few drinks had done that to him. Me? I was giggly. Giggly and full of nervous anticipation. A little scared too. Definitely scared. And excited. It was strange. \n\n\"I'd love to,\" Fan smiled. She was sitting very close to Jim. It looked as if his hand was on her leg under the table. Kam's was certainly on mine. \"Would you like too, Jim?\" That smile of hers would have melted stone. I'm sure it was doing a lot more than melt Jim. More like make him as hard as stone.\n\nJim smiled happily back. \"I'd love to, are you far from here?\"\n\n\"Upstairs,\" I joined in, my heart drumming, \"our apartment's in this building.\"\n\n\"It's not just offices and shops and the hotel?\" Jim sounded a little astonished.\n\n\"No,\" Kam said, \"the bottom fifteen levels are offices, there're twenty five floors of apartments.\" He smiled at me. \"Isabelle and I have one of the upper floor apartments, the view's amazing, come up and take a look.\"\n\nKam was proud of our apartment. It wasn't a penthouse apartment but still, it'd cost a small fortune. Family money. His family money, not mine. His grandfather had given him the apartment as a wedding present. Mind you. I'd got to pick the furniture, which was just as well. Kam's taste in furniture and interior design was enough to make one shudder. He'd left me too it. I was rather proud of the end result. \n\n\"Please Jim.\" Fan was doing her sex kitten thing so well.\n\n\"With you Fan, anywhere.\" Jim smiled. It looked like the sex kitten was about to score another trophy. I gulped. That meant... I felt a little faint. I felt more than a little wet. My pussy tightened, my stomach knotted. What had Fan talked me into? Still, I didn't have to actually do anything. Besides, Jim probably wouldn't go for something like what Fan had in mind anyhow. Gweilo's, most of them were fairly conservative in my experience. My limited experience. \n\nIt wasn't like I knew many.\n\n\"Let's go.\" Kam stood, easing my chair back for me. Jim stood, taking Fan's hand in his. Romance seemed to be blossoming. So did the bulge in the front of Jim's trousers. I glanced at my husband Kam too. Now I was very excited. \n\nNow I wanted what Kam's trousers concealed...\n\n<p align=\"center\"> * * * * * * * * </p>\n\n\"Let me show you around.\" Kam led Jim inside our apartment, both of them leaving their shoes in the marble-floored foyer.\n\n\"Wow,\" Fan exclaimed, looking around after she'd got her shoes off, \"nice.\"\n\nI smiled happily. Our little home in the sky sat on one corner of the thirty fifth floor, L shaped, two thousand five hundred square feet with floor to ceiling windows on two sides and an actual private outdoor balcony that we rarely used.\n\n\"Come on, I'll show you round.\" I took Fan's arm. \"See down here, that's Kam's home office and in there, that's the guest bedroom, that's the guest bathroom and the laundry. Now back here,\" we walked back into the foyer, \"off this side is our master bedroom.\"\n\n\"Oh wow, I love your bed, Isabelle,\" Fan squealed. \"Jim, don't you like their bed. How firm is it?\" Our bed was huge, an \"Emperor\" size. I'd always wanted a large bed and the one we had was absolutely the largest I'd been able to find, made from imported Burmese Rosewood. You could have gotten six people into it and had room to spare. I loved our bed. Fan jumped backwards onto it with a thump just as Kam ushered Jim in. That bed was solid. On her back on our bed, dressed in that little black dress, Fan looked tiny. Tiny and very sexy. Jim was eyeing her the way a shark eyes breakfast. \n\nA shark that wanted to eat Chinese. I giggled at the thought.\n\n\"Come on Fan.\" Despite my nervousness, I was laughing at her. She was so happily shameless. Fan followed me out, back through the foyer into the designer kitchen split the apartment down the center. \"There's the formal dining room.\" We hardly ever used it but the dining table and the buffet were gorgeous, dark red rosewood as well, but the more or less antique buffet and the display cabinet were inlayed with ornate and intricate mother-of-pearl patterns. Flowers mostly. On the other side of the kitchen were the living room and the formal lounge with the sunroom right on the corner. It was into the living room and then the sunroom that I led Fan, with Jim and Kam following.\n\n\"Take a seat, Kam'll get drinks.\" Two large rectangular Thai teak luohan chuang, daybeds, each with a fitted mattress and covers, packed with cushions, sat on each side, the far end filled by an eight foot tall dragon palm in a huge terracotta pot and two corner tables. The rest of the sunroom was filled with a beautiful teak coffee table that had come with the daybeds, making the room feel warm and intimate. Jim promptly drew Fan down beside him, I took the other. Kam flicked some quiet music on before he ambled in a couple of minutes later with a bottle of his favorite whiskey, an old 1988 Auchentoshan Single Malt that I'd bought him for his birthday, along with a bottle of chilled Cloudy Bay Chardonnay in an ice bucket and two wine glasses.\n\nHe poured wine for Fan and I. Two tumblers of single malt for himself and Jim, straight, no ice, just a dash of spring water. Jim took his, we all clinked our glasses together. That chilled chardonnay slipped down my throat so easily. Half my glass was gone in seconds. Kam smiled as he topped me up before picking up his own glass.\n\nJim and Kam sipped, Jim's eyebrows arched. \"Nice,\" he said, \"very nice.\"\n\n\"Like the view,\" I smiled. \"Kam, why don't we turn the lights down? Show Fan and Jim the view.\"\n\nKam flicked the remote for the lights, not just dimming them but turning them out completely. I often liked to sit here at night, with the lights out, just looking out over the harbor or the city. It was beautiful, the lights sparkling in the darkness, the blackness of the sea at night. Even in a rainstorm I loved it here. Tonight, sitting in Kam's arms, it was magical, lights from a fairytale sparkling in the darkness.\n\n\"Beautiful,\" Jim said reverently, gazing out. He smiled across at me. \"I can see why you enjoy the view from here Isabelle.\"\n\nI smiled back, the nervousness and tension partially dissipated by the tranquility of my sunroom and of the view. Jim and Fan and Kam chatted, I sat there quietly, sipping my wine, enjoying being with Kam, still nervous, constantly aware that I wore nothing beneath my dress. Just that bead thong. That knowledge, that awareness, kept me knees pressed tightly together as I sat, kept me in a constant state of sexual tension, my pussy exposed to the cool air of our apartment, slightly slippery, my lips a little swollen, my nipples hard and swollen, my body lightly tingling. Did Fan feel the same tension? The same awareness. She showed no signs.\n\nRemembering what Fan had said, what she's suggested, I kept thinking about her and Jim. She was so petite compared to Jim. As petite as I was, really. Jim, Jim was six inches taller than Kam, he looked like a typical gweilo to me, very big and hairy. I found myself wondering about his cock. Was that as big as the rest of him? I wondered how it would fit into Fan. The thought made my nipples ache rather deliciously. Now Kam, Kam's cock was such a nice size, it fitted me perfectly. I wondered if watching Fan and Jim make out would get him really excited. I hoped so.\n\nAs we all relaxed, me sipping on yet another glass of wine, feeling a lot more relaxed as the alcohol hit me, Fan suggested \"Let's play Jenga.\" \n\n\"Jenga?\" Kam, Jim and I all looked at her.\n\n\"I saw a Jenga game in your living room,\" Fan said, \"stay here, I'll get it.\"\n\n<p align=\"center\"> * * * * * * * * </p>\n\nShe came back a minute later with the jenga game we'd never played. \"Okay,\" she was smiling. \"Now, we're going to play Jenga.\" She smiled that wicked smile. \"Sex Stack Jenga.\"\n\n\"Huh?\" I said.\n\n\"Sex Stack?\" Jim asked, grinning. \n\nKam looked interested.\n\n\"Yeah,\" Fan giggled, passing the box to Jim. \"Open this. Where's some markers.\"\n\n\"I know,\" I said. I wondered what Fan was planning. I had no idea but I went and got some marker pens from the kitchen while Jim opened the box. \n\n\"Okay,\" Fan said as I returned. \"There's fifty four pieces, each of you grab a marker and start writing.\" She giggled. \"Here we go guys ...take a block each, you write what I tell you on the block ...Just a quick kiss! ... Makeout! ... Piece of clothing off! ... Done? Kiss anywhere of their choice ... Kiss anywhere of your choice ... Give a hickey ... Okay? ... Take a shot ... Take a body shot ...Lick whipped cream off body part of their choice ... Next ... Lick whipped cream off your choice ... Drink a shot ... okay? Give special kiss- 30 seconds ... Receive special kiss- 30 seconds ... Give a lapdance ...\"\n\nWe were all busy writing for the next few minutes as Fan listed out all sorts of actions. I was giggling by the time we finished. I'd also drunk another glass of wine. Giggling and thinking \"what?\" when Fan said things like \"Ice play with their nipples!\" Jim and Kam were both getting into the spirit of it, busy making suggestions. At last we finished every single block.\n\n\"Okay,\" Jim asked, sipping his whiskey, \"How do we play\".\n\n\"Simple,\" Fan said, \"The same as Jenga, we build a tower, then take turns to pull out a block and you have to do what it says on our block. Knock the tower over and the other three all take a piece and whatever it says happens to you, all at the same time.\"\n\nJim grinned. \"I think I like this game already.\"\n\nI wasn't so sure, but I remembered Fan's advise to just go with the flow. There was nothing too outrageous on those blocks after all. About the most risqu\u00e9 was the dry humping and the take your underwear off. Given I wasn't wearing any, that seemed easy. Although I wasn't too keen on the whole iced nipples thing either. I giggled. Kam glanced at me, a surprised look. That made me giggle more. Okay, the wine was hitting me.\n\n\"Who starts?\" Kam asked.\n\n\"I will,\" Fan volunteered. Why was I not surprised? Very very gingerly, she drew out the first block. She looked at it. Giggled. \"Kiss anywhere of their choice.\" She looked puzzled. \"How do we decide who's who, there's four of us. I didn't think of that.\" \n\n\"Any empty wine bottles?\" Jim asked.\n\n\"This one,\" I said, emptying the bottle into my and Fan's glasses. Wow. We'd drunk that bottle between the two if us? Already? Kam stood, left the room, came back with another bottle. A full one.\n\nJim picked the empty bottle up, laid it flat. \"If it's one of you girls turn, the other spins the bottle and whichever of Kam or I at points at is the donor or the recipient. If it's my or Kam's turn, the opposite.\"\n\n\"Yes!\" Fan clapped her hands. \"So you spin, Isabelle, and I get to kiss whichever of you guys it points too.\"\n\nI spun. A little clumsily. We all watched the bottle. \n\n\"Whoo hooooo\" Jim cheered as the bottle slowed, stopped, pointed towards his side.\n\nFan smiled. \"So where would you like to be kissed, Jim?\"\n\nHe laughed. Then pointed at his lips. My heart beat a little faster. Fan leaned in towards him, kissed his lips very very slowly.\n\n\"You taste nice,\" she smiled. Jim smiled back.\n\n\"Your turn,\" she said to Kam.\n\nHe eased a piece out. Looked at it. Laughed. \"Kiss inner thighs.\" Jim reached for the bottle, spun it hard. It whirled and whirled, slowed, slowed, stopped. Pointing to Fan. Instantly I was jealous. Jealous as Kam grinned, easing off the daybed to his knees before Fan, lowering his head, parting her knees with his hand, kissing the inside of one of her thighs, slowly, then the other, his hands spreading her knees apart. Fan squealed and giggled. He was looked a little surprised when he sat back up. \n\nMy turn. My heart pounded. Almost fumbling, I teased a block from the tower. Almost, I was scared to look at it. Fan took it from my hand, read it out. \"Lightly run your lips over their neck/face.\" I just about sighed with relief as she spun. The bottle turned and turned and turned, slowed, stopped pointing directly at Jim. I glanced at Kam. He looked excited.\n\n\"Your lucky night, Jim.\" He laughed.\n\nMaybe with Fan, I thought to myself. Then, I could do this, I knew. I didn't have to even kiss his lips, just his face. I stood, stepped around the coffee table.\n\n\"That's too awkward,\" Fan said, \"you're too tall, Jim. Here, lie down.\" She stood up, Jim lay back obediently. \"Isabelle, you can kneel down here, that's much better.\"\n\nIt was, I knelt on the floor beside his head, looking down at him. He was rather attractive. I liked the smell of that whiskey on his breath. A very masculine smell that made my nostrils flare slightly when I inhaled. He smiled up at me. Heart beating faster, I lowered my mouth to his cheek, trailing my lips across his cheek, his jaw, his other cheek, across his eyebrows, down his nose, and then, daringly, I brushed my lips across his for a fleeting instant. Lifting my face, I smiled happily.\n\nTaking my seat back, I saw Kam smiling. I saw that welcome bulge in his trousers, making my heart beat a little faster. Fan saw as well. Saw and gave me a wicked little smile.\n\n\"Jim, your turn,\" she purred.\n\nJim seemed hardly affected by the alcohol. Unfair! He teased a block out, looked at it, then chuckled. \"Whisper something hot in their ear.\"\n\nKam laughed and spun the bottle. Me! It was pointing at me. My heart pounded wildly for an instant but then I realized, okay, all he was going to do was whisper something. That was no problem at all. Jim grinned at me, a wicked grin that started my heart pounding all over again, He slid to his knees before me, his head level with mine, eased his mouth close to my ear, his breath hot on my skin.\n\n\"I love the panties you're wearing tonight, Cyndi, I want to take them off you with my teeth, very slowly.\" The way he whispered it, so slowly, almost lasciviously, took my breath away, left me flushed and speechless as he took his seat again. \n\nFan looked at my face and giggled. My mind was whirling. Cyndi? He'd said Cyndi? He knew? He remembered, he really did. Oh my god. Had he really seen my panties? Or rather my non-panties? Had he? Oh my god. Oh my god! My nipples ached, my pussy pulsed wetly at the thought. Jim grinned. In the end, I giggled, very weakly. Thank god it was Fan's turn next. \n\nShe pulled her block dexterously. Of course she would. \"Remove article of clothing from them - their choice.\" She squealed. \"Okay! Guys! Who gets lucky?\"\n\nI spun the bottle. Of course it pointed to Jim. He grinned. Stood up. Looked down at Fan who waited on his decision. Eagerly, I thought. She glanced at me, that wicked smile on her face, morphing into a laugh as Jim said \"Sock.\"\n\nShe knelt before him, teased his sock from his foot and cast it over her shoulder into the outer darkness. Or, at least as far as the living room. \n\nI giggled, sipping on my wine. \"Kam, your turn,\" I said.\n\nKam withdrew very carefully. I wondered what he'd got. I hated to say it but I was starting to enjoy this game. It was fun. Kam grinned. \"Get a lap dance.\"\n\nGod, I hoped it was Fan that the bottle pointed to. I couldn't dance. I couldn't. I had no idea how to do a lap dance. The bottle spun and it did point to Fan. Instant relief on my part. Fan bounced to her feet without even a moment's hesitation. Of course she would. Before I could blink, she was dancing right in front of Kam, her hands running over her body, her hips swaying, turning, dancing, as much for Jim as for Kam. \"How long for?\" she asked happily.",
        "Jim looked at his watch. \"Why not for one minute,\" he said. We all watched. Fan danced for what seemed to me to be a very very long minute. She was very sexy though. \"Time,\" Jim said at last.\n\n\"That was longer than a minute,\" Fan accused him.\n\nHe grinned and nodded. \"Yeah, but you were so good, I wanted you to keep going.\"\n\nShe hit him lightly. He chuckled. Chuckled and then slipped a finger under her chin, tilting her face up, kissing her for real. Fan looked surprised for an instant, then she was kissing him back, passionately. One of those mouth wide open, lips crushed together, his tongue halfway down her throat kisses that went on and on and on until Jim at last lifted his mouth from hers. For a minute there, I'd thought they weren't going to stop.\n\n\"You were good Fan,\" he smiled into her eyes. Then, \"whose turn.\"\n\nIt was mine. I fumbled with my block, my fingers nervous. Clumsy. But I got it out. I read. My heart did a wild fandango. \"Dry hump, them on top. Two minutes.\"\n\nKam was smiling when I glanced at him. I could see his physical reaction. Definitely this game was getting him excited. Fan spun the bottle, I waited. Nervous didn't begin to describe how I felt as it slowed, slowed ... And pointed to Kam. Instant relief.  \n\n\"Lie down Isabelle.\" Fan was in command here. \"Kam, get out of the way.\" I slid down on my back, Kam lay down beside me, then on me, above me. Oh yes, he was hard. I gasped at the feel of him pressed against me. I was so wet when I felt him. I was also tense. Tense with embarrassment.\n\n\"Okay Kam, hump away, set the timer Jim.\" \n\nKam moved against me, slowly. \n\n\"Why waste time watching.\" That was Jim. When I glanced over, he was easing a willing Fan onto her back and moving over her. Fan gasped, her arms already round his neck as he began to move. He kissed her. I looked back up at Kam, enjoying those slow movements. \"Kiss me,\" I whispered. He did, slowly, gently, the way I liked. Yes, I liked this game of Fan's a lot. The time on Jim's watch went off far too soon. Everyone sat up very reluctantly, very slowly. \n\n\"Jim's turn,\" I gasped.\n\n\"Let's make it fair,\" Fan said, \"whatever ends up being selected, the other two have to do the same.\"\n\n\"Oh yeah!\" Jim said, grinning.\n\nKam nodded enthusiastically.\n\nI was the only one that wasn't so keen but I said nothing. Kam was enjoying himself, which was what tonight was all about, even if I was very very nervous. I drank more wine. It was Jim's turn. We all watched as Jim pulled a block. He chuckled, then he laughed. Then he read it out.\n\n\"Gently caress thighs without touching intimate parts.\" Kam spun the bottle and it pointed to ... to ... to me! That was so unfair! And Kam got to do the same to Fan. I glanced at her, she winked. Jim smiled. He smiled and he slid round the coffee table towards me as I sat there, feeling like a little rabbit with the fox approaching. \n\n\"Get up Kam, make room for Jim,\" Fan said. \"Come over here with me.\" \n\nJim's hand pushed me back, I was on my back on the daybed, heart pounding, swallowing, feeling a little faint as Jim lay propped up on one elbow, his back to the room, looked down at me.\n\n\"Remember Jim, gently caress thighs without</i< touching intimate parts, okay. Two minutes, starting now.\" Fan, did you have to be so specific? And she knew what my non-panties were. Nooo, she was wearing the same, Kam would know. I hoped Kam wouldn't touch her. I hoped she wasn't as wet as I was. I doubted that. But I stayed where I was, my knees squeezed tight together.\n\nJim smiled, a warm smile, almost infectious. His fingers touched my leg, very gently, just above my knee. My breath was a shuddering gasp as his fingertips slid upwards, up my thigh to the hem of my skirt, down, up again. Now his entire hand was on my leg, warm and dry, gently stroking my leg from knee to the hem of my skirt. His hand felt different, not like Kam's at all. Larger, stronger. More assertive while still being gentle. I loved Kam, but to my shock I was enjoying Jim's gentleness, the slow slide of his fingertips on my skin, on the soft skin of my inner thighs.\n\nHis touch slid upwards, under my dress now, teasing my inner thighs so that I gasped weakly, my knees falling a little apart, not squeezed tight anymore. He took advantage of that parting immediately, his hand slipping between my thighs, his fingers sliding into that slight gap between my legs, sliding high between them, touching my inner thighs on both sides at once. I gazed up at him, at this stranger who was touching me so intimately, touching me where only my husband had ever touched me. His fingers brought me a flooding wet excitement, my pussy pulsed, I felt myself so wet, heated, excited, wanting to be touched.\n\nHis hand slid down towards my knees, one knee seemed to draw itself sideways, parting my legs, offering access to his hand. His fingers ran up the inside of one thigh again, high, high under my dress, almost touching my sex, almost brushing me. I felt myself, hot, wet, ready to be touched. My hips stirred, twitched, my stomach tightened, clenched, I exhaled, my breath gasping out as his fingers teased my inner thighs. As his fingers lifted my dress to expose those little black pearl non-panties to his eyes. I closed my eyes, trembling, burning with embarrassment. With shame. With excitement. Knowing what he was seeing. My pussy, framed by two strings of black pearls. Surely two minutes was up? But Kam and Fan said nothing.\n\n\"Ooohhhhh.\" My eyes flew wide open. Fan? What was Kam doing to her?\n\n\"Ooohhhh.\" He was doing something to her. He must be touching her! Oh no. Oh Kam, no.\n\n\"Shhhhhh.\" Jim's hand pushed my dress up further, all the way up to my hips, my pussy completely exposed to his eyes. I was wet. So wet and swollen, my clitoris begging to be touched. I felt my hips, my traitorous hips, they jerked, they lifted, they sought Jim's hand. I couldn't stop looking up at him, at his face. I didn't want to see Jim looking at me. At the same time I wanted to see what he was looking at. And it was obvious, more than obvious that he was looking at my exposed and naked pussy. My wetly swollen pussy that wanted to be touched. My traitorous pussy that was making my hips twitch, my heart pound, my breath come in little panting gasps.\n\nStill, he obeyed the rules. He didn't touch my pussy. I could feel his fingers, they were gently sliding up and down my inner thighs, one thigh, then the other, within a hairs breadth of my pussy. If my pussy had had any hair. One of my knees jerked spastically, further away from my other knee, my legs wider apart, giving Jim's hand free access to me if he wanted it. If he chose to take advantage of it. Almost, almost, I wanted him to take advantage of it. Of me. My hands clenched into fists as I felt his fingers tracing those pearl strings on either side of my sex, up one side, down the other. \n\n\"Ooohhhhh.\" I couldn't help it. I couldn't! His fingers. \n\nCould Kam see what was happening? Could he see me parting my legs for another man's touch. Was he doing this with Fan. Was he touching Fan's pussy? I had no idea. I hoped not. Jim's fingers continued to tease those pearls, not even touching my skin. But I knew he could see my pussy, I knew where his eyes were looking. \n\n\"Ohhhhhhhh.\" How could I? How could I let this happen with another man? \n\n\"Times up.\" Fan's voice brought his fingers to an abrupt halt.\n\nI shivered with relief. Shivered with disappointment. Shivered as Jim flipped my dress down to cover my naked pussy. I was sure I knew what would have happened if Fan hadn't called time. Jim would have eventually touched me where I was so wet. I wouldn't have resisted. I didn't want that to happen though, I was Kam's wife. I wanted to excite Kam, not be unfaithful to him. I didn't want another man. All I wanted was Kam. As I swung my legs down and sat up, I could see Kam was excited. Now I shivered again, this time with anticipation. I wanted Kam so much. I could also see how hard Kam was as he returned to sit beside me. There was that selfsame bulge in Jim's trousers also.\n\n\"Fan's turn,\" I gasped.\n\nFan smiled, worked a block out, read. \"Ice play with their nipples!\"\n\nI spun the bottle, giggling. Of course she got Kam. Of course. I didn't mind. This was funny. It was funny until Jim peeled his shirt off and I saw his chest, his arms, his muscles. Wow! I glanced at Kam as Fan peeled his shirt off him. My husband was so handsome but his muscles were nothing like Jim's.\n\n\"Lie back,\" Fan said, \"both of you.\"\n\nWe smiled at each other as we picked up ice cubes from the ice bucket. Jim's nipples got all hard as I ran the ice around them. Greatly daring, I ran that ice cube slowly over his chest and stomach as well, smiling at the look on his face. We worked through two ice cubes before Fan called time. From the state of Jim's trousers, he needed an ice pack somewhere else as well. I giggled at the sight. Fan was going to get a big treat tonight for sure.\n\nKam's turn. He carefully wiggled a block free. Looked at it. \"You spank girl.\"\n\nJim spun the bottle, it pointed to Fan. She smiled happily as Kam pointed to his lap. \"Punishment time for Fan, you've been a naughty girl,\" he said.\n\nFan almost jumped onto his lap, lying face down across him. \"Very naughty,\" she said.\n\n\"Very,\" he agreed as he pushed the tube dress up, exposing her butt. And that little white pearl non-pantie thong. Kam glanced at me, grinned. \"Very very naughty.\"\n\nHis hand caressed Fan's butt, one cheek, then the other, slowly. Fan spread her legs, I could see her pussy now, exposed, right between Kam and I, displayed to Jim, to Kam, to me. Displayed and exposed to all three of us, pinkly glistening. I watched, mesmerized, as my husband's fingers dipped between her thighs, one finger delicately touching her. Touching another woman. Touching my friend's pussy. Fan hunched her back, I heard her moan, a soft excited sound. To my surprise, I didn't feel jealousy, I didn't feel anger. I wasn't upset. No, I was choked up with excitement. I almost moaned myself. \n\nKam looked at me, smiling for an instant before his finger lifted from her, his hand came up, cracked down on her exposed butt, leaving a slight red mark as Fan yelped. Kam spanked her slowly, taking his time, not too hard. Fan cried out with each slap of Kam's hand. Her legs stayed spread, exposing her pussy. I couldn't tear my eyes away from her pinkly glistening lips. I'd never seen anything like it, so beautiful, so arousing. I wanted to reach out and touch her with my fingers, feel her, slide my fingertips over her wetly glistening slit, hear her moan.\n\nWas this what men saw? Was this the sight that aroused them, that made them desire us, want to take us, that drove them to penetrate us, make love to us, fuck us? Looking at Fan, I knew that if I was a man I would want to penetrate that wet little hole, sink my cock into it and hold her for my use. \n\n\"Delicious.\" Jim's hushed voice roused me from my reverie. He'd moved to kneel before us, kneel on the floor between Kam and I. His gaze fixed where mine was, his hand was gently caressing Fan's reddened butt cheeks. \n\n\"Don't spank her any more Kam.\" Jim's voice was hushed.\n\nFan sobbed for breath, her head resting on the cushions on the other side of my husband from me. Kam's hand softly stroked one butt cheek, Jim's the other. I couldn't stop myself. Heart pounding wildly, I reached out with one hand, then with both hands. My hands rested on the backs of her thighs, my thumbs hesitantly touched those glistening pink lips. Fan's hips jerked, I heard her gasp. My thumbs gently pried her swollen lips apart, exposing her even pinker inner lips, revealing her little entrance, her inner lips.\n\nJim looked at me. He looked at me, then at Kam. Kam nodded. Jim touched her with one finger, his fingertip resting against that little entrance to her pussy. Fan sighed softly. Kim pushed his fingertip inside her as my thumbs held her lips apart. Fan's head jerked up, she gasped. I gasped. Jim looked up at me, he smiled, he looked down again and slowly, slowly but without any pause, he pushed his finger completely into her pussy, burying it inside her.\n\nFan's head jerked back, her body tensed, her hips lifted, pushed back at Jim's finger. Jim's finger pushed harder, she sank back down.\n\n\"Ohhhh.\" Her little cry cut to my heart, sending a thrill through me, making my pussy do a little dance of excitement, a little dance of sympathy. A dance of desire. \n\nJim's finger moved, exploring her. Fan moaned softly, she moved under my hands. I wanted to moan myself. Kam's hand continued to stroke her butt. He smiled at me. \"Your turn Isabelle.\"\n\n\"Huh.\" My heart missed a beat.\n\n\"Jim gets to spank you now.\"\n\nNo, not like that. My heart missed half a dozen beats but by then Fan was sliding off Kam's lap and Jim was taking Kam's seat. Kam pointed to Jim's lap. \"Your turn Isabelle.\"\n\nI saw his cock twitch inside his trousers. Oh my god. He wanted to see Jim spank me. He did. Could I do this? Could I? I felt a little sick. I mean, I knew Jim was going to do to me what Kam had done to Fan. He'd pull my dress up, I knew. Spank my butt. He'd see my butt. He'd see my pussy. I shivered. I glanced at my husband, saw the look on his face, the eagerness, the excitement. I knew he wanted me to do this, I could see that in his eyes, in his expression.\n\nBiting my bottom lip, afraid, scared, heart pounding wildly, I moved over Jim's lap, lying over him as Fan had lain over my husband, closing my eyes, shivering. All I could think of was those black pearl bead non-panties I was wearing that covered absolutely nothing and how I would look exactly like Fan.\n\n\"May I?\" Jim said. God, he was asking Kam, not me. He was asking my husband if he could spank me.\n\n\"Please,\" Kam said, then, \"wait a second.\" For a minute there I thought he would stop this, stop my turn. My heart fluttered with relief, then sank as I felt Kam's hands take my dress and push it upwards, push it up to my waist, exposing my butt. \n\n\"What a cute little butt,\" Jim said.\n\nI gasped as I felt one of his hands on my butt, stroking me, caressing my butt cheek, tracing the black pearls that ran up the cleft between my cheeks. My cheeks burned like fire. Both sets of cheeks.\n\n\"Isn't it,\" my husband agreed, one of his hands on my other but cheek. I could tell the difference.\n\n\"I want to see her pussy,\" Fan said. \n\nOh no! I knew what she was going to do as soon as she said that. I was horrified. And then she did. She did the exact same thing I'd done to her. I knew. I knew I shouldn't have done that to her, excited or not! I felt her hands. Her hands rested on the backs of my thighs, she spread them, she spread my legs apart, her thumbs touched my lips. My hips jerked, it didn't help that I expected her touch, I gasped. I felt her thumbs on me, easing between my slippery swollen lips, easing them apart, exposing my inner lips, the warm night air brushing my entrance and my inner lips.\n\n\"Ohhhhhhhh.\" I couldn't help it. I moaned, a soft excited terrified sound, my body tensing.\n\n\"Delicious.\" Jim's hushed voice told me another man was looking at the most intimate part of my body.\n\n\"And very very wet,\" my husband's voice said. \n\n\"Spank her now, Jim?\" Fan, how could you. But she had, she'd reminded Jim.\n\nCrack! \"Owww!\" I jerked, my eyes suddenly wide, my butt stinging. That hurt.\n\n\"Again,\" my husband said.\n\nCrack! \"Owww!\" My other butt cheek. Stinging. Sore. Kam's and Jim's hands massaged me gently. My cheeks burned. My face cheeks, not my butt cheeks. This was so unbelievably embarrassing. Embarrassing and exciting. I couldn't believe I was letting this happen to me. I couldn't believe I was lying across Jim's lap with my dress up round my waist with my butt and my pussy on display. No way!\n\nCrack!... Crack!... Crack! Half a dozen smacks in rapid succession, stinging my butt. \n\n\"Owww... Owww.\" It was my turn to yelp. It hurt. Not much. Enough to surprise me. Make me blink.\n\n\"Isabelle's getting wetter, guys.\" Fan sounds happy. Her fingers were still on my thighs, her thumbs on my lips, pulling me open, exposing me. Exposing me to their eyes. And I was wetter. I could feel myself. \n\n\"It's me Isabelle,\" Kam said. Before I could comprehend what he meant, very suddenly, he forced his finger into my pussy, taking me completely by surprise. I felt myself opened, stretched, penetrated. I feel myself so wet and slick around his finger as it slid into me. My hips lifted, I pushed myself back against his finger, head buried into the daybed's cushions, moaning as Kam's finger moved inside me. Fan's thumbs continued to expose me. It was so hard to believe Kam was doing this to me. Fingering my pussy in front of another man. In front of Fan. But he was. I knew he was.\n\nI wanted to die from embarrassment and humiliation and excitement all at the same time. I didn't die. I didn't do anything except stay exactly where I was, feeling Kam's fingers moving inside me, driving me crazy. \n\n\"She's so wet,\" Jim breathed. I could feel how hard he was where I pressed against him as I lay over his lap. I could feel how wet I was as Kam fingered me. I was breathing so hard, gasping, almost moaning, my fingers clutching at the cushions, my eyes closed. \n\n\"Isabelle, you're so pretty,\" Fan murmured. Her thumbs had released my lips, now her fingers were stroking my inner thighs gently as Kam's finger eased in and out of me.\n\n\"I love the way her pussy clings to your finger, Kam,\" Jim breathed. My pussy immediately did as spastic little dance on Kam's finger. \"She looks so tight.\"\n\n\"She is,\" my husband breathed, \"her cunt's so tight on my finger.\"\n\n\"Ooohhhhh.\" I had to moan as his finger inserted itself within me again. My whole body shivered with the intensity of the excitement I felt. The excitement ... and the embarrassment. I was shaking, shaking with a combination of fear and embarrassment and excitement and nervousness and Kam's finger inside me, massaging me inside, moving inside me, making me squirm. \n\n\"She's enjoying this,\" Jim chuckled, \"keep going Kam, I'm enjoying watching.\" One of his hands was massaging my back, kneading, stroking, a task made easy by the backless dress.\n\n\"Oooooohhhhh.\" Kam's finger kept going. Moving, sliding, teasing me so that my breathing came in little pants, so that my hips jerked and lifted and pushed back a little, so that my breath came in little sobbing gasps that were now clearly audible. \n\n\"Can she take two fingers?\" Jim asked.\n\n\"I don't know,\" Kam said, \"I've never tried two before.\" My husband sounded excited. Really really excited. I lifted myself up onto shaking arms, turned my head so as to be able to look at him. \n\n\"Kam,\" I gasped, \"Kam...\"\n\n\"Yes baby?\"\n\nI didn't want to say it, not where Jim and Fan could hear me. I didn't want to but his finger was in my, buried in my pussy, moving, teasing me, sliding in and out and Fan and Jim were watching. They could see. They could see my pussy and his finger in me.\n\n\"Ooohhhhhh... ohhhhhhh.\" So exciting. So embarrassing. I was so ashamed of myself and I wanted Kam to much.\n\n\"What baby?\" Kam smiled. \"You want to try two fingers? Okay babe.\"\n\n\"UUUGHHHHHH!\" Oh fuck. Fuck oh fuck. He pushed a second finger into my pussy, stretching me, stretching my entrance so that my eyes opened wide, my mouth did a big \"O\" and my hips jerked away from my husband's fingers.\n\n\"Hold her hips for me,\" Kam said. \n\nJim did, he did, he held my hips with both hands, gripping my hips and holding them for my husband as he worked two fingers all the way into me. My arms folded, I collapsed down onto Jim's lap. Moaning. Moaning loudly, my body shaking, my pussy spasming around those two fingers. Too much. It was too much. \n\n\"HHNNNNUUUGHHHH!\"\n\nJim's hands released my hips. I couldn't move. Kam's fingers held me, held me like a fish on a hook, my body helpless. I knelt there, knelt with Kam's fingers in my pussy, stretching me, massaging the walls of my channel while Jim's hands massaged my neck, stroking, digging into my shoulders, my back, my spine, my butt, the backs of my thighs, my inner thighs, brushing around where my husband's fingers penetrated me, where they slid in and out of me. I managed to turn my head, to look at my husband as he fingered my pussy.",
        "\"Kam,\" I whispered, \"Kam, I love you.\"\n\nHe leaned in a little and kissed me. A passionate kiss, lips crushing mine, tongue deep in my mouth, a kiss that went on and one while one of his hands slipped under me, slipped inside the v of my little black dress to cup one of my breasts. His lips drew back from mine, his eyes devoured me for a long moment before his lips returned to mine, his tongue eased into my mouth, met mine, danced with mine while his hand massages my breast gently but very thoroughly and his fingers remained inside me. And all the time, Jim's hands caressed my thighs, stroking, teasing, inflaming me but never touching me intimately. Kam did that more than adequately.\n\n\"I love you Isabelle,\" Kam breathed, between kisses.\n\nHis mouth lifted from mine, he looked up at Jim. \"Undo the neck of her dress for me.\"\n\nJim did. My heart felt like it was bursting as his fingers brushed the back of my neck, the halter neck loosened, the front of my dress fell away from my breasts. Kam smiled. I gasped, wide-eyed, feeling a lot more than half-naked now. My little black dress was nothing more than a wide belt around my waist.\n\n\"Time's up,\" Fan's voice startled all of us but neither Jim nor Kam stopped what they were doing to me. And I, I made no attempt to move. \"Isabelle's turn...\"\n\nI didn't look. Kam was kissing me. Kam's fingers were inside me. His other hand was teasing my nipple, my breast.\n\n\"I'll do Isabelle's turn for her,\" Fan said after a second, \"at least, I'll pull her block for her.\" She did, teasing it out, then looking at me, holding it up. \"Do you want to read it?\" she asked me.\n\n\"You read it,\" Kam said, while I knelt over Jim, panting, my body burning. My pussy melting\n\n\"With your clothes on, simulate doggy-style sex,\" he read out. \n\nJim laughed. \"She's just about doing that now.\"\n\nKam's chuckle made my insides twist. \"Spin the bottle,\" he said.\n\nFan reached out and did just that. I watched, hypnotized, as it spun on the coffee table next to me, spun and spun and spun and pointed to ... heart attack time ... Jim's side of the coffee table. \n\n\"Well, just remember Jim, it says simulate, not actually do,\" Fan admonished.\n\nJim and Kam looked at me. I looked back, eyes wide. Kam eased his fingers out from inside me. I whimpered, wanting them back. \n\n\"Here Isabelle.\" He took one of my hands, \"kneel here on the floor.\"\n\nHe wanted me to do this. My husband wanted me to kneel and pretend to have sex with another man when my body burned to have sex with him. I obeyed him though, I did, sliding off Jim's lap to my knees on the floor, holding the front of my dress up to conceal myself, collapsing forwards onto my forearms, my forehead resting on the back of my hands, my now unfastened dress falling away, exposing my breasts. Jim and Kam both watched me. I almost collapsed. I'd been naked in front of Kam. My husband. Never before had I been exposed like this before another man, my breasts uncovered. Jim's eyes burned into me.\n\n\"Your wife's breasts are gorgeous Kam.\" His hushed admiration made me shiver.\n\n\"Wait till you see her naked,\" Kam said. \n\nMy mind was a blank as I knelt, the front of my dress hanging to the floor. I knew Jim had already seen my pussy and those pearl thong non-panties, but this was now. My stomach was a pit of I knew not what sensations. Fear, suspense, excitement, sheer terror, the unknown. Everything. \n\n\"Stay like that Isabelle.\" I did. My hair falling around my head, hiding my face, hiding my burning embarrassment. My breasts felt so full and firm, swollen, my nipples hard and aching. Kam had moved around beside me, one of his hands snaked under me, cupped my breast, caressed me, teased my nipple so that I gasped.\n\n\"Gorgeous breasts,\" Jim said again, reverently.\n\n\"Come on Jim,\" Fan said impatiently. \n\nHe stood, I saw his feet, his legs, moving, disappearing from my sight. \n\n\"Hang on,\" my husband said, kneeling beside me. His shirt floated to the floor, all he wore were his boxers. \"Jim, if you're going to simulate this, take your shirt and trousers off. Fan, you help him.\"\n\n\"Okay.\" Fan sounded breathless. I could see Jim's feet. I saw his trousers pool around them, saw him step out of them, saw his shirt land on top of his trousers. I closed my eyes, feeling faint. Oh. My. God. What was I doing. What was my husband thinking. But then he slid down to lie on the floor beside me. I saw how hard he was and I knew what he was thinking. My heart lept, my excitement soared. Kam. I smiled, a tremulous little smile. He smiled back, he brushed my hair with his hand.\n\n\"Wait, Jim,\" he said, and then he was lifting my arm, sliding under me, lying on his back beneath me so that I knelt over him, my nose touching his, my eyes looking into his, my naked breasts now pressed where they belonged, against my husbands chest. \n\nHe reached up and took my head in his hands and then he kissed me. He kissed me hard, crushing my lips against his, his tongue deep in my mouth. I moaned into that kiss, moaned with all my need and desire and excitement, moaned as my naked breasts pressed against my husbands chest. Moaned as Jim's hands flipped my skirt up to waist, gripped my hips and his erect cock pressed up against my now naked butt. Separated only by the thin cotton of his boxers, his cock pressed firmly up against the wetness of my sex. Pressed against me where only Kam's cock had ever pressed before.\n\nMy moaning into Kam's mouth intensified, my body juddered as Jim began to press himself against me in a steady rhythm I had only ever experienced before with Kam. I was so wet. So wet and excited from that contact, that rhythmic pressure. Excited, but also very very scared. One of Kam's hands slid away from my head and under me, brushing down my stomach, further down, down to my pussy where he cupped me.\n\n\"OOOOHHHHHHHH.\" My head jerked up, I cried out as his finger slipped into me where I was so wet. Jim chose that moment to release me, a release I barely noticed as Kam's finger tormented me.\n\n\"You want it, don't you Isabelle?\" my husband breathed. He pushed a second finger inside me, joining the first.\n\n\"NNNUUUUGGGHHHHHHHH.\" I jerked, my eyes wide, wanting what he was doing.\n\n\"NNNNNUUUUUGHHHHHH.\" Fan groaned from beside me.\n\nI looked. She was kneeling beside me, her head on her hands, her dress gone, naked, breasts quivering, body jerking. I looked around. Jim was kneeling behind her, hands holding her hips the way he'd held mine. Except that it was clear he wasn't simulating sex with Fan. He was in her, fucking her right next to me, fucking her in the same position that I was in. I must have gasped, she turned her face to look at me, her eyes wide, her head jerking as he moved in her. She tried to smile, but her smile was more of a moan.\n\n\"Uuuughhhhh ... Ughhhhhhh ... ughhhhhhhh.\" Her little breasts quivered with each groan.\n\n\"I want you Isabelle.\" Kam's breathe was hot in my ear, his finger caressing me, stroking the inside walls of my pussy. I loved that, loved the feel of his finger in me where I was wet and tight. I didn't want to make love here though. If Kam turned me over onto my back, they'd see me. See us. No. No I didn't want that. But the thought excited me too.\n\n\"Here? They can see us.\" My voice was a high-pitched gasp, timid, scared, scared and excited. \n\n\"Oooohhhhhh.\" His thumb played my clitoris, played me like a violin, so that my back arched. I wanted Kam. I wanted him in me, taking me.\n\n\"Uuuuughhhhhh.\" I heard Fan's gasping groan. Her gasp formed a duet with a grunt of satisfaction from Jim. A slight pause was followed by a steady series of little sobs from Fan. I knew what was happening without looking. I knew and the knowledge rippled through my body, tightening me on Kam's finger, bringing a silent gasp from me, my mouth forming an \"O\" as I looked down at my husband with glazed unfocused eyes.\n\nKam said nothing. He said nothing but he removed his finger from within me. His eyes on me, he moved me off him, onto my back on the floor where my eyes could see Jim kneeling right next to us, taking Fan, looking down at me as Kam jerked my dress downwards over my hips, down to my knees, then off me. I sobbed for breath, lying there unmoving, naked but for those little black-pearl panties that hid nothing.\n\nHis hand returned to my pussy, to where I was so wet, so swollen and open. His fingers teased me, teased me so that I moaned softly, my hips jerking as his fingertip teased my lips, teased my slit. Beside me, still kneeling, Fan sobbed steadily, Jim's grunts equally as steady, his eyes on me.\n\n\"Please,\" I whispered to my husband, \"please Kam ... Oh please.\" My hand found his cock, so rigid, so hard. I stroked him hesitantly, my heart fluttering. I knew I was going to let him. I was going to. I eased my legs a little further apart, feeling his hand cup me, gasping as his finger eased into me once again.\n\n\"Please what, Isabelle?\" Kam was teasing me now, teasing me with his words as his finger teased my pussy. He knew. He knew I'd surrendered, that I wanted him so much. That I would let him have me here, now, where Fan and Jim could see us.\n\n\"If you want,\" I whispered, my heart beating like a birds, feeling like it was somebody else talking, someone else in my body. \"Uhhhgghhhh.\" I gasped as he pushed a second finger into me, stretching me. Making my body react to him of its own accord. \n\nHe moved over me, his knee pushing my leg aside, his other knee forcing my other leg to part, exposing me, opening me. Over my husband's shoulder, my eyes met Jim's, watching him watching me. Slowly, he smiled. I bit my bottom lip, trying not to make any noise, failing abjectly as Kam slowly entered me. Those involuntary little gasps and soft wordless sounds of excitement escaped me even when I was trying to remain silent. My slippery tightness of my channel engulfed and clasped Kam's cock as he penetrated me, easing himself deeper and deeper within me as I jacked my legs back, opening and surrendering myself to him, my hands clutching at his back as he buried myself inside me. \n\nKam's face looked down at me, alive with a mixture of excitement and hope. It was a look I'd seen before. The first time I'd been naked with him, the first time I'd worn a bikini on the beach and being looked at \"that way\", in the bar when those guys had danced with me, the first time I'd gone out wearing that revealing dress. And now, now I was naked with Kam, acutely aware that Jim was looking at my body, blatantly eyeing me even as he fucked Fan. \n\nKam continued to move inside me slowly, sliding easily backwards and forwards within me. My mouth worked soundlessly, he knew I wanted to say something. He waited, still moving in me. At last, I took my courage in my hands and whispered, \"Do you want to fuck me in our bed beside them?\"\n\nHe smiled. \"I'd like that, would you mind Isabelle?\"\n\n\"If you want me too honey,\" I whispered timidly, feeling his sudden enthusiasm. I held him tight, my heels riding his hips as he moved in me. Over Kam's shoulder, I could see where Jim was looking now, his eyes directed at where Kam and I joined, where I was totally exposed as Kam eased his cock in and out of me. The knowledge drew a soft moan from me, a moan and a flush of embarrassed excitement.\n\n\"Oooohhhh.\" Kam withdrew from me, I missed feeling him inside me instantly. He moved back onto his knees, stood, rampantly erect before my eyes, extending his hands to take mine. I came to my feet, naked but for those little black pearl non-panties. Jim watched, enjoying my nakedness. I blushed, I burned but in my excitement, my need for Kam, my desire for Kam, I made no move to conceal myself. I stood there naked, holding Kam's hand, my body burning with embarrassment and with desire for my husband.\n\n\"I'm taking Isabelle to our bedroom to finish fucking her,\" Kam said, \"would you and Fan like to join us.\" He grinned. \"It's a lot more comfortable on our bed.\"\n\nHe didn't wait for an answer. He led me by the hand away from Jim and Fan, towards our bedroom. Towards our bed. I padded after him, naked, scared yet still eager, through our bedroom door and onto our bed. Onto my back on our bed, drawing Kam down with me, onto me. Into me. Opening myself, drawing my knees back, feeling him enter me, moaning happily as I felt him inside me again.\n\n\"Did you see get excited by them watching us?\" he asked, his cock buried inside me.\n\n\"Uuughhhh,\" I said, crossing my ankles behind his back and moving myself on him slowly. \"Sort of.\" I was non-committal, \"I wasn't paying too much attention to them.\" \n\nKam chuckled, his hand stroked my hair. \"Liar, I saw you looking at them.\" He smiled at me. \"I wanted them to see us,\" he breathed. \"That was so exciting.\" He looked down at me. \"You don't mind if they join us here Isabelle?\"\n\nI drew my knees back further, my feet riding his hips, moaning as he moved inside me slowly. \"If you want them too honey.\" Honestly, I'd rather Kam just fucked me, but if making love with Jim and Fan there too got him more excited, okay, I was learning to handle that. \"If you want them to see us honey, I'll do what you want.\" \n\nKam moved easily within me, riding me slowly, easing himself in and out of me. I wondered if Jim and Fan would join us. But I thought that they would. I'd seen Jim looking at me. He'd been enjoying watching me with Kam. He'd come and he'd bring Fan and he would watch me while Kam fucked me. I hoped that would excite Kam more. God knows seeing Jim and Fan had excited me. \n\nWatching Jim taking Fan right next to me, in the same room, close enough to reach out and touch, that had been even more exciting, adding a frisson of the forbidden to our love-making. Was that how Fan had felt, watching Kam and me? Was that how Jim had felt? How did Kam feel about that?\n\nI wanted to know.\n\n\"Kam?\" I gasped, \"Kam honey?\" \n\n\"Yes?\" He buried his cock in me again. Hard. Beneath him, my body was quivering, straining up against him, my body was begging him to move, to take me hard, to make love to me.\n\n\"Did you like Jim watching when ... you know ... you had your finger in my pussy ...he was looking at my pussy...\"\n\nKam's cock moved in me, slowly, very controlled. Ooohhhhh, ohhhh god. He smiled. \"Oh yeah, Isabelle, that was so exciting seeing him, seeing your pussy right there for him to look at, that was so fucking sexy and you, your pussy Isabelle, it was so wet. Like now...\" He moved in me, sliding easily, sliding wetly so that I gasped with the sheer pleasure of his movement in me, sliding into me, pulling back slowly, easing into me again, his cock sliding into me until his body pressed up firmly against mine where we were physically joined, making me moan again. \n\n\"I could feel how wet you were when he was pretending to fuck you.\" My husband looked down into my eyes. He smiled. \"I know you were excited Isabelle.\"\n\n\"That was all you honey,\" I breathed. But I knew it wasn't. Jim pressing up against me had been exciting. Scary. But exciting.\n\nKam smiled. \"Liar,\" he said, fondly. \"I know you're doing this for me Isabelle, I know you love me.\" He kissed me, very gently. \"I know it's got you excited.\" He smiled again. \"Just like its got me really excited.\" He moved slowly inside me. \"You're naughty Isabelle, really, you know that don't you,\" he breathed in my ear as he stroked slowly inside me. I moaned softly again. \n\n\"I like being naughty for you honey,\" I breathed. \"Not for anyone else. Just you.\"\n\n\"So if Jim and Fan come in here, you'll be naughty for me with them watching you? Us?\" He was breathing hard, I could feel his repressed eagerness as he waited for me to reply. \n\n\"Kam, honey,\" I moaned at last. \"I love you.\" I knew once he started fucking me hard I'd do whatever he wanted. I always did. Just, never in front of anyone else. But it wasn't the answer my husband wanted from me, I knew. I knew and just like that, I gave in. \"I'll be naughty for you if you want me too.\"\n\n\"Good,\" he gasped. He smiled. \"Fuck, I love fucking you Isabelle, I love you.\" I moaned as he thrust hard up inside me. \"Because they'll be in here soon looking at you.\" \n\n\"Just how much more do you want Jim to see?\" I was still scared.\n\n\" I want to fuck you hard while he watches you,\" he breathed. \"Like this.\" He pistoned his cock rapidly in and out of me half a dozen times. \n\n\"Ohhhhhhh,\" I gasped, my squeezing his cock as he pump-fucked me. That felt so good. And I knew I was going to do what he demanded of me. \"Everything ... You can show him everything ... I want him to see everything you do to me. I want you to use me in front of him.\" \n\nAll of a sudden I did. If my husband fucked me like that, I wanted it. \n\n\"Like this?\" Kam teased me, \"I want him to hear you begging to be fucked hard?\"\n\n\"Yes ... Oh yes,\" I moaned, \"Do anything you want to me ... fuck me hard ... use me ... Tell me you want my cunt to service your cock ... anything you want.\" I looked up at him as he began slamming his cock into me. \"If that's what you want, Kam,\" I gasped, \"if you want him to hear me begging you to fuck me hard, I will ... I will.\" I knew I would. I loved it when Kam fucked me hard. Our bed was nice and solid, built to take hard use. Not that Kan had ever used me hard enough, but maybe tonight. Maybe with Jim watching he'd get carried away?\n\nI hoped so.\n\n<p align=\"center\"> * * * * * * * * </p>\n\nSo first, a BIG thanks to everyone whose taken the time to comment online or drop me those wonderfully supportive comments thru the Feedback form about the first couple of chapters of \"Happy Birthday to Me\". You've ALL (except for a few entertaining trolls who, on the other hand, are always good for a giggle) been so supportive and just plain nice about my stories. So thanks again for reading my little tales and providing me with the motivation to keep writing and learning how to do it better (writing I mean...). \n\nI'd also like to say thanks to Zamm, whose \"Dinner Party at Jing's\" more or less inspired this story even tho \"Happy Birthday to Me\" is nothing like. I asked Zamm for his permission to rewrite from a female POV using his story as a starting point, which he graciously granted. I actually started by reworking Zamm's \"Elaine\" into Isabelle, and then she kind of ran away with me, the whole story morphed rather dramatically and took on a life of its own, as I find my stories often do and it's nothing at all like Zamm's, altho it was meant to be... So thanks Zamm for inspiring me to get started on this one.\n\nAnd a last note: This chapter is long. I'm wordy at the best of times. Far too wordy! This chapter exceeded even my own fears as to wordiness - and I did edit and cut heavily and now it's split in half, with Chapter Four coming as the second half. So, sorry, it is lengthy. But I do hope you enjoy reading it ... and before you ask - it may be a few weeks - I'm working to complete this as well as Chapters Four and Five of \"Chinese Takeout\", and I have a couple of weeks' vacation coming up which won't be spent writing. So anything new will be out towards the end of March. My apologies to anyone who suffers withdrawal symptoms in the meantime. But rest assured, Isabelle WILL be back! So will Jay-Lin. And Hayley. And Strawberry. Maybe even Penny and Eric...and definitely I have a couple of new stories in the works too, \"The Temptation of Sammi Woo\" among them.\n\nAnd yes, there will be a Chapter Five... and a Six and more than likely a Seven ... Chloe"
    ],
    "authorname": "ChloeTzang",
    "tags": [
        "asian",
        "chinese",
        "young wife",
        "little black dress",
        "jenga",
        "sex games",
        "chloe tzang",
        "chinese wife"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/happy-birthday-to-me-ch-03"
}
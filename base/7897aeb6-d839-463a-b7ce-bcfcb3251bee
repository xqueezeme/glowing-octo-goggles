{
    "title": "Unforeseen Attraction Pt. 02",
    "pages": [
        "*Thank you for waiting for part two! Unfortunately, real life took my attention for a little while, and I apologize that it took so long.\n\nIf you haven't read part one, please do! Not a requirement, but you will get to know the characters more. I hope you enjoy and as always, please let me know what you think!\n\nThank you to Thatsbogus and Terry for the help given on this one!\n\n++++++++++\n\n \n\nAllison\n\n \n\n\"You did what?!\" Bree yells at me. It's starting to feel like her yelling at me is becoming a permanent fixture at our weekly coffee gatherings.\n\n\"I held her hand,\" I mumble around my coffee cup, practically using it as a shield at this point. Its Monday and I haven't been able to get Olivia off of my mind since the movie yesterday. I filled Bree in on everything concerning the blonde nurse that has been taking over my thoughts. I needed to let everything out and Bree has always been my best listening ear, so I couldn't not tell her.\n\nShe sighs and rubs her eyes, not a good sign. \"Last week it was the crazy cat lady and this week you're telling me that you're having an epic attraction to your sister's new coworker. Straight co-worker and making moves on her in a darkened movie theatre next to poor, unsuspecting Liz. Alli, what is going on?\" She asks with both humor and concern in her tone.\n\n\"God, I don't know. I called it off with Sophia by the way, you can stop yelling at me about that one. She was fun. Beautiful, distracting fun. But I knew what I was doing. I knew that that's what it was ever going to be and even against your judgment, I wanted that for the time being. And then I saw Olivia at dinner,\" I relay, warmth spreading through me as I think about everything that has happened. \"Bree, it was instant. She's beautiful and I don't know...I feel this pull to her and it's like nothing I have ever felt before. Even if I wanted to, I couldn't help myself at the movies. I just wanted to touch her, so I did.\"\n\n\"So, what now? While I would like to be excited for you, it worries me. One, she's straight. Two, she just went through a bad breakup. And three, she is straight,\" She says while counting her points on her fingers.\n\n\"I know, I know,\" I say nodding my head, \"And, nothing now. I don't understand what's happening. I'm not ready for a relationship. The time put into it, the first dates, I don't want to go through the motions again.\" Saying things out loud, I start to realize that maybe my divorce did more damage to me than I realized. Where did my confidence go?\n\n\"That's bullshit and you know it, Allison,\" Bree snaps at me, \"You're afraid of another possible heartbreak. I understand your need to let loose for a while but don't let something real pass you by just because of that fear. That's a shit excuse. The straight girl worries me and might or might not be your second chance but at least be honest with yourself.\"\n\nHer little rant surprises me. She's right and I hate that she puts the fears that I rarely let myself think about into words, out in the open.\n\n\"Maybe, but it doesn't change the fact that I don't want anything serious. Olivia is Liz's co-worker, and that's it. Case closed.\"\n\n\"If you say so,\" she says while shaking her head, \"I gotta get back to the office. Call me later?\"\n\n\"Of course,\" I tell her as she stands and grabs her purse.\n\n\"I love you, Alli. Don't be mad at me for caring about you.\"\n\n\"I'm not. I'll talk to you later.\" I watch her walk out of the coffee shop. I need a couple of minutes to think before I head back to my own office, and I think Bree could sense that.\n\nI continue to sip on my coffee, wondering when I started getting so afraid and guarded. Obviously, it was after my divorce. The conversation with Bree is making me realize that I put walls up. I should have realized that with my relationship with Sophia, and the few other dating attempts this past year. I didn't even try to make them work. There was always a date or two, and in Sophia's case: a friend with benefits situation. But I never let anything go further because I didn't want it to go further.\n\nOlivia is interrupting my plans of nothing serious. I can't believe that I held her hand in the movie theatre. Bold, even for me. I didn't plan on doing it, but when my arm brushed hers on the armrest, it was like something else took over. I needed to touch her, and all of my calm reasoning went out the window. I definitely didn't expect her reaction though, I could see what I was feeling mirrored in her warm blue eyes. So, I know my attraction is a mutual feeling. But, when she turned her hand over, inviting me in, I came undone. Why it felt so familiar and comfortable is the big question though.\n\nWhat does it even matter? I think to myself. I stand up and throw my cup away, walking out into the warm, bright Spring day. Taking a deep breath of the fresh air, I start my walk back. Halfway into the walk back to my office, I'm pulled from my thoughts by the sound of my cell phone ringing. Rifling through my purse, I smile when I finally find my cell phone and see Liz's name on the screen.\n\n\"Hey Liz,\" I greet her happily.\n\n\"Hey!\" I hear the happy voice that is all Liz, \"Are you free tomorrow night for dinner? Austin has a bunch of house showings later this week, I have a couple of night shifts that I picked up and tomorrow might be the only night that we can all get together if you're able to.\"\n\n\"Hold on,\" I tell her and bring the phone off of my ear to check the calendar. I see that I have one client meeting later in the day but it shouldn't go too late. \"One meeting later tomorrow but I should be able to swing dinner. I might just be a couple of minutes late.\"\n\n\"Great! I'll let mom know. She promised baked chicken. You got yours last week, it's my favorite this week.\"\n\nI laugh, \"So that's why you're rushing to plan dinner this time. And I'm sure Mom will put steak and potatoes on the menu for Austin. Can't have a fight among us now, can we?\"\n\n\"She is a smart woman,\" Liz laughs, \"Alright, I gotta go. I'll see you tomorrow.\"\n\nBefore I can even think and stop myself, the question is falling quickly out of my mouth, \"Hey! Before you hang up, are you inviting Olivia?\"\n\nThere are a few seconds of silence that makes me feel uncomfortable.\n\n\"I was thinking about it, why?\" she asks.\n\n\"No reason, just wondering,\" Shit.\n\n\"Mhmm. Then yes, ill invite Olivia. Unless you don't want me to.\" She's digging, and I have a feeling that Liz just became aware of what I didn't really want her to be aware of. It's not that I want to hide anything from her, I just have no idea what's going on myself. Liz hasn't been blind to my \"more free lifestyle\" when it comes to women since my divorce, but I don't want her to think that I'm pursuing her friend with the intention of just hooking up.\n\n\"No, you should. She's still new to town and everything.\" I know me playing this down will not work on Liz, but I would rather pretend that it's working.\n\n\"Ok, sounds good. I'll see you tomorrow!\"\n\n\"See you,\" I say back right before she hangs up.\n\nWay to play it cool, Alli. I think to myself. What the hell is wrong with me when it comes to this woman. I normally am in control and the last week has made me feel like all of that is out the window. And, now I feel like Liz is onto my crush on her new friend. Not a bad thing, but just makes me feel like I have even less control.\n\nWalking into my fourth-floor office, I toss my purse onto my desk and plop myself down in the comfortable desk chair. I absently stare at the picture of the mountains and river hanging on the wall across from me.\n\nOlivia. Even though I tell myself that nothing will happen and that there is nothing there, I can't stop thinking about the pull that she seems to have on me. Okay let's think about this logically, I sit up straighter. I could talk to her about it, but that would involve a lot of awkward talking and even I can't figure out what is going on here, so how would that discussion even go? Or I can ignore it, which is proving harder than it sounds. I can't stop thinking about her, her distractingly beautiful eyes, and her warm, soft hands. The bottom line though is that I don't want any of it. What I told Bree is the truth, I don't want to go through the motions of it again. My mind conjures up her face again, her full lips smiling at dinner, I can imagine what it would feel like to press mine against them. Dammit!\n\n \n\nI jump in my seat when a knock at my office door sounds. Peter pokes his head in, \"Do you got a second to go over these files with me?\"\n\n\"Yeah, I do,\" I tell him, almost too eagerly.\n\nThank God, I need this distraction.\n\n++++++++++\n\n \n\nOlivia\n\nFour more hours, I think to myself looking at the clock above the nurse's station. Today has been excruciatingly long, and it's only noon. I've been here for six hours and have already seen more patients than normal for a Monday morning. I scroll through the chart on the computer checking on vitals of the four patients currently in rooms.\n\nI'm wrapping up a chart note when Liz walks up to the desk setting a cup of coffee down on it, recognizing it as one from the coffee bar in the cafeteria.\n\n\"Looks like you need this. Today's been a day already.\" She looks tired but is in good spirits, as she always is.\n\n\"Thanks, I owe you,\" I tell her grabbing the cup and embracing the rich smell of it. Liz sits down and starts looking over the chart that I have pulled up. A young pregnant woman admitted for stomach pain. After an ultrasound, we found the baby to be fine but the woman's blood pressure is through the roof so she's staying a bit for observation until we find out more.\n\n\"It's down a bit but still elevated. Maybe stress?\" I can tell that she's talking more to herself than me.\n\n\"Maybe,\" I say back.\n\n\"Hey, I almost forgot. We're having dinner at my parents tomorrow. Wanna come?\" She says glancing away from the screen to me.\n\n\"Oh, I couldn't intrude on your family dinner again. I loved it last week but you don't have to do that.\"\n\nMy thoughts immediately go to Liz's sister again. I've been thinking of little else since the dinner last week but my thoughts have definitely been all about Allison since the movie theatre yesterday. The way that I felt holding her hand yesterday was so comfortable, it felt so right. I mentally shake my head and put my focus back into the present. I need to focus on work. Being an ER nurse, I have mastered the art of separating work life and personal life. You have to, mistakes happen when you're distracted in this kind of environment.\n\n\"Oh please, it's not a big deal. You're my friend Olivia. Plus, tomorrow is baked chicken. My favorite meal and you wouldn't want to miss that,\" She points out. I marvel at Liz's kindness; there's not many people like her.\n\nI laugh, and against my better judgment, I accept the invitation. I know that Allison will be there. We didn't talk about anything after the movie and I don't know how awkward this is going to be. But that pull is still there and I want to see her again. If possible, I would like to find out what is going on.\n\n\"You're right, I can't miss that. I'm off tomorrow and your mom's cooking will beat anything I scrounge up.\"\n\n\"Great! Dinner is at six, I'll see you there,\" She tells me and walks off towards room four to check on one of the patients.\n\nOh, what did I get myself into? I wonder to myself.\n\nFive hours later, I'm finally walking through the door of my apartment, take out Mexican food in hand. After a quick shower and a change into comfy clothes, I'm curled up on the couch. Dinner on my lap and mindlessly flipping through TV channels. I land on an HGTV show and watch a young couple search for a house.\n\nIt's not long before my mind starts to drift. And just like that, Allison takes up her spot in my head. My nerves are shot thinking about seeing her tomorrow. Do I bring up the movie theatre? That would be more than awkward at a dinner at her parents' house. Oh no, and Liz, what would I even say to Liz about my attraction to her sister? Best to not even go there.\n\nAfter a short debate in my head, I grab my cell phone from the coffee table and dial the number of the one person that can talk me down from this.\n\n\"So, you ARE alive!\" The familiar voice of my older sister, Christie, makes me physically relax into the couch cushions.\n\n\"I know, I know. I've been a terrible sister and you should never claim me again,\" I smile into the easy banter that we fall into. I haven't been fair to her since my move. When I made the decision to move, I pretty much hightailed it out of town and haven't kept in touch as well as I should be. My sister was the only true regret I had about leaving my hometown.\n\nWe have always been close. Our childhood wasn't exactly easy. My father left when I was eight years old and Christie was ten. Long story short: my parents were not meant to be together. I think he tried to stay in the house as long as he could, the fighting between my parents just became too much. There wasn't any communication with us until we were in our teens and he attempted connecting with us again. We're not on entirely bad terms but by that time it was hard to develop a deep connection with someone who left and started a new family while we grew up with our mom. After dad left, mom went on a wild streak for years. Staying out most nights and partying, leaving me and Christie most nights by ourselves. Christie tried to shelter me from a lot, which forced her to grow up fast. She practically raised me. I don't doubt my mom's love for us now, but I've never been as close to her.\n\n\"How is it up there? God, I miss you,\" she steers us back onto serious ground.\n\n\"It's good, the hospital is great. It's more updated than the one back home, which is nice but it's busier. My shifts go fast because I'm constantly moving. I've made a friend from work, I'm pretty sure she's the nicest person on the planet. She showed me around town and invites me to her family dinners,\" Filling her in and laughing, thinking about Liz's persistence.\n\n\"Good. It makes me feel better knowing you're not holed up by yourself in your apartment.\"\n\n\"Most of the time I am, but yes, she's gotten me out a bit,\" I assure her, \"So talking about Liz and her family dinners, I wanted to talk to you about something.\"\n\n\"Mhmm, what's going on baby sister?\"\n\nI decide to just let it out, get past the hard part early, \"I'm attracted to her sister Chris. Like wildly attracted. I met her last week at dinner and there was such an instant attraction. Like the stuff you only read about in books. God, she's beautiful and then we held hands in the movie theatre and...\"\n\nI stop when I hear her laughing and I realize how fast everything was coming out of my mouth, probably giving her whiplash.\n\n\"I'm sorry, I'm not laughing at you. That was just a lot and I wasn't expecting the hand-holding part,\" She says, still laughing.\n\nI can't help but laugh myself, \"I know! Tell me what to do Chris.\"\n\n\"Well, things have taken a turn for you. Ok, tell me more,\" She says, more serious again.\n\n\"It's just different. I can't get her out of my head. She's an attorney, and did I tell you that she's beautiful? I went out with Liz and we ended up going to the theatre with Allison that afternoon. And it just happened. We were sitting there in the movie and there was such a strong pull and then she held my hand. So, I at least know she's feeling something also. I'm just so confused by it. I've always considered myself straight. I've never felt like this about anybody, but especially not a woman.\"\n\nThere's a beat of silence, \"So you're hesitant because she's a woman?\"\n\n\"Slightly. I'm not against it, never have been but it's confusing the hell out of me. And it's terrifying. This is new territory for me.\"\n\n\"Hmmm, understandable. It's scary to face something that you don't know. Personally, I've always believed sexuality could be fluid. You can't really help who you like type of thing. Ya know? You don't have to jump into anything though right now. See how it flows and plays out.\"\n\nI take a deep breath, feeling a little lighter. \"So, just do nothing?\" I double-check with her.\n\n\"Yup. Let it ride, talk to her about it if you want. But, don't overthink it. I for one am excited to see how this plays out, not much ruffles you and it sounds like this girl is,\" She throws in with another laugh.\n\nWe talk for a few more minutes about everyday life before hanging up. I stretch out on the couch feeling more content and thinking about seeing Allison at dinner.\n\nLet it ride, I tell myself, repeating my sister's words.\n\n++++++++++\n\nAllison\n\nWalking into my childhood home, the smell of moms cooking envelopes me and I inhale deeply. It never gets old, walking into this house calms my soul. I take my jacket off and hang it on one of the hooks next to the door, listening to the voices floating down the hallway from the kitchen. Kicking off my heels, I make my way down the hallway. Entering the kitchen, I stop in the entryway and look around. Mom and dad are sitting at the island together on stools and Liz and Austin are standing around the counter across from them. Olivia is here, standing next to Liz, as I knew she would be. All of the preparation I gave myself on my drive over goes out the window. I'm once again stuck staring at her. She has a beautiful smile, one that makes me want to smile just because she is. She's laughing at something that my dad is saying.\n\nI feel eyes on me and drift my gaze over to Liz, sure enough, she's staring at me with a small smirk on her face and an eyebrow raised. Shit. She's onto me, and I'm already dreading the phone call later than I'm sure I'll be getting from her.\n\nI move into the kitchen and wrap my arms around mom, getting a hug back.\n\n\"We were waiting for you. Long day?\" She asks.\n\n\"Always a long day,\" I smile at her, \"Thanks for waiting.\"\n\n\"Let's eat!\" Dad says while pulling me into a hug. Man of few words, but has the biggest heart.\n\nEveryone makes their way into the dining room and takes seats. I shuffle in around the six-seat rectangular table, making my way to one of the chairs on the side. I hear the chair next to mine being pulled out and look to my left, and as the universe has it, Olivia sits down beside me. She glances at me with a nervous smile, and all I want to know at this moment is what she is thinking.\n\nI remember the company around me and instead grab the bowl of salad in front of me at the same time that Olivia does. Our hands brush and I feel a tingle as goosebumps spread across my arm. So much for playing it cool.\n\nDinner passes with stolen glances between us and a want that I've never felt before. Physically and mentally. I keep up with the conversations going around the table, tales of the emergency room, houses being sold, and mom's garden that is starting to bloom with the warm spring weather. All while thinking of the things that I could do with the impossibly beautiful woman sitting next to me. Things that I should not be thinking about while having dinner with my parents and siblings.\n\nEventually, the meal is over, dishes are loaded in the dishwasher and I start to feel the exhaustion from my work-day.\n\n\"Thank you for dinner Mom. My bed is calling my name now,\" I say leaning in to hug her.\n\nAustin and Liz take my lead and start saying their own goodbyes. More hugs are passed around and another invite to Olivia is given for dinner anytime.\n\nAs the goodbyes continue, I make my way down the hallway to grab my jacket and hear footsteps trailing me. I already know who it is as I turn around.",
        "\"Hey, I hope you don't mind me crashing family dinner night again,\" She has that nervous smile again, I don't like it as much as her real one. The dazzling one that makes the corners of her crinkle.\n\n\"Of course not,\" I reply shrugging into my jacket.\n\n\"I'm just going to say it now. My head has been pretty much everywhere since yesterday and I was hoping we could maybe talk?\" She's whispering and everything comes out in a rush. She's nervous and I can't help the small smile from spreading because there's no other word to describe her right now besides...cute.\n\n\"We should,\" I see Austin and Liz heading down the hallway from the kitchen and feel hurried now, \"Here give me your number. Ill text you my address. If you're free tonight, we can talk. If that's ok with you.\"\n\n\"Oh. Yeah, we can do that.\" She says sounding surprised.\n\nI hand her my phone and she types her number in and hands it back. I look up and see that Liz is walking towards us with her eyebrow raised again and an unreadable expression.\n\nI turn around and walk out of the front door into the cool night air. What the hell are you thinking? I wonder to myself. Well, we do need to have this talk. Bring on the night.\n\n++++++++++\n\n \n\nOlivia\n\n \n\nMy heart is beating a million times a minute as I sit in my car staring at the homely rambler-style house that I'm currently parked in front of. True to her word, I received the text from Allison saying nothing but her address a minute after she rushed out of her parents' house.\n\nThis talk needs to happen, I remind myself. Taking a deep breath, I make my way up the walkway and knock on the door. My breath hitches when the door opens. God, she's beautiful, I think to myself. Allison is still wearing the same outfit from earlier; slim black pants and the grey blazer jacket look tailored specifically for her. It probably is and a shot of desire shoots straight through my core.\n\n\"Hey, thanks for stopping by.\" She says with a small smile and steps aside to let me in.\n\nI enter her house and look around, entering into an open concept kitchen and living room. It's comfortable and beautiful. It's also very Allison, what little I know about her. It's tasteful and modern. I turn around as she asks for my jacket and hangs it up in a closet next to the front door.\n\n\"Do you like wine? We can talk and drink.\"\n\n\"I do. That sounds nice,\" I follow her across the living room into the kitchen. She moves around the island as I sit down at one of the two island stools and pours from a bottle on the counter. Handing me a glass she walks around and takes the seat next to me.\n\nI take a sip, more of a gulp, figuring some liquid courage couldn't help. Glancing up I see Allison staring at me with an amused expression on her face.\n\n\"I'm not good at this, and not very sure where to begin,\" I blurt out.\n\nAllison chuckles low, and I'm turned on, again.\n\n\"Neither am I. I'll start though. I want to apologize for what happened at the movie theatre. I had no right to holding your hand like that. Jesus, you don't even know me.\"\n\n\"It was pretty unexpected but I didn't exactly pull away at all,\" I remind her. I can't tell exactly what she is thinking, if she regrets it or what's going on, \"Can I ask why? Because I'm just going to be honest here. I'm confused and have never felt like this before.\"\n\nThat gets her interest, as she looks up sharply at me from her wine glass.\n\n\"Felt like what before?\" Allison asks with a whisper.\n\nI might regret this but it's now or never and I need to know, \"This attraction. I'm attracted to you and I've never been attracted to someone this strongly before. This fast and immensely. I probably sound like an idiot but I can't stop thinking about you. It doesn't make sense and I completely understand if I sound like a madwoman to you right now.\" Yeah, I regret saying it but it all comes rushing out before I could stop myself.\n\nShe just stares at me, but her eyes seem to get darker. After what feels like a lifetime, she sets her wine glass down and stands up. Now I know I've done it. I brace for her to tell me I'm crazy and show me to the door.\n\nShe takes the one step to me and before I know it, Allison's hand is on the back of my head and her lips are on mine. Soft, sure lips. It takes me a couple of seconds to register what is happening before my lips are moving back against hers, hands moving automatically to her hips.\n\nI pull her tighter to me as her arms move to around my neck, one hand moving to her lower back and she complies. She presses herself more firmly into my center as my legs spread more on the stool, pulling a breathy moan out of me. I feel her tongue slide against my bottom lip, asking permission. Parting my lips, my tongue meets hers in a dance.\n\nThe kiss continues and I can't believe it. Her taste, her smell, her touch. This. This is how kissing should have felt my entire life. Nothing can compare to kissing Allison.\n\nShe slowly pulls her lips away, right after two more sweet, shorter kisses. Foreheads pressed together; I can't stop staring into her eyes. So dark, now I know that means she's aroused.\n\n\"You don't sound like an idiot or a madwoman. I feel it too,\" She whispers, heads still close.\n\nExcitement rushes through me. I'm not as crazy as I thought.\n\n\"What do we do now?\" I ask her.\n\nShe stands up straight and I immediately miss her closeness. Her head moves up as she glances to the ceiling and back again.\n\n\"I'm asking myself the same thing,\" she tells me honestly.\n\n \n"
    ],
    "authorname": "AJCunnings",
    "tags": [
        "love",
        "straight girl",
        "attraction",
        "kissing"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/unforeseen-attraction-pt-02"
}
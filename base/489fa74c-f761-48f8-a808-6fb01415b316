{
    "title": "The Sultanah Ch. 11",
    "pages": [
        "Dear Reader, thank you so much for reading this story. It has taken nearly a year of my writing life to get the whole thing finished. This is Chapter 11 of 14 chapters and the total is over 250,000 words. It is my Dirk Diggler/Jack Horner act of hubris: my attempt to write an erotic adventure story that pulls you in with a story you want to read, even when there isn't any sex going on (though there is a lot of sex. Crazy, weird, fun sex). It is the most ambitious piece of erotic fiction I have ever attempted. So I hope you enjoy it.\n\nWith that said, this book is not for everyone. It will be too long for many people (no shame in that, it is a big time investment). Some of the sex scenes are intense and include themes like hermaphroditism, non-consensual activity, incest, etc. For some people, that will likely be the appeal. In fact, while this story is definitely not for everyone, I think for a select group of people this story will essentially have everything you could ever ask for. So if that is you, congratulations, you found that thing you have been searching for. You can skip ahead to the sex and I won't be offended, but I think this story is more than the sum of its parts. If you read this whole story, you will not be disappointed. \n\nIn Chapter 1, our main character, Princess Varis, finds that her father has died and that, by virtue of the fact that she is a hermaphrodite and can father a child, she is now the Sultanah. In Chapter 2, Varis unearthed a conspiracy to destroy her Empire led by Rahip, the Cardinal of the \"New Religion\" and later she received her coronation. In Chapter 3, Varis humiliated the New Religion and raised the morale of her besieged people. In Chapter 4, Varis lifted the siege through a daring midnight raid. In Chapter 5, Varis survived an assassination attempt and visited her harem. In Chapter 6, Varis faced a challenge to her authority and seduced a noblewoman to maintain it. In Chapter 7, Varis defeats the raiders and comforts a peasant girl. In Chapter 8, Varis is briefly engaged and kills her fianc\u00e9 for betraying her. In Chapter 9, Varis slept with a member of the harem, her half-sister, while her aunt watched. In Chapter 10, Varis wed her sister and consummated the marriage.\n\nSome recurring characters you might want by name are Varis (the Sultanah and narrator), Cin (the head priestess of Gunes), Arkadas (Varis' friend and servant), Kardes (Varis' older sister), Nislani (Varis' younger sister), Rahip (a Cardinal of the 'new religion'), Duke Hain (an important lord opposing Varis), Lord Sadik (a minor lord who has spoken in support of Varis); King Sican (the leader of Dusman, a rival kingdom), Prince Lider (Sican's son); King K\u00f6yl\u00fc (the leader of Temsilci, a rival kingdom); Agiz and Got (Subordinate Sun Priestesses); Saygili (Varis' guard); Soyguncu (a pickpocket and spy for Varis); Tutuklu (the head concubine of the harem); Kukla (a noblewoman). Further, Gunes is the name of the Sun God, Tanri is the name of the 'new god.' The city where the story is set is \u015eehir in the country of \u00dclke and the Empire of B\u00fct\u00fcn D\u00fcnya. If you need more...reread the earlier chapters.\n\nPlease, please, please, please, please tell me what you think after you read this. I put an embarrassing amount of work into this and I want to know what you think. Especially if it is good things.\n\n*****\n\nPart VI: Unorthodox Thinking\n\nChapter 11: New Additions\n\n\"Frankly Nislani...Wife...I do not care. I do not have time for this...\" I said, trying to make my voice sound less annoyed than it was.\n\n\"You don't care? You don't care?\" she asked, \"Well I guess if you don't care then it isn't important.\"\n\n\"It's not that it isn't important it is just right now...\"\n\n\"I don't want to hear it,\" my sister yelled at me, \"Do you think this is what I want to do? Have a banquet with,\" she looked down at the ambassadorial notice that was placed in her hand, \"Prince Aptallar Alt\u0131n from Ada to help you cement some sort of trade agreement? I don't care Varis. But this is my job as the Consort. To host parties and make you look good...\"\n\n\"And I know you are good at it and you like it and...\"\n\n\"I don't like it!\" Nislani lied, \"But I do it for you because you said we need to increase our grain supplies in the event of another siege. So I got you think meeting with...\"\n\n\"I know, someone with grain. And I appreciate that but...\"\n\n\"But nothing, you have to do this,\" Nislani screamed.\n\n\"I can't!\" I yelled back. Suddenly the door to our chambers (I sighed when I thought about the fact that they used to be mine. I was essentially living in Arkadas quarters at that point) burst open and Nislani and I both turned to look and see who was bold enough to simply barge in on one of our arguments.\n\n\"I have been knocking for five minutes,\" Cin said, entering the room dramatically. I raised my hands as a sign of impotence.\n\n\"Varis is saying she won't go to the banquet tonight,\" Nislani whined.\n\n\"I said I can't...\" I responded.\n\n\"From my point of view that is no different.\"\n\n\"Well your point of view is not the be all end all of everything!\"\n\n\"Stop!\" Cin shouted, \"I am not here to counsel you on your marriage. I have come to take Sultanah Varis away,\" She moved closer towards me and I felt a rush of relief. My savior.\n\n\"But we only have five hours before the banquet and...\"\n\n\"And I will have her back in plenty of time to go to the banquet, which she will definitely attend,\" Cin responded. Nislani opened her mouth to complain, realized she won, and smiled.\n\n\"Good,\" she said simply, then she turned back to her closet to pick out the clothing she would wear to the banquet. She no longer had a reason to consider me.\n\n\"Cin, I am not going to that damned banquet...I have other things to do,\" I said.\n\n\"Like what?\"\n\n\"There is an Executive Assembly meeting tonight and I want to be present,\" I explained. I spoke as if it were self-evident that I would need to be there.\n\n\"You've never gone to those before,\" Cin pointed out, correctly. I raised my hand to explain further, but Cin stopped me, \"I need to take you somewhere. We can discuss it on the way,\" she said. Without further word, she turned and walked out of the room. I looked at Nislani, throwing dresses on the floor from her closet, sighed, and followed Cin out. I closed the door behind me.\n\n\"I am not going to that damned banquet tonight. It is a waste of time,\" I said immediately. Cin stopped walking and turned and looked at me.\n\n\"You are going,\" Cin said, \"It is a good idea.\" \n\n\"I wrote to King T\u00fcccar and suggested a military alliance. He sent his youngest, stupidest son to negotiate a limited trade deal,\" I responded.\n\n\"If he is stupid, you should be able to really put one over on him,\" Cin suggested wryly. I sighed and dropped my hands to my side.\n\n\"I don't need trade deals right now,\" I replied.\n\n\"You do need trade deals. You need all the help you can get,\" she responded.\n\n\"I need more than that now. We are completely isolated militarily.\"\n\n\"This can be the first step towards a military alliance in the future, rulers need to learn that they can trust you,\" she said and I knew she was right. Nonetheless, it did me no good.\n\n\"There is no time for that if everything else were going right then this would be great. But the campaign season will be starting soon and...\" I started.\n\n\"How is your marriage?\" Cin interrupted. For a moment I didn't even really register what she was asking. It was totally irrelevant and I shook my head.\n\n\"I didn't meant that, I mean if my political situation were going right...\"\n\n\"I know what you meant, I asked about your marriage,\" Cin explained. She crossed her arms in front of her chest and leaned in towards me. She raised her eyebrows.\n\n\"You saw it,\" I said, pointing to the room.\n\n\"I saw an argument, is that the sum total of your marriage right now?\" she asked. As soon as the words were out of her mouth I snorted and threw my hands up.\n\n\"Essentially,\" I said and looked at my priestess evenly. Cin continued to stare at me, her eyebrows still up, waiting for more of an explanation. I sighed and then spoke, \"It is different than it used to be. I don't know...I don't hate her anymore if that is what you are wondering. What we've been through these last few months...We have real things to hate now. But I don't know...We are not particularly well-suited anyway. We disagree on everything and can't seem to figure out how we are supposed to fit together,\"\n\n\"Some would say that means you complement one another. You should stop fighting against your differences and accept them as strengths,\" Cin explained. Easy for a priestess who would never marry to suggest. I let that comment roll away without touching it.\n\n\"More importantly,\" I said, leaning in slightly, \"it is still incredibly awkward that she is my sister...\" This was, of course, an understatement. After the nerves and the sense of duty surrounding the marriage had melted away, my sister and I were left only with a confusing mass of emotions. Neither one of us really wanted to approach it, afraid it could explode. I tried not to think about it and spent as little time with Nislani as I could justify.\n\n\"Your wife. You should cease to think about her as your sister. She will be your wife for a much longer time,\" Cin responded. \n\n\"If we don't kill each other,\" I responded.\n\n\"How goes the production of an heir? That was the primary purpose of this wedding,\" Cin asked and I winced. I knew she was going to ask about that eventually, I had been trying my hardest for the past few weeks to avoid the topic altogether.\n\n\"Well it is too early to tell...\" I stalled.\n\n\"Have you been trying?\" She asked intently. I paused for a long time, trying to think up a way of lying without lying. Cin's eyes bored holes into my face and she could tell the answer before I finally abandoned my efforts and simply told the truth.\n\n\"Well, you saw us consummate the marriage,\" I said and then my face grew red, \"And that night we...well we went again once after everyone left. Some residual energy I suppose. But since then...it doesn't feel natural.\"\n\n\"It never will if you create a barrier around it. Sex is an important part of marriage, Sultanah. Gunes urges us to be fruitful in our marriages not just because it produces children, but because it produces joy,\" Cin said slowly. I shrugged my shoulders noncommittally. In honesty, the memory of my wedding night was now painfully embarrassing to me and the thought of doing it again...was less than appealing. I had done my duty, need I do it ovr and over again?\n\n\"Joy is something I no longer seek. I do not believe it is my fate,\" I said honestly.\n\n\"Gunes fates no one with misery,\" Cin said certainly.\n\n\"You must admit that she has not exactly...endowed me with success in my personal life,\" I said, looking down between my legs. Cin snorted and shook her head.\n\n\"Gunes has gifted you a beautiful young wife to share your sorrows, yet you choose to be alone. Just like Gunes has gifted your empire with many advantages and yet you focus solely on your military isolation. It is as if you desire to be alone, despite yourself,\" Cin explained.\n\n\"I have always been alone. Even Arkadas and my family did not know me,\" I protested. \n\n\"You are not so alone as you think and that is what I came here to show you,\" Cin said angrily and then she turned and walked away. For a moment I paused, confused by this sudden turn of events. I looked back at my door and thought of Nislani inside, preparing for the banquet. I nearly shuddered and then ran after Cin, wondering where she was taking me.\n\n* * * * *\n\n\"Believe it or not, Cin, but I have been to this part of the palace before. In fact a red priestess you may know was the first to demonstrate its utility,\" I said to my priestess. We were standing a doorway in the bowels of my palace, staring into the vaulted room with the watery roof that housed my harem. Cin had led me down to this location rapidly. She had not answered any of my questions on the way down and I had actually begun to wonder whether she had actually given up on telling me anything. But now, as we stood in the harem, Cin turned to me, smiling.\n\n\"I am not showing you the harem,\" she explained, \"Or...that is, I am not just showing you the harem. There is something special here for you today. Do you not recognize anything different?\" I turned from the priestess now and looked around the vast room. I saw all of the normal features, the columns, pools, bars, and couches. Everything looked absolutely normal. Except...\n\n\"Where are the concubines?\" I asked. As I scanned the room, I saw only three women in the far corner. I saw Tutuklu, my head concubine or Pezevenk, completely naked in front of a couch. Two other women, clothed in robes, were sitting on the couch and Tutuklu was speaking to them softly. Usually there were 111 concubines in the room at all times. In fact, that was the mandate. I grew nervous, something was wrong.\n\n\"All but three are in their quarters,\" Cin explained. Well at least they hadn't left.\n\n\"Is this proper? Why so few?\" I asked.\n\n\"It is by my order,\" Cin explained. Tutuklu had turned around from the couch and she had seen us. She waved and then began to walk in our direction. The two women with her rose awkwardly from the couch and followed.\n\n\"Is that within your duties as priestess?\" I asked, confused by this turn of events. What was Cin's purpose in this?\n\n\"Not generally, but there is a reason today,\" Cin said enigmatically. \n\n\"Welcome, Sultanah Varis I, to your harem,\" Tutuklu said from a couple of dozen yards away. She was rapidly closing the distance between us. Her two fellow concubines followed behind slowly. I did not recognize either of them, though this was hardly strange. I had only seen a small fraction women in the Harem. As they got closer, I took account of their appearances.\n\nThe one on Tutuklu's left was a striking for her willow build. She was quite tall, around 5'9 and very thin. Her legs were very long and thin, her feet small and her knees slightly knobby. Her hips were somewhat narrow, though they gave her body a feminine curve anyway, because her waist was exceptionally thin. Her stomach was very flat and her torso was long and narrow. She had small, taut breasts that were sitting high on her chest despite the fact that her hard nipples showed that nothing was holding them up beneath her robe. She had long, thin arms with lengthy, delicate fingers. Her face was somewhat angular with a small, sharp chin, and a long, pointed nose. However, these features surprisingly did not make her appear severe or unpleasant. In fact, she had very thick lips and large, egg-shaped doe eyes, and small somewhat pointed ears that gave her an ethereal appearance, like an elf or some other mythological creature. Her long, straight, golden hair and skin that was the color of milk. She clearly came from the same region as Arkadas. She exuded an air of nervous elegance or reticent grace that was particularly alluring.\n\nSomehow, the girl standing to Tutuklu's right managed to project that same aura while looking nothing like her companion. For one, she was much shorter, shorter than me even at 5'3 and had a slightly curvier build. Her legs were short, though delicate and she small feet and curvy thighs. Her hips were somewhat widely set and she had a large, high ass. Her waist narrower than her hips and then her torso flared out to her perfectly proportioned breasts, giving her a perfect hourglass shape accenting her hips. Her arms were toned and her hands were small. She had a somewhat long neck for her build. Her face was open an warm with high cheeks, a generous mouth, and a small, upturned nose. The only features she seemed to share with her companion were egg-shaped, gray eyes and small, pointed ears. Her hair was black as midnight and cropped around her shoulders. Her skin was a dusky reddish color that stood out prominently against her dark hair. If the tall girl was an elf, this girl was a pixie. Somehow a match, despite their difference. Both women were looking down slightly, unwilling to meet my gaze.\n\nAfter looking at the women and appreciating their forms, I was more confused than before. I wondered why they were present. It was not that they were unattractive, quite the contrary. I just did not understand what made them, rather than the thousands of other beautiful women in the harem, necessary at this meeting. As if reading my mind, Cin began to speak.\n\n\"Sultanah, you were not wrong when you told me earlier that in some ways your path is difficult,\" she said loudly, \"You are often forced to act independently and this makes you feel that you are alone. Being alone is not, in and of itself, a bad thing. You often do excellent thinking on your own. But solitude is destructive when it begins to feel isolating. However, as I said, no one is fated to misery. Certainly not a Sultanah. What you feel is not isolation. It is selectivity, exclusion, and distinctiveness. You do not make rapid connections and do not feel easy with society because you need very particular things and this makes you demanding. Further, others sense your needs, whether consciously or not, and perceive their inability to measure to your standards. They reject you pre-emptively, as it is certain you would reject them. However, goals achieved and connections made lightly deteriorate rapidly. As street merchants says, 'easy come, easy go.' In order to maintain your distinctive standards you must work hard. And make sacrifices. But, in so doing, you ensure that the bonds you forge are iron clad. The ties you create are not based on necessity or fleeting circumstances, but instead the recognition of a true, spiritual bond. \n\n\"When you first came here, it seems like quite a long time ago now, you asked me for something. We both knew that it was rare and that I might not be able to procure what you needed. True to form for your circumstances, the rarity of your dream did not make it expensive. You are the only person with this particular desire, making it available. But, it was nonetheless difficult to procure because it must be sought with great care and superhuman effort. Because of the love I bear for you as my Sultanah, I worked to achieve your aim. I give to you, as a gift, that which you wanted more than anything else: a demonstration that you are not alone. In every way you are not alone, but instead unique. You simply needed the time to find that absolute right thing. I hope that you take some time to savor that feeling.\"\n\nEven before Cin had finished speaking, I knew what she had brought me. I had nearly forgotten, but on my first trip to the Harem I had whispered a fleeting request in Cin's ear. It had faded in my memory as the months passed and far more momentous events took up my time. But apparently Cin had continued to work on my request and here it was. Suddenly I knew why these two women were present. My breathing quickened and my head felt light. I did not even know what to think.\n\n\"Thank you, Cin,\" I said, my voice coming out as a gasp. Cin's words seemed to fade now. I was not really sure what she was talking about. My gift was all I cared for now.\n\n\"Thank me by taking this lesson to heart,\" she said, then she turned to Tutuklu, \"I believe we should leave the Sultanah to her gift,\" she said. Cin then turned and started to walk from the room, heading back into the passage beyond.\n\n\"Of course,\" Tututklu said to me, smiling. Then she also turned, heading back to the harem's quarters. In a few moments, I was alone in the massive room with the two newest concubines. They were still looking at their feet nervously, perhaps more nervous now because Tutuklu was gone. My whole being was buzzing and I had to control myself. I had never even really considered what would happen if Cin had achieved her aim and filled my request. I was nervous and excited. I wanted to be with these women and I wanted to run away in fear and confusion. I decided to simply speak with them for a moment, perhaps to calm my frazzled nerves.",
        "\"Do you know who I am?\" I asked first, trying to sound disarming but instead finding that I sounded arrogant. The two women nodded slowly, but chose not to look up at me. I sighed and tried a different tact.\n\n\"What are your names?\" I asked. They both mumbled so quietly that I could barely make out noises, let alone actual names. \"Please, there is no need to be nervous here. We are alone here. I won't pull rank,\" I smiled, trying to seem easy, \"What are your names? You first,\" I pointed to the taller girl.\n\n\"K\u0131vrak,\" she said, her lip quivering as she spoke, but I saw her eyes glance up slightly, peering between strands of golden hair. I thought this was likely a good sign. I smiled broadly at her and she looked away.\n\n\"And you?\" I said, turning to the shorter girl.\n\n\"Peri,\" The girl said, sounding slightly bolder than her companion. She even looked up at me, her eyes looking deferential but not afraid.\n\n\"Those are lovely names,\" I said, trying to sound encouraging, \"How long have you been here?\"\n\n\"Two weeks,\" Peri said.\n\n\"A month,\" K\u0131vrak mumbled at the same time. Then they both became quiet, giving the other a chance to be here.\n\n\"Have you received any training?\" I asked. Both women shook their heads.\n\n\"Lady Tutuklu...she said that she did not want us to train with the...other girls yet. She said that we were meant for you...green,\" Peri explained in a small voice.\n\n\"How did you come to be in the Harem?\" I asked, wondering if perhaps they had been concubines or even prostitutes in the past, somewhere else.\n\n\"I...was born a slave in K\u00f6le and had been a house servant until six months ago,\" K\u0131vrak said, \"I do not know anything about this. I was simply purchased and sent here. I hope I do not displease you.\" Her words came in a long rush and I raised my hand, trying to sooth.\n\n\"Everything will be fine,\" I promised, \"It pleases me that you are here.\" K\u0131vrak gave me a wary smile and nodded.\n\n\"My parents sold me,\" Peri said, sounding bitter, \"They had difficulty finding a marriage match for me and then your agents offered them a small sum and they sold me. I am glad I am gone. I hated them and they hated me. At least I am apparently wanted here.\" I nodded slowly. Hers was not an uncommon story for a poor family with a beautiful daughter. Selling a girl to a Harem was much more lucrative than raising her dowry. \n\n\"You are most definitely wanted,\" I said, biting my lip. I had not intended to make any sort innuendo, I was simply reacting in the moment. Nonetheless, the girls interpreted it as such. They laughed nervously at my statement and looked at one another nervously. Despite this, they seemed a little more comfortable now, their bodies seemed less tense and they were looking up. And I was feeling looser well, perhaps their comfort had put me at ease. More likely, the surprise of their arrival had worn off and my thoughts had become more focused. I had never in my life expected to meet these women and I was absolutely curious. I needed to find out what, exactly, Cin had brought for me. I decided not to beat around the bush. Cin had promised me a connection to reward my years of isolation, and I expected it to be apparent.\n\n\"K\u0131vrak,\" I said, my tone growing slightly sharper, \"disrobe for me.\" K\u0131vrak's eyes instantly grew wide. I had purposefully chosen the more timid girl. But Peri seemed to feel nervous and uncomfortable as well.\n\n\"I...\" K\u0131vrak started, her hands instinctively crossing over her breasts. She shook her head and shrugged her shoulders.\n\n\"You have not been trained, but you know what this place is, do you not?\" I asked her. Her mouth opened again to speak but no noise came out. After a moment, she closed her mouth and simply nodded.\n\n\"I was not lying when I said you were wanted. Both of you. You have always been seeking a place where you belong, a place where you fit so well that you did not need to think about who you are. You wanted a place where you could feel...natural,\" I offered. Despite their nervousness, the two women were nodding slowly, \"Well, this is it. You have found your place in the sun. You can either embrace it now...or you can give it up and go back where you came from. I will grant you your freedom and you can go back to slavery or to your parents or wherever you want. I will put a coin in your pocket on the way out the door. But you won't ever find this again.\" \n\nI had not intended to give a speech. In fact, just a few minutes before, before Cin told me about their arrival, I would have doubted I could have said those words to anyone. I had certainly not felt like I was in a natural fit when I was in my room, arguing with my wife. But I could feel it now. I couldn't explain why, but I was suddenly feeling more accepted, more natural. An aura was growing around us, the connection that Cin had promised coming together already. I pushed it right back out to them.\n\nK\u0131vrak looked over at Peri and then turned her innocent eyes to me. She simply looked at me for a long while and it felt like I was being sized up. I think she was trying to determine whether or not I was speaking truthfully. I think she was partially tempted, to take my money and to leave. But, I could see in her eyes that she wanted to believe me. And her desire to be accepted was enough, she accepted her place as a concubine in my harem. A paltry price to pay.\n\n\"As you wish, Sultanah,\" K\u0131vrak said in an impossibly tiny voice. But then, she began to disrobe. Her robe was only loosely wrapped around her body and she quickly loosened the fabric over her shoulder. In a moment, the top of the robe flopped forward, exposing everything above K\u0131vrak's waist. Her small breasts defied gravity, perfectly shaped and high on her slight chest. Her nipples were small and pink and had a puffy appearance that I found appealing. Her body was thinner than I had initially thought and her stomach sloped dramatically down to her waist. She was beautiful, though clearly as a slave she had rarely eaten her fill.\n\nK\u0131vrak looked up at me now, her eyes looking slightly feverish and nervous. She breathed in deeply and then let it out in a shaking rattle causing her breasts to jiggle slightly. She bit her lip and then looked down at her waist. Finally, she glanced at me again. I looked at her coldly, taking no notice of her obvious discomfort. K\u0131vrak grew awkward under my gaze and her eyes darted down to her feet again. I heard her mumble something to herself and then she reached down to the bottom of her robe and began to loosen it. Finally, the loose knot came undone and the thin fabric slipped down over K\u0131vrak's youthful hips and down along her long legs. My eyes immediately darted down to the area between K\u0131vrak's legs, searching to see if Cin had truly answered my request. And there my eyes found what I hardly could have believed was possible, K\u0131vrak's cock.\n\nThe willowy girl nearly placed her hands over her member, but she looked up and saw my eyes, recognizing that I wanted to see it. She satisfied herself by crossing her arms under her breasts, pushing them up and half covering her nipples. Her cock was around the same length as mine, so roughly five inches. However, while mine was somewhat thick, K\u0131vrak's cock was thin, only around an inch in diameter at its widest spot. Her balls were also quite small, hanging like small, pale grapes from her white body. Like me, K\u0131vrak had no hair on her body, making her soft cock appear slightly larger than it was. \n\n\"You are absolutely beautiful,\" I said, my tongue feeling thick and my mouth filling with saliva.\n\n\"Thank you,\" K\u0131vrak mumbled, her voice sounding as if she were uncertain if she should believe me.\n\nI looked over at Peri and saw that she was turned, looking at her companion. Peri's eyes were wide and shock was clearly written across her face. I wondered if she had known about K\u0131vrak's body or if this was the first she had seen it. I decided to end the suspense about bodies, it was time for everyone to follow suit.\n\n\"Peri, it is your turn to disrobe,\" I said. Peri kept her eyes on K\u0131vrak's cock for a moment, then she turned and looked at me. For a moment, it looked like she was going to say something, then thought better of it. Instead of speaking, Peri nodded and then began to follow my order. She disrobed herself in the same way that K\u0131vrak had done, reaching up first and untying the loose material around her shoulder. Soon, her perfectly proportioned teardrop shaped breasts were exposed, showing her somewhat long, purplish nipples on her dusky skin. Unlike K\u0131vrak, Peri took no time to contemplate her next step. In fairness, her taller companion had already opened the door. Peri reached down and rapidly loosened the robe and let it fall into a pile on the floor. \n\nPeri's cock was large and looked particularly massive on her small frame. It was probably six and a half inches long and quite thick, my hands would probably struggle to wrap around it at the thickest part. It hung down soft between Peri's legs, stretching halfway down the length of her thighs. Her balls were not as large as mine, though much large than K\u0131vrak's. She also had no hair on her body and I wondered if perhaps we all had the exact same condition. \n\n\"You look just as beautiful as K\u0131vrak,\" I said. Peri blushed slightly, but seemed more lively and excited that her friend.\n\n\"Thank you,\" she smirked, putting her hands on her hips. \n\nNow it was K\u0131vrak's turn to feel stunned, staring at the body of her companion with her mouth slightly open. The two beautiful women stood in front of me, their cocks hanging between their legs and their nipples growing harder in the cool air. I could not believe that Cin had actually found, as I requested, members of the harem who were like me. My entire life I had wondered if there were other girls like me, born with cocks. Now there were two of them right in front of me, both beautiful and both totally within my possession. I felt my body reacting to the situation, my own nipples grew tight and I felt my cock stirring between my legs.\n\n\"Have either of you ever met someone...like you before?\" I asked. They turned and looked at one another and both shook their heads.\n\n\"Peri, is that why you never married?\" I asked, pointing to her cock. \n\n\"Yes ma'am,\" she said.\n\n\"What happens in this room stays here, with just the three of us, is that understood,\" I said suddenly, sharply. The two women rapidly nodded, \"In that case, call me Varis,\" I said. I paused for a moment, looking at the girls and trying to control my excitement. These women were so beautiful that I would have desire them anyway, but the fact that they were so like me made me feel desirable as well. I wanted to express the sensuality and intimacy I suddenly felt. They felt it too, I could sense it. There was an aura engulfing us and I didn't question it. It felt, as I had predicted, natural and right. And it pushed me forward. I knew that there were things that I needed to do now, things that might not be appropriate given my social station. But they needed to be done, I didn't even question it or wonder where my ideas had come from. Everything that was to come would be absolutely essential, I could sense it. So the agreement to secrecy was important. Having gained agreement, I felt secure. I knew these girls could keep a secret. \n\n\"Have your bodies interfered with your ability to obtain romantic partners?\" I asked, trying not to be too crude. Peri knitted her brow and K\u0131vrak shrugged noncommittally. \n\n\"I don't know what you mean,\" Peri said.\n\n\"Have you ever fucked?\" I asked now deciding that it was an appropriate time to be crude. As the dirty word poured from my mouth it made my lips tingle and my heart beat hastened.\n\n\"No,\" said K\u0131vrak.\n\n\"Not...everything. Just those things I could do without taking my clothing off,\" Peri explained heavily. I knew exactly what I wanted now. I turned then and started walking away. I began making my way toward a couch I saw sitting next to a small fountain on the side of the room. After walking a few steps, I turned over my shoulder and looked at the two women, still standing nervously.\n\n\"Follow me,\" I said, \"Peri, you are going to be tested on your claim and K\u0131vrak, I am going to put an end to your misery.\" And then I turned and kept walking. As I crossed dozen or so yards to the couch, I reached around on my robe, pulling out loose knots and untying straps. In a few seconds, the robe just melted off of my body and landed in a clump on the floor. I kept walking, stepping out of the robe with ease. I looked down slightly as I walked, seeing my breasts shake in time with my sultry gait and seeing my cock, half-hard now, bouncing with each step. \n\nFinally, I reached the couch, turned rapidly, and sat down. I cross my legs at the ankle on the floor and threw my arms across the top of the couch. My knees were slightly apart and my cock was easily visible, lying somewhat on the silky fabric of the sofa, sticking up slightly. I opened my eyes and smiled. The two girls were standing close by, only few feet from my body. Peri had a look of excitement on her face, though mixed with nerves (I felt my own emotions matching hers). I wondered briefly about her life, thinking that perhaps she had always waited for a moment like this as well. K\u0131vrak, on the other hand, looked terrified. Only a lifetime of studied obedience kept her in her place. I did not so much see a disgust with the proceedings or an unwillingness to act, as I saw a fear about what was to come. I would focus on her first.\n\n\"K\u0131vrak,\" I said, \"I want you to climb up onto this couch. Face me and stand with your feet on either side of my hips.\" Sensing K\u0131vrak's essential submissiveness, I spoke in an imperious tone, knowing that she would obey. I was not disappointed. She nearly tripped as she started to move forward, caught herself, and then walked quickly to the edge of the couch. Her long legs extended and she stepped up onto the seat, her foot grazing my hips. Then she rose up, her other foot coming to rest against my other hip. \n\nI now looked up at K\u0131vrak's body towering statuesque above me. I saw her delicate legs rising up at my sides, her thin hips at my face level. I saw the long stretch of her thin abdomen and the soft curve of the underside of her breasts. I saw her puffy nipples sticking out straight above my head. I saw her face, looking down nervously between her breasts, her eyes wide and her lip pinched between her teeth. \n\nBut the thing I noticed most, of course, was her cock. It was directly in front of my face, just a few inches away from my lips. It was still very soft and looked slightly shriveled with nerves. Her foreskin closed completely over the tip. Each breath made her balls bounce slightly. I could smell the scent of her body, a mix of salty, nervous sweat, and sweet rose perfume. I felt my mouth watering and I licked my lips. \n\nI had long since given up on ever being with a man. I had found in the past few months that while I had often in my childhood longed for a husband, this had truly been a longing to feel 'normal' than an actual desire to be with a man. After my first time with Arkadas, such a long time ago, I had slowly come to terms with the fact that I was, and always had been, more attracted to women. But, despite this, I had remained in my heart slightly interested a man's touch. Not a man's touch really, I didn't care about that. I wanted to feel a cock. To know what it felt like to be taken as a women. Perhaps my easy familiarity with my own body had kept this curiosity alive even as my interest in men in general faded. But I had never really expected to sate my curiosity in practice. Even if I had found a man to whom I was attracted, it was too dangerous. I could not be seen, as Sultanah, lowering myself before any man. It would be fatal to my power. But here, Cin had collected for me a solution to that problem. Here was everything I wanted in a single package. And I wanted to take it now. But there was still one last thing.\n\n\"Peri,\" I said around K\u0131vrak's body, \"You said you have some experience in matters of the body?\" \n\n\"Yes Varis,\" Peri purred, her voice showing the same excitement I felt.\n\n\"Prove it,\" I said, unhooking my ankles and spreading my legs. I felt my cock bounce slightly and I could tell that in looking at K\u0131vrak, I had grown completely hard, \"Suck my cock,\" I ordered. I took this as a cue for myself as well. I didn't think, I just moved quickly, letting my desires lead the way, after all I was in my harem.\n\nMy right hand shot up from my side and I moved it quickly in front of my body. I quickly wrapped my hand around K\u0131vrak's cock, feeling my fingers sink into the spongy flesh. Her cock felt somewhat cool in my hand and I could tell she was nervous. But, nonetheless, the feeling was incredible. So different than feeling my own body. My fingers pressed into K\u0131vrak's body and I felt my thumb bump up against her soft balls. Her limp cock draped down on over my thumb, hanging down towards the floor. I instantly started to slide my fingers up the length of K\u0131vrak's shaft and my finger moved off of her balls. Soon, most of the shaft was encased in my hand and her skin felt silky and cool. Just the tip of her cock stuck out from the palm of my hand and I lifted it up so that I was looking at her body directly head on. \n\nI could heard K\u0131vrak's gasping for breath and I could feel her whole body shaking around my hand. I looked up briefly and I saw her wide eyes staring down at me. She had lifted her left hand up to her mouth and was chewing nervously on her thumb. But I could feel the blood coursing in her cock and it had grown slightly harder against my palm. She was nervous, but her body was reacting to my touch. I took that as a signal to keep going. In fact, I decided to jump in fully.\n\nIt would not have been possible to hold me back if I tried. My mouth was dripping and my eyes were open, I knew they looked wild. Every inch of my body was tingling with excitement and I felt my cock throbbing in my lap. I opened my mouth slightly, stretched my neck out, and pushed my lips forward. In half a moment, I felt cool, smooth skin press against my lips. Instinctively, I opened my lips wider, pushing my head forward with more force. I felt the tip of K\u0131vrak's cock suddenly slip into my mouth.\n\nMy tongue rose up instantly to caress the bottom of K\u0131vrak's shaft. I moaned loudly, the vibrations shaking my mouth and causing K\u0131vrak to gasp. I cannot adequately describe what this felt like. K\u0131vrak's skin was so incredibly smooth and felt like it was gently caressing my tongue. I could feel a slight hardness to her and I knew that her excitement was growing. Her skin tasted salty and also somewhat bitter, but in a pleasant way like coffee. Her scent was growing more intense now, the salty, rosy scent from before now mixing with the scent of her cunny, which was now very close to my face, just behind her balls. K\u0131vrak's free hand came down and gently rested on the top of my head. For a moment I thought she was going to push me farther in towards her stomach, but I quickly realized that she as simply trying to keep her feet.\n\nWhether she was trying to push me or not, I decided I would head in that direction. K\u0131vrak's cock was still quite soft, so I made a slight vacuum in my mouth, sucking on her gently. I felt the tip of her cock expand in my mouth. But I moved my hand away from her cock, placing it instead on her warm thigh. K\u0131vrak groaned slightly and her knees wobbled. But I kept sucking on her cock and moving my head forward, taking more and more of her soft shaft into my mouth. I felt her thin cock slipping over my tongue and I undulated it gently, massaging her cock gently as it moved deeper and deeper into her mouth. \n\nHowever, when K\u0131vrak's cock was halfway into my mouth, I suddenly froze. It was not because of anything K\u0131vrak had done or any reticence on my part. Instead, I was momentarily shocked to find that Peri had started to complete her assigned task. I had not noticed her kneel down between my spread legs and, obviously, I could not see her. But while my tongue swirled over the tip of K\u0131vrak's cock, I suddenly felt cool fingers wrap around the base of my hard cock, giving me a firm but pleasant squeeze.",
        "Peri's fingers sunk into my scrotum, feeling warm and firm against my aching balls. My cock, which was harder than I could ever remember feeling it, stuck up high and straight towards the concubine's mouth. She showed no shyness or confusion about her task. I was still coming to terms with the fact that Peri's soft, small hands were feeling my throbbing cock when I felt a soft warmth against my tip. Peri had kissed my cock. Soon, I began to feel kisses down the length of my cock, sometimes tickling the bottom of my shaft, other times the tip or the top. Occasionally, her gentle lips would find their way to my scrotum. Her tongue protruded slightly as she kissed, pressing her hot wet tongue against my flesh and leaving me slightly wet with her saliva. All the while she kept her grip on my cock, rolling her fingers and palm slightly to enhance the sensation.\n\nAfter a few moments of moaning while I took in the sensation of Peri's touch, I realized that I had stopped moving. I realized something else as well. Despite her anxiety, K\u0131vrak's body had surrendered to my touch. No longer limp in my mouth, K\u0131vrak's cock now felt firm (if not completely hard) against my tongue. It had grown slightly as well, pushing out on my tight lips and working its way further into my mouth. As Peri continued to pepper my cock with kisses, I decided to reward K\u0131vrak further for her show of appreciation. \n\nI parted my lips slightly and let the vacuum ebb, it was no longer necessary. But I kept my tongue pressed against the bottom of K\u0131vrak's cock. I started to push my head forward slowly, feeling K\u0131vrak's skin slipping deeper and deeper into my mouth. Soon, I felt the bulbous tip of her cock, now very hard, slip passed my back teeth and push into my throat. I felt myself gag, my throat closing quickly and my eyes filling with tears. My mouth fill with thick, sticky spit. I took a breath with my nose and kept myself calm. Then, as the gag relaxed, I push again, feeling Kivrak's cock pushing against the back of my throat. I felt my thick saliva dripping all over the length of K\u0131vrak's shaft and I worked my tongue around on the bottom, coating her with more. I gagged again, but now I knew what to expect, I kept pushing her cock into my throat further, letting my gagging throat wrap around her tip.\n\nPerhaps Peri felt my body convulsing slightly as I gagged and she wanted to reward me. Or maybe she just felt it was time, having already coated my cock in soft kisses. Whatever her reasons, Peri decided to follow my lead. And, I must admit, she was more skilled at it. Her lips were planted against my balls and she quickly kissed her way up the shaft until her lips were pressed against my tip. Then I felt her lips moved and I realized that her mouth had opened. \n\nI felt her mouth start to slip down the length of my cock. Only, it wasn't slipping against my cock, Peri had opened her mouth wide enough and was moving carefully enough that her tongue and her lips never made contact with my cock. I only knew what she was doing because I could feel the humidity of her mouth as it glided over my aching shaft. Liquid dripped from the tip of my cock and landed in Peri's mouth. I heard her moan but she didn't stop. Eventually, I felt her chin press into my balls and this seemed to give Peri the signal she was waiting for. In an instant, her lips closed and her mouth collapsed around my shaft. I felt her tongue pressing against the throbbing bottom of my cock and I felt her gag as well, her throat closing around my shaft tightly. Then she pulled my cock back slightly, letting it rest against her tongue. Her tongue moved rapidly, coating me in another layer of saliva and tasting my salty skin.\n\nWhile she was moving, I kept my mouth largely still. K\u0131vrak's cock was still pressing against the back of my throat and I was now controlling my gag reflex. I kept my tongue moving around on K\u0131vrak's shaft, letting it bounce on my tongue and bathing it in my saliva. But I was focused on Peri's movement, moaning around K\u0131vrak's cock as I took in the sensation. \n\nBut as I felt Peri's chin hit my scrotum, I knew I needed to do more for K\u0131vrak. Now that my gagging was under control, I wanted to go further. Only a half inch or so of K\u0131vrak's hard cock remained outside of my mouth and I breathed in through my nose and pushed forward. Her cock was so slippery with my saliva now that there was really no trouble at all. I was surprised to find her cock silkily and easily driving across my tongue and deep into my throat. Before I knew it my nose was pressed into K\u0131vrak's flat belly and my chin was resting against her warm balls.\n\nNow everything had locked into place. Peri was on her knees in front of me, her neck craned so that she could fit my entire cock into her throat. Her tongue moved lazily over my shaft, her head bobbing slightly. Her tits were pressed into the fabric of the couch, though I could feel the sides of them now against my thighs as I closed my legs slightly. K\u0131vrak was standing on the couch, her feet on either side of my hips. She had one hand gripping desperately to the top of my head, trying to keep balance. The other, I saw, was pulling fiercely on one of her puffy nipples. Her mouth was open and she was moaning loudly. Her hips shook slightly as she thrust into my face. And that was where I was primarily focused. I kept K\u0131vrak's cock buried deep in my mouth, only occasionally letting it slip out slightly so I could gobble it back up. Her cock had grown very hard and I could feel the vein on the bottom throbbing against my tongue. I could smell the scent of her cunny and my saliva. I had raised both hands up now, reaching them around K\u0131vrak's body and letting them sink into the soft flesh of my lover's ass, pushing her in more deeply into my face.\n\nI don't know how long we stayed in that position. It felt both like an instant and an eternity. But I remember how it ended. Peri's hands were gently rubbing up and down my thighs while her mouth continued to work around my cock. I felt the tension rising in my body and I stopped breathing out of my nose. My hands sunk more deeply into K\u0131vrak's ass. I was moaning and shaking my head side to side, letting K\u0131vrak's cock bounce around my mouth and in my throat. \n\nI felt myself growing so close that I hardly noticed K\u0131vrak's body tensing against my own and I certainly didn't notice that her hips were thrusting more and more rapidly towards my face. I felt Peri's tongue slip out of her mouth on the underside of my cock, pushing into my scrotum and I knew I was just seconds away. But K\u0131vrak was closer. Suddenly, I heard a loud grunt above me and my eyes fluttered open. I looked up at K\u0131vrak and saw that she was still leaning down over me but her eyes were slammed shut. Her mouth was wide open and she was groaning loudly. In fact, a thin drip of saliva dripped from her senseless mouth and landed on the top of my breasts. Her hips thrust twice more and then I felt the vein on the bottom of her cock expand in my mouth.\n\nThen I felt hot, sticky liquid bursting into my mouth. The first thick jet shot right down my throat, filling my stomach with a warm, unfamiliar feeling. I was a bit shocked and I pulled my head back slightly. But K\u0131vrak's was not finished and soon more of the thick seed was pouring into my mouth. In coated my touch and covered my teeth. It tasted salty and musky and filled my nose with a strange, dirty floral flavor filled my nose. It was different than my own seed, somewhat alien, but delicious. \n\nK\u0131vrak's cock kept expanding in my mouth, shooting more and more of her seed against the insides of my cheeks and off the roof of my mouth. My cheeks began to sag with the weight of her seed and I began to swallow it down so that it would not leak out. It dripped in a large, sticky ball down the back of my throat, landing in my stomach with a warm splash. K\u0131vrak moaned again, thrusting her hips and depositing the last few drops of her delicious seed in my mouth.\n\nBut I did not really have time to savor the sensation. Even as K\u0131vrak was generously filling my mouth with her seed, Peri was still sucking on my cock. In fact, she had grown more intense and my body had been pushed more and more closely to the edge. In fact, it felt like I was able to push farther, the tension growing more extreme, as I focused on sucking down K\u0131vrak's juices. But as the last few drops of K\u0131vrak's seed landed hot against my tongue, Peri pushed me deep into her throat and gagged. Finally, aware of what was happening, I rapidly tumbled over the edge. Soon, thick warm ropes of seed were pouring from my body and splashing into Peri's eager mouth.\n\nAnd I felt that feeling of warmth and acceptance that one can only feel when another has given them supreme, physical pleasure. Especially when done selflessly, when another gives you pleasure but receives none in return. It emanated out from between my legs, but eventually swept up over my entire body, filling me with a sense of satisfaction and belonging. Everything else just faded away and I existed in that moment entirely. It was absolutely beautiful.\n\nEventually, the pleasure began to fade and I became aware of where I was and what I was doing. Peri was still on her knees in front of me and the sensitive tip of my cock was still in her mouth as she sucked the last of my seed down. K\u0131vrak was leaning forward heavily, her hands now on the back of the couch and her breasts resting against the top of my head. Her cock was still in my mouth, though it was rapidly growing soft. My face was smeared slightly with her seed, feeling sticky where it had dripped from my mouth. I opened my lips and let her cock fall out of me. K\u0131vrak sighed and then rolled over onto the couch, panting heavily. \n\nI looked down at Peri who was now looking up at me, able to see me. She still had her hand around the base of my cock and it was still hard. She gave me a naughty look, winked, and then licked the tip of my cock. I giggled and then beckoned for her to release me. She did so reluctantly, standing up in front of me. Her cock looked painfully hard now, the circumcised tip looking red and desperate. Her nipples were also extremely hard and her breasts looked like they ached. I needed to help her. I licked my lips, tasting K\u0131vrak's seed, and knew just how I wanted to do it. But I wanted everyone involved.\n\n\"K\u0131vrak,\" I ordered suddenly, \"Get down on your hands and knees on the floor.\" K\u0131vrak rolled over onto her back on the couch, her legs flopping over my thighs and her cock lying limp against her stomach. She was panting and her breasts were rising and falling rapidly on her chest. She gave me a look as if she could not believe I wanted her to act now. I didn't feel like waiting, I was by no means sated yet. I snapped my fingers and pointed to the floor. Now K\u0131vrak moved. In a moment, she was on her hands and knees on the ground.\n\nK\u0131vrak was facing away from the couch and her ass was up in the air. Her long, narrow back extended down towards her blonde head. She was turned back, looking at me nervously. I looked briefly down towards her legs. I saw that her white asscheeks, small and tight, had pulled apart and revealed a small, crinkled pink asshole. Below that, I saw a tight pink slit of a cunny, glistening with juices and pulling apart slightly, inviting someone in. Her lips were somewhat large and looked inflamed with excitement. Belong that, I saw small balls hanging in a slightly reddened scrotum. And below that, I saw a soft, narrow shaft of a cock hanging down towards the floor. I had never been able to see myself in that angle, though I knew that is roughly what I would look like. I was surprised at how alluring I found K\u0131vrak's body. My cock, which had never really gotten soft after finishing in Peri's mouth, now grew as hard as ever before and my nipples began to tingle.\n\nI slipped quickly from the bed and dropped to my knees directly behind K\u0131vrak. My hands instantly found their way to K\u0131vrak's hips. My cock, sticking up hard between K\u0131vrak's legs actually bumped into K\u0131vrak's cock, making it shake slightly. K\u0131vrak's moaned and her knees grew weak. I giggled at this and actually pulled back for a second and then leaned forward. I could smell K\u0131vrak's salty cunny and feel the head coming off of it. I pressed my lips against her balls and then kissed down the length of her cock, planting a final, long kiss on the tip (in fact I stuck out my tongue and bounced it against it. Then I returned to my position behind her body.\n\nHer body was so much taller than mine, her legs so long, that as I situated myself behind her, I found that I could not reach her body. I reached underneath of her with my hand and pushed her knees apart. K\u0131vrak seemed to sense what I wanted and she splayed her knees out far on the marble floor. She groaned a little in pain as she spread her legs very wide. So wide, in fact, that the tip of her soft cock pressed against the cold floor. Now my hands returned to her hips and I found that her body was somewhat low, but in a perfect position.\n\nI reached my hand up and licked my forefinger and middle finger briefly. Then I moved it down towards K\u0131vrak's cunny. Any concern I had was completely unfounded. After a moment, my fingers found K\u0131vrak's lips. My damp fingers barely added to her wetness. Her body was absolutely dripping with excitement. I could actually see her juices spilling out from her wet cunny and dribbling down the length of her cock. She was ready. And, as I looked at my hard, throbbing cock, I knew I was ready as well. \n\nI moved my now wet fingers to my cock, wrapping my hand around my shaft and pushing it down slightly. My cock felt sticky form Peri's mouth and was slightly damp. It felt like a rock wrapped in velvet in my hand as I moved my hips and got myself in place. After a moment, I felt the hard tip of my cock press against K\u0131vrak's wet cunny lips. K\u0131vrak gasped and her hips thrust back slightly. No longer shy, the girl wanted this. So did I and I wasted no time in obliging.\n\nMy hips thrust forward slightly and I gasped as I felt the tip of my cock slip into K\u0131vrak's eager cunny. She was so incredible wet that I simply slipped inside. But she was very tight inside and I felt her muscles squeeze tightly around my cock. I bent my head down, looking at where my cock entered the woman's body. I felt a dirty chill just looking at it. But I had a more important task. I spit a large blob of saliva from my lips and it splashed down onto the top of my cock. My hand, still down between my legs, spread the slippery saliva all over my cock, covering it in a thick shiny layer and adding to Peri's drying spit. \n\nThen, when I was wet, I started to push again. K\u0131vrak moaned and her body trembled, but her hips kept pushing back. I felt my cock slipping more easily into K\u0131vrak's body, her cunny squeezing me tightly the whole way. Finally, I felt my balls press into K\u0131vrak's balls and I felt her cock bounce limp against my body. K\u0131vrak moaned loudly and I let out a groan. I was completely inside of her now, my cock wrapped in the warm wetness of her body.\n\nAs soon as my cock was completely inside K\u0131vrak's cunny, my hands returned to her hips. I was just about to start thrusting in and out of K\u0131vrak's cunny when something caught the corner of my eye. Peri was standing to my left, watching me push my cock into K\u0131vrak's body. Her hand was wrapped around her own cock, her cheeks were flushed, her eyes were wide. She was breathing heavily and her breasts shook on her body. I had nearly forgotten. Peri was the only person who had not received any satisfaction yet.\n\n\"Do you want to join us?\" I asked, looking directly in the shorter woman's eyes. As I spoke, shook my hips left to right and then back, moving my cock around inside of K\u0131vrak's cunny. I purred as her body tightened around me and she moaned. Peri nodded her head enthusiastically.\n\n\"More than I've ever wanted anything, Varis,\" She said, her hand moving faster on her hard cock. The tip looked like it was about to explode and my mouth watered. K\u0131vrak's seed had tasted delightful and I wondered how Peri would differ. I lifted my left up and hooked my finger at Peri.\n\n\"Come here, stand right by my side,\" I said. Peri practically jumped, bounding the distance between us and sending her cock and her breasts bouncing. After a moment, she stopped by my side as I had ordered. I started to slowly move my hips, pushing in and out of K\u0131vrak's body. I was rewarded with loud gasps followed by moans. I kept my right hand on K\u0131vrak's hip, holding her in place while her cunny wrapped ever more tightly and wetly around me. I listened to the sound of her cock bouncing back into my balls and then slapping forward against her stomach. Her scent was overwhelming and it pushed me to act with Peri.\n\nPeri was standing nervously with her hand still wrapped around the base of her cock. She was very close to me. In fact, I could feel her cock near the side of my face and we both knew what we wanted. I turned my head to the side and looked up at Peri's body. I followed the slope of her hips up to her perfectly shaped breasts, her purplish nipples looking as hard as diamonds. Her pretty face was looking down at her own cock, watching her hand stroke towards the side of my face. My eyes dropped down to her cock. The tip was an inflamed red color and its circumcised dome was so hard it looked like polished marble. The reddish brown shaft looked almost as smooth between her fingers. I didn't want to wait any longer, I opened my mouth and leaned forward.\n\nThere was a small drip of seed on the end of Peri's cock and this was the first, salty sweet thing I felt against my tongue. I savored the flavor and marveled at the strange feeling of the tip of Peri's cock, so smooth and hot with the foreskin removed. But I did not get a chance to explore for long, Peri was absolutely desperate. She roughly pushed her hips forward, flattening down my tongue with the force of her movements. I opened my lips wider to accommodate her and felt the hard bottom of her shaft slip over my tongue. In half a moment, Peri's cock was in the back of my throat and I was gagging around it. My lips were stretched around the girth of her body and I felt like I was swallowing her whole shaft. She pulled back slightly, her cock coated in my saliva, and gave me a chance to breathe. But, before long, her cock was once again pounding into the back of my throat, causing me to gag. \n\nI kept my hands on K\u0131vrak's hips and simply let Peri do what she wanted, I never tried to stop her rough thrusts. After a few moments, I felt one of Peri's hands reach around to the back of my head, giving her more control of my mouth. Her other hand dropped down and mercifully found my breasts. Her fingers skittered over my nipples, pinching them and sinking in the flesh of my breasts. I tried to gasp around Peri's cock but found that it only slipped deeper into my throat, making a vibrating gurgling sound.\n\nNow the three of us were working on the same steady beat. K\u0131vrak, on her hands and knees, thrust back at a very steady rate, pushing into my body. I felt her cock and her breasts shaking with each movement and I could hear her wanton moans filling the cavernous room. I was kneeling behind her, thrusting my cock in and out of her body, savoring the sensation of her cunny wrapping tightly around me. My head was turned to the side and I was pushing my face into Peri's body. I felt her balls against my chin and my nose was pressed hard into her soft stomach. I could smell her scent, different from K\u0131vrak's, a fruitier, heartier smell that mixed pleasantly with the smell of K\u0131vrak's cunny. \n\nPeri's cock was pressed deeply into my throat and I could taste the salty, rich flavor of her skin as my tongue undulated against the bottom of her shaft. Occasionally I gagged on Peri's thick cock and tears were running down my cheeks, my mouth was full of thick saliva. Peri's hand on the back of my head pushed more forcefully all the time, trying to drive her cock deeper into my throat. Her hand on my breast grew more insistence, pinching and grasping with abandon.",
        "Given Peri's state of arousal, it was no surprise that she was the first to finish. The only surprise was the force she showed in finishing. At first, I simply felt her balls seize up against my chin. Then I felt her hand shove hard on the back of my head. Her whole body was shaking wildly and a croaking noise came from her throat. I felt her rise up on her tiptoes and her cock pushed up against the roof of my mouth. Peri let out a loud groan and then I felt the vein on the lower side of her cock expand in my mouth. \n\nSuddenly, my mouth was filled with a sweet, musky liquid. Unlike K\u0131vrak (or me, for that matter), Peri's seed did not shoot out in giant globs. Instead, it seemed to pour out of her body in a steady, overwhelming stream of thick liquid. It rapidly coated my tongue and covered my teeth. I felt it pouring down my throat and my cheeks began to sag. I tried to swallow, but the position of Peri's cock made that impossible. Instead, Peri's cock continue to pour into me until it overflowed, pouring out from my lips and dripping onto my chin, neck, and breasts. Peri's hand stayed on the back of my head the whole time, but eventually, the flow of seed slowed to a stop and Peri's body relaxed with a sigh. She took a wobbly step back, her still-hard cock popping from my lips.\n\nShe looked at me and then gave me a lewd smile, \"Varis, you look so pretty like that,\" she said, moving her hand in a way that indicated the seed toward the seed on my face and body. I looked down at the pearly liquid pooling on my body and shivered. I stopped thrusting into K\u0131vrak's body and moved my hands up to the mixture of seed and saliva on my breast. I groaned as I started to rub the liquid into my skin, kneading it into my breast until a sticky film covered my nipples and my breasts. The fruity, salty smell of Peri's seed filled my nose as it coated my skin and I breathed it in deeply. Peri kept her eyes on me as I moved. In fact, her hand returned to her cock, still hard, and started to stroke again as she watched. A girl after my own heart. \n\nK\u0131vrak had no idea what I was doing, she just knew that I was no longer thrusting into her. She pushed her hips back once and groaned. I felt her hot, dripping cunny around me and I pushed back into her once as well. Her cock bounced back against me and I could feel that she was hard again, her cock pushing up and running along her stomach. I nearly continued what I had been doing before. But as I moved I felt a slickness between my thighs. For a moment, I was unsure of what caused it. Then I realized, my cunny was dripping down my leg.\n\nEver since my first experience with Arkadas, I had consistently ignored my cunny. My cock was, literally and symbolically, the source of all my worldly power. It was my right to act as Sultanah and the future of the Hanedan Dynasty. The women I had been with had recognized that power and had sought to please it. I, feeling a bit uncertain and insecure in my position, had also focused on it, ignoring that there was another half to my identity. I barely thought of my cunny or thought of it only in passing. \n\nBut here I was, with these two women who knew exactly how I felt and my cunny was making itself apparent. In fact, I could smell my own tart scent mixing with that of K\u0131vrak's dripping cunny and Peri's sticky seed in the room. Suddenly, I felt an overpowering desire to take the opportunity and embrace my cunny and to be taken as a woman can be taken. In fact, a sudden vision flashed into my head, something even more spectacular. I slipped my cock out of K\u0131vrak's body and heard her groan in disappointment. I would make it up to her.\n\n\"Both of you on the floor, I know what I want,\" I ordered. The two women looked confused but I began to grab at their limbs and to direct them into the correct position. After a few moments, they seemed to understand what I wanted and they rapidly began to get themselves into position. After only a half a minute of manipulation, the two women were ready and waiting for me.\n\nThey were both lying on their backs on the cold floor of the chamber. Their heads were facing opposite directions, their toes pointed toward once another's feet. But they weren't simply lying next to one another, they were overlapped. K\u0131vrak's left thigh was thrown up over Peri's right thigh and vice versa. Their bodies were pushed all the way together so that their balls and wet cunnies were pressed together. The shafts of their cocks shot up from their bodies, pointing towards the ceiling of the chamber. Peri's cock was longer and thicker, outstripping her partner's body, making my choice easy.\n\nAs soon as the girls were in position, I stepped over their bodies, placing my feet on their side of their interlaced thighs. I was facing Peri, my back to K\u0131vrak. The two were excited and I could see them writhing on the floor, pressing their cocks and the cunnies together. I didn't want to force them to wait any longer. I quickly started to kneel down on the floor, placing my knees where my feet had once been.\n\nAs soon as I was in position, I felt their cocks touching my body. Peri's cock slipped up against my own and I could feel her heat and hardness against me. K\u0131vrak's cock slipped up between the cheeks of my ass, grinding wetly against my anus and then pushing hard and wet against my skin. I shivered and moaned as I felt this, but I wanted more. I looked at Peri first.\n\n\"I want you in my cunny,\" I breathed at her, actually lifting her hand and placing it on her own cock, willing her to take the next step. I didn't even look to see what she was doing, instead, I looked over my shoulder at K\u0131vrak. In the same motion, I put my right hand to my mouth and spit a large glob of saliva into it. I brought it down to my neck, finding a patch of undisturbed seed there, I scooped up that liquid as well. As I looked into K\u0131vrak's eyes I slathered the saliva and seed against the crinkled folds of my anus, \"I want you in my asshole,\" I said. Then I turned back to Peri. I put my hands on my breasts, squeezing my nipples and letting the girls know that they were to fulfill my commands, that I was done orchestrating their actions.\n\nThey jumped to their task quickly. They didn't even need to speak, they seemed to sense instinctively what needed to be done. I felt their hands and arms lifting me up slightly and I felt them moving their cocks into the correct position. In just a few moments, I felt Peri's cock pressing against the dripping opening of my cunny. I looked up and Peri nervously, this was the first time I had ever felt this sensation. She looked wild with excitement but smiled at me reassuringly. Slowly, she began to lower me down onto her cock.\n\nThe sensation was unlike anything I had ever felt before. I felt the lips of my cunny spread apart and then I felt the bulbous tip of Peri's cock push into my tight opening. I gasped as my body gave way, allowing Peri to enter me further. I was so incredibly wet that Peri's cock easily made its way inside of me. But I was tight, I could feel my body wrapping around hers. There was some pain, I admit, but the pleasure was undeniable. So different than being on the other side of this equation. After a few moments, I felt my body settle down onto Peri's, her cock buried entirely within my body. I felt her hardness filling me totally, a tingly wholeness I cannot adequately describe.\n\nBut I didn't have time to dwell on it, or even to catch my breath. Even as I was panting and moaning at this delightful, alien sensation, Peri was wrapping her arms around me and pulling me down. I let out a surprised yelp and pitched forward slightly. I felt my breasts land on Peri's breasts, our hard nipples rubbing together. I felt my hard cock press into Peri's belly, and then my own, as I collapsed down on top of her. Our faces were just a few inches apart and I felt Peri's cock shifting deliciously inside of my body.\n\nBefore I had a chance to figure out what was going on, K\u0131vrak's eliminated all doubt. I was still growing accustomed to the feeling of Peri's cock in my cunny, when I felt the forcefully kiss of K\u0131vrak's cock pressing against my anus. Peri had tipped me forward slightly so that K\u0131vrak could reach my asshole. My body went tense as she touched me and I sucked in air quickly. Peri's hand rose up on my sides, rubbing my ribs and the sides of my breasts. She shushed me, encouraged me to breathe, and told me to relax my body. Her voice was soothing and I took her advice.\n\nWith my body no longer overly tense, K\u0131vrak was able to begin. I felt one of K\u0131vrak's hands on my lower back while the other one was clearly wrapped around her thin cock. I kept my eyes forward on Peri, who was smiling devilishly. She moved her hips slightly, moving her cock inside of my cunny and making me swoon. But it kept me focused on pleasure and I barely winced when I felt the tip of K\u0131vrak's cock gently stretching open my anus. I nonetheless gasped as I felt the bulbous tip slip into me entirely. Peri reached her hands up to my head, playing in my hair and keeping me relaxed. I felt my anus stretching and there was some real pain now, though it mixed with the pleasure of Peri's cock in my cunny. \n\nK\u0131vrak's took her hand from her cock (she was set inside of me now, it was not going anywhere) and she spit in her palm. I heard her slathering her saliva on her cock and then felt her wet fingers slipping around my anus. Now more completely lubricated, K\u0131vrak began to slowly pull my hips back. Rather than thrust inside of me, K\u0131vrak and Peri slowly rocked me back into my earlier kneeling position. As they did so, I could feel K\u0131vrak's slippery cock begin to inch its way into my asshole. The women moved slowly but deliberately, and I felt every inch of K\u0131vrak's cock as it stretched me out and pushed deeper and deeper into me. \n\nThe deeper she went, the easier it became. Soon the pain was subsiding and a new, pleasurable feeling started to replace it. My body began to tingle and I became aware of the sensations swirling around me. I felt Peri's cock rocking inside of me while K\u0131vrak pushed deeper. There was only a small amount of tissue separating their cocks and I could feel them both inside of me, rubbing against one another deliciously. Before I knew it, I was sitting up straight above my lovers' hips, both of their cocks shoved to the hilt inside of me. My own cock was sticking out straight away from my body, hard and excited.\n\n\"Oh Gunes, I feel so full,\" I moaned. I raised my hands above my head, sticking my fingers into my hair and pulling on it gently, seeking relief from the relentless sensation. Peri's hands rose up as I spoke, her palms instantly finding my nipples and her fingers sinking into my flesh. K\u0131vrak's hand were also busy, rising up to my full ass and grasping at my flesh. I ever felt her pull my cheeks apart so she could watch her thin, white cock disappear into my tight, stretched asshole.\n\nWe were all locked together perfectly and we began to writhe together. Our actions were not pre-meditated, but we all moved in the same way, our efforts complementing one another. I rock slightly on my hips, my head thrown back wildly and my eyes closed. I could hear myself moaning, but it was like a sound coming from a million miles away. All of my energy was focused down between my legs and it seemed like an entire universe of pleasure and formed there, engulfing everything else and washing away any other concern. \n\nPeri kept her hands on my breasts, squeezing them and exploring them. At the same time, she bounced her ass up and down on the floor wildly, sending her cock pounding in and out of my virgin cunny. Each thrust of her cock seemed to push it deeper, finding new nerves and new pleasures. My cock and balls bounced wickedly on top of Peri's body and little droplets of early seed dribbled across her chest. I could feel her eyes on the curves of my body and I could hear her panting and tensing beneath me.\n\nK\u0131vrak's motions were more controlled, but it took less movement to cause a huge reaction there. Rather than jumping up and down on the floor, K\u0131vrak largely kept her body motionless, letting Peri's movements gently rock her cock in and out of my anus. The more she moved, the looser and more comfortable I became. Any sense of discomfort or pinching had long-since evaporated and instead her careful motions seemed to be rocking me towards oblivion. The only force in K\u0131vrak's motions was in her hands, where she gripped ever more forcefully on the flesh of my ass and spread my cheeks farther apart so that she could watch herself fuck me.\n\nEach of their actions individually were amazing, but it was the way they came together that made the experience so unbelievable. I could feel their cocks rubbing together inside of me. It seemed that each motion found just a little extra space inside of me to the point that I was overfilled, like their cocks would pop out of my mouth. But there was no discomfort from this, instead, the more and more filled I became, the better I felt. I could sense warmth growing between my legs, my toes stretched, my knees locked, my nipples tingled, and my throat issued moans unbidden from my conscious mind.\n\nIt was all too much. I finished first. The sensations swirling around me were so intense that I didn't even sense it coming on. I was riding the pleasure and the bodies beneath me and simply enjoying the feeling of everything coming together in this way. But suddenly, I felt a concentrated point of pleasure erupt from between my legs. It had an impossible intensity that instantly outstripped the narrow point that had birthed it and it erupted out all over my body, spreading from my cock down my legs and up over my breasts before overwhelming my brain. I heard myself screeching loudly and I could tell that all my muscles were tied in knots. But all I felt was the pleasure of my orgasm as it tore through my body.\n\nAs the sensation started to fade (somewhat) I once again became aware of the world around me. My eyes shot opened and I looked ahead of me. I saw a large spurt of seed, almost eye level, in the air. I watched it fall and then splatter on to Peri's face, coating her nose and splashing across her smiling teeth. It looked as though several globs had already fallen on her and Peri's face looked iced with my seed. There were also strips of seed across her stomach, breasts, and neck. There was even seed pooling in her hair.\n\nEven while the last few globs of my seed poured from my body and landed on Peri, it seemed that I had pushed her over the edge. She was smiling, but her teeth were clenched and her eyes were closed. I was trying to catch my breath and feeling light-headed as I felt all of Peri's muscles tighten underneath me. Suddenly, deep in my cunny, I felt a burst of warmth that I had never felt before. I heard Peri groan and felt her fingers sink ever more deeply into my sensitive nipples. Peri thrust her hips a few more times and I knew that her sticky, pearly seed was filling my cunny.\n\nPeri's rapid movements (as well as my instinctive clenching during my own orgasm) triggered K\u0131vrak as well. Peri's cock rubbed her through my body while my tight anus held her in place. I heard her groan loudly and felt her fingers sink into my ass. For the first time, she thrust her hips up, driving her cock deeper into my ass that it had ever been before. I grunted at the sudden jolt. I was holding my breath now, feeling like I might collapse as I withstood the onslaught. The same warmth I had felt in my cunny was now repeated, only deep in my asshole. It felt different, both because K\u0131vrak's seed came out with more force and because there seemed to be less space for it. I felt it stretching out my insides, making me feel hot and bursting. \n\nFor several seconds, the girls just thrust their cocks hard up into me, moaning and writhing on the floor and my body pulled the last few drops of their seed from their aching balls. Finally, they each gave one last, small thrust at the same time and then collapsed onto the floor panting. I took a large gasping breath and only then became aware of the pleasure I had felt, allowing the women to place their seed in my body. \n\nBut I was still far too lightheaded from sensation and lack of breath. I saw dark spots in front of my eyes, smiled, and then pitched over to the side. I heard the girls groan as their slipper cocks popped out of my body (a pleasant sensation that I had never experienced before) and landed panting on the ground next to them. No longer corked in by cocks, the seed now overflowed my body, pouring into pearly pools on the marble floor. I hardly noticed. I embraced the cold marble floor and took large, heaving breaths. I could hear the other women doing the same around me.\n\nFor a long while that was all I could do, trying to get myself together and enjoy the afterglow of a particularly powerful experience. Eventually, I was able to catch my breath and I sat up. The other women were still laying on the floor, getting their bearings. They cocks, now limp, lay against their thighs. I could see their breasts heaving as they breathed, but I saw absent-minded smiles on their faces. They were a million miles away, basking in the pleasure they had never expected to feel.\n\nI noticed as I sat that my cunny and my asshole felt wet. I looked down and saw that I was sitting in a puddle of seed. The floral, musky smell rose up from it, making my tired cock twitch slightly. Without thinking, I reached my hand down towards the seed. It was rapidly cooling on the marble, making it feel slightly thicker but no less sticky. I played with it for a minute, watching the swirls in the pearly liquid as I mixed Peri's seed with K\u0131vrak's. \n\nWithout thinking, I scooped up a small amount of the mixed seed with my finger, pushing it into my palm. I looked up at the girls. They were looking at me now, but seemed too tired to say or do anything else. I saw Peri's face and noticed the seed, my seed, still plastered all over it. Without asking, I reached forward and put my finger against Peri's cheek. I moved my other hand over as well, still cradling the seed. I scooped my finger down along Peri's cheek, slipping some of my seed down into my palm. \n\nI moved back slightly and looked at my palm. I used my finger to swirl the seed some more, mixing my juices with that of the other girls. The pearly color seemed to grow more luminescent, like it was infused with the rays of the sun. The scent became more powerful, a mixture of all the heady aromas we each had produced. Despite my fatigue, I felt my nipples grow hard just at the scent. I knew what I wanted to do. I quickly raised my palm up to my face, tilting it back towards me. \n\nIn a moment, I felt the cooling liquid press against my lips. I opened them, allowing the thick, salty seed to pour into my mouth and pool on my tongue. The taste was even more incredible than I would have believed given the scent and I stuck my tongue out, licking it rapidly off my tongue. I wanted to savor it, to taste it and let it roll around in my mouth, but I couldn't wait. I swallowed it down quickly, feeling it deposit deep in my stomach.\n\nI closed my eyes and savored the aftertaste of the seed on my tongue, and breathed the scent of it through my nose. Despite the fact that the seed had been cooling, it felt warm in my stomach. In fact, I felt a certain calmness come over me and I no longer felt tired, no longer felt like I was short on air. I just felt at peace at that moment, I let it soak over me.\n\nI didn't really notice that I had begun to think until I was already forming several complex ideas. I had been so excited when Cin had brought me here and showed me these women (and informed me who they were) that her words seemed to roll right off my back. I hadn't even noticed them. Now I found I had been ruminating over them all this time. Something about the acts I had just performed seemed to crystalize these thoughts together. I could not explain it, but I felt like I had gulped down wisdom and it was emanating all over my body, spreading out from my stomach.",
        "Cin, of course, had been right. I had been searching for acceptance as Sultanah since the day of my coronation. Earlier actually. I had been trying to convince the people and the barons of my legitimacy by acting as a Sultan would act. I had been trying desperately to find an ally, someone in the world to take up arms against my enemy on my behalf, as my father had tried. Seeking allies was important (necessary really) but it had become more than that to me. I felt so strange, so alone and different. I felt that outside confirmation would make me feel whole. But I was rejected everywhere and by everyone. Even those who had an interest in my success. No one trusted me, they didn't understand me. I tried to project the male aspects of myself, to make myself seem like the other leaders (for my own sake, if not for theirs), but I was denying something about myself. I sought their daughters for marriage, I played their dynastic games, I thought of war on their terms. But I was denying something about myself in these encounters. I was different. But I understood now, that didn't have to mean I would be alone. \n\nCin was there for me. Arkadas was there. Kardes, Soyguncu, Saygili, and others were there as well. They had not (all) been there waiting when I first became Sultanah, I had had to work to find them. And to keep them. But now I had earned their loyalty. And we were stronger because of it. They would not have been a sufficient Inner Council for someone else, a normal, male Sultan. A bunch of women, a thief, a glorified guard. But I was not a normal, male Sultan. The world was not designed for me. But I was making a place for myself by working harder, by finding things that other people didn't want and using them in ways that no one else could. \n\nWho else would want two cocked concubines? Even two as beautiful as K\u0131vrak and Peri? They would not know what to do with them at best, be disgusted at worse. But I had felt whole here, physically and spiritually, in a way I never did when I worked against my nature. They had filled me and made me feel invincible. I had searched through the trash of men, to find the diamonds in the rough for a Sultanah. It would not have worked for anyone else, but it gave me strength.\n\nThese thoughts truly illustrated Cin's insight or, perhaps the insight of Gunes, because I would never have been able to see the connection between this issue and my problems with my wife, Nislani. Why was I still in conflict with her? I had spoken honestly with Cin, my hatred of her had truly burned away. But if that was the case, what did we have left to fight about? What did it mean when I thought that we were not connecting? Perhaps it was not her or me, but the boxes we had placed ourselves in. I had married her. She was my wife and I was the...husband. We tried to fill those roles because that is what we knew and that is what everyone else expected, even if they were disgusted by us. But that wasn't who we were. I was not a husband. Nislani was not a wife. Placing a hat on a dog does not make him a man. But there was something there, between us. There had to be, Gunes would not have put us together otherwise. \n\nAnd that was the realization that I had, covered in seed and panting on the cold floor of my harem, surrounded by concubines with cocks. I was thinking about my policy in a fundamentally flawed way. At the same time, I was thinking of my marriage in a fundamentally flawed way. What I needed to do was stop thinking about what I was supposed to do based on what anyone else would do. I was not anyone else. I needed to work harder and think about my situation differently. I needed to find connections on my own terms. And when I did, they'd be stronger than steel.\n\nEnd Chapter 11\n\n*****\n\nNote: I honestly write so that I can hear the comments you all give. So please just tell me what you think. Even if it is just a sentence or two (though I always prefer more). Consider that your payment for a free story. And if you like this, I beg you to read my other stories and comment on them too. I know who my loyal readers are and I really appreciate you. Thanks!\n\nYKN\n\nP.S. I do one edit of my work and I try to be thorough. But I figure when it comes to handing out free erotica, you all would be better served getting it fast (if a little rough), than waiting for me to polish it like I was getting paid for my work. Especially on a massive project like this, it took a year to write and could take longer to edit. So, in short, I know there are some errors and I don't really care that much. Don't complain about the soundtrack in your porno, don't sweat the typos in your erotica. Thanks.\n\nYKN"
    ],
    "authorname": "YKN4949",
    "tags": [
        "epic",
        "medieval",
        "serial",
        "tranny on tranny",
        "shemale on shemale",
        "translesbian",
        "anal",
        "group",
        "hermaphrodite",
        "threesome"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/the-sultanah-ch-11"
}
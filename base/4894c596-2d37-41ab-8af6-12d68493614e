{
    "title": "Babysitter, Nanny, Friend ...",
    "pages": [
        "Babysitter, nanny, friend ...\n\nBy Sandy Paris\n\n \n\n \n\nThe babysitter grows up and finds new roles. There will a long lead-in before there is any sexual activity, so if that is what you're after, look elsewhere. It's a long story, stick with it.\n\nAll characters are fictitious and over eighteen when involved in anything sexual, which is all consensual. Any resemblance to other persons is accidental.\n\nI only had to make a few minor changes to my homework when I read it over again. Then I saved it, backed-up and shut down the laptop. I smiled as I ran my fingers over the case, it had been my seventeenth birthday present and something that I'd coveted for a while. I packed all of my books back into my school bag, stretched and headed downstairs. Hopefully Mum would have started on dinner because I was starving.\n\n\"Hi, Mum. What do you need me to do?\"\n\nMum turned and smiled as she answered, \"Hi Isla, everything's done, I've got enchiladas in the oven. You could get the cutlery out and fetch the sour cream from the fridge.\" I did that, poured myself a soft drink and sat down.\n\n\"Did you get your paper finished?\" Mum enquired.\n\n\"Yes, that's the last one for history. I need to sort out my revision plan and get down to it. The thought of these exams terrifies me.\"\n\n\"You're a smart kid and you work hard, I don't think you need to worry too much. You should hear how some of my friends and colleagues talk about their kids. I'm proud of you, I'm sure you'll be okay.\"\n\n\"Thanks, Mum. Nicola and I have been invited to a party on Saturday. It's at a hall over at Kelvindale, would you give me a lift?\"\n\n\"Okay. I nearly forgot, do you have plans for Friday evening?\"\n\n\"No, why?\"\n\n\"I met Eve Green in the supermarket; you know her, stays over on Oban Road. She asked me if you did any babysitting, she has a one-year-old and has been invited to a dinner dance.\"\n\n\"The money would be good, but a one-year-old might be a bit much.\"\n\n\"I'm sure you'd cope, you've looked after your cousins, changed nappies, made up a feed. I've got Mrs Green's number here somewhere; give her a call after dinner. Maybe go over and meet her.\"\n\nAfter school the following afternoon I got off the bus two stops early and walked the half-mile to the Green's home. I'd met Mrs Green a couple of times before, but I don't think that I'd ever studied her closely until she opened the door and invited me inside. She was an inch smaller than me, so about five feet eight, slim with a neat waist, which her skirt emphasised. It was a few inches above the knee and showed great legs, which made me envious. As we sat on the couch I noticed that she had a pale complexion, with nice blue eyes. She wore mascara, but very little other make-up and her dark hair was centre-parted turning under as it rested on her shoulders. She had a wide smile, she was gorgeous. Her skirt and sweater didn't come from M&amp;S and were beyond my budget.\n\n\"So Isla, your Mum's says that you've done babysitting before and have taken care of babies.\"\n\n\"Mrs Green, my Mum loves me and will tell everyone how wonderful I am. I've done plenty of babysitting, but never sat for a baby, anyone under six actually. I have a couple of cousins who I've looked after for a short time, changed and fed them, but I've never sat for anyone as young as your son and I don't want to mislead you.\"\n\n\"You're very honest, I like that. Would you be comfortable do you think?\"\n\n\"Pretty confident, if anything was bothering me I could phone my Mum or you for advice. If he needs changing or fed that's no issue and if he cries I can comfort him. Anything else, that's where I'd need to ask for help. Can I meet your son? It's Oliver isn't it?\"\n\nWe headed upstairs to the nursery, which was a largish room with soft lights, lots of mobiles, toys and a nice cot. Oliver was peering through the bars and started giggling when he saw us enter the room. I went over and spoke softly to him, After a glance at Mrs Green I picked him up. He giggled some more as I spoke to him and it was clear that we got on okay. He seemed to be a lovely little boy and I had no doubt I'd enjoy looking after him.\n\n*****\n\nI slipped out of my school uniform and into a pair of jeans. I brushed my long, very dark hair as I stood in front of the bathroom mirror. My fringe had come about by accident, but as time passed I got used to it and never bothered to change it. I quickly twisted the hair into a loose bun. I had brown eyes and a heart-shaped face on top of, what I thought was a long neck. I'm pretty skinny; don't have much of a bust and long legs that needed to fill out a bit. Maybe my bust would fill out as well over the next few years. I sorted out the books I thought that I might need and slipped them into my laptop bag, along with my phone and purse.\n\nAs soon as dinner was cleared away Mum gave me a lift over to the Greens' home. Michael Green was a tall man with some grey appearing at his temples that made him look quite handsome and distinguished, more mature than his age. I knew that he was twenty-nine because I'd seen a pile of birthday cards on my last visit and his wife had commented that she was putting them in a memory box.\n\n\"You must be Isla, come on in. Eve's just finishing getting ready.\n\n\"Hello. Yes, I'm Isla. You look quite dashing.\" I giggled when I realised what I'd just said.\n\n\"Thank you, that's nice of you, now you're embarrassed and turning red.\" He was teasing and paused. \"I just need to wait for Eve to tie this bow tie. I can never manage it.\" Mr Green seemed like a nice man and I liked his smile.\n\n\"Let me try. I've done my Dad's, but that was a few years ago. He could never do it either.\"\n\n\"Really?\" He looked surprised at the suggestion. I shrugged and stood in front of him. I wasn't hard to do on someone else, but I was sure doing it while you were wearing it would be difficult.\n\n\"There,\" I said as a stood back. It was then that I was aware of Mrs Green in the room.\n\n\"Mike, I know she's gorgeous, but she's the babysitter, so leave her alone.\" She turned to me, \"Thanks for doing that Isla. He looks quite dashing doesn't he?\"\n\n\"Yes he does, that's what I told him, but no one's going to notice him beside you tonight.\" She wore a long dress which appeared to be a dark blue sheath beneath a greenish fine chiffon overlay. Her cleavage was not exactly demure, her hair was up and the make-up very dramatic.\n\nShe smiled, \"I look okay then?\" Mr Green nodded and I was surprised that his tongue wasn't hanging out.\n\nI'm sure that I looked a bit stupid as well; they were a very good looking couple. \"You both look ... hot?\"\n\nOliver was awake when I went to check on him as soon as his parents had left. He giggled when I picked him up. We went for a walk around the house and I pointed everything out to him. Actually, I was being a bit nosey and wanted a look around. It was a modern house with four bedrooms and three bathrooms. Each room was nicely decorated and looked homely. Eve had quite a collection of clothes and shoes, now I admit that I was snooping just a bit, but I merely opened the wardrobe doors and peeked inside, nothing creepier than that. I was envious of her style and the rather lovely things she owned. The ground floor was open plan, kitchen, dining and living area all in one big open room with huge glass doors onto the garden. There was also a small lounge and study. All in all, a delightful home.\n\nI played with Oliver for a while, then read to him and he was soon asleep on the couch where I could keep my eye on him. I made myself a cup of coffee and sat working through some revision. When I went to make another drink I called my Mum to let her know things were okay and I'd only just hung up when the phone went again. This time it was Eve checking in and of course, it woke Oliver up. I changed him, gave him a drink and put him to bed, staying in his room until he dropped off.\n\nThe Green's got back just after midnight, earlier than I expected. I had a cup of tea with them before a taxi arrived to take me home.\n\n*****\n\nNicola was waiting for me in the doorway of a shop when Mum dropped me off. \"Hi, Nic, sorry have you been waiting long?\"\n\n\"No, got here exactly one minute ago. The place is just over there.\" We hooked arms and walked over the road. The party was being held for one of our classmate's birthday and although we weren't close friends, she'd invited Nicola and me.\n\nI hung our coats up and admired the trousers that Nicola was wearing. \"Jeez, girl they look great, not much room for eating with them.\" They were very close fitting and she also wore a nice blouse, looking a good deal more mature than she was.\n\nHer eyes opened wide as she stared at me. \"And if your skirt was any shorter I'd be able to see your navel.\" I laughed, it was short and my legs looked good, even if they were a bit skinny.\n\nAs parties go it wasn't outrageous; there was music, dancing, some good snacks and a low alcohol punch. We all knew that there was booze aplenty hidden in pockets and handbags, including mine. Just enough Bacardi for Nicola and I to enjoy with our cola. We danced together and with a couple of the boys, but by the time midnight arrived I was ready to go home. When I reflected on the evening later, I realised that it seemed to be a bit immature for me. I wanted something with more substance and conversation about events, issues and not who was sleeping with whom or what I thought about the latest celebrity show on TV.\n\n*****\n\nIt was about a month later that I next went over to take care of Oliver, as his parents were out for the evening. This time I didn't have to worry about revision, exams were over and they seemed to have gone well. I played with Oliver for a long time and he liked me reading to him. He was a lovely little boy and very little trouble.\n\nI confess that I snooped a little more this time. I checked out Eve's wardrobe and several items of her clothes, I didn't try them on, just looked! She was a stylish dresser; there were a few things I'd like to have owned and some very nice shoes.\n\nI must have been over there half a dozen times, mainly when Eve and Mike went out for the evening. I was also there a couple of times during the day when Eve had to go into the office or had some other engagement. I really enjoyed looking after Oliver; he was great, very funny and made me smile. He loved going for a walk, well I did the walking and the pushing, but he liked feeding the ducks and watching all of the activity in the park and on the streets. Every time a bus went passed he pointed and giggled. One day I was shopping with mum and happened to see a toy bus, it must have been about six inches long made of red plastic. His little face lit up when he saw it and it made me very happy. Maybe one day I could be a Mum to a little one, just like him.\n\nGirl's night\n\nMum was away at a business meeting and staying overnight, so I was on my own. I decided to call at the supermarket to pick up something for my dinner and maybe a wee treat of some sort. I was wandering, browsing, with a basket over my arm when I heard a child crying and spotted a frazzled looking Eve. \"Mrs Green, are you okay?\"\n\nShe looked even more harassed close up but forced out a smile. \"Hi, Isla, sorry Oliver is being a bugger. Trying to manoeuvre both his buggy and this trolley is getting to me. I'm sure that one of these wheels is square.\"\n\n\"Okay, let me deal with Oliver and you get what you need. I'm not in a hurry and have what I came for anyway.\" I managed to get Oliver out and cuddled him. He stopped crying and giggled at me.\n\n\"I have no idea how you do that. Are you sure it's no trouble, I don't want to keep you back?\"\n\n\"I'm good. My Mum's away overnight, so I was just getting a ready meal and some chocolate. I'll help you and maybe you can drop me off.\"\n\n\"It's a deal.\" She smiled. I got Oliver settled in his buggy again and kept talking nonsense to him as Eve collected her groceries. As we headed towards the tills she checked out the contents of my basket. \"Not sure that looks very exciting. Are you going out later?\"\n\n\"It's fine, I'm having a night in front of the telly and I have a good book on the go.\"\n\n\"Mike's away tonight. Why don't you come over and we can have dinner, a girly night, lots of gossip and maybe a movie?\"\n\n\"Mrs Green, aren't I a bit young for you to be spending time with? I'm not complaining, in fact, it might be nice.\"\n\n\"I don't think so. You're a remarkably mature young lady and I like you. Come on, we can have fun, we won't be sad lonely people and Oliver loves you.\"\n\nOnce we got through the checkouts we packed the car and Eve dropped me at my home. \"If you want, you can spend the night, pack a bag.\" She laughed as she drove off.\n\nI went inside to get changed and thought about her invitation. Eve is gorgeous and really nice; I like Oliver, so it couldn't be any worse than kicking about here alone. I packed some clothes for the next day, a nightshirt and a few toiletries. It took me fifteen minutes to walk over there by which time Eve had everything put away and was sorting out Oliver.\n\nShe called to me. \"Hi, Isla. Do you fancy pasta and some garlic bread? If so stick a pan of water on to boil and warm the oven for me. I'll be there in five. Oh, and open the wine I left out.\"\n\nI wasn't much of a wine drinker, but a glass might be nice, so I popped the cork and tried a sip. I could get used to this. I got cutlery and crockery ready and helped Eve with the cooking, not that there was much to it.\n\nEve cleared away whilst I played with Oliver before we went to put him down. Then we settled on the sofa with another glass of wine and the chocolate handy.\n\n\"Where's your husband?\"\n\n\"He was seeing a business client and talking to a supplier today. It was a bit late to travel back tonight and it just so happens that his favourite football team are playing an away game this evening, not far from where the meetings were. Do you think that there was a plan or that it was just chance?\"\n\nI smiled, \"I suspect that the stars aligned. I suppose it makes sense, but it does leave you and Oliver on your own.\"\n\n\"Ah, but I'm not on my own, I'm with you. So tell me about school and what plans you have.\"\n\n\"School's fine, but I don't pretend to like it much. I know that I need to work hard so that's what I do, it doesn't win me many friends and to be honest, I hate all that bitchy gossip; who's in, who's out and all that talk about boys. Either some of them have really good imaginations or they're sluts and I suspect the former, at least for most of them.\"\n\n\"No boyfriend or anyone you have your eye on?\"\n\n\"Nope, none of them interests me at all.\" A look of something I couldn't decipher crossed her face. \"What is it?\" I asked.\n\n\"I'm sorry and it's none of my business, but are you interested in girls?\" She went red and so did I.\n\n\"What? No, why do you think that?\"\n\n\"Isla I'm sorry. I was rambling on about boys when I had a thought that maybe ... It doesn't make any difference to me but ...\"\n\n\"No, I've never thought about girls either. Maybe I'm ... I don't know the right term, asexual?\"\n\n\"I doubt that, you just haven't thought about it yet. One day you'll meet someone who pushes the right buttons. Let's face it you're smart and attractive, you'll be fine and working hard will put you in the best place. What about university?\"\n\nI sighed, \"I'm keen to go, it'll be better than school anyway. But I'm not sure what I want to do long term. I love literature and history, but there aren't many career options. I'd like to write, but not many people become novelists.\"\n\n\"There's no hurry and it may well become clear in time. Have you written anything?\"\n\n\"I've written a couple of poems, a short story and I have an idea for another one brewing.\"\n\n\"Could I read them?\"\n\n\"Really?\" Her request surprised me.\n\n\"Why not?\"\n\n\"Okay, I'll email them to you later. What did you study at University?\"\n\n\"I studied Business Management to Honours and of course that's where I met Mike. After I graduated I went to work for a consultancy, but I became pregnant with Olly at twenty-five. We decided that I'd take some time to look after him full time. What happened to your Dad, he's not around much is he?\"\n\n\"No, Mum and he have moved in different directions. When he got the chance to go and work in the Far East he took it. I think it's better for both of them. I mean, I still miss him and he pays his share, but we were never as close as some kids are to their fathers. He never seemed to be that interested in ...\"\n\n\"I'm sorry Isla, I didn't mean to upset you.\"\n\n\"It's okay. My Mum loves me, I'm lucky. What about your parents?\"\n\n\"They went to Canada a few years ago, we have extended family there. Then my Mum died and I haven't really had much contact with my Dad since. He's never met, Oliver. He was a stranger to me, maybe a bit like your Dad. Mike's Mum doesn't really like me that much. I stole her son and I suspect that even a Princess wouldn't meet her standards. What a pair we are.\"\n\nWe had a couple more glasses of wine and talked for hours. It may have been the best evening I'd had in a long time. I sent Eve an email with one of my poems and a short story attached to it before we eventually went to bed. I lay thinking, something was nagging at me, but I couldn't put my finger on it.\n\nI must have just dozed off when Oliver started crying. I was out of bed and in his room before I gave it a thought. I had him in my arms when I saw Eve standing there looking all shaken as if she'd been in a deep sleep. She was trying to tie her robe, in that brief moment I caught sight of one of her breasts and a hint of her pubic triangle.\n\n\"It's okay Eve, I've got this.\"\n\n\"But Isla, you're not here to babysit.\"\n\n\"I know, but I heard him and it was instinct. Put the kettle on and I'll settle him.\" She turned and went away. I have no idea why she did as I suggested; actually, I have no idea where that came from. We sat for long enough to drink our tea before heading back to bed.\n\nNow I lay awake because of other thoughts -- the sight of Eve almost naked. She was beautiful, no doubt about that, but there was more to it and my mind went back to the conversation earlier that evening. It didn't take long before I had to consider the possibility that I might be more interested in girls, certainly ones that looked like Eve.\n\n*****\n\nTwo days later I heard my phone ring as I was leaving the bathroom and dashed to pick it up. I saw who it was from the caller display. \"Hello Eve, is everything okay?\"\n\n\"Yes, everything's good thanks. I read your story and the poem. I wanted to tell you what I thought of them.\"\n\nThat made me a little apprehensive; somehow it felt really important that she liked them. \"Okay, I feel nervous now.\"\n\n\"You don't need to be. I liked the poem, it's good and I'd be pleased if I could have captured my thoughts about flowers like that, but the short story is amazing. The angst that you created between the characters was great and you showed real skill in describing the emotions that Elizabeth felt when her best friend died. I loved it and think it's brilliant.\"\n\nThat meant a great deal to me. \"Thank you, I appreciate your comments. My teacher liked it and it's good to know that you did as well.\"\n\n\"Maybe writing is something that you should think about.\"\n\n\"I will, I am, but it's a year away yet.\"\n\n\"Mike's away next weekend, more business and football. Do you fancy coming over on Friday evening for another girl's night.\"\n\nI didn't have to give it much thought, \"Yeah, that would be nice.\"\n\n Another girl's night\n\nEve had taken some trouble over dinner, this time we ate a big bowl of chilli and some cheesecake, both of which she'd made herself. I was impressed. We spent an hour playing with Oliver and I helped him with some words, but he was still a bit young for that. He giggled a lot and that made me giggle as well. Eve had been watching us, \"He likes you and always giggles, then it makes you do the same, it's really quite cute. I think that you'll make a great Mum.\"",
        "\"Oliver makes me smile whenever I think about him, never mind when I'm actually with him. As for being a Mum, I hadn't given it much consideration until a few weeks ago. Then it occurred to me that I'd love to have a wee one like Oliver. I wonder if I could be as good as you are and in any case, I need to find someone to have kids with first, and that will be a ways off.\"\n\n\"You'll be a great Mum, you have an instinct for it and you'll find someone, you're a nice person and gorgeous with it.\"\n\n\"Thanks, but I doubt if I'll ever be as beautiful as you.\" I shook my head gently.\n\n\"Thank you for that, but you will unless I'm very much mistaken.\n\nIt turned out to be an interesting evening. Amongst many other topics, we spoke about Eve's former boyfriends, which was illuminating, but I had the feeling there was something else that she wasn't saying. I drank more wine that night than I had before and was feeling a bit tipsy when Eve put me to bed, after phoning my Mum to confess that she'd given me too much wine.\n\nI was a bit sheepish the next morning, but I was pleased not to be suffering from any ill effects. Eve wanted to go to the supermarket so I offered to take Oliver to the park where we fed ducks, stroked a dog, watched some kids playing football and watched the buses go by.\n\nMum and I talked when I got home. Something was nagging at me and no matter how hard I tried I couldn't pin it down.\n\nNicola\n\nI hadn't seen Nicola for a few days and was surprised when she phoned me. \"Isla, sorry are you busy tomorrow?\"\n\n\"No, is something wrong?\n\n\"Yes, it's that guy I was seeing and ... it's awful. I need someone to talk to and it can't be my folks.\" I could hear the distress in her voice.\n\n\"I could meet you in half an hour, in the park?\"\n\nI found her sitting on a bench and it was clear that she'd been crying. I sat down, put an arm around her shoulder and said, \"Tell me about it, when you're ready.\"\n\n\"That guy Jim. I was nuts about him, he was nice, hot, but turns out he's a bastard, a miserable fucking bastard of the worst kind.\"\n\n\"Okay, take your time. I know that you've been going out for a few weeks but that's all.\"\n\n\"Last night we went back to his place, it was good. We were kissing and I'd decided to have sex with him, but I hadn't told him that. Things were getting pretty heavy, we were almost naked; suddenly I panicked and started crying. I couldn't go through with it. He tried to force me to give him a blow job and called me all sorts of names, 'prick tease', that sort of thing. I tried to explain to him that I'd lost my nerve, but he was having none of it. He threatened to force me and I was terrified.\"\n\n\"Okay, take your time.\"\n\n\"He tried to force his hand into ... so I kneed him in the nuts, grabbed my skirt and shoes and ran. It was one o'clock, I had no underwear, my blouse was ripped and I was so scared. I hid for ages and then ran for, what seemed like miles, until I could get a taxi home and sneaked in so my folks didn't see me.\"\n\nRight at that moment, I heard a familiar voice. \"Hey Isla, are you okay?\"\n\nIt was Eve pushing Oliver, he giggled when he saw me. \"Hi, this is my friend Nicola, she's had guy trouble.\"\n\nEve sat down and looked at Nicola. \"It seems serious.\"\n\nI nodded, \"It is and she needs to confide in someone, but I'm stuck here, it's ...\"\n\n\"Why don't you both come home with me? We can make tea and the two of you can talk, better than here and if you want, I might be able to help.\"\n\n\"Nic, Eve is lovely and you can trust her. It's a good idea.\" She nodded her agreement and the two of us followed Eve arm in arm.\n\nWe went and sat in the lounge. Nicola looked up at me, \"Is she the one you babysit for? The one you told me about?\"\n\n\"Yes, she's wonderful. You don't have to tell her anything, you and I can talk, but she's ... I think she might be able to help you more than me.\"\n\nEve made tea and then sat with us. She held Nicola's hand as she spoke whilst I sat with my arm around her. She'd obviously been very scared and thought that it was the end of the world. It took about an hour, lots of questions and some soul searching before Nicola seemed to get a better perspective on what had happened. I know that I certainly felt better by the time the two of us left Eve's house and most of that was due to Eve.\n\nA couple of days later Nicola phoned me when I was sitting in my room reading. \"Thanks for what you did the other day, I was out of my mind with worry, but I think ... It's over now and could have been much worse. Will be seeing Eve soon?\"\n\n\"In a day or two, probably.\"\n\n\"Would you thank her for me again, she helped no end.\"\n\n\"Of course,\" I replied\n\n\"You didn't tell me how bloody gorgeous she is.\"\n\n\"She's quite beautiful and her husband is a hunk. They make a good looking couple and Oliver is really sweet.\"\n\nTragedy\n\nSchool was looming again. My final year started in ten days, so I made the most of the good weather and covered lots of miles on my bike. I was as fit as I'd ever been and my legs now had some definition, but my bust was still hiding somewhere.\n\nI'd just got out of a much-needed shower, after completing my longest ever run and was pulling on some casual gear when my phone rang. It was Eve, who sounded as if she was in a bit of a state, but wanted my help urgently. She was rambling a bit and sounded confused, so I got Mum to run me over.\n\nEve looked very scared and was breathless as she spoke quickly, \"Isla, thanks for coming. Mike's collapsed and they've taken him to hospital by ambulance. I want to go and be with him, could you look after Oliver?\"\n\nIt sounded serious, so after she left I got Oliver dressed up and into his buggy. I walked back over to my house and left him with Mum whilst I packed a few things. I suspected that I might be there for a while and, as it turns out I was right. Eve called me late on that evening to check things were okay and I reassured her. I went to bed and she still wasn't home when I got up, so I got Oliver dressed, sorted out breakfast and we played with his toys.\n\nIt was lunchtime when Eve arrived back, looking tired and stressed. I made her some food and sat as she told me what had happened. \"Mike passed out, well maybe he had a seizure, but it scared me senseless. He's incoherent and the doctors aren't sure what's wrong, but I overheard them talking about cancer. I'm scared Isla, really scared.\"\n\nI went to hold her. We were friends and right now she needed a hug. It was sad to see her like this. \"Do whatever you need to do, I'll take care of Oliver and do whatever I can here.\"\n\n\"Thanks, honey, I'll pay you.\"\n\n\"No! We're friends, go do your thing, I've got this.\" The next few days were difficult, not so much for me, but it was a testing time for Eve who was clearly very worried. I enjoyed the time that I spent with Oliver and we did lots of fun things.\n\nA couple of times I went home to see my Mum and I'm sure that she also fell under Oliver's spell. She was very supportive and told me how proud she was that I'd stepped up to help. I thought about that when I had five minutes to myself. I liked Mike, Eve was a friend and they'd both been kind to me. I loved Oliver to pieces, taking care of him and looking after Eve's house was good for me. I also know that I felt comfortable being in that house.\n\nBy the end of the week, Mike was able to come home, but there were lots of tests scheduled and things looked decidedly concerning. I was back at school but spent several weekends with Oliver. Mum also helped out when Eve needed to take Mike to his appointments and I was at school.\n\nEvery time I saw Mike he looked to be going downhill, but Eve stayed positive despite the setbacks, which seemed to come every week. It took three months before Mike passed during the night, somewhat unexpectedly.\n\nEve was in a terrible state and I tried hard to help her. My main contribution was taking care of Oliver, but I felt a bit useless and wanted to do something more positive, although I had no idea what else I could do.\n\nOliver looked very sad on the day of the funeral. I'm sure he had no idea what was going on and Eve hugged him so tight I thought that she might smother him. After the service, I kept him distracted and decided to stay overnight in case Eve wanted some company. I'd just checked on Oliver when I heard Eve sobbing as I passed her room, so I opened the door and went over to the bed. I have no idea why I did what I did next, but I lay down, wrapped my arms around her and whispered words of comfort. Eventually, she settled down and I was going to leave, but she turned and looked at me. \"I'm sorry, would you stay. It's nice you holding me.\" I didn't move, being there with her gave me a nice feeling and I kept whispering to her until I heard her gently snoring and I kissed her neck. Suddenly, I realised what I'd just done and wrestled with that as I lay there. 'Why on earth did I do that?'\n\nThings were quiet after Mike's death. I went over to see Eve a few times; she was grieving and very sad. She devoted every moment to Oliver. I concentrated on school.\n\nChristmas\n\nThat Christmas wasn't very cheerful. I performed at the end of the term school play. I'd enjoyed the rehearsals and performances, but there was no sense of joy for me because of the sadness caused by Mike's passing.\n\nEve was due to spend Christmas Day with Mike's parents; Mum and I were on our own. About tea time I sent Eve a text message to wish her a Happy Christmas. She replied almost immediately to say that she was on her way home.\n\nI told Mum that I wanted to go and see Eve and Oliver, so she decided to visit a friend who lived around the corner from us.\n\nEve looked sad, tired and almost broken when she answered the door. \"Isla, what are you doing here?\" She tried to smile.\n\n\"I'm here to see my friend, to see if I can help or at least be someone to talk to.\" She grabbed me, pulled me towards her and hugged me tightly.\n\n\"Thank God someone loves me. I thought that it was just Oliver.\"\n\nThat made me think; did I love Eve? I suppose that I did, as a friend, there was nothing other than that. I extricated myself from her arms and went to see Oliver. I played with him for a while and read him a story until he fell asleep. It was then that I realised Eve was standing at the door watching.\n\n\"Come on my angel, I need a drink and to vent a little.\"\n\nWe sat at opposite ends of the couch with some wine and she asked me why I'd come over. \"It was a nice day, but just Mum and me. Then when I got your message I thought something had gone wrong and that you might need some company. I know I'm just a kid really, but maybe I can just listen.\"\n\n\"You're far from 'just a kid'. You're a lovely person, both Oliver and I are blessed that you're part of our lives. I have no idea how I'd have coped without you in the last few months. And you turn up to offer comfort when 'that bitch', the person who should have been there for us today, was just plain nasty.\"\n\n\"I assume 'that bitch' is Mike's Mum?\"\n\n\"Got it in one! She started okay and was great with Olly, but after lunch and maybe a glass of wine too many she started. I wasn't good enough for her son, I wasn't a very good mother and Mike died because I didn't look after him properly. That was the final straw. I knew that she thought the other stuff and just never said the words out loud. But not caring for him was an outrageous thing to suggest.\"\n\n\"That's pretty cruel and crazy. You're a great Mum, you loved Mike, I knew that and so did he. I'm not sure what else you could have done for him in those last few weeks, you were brilliant.\"\n\n\"Thanks, Isla. I'm not sure what else I could have done either. If I never saw her again I wouldn't care but she's Oliver's Gran so I'll just need to put up with it. It's bad enough for him to lose his Dad ... Maybe you could be his aunt?\" She laughed and so did I.\n\n\"He's lovely and I'd be happy to help, you know that. I know that you're so much older and more mature than me, but I think you're my best friend.\"\n\nShe slapped my arm, \"Easy with the much older thing, only ten years. I appreciate that and you are a good friend.\" We chatted away for ages and by the time she was ready for bed she seemed much better. I strolled home as the snow started falling, feeling good about myself and things in general.\n\n*****\n\nAt breakfast, I was telling Mum about what had happened to Eve and she suggested inviting her over to spend the day with us. Eve accepted and the four of us had a great afternoon playing with Oliver. Then we played a board game and chatted. Mum and Eve cooked dinner whilst I read to Oliver. It was over dinner that Eve opened up about Mike's business.\n\n\"Mike's father started the business and it floundered a bit after he died. Then after Mike graduated he put in a lot of hours and expanded things. He put good people in place to organise the work and supervise the manufacturing whilst he looked after suppliers and customers. Because he was his father's son he was accepted and business was good.\" She paused to sip wine and collect her thoughts.\n\n\"Since Mike became ill there's been a power struggle between two of the senior staff and it's not ideal. It worries me, but I've asked one of them to take control and sort things out. In the new year, I'm going to get a bit more involved.\"\n\nEve seemed to brighten as she carried on speaking, \"But enough about business. This has been a lovely day and I want to know if you've written anything else.\" We chatted about my writing, but Eve didn't stay for long as Oliver was almost asleep.\n\nAfter Eve left I started clearing up, emptying the dishwasher and sorting out the leftovers that had been dumped, haphazardly, in the fridge. Mum was making tea when she looked at me and asked, \"Have you got a crush on Eve?\"\n\nI spun around so fast it made me dizzy and I felt the red scorching up my neck and face. \"What?\" I almost screamed.\n\n\"You heard and I suspect that I'm right. It's okay, she's a lovely woman, poised, elegant, beautiful, very clever, a good role model. It's okay; you could do much worse than emulate her.\" I was stunned and didn't say anything but headed for my room as soon as I decently could.\n\nI lay staring into the dark and examined my brain. Mum was right, I did have a crush on Eve and I thought back to the night that I'd held her. I'd reflected on that several times and couldn't deny that what I'd felt was new, exciting and scary.\n\n*****\n\nI hadn't seen Eve for almost two weeks until she invited me over for the evening. I stood open-mouthed when she answered the door. Short skirt, long legs, heels and a woollen sweater were things that I'd seen many times, but it was her hair that transfixed me. It was close-cropped, seemed darker, cut revealing almost all of her ears, square across the back and side-parted on the right, almost a man's cut.\n\n\"Like it?\" She asked.\n\n\"Fuck me, Eve, it's stunning.\"\n\nShe laughed. \"I've never heard you swear before.\"\n\n\"I've never seen anything so ...\"\n\n\"Sexy?\" She asked with a smile.\n\nI nodded. I was thrown, it was beyond sexy and although she'd always been gorgeous, now she was something else and there was a feeling that I'd only had once before, on the night of the funeral when I'd kissed her neck.\n\nWe had a terrific night, again I probably drank too much, but we laughed about all sorts of stupid things. Eve behaved like a teenager and I took every chance that I could to admire her hair. It seemed impossible to believe that such short hair could make anyone look sexier than they already were, but the truth was right there in front of me.\n\nThat night I realised that I had some feelings for Eve that were more than just friends. I fancied her and would love to have kissed her. It was insane, the age difference, was I gay? She didn't seem to be. It took me a while to get to sleep that night.\n\n*****\n\nOver the next few months, Eve got more involved in the business which meant that Oliver was in day-care a few days each week. One evening when I was over visiting she moaned that she didn't like leaving him with strangers, but that she had no choice.\n\nIt was a difficult time for me, exams were getting closer and I was putting in a huge effort at school so I was occupied all of the time. Eve didn't need a babysitter in the evenings as she wasn't going anywhere, but it became a habit for me to go over late every Saturday afternoon, spend a few hours playing with Oliver, reading to him and then having dinner with Eve.\n\nIt was just a simple, innocent, comfortable thing between two friends who enjoyed each other's company. I still had a bit of a crush, but it was all under control.\n\nAfter the exams were over I felt as if a huge weight had been lifted. I knew that I'd done okay and I'd been accepted for a place at Manchester to read English literature. Dad had surprised Mum and me by inviting me to Thailand for a couple of weeks. It was a great chance so I accepted. I spent two weeks before I went looking after Oliver every day. By now he was really lively and we had great fun playing, reading and going for walks. Being with him was a pleasure and I helped out by looking after some of the household chores for Eve.\n\nThailand was wonderful. I enjoyed spending time with my Dad, even though he was at work every day. It was easy for me to get to the beach and the city centre, so I had the chance to explore. One day I was wandering when I happened to pass a dressmaker and somehow they persuaded me to have a dress made. It was a fairly traditional style in blue silk but was suitable to be worn at home. It hugged me and I knew that it looked good when Dad's eyes almost popped out of his head. He sent me back the next day to get another one, this time it was a knee-length red silk dress that would be perfect for a date.\n\nDad confessed that he was enjoying his life in Thailand and although he missed Mum, he knew that they'd gone their separate ways. He apologised to me for not being there during the last few years, but he was proud of how I'd turned out. \"I see your mother in you and that's no bad thing, she's a remarkable woman. Make sure that you find a good guy, someone who makes you happy.\"\n\nMum was pleased to see me back home and we spent hours talking about her and Dad. I realised that Mum was a pretty special person and that she'd been a great influence on me. Over dinner one night she admitted, \"I'm going to miss you when you disappear, but you need to go, to gain some independence. Oh, I saw Eve yesterday and she was asking for you. You should call her and go over. She told me how much she valued your friendship since Mike ...\" There was a pause, \"She feels that everyone's deserted her since Mike went, except you, and Oliver misses you.\"\n\nI arranged to go over and see Eve on Friday evening and in the meantime covered a lot of miles on my bike. It was good to be out in the fresh air, getting exercise and not feeling guilty about not studying. After a few good runs the strength was back in my legs and they were looking good. I had a nice shape to my calves.\n\nOn Friday I put on my new red dress, did my hair and make-up before strolling over to Eve's. \"What? Isla are you going on a date, I thought we were having a girls night?\"\n\n\"We are. I just thought that I should show you my new dress and that it wouldn't do any harm to get dressed up.\"\n\n\"Well, you look amazing. Thanks for that, now I feel like a dowdy old bag.\"\n\nI burst out laughing. \"Eve, I doubt anyone would think that even if you wore an old bag, you're gorgeous...\" I hesitated, \"Maybe just a bit sad. Come on, let me see my boyfriend.\"\n\nEve went to pull on a skirt and some more make-up while I spent time with Oliver. We ate Chinese food and drank wine all the time talking, talking, talking. We watched a movie on TV and sat close together.",
        "Eve was making tea when I went to the loo and I heard Oliver, so I went into his room and cuddled him for a while; so long that Eve came looking for me. \"I suspect he woke up because he wanted to see his girlfriend in that dress again.\"\n\nI stayed over that night and slept soundly. I was pleased not to have dreamt about Eve, maybe I'd regained my senses and she was just a friend and nothing else.\n\n \n\nBreak a leg\n\nEverything was so bright it made me squint. My sight was all blurred initially and as it cleared I realised that I was in the hospital. Then I felt the pain in my left ankle and winced.\n\n\"It's okay honey, you're okay. You're in a hospital.\" Mum was sitting nearby.\n\n\"Why am I in hospital Mum and what's the pain?\"\n\n\"You were knocked off your bike and they brought you here. You have a broken ankle and they had to operate to fix it.\"\n\n\"Operate, fix it? What's wrong with it?\"\n\n\"You have a break just above the joint and they had to insert a metal plate to strengthen things up.\"\n\n\"Oh, shit Mum. What about university?\" It was my first thought and I felt the tears coming. I'd been looking forward to going away and meeting new people.\n\n\"I don't know yet love, but it looks like you might be off your feet for a few weeks at least, then some physio and maybe another op.\"\n\nNow the tears started properly, I was going to be stuck for a while and I was gutted.\n\nThe following day Eve turned up with some chocolates, magazines and a big smile. \"Hi, how are you? Aside from the obvious bruises and grazes.\"\n\n\"It's nice to see you and I suppose I should be pleased that I'm not dead, but I'm gutted about the university. Still, I should be asking how you are, and Oliver.\"\n\n\"He's outside with your Mum. Would you like to see him?\" I nodded.\n\nOliver had a big smile; he jumped up on the bed and gave a hug which made me feel much better. \"I have an idea. It seems like your recovery is going to take some time. You could defer university for a year and give yourself time to recover.\"\n\nI was glum. \"Looks like I may have to, I was looking forward to going so much. But what would I do?\"\n\n\"I know it's not what you hoped to be doing, but here's my idea. I need to get a better grip on the business or it's going to turn into a disaster. I hate the idea of child care, especially at this stage of Oliver's life, so you could come and work for me as a nanny, look after him and maybe me. It's a solution, I'd pay you a decent wage of course, and next year you could start at University, you'll just be a year older and you might be able to get some reading done before then that will help you.\"\n\nOver the next few days, I gave the idea a lot of thought. When I asked my Mum what she thought, she waited for ages, obviously getting her reply clear. \"I think that it's a good idea. You'd give yourself too much to do to catch up. Take your time, do your rehab, take up Eve's offer. It may not be what you'd most wanted, but under the circumstances, it's a good option and I think Eve will enjoy your company.\"\n\nThat was what I'd been thinking as well, but the last sentence puzzled me a bit. \"If I'm just acting as Nanny she won't see much of me.\"\n\nMum looked surprised. \"I think that Eve expected you'd go and live with her. It makes sense and that's what I thought as well.\"\n\nThat stunned me; I'd never given that a thought. As the days passed I realised that it was sensible, but leaving home was something that I'd only planned when heading to university.\n\nNanny\n\nIt took a couple of weeks before I was able to get around a bit easier and take up Eve's offer. Mum dropped me off at Eve's and both of them helped me in with a suitcase, a holdall and my laptop bag. Eve showed me the larger of the two spare rooms, the one with its own bathroom and I unpacked. Although I'd been in this house many, many times this felt a bit odd, suddenly it was my home for the next nine or ten months. I headed back down to the kitchen using my stick.\n\n\"All settled in?\"\n\n\"I'm unpacked, but not sure about settled yet. This seems a bit odd.\"\n\n\"Isla, please don't feel odd. I know that I'm paying you so you're my employee, but I'd like you to be my friend as well and you need to treat this place as your home because that's what it is. Since Mike went lots of our friends have kept their distance. You've been kind, I need help with Oliver and you're stuck because of the accident. This is a solution for all of us, so please lets you and I be friends and behave like it.\"\n\n\"I'll try my best, but we need to sort out boundaries as we go.\" She poured me a glass of red wine and dished up dinner.\n\nOver the next two weeks, I became more comfortable. I managed to plan meals, sort out laundry and a system for housework. I was struggling with shopping but made lists, ordered online and Eve dealt with the supermarkets for the other stuff that we needed.\n\nLooking after Oliver was pretty easy, he was funny and well behaved. I spent hours helping him with Lego, playing with his farm animals, painting - messy, drawing and dressing him up. I spent some time each afternoon reading to him and we managed a few words as we went. I counted with him and managed some simple sums. If the weather was good we were out in the garden, but I still found it difficult to walk far with him so the park was out of the question for the time being.\n\nAfter dinner most evenings, whilst I cleaned up, Eve bathed Oliver and put him to bed. Then the two of us would chat and watch TV. We were good together and Eve became like my big sister. We shared a lot and after a few weeks she even spoke about sex and I admitted that I was not only a virgin but had never been touched intimately by another person.\n\nI'd wanted to be away learning and preparing for my adult life, but circumstances had prevented that so I made the best of it and found that I liked being there, spending time with Eve and loving Oliver. I felt as if he was mine, at least partly.\n\n*****\n\nIt took a couple of months before my leg was strong enough for me to lose the stick. I kept up my exercises and felt more confident, but I had a scar. It might have been a coincidence, I have no idea, but my legs developed a better shape and my bust filled out as well, so much so that Eve and I went bra shopping. We spent a small fortune and giggled like schoolgirls. She brought me a pair of heels that day; they were outrageous, black patent with an ankle strap and a five-inch heel. It took a while before I had enough confidence in my ankle to wear them, but when I put them on one evening Eve gave me a strange look. Later, I studied my image in the mirror. I'm not sure what they made me look like, maybe not slutty, but they did make something stir deep inside of me.\n\nEve was running late for dinner one evening, but things were under control, as long as she wasn't much longer. She'd reminded me that she was going to get her hair trimmed and I was relieved when I saw her car pull up outside. I heard her shout \"Hi\" when the door closed and she dropped her bags in the hall before calling, \"Sorry I'm a bit late, but I bumped into your mum and forgot the time. Everything okay?\"\n\nI started to reply as I turned to see her standing in the doorway, \"Yeah, dinner's almost ready ... Fuck me what have you done?\" She smiled at me and I stood with my mouth open again. She'd had her cut even shorter, I doubt if there was more than inch of length and I felt something go twang deep inside of me. \"It looked sexy before, but my God you're going to have guys drooling when they see that. I can't believe that shorter equals sexier.\"\n\n\"I love it and I did it for me. I have no desire to have guys drooling over me. But it is good isn't it?\"\n\nI turned away because I was confused. I busied myself with dinner whilst Eve went to see Oliver.\n\nWe chatted as we ate and as soon as I'd cleared up I headed over to visit my Mum, but couldn't get the image of Eve out of my head.\n\nIt was good to catch up with Mum and report on how I was doing. \"I'm enjoying it, it's not what I wanted to be doing right now, but I'm learning and that's good. I love Oliver and it made me think about kids. I'd love a little one like him.\"\n\n\"I met Eve earlier. She really likes you and thinks that you're doing a great job, she loves your company. What did you think of her hair?\"\n\n\"It stunned me, it's so ...\"\n\n\"Sexy?\"\n\nI went red. \"Yes. She's stunning and somehow that makes her even more so.\"\n\n\"She is and you still have your crush.\" She must have seen the look of embarrassment. \"It's okay, I like her too.\"\n\n*****\n\nOne morning Eve seemed to be late getting ready so I went to find her, to offer her some breakfast. She was still in bed and running a temperature. I called the office to let them know she wouldn't be in and made her sweet tea. I was in and out of her room all day and by evening she felt like something to eat. \"I have a tin of mushroom soup and that sounds like just what you need.\"\n\nI'd kept Oliver away from his Mum to be safe, at least as safe as I could. Later on, that evening, after I'd put Oliver to bed, I went to see if she needed anything. She smiled at me and patted the side of the bed. \"Thanks for taking care of me, you're an angel.\"\n\n\"No, I'm doing what you employ me to do, but actually if you'd been stuck I'd have come over to help out anyway, we're friends aren't we?\"\n\n\"Yes, we are. Can I get a hug, please?\"\n\nA hug? What the hell? \"Why a hug?\"\n\n\"I've not had a decent hug, apart from Oliver, for a while, not since ... You know.\"\n\nI lay down on top of the covers and hugged Eve. I stared at her as we lay there. I'd admired her for a couple of years now, how she'd coped with adversity and managed the business was a miracle. She was also very beautiful and lying there something clicked inside of me again, I didn't know what it was, at least not right at that moment.\n\n*****\n\nI'd just finished making tea one evening and when I handed a mug to Eve said, \"I've been asked out by a guy that I knew when I was at University before I met Mike. He's invited me out to dinner next Saturday, do you mind babysitting Oliver?\"\n\nI sipped my tea and in the few seconds before I answered several thoughts spun around inside my brain, 'a date? Who is this guy? No, it's not right.'\n\n\"Well you employ me as a Nanny so there's no problem. Tell me about him.\"\n\nI'm not sure that I heard her reply or that I was very interested. I finished my tea and picked up both mugs. \"I'll check on Oliver and then I'm going to bed, I seem tired tonight.\"\n\nI angrily threw my clothes into the laundry bin, my teeth got a good workout, eyeliner was wiped away with less than the normal gentle strokes and I threw myself onto the bed face down. I was crying, she was cheating on me! I was jealous and I was so stupid, what did it have to do with me? I sniffled, blew my nose and sat up. I loved her, I wanted her for myself. All of those strange feelings that I'd had became clear, it was love. It made no sense; I wasn't gay, was I? She was too mature to be interested in me, a stupid little girl. I cried for a while before I fell asleep.\n\nThe next morning I tried hard to be my normal self and I think that I managed until Eve left for work. I resolved to steel myself and be sensible. It was ridiculous to even think about.\n\nTwo days later I was leaving the supermarket when I bumped into an old school friend, Colin. I say, friend, we'd shared classes and he wasn't an arse. When he saw Oliver in his buggy he stared, \"Isla ...\"\n\nI smiled inwardly; it wasn't hard to read his thoughts. \"This is Oliver and the other one is due in six months.\" I patted my belly.\n\n\"But, you ...\" He smiled, \"You're winding me up. Just for a minute, I thought ...\"\n\n\"I broke my ankle badly and wasn't able to start uni so I'm working as a nanny until September. I'm not pregnant either.\"\n\nWe chatted for about ten minutes until Oliver got grumpy and I was saying goodbye when Colin threw me. \"Isla, I always liked you and the place I'm working at has a dance next week, would be my date, please?\"\n\nHe was sweet and another time I'd almost certainly have declined, but Eve going on a date herself may have influenced my decision. \"Let me check to see if I can get the night off, text me the details and I'll call you.\" I leaned in and kissed his cheek. I didn't know that boys went that shade of red.\n\nI thought about it. I could easily have declined, but what the hell, I needed to get out a bit so I confirmed that I'd go.\n\nI took a while to get ready that evening. I wore the dress that I'd had made in Thailand with a pair of nude tights that shone, with those stupid five-inch heels. My hair was in a chignon and I wore far more make-up than normal. I checked how I looked in the long mirror and decided that 'hot' was appropriate. My bust had filled out a little, although I was never going to trouble a C cup. My legs had developed some tone because of all the exercises I'd been doing, pretty sexy, as long as you ignored the scar on the lower left leg, but even that was fading a little.\n\nEve was reading to Oliver when I reached the lounge and she started to speak before looking up, \"Is that you ready?\" Then she did look up, her eyes went wide and her mouth fell open as she looked me up and down. \"Bloody hell, Isla, you're amazing, my God you'll slay them. I don't think I knew how bloody sexy you are.\"\n\n\"Thanks, I feel great.\" 'And now you know what you're missing I thought and then checked myself. Stop being stupid and anyway neither of you is gay.'\n\nColin was pretty speechless when he first saw me, but I have to say he scrubbed up nicely and he was floating as he introduced me to all of his colleagues. Actually, it was a nice night, the food was good, the music lively and we danced a lot. He was good company and when he leaned forward to kiss; it was tentative as if he was testing the water. It was pleasant and he grinned, so I took his hand and lead him into the corridor outside of the function room. I leaned back against the wall and pulled him towards me, I was in control of this and with the heels a little taller. He was hesitant, but I wasn't and even though I'd never kissed like that before I knew exactly what I was doing and by the time the first one was over so did he.\n\nWe shared a taxi. The kiss as he was dropping me off was brief. As I turned away I heard the taxi driver comment, \"Your girlfriend is hot pal.\"\n\nDespite the late hour Eve was sitting up reading, wearing a robe, with her feet tucked underneath her on the couch.\n\n\"You didn't have to wait up for me.\"\n\n\"I know, but I wanted to be sure that you were home safe. Was it a good evening?\"\n\n\"Yeah it was good, good food and the dancing was great.\"\n\n\"And what about your young man?\" Eve cocked her head.\n\n\"He's nice, a proper gent and he kisses well.\" There was a brief glimmer of something in her expression. \"He's not long term boyfriend material though, maybe still a bit immature. Seems stupid given that he's my age but ...\"\n\n\"I know what you mean; we girls seem to grow up quicker than the boys. Women commonly marry men a few years older than they are. Me and Mike for instance.\" A shadow passed over her face.\n\nI lay in bed thinking about the night. Colin shouldn't get his hopes too high, but I enjoyed his company. The kiss was great, but I realised that I'd imagined that it was Eve. Then a horrific image of her and this guy she was seeing in a few hours going at it in her bed a short distance away popped into my head. The thought made me want to throw up.\n\nOur roles were reversed from the previous evening, I was reading to Oliver when Eve appeared and I'm sure that I made those same stupid faces that she had as I ran my eyes over her.\n\nShe wore a simple black dress, probably jersey; it was strapless and shoulderless. The neckline sat just above her cleavage and carried onto the sleeves, what little there was of them. It flared from her trim waist and was wide at the hem, which sat about six inches above the knee revealing long and shapely legs that I'd have killed for. Black sheer tights were paired with some gorgeous heels. Her hair was gelled and she wore pearls. It was sophisticated yet sexy, jealousy was ripping through me.\n\n\"Bloody hell Eve, you look stunning, he's a lucky guy.\n\n\"Thanks, but I'm sure that you looked better last night.\" Clearly, she was deranged; I could never have looked that good.\n\nI put Oliver to bed and went to collect the laundry. I don't know why, but I sat down on the end of Eve's bed holding her clothes close to me. Seeing her all dressed up and the jealousy that I felt confirmed that I was in love with her. I wanted to be the one kissing her and lying beside her in bed. I buried my head in her clothes and inhaled, Eve! The laundry was damp before it even reached the machine\n\nThis time I was the one sitting up reading, wearing a teddy that I sometimes wore to bed under a short waffle robe. It wasn't as late as I'd been the night before. \"Hi, I didn't expect you back for a while yet.\"\n\nShe drew me a black look and was a bit nippy, \"Did you think that I'd be going to bed with him.\"\n\nOh, now I've upset her. \"No, that thought never entered my head and it's none of my business. I just thought ... I don't know what I thought. I'm sorry.\"\n\n\"So am I. I shouldn't have snapped at you, you didn't deserve that. It was a nice meal and he was good company, but it was clear that he expected us to have sex and his hands were ... ugh, it was awful.\"\n\nThe smile that was deep inside me had the decency to remain hidden and I kept a straight face as I muttered, \"That's a shame.\"\n\n\"Come on, hot chocolate. Fancy a weepy movie?\"\n\n\"I'll make the drinks; you change if you want to.\"\n\nShe came back wearing shorts and a T-shirt. As she sat down, closer to me than I expected, she curled her legs underneath herself. They were a lovely colour, beautifully smooth, shiny and her pink toenails looked cute. 'Cute toenails? Catch a grip.'\n\n\"Pass the throw and snuggle up.\" I watched the film, but my head was in a whirl. I wanted to stroke those legs and take those cute toes in my mouth. The thought was etched into my brain before I realised that it was weird, where on earth had that thought come from?\n\nEve kissed my cheek and patted my bum as I walked into my room. \"Good night, see you in the morning.\"\n\nI seem to do a lot of thinking staring at my bedroom ceiling nowadays. I was smiling and happy after she told me that she didn't think that she'd date the guy again. Then a reality check made me realise that I was a bloody fool.\n\n*****\n\nEve was frustrated with her work. The small engineering company made components for other manufacturers and shortly before his passing Mike had branched out into plastics. His employees had kept up the good work in terms of production, but the management had slipped and Eve had been struggling to get on top of things for a while. That was one of the reasons I was working for her. Clearly, many of the males resented a female running the show and she'd had plenty of resistance to change and innovation.\n\nEach evening she'd talk through the issues and after a few months, I was able to give her my thoughts. Some of them were naive and impractical, but it was these conversations that made me change my ideas about the university. After speaking to several people I switched to business management for my degree, instead of English. It gave me something new to focus on when I started.\n\nAt Easter, Eve rented a small apartment in Mallorca for a week. Oliver was no trouble, so I had plenty of time to relax and talk to Eve; we never seemed to run out of things to talk about. We toured the island, ate some tasty food and spent several evenings watching the religious parades. On our last evening, I was pushing Oliver's buggy as we made our way back to the apartment when Eve slipped her arm around my waist and whispered. \"Thanks for this week. I've felt alive and enjoyed your company. I'm going to miss you when you go.\"",
        "I woke early the next morning and thought about that statement. I was going to miss the two of them and as long as I didn't do anything stupid in the next few months, it would be okay, but restraint was required because I desperately wanted to sleep next to her or kiss her for a couple of hours. If I could hold it together I'd be away and able to recover my common sense.\n\nI loved our weekends. The two of us would often go shopping and take Oliver, who was well behaved and seemed to enjoy it. We'd try to head off somewhere for an outing on a Sunday: safari park, zoo, beach, the countryside or events that were happening locally. Eve gave me a day off each week and occasionally I'd take one if there was something I had to do. But mostly I spent those days with her and Oliver contentedly. I was looking forward to university, but I was enjoying the life that I was living.\n\nEve and I were close, very close, but never intimate. We shared secrets and thoughts. I was closer to her by the end of that year than I was to my mother, but she was more of a sister than a parent.\n\nUniversity\n\nIt took me a while to collect all of my belongings. Mum was taking me away the following day to a new life. I was sad to be leaving home, but I was also excited and now had plenty of money thanks to what I'd been able to save. As I said goodbye and hugged Eve she whispered, \"You can come home you know and I'd love to see you, if you'd like.\"\n\nThe first few weeks were hectic, sorting out courses, discovering all the events and social aspects to university life. I was living in the halls of residence where half a dozen of us shared a small kitchen and sitting room. I had my own room and made sure that it was as homely as possible. One evening Natalie, another of the girls who I also shared several classes with, was waiting for me to put my shoes on and looked over at the two framed pictures on my bookshelf. \"Who are these? I guess that's your Mum.\"\n\n\"Yeah, the one on the left is my Mum and that's Eve and her son Oliver.\"\n\n\"Is she an aunt?\"\n\n\"No. I used to babysit for her, and then I helped after her husband died. When I broke my ankle and had to delay coming here she offered me a job as a nanny. Oliver's wonderful, so is Eve. My Mum says that I have a crush on her and she might be right, she's lovely.\"\n\n\"Do you fancy her? Are you gay?\"\n\n\"I'm not gay, although I'm not sure that I'm straight either, I simply don't know yet. I suppose that I do fancy her a bit. She's beautiful and nice, but beyond my level and of course, she's ten years older than me. I confess that I've had the odd dream about her but that's all.\" It was a lie, a great big fat lie. I fancied her more than a bit and the only odd thing about the dreams was the fact that they were bloody dirty.\n\nAfter a couple of months a guy from another course, Adrian, asked me out for a drink. He was a year older than me, tall, broad-shouldered, with a cheeky smile. He was a bit of a hunk and I was a bit surprised that he was showing interest in me. We went out several times, for drinks, dinner and movies. We did a lot of kissing, a few fumbles. He turned me on.\n\nAfter a party in the Student Union one night he came back to my room and after some passionate kissing we ended up in bed. He was good, knew what he was doing and I enjoyed the intimate physical contact. I fell asleep that night with a smile on my face. Things were good the next morning, but as the day passed I thought about him and what we'd done. It was good, but it felt wrong, at least something wasn't right. I dismissed those thoughts and put them down to my inexperience.\n\nWe slept together a few times over the next few weeks and as much as I enjoyed the sex and intimacy it wasn't quite right, so I broke it off. He was really disappointed, especially when I couldn't explain what was wrong with me, but I felt okay about it.\n\nI'd stayed in touch with Eve by email, the odd phone call and a periodic text, but I hadn't seen her since I'd left.\n\n*****\n\nIt was great to see Mum and be back at home again. It was a bit strange, it'd been a while since I'd lived with her, over eighteen months by then. We started talking and catching up the minute I arrived, as we cooked, ate and then sat with a glass of wine. There wasn't much we hadn't covered, but I knew that something was coming.\n\n\"Isla, what about your love life? Are there any boys of interest?\" I frowned and she looked a bit odd then followed up with, \"Or girls?\" She bit her lip.\n\n\"Girls? Where did you get that?\"\n\n\"I don't know. I wondered, I don't care if you prefer girls, as long as you're happy.\"\n\n\"No Mum, no girls and there was a boy, but it's over. Can I be honest?\" She nodded. \"I'm not a virgin any longer. I was and he was the only one. It was the right time and it was okay, but ...\"\n\n\"Isla, I love you more than anything in the world. I don't care who you sleep with or fall in love with as long as they're decent, treat you properly and you're safe. I will say this, don't be a slut, don't go with someone unless you really like them.\"\n\n\"Okay Mum, thanks. I love you and that's good advice. Thank you.\"\n\nWe were silent for a few minutes, I was shocked by what she'd said and then she followed up, \"I've seen Eve a few times and she always asks after you. Oliver is getting bigger, he's so nice and he likes to hug.\"\n\n\"We've spoken a few times. I like her, but she's not my age and surely she must prefer friends who she has more in common with.\"\n\n\"I suspect that you're her closest friend and confidant. I feel sorry for her, it must be a struggle trying to cope with a tragic loss, with a youngster, the business and being so young.\"\n\n\"She's ten years older than me Mum.\"\n\n\"In actual years maybe, but in reality, I think that you're much closer than that.\"\n\nI liked Eve a great deal and had some deep feelings for her, but being away from her had helped to keep most of those at bay.\n\nThe next day I spotted Eve in the supermarket and went over. Her face lit up when she saw me, \"Isla, how lovely to see you, how are you?\" We exchanged pleasantries and after we had our shopping adjourned to a coffee shop.\n\n\"Where's Oliver, how is he?\"\n\n\"He's in child care and I need to fetch him in half an hour. He's great and I know that he'd love to see you again, he asks about you often.\"\n\nI smiled, it was good to see her again.\n\n\"How are you? How's the university? This is stupid; would you come over tomorrow evening for dinner, see Oliver and we can have a good chat. I've missed you.\"\n\nI went over early so that I'd have plenty of time with Oliver. I'd spent a lot of time with him for almost a year and I suppose it was natural that we'd be connected. I loved him, enjoyed being with him and I hoped that the time we'd had together would form some good foundations for his life. But I suspected that he would soon grow up and that my part in his life was largely over.\n\nEve talked about the business and was frustrated by lots of things. She hated not being able to spend more time with Oliver and had very little social life of her own.\n\n\"So tell me about university and all the people chasing after you looking for a date,\" I told her about my courses, the social scene and the other students.\n\n\"Anyone special?\"\n\n\"One guy. He was nice, really good looking, tall broad, handsome.\"\n\n\"But ...?\"\n\nI felt that I could trust Eve. \"He was good in bed, knew what he was doing but ...\"\n\nShe waited but said nothing. \"The first few times I was elated, don't get me wrong, he was a good lover and not selfish, but I was never able to get over the feeling that something was wrong, maybe something was missing. I certainly didn't love him and I had to end it. It wasn't fair to him either, so ... I think I'm going to wait for Oliver.\"\n\nEve chuckled. I loved to see that smile. \"One day, honey. One day you'll find the person that makes you feel great, will take your breath away. And you'll know. I'd be elated if Oliver could find someone like you, but you'd have a long wait and in any case, he adores you already.\"\n\nOn my walk home the next day I realised that the feelings that I had for Eve were still there despite my having kept a lid on them. It was insane and she was right, one day I'd find that special someone.\n\n*****\n\nUniversity had gone well and my first year was over. Mum came to collect me and after a lovely hug we set off. \"I got good results in my exams and I love it, but it'll be good to spend some time with you. Dad wrote to me and has asked me to visit him again. What do you think?\"\n\n\"He's your father and a good man. You should go if you want to; it'll be good for you. Have you spoken to Eve recently?\"\n\n\"No, not for a few weeks.\" I'd been avoiding her I'm ashamed to say, I worried that my feelings for her would resurface.\n\n\"She told me that Oliver was asking for you and I think that she'd like you to work for her this summer if that would suit you.\"\n\nI said nothing. I needed to find a job and that would be easy money, but would it be wise?\n\n\"You two get on so well together and you'd enjoy the work.\"\n\n'Yes, but would I get stupid at some point, grab her around the waist and plant a kiss on her luscious lips?' I kept that thought to myself as a responded, \"I'll give her a call.\"\n\n*****\n\nVisiting my Dad was great fun. I loved the sea, the beach, the sun and was a fabulous colour by the time that I got home.\n\nEve arrived home at the end of my first day looking after Oliver and went to check on him. I was emptying the dishwasher when she returned to the kitchen. \"What happened here, did the cleaning fairies come in whilst I was away?\"\n\n\"I thought that I'd do some housework, whilst Oliver was playing.\"\n\n\"And you went to the park, watched the buses and read to him. He told me and showed me some sums you've been doing. From the smell, it looks like you made me some chilli as well.\"\n\n\"We had a nice day, I've missed him.\"\n\n\"Isla, I've missed you too. Are you heading home?\" I nodded.\n\n\"I've missed you and so has your Mum. I'd invite you to move in, but you need to spend time with her as well. Maybe we can have a couple of girly nights?\"\n\n\"I'd like that.\"\n\nShe kissed my cheek as I left and it burned all the way home.\n\nSummer passed quickly. Mum and I got quite close again. I loved taking care of Oliver and it paid me good money. The evenings that I'd spent with Eve were fun, sometimes magical, especially when we cuddled watching TV, but I behaved myself.\n\nBack to University\n\nA student from another course, a good looking young man with a tan and blond hair kept asking me out, and he was nice, so we had a couple of dates. One evening after a nice meal I stayed over at his place and we made love for the first time. I was shy to start with, but he seemed to know exactly which buttons to push and where they were located. By the time we fell asleep in each other's arms I was worn out, in a very good way.\n\nThat brought me out of my shell and over the next few months we saw a lot of each other, meals out, movies, gigs and lots of cuddling. The sex was incredible and I spent many nights with him. Then one day, all of a sudden, I realised that I didn't love him. I liked him, but it was going nowhere long term and it felt wrong, very wrong. I struggled to explain how I felt the way that I did and several of my friends thought that I was crazy. Maybe I was, but ending it was right for me.\n\n*****\n\nA few months later Natalie, who I still shared digs with, and I were in the pub singing karaoke. For me to be up there singing was a sure sign that I'd probably had too much to drink and I suspect Natalie was in the same boat.\n\nWe walked back to our digs, arm in arm. To our surprise, there was a bottle of wine in the fridge so we cracked it open and sat on the couch chatting. When Natalie came back from the loo I noticed she'd changed into a long T-shirt that she wore to bed and she flopped down beside me, quite close.\n\nI looked at her and realised that I'd drunk too much because I felt an overwhelming desire to kiss her. I have no idea what she saw or what prompted her, but we both leaned forward and our lips met. I realised in that instant that kissing her, kissing a girl was way better than kissing a guy, gentle and sweet, but right somehow.\n\nShe grabbed one of my breasts and I was about to say something when I melted because I liked it. I didn't want to stop her, so I didn't say anything. I felt her one of her breasts; soft, full, warm and very erotic. \"Isla, I want you, I don't think I'm gay, but I want you.\"\n\nShe kept kissing and touching, it felt good, very good, so I said nothing for several minutes.\n\n\"Nat, if we're going to do this we need to be sure it's not just the drink and if we are, then let's do it in bed.\" She took my hand.\n\nI was surprised when I opened my eyes, firstly I didn't have a hangover, secondly, I wasn't in my room and someone's arms were wrapped around me. Natalie! It came back to me and I shuddered at what I'd done, what we'd done. It'd been wonderful, very satisfying and I didn't have any regrets, but I did wonder what would happen between us.\n\nShe looked sheepish when she woke up and started to recall the events that lead to us being in her bed. \"Oh God, are you okay?\"\n\nI nodded and asked, \"How do you feel?\"\n\n\"No hangover.\"\n\n\"That's not what I meant.\"\n\nShe paused before answering, \"What happened last night was a surprise, but I enjoyed what we did, I loved it. I don't want it to spoil our friendship and if we leave it there, as a night of fun and madness, that's okay. But .....\"\n\n\"But?\" I queried.\n\n\"I'd do it again, with you.\" She exhaled as if she'd been freed.\n\n\"Thank God for that. I really like you and what happened. Let's just take things one day at a time.\n\nWe didn't come out, we didn't flaunt our relationship, but the others who shared digs with us knew what was going on. Natalie and I shared a bed every night for three months. We weren't in love; neither of us expected this to be a lifetime thing and it ended amicably when we split at the end of the term. Sadly, Natalie didn't return to University the following year, her mother had been taken ill and she decided to stay at home and care for her. We spoke on the phone occasionally and a few years later she returned to finish her degree, but we never met again.\n\nSummer\n\nWhen I got home Mum and I talked and talked for hours, cooked together, went to the theatre and shopped. \"I'd like to get away for a week, what about you?\"\n\n\"Great idea Mum, what did you have in mind?\"\n\n\"I don't know, beach or cities?\"\n\nA long conversation resulted in a few days in Berlin, then a train for a week in Paris. We toured Berlin investigating its traumatic history, the Wall, the division of the people and the problems that caused. We took selfies in front of the Brandenburg gate, ate breakfast in a restaurant on the roof of the Reichstag, enjoyed the lovely parks and friendly people.\n\nWe both loved Paris, the museums, the Eiffel Tower, gargoyles, nuns singing at Sacre Coeur, the crazy haute couture, a moonlight cruise on the Seine and some astonishing cuisine.\n\nSpending time with Mum had been great, but now we were home and it was time to confront my feelings for Eve. We'd often spoken whilst I'd been at University and exchanged news via email, now it was time to visit.\n\nThe door opened two seconds after I pressed the bell and Oliver knocked me backwards as he grabbed me around the neck, \"Isla, Isla, I've missed you.\"\n\n\"That was some welcome. I've missed you too, let me look at you.\" I stepped back and looked him over, still the same cheeky grin. \"My, how you've grown, you're almost a man.\"\n\n\"Don't be silly Isla; come on Mum's excited to see you.\" She was in the kitchen and my heart skipped a beat or two when I saw her. She wore a pale blue dress that showed a lot of legs and a good bit of cleavage, heels, perfect make-up and that sexy short hair. It was obvious that she'd dressed up. Then she smiled at me and I felt weak at the knees. My crush was still there, still rampant, but still stupid.\n\n\"Oliver's missed you; he's been excited all day. I'm pleased to see you as well. Can I get a hug?\" We hugged, it was wonderful. I stepped back and she looked me up and down.\n\n\"Nice dress, Paris I'd guess. You've grown up a bit and those legs are something else.\"\n\n\"Thanks, my legs have filled out, the scar's faded a bit and these have developed,\" I pointed to my bust, \"and the dress is from Paris.\" It was navy blue, tailored and looked a million dollars.\n\nWe sat and chatted away as if we were equals, certainly not nanny and employer.\n\n\"Isla, will you read to me later?\"\n\n\"Yes of course.\" I turned to Eve. \"Is he in day-care?\"\n\n\"Yes, he starts school in a few weeks. I'd ask you to look after him, but he's settled and has friends there.\"\n\n\"It's okay. I'd guessed that from what my Mum told me. I'm going to look for something for a couple of months, keep me out of trouble.\"\n\n\"A business friend of mine, that I spoke to yesterday, is looking for a receptionist for her office. The lady who does the job at the moment needs an operation and she'll be missing until September. It's a big office where they do accounting and business services. It would be a good experience.\"\n\nI got a call asking me to go for an interview on Monday and started two days later. It wasn't complicated, except for leaning names and phone numbers, the people were nice and I got to see how a business runs close up. I got a few other administration jobs to do that kept me busy as I watched, learned and earned a few pounds.\n\nI enjoyed Mum's company and had a girl's night with Eve every Friday. Each weekend I'd also spend a day with Oliver, going swimming, visiting parks, the zoo and anything else that took our fancy. I loved it and it confirmed that one day I wanted my own family.\n\nI managed to keep my feelings for Eve to myself, but there was no doubt that I still felt a strong attraction to her. We got on well and she obviously liked me, but there was no sign that she felt anything other than friendship towards me. I was surprised that she didn't seem to have dated anyone, which was odd. She was a gorgeous woman and whilst not rich, she was clearly not short of money. All in all, she was a good catch for someone.\n\nFinal year\n\nI was looking forward to my final year, disappointed that Natalie wasn't coming back and pleased that I hadn't let my feelings for Eve get out of control over the summer. I kept my head down and worked hard.\n\nI got back after the New Year break; this was the home straight and then bang! I saw this woman in the Student Union bar. My height, slim, with great legs, a lovely face, nice smile and short dark hair. I watched her as she chatted with her friends. She had elegance to her movements.\n\nThe following week I saw her again and she saw me. We talked, I was mesmerised. Ann and I met again the following night and ended up in bed, it was good. A few days later we had sex again and as I closed my eyes in a moment of passion, to enjoy her touch, I had a sudden realisation that I'd thought that she was Eve. It made me feel awful, that I was using her and being unfair to Eve.\n\nI escaped as soon as I thought I reasonably could, went home and cried for a long time. I'd been attracted to her because she looked like Eve and not really for any other reason.\n\nA couple of nights later, I woke with a start. It was still dark. There was a moment of panic until I realised that I'd been dreaming. Yet again I found myself staring up into the darkness; it wasn't a dream really but a dawning realisation that, for the first time, cemented my feelings. I hadn't enjoyed sex with men that much and had felt uncomfortable afterwards. Once I'd let myself go, I realised that I liked girls, being with them, looking at them, touching them and having sex with them. It was better by far than with men. I was almost certainly gay and not unhappy about that. But still, something was missing.",
        "I'd fantasised about Eve for a long time and I knew that I was madly in love with her. I accepted that and also that I'd have to be careful because she didn't feel the same way about me. She wasn't a lesbian, she was older. I'd need to bide my time until the right person came along and that obviously wasn't Eve.\n\nGraduation and beyond\n\nMy graduation ceremony was going to be a proud moment for me and my Mum, but I was stunned that my Dad had travelled back home especially for the occasion. He and Mum had got along nicely in the three days since he'd arrived and they'd had a civilised conversation about divorce.\n\nAs I walked out of the hall to meet Mum and Dad, clutching my scroll and feeling pleased with myself, I stopped in my tracks. Eve was standing with my parents. Oliver was beside her grinning at me. My Mum and Dad gave me big hugs and made all sorts of proud noises, but I could see Eve watching me. I bent down to kiss Oliver and he giggled as Eve spoke, \"Your boyfriend insisted that he wanted to see you collect your award.\" She laughed, grabbed me around the waist, kissed my cheek and whispered, \"Well done, I'm very proud of you. You've done so much for Oliver and me in the last few years, I couldn't bear the idea of not being here and your Mum helped.\"\n\nI was now in tears. My parents, Eve and Oliver had all made the trip for this day and I realised how special that was. Eve had booked lunch for us at a country hotel far enough away to avoid the mass of other students who were also celebrating. We chatted over a very nice meal and after the main course, Oliver was sitting on my knee asking about my gown, when I noticed Dad watching at me. He touched Mum's arm and quietly said, \"She looks like a natural Mum doesn't she?\"\n\nMum turned to him to reply, \"I'm sure that one day she will be. She loves Oliver a great deal and has been very good with him.\"\n\n*****\n\nI had a job as a trainee working for a management company that supplied a variety of services to small businesses: HR, accountancy, legal services, stock-taking, that sort of thing. The office was close so I could live at home with Mum. It wasn't a glamorous outfit, but they had a good reputation for training.\n\nI started off working in the administration department which helped me to get to know the other staff, who were pretty friendly. It wasn't taxing work and after a few months, I was moved to the audit and stock-taking section. This was more demanding, there was lots of paperwork and dozens of checks to be carried out. Stocktaking got me out of the office and opened my eyes to the range of businesses that there were. I quickly realised that I was able to spot anomalies, no idea why or how, but I found quite a lot, which pleased my bosses.\n\nI hadn't been dating, but I'd been out with some of the other girls a few times and I'd heard a couple of them talking about me one day, apparently, I was a 'cold fish.'\n\nI saw Eve a couple of times a month, for a girl's night and on other odd occasions. I also watched Oliver if she had to go somewhere. One night Mum was heading out with friends for the evening, so I packed a few things and headed over to stay over at Eve's and take Oliver swimming the next morning.\n\nOliver was excited as he told me about school and his new friends over dinner. Eve got up to clear the table and told Oliver to get ready for bed, he resisted until I promised to read him a story. As he walked away he stumbled and knocked over a small stack of papers that Eve must have brought home from work.\n\n\"Go get ready, I'll sort these.\" I picked the papers up and noticed that the pages were numbered but were now out of sequence.\n\nI read to Oliver and he was soon asleep, so I kissed his forehead and headed back downstairs. Eve was on the phone exchanging words with her mother in law. I smiled, they still didn't get along and I knew that Eve would spend ten minutes cursing as soon as she hung up. I sipped my wine and started to sort out the papers. As I was doing so I realised they included estimates for jobs and prices for components. A couple of things caught my attention that didn't feel right.\n\nEve saw me taking a photo of a couple of pages, she looked at me quizzically, \"Are you spying on my business?\"\n\n\"Oliver stumbled and they went flying, so I've sorted them out again. There are a couple of prices that I want to check. I've just done an audit and I think that you might be overpaying for a couple of things.\"\n\n\"That's not good and it would be interesting to know. Don't get in trouble because of it. Now, wine?\"\n\n\"Yes, please. Thanks for dinner, I really enjoyed it.\"\n\n\"How are you getting on with your colleagues, you were out with them last week weren't you?\"\n\n\"They're great at work, but socially they want to talk crap. Men, shopping, TV shows, celebrity gossip. As you know; not my thing, not one conversation about current affairs or the real world. Not like the conversations we have or the things I talk to Mum about. And apparently, I'm 'a bit of a cold fish,' I overheard two of them talking about me.\"\n\nEve laughed. \"You? Oh dear, you're far from that, maybe you change your persona when you dress for work.\"\n\nWe talked into the early hours of the morning and laughed a great deal. I went to bed smiling. The next morning we took Oliver swimming. It was fun, but I knew that I'd need to do some work on my hair later because the chemicals dried it out and made it look a bit freaky.\n\n*****\n\nIt was the middle of the week before I managed to get hold of the documents that I wanted to check. A quick look told me that my suspicions were correct and I stayed behind for an extra half hour to complete my research.\n\nWhen I reached my car I called Eve. \"Have you eaten yet? Do you have plans?\"\n\n\"Oliver's eaten. I was going to rustle something up and I don't have plans, I never have plans.\"\n\n\"How about I bring some Thai take away and I'll be there in half an hour?\"\n\n\"Okay. Mysterious, but see you then.\"\n\nShe wanted to know what was wrong, but I insisted that we eat first. We cleared away and sat down together. \"I think that you're overpaying for quite a lot of your components, fastenings, that type of thing. Some of the stuff that you buy is far more expensive than one of the companies that I was working for is paying. You need to check on the specs, but there's something wrong and I'd guess that if I found it that easily, then there's likely to be more.\"\n\nWe discussed the details and tried to work out how to confirm what I suspected.\n\nOn Saturday my Mum looked after Oliver. It hadn't been hard to persuade her to help out and he enjoyed being with her because she spoiled him. Eve and I went to her factory to trawl through piles of paper records and numerous computer files. I made lots of notes in the four hours it took me to gather the information that I needed.\n\nMum brought Oliver over to Eve's house late that afternoon and stayed for dinner. I loved that evening, being with my favourite people, laughing and at ease. I'd not intended to stay overnight so I headed home with Mum.\n\nI was back early the following day having stopped to buy croissants for breakfast, including a pain au chocolat for Oliver. He loved it and managed to get the filling all over his face. Eve kept me going with coffee for several hours until eventually, I threw down my pen and sighed.\n\nEve sat down opposite me and raised her eyebrows. \"It looks as if you're paying over the odds for a lot of small components. Each item on its own doesn't amount to much, but a few pence on each one when you buy a thousand adds up. I don't want to make accusations, but either your buyer is not doing his job properly or they're getting a kickback. I don't know which, but my guess would be the former.\"\n\nEve looked sad, \"That guy's been there for a long time, a nice man. Can I confront him or is there something else you need?\"\n\n\"I need to get a day off and sit with you when you make some calls. I'd do it, but if it got back to my boss I'd be fired.\"\n\nI got my day off later in the week and sat giving Eve the questions as she called several companies. By the end of that day, we'd identified new suppliers offering far better prices and, in some cases, better quality products. When Eve confronted the person responsible he admitted that he'd taken a few shortcuts and was working towards his retirement in a year's time because he had health problems. Eve surprised us both when she held his hand and told him that he could take early retirement and that she'd ensure that he wouldn't lose out. He burst into tears and I admit that I came close as well.\n\nEve phoned me a couple of days later, \"Glad rags on Friday; I'm taking you out to dinner to thank you. Your Mum has agreed to take Oliver, not that she needed much persuasion.\"\n\nThe two of us looked pretty hot as we linked arms and strolled into the restaurant. She was still my hero and I still felt the same way about her, but she was also my closest friend and that was good enough. It was modern small food, haute cuisine, but it looked stunning and tasted great.\n\n\"Would you like a coffee here or come back home with me? There's something I want to talk to you about.\"\n\nEve called my Mum to check on Oliver and she was able to report that they'd watched a film and eaten popcorn. \"Your Mum says that Oliver is cuter than you were at that age.\" We both laughed.\n\nWe sat at opposite ends of the couch with coffees and brandy. \"So what's the big mystery?\"\n\n\"Firstly, I want to thank you for the work that you did, you've saved us quite a bit of money. It also made me realise that I have lots of deadwood and too many people are coasting along. I need someone with some dynamism, someone who helps me to push things forward.\"\n\nI sipped my drink. It made sense, but I didn't see how it involved me.\n\nEve took a deep breath, \"I want to offer you a job. As Trainee Manager, but I'd want you to do the buying, audits, the stuff you've been doing and I'd gradually show you the rest of the management process. Eventually, you'd become my assistant.\"\n\nMy eyes were out on stalks, my mouth was open, but no words were coming out of it. I sipped my brandy and eventually managed a response, but not much of one, \"Come and work for you?\"\n\n\"Yes, you want to learn how to run a business and working for my company would put you right in the middle of everything, not a small cog in that big place where you are just now.\"\n\nIt was a lot to think about, Eve was my friend, could this harm our friendship? I had no idea. We talked for hours and I fell asleep still thinking about her offer.\n\nThe next morning we went over to my house where Oliver was watching from the window. \"He's been great, we had fun didn't we?\" Oliver nodded as he hugged Eve and then me. We chatted for a few minutes before the two of them headed off, Oliver shouting as he walked away, \"Thanks Isla's Mum, it was good.\"\n\nI made coffee and told her about Eve's offer. \"What do you think?\"\n\n\"What you think is more important. Ask yourself this, will you get a better experience and will you enjoy it? You two are close, that could be good and bad, but you know that I like Eve.\"\n\nWe talked about it on and off all day, except when we were shopping. I bought myself several pairs of shoes and they all had high heels. My ankle was fine now and I hadn't worried about it for a long time. Even the scar had faded a lot.\n\nI woke up feeling great on Sunday morning and made breakfast. \"Mum, I'm going to take Eve up on her offer. I think I have more to gain than lose.\"\n\n\"Good, I think that you're right, but it had to be your choice.\"\n\nI called to tell Eve that was heading over and was, once again, knocked senseless by Oliver as soon as I stepped inside. \"Isla, Isla come and see, I've got some new stuff.\"\n\nThe next hour was spent on my knees helping him to assemble some parts from a huge kit so that we could make a crane. We were both pleased when it worked. \"Thanks, Isla, I love you.\"\n\nI sat back on my heels lost in thought. I wish that he was mine, but maybe one day I'd have my own. Eve found me and smiled, \"Thanks for that, he loves you. Coffee?\"\n\n\"Yes, please. Eve, if I take this job will it affect us, our friendship? I value it too much to put at risk.\"\n\n\"I don't think so. We've been friends for a long time. If you take the job, I'd want you to help me and in turn, I want to help you.\" She told me how much she would pay and although that wasn't as important in the long run, it was generous, to say the least.\n\n*****\n\nMy employers were stunned by my decision and there were a few catty comments from some of the girls. Maybe that would be a thing of the past soon. I just needed to remember that Eve would be my boss and to control those stupid thoughts I had about her, but I'd been doing that for a few years now.\n\nFor a couple of months, I wondered if I'd made the right decision, but as time passed I settled in. I did most of the buying and when I went to speak to the people who used the bits and pieces I started to understand more about their jobs. In turn, they explained some of their frustrations and were stunned when I asked how we could change things or if we could get different components. Before long I had people coming to see me and we made a few modifications. That understanding helped me to deal with the suppliers and to drive a hard bargain. It was very satisfying and Eve kept complimenting me, apparently, profits were improving.\n\nI was on my knees playing with Oliver one evening when I overheard Eve on the phone talking to my Mum. \"She's doing well, Sandra, making a real difference. It may have been the best decision I've made.\" I smiled as Oliver extracted another block from the Jenga tower which somehow stayed upright. It stayed upright until I started to move a block and he rolled on the floor laughing as the tower collapsed.\n\n\"Isla, you're rubbish at Jenga. Want to play again?\"\n\n\"One-day young man I'll beat you. Set them up.\"\n\n*****\n\nI'd worked for Eve for almost a year. It was all business in the office, but we were still close friends and enjoyed great evenings together and had lots of fun with Oliver.\n\nOne day Eve came into my office, \"Isla would you like to come over for dinner tomorrow. A girl's night and I'm sure Oliver would like to see you.\"\n\n\"Okay.\" There was no need to think about it. I had things under control; Eve was a friend and my boss.\n\nI played a board game with Oliver whilst Eve was cooking. He still giggled a lot and he had me beaten at every game, no matter what it was. \"Oliver it's time for bed. Go and wash, we'll come and say goodnight after we've had some dinner.\"\n\nHe stood up and packed the game away, then smiled at me, \"Thanks Isla you're good fun. I love you. Will you read to me?\"\n\n\"Sure I will. I love you too.\"\n\nI walked over towards where Eve was plating up the food. \"Do you love him?\" She asked.\n\n\"Of course I do. It would be impossible not to given how close we were.\"\n\n\"I had an awful thought a couple of days ago, about ...\" I was sure that she might burst into tears. \"I had a thought about something happening to me, like Mike, and what would happen to him.\"\n\nWow. \"Surely Mike's Mum ...\"\n\n\"No, no. If that happened I'd prefer you to look after him. Stupid I know and an imposition, you're so young, have a life ahead of you and you'll have your own family one day.\"\n\n\"Look it's not likely, is it? But if it did I promise you that I'd be there for him. He's so sweet.\n\n\"Thank you.\" She looked relieved. Would it be that easy?\n\nWe ate and afterwards I read a Cat in the Hat story until Oliver fell asleep. I sat on the sofa with Eve and sipped at a glass of wine.\n\n\"I'd like to get away, I need a break. Oliver needs some time with me, without work distracting me. I've rented a villa in Mallorca that has a pool.\"\n\n\"Wow, that'll be great. I loved Mallorca when we were there.\"\n\n\"I know you did and I'd like you to come with us. You're my best friend, please say that you will.\"\n\nI sipped my wine, being so close to her could be dangerous. I'd avoided dating and other close friendships because I would never feel that strongly about anyone else. 'Could I do this?'\n\n\"If you're sure, that would be nice, thank you.\" The grin extended across her face from ear to ear and it was so bloody sexy.\n\nThings happen\n\nThe villa was on a cliff overlooking the Med. It was beautiful and had a private pool, so I spent lots of time playing in it with Oliver. The day after our arrival we'd gone to a restaurant in the village for dinner. As we set off to walk back, we realised that another couple, who'd been eating near to us were heading in the same direction. We got chatting and discovered that they were staying in the villa next door. They were from Hamburg and their little boy, Stefan, was almost the same age as Oliver.\n\nA couple of nights later we looked after Stefan so that Hans and Sabine could have a romantic evening. They'd returned the favour the following evening; ours had lacked much romance, even though it was nice not to have to worry about Oliver.\n\nI'd spent a lot of time enjoying the sun with a good book and needless to say Eve and I talked about every subject under the sun, except one; how I felt about her. Seeing her in a bikini or bathing suit did terrible things to me, she was a stunning woman. I'd managed for six days and only had another week to go, I could manage this, I'd done so for such a long time now, but it was going to be hard.\n\nOliver was playing in a pool at the house next door with Stefan, being looked after by Hans and Sabine. I finished rubbing sun cream onto Eve's back and she rolled over holding her bikini top over her breasts. Then she started to laugh, \"I don't know why I'm holding this, you've seen these before.\" She nodded towards her breasts.\n\n\"Yes, and they're very beautiful.\" Blood rushed to my face, I didn't know where to look.\n\n\"Have you been peeking?\" She had a huge grin and her eyes were full of mischief.\n\nI nodded and muttered, \"Sorry.\"\n\nThen a different look crossed Eve's face, one that made me nervous. \"Isla, have you ever been with another woman, girl?\" The colour in my face became a deeper shade of red. I nodded, but I couldn't look at her.\n\n\"I did too. A long time ago, when I was at University before I met Mike. It was good.\"\n\nI looked down at her thinking, 'please, please kiss me,' but I left that thought in my head and stayed silent. It's possible that she could read my mind because she put her fingers against my cheek and sat upright. Pulling gently on my shoulder she closed in on me and applied her lips to mine. They touched briefly and then I woke up and pulled back.\n\n\"What are you doing?\" I was terrified, even though I'd wanted this for a very long time.\n\n\"I was trying to kiss you, Isla. You have feelings for me and I'm in love with you. Can I kiss you?\" She was pleading.\n\nI fell into her arms and we kissed. I felt her soft touch against my lips; she ran her tongue over them and gently forced my lips apart. Her tongue touched my teeth and I parted them to allow her in. This was so wonderful, surprising, and it felt as if it was meant to be. I moved my lips and they danced against hers, so soft and gentle, our tongues played with each other. I'd never had a kiss that felt like this one. I started to melt and then suddenly it hit me, she'd said that she loved me! Maybe I'd misheard, it wasn't possible, it couldn't be.\n\nEventually, I had to pull away. I was scared and stared at her, afraid to believe that what had just happened was real. \"This isn't right, it's not right we can't....\"\n\nEve took my hand and placed the forefinger from the other hand against my lips, shushing me. \"Isla, the first time that I saw you I felt attracted to you and put it aside as being stupid, I was married for goodness sake. Over the last few years, we've become friends as well as all the other stuff, but I can't tell you how many times I've wanted to kiss you.\" She looked away, embarrassed and lowered her voice, \"And a few other things as well.\"",
        "My mouth was performing all by itself, independently of my brain, as I asked, \"What other things?\" That was the dumbest question I'd ever asked, in my life.\n\n\"Those more intimate things that loving couples do. When Mike died my world stopped and you stepped in to help. It was wonderful when you lived with me for the year after your accident. l hated it when you went to uni, but when you came back I felt better, alive again. I love being with you.\"\n\nIn that fleeting moment, I decided that the time had come to be honest, \"I'd like for us to make love. I've wanted to kiss you and make you come for a very long time, please let me.\"\n\n\"No one has laid a finger on me since Mike became ill, almost six years, now I'm ready and I want it to be you. So yes, please make love to me.\"\n\nI worked down her shoulder and chest with tiny delicate kisses until I reached her left breast. I'd dreamed about this and now it was time to make those dreams real. I took it in my mouth and sucked gently as Eve moaned softly. \"Oh yes, yes, please. I want you, I want this. I've wanted this for years, please don't tease me, I need it really bad.\" I forced my mind to concentrate on one thing, Eve, and what we were doing, what I was doing.\n\nShe was right I'd seen her breasts many times, sometimes when she was changing and knew that I was there, also at others when I'd sneaked a fly look. They were high, full, pert and very beautiful. I stroked the left one as I marvelled at it and had to force myself not to suck it off of her chest, but to caress it with my tongue and lips. In those few minutes, I realised that this was what sex was about, not that fumbling, uneducated groping or hurried excitement that I'd previously experienced. It was love, soft caresses and tender touches. Eve could obviously feel something similar and she held my head wrapping my hair around her fingers.\n\n\"Isla that is so good, please don't tease me for too long I need this, I need you.\"\n\n'And I need you, and have done for a long time, so long that I'm going to make this last,' I thought. \"Shush, let me do this.\" I ran my tongue over her lower ribs, her navel and down to the waistband of her bikini bottoms. I licked along the waistband and then down between her legs. I could smell her arousal and she was causing a wet spot. Those legs! Her thighs were apart, but they were in magnificent shape and a wonderful colour. I licked the insides of them, pulled her bikinis down her legs. She kicked them away and made strange noises.\n\nI glanced up; her head was thrown back and it looked as if she was being tortured. I smiled briefly before I laid my mouth upon her mound and tongued her clit. She shuddered, moaned, grabbed my hair and pulled as she thrashed from side to side. I felt the orgasm rip through her body as her back arched and then she screamed, \"Oh my god, what was that? That was ...\" Silence followed.\n\nI'd never felt anything like it and I was still by no means an expert, but I'd dreamed about just this position with Eve many times and now I let loose. I slid several fingers inside her, sucked hard on her clit and worked in and out with my fingers. She came easily as if all the pent up frustration of the last six years had exploded inside of her. It was hard to make out her words, \"More, yes, oh, yes, please, like that, Isla, no, harder, yes, more, no, stop.\"\n\nI heard 'stop' and for a split second thought about doing just that. No chance, she screamed as she came again, but she didn't say 'stop'. I laid thousands of tiny kisses on her stomach and thighs and all the bits in between. At the same time, I caressed her; it gave me a feeling of contentment and happiness.\n\nEventually, I slid back alongside her and kissed those luscious lips. \"I never knew what I tasted like until now, are you okay with it?\"\n\n\"Yes, I love your taste, it's you. Once a long time ago ...\" I paused, thinking back, \"One night you were going out on a date and after you'd left I went to get your laundry. I sat on your bed crying because I was jealous and I buried my face in your clothes. That was the first time I'd ever ...\" I pulled myself together because it seemed a bit creepy, \"But now I know that I love the taste and smell.\"\n\nEve laughed, \"I had a feeling that you weren't happy about that date. I'd been annoyed the night before when you were out, but I told myself that I was a predatory monster and should behave like your older sister and not ... whatever I am now.\"\n\nI held her and relished the closeness. We'd been this close before, but now it was better. Eve reached up and unclasped my bikini top and peeled it away. \"Oh, you are beautiful. I want one of these between my lips.\" She didn't wait and I felt something electrical surge through me. She wasn't the first person to pay attention to my nipples and I'd never had reason to complain, but now I knew that those who'd done so before were in a different, lesser, league.\n\nShe went back and forth between both nipples whilst stroking my belly. I closed my eyes, I was in heaven and I never wanted it to end.\n\nWhen I looked down the sight startled me. I'd known what she was doing and where she was, but still, the sight of those wondrous eyes peering up as she licked and teased, rocked me. I felt a wave of delight wash over me, the woman who I'd looked up to, seen as a role model, had a crush on and secretly fallen in love with, had told me that she loved me and was, right this second, touching my clit with her tongue. Maybe I was more aroused than I thought, but it was probably the realisation of the situation that made me come, it was like the vibration that you hear and feel when a train is coming, it rushed towards me, I felt it at my toes and it picked up speed as it accelerated to my brain, then blackness.\n\nEve was stroking me when I opened my eyes, \"Did I pass out? I came\"\n\nShe smiled \"Yes, but only for about ten seconds and yes, you came, I thought that you were going to explode.\"\n\n\"It was incredible; I've never felt anything like that before, thank you.\"\n\nI closed my eyes and then realised the time. \"Eve! We needed to go and collect Oliver.\"\n\nHe was full of stories about his afternoon, whilst Eve and I just made dopey eyes at each other all evening. When we managed to get him into bed, Eve grabbed me around the waist and nuzzled against my neck, \"I'd like us to share the same bed tonight, please.\"\n\nI hadn't give it much thought, I was still a bit stunned about the afternoon's events and turned towards her, \"What about Oliver?\"\n\n\"I don't think that he'll want to share with us as well.\" We both laughed.\n\n\"You know what I mean. What if he finds out?\"\n\n\"We'll address that when we need to.\" She took my hand and led me towards the bedroom.\n\nWe lay naked, side by side facing each other. I stroked down the side of her body and as far as I could reach down her legs with my right hand. My other arm was tucked underneath her, our noses were almost touching. I studied her lips; they were a lovely shape, not too full and a beautiful shade of pink. Her pale blue eyes were bright and I could see that they were smiling. Her left hand was resting on my breast and making lazy circles around the nipple with one finger. Her other hand was behind my neck. She kissed my nose gently and pulled back again. \"Your eyes are such a deep dark brown that I can see my reflection in them.\"\n\n\"Then you can see what I see. The world's most beautiful woman, whose bed I'm sharing, who I love madly. Can I kiss you?\"\n\n\"You never need to ask that question again, please go ahead.\"\n\nIt was time for action, so I pressed my lips against hers. They danced with each other in a coordinated way, like two ballroom dancers and then it changed to a rumba, slow and erotic. It was heavenly; I closed my eyes until Eve pinched my nipple. My eyes opened wide and I pulled back, \"That hurt ... but I liked it.\" She squeezed again; it seemed right but wrong. My right hand slid off of her hip and down to the inside of her thighs, she parted her legs slightly. There was no hesitation, she wanted this and so did I. I slid one finger inside her making her groan, the sexy groan that told me I was doing the right thing.\n\nAfter a moment or two, I slid a second finger inside and made her groan again. She was incredibly, erotically wet, so I added a third and this time elicited, \"Oh yes, please, please, yes.\" I moved my fingers deeper and separated them, moving gradually faster and exaggerating my movements. \"Another one, another one, please. That is so good.\"\n\n'Another one?' I asked myself. \"Are you sure? There are three inside you.\"\n\n\"Yes, another one, Oliver came out of there and right now I could take anything, but I want it all, all of you, please don't tease me. What am I saying, tease me, do anything, please.\"\n\nNot all of that made sense, but I got the gist of it and added my pinky. By now she was thrashing, groaning and yelled, \"Harder, harder.\"\n\nI worked furiously, in and out, twisting, forceful, lewd and sexy. I could feel the tension mounting, so I slowed and stopped moving. Eve's eyes opened and she looked at me, terrified, \"What's wrong, did I do something wrong?\"\n\nI leaned in and kissed her, \"No, but you asked me to tease you, so I am. You were nearly there and now I'll have to build you up again and maybe I'll let you come.\"\n\nA grin broke out across those lips. \"You, Isla, are a wicked girl and wise beyond your years.\"\n\nI kissed her again before I got down to some serious action. The second time she came she pleaded with me to stop, but I ignored her and ten seconds later she demanded more. Then she demanded more again. After the next one, I slowed, stopped and gently extracted my fingers. Eve tried to grab me, but I slid down between her legs and licked her pussy gently, slowly and she groaned, \"Oh fuck.\"\n\n\"No, not fuck, but something just as good.\" It took no time for her to come again, she went limp and I knew that she was done for a while. I snaked back up and took her in my arms.\n\n\"You're good, very good. I hope that I can return the favour, will you help me?\"\n\n\"Right now I feel incredibly satisfied and you don't have to do anything, except let me hold you. I hope that we can learn together. Nothing I've ever done has felt like this.\"\n\n\"I know what you mean. I thought that Mike was good in bed, but he never did that to me, never.\"\n\nEve closed her eyes and a few minutes later she was making gentle breathing noises as she slept. I was happy and rested my head next to hers.\n\nSomething woke me. For a second I was confused and then realised where I was and that Eve was kissing my belly. \"What ..?\"\n\n\"I fell asleep on you. Now it's my turn. I want to feel the satisfaction of making love to you.\"\n\n\"But ...\"\n\n\"Shush, please.\"\n\nShe slid between my thighs, licked upwards until she reached the junction and laid her tongue on my slit. It was inside, outside me, on my clit, everywhere. She nipped my lips between her teeth and then my clit. During all of that my mind slipped off somewhere and I lost track of what was happening. I know that I felt wonderful, excited and eventually satisfied, very satisfied\n\nThe next day\n\nThe sun was up and there was a cool breeze. I wasn't alone and it all came back. Eve was next to me and I looked in her direction. She was watching and smiled as she softly wished me, \"Good morning.\"\n\n\"Hi, are you okay?\" I needed to know, did she have regrets, was it over?\n\n\"Yes, very much so, you?\"\n\n\"Yes, more than okay, but I have a confession.\"\n\n\"Oh dear, what is it?\"\n\nI looked around, metaphorically, but there was no cavalry on the horizon so I looked right at her, \"I've had feelings for you for a long, long time. It was the night you went on that date that I realised that I was in love with you, but I could never tell you. I've tried hard to keep it to myself, I dated other people but it was never right and I could never say anything because I was scared. I do love you and I've wanted to kiss you like we did last night for so long.\"\n\n\"Was that all you wanted to do?\"\n\nI laughed softly, \"No, you know what I wanted to do. I did a lot of it last night. I'd like to do it again if we could.\"\n\nShe was thinking before she spoke, \"You kissed me the night of Mike's funeral. I've thought about that many times since. Recently quite often - that kiss. I also imagined some other stuff that I wanted to try with you. Is there a chance for us to do some more?\"\n\nI nodded and took her in my arms. Kissing seemed like a really good idea. The two of us were lost in a dream when there was a knock at the door. \"Mum, can I get breakfast?\" That put paid to any more kissing, at least for a while. It was a good job that I loved Oliver.\n\n*****\n\nWe walked on the beach holding hands whilst Oliver paddled. There were very few words as we each seemed to be lost in our own thoughts. What had happened yesterday and last night were beyond my wildest dreams. I'd never expected it to happen and when it had, it was so much better than I'd thought possible. All of that groping, fumbling and, frankly, fucking with others in the past had been okay, or least it had been at the time. Now I recognised it as something far away from what I'd just experienced. Far away from the insane pleasure and passion, I'd shared with the most beautiful, wonderful woman who was holding my hand.\n\nOliver challenged me to catch him so I chased until I caught him and when he tried to escape I tickled him until he screamed for me to stop. I picked him up and hugged him. He laughed, \"I love you Isla. Can I get an ice cream please?\"\n\n\"Of course, come on but don't tell your Mum.\"\n\n\"But, she'll know, she's right there.\" He looked puzzled.\n\n\"Just ignore her for now, pretend she's not there, it'll be okay.\" He held my hand as we headed to find ice cream.\n\nEve took my other hand and whispered, \"Are you corrupting my son?\"\n\n\"No, I'm trying to tire him out so that I can corrupt his mother.\"\n\nEve squeezed my hand, \"Let's hope it works.\" She gave me a look that I'd never seen until last night and it was full of filth and passion.\n\nOliver and I both chose a cup with three different flavours of ice cream before going over to the bench where Eve was sitting. Oliver tucked in. Eve looked at me and asked, \"You didn't get me one?\"\n\n\"Kind of, I thought that we could share this one, but I only have one spoon, so I'll need to feed you.\" For just an instant she looked puzzled and then started to smile. I scooped up a spoonful and pressed it against her lips. To watch those lips take that ice cream was so sexy. We alternated spoonfuls until about halfway through when she took the spoon to start feeding me. It was magical, although I have no idea what flavour I was eating, it seemed so unimportant.\n\nOliver played in the pool when we got back to the villa whilst Eve and I were on sun loungers with our books, holding hands. I wasn't reading much, just taking sneaky looks at her, knowing that I desperately wanted to feel her touch. It didn't matter where just somewhere.\n\nOliver invited me to play with him and it was unfair to spend all of my time having sexual thoughts about his mother, so I jumped into the pool and grabbed him. He screamed, \"No tickling, no tickling, please Isla.\"\n\nWe tossed a ball back and forth as Eve watched and after a few minutes, she joined us, so we played 'piggy in the middle.' When I was the 'pig' Eve teased me mercilessly, full of sexual innuendo.\n\nEventually, late in the afternoon, Oliver succumbed to sleep and we put him to bed. Eve closed the door to his room and looked at me, \"I thought he'd never give in to sleep.\"\n\n\"Why did you want him to sleep?\" For a moment she looked puzzled until she realised that I was teasing her.\n\n\"So that you and I can go to bed.\"\n\n\"I'm not tired; I'll think I'll just read for a bit.\" I managed not to laugh for four, maybe five seconds before I stripped off my swimsuit. \"Come on slow- coach I need a cuddle.\"\n\nEve took two steps forward, kissed me and pushed me backwards onto the bed. She fell to her knees and without and preamble pushed mine apart and sank her tongue inside me.\n\nI closed my eyes and let my mind wander, at least I tried to, but every part of me could sense Eve's tongue and what she was doing. I'd been so turned on all day it took no time before I was tossing my head from side to side as an orgasm built and crashed over me like a wave. It rolled on and still, she kissed my inner thighs and then gave my clit a long slow lick. That brought me off again.\n\n\"Eve, magical, please come here I want to hold you, please.\" I was so happy that I wanted to cry. She lay beside me with her arms around my torso. \"Thank you, that was lovely. I've wanted you all day.\"\n\n\"I wanted you too and teasing me with ice cream was pretty wicked.\"\n\n\"Wicked? I thought it was very erotic, I won't do it again then.\" She slapped my arm. I slid down and took a nipple between my teeth and the other between two fingers. I kissed, sucked and played until I felt her getting close and then slid two fingers inside her. I'd meant to be gentle but she was having none of that and I ended up forcefully shoving them inside her and twisting as she demanded more. When she came she went limp and exhaled deeply.\n\n\"God that was wonderful. I've had more sex in the last twenty-four hours than in the last six years.\"\n\n\"I've had some sex in the last four years, at least I've been intimate with people, but it was never like this is.\"\n\n\"Let's cuddle for a while. Love you.\" She placed her head on my shoulder and an arm across me. I stared at the ceiling, yet again. This was what I'd wanted for so long. I was so happy that tears fell softly.\n\n*****\n\nThat evening we cooked a simple meal together on the barbeque, occasionally bumping hips or stroking arms, whilst Oliver watched something on Eve's laptop. There were lots of smiles, maybe even the odd lewd grin and if anyone had peeped over the fence they would have seen two people besotted with each other.\n\nWe sat outside under the stars sipping wine until fairly late. The conversation was light, about a couple of trips we wanted to do, including taking Oliver to some caves. \"Isla, I'd like to go to bed and hold you, would you like that?\"\n\n\"Yes very much.\" I took her hand and we headed for the bedroom. We lay side by side, kissing and stroking and before long I fell asleep. No sex, I didn't need it right then, neither of us did. I simply wanted this wonderful woman to be in my arms and my wish had been granted.\n\nThe next few days\n\nThe next few days were filled with fun and laughter. Eve and I were comfortable in each other's company and had been for years, but now it was a new, different type of comfort. We touched a lot, kissed whenever we got the chance and both of us must have looked happy and in love.\n\nWe spent time by the pool; actually, Oliver was in the pool most of the time we were at the villa. We swam in the sea, walked on the beach and took a boat trip. Oliver stood at the prow next to one of the crew and when he was told that there might be pirates, he scanned the horizon for a long time. The Captain told him that he'd been such a good look-out that he could steer the boat for a few minutes. He was beaming and the next day when we visited a market we bought him a sailor's cap. His baseball cap was discarded. Eve brought me a bracelet, it was inexpensive blue stones with silver links, but I loved it and flashed it all day. I selected a pair of long dangly amber earrings for her; with her short hair, they looked stunning. As we walked through the stalls holding Oliver's hands I whispered: \"I didn't know that a pair of earrings could look so sexy.\" Eve laughed softly.\n\nI whispered again, \"Later I'm going to remove them with my teeth so that I can nibble your earlobes.\"\n\n\"Shut up.\" She went red.",
        "That evening I was as good as my word. I managed to get the earrings out and nibbled on her ear lobe until she begged me for more. I ended up lying between her legs kissing her. It was amazing, glorious sensations ran through me and she must have felt the same because she screamed as she came and woke Oliver. Eve went to see to him and when he was asleep again, the two of us cuddled and giggled before we too, fell asleep.\n\nWe didn't talk about the future. I don't know why, we were living in the here and now and quite happy.\n\n*****\n\nOliver came over to the sun lounger Eve was lying on. \"Mum ...\"\n\n\"Yes, honey, what is it?\"\n\n\"Were you kissing Isla? Do you love her?\"\n\n\"Yes, I was kissing her, because I do love her.\" Suddenly I was scared, he looked at me.\n\n\"I love her as well can, I kiss her?\"\n\nHe turned and hugged me, as I looked down he gave me a big wet kiss on the lips. \"I love you too Isla.\"\n\n\"Thank you, young man. I love you and your Mum very much.\"\n\nThat evening we went into the town for an early dinner. Eve and I ordered a steak and when Oliver heard us order he asked for one as well. The owner smiled and winked at us, \"I can cook you a nice man-size steak sir, no problem.\" It turned out to be the perfect size for the 'man' sitting with us and it came with fries and onion rings. Oliver grinned with pleasure as he tucked in. My food was great as well, but I paid more attention to the woman sitting opposite me. She was beautiful, had a great tan and looked very healthy, but she also looked lighter, happier, more relaxed than I'd seen before. I knew how she felt.\n\n*****\n\nI rolled over when I heard movement; Eve was obviously in the bathroom. We were going home tomorrow, and I wondered what was in store for us. She appeared and stood, naked, facing the bed with the sunlight catching her at an angle that emphasised her figure. Slim waist, wide hips, perfectly shaped breasts, long slender legs, that gorgeous face and her short, very sexy hair.\n\n\"I don't think that I've ever seen anyone as beautiful as you and I feel really lucky to be your lover.\"\n\nShe looked serious. \"Isla, this may seem sudden and impulsive, but we go home tomorrow and I don't want us to be apart. I'd like for us to be a couple, for us to live together.\"\n\n\"I've asked you this before, doesn't my age bother you?\"\n\n\"No, does my age bother you? You can't help who you fall in love with and I love you.\"\n\n\"Do you mean that ...\"\n\n\"I want to be your partner, lover and girlfriend, to make my home our home, for you to sleep beside me every night, for us to be a thing.\"\n\nI leaned over and kissed her. \"I've wanted that for a long time, but thought that I was an idiot.\" I lay back down touching her shoulder. \"Eve ...\"\n\n\"What is it?\"\n\n\"I love you.\"\n\nMum\n\nI was worried about telling my Mum, but there was no sense in delaying things or trying to avoid her. I parked the car outside the house. My knees were a bit shaky as we walked towards the door. Mum was in the lounge and I called to announce our arrival. She got up to hug me and said hello to Eve.\n\n\"It's nice to see you home safe. Did you have a good time?\"\n\nWe all sat. \"Yes, Mum we had a great time, it was fantastic, but that's ...\" I lost my voice and my nerve for a moment. Deep breath, \"Mum, Eve and I are in love.\"\n\nShe smiled at both of us; Eve took my hand, the wrist on which I wore the bracelet she'd given me. For just a moment I wanted to pull away, worried about my Mum, but she reached out to put her hand on my knee. \"You've been in love with her for years and I've always suspected that she had some very strong feelings for you as well.\"\n\n\"But we didn't, we've never ...\"\n\n\"I was shocked when you went to University, I'd half expect you to stay with Eve. Whenever you came home one of your first thoughts was for Eve and Oliver. I've always wanted you to be happy and I see that you both are.\" There was a big hug and suddenly I felt pounds lighter but burst into tears of joy nonetheless.\n\n\"Thanks, Mum. It happened when we were away and I never want to let her go again.\"\n\n\"Then don't. Do what your heart tells you is right and do it with determination.\" She turned to Eve, \"Take care of my daughter, I'm sure you will.\" She turned back to me, \"I assume that you won't be using your room anymore?\"\n\nI burst out laughing. \"I suppose that you can turn it into a sewing room.\"\n\n\"No, I'm going to redecorate it so that Oliver will feel welcome here if you two want some time to yourselves.\"\n\nDate night\n\nAbout a week later I strolled into my boss's office. Eve smiled as she looked up, \"Hi Honey.\"\n\n\"Boss, I'm leaving early, I have things to do. See you at home.\" She looked surprised but smiled.\n\nI collected Oliver from school; we packed a change of clothes and some of his games. He was excited and giggled when my Mum showed him where he was sleeping. I hugged him and turned to Mum who took my hand, \"He'll be okay here, we'll have fun and I'm looking forward to tonight. You need to go and have a good time.\"\n\nI heard Eve come in and she called for Oliver as she headed upstairs. She'd almost reached our bedroom when she started to ask, \"Hi honey, where's Olly hiding?\" She stood in the doorway looking at me. \"What the hell, what's going on?\"\n\nI was fastening the ankle strap on those stupid five-inch heels. She looked me up and down; I was wearing a pale blue silky vest, without a bra, matching French panties that partly hid a garter belt, and stockings. My hair was up and the make-up indicated that we were heading out.\n\n\"You need to catch up; the taxi will be here in an hour.\"\n\n\"Taxi, catch up, what? Where's Olly?\"\n\n\"My mum's Oliver sitting, he was giggling when I left him, downing a glass of chocolate milk. We'll collect him tomorrow to go swimming. You and I have a date night.\"\n\n\"A date night?\" There was a look of shock on her face.\n\n\"Yes, come on, I need you looking sexy, that should only take ten minutes, but you have an hour.\"\n\n\"But, you're dressed up and ...\"\n\n\"I'm in my underwear and in a few minutes you won't be seeing it until later ... if you're good.\"\n\nI stood, kissed her cheek and left the room. My dress was in the spare room, the one that used to be mine a long time ago. It was midnight blue velvet with a slit skirt at the front. The sides and front of the upper half had gauze panels that suggested more than they showed. It was gorgeous and it was, without doubt, the sexiest dress that I'd ever worn.\n\nEve came downstairs gingerly on her heels. Her dress was longer than mine but had slits at the side showing plenty of legs which made my pulse race and then I saw the cleavage. I'd never seen her wearing that dress, although it'd hung in her closet for many years. It was fire-engine red and screamed 'look at me.' I was going to struggle to take my eyes off of her all evening. I'd also never her seen her with that much eye make-up on, but it was her hair than held my attention, she'd gelled it so it was spiky. I put my hand to my mouth and for a few moments contemplated cancelling everything and stripping off there and then.\n\n\"You look hot, sexy hot and I'm tempted to stay home, but I'm taking my girlfriend out to dinner and when we get back I hope that we're both going to scream loud enough to disturb the neighbours.\"\n\n\"Your Mum's got Olly?\"\n\n\"For the night, he seemed happy enough and she's beside herself with joy. It was her idea. Come on let's go.\"\n\nWe had a secluded table in a fancy restaurant where the food was exquisite. We didn't say that much to each other but kept touching. Eve nearly choked on her wine when she reached the junction of my legs and discovered that I'd shaved. After the initial surprise, she slapped me gently and said, \"I'd like to have done that for you.\"\n\n\"Maybe I'll let you do it next time.\" She grinned. \"I'm wet and if you keep that up I may embarrass both of us right here, so stop.\"\n\nWe shared a chocolate dessert and fed each other using a single fork. By the time we called for the check, I was so turned on I had to concentrate to control myself.\n\nI raced to the bedroom and pulled off everything except my garter belt, stockings, heels and my bracelet. I stood at the side of the bed when Eve arrived and she gave a huge smile. I went over and slowly, very slowly removed her clothes gently slapping her hands away as she tried to help. I left her hold-up stockings and heels on, then nuzzled her neck and whispered, \"Would you like to fuck the babysitter?\"\n\n\"No, I'd like to fuck the woman that I'm in love with, you.\"\n\nI threw myself onto the bed and yelled, \"Well come on then, here I am.\"\n\nEve kneeled on the bed looming over me looking serious, \"I love you very much, but you're not the babysitter, you're my lover, my partner. Please don't demean yourself.\"\n\nI nodded, feeling a little chastised. \"Maybe I need to be spanked.\"\n\nThere was a look of astonishment now, \"Spanked?\"\n\nI nodded, \"I've been bad.\" I grinned.\n\n\"Stop it, I have no desire to spank you or hit you and I never want to hurt you.\"\n\n\"I'm hurting right now and need you to please kiss me, please.\" She smiled as she slowly moved towards me. Her arms enveloped me and our lips met. This is it, what we both wanted, what I needed and I was floating on a cloud in heaven.\n\nWhilst the kissing was going on there were a lot of hands trying to caress or touch and we got into a tangle. \"Eve, I want to try something.\" I spun around on the bed and lay on top of her so that our faces were facing each other's mounds.\n\n\"I've never done this,\" she said as she buried her tongue in my pussy, then withdrew and kissed my bare lips.\n\n\"Neither have I, but it feels so good that it won't be the only time. Oh, yes, there, like that.\" Sixty-nine is a great position as you can give and take, but I soon discovered that there are moments when you can't give because of what your lover is doing. This was one of those moments and I shook as she teased my clit. After I came down I pulled away a few inches so that I could concentrate on her. I gently bit her lips, then her clit and drove my tongue into her. I'd never really heard Eve swear, just the odd curse, but the mouthful of filth that she screamed as she came was both sexy and amusing.\n\n\"Dear God, you are astonishing. Thank you.\" We lay together gently stroking and I kept up with my tiny kisses on her shoulder. \"I love you bare, naked; I'm going to do the same.\"\n\n\"Okay, it does feel a bit odd right now, but ... sexy and clean. I'll get used to it; you don't have to shave for me. I love you the way you are.\"\n\n\"I want it and I'd like you to do it for me, would you?\"\n\n\"It would give me great pleasure.\" I burst out laughing, \"I suspect that it might give us both great pleasure.\"\n\nWe slept in each other's arms for about an hour until the need for the loo woke me up. Eve was sitting up with her arms open when I got back and she pulled me towards her. \"That scared me, I thought you'd left, don't ever leave me.\"\n\n\"Hush, it's taken us a few years to get here and I've never felt complete until now. I'm never going to leave. And now it's time that I went down the bed to check on you.\" Eve giggled as I slid down between those thighs. I was about to kiss her lips when a thought occurred to me. I pulled her stockings off and slid further down. Briefly, I looked up, \"A long time ago I got this strange idea and I just remembered it.\" I grabbed her left foot, kissed her toes and then sucked each one individually. It was a huge turn on for me and the way that Eve was reacting indicated that she agreed.\n\n\"What on earth? Where did you ... Bloody hell, that is so erotic, watching you do that. I never knew that my toes were so sensitive.\"\n\nI didn't answer, just smiled, well with my eyes at least, my mouth was busy and I kept working away. Her head was back, not watching any more, but I could feel tension building so I slid upwards and slid my tongue inside her. She lifted her back clear of the bed and made a sound like a tyre deflating. I kissed tenderly until she came back to earth and stroked my hair.\n\nI snuggled up beside her. \"The evening you went on that date, when I was working as your nanny, I told you that I was jealous. I was happier when you said that wouldn't see him again and you went to change into shorts. We sat close. I admired your legs and for some reason thought that your toes looked cute and I wanted to kiss them. I wondered what was wrong with me, but now I know that there's nothing wrong with me, I'm in love with you and I was back then. I'm in love with your toes as well\"\n\n\"I've loved you for a long time. I think that I kidded myself that it was love between friends and couldn't admit that it was anything else. Sooner or later it was going to catch up with us, I'm glad it has. Thank you for tonight and everything else.\"\n\nThat didn't go well\n\n\"What? What do you mean the two of you are a couple? That's disgusting and wrong and I will not allow it.\" Mike's Mum had turned a horrible shade of blue and I wasn't sure if she was going to have a stroke or heart attack, but Eve stood her ground.\n\n\"Firstly, I can do what I want; it's not the dark ages any longer. I love Isla and she feels the same about me. Secondly, you never truly forgave me for 'stealing' your son, but you kept up a pretence of sorts. You'd never have been around here after Mike died if it wasn't for Oliver.\"\n\nThere was a hiss as she retorted, \"It's not right, it's unnatural and you cannot bring my grandson up in a perverted household.\"\n\n\"Yes, I can. We both love him.\"\n\nI was standing by the door torn between going to hold Eve to comfort her or running away. Oliver decided for me as he pulled me by the hand towards his Mum. He stood between her and his Gran and looked up. \"Granny, my Mum loves Isla, so do I and Isla loves both of us. I wish my Dad was still here but he's not. Having Isla as my other Mum is great and if you don't like it that's sad.\"\n\nI couldn't help it, it came out in a burst as I stared at Oliver and then at his Mum, \"Your other Mum?\" I'm sure that my mouth and eyes were wide open.\n\nEve smiled at me and took my other hand as Oliver grabbed my waist. He looked up at me, \"I love you Mum Isla.\"\n\nMike's mother looked as if she was going to explode; she said nothing, although she made various hissing sounds as she stormed off. I ignored her and dropped to my knees. \"Oliver, I'm not your mum, but I love her and you and I'll try to be good and help you both.\"\n\n\"I'm happy you're here and I want you to be my other Mum, please.\"\n\nEve looked down at me, \"I'd like that too.\"\n\nIt was right about then that my mother arrived. \"I just passed Mike's Mum; she looked furious and just blanked me. Is something wrong?\"\n\nEve explained what had happened. Oliver had stood there silent but watching and listening. He let go of my hand and took my Mum's. \"If Isla is my other Mum, does that make you my other granny? I'd like that.\" He was grinning and looked so innocent. I've seen my Mum look shocked before, but never quite that badly.\n\nEventually, after looking at each of us she managed to mutter, \"Other Mum, other Granny? I suppose so.\"\n\nEve put her hand on Mum's shoulder, \"You do realise Sandra, that'll make you my mother in law.\" Now she looked almost as shocked again. I giggled.\n\n*****\n\nThat incident had set something off for Eve. Over the next few days, it was clear that she was considering something and I couldn't get her to share it with me. I confess that I was worried, was she having second thoughts? Was age a thing? It made me nervous.\n\nI was alone in bed, it was lurking and it was killing me, I had to know. I loved Eve with all my heart and I wanted to be with her, her and Oliver, who loved as much as I loved Eve. She opened the door and came over to the bed wearing a dark red silky robe that wasn't properly fastened so I could see most of her body through the gap. It made me gasp she was so beautiful. She flopped into the edge of the bed and stroked my cheek, \"You look so nervous and I'm sorry for making you feel like that. I have to tell you that I think that you're so beautiful, so much more than you realise and you're here in my bed. I'm very lucky, I love you and I don't want us to ever be apart. Isla, I love you so very much, will you marry me please and be my partner, wife, just say yes, please.\n\nMy eyes nearly popped out of my head and I'm sure that I must have looked stupid with my mouth wide open. \"But ... what do ... why?\"\n\n\"I love you, that's why.\"\n\n\"Are you serious, us to be married, forever?\"\n\nShe nodded and smiled, then produced a ring box. It was a single solitaire diamond in a simple mount and it slid on easily. \"It fits, so now you have to say yes.\"\n\n\"Yes, yes, yes.\"\n\nWedding\n\nIt wasn't a big affair just the two of us, a few family members, including my Dad and some friends, including Nicola. Eve had wanted me to have a 'proper dress', as she called it, a big fancy thing. I managed to rein it back into being a much simpler one than she'd envisioned and, it turned out, not that different from hers. There were no Bridesmaids, no Best Man, we didn't want them. The Wedding March was played, words were spoken, promises made, kisses and rings, which Oliver had carried, were exchanged - matching wedding bands. Eve moved the ring that Mike had given her to her right hand, it was a reminder of an important part of her life and it was right for her to continue to wear it.\n\nWe left Oliver with my Mum and spent a few days in Barcelona. We'd wanted a honeymoon, but I didn't want Oliver to be left out and this was my compromise. The three of us could go away somewhere later.\n\nEve was asleep in my arms, I felt as happy and content as it was possible to feel. I loved every part of her and knew that she loved me. Oliver was a wonderful little boy who I adored. I realised that I had a family, my family; all we needed now was a little girl. I giggled at the thought.\n\nEpilogue\n\nOliver was playing in the garden with his friends as Eve and I laid out snacks, trifle and birthday cake. It hardly seems possible that he's eleven today, as bright as any kid I'd ever known and I was now, legally, one of his parents. My Mum was sitting watching him with a big smile on her face. It was right then that his sister, Grace started crying. I went over to the pushchair and lifted her into my arms. She stopped crying instantly and Eve, who was watching said, \"You still have the magic touch.\"\n\n\"She reminds me of Oliver at that age.\" I suppose that she should do. When Mike had first been told that he had cancer he'd had some semen frozen before he started his treatments. When Eve and I spoke about a brother or sister for Oliver she told me about it and the problem of donor semen was solved. I expect that one day explaining to Oliver and Grace that they share the same father but different birth mothers might confuse them. It's hard to imagine that ten years ago I was the babysitter, then the nanny, then a friend and now I've become a wife and full-time Mum, at least until Grace goes to school. I do a little writing, but mostly I take care of the kids and my beloved Eve. She'd like me to stay home for a little longer, to look after another little one, but we'll have to see about that.\n\n\"My perfect family, when Mike died I was broken, but you helped to fix me and now I'm happier than I ever could have imagined. I love you, baby.\" She leaned over and kissed both of us.\n\nEve's epilogue\n\nI dried my hands and checked the time. Sitting down for ten minutes would be a welcome respite before the activity started. Grace turned and smiled at me as I made my way over to the armchair. She was standing, looking out of the window shifting her weight from leg to leg, in either anticipation or excitement. She'd asked to have a party for a few friends, to celebrate her birthday and they'd be here very soon. She'd agreed to have it today, although she'd be eight the next day. We'd told her that on the day itself, we wanted a family day, but we planned to collect her new Dalmatian puppy. She wasn't aware of that, even though she'd been pleading for a dog for weeks now. She wore a lovely floral dress that was far too short in my opinion, although that didn't seem to count for very much these days. Grace and Isla had overruled me, with support from Charlotte. Grace had long skinny legs, but I suspect that they'll fill out in her late teens just as Isla's had. Isla's Mum had shown me lots of photos of her daughter at that age and Grace was her double.",
        "Isla was sitting on the couch near to Sandra, her mother, chatting. Charlotte was sitting on the floor in front of them and Isla was brushing her long dark hair. She'd be starting school in September; it was hard to believe that she was five. Isla had carried one of my eggs, so she was truly ours and although it was early days it seemed likely that she'd look a bit like me. Charlotte was shyer than Grace, but they were almost always together and they both giggled a lot, just like Oliver had. Isla looked over at me and smiled. It set my pulse racing as it had done for years now, then she winked and I knew that she had some ideas for us later. I'd always thought that she was very attractive, but now, in her early thirties, she'd grown into a stunning woman, a head turner and she was mine, all mine, well, apart from the fact that I had to share her with Oliver, Grace and Charlotte, but that was okay.\n\nSandra saw the look on her daughters face; she smiled and shook her head gently. It had been wonderful to have her as a part of our family, she was a loving, kind grandmother, but she could be strict when the need arose. Somewhat different from Mike's Mum, who hadn't been around for a couple of years now.\n\nGrace checked the time again and then a smile broke out as she saw Oliver coming down the path after his driving lesson. Oliver would be eighteen in a few weeks and then he'll be off to University. He looked very much like his father, who'd sadly died before Oliver had reached his second birthday. I'll miss him a great deal, so will his sisters, but I suspect that Isla will take it worse than the rest of us, they were close, very close and they had been for almost all of his life.\n\nHe bustled through the door and scooped Grace up into his arms. They smiled at each other and exchanged kisses. \"Well, birthday girl are you all set?\"\n\n\"Yes, they'll be here soon. How was your lesson? Will you take me out for a drive when you pass your test?\"\n\n\"If I can borrow the car, you and Charlie will be my first passengers.\" Charlotte went over to Oliver and slapped his leg.\n\n\"I'd like to go with you, but my name is not Charlie!\" She scowled at him.\n\nThe next thing Oliver grabbed her and spun her upside down. She screamed, \"Put me down, put me down, you can call me Charlie if you like.\"\n\nHe put her back down and the three of them hugged. \"Love you both, now I'm going to set up the music.\" He'd agreed to act as DJ so that girls would be able to dance and I suspect that Grace was going to enjoy showing her big brother off.\n\nIsla came over to me and smiled. \"They're lovely kids aren't they?\"\n\n\"They should be, their mother is a magician.\"\n\nSandra joined in, \"Both of their mothers are wonderful and you should both be proud of them.\"\n\n\"Well, we had help from a pretty good Grandmother too.\"\n\nGrace screeched as the doorbell rang and she hurried away to answer it. I went along to check on things and speak to one of the girls Mum's to confirm what time to collect them. Just as she was heading off another two girls arrived. Grace escorted her guests into the garden and introduced them to Oliver. He was crouched down and Grace was glowing with pride. Soon all eight girls were here and the dancing had started. I stood with Sandra watching Grace and her friends.\n\n\"How quickly she's grown up. I'd never really thought much about grandkids, but now I have three of the nicest, thank you for that.\"\n\n\"They're good and I suspect that your daughter deserves most of the credit. She'll be lost when Charlotte starts school and Oliver goes away.\"\n\n\"She will, but she's going to help you isn't she?\"\n\n\"Yes. She's going to do a few hours each week and she should have more time to write. But she wants to be there for the girls and me.\"\n\n\"She adores you, and I see how you look at her, how you feel. The two of you are good together and I saw the look she gave you, so I can guess what that means.\" I blushed a little.\n\nCharlotte tugged my skirt whilst still holding Isla's hand, \"Mum, why are you going red?\"\n\n\"It's just a little warm honey.\" I thought Isla would burst into laughter, but she managed to control herself and just giggled softly.\n\n\"Oh Mum, I forgot to tell you, the publishers confirmed my book launch for November.\"\n\n\"That's great and I'm very proud of you.\"\n\n\"It's exciting, but I need to finish the follow-up. And now, it's time to get the food set up. Charlotte, why don't you go and see if Oliver wants a drink and maybe you could help him.\" She dashed off smiling; she thought that her big brother was a superhero.\n\nI was devastated when Mike went, but here we are sixteen years on. I have a wife who I adore, who feels the same about me, three wonderful children, good health and we have money. I'm lucky, very lucky.\n\nThe end\n\nThank you for reading; I'd love to hear your comments.\n\n \n"
    ],
    "authorname": "sandy_paris",
    "tags": [
        "couple",
        "heels",
        "kissing",
        "lesbian",
        "lesbian romance",
        "love",
        "romance"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/babysitter-nanny-friend"
}
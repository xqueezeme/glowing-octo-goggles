{
    "title": "The Mist of Time Ch. 15-16",
    "pages": [
        "CHAPTER FIFTEEN\n\n\n\nI came downstairs to my office at eight o' clock on Monday morning to the smell of freshly made coffee. I was not late. I usually started work at this time, but having Tina in at this time was unusual. \"Morning, Boss. I thought you would come back to the Pub yesterday.\"\n\n\"Sorry Tinkerbell, I decided to drive back here, so I could duck out of the thumbscrews and your interrogation.\"\n\n\"You only postponed it.\" She replied grimly and pointed to my chair. \"Sit! I have loaded your coffee with pentothal so I want a complete confession and miss nothing out.\"\n\n\"What do you want to know?\"\n\n\"Everything. Tell me about Bella's father for a start, are you engaged to Bella for second, and everything.\"\n\n\"He's a good bloke. He's in a wheelchair and very easy to get on with. No, I am not engaged to Bella, although I think her father believes that that will happen, except nobody is asking me what I think. Oh! And I have some more work for you. He's asked if we could take on the management of his rented land. That is it.\"\n\n\"Why's is he in a wheelchair?\"\n\n\"In his words. The horse stopped, he didn't. He's paraplegic, paralysed from the waist down.\"\n\n\"Oh, the poor man.\" \n\n\n\nI could see her filing items in her mind, then another question popped up. \"No mother around?\"\n\n\"No. Bella's mother died when she was eight.\"\n\n\"Why do I have to put you through the mangle?\" Tina complained. \"That's the sort of information that I need.\" She then went off to another tack. \"How was your dinner with Bella on Saturday night?\"\n\n\"Very good and very interesting.\"\n\n\"Go on.\"\n\n\"We went to Bon Vivant. Only it isn't a restaurant it's a private house owned by Emma and Gerry. They are excellent chefs and they only open as a restaurant when they don't have any outside catering, which is their main business. Bella is quite good friends with them and suggested and they have agreed to cater for us at the Dower House when we have this celebratory dinner.\"\n\nTina threw her hands up. \"Now you tell me. Boss getting information out of you is like squeezing a dry lemon.\"\n\n\"I haven't seen you since early Saturday evening.\" \n\n\n\nThat was a fact, but Tina like most women do not deal with facts. Once she had decided to ignore that detail she returned to the Saturday evening. \"And after the meal?\"\n\n\"After the meal we sat and chatted with Emma and Gerry and they gave me some advice about equipment for the kitchen. They will come up to look over the Dower House at some time, so perhaps you should alert Aleksy. By the way, Gerry is really Geraldine!\"\n\nSeeing the understanding coming to her and the facial signs of that understanding was interesting. \"You mean they are Le...\"\n\n\"Yep.\"\n\n\"And Bella is good friends with them?\"\n\n\"It would appear so.\" I was teasing Tina.\n\n\"Does Bella..?\"\n\n\"No.\"\n\nTina nodded and returned to the nub of her earlier question. \n\n\"So, after the meal?\"\n\n\"I took Bella home and thanked her for her company that night.\"\n\n\"Detail of thanking her please?\"\n\n\"A kiss.\"\n\n\"Tongues or just lips.\"\n\n\"A gentleman cannot answer such a question.\"\n\n\"Who says you are a gentleman?\"\n\n\n\n\n\nI changed the topic much to Tina's chagrin. \"I didn't have much time to look at the house. How is Aleksy getting on?\"\n\n\"He's happy about it. He reckons about six weeks and it will be done.\"\n\n\"Good. I'll go up there next weekend and have a look.\"\n\n\"Aleksy will be pleased about that. He's always worrying that it is costing you so much money and is afraid you won't like it.\"\n\n\"I'll try and re-assure him next weekend. I suppose I shall have to look at furnishings now.\"\n\n\"If I were you, Daniel. I would ask Bella to look at that for you.\"\n\n\"Why?\" I asked knowing how Tina would answer.\n\n\"It seems that she will be moving in, either as live-in lover or wife. Either way she will be the mistress of the house, and it should be furnished to her taste. After all your ideas are usually rubbish.\"\n\n\"Thank you for that Teresa.\"\n\n\n\nFurnishing the house would be a logistic problem and I needed to find out where I could get all I needed at one hit. I was certain that Chad could steer me in the right direction. He welcomed and immediately put the kettle on to make coffee. Before I could bring up the reason for calling he quizzed me about the arrangements of the Dower House. His face fell quite a few inches as I told him what I had in mind. \"You're doing it the wrong way round, Daniel. If you had talked to me before launching yourself in this madcap caper I would had advised you to do it differently. However it's not too late to get it right. I would have advised you to list the house as your corporate headquarters, with you renting an apartment within the house. All of your outlay on restoring the property could then be set against your company's profits as necessary expenditure, reducing your corporation tax. It would help if you use the property occasionally for business functions. The rent you pay to yourself has to be at market value; else the revenue people will look deeper. In later years if further work has to be done again it can be set against your liability. If you ever cease trading you can buy the property back from the business for a song.\n\nI was suitably chastened and I liked the idea. \"Thanks, Chad. I will do as you suggest.\"\n\n\"Good.\" He smiled wickedly. \"And I won't even charge you for the advice.\"\n\n\"May I get to the reason I am here in the first place?\" I enquired.\n\n\"Of course.\"\n\n\"Do you have any dealings with a wholesaler of furniture and carpets etcetera? I will need a boat-load of good quality stuff.\"\n\n\"Hmm. Yes.\" He took a post-it note and wrote. \"Call these people, ask for Greg. I am sure he will be able to help you. Will you need a lot?\"\n\n\"Yes I think I will. A dining table and chairs for at least twelve in comfort. Probably something like six settees and the same number of easy chairs. Four beds at least, all doubles, occasional tables, the list will go on.\"\n\n\"Well Greg will be very happy to see you. I'll phone him and tell him you will call.\"\n\n\n\nBefore I left I mentioned that I would be hosting a dinner to celebrate my new corporate house. And that I would like for he and Lily to attend. He was guarded in his reply. \"Who else will be there?\"\n\n\"Tina and her intended, Aleksy. Actually Aleksy is the builder who has done the restoration. My neighbour, Andrew Swinson and his daughter Annabel, who has asked me to become his land agent, and of course you and Lily.\"\n\n\"The contractor and a possible customer. Good! That makes it deductible. Corporate entertaining.\" He grinned. \"Daniel I will have to let you know about Lily and me. You will understand that Lily is still rather diffident about socialising.\"\n\n\"I understand, Chad. It would be good to have you both there, though.\"\n\n\"I'll let you know.\"\n\n\"Oh by the way. Andrew Swinson needs a good tax accountant. Do I get a discount for finding new clients for you?\"\n\n\"No. You get enough free advice from me anyway. Don't push your luck.\"\n\n\n\n\n\nThe furniture purchase was taken out of my hands completely. Tina made the arrangements for she and Bella to visit the wholesaler. Two days later they met at a bistro in the Mile End Road and later took off to spend a lot of the Company's money. The idea of a bistro in the Mile End Road would be an impossible thought for those who knew the area thirty years before, where the only place to get a coffee was in a seedy cafe, which was usually pronounced caff! Times change and the area had changed with the times, from being a run-down tenement locality it had morphed into a very desirable place. There was a square close by; Tredegar Square which now was almost the equal of the up-market squares of Holland Park, with property prices often reaching a million pounds for a three storey town house. I had started my business just before the resurgence of the East End so even my modest portfolio had increased in value far beyond what I had expected. \n\n\n\nWhilst Tina and Bella were spending the company's money I was sitting at my desk trying to make the money. An email from an auctioneer in Ipswich alerted me to another auction. The properties offered seemed to be right to me and I emailed back with my intention to bid. The day's post arrived with a letter from Mr. Anders. His company had agreed to put down a twenty percent deposit for my properties. Enclosed was a cheque for eight hundred thousand. With a smile on my face I put that to one side. I would wave that in Tina's face when she got back.\n\n\n\nIf there is one thing that makes women happy, it is spending money. Therefore it was an extremely happy Tina who returned to the office later that afternoon. Bella would have liked to come to the office but as they had spent more time than they had thought, she decided to drive back home before the rush hour. When Tina presented the invoice I gulped and must have gone white which made Tina laugh. \"What did you expect, Boss? Good stuff is expensive these days and Annabel knows what quality is.\"\n\nI closed my eyes and took deep breaths until I regained my equilibrium. \"Right, it is a good job I have just got this cheque from Mr. Anders.\" I pushed the cheque across the desk.\n\n\"Oh good. Greg took us to another supplier and we bought everything you need for the kitchen as well.\"\n\n\"Get me coffee, strong, black coffee, and put a good slug of whisky in it.\"\n\n\n\n\n\nI got the coffee, but knew from the first taste that she was not allowing me the whisky. \"Ok. Tanya, what have you actually bought?\"\n\n\"Carpets for the lounge, office and bedrooms. Big oriental rugs for the dining and morning room. Settees and easy chairs for the lounge and morning room.\" She paused for breath. \"A beautiful table and chairs for the dining room, it seats ten in comfort and fourteen if needed with a slip in extension. Beds for the upstairs, Wardrobes for hanging and chests with drawers. Bella picked up on your comment of disliking overhead lights, so we also bought a number of occasional tables and big table lamps. When we are next up at Chetford we will be going out to get all the linens you will need.\"\n\n\"I see. Well I suppose if you have bought all that it makes the figure on this invoice a little better to understand.\"\n\n\"You will like everything we ordered. Bella recognises quality and she has an eye to interior design. It's a pity her choice of men is so poor.\"\n\n\n\nI noticed that she had talked of rugs for the dining room. \"Why no carpet for the dining and morning rooms?\"\n\n\"Ah! I wondered if you would pick up on that. Aleksy had taken some of the floorboards up and was surprised. It appears that the floorboards are solid oak and one and a half inches thick.\"\n\n\"One and a half inches! That's overkill.\"\n\n\"Yes. Aleksy said something the same. He and Gustaw got them all up and refitted them so there were no gaps. They are sanding the floors down and will stain them. Bella said to use a light oak stain and I agreed with her.\"\n\n\"Is there nobody who will ask me for my opinion?\"\n\n\"Why? Your ideas about interior design could be written on a pin-head. Bella seems to have the right touch.\"\n\n\"I shall have to think about staff hiring and firing.\"\n\n\"Rubbish. You will be very pleased when you see it.\"\n\n\n\n\n\nI was very pleased. I went up to Chetford the next weekend. I was deterred from entering the house as clouds of dust emanated from the morning room and the dining room where Aleksy and Gustaw were using belt sanders on the floorboards. The empty shell that had once been was now a house coming close to being an elegant home. I decided not to enter and disturb Aleksy so I walked around the house and took my leisurely way towards the summit of the hill and the ruins of the old house. Of course I had not walked too far when the drumming of hooves warned me of company. I stopped and waited for Bella to join me. She dismounted and smiling came to hug and kiss. An activity in which I joined quite readily. Drummond put a stop to that by nosing Bella in her back. \"Stop that Drummond! You will have to put up with sharing me with Daniel.\" She grinned. \"Sorry, he can get a little jealous at times.\"\n\n\"With Drummond around then you will have no fear for your honour then.\"\n\n\"Damn!\" She laughed. \"Were you walking up to the ruins?\"\n\n\"Yes. Aleksy and Gustaw are sanding the floors, so not wishing to get covered with dust I thought a stroll was in order.\"\n\n\"I'll join you, if you don't mind.\"\n\n\"What about the horse?\"\n\n\"Oh, he will be fine. I'll lead him on the rein and let him loose to graze when we get nearer to the summit. He won't go further than ten yards or so from where I drop the reins.\"\n\n\"Let's go then.\"\n\n\n\n\n\nCHAPTER SIXTEEN\n\n\n\n\n\nDrummond walked along with Bella holding the rein until we were some fifty yards from the summit. She dropped the rein and the horse stopped and watched Bella for a moment and then put his head down and started to graze. We walked on and found a path through the brambles eventually arriving where I had once noted the granite setts. Of course they were no longer here. We strolled casually for a while. Our conversation was desultory commentating on what had been and was the fire that destroyed the house was accidental or arson. I had been thinking about this for some time and believed that it was arson. \"From what I understand the house was closed up and nobody lived there. Having been built in the early eighteen hundreds it wouldn't have gas or, of course, electricity. I doubt that it was caused by any natural phenomenon. Perhaps a vagrant had got in and he set the fire.\"\n\nBella seemed of the same opinion although she had another slant. \"Arabella in her diary says that Dashwood's wife, Adelaide hated the house. You know what they say about a woman scorned. I wouldn't be surprised if she had the place torched as a sort of expiation for all the hurt she suffered when she lived there.\" \n\n\"I know she and Robert were living with her father in Braintree at the time. Perhaps it was Robert who did it. After all he didn't have much reason to like the place.\"\n\nBella looked surprised. \"Arabella didn't know that. I mean she never mentioned where Adelaide had gone. Robert was her illegitimate son wasn't he?\"\n\n\"Yes. My great grandfather.\" We walked on for a while. \"It's funny how the history of the Swinsons and the Chandlers is entwined together.\"\n\n\"Hmm.\" Bella was smiling devilishly. \"I like that thought, Swinson and Chandler entwined. Yes. We owe it to fate and get a Swinson entwined with a Chandler again...Soon.\"\n\n\"I think, Miss Swinson that you are twisting the words for your own ends.\"\n\n\"Perhaps, Mr. Chandler. Are you set against that?\"\n\n\"On no. Bella. Not at all.\"\n\n\"Good.\"\n\n\n\nWe returned to where Drummond was busily cropping grass. I was surprised that he had had stayed near to where Bella had dropped the reins. Bella thought she should go. \"Any longer and he will cool down too much.\" She turned to me. \"I hope I didn't spend too much of your money.\"\n\n\"Don't worry. Tina said you had a good eye for things. I have no doubt that I will like everything you have chosen.\" I put my arm around her waist and pulled her to me. \"Shall I see you soon?\"\n\n\"I am sure.\" She raised her face. I dipped mine and our lips came together. This was a different kind of kiss. She pressed her body against mine, not teasingly but a need to be close, to feel the oneness of a man and a woman who knew that soon they would be together in a more intimate embrace. We were disturbed by Drummond snuffling at us trying to prise us apart. \"Oh Drummond.\" Bella cried. \"I love you, but you have a poor sense of occasion.\" Drummond didn't care. Bella gave me another quick kiss. \"That was the best yet, Daniel. If your kisses get any better, I shall swoon and be unable to protect my honour...Hopefully.\"\n\nI laughed. \"Get along you hussy.\"\n\n\"Your hussy, Daniel. Now give me a lift into the saddle, please?\" She made a knee; I gripped her shin and lifted her up into the saddle. She gathered the reins in her right hand and the left hand came down and caressed my cheek. \"I can't wait.\" Then she was off. Her last words were oblique leaving me the problem of deciphering her meaning.\n\n\n\nAs Bella and Daniel went the different ways a voice disturbed the tranquillity of the hillock. \"So she is my grand-niece. She rides well. And he is the image of you, Danbury.\"\n\n\"So I have been told. Happily for us both that we don't take after Dashwood.\"\n\n\"If you did I doubt that I would love you so much.\"\n\n\"And for that I give much thanks.\"\n\n\n\n\n\nI interrupted Aleksy just as he was sweeping the floor of the morning room. The sanding had created lots of dust, the majority being vacuumed into the machines' dust-bag. He was still wearing the mask as there was still a lot of dust in the air. He indicated that he would see me outside. He took a big breath when he joined me on the veranda. \"How did it go?\" I enquired.\n\n\"Good, Boss. Wipe down with white spirit and then when dry, stain. Will look very good.\"\n\n\"Tina told me that the boards were solid oak. That was very extravagant.\"\n\n\"Not only solid oak, it was heart-wood. Closest grain, very strong. Same with structure, bricks best quality and the mortar is even stronger than bricks. No wonder that house resisted decay.\"\n\n\"And no wonder the Chandlers ran out of money.\" That didn't mean anything to Aleksy. \"How long before I can move in?\"\n\nAleksy thought for a while. I could see him mentally ticking off various points. \"Two weeks, Boss. Come, I can show you what we have done.\"\n\n\n\nThe dust had cleared enough for us to walk around without sneezing. The staircase was excellent. To my mind the main stair was wider than the original. Aleksy explained that buying the stair 'off the peg' so to speak meant that he had to make a choice between a string that was actually narrower than the original or slightly wider. Gustaw had made a very good job of fitting the stair into the balustrade of the first floor, and the half-landing looked as if it was always part of the stair. The tiles on the floor of the foyer were perfect. The black grouting, about which I was dubious was exactly what it needed. As we walked around my house I gradually became ever more excited. Hitherto I had been unable to visualize the house when it was completely restored, except for small details. Now it had come all together and every part seemed to compliment every other detail of the restoration. My mind kept seeing my home, and I had to keep reminding myself that actually my company owned it, I was merely the lodger. \"You said two weeks, Aleksy, but to my eyes it looks complete.\"\n\n\"Need time for systems to settle down, get heat gradually into the walls, and see what expands or contracts. Fiddling stuff, but I don't want you complaining later.\"\n\n\"Tina wouldn't let me.\"\n\nHe laughed. \"Is true. But what would she say to me?\"\n\nI joined in his laughter. \"I could imagine. Ok, Aleksy, I will not be up again until you say it's ready. You have done a good job. I didn't think it could look as good as this.\"\n\n\"Thanks, Boss. I will let Tina know when I think we have covered all the snagging.\"\n\n\n\n\n\nI had not planned to spend the weekend, so I drove back to Bethnal Green. Having driven this journey often now, I relaxed a little and in my mind started thinking things through. It was Bella that occupied my thoughts and what I should do. She was very attractive to me; the criteria of beauty has a norm yet the individual man's view varies from that norm. Bella was lithe, presumably because of her riding so frequently; she didn't have much of a bust, something that many men would regard as important. I would not describe her face as beautiful, yet she had a character that enlivened that face, the twinkle in her eyes and the smile made me want to look at her all day. I liked her quick wit and her boldness. Yes, I liked her for all these qualities and for the fact that she liked me. I was certain that soon we would be lovers; I couldn't ignore the broad hints that she dropped. That was another trait that I liked, her frankness. My mind turned to the future, would Bella be the right woman for me, for life? I think that Bella had those plans; her involvement in the Dower House was a statement of her wish to be the chatelaine there. However I viewed this I could find little fault. I knew I was close to a decision.",
        "I came down to the office on Monday and walked into a problem. One of my rent collectors was waiting for me. \"Good morning Hussein. How are you?\"\n\n\"Not happy Mr. Chandler. The tenant in 67 South Road has not paid rent for two months. I have called many times but no one is there. I called yesterday hoping to see him and found another family in residence. They say they have paid rent to Mr. Singh. He has not contacted me with the rent unless he has paid you directly.\"\n\n\"Sit down Hussein, I'll check.\"\n\n\n\nI went through our receipts and unsurprisingly there was no payment, nor any mention by Mr. Singh that he was sub-letting. I thought for a while and came to a decision. I opened the safe and selected my copy of the door key. I gave it to Hussein. \"You know the drill, Hussein. If the lock has been changed then the tenants are attempting to cheat us. If that has happened let me know and I will get the police down to evict the tenants.\"\n\n\n\n\n\nAll landlords will have this problem from time to time. Usually it is resolved by a threat to evict. However if the tenant changes the lock they are denying the right of the house-owner (me in this case) entry into their own property, which is a criminal act, so the police have to be called. Hussein went off to sort the problem. He was very useful to me, as well as being tireless at collecting rents he also spoke quite a few languages of the sub-continent. When dealing with tenants who had little or no command of English, he was invaluable\n\n\n\nTina bounced in at ten o' clock, obviously having driven down that morning. She was in an ebullient mood which changed as I explained what Hussein had told me. \"I'll go there now!\"\n\n\"No you will not. You are employed as a secretary, a job at which you are particularly good. You are not the company bruiser. I know you enjoy that role, but as this is likely to become a police action I don't want accusations of harsh words or brutality.\" Sullenly she went out and I heard the rattle of the kettle as she took out her irritation on that innocent article.\n\n\n\nShe was in a better mood when she came back bearing mugs of coffee. \"Aleksy told me you called in on Saturday and that you had a long conversation with Bella. What do you think?\"\n\n\"I was very impressed. Aleksy reckons two weeks to completion.\"\n\n\"Yes, I know. The carpet people will be in later this week, also the kitchen will be fitted this week. All the furniture will be delivered next week, so when you go up in two weeks it will all be finished. I made an arrangement with Bella to go up on Friday and we will shop for linens.\"\n\n\"I suppose you will want the company card for that.\" I sighed.\n\n\"Yes please.\" Tina smiled sweetly.\n\n\n\n\n\n\"I have been thinking, Tina.\"\n\n\"Oh no, Boss. When you start thinking it all goes wrong.\" She cried.\n\n\"You are a very impertinent employee. Tanya. I was going to say that you and Aleksy should move into one of the suites until you can get something else.\"\n\n\"Ah! I was going to suggest that. But I think that it would be better in the long run to find a cottage or something nearby. Bella said that her dad had a cottage that would suit, but it needs the Aleksy touch before we could move in.\"\n\n\"It would appear that you are making all the arrangements. It's a good job that one of us has the money to pay for it all.\"\n\nShe stuck her tongue out at me \"You are obsessed with money, Mr. Scrooge.\"\n\n\n\n\n\nTwo weeks later I went up to Chetford. I was astounded at the difference. Tina and Bella were hurrying around making last minute placements. If the house had an atmosphere before I had not detected it, I understood that which I could see and touch. Now, however I did detect an atmosphere. It exuded a sense of wakening after years of slumber; it was welcoming, preparing for a future and wiping out the past. Bella joined me as I walked around. \"What do you think? Daniel.\"\n\n\"It's perfect. You and Tina have chosen well, it all fits in as if it was meant to be.\"\n\nBella had been holding her breath and almost subsided when at last she relaxed. \"Thank God! I was so worried that you wouldn't like my choices.\"\n\n\"How could I dislike anything? After all you chose it. I had complete confidence in you.\"\n\n\n\n\n\nAleksy was hovering, almost dancing on his toes. I turned to him. \"Aleksy, well done. Absolutely superb.\"\n\n\"Thank you, Boss. Men very happy too.\" He was referring to the bonus I had made to each and every one of the crew. \"I go make last check round.\" He wandered off and I turned to Bella.\n\n\"Thank you for getting so involved in all this. I really appreciate your input. Now I suppose we should arrange the dinner we talked about. Any ideas?\" My question was rhetorical as I was certain that Bella had already made some plans.\n\n\"Well, Mr. Chandler that does depend on when you move in, doesn't it?\"\n\n\"That will be later next week. Tina has arranged with the removals people for Thursday. I don't have too much of personal stuff apart from clothes so I expect to move in next weekend.\"\n\n\"Good. If we send out invitations now your guests will have two weeks to make their arrangements. Who is being invited?\"\n\n\"You, of course. Your father, Tina and Aleksy and my accountant, Chad and his wife Lily.\"\n\n\"That's it?\" Bella seemed surprised. \"You have some important neighbours, perhaps you should ask some of them.\"\n\n\"Perhaps later. This dinner is for my true friends, those who helped me get where I am and those who helped me in this project. I count my true friends on one hand; others will be business friends and those can vanish in puff of smoke.\"\n\nBella digested that and smiled. \"I understand that. Daddy has quite a few friends like that. Oh! Daddy will have to have his helper with him. Jason may be uncomfortable sitting with us. I don't think Emma and Gerry will mind him having something to eat in the kitchen.\"\n\n\"Helper?\"\n\nBella nodded. \"Yes. He can get around Meadowlea quite easily as he had slopes and wide doorways put in. Outside or anywhere else he needs Jason.\"\n\n\"Right. It is two weeks today, if Emma and Gerry can fit us in.\"\n\n\"I am sure they will. They still want to be in for the ritual spanking.\" Bella's eyes twinkled.\n\n\"As I said if and when, that will be a private affair.\"\n\n\n\n\n\nTo be continued...\n"
    ],
    "authorname": "Kezza67",
    "tags": [
        "history",
        "mystery",
        "doppelganger",
        "romance",
        "ghosts"
    ],
    "category": "Non-Erotic",
    "url": "https://www.literotica.com/s/the-mist-of-time-ch-15-16"
}
{
    "title": "Black Forest",
    "pages": [
        "I was excited as I clicked on the email that had just arrived in my inbox. It was from Hiroshi Yamamoto.\n\nHiroshi was my best friend while we attended a private school in Basel, Switzerland. Both of us were only children and our parents were working in Basel. My dad was a director at a pharmaceutical company and Hiroshi's father was a director at another. We first met in our 10th year and both finished with IB degrees 3 years later. Sadly, after 4 years in Basel, Hiroshi moved back to Japan with his parents.\n\nWe kept in touch and both of us had selected chemistry as our subject at university. My family remained in Switzerland and I attended university in Basel.\n\nI started to read the email and smiled at the good news. Hiroshi and his parents were taking a trip through France and Germany ending up in Switzerland. This meant I was sure to see him again. I continued reading and was excited to see that he was inviting me to join them in Paris. He'd complained to his parents that it would be boring for him, so they suggested he ask me to come along.\n\nThis was great news as I had an upcoming holiday and was already dreading 3 weeks of nothing to do. The timing was perfect. I quickly replied to my friend and told him I'd love to accept the invitation. I'd met his parents many times. His father was somewhat withdrawn, but his mother was the opposite and I'd had a secret crush on her! She was in her late thirties when I'd last see her, but she looked much younger. Petite, with long silky black hair and to me a perfect female specimen.\n\nDespite many dreams and fantasies, of course, nothing had ever happened between us, but I'd enjoyed every minute of her company and looked forward to seeing her again. Another email arrived and it was from the always efficient Hiroshi. He was happy I'd accepted and sent me their travel itinerary. He'd even already found the train I could take from Basel to Paris!\n\nThe plan was to spend three nights in Paris then rent a car and drive to Colmar for another night before heading to the Black Forest in Germany. We'd stay at a hotel there for another two nights and then drive to Basel. It didn't sound that exciting to me, but I wasn't interested in sightseeing anyway. Instead of email, I gave him a call on WhatsApp.\n\n\"Hi, Hiroshi!\"\n\n\"Hi, Patrick!\"\n\n\"Thanks so much for inviting me. I'll book the train ticket to Paris today.\"\n\n\"Great. I'm so glad you can come along, I would have died of boredom with just my parents!\"\n\nWe both laughed and spent the rest of the call talking about what was going on in our lives at the moment. Both of us were very similar in character and were typical geeks, focused more on studying than having fun.\n\n\"So, have you finally got a girlfriend Patrick?\"\n\n\"No, sadly no progress in that area despite my best efforts. How about you?\"\n\nHe shook his head somewhat sadly, \"Nope. I did go out with a really hot girl, but she never answered my messages afterwards.\"\n\n\"Sorry to hear that, but at least you got to go on a date. You'll have to give me some tips during our trip!\"\n\nHe laughed, \"Will do. I've got to go now but I can't wait to see you next week!\"\n\nWe ended the call and I went downstairs with a spring in my step.\n\n\"Mum, I'm going to join Hiroshi and his parents in Paris next week and then travel with them through France, Germany and back to Basel.\"\n\n\"When did this happen?\" my mother said in surprise.\n\n\"Just now. It's all arranged, I only need to get a ticket from here to Paris.\"\n\n\"Are you sure it's OK with the Yamamoto?\"\n\n\"Of course, it was their idea!\"\n\n\"Well, that's very generous of them. I hope I get a chance to see Sakura again, she was a very nice lady.\"\n\nAn image of Hiroshi's mum flashed through my mind. It was one I'd used many times when I fantasised about her and was the only time, I'd ever seen her in a swimsuit. She'd taken Hiroshi and me to a local waterpark and I'd burned the image of her delicate, small body into my mind. I could remember every detail as if it had been yesterday. Mrs Yamamoto had been wearing a robe when we left the changing rooms and when she slipped it off to enter the pool my heart had stopped.\n\nThe suit was a simple, conservative one piece, but it was skin-tight. The stretchy black fabric seemed to be unlined, like the suit's professional swimmers wear. I couldn't help but stare at her firm and perfectly formed bottom as it was showcased by the suit. To my horror, I'd felt my penis react and quickly stiffen to form an obvious bulge in my loose trunks.\n\nLuckily Hiroshi was distracted as he was looking at other girls, that despite showing off far more flesh in their skimpy suits, didn't interest me as much as his mother. When she turned towards us after depositing her robe on a lounger, I shifted my eyes up quickly but still managed to catch a glimpse of, what I would later learn, was called a camel toe and the small bumps of her breasts capped by the two rather obvious points of her nipples.\n\nI gulped as I met her eyes. She'd caught me giving her the once over and I detected a slight blush on her pale skin. I felt like a pervert and when her eyes dropped to my crotch I wanted to die on the spot. However, instead of being angry, her eyes widened slightly, and she had a tiny smile on her face as she turned and entered the water. I'd quickly followed her, anxious to hide my arousal from everyone else.\n\n\"Patrick?\"\n\n\"Um, ah, yeah?\"\n\n\"You were a million miles away!\"\n\n\"Sorry mum, I was just thinking about something.\"\n\n\"Yes, well I asked if you'd offered to pay your share?\"\n\n\"No.\"\n\n\"Really dear, sometimes I wonder what goes on in your head! Write a quick note to Hiroshi to ask. They'll probably refuse any money since but it's basic manners to ask.\"\n\n\"OK, I will!\", I said as I pictured what mum would think if she knew I'd been thinking of Mrs Yamamoto's sexy body.\n\nI went back to my bedroom and quickly fired off a text to Hiroshi then bought my ticket to Paris. As expected, Hiroshi wrote back saying I was their guest and since I'd be sharing a room with him there were hardly any extra costs.\n\nThe days passed slowly and every night I had trouble falling asleep as I imagined all sorts of unlikely scenarios involving Hiroshi's mum and myself. Without fail, each day began with morning wood and a wet sticky patch of my nocturnal emissions at the front of my PJ's. I began to worry about sharing a room with my friend as it would be very difficult to hide my condition from him.\n\n\"Are you ready Patrick?\" my dad called from downstairs.\n\nI stuffed the last of my belongings into my bag and replied, \"Yup! I'm coming.\"\n\nI got a hug and a kiss from mum as I left with dad for the station. He gave me a short lecture about how to behave properly on the way and I was glad when I was able to leave the car. I stood on the platform waiting for the train when my phone vibrated. It was a message from Hiroshi telling me they'd arrived in Paris and were heading for the hotel.\n\nThe TGV train would take just over 3 hours to reach Paris and Hiroshi confirmed that they'd meet me at the station. After settling into my seat, I texted back that I was about to get underway and was looking forward to seeing them all again.\n\nWith the countryside flashing by I found myself daydreaming about Mrs Yamamoto again. Would she have changed much since I last saw her? I closed my eyes and again saw the image of her in her swimsuit. I knew that some guys would find her unattractive due to her petite build, but for me the opposite was true. I was attracted to a well-formed arse and small breasts with big nipples. Asian women often met these criteria and I knew Mrs Yamamoto was one of them.\n\nI felt my penis begin to stiffen and quickly used my jacket to hide the bulge forming between my legs. Jesus, I had to get things under control, or I'd really be in trouble when meeting my friend and his parents.\n\nWith the train slowing as it approached the station, I gathered my belongings and walked down the aisle to stand in the queue waiting to exit. I looked out at the platform as the train pulled in but failed to see anyone recognizable. Once I'd disembarked and the crowds dispersed, I saw Hiroshi and his parents at the same moment they saw me.\n\nI waved and Hiroshi rushed towards me with a big grin on his face. I grinned back but then focused my attention on his mother. She looked exactly as I remembered and hadn't aged at all. She was smiling widely as she followed her son with a more sedate pace. A few steps behind was her husband. His hair was grey, and he'd put on quite a bit of weight. His expression was neither friendly nor unfriendly (I'll call it neutral) as he stood waiting.\n\n\"Hi, Patrick! Great to see you!\" Hiroshi exclaimed as he hugged me.\n\n\"Yeah, it's been too long, my friend!\"\n\n\"Hello, Patrick,\" a soft voice said.\n\nHiroshi released me and I turned to his mum. I blushed slightly as she looked more beautiful than ever. Extending my hand, I said, \"Hello Mrs Yamamoto, thank you so much for inviting me.\"\n\nShe smiled, ignored my hand and said, \"You must call me Sakura now, you are all grown up now!\"\n\nMy body stiffened as she stepped forward and gave me a quick hug. I was thankful for the cover of my jacket and bag as even this brief and innocent contact had caused a reaction down below.\n\nHiroshi took my bag as we started walking towards his father. I draped my jacket over my left arm and held it strategically as we approached him.\n\nI extended my hand and said, \"Hello Mr Yamamoto, thank you for inviting me.\"\n\nHis expression didn't change as he took my hand and mumbled a greeting. Switching to Japanese he said something and then turned and walked away. He'd never been particularly friendly, and it looked like nothing had changed. Hiroshi shrugged and Sakura looked a bit embarrassed as we followed her husband out of the station.\n\nA taxi was waiting and whisked us to the hotel.\n\n\"You can get cleaned up and have a quick rest, then we can do some sightseeing,\" Sakura said.\n\nI nodded and smiled at her. The taxi was a small Renault and I'd offered to take the middle seat, but Sakura had insisted, saying she was the smallest. I tried to sit as close to the door as possible but avoiding contact with her was impossible. In the close quarters of the car, I could also detect a lovely fragrance that must be her perfume.\n\nMy penis hadn't relaxed since the hug and remained stiff for the entire trip. I was mortified by how little control I had of my body in her presence and was glad when we finally parted ways. Our rooms were next to each other, but thankfully without a connecting door. We had twin beds and a nice bathroom with a shower and even a bathtub. Thankfully, the absence of his mother meant my excitement subsided and I was able to hang up my jacket as I chatted with my friend.\n\n\"Go and take a quick shower and then we can catch up\", he said.\n\nI nodded and removed a few things from my bag before stepping into the bathroom. As I was closing the door, Hiroshi said \"Leave it open a bit so we can talk.\"\n\nI wasn't too keen on the idea as I'd been planning to jerk off in the shower in the hope of avoiding any embarrassing situations later. Apart from that, I'd never been comfortable being naked around others and despite having seen Hiroshi naked a few times in changing rooms I'd managed to keep my private parts private.\n\nNot wanting to seem rude I did as he asked and left the door open a few centimetres and quickly removed my clothes before stepping into the shower. The hot water felt good and I'd totally forgotten that the door was open when I heard Hiroshi's voice above the water.\n\n\"Hope you don't mind but you couldn't hear me from outside.\"\n\nThankfully the glass of the shower cubicle was steamed up so he couldn't see me properly.\n\n\"Um, ah, no, um, that' OK.\"\n\n\"Good. We should probably get used to seeing each other in various stages of undress as it's hard to share a bathroom and not do so.\"\n\nI didn't like the sound of that, but it did make sense. \"I suppose so. I'm just not used to it.\"\n\nHe chuckled, \"You always were shy! I've always been used to being naked around other men so it's no big deal.\"\n\nThis sounded weird, \"What do you mean?\"\n\n\"Oh, you know, the bathing culture in Japan is quite different to what you do in the west. Growing up, my dad would often take me along to an onsen or public bath and everyone is naked there.\"\n\n\"God! I don't know if I could handle that.\"\n\nLaughing, Hiroshi said \"You get used to it. Anyway, for me, it's not a problem but I'll respect your privacy as much as possible.\"\n\n\"Thanks mate!\"\n\nWe chatted about this and that and then thankfully he left the bathroom before I used up the entire water supply of Paris.\n\nWith the coast clear, I left the safety of the shower and quickly dried myself. Wrapped in a warm and cosy bathrobe I left the bathroom and sat on the bed. Hiroshi was reading a book and put it down when I settled on the bed.\n\n\"So, tell me about this date you went on\", I said.\n\n\"Well, I met this exchange student at uni. Korean and built the way I like'em!\"\n\nI laughed, \"So how is that exactly?\"\n\nHiroshi smiled and used his hands to indicate extremely large breasts. \"The bigger the better!\"\n\nI shook my head and laughed. \"You're as crazy as you always were! So, what happened?\"\n\n\"Well, like I told you. I asked her out and to my delight, she said yes. We went to dinner and the cinema and then I took her back to her student digs.\"\n\nHe paused so I prodded, \"And?\"\n\n\"Things were going well, and she invited me up for a drink.\"\n\n\"Wow!\"\n\n\"Yeah wow.\" He said without much enthusiasm.\n\n\"Don't keep me in suspense!\"\n\nHe frowned and his expression was rather depressed. \"We talked and drank a bit and then she kissed me.\"\n\n\"OMG! You lucky bastard.\" He still looked sad and I wondered what had gone wrong.\n\n\"Things got quite steamy and she removed her top, her huge tits were almost falling out of her flimsy bra and I got my first feel.\"\n\nI felt myself getting aroused by his story and adjusted my posture and the robe to keep things hidden.\n\n\"Then she removed the bra and I almost died. You can't imagine how amazing she looked. Every dream I'd ever had was coming true and she let me touch and fondle them and even pinch her nipples.\"\n\nMy cock was now fully erect. \"Bloody hell Hiroshi! This is hot.\"\n\nHe frowned, \"I wanted to taste a nipple but when I leaned closer, she said, 'no so fast Oshi, you get undressed first.\"\n\n\"Oshi?\"\n\n\"Yeah, that's what she called me.\"\n\n\"What did you do?\"\n\n\"What do you think? I stripped off and was about to resume playing with her tits when she pushed me away and started laughing.\"\n\nMy heart sank as I imagined what had happened next.\n\n\"Christ Hiroshi, I'm sorry.\"\n\nHe looked at me with a sad smile. \"Yeah, well at least I got my first feel of tits.\"\n\n\"That's true and it's way more than I've ever had.\"\n\nI wasn't going to ask for details, but it seemed like he needed to tell someone.\n\n\"I really thought I was finally going to lose my virginity and instead the girl of my dreams was laughing at my manhood.\"\n\nI didn't know what to say to that and just looked at him with sympathy.\n\n\"The worst is, I think my cock was bigger than it had ever been, and she thought I was puny.\"\n\n\"This girl sounds like a real bitch. Anyway, you know everyone always says size isn't everything.\"\n\nThis seemed to cheer him up and he switched the conversation to me. \"So how about your love life?\"\n\nIt was my turn to be depressed, \"Ha, nothing -- nada, not a trace of one.\"\n\nHiroshi was shaking his head, \"I don't get it, Patrick. I'm not gay or anything but I think you're quite a good-looking guy and I don't understand why girls aren't chasing you! Even my mother thinks you're handsome.\"\n\nMy heart missed a beat when his words sank in. Had his mother really commented on my appearance? Before my excitement became obvious, I quickly replied.\n\n\"Thanks for the compliment but it's not just the fact that I seem to be invisible girls I've also never met one that I'm really attracted to.\"\n\n\"You know what I like in a girl, but I have no clue about you! Spill it, boy!\"\n\nI laughed, \"I like petite girls with nice buts.\"\n\n\"Really? You should move to japan, that description would fit half the female population!\"\n\nAn image of his mum flashed through my mind as he continued. \"So, you're not into big girls with big tits?\"\n\nI was shaking my head, \"Nope, I like a firm and prominent backside, small breasts with big nipples and all on a tiny body. Long dark hair would be a bonus.\"\n\nHe looked astounded, \"You're describing virtually every Japanese woman I know!\"\n\nI shrugged, \"Japanese, Chinese, Thai, I'd be happy with any of them.\"\n\n\"Ah, you have yellow fever?\"\n\n\"Yellow fever?\"\n\n\"Yeah, you're into Asian chicks!\"\n\n\"I suppose.\"\n\nHiroshi laughed, \"I should have invited you to Japan...\"\n\nOur conversation was interrupted by the ringing of the room phone. Hiroshi jumped off his bed and picked it up.\n\n\"Hello?\"\n\nThere was a pause and then he responded in Japanese before hanging up. \"We're going in ten minutes. You better get ready!\"\n\nWithout thinking, I stood up and headed for the bathroom.\n\n\"Whoa bro...!\" Hiroshi exclaimed.\n\nI turned to him, \"What?\"\n\nHe glanced at my crotch and said, \"Is that a banana or are you just that excited to see me?\"\n\nI followed his line of sight and realized I'd forgotten my erection. It was tenting the bathrobe obscenely and I was extremely embarrassed. What would he think of me? I quickly dropped my hands in an attempt to cover things up.\n\n\"Shit, I'm sorry mate.\" I stuttered with a red face.\n\nHe laughed, \"Don't be embarrassed Patrick! As long as it's not for me I don't mind.\"\n\n\"Of course it's not for you! All that talk about you getting a feel of some tits and then talking about Asian girls got me a bit excited.\" I exclaimed.\n\nHiroshi made a calming gesture with his hands, \"Chill, I was just kidding.\"\n\n\"Oh, OK then. Sorry.\"\n\n\"Like I said no problem. All I can say is that any woman would be more than happy with what you seem to be packing.\"\n\nAn inappropriate image of his mum flashed through my mind and caused my cock to jerk which in turn lifted the bathrobe even more.\n\nHiroshi broke down in laughter \"I see you like that idea!\"\n\nI ignored his comment and quickly went to the bathroom, closing the door firmly this time. I looked in the mirror and had to admit that the tented robe did look pretty impressive. What would Sakura think if she could see me now? I pushed the thought from my mind and started to get dressed. It wasn't easy, but with my still rigid penis standing vertically, squeezed under the waistband of my underpants I was able to get my pants on and, leaving my shirt untucked, was able to conceal my erection quite well.\n\nHiroshi gave me the once over when I left the bathroom. \"You should have taken care of that! I can still see it you know.\"\n\n\"Shit, I thought it wasn't noticeable anymore.\"\n\nHe shrugged. \"I suppose if no one stares at your crotch they won't notice. No time now anyway.\"\n\nFeeling very conspicuous I followed Hiroshi out of our room. He walked over to his parent's door and gave a quick knock. His mother opened the door and gestured for us to enter. It was the last thing I wanted to do, and I stood behind my friend trying to hide my discomfort.\n\n\"Are you alright Patrick?\"\n\nI blushed, \"Um, yes, fine thanks.\" Then added, \"Just a bit tired.\"\n\nHiroshi couldn't suppress a giggle and I wanted to kick him. His mum looked at us suspiciously and then turned to get ready. She was wearing a simple but very elegant black dress. It was quite short and revealed her toned and slim legs nicely. From behind her well-shaped behind was highlighted by the perfectly tailored design.\n\nMy penis swelled and I quickly looked away before Hiroshi or his dad caught me staring at Sakura's arse.",
        "Mr Yamamoto stepped out of the bathroom and seeing us grunted in greeting. He was wearing what looked like a business suit and not something you'd wear for a holiday. He said something in Japanese and then stepped to the door looking impatiently at his wife. She blushed slightly and then quickly slipped on her shoes, bending forwards as she did so.\n\nI was unable to stop my eyes from moving to her and my heart skipped a beat when the front of her dress gaped slightly. I saw a brief flash of a lacy black bra encasing her tiny breasts.\n\nHiroshi's elbow to my ribs brought me back to the moment and I blushed as I met his eyes. Had he seen my staring down his mum's dress?\n\nHe didn't seem upset and just tilted his head towards the doorway which his father was now walking through. I followed him and was surprised that Mr Yamamoto didn't wait for his wife. He was already striding down the corridor and I stepped out of the room. I stopped and held the door for Sakura, receiving a glance of thanks as she passed me.\n\nThe ride down to the lobby in the mirrored lift was excruciating as, wherever I looked, I was confronted by a reflection of Sakura. Mr Yamamoto left the lift first, I waited for the others to exit before leaving, again receiving a glance of thanks from Sakura.\n\nThe Yamamoto's had arranged a tour of the city and after a brief word with the concierge, we left the hotel and climbed into a somewhat larger car. My offer to sit in the middle was again rejected and Sakura took her seat between me and Hiroshi.\n\nI wasn't really interested in the sights but the tour was interesting and each time Sakura leaned over to look at something of interest on my side of the car I was treated to a glimpse down the front of her dress as well as a brief feeling of her body against mine. Needless to say, this all meant my arousal was in no way diminished and she actually brushed against my rigid shaft a few times by accident.\n\nWhen it came to leaving the car, I was treated to another surprise. I exited and held the door for Sakura, she slithered across the backseat and her short dress slid up her thighs almost revealing her crotch. I stared at her perfect legs and my cock throbbed in response. She caught me looking and gave a tiny smile in response. It was becoming clear to me that Sakura was enjoying showing herself and teasing me.\n\nI can't even remember the places we visited as my mind was totally focused on seeing as much of Hiroshi's beautiful mother as I could while at the same time hiding my arousal. It was not an easy task and when it was time to renter the car Sakura bent over and crawled in ahead of me. My eyes were glued to her perfect arse as the fabric of her dress framed it perfectly. This was quickly turning into the best sightseeing trip I'd ever been on!\n\nAt every stop, the process repeated itself with Sakura becoming slightly bolder each time. When I caught a glimpse of lacey black underwear that matched the bra she was wearing, I almost lost control. I bit my tongue to avoid ejaculating all over myself. The pain of the bite brought tears to my eyes, but it worked. Unloading my balls into my shirt would be something I couldn't have hidden as I produce rather copious amounts of ejaculate.\n\nI was pushing my luck, but it was just impossible for me to not ogle her. She was the most perfect woman I knew and despite the risk, I continued my voyeurism. By the time we returned to the hotel my tongue felt like mincemeat and my cock had been hard for most of the afternoon. As we parted ways at our rooms, Sakura had a twinkle in her eyes and gave me a quick wink when no one else was looking.\n\nMy face was flushed, and I was almost panting with pent up desire as I stumbled into the room behind Hiroshi. He looked at me with concern, \"Are you OK Patrick, you look weird?\"\n\nI tried to compose myself before answering, \"Um, yeah, I'm just a bit tired from the trip and all.\"\n\nHe looked at me suspiciously then glanced at my crotch. \"You know it's not healthy to have an erection for such a long time.\"\n\nI wiped my hand over my eyes and groaned. \"I'm sorry man, I just can't control it.\"\n\nHis expression was sympathetic, \"Look, I'm not an idiot and I know you've got the hots for my mum.\"\n\nI was about to deny this truth when he waved his hands to silence me. \"No, don't deny it and don't worry, I'm cool with it. I knew from the moment you described your ideal woman as you basically described her.\"\n\nI gasped and realized I hadn't been as good at hiding my feelings as I'd thought. Had his dad also noticed?\n\n\"Oh crap, I'm sorry Hiroshi. It's true, I think your mum is the most beautiful woman I've ever seen, and she's been in my fantasies for many years.\"\n\nInstead of being angry, Hiroshi laughed. \"I've known that ever since we were at the pool together. You were walking around with a boner the whole time, and unlike mine, yours isn't easily hidden!\"\n\nI was mortified by his words and dropped onto the bed covering my eyes in disgrace. I felt the mattress sink as Hiroshi sat next to me and then he put his arm around my shoulders. \"It's OK bro. Like I said I'm cool with it. My mom is a beautiful woman and I could see she was enjoying the attention you were giving her.\"\n\nI couldn't believe what he was saying. Was he really cool with me lusting after his mother? I looked at his face and I could detect a trace of sadness in his expression.\n\n\"You don't look very happy about it to me.\"\n\nHe shook his head, \"I'm not sad about you. Mum and dad's relationship isn't very loving. Dad never really shows anyone any affection or love and I know she needs that.\"\n\nHaving spent the day with his dad what he said rang true. \"I'm sorry mate. For everything.\"\n\nWe sat in silence for a while, then Hiroshi cleared his throat. \"Patrick don't be sorry and don't stop what you're doing, mum hasn't looked this happy for years.\"\n\nI was stunned by his words but could see he was totally serious. \"Are you sure? What if your dad notices?\"\n\nHe snorted, \"He pays no attention to her and probably wouldn't care anyway.\"\n\nThis seemed unlikely, but it was worth the risk to me. I nodded, \"OK.\"\n\nHiroshi smiled, \"Thanks, man. We better get cleaned up and ready for dinner and you need to take care of yourself!\"\n\nHe stood up and began to remove his clothing. I stared at him in shock and he laughed as he dropped his shirt on his bed.\n\n\"One thing you've got to get over is your fear of nudity. How are you ever going to get intimate with someone if you're so embarrassed by your own body? No one is perfect and it doesn't matter. Women like a guy with confidence in himself and if you panic at the thought of being naked it's going to be a disaster.\"\n\nHe dropped his pants and stood before me in just his undies and socks. I looked away in embarrassment, but he was not going to let me off the hook that easily.\n\n\"Patrick -- look at me.\"\n\nI reluctantly turned towards him and he grinned as he dropped his boxers. It had been a few years since I'd last seen him naked, but he hadn't changed much. His flaccid penis looked pretty small as it rested on his tight and hairy ball sack and I could just see the pink tip poking out of his foreskin. I wondered how much bigger it would get when he was aroused and for his sake, hoped he was a grower.\n\nWithout shame, he sat on his bed and stripped off his socks before standing before me again.\n\n\"Your turn.\"\n\nI looked at him in shock, \"What?\"\n\n\"Get undressed, man. It's just the two of us. If you can't even get naked around another guy how are you ever going to manage to do it with a woman.\"\n\nI gulped and my hands began to sweat but what he said did make sense. It was high time I became more confident in myself and my body. This was the perfect opportunity.\n\nI stood up and nervously began to unbutton my shirt. Hiroshi smiled and to my relief didn't watch me. He began to gather his clothes and fold them neatly and place them on a chair. By the time he was done, I was down to my boxers and socks. My erection had only slightly diminished and there was a large spot of precum staining the front of my underwear.\n\nAfter pulling off my socks I hesitated and Hiroshi said, \"You're almost there, don't worry about the boner.\"\n\nI closed my eyes, took a deep breath and then did it.\n\nIt was a strange sensation standing naked before someone else but also somehow liberating. There was total silence in the room, and I began to worry.\n\nI looked up and found Hiroshi staring at my cock with fascination. \"Fuck man, if I had a cock like that, I'd be showing it off at every opportunity!\"\n\nI grinned and felt somewhat proud at his words.\n\n\"When the hell did you grow that thing?\"\n\nI shrugged, \"Been like this for a couple of years now.\"\n\n\"Well, all I can say is you are a lucky bastard!\"\n\nWith that, he turned and added, \"I'll use the shower first.\"\n\nHe left the bathroom door open and once I heard him in the shower, I couldn't resist stroking my cock while thinking about Sakura. I'd never done anything this daring before and soon my cock was glistening as I coated it with my abundantly flowing precum. When I felt my balls contract and the point of no return approach, I released my throbbing organ. It looked almost obscene, the shaft red in colour with the swollen head a dark hue of purple as it jerked up and down in tandem with my heartbeat.\n\nThe shower shut off and moments later Hiroshi stepped out of the bathroom vigorously drying himself with a towel. I tried to act normal as I walked past him towards the bathroom.\n\n\"Jesus man, that thing looks like it's going to pop! You're lucky I'm not gay or I'd be all over you.\"\n\nI ignored his comment and entered the bathroom feeling rather good about myself. I stepped into the steamy cubicle and turned on the water. It felt good as the strong jet pelted my rigid cock. After a few moments of this, I grabbed the shower gel and turned my back to the water. I realised I'd left the bedroom door wide open, but I was beyond caring as I slathered the gel all over my penis, wrapped my fingers around my shaft and began a forceful stroking motion.\n\nClosing my eyes, I imagined Sakura standing before me naked and watching me pleasure myself. It didn't take long before I felt the familiar rush of pleasure wash over my body and I stopped stroking as my cock swelled before firing the first of many shots. I couldn't' suppress my groans each volley of sperm hit the glass door of the shower cubicle with a loud splat. When I was done, I released my penis and used my arms to steady myself.\n\nThis had been the best orgasm of my life and stood staring at the thick wads of sperm as they slowly slid down the glass, I vowed to end my prudish ways and not be shy or embarrassed by my body any longer. It was like a weight lifted from my shoulders and I wondered why it had taken me so long to realise this.\n\nI turned around and focused on washing myself. The jet of water now felt almost painful as it struck my sensitive penis which was still swollen but slowly returning to its normal state. I avoid direct contact with the stream of water as I lathered up and washed. Once I was done, I carefully rinsed the cubicle to remove all traces of my ejaculation. Once satisfied I stepped out of the shower and, following Hiroshi's example, grabbed a towel and stepped into our room while drying myself.\n\nMy friend was still naked and lying on his bed reading a book. He glanced over at me and smiled. \"That's the spirit, Patrick! Doesn't it feel good to be naked?\"\n\nI grinned, \"It does actually!\"\n\nHe glanced at my dropping penis as he said, \"Glad to see you took care of that, I bet you were thinking of my mother while you did it!\"\n\nI blushed but decided to be honest, \"You'd win that bet.\"\n\nHe laughed out loud and slapped his thigh, \"You dirty bastard!\"\n\nI joined in with his laughter and then lay down on my bed.\n\nOnce we'd both calmed down, I said, \"Can I ask you something?\"\n\n\"Of course, anything, you know that!\"\n\n\"What's it like being naked around strangers? I mean, this is the first time I've been nude around someone else since I was a tiny kid, but you said it was something you were used to.\"\n\n\"It's really no big deal. When I was older, I felt a bit embarrassed but then you just get used to it and don't even think about it anymore.\"\n\nWhat he said made sense as I was already starting the experience this. It felt totally natural lying here naked and I wasn't actively thinking about it anymore.\n\n\"Were you always just naked around men or were there women there as well?\"\n\n\"Most of the bathhouses in Japan are separated by gender but there are a few that are mixed and for families. I've been to a couple with my parents.\"\n\nI couldn't believe what he was saying and blurted out, \"You mean you've seen your mum naked?\"\n\nHe laughed at my surprise, \"Of course. It's no big deal in Japan and as we live in close quarters with each other everyone sees everyone naked at some point.\"\n\nI tried to picture this happening in our household but just couldn't imagine it. \"Wow, that's cool.\" After a pause, I said, \"But what if you get excited or something?\"\n\n\"It usually doesn't happen but if it does it's no big deal. Everyone knows that young guys have no control over it and if it happens you just cover it up or stay in the water until it fades.\"\n\n\"Has it ever happened to you?\"\n\nHe smiled, \"Never at a bathhouse, for some reason my cock stays soft there. It's almost like there's an automatic mechanism preventing it from happening. At home, it's another story.\"\n\n\"You mean your mum has seen you with a boner?\"\n\nHe nodded, \"Many times. As I said, it's natural and it would just sort of happen. I'd be brushing my teeth or something while mum was taking a bath and then all of a sudden, boom.\"\n\n\"What did she do?\"\n\n\"Nothing, usually just smiled at me and ignored it.\"\n\n\"What about your dad?\"\n\nHiroshi shrugged, \"I don't know if he even ever noticed and if he did, he didn't react.\"\n\n\"I wish I'd grown up in an environment like that. I've never seen my parents naked and they haven't seen me without clothes since I was able to use the toilet myself!\"\n\n\"Well that explains your shyness, but it looks like you're getting over it now!\"\n\nWe both laughed and Hiroshi returned to his book. I grabbed my kindle and started to read as well. It was the first time I'd ever done anything like this naked and it just felt good. I was beginning to understand why people visited nudist resorts and beaches.\n\nAbout an hour or so later the phone rang, and Hiroshi answered. After a few words in Japanese, he hung up and said, \"We're going down to dinner in 30 minutes.\"\n\n\"OK\"\n\nWe continued reading for another quarter of an hour and then started to get dressed. Hiroshi didn't bother with underpants and when he noticed me looking, he said, \"I'm going commando\".\n\nIt was something else I'd never done, and I decided to give it a try. We would only be in the hotel anyway so nothing much could go wrong. I slipped on my cargo pants and it felt unusual to have my cock dangling loosely but, I have to admit, it was rather comfortable.\n\nA knock on the door indicated his parents were ready and we joined them in the corridor. Sakura again looked ravishing and had made an obvious effort. Her lips were in a sexy shade of red that matched her dress, which was body-hugging and slightly more revealing than the one she'd worn during the day. Hair silky black hair hung loose and reached to the top of her prominent buttocks.\n\nI gulped as I took in this vision of beauty and, when my penis began to lengthen, I started to panic that I'd made the wrong decision about foregoing underwear.\n\nMr Yamamoto seemed to be wearing the same suit as earlier and strode ahead. Sakura linked her arms with Hiroshi and me and as we followed her husband she said, \"So, are you boys hungry?\"\n\nI could barely speak as I felt my cock reacting to the friction of my leg and pants as we walked. Looking down I was sure I could make out the shape of my glans as it pressed against the thin fabric. Luckily the hotel restaurant wasn't busy, and it was a relief when I was able to sit and hide my discomfort under the table.\n\nDuring the meal, Sakura was the one that kept the conversation going. Mr Yamamoto seemed to be in a world of his own and barely spoke.\n\n\"So, after dinner, we've arranged to go to a nightclub. Have you ever visited one Patrick?\"\n\nI blushed and shook my head, \"No, um never been.\"\n\n\"Good! It'll be a new experience for you and Hiroshi.\"\n\nI once again regretted not wearing underpants and the only comfort I had was when Hiroshi leaned over and whispered, \"Don't worry, it'll be dark and there are tables!\"\n\nAs dinner neared its end, I began to concentrate on unpleasant thoughts in an attempt to get my penis back to its totally flaccid state. It worked until we were once again climbing into a taxi and I was treated to another view of Sakura's perfect derriere. The drive was short and when we got out, I was able to see that Sakura had changed her underwear to match her dress.\n\nThankfully the night was dark and the lighting dim, so my strangely deformed pant leg wasn't easily seen. A table had been booked near the stage and after we'd settled in the show started. I'd never seen anything like it. The ladies were all beautiful and their costumes hid almost nothing. It was the first time I'd seen breasts and nipples for real.\n\nDespite the parade of almost naked women on the stage I still found myself looking at Sakura repeatedly. She seemed to be enjoying herself and when she caught me looking at her, she smiled shyly. Even Mr Yamamoto seemed to loosen up for the first time. He clapped loudly and watched the show intently.\n\nDuring the intermission, Hiroshi's parents excused themselves to use the bathroom.\n\n\"Shit, going commando wasn't the best choice for tonight!\", Hiroshi exclaimed.\n\n\"Yeah, thanks for that idea. I'm going to have a third leg when we leave.\"\n\n\"Hey don't blame me. I had no idea we'd be coming to a place like this. But what the hell, any embarrassment is worth it. I've never seen that many knockers in my life and most of them are perfect.\"\n\n\"I suppose it's a small price to pay.\"\n\nWe both laughed and then waited for the show to resume. As I watched the performances, I realised that the fact that I preferred small breasts was true in real life and not just in images. Of course, there was a certain appeal to a large pair of breasts bouncing about but for me the best was a perky set topped by large nipples. They quivered and shook but kept their perfect shape no matter what the owner was doing.\n\nWhen the show was over, Hiroshi made fun of the fact that my left pant leg looked odd. I elbowed him and told him not to draw attention to the fact or I'd do the same as his pants were stretched at the front to form a distinct point.\n\nGetting into the car did nothing to ease my discomfort and once we were underway Sakura said, \"So I'm sure you both enjoyed the show!\"\n\nWe both mumbled our agreement and she continued \"I can imagine seeing all those beautiful women almost naked was exciting for you.\"\n\nAs she spoke, she placed her hand on my thigh as she'd done a few times during the day. This time however it was resting directly on my swollen shaft. I froze and waited for her to withdraw her hand in shock, but she just left it there. Only a thin layer of cotton separated her hand from my penis, and I would feel the warmth of her touch. This made my cock throb and I felt her squeeze it in response.\n\nI couldn't believe this was happening and I hoped she realised that my excitement was more due to her than anything I'd seen during the show. I decided to use my pelvic muscle to make my cock jerk and grow harder. I heard a stifled gasp as Sakura felt the growing staff of flesh beneath her hand. She slowly slid her hand towards my knee following the contours of my penis and it was my turn to try and keep quiet as I felt her fingers squeeze my sensitive glans.",
        "I turned towards her and saw she was looking down at her hand as it rested on the very obvious lump in my pants. The flickering light entering the car as we drove made the scene seem surreal and she turned to face me with an expression of wonder and something else I couldn't identify. Seeing me staring at her made her bite her lower lip and she mouthed \"wow\".\n\nMy heart skipped a beat and then sped up as it hit me that this beautiful woman was feeling my erection and seemed to be impressed. My cock continued to grow and throb as she slowly sild her hand along its length. It was the first time anyone else had ever touched it and I was in danger of losing control. Despite the bad light, I could already make out a darker patch on my pants where my tip was leaking precum.\n\nSakura must have also noticed the wet fabric as her fingers would linger on that spot, every time she reached the end of my penis. I bit my tongue again and thought about unpleasant things, but nothing was working. The added stimulation of her touch was just too much and I had no choice but to take hold of her wrist and lift her hand off my leg. When I loosened my grip on her wrist, she took hold of mine and placed my hand onto her bare leg, just below the hem of her dress.\n\nI gulped as I felt the smooth, soft and very warm skin of her leg beneath my fingertips. Sakura guided my hand, moving it gently back and forth on her leg and then pushing it higher before releasing me. My hand was now on her inner thigh, under her dress. The skin here was even softer than before and incredibly hot. I stroked her there without moving my hand and felt her part her legs slightly, encouraging me to move even further up.\n\nI did as she wanted and soon felt the lacey fabric of her panties against the side of my hand. It was hot and moist here and I could barely breathe from excitement. How was this possible! My hand was touching the most intimate parts of my friends' mother and my dream woman while we were in a taxi with her husband and son. This must be a dream!\n\nThe dream quickly turned into a nightmare as the taxi pulled up in front of our hotel. I had no choice but to furtively extract my hand and then step out of the car, knowing full well that anyone looking at me would be unable to miss the fact that I had a massive boner. I turned towards the car to help Sakura get out and to keep things hidden from strangers for as long as possible.\n\nSakura stared at the perfectly framed outline of my penis as it pressed against my pant leg. I saw her lick her lips and as she emerged two prominent points were visible on her chest. Hiroshi left the car from the other side and I saw him walking with some discomfort. His trousers were still tented, and he'd obviously remained excited during the trip. Sakura again linked arms with the two of us and swiftly walked into the hotel lobby with Mr Yamamoto following.\n\nDue to the late hour, there was no one else around and the small number of hotel staff were very discrete. We stepped into the lift and once the door closed Hiroshi's father said, \"You boys liked the show a lot I see!\" and then laughed.\n\nIt was the first time he'd made a light-hearted comment and I was relieved he thought my arousal was caused by the girls in the nightclub. Sakura gave us a small wave as she followed her husband into their room. Hiroshi fiddled with the electronic room key and when the door opened, we rushed inside and slammed it shut.\n\n\"God, I've got to get out of these pants!\" he exclaimed and pulled them off as he spoke.\n\nHe made a rather comical sight standing there in his shirttails, naked from the waist down apart from socks. His erect penis was bigger than I'd expected, and I guessed it to be about four to four and a half inches in length with a decent thickness. He continued undressing and I also began to strip.\n\n\"Shit, your cock looks double time the size of mine!\" he exclaimed, then asked, \"Have you measured it?\"\n\nI shook my head and he said, \"Well mine is 4.25 inches and yours must be at least 8 or 9\".\n\nI shrugged, \"I don't know and it's not that important to me.\"\n\n\"Easy for you to say when you're packing a weapon like that.\"\n\nI decided to change the subject, \"Apparently those nightclub girls were just your type!\"\n\n\"Yeah they were hot and really got me started but you and mum in the car were the real highlight of the night.\"\n\nI blushed as I realized he'd noticed. \"Um, I don't know what to say Hiroshi, it just kind of happened.\"\n\n\"I told you already bro, I don't care what you do with her as long as she's happy.\" He paused then added, \"and anyway it was fucking hot to watch!\"\n\nAs I was about to reply we heard a loud grunt from the room next door then a rhythmic banging of something against the wall. It continued for a few moments and then sped up before stopping. A brief silence was followed by raised voices that sounded like a disagreement before things went quiet again. The whole episode couldn't have lasted more than 30 seconds or so.\n\nHiroshi looked depressed and I asked, \"What was that?\"\n\n\"That was my dad pleasing himself again.\"\n\nIt hit me that the banging sound must have been the headboard of the bed banging against the wall while the Yamamoto's made love. \"Oh, um. OK.\"\n\n\"It's not OK. He's always like that, wham-bam and not even a thankyou mam.\"\n\n\"I don't get it?\"\n\nHiroshi rolled his eyes, \"Dad takes a few seconds to come and never cares about mum's needs. He's been like that ever since I can remember. All he thinks about is his pleasure. That's why you, making my mum happy, makes me happy.\"\n\n\"I've never even thought about my parents having sex never mind heard them!\"\n\n\"Like I told you, in Japan, not much is private when you live in a small apartment with walls that are literally paper-thin.\"\n\n\"Have you ever seen them do it?\"\n\n\"Sure, plenty of times but with dad, it's really nothing special. He'll climb onto mum, bounce up and down a few times, grunt and spew his load then roll over and start snoring.\"\n\nI hoped Hiroshi was exaggerating but based on what we'd just heard his description seemed accurate. I felt sorry for Sakura and couldn't imagine how someone could treat her like that. Any respect I had for Mr Yamamoto disappeared at that moment.\n\n\"We've got an early start tomorrow, so we better finish up and go to sleep.\"\n\nI followed him into the bathroom not sure what to expect. Some may think this has homosexual vibes but nothing could be further from the truth. We were just two friends aroused from seeing naked female flesh and in my case first contact with a woman.\n\nOur erections didn't fade as we brushed teeth using the twin sinks and after washing faces we returned to the bedroom and settled on our beds. Hiroshi started to stroke his penis and I watched in fascination. I'd never seen anyone else masturbate and it was interesting to observe his technique. His hand soon began to pump faster and then his body stiffened as he groaned and aimed his cock at his chest just as it began to spew his load. After two shots it was over, and his sperm just oozed from his tip as he squeezed the last drops out.\n\nHe signed in contentment and then pushed himself up in the bed and looked at me expectantly. I still felt uncomfortable with the thought of touching myself in someone else's presence, but I remembered my earlier vow and took hold of my rigid penis.\n\nI closed my eyes and thought back to the moment in the car when Sakura touched me and then moved my hand onto her leg. Had she been thinking of me when her husband thrust into her? I totally forgot about Hiroshi watching and was soon sliding my hand up and down my shaft at an impressive rate. The erotic events of the evening showed their effects and I was soon gasping and grunting as my second orgasm of the day washed over me.\n\nMy aim was not as accurate as Hiroshi's and the first shot of semen launched vertically into the air before falling back down onto me and much of the bedcover. Shots two and three hit my face and the headboard before the fourth and final blast coated my chest. I squeezed out the rest which just slithered down my twitching and slowly withering rod.\n\n\"Fuck me you come a lot!\" exclaimed my friend, before erupting in laughter.\n\nI blushed as I scrambled off the bed and ran to the bathroom for a towel. Warn sperm was dripping from my face which caused Hiroshi to laugh even more. Once I'd cleaned most of it from my body, I went about wiping down the bed and the headboard.\n\n\"I hope they don't check this place with a blacklight!\" he joked.\n\n\"Ha ha, very funny.\"\n\n\"Chill man, that was pretty cool. I've never seen another guy jackoff.\"\n\nI grudgingly had to admit that it had been quite a nice experience, \"Yeah it was OK.\"\n\nHe rolled his eyes and said, \"Anyway, now that that's done, we better get some sleep.\"\n\nAfter setting an alarm on his phone he slid under the blankets without bothering to put on pyjamas. Sleeping naked was something else I'd never done but considering everything else that had happened it was nothing.\n\nThe rest of our visit to Paris was not as exciting as the first day. Sakura and I continued to flirt whenever possible, but there were not many opportunities. After the third night, we left the city in our rental car and headed south towards Colmar.\n\nThe hotel in Colmar was just outside the centre. Mr Yamamoto and Sakura took care of registering at the reception but there was a problem. The booking was supposed to be for two rooms, but a single suite for four had been reserved. As the hotel was fully booked there was no possibility to change. Sakura asked me if it would be a problem for me to share the room with the family. Up until a few days ago, I would have been panicking by the new me wasn't bothered. According to the receptionist, the room was large with a partition between the bedroom and the twin beds.\n\nOnce the paperwork was completed, we took the lift to the 3rd floor and walked to almost the end of the long corridor before arriving at room #315. Mr Yamamoto scanned the key card and a green light indicated the door was unlocked. He stepped inside followed by the rest of us. The room was large as promised but the so-called partition that separated the double bed from the other half of the room was just two small walls on each side about 30cm wide.\n\nThe bathroom was split in two with the entrance to the toilet opposite the room door and the entrance to the bathroom next to the double bed. The Yamamoto's didn't seem bothered by the layout and lack of privacy, so I went with the flow. Hiroshi chose the bed nearest the window which left mine kind of in the middle of the room. After unpacking the basics, Sakura suggested a brief rest and then a tour of the town.\n\nEveryone agreed and then Hiroshi removed all his clothes except for his boxers and then lay on top of his bed. I looked at him in surprise and he said, \"I'm not going to lie on my bed with dirty clothes!\" before closing his eyes for a nap.\n\nSakura and Mr Yamamoto took no notice of their son. Sakura began to unpack some of her things and hang them in a wardrobe near my bed. Mr Yamamoto also removed his clothing until he was down to just socks and his underpants. He lay on the bed and closed his eyes. I stood next to my bed nervously and then decided to do what the others had done. I removed my clothes as well as my socks and then lay down on my bed.\n\nUnlike the other two, I wasn't tired enough to want to sleep so I grabbed my kindle and began to read, periodically glancing at Sakura. When she was done, she stepped into the bathroom to wash her hands and I began to get excited at the thought of her removing her clothes. I was trying not to look at her when she returned to the bedroom but as she began to unbutton her shirt I couldn't resist.\n\nShe was facing me as she opened more and more of her buttons until the shirt gaped open to reveal her white lacy bra. She smiled at my expression as she slipped the garment off her shoulders, folded it and hung it over the back of the chair. This was the most I'd ever seen of her and I imagined I could even make out the dark points of her nipples below the diaphanous fabric. Of course, my cock reacted and began to tent the fabric of my boxers.\n\nMy reaction seemed to please her and she bit her lower lip and gave me such a sexy smile that I wanted nothing more than to leap up from the bed and grab her. Without breaking eye contact, she reached down and unzipped her skirt then wiggled her hips seductively as she shimmied out of it. I couldn't suppress a gasp as the lower half of her body was revealed.\n\nHer hips flared at the waist to give her the perfect hourglass figure and I could definitely make out black pubic hair beneath the tiny looking lacy panties. Bending over, she picked up and folded her skirt and placed it atop her shirt. Her body was beyond my wildest dreams and I couldn't take my eyes off her. My cock throbbed in excitement and a dark stain began to form around its tip.\n\nSakura covered her mouth as she giggled and then turned to crawl onto the bed next to her slumbering husband. In so doing she revealed her amazing arse to me in all its glory. It was almost as if she was naked as the tiny panties disappeared in the deep crevice between her perfect but cheeks. Everything about her was flawless, from her silky smooth and blemish-free skin to the long black hair that cascaded down her back.\n\nI was desperate to free my raging cock and stroke it but of course, that was impossible, so I just lay there and watched. Sakura lowered herself onto her tummy which gave me a stunning view of her slim legs leading to the large orbs of her buttocks and then the dip to her back. I could picture myself above her, my penis gliding between those twin mountains before penetrating her tight pussy.\n\nAfter a few minutes in this position, Sakura rolled over onto her back. As I stared in awe the front of her body was displayed before me. With her legs parted slightly I was able to see directly to the core of her sex and I could see that she wasn't unaffected by our shared exhibitionism as a darker patch in the gusset of her panties made them almost transparent! My eyes travelled up over her flat tummy until they reached the small mounds of her bra encased breasts.\n\nMy earlier suspicions were confirmed, from this angle the darker colour of her nipples could now be clearly seen through the gauzy fabric and formed two very large and distinct protrusions, again confirming her apparent arousal. I'd never imagined her nipples to be as large and was stunned to see that they were actually lifting her bra off her breasts, giving me a peak of the delicate swells beneath.\n\nMy lust for her increased ten-fold and I could see her staring at my tented boxers with an expression I interpreted as lust. A loud snore from Mr Yamamoto interrupted the moment and when he rolled onto his side, I realised what a risk we were taking. If he woke up now and saw me in this state, I was sure I'd be on the street in seconds.\n\nSakura must have had the same thought as she rolled onto her side and whilst still presenting me with a wonderful view it was far less blatantly erotic. Of course, this didn't help to reduce the size of my erection, so I decided to take care of things in the toilet. I carefully and quietly rose, the movement making my cock stretch the loose boxers even more obviously and stepped into the bathroom. After closing the door and seeing there was no way to lock it, I quickly extracted the pulsating organ from my pants.\n\nI grabbed a good number of sheets of toilet paper and then replayed the scenes that had burned themselves into my memory forever. It wasn't long before my balls tightened, and I felt the unstoppable rush of an approaching orgasm. Luckily, I'd had the forethought to prepare the tissue paper as my cock began to spew seemingly endless amounts of semen and it would have coated the walls and appliances in the small bathroom.\n\nOnce I'd recovered from the moments of bliss, I waded up the soaked and mushy paper and dropped it into the toilet before flushing. My cock still looked swollen and sticky so I rinsed it in the sink and used the hand towel to dry everything (including the stain in my underpants) as best I could.\n\nUpon returning to the room, I found Hiroshi awake and reading. He glanced at me a gave me a quick wink and I suddenly wondered if he'd really been asleep. With a red face, I lay down on the bed and picked up my kindle. I couldn't resist looking over at Sakura and felt a surge of jealousy when I saw Mr Yamamoto's hand on her hip. It was all very innocent and he probably didn't even realise he was doing it in his sleep, but I wanted it to be my hand on her smooth skin and not his.\n\nAbout an hour later Mr Yamamoto sat up and stretched. He prodded Sakura and said something in Japanese before getting up and going into the bathroom. Sakura sat up then got off the bed. She walked to the foot of Hiroshi's bed and said, \"You boys better get dressed, we're going to tour the town now.\"\n\nI couldn't help but stare at her as she stood before us, seemingly unaware of the erotic allure her almost naked body had on me. Once again feeling the start of an erection I quickly jumped from my bed and pulled on my pants. Both Hiroshi and Sakura laughed at my antics. With my still growing penis safely tucked into my pants and hidden by my shirt, I pulled on my socks and shoes.\n\n\"I hope our relaxed attitudes aren't bothering you, Patrick?\" Sakura asked.\n\n\"Um, no, it's fine. Hiroshi explained things to me, and I've gotten used to it over that last few days.\"\n\n\"Is it the same in your family?\"\n\n\"Oh no, I've never seen my parents in their underthing's or shared a room with them.\"\n\nShe seemed surprised but did not comment. At that moment, Mr Yamamoto returned to the room and pulled on his pants and shirt. He didn't seem to care that his almost naked wife was standing before his son and me and watched impassively as the two of them got dressed.\n\nThe tour of the town took about three hours, including a break for a quick lunch. We were all quite tired when we returned to the hotel and Hiroshi calculated that we'd walked for over seven kilometres. It was just after six o'clock and we'd already booked a table at an Italian restaurant at 8. This time I wasn't surprised when the Yamamoto's again stripped off and I joined them.\n\nI was worried I'd get excited again and made a conscious effort not to look at Sakura. Even that plan almost failed when she announced she was going to soak in the bath and asked her husband and Hiroshi if they wanted to join her. Mr Yamamoto declined and settled himself in a chair as he turned on the TV.\n\nHiroshi said, \"I'll join you mum, I could use a nice relaxing soak\" and then looked at me and asked, \"How about you Patrick?\"\n\nI stared at him in shock and panic then realised he was joking. Both him and Sakura burst out laughing at my expression.\n\n\"Don't be mean Hiroshi, poor Patrick isn't used to our bathing culture,\" Sakura said.\n\nI settled on the bed and tried not to think about what was going on in the bathroom. I could hear their voices above the water and then the sounds of giggles and splashing. I was so tempted to join them and If Mr Yamamoto hadn't been here I'm sure I would have found the courage to do it.\n\nThe sound of the bath draining indicated they were finished, and Hiroshi emerged with a towel wrapped around his waist followed by Sakura in a bathrobe. Her face was pink and through the gap in the robe, I could see her neck and top of her chest were also flushed. She looked radiant and I hoped against hope that she'd change into her clothes in front of me.\n\nSadly, that didn't happen, and she slipped back into the bathroom before emerging in her underclothes again. Hiroshi wasn't as discrete and removed his towel as he stood by his bed and began to search for his underpants before realising, they were still in the bathroom. His parents took no notice of his nudity as he walked around the room and into the bathroom.",
        "I envied his confidence and the openness in his family. Once we were all dressed, we left the room and walked to the restaurant. We ordered our food and Mr Yamamoto insisted on getting a large bottle of wine. I wasn't used to drinking and didn't really like the taste of red wine, so I only took small sips. Sakura and Hiroshi were also not that keen which meant Mr Yamamoto drank most of it.\n\nDuring the meal, the topic of conversation moved to my upbringing and the different attitudes within the family. Hiroshi told his parents how he'd convinced me to try being naked around him and that I'd admitted to enjoying it. I was terribly embarrassed but could see that Sakura and even Mr Yamamoto were interested.\n\nThe wine seemed to have loosened Mr Yamamoto up and for the first time since meeting, he addressed me directly, \"So you mean in your family you are shy of your own bodies?\"\n\nHe seemed perplexed by this attitude and even more so when I replied. \"Yes sir, and it's not just our family, I'd say most people in the UK are similar.\"\n\nHe shook his head, \"But why? The human body is not something to be embarrassed about, especially amongst your own family.\"\n\nI shrugged. \"I don't know why and after experiencing being naked with Hiroshi I agree with you and find your attitude towards nudity to be far better than ours.\"\n\nHe nodded and seemed pleased by my answer.\n\n\"Are you saying you've never been naked with your parents or seen them naked?\"\n\nI looked at Sakura as I answered her question, \"Never. I've never even seen them wearing underwear!\"\n\nHiroshi's parents seemed stunned but this and Sakura asked, \"But what about at school or when you go to a public bath or pool?\"\n\n\"I always got changed in a cubicle and I've never been to a public bath before.\"\n\nHiroshi interjected, \"I told him about our bathing culture in Japan.\"\n\nHis parents nodded and Sakura said, \"It's good that you're comfortable with this now, it will make things easier for you later.\"\n\nI detected a twinkle in her eyes as she said this and wondered what she was referring to exactly. The conversation moved to the plan for the next day. We'd be driving from Colmar to a village in the black forest named Titisee. Both Hiroshi and I struggled to contain our amusement at the name as we imaged a lake of tits. As part of the room package, the hotel included day passes for a nearby waterpark. It sounded good and I was especially excited at the thought of seeing Sakura in a swimsuit again.\n\nAs we walked back to the hotel, it was clear that Mr Yamamoto was slightly tipsy. He was a bit unstable on his feet and far more talkative than usual. Sakura and Hiroshi helped steady him and it was quite amusing to watch.\n\nOnce back in our room, Mr Yamamoto proceeded to undress, this time not stopping at his underwear. I was treated to my first view of his genitals and it was instantly clear that Hiroshi took after his father in that department. Sakura and Hiroshi helped him into the bathroom, and I heard them turn on the shower. Hiroshi emerged shortly afterwards; his clothes slightly damp.\n\n\"Sorry about that, dad doesn't usually drink!\"\n\n\"Not a problem, he was friendlier than usual!\"\n\nHiroshi laughed, \"That's true.\"\n\nWe heard a laugh and giggles from the bathroom then the sound of a slap. I was worried for Sakura, but Hiroshi smiled, \"Don't worry, alcohol also makes him frisky, but mum knows how to handle it.\"\n\nHiroshi undressed and was naked when the water stopped in the shower and his mum and dad emerged from the bathroom. Mr Yamamoto was still naked, and I could see his penis was upright and bigger than before. Sakura was holding his elbow and guiding him towards the bed. Sadly, she was wearing a bathrobe and I only caught harmless glimpses of skin as she settled her husband onto the mattress.\n\nAs Sakura rose, Mr Yamamoto grabbed at her and tried to pull her onto the bed with him. She pushed him away and spoke sharply in Japanese. He responded and was obviously still aroused, his unimpressive penis standing vertically with its pink tip protruding. Sakura ignored his antics and quickly threw a sheet over him. She looked at me and seemed about to apologize.\n\n\"It's fine Sakura, don't worry about it.\"\n\nShe gave me a grateful smile, \"Thanks Patrick, you and Hiroshi should use the bathroom now and then get to sleep.\"\n\nHiroshi walked into the bathroom and I began to undress. I was tempted to strip naked, but I didn't want to risk offending Sakura. She'd flirted and teased me but had always kept some clothing on, so I did the same. When I entered the bathroom, Hiroshi was already in the shower, so I removed my underwear and brushed my teeth.\n\nAs I waited for him to finish, I noticed Sakura's bra and panties were still in the bathroom. I glanced at the shower door and, seeing it was impossible to see through the steamed-up glass, grabbed the panties and sniffed the slightly moist gusset. The heady musky scent of a mature woman flooded my senses and I briefly felt almost lightheaded. All the blood in my body rushed to my cock which instantly became erect.\n\nMy god! I knew the scent of a woman was supposed to be arousing but I'd never expected it to be quite that powerful! I again pressed the flimsy material to my nose and inhaled deeply. It was amazing and I could easily imagine becoming addicted.\n\nHearing the water shut off I quickly replaced the panties and grabbed a towel. As Hiroshi stepped from the cubicle, he plucked the towel from my hands and noticed my raging erection. \"Not again Patrick!\" he laughed.\n\nI shrugged as I took his place in the shower and shut the door. I was glad to see that only an outline of Hiroshi's body was visible, and he wouldn't have been able to see me sniff his mother's underwear. I turned on the water and began to wash. The scent of Sakura still lingered in my nose and after washing my hair I slathered gel over my rigid cock and began to wash/stroke it.\n\nTo avoid the water washing away all the lubricating soap I faced the door as I pleasured myself. It was then that I noticed a second person in the bathroom. Hearing Sakura's voice and realizing that I was masturbating behind a glass door just a few feet from her was exhilarating. I could see was still wearing the bathrobe but as I watched, she slipped it off and I wished the steam would clear.\n\nAll I could see was a fuzzy image of what I knew was her naked body. If she'd come in a few moments earlier, she'd have seen me in all my glory, and I wondered if she'd have removed her bathrobe in my presence. These thoughts and the stimulation of my stroking hand had the desired effect and I groaned as my cock exploded for the second time today.\n\nThe powerful blasts of my ejaculate splattered against the glass loudly and began to drip, leaving slightly clearer streaks in the glass. This gave even more tantalizing glimpses of Sakura's naked body, but I was still unable to see any details. Reluctantly I released my now very sensitive penis and turned to face the shower directly.\n\nThe spray was almost painful as it hit my shrinking cock, but I finished washing and then turned off the water. I opened the shower door, hoping Sakura would still be in the bathroom but was disappointed to only find Hiroshi still standing at the sink.\n\nGlancing at my now dangling organ he smiled, \"Now I know why you took so long!\"\n\nWe both laughed as I dried myself off. When I reached for my underwear, he said, \"You don't have to wear those if you don't want to. All of us sleep in the nude and my parents won't care.\"\n\nI considered for a moment and then nodded in agreement.\n\nHiroshi smiled and I hung up my towel and, holding my underwear stepped out into the room just as Hiroshi turned off the light in the bathroom. The curtains were closed, and I was blind as my eyes tried to adjust to the sudden darkness. I stood still, not wanting to bump into anything until I was able to see faint outlines of the furniture.\n\nI made my way slowly to my bed and then slid under the covers. Now that my eyes had fully adjusted, I was able to see more. I could make out the Yamamoto's bed and the lumps of their bodies under the blankets. Had Sakura been able to see me when I emerged from the bathroom?\n\nHiroshi had settled into his bed and soon the room was silent, save for the irregular snoring of Mr Yamamoto. I closed my eyes and drifted off to sleep with thoughts of what erotic adventures the next day would bring.\n\nAn unusual noise roused me, from a deep sleep and I groggily opened my eyes. The room was still pitch black with only vague outlines visible. The noise that had woken me was coming from the double bed, I raised my head slightly and looked in that direction. I could make out slight movement and heavy breathing followed by a grunting sound. I'd heard this before, but it had been through the wall at the hotel in Paris.\n\nThe Yamamoto's were having sex! My penis was erected as the erotic sounds continued. I was able to hear skin on skin and a wet, sloshing sound. Sakura seemed to be silent as Mr Yamamoto's grunted and groaned before crying out loudly in Japanese. Silence ensued as he stopped moving atop his wife and after a brief pause, rolled over onto his back. Shortly afterwards, I could see Sakura get up and enter the bathroom. It was so dark that I could only see her outline.\n\nA tap turned on and I heard the water running briefly. She then returned carrying something white, probably a towel and used it to clean her husband. She discarded the towel and climbed back into bed.\n\nI don't know how long the act had taken but based on what Hiroshi had told me I guessed it was short and once again hadn't given her any pleasure. I felt sorry for her as I lay there listening to Mr Yamamoto resume snoring but then I detected another sound. I was a high-pitched keening, interspersed by soft moans and the rustling of sheets.\n\nI strained my eyes but couldn't see anything, so I focused on listening to the erotic sounds coming from Sakura. She was pleasuring herself and the noises she was making were enough to get my cock rising again. The sounds from the bed increased in volume and I again could hear a wet squishing sound, which I imagined were her fingers plunging into her wet pussy. Soon her moans changed, and she made the most amazing sounds that I can't even begin to describe before crying out in obvious ecstasy.\n\nOh, how I wished I could be the one to make her sound like this! I waited for more but all I could hear was heavy breathing which all too soon faded. The silence got to me and I fell asleep again, my dreams filled with images of Sakura.\n\n***\n\n\"Wake up mate!\" I heard as someone shook my shoulder.\n\nI opened my eyes and blinked rapidly as the room was flooded with bright sunlight. Hiroshi was standing at the window and had pulled back the curtains. He was half-dressed and grinning as he looked at me.\n\n\"What time is it?\" I asked groggily.\n\n\"Already almost 8 o'clock. My parents have already gone to breakfast so get a move on.\"\n\nI rubbed the sleep from my eyes and got out of bed only to realize I was suffering from a bad case of morning wood. I looked at Hiroshi, \"Um, did your parents notice this?\"\n\nHe laughed loudly, \"They'd have to be blind to have missed it. Your blanket was a foot above the rest of your body!\"\n\nI blushed, \"Shit!\"\n\n\"Don't worry. Dad was most impressed, and mum couldn't take her eyes off it.\"\n\n\"Oh god, they must think I'm some kind of pervert. It was bad enough after that nightclub and now this.\"\n\n\"Chill man, it's all-natural. You saw dad had a boner last night so why are you so worried. Now get a move on.\"\n\nI rushed to the bathroom and finished my morning rituals at record speed before getting dressed. My penis had relaxed, and I was able to join Hiroshi and his parents in the breakfast room without further embarrassment. When the meal was over, Mr Yamamoto handled took care of the formalities of checking out while the rest of us packed our belongings and loaded the car.\n\nIt was just after 9 when we left the hotel and drove towards the German border. Apart from the sudden change in the colour and language on road signs you barely noticed the transmission from one country to the next. A short stretch of motorway took us to the city of Freiburg and then on into the black forest.\n\nWe arrived at our next hotel, which was an older traditional building in the typical style of the region. At the reception, they handed us four vouchers for the water park and told us that our rooms would only be available after 3 pm. As we planned to spend the day at the pool this was not a problem. After a few minutes of driving, we were already pulling into the parking lot of the waterpark which was larger than I'd expected.\n\nAt the reception desk, they took our vouchers and handed us four black wristbands. The friendly lady briefly explained that the waterpark had three zones and that our wristbands would grant us access to all of them. We should follow the black signage to the changing area could stow our belongings in the lockers matching the numbers printed on the wristbands.\n\nIt all seemed straight forward and Hiroshi and I took the lead. After scanning our bands at a turnstile, we found ourselves in a very luxurious changing area. I'd never been to a pool like this! Once we found the assigned lockers, we used the adjacent cubicles to change into our swimming suits. I was excited to see if Sakura would be wearing the sexy once piece again.\n\nHiroshi and I finished first and quickly stowed our clothes in the locker. Sakura and Mr Yamamoto emerged from their cubicles and I was slightly disappointed as she was wrapped in a towel. At the changing room exit, a map displayed the different sections. There was a fun park with slides and a wave pool, a relaxation area called the \"Palm Oasis\" and another named \"Palais Vital\", both of these restricted to persons over 16.\n\nMr Yamamoto said he wanted to visit the \"Oasis\" first. Hiroshi and I were keen to hit the slides and I was glad when Sakura said she'd come with us for a bit before joining her husband.\n\nAt the next turnstile, we parted company and the three of us followed a corridor leading to the slides. Despite the early hour, it was noisy and busy. We hung up our towels and I was finally able to see Sakura in her swimsuit. To my surprise and delight, she was wearing a pink bikini! It wasn't tiny but just as her one-piece seemed to be unlined.\n\nIt was not much different to seeing her in her revealing lingerie, but the tight thin fabric of her suit made her breasts and nipples even more prominent. It was hard not to stare at her amazing body, but I was determined not to be embarrassed by another erection again. Hiroshi took no notice of his mother and was busy ogling the plethora of large-busted girls in skimpy swimwear as we headed for the first slide.\n\nIt was a four-lane ride called \"Galaxy Racer\" on which you rode with special mats. After a brief wait, we got into position and launched simultaneously. 100m long and faster than expected it got your adrenalin going before you hit the pool at the end. Hiroshi beat me by a hair, and we heard Sakura squeal as she hit the pool right behind us.\n\nTurning to look at her made me gasp. She looked stunning and the thin fabric of her suit had become slightly transparent when wet. I could see the darker shade of her nipples and pubic hair. She was excited and grinning as she spoke.\n\n\"That was fun, let's do it again! This time I will beat you both.\"\n\nWe took the challenge and I enjoyed the view as she rushed ahead. Each of us won a couple of times and I would have placed a bet that no one would guess she was Hiroshi's mother. She looked like an older sister and was behaving like a teen! I loved the transformation and after every run on the slide, she had to adjust her top which was pushed down when she hit the end. I caught a couple of glimpses of her areola but sadly her nipples somehow always remained covered.\n\nWhen we moved to the more violent slides, Sakura said she'd join her husband and relax for a while. I was sorry to see her go but was soon distracted as Hiroshi and I hurtled down the next slide. About an hour later we were both exhausted and decided to join his parents and relax. We scanned our wristbands at the entrance to the palm oasis.\n\nIt was like night and day. Sudden quiet replaced the screeching of kids and the hectic crowds. The large central pool was surrounded by real palm trees and a huge glass roof. We walked around the pool looking for the Yamamoto's but had no luck. A sign indicated mineral pools so we checked them out too but there was no sign of them.\n\nAfter another quick look around the pool Hiroshi said, \"Maybe they went to the Palais Vital. Let's check there\".\n\nI nodded in agreement and we climbed the stairs to the next level.\n\n\"Oops!\" he exclaimed as he read the sign at the next turnstile.\n\n\"What?\"\n\n\"This is a nudist area!\"\n\n\"You're kidding?\"\n\n\"See for yourself!\"\n\nHiroshi hadn't been joking. The sign indicated that swimwear was prohibited beyond this point.\n\n\"Would your parents have gone in there?\"\n\nHe shrugged, \"Could be. I told you we've visited mixed bathhouses in Japan before.\"\n\nI gulped, \"What shall we do?\"\n\n\"If you want, I can go in and see if I can find them and you can wait out here.\"\n\nIt sounded like a plan and I was about to agree when I remembered my vow. Taking a deep breath, I said, \"No, I'll join you.\"\n\nHiroshi grinned, \"Good choice man. It does seem to be very busy and it's a great opportunity for you to be naked around others.\"\n\n\"But if your parents are in there, will they be OK with me being naked?\"\n\n\"If they're in there they'll also be naked, and I'm pretty sure seeing you in the buff will make my mum's day!\"\n\nI blushed but felt a surge of excitement at the thought of being naked with Sakura.\n\n\"But what if I, um you know?\"\n\n\"Just don't stare at people and if you happen to have an erection, don't make a show of it. Be discrete and if you can, cover up with a towel until things relax. I may well be in the same boat as you, seeing how sexy some of these German girls are.\"\n\nI smiled at his comment and nodded, \"OK, let's do it.\"\n\nHiroshi went first and scanned his wristband and I followed him. After going through another door, we found ourselves in a sauna area. A few people wrapped in towels were wandering around.\n\nI sign indicated \"Changing area\" but it was just a wall with a bunch of hooks for towels and swimwear. I watched as Hiroshi calmly stripped off his swimming trunks and hung them on a hook. He turned to me and waited.\n\nI looked around nervously and saw the coast was clear did the same. Getting the cold and clammy suit off was a pleasure and despite my nerves, I instantly felt more comfortable. My penis and testicles were somewhat shrivelled from the cold but a quick wipe with my towel got them warmed up quickly.\n\n\"See it's not so terrible!\" Hiroshi stated.\n\nI had to agree. \"Yeah, actually it feels much more comfortable than the wet trunks.\"\n\nI froze and watched as a glass door opposite us opened and two couples emerged. They were sweating profusely, and their skin was very pink. All of them were naked and despite carrying towels they didn't cover-up.\n\nThey ignored us as they walked past. I realized that this was the first time I was naked in front of strangers! Hiroshi's eyes were wide, and he stared at the women.\n\nOnce they were out of earshot I whispered, \"Hey, you said not to stare!\"\n\nHe chuckled, \"I know but did you see the tits on them? Fuck, boner alarm!\"\n\nI glanced at his crotch and had to stifle a laugh as his penis had grown to its full size.\n\n\"Bloody hell man, can't you control yourself!\" I said in mock anger.\n\n\"Ha ha, just wait until it happens to you. I've never seen any naked western women before you know.\"\n\n\"Well neither have I!\"",
        "We both laughed and hearing voices approaching, Hiroshi quickly draped his towel over his arm and held it in such a way as to cover his crotch.\n\nA gaggle of naked senior citizens walked past and nodded at us in greeting. I'd somehow expected to be repulsed but even though they came in all shapes and sizes and were far from perfect specimens, I wasn't bothered by their appearance at all. They looked natural and happy with themselves and that in turn made me feel comfortable within my skin.\n\n\"Where shall we start?\" Hiroshi asked.\n\n\"I suppose we check out the saunas here first then move on.\"\n\nHe nodded and stepped to the closest glass door, opening it and peering inside for a moment.\n\n\"No one in there. You check the other one.\"\n\nI walked the short distance and stepped into the next sauna. It was a very large room with four levels of benches facing a huge window that overlooked the lower section of the waterpark. Three men and an older woman were lying down but there was no sign of the Yamamoto's.\"\n\nI shook my head and we walked down the corridor looking into the various sauna's as we passed. I'd never been to a sauna before and was keen to give it a try, but our priority was to locate his parents. Hiroshi draped the towel over his shoulder, and I saw that his penis had returned to normal.\n\nA doorway led to an outside area with sunchairs and tables. It was full of people cooling down and trying to get an all-over tan. Hiroshi looked over the plethora of naked bodies but said, \"They won't be in the sun. Mum wants to keep her skin pale!\"\n\nAt the other side and entrance leading to the second building of saunas. I would later discover that there were 12! Once again, we couldn't locate his parents anywhere.\n\nI was somewhat disappointed as I was looking forwards to seeing Sakura naked.\n\n\"Maybe they're not here after all.\"\n\nHiroshi checked a map of the sauna complex and said, \"There's a whole other section with pools!\"\n\nHe pointed at another turnstile.\n\n\"Is it also clothes free?\", I asked.\n\n\"I guess so, let's go and check.\"\n\nWe read the sign at the turnstile and there was no mention of clothing being required. We scanned out wristbands and entered. The floor we were on consisted of many loungers and four small mineral pools with a large central pool downstairs. It was a copy of the Palm Oasis with the difference being that everyone was naked.\n\nNot many of the upstairs loungers were occupied so we were quickly able to see that the Yamamoto's were not there. The small pools only had space for maybe ten people each and none of them was Japanese!\n\nDownstairs things were slightly more difficult. The place was filled with people and palm trees making it difficult to check. As we walked around the pool a voice suddenly called \"Hiroshi! Patrick!\"\n\nWe both turned in the direction of the sound and saw Sakura sitting up on a lounger next to her husband and waving at us. She had a big smile on her face, but I didn't linger there as more interesting things could be seen lower down.\n\nHer perfect little breasts jiggled delightfully as she waved and were topped by the most amazing nipples. Dark brown and standing at least a centimetre tall, they made my mouth water and my cock twitch.\n\nHiroshi and I made our way through the narrow pathways between the loungers and trees until we were standing at the foot of the ones occupied by the Yamamoto's.\n\n\"We've been looking all over for you!\" Hiroshi exclaimed.\n\nI noticed both his parents staring at my crotch and I felt embarrassed but also excited by their scrutiny. My penis was still flaccid, but I could feel it growing longer and thicker as I looked down at Sakura. Not much of her body had been hidden by her bikini but I was still stunned by how beautiful she looked naked. My eyes travelled from her delectable breasts down to her flat tummy and then her crotch.\n\nHer public hair was dark black and trimmed to form a perfect triangle, pointing directly to her pussy. I couldn't see more as her legs were closed but it was already enough to get my blood pumping and my cock growing. Shit! I tried all my usual tactics, but nothing could slow the inevitable.\n\nWith Hiroshi still talking, I froze and just stood there, my penis now at its full size and twitching. I was mortified but also somehow excited that Sakura was seeing me in my full glory. The spell was broken when Sakura, turned and gestured to the loungers next to them. \"I reserved these two in the hope you'd join us.\"\n\nShe moved one leg off the lounger and for a brief moment I saw her most intimate parts and just like the rest of her, they were perfect! Two largish lips in the same tone as her nipples started just below her pubic hair. As her legs moved, I caught a glimpse of pink as they parted slightly. My cock throbbed as I imagined sliding into that tiny looking opening.\n\nSakura leaned over and grabbed a bag she'd placed onto the lounger. Her small breasts hung down and I had a perfect side view of one of her nipples. It was at least twice the size it had been when we arrived, and I hoped it indicated her arousal at seeing my erection.\n\nHiroshi moved away and grabbed the second bag on the lounger further from his mother. He placed it on the floor and draped his towel over the chair before lying down. Sakura was watching me, and I didn't know what to do. Should I also lie on my towel or use it to cover my erection. She seemed to sense my insecurity and said, \"I have a second towel if you need one Patrick.\"\n\nI nodded gratefully and quickly spread my towel and sat down. My boner was still visible as it rose between my legs and quivered but at least it wasn't quite as obvious to everyone else. Sakura lifted her legs back onto the lounger and then rolled over to face her husband as she retrieved a towel from the bag between their chairs. I couldn't help but stare at her arse as it faced me, and this did nothing to ease the situation between my legs.\n\nAs she handed me the towel, I noticed that Mr Yamamoto was still staring at me. Surprisingly, he didn't seem angry or upset by my scrutiny of his naked wife but watched me closely as I crunched up the towel and placed it on my lap, effectively hiding my penis from view. He said something in Japanese and then lay back and resumed reading.\n\nSakura smiled and Hiroshi laughed loudly at whatever the comment had been. Perched on the edge of the lounger wasn't particularly comfortable, so I pushed myself back and then lifted my legs, keeping the towel in place. Sakura watched the entire manoeuvre with a smile on her face and a twinkle in her eyes.\n\n\"So, is your first time being naked in public Patrick?\"\n\nI nodded in response.\n\n\"Are you enjoying it?\"\n\n\"Um, yes, it's actually much better than I thought it would be.\"\n\nSakura smiled and nodded, \"I love being naked, it makes me feel so free and comfortable.\"\n\n\"I suppose, I just need to get used to it.\"\n\n\"You will and don't be embarrassed if you get excited, it's normal for young men.\"\n\nI nodded and was grateful for her words of encouragement. I felt myself begin to relax slightly and straightened the towel covering my crotch. She glanced at my crotch and then looked into my eyes.\n\n\"Have you ever been in a sauna?\"\n\n\"No, never. I'm keen to try as I like heat.\"\n\n\"You'll love it. We can try a bit later. What about swimming naked, have you ever been skinny dipping?\"\n\nI blushed, \"No, nothing like that.\"\n\n\"Well, it's a day of firsts for you then! You'll love the feeling of being naked in the water. A swimsuit seems like such a small bit of fabric but when you swim without one it's a very different sensation.\"\n\nI was enjoying our conversation and felt myself relax even more. It was fantastic to sit here and talk to the woman of my dreams while both of us were stark naked. To my surprise, I even felt my penis begin to soften and when it was no longer standing vertically, I removed the towel from my lap.\n\nSakura eyed my still substantial penis, which now lay across my thigh and smiled. \"Would you boys like a drink? It's good to be hydrated before we go to the sauna.\"\n\n\"Yes please,\" I responded and heard Hiroshi say, \"Me too.\"\n\nIt was again a pleasure to watch her roll onto her side as she retrieved the drinks from her bag. She handed me two bottles of fruit juice and I passed one to Hiroshi.\n\n\"Ah, this is the life!\" he stated after taking a long sip.\n\nI smiled and as I took a drink, actually looked at our surroundings properly for the first time. It was an amazing place and watching people of all ages and shapes and sizes interacting normally while not having any clothes on was fantastic. Hiroshi interrupted my thoughts with a poke to the ribs. When I turned to him, he nodded towards a group of girls walking along the edge of the pool.\n\nThey were talking animatedly while gesturing with their hands and made an amazing sight. One girl, in particular, caught my attention. Her body was very similar to Sakura's, but she was blond, much younger and had a totally shaved pussy. Her tiny breasts were capped with pink nipples, much smaller than Sakura's, but still very appealing.\n\nHer two friends were more to Hiroshi's taste, big-boned and with large breasts that wobbled as they walked. We watched the trio as they passed and, noticing our attention the giggled. Hiroshi had a huge grin on his face, and I could see his cock begin to twitch.\n\n\"How about a swim boys?\" Sakura asked.\n\nIt sounded good to me, \"Yes!\"\n\n\"I'll just stay here and enjoy the scenery.\" Was Hiroshi's response.\n\nSakura spoke to Mr Yamamoto in Japanese to which he just grunted and shook his head. She shrugged as she stood up looking at me with a faint smile, \"it looks like it will be just the two of us.\"\n\nI liked the sound and that and jumped to my feet before reaching for the towel.\n\n\"You won't need that. It's better to dry in the air or you will be lying on a wet towel all day. I gulped at the thought of having nothing to hide behind but what she said made sense and I could always just stay in the water.\n\nMy penis was still slightly engorged as we walked side by side and I could see we were attracting a bit of attention. I suppose we made an unusual couple, a beautiful petite Asian woman walking with a gangling youth showing the beginnings of a boner. Instead of feeling embarrassed, I felt elated to be walking with Sakura and imagined that most of the men here would be jealous of me.\n\nAt the entrance to the large pool, we waited for another couple to leave before Sakura walked down the steps before me. When she stood, the water reached just below her breasts. She smiled at me and then kicked off from the ground and swam in the direction of an opening that led to the outdoors. I got an amazing view of her fantastic arse as it briefly rose out of the water and felt my cock stiffen further. I followed in her wake and watched with delight each time I glimpsed her rear as she kicked her legs.\n\nSwimming naked was a revelation. The water caressed my stiff cock as it flowed over the rigid obstruction and I found the feeling to be unlike any other. At the underwater turnstile leading outside, Sakura stopped and waited for me. I stared at her beautiful breasts and loved the water droplets that slid down over her erect nipples before dripping into the pool. As I stood upright, I realized the tip of my penis was just emerging from the water and Sakura stared at it for a moment, before smiling and taking my hand to pull me through the rotating doorway.\n\nI don't think it was designed for two and the resistance of the water made it quite slow and difficult to push. I leaned forwards to help press on the glass panel and felt my cock come into contact with Sakura's back. I could feel the warmth and smoothness of her skin as the underside of my glans and shaft rubbed against it.\n\nIt felt amazing but I was worried I was overstepping a boundary. When I tried to slow down and pull back, Sakura surprised me by doing the same, ensuring the contact between us remained unbroken. Was it possible that she was enjoying it?\n\nAll too soon we emerged into the bright sunlight and fresh air. It felt amazing and we both took deep breaths before swimming to the edge of the pool and looking at the view over the seemingly endless forest. I wanted nothing more than to slide up behind and wrap my arms around her, but I knew that was out of the question.\n\n\"Doesn't it feel good Patrick?\"\n\n\"It's great, just like you said it would be!\"\n\nShe smiled happily and then nodded towards the other side of the pool where two women were just vacating what looked to be underwater loungers with jets or bubbles.\n\n\"Do you want to lie on those?\"\n\n\"Sure, why not,\" I responded.\n\nWe walked over and I watched as Sakura pushed herself up and then settle down on the bubbles. She giggled and her body floated to the surface as it was lifted by the tiny pockets of air.\n\n\"That tickles!\" she said in delight.\n\nI laughed and moved on to the neighbouring longer. It was difficult to remain submerged, but my extra weight helped, and I was able to keep my penis from emerging. The bubbles did tickle as they hit my back, legs and buttocks. With my legs closed the water in my lap was still and my hard penis easily visible. I caught Sakura staring at it again, but as other people were approaching, I spread my legs slightly to allow the bubbles to disturb the water.\n\nIt was a good move as not only did it conceal my erection but the tiny bubbles hitting my balls felt like a thousand little fingers. I saw Sakura's legs were also parted and wondered if she felt similar sensations of pleasure from the gentle massage. I was entranced as I watched her body repeatedly bob to the surface before she exhaled and forced herself down again. Each time it happened I was treated to a view of her rigid nipples, her sexy tummy and a wet patch of pubic hair.\n\nWe relaxed in silence and then Sakura said, \"Do you have a girlfriend Patrick?\"\n\nI looked over at her and our eyes met. \"Um, no, um, not yet.\"\n\nShe seemed surprised but her next statement took me by surprise. \"I'm worried about Hiroshi. He went on a date with a girl and was very excited about it but then afterwards he refused to tell me anything. He was quite upset and depressed for a few days.\"\n\nI didn't know what to say so I just remained silent.\n\n\"Have you gone out with many girls?\"\n\n\"No, never.\"\n\n\"But why? You are a handsome man and....\"\n\nShe left the rest unsaid, but her eyes glanced in the direction of my crotch.\n\n\"I'm just hopeless around girls and they ignore me.\"\n\n\"But you like girls?\"\n\nI blushed, \"YES! I'm not gay or anything, I'm just shy and don't know how to behave around them.\"\n\nShe smiled, \"You just need some more confidence in yourself. I think this trip will help you a lot.\"\n\nI nodded in agreement. \"Yes, being here and seeing how relaxed people are about being naked even when they don't have perfect bodies has given me a lot more confidence. I never believed I'd be able to be naked around others.\"\n\n\"I'm so glad you were brave enough to try it.\"\n\nI smiled and looked back at the view of endless trees and the brief glimpse of her naked torso as it popped up once more. \"It's very beautiful.\"\n\nSakura giggled, \"Why thank you, Patrick!\"\n\nI blushed and spluttered \"I meant the forest...\"\n\nSakura pouted, \"Oh, so you don't think I'm beautiful...\"\n\n\"NO! I mean, yes, I mean... oh god... I'm sorry.\"\n\nShe laughed and said, \"I'm just teasing you, Patrick, I know a young man like you wouldn't find an old woman like me attractive.\"\n\nI'd made such a mess of things and without thinking I blurted out \"I think you're the most beautiful woman I've ever seen. Everything about you is perfect.\"\n\nSakura gasped and I noticed her blush as tears appeared in her eyes. Now I'd done it.\n\n\"Sorry, I didn't mean to upset you. Please forget everything I just said.\"\n\nWe stared at each other in silence and I desperately wanted to gently wipe the tears from her face.\n\n\"I won't forget it, Patrick, you have no idea how much it means to me to hear you say that.\"\n\nI gulped as I realised, they were tears of joy and not sadness. \"I've always thought you were beautiful Sakura and now, being older I know that you embody the woman of my dreams. I've never met any girl that can match you which is why I didn't even bother to talk to them.\"\n\nShe seemed stunned by my word, \"But look around you, there are so many more beautiful girls than me!\"\n\n\"No, in my eyes you are perfection.\"\n\nShe let her body float to the surface again and I couldn't resist running my eyes over it. Without taking her eyes off me she rolled over and exposed that perfect arse. I licked my lips as the pale globes shone in the sunlight. A giggle from Sakura made me look into her eyes once more and as I watched, she pushed herself up, showing me those tiny tits with huge nipples dripping water.\n\nMy cock felt as if it would explode and when Sakura took my hand and pulled me off the lounger, I willingly followed her. She led us to the furthest corner of the pool that was a kind of miniature whirlpool. The rigorous bubbles and jets of water hitting my sensitive cock felt amazing. Sakura took a quick look around and seemingly satisfied no one was paying attention turned to me and hugged me.\n\nI stood like a statue as I felt her soft and tiny body pressed against mine. The rigid points of her nipples dug into my tummy and I felt my cock squeezed against her. The buffeting of the whirlpool just added to the sensations and I felt my arms lift and wrap themselves around her. It was the best moment of my life and I kissed the top of her head as I felt her hands slide lower until they were gripping my bottom.\n\nHer hands clenched and she pulled apart my cheeks, exposing my arsehole to the pulsating water. Her body began to twist, causing more friction against my cock and I let my own hands wander lower until I got my first feel of her bottom. The flesh was firm but pliant and I squeezed and pulled the twin orbs apart, just as she was doing to me.\n\nShe groaned and began rubbing herself against me with even more enthusiasm. I realised she was trying to achieve an orgasm and without really knowing what I was doing I let my fingers slip into the crevice between her cheeks. When the tip of my index finger felt what I guessed was her arsehole, I pushed gently and began to rub.\n\nSakura's response was instant. She began to make those noises I'd heard the previous night and her hold on me tightened as she screamed into my chest before her body went rigid. It was all too much for me and I felt my cock swell and then begin to spew its load. Despite the water, I could feel the heat of my ejaculate as it erupted between our bodies and I wondered if Sakura was also aware.\n\nShe didn't release her hold as my cock continued to unload. We stayed like that for many minutes until we both slowly relaxed our grip on each other. As our bodies came apart, the cool water washed away all traces of my discharge. Sakura looked up at me with an uncertain expression, but I smiled at her and leaned down to kiss her on the lips.\n\nShe responded and for the first time, I kissed a woman and felt her lips open and her tongue emerge.\n\n\"Are you OK Patrick?\"\n\n\"I've never felt better. Thank you, Sakura.\"\n\nShe smiled sweetly and whispered, \"You don't need to thank me, I'm so grateful that you find me attractive.\"\n\n\"I think you know I find you more than attractive. I've been unable to hide it this entire trip and it's been causing me endless problems!\"\n\nShe giggled and I felt her hand grasp my softening but still bloated organ. It was the first touch from another person. She held and squeezed my shaft gently, causing it to inflate once more.\n\n\"You have an amazing penis, I've never seen one as big and strong.\"\n\nMy chest swelled with pride and I used my pelvic muscle to make my cock swell and jerk. She giggled and squeezed her fingers, making my glans bulge.",
        "\"I have missed the feeling of being desired for many years.\" She said sadly.\n\n\"But what about your husband?\"\n\nShe frowned slightly, \"He has no real interest in me anymore, except to pleasure himself.\"\n\n\"I don't understand how any man could not desire you or want to please you.\"\n\n\"We have been married many years and I've always known I was not his dream woman. I lack certain attributes that he finds arousing. After having Hiroshi, he became distant and we only had sex when he needed release. I'm sure he has other women in Japan, so he only needs me when they are not available.\"\n\nI felt so sorry for her and couldn't believe what a fool Mr Yamamoto was.\n\nAs other people were waiting to use the whirlpool we separated and walked to the edge of the pool together. Standing beside her I couldn't resist the urge to place my arm over her shoulders. She leaned her head against me and stared at the view seemingly deep in thought.\n\n\"I suppose we better go back before Hiroshi starts to wonder what has happened to us.\"\n\n\"He knows about my feelings for you,\" I said.\n\nShe seemed surprised, so I added, \"He noticed how excited I got around you but don't worry, he's happy about it.\"\n\n\"What do you mean?\"\n\n\"Well, he told me that his father doesn't take care of you and that he doesn't mind what we do together as long as it makes you happy.\"\n\n\"Oh my, I had no idea he knew.\"\n\nAs we walked back to the entrance Sakura turned to me and said, \"Patrick, how would you feel about me being your first woman?\"\n\nI froze as her words sunk in. \"You mean, you and me... um.\"\n\nShe smiled, \"Yes. I'd like to teach you everything I know about sex and making love. I don't have that much experience myself, but I can help you enjoy your first time.\"\n\nI didn't know what to say. Was this really happening or would I suddenly wake up? Instead of speaking I took her in my arms and kissed her deeply. She was surprised at first but then relaxed and sank into my embrace.\n\n\"So here you are!\"\n\nWe separated in shock and turned to face Hiroshi. Our faces were red with shame.\n\nSakura stepped towards him, \"Hiroshi, I can explain...\"\n\nHe raised his hand and shook his head. \"No need mum, I already told Patrick that I'm fine with everything as long as you are happy!\"\n\nSakura glanced at me and then embraced her son, speaking in Japanese as she did so.\n\nHiroshi said, \"Dad's not far behind me and I don't think he'd be quite as understanding!\"\n\nSakura looked at me and I watched as she walked away and disappeared into the building.\n\nI felt I needed to explain, \"Sorry Hiroshi, we got a bit carried away. We talked a lot and got closer, then she explained a few things about her relationship with your dad and I just had to comfort her.\"\n\nHe smiled, \"it's great to see her so happy and I think she could teach you a lot about being with a woman.\"\n\nI blushed at his words but wasn't quite ready to reveal the offer his mother had made.\n\n\"She's amazing and you're lucky to have her as a mum.\"\n\nHe nodded, \"I know, I just wish she'd get the love she deserves.\"\n\nWhen Mr Yamamoto and Sakura came outside our conversation ended and Hiroshi and I enjoyed the scenery and water. It was difficult to see Sakura and not be able to touch or talk to her, so I suggested we try a sauna.\n\n\"Yeah that sounds good\", Hiroshi stated.\n\nI looked at Sakura but to my dismay she said, \"I'd rather stay in the water for a bit longer and then have a rest, I'll try the saunas later, but you boys should go ahead.\"\n\nAs we turned to leave Mr Yamamoto said, \"I will come with you.\"\n\nIt was the last thing we wanted but we couldn't very well refuse his company. The three of us made our way out of the pool.\n\nHiroshi said, \"I'll get our towels as we need them to sit on in the saunas.\"\n\nHe walked off, leaving me with Mr Yamamoto. At least my penis was flaccid without the presence of his wife.\"\n\nIt felt awkward standing naked with him and I tried to think of something to talk about.\n\n\"What do you think of this place, Mr Yamamoto?\"\n\n\"It is interesting, very different to Japan.\"\n\n\"Hiroshi mentioned you have many bathhouses there.\"\n\n\"Yes, that is correct, but in most men and women are separate and even when they are mixed it is not the same.\"\n\nI nodded without really understanding what he meant.\n\n\"You would never see single women or young girls together at a mixed onsen\", he added while looking around, \"and people do not sunbathe or lie on loungers like here.\"\n\n\"I see. I've never been anywhere like this before, but I am enjoying it very much.\"\n\nHe grinned, \"You like to see all the naked ladies!\"\n\nI blushed but nodded. \"Yes, I don't think having only naked men to look at would be as nice.\"\n\nHe laughed, \"I agree.\"\n\nHis expression suddenly changed, and he leaned closer, \"You like to look at Sakura?\"\n\nMy heart missed a beat and my mouth went dry. Had he noticed my attraction to his wife?\n\nI felt my face turn red and I struggled to think of something to say.\n\n\"Um...\"\n\nBefore I could continue, he laughed loudly and put his hand on my shoulder. \"You don't need to answer, I know she is not good to look at and there are many beautiful girls here that look like a woman should!\"\n\nHe winked at me and for the first time in my life, I was tempted to punch someone. Thankfully, Hiroshi returned carrying the towels. He looked at me and must have realized something was wrong.\n\nHe said something in Japanese to his dad and Mr Yamamoto shrugged and replied then he patted my shoulders again before walking towards the saunas.\n\n\"Sorry about that, just ignore him,\" Hiroshi said as we followed his father.\n\nI whispered, \"Do you know what he said to me?\"\n\n\"No, he just told me you were talking about the naked ladies.\"\n\n\"He asked me if I liked to look at your mum and then he said he knows she's not attractive.\"\n\nHiroshi rolled his eyes, \"That's typical. Just forget about him.\"\n\nThat was easier said than done as it was embarrassing being with his father. He blatantly ogled every woman he saw and made no secret of the fact. Some didn't care but others would give us dirty looks before leaving. Hiroshi spoke to him a few times in Japanese trying to explain that it was rude to stare but it was no use. After visiting just two saunas we decided to part company and excused ourselves.\n\nOn the way back to our loungers, Hiroshi insisted on trying some of the hot mineral pools. It was relaxing to sit in the hot water and look down over the pool complex. While Hiroshi was able to continue his girl watching my mind was still on Sakura's offer. Having spoken with her husband I no longer had any feelings of guilt, but I couldn't imagine when we would have the opportunity to be together.\n\nWhen our skin started getting wrinkled, we left the pools and returned to the loungers. Sakura waved at us as we approached.\n\n\"How was the sauna?\"\n\n\"It would have been nice, but dad was being a pig.\"\n\n\"Hiroshi, don't talk like that about your father.\"\n\n\"Well, it's true. I wouldn't be surprised if they kicked him out. He was starting at all the women and making them feel uncomfortable.\"\n\n\"It doesn't matter if it's true you must never talk about him like that. I can see him coming back, if you want, we can go to the sauna together.\"\n\nWe gathered our things and Sakura said, \"The boys are showing me the saunas\" as we walked past her husband. He grunted and nodded but didn't seem interested.\n\nHiroshi and I took Sakura to a mild sauna to start with. It was about 65 degrees Celsius and had a waterfall which made it more humid. We spread out our towels and lay down on the upper benches. It was the most relaxed I'd been all day and felt myself almost fall asleep as the heat soaked into my bones.\n\nAfter almost twenty minutes, we decided it was time to leave. All of us were pink and dripping sweat. It felt refreshing to breathe the fresh air outside and we remained there until we'd cooled down somewhat.\n\nHiroshi said, \"Normally you should dip in an ice pool now.\"\n\n\"Let's try it, I want to experience the proper sauna!\" Sakura said enthusiastically.\n\nI wasn't quite as keen but followed the two of them as Hiroshi took the lead.\n\n\"They don't have a cold pool here, but this shower is only 18 degrees.\"\n\nHiroshi was pointing at a shower unlike any I'd ever seen. It was a large room with a series of powerful cascades of water pouring out of the ceiling. I was already feeling chilled just from the fine mist before we even stepped inside.\n\nWhat a rush! Sakura shrieked as she was hit by the blast of chilled water and her tiny frame was propelled backwards into my arms by the powerful waterfall. It felt good to touch and hold her briefly but she quickly pushed herself back under the torrent. I followed and it was exhilarating.\n\nThe cold water pounded every inch of my body from head to toe and quickly shrivelled my balls and cock! After a few minutes of this, we rushed to the adjacent shower stalls and warmed ourselves up.\n\nSakura was bubbling with excitement, \"That was amazing! Let's try another sauna and then do it again.\"\n\nI had to admit that I felt very refreshed, so we hit one of the hotter >80-degree saunas for 10 minutes then repeated the cooling down process.\n\n\"One more time!\" Sakura insisted and although I'd had enough, I couldn't refuse her.\n\nWe returned to our loungers feeling exhilarated but exhausted at the same time. Mr Yamamoto was absent and the three of us lay down and relaxed.\n\n\"Are you boys hungry?\"\n\nAt the mention of food, I heard my stomach grumble loudly. Both Sakura and Hiroshi heard it and laughed.\n\n\"You don't need to answer that Patrick!\" she said with a smile.\n\n\"I'll go and look for my husband and then we can eat.\"\n\nI watched her go, never tiring of her breath-taking beauty. Hiroshi was smiling when I turned back to him after she was out of sight.\n\n\"You really have the hots for her, all these sexy naked women around here and the only one you have eyes for is my mum!\"\n\n\"It's true and I won't deny it!\"\n\nHe laughed and nodded in the direction I'd been looking. \"She's on her way back without dad.\"\n\nI turned and watched as his mother walked back with a somewhat troubled expression.\n\n\"Did you find him?\" Hiroshi asked.\n\n\"Yes, but he doesn't want to eat.\"\n\n\"Are you OK?\" I asked.\n\nShe shrugged, \"No but I don't want to talk about it now, let's go and eat.\"\n\nI wondered what had happened but respected her wishes. Hiroshi and I gathered our towels and followed his mother to the restaurant. As we walked past the pool, I saw Mr Yamamoto sitting at the bar in the water, sipping from a large drink whilst staring at the woman next to him. She looked to be in her forties and had a pair of the biggest breasts I had ever seen. Despite their incredible size, they stood firm and pointy with no droop or wobble whatsoever, obviously fake.\n\nI failed to see anything attractive about her or her enhanced breasts, but it was clear, even from this distance, that Mr Yamamoto was enchanted. He stared at her as she spoke, and I even saw her touch his shoulder as they laughed about something together. It was obvious they were flirting, and I now understood why Sakura was upset.\n\nAt the restaurant, we ordered a simple meal, but the conversation was stilted. I tried my best to cheer her up but wasn't very successful. When Hiroshi excused himself, I took the opportunity and said, \"I know why you're upset Sakura, I saw your husband with that woman.\"\n\nShe looked surprised, \"What did you see Patrick?\"\n\nI was suddenly worried her sadness was caused by something else, but I had no choice but to tell her what I saw.\n\n\"I saw him flirting with some woman at the pool bar.\"\n\n\"Please don't mention it to Hiroshi.\"\n\n\"I won't say a word.\"\n\n\"I'm sorry to put you in this situation Patrick. I'm not upset he's with that woman, it's what he said to me when I asked him to join us that made me sad.\"\n\nI didn't want to push her to reveal any details, so I just waited.\n\n\"When I found him at the bar, the woman asked who I was, and he said I was just an acquaintance. Then he switched to Japanese and said I should leave him to chat with a woman that looks how a real woman should.\"\n\nI was stunned and couldn't believe he could say something like this to his wife. \"I'm so sorry Sakura. He's a fool with no clue what a real woman should look like. The one he's talking to is at least 90% silicone!\"\n\nThis finally brought a small smile to her face. \"Don't you think large breasts are attractive?\"\n\nI shook my head as I answered, \"Not at all, and especially not when they're fake.\"\n\n\"Most men would disagree with you.\"\n\n\"I don't care, I know what I like.\"\n\n\"So, what is it that you like Patrick?\"\n\n\"I like a natural woman, not too tall, with small breasts, large nipples and a wonderfully formed bottom... just like you.\"\n\nI stared at her as I spoke and was glad that the restaurant was the one place you had to cover yourself with a towel as she gave me such a sultry look that my penis instantly began to grow.\n\nOur conversation was interrupted by the return of Hiroshi. He quickly noticed that his mother was more cheerful and gave me a quick thumbs up when she wasn't looking.\n\n\"What's the plan after we've eaten?\" He asked.\n\nSakura said, \"I'll have a rest and then maybe try the mineral pools and the sauna's again.\"\n\nHiroshi looked at me, \"Do you want to hit the slides while mum rests?\n\nI would have rather just relaxed with her, but I knew it would be boring for Hiroshi, so I agreed to join him. With a plan made we returned to the loungers after our meal. I kept a lookout for Mr Yamamoto but didn't see him or the woman he'd been with. Hiroshi and I grabbed our swimsuits and left his mother to rest.\n\nIt was unpleasant changing into the soggy cold costumes, but we had no choice. After an hour at the slides, I was glad to leave the noisy and bustling \"fun\" part and return to the serene and quiet nudist area. It was funny how quickly I'd adapted and thought nothing of stripping off my trunks despite a bunch of other people being nearby.\n\nIt felt great being naked again as Hiroshi and I made our way back to Sakura. We found her asleep on her lounger, the book she was reading lying on her stomach. Mr Yamamoto wasn't with her and I could have stood watching her for the rest of the day. However, she must have sensed our presence and opened her eyes, blinking the sleep from them.\n\n\"I must have nodded off, what time is it?\"\n\n\"We've been gone about an hour, it's almost 6 o'clock,\" Hiroshi replied.\n\nSakura sat up and looked at her husband's empty lounger. I wondered if he'd been gone all the time. She frowned briefly and then straightened her shoulders, \"Who's going to accompany me to the mineral pools?\"\n\n\"I will!\", I blurted out enthusiastically eliciting a smile from her.\n\n\"What about you Hiroshi?\"\n\nHe looked less enthusiastic but then shrugged, \"I suppose so.\"\n\n\"Good, let's go.\"\n\nLeaving our towels behind we made our way upstairs to the small pools. On the way, I explained the different types and Sakura said she wanted to try the one with the high salt concentration first.\n\n\"Be careful not to get any in your eyes!\" I warned her as she stepped into the water.\n\n\"Oh, this is wonderful\" she exclaimed when she discovered she could just sit and float without any effort.\n\nHiroshi and I laughed but I began to get aroused when she attempted all sorts of different poses as she floated. She showed absolutely no shame around us and we were treated to intimate views that would normally only be shared with a lover.\n\n\"You better cool it a bit mum, Patrick is getting all hot and bothered!\"\n\nSakura giggled as she noticed my fully erect penis. Without any towels, there would be no way for me to hide my engorged cock when we left the pool. Having some sympathy for my predicament, she stopped the explicit displays of her pussy and arse. That, combined with my attempts at solving a complex maths problem in my head, led to a relaxation in my crotch and we were able to leave the water after about ten minutes.\n\nI was flaccid but still long and swollen which didn't go unnoticed by some of the other visitors. No one made any comments, but I did see some smirks and smiles.\n\nThe next pool contained Zink and some other compound and was supposed to be beneficial to your skin and circulatory system. As we sat in the pool, I noticed Hiroshi's attention drawn to two girls already in the water. They'd watched us as we entered the pool and I noticed one of them was seemed particularly drawn to Hiroshi.\n\nI couldn't see her body as it was submerged but she had a pretty face and long blond ponytail. I watched the two of them from the corner of my eye and saw her friend give her a nudge and whisper. Hiroshi seemed oblivious as we settled into our places but after a minute or so the girl stood and started to move towards us.\n\nHis attention was immediately drawn to her incredibly large breasts as they swayed and bobbed. He stopped talking mid-sentence and I barely suppressed a laugh at his expression. The girl must have noticed his stares, but she didn't seem to mind, in fact, I noticed the corners of her mouth rise and form a small smile.\n\nShe stopped right next to Hiroshi and said, \"Excuse me, could I ask you something?\" in English with a strong German accent.\n\nHiroshi finally raised his eyes and nervously cleared his throat before stammering, \"Um, yes, of course. No problem.\"\n\nThe girl smiled, \"Are you from Japan?\"\n\nI glanced at Sakura and saw she was watching her son with an amused expression. She noticed me looking and gave me a quick smile.\n\n\"Oh good! I'm fascinated with Japan and have been learning Japanese.\" She paused and then added, \"The problem is that there's no one I can practice with around here.\"\n\nHiroshi's eyes widened and I knew this was a dream come true for him. He was so stunned that he didn't respond until I kicked him underwater.\n\n\"Um, sorry, um, if you want, I can help you.\"\n\nI'd never seen him this nervous and it was amusing to watch as he tried to keep his eyes from dropping as he spoke. The girl smiled widely, \"That would be great, but I don't want to keep you from your friends. My name is Monika by the way.\"\n\nHiroshi grinned, \"Don't worry about them they can entertain themselves.\"\n\nMonika glanced at me and Sakura somewhat apologetically.\n\n\"Hiroshi is right, I'm Patrick by the way and this is Sakura, his mother.\"\n\nSakura gave her a smile and a small wave. I could tell Monika was surprised as she looked at me and then his mother.\n\nWith a slight blush she exclaimed, \"Oh, I'm sorry! I thought the two of you were a couple!\"\n\nSakura laughed, \"Don't be sorry, that's a compliment! Hiroshi, why don't you join the girls and we can meet up again later.\"\n\nHiroshi nodded eagerly and stood. He was only slightly taller than Monika and I knew the effort it must have taken for him to not keep staring at her breasts.\n\nMonika smiled, \"Thank you so much, come on Hiroshi, let me introduce you to my friend so.\"\n\nWith that, she turned and headed back to her friend that had watched the entire episode with amusement. Hiroshi gave us a quick grin before rushing after her like a puppy.\n\nSakura watched them and then leaned closer to me as she said, \"Don't you want to join them, Patrick, they look like lovely girls.\"\n\nI glanced at the three of them and saw Karin look in my direction. She was a pretty brunette, but I had no interest in anyone but Sakura.\n\n\"No, I want to stay with you if that's OK.\"\n\nIt was the right answer and Sakura gave me a grateful smile as I felt her hand slide over and rest on my thigh. I glanced over at Hiroshi and his new friends, glad that the milky water covered my arousal. The three of them seemed to be getting on well and were talking animatedly, as I watched they stood up and with Hiroshi in the lead walked towards us.",
        "He had a huge grin on his face as he said, \"I've invited Monika and Karin for drinks in the pool, do you want to join us?\"\n\nHis question was to both Sakura and me, so I looked at her to decide.\n\nTo my relief, she said, \"No, we still want to try the other mineral pools.\"\n\nHiroshi and Monika looked happy that his mother wasn't going to join them, but Karin seemed a bit disappointed. She was an attractive girl, with a slim figure and medium-sized breasts and I guess she was feeling a bit like a third wheel.\n\nAs they headed towards the exit I wondered if Hiroshi would be sporting a boner. Surprisingly, he seemed to be under control, with the only giveaway being that his glans had emerged from its cover. Monica and Karin seemed to take no notice of this as the three of them headed down to the main pool.\n\n\"I think Hiroshi likes that girl!\" Sakura said with amusement.\n\nThe girls had both been attractive and had I not been with Sakura I would have been happy to spend time in their company. \"Yes, Monika is just his type!\"\n\n\"So, he takes after his father,\" Sakura said, somewhat dejectedly.\n\nI shrugged and eager to get her mind off her husband said, \"Let's move to the next pool.\"\n\nI took her hand and pulled her after me, only realising I was still fully erect when we left the water.\n\nSakura giggled at my predicament as I rapidly walked to the adjacent pool, glad that no other people were close by. The water was clearer and if you looked you would still notice but I didn't care anymore and the pool was currently unoccupied anyway.\n\nThis time we didn't settle in the seats but moved to the front of the pool where you have a view over the lower part of the complex. We caught a glimpse of Hiroshi as he and his new friends entered the main pool beneath us. As we people-watched, it was clear to see that some of the couples (mainly the younger ones) would get quite frisky when they thought they were unobserved.\n\nIt was rather arousing being a voyeur and it did nothing to ease my erection. Sakura giggled and nodded her head in the direction of the large whirlpool opposite the main pool. A couple was kissing deeply, and the woman had her legs wrapped around her partner. They were rocking back and forth gently making small waves in the pool and I was pretty sure they were having sex.\n\nI gasped as I felt Sakura's fingers wrap around my shaft and begin a gentle stroking motion. Her eyes remained on the amorous couple beneath us as she said, \"I can't wait to feel you inside me, Patrick. I will come to your room tonight.\"\n\nI moaned as her grip tightened and she continued to talk seductively. \"Send me a message when Hiroshi is asleep, and I will join you as soon as I can get away.\"\n\nThe thought of her being in my bed tonight pushed me over the edge and I stifled a cry as my cock erupted, spewing my load into the pool. Sakura was staring in fascination at the white streams of spunk that slowly floated around us in the clear water.\n\n\"Soon that will be inside me!\" she giggled as she gave a final squeeze and tug to expel another squirt of my semen.\n\n\"Oh my god, Sakura!\" I gasped, \"I can't wait!\"\n\nOur ten minutes in the pool were up and we took a quick shower before heading downstairs again. Seeing that Mr Yamamoto was still not at our loungers we decided to take a dip in the main pool. As we entered the water together, we saw Hiroshi sitting at the bar with Monika, Karin was nowhere to be seen.\n\nSeeing us, Monica waved, and we swam over to join them. Hiroshi was in high spirits and couldn't keep the grin off his face. His eyes were still constantly dropping to Monika's impressive chest, but she didn't seem to mind. Once we reached the bar, Sakura sat next to Monika and I took the seat next to her. Hiroshi began to speak in Japanese and Sakura smiled at whatever he said.\n\nMonika looked somewhat shy as she spoke softly in Japanese and Sakura nodded enthusiastically before responding in English.\n\n\"Your pronunciation is very good. How long have you been learning?\"\n\n\"Almost two years now!\"\n\n\"Have you been to Japan?\"\n\n\"No, it's one of my dreams but I'm only a student and I can't afford it.\"\n\nHiroshi took the opportunity to blurt out, \"Well, you are welcome to stay with us and I'd be very happy to show you around.\"\n\nMonika blushed, \"that's very generous Hiroshi and not having to pay for accommodation would make it much cheaper, but I couldn't accept.\"\n\nHe looked downbeat and Sakura said, \"Nonsense, we would be more than happy for you to stay and you will get the most benefit if you have a local guide like Hiroshi.\"\n\nMonika beamed, \"Well thank you so much, if it's really OK it would make a huge difference!\"\n\nWe sat and chatted for a while before Monika asked us to join her in the Sauna. Hiroshi accepted immediately and both he and I were relieved when Sakura declined.\n\n\"We should be getting back to the hotel soon and then have dinner. I'm exhausted already,\" she said.\n\n\"Me too\", I echoed.\n\nHiroshi grinned and said \"Well I'm not! If it's OK with you mum, I'd like to stay here and then invite Monika for dinner in town.\"\n\n\"That's fine, but how will you get back without a car?\"\n\n\"That's no problem, Mrs Yamamoto, there is a bus service and it's quite a short walk down to the village anyway.\"\n\n\"Oh, wonderful. Well enjoy yourselves and don't come home too later Hiroshi!\"\n\n\"See you later Hiroshi,\" I said with a wink when Monika wasn't looking.\n\n\"Yeah, yeah, bye mum, Patrick!\" Hiroshi said eagerly as he grabbed his new friend's hand and pulled her off her seat towards the pool steps.\n\n\"He looks so happy,\" Sakura said.\n\n\"Like a cat that's got the cream!\"\n\nShe laughed and with a sultry look said, \"I hope to be the cat that gets some cream later.\"\n\nHer sexy comment caused an instant reaction, but I suddenly realised our plan for tonight was in jeopardy.\n\n\"Sakura, I'm sure Hiroshi is only going to return very late; can we still meet as planned?\"\n\n\"Don't worry, this changes nothing. In fact, if we go back to the hotel now we don't have to wait until later. What do you think?\"\n\nMy eyes widened and I felt my penis swell.\n\nSakura grinned as she saw my reaction, \"I'll take that as a yes!\"\n\nI nodded, still unable to speak. We left the pool and quickly gathered up our things before heading for the changing rooms. I didn't care that I had an erection and was attracting quite a bit of attention as we were leaving and I would never see these people again.\n\nMr Yamamoto was still nowhere to be seen but Sakura didn't seem to care. After a quick shower, we found our lockers and got dressed. It felt strange and rather uncomfortable to be wearing clothes again after being naked for so long.\n\n\"What about your husband?\"\n\nSakura frowned, \"I don't care what he does, he can take the car if you don't mind walking back to the hotel?\"\n\n\"That's fine with me!\"\n\nShe smiled and took my hand as we headed for the exit. The fresh air was welcome and thanks to the easy to follow signage we quickly found our way back to the hotel.\n\nI felt nervous as we entered the building and went directly to the room Hiroshi and I shared. It was somewhat old fashioned but spacious with two large twin beds, however, none of this mattered as I was more nervous about what would happen next.\n\nThankfully Sakura took the lead and once the door closed behind us she wrapped her arms around me and tipped her head upwards. I stared into her eyes and she smiled before parting her lips invitingly.\n\nI allowed myself to respond instinctively and soon our lips were locked together. I'd never kissed anyone like this and it felt amazing. When I felt her tongue probing I welcomed it into my mouth.\n\nAfter we parted for air I felt lightheaded and my penis was straining uncomfortably. Sakura had a sexy smile as she looked down at the prominent bulge in my pants before reaching out and rubbing her hand over it.\n\n\"You are so big and strong Patrick!\" She said in a sultry voice.\n\nI licked my lips and decided I wanted another kiss. I pulled her closer and this time when our lips met my tongue was the one that delved into her mouth. She seemed surprised but willingly responded and I let my hands drop, gripping her firm buttocks and pulling her against my groin.\n\nShe moaned as we kissed and I felt her gyrate her hips slightly, making the contact even more pleasurable. The kiss lasted even longer than before and only ended when Sakura pushed me away. Her face was flushed and she had a somewhat wild look in her eyes.\n\n\"I need you now Patrick!\" she said as she began to disrobe.\n\nI gulped as I watched her almost tearing her clothes off. She looked incredibly sexy and within moments she was naked. She stood and let me stare at her elongated nipples and matted pubic hair. Her excitement was evident and I watched as a drop of clear fluid trickled down her thigh.\n\n\"You are so beautiful Sakura!\" I managed to mutter.\n\nShe smiled and then dropped to her knees before me. I watched in awe as she unbuttoned my pants and pulled them down. My rigid cock almost hit her in the face as it sprung free and she giggled before taking hold of it.\n\nI grunted as she slipped the tip into her mouth whilst looking up at me. I'd never felt anything like this and the wet heat that surrounded my glans was almost enough to make me lose it.\n\nIn an attempt to distract myself from the incredible sensations I pulled off my shirt and tried to recite the alphabet backwards in my mind. It was enough to save me the embarrassment of climaxing so quickly but when I felt her tongue begin to tease the sensitive area on the underside of my cock it was too much. I managed to utter a warning but Sakura ignored it and placed her hands on my arse pulling me even deeper.\n\nI tried to hold back but it was to no avail and I grunted as the first blast of semen erupted from my cock. Sakura seemed surprised by the quantity and her cheeks ballooned as another blast shot into her mouth. She swallowed and did her best to keep up, but the sheer volume soon overwhelmed her.\n\nShe opened her mouth and the excess ejaculate dribbled from her mouth and down her chin before dripping onto her chest. I felt guilty and tried to pull back but she steadfastly held on as the last few squirts emptied into her.\n\n\"I'm so sorry Sakura, I just couldn't hold back any longer.\"\n\nHer reaction was very different to what I expected. Instead of being angry, she grinned before releasing my still hard cock from her mouth. She scooped up the thick viscous fluid from her chin and chest with her fingers then sucked them clean with relish. I couldn't help but smile when she stood and we kissed again, not caring that I could taste myself.\n\n\"That was incredible Patrick, I never knew a man could produce so much!\"\n\nMy chest swelled with pride, \"I still have plenty left!\"\n\nShe giggled, \"well I will make sure not a drop is wasted.\"\n\nWe grinned at each other, then she took my hand and pulled me towards the bed.\n\n\"How much experience do you have?\"\n\nMy face reddened as I answered, \"um, ah... None at all.\"\n\nShe seemed happy to hear this and I relaxed somewhat.\n\n\"Would you like to taste me?\"\n\nI couldn't think of anything I'd rather do and nodded enthusiastically.\n\nSakura released my hand and climbed onto the bed. I stared at her amazing body as she rolled onto her back and raised her knees. She watched me closely as she slowly let them drop exposing her pussy to my view. My eyes widened and I licked my lips at the beautiful display before me. I sank onto my knees and moved my head between her legs. As I got closer her earthy, musky scent filled my nostrils and I inhaled deeply.\n\nI'd never been this close to a pussy before and I was fascinated by the crinkly lips that were now parted somewhat, revealing a pink and very wet interior. Sakura reached down and took hold of her lips, pulling them further apart. They unfurled like the wings of a butterfly. At their apex, a raisin sized protuberance was peeking from beneath its hood and caught my attention. This must be her clitoris!\n\nIt was bigger than I expected and the pink tip looked similar to my glans. In fact, the whole thing looked a bit like a tiny erect penis. I moved even closer and tentatively extended my tongue until it came into contact with the hot, wet and delicate tissue. She moaned and raised her hips somewhat bringing her pussy even closer.\n\nI can't describe the taste of her juices but I loved it and began to lap them up like a cat with a bowl of milk. Her moans got louder and my confidence increased so I pushed my tongue as deeply as I could into the tiny opening. Sakura cried out and her fingers released her nether lips as her hands moved to my head, pulling me closer as a squirt of a sweet, hot liquid filled my mouth.\n\nI realized I'd managed to give her an orgasm and happily swallowed the unusual flavoured fluid. After a while, her grip on my head loosened and the tension left her body. I was free to move away but I wanted more and continued probing. It seemed impossible that the tiny opening I was teasing with my tongue had expelled Hiroshi all those years ago and would soon be home to my cock. Sakura began to moan again and each time my nose bumped against her clitoris she yelled in pleasure.\n\nI started doing this on purpose and her body began to tremble. When I moved my mouth over the inch long shaft and closed my lips around it, suckling, she squealed and wrapped her legs around my head and shoulders. I was trapped but I didn't care, all I wanted was to give her as much pleasure as I could.\n\nI flicked the rigid nubbin with my tongue and felt my head crushed in a vice-like grip as she screamed. Despite my ears being covered, it sounded so loud that I worried there would be complaints from other guests. I felt jets of fluid spraying my chin and neck as she gyrated beneath me until she suddenly stopped moving.\n\nThe sudden silence was disconcerting and when her legs released their hold on me I lifted my face and looked at her. Her eyes were closed and I could see she was taking deep breaths. Her skin glistened with a sheen of perspiration and I thought she looked more beautiful than ever.\n\nI slowly crawled onto the bed and over her, only stopping when I reached her breasts. They looked so tempting that I couldn't resist and lowered my head to engulf a nipple between my lips. Sakura's eyes flew open and we looked at each other as I suckled on her long and rubbery nipple. Amazingly I felt it expanding as she gently tousled my hair.\n\nI released it with a popping sound and stared at the now inch long protuberance. I moved my head and repeated the process with her other nipple, making her groan in pleasure again.\n\nI could have spent all day like this but Sakura whispered, \"I need you inside me, Patrick!\n\nI never thought I'd hear her utter these words and lifted my eyes to stare into hers. This was it, I was finally about to lose my virginity to the woman of my dreams!\n\nI released her nipple and took a deep breath before sliding further up her body. My rigid cock brushed against the smooth skin of her thigh as we kissed each other again. Sakura's fingers took hold of my shaft and gently stroked it.\n\n\"I think it's better if I am on top for the first time.\" She said huskily.\n\nI had no problem with that and rolled onto my back next to her. Sakura raised herself and rolled onto her side as she looked at my body.\n\n\"I have never been with a man as big and strong as you, Patrick,\" she said as her hands gently caressed my chest.\n\nI watched intently as she sat up and then straddled me. My penis looked obscenely large when she settled on my balls and lifted it so it stood vertically, easily extending past her belly button. Luckily she didn't seem concerned by its size and rose until her pussy hovered above its tip.\n\nI gulped at the sight and then moaned when she swiped my glans over her lips a few times, coating it with her abundant juices before slotting it into position. The hot wet tunnel surrounded my cock and when Sakura sank lower it felt like a thousand tiny fingers were gripping every inch of my swollen organ.\n\nSakura made a high pitched squealing sound and I groaned as she took about half my length before stopping. Her pussy clenched and I knew that if I hadn't climaxed earlier there was no way I could have held back.\n\nAfter a brief pause, she reversed direction and lifted herself until just my tip was still within her. Half my shaft was coated with her slimy fluids and glistened in the light. After adjusting her position somewhat, she leaned forward, watching herself as she again took me deeper.\n\nHer small tits dangled seductively before me and I couldn't resist reaching out and grasping the distended nipples between my fingers. I gently pinched and pulled the rubbery tips and Sakura again squealed in delight. At the halfway mark she stopped again and then took a deep breath before continuing her downward motion. I could feel resistance and wondered if this was further than her husband managed to get.\n\nThe thought of being deeper than anyone else had ever been was incredibly arousing and I felt my cock grow as even more blood rushed into it. Sakura moaned as she felt me expanding within her but it didn't stop her. She began rocking her pelvis slightly and I could feel myself sliding further and further into her.\n\nThe sensations were incredible and I couldn't get over how sexy she looked as she concentrated on taking my full length. Both of us watched in awe as my cock sank deeper and deeper, stretching her pussy until she finally bottomed out. I grunted as every inch of my cock was within her hot passage and Sakura raised her head and looked me in the eye.\n\n\"I have never been filled like this!\"\n\nI smiled, \"you are incredible Sakura!\"\n\nShe grinned and then gently rocked back and forth as her pussy squeezed my cock. Both of us groaned at the intense pleasure. Sakura closed her eyes and I watched her face as she continued rocking whilst now adding a slight up and down motion. She looked amazing and I could tell she was getting close to another climax as she began making that sexy squealing sound once again.\n\nShe picked up the pace and the volume of her squeals increased, now joined by the wet squishy sounds of sex. We were both so lost in the fervour of our coupling that we didn't notice the room door opening until I sensed movement behind Sakura and gasped as I saw Hiroshi watching us.\n\nI was about to warn his mother that we had company but he put his finger to his lips to indicate I should remain silent. After the initial shock of being caught in flagrante with his mother, I suddenly found having him witness me losing my virginity incredibly exciting.\n\nI began to raise my hips in time with Sakura's riding and amazingly found myself going even deeper each time she bottomed out. Sakura was rapidly reaching her peak and she leaned further forwards as she picked up the pace. Her squeals were almost deafening and the lewd wet sounds were now accompanied by flesh slapping against flesh.\n\nHiroshi's eyes were wide as he stared at where his mother and I were joined. His hand moved to his fly and I saw him unzip and release his erect penis which he immediately began to stroke. Sakura suddenly sat up and ground herself against my crotch. Her body went rigid and I squeezed her nipples somewhat harder as I felt her pussy tighten. She screamed and I felt my cock surrounded by wet heat as she once again began to squirt.\n\nIt was too much for me to resist and I cried out as I felt my balls tighten before launching another torrent of semen deeply within her. I don't know how long our orgasms lasted but suddenly all motion stopped and the room was filled with the sounds of us gasping for breath. Sakura collapsed onto me and I wrapped my arms around her, kissing her sweat covered neck and face gently. We lay like this, as we slowly came down from our mutual highs.",
        "My penis was slowly wilting and I felt Sakura's pussy contract as if it were trying to extract the last drops of sperm. After a few of these contractions, there was a plopping sound and I felt my cock ejected, followed by a gush of what I imagined were our combined juices. Sakura giggled and pushed herself up as she looked between her legs. She still hadn't noticed Hiroshi and I hoped she wouldn't be too upset when she realised he was with us.\n\n\"Aiyeee!\" she shouted suddenly, followed by a stream of Japanese as she jumped to her feet on the bed. Hiroshi let go of his stiff cock and started gesticulating as he began jabbering in Japanese. I watched the two of them with trepidation as well as amusement as they talked over each other. I considered trying to mediate but decided they had to sort this out between themselves.\n\nMy attention shifted to Sakura. She was standing above me with her feet on either side of my hips. Her amazing arse jiggled as she argued with Hiroshi and as I watched, the semen I'd injected deep within her began to succumb to the force of gravity. At first, just a few drops splattered onto my groin but soon a stream of our combined juices rained down on me.\n\nI found it extremely erotic and my cock was soon as hard as it could get. Sakura and Hiroshi seemed to have calmed down. He was staring between his mother's legs as the evidence of our intercourse continued to flow. Sakura put her hand between her legs in an attempt to stem the tide and turned towards me, \"I'm so sorry Patrick.\"\n\nSeeing my expression, which must have shown I was anything but upset, her gaze moved to my penis. She gasped and then smiled as she saw how aroused I was. Her hand moved away and she started to squat. Her pussy was red and swollen and looked amazing from my perspective. Even more liquid began pouring from within her and my cock was soon covered by the warm slimy juice.\n\nI glanced at Hiroshi and saw him staring open-mouthed at my crotch as he once again began to stroke himself. When the flow slowed, Sakura sank to her knees and then leaned over and began to clean my cock and balls with her tongue. I watched in awe and saw Hiroshi staring at his mother's backside.\n\nI could imagine the incredible view he was getting and despite him saying he'd seen her naked many times I suspected he'd never seen her quite like this! What happened next was inevitable and he grunted loudly as his cock spewed a fair amount of semen over the floor and bottom end of the bed.\n\nHearing her son's sounds of pleasure, Sakura paused and looked back at him. He seemed embarrassed and ashamed by what he'd done but relaxed slightly when she talked to him in a gentle tone. He nodded and replied before withdrawing to the bathroom.\n\n\"I apologize for Hiroshi's behaviour Patrick, he should never have done what he did.\"\n\n\"It's OK Sakura, I don't mind and to tell you the truth I found it quite exciting.\"\n\nHer eyebrows rose in surprise but then she smiled, \"you are a naughty boy, Patrick!\"\n\nI laughed and reached down to pull her up over me. After kissing her I said, \"you were incredible and I don't know how to thank you. I had no idea sex could be that good!\"\n\nSakura put her fingers on my lips to stop me from talking, \"it is I that cannot thank you enough, Patrick. I have never had sex like that before, your penis reached parts of me that no man has touched before.\"\n\nI kissed her fingers as she continued to talk, \"My husband has never given me pleasure like this, you are an amazing lover.\"\n\nWe kissed again and then just held each other tightly. I loved the feeling of her petite body on top of mine and wished we could stay like this forever. We heard a knock from the bathroom door and then Hiroshi's voice speaking in Japanese.\n\n\"He wants to come back into the room, should I tell him to leave us alone?\"\n\nI shrugged, \"I don't mind if he stays as long as it's OK for you.\"\n\nShe considered for a moment, \"a son should not see his mother like this but he has already seen us together.\"\n\nI nodded and she made her decision, \"you can come in Hiroshi.\"\n\nThe door opened and a sheepish looking Hiroshi stepped inside.\n\n\"I'm sorry for what happened before. I shouldn't have watched you or touched myself but you looked so amazing together I couldn't help it.\"\n\n\"It's OK Hiroshi we understand and we don't mind,\" I said.\n\nHe sighed in relief and a cheeky grin spread over his face. \"You bastard managed to lose your virginity before me and from what I saw it looks like you have some skills!\"\n\nI laughed, \"thanks mate but your mum is the one with the skill!\"\n\nSakura hit me playfully but I could tell she appreciated the compliment. Hiroshi's expression turned serious, \"you don't know how much it means to me to see my mum so happy. She's been neglected for so long and she deserves so much more.\"\n\nThere were tears in his eyes and I could see Sakura was equally moved by his words. She climbed off me and went to hug her son. They held each other and spoke a few words in Japanese. Sakura kissed his cheek and returned to my bed.\n\n\"Do you mind if I spend the night with you, Patrick?\"\n\nI smiled and gestured at my still erect penis, \"what do you think Sakura?\"\n\nShe giggled and took hold of my cock stroking it gently.\n\n\"What about your husband?\"\n\n\"Forget about him, our marriage is over. I will start divorce proceedings when I return to Japan.\"\n\nI glanced at Hiroshi to see how he was reacting to this news. He was smiling and gave me a thumbs up, \"I suppose you two are going to keep me up all night?\"\n\nSakura and I looked at each other and we both laughed.\n\n\"Um, yeah, I'm afraid so!\"\n\nHe chuckled and then gave an exaggerated sigh, \"well at least it'll be educational.\"\n\nI grabbed a spare pillow from the bed and tossed it at him. He batted it aside and began to get undressed. I focused on his mum and groaned as she began to nibble my ear. When her tongue slipped inside, I gasped in surprise at how good it felt.\n\nWhat followed was at least an hour's worth of mutual discovery of our bodies. I forgot all about Hiroshi as Sakura and I investigated every inch of each other using all our senses. I remained erect the whole time and judging by Sakura's nipples, her engorged clitoris and the wetness between her legs she was just as aroused. Things progressed and I found myself behind Sakura admiring her amazing arse and pussy as she was bent over before me.\n\nI looked at Hiroshi and found him watching us with interest. He was touching himself again and grinned when he noticed my glance. I smiled at him and then dipped my head between his mother's legs as my hands reached around her and cupped her dangling titties.\n\nShe groaned in pleasure as I worked on her pussy like a pro, sometimes even straying to her arse. I continued until she demanded my cock. I rose and guided my throbbing penis to her more than ready opening. Once my glans was firmly seated I grabbed her hips and pushed myself inside.\n\nShe was just as tight as the first time and not wanting to hurt her I took my time and patiently worked myself in. Penetration was even deeper in this position and Sakura was already squealing in pleasure before I bottomed out.\n\nI paused until she began to wiggle her arse impatiently. It was time for me to get to work and I began making long slow strokes. The sounds and scents that filled the room made for a heady combination. Sakura seemed to be enjoying my efforts as she slipped from one orgasm to the next almost seamlessly.\n\nAs I felt my climax approaching, I increased the pace, making the bed rock in sympathy. The headboard began to bang against the wall as I pounded into Sakura mercilessly soon feeling my balls tighten as the unstoppable sensation washed over me. I cried out as I pushed myself as deeply as I could. My fingers gripped Sakura holding her tightly against me as my cock again erupted within her.\n\nSakura wailed and her body went rigid. I could feel her pussy clench and unclench and the rush of liquid as it surrounded my cock trying to find a way past. When she collapsed forwards, my still spurting cock popped free like a cork from a bottle of champagne.\n\nShe sprayed my crotch as I spewed the rest of my load over her back and arse. I was breathless as I crumpled onto the bed next to her.\n\n\"You guys are f'ing incredible!\" Hiroshi exclaimed.\n\nHe was sitting on the bed facing us. His penis was flaccid which indicated he'd reached completion at some point. I gave him a lazy wave and then gently caressed his mother's back. She was slick with sweat and moaned into the pillow before rolling onto her back and stretching.\n\n\"I've never felt as good as this but I'm exhausted!\"\n\nI smiled and mumbled my agreement as I slid my hands over her front. I loved the way her nipples sprung back when they emerged from beneath my hands.\n\n\"As much as I'd like to lie here forever, we better have a shower and get some sleep,\" Sakura said.\n\nWith a sigh, she sat up and climbed to her feet. She took my hand and pulled me up before leading me to the bathroom. The shower was another sensual experience and despite my fatigue, my cock once again stood proudly. Sakura was able to resist and apart from cleaning each other's bodies nothing further happened. We shared my toothbrush and then returned to the bedroom to find Hiroshi had fallen asleep.\n\nOur bed was a sodden mess but we found a blanket in the cupboard to cover the sheet. Not bothering with clothes, we slipped under the duvet and held each other. I watched Sakura as she fell asleep in my arms. I knew I was in love with her and despite not knowing what the future would bring I'd never felt happier than at this moment. Never in my wildest dreams had I ever imagined my first time would be so successful or with a woman like her.\n\n***\n\nWhen sleep finally took me it was light and I awoke in the middle of the night with a raging boner. If Sakura wasn't lying next to me, I would have believed it had all been a dream. Feeling her hot and silky-smooth body next to mine brought back memories of everything that had happened. Needless to say, this did little to alleviate the pressure down below and I snuggled closer sliding my engorged penis into the gap between her soft thighs. It felt good and I couldn't resist thrusting a few times.\n\nSakura moaned in her sleep and pushed back against me. I moved even closer and placed one hand on her breast. Her nipple quickly stiffened and pushed against my palm which made me smile as I slipped back into slumber.\n\nI woke up to the incredible sensation of my cock sliding into her wet pussy. It was gentle and slow -- very different from our earlier, vigorous sex but no less enjoyable.\n\nSakura was trying to keep quiet but couldn't suppress the small squeals of pleasure as she repeatedly peaked. When my turn came, I grunted into my pillow as I released another load of semen within her. We didn't disengage and fell asleep with my cock still firmly embedded. Similar events took place another three more times during the night until I woke up to find Hiroshi gently shaking my shoulder.\n\n\"It's time to get up buddy.\"\n\nI rubbed my eyes and looked around. Sakura was nowhere to be seen.\n\n\"Is your mum in the bathroom?\" I asked groggily.\n\n\"No man, she went to get her stuff from their room.\"\n\nI sat up and looked at him worriedly, \"shit, I should be with her!\"\n\nI jumped out of bed and looked for my clothes.\n\n\"Relax, dad has already left.\"\n\n\"huh?\"\n\n\"I went with her to the room and his stuff was gone and the bed unused.\"\n\n\"You mean he just up and left last night?\"\n\nHe nodded, \"seems like it. The rental car is also gone.\"\n\nI sat down on the bed in shock. \"This is l my fault, I'm so sorry Hiroshi.\"\n\nHe grinned, \"Yeah, you're a real home wrecker.\"\n\nI was confused by his reaction, \"huh?\"\n\n\"This is the best thing that could have happened. According to the staff at the reception, he came in late with that woman he met at the waterpark and they left together soon after. He's basically abandoned us in a foreign country which will make the divorce proceedings even easier.\"\n\nHe grinned, \"I've never seen mum looking happier in her life!\"\n\nI was still trying to process It all when the door opened and Sakura stepped in.\n\nShe was wearing a short skirt and looked radiant.\n\n\"Everything's been arranged and a car will take us to the nearest station after breakfast. From there we can catch a train back to Basel.\"\n\nDespite her being fully dressed she looked incredibly sexy and my cock reared its head as it rose to the occasion. Of course, they both noticed and Hiroshi smirked as his mum grinned.\n\nI didn't care and stepped up to her, taking her hand, \"I love you Sakura!\"\n\nShe gasped and tears of joy filled her eyes. She embraced me and we kissed before she pushed me back and ignoring her son reached for the hem of her short dress and pulled it up over her head. It was my turn to gasp as her naked body was revealed in all its glory.\n\nShe wasted no time and pulled me to the bed where she bent over. I glanced at Hiroshi and grinned as I moved into position behind his mum. She was already soaking wet and I slid my entire length into her easily. Within moments I was banging her vigorously and managed to give her two orgasms before succumbing and dumping my load in her depths. It was the very definition of a quickie but no less pleasing.\n\nSakura collapsed onto the bed, giving us an amazing view of her stretched pussy leaking my spunk.\n\nI couldn't resist and dropped to my knees burying my face in the wet mess with relish before licking her clean. When I was done I helped her to her feet and, to my surprise, she pulled the dress on again before kissing me.\n\n\"I want to smell you on me for the rest of the day!\"\n\nI gulped and felt my cock expanding again. Sakura laughed and slapped it gently, \"no more for now darling, you need a shower and we have to eat breakfast. Hiroshi and I will pack your things for you.\"\n\nI stood somewhat stunned by the rapid change of events.\n\n\"Get a move on you horn dog!\" Hiroshi exclaimed.\n\nI shook my head and stepped into the bathroom still in somewhat of a trance. The hot shower helped and I felt better as I emerged to find Sakura waiting with a towel. She helped me get dry and watched as I brushed my teeth. When I was done she kissed me and packed what remained in the bathroom.\n\nBack in the room, I pulled on my pants and a t-shirt, not bothering with any underwear. Hiroshi had already packed his bag and was using his mobile on the bed. I threw the rest of my things into the suitcase and was done by the time Sakura emerged from the bathroom.\n\n\"If everyone is ready let's go for breakfast.\"\n\nHiroshi and I nodded and the three of us left the room heading for the dining area downstairs. Sakura took my hand and we smiled at each other as we walked.\n\nHiroshi rolled his eyes, \"Can't you lovebirds keep your hands off each other for even a minute?\"\n\nIt was clear he was joking and we all laughed. As we ate, he told us about how he and Monika had enjoyed the remainder of their stay at the Waterpark before going into the village for dinner.\n\n\"She's an amazing girl and has promised to get in touch about visiting us in Japan.\"\n\nI was happy for him and hoped she wouldn't let him down. When Sakura left to get something from the buffet he leaned closer and lowered his voice.\n\n\"She gave me a blow job and let me finger her after the meal!\"\n\nI laughed and we high fived each other.\n\n\"That's fantastic Hiroshi, this trip has been amazing for both of us!\"\n\nHe nodded, \"I was so relaxed with Monika as she'd already seen all I had to offer and was still interested in being with me.\"\n\nHis expression became more serious, \"now that you and mum are a couple, how about you come and stay with us for a while in Japan?\"\n\nI'd been thinking along similar lines and was happy he suggested it first. \"that would be great if it's OK with you. I was thinking I could go to uni there for a while.\"\n\nHe grinned and slapped me on the back, \"of course it's OK with me, DAD!\"\n\nI cringed at his words and he laughed at my expression.\n\n\"I'm just kidding Patrick, you have no idea how thankful I am for what you're doing for my mum.\"\n\nSakura returned just as I was about to reply so I just smiled and nodded at him. She placed some more food on the table, \"make sure you eat enough, we have a long day of travel ahead!\"\n\nAfter breakfast, we checked out of the hotel. A minibus took us to the station where we bought tickets for Basel. Sakura and I held hands whenever we could and once we were on the train we couldn't resist kissing and touching each other. Luckily there were hardly any other passengers and Hiroshi spent most of his time with his face buried in his phone.\n\nKnowing that Sakura was naked under her dress excited me and I had to use a jacket to cover my tented pants when the conductor came.\n\n\"You and Hiroshi can stay the night at my place if you want.\"\n\nSakura smiled, \"we would love to but will it be OK with your parents?\"\n\n\"Sure, I'll explain what happened and they'll be happy to help.\"\n\nShe nodded and leaned closer whispering, \"I want to make love to you in your bed!\"\n\nI blushed and gulped.\n\nSakura giggled, \"we'll have to be careful your parents don't catch us but it'll be fun!\"\n\nThe rest of the trip passed in a blur and we sound found ourselves standing in the hallway of my home as I was explaining the situation to my mother.\n\n\"Of course you are welcome to stay here! We only have one guest room so I hope you don't mind sharing it with Hiroshi, Sakura?\"\n\n\"You're so kind Margaret! Sharing is not a problem.\"\n\n\"Wonderful!\" my mother said enthusiastically as she and Sakura went to prepare the room.\n\nDinner was uneventful, the main topic of conversation being our experiences during the trip. I kicked Hiroshi under the table when he said the highlight for him had been the waterpark.\n\nMy parents didn't notice and when dad asked him what he'd enjoyed most about it I stared daggers at him.\n\n\"Well all of it was enjoyable but the best part was the nudist area.\"\n\nThere was a stunned silence as my parents digested this news.\n\n\"Um, I see...\" dad said, before quickly adding, \"attitudes to nudity are so different here than in the UK, how is it in Japan?\"\n\nBefore Hiroshi has a chance to cause more embarrassment, Sakura stepped in. \"We have a similar bathing culture in Japan. It is called Onsen.\"\n\nI noticed my mother looking at me strangely as Sakura and dad spoke.\n\n\"So bathing naked with others is not that unusual for us.\"\n\n\"It's much better here though, in Japan men and women are separated!\" Hiroshi blurted out enthusiastically and I could have killed him on the spot.\n\nMum was blushing and dad seemed somewhat befuddled.\n\n\"Um, you mean ah...?\" dad managed to say.\n\nI decided to clear things up before the situation became even worse, \"It's not as bad as it sounds. At first, it was strange but you get used to it quickly and after a while, you actually forget you are naked. It's far more comfortable not having to spend the day wearing a soggy swimsuit to and swimming feels much better in the nude.\"\n\nI took a breath and added, \"I recommend you and mum give it a try, you might find it life-changing!\"\n\nEveryone was staring at me. Sakura and Hiroshi with smiles and my parents with astonishment.\n\nI continued to eat as if nothing unusual had been said and the conversation moved to other topics, although I did notice mum giving me strange looks a couple of times.\n\nAfter the meal, we all helped to clean up and then briefly discussed the plans for the next morning. After breakfast, Hiroshi and Sakura would take the train from Basel to Zurich airport from where their flight would depart. We settled in the living room and watched some TV before Sakura said she was tired. Hiroshi and her excused themselves and retired to the guest bedroom.",
        "Once they were out of earshot mum said, \"It's so sad about Mr Yamamoto but they seem to be handling it well.\"\n\n\"It's all for the best actually. You wouldn't believe how badly he treated her.\"\n\n\"So he just up and left with some woman he met at the hotel?\" dad asked.\n\nI nodded and didn't mention that he'd actually met her when we were all naked at the waterpark.\n\n\"Some people are just unbelievable,\" Dad muttered.\n\nWe watched TV in silence for a while before mum brought up the topic I knew must be at the forefront of her mind.\n\n\"So Patrick, were you really naked in public with Sakura and Hiroshi at that waterpark?\"\n\nI nodded and looked her in the eye. \"Yes, it's an incredible place. There are loads of different mineral pools as well as countless saunas.\"\n\nMy parents exchanged a look and then dad said, \"weren't you embarrassed?\"\n\nI shrugged, \"I was nervous at first but then realised I had nothing to be ashamed of.\"\n\nMum was blushing as she said, \"Your father and I once visited a local spa here and when we went to the sauna we realized you had to be naked!\"\n\nI was surprised to hear this, \"what did you do?\"\n\n\"I'm afraid we chickened out but we regretted it later.\"\n\n\"Yes, looking back we should have been as courageous as you,\" Dad said wistfully.\n\n\"Well it's never too late to give it a try and if you enjoy it I strongly recommend you make the trip to the Black Forrest and try out the place we visited.\"\n\nMum was looking flushed as she said she was also going to bed. I wished her goodnight and remained watching TV with dad.\n\n\"Um, Patrick, can I ask you something a bit personal?\"\n\n\"Sure dad, fire away.\"\n\n\"Your mother was quite keen to give that sauna a try but I was afraid of how I would um, respond to seeing a bunch of naked women.\"\n\nI could tell he was struggling to formulate his question and waited until he continued.\n\n\"Um, Sakura is an attractive woman, um, weren't you worried about embarrassing yourself?\"\n\nI smiled, \"of course I was and it did happen but she assured me it was a natural reaction and that she didn't mind. Of course, you can't walk around these places with an erection but if it happens you can just use a towel to cover up until it fades.\"\n\nDad stared at me open-mouthed and I laughed at his expression, \"What?\"\n\n\"Sorry, it's just that I never thought you had it in you! You've always been so shy, especially around females and now you're sitting here telling me how you got an erection in front of your best friend's mother as if it was nothing unusual!\"\n\nWhat he said was true and I nodded in acknowledgement. I was tempted to tell him a lot more happened between Sakura and me but I didn't want to reveal our relationship yet so instead, I just said, \"It was the best decision I've ever made and I don't regret any of it.\"\n\nDad nodded, \"it's definitely changed you, Patrick, you seem much more confident and I'm proud of you!\"\n\nI never expected my dad to tell me he was proud of me for getting naked in public and I felt quite moved.\n\n\"Thanks, dad, all I can say is that you and mum should give it a try! I'm going to hit the sack now, I'll see you at breakfast tomorrow.\"\n\n\"Thanks, son, goodnight\"\n\nI used the bathroom and then went to my room. I stripped off my clothes and lay on the bed, impatiently waiting for Sakura to join me.\n\nI heard dad walk past a short time later and then the house fell silent. About fifteen minutes later my door opened and Sakura stepped in inside. In the dim light of the room, I could just make out that she was wrapped in a towel. She stepped closer to the bed and with a flick of her wrist, the towel dropped revealing her gloriously naked body.\n\nMy cock was already erect as I reached for her and pulled her into bed. What followed was a night of unbridled passion. We did our best to keep the volume down but I don't know how successful we were. It actually made things even more exciting trying to be quiet.\n\nMy room didn't share a wall with my parents' bedroom but they were quite close by. Just before 7 am, after I'd emptied my balls into Sakura once again, she got out of bed and used the towel to cover herself before sneaking back to the guest room. I wished we didn't have to hide our relationship but we had agreed it was too soon to tell my parents.\n\nMy bed was a mess and the room reeked of sex. I opened the window and did my best to hide the clues. Everything seemed normal at breakfast and my parents gave no indication they suspected anything. Mum was the one that suggested I accompany them to the airport and I readily agreed. It would give me some more time with Sakura.\n\nGoodbyes and promises to visit each other were exchanged before we finally set off.\n\nThe train journey was quite emotional and Sakura seemed overjoyed when I revealed my plans to study in Japan. The train was busy and we had few opportunities to be intimate. It was hard (forgive the pun) but the prospect of being together again in the future made it more bearable.\n\nAt the airport, things became more intense and with tears flowing we kissed and touched each other without holding back. We got quite a few looks but didn't care. When the time came for them to depart I felt like a part of me was missing.\n\nWhilst on the train back to Basel I received a text from Hiroshi saying they were about to take off. I was feeling low by the time I returned home and already missed Sakura. Dad was at work and the house was quiet. I initially thought mum was out but as I passed the living room she called to me, \"Patrick, can I talk to you?\"\n\nThis sounded ominous and I joined her fearing the worst.\n\n\"What's up mum?\"\n\n\"Did everything go as planned?\"\n\nI nodded, \"yeah.\"\n\nShe looked me in the eye and said \"I know what happened between you and Sakura.\"\n\nMy heart missed a beat and I was about to respond when she raised her hand.\n\n\"Before you say anything let me just say that your father and I don't have a problem with it. Quite the opposite actually, we're glad she was able to get you out of your shell!\"\n\nI was stunned and a great weight was lifted from my shoulders.\n\n\"How did you know?\"\n\nMum smiled, \"I could tell from the way you acted together and then we heard you during the night.\"\n\nI blushed, \"um sorry, we thought we were being quiet.\"\n\nMum laughed, \"well you weren't but don't let it worry you, your dad and I were rather impressed by your stamina!\"\n\nI couldn't believe what I was hearing but it was a huge relief they were taking it so well.\n\n\"If you don't mind my asking, when did this all start?\" mum asked.\n\n\"Um, I've had a crush on her for ages but it only really began during the trip. Hiroshi's dad treated her so badly and we started spending more time with each other.\"\n\n\"Was she your first?\"\n\nI blushed and nodded.\n\nMum smiled, \"that's good, it's like learning to drive a car, better not start with a new one!\"\n\nI looked confused for a moment and mum giggled, \"not that I'm comparing Sakura to an old banger, of course, she's a beautiful woman.\"\n\n\"You and dad are really alright with it?\"\n\n\"Yes dear, we've been worried about how shy you were around girls and you never seemed to have a girlfriend or show any interest. Of course, the age gap between you and Sakura is significant but at the moment it's not important.\"\n\nWe continued talking and I'd never felt closer to my mother. I told her all about Sakura and mentioned my plans to visit Japan and maybe even study there. She thought it was a great idea and would look good on my CV in the future. When I finally returned to my room I found the sheets had been changed and everything tidied up. I was really lucky to have parents like mine.\n\nI wanted to share the news with Sakura and Hiroshi but they were somewhere at 10000 feet so I wrote them an email explaining everything. At lunch, mum and I spoke about general things until she surprised me again by saying that she and dad were planning to visit the local spa, this time with the intention of being naked in the sauna.\n\n\"Your dad told me he spoke to you about it yesterday and you put his mind at ease.\"\n\nI nodded, \"I'm sure you'll enjoy it as much as I did.\"\n\n\"I'm rather excited by it, it'll be a new experience for us.\"\n\nShe paused and then said, \"if all goes well we might visit the place in the black forest.\"\n\n\"That's a great idea, I can only recommend you do it!\"\n\n\"Would you consider joining us?\"\n\nI gulped at the thought of being naked with my parents but it wasn't as shocking as it would have been a few days ago.\n\n\"We understand if it makes you uncomfortable but Hiroshi didn't seem to have a problem being there with his parents.\"\n\nI nodded, \"yeah, no, it's fine I'd love to join you, I just wasn't expecting you to ask!\"\n\nMum smiled and blushed, \"I know, this must come as a surprise to you but we weren't always as prudish as we've been since you were born. Our lives are stuck in a bit of a rut and the experiences you described have made us realise it's time for a change.\"\n\nI grinned at mum, \"well I'm all for it!\"\n\n***\n\nSakura was overjoyed to hear how my parents felt and we began to make plans for my visit. Mum and dad visited the local spa a few days later and returned looking and feeling more relaxed than I'd ever seen them. They loved the experience and we planned to visit the black forest waterpark together soon.\n\nMy life had never been better. The trip to Germany with my parents and my move to Japan are worthy of their own stories!"
    ],
    "authorname": "shygeek",
    "tags": [
        "holiday",
        "vacation",
        "nudist",
        "nude",
        "japanese",
        "tiny-tits",
        "family",
        "friend",
        "germany",
        "black forest"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/black-forest"
}
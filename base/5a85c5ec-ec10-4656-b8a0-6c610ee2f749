{
    "title": "My Only Talent Ch. 33",
    "pages": [
        "Babal\u00fa, Lou Baby! \n\nNote: The descriptions and accounts in these stories are fictional and do not portray any actual people or events\n\nAfter Nora and I got back to Austin from San Antonio, we spent another night completely plugged in to each other, literally and figuratively. We then slept another exact nine hours, and I awoke with both a raging hard on and ravenous hunger. Nora woke at exactly the same time, but with a need to talk before we did anything else. She brushed her platinum tresses away and fixed her shining grey eyes on me. \n\n\"Before we go any further, we need to talk about the next few years.\"\n\nUh-oh.\n\n\"I have decided to go get my MBA next, so I'll be spending the next two years at Harvard Business School in Cambridge, and then have another 2 or 3 years somewhere else to complete a PhD. So not at Harvard, nor in the Boston area. I need a little more academic diversity on my record.\"\n\nI was thinking more about the sexual diversity she was going to get for the next few weeks.\n\n\"But I wanted us to be clear \u2013 my long term plan is to be with you. Before you speak, let me say I understand that you love Lara and Suzanne, too, and I am not expecting that to change. Whatever arrangement we have will not preclude either of them being with you, too. With us, more likely.\"\n\nHoly shit. I can't think of anything to say to that except \"What about the bigamy laws?\"\n\n\"You should talk to Lara about that. She believes they will soon be pass\u00e9 and intends to take an active role in speeding up that process. Surely you must have wondered why she is going to law school?\"\n\nIt was enough for me to know she wanted to do it. \n\n\"I realize with your alternating school and work plan it may take you 5 years to finish your engineering undergraduate degree, so you probably haven't even thought about grad school yet, but an MBA seems a natural path for you. When you visit me in Boston, we can start networking some of the b-school professors there on your behalf.\"\n\nNora doesn't do anything half way, does she? She smiled, in a way I had not seen before \u2013 it was both motherly and predatory at the same time. What else was she planning?\n\n\n\n+++++++++++++++++++\n\n Dwight choose his outfit for the product review meeting carefully, to make the right impression on his team mates, and send the right messages to the overly detached and self-absorbed PhD CEO. It had to look slightly nerdy and ambiguously ambisexual, yet connote competence and confidence. Not easy to do. He thought back to his agency training on clothing and disguises, and selected expensive light grey slacks with blue and purple Argyle socks and black wingtips, then added a bright pink cotton dress shirt and a blue and purple paisley tie. No coat, no pocket protector, no jewelry. \n\nHe arrived at work early as usual, and checked out the setup for the 9:00 AM meeting. There was only one other person there early \u2013 the VP Marketing that he enjoyed sharing Thai food with. \n\nShe smiled from across the room. \"The CEO is not coming to the meeting this morning, Dwight. He is on a 'conference call with potential investors that he must join from home.' She sighed. \"Since most of the VP's only attend so they can suck up to the CEO and/or make another VP look bad, the other programmers and I may be the only ones here.\"\n\nDwight sighed, too. He could still bond with the folks from other departments, and identify those with potential for helping his investigation. He would have to include in his report to his real HQ that the company was doomed to failure through mismanagement, even if it was not penetrated and didn't have its technology ripped off. \n\nThe rest of the group filed in and went through the agenda. The other programmers seemed to get how Dwight's clever fix solved their performance problem. None of the other VP's would get it anyway. About the time Dwight was finishing his report to the product review meeting, Roger Sherman sat down at a corner table in the back at Bucks of Woodside and waited for Shaniqua to arrive.\n\n\n\n+++++++++++++++++++\n\n Shaniqua made her entrance to the restaurant a little late, as was her habit. She had heard of this place, but had never been here before. She knew that Woodside, California was a small town with some big money - one of the richest zip codes in the USA. On the way in, she spotted a couple of clients, with women that must be their wives, based on the way the guys ducked their heads when they saw Shaniqua. She had sent lots of girls and a few boys to work big time 'ranch parties' out here, but never attended any herself.\n\nShe spotted this Roger Sherman asshole at a back corner table, looking like a very forgettable clerk or accountant. She would never even notice him if she hadn't memorized his picture. She was going to tear this little asshole a whole new one.\n\nAs she approached the table, Roger Sherman held up his phone. It was one of those big Android jobs with the huge screen. What was on that screen stopped Shaniqua in her tracks. It was an exterior shot of a little unassuming wood frame house in Palo Alto. It looked just like a Google Maps street photo, but the color was even better and the leaves on the trees were moving in the breeze. It was her babysitter's house.\n\nOnce he had her attention, Roger swiped right and Shaniqua saw her little angel, crying in her crib. What the hell? The screen then split and she also saw her babysitter, the 60-something ex-hippy Miss Marks, sitting on her couch, watching Maury Povich, eating Cheetos, smoking a joint, taking the occasional pull on a Bud Light, and making absolutely no move to check on Shaniqua's crying adopted daughter. \n\nShe looked at Roger, angry eyes blazing. Roger actually managed to look supportive. \"She forgot to turn on the baby monitor\" he said. \"We turned on the video to check, but left the audio off until you could see for yourself.\"\n\nShaniqua's face turned to stone. Roger hit a button on his phone and the sound of the baby's cries suddenly erupted from the speaker. Miss Marks jumped, spilling Bud Light all over her front, and went in to check the baby. Roger turned the sound down. \n\n\"She told you she was a math teacher and got fired from the school district for possession of marijuana a long time ago, right?\"\n\nShaniqua nodded.\n\n\"Actually, she was a basketball couch at a middle school, and she was canned for having an 'inappropriate relationship\" with several girls on her team.\"\n\nShaniqua suddenly looked a lot like Mike Tyson. \"She is fucking dead! Right after I get my little girl out of there!\" She stood up to leave.\n\nRoger grabbed her arm. He was surprisingly strong for such a little guy. \"Let me help you with that. You will want to get your daughter out of her care without drawing any attention to the situation, lest CPS open up a case on whoever it was that decided to let Miss Marks, an unlicensed and clearly unqualified babysitter, take care of her.\"\n\nShaniqua sat down with a sigh.\n\nRoger's phone then showed her images of the birth certificate and adoption papers she had had forged to adopt her little girl, then the unaltered real birth certificate and some affidavits confessing to fraud from the forger, the lawyer, and the judge that signed off on the adoption. They were all escort clients that Shaniqua had pressured into the fraud.\n\nShaniqua was nobody's fool. She knew, like the song said, you got to serve somebody. In her case, it looked like it was going to be this Roger Sherman guy, and whoever he worked for. \"What it is you want me to do, Roger?\"\n\nHe smiled, and said, \"Give me your phone. I have a new one for you to use from now on. We have a bunch of new jewelry for you, with some battery chargers for it, too, and some very nice hotel rooms reserved for you and your escorts to use to entertain clients. We will also get you set up with a wonderful and fully licensed sitter, with much better monitoring equipment.\"\n\nShit. They had her roped up seven ways to Sunday. She would have to do a good job for them.\n\n\n\n+++++++++++++++++++\n\n\n\nMy roommate Kevin's alarm went off before mine did. What's up with that? It was tuned to one of the local news/talk radio stations, replacing his usual favorite 'head banger alternative rock' station. Then I remembered him telling me about his final RTF class project, which could not be started until Spring Break was over, and had to be turned in on the last day of class: tangible proof that he could record, edit, and produce commercial grade audio. Kevin had mentioned his plan for a heavy handed and sexually toned parody (notice a theme here?) of local radio news and sports talk stations, which had to include commercials, news items, interviews, features, bumper music and commentary similar to that on the local outlets. \n\nHe had his laptop set up to record them automatically, so he could later slice and dice and produce his own stuff to mix in. He had already pressed me and Suzanne and even Joisey Al into doing some voices for him. He said Suzanne's low and sultry voice would 'electrify' the target demo of 18 to 40-year-old males. More like any male from 13 to 90, in my humble opinion, and some of the females, too. He began talking back to the radio, changing station call signs and frequency assignments, and renaming on the air 'personalities' (and I use the term very advisedly in some cases) and advertisers to fit into his satirical theme. I got up and headed for the bathroom.\n\n +++++++++++++++++++\n\n\n\nSpring break was officially broken. I was walking north along Speedway to my math TA's office hours up in RLM, to see how much trouble I was really in. It was 11:50, and all the 11:00 classes were letting out, sending hordes of students out to press their way back to their residence halls for lunch. About ten thousand of that throng was heading for Jester. At least I was counter-commuting. RLM is 16 stories tall, with its multiple basements and the top floors taken up by labs, offices, workshops, a few classrooms, and at the very top, an optical telescope and some radio antennas. The middle floors are packed with classrooms, and served with escalators, because the regular elevators won't even stop on those floors. Between 11:50 and 12:00, the narrow hallways look like a crowded subway station or airport, absolutely packed with people having to bob and weave around each other to either get out of their last class and/or get to their next one. \n\nIt was like some combination of speed dating and people watching at a county fair \u2013 passing very closely by hundreds of people \u2013 and getting only a quick 2 second impression before they moved on. I couldn't help but try to place them on that semi-humorous Dilbert 2 by 2 grid: cute or ugly, smart or dumb. I assumed most of them weren't dumb. Even though ESU was a state school, only the top 8% or so of the in-state high school graduates got automatic admission. But on the cute versus ugly axis, they were all over the map. Huge ass with no teats, huge teats with no ass, perfect hair and terrible everything else, a great looking face with a terrible complexion, hot clothes with terrible grooming, et cetera, et cetera.\n\nI spotted Free Annie from my dorm, so named because she claimed to wear only tee shirts, having 50 of them, all obtained for free. But apparently only one pair of jeans \u2013 some vintage Levi's that she wore every day and was inordinately proud of. Some of the shirts were obscene and not wearable on campus \u2013 they were considered micro-aggressions all by themselves. Most of the others promoted concert tours, cities, restaurants, grooming products, or music festivals. If she were male, she would probably have an impressive collection of 'gimmie caps' from car and car stereo makers, like Oiler did. She spent almost as much time in the floor lounge as Joisey Al did. \n\nThe TA laid out my strengths (topics from first semester) and weaknesses (everything since then and on the upcoming exam and final) and give me some links for some practice tests from other schools. So it was that I was back to classes, exams, and the harsh reality that my second semester of school was winding up, and not all was well. I was in actually trouble in two classes: M408D and Linguistics. I was in trouble in one relationship: Suzanne Pliskin.\n\nIn fact, I was in danger of making a D in math and a C in linguistics. In the first semester of math I started off slow, but thanks to Oiler I made it through the first two exams on limits and differential calculus. Then thanks to Esmerelda Estigoy's incredible and very memorable sexually charged teaching techniques, I made it through the third exam on integral calculus and got a high B. But now I was hitting the wall on multi-variable work. I would need both Oiler and Esmerelda, plus some other help, and I had to have a grade of at least C to move on to the next class in the sequence. \n\nWhile I was wallowing in my troubles, Russel 'Husky' Varna called about his.\n\n\"Robbie, I need help.\"\n\n\"We all know that, Russel, but none of us are qualified as psychotherapists.\"\n\n\"Thanks a lot. I meant with calculus. If you can get me through Math 408C I can get you a copy of the last three years of finals in Linguistics, which I think you need.\"\n\nThat was certainly an equitable trade. \"Okay, we need to visit the UDP house for some supplemental instruction. Can you come to dinner tomorrow night?\"\n\n\"Yep. Spring practice is nearly over, and I am getting the third degree from my assigned tutor and from Coach. He somehow knows my grades on everything! I think he has my Quest login. You wouldn't believe the shit he gives me!\" \n\nHusky adopted a new voice, sounding hoarse and like he was holding his neck at a funny angle, imitating the new football coach. \"What's the deal, Professor Varna? I got crazy defensive tackles that are passing calculus, and then I look at you, Mr. Big SAT Score Future Professor Linebacker and see are flunking it? I can't play you if you flunk out! Maybe you don't really want to play? I said we were getting 'errybody' but I didn't say we would take anybody! You got to pass your classes! Maybe you should have gone to Stanford.\"\n\nA quick text to Oiler got things in motion, and he texted back a little later that Esmerelda could be there too.\n\n +++++++++++++++++++\n\n I almost dreaded going to Linguistics, as I felt sure to again be reminded of my lack of full understanding for the upcoming final midterm and the comprehensive final. One pleasant sight awaited me, though, as Lynn Da Britain danced in humming and smiling like crazy. The sun poured in through the windows and skylights, and lit her up like a spotlight on Broadway. She in turn, seemed to light up the room. She was wearing one of her signature warm weather outfits: a bare midriff with a little white halter tee shirt and pink short shorts. Her short brown hair smelled of fresh shampoo, and her perfect white skin was shining like a marble statue in the natural light, and she looked incredible. Half the class turned and watched her slide smoothly and hotly into the seat next to me.\n\nI recalled a recent goofy discussion at the UDP house about tattoos and social class, changing mores, and the inevitable sexual theory that girls with tattoos are more promiscuous and sexually skilled than those without. Perhaps it was time for a little direct sociological research. \n\n\"So, Lynn Da,\" I began. \"Do you have any tattoos?\"\n\nShe smiled seductively and leaned toward me. I wondered if she was about to share a daring and exciting secret. Then she stood tall and spread her arms out wide, pushing her breasts against the white tee shirt, perky nipples showing through and dramatically highlighting her almost perfect figure. She caught me looking. It wasn't hard \u2013 my eyes were glued to her.\n\n\"Robbie,\" she spoke loud enough for half the class to hear. \"Tattooing this body would be like drawing a moustache on the Mona Lisa!\"\n\nShe certainly didn't lack for self-confidence, and I realized that she was absolutely correct, too I resolved to redouble my efforts to throw her a little private bachelorette party with Husky and I giving her a real send off to marriage with her best boy and soon to be School Principal Bob. But how to raise the subject with her?\n\nBut I didn't have to \u2013 she did! As Suzanne has taught me, sometimes the best way to spur a conversation with a woman is to just listen patiently.\n\n\"I guess I should be flattered by the attention, Robbie, but it's a little creepy to ogle me in class, don't you think?\"\n\nWait for it. \"Perhaps in private, then?\"\n\nShe laughed. The professor began to go over the review material for the final midterm. I really should listen, but I could not stop thinking about Lynn Da. She giggled softly, then leaned over and began whispering conspiratorially in my ear. Her hot breath blew directly from my earlobe to my dick, beginning to inflate it.\n\n\"Maybe if we had met each other earlier, Robbie. But now I have to focus on Bob and our careers. You can't get to be Superintendent of Schools in a big city without being solidly married and very well behaved. As a couple Bob and I must be attractive and outgoing, yes. But libertine swingers, no. My wild oats have all been sown.\"\n\nThree, two, one: \"Are there any things you wished you had done, but haven't?\"\n\nHer eyes took on a faraway look, and then she displayed a tight little smile. It almost reminded me of Lara's special smile. Then she sighed. \"Well, I have always been a fan of Dr. Doolittle, and I have seen the original movie, and in fact several other kinds of movies about the same subject, so to speak, but I have never acted it out.\" She looked at me expectantly, and blushed. With her perfect skin it affected me the way a waving red flag triggers a bull.\n\nThis topic also had of course been the subject of more than one sophomoric discussion at the UDP house. The \"push me, pull you\" animal character from the children's story was often used as a sexual double entendre for a girl (or perhaps these days, a guy) taking on two guys at once, along with the extension of three guys at once (which as I currently understood human anatomy only females could manage) metaphorically stated as \"jam up and jelly tight\", \"airtight\", and (gulp) Suzanne's recent and very personal and forward looking contribution to the vernacular: \"The Full Magilla\". Oiler, surprisingly, had taught us the term \"airtight ski jump\" that totaled five guys as the female took a penis in each hand in addition to the three primary orifices. I guess a gay guy could only manage four, then. Is that discriminatory? \n\nCisco, in line with his philosophy about 'open' relationships, said that Mei Ling has revealed some similar fantasies to him and that his automatic reaction to her talking about them was to get really turned on. I knew she had some submission fantasies from the look on her face and her Suzie signal when I took Millie away on a leash from the sorority house for her initial slut training. Funny how a martial arts master like Mei Ling wanted to be tied up and dominated, not to mention taking on several men at once.\n\nBut right now I needed to turn my attention back to Lynn Da. I looked her in the eyes. \"Never got the chance, eh?\"\n\nSigh. \"Not in a situation that did not involve taking unreasonable risks.\" Again with the faraway look.\n\n\"Risks like disease, gossip, online videos, things like that?\"\n\n\"Yep.\" She crossed her arms across her chest. \"I guess a girl just can't expect to have it all, even just once.\" She signed again.\n\nOK, Robbie, this is it. I began my pitch: \"What if you could greatly reduce and/or eliminate the risks?\"\n\n\n\n+++++++++++++++++++\n\n I was planning to spend most of my school time after spring break trying to catch up in linguistics and hoping for a conceptual breakthrough in math. I walked over to the UDP house to meet Oiler, Esmerelda Estigoy, and Russel \"Husky\" Varna to try to advance both causes.",
        "Oiler met Russel and I in the foyer, and we went through to the dining hall. My favorite cook was doing a fish fry, complete with corn on the cob, green beans, collard greens, and corn bread. Brain food, I hoped.\n\nEsmerelda came in just as we finished eating, wearing a plain white windbreaker with a Longhorn logo. Oiler signaled her to follow us into the study hall, then put a \"do not disturb\" sign on the door. \n\nHe introduced Esmerelda to Husky. \"Mr. Varna, I present the most attractive and effective math tutor in Texas, Esmerelda Estigoy!\" He then left, closing the door behind him. \n\nHusky looked skeptical. Esmerelda motioned for us to sit at the front table, and stood up near the white board. \"I am going to take both of you on a little mathematical journey, and as long as you give the correct answers and make the right inferences, I will also do my Gypsy Rose Lee act.\"\n\nRussel now looked very attentive. She looked very pointedly at him and asked what a limit was, and why it was important. This stuff I knew from last semester, and Russel could parrot the book, but he couldn't really put it in his own words properly, at least unprompted. Esmie walked him through it, theatrically unzipping the windbreaker as his answers got better. She now had his full and undivided attention. He kept up through left and right hand limits, limits that did not exist, continuity, slopes, tangents, and finally derivatives. She then asked him to summarize. Moving seductively to convey whether his answers were 'getting warmer'. We all were. \n\nSoon the windbreaker was gone, revealing a very tight white sweater above some even tighter jeans. Anti-derivatives, polar coordinates, integration by substitution and integration by parts followed, with Russel and I both tuned in, turned on, and following along just fine. We just left his first semester course behind and moved into my multi-variable syllabus. \n\nEsmerelda then dramatically removed the tight sweater, revealing what was either the thinnest and tightest body suit ever, or full body paint and/or tattoos. It shimmered and changed colors in the light, the patterns changing so fast that it was difficult to identify the actual shape of her body. But both our eyes soon managed to understand that she was built like the proverbial masonry outhouse. Full figured, but muscular and poised like a gymnast. We were now two mouth breathing male students, and totally captivated by her presentation.\n\nShe continued with hyperbolic trig functions, and the basic algorithms of numeric integration methods. She reviewed all of the pool table equations of motion she had run me through before, burning them anew into Russel's panting brain. She paused, hands provocatively on hips, breasts proudly up and out.\n\n\"Do you boys think you are up for a little advanced calculus?\" \n\nOur heads bobbed like bobble head dolls.\n\nShe went through vector notation, the right hand rule, unit vectors, dot products, cross products, and began on gradient, divergence and curl, using the incredible curves of her magnificent breasts to illustrate each concept.\n\nAt one point she leaned over near Husky's face and touched the top aspect of her left breast and asked him, \"If I put a drop of water here, where would it go?\"\n\nHe hummed and said \"Heaven!\" She giggled and prompted him for a more detailed and correct answer in vector parlance, which he provided. She continued with further examples, and then said, \"Okay guys, you are both ready for some final practice problems and then your exams. I will send you some problems to work and return to me. If you do well, we might take up Fourier and Laplace transforms. If you get all that right, we are talking Bikram Yoga demonstrations.\"\n\nHusky groaned. She gave us both a hug and a kiss on the check, then put her clothes back on and donned her huge engagement ring, and waved goodbye, sashaying out the door and back toward campus. I looked at the clock. It was almost 11 PM. My how time flies.\n\nRussel took two deep breaths, and said. \"Holy Moly, Robbie. I love math! I am so glad I came to Texas. But what about that engagement ring? What would her fianc\u00e9 think if he saw her tutoring us today?\"\n\nI laughed and leaned back in my chair. \"He helped her design that whole lesson, Husky. He is an assistant professor of education, about ten years older than we are. He is developing a set of new techniques for teaching that engage sexual attraction to get and keep the students attention. She puts you in a sexual trance, and when you come out of it you understand stuff you didn't get before!\"\n\n\"No kidding. I am high on math! Never thought I would feel that. What about her fianc\u00e9?\"\n\nI laughed again. \"Tonight at dinner, she will tell him all about it. First what worked and what didn't and what they might change to make it more effective. And then, sparing no detail, she will tell him how she pricked teased a famous football recruit for three hours, and then they will fuck their brains out.\"\n\n\"Wow. Would she be interested in tutoring some more football players?\"\n\nShe and her fianc\u00e9 would probably write a paper on it. Suddenly I had a goal of my own: pass math and linguistics. If I did, I was going to give myself a little end of semester reward party. I would invite Saskia, and the med school postdoc hottie who was so attracted to her, and my two classmates, Rene' and Rene'. Like my dad said when doing sales force restructuring, \"Sometimes the first thing you want to do is train the trainers.\" Good advice, I thought.\n\n\n\n+++++++++++++++++++\n\n Kevin's dad had a wide variety of clients, with a wide variety of legal needs. Many were very poor personal injury plaintiffs with good cases, and some were very rich defendants, served (and billed) exhaustively regardless of how good or bad their cases were. He also did a lot of 'sports and entertainment law' which included working with clients and their agents to capture and codify the results of some pretty wild negotiations, protect their high profile clients from sexual assault charges and paternity suits, defend drug possession charges, draft iron clad prenuptial agreements when required, handle divorce cases very aggressively, and sometimes make damaging witnesses or evidence very hard to find.\n\nKevin had some amazing stories to tell, sans names or clearly identifying information, sometimes switching cities and/or sports or leagues when telling them. When he talked about a California based basketball star with 8 children by 7 different women, I knew he was talking about a football player from New York, for instance. One of the things Kevin's dad provided, at an astronomical daily rate, was \"safe houses\" owned by untraceable shell corporations where clients could hide out from wives, girlfriends, process servers, and the press. One of these safe houses was a big fancy condo at Horseshoe Bay, way around on the 'other side' of Lake Travis, furthest from Austin. \n\nKevin has struck a deal with his dad. He would visit the condo occasionally to make sure it had not been trashed by weekend parties, and was being serviced and maintained properly by the property manager and contractors his dad had hired. He would also collect any damning evidence that had been left behind before it came to the attention of the police or the press. In return for these sensitive but critical services, Kevin got the use of the place when it was not scheduled by clients. \n\nHe had only recently revealed this to me, in conjunction with his plan to 'do' Lou as we had discussed early in the first semester. I proposed using her attraction to Suzanne to 'trigger' the situation, and he got enthusiastic, but then I paused, asking him directly to be sure.\n\n\"Kevin, tell me this. At one point you thought Lou Baby was going to be a long term mate and wife for you, and you wanted to back off on the 'two guys make her give it all up for them' scene. What has changed?\"\n\nHe looked funny for a minute. \"Well, when it comes to fantasy, I just gotta go with reality, Robbie!\"\n\n\"What the hell does that mean?\"\n\n\"Well, I have to be realistic. If I want to make hot movies and audition comely starlets all day, I will need an understanding wife to come home to at night.\"\n\nI must have looked incredulous, as he continued.\n\n\"Think about it. I don't need a divorce or all that drama and turbulence. If I want to sample the starlets, maybe Lou Baby might want to help with that. And if she wants to sample the occasional male star or stars, maybe I should make some allowances for that, too, as long as she stays with me. I don't think she has ever gone all the way with a woman, but I know she would do anything, and I do mean anything, that Suzanne wanted her to. So let's take them out to the condo, and let Suzanne tease Lou into a frenzy, and then all three of us will fly her to the moon. Would Suzanne do that?\"\n\nI told him about what she said when he and Lou discovered us in the dorm a few nights ago. \n\nHe jumped up. \"Hot damn!\"\n\nBut I had a few reservations. \"But this will be the three of us doing Lou Baby, not you doing Suzanne. Understood?\"\n\n\"Yeah. Just seeing Lou with Suzanne together may be the hottest thing I have ever laid eyes on. Lou and I both well remember when they danced together at that party. Sometimes we talk about it to get each other hot. And there is a special video game table at the condo that we can program to make some things happen, too. Leave that to me. I will invite you two to a weekend at the condo, and we will play the special game and see what happens.\"\n\n +++++++++++++++++++\n\n Once Keven decided to go ahead with the double teaming of Lou Baby, the next key step was getting Suzanne on board for the 'triple-team'. I wondered if she would hesitate, but I hoped to appeal to her 'wild college day's' side. I suppressed my thoughts about hypocrisy \u2013 man is a rationalizing animal. But I actually had trouble raising the subject, because first I had to get her to stop waxing enthusiastic about Nora.\n\n\"The most amazing thing is her ability to bounce back. Just when I thought was she is totally satiated and exhausted, she got me going again! And watching her with Lara made me understand for the first time how guys get addicted to porn. They were so hot and so beautiful, and so good with each other, I almost felt like I should just watch them and not intrude.\"\n\nShe giggled.\n\n\"But when they reach out to you and ask you to touch something, anything, you just can't refuse them!\"\n\nThat I certainly understood. She looked thoughtful and stopped talking for a moment, which gave me a chance to make my case for making Lou Baby. She had no trouble visualizing what would happen to Lou, but she had some questions. \n\n\"Is Kevin really okay with this?\"\n\nI hesitated. \"Yes. I had dropped the subject, but he brought it back up on his own.\"\n\n\"Did he say why?\" She gave me an expectant look. \"Does this mean he isn't interested in her for the long term and he only wants her for a hot college girlfriend? Or that he could be willing to work with her desires long term?\" \n\nTell the truth Robbie. \"Well, it is about their future, but it's not that simple. I think it's more about being sure she could accommodate his desires. Keven wants a long term relationship with a nice Jewish wife and kids, but with someone that is accepting of the idea of him bedding lots of his potential starlets.\"\n\nShe put her tongue on her upper lip and looked thoughtful. \"So if he is with Lou Baby, they could fuck the starlets together?\" \n\nI couldn't help but laugh. \"I guess that might work.\"\n\nShe put her tongue on her upper lip again, and made sure I was looking before she spoke. \n\n\"What if Lou Baby wanted to try out some of the aspiring male stars, too?\"\n\n\n\n+++++++++++++++++++\n\n It was that most special of nights at the Beauford Halbert Jester Center Dining Hall \u2013 pizza night. There was nothing special about the pizza, though. Plain cheese or pepperoni pizza made dozens of pies at a time with ingredients all ordered from the Sysco Customer Solutions catalog, delivered in bulk by big diesel Sysco trucks, and baked in giant natural gas fired ovens that seemed to be covered by acres of stainless steel. It did serve to create the proper mood, though.\n\nYeasty and doughy, the very typical institutional pizza was enough to evoke a practiced and very desirable reaction in Suzanne Pliskin and I: rabid post prandial lust. Pure and simple, stereotyped and predictable, and totally wonderful. Tonight was even more special than usual, as we were to be joined for dinner (and hopefully other things) by the lovely Nora Upman.\n\nThanks to my doting mom, I had plenty of Bevo Bucks for the guest meal cards. Suzanne arrived first, and her outfit almost stopped my heart for about 5 beats, because all the blood stayed below my waist for that long. She had gone full Catholic School girl: An off-white blouse that made her light olive skin tones pop, a little red vest that hugged her waist and breasts, a red and black plaid skirt, shining raven black hair up in a single ponytail, and black high heeled boots. Fully 90% of the eyeballs in the dining hall her followed her entrance. \n\nShe strutted in, heels clicking, and took my arm. \"Let's wait for Nora and then join the dinner line.\" She smiled, haughtily, then leaned in and hugged me. \n\nThen she whispered in my ear, \"Oh my, Robbie, I have forgotten to wear my panties!\"\n\nJust then, Nora came through the doors and made eye contact with me. She walked toward us on a bee line. If Suzanne was the school girl, Nora was dressed as the smoking hot but very proper Head of School. Her platinum hair was up in a bun, tied with a black ribbon. She had a dark grey pinstripe skirted suit with another very hot breast hugging vest, and the light pinstripe picked up the color of her hair. She wore a black silk blouse, open at the top at least for the top three buttons or so, with puffy sleeves that extended below the half-length sleeves of the suit coat. Her grey eyes were flashing and her Suzie was popping uninhibited. She took my breath away. She must have had the same effect on Suzanne, who surreptitiously slipped her hand under my tee shirt and into the top of my jeans and caressed my butt cheek.\n\nWe joined the serving line. Both girls got two pieces of pizza and some salad. I got four. I would need my strength don't you know?\n\nWe sat near a window. I thought about what to say, but soon realized all I had to do was listen.\n\nNora began. \"Well I have been hearing about pizza night for several months now, Robbie, and I want to see this for myself. Suzanne says it is a whole new state of consciousness, and the most sexually exciting and exhausting thing that has ever happened to her!\"\n\nThat was flattering, but it also worried me a bit. \"So you are just going to watch?\"\n\nShe giggled. \"Well, at least at first ... but then I want to experience it for myself.\"\n\nThat, plus my reaction to their outfits, gave me an idea. A very good idea, I thought.\n\n+++++++++++++++++++\n\nDr. Asa Weltschmerz, M.D., PhD, and lots of etc., was going over Robbie's treatment plan. He had a lot to consider: not only the 'psychiatric dermatology' issues that all young men had, and the sheer volume of sex Robbie was having, plus knowing that Lara, the daughter of Asa's best old college buddy, was completely sexually submissive to and hopelessly in love with Robbie and at least one of Robbie's other girlfriends. Most of his concerns were around Robbie's anatomically amazing fractal antenna array and the neural signals it received. \n\nThere were several things he wanted to get across to Robbie before he went away for summer break in England, where Robbie would have an engineering job and no weekly therapy sessions with Asa. First, his brain was still making connections and forming its final configuration, and his abilities and his attitudes may change a lot between now and when he was 26 or so. In fact, most of the neuroscience literature now made it pretty clear that no one's brain was really set and mature before then. Asa was shocked at the studies that showed how much chronic pot smoking could actually permanently change the way many nerve tracts were laid down in the growing brain. If he had known this when he was in school, he probably would not have smoked pot himself. But, the dried out poot weed they had when he was in school probably had one tenth the THC content of today's seeds and stems, much less the prime stuff.\n\nHe was also worried about how much more Robbie might be able to 'hear' as his capabilities continued to develop. He remembered a science fiction story about a guy who developed the ability to read minds. At first he just got hints and glimpses of other people's thoughts. Then he got more and more, until he was hearing everything. He soon learned that even his loving wife hated his guts about 25% of the time, and he just couldn't take it, killing himself to 'stop the hateful thoughts from coming in.' If Robbie could hear not just the women that were attracted to him, but began to sense the naked desires of lots of other people, like pederasts and sadists, could he go crazy too?\n\nAsa had also begun to form, in his mind only with no written notes, his own hypothesis about how Robbie did what he did, and some ways to test it. He also pondered how much to tell Robbie about what may be going on, and how much to tell him about what might happen in the future. It was probably too early to ask Robbie to donate his brain to science when he died. \n\nHe had only two more sessions with Robbie before the end of school. He had to make them count.\n\n +++++++++++++++++++\n\nWith the proper yeasty pizza mood set, we made our way up in the elevator and stepped out to find, not surprisingly, our resident lounge lizard Joisey Al camped out on the sofa in the lounge, decked out in his burnt orange and white hoody footy suit. He smiled when he saw Suzanne, but then his face froze when he saw Nora with her. I didn't need a Suzie receiver to deduce his thoughts: just how does this freshman putz end up with both these amazing women coming to his room?\n\nSuzanne spoke to him in Italian and he replied rapidly and fluently, which prompted Nora to join in. Then she tried German, and the three of them spoke rapidly again, with Al clearly being enchanted. The Suzanne made a remark in what I had learned was probably Polish. \n\nAl's eyes got even bigger. \"My aunt Iga taught me some Polish, too, Suzanne.\"\n\nNora then reverted to English. \"Are you going to be on campus during the summer, Al?\"\n\nHe was clearly excited by her interest, and nodded his head happily. I was pretty sure he wasn't planning on going to any classes, though, so he would have lots of free time.\n\nShe smiled. \"I am graduating this semester, and will not be here this summer. I need someone to take my place in an international program I volunteer for, acting as interpreter and tour guide for groups of European exchange students that visit campus during the summer and perhaps come back as exchange students later. Since you have German, Italian and Polish, you would be an ideal candidate.\"\n\nSuzanne took Al by the hand, stroking it gently. \"I must warn you that the vast majority of these students are young, impressionable farm girls who are fascinated with all things American. So there is the potential for, shall we say, entanglements.\"\n\nAl ripped a page from a text book that someone (not him) had left on the lounge table and wrote his contact info on it, and stuffed it into Nora's hand. She smiled.\n\nI led both girls down to the room. Kevin was out at the condo in Horseshoe Bay, re-programming the game machine. Come to think of it, I needed to talk to my tech guru Cisco about checking the place for webcams, microphones, Wi-Fi sniffers, etc. before we let it all hang out there with Lou Baby. Lara was in Houston at a two-day legal seminar on \"The Evolving Law of Gender Roles\" at Rice. So it was up to me to entertain my two guests! Duty calls. I locked the door behind me, and slipped into my planned role for the evening.",
        "\"Head Mistress Upman, were you aware that one of your young female students came to supper tonight without her panties?\"\n\nShe smiled widely and her little effervescent Suzie bubbles popped and flitted about. \"Why no, Mr. Roberts!\" We all knew she was lying. \"What ever should we do about that?\" \n\nI smiled villainously. \"As Head Master, I am afraid it is my duty to administer strict discipline.\" I sounded quite firm, I thought. I was already quite firm, I knew.\n\n\"Miss Pliskin, do you know why they call me the Head Master?\"\n\nSuzanne put her tongue on her upper lip and leered at me, then in a soft and perfect little girl voice, said \"Because you are the Master, and I have to give you head?\" \n\nI stood tall and crossed my arms. \"That will be after your spanking!\" I sat back down on the edge of the bunk. \"Now come here and lay across my thighs and lift up that plaid skirt.\" Nora giggled, and then groaned. \n\nSuzanne strutted over and flounced across my legs, lifting her skirt and looking back at Nora slyly. Oh my what an ass that girl has!\n\nI spoke softly, and wished I had a bigger stick. \"You realize this is for you own good? That I cannot take it easy on you?\"\n\nShe drew in a larger breath dramatically. She massaged my thighs with her perfect and muscular thighs, wiggling like a worm swimming on my lap. \"I am ready to take my medicine, Master!\"\n\nMy first open handed blow landed on her right check, and the next on the left. I realized I had been too gentle. I hit two more times alternatively on each cheek, and her backside began to take on a beautiful red patina, and her Suzie began to sizzle. Five more on each side had me sizzling, and I heard Nora's Suzie pop and bubble, quivering and connecting with me and by proxy, Suzanne.\n\nI twisted one of Suzanne's arms up behind her back and shoved her up against the little padded shelf just over the wall mounted bed. She knew just what to do. I used the other hand to grab the wall mounted bookshelf above the bed, and used my knees to push her legs apart and forward. I slipped my dick into her now frothing pussy.\n\nI began slamming into her with everything I had, and she began to groan and pant. Nora walked over and sat down in my desk chair, not two feet away from us, with a Cheshire cat grin on her face.\n\nI leaned into it and really began to pound Suzanne. I suddenly heard both Suzie signals, almost in harmony. Suzanne really liked what she was getting, and Nora was really happy about it too. What starts here changes the world, baby!\n\nSuzanne sneezed and Nora giggled. I moved up a little higher and got an even better purchase on the bookshelf, pushing harder and faster into Suzanne. Her Suzie burned even hotter and she sneezed again. \n\nNora craned her neck around me in the chair so she could look directly at my cock slipping in and out of Suzanne. The look on her face was priceless. Suzanne sneezed again.\n\nSuddenly the Perfect Pliskin Pussy slammed shut on me like a muscular vise, and milked my cock. I came what seemed like buckets, driving it just as far up into Suzanne as I could. She sneezed one more time and said \"Oh fuck oh fuck oh fuck.\"\n\nIt was time to work on my idea.\n\n\"Miss Upman, do you think this student has been disciplined sufficiently?\"\n\nNora looked surprised at the question, then said \"I suppose to, for the time being.\"\n\nI looked at her very seriously. \"Don't you want to reassure her that we care for her and are only doing this for her own good?\"\n\nNora nodded yes, but did not see where I was going yet.\n\nI plopped myself out of Suzanne, and since Nora's face was only about a foot away and at almost the same level, the heat and pungent aroma that arose from Suzanne's now sated, moist, and very full snatch simply could not be ignored.\n\nNora stared at it, her nostril's flaring.\n\n\"Don't you want to let Suzanne know that you are here for her?\" I sent a big Suzie blast of Suzanne cleaning Lara out, one of my hottest girlfriend hall of fame memories.\n\nNora suddenly got it, her face turned totally red, and she knelt at the edge of the bed, taking one of Suzanne's ankles in each hand, spreading her legs out.\n\nNora said \"You know we love you Miss Pliskin?\" and then dove in. Like a cat savoring cream, she cleaned it all out, while Suzanne writhed on the bed and sneezed again.\n\nSuzanne's nasty Suzie note sounded loudly. She pulled Nora up for a showy and long French kiss, and then pulled back and give me a look that said \"You know what to do.\"\n\nI didn't. But then Suzanne wrapped Nora up on what looked like one of Mei Ling's crazy submission holds, snaking her arms and legs around and spreading Nora's legs apart like a wishbone about to be popped. Nora's platinum bush, now wet and fragrant, stared me right in the eye.\n\nSuzanne looked over Nora's shoulder and give the me that look again. My cock sprang to attention. As I entered Nora doggy style and began to pump, Suzanne synchronized her motions with mine and spread Nora wide open just at the point I was approaching maximum penetration. Suzanne locked her arms around Nora's neck, and her legs locked into Nora's knees, and Suzanne and I fucked our sweet Nora in muscular concert for a long time.\n\nNora's Suzie signal became an opera, a chorus, a round, and then exploded in my brain. When she came it was like a lightning bolt hitting all three of us. I felt like I was having her orgasm with her. It was very different than my usual ones \u2013 much bigger and more widespread. By comparison, mine where like quick pistol shots, this was more like a long rumbling earthquake. It swept me away. Suddenly I was ready to come, and somehow I knew once again that there was no egg in place to be fertilized. This time I desperately wanted there to be. I actively visualized my little swimmers somehow finding their way home. It was the best orgasm I had ever hand, and the scariest. I also realized I would have been overjoyed to impregnate Suzanne and Lara, too. \n\nWhat starts her really does change the world. Pizza, anyone?\n\n +++++++++++++++++++\n\nKevin's audio production project was just about to 'go gold' as he put it. He played it for me and several of the guys in the dorm to listen for glitches and problems. It was pretty funny. The local conservative news talk station previously owned by Lyndon Johnson, became \"490 Kay Elle Bee Gay\" compete with lisping announcers and a commercial for Glenn Maxey Ford making a ribald and politically incorrect offer of fellatio if you could find a better price anywhere in Texas, and the other AM station became \"1730 The Gig\" since it carried Aggie football games. \n\nThe local Longhorn Flagship FM station became \"109.4 The Porn\" with programming direct from the Butt Light Studios, and including ads for some uniquely Austin advertisers like Five Stoned Tax Advisors and Austin Wholesale Dicking (a rather obvious Freudian slip, I thought) plus ads for every strip club in town with endorsements from the washed up old sportscaster. San Antonio's clear channel AM station became \"Double You Old Gay Guy\", with nothing but gardening shows and commercials for funeral homes. \n\nAfter a few hasty edits, he announced that it was finished and posted to the class site, so he was ready to \"Do Lou!\" Cisco had checked out the condo and found now bugs or recorders, so I was on board, too. \n\n +++++++++++++++++++\n\n We took my car on the way out to the Horseshoe Bay condo, since it was faster to walk to Lara's building from the dorm than to the ZZZ house to get Kevin's car. The drive took a little more than an hour, during which I replayed in my mind the little scene between Suzanne and Lou Baby in Kevin's car before the PIG lake party. Lou must have a very strong memory of it, because she kept stealing hot looks at Suzanne. Whenever Suzanne noticed me looking at her, she put her tongue on her top teeth. She knows exactly what that does to me. I think it had the same effect on Kevin. \n\nBoth girls were suitably impressed with the condo, and the towering view of the lake, which was currently dotted with sailboats. On the deck below us, some sunning trophy wives were well displayed.\n\nThe game table that Kevin had referred to was basically a huge touch sensitive liquid crystal screen, with big strong legs like a pool table, but backlit and protected by a big sheet of tough glass. It had a display on it that at first reminded me of a monopoly game board, but with a lot more streets and squares. \n\nKevin said you spun the electronic dice and then the game moved your tokens around the board, like Monopoly, but it combined the real estate game with elements of Grand Theft Auto, Strip Poker, Truth or Dare, and Beer Pong. There were three kinds of 'special cards', like Chance or Community Chest in Monopoly, that you drew when you landed on their corresponding squares, and the game master, in this case Kevin, could edit what it said on each card, and make it conditional depending on which player drew the card.\n\nHe had jiggered the programming to basically have everyone but Lou draw cards that made them remove an article of clothing, take a shot of tequila, kiss someone or something, or do something else naughty. Lou got cards that gave her the power to make one of the three of us remove even more clothing, or dance suggestively for her. They all knew I couldn't drink, and Kevin had sworn off too. I had seen Lou get pretty darn uninhibited on Instant Stripper punch at frat parties, but I knew that Suzanne could drink any four frat rats under the table, plus she hardly needed liquor to release her inhibitions.\n\nThe cards kept coming up things like lose one article of clothing, kiss the person of opposite sex on your left, put both hands on the ass of the person of opposite sex on your right, etc. Kevin was not subtle, but it got the job done. Soon all three of us were totally naked but Lou Baby remained fully clothed. Lou and Kevin could not take their eyes off Suzanne. Lou's Suzie signal screamed desire, a palpable force in the room, and Suzanne's was radiating more than a bit of dom.\n\nSuzanne looked over at me, waited until she was sure I was looking, and then stuck her tongue out and held it on her upper lip. Kevin saw it, too, but I don't think either one of us could get any harder than we were, naked and exposed. Then she waited until Lou Baby was looking and ran her tongue all the way around her mouth. Lou's lips parted, a sigh escaped them, and her neck moved slightly to follow Suzanne's tongue. Kevin groaned.\n\nSuzanne stood slowly, all eyes on her. \"Lou darling, would you do something for me?\"\n\nLou's eyes were bigger than saucers, as she hoarsely croaked, \"Yes?\"\n\n\"I feel a cramp in my leg coming on, and I wonder if I could use your chair for a minute to stretch?\"\n\nLou's head bobbed up and down, slowly, several times, then she moved her feet as if to stand up and get out of her chair.\n\nSuzanne giggled. \"Oh be still, darling, I want you to stay right there. I am going to have to push against the chair and I want you there to make sure it doesn't tump over on us. Okay?\"\n\nShe slinked, naked, over in front of Lou and locked eyes with her, then lifted her left leg up, slowly moving it up and resting her high heel shoe on the back of the chair just over Lou's right shoulder. Lou's eyes locked onto Suzanne's little landing strip of pubic hair, and her breathing became even more irregular. \n\n Suzanne did what amounted to a slow forward lunge in place, bending her left leg at the knee and extending her right leg straighter to move her hips forward. This had the effect of moving her pussy on a virtually straight line towards Lou's face. Lou looked like a dog following a juicy bone \u2013 her lips gaped and her jaws slacked, and there might have been a little drool forming on her lips. Suzanne lunged in place several times, stretching her leg a little more each time and thus getting her snatch a little closer to Lou's face with each motion. Kevin's breathing seemed to follow her movements. So did mine. \n\nThen she put the leg back down on the floor, and Lou made a little disappointment sound. Suzanne smiled like a lioness and slowly lifted her other leg, carefully placing it over Lou's left shoulder. Lou broke out into a nervous smile and licked her lips. She still had no idea what she was about to experience.\n\nAfter their three-day pussy party that I was so cruelly excluded from, Lara, Nora, and Suzanne had made up little pet names for each other's body parts. I think they meant them to remain their little inside joke, but I was gradually figuring them out. The one for Suzanne's dusky olive-skinned pussy was the first one I decoded, because it was so obvious and coincided exactly with one I had made up for myself. Nora, with a somewhat scientific bent, had dubbed it \"Pee Cubed\" or \"P3\" for the \"Perfect Pliskin Pussy\". It was. Lara, staying with an alliterative name, called it \"SSS\" for the \"Sumptuous Suzanne Snatch\" and said how pleased she was that it was the first she had ever tasted. Nora concurred.\n\nLou was on deck, about to get her first at bat in the very tasty big leagues. She might find later offerings much less satisfying.\n\nSuzanne did four more slow lunges, the last putting her pubes about one inch from Lou's gaping mouth. Kevin made a funny sound and inhaled like he hadn't drawn a breath for hours. I caught the same scent, which had already hypnotized Lou: the Pliskin pheromones with the power to cloud men's (and women's) minds. Suzanne was cooking now, and Lou was about to be hot meat on her grill.\n\n\"Lou, darling, would you do something else for me?\"\n\nShe nodded like she was answering a dentist who had her mouth wide open and drooling. \n\nSuzanne reached down into her purse and took out a black 'scrunchy' hair tie and held it up for Lou to see. \"Take off all your clothes, and then put your hair up in a single ponytail.\"\n\nLou nodded and began unbuttoning her blouse. Her tan looked even better completely unencumbered. When she took her panties off another distinctly different wave of lovely odor filled my nostrils. \n\nSuzanne motioned for Lou to sit back down in her chair, and then casually slid her butt up on the table, making three or four side to side movements, jiggling the table, and her breasts. Lou's eyeballs jiggled in concert. \n\nSuzanne positioned herself right in front of Lou, and fixed her with her best dom look. \n\n\"Lou, you know what you want, and I know what you want, and Kevin and Robbie probably do too, but I want you to say it.\"\n\nLou's face turned red. With her tan it almost looked like she had smeared lipstick on her face. Her nostrils flared and her eyes popped. She cast her eyes down and mumbled something unrecognizable.\n\nSuzanne reached down and put a finger under Lou's chin, lifting her eyes up. \"Say it out loud, Lou, for everyone to hear!\"\n\nLou sniffed and snuffled, took in a deep breath, and said, resolutely, but softly \"I want to eat your pussy.\"\n\nSuzanne laughed. \"Say it load and proud, slut.\"\n\nLou drew in another deep breath, and said loudly, \"I want to eat your pussy!\"\n\n\"You want to eat my pussy, what?\"\n\n\"I want to eat your pussy, please?\"\n\n\"I want to eat your pussy, please, what?\"\n\nLou sniffed again, and looked confused. Then she got it. \"I want to eat your pussy please, Mistress.\"\n\nSuzanne grabbed that single ponytail with her right hand and spread her legs wide, putting one foot on each of the corners of the game table on either side of Lou's face. Lou Baby leaned forward in her chair and tried to just dive in, but Suzanne held her back. She drove toward her prize again, and Suzanne held her back again. Lou looked hurt. She looked up into Suzanne's face again, and Suzanne raised her eyebrows, asking a silent question.\n\nLou sniffled again. \"Please Mistress! I want it.\"\n\n\"Gentle lip kisses only to begin, Lou, no tongue at first.\"\n\nLou slowly and tentatively began to kiss the inside of Suzanne's thighs, but when she worked her way to the middle and made contact with those now very juicy pussy lips, all bets were off. Lou rooted, she snuffled, she gyred and gamboled, and dove in. She made all manner of snorting and humming noises. Her tongue suddenly darted in and out and her neck swayed from side to side.\n\nSuzanne tensed her butt checks impressively, moving her pussy a little closer to Lou and increasing the tension in her muscles. She moved her hand from side to side, waving Lou's little ponytail back and forth like a metronome. \n\nSuzanne began to speak. \"Good girl!\"\n\nLou redoubled her efforts, and soon Suzanne sneezed gently. Lou looked up in surprise. Suzanne smiled. \"When I have a good orgasm, sometimes I sneeze. So I want you to become the Gesundheit Kid. Make me come again, Lou.\"\n\nLou had found her calling in life. She swooped and soared, she snuffled and rooted, she swerved and swayed. Kevin and I watched her rock hard nipples sliding back and forth on the beveled glass edge of the game table and she moved to and fro in order to please Suzanne. Another little sneeze, and Lou struggled to lick up all of Suzanne's juices, trying, I suppose, to get it all before it could be released in the air for Kevin and I to enjoy. But there was far too much pungent payload to be contained, even by Lou's frantic efforts. Kevin literally bounced on his feet, shaking his cock at both girls in frustration. \n\nOne more sneeze and then Lou came up for air, taking in a shuddering breath. Suzanne pushed off on her heels like the butt lifts that Saskia made me do in the morning conditioning class to build up our 'gluts'. Suzanne's gluts didn't need any work, but they did lift her butt another three inches off the table, and put her legs in a state of marvelous muscular tension for her display and our enjoyment. Lou just looked on in awe, marveling at Suzanne's body. \n\nLou was a little slow on the uptake as to what this new position now made possible, but Suzanne was not shy. \"Eat my ass, you little slut!\"\n\nLou suddenly realized what a nasty idea that was, and groaned, but then realized what a good idea it was, and went for it. \n\nSomehow it got me even hotter. Kevin stared slack jawed at the spectacle. I'm sure I did too. Soon there was another sneeze.\n\nSuzanne stood and took hold of Lou Baby's ponytail. With her other hand she motioned for Keven and I to stand at the front of the table, and made it clear to Lou that she was expected to suck both our cocks.\n\nLou looked up at Kevin for just a second, a clear question in her eyes. I could not bring myself to look at his face. Whatever signal he gave Lou, she smiled up at him, and then looked over at me and licked my dick. She was wonderful at it, too. Then she licked Kevin's, then back to mine.\n\nShe was now totally into having two dicks to play with. She took them deep, then licked their undersides. She motor-boated our balls. She sucked the heads, tanned cheeks hollowing. She slid one hand up and down each shaft and flicked her tongue back and forth across the heads. Damn she was good. \n\nSuzanne looked on in fascination, licking her lips. Her Suzie signal burned and turned in my head. She made eye contact with me, and winked! The she got up and went over to her purse, pulling out a white plastic bag. \n\nShe walked back over to Lou and spoke into her ear, \"Lou, dear?\"\n\nLou mumbled, mouth full.\n\n\"That's okay, Lou Baby.\" Suzanne giggled. \"I know your mouth is full right now, you lucky little slut. I just wanted to tell you that I got you a little present, which I will show you in a few minutes.\"\n\nLou mumbled again, and Suzane moved behind her. Lou continued to move back and forth between Kevin's cock and mine, totally into it, talented tongue doing wonderful work.\n\n\"You know, Lou. You really do have a nice ass!\" Suzane began to gently cup Lou's buttocks, moving her eyes back and forth between Lou's ass and Lou's ministrations to our two cocks. \"Those tan lines really highlight things perfectly.\"",
        "She bent down behind Lou and began using both hands to caress and spread Lou's butt cheeks. \"Oh my, but you are wet my dear. I guess I would be too if I had two nice cocks to suck. You are a naughty little girl!\"\n\nSuzanne then spanked Lou four times on each cheek, making the very pink and untanned portion of her ass turn red. Lou groaned, way down low in her throat, and then, because I was lucky enough to be in her mouth at the time, took me all the way in and sucked even harder than before.\n\n\"Don't worry Lou baby. I'm going to kiss it to make it better.\" And she did.\n\nLou's Suzie signal growled and grew. She reached up and put one hand on Kevin's buttock and one on mine, and began pulling our cocks into her mouth pretty forcefully. Wow. \n\nLou didn't sneeze when she came, but Suzanne's work was soon acknowledged as Lou held her breath, then grunted and sighed contentedly. \n\nKevin laughed. \"You just made her come Suzanne!\"\n\nSuzanne pulled her mouth away so we could both see her face and lips, which were wet with Lou's juices. Kevin groaned at the sight, and then he grabbed Lou's head, fucking her mouth with reckless abandon.\n\nSuzanne made smiling eye contact with me, and put her tongue on her very wet upper lip, dark eyes flashing. Now I groaned.\n\nSuzanne stood up, opened the plastic bag and revealed a big clear plastic dildo, with burnt orange and white swirling inclusion stripes molded inside it. She stood where Lou could see it and put her best dom look on. \"Say hello to my little friend! Let's probe your school spirit, Lou darling!\"\n\nShe put on the black leather harness that held the thing in place in front of her and cinched it up tight. The harness was not only designed to hold the big dildo at the right attitude, but highlighted Suzanne's ass and thighs magnificently. A masterpiece of fashion design, I thought. \n\nKevin must have too, because he got a funny look and his face, and then groaned and quite obviously came in Lou's mouth. Lou drew a noisy rattling breath through her nose and began to swallow.\n\nSuzanne's Suzie trumpeted jealous excitement. \"Good girl! Oh Kevin, she is fantastic.\"\n\nLou Baby owned it, and Kevin gave it all up. Suzanne giggled. \"Okay, Lou, I think you are ready for your present.\" \n\nShe positioned herself behind Lou, tensed up all her leg muscles, and slowly but surely penetrated Lou's perfumed pussy.\n\nI was watching slack jawed as the big orange and white swirled missile found a home. Suzanne wiggled it a little when it hit bottom. \n\nSuzanne giggled, \"At your cervix, Madam! Hah hah, I have always wanted to say that.\" She then began to slowly move in and out, twisting her hips differently on each stroke to add a little extra sensation for Lou.\n\nKevin ducked down under Lou, putting one of the ottomans from the couch under his head, getting a great view of the action, and then began to lick Lou's clit. Lou began to cry.\n\nSuzanne was impressed. \"Oh, Lou Baby, now that's what I call a great boyfriend!\"\n\nLou Baby had another groaning orgasm, as Kevin and Suzanne both held still for a moment, and then started up again. A few moments later Lou held her breath for a long time, then came again, shaking rapidly. \n\n\"You are such a slut, Lou. I love it.\" Suzanne popped her dildo out of Lou's pussy and held it a few inches away. \"Kevin, if you want to go for earth's hottest boyfriend of the year, you keep kissing her pussy while I give her a bit of the old alien anal probe.\"\n\nLou baby drew a huge breath. I was still watching slack jawed when she grabbed my butt cheeks with both hands and devoured my dick, making it clear that I was to fuck her mouth just as enthusiastically as I could. I was never one to shirk my dickly duty.\n\nSuzanne stared longingly at my dick disappearing into Lou's face for a moment, and then slipped the big Longhorn dildo slowly into Lou's ass. For some reason I visualized Lynn Da Britain and her perfect skin bent over between us in the role of the push me pull you. What a picture. Suddenly I was coming in Lou's mouth. She loved it. So did I.\n\nLou drained me, and then plopped me out of her mouth and giggled. \"Pretty tasty, Robbie. Come on, let me have it rough, Mistress!\"\n\nSuzanne took to the challenge. Her clenching and bunching thighs made me think of someone doing hurdles at a track meet as she slammed into Lou. Kevin was guzzling Lou's pussy with the same rampant enthusiasm that Lou had displayed while going down on Suzanne. \n\nI was temporarily off line while my circulatory system recovered. I bent down and watched that big nasty dildo penetrating Lou's hot little tan lines ass. Kevin's hands were on either side of her waist with his fingers pointing up toward the ceiling as he nuzzled and guzzled her frothing snatch. Suddenly Lou came in a long shuddering orgasm and made a big sobbing cry. \"Ahhhh! Ahhhh!\"\n\nSuzanne pulled out of Lou's ass and unstrapped the dildo. \"Okay, Kevin, I think she is ready for the real thing, and I don't mean Coca-Cola!\" She moved out of the way and urged Kevin into place behind Lou. Lou spread her legs wide and shook her ass. \n\nSuzanne said \"Lou Baby, do you promise to be my little bitch pussy licker whenever I want?\"\n\nLou was still quivering from all the orgasms she had just had. \"Yes, Mistress, gladly!\"\n\nSuzanne smiled her best dom smile at me. \"Okay, baby, Mistress Suzanne is going to take care of you.\"\n\nShe grabbed Kevin by the ass and urged him forward into Lou's steaming pussy. \"Oh, Lou, that dick looks very good in you. You know Robbie is next, don't you Lou?\"\n\nLou said through gritted and grinning teeth \"Yes, Mistress!\"\n\nSuzanne took up a position standing next to Kevin, with one hand on Kevin's butt, and one on Lou's. Neither seemed to object.\n\n\"That's some great fuckin' there Kevin! I'll bet you are glad you stopped with the pot and the booze, aren't you? Bob the Knob told me most guys get much better erections without any of that in their bloodstream.\"\n\nKevin looked confused, having no earthly idea who 'Bob the Knob\" was. But he did not stop his motions in and out of Lou.\n\n\"Your dick looks really good, Kevin!\" Whoa, that was more than I needed to know. It certainly had its effect on Kevin. His expression got all weird, and his dick seemed to get bigger.\n\nSuzanne, as usual, was one step ahead of us. \"Kevin, come in her mouth, not her pussy. Trust me!\"\n\nHe looked confused for another second, then pulled out of Lou's pussy and rushed up to her face. She was in such a state of rut and reckless abandon that she greedily sucked him into her mouth and held on. Kevin groaned, flexed his leg muscles, and then must have shot into her.\n\nKevin said \"Oh, God, Lou!\" then groaned and rocked back and forth. We saw Lou's throat work hard, but we never saw a drop touch the air.\n\nSuzanne smiled. \"That's beautiful! Okay Robbie, you're up, I'm sure!\"\n\nI was. I had thought about doing Lou that first night at the ZZZ mixer, and now I was truly ready. I moved toward her, my erection pointing the way. Kevin was staring at it, which made me feel weird.\n\nSuzanne giggled. \"Oh Lou, darling, wild college days! My boyfriend is going to fuck you now. With your boyfriend watching. Okay?\"\n\nLou groaned. The expression in her face was indescribable. \n\nSuzanne continued. \"Lou, do you promise to be my little pussy licking bitch whenever I want?\"\n\n\"Yes, Mistress. I'll get on my knees for you any time you say.\"\n\nSuzanne was really into this. She laughed maniacally and pulled Kevin to her by the arm and spoke right into his ear. \n\n\"Kevin, Robbie is going to fuck your girlfriend now. Okay?\n\nKevin shook his head no. Suzanne looked worried. \"It's not okay?\"\n\nKevin squared his shoulders. \"She's not my girlfriend, she's my fianc\u00e9! She wants to try to it, so it's okay with me.\"\n\nLou began to cry. \"I love you, Kevin!\"\n\nSuzanne smiled beatifically. \"Kevin, you are such an interesting man!\" She kissed him full on the lips. He was dazzled.\n\n\"Okay, Robbie. I want you to fuck our darling Lou. Like pizza night, okay?\"\n\nKevin and Lou did not know what that meant, but I did. Hopefully they would soon see for themselves.\n\nI pushed Lou down onto the game table, trying to lay her out in a semblance of the setup of the wall mounted bed in my dorm room. Suzanne saw what I was doing, and pulled Lou's hands to the rounded corners of the very solid game table.\n\n\"Hold on tight, Lou Baby, and pull your knees up so you are on all fours.\"\n\nSuzanne then sat down at one of the game table's chairs, and grabbed the back of Lou's right knee with both hands.\n\n\"Kevin, sit down on the opposite side of me and hold Lou's left knee in place.\" \n\nKevin looked at her funny, but complied. \n\nShe looked up, and said \"Robbie, that light fixture right above the table looks pretty strong, doesn't it?\"\n\nI saw where she was going with that. It was a sort of industrial looking thing, with four big brass chains holding two bars of lights. The chains actually looked just as strong as the ones holding the trapeze in Lara's apartment. I was sure it would serve as an adequate substitute for the little bookshelf in my dorm room. They might not support my entire weight, but they would surely allow me to brace and steady myself in order to do my best for Lou. Duty calls.\n\nI used one of the other chairs to climb onto the table and up above Lou. I decided that I couldn't get the right position if I was on my knees. I would have to squat above her to really achieve the proper 'angle of the dangle'. Part of my weight would be transferred onto Lou, part onto my feet, and part onto the light fixture. Lou was wet and fragrant, and somehow her pheromones triggered me. I slipped into her, and both she and Kevin drew in whistling breaths. I felt myself expand to fill her, and I really enjoyed the feeling. \n\nJohn Henry was with me, and since I had already come twice, I was sure that I was going to last a long time. I found the right balance between the weight on my legs, Lou's butt and lower back, and the chains, and began to fuck her really hard. Lou began a continuous groan, modulated by my bottoming out into her: \"Unnnnn-huh! Unnnnn-huh! Unnnnnnnnn-huh!\" Music to my ears. \n\nKevin looked on, with a blank expression on his face. Suzanne's face was about six inches away from Lou's ass, watching in fascination and looking thoughtful. She was probably thinking about getting my cock and at least three more at the same time, and as soon as possible. \n\nLou then had one big teeth rattling inhalation, a big grunt, and then a long measured groan that was either one big orgasm or several small ones. Kevin caressed her knee. Then her pussy clamped down on me just as strongly as Suzanne had, with almost as much Suzie signal blast. I came without any notice or control, still pumping away like an automation. I almost passed out. \n\nFinally spent, Suzanne steadied me as I clumsily climbed off of the game table, and steered me into the chair she had been sitting in opposite Kevin. She then grabbed Lou's ankles and flipped her over on her back. Kevin looked up in surprise. I thought I knew what came next, but I was still incredulous.\n\nSuzanne grinned and Kevin, gave me a hot look, and then spread Lou's legs wide and leaned forward, sitting down between Lou's legs at the table in the same position that my grandfather did when he wanted to eat a whole watermelon outside at the picnic table. She looked up at Kevin and winked, and looked directly at me until I saw her tongue on her upper lip, and then smiled happily.\n\nShe straitened up a little to raise her head up slightly and made eye contact with Lou. \"Are you still my little bitch, Lou?\"\n\nLou sighed contentedly. \"Yes, Mistress.\"\n\nSuzanne smiled. \"Remember, I always take good care of my subs, Lou Baby!\"\n\nShe bent back down, stuck out her long and strong tongue and took a big creamy lick along Lou's pussy lips. Kevin inhaled like he had been shocked. Perhaps he was.\n\nLou began to murmur. \"Oh God, oh God, oh god, oh god......\" and then she grunted and came again.\n\nSuzane hummed and dove in deeper and thoroughly cleaned Lou from stem to stern, humming and occasionally pausing to say \"yummy!\" and tell Lou how beautiful she was. Lou had at least two more orgasms along the way. Kevin seemed paralyzed.\n\nThe Suzanne suddenly smacked her lips and said \"All gone!\" just like Lara did, and then sat up with her elbows on the table, smiling exhaustedly but contentedly.\n\nKevin and I stared at each other across the table, and then we both put our elbows on the table, mimicking Suzanne's pose.\n\nLou looked up at all three of us and said \"Jesus Christ!\" It struck us all funny.\n\nAfter a few minutes of funny looks, giggling and some hugs, we retired to our respective bedrooms to bathe and sleep. \n\nAs we went up the stairs, two things hit me. One, I had no idea what was going to happened tomorrow morning. Two, it was painfully obvious that Suzanne viewed this little party as a dress rehearsal for a more extensive affair (in every sense of the word) of her own. Featuring at least three guys instead of just two, in as many different permutations and combinations as they could manage. I knew she could manage them all. Damn it.\n\nBut could I? I knew she wanted it bad, and I knew it wasn't about replacing me \u2013 it was just something she had to try. A PERT chart style decision tree suddenly appeared in my head, leftovers from Engineering 101 I suppose. There were actually two branches that made it plausible that letting Suzanne do this now would decrease the chances she would want to do again and again later. Or maybe not. \n\nBut everything felt different for me now, and I wasn't sure why. Although I felt weird doing Lou in front of Kevin, he was pretty okay with it, and Lou Baby surely was. I didn't feel the slightest remorse about doing Strelsa in front of G\u00fcnter, even though I clearly freaked out at the prospect of him doing Suzanne. But somehow I didn't feel so bad about some of 'my boys' from UDP doing Suzanne like she wanted. What's up with that? This is sure not high school anymore.\n\nSuzanne warmed up the shower, and after we soaped and washed each other thoroughly, she discovered a little shelf like the ones at Sapiento and Erminia's new house on the lake. She put one foot up on it and turned to look back at me over her shoulder, making it clear she expected some ass worship.\n\nI teased her a little by kissing just her buttocks at first, enjoying her squirming towards me to try to get more intimate contact. Just before I devoted myself to her ass, I pulled back and said \"While I am kissing your sweet ass, you can pretend I am getting you ready for dick number three.\"\n\nShe giggled. \"Robbie you really are the perfect man for me. You almost know what I want before I want it.\"\n\nI lost myself in her ass for a while, then she said \"Robbie, did you know I am a pretty good ski jumper?\"\n\nIt figures.\n\n+++++++++++++++++++"
    ],
    "authorname": "conanthe",
    "tags": [
        "fraternity",
        "bdsm",
        "sorority",
        "anal",
        "college",
        "dom",
        "group sex",
        "pizza",
        "creampie"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/my-only-talent-ch-33"
}
{
    "title": "Thorny Rose Ch. 03",
    "pages": [
        "The conclusion to the story. In chapter 2, Dale and Rose escape danger, but more problems are just around the corner. But there is good stuff, too.\n\n*\n\nI put the phone down and walked back to the bed. I stood next to Rose, and said, \"That's great news.\"\n\nShe smiled and nodded, then stood up. I watched her walk across the room to the desk, and she reached into her purse and pulled out her phone. She looked at it, shook her head, then made a call. Again, it rang and when to voice mail. \"Mom, please call me. Don't worry about the time. Please.\" She looked at the phone as if she could will it to ring.\n\n\"I'm worried about my mother, Dale.\"\n\n\"I'm sure she's sleeping and will call in the morning.\"\n\n\"Yeah, it is late. I guess you're right.\"\n\nShe turned toward the bathroom and went back in. I heard the shower start, and so I turned on the TV. It was after 3 a.m., so not much was on, and I was flipping around, when I heard the water stop. A few minutes later, Rose came out of the bathroom, a towel barely covering her body from the top of her breasts to the top of her thighs. \"That felt great\u2014do you want to take one?\n\n\"Uh, yeah, sure, I guess.\"\n\nShe smiled at my awkwardness, and moved away from the bathroom door into the room. I walked past her, smelling the soap and shampoo, and looking at her beautiful face. The bathroom was warm, steamy and the mirror was fogged up, except for a small area that Rose apparently cleared. I started the shower and undressed. I was rock hard, even as tired as I was. Thinking about Rose, in the towel, and what was under the towel made me crazy. I stepped gingerly into the hot water, adjusted the temperature and plunged in. The water felt great, and as it poured over my body, I began to relax, not having realized how tense I was. By the time I had soaped up and shampooed, I had lost my erection, and I stepped out of the shower, turned off the water and found a couple of towels to dry off.\n\nThe towel barely fit around my waist\u2014I guess that is what you get a budget hotel, and my left leg was essentially bare. I put the other towel over my shoulders and left the bathroom, feeling the comparatively cooler air. Rose had turned off all of the lights, except for one bedside lamp, and I could see her, in the bed, under the covers, which were pulled up to her neck. Her eyes were open, and she was looking at me.\n\nFrom under the blanket, her unseen hand pulled the covers back from the other side of the bed. \"Come on in,\" she said softly.\n\n\"Let me go put on my underwear,\" I said a bit nervously, and turned toward the bathroom.\n\n\"Don't bother. I'm not wearing any.\"\n\nI froze, turned back and felt the towel rise. \"Uh, sure, O.K.,\" I mumbled, and walked to the side of the bed before letting the towels drop to the floor. I slid under the covers, and bumped her soft, naked arm. \"Sorry,\" I whispered.\n\n\"Nothing to apologize for, Dale. Would you hold me?\"\n\nIt wasn't a difficult decision at all. I slid in the bed toward Rose, and she cuddled next to me. To say that it didn't feel good to have her naked in bed with me would be maybe the biggest lie I ever told. Of course, as I lay there, stroking her soft curves, I got aroused, and turned to kiss her. In return, I received an incredibly tender kiss, one that made me want to kiss her more and more, and as I did, the kisses became even more passionate.\n\nIt seemed like it was getting hotter and hotter under the covers, and I could feel her firm breasts pressing against my chest. My cock was like the proverbial steel rod, and I felt myself rising up and turning, pressing Rose under me against the pillows on the large bed. My left hand reached for her right breast, and found its mark. I could feel her hard nipple against my hand, and was encouraged by the small sound, like a gasp or a sigh, that came from her mouth when I touched it. Emboldened, I bent my head down to take that nipple into my mouth, and this time got a moan from Rose.\n\nI worked my tongue over her nipple and around her areola and felt Rose's hips begin to wriggle.\n\nAnd then, before I knew it, she turned away from me, and in the dark, ran into the bathroom.\n\nI was pissed. I thought I had done everything right, I thought I had read the signs correctly, and things were going great, and then she ran again, just when things were getting good. I was really tired of being the patient, good guy. I had been doing that for months, and all it had gotten me was frustrated, not to mention in a situation where my supposed girlfriend was being chased by dangerous thugs. It was time for me to stand up for myself and let the chips fall where they may.\n\nRolling out of the bed, I turned the bedside lamp on, so that I could see where I was going. I crossed the room to the bathroom and knocked. \"Rose, we need to talk,\" I demanded.\n\nThere was no response. I tried again. \"Rose, what is going on? Let me come in.\"\n\nAfter a second she replied, \"It's open.\"\n\nI opened the door, and Rose was sitting on the closed toilet, slumped down, her hair covering her face, her breasts hanging down. She was crying. It would have been easy for me to simply be sympathetic, as I had been, but I was tired of being that guy.\n\n\"Why did you get out of bed?\" I asked.\n\nShe looked at me with red rimmed eyes. \"You know.\"\n\n\"No, I don't know anymore. Is it me? Do you not want me, because god knows I want you.\"\n\nShe paused. \"I do, but I can't. I just can't.\"\n\n\"Why not? I'm your friend. I'm here for you. I wouldn't hurt you. You have to know that.\"\n\nRose looked up at me from the toilet, and used her hand to brush her hair out of her eyes. I almost didn't look at her breasts, but of course, I did because they were amazing, then looked at her face. She smiled, wanly. \"I know, Dale. I know you wouldn't ever hurt me. But I've been hurt so badly, I'm not sure that I'm right for you.\"\n\nA better man might have been able to control himself, maybe a mature man. Or maybe someone other than a horny virgin staring at a naked goddess that he probably loved. But I finally lost it. \"Stop fucking trying to protect me from you, Rose,\" I yelled. \"I'm sick of it. We've been friends for a long time\u2014 I mean, you're probably my closest friend now. And I think I'm in love with you, but all you do is tease me and then run away. I can't take it anymore. I want to be with you. I don't care about your past. As far as I'm concerned that is over and done with. I'm willing to take a leap of faith, and I need to you do the same. Or whatever we have is done, because I can't keep doing this.\" I just stared at her as I felt the adrenalin rush ebb, and I became bone tired. Not to mentions shocked that I actually said all of that.\n\nRose looked up, and I could see that she was crying, but not the convulsing sobbing that I had seen when I first came into the bathroom. She was just looking at me, and tears were streaming down her cheeks, dripping off her chin, and yes, onto those breasts.\n\nShe stood up, and again, I had before me a completely nude, incredibly hot woman who I had just screamed at. \"Dale, I think I love you too,\" she whispered. \"And I'm sorry for being such a terrible girlfriend. And a terrible friend. Will you let me make it up to you?\"\n\nBefore I knew it, she was on her knees on the tiled floor, and my cock was in her warm mouth. It was not the way I expected to get my first blowjob from Rose, but I wasn't complaining. And while I was far from an expert on blowjobs, I was pretty confident that she was. The way she varied speed, and held onto my shaft, while using her tongue, was literally mind blowing, and it was not too long before my knees started to feel weak, and I knew that the end was near.\n\n\"Rose, I'm going to cum,\" I announced, because I understood from somewhere that was the polite thing to do, and when she kept going and nodded her head, I let fly a load that did not seem to end. Rose, former professional that she was, I guess, was able to swallow it all without any problems. And when she was done, she stood up and pressed herself against me.\n\n\"That was\u2014\" I started to say, but she smashed her lips against me and passionately began kissing me. The taste of my own cum, I guess, was a bit odd, but the kiss and the body against me were a sufficient distraction, and before long, I felt my cock begin to rise again.\n\nRose pulled away from me, took my hand and led me out of the bathroom toward the bed.\n\nBefore we got into the bed, she again reached around me and enveloped me in a hug, resting her head against my chest. It felt almost like she was, for the first time, completely letting her guard down with me. We fell into the bed and were making out, with the light on, and it felt incredible. I felt like Rose was no longer holding back, and I felt myself focusing only on her. Her taste. Her smell. Her feel. The noises that she was making.\n\nSomehow, and I really couldn't say how, I found myself on top of her, and I began to kiss her soft, warm neck. I was clearly doing something right, as she was sensually moving her head back and forth, exposing different spots for my attention, and making almost a purring sound. I was, therefore, encouraged to move down her throat, kissing the top of her cleavage, where the rose necklace was still wedged. From there, I moved slowly down her perfect right breast, and in the light of the single lamp, I could see the hard nipple and puckered areola that I had only felt earlier. When I sucked her nipple, while squeezing her other breast, Rose's head snapped back, her hips pushed up against my throbbing cock and she gasped.\n\nThat I could give this woman what appeared to be so much pleasure turned me on, and I couldn't wait any longer to give her more. I quickly kissed my way down her flat stomach to her crotch. Unlike when I had seen her videos, she wasn't bare, but instead had a trimmed full bush. The only other pussy I had ever seen live was Julia Ventura's and she had a landing strip, but I only got a quick look at it. I buried my face into her, and was overcome by the smell, and I mean that in a good way. I know that everyone uses the word \"musky\" to describe that smell, and I guess that is what it is, but to me Rose's smell was just right. I could see her lips, and when I bent down to kiss them, it was clear that she was already pretty wet. I had never done this before, but, of course, I watched porn, so I tried to lick and kiss her in the right way. Rose tried to help me by moving her hips and my head, until I found what was probably her clit, because when I licked the spot for the first time, her hips bucked against my face and she let out a little yelp.\n\nSo, I focused on that spot, but also the area around it, and when I stuck my tongue deep inside, my face was drenched with her juices. Rose pulled my head up, and directed it toward her clit, and I attacked it, causing her to buck faster and faster. I was like a man possessed, kissing, nibbling and licking, while her hips were bouncing off the bed, faster and faster. Somehow, I was able to stick a finger inside her slippery hole, and between that, and my tongue, Rose screamed once, then yelled my name, but I kept going. I wanted to show her that I cared about her pleasure, and after what felt like a second, smaller orgasm, she pulled my head away from her and started laughing. Softly at first, then harder, until she was almost convulsed.\n\nI was confused, because I thought that maybe she was laughing at me, and when she came up for air, I guess she saw my concerned look.\n\n\"Oh, baby, that was amazing, Dale,\" she panted, trying to catch her breath.\n\n\"You're not laughing at\u2014\"\n\nShe interrupted, \"Oh, god, no. I'm laughing because that was incredible, and sometimes after I cum, I mean, really cum, I get hysterical. Now, come here.\" She motioned up the bed, and I crawled up and lay next to her.\n\nOf course, my cock was rock hard and throbbing, and Rose reached down and felt it. \"We better do something about this, right?\" she asked smiling, and before I knew it, I was on my back, and Rose was poised above me. She was, if possible, even more beautiful from this angle. Her face was flushed a bit, and her hair was kind of wild, sexy. Her strong shoulders led to her beautiful breasts, and from below, I could see their slight upward point. Then, a flat belly, the flare of her hips and inching closer to my pulsating cock, the golden thatch of her pussy hair, matted and wet. And when she slowly impaled herself on my rod, and I was inside her for the first time, inside any woman for the first time for that matter, I thought I could die happy.\n\nShe sat there, as if resting, and I felt her pussy squeeze my cock gently, and instead of what I expected, that she would lift herself up and drop back down, she ground herself against me, rotating her hips. It was exquisite, and clearly it was pressing her clit against me in a good way, because she threw her head back with abandon, increasing the speed of her grinding. Before too long, she began to mix in bouncing and thrusting with her hip motions, and I found my hips rising from the bed to meet her. And then, without warning, she leaned forward, pressing her tits against my chest, and fucking me fast and hard, then faster and harder until the two of us were pounding each other, thrusting as fast as we could.\n\nAt the point of greatest pleasure, I felt the pressure in my balls, and as I shot my load, I heard a voice that sounded like mine screaming, and then one that sounded like Rose's.\n\nAnd then, there was calm and silence, except for our panting. Rose was collapsed on me, her head resting on my chest, her breasts pressing against my belly, and her legs between mine. There was nothing to say, and in any event, I couldn't speak. I lay there, listening to our breathing slow and coordinate, so that we were inhaling and exhaling at the same time, and feeling about as good as I could ever remember. About as good as I could have ever imagined.\n\n* * *\n\nI thought I heard something that sounded like my phone, but it seemed far away. Then closer. I opened my eyes, and for a second had no idea where I was. The hotel room's d\u00e9cor, though, brought me back to reality, but before I could move, the phone had stopped ringing. I realized that sometime after I fell asleep, Rose had rolled off of me and was sleeping on her side, facing away from me. The blanket was resting on her hip, and I admired the curve of her back and shoulders. I felt tired, but good, if a bit sore and sticky. \"The phone,\" I thought to myself and tried to wriggle out of the bed without waking Rose, but it didn't work. She rolled onto her back, pulled the covers over her breasts, and looked at me with sleepy eyes, but with a smile.\n\n\"Everything O.K.?\" she asked quietly.\n\nI smiled broadly. \"Couldn't be better.\" She smiled back. \"My phone just rang. I should see who it is.\"\n\n\"Yeah, then hurry back.\" She gave me a look that made it clear that when I came back, we would not be talking, which was a pretty damn good incentive to hurry.\n\nWhen I picked up my phone, I saw, not surprisingly, a missed call from my Dad, but no voice mail. \"It was my Dad,\" I said, \"I better call him back.\"\n\nRose nodded, but looked a bit disappointed. Which I kind of liked, but figured I should call my father. As the phone rang, Rose got out of bed and walked toward the bathroom. My eyes hungrily followed her naked body as it swayed across the room, but my admiration was interrupted by Dad's voice.\n\n\"Dale?\" He sounded concerned.\n\n\"Yeah, Dad. What's up?\"\n\n\"You haven't heard?\"\n\nNow, I was concerned. \"Heard what?\"\n\n\"About Rose's mother?\"\n\n\"No. Nothing. What's going on?\" I heard the shower running in the bathroom.\n\n\"She's, uh, in the hospital in Atlanta.\"\n\n\"What happened? Is she O.K.?\" I asked, worried.\n\n\"Well, it turns out that the assholes who were chasing Rose found her because someone saw her mother in Atlanta. They beat her pretty badly, apparently, and she told them where Rose was.\"\n\n\"Holy shit! How bad is it?\n\n\"Pretty bad, I understand. They wouldn't tell me details, but apparently she is in a coma.\"\n\n\"Oh my god, Dad. I better tell Rose. She's in the shower.\"\n\n\"Really?\" Dad asked with what was kind of inappropriate amusement under the circumstances.\n\n\"Uh, yeah.\"\n\n\"Look, Dale, I think you should tell her, then get back here right away, and we can talk to the police.\"\n\n\"That makes sense. We'll be home soon. Bye.\"\n\n\"Bye.\"\n\nI disconnected the call, and walked to the bathroom. I definitely wasn't looking forward to this conversation. I knocked on the door, and Rose said, \"Come on in,\" in a happy voice. Pushing open the door, I felt the steam from the shower and through the haze, I could see Rose, exquisitely naked, drying her hair.\n\nBefore she could say anything, I blurted, \"Uh, Rose, I have some bad news.\"\n\nShe froze, and her smiling, relaxed face turned wary. \"What. Tell me,\" she demanded.\n\n\"My Dad says that your mother is in the hospital. In Atlanta.\"\n\nRose started to gather her stuff from the bathroom. \"What happened? Is she O.K.?\"\n\n\"Well, it seems like the, you know, guys who came for you found her there, and beat her up to find out where you are. Dad says she's in bad shape, and we should go to my house right away, then talk to the police.\"\n\nThere was a scared look on Rose's face that I hoped never to see again, but it seemed like this wasn't ever going to be an easy ride. We quickly got dressed in last night's now completely inappropriate clothing, checked out of the hotel and drove, in silence, holding hands, to my house.\n\nThe upshot was that the bad guys had been captured, here and actually back in California where the guys who planned the attack were. The story was picked up by the press, although they didn't mention Rose's current name, or mine, so there was at least still some hope for privacy. We briefly spoke with the police, who came to the house, but Rose's mother was in bad shape, and of course she wanted to go. We were sitting in my living room, with my parents, when she used her phone to start booking a flight.\n\n\"Rose, I want to come with you,\" I said.\n\nShe shook her head. \"There's no reason for you to get involved.\"\n\n\"I'm already involved. With this, and with you.\" I noticed my parents exchange a look. \"I told you last night that I am here for you. And if anything, that's even more so now.\" Which led to another look between my parents. They were smart enough not to say anything. \"Look, this may be hard, but it will be easier with a friend.\"\n\nRose looked me in the eyes, as if measuring me somehow. She nodded. \"You're right,\" she said softly, and smiled at me. \"You're right,\" she repeated, almost as if she were trying to convince herself. The next half hour was filled with getting tickets and packing, then my parents drove us to Rose's house, so she could change and pack. We drove her car on the pretty long drive to the airport, checked in, and in short order we were on our way to Atlanta. The plane was filled with what looked like tired people recovering from the New Year's weekend. I was sitting on the aisle, and Rose was wedged into the middle seat, next to a 50-ish, bald businessman who tried to work during the flight. Not long after we took off, Rose leaned her head onto my shoulder and fell asleep, and I followed not to long after, enjoying the smell of Rose's hair.\n\nThe next thing I knew, I was being shaken awake, and sort of in a daze, got off the plane, and found myself in a cab, with Rose driving through the dark, cool, unfamiliar streets toward a hospital. We entered the generic looking building, with its drooping holiday decorations and Rose asked for her mother by her assumed name. There was no record of her, so Rose tried her real name, and then we were directed to the 9th floor ICU. Hearing that phrase made Rose's face look even more concerned, which made sense, and we silently rolled our carryon bags to the elevator, out the elevator, down the hall past rooms and nurse's stations until we found the room.",
        "But before we could enter, we were intercepted by an older man drinking a cup of coffee who identified himself as Detective Bayliss. While we exchanged awkward pleasantries, a young doctor arrived, and introduced himself to Rose as Doctor Coulson. He told Rose, who introduced herself with her real name, that her mother was in pretty bad shape, and not to be surprised by her bruising and the tubes that she would see. Detective Bayliss said that he wanted to talk to Rose and me, but would wait while she saw her mother.\n\nWe went in, and even after the doctor's warning, it was a shock, and Rose's knee's buckled. Luckily, I was behind her and was able to hold her up. Mrs. Hicks\u2014or Rowland\u2014looked scary. Her face was various shades of red, black and purple, and swollen almost beyond recognition. She had a ventilator in her mouth and tons of tubes running from her arms into various bags and stuff.\n\n\"Can she hear me?\" Rose whispered to Dr. Coulson.\n\n\"Probably not, but we don't know, really.\"\n\nRose pulled a chair over to her mother's bedside, sat down, and took her mother's hand. She just sat there for a few minutes. I was standing, still in my coat, not exactly sure what to do. After a bit, Rose, who was crying, started saying, \"I'm sorry, I'm sorry,\" over and over again, ultimately resting her forehead on her mother's hand. Her mother didn't move at all. The only sounds were the ventilator, the monitors and Rose's sobbing. I just stood still, then walked over behind Rose and put my hand on her shoulder. After a bit, I started to stroke her hair, but she didn't react.\n\nDr. Coulson cleared his throat, and at that noise, Rose looked up. \"I think it would make sense for you to get some rest and come back in the morning.\"\n\nRose nodded, and stood up, shakily. I grabbed her elbow to help support her, and she walked, unsteadily out of the room. I released her arm as she steadied, and grabbed the handles of our bags, and rolled them out behind me. Waiting was Detective Bayliss.\n\n\"Can we talk now?\" he asked in a comforting tone.\n\nRose nodded, and he led us down the hall to an empty room that looked like a private waiting room. I followed them in, and we sat on the pale green institutional sofas. I sat next to Rose, across from the detective, and she grabbed my hand, interlacing our fingers and squeezing tightly.\n\n\"I'm sorry about your mom,\" he said.\n\n\"Thanks,\" Rose whispered.\n\n\"Um, Theresa,\" he began, \"is it O.K. for me to call you that?\"\n\n\"I prefer Rose, now, if you don't mind. I feel like Theresa is someone else at this point.\"\n\n\"Sure, then, Rose, let me tell you what we know. The police in Farston arrested four armed men staking out your house, Jake Young\u2014\n\n\"And let me guess,\" Rose interrupted, \"Tommy Costa, Alex Escudero and Maxim Sokolov.\" She spat the names out as if she had tasted something spoiled.\n\nBayliss nodded. \"That's right. They were waiting for you based on information that they had beaten out of your mother.\"\n\nRose gasped and started to cry. I squeezed her hand tightly. The detective continued, \"Escudero rolled on the other two. He apparently has a new baby, and wanted the chance to see her before she went to college. They have been looking for you on orders from Simon Schmidt\u2014\" Rose shivered when he said that name, which I recognized from the news stories about Rose's ordeal\u2014\"and they happened to be in Atlanta when they saw your mother at a nightclub. They abducted her, and when she refused to tell them where you were, well, you saw what happened.\"\n\nI felt Rose sob violently and start crying harder.\n\n\"The good news, such as it is, I guess, is that Schmidt, and a couple of his men in L.A. have also been arrested, and will probably go away for a long, long time.\"\n\nWe sat there, silently except for Rose's crying, for what felt like a long time. When she stopped crying, she wiped her eyes and nose with her hands and said, \"Thank you, detective.\"\n\nBayliss stood up. \"I'm sure your mother will be fine. This is a great hospital. I'm sorry about all this, but I'm glad we got these bastards in custody.\" He tried to hand his card to Rose, but she didn't react, so I took it. \"If you need anything at all while you are here, or have any questions, give me a call.\" And then he was gone.\n\nI was exhausted, and I could only imagine how Rose was feeling. I realized that she needed me to take control of the situation. I stood, pulling Rose up with our clasped hands. \"I think we need to find a hotel.\"\n\n\"I want to stay here,\" she whispered.\n\n\"There's nothing we can do here, Rose. Let's go somewhere, get something to eat, maybe, and get some rest so we can come back refreshed in the morning.\"\n\n\"I guess you are right,\" she reluctantly agreed.\n\nI handed Rose her coat, which she put on, and we walked back down to the reception area. I asked at the desk where the nearest hotel was, and luckily, there was a good one a block away. We walked in the cool late night air to the hotel, checked in and went to the room. I figured I could keep using the emergency credit card.\n\nOnce we got there, I realized that I was starving. I turned to Rose and asked her if she wanted any food, but she shook her head and just sat on the edge of the bed, looking at the generic art print on the wall. I found the room service menu, but realized it was too late.\n\n\"Rose, there's a Wendy's that we passed on the way here. I'm going to get something, O.K.?\" She nodded. \"Can I get you anything?\" She shook her head.\n\nI grabbed my coat and room card and went back out into the night. A few minutes later, I had a sack full of questionable burgers and fries, and a couple of sodas. I figured, maybe I could get Rose to eat something.\n\nBack at the hotel, the room was dark and quiet. When I turned on the light, I could see Rose lying under the blankets, curled up in the fetal position. I put the bag on the desk, took off my coat and sat down, removing a burger, fries and soda from the greasy bag. It smelled great\u2014better than great, actually. I looked over at Rose, and she didn't stir, so I wolfed down the food, tossed the trash into the garbage can, found my toiletries in my bag, brushed my teeth, washed up, then undressed for bed. Still a bit unsure of things, I kept my boxers on. Memorizing the layout of the room, I turned off the light and slowly made my way to the bed without tripping or bumping into anything.\n\nThe sheets were cool, and I snuggled under the blanket. It was pitch black in the room. I felt Rose roll toward me, and she rested her head on my chest and laid her arm across my belly. I was able to rub her soft, smooth back under the blanket, and it appeared that unlike me, she had discarded her underwear. As I stroked her back, she made quiet purring noises and, under pretty much any other circumstances, I would have been horny as hell. But I was exhausted, both physically and mentally, and quickly found myself asleep.\n\n* * *\n\nI opened my eyes, and after I figured out where I was, I had the happy feeling of having Rose pressed against me, in the classic spoon position. My semi-erect cock was nestled in her ass crack, and as that fact slowly invaded my consciousness, it became fully erect. A few days ago, the concept that I'd be naked in bed with Rose was unimaginable, and now I was remarkably not embarrassed by having my cock pressing against her ass. And when she pressed back against it and sighed, I kissed the back of her head. Although it didn't seem possible, she pressed herself even closer, and I took the opportunity to use my free hand to stroke her curves, from her ribs, down to her waist, and up to her hip. I could tell from the way her body reacted, that I was doing something good, and began to stray toward her ample, soft breasts.\n\nRose reached up, and pressed my hand against her hardening nipple, then contorted her neck to kiss me. When we disengaged, she said, softly, \"I like waking up like this.\"\n\n\"No complaints here,\" I replied, smiling.\n\n\"Very funny,\" she responded, with mock indignation, rolling away from me so that she was lying face down on the bed.\n\nIf she thought that denying me the ability to fondle her breasts was \"punishment,\" it was certainly mitigated by the sight of her round ass and long legs. I wondered to myself if there was anything sexier than the sight of a naked woman's pink skin against white sheets.\n\n\"I guess I better do something to apologize,\" I said, chuckling, and rolled toward her. I began stroking and rubbing her back, kneading her muscles. As much as I enjoyed giving the massage, it was clear that Rose was really enjoying the attention, and that didn't change as I moved my focus to her butt. In fact, my work on her cheeks led to an increasing in the intensity of her moaning, and a slow spreading of her thighs.\n\nDespite my general lack of experience with women, I thought I knew what that meant, and I reached between her legs and stroked her soft thighs, before moving toward her pussy, somewhat surprised to feel how wet she already was. I used my fingers to rub her lips, and apparently located her clit, by the way that her hips jerked upward. The more I rubbed, the more Rose lifted off the bed, until she was on her knees, ass up in the air, chest pressing against the mattress. She looked at me and smiled, her face smashed against the mattress, and I figured that it was time for me to make a move. I positioned myself so that I could stick my now throbbing cock into Rose from behind. I was able to plunge fully into her with no resistance, and Rose grunted loudly and pressed her ass back against me.\n\nI withdrew part way, then pressed back in, feeling the smooth, wet, hotness against my cock, which caused me to lose control a bit, and I started pumping faster and faster, and Rose began to meet my thrusting. I was panting, and she was grunting. I could feel Rose's hand rubbing her clit from underneath while we fucked with abandon, and she started to make the sounds that I recently learned meant that she was close to cumming. That set me off, and I exploded inside her, and as I finished, Rose yelled out, and collapsed under me. I couldn't have asked for a better landing spot.\n\nWe lay there, catching our breath, before I rolled off her back. I was lying on the bed, on my back. Rose turned toward me, then scooted over so that she was lying perpendicular to me, on her stomach, her head on my chest. I had heard the expression that someone had a \"well fucked look\" on their face, and I kind of thought that was what Rose had. She just looked at me, with a half-smile on her lips, her head rising and falling as I breathed.\n\n\"Thank you,\" she finally said, softly.\n\n\"No, thank you,\" I said, smiling.\n\n\"What I mean, Dale, is thank you for making me feel safe and loved and respected, not just for the sex.\" She paused before saying, \"Although that was pretty great, too. For someone with no experience, you're doing great,\" Before I could respond, she said, \"For so long, sex was something I did because I was forced to, or for money, and not because I wanted to. That's why I was so hesitant. I guess I equated sex with something bad. Which, I guess, led to my fear of touching and intimacy at all. The way you've treated me since we met reminded me that not all men are horrible. And getting to see sex from your perspective, as something new and exciting again, has reminded me that it can be fun, and good, and feels great, especially when you are with someone you love.\"\n\nWhat exactly was I supposed to say to that? I decided that the best thing to say was nothing, and just gave her a peck on the nose. I did worry to myself that I could never measure up, either in size or experience to her prior partners, but the last thing I was going to do was bring up her past.\n\nI looked at the clock. \"Rose, it is almost 9\u2014we should probably get to the hospital.\"\n\n\"You're right.\" Rose got up, and I watched her walk, naked and unselfconscious, to the bathroom, and heard the shower start. I thought about trying to get in the shower with her, but assuming that she was O.K. with that, I didn't want to delay any more, and I figured there was plenty of time for me to check that fantasy off my long list. After much less time that I expected, considering what I thought I knew about women and showers, Rose came out, with a towel around her body, just barely covering her crotch, and another one around her head, turban style\n\n\"Your turn,\" she said, smiling, and I walked, naked and somewhat self-consciously, into the foggy bathroom. I turned on the shower, and after adjusting the temperature, I got in. I could hear Rose wiping off the mirror and doing stuff in the bathroom while I washed up.\n\n\"Dale, I can't believe that my mother risked her life to protect me.\"\n\nI was kind of surprised by that comment, since I actually would pretty much expect my mother to do that, even considering what happened to Rose's mom. I stuck my head out of the shower. \"Really?\"\n\nShe turned to look at me, and her face was hard. \"There's more to my relationship with my mother than meets the eye.\"\n\nThis was much more interesting than the shower, so I rinsed, turned off the water, and reached for a towel, wrapping it around my waist. \"How?\"\n\nRose took a deep breath. \"My mother is really to blame for what happened to me. She and her husband were drug addicts and drunks, and she made it easy for him to rape me. Repeatedly from when I was 14. When I told her, she was either too fucked up, or didn't care, and when I told her I was running away, she said 'good riddance.'\"\n\nI stepped toward her and held her.\n\n\"So, I ran away, and tried to live on the street. I met this guy, and he was nice. He gave me food. A place to stay. And the next thing I knew, I was tied up, in a van, and in a house in California. Those guys, the guys who did this to my mother, beat and raped me. They degraded me until I didn't know up from down. They forced me to do horrible things, and the porn. They didn't care how old I was. When I turned 18, a more 'legitimate' producer, Paul Dampling, literally bought me from Simon Schmidt. I didn't know what else to do, so I did a couple of movies for him. It was better\u2014I had my own room, I wasn't getting hurt or anything, and I even got paid. But I was miserable, and they watched me. I wanted revenge. I became friendly with one of my so-called bodyguards, who really was there to make sure that I didn't run away and damage Paul's investment. If by friendly, you mean that I let him fuck me. Eventually, I convinced the guy to look the other way, and I ran. Right to the police. You know the rest of the story\u2014they arrested Schmidt and his crew, and they did some time, but got out recently and came after me.\"\n\nShe had told me most of the story before, in the park, except for the part about her mother, but obviously, she needed to get it out, and I listened, sickened again. \"Rose, then why did you go back to your mother?\"\n\nShe took a deep breath. \"I wasn't sure what to do. I knew her bastard husband had died, and good riddance to him. I called her, and she said that she was in a program, and clean, and wanted to see me. I flew to Atlanta, and we met, and talked. I still resented her, but I thought that we both needed someone, I had nowhere to go, and we were family after all. And then this.\" She waved her hands around, as if to indicate \"everything,\" and started to sob.\n\nAfter a few seconds, she wiped her eyes, and turned to the mirror and began to put on makeup. \"We should get going, I guess.\"\n\nI nodded and started to leave the bathroom, before turning back. \"Can I ask another question?\"\n\n\"Of course, Dale. I feel like I don't need to hide anything from you.\"\n\n\"What about Paul Dampling\u2014isn't he also after you?\"\n\nShe smiled a little. \"No, he turned out to be a relatively good guy. Not perfect, but when I got away, and told him the whole story, he was understanding. He did make me pay him a bunch of money, and sign a bunch of papers, but said we were square. He even offered me the chance to come back, whenever I wanted, and make more movies.\" She paused. \"As if that would ever happen.\"\n\nI knew probably as much as I would ever know, or at least for the time being, and it was pretty horrific. But I was happy that she was willing to confide in me, almost as much as I was happy that she was willing to sleep with me.\n\nWe dressed, grabbed a coffee in the hotel lobby and walked over to the hospital.\n\nWhen we got there, Rose's mother seemed to be unchanged. Bruised, filled with tubes and silent. Rose sat next to her, holding her hand, talking to her in a quiet voice, sometimes crying. I sat in the room, basically doing nothing but watching Rose, occasionally getting coffee and snacks. Around lunchtime, though, shit started happening. Monitors beeped, and doctors and nurses came running into the room. One of the nurses closed the curtain around the bed and shooed us out of the room. She looked concerned, and Rose looked scared.\n\nI led Rose to the lounge room where we had met with the detective, and we sat down. Rose grabbed my hand and held on for dear life.\n\n\"She's going to be O.K., right?\" Rose asked hopefully.\n\nFrankly, it didn't look good, but my medical knowledge came completely from TV and the movies, so I figured it was safe to say, \"I'm sure they are taking good care of her.\"\n\nSitting there and waiting without knowing was killing me, and it was worse for Rose. Occasionally, she would sniffle, or wipe her eyes, and squeeze my hand. There was nothing to say, and nothing to do but wait.\n\nAfter some time, Doctor Coulson came into the room, and he didn't look happy. \"Rose, can I speak with you privately?\"\n\nShe stood up. \"It's O.K. for Dale to hear this.\"\n\n\"Are you sure?\" he asked, warily. Rose nodded. \"You may want to sit down.\" Rose sat, and I sat next to her on the couch. This was not a positive development. \"Rose, I'm sorry to say that your mother has passed away.\" I felt Rose lurch and squeeze my hand. \"Her injuries were too severe. We did everything we could.....\" His voice trailed off, and I could hear Rose sobbing. \"I'm sorry for your loss.\" He stood, and we stood too, for some reason.\n\nThrough her tears, Rose asked, \"Can I see her?\"\n\n\"Of course. Is there anyone you would like speak with? A clergyman?\"\n\nRose shook her head. \"We really weren't religious, I guess.\"\n\nWe followed the doctor back to her mother's room. She looked peaceful. I realized that I had never seen a dead body before. I looked over at Rose, and she was still beautiful, even with tears pouring down her face and red puffy eyes.\n\nA short, dark-haired woman, maybe my Mom's age, wearing a suit, came over and introduced herself to us as Sandra Callender, and told us that she was there to help us make arrangements for the body. Rose looked at her blankly, and before Ms. Callender could start detailing the options, I asked, \"Can this wait until tomorrow?\"\n\n\"Of course,\" she replied, \"but if you would be interested in allowing your mother to be an organ donor and help other people, we need to get your consent now.\" She handed Rose a clipboard with a bunch of papers. Rose scanned them quickly, and scribbled a signature at the bottom.\n\n\"I guess it makes sense,\" she said, without much enthusiasm, and handed the clipboard to the woman.\n\n\"Thank you,\" she replied, sounding sincere, and handed me her business card. \"Have Rose call me when she is ready to talk about other arrangements.\" She bustled out of the room.\n\n\"Rose, do you want to stay here anymore?\"\n\nShe looked at me, as if surprised to see me, then shook her head, as if clearing out the fog. \"No, I think I need to get some air.\"\n\nWe left the hospital and walked aimlessly and quietly on the unfamiliar streets, holding hands, before somehow ending up back at the hotel. I realized that I was starving, and we sat in the hotel restaurant making minimal conversation, while I ate a grilled chicken sandwich and Rose moved the lettuce around in a salad.",
        "Back in the room, Rose lay down on the bed, fully clothed, and fell asleep, crying.\n\nI realized that I was way out of my element. I kissed Rose on the forehead, grabbed my phone and left the room, heading for the lobby, where I called my parents and told them what was going on. After expressing their shock and sympathy, as I hoped, they agreed to fly down immediately.\n\nWhen I returned to the room, Rose had not moved, but she had stopped crying. I took off her shoes, and some of her clothing, trying to disturb her as little as possible, and pulled a blanket over her. I put on some sweats, sat down on the chair and started reading a book on my phone.\n\nThe next thing I knew, I was waking up, in the chair, and it was 11 p.m. Rose had moved a bit, but was still under the covers. I crawled into bed, still in my sweats, and she nestled next to me. I held her in my arms until we fell asleep.\n\n* * *\n\nI woke the next morning, lying on my back, no longer entangled with Rose. I looked over and she was awake, lying on her side, still partially clothed, and looking at me intently.\n\n\"What?\" I asked, feeling a bit uncomfortable at her stare.\n\n\"You really are incredible.\"\n\n\"No, I'm not.\"\n\n\"No, you are. I don't know what I would do if you weren't here and helping me get through this.\"\n\n\"No problem.\"\n\nRose smiled. \"Bullshit. Of course it is a problem. And that is why you are so great.\"\n\nI really didn't think I was that great, but I wasn't going to contradict her. I shrugged.\n\nShe continued to look at me. \"I need one more favor, though.\"\n\n\"What can I do?\n\nA mischievous smile crossed her beautiful, half-awake face. \"Someone was nice enough to take of some of my clothing last night before bed, but I'm feeling a little overdressed right now. Could you help me take off the rest?\"\n\nI'm not sure that I ever moved faster. Rolling toward her, I reached for the bottom of her t-shirt, and worked it over her chest and head. All that were left were her bra and panties, and I made short work of them. Seeing Rose, in all her naked glory, lying in bed next to me was truly amazing. I found myself breathing heavily, and felt my cock pressing against my sweatpants.\n\n\"Dale, I think you are pretty overdressed yourself. Do you need a hand?\n\nDid I ever. And Rose provided two able and eager ones, and I was stark naked within seconds.\n\nAnd seconds after that, Rose had pinned me to the bed, her breasts pressing against my chest, and we were kissing. I felt the passion in her tongue and her lips, and I buried my fingers in her blond hair. She pulled away, and before I could be annoyed, Rose began kissing my chest, stopping to briefly nibble on my surprisingly sensitive nipples before continuing down to my belly. Grabbing my cock with her hand, she began to lick it, from its root to its red head, already oozing precum. I was in ecstasy, as she gently grabbed my balls and then took my cock into her mouth. Not surprisingly, I was unable to control myself, and quickly, probably too quickly, grunted and came in waves, which Rose swallowed effortlessly. I collapsed on the bed, and marveled at the sight of my gorgeous Rose, smiling at me, with a little bit of my cum on the corner of her lips. She quickly licked it off with her tongue, and frankly, I thought I was going to lose it again.\n\nShe lay down next to me, and I pulled her close. \"Thank you,\" I whispered.\n\n\"Well, you did help me take my clothing off. It was the least I could do.\"\n\nI smiled. If she could be so lighthearted after seeing her mother dead, maybe she would get over it quickly. Or maybe she was in shock. Either way, I just got an incredible blow job, and had an astounding naked woman lying in my arms.\n\nIt took me a few minutes to recover, but then I realized that the gentlemanly thing to do was to reciprocate. I turned on my side and began to stroke Rose, starting with her side farthest away from me. Then, I traced her eyes, nose and lips, and she kissed my fingers before I move to her chin. From there, it was her long, elegant neck and her upper chest. Rose was making contented sounds, and let out a sigh as I began to gently run my fingers over her perfectly shaped breasts. I watched her dark nipples harden, which invited me to suck on them. Rose was moaning softly, and I moved a hand down her belly to her pussy, feeling its moist warmth. Still sucking her nipple, I began to rub her pussy lips, occasionally dipping a finger insider her, but staying away from her clit as best I could.\n\nShe arched her back, pressing her tits into my face as I fingered her, faster and faster, before stopping abruptly and scrambling down to press my face into her fragrant loins. As I attacked her clit with my tongue, she locked my head between her thighs, while her hips bounced off the bed. I felt her stiffen and yell, before spreading her legs wide and tugging on my hair, hard enough that I got the message, but not hard enough to hurt. I moved to my knees and plunged my now throbbing cock inside her. It went in without any effort, and she wrapped her legs around me and thrust her hips toward me as I pumped away as if possessed by lust, because I was. The hotel bed was squeaking pretty good, when I felt Rose cum again, and then I shot another load deep inside her before collapsing, panting and sweating on top of her heaving chest. Rose idly rubbed my back as we caught our breath, and I rolled off her.\n\nWe lay there, silently, holding hands. I guess that Rose was using sex, and its pleasure and intimacy to forget what was happening. I knew that the last thing I wanted to deal with was reality and the outside world, because things in here were pretty amazing. And then my phone rang. I jumped out of bed and saw that it was my mother calling. I tried to catch my breath.\n\n\"Hey Mom.\"\n\n\"Hi, Dale, are you O.K.?\"\n\n\"Yeah.\"\n\n\"Good. How's Rose doing?\"<br>\n\nI looked at her, naked and gorgeous, in bed. \"Pretty well, under the circumstances, I think.\"\n\nShe told me when she and Dad would arrive, and I gave her the address of the hotel. It gave us more than enough time to shower, have some food and get ready for the day.\n\n* * *\n\nWe were back home a couple of days later. It was great having Mom and Dad in Atlanta to give us advice about how to deal with the body, and the hospital, and insurance and stuff. Mom and Rose spent some time together, and I think it helped Rose. We still had some time left in Christmas break, and Rose spent much of it with us. After a touch of awkwardness the first night, it became accepted that Rose was sleeping in my room, and then it wasn't discussed anymore. We had some what I hope was quiet sex in my room, and some pretty loud sex the nights I stayed over at Rose's house.\n\nThe word about the situation had, not surprisingly, gotten around Farston pretty quickly, and Rose was great handling the notoriety, although there were some moments where she went back into her shell, and I learned to leave her alone and give her space, but not too alone, if that makes any sense. When we got back to school, people tried to pretend things hadn't changed, and it took a couple of weeks before things settled back down to the usual routine again.\n\nRose told me that she got a call from some law enforcement people, who informed her that the people responsible for her mother's death had all plea bargained and implicated others, and that they would all be in jail for many, many years, in exchange for avoiding the death penalty. And that information obtained in the investigation helped to shut down a sex trafficking ring and underage porn productions in three states.\n\nAfter hearing that good news, Rose came over, and sat down with my parents and me. She felt safe enough to go public with her story, to try to help others and to show that she was O.K. My mother was against it, but she was adamant, and my father supported her. I told her that I was with her whatever she did, which got me a kiss. She honored her agreement with Sam, and they did an interview that was posted on the school newspaper website, and was picked up across the country. Rose even appeared on the local news, telling her story.\n\nAs my father predicted, as good and interesting a story as it was, once it was out there, it would become old news fast, and the calls and emails petered out. She was contacted by an anti-trafficking charity, and did a few interviews and appearances for them, and continued to do work for them in what passed for her spare time.\n\nWe were back to what passed for normal, if normal meant that I had an incredibly beautiful girlfriend who slept with me in my house, and had her own house were we could go for privacy. Rose and Mom became even closer as time went on, because I think Rose appreciated having an older, smart and caring woman to bounce stuff off and to talk to. Dad introduced her to our lawyer and accountant, who helped her with some financial issues that were not discussed with me, and also to officially change her name to Rose Hicks. She said that it was the first name she ever had where she was happy, and wanted to put her other names in the past. Eventually, she gave up the house and just moved in with us.\n\nMost of the time, things between us were great. We had been friends, and the whole experience had made us better friends. The sex was incredible, although I admittedly had little to compare it to. Rose was an amazing teacher, and I learned how to please her, and she did the same for me. And when the bad memories returned, after we watched a particular movie or TV show, or sometimes even for no apparent reason, her reactions became less and less intense. She said it was because she felt secure with me, and my family and our friends. Therapy also probably deserved some of the credit.\n\nAfter I got accepted to my second choice college (nothing is perfect, I guess), Rose was excited, and a few days later told me that she had decided to take classes at the community college in the same town, hoping to eventually transfer in to my school. She wanted to take classes that would allow her to counsel victims of abuse, and to make a career of that. That sounded like it might be a painful path for her, but she was willing to put herself through it so that she could help other people deal with the issues better than she had.\n\nAfter discussing it with my parents, we decided to rent an apartment near campus, and split the rent. I lined up a job at food services, Rose got a job in a coffee bar, and my parents agreed to make up the difference.\n\nWe even went to prom together, and no one looked more beautiful, or happier to be there, than Rose. Despite that, and her fame, she wasn't voted Prom Queen\u2014that went to Abby Press, who reportedly spent a good amount of time on her back or knees with classmates of both sexes to earn the title, and Sal Pastrana, the captain of the football team, and not a bad guy overall.\n\nI know that I said that nothing ever happens in Farston, and that is still mostly right. But I'm glad that when something did happen, I was in the middle of it. I know that it has worked out pretty well for me, so far, although I realize nothing is certain. I've learned already that you need to take each day at a time, and appreciate what you have. And I think it has worked out O.K. for Rose, too. I mean, I wouldn't wish on anyone what she had to go through, and it's not like ending up with me is exactly like winning the grand prize in life. But things seem pretty good for her now, and she acts happy most of the time.\n\nEvery day, even on the bad days, I consider myself lucky that we are together. Because even though you have to deal with the thorns, there are few things in this world that are more beautiful than a rose. "
    ],
    "authorname": "JayDavid",
    "tags": [
        "high school",
        "first time",
        "porn star",
        "oral sex"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/thorny-rose-ch-03"
}
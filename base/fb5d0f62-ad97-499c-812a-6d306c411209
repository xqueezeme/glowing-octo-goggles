{
    "title": "Violet Iodine",
    "pages": [
        "Summary: Meranda(Futa) finds that her intern(Denis) has a secret online career involving crossdressing. They indulge their fantasies together.\n\n~~~~~\n\nMeranda had been part of the Athena military project. She was, very tall for a woman, about six three. She always woke up at six without issue. Then she would do her one hundred pushups. Despite her conditioning, she still had a substantial breast size that would press on the ground with each push. Without a binder, she wouldn't be able to jog or sprint well at all. Her highest, muscle density, and womanly proportions, were all partially due to the hormone treatments of the Athena project.\n\nThe Athena Project had been called a failure, but she had still seen active duty for a tour and had been successful in every mission she was deployed in. She was paid handsomely for her participation. Once Meranda was done with her exercise routine, including a three mile jog, she was ready for her shower. \n\nShe undid her ponytail and let her long brown hair fall over her shoulders and to her waist. She was gaining weight again. She could tell because she almost could not see her abs anymore. It was strange, after the project, her body had changed so much. That was the point though, wasn't it? She pouted. If someone just re-sized her back to her pre-project height of five ten, she would probably attract a lot more attention. As it was, she must have been very intimidating to guys, even with her pants on.\n\nThat was when she pulled down her athletic shorts and scowled. It was the largest reason the project was called off. Just above her womanhood was a cock. And not even a small one. Everything else Meranda could manage, but that was a fault she could not work around. What kind of guy wanted a woman like her?\n\nEven limp is was larger than most men's cocks. At full girth it was almost a foot long. She growled and turned around, hiding her cock and instead measuring her ass in mirror. It was proportional alright, and taut from her training. \n\nShe lived well off of government money, but she did have a job to do as well. She did it mostly to feel a sense of purpose in her life. She showered and shaved and got dressed quickly. She taped herself down as usual, otherwise it would slip out her panties and down her black pencil skirt. She wore a woven sweater over her binder and a blouse. Her breasts were large even with the binder. Without it they were a nuisance, and she found it not only impractical, but distracting otherwise.\n\nDid she regret it participating in the project? Meranda supposed someone was always the first test subject. And it was for a good cause. There still wasn't a single woman who could pass the test for the Navy Seals. The project was an attempt to rectify that. The hormones and drugs she was given were supposed to cause a \"Second puberty\" and turn a normal woman into a female super solider.\n\nWell, she was athletic alright, and very tall, and maybe twice as strong as she had been. But the side effects left the military wanting. Several years after they experimented on her the whole program was shut down. Thankfully, she was still promised benefits exceeding a regular veteran. It was mostly hush money, as no one wanted it getting out that the military tried to make Captain America, but instead had made several dozen amazonian cock-girls.\n\nShe still got stares in the subway. But she never got assaulted, which was nice. She folded her stocking clad legs and tried to take up as little space as possible. Meranda smiled awkwardly at the five foot nine man beside her, ogling her hight. God she felt awkward. At least it wasn't her tits this time. They were at his eye level. Though, she often times preferred that. What she wouldn't give for a cute boy to date.\n\nShe had given up on finding a man her size, or larger. They did exist, but they usually went for smaller girls anyway. She was fine finding a man shorter than her. And a man she could support too. She was thirty four now, and had not had sex in over ten years. Specifically, she had never had sex since she grew a cock.\n\nShe knew she wasn't ugly. She had been approached by several modeling agencies. They all wanted her in something scandalous though, and there was no way to hide her you know what in a bikini so she never even entertained the possibility. She was shy anyways. \n\nAt work, she was accepted by her co-workers, but never close to anyone. They were all scared of her. Partly because she was their manager, but she had never wanted the position. The higher ups thought she had been working there long enough to get it, and people did tend to listen to her. \n\nShe sat down in her office at her desk. That was when her assistant put her coffee down in front of her. \"Thank you Denis!\" She said happily. It was one of the simple pleasures of her day. Denis was an intern. He went to the local college. Short black hair, cute baby face, unique, gold rim glasses, thin, about five feet tall. He was a bit awkward but she could tell he was trying. He was unfortunately a bit effeminate as well. It was unfortunate because she understood he already had a number of factors working against him as a guy, and that was perhaps the final straw. She related to him far too much. Perhaps that was why she took the chance to hire him. \n\n\"No problem boss.\" He said nervously. \"Here is your schedule for the day, your five o'clock canceled-\"\n\nHe read through her schedule and she tried to focus. Meranda realized too late she had forgotten something very important before she left for work. Something she recently had been trying to fit in. \n\nShe had forgotten to masturbate in the shower. Now she was going to be distracted and horny all day. \n\n\"Boss?\" he heard, \"Are you okay?\"\n\n\"Yea, yea...\" she nodded and repeated back to him what he had said.\n\nWork was long, but Denis was pleasant. She thought he liked her. Too bad he was so much younger, and her employee. Oh, and she had a cock. All those things made the relationship impossible. She did think about it sometimes though.\n\nAfter work she locked up and waived goodbye to everyone in the parking lot. She did try and stay social with her co-workers. Denis was already gone. He he had another part time job on the night shift. Poor boy worked too hard. \n\nShe drove home a little too quickly, anxious to finish the business she had forgotten to do that morning. Once she was back she opened up her computer and went to a site she had just discovered recently. She had never gone to sites like this before, but after the change in her body, she had accepted it might be her only outlet from now on.\n\nShe took off her sweater and blouse first, then her binder. She felt she could breath easy now, though, even her breathing seemed to make them bounce. Then she sat at her computer desk, lifted her skirt, and lowered her stockings. She flipped her dick out, and stroked it only once or twice before it came to it's full length. \n\nShe felt like a pervert, but it was necessary. If she didn't do this often enough, it would harden on it's own at just about anything. She considered to be a health concern, like taking a pill. She clicked some links on her new favorite site and tried to find a live stream she liked. She stroked slowly as she searched. \n\nShe was into guys, but it was harder to find them on these sites. She had resorted to girls sometimes, but it never felt as good. She looked for some of her favorites-\n\nThere! He was just signing on! She clicked the link that said, \"Violet Iodine\", licked her lips, and wet her hand with the lotion by her screen.\n\nIt looked like a girl. From her painted toenails, to her knee socks, to her bright white panties, up her short plaid skirt, she was a fine, feminine creature. Meranda drooled at the sight of her fine midriff, those buds under the tight vest that suggested breasts, and the cute face. A medical mask covered the lower half of her face. Her eyes were made up like an Egyptian and her hair was long and violet like an exotic creature from out of this world.\n\nBut it was a man. From under the skirt popped a cute little bulge. She knew from previous stream he was not even four inches hard. He danced slow and lifting the skirt and vest little by little. She stroked slow in time with his motions, careful to savor every angle. It wasn't every day this user came online.\n\nShe could hardly keep from blowing her load when she saw him lower his panties just a tad, and fit his cock behind and between his thick thighs, over the waistband. The elastic lifted the cock and balls up against his round ass. When he ground his hips it bounced at an odd angle. He teased an image of his nipple and then covered it again with the his bra. She could see a red blush forming across his body. He was embarrassed. It was cute.\n\nShe smiled as she saw the scared smile in his eyes. He was nervous, she could tell. She could empathize, at least she thought she could. Sometimes he would type responses to his fans but never verbalize unless he was testing a girly moan. He said in the chat that he felt he was not man enough, and not womanly enough, to be anything in real life.\n\nShe felt the same. In a different way of course. But it was that connection that made her fall in love with the user. Well, love was a strong word. She had certainly donated a lot to his tip jar, and tried to make every stream, but it wasn't like she actually knew him. She saw him slowly lube up one of the exotic dildos he owned. She could not help but speed up her pace as he lifted his mask enough to stuff it in his mouth, but leaned over to keep from showing even a trace of his mouth. Then, after gargling it for a few minutes, he made sure it was nice and smooth before attaching it to a tile floor. He let his junk rest, just barely peaking out the front of the skirt. He faced away from the camera and gently lowered his ass down on the cock in a long legged squat. From this angle, it was not obvious he was a man at all.\n\nShe watched her favorite cam-whore move his panties to the side for the toy and play with himself. She also let her eyes wander around his room. It was filled with toys and posters. He was a fan of strange shows and movies she didn't understand, but they all looked cute and pretty at least. There were figurines of cute girls, there were changes of clothes in his open closet. She noticed he must have started the stream in a hurry, because his eyes were green. He usually had contacts in that were violet to match the hair. He had even left his gold-rimmed glasses on the table by the webcam. \n\nAs she neared the peak she felt something was strange about those glasses. She was distracted though by that round butt and those tight panties. He wriggled his ass and she saw his junk jiggle between his legs as his squats became faster. She bit her lip and reached for the tissues. She was about to blow. She put it over the head of her cock just in time, \"Ah!\" She seized and bucked against her hands, \"Oh!\" She was disappointed in herself, she came far too quickly. He'd probably be going for the next hour at least. Oh well, she continued to stroke her twitching cock. \n\nShe blew a few more loads before bed. She wished to god she knew that cute boy more personally. But what was she supposed to do? He probably got a lot of creepy emails already, she didn't want to be a bother. Once she was satisfied she crawled into bed and got some sleep.\n\n~\n\nShe did not put two and two together until the end of work the next day. She had forgotten her \"daily Treatment\" again, and was eagerly trying to get home as quickly as possible. But this time, she found that her intern was also leaving a bit early. That was normal for him, but it finally gave her time to measure the man in the elevator. \n\nWhen she inspected his form he seemed normal enough. He seemed to notice her watching and smiled awkwardly. \"Something on my face?\"\n\n\"Where did you get those glasses?\" she asked.\n\n\"Oh, these? My grandfather used to make them. These were a birthday present.\"\n\n\"They are very unique.\" She stared into his green eyes.\n\n\"Thank you.\" He nodded and looked away.\n\n\"So, Denis.\" She continued. It was the very tall building, the elevator had only gone halfway down. \"What is this other part time job of yours?\"\n\n\"Hmm? Oh, it's just a private business I'm trying to get started.\" he deflected, looking away. \"Media stuff.\" She shrugged.\n\n\"Oh, like, Tube videos or-\" she suggested.\n\n\"Yes! Like that!\" he nodded.\n\n\"What is your channel?\" She asked.\n\n\"Oh, you wouldn't be interested.\" He shook his head. \"It isn't really your style.\"\n\n\"You might be surprised.\" she offered. \"You know, I'm a fan of a lot of streamers.\"\n\n\"Really?\" He asked. \"Like which ones?\"\n\n\"Oh, no one too big. You probably haven't heard of them.\"\n\n\"Well then, you might have heard of me then!\" he joked.\n\n\"Unlikely. But I guess it's possible.\" She wondered deeply. It couldn't be, could it? \"Do you have a favorite?\" she asked.\n\n\"Oh, well, there are some big channels I guess.\" He shrugged. \"But I'm pretty average.\"\n\n\"My favorite streamer isn't even on a big site like that. So, you probably have never heard of him.\" She said.\n\n\"Probably not then.\"\n\nThe elevator dinged to to ground floor. She said, \"His screen name in Violet Iodine.\" \n\nDenis froze looking at the door. There was a pause as they both waited for it to open. She knew in that moment exactly who he was, and he knew that she knew. \n\nShe tried to make herself sound dumb, \"You haven't heard of that streamer right?\" She gave a chuckle, \"I would be surprised if you had-\"\n\nThe door finally opened, \"Thank you for your time boss!\" He quickly rushed out. \n\n\"Wait!\" she quickly walked after him. He was pacing quickly but her legs were longer. \"Denis!\" She caught up with him at the parking lot. He had stopped, looking away from her. \"I'm not going to tell anyone.\" She stopped playing games. \"I mean,\" There was still a part of her that hesitated to believe Denis and that angel from last night were one and the same, \"It would be bad if it got out I watched things like that too, you know?\" She offered. \"So, it's like we both have a secret.\" She tried to argue. \"Right?\"\n\nHe refused to look at her. She could tell he was scared. \"Boss, could you just forget about all this?\"\n\n\"I could pretend.\" She said, her heels clacking on pavement as she took a step closer to him. \"But Denis-\" it was probably a terrible idea, but it wasn't her brain making the decision. \"Would you mind meeting me after work?\" She asked. \"It doesn't have to be right now.\"\n\nDenis turned back to her, crossing his arms and trying to hide most of his face. From this angle she could tell for sure. It was the same person. She felt it in her cock. She squirmed, trying to think of something else. \"Why?\" he asked.\n\nThis was her chance. Don't be creepy Meranda. \"To get to know you more.\" She insinuated.\n\n\"I think you know me well enough.\" He gave a paranoid glare.\n\nShe sighed and smiled as she said. \"I'm asking you out on a date silly!\"\n\nHis eyes went wide and his mouth gaped. \"W-what?\" he did not seem to believe her. \"Why?\"\n\n\"It isn't every day I meet my favorite streamer.\" He still didn't seem to believe her. He eyed her cautiously. \"I wasn't lieing about that.\" She said shyly. She played with her hair.\n\n\"Do I have a choice?\" he asked meekly\n\n\"Of course!\" She insisted. \"In fact,\" she looked down and away, \"It would probably be a bad idea anyway. Me being your boss and all.\" She sighed. \"Think about it?\" She asked. She could tell how nervous he was. It felt awe full putting him into this position. He must feel pressured. She tightened her red lips and said, \"Denis, if you invite me over, I promise,\" She hesitated, then committed, \"I'll tell you something private about myself too. Something I have never told anyone. It can't be here though.\" She explained. \"No expectations!\" She insisted again. \"Just a coffee, maybe?\" She asked. She could not stop playing with her long hair. \"It could be at my place if you prefer. But I'd like it to be private.\" \n\n\"Just coffee?\" He said skeptically.\n\n\"I promise.\" She nodded. \n\n\"I'm free tonight after eight.\" He said.\n\n\"After your-\" she stopped herself, \"I understand-\"\n\n\"No! No!\" he shook his head with a blush, \"I need some time to clean up my apartment is all! I usually don't have guests!\"\n\n\"Oh!\" She smiled, \"That's a relief. I was worried I'd miss it.\"\n\nThey stood and stared at each other for a few quiet moments. \"Is it still the address on your resume?\" She asked. He nodded. \"Oh, so it is close to here. Do you walk to work? It's only about four blocks, right?\" \n\n\"I should get going-\" He started.\n\n\"I can drive you there.\" She offered. \"It isn't too far.\"\n\n\"Okay, but, I'd really like to clean first-\"\n\n\"You do realize I have seen it all before right?\" She smiled. He was flushed. He was almost as red as he was during his videos. She resisted the impulse to bite her lip. It might ruin her makeup, and intimidate him too much. She felt like a predator slowly stalking her prey. No need to be hasty. She should be patient.\n\n\"Right.\" He scratched the back of his head, \"In that case, uh, sure.\" he gulped, \"But, only like, five minutes tops, okay?\"\n\n\"Wonderful!\" She felt a primal sense of victory. \"My car is over here-\"\n\n~\n\nHis apartment was a small two room set up, a kitchen and living area next to a bedroom with a small bathroom. It was cosey. She was immediately drawn to the art on the walls and the figurines on the shelves. There were lots of books. Comic books? A lot of the titles were in a different language. He swiftly closed the door to his bedroom before she came in. \n\n\"So, um, coffee?\"\n\n\"Yes please.\" She looked inside his kitchen, \"Or tea, if you have it.\" She saw a teapot.\n\n\"Do you prefer it?\"\n\n\"Something different would be nice.\" \n\n\"Okay.\" He worked in the kitchen as she sat down on his couch. It was a very small living space, especially compared to what she was used to, but it was cute. There was a table and television in front of her, and a window that watched over the city streets below.\n\nShe heard the kettle boil and inspected some of the book titles she could read. Some were at the shelf to her side. Some of the titles were in English letters, but she still could not read most of them. She looked to Denis and saw he was busy pouring water. She covertly tried to pull at one to see the cover. She tried to make out the words. \"Otokonoko Maid.\" sure enough, there was a maid on the cover. She looked very pretty, though, she wasn't wearing much. She was a bit relieved. She was worried these might have been comics of big, strong men like the movies or something. He seemed to be attracted to girls doing cute things at the very least. If he was strait but kinky, she could work with that. \n\n\"Milk or sugar?\"\n\n\"Both please.\" She said quickly, putting the book back. He did not seem to notice her snooping just yet. She looked around for another title that might have some English. She found one, \"My Mothers is a Futanari!\" She wasn't sure what that meant. Was is a superhero thing? She touched the spine and tried to pull it out.\n\n\"Hey!\" She stopped quickly as he returned with a look of concern. \"That's private!\" He returned with two cups and sat next to her. \n\n\"Well, it was in your living room.\" She argued.\n\n\"Like I said, I don't get too many visitors.\" by the tone of his voice she suspected he wasn't very happy so far at having one. \n\n\"You are right. I'm sorry.\" She apologized. \"I'm just curious about you is all!\"\n\nHis fingers wove together at his lap and he looked away from her. It was more obvious than usual how different their sizes were. She scratched at her chin in thought, trying to think of how to alleviate the tension, \"The tea is wonderful.\" She complemented.\n\n\"Thanks.\" He said with a small smile. ",
        "And with that, there was no other topic she could think of asking about that wasn't terribly awkward. She tried again with one of the more benign questions on her mind, \"So, um,\" She looked at the book covers, \"What is an Okonoko? Am I saying that right?\"\n\n\"Ugh,\" She saw his face go flushed. It was something dirty wasn't it? \"It's, um, a Japanese thing.\" he was vague about it. He didn't want to talk about it with his boss. Understandable. \n\n\"Well, um,\" She looked back at the covers, \"What about futanari?\"\n\nShe somehow got even more blushed. It was cute. \"That is, um, also-\"\n\n\"Denis.\" She said with a sigh, \"I'm sorry, I'm just trying to make conversation. Is there something you would like to talk about?\" She asked.\n\n\"Sure boss-\"\n\n\"You can call me Meranda outside of work dear.\"\n\n\"Meranda-\" he swallowed hard. \"Dear?\"\n\n\"Oh, I'm sorry!\" She apologized with a smile. \"Force of habit. I do that with everyone close to me.\"\n\n\"Right.\" he was looked away from her with an expression of extreme anxiety. She had a feeling that telling him about her little... well, her BIG secret probably wouldn't make him any less anxious. \"So, what do you do for fun Meranda?\" He asked it like he was playing a role in a movie.\n\n\"Well, I work out early in the morning.\" She said. \"Then I work,\" She explained. She pursed her lips, \"I usually read, or browse the web after that.\" She continued. \"Sometimes on weekends I'll have drinks with old friends.\" She shrugged, \"I'm a pretty simple woman actually.\" She did not want to admit that most of her free time was either masturbating, or trying not to. \"What about you?\"\n\n\"I'm pretty busy with school, work, and my business.\" He said. \"I don't have many friends.\" He admitted.\n\n\"Well, I hope you can call me a friend at least.\" she encouraged him. \"If you have any time, you can come with me and my friends on weekends.\"\n\n\"I can't drink yet-\"\n\n\"I wont tell.\" She put a finger to her lips with a wink. He looked at her again just to look away. She must have reminded him of the other secrets she knew.\n\nShe supposed it was time. \n\n\"Denis, I told you I had a secret.\" she began. There was a sense of weightlessness that came with the statement. At if she had just reached the top of a roller coaster and the only way forward was down. \"It might be unbelievable.\" She said. \"But i-\"\n\n\"It's fine.\" Denis shook his head. \"You don't have to tell me.\"\n\n\"I want to-\"\n\n\"No, I get it.\" he gave her a kind smile. \"I can tell it's really embarrassing. If you don't want to, please don't.\"\n\nShe smiled back. \"That is very kind of you Denis.\" she was still hesitant. \"In that case,\" now that he seemed a bit more relaxed, \"I'd be very interested to see your room. I have only ever seen it from one angle.\"\n\n\"My room?\" he asked. \"I'm not sure-\"\n\n\"Oh, I'm so sorry!\" she took out her phone and checked the time. \"I've taken far too much of your time.\" She had not planned to keep him long. She was about to stand but stopped. The sudden motion caused the tape to slip. \"Whoop!\" she sat her ass back down and squeezed her legs together. \n\n\"Did you trip?\" he asked. \"Are you okay?\"\n\nHer cock was hard inside her clenched thighs. If she had not closed her legs in time it would have popped out the front of her skirt. \"Ha ha!\" She laughed at herself, mortified. How was she going to get out off this? \"This is very embarrassing.\"\n\n\"Is something wrong?\"\n\n\"It's,\" she started, \"A medical condition.\" She said.\n\n\"Is this,\" He started, \"A female problem?\"\n\n\"Oh I wish.\" She groaned. She had those too, but she'd rather have cramps than this. \"Could you, um,\" She looked to him, putting her hands on her lap, \"Look away for a second?\" She asked bashfully.\n\nHe looked like he was going to ask why, then stopped himself. He nodded, \"Sure thing bos-\" he shook, \"I mean, Meranda.\" He turned away.\n\n\"I'll tell you when.\" She said. She sighed and after a second, she spread her legs open. It flopped out, dripping with desire. God, it was already slimy from having fucked into her thighs. Was she really this turned on? She touched it and tried to weasel it back down between her legs, but it was far too hard now. The tape was soaking wet and useless. She just felt the warm feeling of touching herself. She looked to Denis with desire. He had turned his back on her. She could see in her minds eye what his body would look like under all those business clothes. \n\n\"Ah!\" She covered her mouth in horror. Her hand had been stroking herself on instinct. \n\n\"Are you still okay?\" Denis asked. \n\n\"Don't look!\" she begged as she tried to think of the geometry involved with hiding this under her skirt. She pushed it to the side and tried to fit it up and under her waistband. It was extremely visible. Not only that, but it fucked between her band and her belly. \"Just another second!\" She whimpered. Her shirt was just long enough to cover the head if she was careful. She had her purse nearby. She put it in her lap. It was just enough to cover her now. She stood up, shuddering as she did. \"Okay!\" She gulped and turned to keep her purse at the correct angle. \"You can look now.\"\n\nHe turned. He was confused by her posture. \"Are you sure you are okay Meranda?\"\n\n\"I should go.\" She explained. \"Medical emergency.\"\n\n\"Is it the secret you were going to tell me?\" he asked. She faltered.\n\n\"Yes.\" She admitted. \n\n\"Oh, okay.\" he nodded. \"Um, thank you for coming.\" He stood and walked her to the door. As he did she could not keep her eyes off of him. Not his shoulders, his waist, or his butt. Those legs too. Her teeth clenched and she humped her purse while he wasn't watching. He turned and she tried to stand still. \"This was fun.\" He gave a kind smile. \"I really do appreciate it.\" she was so hot right now. He began to open the door. \n\nShe charged forward and slammed it shut with one hand. He was taken aback from her speed and strength. \"Meranda?\" He stepped back, shocked.\n\n\"Denis-\" She could not help herself. \"Do you promise not to tell anyone?\" she asked, desperate to tell him.\n\n\"I said before, you don't have to-\"\n\n\"I want to. I really want to.\" She said, her breathing labored. \"Please, tell me you will keep it a secret.\"\n\nDenis nodded. \"What is this about Meranda?\" He asked. He gave an embarrassed smile, \"It's not like it can be any more embarrassing than my secret-\"\n\nShe dropped her purse. She didn't say anything else. She put her hands behind her back and stood strait and tall like a soldier at attention.\n\n\"Holy fuck.\" His eyes were locked onto it. It was obvious under the cloth of her skirt and blouse. \"Uh, Meranda,\" He gulped, looking up to her face, and then back down. \"Is that-\"\n\n\"Yep.\" She nodded. \n\n\"Is that a toy? Did, did you put that on just now-\"\n\nShe did not intend it. She really did not. But her cock had been twitching with her heartbeat, and her hips gave a small forward thrust. The strain of her cock was too much, and at that very moment, the zipper on her skirt broke open and it fell to the ground. Her cock came down like a guillotine and bounced, pointing In Denis's direction.\n\n\"Ahh!\" he backed away, nearly falling. She looked down, her skirt at her ankles and her cock pointed at her employee. Her panties were on, but did nothing to hide her dick.\n\n\"So, now you know.\" She explained as calmly as she could. It felt a lot better to have it in the open, though, she could tell she was scaring him. \"Oh, to clarify, just in case,\" She lowered her panties and widened her legs before pulling her cock up to show what was under. \"I am a woman.\" She shrugged. \"If that matters.\"\n\n\"Holy shit.\" he cursed. \"You, you really are a-\"\n\n\"A what?\" she tilted her head curiously. Was that a name for someone like her?\n\n\"A Futa?\" He said.\n\n\"Oh, like that book I saw on the shelf-\" she suddenly realized the connotations. \"You, you have comic books about-\" She looked down at her cock, then him. \"So.\" She gave a bashful smile, \"Do you like this then?\"\n\n\"Uggghhhh.\" She could see fantasy and reality assaulting each other in his mind.\n\n\"It's fine.\" She reached down and tried to pull her skirt up. \"Damn, the zipper is broken,\" She grimaced and held her skirt together with one hand and her purse with the other, barely keeping herself decent with both hands. She gave Denis another smile. \"Well, now you know.\" She said happily, trying to hide how awkward this whole situation felt. It was nice finally confiding in someone. \"It looks like you don't know what to do. So,\" She reluctantly asked, \"Will you get the door for me? My hands are a bit tied right now.\"\n\nShe watched him get up on shaky legs she backed away to give him room. She closed her eyes and pouted. This could have gone a whole lot better. He was probably going to quit his job now. She heard the door open and regretted being so forward. She should have just walked out the first time he was letting her out. She turned to leave and opened her eyes.\n\nBut the door was not open. \n\nShe turned around. Denis was at the door to his room. He was halfway in, looking at her with curiosity. \"Do you want to come in?\" he asked in such a high pitch that she instantly recognized the practiced, girly tone of Violet Iodine. She wasn't sure if it was intentional or not. \n\nShe nearly cried, but held it back. She nodded and walked awkwardly to follow him into his room.\n\nThere were his posters, his webcam, and more books on shelves. His bed was a mess, as was much everything else. \"Really sorry about all this,\" he picked up and moved some clothes on the ground. \n\n\"It looks different up close.\" She looked at some of the figurines and felt her heartbeat quicken. Even compared to the ones outside, these little toys weren't just pretty, they were raunchy. And the posters were adult oriented as well. The whole room was filled with all sorts of sexy things. Not just sexy though, there were some oddities, like robots, airplanes, and things more the style of a hobbyist. \n\nShe noticed he was just looking at her. He was watching her look around his room. She smiled at him. \"A little messy.\" She admitted. \"But that's fine.\"\n\n\"Is there anything in particular you wanted to see?\" he asked. \"Or-\"\n\n\"Where do you keep your outfits?\" She asked.\n\nHe gulped and showed her. The closet had more than she had ever seen on him. There were wigs of various colors, several sets of costumes ranging from cute to kinky. \"There are more in storage.\" he said. \n\n\"I haven't seen half of these before.\" She wanted to touch them, but her hands were occupied, \"Um, Denis?\" she asked, \"Do you mind if I get comfortable?\" She asked. \"I mean, I've seen so much of you, I don't really mind if you ogle me a bit.\" he nodded slowly, sitting on his bed and watching her. \n\nShe let her skirt drop again and put her purse next to it. With her cock out, she rummaged through his clothes. He seemed entertained enough look at her. He even switched targets to her rear when she bent over. She was happy about that. It would have been strange if her cock was the only thing he liked. \n\n\"Why don't you wear these?\" she asked. Some of them looked slutty. Some of them looked strange. Others, weirdly enough, looked like normal women's clothes. \n\n\"Sometimes I do.\" He admitted, \"In public.\" She gave him a scandalous look. \"Just to practice!\" he said. \n\n\"Oh, Practicing.\" She looked around him room, \"For your business?\"\n\n\"Right.\" She withed a smirk. If that was what he wanted to tell himself, she wouldn't question it. \"It just feels more comfortable sometimes.\" He admitted. \"And I like how people will pay attention to me.\" He admitted. \n\n\"Oh Denis,\" She smiled at him. He was still taking glances at her cock and then looking away. \"It is okay to stare. I give you permission.\" She said, \"In fact,\" she remembered the tightness around her chest. Her binder was uncomfortable. \"I'd like to see you in one of these.\" she said. \n\n\"Really?\" He seemed reluctant. \"I don't know-\"\n\n\"Well, if I am going to be here any longer, I was thinking of getting even more comfortable.\" She said. \"I really can't stand to wear my bra any longer.\" she said. \"But if you are ready for me to leave-\"\n\n\"J-Just give me time to change!\" He stood up quickly. She smiled and nodded, taking his spot on the bed. \"Which one?\" he asked.\n\n\"Whatever you want.\" she said, \"But I always like the cute ones the best. You don't have to be sexy.\" She looked away, \"I'll just look at some of these while I wait-\" she heard him changing quickly behind her as she peered at the book titles. If these were in his room, they must be even more raunchy, right? She saw that word again on another book, \"Futa Planet Isekai\" and picked it up. She opened it to a random page. \"Oh my!\" She covered her face when she saw the inside. This wasn't a comic book. This was porn. She did her best not to turn around. She had no idea this was something that people bought. She flipped through some more pages and felt her cock twitch. Once she was fully educated on Futa's, she put it back on the shelf and reached for another title.\n\nThis one was called \"Turned into a girl.\" She scanned through it. It was more hardcore than she was ready for, but that didn't stop her from reading. There was a feminine man tied up and punished in all sorts of ways. She flipped through and even learned a few things herself. She considered herself quite sexually open, but even she giggled and covered her mouth at some of these things , \"Oh, I didn't realize they made Chastity belts for guys too!\" She continued to read. \n\n\"Meranda, I'm ready.\" The woman's voice surprised her. That was not Denis. At least, not the way she recognized him. She turned. In front of her was a girl with blue hair and eyes. She wore an open black jacket that hugged her arms and waist until just under her breast line. It was over a light blue tank top with white stripes. One sleeve was hanging off her shoulder. Her chest was feminine, with two lumps that curved into her midsection, and her face was in a shy pout. Eyeliner was spot on, the lipstick was pink and subtle. Her plaid skirt was a bit short, if she leaned over her ass would hang out. She wore black stockings up to mid thigh that were strapped to garters, leading under the skirt. Finally, around her neck was a collar. Not a choker, or anything like that. A red, leather, dog collar. The leash was flipped behind her back. She looked adorable.\n\n\"So?\" the girl asked and shuddered, \"What do you think?\"\n\n\"Denis?\" she had to ask.\n\n\"Call me Violet. Please.\" The demure voice said. \"I want to keep work separate. This is professional.\"\n\n\"Ms. Iodine then?\" She played along. \"Am I doing this right?\"\n\nViolet nodded shyly. \"That's the name I use online. Or when I need to buy stuff for my business.\"\n\n\"You are beautiful Violet.\" Violet smiled and wriggled in response. The entire personality had changed. Denis was so repressed and withdrawn, but Violet was naughty girl. At least, Meranda suspected as much. \"I guess a deal is a deal,\" She stood up and lifted her top off, and then her binder. She let it all hang out. She was wearing nothing but her panties now. That was annoying. She decided to slip those off too. iI was slow, and she was sure to wiggle her booty and watch Violets reaction.\n\nViolet was stunned and watching in awe. She had less inhibitions than Denis. Meranda giggled as she curved her back to rise back up to her full height. She was completely naked in front of her employee now. \"You like what you see?\"\n\n\"Yes Meranda.\" Violets hands were tight at her chest. Meranda laughed. \"What?\" Violet looked down. There was a bump forming under her skirt. She went even more flushed, \"Oh, well,\"\n\n\"Violet.\" She made her way over to the shy girl. As she did she noticed another part to the costume. She looked around at her behind. \"What is that?\" She questioned, pointing to her upper leg.\n\n\"Oh,\" Violet shuddered and gulped. She turned to show it, \"So you noticed-\" there was a pink little plastic box hidden under the top of her leggings. The box had a wire that lead up, under the skirt. \"It's,\" she gulped. \"This is the remote.\" She produces a small plastic handle with a knob and a button on it. \"It, um,\" She swallowed hard, \"It vibrates when you press the button.\" She mumbled, almost too quiet to hear, \"One in front, and one in the back.\"\n\n\"Oh!\" She held it in her hands. \"So, if I do this,\" she pressed the button. Nothing happened. \n\n\"The knob controls-\" Violet started.\n\n\"Oh, like this,\" she turned the knob from 0 to 10.\n\n\"OOOOH!\" Violets knees bent inwards and ankles splayed. Her hands went to her groin and her eyes widened with surprise. \"Meranda!\"\n\n\"Whoops! Sorry!\" she lowered the setting. \n\n\"Hehehe,\" Violet was shaking and laughing. \n\n\"You are really good at this. You even screamed like a girl.\" Meranda said.\n\n\"Thank you.\" Violet squirmed. \n\n\"Violet.\" She used the name he wanted her to use, \"All games aside,\" She looked down at her cock. If she didn't fuck something soon she was going to go crazy. \"How do you want to do this?\"\n\nViolet grimaced and looked away. \"Meranda,\" She started, \"It's always best for me, if I'm not the one in control.\" She said. \"Denis has to be in control all the time.\" She said. \"And Denis really wants a girlfriend.\" She continued \"But Violet,\" she paused and smiled a naughty, but still shy smile, \"Violet wants to be forced into it. And she doesn't care by who.\" She gulped. Meranda could tell the creature was salivating beyond normal.\n\n\"Oh.\" Meranda could get behind that. Honestly, she could get behind most anything now so long as she got to fuck it. \"Um, so I guess,\" She seethed as her cock beat to the rhythm of her heart. She was too turned on. \"How about you, um, tap me twice if I'm going too far then?\" She asked. \n\n\"Oh, that's sounds good!\" She nodded. \"Or a safe word?\"\n\n\"You wont be able to say anything.\" Meranda said. \"Not for what I'm planning.\"\n\nViolets face went cherry read. \"Oh! Well, yes then, that would be fine.\" She nodded with a smile.\n\n\"So,\" Meranda said \"Violet.\" She wanted to be sure, \"You want it like the way I saw in your books?\"\n\nViolet nodded.\n\nMeranda didn't need any more than that. \"Then,\" she reached for Violets face and caressed down her ear and long neck till the reached the collar. She took the leather leash in hand and wrapped it around her palm. \"I want you to kneel.\" She said, trying her best to give Violet what she wanted, \"Slut.\" Violet hesitated. \"Now!\" she tugged down on the leash. Violet yipped and fell. She was shivering, but Meranda could tell it was from lust. \"What a pathetic sissy.,\" she stepped over the leash with her long, strong leg and held the strap between her legs. She pulled Violets face so close she had press her face against the cock. Now she could pull it and force Violets mouth around her cock. \"Open your mouth.\"\n\nViolet obeyed, her tongue sticking out. \n\nMeranda pushed the back of Violets head with one hand and pulled with the strap with the other. When lips touched her cock Meranda was in heaven. So that was what getting head felt like. She suddenly understood the appeal. \"Good girl,\" she had the remote in the same hand as the leash. She set it to 1 and held the button down. Violet hummed around her cock. \"You are going to come sucking my cock.\" She ordered. \"Deeper!\" she commanded and pulled. Violet's mouth went wide around it. She tugged till she felt resistance. Violet could hardly wrap her lips around the head before she pulled back frantically. \n\n\"Too far?\" She asked. Violet shook her head. \"Then,\" Meranda thrust forward. She felt Violets throat contract. She heard Violet gag. She saw Violet clench her hand into a fist. She wondered if Violet would tap out. Instead, Violet slowly put her arms behind her own back and held her own elbows. \"Good slut.\" She fucked the whores throat. Violet's eyes rolled up. Meranda set the vibrations to 3. Violet's eyes fluttered as she was face fucked. She heard her captive sputter and slurp, her body convulsed. She worried she might be pushed Violet too far.",
        "Then she felt something warm on her toes. She looked down. Violet had just come. She was shaking and whimpering. The front of her skirt was damp and her hips were bucking. The come seeped through the fabric and down, dripping onto her feet. \n\n\"Haha!\" Meranda laughed, \"Wow, so soon? Really?\" She took her cock out of Violet and sighed in pleasure. She pulled her slave to salivate down the length, resting her cock on Violets face. She saw the mascara start to run. Violets eyes were watering. \"It was really that good?\"\n\n\"It's!\" Violet gasped, her body quivering, \"Still on!\"\n\n\"Oh!\" she lowered the setting. \"Hehe,\" She saw the little fucktoy panting and recovering slowly. \"Show me. Show me under your skirt.\"\n\nViolet slowly complied. She shuddered when the fabric moved across her skin. As she lifted the moist garment with her fingertips Meranda saw Violets cute, twitching cock flop out. A pink, vibrating bead was taped to the head of his cock.\n\n\"If you were a boy,\" She said, \"You might be embarrassed by how small that thing is.\" she lightly kicked it with her toes. Violet crumbled over with a look of ecstasy as the touch. \"Haha,\" Meranda pulled on the leash in waves, forcing Violet to hump her toes. She felt the limp cock slide across her feet. Violet grabbed her leg and humped her. \"What an animal.\"\n\nMeranda was horny as hell, but this was also very fun. Having so much control of Violet was empowering. Violet licked up her thigh and groaned, \"Meranda,\" she looked up at the cock that dangled before her, \"Who do you like more?\" She begged with her eyes, \"Me, or Denis?\"\n\n\"I don't know.\" she moved her feet to place Violets cock between her heel and the ground. She lightly ground it. Violet had to spread her legs further to allow it to happen, and she trembled at the pressure. \"You are both pretty pathetic.\" She inhaled sharply, \"But, if I had to choose,\" Violet looked up hopefully, \"I think Denis looks a lot better with a makeover.\" \n\nViolet smiled, \"Yes, Meranda-\" \n\n\"Maybe Denis should think about wearing panties and a bra to work?\" Meranda offered.\n\n\"Ohh!\" Violets soft cock twitched under her toes, \"Yes! Great idea Meranda!\"\n\n\"I think it's time I really showed you who's in control.\" She pet Violets face.\n\nThen, she lifted the trembling, post-orgasmic girl by the armpits and dropped her onto the bed with ease. \"Eek!\" Violet yipped and smiled, her hands bashfully across her skirt and she bounced. Meranda reached and pulled Violets panties halfway over her ass. \"Ahh~\" She cooed, her arms going back to support her as she leaned back. Meranda felt a wire and followed it with her fingers till she touched Violets puckered opening. It was going into her. She pulled it lightly. \"Th-Thats-\" it popped out slowly. She watched Violets face relax as the small, slick bean was removed. Meranda giggled as she reached for the tape nearby and attached it to the other side of the slick, slimy, limp cock. As she did, it twitched, beginning to rise up again. \"Meranda,\" Violets chest heaved as she lifted the cock-girls heels up. Her stockings covered to her upper thigh, and then her panties were bunched, and then Violets dick was pulled out and back, bouncing up against the waistband just above her lubricated sex. \"Be gentle?\" She asked.\n\n\"Is that what you really want?\" Meranda asked as the touched the tip of her cock to the willing sphincter. Violet bashfully looked away. \"Liar.\" She cooed as she pushed.\n\n\"Oh~\" Violet was blushed all over. Violets cock twitched to full length as another cock penetrated under it. \"It's so big!\" Meranda pushed the sluts heels back further, forcing her hips higher to accept the cock. Violets eyes widened, her mouth gaped, \"Oh god!\" She could hardly resist shoving it in, but she wanted Violet to like it. She wanted to be invited over again. So she delicately pierced into her subordinate. \n\n\"So tight.\" Meranda groaned, \"You better relax. Because you are taking all of this cock.\" She felt the bulb finally sink into the wet canal. \"Ohh!\" It felt amazing. She saw Violet's eyes twitch and a whimper escape her maw. \"Have you ever have anything this big before?\"\n\n\"No Meranda,\" She rasped, \"None of my toys are like this.\" She smiled and cried out, \"I, I can feel your heartbeat Meranda.\" it was pulsing through her cock. She sucked on her lips. It wasn't nearly enough for her, but she knew it was still too tight. She reached for the lube and drizzled even more on her shaft before slowly rocking back and forth. \"Oh God!\" Violet grabbed the sheets. \"S-So good! Right there!\" it must have pressed up right on her special spot inside. Meranda pressed the first setting to the remote control. As she did she saw Violet go cross eyed. \"oh.\" it was a quiet, but guttural chirp. \"OH!\" she shrieked right after, her legs beginning to shake. Mernada knew what was coming. She quickly tilted Violets cock slightly. \"Oh! Oh! Oh!\" She shot out another load of come up into the air. It landed back onto her body. Her navel, and her face. \"Oh!\" Another load. And another. Then she started dibbling. It was less than before. \"Meranda!\" she cried out. Her mascara was running, \"You, you made me come again!\"\n\n\"What a cute little whore.\" Meranda taunted her, playing with her shrinking, vibrating dick and making her squirm and shake in the sheets. \"And you still haven't taken all my cock yet.\" She pushed in. It went is so much easier now, even though she felt the convulsions. Violet tightened in waves as she slid deeper, and deeper. Violets teeth were clenched and eyes squinted with strain. Violets limp cock spurt out another tiny load of come, as if it had been just squeezed out of her prostate. \"Cute.\" Meranda giggled. \"Halfway there now.\" She sighed to herself.\n\n\"Ow.\" She heard Violet whimper. Meranda slowed. \"Ow Ow.\" She tensed. The cock was not getting any less friction.\n\n\"Let's say here for a while. \" she dabbed yet more lube on her own cock, pushed violets legs over her face, and fucked her with the first six inches of her cock.\n\n\"Oh Meranda!\" She gasped. \"Oh!\"\n\nShe wanted more. She wanted the full length. She was so horny, but she was going to be on edge still she was satisfied. \"Little cock tease!\" She cruelly spat, \"Just relax and take it!\" She scowled slightly. She was playing a character, but she was also frustrated. She had been so turned on all day, and this felt like yet more teasing. She wanted more. She wanted it all. She bit her lip tight as she dared to press even deeper.\n\n\"Eh! Eh!\" She saw Violet yip and groan. Violet was looking at her jugs as they bounced. They were quite big, and right in the little harlots vision. \"It hurts.\" Violet cried as if it were a personal failing. Meranda slowed, grimaced, and put even more lube onto her cock. She was almost there. Almost at the full length.\n\n\"Deep breaths dear.\" She cooed, leaning over and letting her tits fall into Violets face. \"Nice and easy.\" Meranda felt violets legs shake as she squeezed in the final inch and folded the slut, \"Oh fuck yes that's good!\" Violet was shaking. \"Such a good girl! Coming again?\" she pulled back and then pushed in. \"What a good slut!\" It was almost painful to be so gentle, but she didn't want to hurt Violet.\n\n\"It's,\" She heard Violet squeak as she came, \"All the way in!,\" She heard Violet groan. \"Meranda, it's so big,\" \n\nMeranda stood up tall again. She looked down at Violet. She saw the limb dick and balls bounce on her pelvis as she fucked under it. \"Pathetic.\" she speed up, finally allowing her hips to do what they had wanted to do for hours, \"What's wrong? Can't get it up again?\" She rammed the rump. She felt the whole of her girth pressed and tight. Her thrusts went from a slow grind to a steady thump. \"Maybe this will help,\" She turned the vibration setting back up. \"That do anything for your little clitty?\"\n\n\"Oh! Oh!\" It looked like Meranda's cock had made it to Violets brain. Violet shook with each thrust and held her own legs tight against her body. Violets heels were still pushed up and back by Meranda, \"I can't think strait!\" She whined. \"It's so much!\"\n\nMeranda drew out ten inches and rolled violet to her stomach. Then Meranda thrust in back in. She wanted to fuck the girl from behind now. Violets limb cock was pressed against the sheets as she fucked her ass. She was a well greased ramrod now, and Violet was bent over and fucked silly. Violet said something else, but she was babbling into the sheets. She was mewling. \"C-Come,\" She heard Violet stutter between groans, \"C-C-C-Come...\" \n\n\"I just started to have fun, and you are going to come again?\" She panted. She grinned and upped the setting of the vibrators. She was not sure how high. Violets mouth opened, her tongue falling out. She wasn't trying to talk anymore. It was like Meranda's cock was forcing the air in and out of Violets lugs now. She heard the breathy groans with every thrust. She was looking back over her shoulder, her tough out and drooling. Meranda pulled back on the hips till Violets legs and cock were off the edge of the bed. \n\n\"What a nice ass-pussy,\" Meranda cooed. She was halfway to coming now, maybe. \"You make a wonderful fucktoy Ms. Iodine!\"\n\n\"C-C-C-\" Violets face twisted as her dick spurt again. It was so little now. It was a steady stream seeping out of her cock to the floor, \"Gah!\" she through her head back, shaking and groaning. \n\n\"So dramatic.\" Meranda growled. \"I guess I'll try to speed up,\" she fucked as fast as she finally wanted to. She felt sweat drip from her body now. She slammed herself so hard that the limp, seeping dick spurted like a cow udder with each bounce. \"Ready?\" She sighed, \"Let's see what you've got!\" She rammed up the vibrations to the highest just as she was nearing her peak.\n\nViolet was screaming in falsetto, still creaming, \"Fuck! Fuck! Fuck!\" her eyes rolled her body shock, \"I can't take anymore!\" She she whined, \"Ah! Ah! Ah!\" \n\nMeranda stopped the vibration just before she came. She blew into him, her toes lifted her heels up and her hips thrusting forward as much as her back let her. She lifted Violets back end into the air. Violet was gasping and twitching and seeping as she was filled up to the brim. Meranda pulled back and thrust again, filling Violet with another load. And then another. Violet was moaning and a whore all the while. Meranda gave a satisfied growl with each hard thrust.\n\nThen she pulled out, aimed, and stroked all over of her pretty little toys ass and legs. She still had a few strings left to pour on top of poor little Violet. Violet was still gaping and twitching as Mernada covered her in spunk. She flipped the pathetic creature and aiming for her front as well. Violet had to shut her eyes as several ropes pooled on her face and hair one after the other. A full serving when strait into her open, moaning lips. Meranda rubbed her hard, massive cock on Violets tiny limp pecker as she plastered the tight, sexy body with a glaze of sex. \n\n\"Whew!\" She took a deep breath, her final twitches delivering her come to Violets navel. \"I really needed that!\" She giggled. Violet was panting and wide eyed. \"Are you okay?\" She asked, a bit concerned. Violet looked a little, well, broken.\n\n\"I'm fine,\" She chirped. \"Just-\" She shivered, \"Oh-\" her cock still seeped, her asshole was twitching and overflowing. \"T-Tired.\" She squeaked. \"I've never come so much!\"\n\n\"Oh honey,\" She leaned over and pressed her breasts and cock onto Violet, hugging her and pressing with her weight. Violet groaned. \"That was very nice!\" She pet Violets head. \"So much better than me doing it alone. You are so fun to play with.\" She stood up and looked down and bit embarrassed, \"Actually,\" she gave a naughty shrug, \"I know it sounds cruel, but, Violets seeing you like this,\" She humped her cock against Violets, \"My cock just wont go soft! It's hard again!\" Violet whimpered. \"Hmm, maybe later then?\" She offered. \"You are just so cute when you are fucked silly.\" She put her hand under Violets shirt and played with a breast with her cum-slick finger. Violet twitched and groaned. \"I think, maybe, I can rub one out in the shower.\" She said. \"And if you want, you can let me come over you again.\" She offered, \"I saw a swimsuit in your closet. Maybe you can wear that?\"\n\nViolet was still panting breathless. \"Meranda?\"\n\n\"Yes?\" She blinked. Violet looked like she was about to refuse. \n\nThen she gulped and said, \"A one piece, a two piece, or a bikini?\" She offered. \"And, a swim cap or a wig?\"\n\n \n"
    ],
    "authorname": "FemFreak",
    "tags": [
        "futa",
        "femboy",
        "crossdress",
        "anal",
        "oral",
        "submission",
        "humiliation",
        "employer"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/violet-iodine"
}
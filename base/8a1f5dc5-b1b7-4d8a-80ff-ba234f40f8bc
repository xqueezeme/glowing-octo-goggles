{
    "title": "Lesson #01",
    "pages": [
        "She always complained to my Mom that she was twenty pounds over weight and twenty years too old \u2013 my girlfriend's mother that is. Forty did sound old to me, but I liked her the way she was \u2013 big, really big boobs. The first time I saw her without a brassiere I thought it was an accident. Sunday I had walked over to her house to help move the lawnmower \u2013 I always cut their grass since her brother joined the army two months ago - and she hurried out to show me where to put it. She had on a thin white T-shirt with nothing under it. Her boobs were jiggling like Jello as she walked down the steps and I got an instant hard on. I think she saw me looking at them. I went home, thinking about those big, bouncing boobs and jacked off.\n\nI'd been dating her daughter, Terri, for six months. Terri had nice boobs, but a lot smaller than her mother's. I was fuckin Terri regularly. I think her mother knew about us because Terri was on birth control pills. We had just graduated from high school and this was gonna be a great summer, except the first two weeks when Terri was gonna be away at some damn girls summer camp. She'd left for camp early Sunday with a bunch of girls on a big bus.\n\nThe next day, Monday, I got another call from Terri's mother. She wanted me to help her move some stuff in the garage. When I got there she was wearing the same T-shirt. And no brassiere! Shit! She just walked around, helped me lift stuff, and acted like nothing special was happening, with those big, beautiful tits jiggling ever time she moved. I couldn't keep my eyes off of them and I could tell she knew I was looking. Jesus!\n\nWhen we finished in the garage she asked me if I wanted a beer.\n\n\"You're almost nineteen now and eighteen is the legal age,\" she said.\n\nShe got two beers out of the fridge and we went into the family room. I was still looking at her boobs every time they jiggled and she didn't seem to mind. She even giggled, sometimes, when she caught me looking.\n\n\"What are you gonna do the next two weeks with Terri not here?\" She asked.\n\n\"I don't know. Just hang out I guess.\"\n\n\"Terri told me about what you two are doing,\" she said. \"She's on birth control pills, you know.\"\n\nI must have blushed because she laughed. \"No reason to be embarrassed, Billy. Most kids do it these days.\"\n\n\"Terri told me she was your first. Is that right?\"\n\nI knew I blushed this time. All I could do was nod. \n\n\"You really are a shy young man,\" she said. Have you talked about sex with your Dad?\"\n\nI shook my head no.\n\n\"With your Mom?\"\n\nI shook my head no.\n\n\"With anybody?\" She said, laughing.\n\nI knew my face was beet red. I was really embarrassed. \"Well ... \" was all I could say.\n\nShe kept laughing. Then she shook her shoulders to make her tits jiggle and I couldn't take my eyes off of them. I could see big brown nipples through the T-shirt and they were erect now. Oh shit! I just stared.\n\n\"Go in the kitchen and get yourself another beer.\"\n\nI got another beer and went back to my chair. I knew I was staring at her tits a lot and she didn't care \u2013 she thought it was funny. I finished the second beer and my head felt kinda light.\n\n\"Come over here and sit with me on the couch,\" she said.\n\nLike a robot I got up and joined her on the couch. She moved over close to me and put her arm around my shoulder and oh Jesus! Her tit just molded against my arm. Damn it was soft. \n\n\"Terri told me you like to play with her tits.\"\n\nOh shit! Now what do I say. \n\n\"You want to play with mine?\"\n\nOh my God yes \u2013 yes I wanted to but I couldn't say a word. \n\n\"Here, let me show you,\" she said, and so quick I almost missed it, she grabbed that T-shirt and whipped it off over her head. \n\nOne minute she was dressed and the next I was looking at two, big, beautiful, creamy white, naked tits, twice the size of Terri's. She had big brown nipples and they were erect. Oh my God! Big naked tits!\n\n\"Well, don't be shy,\" she said. \"Play with them\"\n\nI still couldn't talk but I lifted up her tits, cupped in my hands, and started to suck on an erect nipple. Oh sweet Jesus I was turned on. My cock was rigid and bulged in my pants. Oh shit \u2013 she was stroking it. Oh my God she was unzipping my pants. Then she had it out and her hand was moving up and down. Shit! She's jacking me off. Oh my God I'm gonna come \u2013 and I did. It was so fast I couldn't believe it. She kept stroking me until she milked out every drop of my cum. Then she laughed, pulled me closer and kissed me on the cheek.\n\n\"Feel better now? More relaxed?\" She asked. \"I'm sure you do. Pumping your first load will lower your thermostat and maybe you'll be able to talk. Can you talk now?\"\n\n\"No? Well, let me help you.\"\n\nShe stood up, pulled me to my feet, and led me into the bedroom, where she undressed me. I stood there by the bed, my dick dripping cum, and she took off her shorts and panties. Oh Jesus she was beautiful!\n\n\"Let's get in bed,\" she said, kicking off her shoes and pulling back the covers.\n\nI was still like a robot, following orders, speechless. She cuddled up against me and I felt her warm, soft body next to mine. My dick got hard again and she stroked it. \n\n\"You have a nice cock,\" she said. \"Terri told me about it. She said you always come very fast the first time, but she said you have a lot of loads in your balls. Let me feel. Oh yes, you have nice, big balls.\"\n\nFinally I said something \u2013 the first thing that popped into my head. \"What are we gonna do?\"\n\nShe started laughing, her body jiggling against mine and it was like she couldn't stop.\n\n\"Oh my God,\" she said. \"Some things are so precious and when you can't tell anybody you laugh to yourself for days. We'll figure out something to do honey. You can tell your Mom you were working in my garage. We've got all day.\"\n\nThen she said, \"I wanna ask you a question. When you went home yesterday did you jack off?\"\n\nI could feel my face getting red again. \"Well ... ah ... well ...\"\n\n\"You did, didn't you? Were thinking about my tits?\"\n\nI was sure that my face was bright red. I tried to say something but couldn't. Finally I just nodded.\n\nShe laughed again. \"That's okay sweetie. But you're not gonna have to jack off again for two weeks. I'm gonna take care of this thing while Terri's gone.\"\n\nShe had my dick in her hand when she said it. I was hard as a rock again. \n\n\"Roll over baby and get between my legs. That's it. Here, I'll put it in for you.\"\n\nThe next thing I knew my dick was inside her. Her pussy was not tight like Terri's \u2013 it was big and loose and dripping wet. I started to fuck her like I fucked Terri and she reached down with one hand and started playing with my balls. Oh Jesus it felt good. She put her other hand on my ass and pulled me deeper and lifted up her hips to give me a better angle. I felt those wonderful thrills in my dick and then I pumped my load.\n\nShe started laughing again. \"You're a fast little man. How many loads will I have to empty to get you to slow down?\"\n\nI rolled off of her. \n\n\"I better get one more out of you and then maybe you can fuck me right.\"\n\nShe bent over and started sucking my cock. It got hard again right away. Damn! It felt good. She was much better than Terri because she used her tongue on the head of my dick and it felt like electricity. It didn't take her long and she took my cum in her mouth and swallowed it. \n\n\"There, that's better. Can you talk now?\"\n\nI took a deep breath and said, \"You took it in your mouth. Terri never does that.\"\n\n\"Why not?\" She asked.\n\n\"She says she'd rather take it in her ... in her ... you know.\"\n\n\"Oh my God! That selfish little bitch! I can't believe I raised a daughter who's that selfish. Tell her that if she can do it for her brother she can do it for you.\"\n\nHer brother? She was sucking off her brother? I couldn't believe what I was hearing! I shuddered, not knowing what to say. Finally I could talk again.\n\n\"Terri was sucking off Zack?\"\n\nShe laughed. \"Of course she was. She'd been blowing him and fucking him for the better part of a year. Hell! She fucked him the morning he left for the army.\"\n\n\"But ... but I was dating her \u2013 she was my girlfriend. She said she was a virgin.\"\n\n\"Honey you're a growing young man. You're just learning about women. Lesson number one is that women lie. Especially about fuckin. Terri was nowhere near a virgin when you stuck that thing into her for the first time,\" she said chuckling.\n\n\"But she said it hurt!\"\n\n\"Believe me baby,\" she said patting me on the cheek, \"it didn't hurt. Her brother had been using that pussy hard for months before you ever got close to it.\"\n\nI laid there in shock. It was hard to believe that Terri would lie like that to me. \n\n\"Let's see if this thing works better now,\" she said starting to stroke my cock. \n\nI couldn't believe that I got another hard on so quickly. It just came right up.\n\nShe rolled me over between her legs and put my cock into her pussy and I started fucking her again. Oh this felt good! I felt like I was in control of my pecker for the first time. She reached down and played with my balls, pulled my head down next to her face, lifted her pussy up like before, and humped with every thrust. I just kept fucking her slow and easy. After about five minutes she started to moan and pump her hips harder, then she grunted with every thrust, then she trembled and groaned and I felt her pussy squeeze down on my dick, just like Terri's pussy. I felt my dick start to throb and then I pumped my fourth load of the morning and just laid there on top of her resting.\n\nAfter a minute she opened her eyes and looked up at me. \"Oh baby, that was so good. I enjoyed that. Did you like it?\"\n\n\"Yes mam.\"\n\nShe got the funniest expression on her face. \"Don't say yes mam!\"\n\n\"No mam \u2013 I won't.\"\n\nShe started laughing. \"Oh shit!\" She looked off to the side and talked to the wall. \"His dick is still dripping in my pussy and he calls me 'mam.'\" Then she looked up at me, pulled my face down for a brief kiss, and said, \"As long as you fuck me like that honey, I guess you can call me anything you want to. I haven't enjoyed a fuck that much in years.\"\n\nWe laid in bed and snuggled and I played with her tits. It was all very relaxing. Sex with Terri in the car had never been like this. After a while she got out of bed.\n\n\"Let me get you another beer honey. We have a long day ahead of us.\"\n\nShe saw me looking at her tits and put her hands behind her head and pulled her elbows back to show them off.\n\n\"Like 'em? Well baby you got two weeks to play with 'em. Just as long as you keep fuckin me the way you just did. Is there anything I can do besides get you a beer?\"\n\nI hesitated, thinking about pictures I'd see of naked women and then I said, \"Could you put on a pair of high heels?\"\n\nShe burst out laughing. \"Honey, I'm gonna get the sexiest pair of spike heels out of my closet and prance around in 'em buck naked for your enjoyment. Hell, I'll play some music and dance if you want me to. And then, you're gonna fuck me again just like before. We're gonna wear that damn thing out and when you get home tonight you won't even think about jacking off.\"\n\nShe did. And we did. And I did. And then I didn't. When I got in bed that night, I was exhausted, my pecker was sore, and the idea of jacking off never even crossed my mind. \n\nTuesday morning I woke up with a hard on. But no way was I gonna waste it using my hand. I had something better waiting. I told Mom I was going to the mall to play video games and about ten o'clock I headed for paradise. When I got there she met me at the door laughing. She had on a long silk negligee and spike heels.\n\n\"This is a funny way to dress at 10 AM honey, but I think it turns you on.\"\n\nIt did. My dick got hard right away. She could see it in my pants and she started to laugh.\n\n\"Oh that's a beautiful sight baby. Let's see ... if I remember right, you gotta pump three loads before that pecker behaves.\"\n\nWith that she walked over to me, unzipped my fly, pulled out my cock, got down on her knees right there in the front hall, and said, \"Let's get that first load out right away.\"\n\nIt was less than a minute! I swear it was less than a minute, before that warm wet mouth and tongue brought me off. Jesus it felt good!\n\nShe got up off her knees, swallowed my cum, and kissed me on the cheek. \"One down and two to go baby, and then you're gonna fuck me. But first, how about a bloody Mary?\"\n\nWhen I said, \"Yes mam,\" she started to laugh like hell. \n\n\"I wish I had somebody to tell about you. Oh sweet Jesus!\"\n\nAfter the second bloody Mary I got light headed. I was sitting on the couch in the living room watching her dance slowly to music and taking off her clothes. The negligee came off first and, then, her brassiere and panties and she danced for me naked, except for heels, hose, and garter belt. Oh sweet Jesus! \n\nHer body was more beautiful than any picture I had ever seen \u2013 and it was real. Those big tits swayed as she danced and when she saw my eyes on them she would shake her shoulders to make them jiggle. Her hips were smooth and lovely with a thin strip of creamy white skin from her bikini. Her arms and legs and belly were bronze. Her tits were creamy white and she had two creamy white triangles on her ass. If she was twenty pounds overweight I sure couldn't tell it.\n\nFor the first time I got a really good look at her pussy. Her beaver was dark brunet, thick and curly. It was the hairiest beaver I had ever seen. I had only seen one other real one, Terri's, but I had seen lots of pictures and none were hairier. It grew down and covered her pussy, except I could barely see the tip of her clit. \n\nShe saw me staring at it. \"I'm gonna give you a closer look at this thing later baby.\" \n\nShe saw how turned on I was \u2013 my dick was sticking straight up, out of my unzipped fly. \n\n\"Lets get rid of that second load,\" she said and I couldn't believe it happened so fast. That beautiful naked woman got down on her knees and took me in her mouth and before I knew what was happening I was pumping another load of cum.\n\nShe swallowed it and started laughing. \"Oh baby, you come so fast! I can't see why Terri won't service this wonderful thing. She's a selfish little bitch.\"\n\nShe led me into the bedroom and stripped me down. My head was light. I think I had had too much vodka. She kicked her shoes off and pulled me into bed. \n\n\"Now you're gonna get a closer look at this pussy. I'm gonna give you a new experience baby and I hope you like it. I know I will. You've never had a chance to eat pussy have you?\"\n\nI shook my head and started to say \"no mam\" but she put her fingers over my lips and chuckled.\n\nShe laid on her back and put a pillow under her ass. When she spread her legs her pussy was wide open and available. Taking my head in her hands she moved me gently down between her legs on my belly and she began to move my face around her pussy. It was a really big pussy - over twice the size of Terri's. It was spread wide and dripping wet and engorged like I'd read about. Her inner lips were thick and hanging out at least two inches. God! I thought, those are what caress my cock and feel so good when I fuck her. Her clit was the size of my little finger and rock hard with the tip sticking up like a tiny penis.\n\n\"Tickle my clit with your tongue baby,\" she said.\n\nI started to lick the tip of her clit and she moaned softly, \"That's it baby. Keep on.\"\n\nI got more of it in my mouth. Her pussy smelled and tasted exactly like anchovies and had the same pinkish brown color. I opened my mouth wider and started sucking her. She moved my head down so that I could take those thick wet lips in my mouth one at a time and suck on them. Then she moved me so I could lick that rim of thick curly hair that came down from her beaver around those big pussy lips. She guided me back to her clit and when I took it in my mouth she started to hump softly.\n\n\"That's it baby. Right there. Just like that. Right there. Keep on doing it. Oh yes. Oh please don't stop. Yes! Yes!\"\n\nShe was pumping her hips much harder now and groaning loudly. Suddenly I felt her body tremble and her pussy started to contract in convulsions as she screamed with each contraction. She lifted her hips up holding my head and I shoved my tongue in as deep as I could and felt her pussy grip my tongue like a strong hand. Oh Jesus I had never felt anything like this before. My dick was rock hard and I was humping the bed and suddenly I felt myself start to ejaculate, pumping my load on to the sheet. \n\nThen we both relaxed and lay quietly, my cheek resting on that big, hairy, wonderful, wet pussy. It was at least five minutes before she pulled me up beside her.\n\n\"Thank you, thank you, my wonderful young man. You've never done that before have you?\"\n\nWhen I slipped and said, \"No mam,\" she started to laugh.\n\n\"Let me tell you something honey,\" she said it as though she were letting me in on a conspiracy. \"If you do that for any woman the way you just did it for me, she'll be your slave. She'll do anything you tell her to do. Oh baby that was so good \u2013 you cannot imagine.\"\n\nThen she took hold of my cock. When she felt the cum, she looked down at the bed sheet and chuckled. \"I'm glad you enjoyed it too. That's your third load. Wonderful! You're ready to fuck me now. Want another drink first?\"\n\nWe both had another drink and rested.\n\n\"I owe you a very special fuck,\" she said. You like my tits so I'm gonna get on top and do the work. Has Terri ever fucked you that way?\"\n\nWhen I shook my head no, she mumbled, \"Lazy little bitch!\"\n\nShe rolled me on my back, sucked my dick briefly to get me wet, then, she climbed on top of me, reaching down to put my cock into her. She started to fuck me and her tits were dangling down right over my face and jiggling as she fucked. Oh my God! This was something really new and wonderful. I could just lay there, get fucked, and play with those big, beautiful, jiggling tits. She was humping me so that I could feel that big hard clit of hers rubbing up against me right over my pecker. That must have felt good to her because she started grunting and when I looked at her face she was staring off into nowhere and had a funny look. She was sweating a lot as she worked and it dripped off of her on to me. Then I felt my pecker tingle and I started pumping my load. Even after I finished, she just kept on humping and grunting and finally she collapsed on top of me groaning and I felt her pussy grab my cock and start squeezing. Finally she quit humping.\n\nShe lay on top of me panting. \"Oh sweet Jesus that was good!\"\n\nShe rolled off and lay on her back breathing heavily. Then she laughed. \"I haven't fucked like that in years. Doctor says that if I wanna lose weight I gotta exercise. That's the best damned exercise I know about. And I'm gonna do it a lot in the next two weeks. Did you like it baby? And don't say 'yes mam.'\""
    ],
    "authorname": "LynnGKS",
    "tags": [
        "older woman with younger man"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/lesson-01"
}
{
    "title": "A Traditional Swim Ch. 16",
    "pages": [
        "This story is part of a series. Chapters 1 through 15 will provide context. However, this story may, I hope, be enjoyed as a stand-alone work.\n\n*****\n\nHeather went back to college and Sara and I went back to the island after the nude meet in Tampa. We lived very quietly on the island. We stayed in touch with Heather, Ashley, and Sandy as their season progressed, spent time at Sally's bar, and continued to explore and make friends around the island. Actually, Sara made most of the friends. Her great personality and tremendous physical beauty drew all kinds of people to her. I just tagged along. \n\nSara started us on my rigorous training in January. We split between open water work swimming out of our cove and pool work at the local municipal pool. Since we trained nude, we had to hit the municipal pool ridiculously early each day to get done before it opened to the public. Sara's goal was to get us ready for another season of nude meets. However, while Sara was in regular communication with numerous people in her nude swim meet network, nothing was coming together. Apparently, too many people in this network were still involved in mainstream swimming and were simply too busy during the collegiate and high school swim seasons. Nonetheless, we trained religiously. When the calendar told us that we had made it from January to May, it was time to go back to Florida. We had been invited to Ashley's and Sandy's college graduation.\n\nWe were only in Florida for a few days. Naturally, Ashley and Sandy had family in and were spending most of the time around graduation with them. Although Rob had also graduated, he was missing the ceremony because he was already with the White Sox rookie league farm team. \n\nMuch of our time was spent with Heather. With Loren's tacit approval, Heather was able to get us into the university pool a few times where the three of us swam naked. Loren was also kind enough to invite us back to train with her team the following September, provided that we trained naked. Of course, we agreed.\n\nWe were sitting with Heather in the health food bar after one of our swims when Heather said,\n\n\"I am really not looking forward to the summer.\"\n\n\"Why not?\" Sara asked.\n\n\"I'm going to have to go home and spend the summer living with my parents. I only recently learned the joy of going naked and I have to give it up for three months. There is no way I can nude living with my parents.\"\n\n\"Can't you sneak out to a lake or stream?\" Sara asked.\n\n\"No. Since my body developed, I'm treated at home the way I've read that they treat women in Saudi Arabia. I'm not allowed out without an escort.\"\n\n\"That is absurd,\" Sara commented.\n\n\"Wait,\" I said. \"Your parents fully support your swimming, right?\"\n\n\"Absolutely,\" Heather replied. \"The scholarship saves them paying for my college.\"\n\n\"What if you could find somewhere more relaxed to spend the summer and explain it to your parents as training?\" I suggested.\n\nHeather and Sara both discerned where I was heading and started smiling. Heather's smile quickly fell, however.\n\n\"My parents don't know you. I don't think that they would go for me spending the summer with you on a Caribbean island unsupervised.\"\n\n\"Heather!\" Sara scolded. \"You're 18. You don't need your parents' permission to visit us!\"\n\n\"Yes, but, defying them on something like that would bring on a complete break. I really can't do that. Better just to do my thing out of their sight and hearing and let them think that I'm the good little fundamentalist daughter.\"\n\n\"What if,\" I asked, \"one of your coaches was with you?\"\n\nHeather and Sara both gave me questioning looks.\n\n\"Loren is taking Sandy on as a graduate assistant coach next season, isn't she?\"\n\n\"Yes,\" Heather said slowly.\n\n\"Maybe we can persuade Sandy to come down as your chaperone.\" I said. \"Would that overcome your parents' objections?\"\n\nHeather brightened. \"It might.\"\n\nSandy really had nothing to do until the swim season started next fall. She was more than happy to stay with us over the summer.\n\n\"I assume that I can pack very light,\" Sandy said, smiling.\n\nPersuading Heather's parents was somewhat more difficult. We had to enlist Lauren (who also thought Heather's parents were stifling her) to speak to them. Loren gave Heather's parents and enthusiastic endorsement of us and of the training Heather would receive on the island. Loren also assured them that Sandy, whom Loren trusted completely, would be there to keep Heather away from bad influences. Loren emphasized that a summer's training in an environment like ours could make the difference between Heather making the NCAAs and not. It was, of course, pure BS. But, everyone who knew Heather wanted to give her the opportunity to spread her wings.\n\n\"What do we do if your parents decide to visit?\" Sara asked.\n\n\"No chance of that,\" Heather responded. \"Mom and Dad have never been out of the U.S. Dad likes to say (Heather puffed her chest mockingly and also quite strikingly) 'If we don't have it in America, I'm not interested.'\"\n\nThe deal was done. We scrambled to get Heather a passport on an expedited basis. A week after graduation, Heather and Sandy joined us on the flight back to the island. As an additional bonus, Ashley had agreed to come down for most of July. She started graduate school in Gainesville in late August.\n\nAfter a day of relaxation, Sara had all four of us training very early and very naked at the municipal pool. Heather was loving it. At her suggestion, we began riding nude in Sara's SUV from the cove to the pool. We went over early enough that no one was out or on the roads. Coming back, however, there was human activity and we were typically seen. Sara, Heather, and I enjoyed being seen. Sandy was discovering that she also enjoyed being seen nude. She was certainly worth seeing.\n\nSara was continuing to work her network to arrange some nude meets. One afternoon, one of her contacts sent her a number of pictures, probably posed, showing something that looked like a swim meet in which the ladies all wore suits and the men were all nude. Sara's contact included the question, \"What about something like this?\"\n\nSara showed the pictures first to Heather and Sandy. Sara told me about it later. Heather wasn't impressed. For her, the attraction was that she got to go nude. Of course, Heather could not swim in any of these totally unsanctioned meets anyway for fear of losing her eligibility to swim at school.\n\nSandy's first reaction was \"having just the guys nude makes it more overtly sexual.\" Sara said that Sandy thought for a second, then said \"but, hell, it is sexual. What if we had one where the guys are nude and the girls wear suits and another where the girls are nude and the guys wear suits?\"\n\nSara liked that idea and began circulating it among her network. Apparently, the idea caught on. Becca and Jeff offered to host both meets at the pool in Tampa so long as they both got to compete. After some checking, they came up with dates on a Thursday and Saturday so that everyone could make only one trip to Tampa.\n\nIt was at this point that Sara disclosed the idea to me. She showed me the pictures of the naked men and suited women she had received. Sara gave me her \"persuasion\" smile.\n\n\"You'd enjoy doing that, wouldn't you?\"\n\n\"Yeah,\" I said. \"That could be fun. I do think that it is too bad if you ladies will be covered up though.\"\n\nSara laughed. \"Don't worry. We're going to do a second meet two days later with the girls nude and the guys in suits. In both cases, it will emphasize the nudity of the people who are nude. That should be fun. I think that we've got a fair number of people committed to swim. We're going to do the CFNM meet first, but the rule is that, if a girl swims suited in the first meet, she has to swim nude in the second.\"\n\nSo, it was on and I was committed to do it. Sara and Sandy would be swimming. Heather was coming along to help.\n\nI remember feeling a bit different walking into the natatorium in Tampa this time. It wasn't going to be a nude meet. Only we men would be on display. \n\nComing into the pool area an hour before the meet, we met Becca, Jeff, Pam, and a well-built young man. The young man was Jason, Pam's older brother.\n\n\"We needed another guy for our coed relay,\" Pam explained. That confirmed that Jason would be swimming tonight.\n\nAfter the introductions, Becca said, \"This is great. I get to swim tonight. I'm regret that I didn't get to swim last time. I'm just sorry that I have to wear a suit.\"\n\nPam smiled and said, \"Well Mom, you'll get to be naked Saturday.\"\n\nBecca looked at her daughter, smiled, and said, \"You went nude at the last meet, but I didn't get to.\"\n\n\"True,\" Pam responded, \"but I wasn't swimming. This time, I'll be bent over on the blocks showing everything. So will you Mom.\"\n\n\"I know,\" Becca replied. \"I'm looking forward to it.\"\n\nAt that point, Pam's friend and teammate April walked up.\n\nPam asked us, \"You guys remember April?\"\n\nI certainly did. April had helped run our last nude meet at this pool. Pam had talked her into to going naked. That had been April's first time nude amongst a lot of people and I think that she became a convert. Like Pam, April was a very, very lovely young lady.\n\nPam continued on. \"April is swimming tonight. She'll be the other woman on our medley relay.\" Pam grinned and added, \"And, April will be swimming Saturday night.\"\n\nApril said hello to us all. \"I'm happy that you invited me to participate. I'm really looking forward to Saturday. Scared, but also very excited.\"\n\nI couldn't help asking Pam and April, \"Are you worried about your eligibility? We did some checking and decided that it was too risky for Heather to swim in these meets.\"\n\nApril answered me. \"Pam and I graduated in the spring, so we don't have the NCAA to worry about. I doubt that USA Swimming will find out, or care if they do. It's not like we're submitting times from these meets or being paid to swim. I can't speak for Pam, but I really doubt that I'll be swimming many more sanctioned meets. These meets will be great for me because I can swim competitively in a more relaxed environment, have some fun, and make some new friends.\"\n\nPam agreed. \"I suppose that I could keep swimming sanctioned meets, but it's not like I'm fast enough to go to the Olympics or Pan American. Besides, I've got a chemistry degree I need to put to use. Swimming in these meets naked will give me the motivation to stay in shape.\"\n\n\"Shape\" for both Pam and April was a very beautiful thing.\n\n\"Changing the subject,\" Becca interjected, \"we're using separate locker rooms. That should create a bit of tension. Everyone will assemble in the hall outside the locker rooms and march into the boy-girl-boy-girl, or nude-clothed if you prefer. That should look interesting. And,\" Becca smiled, \"we've sold out both nights. Oh, and we want you in suits in the warm up pool.\"\n\n\"Damn Becca, why?\" I asked.\n\n\"It will be better if you don't get naked around the girls before the actual meet,\" she answered.\n\nI felt strange in the warm-up pool. I had not swum wearing anything in a long time. As I finished warming up, Sara came over with a younger man who was built like a top-flight swimmer.\n\n\"Harry,\" Sara said, \"this is Ed. Ed was a Pac-12 champion four years ago. He's the fourth on our medley relay. He'll anchor and swim free.\"\n\nAs I extended my hand to shake, I asked Ed, \"you ready for this?\"\n\nEd smiled. \"It should be fun. Besides, I don't mind showing my dick to see girls in the old-style suits. What they compete in now is not sexy at all.\"\n\nI had to agree. The competition suits in use now are ugly and cover the swimmer up in order to reduce drag in the water. The ladies in our group had decided to compete in older-style suits that were tight and cut very high on the hips and lower on the chest. These suits were not the fastest, but they showed much more skin and much more of the swimmer's figure. Frankly, they were sexy.\n\nAfter the warm-ups, the girls went off to put on their competition suits. We went into the men's locker room to strip off. After several minutes and quite a few piss stops, we all walked naked out into the hall. The girls were already out there. Most of them looked very good. As I walked down the hall to find Sara, I saw Trish looking great in a tight, very high cut red suit.\n\nTrish called out \"Harry!\" I walked over.\n\n\"How are you Trish?\"\n\nTrish looked at me a moment. \"Hairless?\"\n\n\"Yeah. Sara, Heather, and Sandy shaved me last night.\"\n\nTrish reached out, lifted up my dick, and looked at my balls for a moment.\n\n\"They did a good job. Hairless looks good on you Harry.\"\n\n\"Trish, that suit looks pretty great on you,\" I replied.\n\n\"Thank you, but don't I look better without a suit?\" Trish asked flirtingly.\n\n\"Of course,\" I responded, \"but the suit is pretty hot. Where's Larry?\"\n\n\"Back in Connecticut,\" Trish answered with what seemed to be genuine displeasure.\n\n\"Good luck and have fun,\" I said and walked on down the line to find Sara.\n\nI saw her quickly. Sara stands out in any group. In this instance, she was wearing a light blue one-piece that looked painted on. It was lower on her chest than a real competition suit and was so high on her legs that the back was almost a thong. Sara looked tremendous.\n\nWaiving me over, Sara said \"your place in line is here, behind Pam.\"\n\nPam was wearing a more conservative medium blue suit. Also high on her hips, it fully covered Pam's tight ass. Pam looked me up and down.\n\n\"You look good shaved, Harry,\" she said.\n\n\"I don't like swimsuits, but that one looks great on you,\" I responded.\n\n\"I wish I could take it off right now,\" Pam replied.\n\nSara tapped my shoulder. I turned to her and she hugged me tightly.\n\n\"This is pretty hot,\" she whispered in my ear. I kissed her.\n\nOne of Pam's former teammates who was helping run the meet called for our attention. It was time to march in. Marching behind Pam's ass covered in that tight material was engaging and, I think, Pam was adding some motion in her walk for my benefit. More than once, I felt Sara slap my bare ass.\n\nWalking into the pool was a relief in one sense because the hallway was air conditioned to the point that it was chilly. The pool had the usual warm moist air. Looking around, I saw that Becca had been right. All of the seats were filled and people were standing in the back. We marched a complete lap around the pool deck. \n\nThere was seating on three sides of the pool. The first rows of seats on two of the three sides were very close as we walked by. Had anyone wished to, they could have reached out and touched me without extraordinary effort. I made eye contact with as many spectators as I could as I walked by. I felt very exposed and that felt wonderful. I was really very proud to be walking naked in front of these people with my dick, balls, and ass on full display.\n\nAs we finished our lap at the competitors' seating behind the blocks, Sara asked me. \"Having fun Harry?\"\n\nI grinned at her and nodded.\n\nThe racing was interesting. The meet started with the women's 50 fly. Fly was one of Sandy's strongest strokes so I expected her to win. By luck of the draw, Pam was in the lane next to Sandy. Sandy got a great start and had about a body length lead just before the turn. After the turn, it seemed a very long time before Pam surfaced. When she did, she was just slightly behind Sandy. Pam really burned the final 25 and touched Sandy out at the wall.\n\nMy first race was the men's 50 breast. Ed was in the lane next to me. We both noticed that the ladies were all standing behind the blocks. As we bent down to our marks, exposing our balls and assholes, Ed laughed and said \"the full Monty.\"\n\nI had been training well and thought that I had a good shot. Ed beat me off the blocks and stayed just a bit ahead of me for the whole 50 meters. I realized that he was considerably younger, but I decided that I really wanted to beat him.\n\nEd and I raced each other again in the 100 breast. Ed was in front of me through the last turn. An extra shot of adrenaline kicked in and I swam probably the best 25 meters of my life. I touched just in front of Ed. The effort left me completely exhausted. Sara and Sandy had to help me out of the pool.\n\nIt took me several minutes of sitting to get back to normal breathing and heart rate. A few minutes later, I decided to head back to the locker room for an energy drink. As I walked naked along the long side of the pool between races, I heard a female voice call \"Mr. Stone.\" Naturally, I had walked along the side where spectators were sitting. Turning, I saw a woman whom I guessed to be between 30 and 40 stand and gesture to me. Walking closer, I saw that sitting next to the woman was a girl in her late teens or early 20s. The woman gestured again so I walked over.\n\nAs I got close, the woman said, \"Mr. Stone, I'm Claire and, gesturing towards the girl, this is my daughter Emily. We saw you swim here a few months ago and we've been following you on the naked racers website (a site that Sara and a few others maintained to promote our nude meets). Emily just graduated from high school this spring. She swam for her school all four years. We're both fans. Emily is too embarrassed to ask you, but, may we have your autograph?\"\n\nBeing asked for my autograph was a first. Being asked for my autograph while standing nude in front of a lady and her daughter was more than a bit strange. Nonetheless, I nodded and said \"sure.\" Claire handed me one of the single sheet programs we were using and a pen. Not having any place to write, I put the program against my bare and damp thigh and signed as best I could. Claire was smiling. Her daughter's expression was ambiguous.\n\nAs I handed the program back to her mother, Emily said, \"Thank you Mr. Stone. May I ask a question?\"\n\n\"Of course.\"\n\n\"What is it like to be totally naked in front of all these people?\"\n\n\"Emily, I'm not sure that I can adequately explain it, but it is a wonderful experience. I feel both empowered and liberated. There is also something sexy about knowing that people are looking at, and hopefully enjoying, my naked body.\"\n\n\"That is pretty much what I thought,\" Emily said. \"I'd love to do it, to be naked in front of a crowd like this. Oh, and I do enjoy looking at you naked.\"\n\nI glanced at Claire expecting an expression of stern disapproval of her daughter's stated desire to go nude in from of a couple thousand people. To the contrary, Claire was smiling and nodding.\n\n\"If you're serious,\" I said, hoping that I wasn't making a mistake, \"I think that you can still enter to swim Saturday. That is when the ladies swim naked.\"\n\nEmily's face broke into a smile. \"Really?\"\n\nClaire almost floored me by saying, \"That would be great!\"\n\n\"What would you want to swim?\" I asked.\n\nEmily replied, \"I was best in backstroke.\"\n\n\"I'll talk to some people and see if there is space for you to swim,\" I said.\n\nTogether, Emily and Claire said, \"thank you.\"\n\nI walked away mentally shaking my head in astonishment. I was so taken aback that I didn't notice Heather walking towards me until she was right in front of me.\n\n\"You've developed a fan club, Harry?\" Heather asked grinning.\n\n\"Something like that I guess,\" I replied. \"But, the younger lady of that pair said that she wants to swim with us Saturday night. She was a high school backstroker.\"\n\nHeather asked, \"Does she understand that the women are nude Saturday?\"\n\nI nodded, \"that's why she wants to do it.\"\n\n\"Ok, \"Heather said skeptically. \"I think that we've got room. I'll go talk to them.\" Heather walked off in the direction of Claire and Emily.\n\nFortunately for me, the 100 breast was my last race, save for a relay leg. That gave me a reasonable amount of time to recuperate. While I was pondering whether I was too old for this sort of thing, the races went on. Sara swam all three distances in both the back and free and won all six races. Sara never ceases to astound me. Pam beat Sandy again in the 100 fly. Neither lady swam the 200. Sandy saved face by beating Pam in the 50 and 100 breast and Sandy just touched out April in the 200.",
        "The coed medley relay was the last race of the evening. I dragged my tired bare body to the blocks. Sandy would open for us swimming fly. I would swim second in the breast. Sara had the third leg in the back. Ed would anchor us swimming freestyle. While there were a number of other swimmers and four other relay teams, it looked like the competition was from our local friends. Rather than Becca and Jeff swimming the relay, our hosts had assembled a team of Pam, Jason, April, and April's boyfriend. I was not optimistic about our chances.\n\nOne benefit of the relay was that, standing behind the blocks, we had a lovely view of Pam, Sandy, and Trish bent over on the blocks in their very tight suits. All three looked better nude, but this sight by itself would have made the evening worthwhile. It didn't last long. Once again, Sandy got a great start. Once again, Pam reeled her in, giving Jason a slight lead over me. While I followed Jason for the first 50, I was able to catch up over the second so that Sara hit the water simultaneously with April. I had never seen it happen before, but the two ladies paced each other exactly for 100 meters and finished their legs simultaneously. \n\nEd was giving up about five years to April's boyfriend, Matt, who had also swum in college. The two men paced each other until about the last 20 meters when Ed gave it just a little more and touch just ahead of Matt. Although these races were really just entertainment for everyone, Ed was very pumped about the win. He grabbed the bottom of the blocks and forcefully pulled himself out of the pool. Then he jumped up and down naked on the pool deck for several seconds.\n\nSara was quietly pleased. She walked over and hugged me, reaching down with one hand to gently stroke my dick. Heather walked up and softly slapped my bare ass.\n\n\"Good work Harry.\"\n\nWhile we generally did not do anything like a \"medal's ceremony,\" Becca and Jeff had decided that the first, second, and third place relay teams should get special recognition, and a chance to show off, as the last race of the night. Three small risers were brought out and the top three teams assembled on them facing the largest section of seats. I stood naked between Sara and sandy as we all waved to and thanked the spectators. Glancing towards Claire and Emily, I saw that they were smiling and waving back energetically.\n\nAs I walked out of the shower in the locker room, Heather came up to me. \"It was a little strange, but the girl in your fan club is signed up to swim Saturday and her mother seems to be thrilled.\"\n\nI smiled. \"We won you over to going naked. Maybe Emily has the same good judgment as you but just better parental support,\" I said.\n\nHeather smiled. \"Maybe. She's one up on me. She gets to swim naked Saturday. I don't.\"\n\nWe took it very easy that night and the next day. Friday's only real activity was that Sara, Heather, Sandy, and I went out for an early dinner with Pam, April, and Matt. If anyone at a nearby table was listening to our conversation, they probably thought that the whole thing was a put-on. Most of the conversation was about nude swimming and going nude before an audience. Thursday had been Matt's first such experience. He admitted that he was initially unwilling but that April pressured him to come to the meet and swim naked. He also admitted to being very nervous.\n\n\"Among other things,\" Matt said, \"I was afraid that I'd get a boner on the pool deck in front of all those people.\"\n\n\"Would that have been a bad things?\" Heather asked, teasing a bit.\n\n\"Well,\" April said, \"Matt didn't want to take that chance. A little while before we formed up to march in, I took him around a corner and gave him my grade A blowjob.\"\n\nMatt laughed. \"April sucked me so dry that I became worried about being shriveled up.\"\n\nMatt had yet to see the ladies swimming nude and was very much looking forward to that. From the conversation, it was clear that the ladies were looking forward to swimming nude. Except, of course, Heather, who would have to stay clothed. She was not pleased.\n\nWe were all especially proud of April. As she explained,\n\n\"Pam asked me to help at the meet a few months ago. I was shocked. I had never been naked except for a boyfriend. Pam promised me that we would just be helping to run the meet and we'd keep our clothes on.\" April paused.\n\n\"We got there and I saw all the nude swimmers. They looked so comfortable and looked like they were really having fun. Pam had walked off for a few minutes and, when she came back, she was naked. I kept my clothes on and went back to timing. A race later, Pam came over and told me that I'd really enjoy myself more if I took my clothes off. A few hours before, I would not have thought about going naked in front of all, or even some, of those people. But, when Pam said that, I just thought 'yeah, she's right.' I took everything off and went on working. It was weird. I knew people could see my bare tits, and ass, and my pussy; and that really felt good. Now, I love being naked and enjoy it more if people can see me.\"\n\n\"I'm not complaining,\" Matt interjected to good natured laughing.\n\n\"And,\" April continued, \"last night I thought that it was great that Matt was naked in front of all of those people. I was just sorry that we couldn't both be naked together.\"\n\n\"Well,\" Sara said, \"if you keep swimming in our meets, you'll get to be naked together in front of people a lot.\"\n\nMatt and April looked at each other. It seemed to me that they both liked that idea a lot.\n\nPam said, in a mock pout, \"at least you have a boyfriend to get naked with. I'll be out there bare as the day I was born with no one special to look at me. And, I haven't been fucked in months.\"\n\nApril smiled and retorted, \"Whose fault is that? You are so damned picky.\"\n\nHeather interjected, \"Pam, at least you get to take your clothes off. I have to stay dressed.\"\n\n\"But,\" Pam replied, \"You can get naked at the party at my parents' house afterwards. In fact, we'll be offended if you don't.\"\n\nThe conversation went on in that good-natured vein through dinner. We all called it a night very early. \n\nSara, Heather, Sandy, and I were back in our hotel room when Sandy said to me, \"Harry, I think Pam wants you to fuck her.\"\n\nSara said, \"That might not be a bad idea Harry. She's gorgeous and athletic. I'm betting that she'd be a great fuck.\"\n\n\"We'll see\" was my weak reply.\n\nBefore we got to the pool Saturday evening, Sara gave me the new competition suit she had bought for me. Since we always swam nude, I didn't have one. I was prepared to dislike it. However, putting it on in the locker room, I was surprised. It was comfortable and very light. Looking in a mirror I saw that, while the suit went below mid-thigh, every bit of my body was clearly outlined. If I had to swim clothed tonight, this was probably as good as it got.\n\nMaintaining our new tradition, the clothed guys went into the hall to line up first. Then the naked girls came out of their locker room. Sara, of course, looked exquisite and she glows any time she's naked around a lot of people. However, Sandy, Pam, April, and Trish all looked very beautiful in the nude too.\n\nI hugged Sara tightly. She ran her fingers over my dick through the suit, getting me a bit firm. As we broke our embrace, Pam walked up.\n\n\"Nice suit Harry. It shows you off pretty well.\"\n\n\"I'd rather be wearing what you are Pam. By the way, you look fantastic.\" She did, too.\n\nI put Sara in line in front of me so that I could slap her bare ass like she had done to me on Thursday. Sandy was behind me and I got to hug her too before we marched in. \n\nJust then, a slightly younger girl, cute, but not quite beautiful, came up. She was, of course, completely nude. In a voice bubbling with enthusiasm, she said \"Mr. Stone, what do you think?\" She did a quick spin around.\n\nIt took me a second to figure out that this was Emily. Her body was actually pretty good and, like anyone, she looked much better naked than clothed.\n\n\"Emily, you look exquisite,\" I said.\n\nHer smile grew wider. She leaned forward and hugged me tightly. \"Thank you for giving me the opportunity and the courage to do this. I'm having so much fun!\"\n\nEmily let go of me and stood back a step. She looked me up and down. \"I like you better naked, but I can still see everything. Not bad Mr. Stone.\"\n\nI introduced Emily to Sara and Sandy. Sara gave Emily a hug. \"Emily, I'm so glad that you joined us,\" Sara said. \"It does feel better being nude, doesn't it?\"\n\n\"Absolutely!\" Emily gushed. \"I need to get Mom to do this too.\"\n\nAs Emily walked on to get a place in line, Sara smiled at me. \"She's a nice girl,\" Sara said.\n\nWe marched in. As I looked at the crowd, it seemed that they had found a way to squeeze a few more people in tonight than Thursday. In front of me, Sara was waving to the fans as we walked around the pool, her exhibition glow at full power.\n\nBehind me, Sandy exclaimed, \"Wow, this is great!\"\n\nAs we walked along the long side of the pool in front of the spectators, I saw Claire, again in the front row. Claire reached a hand out to me, which I clasped briefly. \"Thank you,\" she said, \"Emily's having a blast.\"\n\nThe meet itself was less exciting for me since I was clothed. Ed beat me this time in both races. The start of the coed medley relay was even better with Trish, Sandy, and Pam bent over on the blocks nude, fully exposing themselves to those of us behind. Sandy and Sara both swam better naked so that Ed only had to hold our lead against Matt. Ed did. As the three teams again stood on the riser in front of the crowd, Sandy and Sara nodded at each other and then peeled the trunks off of Ed and me. Seeing that, Pam and April did the same to Jason and Matt. All eight of us got to do a full frontal nude to the crowd. That was fun.\n\nThere was, of course, a party for the folk involved in the meet at Becca and Jeff's house. Since we were all naked, we decided to shower together, before we did, Sara went to the ladies' locker room, collected Emily, and brought her back to shower with us. Emily's sheer joy in being naked with other people was endearing. As we left the shower, Pam invited Emily to the party.\n\n\"I'm with my mother,\" Emily said. \"I expect that she'd love to go and she's pretty cool. Is that ok?\"\n\nPam said that it was and Emily went off, naked, to find her mother.\n\nAs was expected, Sara, Heather, Sandy and I stripped off as soon as we got to Becca and Jeff's and left our clothes in the rental car. These parties were uninhibited, but never loud or unruly. As we finished undressing, another car pulled in behind ours and Emily and Claire got out.\n\nThey walked up to us. Claire said, \"Mr. Stone, I want to thank you again for giving Emily the opportunity to swim tonight. She has been thrilled about it, and she looks pretty good naked, doesn't she.\" I agreed that Emily looked good naked.\n\nSeeing the four of us nude, Emily asked \"Can we take our clothes off here?\"\n\nSara answered, \"It is sort of expected at these parties.\"\n\nEmily turned to her mother. \"Mom, you need to strip naked too.\"\n\nClaire looked at us uncertainly.\n\nSara said, \"Claire, you will be the only person here with clothes on otherwise, and you should experience the pleasure which you daughter has had all night.\"\n\nClaire looked at us for a moment. Emily was already topless and was enthusiastically pushing her jeans down. Finally, Claire smiled and said a soft \"ok.\"\n\nClaire pulled her polo shirt over her head. Her now naked daughter said, \"Mom, I'll take your clothes.\" Claire handed Emily the top. Claire reached behind her back and undid the clasp on her bra. Claire did not hesitate, taking her bra right off to reveal a pair of large but firm breasts. Claire kicked her shoes off, undid the button on her slacks, lowered the zipper, and let the slacks fall to her feet. She stepped out of them and handed them to Emily. Claire was standing in only a pair of panties. She was an attractive woman although she was gaining size in her butt.\n\nHeather spoke up, \"Claire, I remember my first time stripping off in front of these folks. Take a moment before you drop your panties. The anticipation that you are about to reveal your bare pussy and butt is really fun the first time.\"\n\nClaire did as she was told. She stood there in the Florida evening in only her thin panties. She looked each of us in the eye. She was smiling but breathing somewhat hard. Finally, she pushed the panties down, stepped out of them, and handed them to Emily.\n\nEmily said, \"Yea Mom!\"\n\nAs Emily took their clothes to their car, Claire said to Heather and the rest of us, \"You were right. The anticipation is exciting. I'm afraid I'm a bit wet.\"\n\nSara replied, \"That's ok. Nude isn't just about sex, but it can be fun to be sexy while you're nude or getting nude.\" Emily walked back and the six of us walked naked into the party.\n\nEveryone had a bit to drink, but no one got out of control. I was standing in a corner talking to April and Matt when Pam, looking stunning in her birthday suit, came up.\n\n\"Harry,\" Pam said, \"I'm done dropping hints. I'd really like you to fuck me.\"\n\nApril laughed. \"I knew that was coming.\"\n\nI wasn't sure how to react. Pam was beautiful, intelligent, and very sexy; but I wasn't sure that I wanted to go down that path.\n\nHeather saw, and may have heard, what was going on. She saved me. Striding over to us, Heather reached out and firmly grabbed my dick. Looking at Pam, Heather said, \"I'm sorry, but this is inside of me tonight.\"\n\nPam took it well and walked away. Heather was still holding me when Sara walked up.\n\n\"Harry, you haven't made love to Heather, ever. I think that needs to change. But, let's do that at the hotel, this is too crowded.\"\n\nWe gathered Sandy and Sara invited Ed to join us. We said our good byes and drove naked back to the hotel. Naked, Sandy got out and got several towels we had placed in the trunk. The five of us wrapped ourselves in the towels and walked through the hotel lobby to the elevator carrying our clothes. \n\nIn the room, I looked at Heather and said, \"You haven't swum at all today. Would you like to go to the rooftop pool?\" It was fairly late and I thought it likely that we'd have the pool to ourselves.\n\n\"Can we go up naked?\" Heather asked, smiling.\n\n\"Of course,\" I answered. We told Sara, Sandy, and Ed where we were going. Heather and I each threw a towel over a shoulder. I did remember to pick up a key card. We stepped naked into the hallway.\n\nMy plan was fine except that, when the elevator opened, there was a couple in evening clothes. With no hesitation, Heather stepped into the elevator. Smiling, she told the couple that we were going to the pool. Heather and I stood naked, holding hands, in front of the other couple.\n\nThe elevator stopped again a few more floors up. The couple excused themselves as they stepped past us and got off. As the door was closing, I heard the woman say, \"Bill, I think that we should go swimming.\"\n\nOnce the door closed fully, Heather and I started to laugh, hard. I reached out and hugged Heather tightly. She leaned up and kissed me. We kept the kiss going until the elevator opened on the roof. \n\nWe dropped our towels on a chaise. Fortunately, the hotel had left cushions out. Heather and I got into the pool. We stood in waist high water, facing each other.\n\nHeather reached out and took my dick in her hand. \"You really want to swim Harry?\"\n\n\"No.\"\n\nWe climbed out of the pool. We didn't bother to dry off. Heather pulled a cushion off of a chaise and laid it on the concrete. She lay down on her back and spread her gorgeous legs. I got down and began to eat her. Heather quickly pushed on my head.\n\n\"Harry, I'm ready. In me, please.\"\n\nI moved up over Heather, supporting my weight on my arms. She looked so wonderful. We kissed again. She reached down to my dick and guided me into her.\n\nI had a moment's scare when I realized that Heather was, up until then, a virgin.\n\nHeather sensed my anxiety. \"Don't worry,\" she whispered. \n\nI trusted Heather (and still do) so I stopped worrying. I was moving back and forth in Heather gently as we learned about each other. I sucked her nipples. I gently bit her earlobe. \n\nHeather whispered again, \"Let's take all night.\"\n\nThat didn't happen. As I was thrusting slowing into Heather, we heard the elevator door open. I looked up. It was the couple from the elevator. They were both naked.\n\nThe woman said, \"Look Bill, just what I'd hoped.\"\n\nThe man said to us, \"please don't stop because of us. If you don't mind, we'll do the same thing.\"\n\nI said, somewhat roughly, \"Please do.\" Heather giggled.\n\nWe heard much more than saw the other couple start fucking on the other side of the pool. From the sounds, they were more vigorous and the woman was soon making little yelps. Being a competitive person, Heather signaled to me to pick up the pace, which I did. Heather had her legs locked around me and I was thrusting into Heather hard and fast when we heard the woman scream then moan loudly. That was followed quickly by an \"oh God\" from the man. We kept going.\n\nFinally, Heather came, violently. Shortly after that, I exploded inside Heather. This was every bit as good as sex with Sara. Heather pulled me into her with her legs two or three more times. \"I want every drop,\" she said.\n\nFinally, I rolled off of Heather and lay beside her. We were both gasping for air, but we kissed again, and again. Finally, we regained awareness of our surroundings. I looked over and saw the elevator couple standing together naked a few feet away watching us.\n\nThe woman was actually quite attractive naked. She made eye contact with me. She smiled and said, \"wow!\"\n\nHeather and I both started laughing again and hugged each other.\n\nAfter a few more minutes, Heather and I stood up, walked over to the couple, and introduced ourselves. Alice and Bill were from Orlando and had gone to a gala in Tampa that night for some arts group they supported.\n\nThe four of us sat in chairs around a table on the pool deck. My seaman was visible between Heather's legs as was Bill's between Alice's legs. Both women seemed proud of having just been fucked.\n\n\"When we saw you get on the elevator naked,\" Alice said, \"I decided that we just had to do the same. I thought that you'd come up here and make love and the thought of doing in the open air with another couple nearby also doing it was irresistible. Fortunately, Bill indulges my wild behavior.\"\n\nThe four of us talked for several minutes. It was with some regret that Heather and I decided that we needed to go back to the room. Alice and Bill were really very nice people. We left them sitting naked in the Florida night, holding hands.\n\nWalking back into our room, we were greeted with the sight of Ed lying on his back on the bed. Sandy was straddling him, riding his dick. Sara was crouched over his face so he could eat her. Sara winked as she saw us walk in.\n\nSara panted out \"we'll . . .be . . . done . . . in . . . a . . . few\" and then let out a low moan. Knowing Sara, I was pretty sure that she was exaggerating her level of stimulation to encourage Ed. Still, this was pretty good. I plopped down in a chair to watch and Heather sat down in my lap.\n\nAfter several more entertaining minutes, Sara had what appeared to be a real orgasm. When Sandy got off of Ed, I could see semen between her legs, so I was pretty sure Ed came. I didn't know Sandy well enough to tell whether she had gotten off.\n\nSara hoped off the bed. \"We need to get to bed. We have an early flight tomorrow.\" That met with general agreement.\n\nSara looked at me. \"The last time we were here, I promised Heather that you would spend a night sleeping with your dick in her. Get over here.\"\n\nI knew what Sara had in mind. I walked over to the bed. Still standing, I put my hands on the mattress and bent forward.",
        "Sara said to Heather, \"I'm going to show you something that works if you want to get a guy hard quickly.\"\n\nSara used her left hand to spread my butt cheeks. She pushed her right index finger past my asshole and began massaging my prostate. In very short order, she had me very hard.\n\nSara pulled her finger out of my butt, grabbed a tissue, and wiped off. Still talking to Heather, Sara said, \"It is a bit messy, but guys like it, it is really effective, and I think that it is fun to do.\" Speaking to me, Sara instructed \"Now, lie down.\"\n\nI lay on the bed on my back with my dick pointing rigidly into the air.\n\nSara told Heather, \"Get over here and straddle him.\" \n\nHeather did as she was told. Sara took my dick in hand and guided it into Heather. Once Heather had settled completely onto my pelvis and had me fully inside of her, she leaned forward and lowered her chest onto mine. I put my arms around her and we went to sleep."
    ],
    "authorname": "HStoner",
    "tags": [
        "public nudity",
        "public sex",
        "multiple partners"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/a-traditional-swim-ch-16"
}
{
    "title": "Auntie's Panties Pt. 03",
    "pages": [
        "This one has a bit of everything in it. I'm keeping it in the Incest category, but Group, and Lesbian would be equally appropriate. As always, all characters are over eighteen. \n\nVonnie and Danny are just getting started. Shelagh has decided to join them. \n\nNeed I say more?\n\nOh, and... Pace yourself. There's a LOT of sex in this one. \n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMy brain was quite obviously losing touch with reality. \n\nFirst my beautiful, young, sexy Aunt welcomes me into her bed. Now, my equally alluring sister is here, taking off her clothes, intent on joining us? \n\nYes, I'm losing my mind. That's the only explanation. \n\nFunny though... It doesn't feel like a hallucination. \n\nNo, it feels like I have my Aunt Siobhan's big, soft breasts pressed against my ribs. It feels like she's actually here, in my arms. I can still taste the kisses. But it can't be true, because if it is, then I can only assume that what I'm seeing is true, as well, and what I'm seeing is just... Oh my. \n\nDespite my mind's attempts to make rational sense of the situation, I had no choice but to admit that I was not hallucinating. My second youngest sister, Shelagh, was indeed here, in my Aunt's incestuous bedroom, about to remove her blouse. \n\nI felt Vonnie's hand on my erect penis, stroking softly, as the last button was dispatched. Shelagh had always had an excellent fashion sense, and even in the summer, never really dressed down to the level of t-shirts and shorts. She always looked like she was ready for an impromptu dinner party to break out, and was prepared to host it. \n\nSo today, her hair was brushed out, and hanging like a sensuous boa over her left shoulder. Mom's hair was red... I mean, RED... but most of us kids got a slightly darker version, just to the red side of auburn, a hint of Dad's DNA. Shelagh had beautiful hair, and her blue eyes were positively huge. Coupled with her full lips, it gave her a look that was part cartoon, part incredible sex goddess. I couldn't believe she was the only unmarried sister I had left, because I had always thought she was the prettiest. \n\nThe blouse she had just unbuttoned, and was holding by the lapels with both hands, was classic black. Crisp, impeccably ironed, and fitted to her body, she held it, as though for effect, waiting for my eyes to wander up to hers. I was currently trying to pierce the shadows that obscured the chest I hadn't seen since she was much, much younger... and much, much less developed; back in the days before I had been banished from my sister's rooms for showing a little too much interest in their bodies. I knew she was bigger, but beyond that, this was all new. I finally looked up. \n\nShelagh smiled, and rolled her shoulders out of the top, opening it wide as it moved down her arms. She was... breathtaking, and she was still mostly dressed. I gasped, and so did Vonnie. \n\nHer bra was black as well, and struggling mightily to contain her voluptuous breasts. While she wasn't quite in the same league as Mom and Vonnie, she was very, very well built, as were all my sisters. Is there any wonder I developed a thing for women with big boobs? \n\nVonnie gave my dick a surreptitious squeeze under the covers, and I glanced at her briefly. She was grinning; I assume she was pleased that our little group was growing. She nodded in Shelly's direction, and I turned just in time to see my sister, hands behind her back, unhooking her bra. She held it in place for a moment. \n\n\"Danny, I can't believe I'm about to do this,\" Shelly smiled. \"I remember kicking you out of my room because you were looking at me funny when I was dressing. You were so young. Are you ready?\" \n\n\"Yes,\" I croaked, my voice cracking. Vonnie stroked me again. My cock was like steel. Apparently, it was ready, too. \n\nShelagh took a deep breath, and closed her eyes. She raised her arms slowly. I expected the satiny, black bra to drop, but it held on for a few maddening seconds, clinging to her abrupt, firm breasts while I willed it to fall. As her arms extended over her head, her breasts spread wider, and the bra finally succumbed to gravity. Her breasts did not, riding high and proud on her chest, crowned by light pink nipples that were equally proud and tall. \n\n\"God,\" I breathed. \"They're beautiful. I... uh... I mean, you're beautiful,\" I corrected. \n\nShelagh smiled, and turned her body gently from side to side, causing those spectacular globes to sway slightly. She slowly brought her arms down, running her hands over them as she did. \n\nI noticed that Vonnie's hand had stopped its motions, and she had her fingers in a tight ring around the base of my cock. I hadn't realized how close I was to cumming, but my ever thoughtful Aunt had noticed the signs, and gripped me tight to stem the tide. She was snuggled into my side, watching Shelagh strip with an interest as keen as my own. \n\nMy sister reached back, and unzipped the elegantly sexy, knee-length skirt that she was still wearing. Matching black, the monochromatic look really looked good on her. \n\nIt looked even better on the bedroom floor, as she stepped out of it, leaving her in her tiny panties, also black. She was nothing if not consistent... and gorgeous. \n\n\"This is very exciting,\" Shelagh whispered, hooking her thumbs in the thin strips of fabric that arched over her hips. \"I never even considered doing it before yesterday, but it's soooooooo hot!\"\n\nShe wasn't very specific about what 'this' was. Stripping for another woman? Stripping at all? I chose to assume she meant getting naked before my eyes, and I agreed with her assessment; it most definitely was soooooo hot. \n\nI suddenly realized how unfair I was being to Vonnie, staring at my sister... who was now totally naked, having stepped clear of her panties... as though she was the first unclothed woman I had ever seen. Two days ago, I was looking at her that way. I didn't want her to think I was over her already. I didn't want to be that guy. \n\nShe didn't even notice. She was too busy checking out Shelagh's pouty little pussy to pay any attention to me, so I didn't fight it. I cast my eyes on the little gap at the top of my sister's thighs as well, where two lips laid open like butterfly wings.  \n\n\"Oh god, Shelly, you've got such a pretty kitty,\" I heard, but it wasn't my voice that said it. It was Siobhan, who apparently had as great an appreciation for my sister's vulva as I did. I looked at her, a bit surprised. \n\n\"What?\" she giggled, with a smile. \"I think most women are a little bi-curious. All I know is... that's a very sexy pussy. I'd lick it.\" \n\nWhat was that sound? Oh, right... My mind being blown. My Aunt... who just happened to be naked, gripping my erection tight, and my lover... had just told me she would willingly lick my sister's cunt. The sister, who was also naked, and currently looking for a way under the covers to join us in bed. The whole 'no sex with blood relatives' thing was going to take a beating today. Of that I was sure. \n\n\"Um, I think I'd like to see that,\" I laughed, lifting my arm to allow my sister to squeeze in beside me. She slid her body along mine, and within seconds, I was in boob-lover's heaven, with a voluptuous pair pressed against me from each side. \"Hi Shelly,\" I smiled. \n\n\"Hi!\" she giggled. \"You're so warm,\" she commented, caressing my chest with her hand. \n\n\"Warm?\" Vonnie asked. \"You have no idea, sweetie. Wanna see it?\" She moved her hand, shifting the tent pole and focusing everyone's attention on the obvious bulge in the covers. \n\nI was the 'it' in this case. Well, a particular part of me, anyway. Vonnie still had her grip on my twig and berries, and was offering Shelagh a peek. \n\n\"Hey, don't I get a say in this?\" I objected. \"After all, it's my dick.\" I was joking, of course. Shelagh could look at it all she wanted to. I was hoping she'd do a lot more than just look.\n\n\"Oh pleeeeease, Danny\" she begged. \"I didn't really get to see it that well last night, and it's been driving me nuts ever since. Show me. Lemme see? Please?\" \n\nShe was probably yanking my chain, but having any woman, especially one as beautiful as my sister, beg for a peek at my package? Oh yeah. Really good for the ego. \n\nI picked up the edge of the covers, and peeled them back slowly. Shelly leaned closer. I guess I wasn't going fast enough, so Vonnie pulled my stiff shaft out into the open. \n\n\"Ta da!\" Vonnie smiled. \n\n\"Yowza! Where did THAT come from?\" Shelly asked, eyes wide, staring at my cock intently. \"Maybe you got all the penis each of us girls didn't need when we gave up our Y-chromosome.\"\n\n\"Why? Is it big?\" I asked. I wasn't one of those guys who goes around comparing his Johnson to everyone else's in the locker room. I figured it was what it was... but if what it was, was big? Well, a woman's opinion couldn't hurt. \n\n\"Oh yeah!\" Vonnie chimed in. She turned it slightly with her hand, admiring it. She smiled. \"It's huge.\" \n\nShelly's eyes were still locked on my penis, and she nodded. \n\n\"Yup, that's a big dick,\" she breathed, unconsciously licking her lips. \"Who knew my brother was hung?\" \n\n\"Who knew my sister was stacked?\" I returned the compliment. \n\n\"Thanks,\" she blushed, \"but these are hard to hide,\" she said, cupping her firm breasts. \"I had no idea you were packing that monster.\"\n\nAll this dick appreciation was going right to my head. Prior to now, 'hung', 'huge', and 'monster' were not words I would have used to describe my equipment. I had a new love for my sister, and we hadn't even had sex yet. \n\n\"Um, I really hate to bring this up,\" Vonnie said, making a sour face, \"but, there's only one of him, and there are two of us. Who gets to have him first? Rock, paper, scissors?\" \n\n\"No, no,\" Shelly shook her head. \"You were here first. I'm the interloper. You fuck him first. I trust you won't mind if I stay and watch?\" \n\n\"Not at all,\" Vonnie smiled. \"It's okay if your sister watches us have sex, right?\" she asked me. \n\nAnother question I never thought I'd be asked. I shook my head. \n\n\"What? You won't let her?\" Vonnie gasped. \n\n\"No. I mean yes, of course she can watch, but that's not what I shook my head about,\" I clarified. \"I was just wondering what I did to get so lucky that two women, whom I both love, want to share me.\" \n\n\"Well, we'll see about the sharing part,\" she smiled. \"Right now? Now serving number one!\" \n\nVonnie dropped her mouth over the head of my cock. \n\n\"Ohhhhhhhhhhhhhhh fuuuuuuuuuuuuuuck,\" I hissed, dropping back onto the pillow. \n\n\"Oh wow!\" Shelagh gasped. \n\n\"Mmmmm, yummy,\" Vonnie added, pulling my dick out of her mouth for a second. She plunged it back in a moment later. \n\nShelagh laid next to me, watching my Aunt sucking my cock from close range. I could see the excitement in her eyes. Vonnie was slurping loudly, drooling all over my shaft, and stroking the half that wouldn't fit in her mouth. \n\n\"This is much better than porn,\" she giggled, tracing a finger across my chest. She leaned closer, crushing her breasts against me, and kissed me. Shelagh had kissed me before... on the cheek. Never on the lips, and certainly not on the tonsils, which is pretty much what she was doing right now. I found myself kissing her back, and it was goooooooooooooood. \n\nSuddenly, she was gone, slipping out of the bed while I watched. Her ass wiggled across the room, and she took a seat on the chair by Vonnie's dressing table. She smiled, and hooked a leg over the armrest, giving me a very nice view between her legs. \n\nI realized the reason she had left the bed... Vonnie was mounting me, so we needed the space, and the chair afforded her a great place to watch from... and masturbate! While I felt Vonnie's pussy sliding down over my cock, my eyes were inexorably drawn to the juicy pink lips of my sisters own vagina. She began to gently caress herself, and I felt a hand on my chin. \n\nI looked up at Vonnie, who was showing a bit of displeasure on her face. \n\n\"Poor etiquette, young man,\" she directed. \"When a woman is in bed with you, she deserves your full, undivided attention... even if your sister is fingering herself a few feet away! She'll get her turn when I'm done with you.\" \n\n\"Yes Ma'am,\" I smiled, receiving a kiss for my efforts to ignore the elephant in the room. \n\nWho knew how hard it would be to keep from looking over at my sister? I mean, you'd think that the incredible sensation of a warm, wet vagina, gripping my cock snugly as it slid up and down, would be enough to keep my attention. Any other day, or with any other distraction, that would be true, but today was unique in multiple ways. \n\nIt was the first time I was being watched. It was my first experience with group sex. It was the first time a woman was openly masturbating right in front of me, other than the window washer game yesterday. Most unique of all... all those elements were being provided by, of all people, my sister. \n\nThat will test your concentration. \n\nVonnie was very understanding, allowing me a few peeks across the room to where Shelagh was jamming three fingers into her cunt, and twisting her nipples. She took a few looks over there herself. It was easy for Shelagh; her fingers weren't jealous of her eyes. \n\nMy Aunt was moaning softly, rising and falling with exquisite slowness on my dick. She leaned closer, blocking my view of Shelly with her big, round tits. \n\n\"Aren't you forgetting something?\" she breathed, looking down at me. \n\n\"Mmmmm,\" I grinned, and latched onto her left nipple, sucking as much of her large, dusty-rose coloured areola into my mouth as possible. I flicked my tongue across the rubbery nub of her erect nipple. \n\n\"Oh fuck!\" Vonnie gasped. \"I just love the way you do that! It goes straight to my clit!\" She picked up her pace a little, groaning with each stroke. \"Oh Shelly, you're going to love this big cock! It fills me so good! I hope your pussy can handle it!\" \n\nI couldn't see my sister, as Vonnie's beautiful rack filled my field of view, but I could hear her ragged breathing and moans of escalating passion. I could imagine her fingers plunging deep into her beautiful pussy. \n\n\"Oh fuck, Danny, I'm cumming,\" Vonnie grunted, yanking her nipple out of my mouth as she sat up to grind herself over my cock harder. She threw her head back, and screamed. \"Yes! Yes! YESSSS! THAT'S IT! YESSSSS!\" \n\n\"GNNAAAHHHHHNNNNNNN! YESSSS!\" Shelly sang in harmony, drawing my eyes to her. She was hunched down in the chair, with both legs pointed at the ceiling in a wide V formation, finger-fucking her cunt furiously. Their orgasmic aria echoed through the house, and my brain, until they both stopped singing, and tried to catch their breath. \n\nVonnie looked down at me. She took a deep breath. \n\n\"You're close, aren't you? I can feel you throbbing,\" she smiled. \n\n\"Very,\" I nodded, gritting my teeth. \n\n\"Shelly? Want to help me make him cum?\" she asked. \n\nMy sister was back in a flash. \"Oh yeah! Sounds like fun!\" \n\nVonnie quickly dismounted, and gripped my shaft with her hand. Shelly took a spot next to her, and did the same. \n\nMy cock was soaked with Vonnie's abundant juices, and when Shelly touched it, she brought her fingers to her nose. She now had one hand covered in her own honey, and one slick with our Aunt's slippery discharge. She sniffed them both, and smiled at me. \n\n\"Damn! We both smell delicious!\" she giggled, helping Vonnie stroke my shaft. \n\nOkay... That's more than I can take. First, I'm fucking my buxom Aunt, then my sister shows up, and gets naked before my eyes. Then she spreads her legs and masturbates herself to orgasm, while my Aunt is fucking herself on my cock. Now, she's sniffing her fingers and saying she smells delicious, and so does my Aunt's pussy. My imagination went in the logical direction, and pictured both of my lovely ladies locked in a sapphic embrace. Oh, and they're both jerking me off? It was the final straw. \n\n\"Ohhhh FUUUUUUUCK!\" I bellowed, and erupted. \n\nUsually, Vonnie would be swallowing the ribbons of hot cum that I was shooting. Today, I felt like the fountains at the Bellagio, sending ropes of semen arching though the air while the two of them stroked me to completion, and moaned excitedly. \n\n\"Ooooo, yes, Danny!\" Shelagh gasped. \"Cum Danny! Shoot that hot jizz all over!\" Her hand kept jerking my cock furiously, while Vonnie stopped to watch her. My cum was dripping down her hand, and she kept going, squeezing every drop out of my dick. \"Shit! That's a lot of cum!\" \n\nShe was right about that. There was cum in blots and pools all over my chest and stomach. She released my flagging shaft, which flopped into a puddle of glop. I watched her admire the streams of semen oozing down her hand as she held it up, and gasped as she let some drip from her fingers into her mouth. \n\nIt almost made me cum again. \n\n\"Oh god, Shelly!\" I groaned. \"You're nasty!\" \n\n\"Mmmmm, yes, and you're yummy,\" she smiled. \n\nVonnie grabbed Shelly's hand and sucked three cum covered fingers into her mouth. \n\nOh shit, they're both nasty. It's going to be quite the day, here in Vonnie's bedroom. I hope I can get it up again within the next thirty seconds, because I have a fresh pussy to fuck. \n\nWatching them clean my cum from each other's fingers was very enjoyable. The sensation of them licking the spillage from my chest and stomach was equally arousing, but my dick didn't really react until they were trying to decide which one got to suck the remains from my wilted cock. \n\nIt was actually a pretty quick decision. Vonnie slurped my noodle into her mouth, and Shelagh gave me a sly look... and straddled my face! If I thought her pussy looked good from across the room? Well, you should see it from six inches away! \n\nYes, my sister's pussy was spectacular; juicy, succulent, aromatic, among other descriptives. Those butterfly lips which the removal of her panties had revealed, had become engorged with blood, and now dangled, pouting open in anticipation of meeting whatever would be parting them. Right now, while Vonnie was resurrecting my erection, what would be parting those lips was my tongue. I craned up, and grazed her labia with my nose, then licked her softly. \n\n\"Oh, Danny, yes!\" Shelagh moaned. \"I love getting my cunt licked! Go for it!\" \n\nGo for it indeed! I could feel my cock beginning to respond to Aunt Siobhan's ministrations, and wanted to get a taste of Shelagh's delectable snatch before I was forced to fuck her. Forced. Yeah. That's my story, Mom, and I'm sticking to it. First your sister forced me into her bed, then your daughter did the same. She'll buy that, right? \n\nPerhaps not. \n\nWell, anyway, Shelly settled lower, letting me reach her soaking wet gash without causing injury. I diddled those butterfly wings playfully with my tongue, and buried my face up her cunt, ramming the bridge of my nose into her clit. I gave her several long licks, from her tart asshole to her excited clitoris. I could just see up her body along her tummy, and through her wide cleavage, occasionally making eye contact as she glanced down past her breasts. \n\nSuddenly, my cock was wet and alone. One disembodied hand reached around and cupped Shelagh's left breast. Warmth once again surrounded my cock, but it wasn't from Vonnie's mouth. She was impaling herself again, and moments later, her other hand grabbed my sister's right breast. Shelagh leaned back, letting our Aunt fondle her big tits, and me feast on her drooling pussy. \n\n\"Oh god, you're both making me so wet,\" she smiled, as Vonnie, kissed the side of her neck. \"You're going to make me cum again!\" \n\nI could testify to the wetness, as I was cheeks deep in her cunt. She was dripping, and every bit as delicious as I had hoped. Her thighs were making hearing her vocalizations difficult, as they were against my ears, but I could hear enough to know she was having a very good time. When she grabbed my hair and mashed her pussy on my face, while lolling her head back on Vonnie's shoulder, I knew what was cumming. ",
        "\"Fuuuuck, YESSSS!\" she shrieked, and her body went taut. She gushed on my face as her orgasm hit, quenching my thirst quite nicely. I looked up her body, watching her breasts quiver as she gasped for breath. It was an incredible view. \n\nFor a minute or so, I kissed her juicy snatch gently, until she sat up straighter. She turned her head to look at Vonnie. \n\n\"Do I get to ride, now?\" she asked, grinning hopefully. There was a grin on my face, too, but most of my face was hidden by Shelagh's pussy, so my emotions on the matter remained secret. \n\n\"Just keeping it warm and hard for you,\" Vonnie smiled. \"Before you saddle up, what's the birth control status?\" \n\nOh yeah. I never even asked Vonnie before I fucked her. That could have been a disaster, but I had a feeling my Aunt had taken care of it. \n\n\"Pills. All good,\" Shelagh stated bluntly. \"Since he's not wearing a rubber for you, I assume I can also go bareback?\" \n\nThey looked at each other, then down at me, where I was peeking out from between her legs. \n\n\"Um, yeah,\" I admitted sheepishly. \"You'll be number two.\" \n\n\"Really?\" Shelagh gasped. \"So Auntie Vonnie got your cherry, did she? Congratulations!\" \n\nVonnie lifted off me, and rolled off the bed. \n\n\"It's all yours, Shelly,\" she giggled. \"My turn to use my fingers.\"\n\nShelagh smiled, and shuffled back on hands and knees, positioning herself over my stiff dick, which was well lubricated with Vonnie's juices. She reached under, and rubbed the head of my cock between her labia. \n\n\"Oh, this is going to be soooooo goooooood,\" she moaned. \"Are you ready, Danny? You're sure things won't get weird between us because of this?\" \n\nYou picked one helluva time to ask. I don't think there's a man on the planet who could say no to your pussy, once you've placed the head just inside your lips. No one has that much willpower. \n\n\"We're fine, Sis,\" I nodded. \"Please go ahead. Fuck me.\" \n\nShelagh grinned, and settled her hips lower, forcing the head of my cock up inside her. \n\n\"Mmmmm, yes,\" she moaned. \"Oh... such a nice, big, thick shaft. Oh yes, so good.\"\n\nI had my hands on her hips, but she was in complete control, moving down, then up a little, then down again, stretching herself open to accept my dick. Her eyes were closed, her face a picture of concentration, with a furrowed brow indicating the effort required to stuff my big cock into her tight opening. She cycled through her motions several times, undulating her hips to ease it in deeper, until at last, I felt her lips tickling my balls. Success! Her cunt had taken it all! \n\nI watched her take several deep breaths, letting them out slowly, in an almost meditative fashion. Her eyes opened. \n\n\"God, Danny, you're fucking huge!\" she gasped. \n\n\"And you're fucking gorgeous!\" I replied, smiling up at her. I reached up, and palmed her beautiful breasts. They felt as good as they looked. I thumbed her nipples to full height, as she remained in place, getting accustomed to my size. \n\n\"Mmmmm, I think I'm going to like this,\" she moaned softly, beginning to move cautiously on my shaft. \"Ooooo, yeah.\" \n\nShelagh started slowly, but it didn't take her long to get into a pleasing rhythm. I glanced over at Vonnie, who was watching intently, and fingering herself in a relaxed manner, just keeping her buzz at an elevated level, awaiting her turn. \n\nMy sister had acclimated quickly, and now she was pounding herself up and down, screeching unintelligible words of joy. I was holding her hips, helping her stay centred, and watching her hair fly around her face as she concentrated on the pleasure. I was also watching her beautiful tits, moving in tight, wobbling ovals in response to her bouncing hips. \n\nShelagh tipped her head back, and arched her back, making her breasts stand out even more prominently. She ground herself down hard, working her clit against the base of my cock, searching for the final bit of stimulation that would set her off. \n\nFound it! \n\nShe screamed, and bucked, cumming huge. Her body twitched as the waves hit her, and she started to tip over backwards. I caught her flailing arm, and pulled her back up, into an embrace with her resting safely on my chest. \n\nShe was breathing hard, but I thought I heard a faint 'thank you' in amongst the ragged gasps. I looked over at Vonnie again, and she smiled back, still gently diddling her clit. \n\n\"That was beautiful,\" she said quietly. \"You look good together.\" \n\n\"Are you coming back?\" I asked, still holding my sister, who was now resting peacefully on top of me. \n\nVonnie shook her head. \"Plenty of chances still to come. Finish with her. Make her cum again.\" \n\n\"Mmmmm, that sounds like fun,\" Shelagh breathed. \"Yes, baby brother... Make me cum again, and again, and again. I'm hooked.\" She sat up carefully, a bit woozy. \"How do you want me?\" \n\n\"On your hands and knees,\" I told her. \"I want to fuck you deep.\" \n\n\"Mmmmm hmmm,\" she smiled, running her fingers through her tousled hair as she climbed off. \"I'm good with that, I love being done from behind.\" She took her position, and stuck her rump up in the air. \"Fuck me deep, Danny. Fuck me hard.\" \n\nI wasted no time, clambering into place behind her. She reached between her legs and guided me into her pussy, which accepted my shaft much more easily this time. She was so wet and open, I had it fully inside her in three strokes. I adjusted my stance, putting one foot on the floor, and gripping her hips firmly. The view from above was remarkable, with my sister's beautiful ass pressed tight against me. \n\n\"Do it, Danny. Fuck me! I want to feel that whole fucking cock!\" she groaned. \n\nI cast a quick glance around the room, looking for the hidden camera. Well that was the only explanation; any second now Allen Funt, or Ashton Kutcher were going to pop out of the closet, and let me in on the practical joke. Three days ago, I was a virgin. Since then, my mother's youngest sister had taken my cherry, orally and vaginally, then anally the next day. Now, the soaking wet pussy that was gripping my shaft belonged to my sister, and my Aunt was watching from a few feet away, masturbating furiously. \n\nI don't know why I should feel like it was a joke. I mean, this sort of thing happens every day, doesn't it? \n\nFor the last three, anyway. Hopefully many more, in the future. \n\nI pulled back, leaving just the tip inside her, then slammed it back in. \n\n\"Uhhhnffff! Oh god!\" Shelagh gasped. \"Yes! Fuck me hard!\"\n\nThe first one was a test. It's go time! I held her tight, and gave it to her as requested, with long, full length strokes that ended with me crashing into her muscular butt. I was pulling her back against me as hard as I was thrusting forward. The sound of our bodies colliding was lost amongst Shelagh's screams, and Vonnie's grunts. She was now working three fingers into herself, and watching us closely. \n\nThe final piece of the puzzle was the smell. Vonnie's bedroom was a decent size, big enough for a king-sized bed, but the air was reaching the saturation point. With three sweaty bodies, two sodden pussies, and the remains of my cumshot mixing scents, it smelled like a well-used brothel in here. It smelled hot, and I liked it. \n\nI was looking down as I fucked my sister, watching her pussy stretch open as I drove my shaft in. Her glutes shook as I slammed against her, then her thick lips dragged out along the length as I pulled back. It was a very, very erotic sight, and would be if it was anyone else's pussy, but because it was my sister's cunt, the sexy factor went up exponentially. It was lighting my fuse. \n\nShelagh kept screaming, and I kept drilling her. She had dropped her shoulders to the surface of the bed, and tucked her head under, so she could see me fucking her hard. I looked into her eyes, seeing the fire there, and shifted into high gear. She was begging for another orgasm, and I made it my mission to give it to her. \n\nVonnie shrieked, attracting my attention. I found her with four fingers jammed inside her pussy, and the other hand working her clit. She was cumming, and cumming, and cumming. \n\nSo was Shelagh, and within seconds, so was I. I gave her one last, vicious stab, and exploded inside her. \n\nAll three of us came together, voicing our bliss in a way that made me glad my Grandparent's house was spaced far enough away from the neighbours that we shouldn't have been heard. The last thing we needed was nosey neighbours telling Grandma and Grandpa about the noises they heard coming from the house in their absence. \n\nThe room was silent now, other than the heavy breathing. I patted my sister's ass, and started to pull out. \n\n\"Wait!\" Vonnie gasped, untangling herself from the chair. I froze. Vonnie's face appeared at my hip. \"Okay, uncork her.\"\n\nOh god. I pulled my wilting dick out of my Shelagh's cunt, and my semen began to drip from around her clit. I watched as Vonnie pushed me aside, and clamped her lips over my sister's pussy, sucking my cum out of her. \n\n\"Oh, jesus!\" Shelagh gasped, squirming forward on the bed. Vonnie pushed her over onto her back, and dove in, continuing her cleanup of her niece's abused, cum filled gash. \"Oh fuck! Yes Vonnie!\" Shelagh grabbed a handful of my Aunt's red hair, and pulled, rubbing her pussy across Vonnie's face. \n\nMy penis tried to rise again at the sight of my Aunt eating my sister's cunt. It really did, but having cum twice in the last hour or so... well, it just wasn't going to happen. \n\nStill, I wasn't about to turn away, with a show like this happening right in front of me. For a brief second, I thought of grabbing my phone, and capturing the action on video. My dick was all in favour of it, but fortunately, my rational mind overrode that sentiment. There was little to be gained from having that kind of evidence in existence. Way too dangerous. \n\nSo I sat there, close beside my sister, and watched my Aunt devour her succulent pussy. I knew Shelagh tasted good. I knew Vonnie did too. I just didn't expect them to be tasting each other. \n\nShelagh sat up, and grabbed Vonnie's hair again, lifting her face up before planting a kiss on her lips. She licked some of my cum, mixed with her own juices, from our Aunt's face, then kissed her again. They both moaned softly. \n\n\"I get the feeling you've done this before, Sis,\" I laughed. \n\n\"I'd be surprised if she hadn't,\" Vonnie smiled, pausing the action for a second. \"Lots of girls learn to kiss by kissing their girlfriends at slumber parties. I did.\"\n\n\"Really?\" I smiled. Why didn't I know that, back when my sisters were having those parties all the time? I would have tried harder to spy on them if I'd known. \"Is that true, Shel?\" \n\n\"Yup,\" she giggled, and planted another one on Vonnie. \"Just another advantage of being a girl. I don't suppose you kissed your buddies, did you?\" \n\n\"God no!\" I shuddered. \n\nShelagh pressed forward, forcing Vonnie onto her back. She laid atop our Aunt, pressing their breasts together, and they made out happily for a minute. My dick was making yet another valiant effort to rise from the ashes, and when my sister sat up, and spun around to place her pussy on Vonnie's face, it twitched. \n\n\"We didn't do this at my slumber parties, though,\" she smiled. \"She's just so good at it!\" \n\nShelagh moaned as Vonnie's tongue probed her moist depths. She reached out tentatively, and touched Vonnie's pussy softly. Our Aunt's thighs opened wider, silently giving consent, and Shelagh stroked her labia in response. \n\nI was tired of just watching, and quickly took a place between Vonnie's thighs. Under my sister's gaze, I moved closer, and ran my tongue across my Aunt's juicy pussy. Vonnie moaned loudly, and Shelagh did the same. It occurred to me that making my Aunt moan while she ate my sister would be like a natural vibrator, so I dispensed with the gentle licks, and went all out. \n\nVonnie's words of direction were still relatively fresh in my mind, so I was quite effective at eliciting moans for the pleasure of both my current bed mates. I suppose this was about as big as our group was going to get, as the only one left that wasn't an outsider was Mom, and it seemed highly unlikely that she would be joining us in the fun, at least not until the temperature in hell dipped below freezing. \n\n\"God Danny, you're pretty good at that,\" Shelagh said softly, still watching from above. \"It's so hot to watch you, and she's obviously enjoying it. She taught you?\" \n\n\"Mmmmm hmmm,\" I nodded, continuing to flick my tongue over Vonnie's clit. \n\n\"Can you teach me?\" Shelagh whispered. I stopped suddenly, shocked at what I was hearing. I looked up at my sister. \"Yes, I've got a pussy, and yes, I know what I like, and you licked mine so wonderfully before, but I've never licked one. Being this close, and smelling her scent... It's very arousing, and like she said, maybe I'm bi-curious.\" \n\n\"Watch and learn, Sis,\" I smiled, and went back to work, swirling my tongue around and into our Aunt's cleft. Vonnie's moans increased, and Shelagh's eyes fluttered at the sensation. She leaned closer, observing intently, until I moved aside. \n\nAnother few seconds of hesitation followed, before she extended her tongue, and became an active bi-sexual. \n\nIt had been quite a day for my sister already. She started out having breakfast with my mother and I. Since then, she had decided incest was a viable option, been eaten by both my Aunt and myself, had her brother's penis jammed up her own pussy, and been filled with my semen. Now she was tasting our Aunt's cunt with her own tongue, and apparently enjoying it. She was almost unrecognizable. \n\nExcept that she wasn't. I knew it was my sister, and I knew it was my Aunt, and I knew I was actually seeing the two of them feasting on each other, in a fantasy-worthy 69, only a few inches away from me. \n\nThat twitch in my dick that signalled it's possible resurrection? Well, there was no doubt about whether or not it was alive now. My cock was fully erect, and eager to get into the action. With the way the ladies were currently positioned, there was only one logical place to put my dick ; Shelagh's pussy. \n\nFor the second time today, and the second time in my life, I prepared to penetrate my sister's vagina, kneeing over Vonnie's head. I made eye contact with my Aunt, and felt her hand steering my penis toward Shelagh's opening. I pushed inside her, sliding deeper with each stroke, while Vonnie's tongue teased my balls. Once I was fully buried in Shelagh's cunt, Vonnie started to use her tongue on her niece's clit. \n\nMy sister shrieked, trying to maintain her contact with our Aunt's pussy, but finding it difficult to do so while I was pounding her from behind. I'm sure Vonnie's tongue was a good part of the reason for Shelagh's sudden increase in volume. \n\nNow being a connoisseur of pussy... I had been in two of them, and I liked them both... I felt qualified to contrast my Aunt's juicy gash, with that of my sister. Admittedly, my sample size was limited, and both of them were related to me, and each other, but there were subtle differences. Quite a few similarities as well. \n\nTo start with, both of them had pouty, dangling labia, although Vonnie's was a little more so. Both kept their luscious coochies hair free, and both were abundantly juicy. My sister's cunt was tighter, but not by much, a few extra years of sexual activity made Vonnie a more experienced teacher. \n\nMy mind was creating new terminology for my partners. We've all heard of the term MILF ; well I had a SILF, and an AILF. Perhaps if I was totally honest, I had a MILF, too. Recent events had convinced me that nearly anything was possible, even acts that seemed doomed to never be spoken. And my Mom was a very attractive woman, much like her youngest sister, Vonnie, whose tongue was currently tickling my balls. \n\nQuite a lot to think about, and a strange time to think it, being balls deep in a succulent pussy. Unless that pussy belongs to your sister, of course. If that's the case, at least in my opinion, it's perfectly logical. \n\nShelly's cunt was gripping my shaft quite snugly. I loved watching her lips dripping out along the length of my penis as I pulled back out. It was so sexy, and even though my balls were empty, it was getting to me. I could feel the tingle beginning, but I knew I could make my sister cum first. After all, Vonnie was helping from below. I also had an ace in the hole. Literally. Her asshole. \n\nIt was something Vonnie taught me inadvertently, when I was fucking her ass. I wasn't sure how Shelly felt about it, but it was worth a try. \n\nI licked my finger. There was a lot of pussy juice available as well, and I lubed my sister's butt hole with it. I gently wormed my fingertip into her tight rear entrance. Her moans and groans acquired an edge, and she squirmed in my grip, but didn't pull away. Actually, she pushed back again the intruding digit harder, until her little ring popped open, and my finger slid in to the second knuckle. \n\n\"GnnnnOHHHFUUUUCK!\" Shelagh groaned. She was getting the full treatment, with my cock in her pussy, my finger in her ass, and Vonnie's tongue on her clit. Only her nipples were being left out, but there was nothing I could do about that now. \n\nHer orgasm was epic. Shelagh shook, screamed, and gasped for air, as it washed over her, then she pulled away, and laid on her side, in an overwhelmed fetal position. Both Vonnie and I watched her. \n\n\"Hmmmm, what to do with this?\" Vonnie giggled, running her tongue along the underside of my cock, which was still hard, and hanging just over her face. Apparently, the question was rhetorical, as she simply pointed it down, and swallowed it, sucking my sister's fragrant juices off my skin. Her mouth felt wonderful. \n\nMovement caught my eye, and I lifted my head from watching my Aunt suck my cock, to see my sister roll off the bed. She came closer, and stopped beside me, reaching out to grip the base of my dick. \n\n\"Vonnie? May I?\" she asked softly. My Aunt relinquished her lip grip, and nodded. Shelagh steered me to the edge of the bed. \"Stand please, baby bro.\" \n\nI did, as she knelt before me. Her hand stroked my thick shaft, and she licked her lips. \n\n\"Danny, this is one very nice cock,\" she smiled up at me. \"You'll let me use it, from time to time, won't you?\" \n\nAt the risk of stating the obvious... Yes! Of course. Use me for your pleasure. Use me for my pleasure. Just use me. Fuck me. Suck me. I'll do the same for you, Sis. \n\n\"Anytime, anywhere,\" I smiled. She was rubbing the head of my cock across her nipples, and grinned at me. She settled in place, her face directly in front of my crotch, and took a deep breath. \n\n\"I just love sucking cock,\" she breathed, stroking me again. \"I've been told I'm good at it. What do you think?\" Her mouth opened, and her plump, kissable lips slid slowly down my length. \n\nI think that's a really good start, I thought, as I felt the back of her throat against the end of my dick. She breathed slowly through her nose, in an almost meditative fashion, and I felt her tongue worming along the underside of my shaft. What she did next was a surprise, both to me, and Vonnie, who had taken a place beside my sister. \n\nShelagh shifted, and tilted her head back a little, then pressed forward. \n\n\"Oh my god! Go for it Shel!\" Vonnie gasped, watching my sister's lips slide further and further down, as my cock found room in her throat. \n\n'Oh my god' seemed a pretty accurate description of the sensations I was feeling. Shelly pulled back a bit to breathe, then pressed in again, until I felt her lips on my pubes, and her tongue on my balls. \n\n\"Okay, I'm officially impressed, Shelly,\" my Aunt giggled, watching my sister slowly move back and forth, spit dripping off her lips. \"Maybe you can teach me how to suck a cock like that. I'd love to get more than half that thing into my mouth. My niece Shelagh, the deep-throat champ!\" ",
        "My sister Shelagh, the deep-throat champ, was deep-throating MY cock, and it had taken away my power of speech. I felt my legs start to quiver. I know my experience is very limited, but this was the most incredible thing I had ever felt. Better than pussy. Better than Vonnie's ass, or her tits around my cock. Better than anything. \n\n\"Gnnuhhhn! Shel... Please... Cum... ming,\" I managed to grunt, just in time for her to back off. Drool ran down her chin, and dripped onto her fabulous tits, as she grabbed my cock and aimed it at her face. \n\nBlam! My cock flexed from root to tip, and despite having cum twice already today, a huge blob of semen splattered across her pretty nose, lips, and chin. The rest of the load was less forceful, dripping off onto her hand as she jerked me eagerly. \n\nThat was it for me. I fell over backwards, fortunate to hit the bed. The room was spinning again, and the last thing I heard before the room went dark was my Aunt and sister moaning, as they kissed and gobbled my cum from each other's faces. \n\n***\n\nI woke alone, and tucked into the covers lovingly. From what I remembered, my collapse wasn't that precise, so I can only assume I had my lovely bedmates to thank for making me comfortable. \n\nStretching, I could feel the dull ache in my groin that always accompanied cumming so often. I knew that, because my personal record for masturbation was six in one day, and my balls hurt for two days afterwards. \n\nI heard giggling from downstairs, and curiosity made me follow the sound. Dressing didn't even cross my mind, so it's a good thing that the sound was only Vonnie and Shelagh. \n\n\"Hey,\" I moaned, rubbing my face. \"What time is it?\" \n\nThey weren't dressed either, sitting at the kitchen island, drinking coffee naked as though it was the most natural thing in the world. I barely noticed the bare skin. It was going to take more than their beautiful, jiggling breasts to wake my dick now. He was down for the count. \n\n\"Hey! See? I told you you didn't kill him!\" Vonnie laughed. \"How would we have explained that anyway? Killing your brother by blowjob?\" \n\nShelagh rose from her stool, and came to hug me. She was so soft, and lovely to hold. \n\n\"How you doing?\" she asked, kissing me gently on the lips. \"I was a little worried when we couldn't wake you. Never had anyone pass out on me like that.\" \n\n\"I'm good, Sis,\" I replied. \"Never had anyone suck my cock like that, either.\"\n\n\"Well, you will again,\" Shelly giggled. \"Anytime. Anywhere,\" she added, using my words. \"You liked it then?\" \n\n\"Duh?\" I laughed, now fully awake. \n\n\"Your sister has promised to teach me how she does that,\" Siobhan smiled. \"You won't mind if I practice on you, will you?\" \n\n\"Duh!\" I repeated. \"What time did you say it was?\" \n\n\"Late enough that we were just going to come for you,\" Vonnie said, reverting to adult mode. \"Shelly... get dressed, and go home. What's your story for why you were gone all afternoon?\" \n\n\"I'll think of something,\" Shelagh nodded. \"See you at dinner.\" She pecked me on the lips, did the same to our Aunt, and raced upstairs. \n\n\"So, young man,\" Vonnie smiled, bouncing her crossed foot playfully. \"Quite the day, huh?\" \n\n\"You could say that,\" I giggled. \"Please tell me you don't have bigger plans for tomorrow? I don't think I can survive it.\" \n\nVonnie just smiled, and walked over to me, wrapping her arms around my neck. She kissed me deeply. There was something different about this kiss, though. It felt different, because I 'felt' it. \n\n\"No promises, lover,\" she whispered. \"No promises.\" \n\nShelly had returned, buttoning her blouse, and tucking herself back into sartorial perfection. She found us in each other's arms. \n\n\"Hey, don't make me take this off again,\" she giggled. \"Can I trust you two alone together?\" \n\nVonnie was looking into my eyes, a strangely content look on her face. Her arms held me close, pressing her huge, soft breasts against my chest. We were swaying softly, almost as though dancing to imaginary music. \n\n\"We'll be there for dinner,\" Vonnie said, never shifting her gaze. \n\n\"Okay. Don't be late,\" Shelagh nodded. \"See ya!\" \n\nVonnie's lips were on mine again before the front door closed. She led me back upstairs, and we laid down again. \n\nNot to have sex. Not even to make love. No, we simply kissed. Layers of emotion peeled back with each embrace, going deeper and deeper. \n\nCloser to the heart. \n\n***\n\nMom was quite enjoying this family dinner thing. Having my Grandparents away, and her baby sister visiting every evening, was making her quite happy. \n\nAs long as she was ignorant of the details, that is. \n\nFor three of the four people around the table tonight, today had not been 'just another day'. For me, the proof was the ache in my balls. I'm sure both Vonnie and Shelagh were feeling the female equivalent. Several furtive glances were exchanged, but we were otherwise able to effectively disguise our emotions. \n\nAfter dinner, Vonnie and Mom went to talk in living room, leaving my sister and I to do the dishes. \n\nI'll flip you for it,\" I said quietly, meaning the winner would dry, and the loser would wash. I barely got the words out, before Shelly was sucking on my tongue. \n\nI went to push her away, but my hands ended up on her big tits, causing her to moan quietly. The second attempt found her shoulders, and I succeeded in separating us. \n\n\"Are you crazy?\" I hissed. \"This isn't Vonnie's bedroom. Mom is right there!\" I reminded her, pointing in the direction of certain death. \n\n\"Relax stud,\" she giggled softly. 'Vonnie's with her, and they're yacking. They'll be in there for hours. Besides, it was just a kiss. I'll wash, you dry.\"\n\nIt took a minute, but her words got through, and I realized we really didn't have much to worry about. We were alone. As long as we were quiet, we were probably safe. \n\nShelly had her back to me, running the water and sorting the dishes. She probably didn't even know I was right behind her, until I gathered her hair, exposing the side of her neck. She gasped as my lips nibbled at the nape and side of her elegant neck, bracing herself against the counter. My right hand reached around, and cupped her large breast. \n\n\"Mmmmm, suddenly brave, are we?\" she whispered. I answered by kissing her neck more, while I unbuttoned her blouse, and slipped my hand inside, fondling her globes firmly. \"Oh Danny, that's so good.\" Her butt pressed back against me. \"Don't start something we can't finish, though, okay?\" \n\nShe was right, of course, but I was rather liking this new bit about having a lover in the very same house. I nuzzled her more, and now had both hands inside her blouse. Her nipples were poking at her bra, and her breathing was quivering, both indications of her increasing arousal. She made one more attempt to reason with me. \n\n\"Danny, please, you're making me crazy, and you know we can't fuck while Mom is home,\" she whispered, begging me to stop. \n\n\"Alright,\" I sighed, in her ear, getting in a few final gropes before I withdrew my hands. She buttoned up quickly, but left enough cleavage on display to keep things interesting. I patted her bum, and she giggled. \n\n\"Let's get these dishes done,\" she directed, and started to scrub a bowl, while I stood with tea towel ready. We went back to being brother and sister, for the most part, although I did peek down her top several times. She just smiled, and kept washing, until we were done. I grabbed her ass again, and kissed her ear. \n\n\"I'm going to my room,\" I breathed. \"See you later, Sis. \n\n***\n\n\"Danny? Are you awake?\" I heard, in a whisper. My bedroom door opened silently, and a shadowy figure entered. \n\n\"Danny?\" she repeated. \n\n\"Yes Shel, I'm awake,\" I replied softly. Moist lips found mine in the darkness. \n\n\"I can't sleep,\" she breathed. \"I need you.\" \n\n\"You were the one who said we can't fuck while Mom is home,\" I reminded her. The lips pressed in again, and her tongue writhed around inside my mouth. \n\n\"What did you say?\" she asked, cheeky bugger. \"If you fuck me, I'll suck your cock again?\" she promised. \n\nOoooooooooh. Deeeeep throooooooat. So goooood. \n\n\"Downstairs powder room. Now,\" I ordered. \"Watch the third step from the top...\" \n\n\"I know. It squeaks,\" she finished. \"You're not the only one who sneaks around the house.\" \n\nWe crept out the door, down the hallway, and descended the stairs, squeak free. Once inside the powder room, with the door locked, Shelagh turned on the light. \n\n\"Fuck! That's bright!\" she hissed, blinking in the sudden glare. I was doing the same, trying to keep my retinas from melting. As my eyes adjusted, I took in her attire; an old, stretched out, pink t-shirt, that was thin enough that her nipples were almost visible. It hung off her left shoulder, and reached just below her ass. \n\n\"Nice outfit,\" I smiled. \"Take it off.\" \n\n\"You first,\" she giggled quietly. \n\n\"Fine,\" I replied, and dropped my underwear. My dick was semi-soft, and hanging heavily. \n\n\"Let me help you with that,\" my sister grinned, pulling the shirt off over her head. Her big tits wobbled and bounced free, and she dropped to her knees. Since my cock wasn't yet stiff, it slid easily down her throat on the first gobble. \n\n\"Jesus, Shel...!\" I inhaled. \n\n\"Mmmmmmmmmmm,\" she moaned softly, bobbing her head dutifully. My penis was hardening quickly, and she adjusted her position to accommodate the expansion. Once she was satisfied, she pulled back, slurping up excess saliva as she did. \n\n\"Shelly... that's incredible. How did you learn that?\" I sighed. \n\n\"Practice,\" she smiled. \"Lots and lots of practice. Now sit down, and let me use that big cock. I'll suck you again after I cum.\" \n\nThat's fine with me, I thought, as I sat on the toilet seat. She straddled me, and lowered herself aboard. My cock was very wet, and so was she, so it didn't take as much effort as it had earlier, in Vonnie's bedroom, our first time together. Her arms were around my neck, and as she bottomed out, she kissed me again. My sister is an excellent kisser. \n\nShelagh rose and fell slowly, controlling her movements so as to be as quiet as possible. She broke away from the kiss. \n\n\"God, Danny, your cock fills me so full,\" she whispered. \"It's the best ever.\" She leaned back a bit, and ground her cunt down harder. I looked at her beautiful breasts, and realized I hadn't yet tasted those pink nipples. No time like the present. I latched on and sucked gently. \"Mnnahhn! Fuck, yes!\" she gasped, a little louder than intended. She reached over to the towel bar, and retrieved a small towel, which she stuck in her mouth. She nodded. \n\nI sucked harder, gnawing on the stiff pink nub, while she ground her clit against the hard base of my dick. The towel muffled her moans, and I switched breasts occasionally. I could feel her starting to quiver, and the look in her eyes told me she was getting close. Her hips picked up their pace, and she moaned again, then buried her face in my shoulder. I held her tight, while her body clenched, over and over, through a huge orgasm. She fought to stay quiet, keeping it down to a few small squeaks and desperate snorts. \n\n\"You okay, Sis?\" I asked softly, stroking her long hair. She stayed wrapped in my arms, and nodded slowly. \n\n\"Wow,\" she whispered. \"Just... Wow.\" \n\n\"Want another one?\" I asked. \n\n\"Okay. Need a minute, first,\" she responded, still resting against me. \n\nFor the second time today, a woman wanted to be held by me. Me, the just- turned-eighteen-only-been-having-sex-for-three-days-just-figuring-out-women guy. Strangely, I really liked it. It made me feel warm inside. \n\nShelly rose slowly, and turned away, bracing herself against the vanity counter. \n\n\"How's this?\" she smiled. I pulled her hips higher, putting her legs together and mine outside of hers, wide apart, equalizing enough of our height difference to make it work. \n\nI put the tip of my spear in her vestibule, and pushed back into her, while looking into her eyes in the mirror. Her eyes fluttered, and she groaned through the towel. It was fun, watching her face in the reflection, as every stroke made her eyes roll back. Of course, her eyes weren't the only thing I was watching, as even smooth, gentle thrusts were making her big, hanging breasts swing in circles and slap together. \n\nShelly began to squeal quietly, her eyes screwed shut tight. She flushed again, and came. This time, I had to catch her, as her legs gave out, and I eased her down to the floor. \n\n\"Oh god, that was good,\" she panted, \"but I can't hold it in anymore. If you make me cum again, everyone in the neighbourhood will know about it. It's your turn.\" \n\nShe handed me the towel, and took her kneeling position in front of me. Within seconds, I was the one fighting to stay silent, as she had me once again down her throat. \n\nIt must be the tongue. That's the only thing a mouth has that a pussy doesn't. Or the suction. A pussy can't actually do that either, can it? Yes, it's the tongue and the suction that makes a blowjob so damned good, especially one of Shelly's deep-throat versions. \n\nOf course, looking down into my sister's liquid blue eyes, as the entirety of my erection disappeared miraculously, over and over, into her mouth... well, that might play a part, too. My beautiful sister, deep-throating my cock, while Mom slept upstairs. \n\n\"Oh shit!\" I grunted into the towel, and erupted into Shelagh's mouth. She backed off about halfway, and sucked hard, her cheeks hollowing as she did her best to draw out every drop I had. I heard her gulping down the repeated explosions of semen, and braced myself between the walls of the small room, arms outstretched. My legs had reverted to some gelatinous state, and were barely able to hold me up, while my sister lovingly vacuumed the dregs from my deflating rod, cleaning it up for me. \n\nWith a very un-sisterly kiss on the head of my softened dick, she stood, a very satisfied smile on her face. I handed her the towel, and she wiped her mouth of excess spit. \n\n\"Shelly... Wow!\" I gasped, watching her in the mirror as she put her t-shirt back on. Her very erect nipples made obvious dents in the fabric. \n\n\"Thank you, little brother,\" she smiled, and kissed me again. \"I'll sleep much better now.\" \n\n\"Me too,\" I mumbled. I'll be lucky to make it upstairs before I pass out. \n\nShe turned off the lights, and we waited a few seconds before opening the door slowly. Our night vision wasn't as good as it was on the way down here, but we managed to find our way without crashing into anything. At the foot of the stairs, she gave me another kiss, and we headed up. \n\nSQUEAK! \n\nOh fuck! The third step from the top! I didn't step over it, and announced our presence. \n\nWell, to be fair, both my coordination and mental faculties had been severely comprised but my sister's incredible deep-throat prowess. Thankfully, nothing will restore it faster than impending doom. \n\n\"Go!\" I whispered. \"I'll cover you.\" \n\nShelagh darted away on tiptoes, passing the lion's den and making it to her room like a ghost in the night. \n\n\"SQUEAK!\" the stair said as I stepped off it, and walked heavily down the hall. \n\n\"Danny?\" I heard from Mom's room, through the door. \n\n\"Yeah, Mom, it's me,\" I replied. \n\n\"Everything okay?\" she asked. \n\nAs far as you know... Yes, everything is fine. What you don't know is that everything is absolutely fan-fucking-tastic! Your sister... My Aunt... is teaching me everything I need to know about women, and how to please them in the bedroom. She's an excellent teacher, heavy on the practical experience. Also, your daughter... My sister... is one helluva fuck, and gives the world's best blowjobs. So yes, everything is fine. \n\n\"Yeah. Just wanted a drink. Sorry I woke you,\" I smiled. \n\n\"That's okay, honey. Goodnight,\" she replied. \n\n\"Goodnight, Mom,\" I said, having made it to my room. I closed the door, and leaned against it, hoping I was the only one who could hear my heart pounding. \n\nMy phone buzzed softly. Message from my sister. \n\nThanks, baby brother. Nice cover. she sent. \n\nBefore I could respond, another came in. \n\nNice cock, too. Delicious. Very nutritious midnight snack. \n\nThanks Shel. More if you need it, just not tonight, I replied. \n\nGoodnight stud. \n\nGoodnight, supreme cocksucker. \n\nI put my phone down and exhaled. Life was fantastic, but it was getting more than a little complicated, and very, very dangerous. Not only was I fucking two blood-relatives, it appeared one of them was getting emotionally attached, if I read Vonnie's reaction this afternoon correctly. And now, by adding my sister to the mix, it appeared I had become an available menu item, anytime she was horny, or peckish. \n\nIt appeared that the situation was bent on destruction, sooner or later. Mom would find out, and kill me. \n\nUntil then? \n\nWhat a way to go! \n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nI think Danny has earned some rest. \n\nHe's gonna need it. \n\nThanks for reading, and please let me know how you feel about this, or any of my other stories. \n\nOf course, your vote matters to me."
    ],
    "authorname": "ilikeithot6308",
    "tags": [
        "incest",
        "aunt-nephew",
        "brother-sister",
        "redheads",
        "big tits",
        "lesbian",
        "aunt-niece",
        "deep throat",
        "anal play",
        "creampie"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/aunties-panties-pt-03"
}
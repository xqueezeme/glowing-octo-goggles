{
    "title": "Androshorts: The Arse man",
    "pages": [
        "My flushed face was buried in the pillow and I felt his warm hands rest on my bottom.\n\n\"Reach back and spread your cheeks for me Alex,\" said Steve. I did so.\n\nThe reason I was on my hands and knees on a hotel bed exposing myself to a colleague from work was a really strange story that no one is ever going to believe.\n\nMy name is Alexa and I'm a 27 year old mortgage advisor for one of the larger banking groups in England; I started out there straight from school and worked up to junior management and after a few years, a career break to have my son and a few exams I was qualified to advise people on what sort of financial package was best suited to them. My employer was quite family friendly and I was able to work around the child care and then school of my son Nicky.\n\nMy Mum had Greek grandparents hence my name and my son's. Don't get me wrong, other than my jet black hair, Mediterranean curves and 'faintly tanned' looking skin that's it. I don't speak the language and never have done, I've no objection to Ouzo or some of the other wines that the 'old country' produces but I actually dislike Moussaka and baklava. Given the choice I much prefer Italian food when I'm sober, Indian when I've had a few drinks.\n\nI'm 5'10\" and a 36-26-36 with a D cup, classic Mediterranean curvy I hear you say. I don't know about that, but all the females on my mother's side are the same shape with the same dark hair and like them I have been the subject of any amount of lust from men and disgust from jealous females.\n\nAll through school I was overweight which included my already large boobs; I was spotty and to increase my adolescent misery I had a squint and suffered from all of the usual jibes and jokes, the most regular was 'the big fat Greek' once I had mentioned my Grandparents. From puberty to the end of my exams was misery. I came on for the first time and that was pretty painful and I had a couple of accidents, it couldn't get much worse.\n\nMum and Dad were really supportive though and they did have a few trips to the head teacher to 'sort things out for me' for which I was eternally grateful. On my return from my last exam though, Mum said that the Doctor was now happy to put me in for surgery to correct my squint. \n\nWhat? \n\nWhere the fuck had that come from? No one had ever told me that this was likely to even be an option! They didn't want me to get to over excited before the exams she said.\n\nThe doctor wanted me to have a week off after all my revising and exam stress, then I went into hospital for the op. I went in the night before, had the surgery at silly O'clock the next morning and late that evening my Darling Daddy came and collected me. Within a fortnight, it was all done and my eyesight was perfect and my squint completely cured and I could stop wearing my thick corrective spectacles.\n\nIt was a turning point in my life and I never looked back. My GP put me on the pill to help ease my periods and now free of misery and exam stress my appetite improved. I stopped comfort eating, and with my squint cured I was able to get back into my favourite sport, outdoor netball. I joined a local team and even began to run and swim again to improve my general fitness. Little did I know it but Mum had put me on the same diet she was on some weeks before!\n\nI had bought a ticket for the school prom that was still a month away but hadn't been looking forward to it and wasn't going to go, and had already started to drip feed a couple of my mates the story that I was due on.\n\nMum's sister, my lovely Aunt Nicki is a dressmaker and happened to call round to see my Mum and Dad and complimented me on my weight loss and my new look.\n\n\"Yeah,\" said Mum in a tone I now know was calculated to challenge Aunt Nicki, \"She's lost so much weight I bet her prom dress won't fit now...\"\n\n\"Go put it on Alex,\" she said with self-confident smile, \"you leave it to Aunt Nicki.\"\n\nWith a tape measure and a box of pins she quickly pulled and tugged at my huge dark blue silk dress. She asked my smiling Mum something and promised my dress would be back with us the following Wednesday ready for me to try on and to slip into on the Friday.\n\nOn Wednesday night, I was just back from swimming and saw my dress on a hanger and there appeared to be considerably less of it than there was a week ago. Dad was banished to the kitchen where he settled to read the evening paper and drink the tea pot dry.\n\nI quickly nagged out of my tracksuit and the dress slipped over me.\n\n\"Take of that bra Alex,\" said Aunt Nicki digging through her bag. I was really embarrassed and blushed, and even though Nicki had changed my nappies when I was a baby there hadn't been anywhere near as much of me then as there was now! \"Here,\" she said opening a small 'Triumph' box and taking out a pretty lacy bra of a matching colour to my dress. I was so taken with how pretty it looked I didn't notice Mum unsnap my bra clip until I felt the weight of my boobs dropping.\n\n\"You were right Di,\" said Aunt Nicki to Mum, \"They are just about perfect, here Darling, put this on.\"\n\nLittle did I know it then but my lovely Mum and my ever so cheeky Aunt were about to dress me in the first sexy underwear I'd ever owned. It was my first balcony bra and lifted my normally bulging now full boobs into the most wonderful shape and there was my first ever cleavage!\n\n\"Wow Nicks!\" said Mum, \"you got that bit right - what about Cinderella's dress?\"\n\nThe long tube of blue silk was dropped over me and Aunt Nicki turned me around and 'pulled the dress around me'. It fitted every curve and she zipped me into it.\n\nI stared open mouthed in the mirror at the hot looking girl with the sexy cleavage that had suddenly grown into her curves. The material that had covered my shoulders and bulging tits was now pulled into pleats from my shoulder and every time I moved it seemed to glimmer with a light all of its own.\n\nI did a little twirl looking into our large mirror,\n\n\"Fuck but I'm good at this,\" said Aunt Nicki.\n\n\"She's all Andros now!\" said Mum. Andros had been Maternal Great-grandma's name and it was how all the females on that side of my family referred to their shape.\n\n\"And then some,\" said Aunt Nicki.\n\n\"Auntie Nix,\" I said using the name I'd called her since I could talk, still turning back and forth seeing my long light brown legs through the knee length slash that hadn't been there last time, \"It's wonderful!\"\n\n\"I know baby,\" she said, \"No way will anyone take the piss out of you ever again sugar. You'll be the hottest girl in the place. Right Darling, you take that off and I'll be back Friday evening with my makeup box.\" I slipped out of the dress and the bra, slightly proud of what my Mum and Aunt now referred to as my perfect bosom and tight arse.\n\nI texted my friends and said that I would be going to the prom and I'd meet them all there. Dad had quite a nice car anyway so he'd drop me at the large country house hotel.\n\nAs promised, Aunt Nicki arrived and not only did my make-up, she also did my shoulder length hair and dressed it into a pile on my head in a classical Greek style but with a couple of hanging strands to frame my face. Tonight I had shaped eyebrows, something to add length and thickness to my all already dark eyelashes and just enough eye make-up to bring out the blue of eyes. She did it perfectly, after all it was a classic Andros look and she'd done it hundreds of times on herself and her other female relations.\n\nFinally I had a sliver choker with a hanging chain and a 'Diana's owl' pendant put around my neck and Aunt Nicki told me had been my Great-Grandmother's and all the Andros girls had worn it at some time or another. I could see why; it contrasted wonderfully with my skin tone and settled just at the top of my cleavage drawing just enough attention to my boobs, as well as making my neck look long and slim.\n\nStill in my towelling gown I was sent upstairs to put my dress on.\n\n\"Here,\" said Aunt Nicki, \"Don't tell your parents.\" She stuffed a small blue bag into my dressing gown pocket and I didn't dare look at it until I reached my room. It turned out to be the matching string panties that went with my bra. I put them on and was pleased that I'd trimmed my dark pubic hair for my swimming costume. She later admitted that she'd cut the dress quite tight across my bottom because it looked so good, and she didn't want to shock my Mum and Dad.\n\nI dressed and tiptoed downstairs and slid into my black strappy heels that looked great with the dark blue of my dress. Nicki moved things where they should be, including my boobs, and I was declared 'perfect'.\n\nThere were photographs, and even a glass of prosecco just to 'drown the butterflies' as Aunt Nicki had it. Dad was still wearing his suit from work and far from the shocked 'you aren't leaving the house dressed like that' most of the sitcoms I'd ever seen had prepared me for, Dad just had the most wonderful proud smile for me and took my hand and led me out to his Land Rover Discovery he'd had valeted that lunchtime especially. \n\nHe was wearing his sunglasses against the summer late evening glare and stopped level to the steps into the hotel. He jumped out to open my door and took my hand as I stepped down from the back of the car. As he did this at least three photographers snapped pictures of me. I was totally unused to the attention but remembered the advice from Aunt Nicki, 'stand up straight, one hand on the hip you are resting your weight on and smile with your eyes as well as your mouth'. One of the photographers was from the local paper and my beaming smile was on the front page of the 'full colour Prom special edition' they produced a week or so later.\n\nDad pecked me on the cheek, wished me a great evening and said for me to text him when I needed collecting.\n\nI walked slowly into the foyer of the hotel feeling great but really nervous and was handed another glass of prosecco. No one spoke to me for at least two minutes.\n\nMr Blake was our mad physics teacher and he was the first to approach me.\n\n\"Lexa?\" he said looking me up and down.\n\n\"Yes sir,\" I said, unsure of what else I could throw into the conversation.\n\n\"Wow!\" he grinned, \"you look so different without your glasses, and I'm so pleased the surgery went well.\"\n\n\"Yes,\" I smiled back, conscious that the rest of the slowly filling room was suddenly becoming aware of me, \"it was the week after the exams finished, it's great not to have to wear the spec's anymore.\"\n\n\"You look so different Lexa,\" he said, \"And I'm so pleased that you decided to come this evening. Bell of the ball I think.\" He whispered to me, \"Don't look now but I think Chantelle and Emma are going mouldy, or is it green with envy? Enjoy it sweetie,\" he giggled trying not to smile at the two overly dressed, overly made up girls that had been top of my bully list since halfway through year ten. I looked like a fashion model while they both looked like something out an explosion in a dress factory next door to a bakery; both wore frilly dresses in almost fluorescent colours that put me in mind of those awful knitted toilet roll covers with the Barbie dolly stuck inside. 'Big Fat Gypsy Wedding' had nothing on them.\n\nMr Blake was soon joined by lovely Mrs Kelly (English and Sociology) who came across in her dark blue cocktail dress and held both of my hands while she looked me up and down, and kissed me on the cheek.\n\n\"Wow Alexa! Look at you!\" she almost screeched, and turned, \"Jackie, it is!\" she yelled across the room to Miss Allen (PE and sports science) who trotted across looking amazingly hot in her little black dress.\n\n\"Wow Lexie!\" she said, (all of my teachers used a variety of different variations of Alexa), \"and you've been working out! Don't tell me, you've taken up netball again haven't you?\"\n\n\"Yes Miss!\" I said proudly, \"I'm in the Hawks first team.\" I was quite tall for a girl - my Dad was well into the six foot area, so I was quite popular in that sport.\n\n\"I couldn't get her to play for the school look Karen,\" she tried to look cross, \"But whatever you are doing it looks fantastic on you.\"\n\nThey both asked me about the dress and matching clutch bag, and I told them about the family heirloom jewellery currently knocking people dead.\n\nMiss Allen was right, I never did play netball for the school because as soon as I reached puberty something went strange with my system and whenever my heart rate when up, I started to see two balls, and always seemed to try and catch the one that wasn't there and the bitches would laugh at me. Ah well, they weren't laughing anymore.\n\nMy friends arrived and had walked straight past me, thinking I was another teacher chatting with Mr Blake, Mrs Kelly and Miss Allen.\n\n\"LEXA!\" came the scream as all four of them descended on me and I was dragged away from the grown-ups. They had taken their complimentary glass of wine and had stood in a huddle looking around for people they knew. A young man with eyes on one of them came over and chatted nervously.\n\n\"Have you seen Alexa?\" he said simply. They hadn't - above the normal excitement was me looking shapely, sexy and grown up, without glasses and a squint since any of them had known me.\n\nAfter a quite mediocre dinner I was declared prom queen and had the first dance with Simon, the prom King, and also the school rugby team captain looking hot in his black dinner jacket, all his muscles bulging in the right place.\n\nDuring the dance he asked me about my transformation, and I said about the eye surgery, and my taking up sport again. He was amazingly nice and while we slowly danced he plucked up the nerve to ask me out on a date. I agreed, and we went out all that summer and for another year until he got a place at a residential sports college before he headed off to University. My confidence soared and fat frumpy Alexa was never seen again.\n\nI went to college and got my A' levels, and started work in a local building society as part of their management trainee scheme. I got into a relationship with a guy called Tom who worked at a nearby branch who was on the same training scheme. \n\nTom wanted desperately to be a high flyer but didn't have the brains or the balls. He told me that his dream was to work in the investment end of the work in the City of London, and a six figure salary and all the bonuses. He applied for the better paid jobs but was universally turned down for all of them, the feedback being he needed more experience - they were too kind to also mention 'maturity'. \n\nThe HR manager said that his personal profile said he was best suited to branch work. Tom was rather grumpy but kept on applying.\n\nWe hit it off, having lots in common. We did the same work, worked the same hours, understood the problems that we both had and soon we were making out, then sleeping together. After some months we got engaged, rented a flat and we were both now assistant managers on quite reasonable salaries. It was going well, right up to the point that I fell pregnant with my son Nicky about a year later.\n\nTom didn't mind me being pregnant and seemed genuinely excited about the whole thing, but really didn't like it when Nicky came along. Much as it sounds dreadful to say my darling baby boy Nicky was in truth an accident and a result of problems with other medication while taking birth control pills. Tom asked if I had considered an abortion but the look on my face he realised that was never going to be an option. He said that this complication could hold back 'our plans' but none the less, we would have to carry on.\n\nAs my belly swelled Tom didn't seem to want to make love to me anymore, the worst of it was that being pregnant I became horny as fuck. He went from an every bloody night to once a week kind of guy, instead he just stroked my belly and talked to the bump. His love making was nice but restricted to man on top and the occasional doggie style, and he really was working on the foreplay. I, of course, resorted to that old devil called masturbation.\n\nOnce bump became baby and needed feeding and changing and the interruption to his lifestyle began, he changed. We'd had a quite busy social life right up until a month or so before the birth and Tom couldn't see why having a child should stop this. What he meant was of course, he didn't see why it should stop him having a busy social life. \n\nHe came home early one Friday afternoon which was rare and I was really pleased; I'd been suffering a bout of baby blues and was completely wasted. I hugged him and kissed him and cried a bit of it out of my system and asked if I could have a nap for an hour, just to get me through the rest of the day. He smiled and said of course, and that he was out this evening with his friends.\n\n\"Oh,\" I said; I'd been planning to cook something really nice for dinner and for us to settle down on the sofa. Nicky was now six weeks old and I wanted to just have a night in and start making love again.\n\nWhat he didn't tell me was that he wasn't away for the evening, he was out for the weekend with some mates, and he woke me to tell me that the taxi was here.\n\nI rolled out of bed and walked him to the front door to wave off him and his friends for their night on the town. It wasn't until I saw there was a large sports bag by the front door that I guessed.\n\n\"Tom,\" I said, \"where are you going that needs an overnight bag?\"\n\n\"Oh don't start nagging me Alexa,\" he said, \"its Paul's stag weekend in Prague, and I told you about it weeks ago.\"\n\n\"No you didn't,\" I said, \"I may have baby brain but that I would have remembered.\"\n\n\"I'm sure I did!\" he said, trying hard to adopt the in-control professional voice he'd struggled so hard to master while at college.\n\nWe had a diary by the door; both of us were control freaks, what can I say, and everything went in it; birthdays, weddings, social events, doctors, dentists, and I looked down at it. Nothing on the page except for a health visitor check that morning.\n\nTom sighed and rolled his eyes.\n\n\"It's started hasn't it,\" he said, \"You're starting to turn into your mother.\"\n\n\"What the fuck has this to do with my mother?\" I said, \"We have a six week old child that still needs feeding at night, and throughout the day and you're just fucking off on the piss with your mates like baby Nicky is a puppy that I can leave in his basket.\"\n\nOur voices must have raised somewhat as he bunch of mates in the black cab all cheered and cat-called at Tom.\n\n\"Well perhaps you should have thought about that before you had him!\" he hissed red-faced.\n\n\"I had him?\" I snarled, \"and I suppose you had nothing to do with it?\"\n\nThe cheering started again, and voice added, \"She got you whipped Tom!\" and there followed a series of whipping noises.\n\n\"We'll...\" he stuttered noisily, \"We'll talk about this when I get back!\"\n\n\"I'll have changed the fucking locks!\" I shouted at him.\n\nHe had just reached the end of our pathway. He turned, smiled the nastiest smile and hissed, \"I dare you...\"\n\n\"Are you DARING me Tom? That is never going to end well...\"\n\nHe hissed through his teeth again and walked smiling to the black cab shaking his head, his mates cheered. \n\nI put Nicky in his car seat, drove to the DIY superstore and with the advice of one of the staff bought a replacement barrel for the Yale lock. I changed it over at a shade after ten the next morning, and drove to my parent's house for lunch. As ever they were delighted to see me and more so their first grandchild Nicky.\n\nMum picked up that something was wrong and I told her. She sent me straight to bed while they changed, top and tailed, fed and played with Nicky. I woke up in my old bed feeling more refreshed than I had since Nicky was born. Such a simple gesture, but it meant more to me than the bunches of flowers, take-out food and bottles of wine that Tom had brought home for me had done.",
        "I had a great day with them and I still remember that as being one of the first days I began to realise the joy of being a Mummy.\n\nTom returned at gone eleven on Sunday night and of course couldn't get in. His mates cheered and jeered as it was obvious that his key didn't open the door and I had indeed changed the lock.\n\nHe thumped on the door as his mates laughed uproariously; I know this as I was sat in the bedroom window in my nightdress with the lights off. I left him just long enough for the message to be driven home by his mates piss-taking as much as his inability to get through his own front door.\n\nI left it just long enough and turned on the bedroom light and then the hall lights, and finally the porch light. I opened the door slowly and folded my arms. This led to whoops of joy from his mates and eventually the cabbie realised they weren't helping and drove away.\n\n\"What the fuck do you think you are doing?\" he slurred, obviously still the worse for the booze he'd drunk.\n\n\"Difficult for you was it?\" I said, \"Difficult to get through the door? I put my hands on my hips and gave him both barrels. \"TRY GETTING THROUGH THE DOOR WITH BAGS OF SHOPPING AND A CRYING BABY WHEN YOU'VE ONLY HAD FOUR HOURS SLEEP IN 36!\" (Confession - that was far from the truth, I'd spent the last 36 hours at Mum and Dad's and they carried in my shopping and had only left a couple of hours ago - but I wasn't going to let this twat know that).\n\nI slowed down and pointed an accusatory finger at him, \"Then tell me how tough it was for you for the three minutes your mates were laughing at you.\"\n\n\"But...\" he started, trying to work up a similar venom. Sadly Tom just didn't have it in him.\n\n\"I'm going to bed,\" I said shaking my head in disappointment, \"if you can make it upstairs please do so quietly, Nicky has only just gone down.\"\n\nI stomped upstairs - quietly.\n\nThe alarm went off at 0645 and Tom had a hell of a hangover. I let him enjoy it. Nicky didn't let me down either and screamed his head off while I was in the shower.\n\n\"Can you call in sick for me...\" mumbled Tom staring blankly into the bathroom mirror, his face a garish pale green colour.\n\n\"What?\" I snarled, \"In the mood I'm in? What do you think I'll tell your manager?\"\n\nHe thought about it, stared at his reflection for a few moments then threw up in the toilet.\n\nI took pity on him and rang his branch and told them he must have picked up some stomach bug while in Europe over the weekend. The lady taking the message said that she didn't doubt it for a second and she'd watched his progress via his Facebook page.\n\nShit; ah well, I did my best.\n\nHe spent most of that day in bed and went to work the next, returning at almost 6pm in a foul mood.\n\n\"What did you tell them yesterday!?!\" he snarled.\n\n\"What? What did I tell who?\"\n\n\"EVERYONE IN THE FUCKING OFFICE!\" he snarled, swinging an arm and knocking over a vase, \"everyone knows I couldn't come to work yesterday because I was still pissed! Frank was fuming!\" He folded his arms and turned half away from me, his standard action when annoyed with me. \"I know you were cross because I chose to go away for the weekend with some mates, but what kind of revenge do you think you'd get for telling them I was still pissed! I pay the bills as well you stupid bitch!\" he yelled at the top of his voice; Nicky started to cry.\n\nI picked him out of his bouncy chair and hugged him, tears running down my face now.\n\n\"WELL?\" he shouted at me, pushing his forehead against mine, so hard it almost hurt.\n\n\"I lied to them Tom,\" I hissed back at him, \"I told them you'd picked up a stomach bug while in Europe,\" my voice broke as much with suppressed fury as fear, \"I put MY good name on the line for you, FOR YOU! I work for the same fucking company!\" I shouted back. I hugged Nicky, cradling his head and whispering sweet nothings into his ear and rocking him gently and getting my breath back for my second go. \"But I spoke with Kirsty, you know the one you like so much? Well she told me she'd been following your progress on Facebook! Well you know what? I had a look as well and the ten of you certainly pushed the fucking boat out didn't you?\" Tom's face went from a flushed angry red to a sweaty white. I fussed my mobile from my back pocket and threw it at him. \"Check Tom! Check and see why everyone knows you were pissed and not off with a stomach bug.\" I caught my breath, \"and I hope the women you were buying drinks for and dirty dancing with were good fun; well more fun than the old ball and chain sat at home looking after your son!\"\n\n\"I...\" he stuttered.\n\n\"Don't fucking blame me for not covering your stupid, arrogant, ignorant, immature fucking arse when you plastered your debauchery across the World Wide Web for everyone to see you selfish twat! I now know why Kirsty thought it was so funny that I didn't seem to know what had gone on.\"\n\nHugging Nicky and ran to our bedroom and put him in his tiny day bed while I sat down and wept.\n\nI heard him walk upstairs; he stopped at our bedroom door.\n\n\"Alexa, I'm sorry.\"\n\n\"You should be,\" I said wiping my face with my sleeve.\n\n\"It was just...\"\n\n\"Just what?\"\n\n\"Nothing,\" he said.\n\nI turned to face him.\n\n\"Don't you ever do anything like that to me again,\" I said.\n\n\"I can't go out with my mates again?\"\n\nI stood, hands on hips again, \"No you fucking idiot,\" I snarled at him, \"Don't you ever force your face against mine and shout at me, especially when our son is in the room, and don't you ever... call... me... stupid!\" I tapped his chest with each word.\n\nHe stalked away to the bathroom like a naughty boy caught out. \n\nThat week our relationship changed; we'd both seen sides of the other person that neither of us liked. He was under the impression I was going to be a squeaky stay-at-home 'yes dear' Mum like his had been, and I thought that all Daddies were as good as mine.\n\nIt went from bad to worse, we stopped having sex, cuddling, moving to separate chairs rather than up close on the sofa and eventually stopped even kissing each other, and the writing was on the wall. After a few months we finally went our own ways, and he settled to pay towards Nicky's upkeep. To my parents joy Nicky and I moved back in with them until I'd raised the deposit on my own place. To this day Nicky has his own room there and a permanent welcome from Nanny and Gramps. His welcome at Tom's parents wasn't quite so welcoming and God forbid I'm ever late picking Nicky up from them, they tell me exactly to the minute how much over I've been - I kind of get the feeling they begrudge Tom's time with him.\n\nI had to reduce my hours at work so the management post I'd been trained up for was not really an option anymore. I was a qualified mortgage advisor so the part-time post my branch had was a life saver.\n\nA few years passed and things settled and I took out a mortgage on a two bedroom maisonette and Nicky and I had a great time; Tom had him one weekend a month rather that every other weekend and one evening a week and if I'm honest I much preferred it.\n\nI didn't have much time for dating or much of a desire to either. I had a few feminine electrical items that served to keep me happy from an emotional perspective and they lived at the bottom of my underwear drawer. \n\nMy undies drawer was well stocked; since Aunt Nicki bought me my very first balcony bra and string panties I'd had a thing for underwear. Pretty, sexy, lacy, brief - whatever the type, it never failed to turn me on. If I had time in the morning I'd would wear stockings; either hold ups or with a suspender belt.\n\nDon't get me wrong it wasn't every day as I still had me and Nicky to get up and out the door each day and many times it was just as easy to drag on tights. In the summer mind you I just shaved my legs and let my natural dark skin do the work for me. Life was fun.\n\nAt our branch we had a security visit from head office; it turned out that there had been a whisper from the police that someone was planning to raid the place and they worked with all of us to make sure all was secure and safe. I was replaced by an undercover police officer as was one of the girls. I was sent home but learnt the next day that the back office had cops in black uniforms looking like the SAS with machine guns sat around drinking our coffee.\n\nAfter a few months the excitement faded and the police left. We were left with a 'security man' from head office. He looked the very last thing you'd expect for a security man, and confessed that he only did security work when he wasn't acting.\n\nSteve, was about five or six years older than me, slim in a wiry kind of way and had a great sense of humour. He said that he had graduated from RADA ten years before and had worked pub doors and shopping precincts to pay the bills. This was based on a particular form of unarmed combat he'd learned from a mate at his chosen college. He didn't explain what that was.\n\nWhen Steve was out of work as far as acting went he was employed by the firm on three month contracts, and he was also trained to do all the other work in a branch and was an excellent greeter, and assisted customers with all of their wants and woes and had many of the little old ladies that came in each week wrapped around his little finger. That also went for some of the older female staff as well. The suggestion was that, what with him being a rather camp actor and his wonderful way with ladies, he was gay. He never confirmed or denied it.\n\nHe was sweetly cheeky and made pleasant comments about all of us, particularly the way we dressed. He noticed I was wearing stockings one day and complimented me on wearing them, saying that blokes really appreciate that kind of thing. \n\n\"What do you mean appreciate?\" I said, standing by him at the terminal in foyer.\n\n\"As my old grannie used to say, it's always nice to look, so long as you never touch without permission.\"\n\n\"Really?\"\n\n\"Really.\" He grinned, \"She also used to say it didn't matter where you got your appetite so long as you eat at home.\"\n\n\"In English?\" I said.\n\n\"In English, it's really nice to look at an attractive person and appreciate all the effort they've gone to, so long as you take that appreciation back home to the love of your life.\"\n\nI turned to one side brushing my hands down my hips so the little studs were visible against the tight mid-thigh skirt I wore for work. He looked to my rear and the obvious line of my lacy shorts cupping high on the cheeks of my firm arse. I looked round and saw that we weren't observed and sneaked the hem of my skirt higher to expose the lace of my stocking tops.\n\n\"There,\" I said, \"That'll keep you and by implication your partner happy for the night won't it?\" I felt just a little bit saucy thanks to this innocent attention I was receiving.\n\n\"There isn't one,\" he whispered, \"but please, don't stop what you are doing on my account.\"\n\nMy cheeks flushed and I will confess I felt a faint stir within the depths of my dampening pussy.\n\nThat was the start of it. He checked me out every day and I let him, occasionally lifting my short skirt a fraction so he could see my stocking tops.\n\nHe'd look me up and down and each morning would quietly tell me what undies I had on and whether he approved. I think after so long on my own I just soaked up the slightly naughty attention. I gave as good as I got though, at least I thought I did.\n\nI made a quip about him being an 'arse man' and he replied in his camp tone that I'd gotten that right. I guessed that not only was he an 'arse man' that he was in to men's arses. Again, he never confirmed or denied it, and our banter continued.\n\nOne morning, a particular couple came into the branch and we all and I mean ALL took a collective sigh and mouthed 'here we go again'. We all tried to guess what today's particular drama would be.\n\n\"You there!\" shouted the woman, a blonde, at Steve who was already dealing with a customer.\n\n\"If you'd like to take seat, I'll be with you directly,\" he smiled. He'd obviously not met the O'Connells before.\n\n\"I don't have all day,\" she whined.\n\n\"Well the quicker I finish helping this lady, the quicker I can get to you, please take a seat.\"\n\n\"I have another appointment!\"\n\n\"Well perhaps you might like to come back afterwards, I'm sure we can still help you out.\"\n\n\"Don't you dare talk to me like that,\" she snarled. Oh fuck here we go, an O'Connell melt down. I was sat at my desk in my cubicle and just finishing with a customer. This was not going to end well. Steve, a professional to the last, carried on with his other customer apologising for the interruption.\n\n\"My wife was talking to you!\" shouted Mr O'Connell. He had the same 'acquired' tone that Tom had and it never ceased to annoy me, and anyone else that heard it.\n\nI looked through the glass walls and saw that Steve had just smiled, mouthed 'seat' to the man and nodded at the chair and went back to his computer screen and his customer.\n\nMr O'Connell raised his hand with his pointed finger, started poking Steve in the shoulder and shouted, \"Don't you dare...\"\n\nNext thing Steve was flying across the banking hall and crashing into the 'smiling uniformed lady' cardboard standee display every bank has and knocking leaflets all over the place. I leapt to my feet.\n\nSteve stood up slowly rubbing the affected shoulder,\n\n\"Call the police, I want that lunatic arrested!\" he shouted. Mr O'Connell looked at his raised hand his mouth flapping.\n\n\"But...\" he stuttered looking surprised and shocked.\n\nGemma, one of the cashiers was on her desk phone while the assistant manager was locking the front door. Mrs O'Connell had abandoned her husband, still stood like an idiot looking at his hand, and she was demanding that the door be opened.\n\n\"The second the police get here Mrs O'Connell, not before.\" He snarled.\n\n\"But my husband...\" she tried to bluster her way through, \"that's his business not mine. I'm sure that if he offered...\"\n\n\"We take assaults on our staff extremely seriously Mrs O'Connell!\" shouted the assistant manager in a voice none of us had ever heard before.\n\nNext thing our local Bobby was tapping on the glass already with his notebook in hand.\n\nSteve was sat on the seat holding the side of his head, the imprint of which was set in the standee for good. The lady customer holding his hand and alternately cooing at him and sneering at the O'Connells.\n\nNames were taken, a copy of the CCTV was burned onto a CD that the officer took with him. According to the manager it showed Mr O'Connell shoving Steve by his shoulder, and Steve who was off balance anyway fell with a crash.\n\nThe O'Connells were asked to leave the branch and the area manager that had been called said that he'd be contacting head office and would be closing their accounts forthwith, and using their limited cash in one account to clear the debt in the other.\n\nThey both tried to remonstrate that they were valued customers and would take their business elsewhere.\n\n\"Excellent,\" snarled the Area Manager in a way we never could, \"custom like yours we can do without. The door is right there.\"\n\nI had no more appointments for that afternoon and offered to drive Steve home, but he said that he'd just step outside for a breath of fresh air and a coffee he'd be fine. The Manager said I should go with him.\n\nSat in a booth in Costa with a Latte ten minutes later he finally smiled.\n\n\"That felt good,\" he said sipping at the lip of his cup.\n\n\"What? Being thrown across the room like that?\" I said surprised.\n\n\"Aaaah,\" he sighed picking up his cherry and white chocolate muffin, \"glad you were impressed.\"\n\n\"Impressed? Steve what do you mean?\"\n\n\"Mr O'Connell, or Mr Connor as he was called when he used to bank with the Maidenhead branch, is a wrong 'un; him and his appalling wife got a mate of mine disciplined for just doing her job.\"\n\n\"You know them?\"\n\n\"From a distance. I was working at Maidenhead doing this kind of thing and they did that kind of thing. Stormed about the place demanding special attention and special privileges. I expect that when the Area Manager digs a bit on their accounts he should find out all about it. I've emailed the fraud department already.\" He grinned.\n\n\"Was that why he pushed you over? Did he recognise you? What if...\"\n\n\"Darling Alex,\" he beamed at me, \"he barely touched me sugar, I'm an actor remember?\"\n\n\"So... the falling down, crashing into the display.\"\n\n\"Did it come across Darling?\" he said trying to sound like a terrible overly camp actor, \"I was aiming for abused and assaulted bank teller standing up for his dignity;\" he pulled his hand across his fevered brownd dramatically, \"did you feel it Darling,\" he leaned across the table, \"Did you FEEL it?!\" He grabbed my hand pitifully, \"I was awful wasn't I? Wasn't I Darling, you can tell me? Be honest Darling,\" he wept dramatically, \"for pity's sake be honest!\"\n\nI bit my bottom lip in the realisation of his revenge, grinned and sipped my coffee,\n\n\"You twat!\" I shook my head at him.\n\n\"When you're good, you're good ducky, don't forget it. Our secret though Alex, OK?\"\n\n\"Safe with me Mr Olivier.\"\n\n\"Thanks,\" he said, \"I wouldn't have done it, but I really hate bullies. I had a hard time from them at school.\" Being gay I guessed that he would have.\n\n\"Me too,\" I said, \"I was fat, frumpy and spotty and had a squint when I was at school. I hate bullies as well.\"\n\n\"The lovely Alex frumpy? That I struggle to believe.\"\n\n\"Back in the day Steve, this is all relatively new.\" I waved a hand down by body.\n\n\"Oh!\" he said in a very camp manner, \"I nearly forgot, daily report; boring bikini panties and white lace balcony, I hope they match Darling?\"\n\nI nodded and finished my coffee,\n\n\"Touch\u00e9 Mr Olivier!\"\n\nOther than some initial discussion about the downfall of the bloody O'Connells the next day was no different and I could almost feel his eyes as he visually undressed me to check out what undies I had on that day. \n\nI would change the style each morning, I will confess that I even tightened my white blouses to show what bra I was wearing, even throwing in 'all in ones' or bustiers and he'd pass me folded paper notes with his best guess as to what I was wearing that day just to add to the secrecy. He was normally right. \n\nI'm still amazed that at no stage did this feel slimy or unpleasant. I liked looking at his great and muscular body that he worked out at the gym to maintain, but didn't 'fancy him' because I was so convinced he was gay. One warm summer morning I went without tights and as I dressed Nicky in his school uniform my mind went to what I was going to wear that day. Slipping out of my dressing gown I put on my white bra, my white blouse and sifted through my panties for something different, and I could find anything special; I ignored my big full briefs I kept for when I was on.\n\nWhat wouldn't he recognise...\n\nNothing! I would wear no underwear at all and undid my blouse and took off my bra and just pulled on my skirt feeling the shiny silky lining caress my bare buttocks as I walked around and drove to school and then to work. I'd have to keep my jacket on and buttoned though, which was a bit of a bind. I wasn't convinced that my dark nipples wouldn't show through the white material of my blouse.\n\n\"Good morning Steve,\" I said as I came through the staff doors and into the main banking area, last in by virtue of my childcare requirements.\n\n\"Good morning Alex,\" he said looking me up and down. \n\nI smiled and could see some minor confusion on his face; he grinned and told me that my nine thirty was early and he'd settled them both with a coffee and as soon as I was ready he'd send them in.\n\n\"Thanks Steve, just let me power up the computer.\"\n\nHe watched me, paying strict attention to my bottom as I leaned over the desk to switch on the PC monitor and the laser printer.",
        "\"Mr and Mrs Brown, Alex will see you now,\" he said across the foyer, indicating they should stand from their chairs and come into my cubicle. \"Nothing,\" he whispered to me, \"I predict that you're naked under those clothes...\"\n\nI took a very dramatic shocked deep breath, but all had to be forgotten for a while as I was due to discuss changing the Brown's mortgage policy for something longer term.\n\nAn hour later The Browns left, happy with the new option I'd printed out for them and a promise they'd come back the same time next week with their choice.\n\nI showed them out of the cubicle and saw them to the glass doors that opened automatically. I walked back to my little box and finished off the paperwork saving it all electronically for next week.\n\n\"Coffee Miss Clarke?\" There was Steve with my dark blue mug. \n\n\"Thank you Steve!\" I said and made a point of knocking the corporate cardboard coaster to the floor. \"Oh silly me,\" I said and put a hand to my mouth and bent forward to pick it up, happy that in doing so it would confirm what he'd already guessed short of him seeing my bare bottom - but only just mind you. Fuck but I felt naughty!\n\n\"You dirty girl,\" he furrowed his brow and handed my mug over.\n\nI stood my ground grinning cheekily, sipping from my cup.\n\n\"I don't know what you mean Steve,\" I said shocked.\n\n\"Don't worry about it Alex,\" he said looking me up and down and dropping his voice an octave or so to a positive whispered growl, \"Think of it this way, today it'll take me half as long to undress you with my eyes...\"\n\nI giggled. Fuck! That look, the voice - whether he was gay or not, he'd really turned me on!\n\n\"Oh Steve,\" I giggled, \"you are a one...\" I turned to one side finishing my coffee. I'd already checked that no one could see into my booth and putting an index finger to my lip slowly raised my short skirt turning slightly so he could see the cheeks of my shapely bare bum. \"Tah-dah!\" I whispered to him.\n\nHe growled, raising one side of his upper lip.\n\nI dropped my skirt down and walked to the kitchen and made us both another coffee.\n\nI looked in the mirror by the door that we would use to check our turn out before our work day and I saw that my cheeks had a heightened colour and my heart was pounding. I'd just flashed my bottom to a colleague, a male colleague, and it had turned me on to fuck.\n\nBut then as my pulse rate lowered I figured that he'd seen a small portion of my bottom and had he stood on the beach during my last holiday to Corfu he'd have seen a lot more of it, with just a line of black cloth of my string bikini to interrupt his gaze.\n\nOur cheekiness carried on over the days and weeks; Steve knew that all of our messing around was hidden from the view of the counters and the CCTV. He would go out of his way to let me know he was staring and I'd bend over whenever I felt like it. We'd joke about bums and make racy innuendo - including that one - (in your end - oh! Geddit?) about bums and sex, me feeling brave enough because of Steve's sexuality.\n\nA couple of months later it was announced that Steve was due to move on and I told him I'd miss our little cheeky chats about my 'panties' - not knickers he insisted. Women in 'Carry On' films and seventies sit-coms wore knickers, and drawers, and bloomers; and he said that from his close inspection I was definitely wearing panties, unless I wasn't wearing anything at all of course.\n\nIt was Steve's last week and we'd already arranged a card and a small collection for him. On that fateful Wednesday afternoon I was just returning from the restroom into the foyer when I saw the first man. The security door had just closed behind me, and our eyes met.\n\nIt was one of those 'things' - don't ask me how I knew it was wrong but I just did. Steve was talking to an old chap, one of our regulars who was desperately trying to get his head around his three online passwords and Steve must have explained it to him seven or eight times. We all reckoned he only came in to have a chat with Steve because he was gay as well. I could see that Steve was watching the new man as well.\n\nThe suspicious man was wearing a long camouflage jacket that looked too big for him. I backed up to the security door and was about to punch in my number when the shouting started and there was a loud bang that had all of our ears ringing.\n\nA second man had entered the branch and had fired a gun into the ceiling, hitting one of the girls in the upstairs office in the leg we were to find out later.\n\n\"ALRIGHT!\" shouted the second man who was carrying a small pistol, \"no one moves! GET DOWN ON THE GROUND NOW!\"\n\nI dropped to the ground and saw that Steve had done likewise. The old man was having considerable difficulty so the first man, who had pulled a sawn off shotgun from under his jacket, clubbed him with it and he dropped like a stone, blood pouring from his face.\n\n\"HAND OVER...\" The first gun man was walking towards the counters pointing his revolver and was stopped dead by the whizzing sound of the steel shutters dropping down in front of all four cubicles and the jangling of the alarm bells. \"NOOOO!\" screamed the first man and he pounded on them impotently.\n\nThe second gunman waved his shotgun around the room stupidly,\n\n\"WHAT WE GONNA DO?!\" he shouted at his comrade.\n\n\"YOU!\" shouted the first, I looked up to see he was gesturing at me.\n\n\"W...what?\" I stuttered, this was really scary.\n\n\"Open these shutters.\"\n\n\"I can't...\"\n\n\"I SAID FUCKING OPEN THEM!\" he pointed his pistol at me. I whimpered and closed my eyes.\n\n\"They can't be opened from outside!\" I shouted. My training as a manager taught me that, they had to be reset by the security company with a passcode.\n\n\"FUCKIN' OPEN THEM!\" he pulled me up by my arm, and pushed the gun in my face. I could see Steve flinch from his place on the floor. This had all happened so fast. Now it was happening I wasn't really sure what Steve was supposed to do in the case of a hold-up. \"You in there!\" he shouted at the shutters, \"If you don't open the shutters someone out here gets fucking shot!\"\n\n\"I told you, they can't open them.\" I stuttered. \"They have to be reset by the security company.\" I also knew that opening them up was not an option for the bank either.\n\nHe bashed on them with the butt of his pistol and it went off, sending a bullet into the wall we shared with 'Boots the Chemist' next door. Just through the noise of the alarm bells I could hear the whoop of police sirens, and an ambulance for the girl shot in the leg I found out later. \n\n\"Time to go Col,\" said the second and he made for the glass doors and pushed at them. Nothing. He bashed them with his shoulder, and they moved slightly. \"FUCK!\" he screamed at the seemingly locked doors.\n\nI wanted desperately to tell him that if he'd pulled the door towards him, it would have opened with just a little effort but I was so scared I couldn't. The shutters had automatically taken out the electronic door openers, no more no less.\n\n\"Open the door...\" said the first then stopped talking.\n\nThe street out the front cleared of shoppers and I saw police cars move into place and the same armed policemen I'd met months before hiding behind them.\n\nThe first gunman pulled me in front of him,\n\n\"Right...\" he said thinking about what he was going to do, \"Right, someone get me a phone.\"\n\n\"There aren't any out here.\" I said, \"That one just goes through to our head office. We aren't allowed mobile phones on the floor while we're working.\" That was also true. \n\nConsidering our two hoodlums had been working up to this job allegedly for three months now, they showed remarkably little planning. We were all to find out later that a third criminal, the brains of the operation, had planned the raid but had blabbed to a police informant. The planner had been arrested shortly after the security scare had started and wouldn't tell which of his many partners in crime might carry out the raid.\n\nThe old boy on the floor didn't look well; there was a large patch of blood staining the carpet,\n\n\"E... e... Excuse m... m... m.. me... ss... sss... sss... sir,\" I looked around at who was stuttering. I couldn't believe it, it was Steve. Some fucking brave security man he was!\n\n\"What!\" shouted gunman one.\n\n\"M... M... Mister Mo... Mo... Morgan,\" he finally spat out, \"nee... nneeeeds f... f... first aid.\" Steve pointed to my cubicle and the green boxed hanging from the wall.\n\n\"F... f... fuck 'im,\" said gunman one with a leer, \"You fuckin' phlid!\" he joked.\n\n\"Yeah,\" said gunman two, his confidence boosted by his friend's toughness.\n\n\"To everyone in the bank,\" came a calm sounding female voice, \"please come out quietly and lay you weapons on the ground, no one else needs to get hurt.\"\n\n\"I'M GONNA FUCKIN' SHOOT HER IF ANYONE COMES CLOSE!\" screamed gunman one. He pushed the barrel of his pistol hard into my throat and I felt the tears run down my face. \"I FUCKIN' WILL!\" He screamed.\n\n\"Fuck sake Col!\" said gunman two looking really scared, \"This is serious shit man!\"\n\nThe voice came back,\n\n\"There's no need for that now, we know it was an accident but one of the staff upstairs was wounded by your first shot...\"\n\nThe two gunmen looked at each other, gunman two went pale.\n\n\"Yeah...\" shouted gunman one after a few moments, \"and three more are gonna get shot unless you give us our money and a car... bitch!\"\n\n\"Colin, no one else needs to get shot. You need to stay calm and we can all get out of here safely. My name is Ali...\"\n\nHe looked scared that the police knew his name, and made to speak but couldn't after a second he called out,\n\n\"They know your name!\" burbled gunman two.\n\n\"FUCK OFF ALI!\" Shouted gunman one and pushed the gun further into my throat.\n\n\"Please...\" I hissed feeling the sight on the gun scratch into my flesh.\n\n\"What? You're my fucking ticket out of here princess,\" he hissed into my cheek. I could smell his foul breath and the cigarette he must have smoked while contemplating his attack. \"Shut the fuck up princess,\" his speech made his three or four day stubble scratch across my cheek and I nearly threw up.\n\nI retched, partly down to the barrel of his revolver pushing into my throat but more than that, his stench and my proximity to it.\n\n\"Please...\" I gasped again.\n\n\"Please WHAT BITCH!\"\n\nI didn't know what he wanted me to say, and I felt my knees tremble.\n\nGunman two came across to us.\n\n\"Fuck sake Col, this is getting' out of 'and mate.\"\n\n\"No it ain't,\" said gunman one, \"we're walking out of here with this pretty princess in front of us and no cunt's gonna stop us.\"\n\n\"But Col, they got snipers, they got boys who take the eyebrows of a badger at 500 yards mate.\"\n\n\"Fuck off you spineless twat, we're getting out of this and she's coming wiv' us. To shoot us, they'll have to fuckin' shoot her first.\" I thought I was going to faint.\n\nThe voice of 'Ali' came through the speaker on the police car again. In a slightly different voice she said quite simply, \"OK, we're ready when you are.\"\n\n\"Ready for what?\" said gunman one.\n\n\"I dunno!\" hissed gunman two, \"p'raps they're ready to talk now.\"\n\n\"I ain't talking to no cunt,\" he took a deep breath, \"NOT 'TIL THERE'S A FUCKIN' CAR PARKED OUT FRONT WIV' THE ENGINE RUNNIN'!\"\n\n\"But Col! We won't get twenty yards! I ain't dying in a hail of gunfire just so you can look good in the Crimewatch re-enactment.\"\n\nFor a brief moment Col took the gun out of my throat,\n\n\"We gotta stay strong mate, int' we? We'll just walk out of 'ere wiv her up front...\" he pushed the gun back into my throat and I squealed.\n\n\"N... N... No.\" came that stuttering voice again, \"Y... y... you m... m... mustn't hurt L... L... Lexie, she... she... she's a M... Mu... she's a MMummy.\" At each completed word Steve blinked hard and gave his head a shake.\n\nI looked to my right and Steve had stood up quietly and unseen.\n\n\"Wassup then fuckhead?\" said gunman one, \"You wanna go in her place do ya?\"\n\nSteve stepped towards us his right arm crooked across his chest and a slight limp to his right leg. It finally came to me, Steve was a security specialist and one hell of a fucking actor!\n\n\"Y... Y... Y... Yes,\" he said getting closer and giving his head a major twitch, \"My M... M... Mum w... w... w... will be p... p... proud of me.\" He twitched his head again.\n\n\"Aaawww, you want Mummy to be proud of you do ya?\" Giggled gunman one, \"Yeah, you're taller than this skinny little slag anyway!\" With that he threw me to the floor and I landed with a thump by the old boy laying on the ground still weeping. I was on the floor... and out of the way.\n\nI looked up at Steve and he grinned down at me. Then things started to happen at speed.\n\nGunman one had his pistol raised and pointing at the limping actor/security man's chest. As he took a further slow limping pace towards the gun, Steve stumbled a bit. But from his new slightly lower position his hands flew like lightning, and Steve bent the revolver towards that bad guy, then snatched it from gunman one's hand and punched him hard in his solar plexus and he dropped. \n\nStill spinning on the right leg he'd so recently been limping on, Steve smashed the pistol into the side of gunman two's head - twice, snatching the sawn-off from his lifeless fingers as he slipped to the floor unconscious next to his still gasping colleague now retching on the floor.\n\n\"Now,\" said Steve quietly and the security door behind us opened and three shouting police officers rushed in and our two hapless bank robbers were pounced on and cuffed while Steve stepped over them to the old boy and started to do first aid.\n\n\"You OK Alex?\" he grinned at me. I nodded my head but began to cry at the same time.\n\nThe front door opened and more police and a paramedic came in, the old boy was taken care of while Steve came across to me and put his arms around me and lifted me up with no effort. I felt like Whitney Houston being picked up by Kevin Costner and I clung to him crying like a scared kid.\n\nHe carried me through to the back office whispering into my ear. \n\n\"It's OK Baby,\" he purred his face touching mine, \"all fine now, Steve's got you.\" I suddenly felt warm and safe.\n\nEventually he put me down in a chair and we sat quietly his arm around me the whole time 'treating for shock he was to tell me later, while the a tiny policewoman who introduced herself as Ali shook hands with Steve and sat next to me.\n\n\"Well done Alexa, all safe now. Young Steve here is worth his weight in gold.\" She grinned and put a hand on my shoulder, \"we'll just take a few notes, get you checked over by the paramedics and then get you home. We've had Nicky picked up from school and dropped him off with your Mum, he's having a great time playing policemen with one of my boys.\"\n\n\"Thank you,\" I mouthed, still not sure of my voice.\n\n\"I'll see she gets home Ali,\" said Steve and I smiled at him.\n\n\"No you won't, you have a debrief to attend!\"\n\n\"Oh, so Alex gets to go home and I don't?\"\n\n\"That's about it big boy,\" said Ali.\n\n\"Shit; ah well, goes with the territory.\" He knelt by my chair and gave me a hug. \"Don't worry Alex, all safe now I promise.\" Gone was his camp public voice I was so used to.\n\n\"Thanks Steve,\" I said, \"will I see you again?\" My voice wobbled a bit as my rescuer and hero looked to be stepping out of my life.\n\n\"Of course you will,\" he beamed his cheeky grin at me.\n\nI was taken home by police car, and the officer came in to make sure I was all OK. Nicky was impressed to find another policeman at Nanny's house and tried on his hat too. He was just starting to get tired and a little bit idle when the policemen all finished their tea, reclaimed their hats and handcuffs and batons and left with a promise they'd all come to his school and visit him again.\n\nMum cooked a huge fry up for us all and both Nicky and I were put to bed with hot chocolate. Mum being Mum had our clothes off of us and by the time she went to bed my and Nicky's clothes were washed, dried and folded. Even our underwear.\n\nMum had a spare set of most things for Nicky, a drawer full of stuff in fact, including his school uniform and a few changes of clothes for me and some nightwear. Conscious that I had rolled around on the floor and been grabbed by both of those obnoxious men she washed everything anyway.\n\nGrandpa took Nicky to school, which for both of them was just the best thing ever. \n\nMum had switched off my bedside alarm and when she brought my clean clothes in on hangers just after midnight, she found my mobile and turned off the alarm on that. I slept late, waking up in a bit of a blur and Mum bringing me in a cup of tea before she went off to work.\n\n\"Mum?\" I stared stupidly at the clock on my phone, \"Nicky...\"\n\n\"All taken care of honey,\" said Mum with that big beaming smile, \"Daddy's taken Little Nicky to school which, I can tell you, is currently the highlight of both of their days, while you've been told to stay off work until Monday.\"\n\n\"But...\"\n\n\"Nothing to do with me Darling,\" she said, \"I'll be picking Nicky up from school and Daddy reckons we should eat out tonight. You know where everything is don't you. Ta Ta Darling.\"\n\nShe pecked me on the cheek, grinned, put her arms around me and hugged me. \"Relax honey, you had a bit of a day of it yesterday.\"\n\n\"OK Mum, I will I promise.\" I smiled, got up and went into the kitchen to drink my tea and have some jam on toast.\n\nI pulled on some shorts and a T-shirt (Mum and I are pretty much the same size) and finding a pair of her trainers I went out for a run around my former stamping ground when I was growing up. \n\nThe more I ran, the more I felt the tension that had been there drift away. I got to the old park - different from the new park that had skate ramps and solar powered play equipment - and I ran laps on the basketball court, my old basketball court and by the time I was done yesterday's work was yesterday.\n\nI trotted home slowly, waving and smiling to some old friends and acquaintances then once home jumped in the shower. I put on my spare jeans and one of Mum's fitted T-shirts and walked to Nicky's school in time for turn out. Mum was already there and we all drove home happily. Once Dad got back we went to a local chain restaurant and had lots of food and laughs.\n\nOnce home I found I had a text from Tom saying that he'd just heard what had gone on at my branch and that I had been involved. He said he hoped I was OK and if I needed anything, just call.\n\nNow I know I shouldn't have been bitchy but even I know Tom would have heard about the armed robbery at my branch within two hours of it taking place. Trust him not to text me or contact me until after his working day had finished.\n\nI had another text message from Gemma telling me that I should come in to the branch tomorrow lunchtime as Steve was coming in for his card and present.\n\nI wasn't going to miss that! I borrowed Mum's car and drove home and collected some of my clothes for the next day. My spare jeans were OK, but not like my pulling jeans! I had a pair of low rider stretchy ones that covered and shaped my arse to perfection, and I wanted my stretchy top that clung to all my curves my bra was going to create; if it was Steve's last day I was give him something worth letching at.\n\nI got up early and got a lift into town with Dad after dropping off Nicky. I had a walk around the shops and grabbed a coffee. Next I went back to the branch and locked my few purchases in my car and made sure I could move it after lunch.\n\nThe branch was still closed of course so that the shutters could be reset and the damage repaired to the wall and ceiling. The girl that was hit by the stray bullet was still in hospital but expected to make a full recovery.\n\nI let myself into the branch and met all of the girls and the one boy were there to see off Steve and they all shook my hand. ",
        "Then Steve arrived, and he got a standing ovation. He wasn't wearing his corporate gear anymore, instead looking fine in jeans and a T-shirt that made his torso look fucking spectacular, certainly a view none of us had seen previously. He was presented with his card that we'd all signed, before the attack I might add, and his gift.\n\nOf all things we'd given him a kindle, because when not on the shop floor he always had a book in his hands, and he went through them by the dozen and we all asked when he was going to join the rest of us in the twenty first century.\n\nThe area manager had bought a large cake and had ordered in pizza from the adjacent Pizza Hut and we ate our fill.\n\nTime came to say goodbye for the last time, everyone kissed his cheek and he was his usual daft and cheeky self to the end.\n\nExcept for me.\n\n\"So Alex,\" he said as we stood in the car park, \"Are you going to let me take you out dinner now we're no longer work colleagues?\"\n\n\"I should take you out really, after all I do owe you for saving me in there.\" I nodded back over my shoulder to the back door of the branch.\n\n\"Let's argue about that nearer the time shall we?\" he grinned, \"Let me have your mobile number, shall we say tomorrow night? Half seven?\"\n\n\"That would be lovely!\" I blushed, \"Nicky is with his Father for the weekend so I don't think there will be a problem not for a second.\"\n\nI handed him my phone and he typed in his number and rang it. Within seconds we had each other's number.\n\n\"Shall we dress up?\" he said, \"I mean something posh rather than jeans and jumpers kind of thing.\"\n\n\"Oh yeah,\" I said, \"I know just what to wear!\" I kissed his cheek and stroked a hand down his chest, and took my leave. As I walked to my car, I peeked back over my shoulder and saw him, head down on one side, checking out my arse as I wiggled along, giggling and hugging myself in pleasure. \n\nIt was so cool that it was Tom's weekend to have Nicky, and on the dot of six I dropped him with Tom's parents who for once seemed genuinely concerned when they asked after me.\n\n\"I heard that Steve saved the day again?\" said Tom's Dad. He worked for the same banking group as Tom and I and obviously knew him.\n\n\"Yes,\" I said, \"it's really strange, during the robbery he was a totally different bloke.\"\n\n\"Frank tells me that he's an actor,\" said Tom's Mum.\n\n\"Yes,\" I said, \"he pretended to have a stutter and a limp and got up really close to the robbers and as soon as they pushed me out of the way, he disarmed them both and had them on the floor in under two seconds. I know because the police timed it on the CCTV.\"\n\n\"He's into some weird martial art thing,\" said Tom looking at his Mum, \"Queer as a coot of course,\" he chuckled. Frank and his wife chuckled as well.\n\nThere was a part of me that desperately wanted to say that I was being taken out to dinner by Steve and I would hopefully find out if he was as gay as everyone suspected. But the words stuck in my throat and much as I didn't want to let them get away with their flagrant homophobia or think that I agreed, I didn't want a return to the cold stares and stunted doorstep discussions that had been our relationship up until about eighteen months prior.\n\nI knew Frank quite well through work and I think he actually quite liked me and I know that he did actually hold out a faint hope that Tom and I might rekindle our relationship. I knew however that Tom was in a relationship with Freya, an auditor from head office, and they were both focussed on their careers.\n\nIt was strange - Freya was amazingly focussed and had the tendency to discuss life's minutia to the nth degree, which I suppose was why she was a good auditor. While I like to think that once you got past my control freakishness, I was actually quite a free spirit compared to her.\n\nHaving met Freya a few times I think I knew how Tom could go from me to her. She was a classic skinny blonde gym attender with abs you could break rocks on and that thin face that made people think that she might have an eating disorder. BUT Freya knew she was would be the group's chief auditor within ten years and didn't harbour any thoughts of children or a family life until she'd got there.\n\nThe office scuttle also had it that she was a bit strange in the bedroom and liked things at bit dark and 'Gothic'. This had never been confirmed other than bathroom gossip from someone that had got pissed and slept with someone that had slept with her.\n\nShe seemed to like Nicky though and I know that she liked to play happy families with him on a Saturday afternoon; between two and half four exactly. No more, no less as she had to be back on the running machine treadmill thingy at the gym to burn off any of the fatty food she may have consumed while taking my baby boy out to their rather unimaginative lunch.\n\nNicky told me that she would stare at his food in shock, and constantly ask him if he was going to eat his entire burger and did he really want all of that tiny packet of French fries. She baulked at the thought of him drinking Coke or Pepsi and insisted that Tom buy him milk, OJ or at the worst a milkshake.\n\nNicky didn't really like Freya.\n\nI finished my coffee in the tiny cups they used and wished them well, repeating that I'd be back at four on Sunday to collect my son. I could see Tom's Mum biting back her desire to tell me 'not a minute later', but she held it back.\n\nI went back to my car with that tiny burn I got whenever I leave my darling boy with anyone, especially for two days. Nicky quite liked it so I never made too much noise.\n\nI started the car and thought about what to do for the rest of the evening. I'd buy some nice takeout on the way home that was for sure and thought about texting some of the girls and see who was out and about this evening.\n\nI knew that at least two of my work mates didn't really like me going out with them. I have a collection of little black dresses with various amounts of thigh and cleavage on display. They are my all-time favourite 'going out' kit, which with my four inch heels are my ultimate fall back for nights on the town.\n\nWhile none of them had actually said it to my face I knew from the looks and the half-jokey half pissed off 'it doesn't matter which club we go on to because all the blokes worth looking at will only be interested in Sexy Lexie the yummy mummy'. \n\nI decided that I'd grab myself a good curry and head home and decide which of my LBD's I was going to treat Steve to the next night. \n\nSo Biryani in hand I went home and thought about the dress. To add to this I thought about the shoes and seeing as this was Steve I would really have to make an effort with the underwear seeing as it was 'our in-joke'.\n\nI thought about what I had and what I could wear and I will confess that by the time I'd shut my front door and got into the kitchen I was starting to feel quite horny already.\n\nWhat was I thinking!? I didn't know if Steve was even interested in me or my gender in general - other than his playful banter with the other ladies in the office and the female customers I didn't even know if he had even a passing fancy for my sex.\n\nMy sex; those two words and the concept that they threw into my brain had my groin tingling and I knew that I would be getting wet down there. As I plated up my curry my mind just kept going back to that lunchtime and Steve's fantastic torso in that tight T-shirt. The shirt itself had a funny comment about the zombie apocalypse but I could pretty much guarantee that only the two men would have actually read the words.\n\nI finished my meal quite quickly, squirming slightly on my sofa as my unruly psyche kept going back to me, Steve and my sexy lacy underwear collection and which I might treat him with, and what his strange sexuality might mean for tomorrow night.\n\nI couldn't focus on the TV and eventually gave up and went up to my bedroom and my bottom drawer that held 'the good stuff'.\n\nI started to pull things out of the drawer and dresses out of the wardrobe and it was getting silly. I decided that rather than throwing stuff around and getting confused I should start from the bottom (as it were!) and work up!\n\nI stripped down to my string knickers and looked at myself in the tall mirrors on my Ikea wardrobe doors. I was still pleased with how I looked - OK I had a bit of a ripple around my belly but I had Nicky because of it, my arse was still in great shape and if anything, pregnancy and the three months of breast feeding I'd done had improved my boobs and they were still firm and full. \n\nNow ever since my Aunty Nicki introduced me to it for my prom, I'd had a thing about sexy underwear. I had drawers full of the stuff, compartmentalised into the boring plain tummy huggers a girl needs for when she's on, not only to hold pads in place but also just the slight compression over an achy stomach, down to the almost invisible strings - I even had a pearl one that did nothing but almost bring me to orgasm if I ran up or down stairs in it; and yes several pairs of crotchless panties. \n\nDon't ask why; I wasn't in any kind of relationship where I could show them off, but on reflection I bought them for 'me'. I bought them to create a stir - a stir in me. The most important sex organ is the human brain and I worked hard to keep mine satisfied!\n\nThe bras I had in my collection did various things from lifting them high, squishing them together for a sexy cleavage or just shaping them nicely; I even had some that would squish them almost flat; I couldn't wear that torture device for more than a few hours mind, and to be honest I was minded to throw it away, but I kept it for wearing under particular pieces of clothing and some fancy dress costumes that never seemed to be come in the size 'big tits'.\n\nWhere there were matching bra and panty sets I always asked for the display hanger and they hung at the far end of my wardrobe along with my other favourites, my teddies, basques, bustiers and corsets and I tried to resist getting them all out and laying them on the bed.\n\nThe more I looked the more turned on I became. My nipples stuck out proudly and tingled slightly, so I gave them a rub that soon became a bit of a sexy massage.\n\nConfession time - I'd not had sex in over three years. \n\nI was a good masturbator and had a couple of vibrators that I used once Nicky was in bed and asleep or on Saturday mornings when he was with Tom or staying over with Mum and Dad, which he did often.\n\nMy last shag had been a one night stand after a night out with the girls from work. Nicky was about eighteen months old and I'd split up with Tom almost a year before. I'd heard through the office that he was seeing someone and had seen the borderline glee that some of my colleagues were sharing the information with.\n\nA couple of them suggested that it was time that I moved on and suggested that all the singleys go out that Friday 'on the pull'. \n\nWe did; I dressed in my standard LBD with an 'all in one' under it.\n\nWe started drinking at one of the girls' places and hit the town for about ten. We were soon descended upon by various groups of lads and by one in particular. This one guy, Richard, set his sights on me and did everything he could to woo me. I was flattered by him and he began to buy me drinks. We chatted, we danced, we laughed and I actually felt that this guy liked me.\n\nWe left the club and headed back to his place, his parents place actually and he stripped off, I stripped off, he put on a condom and we had sex.\n\nIt was nice being in someone's arms again and feeling that closeness after so long, but he came just as I was starting to get into it.\n\nBefore I knew it he was hustling me back into my clothes and trying to quietly get me out of the front door.\n\n\"Can I have your number?\" I said.\n\n\"Err... yeah,\" he said without giving it to me.\n\n\"Well...\"\n\n\"Oh, well...\" \n\nThere was shout from upstairs and the hall light going on.\n\n\"Are you going to spend ALL night trying to get rid of your latest bird?\" came the cross, sleep deprived male voice from upstairs. \"At least you could have the decency of ordering the poor girl a taxi.\"\n\n\"Yeah taxi,\" he said nodding and shrugging his shoulders, \"you go and wait by the curb and I'll call you one, bye.\" He all but pushed me out the door, it wasn't even one AM.\n\nAs I stood by curb feeling used and the initial pangs of guilt for my slutty behaviour, my phone bleeped and one of my mates texted me.\n\n'Get you! The blokes we're with just had a text from Rich to say that he'd scored with you. Glad you got some girly!'\n\nShit. There I'd been, looking for romance and I'd naively ended up as some arsehole's trophy shag. I felt a tear in my eye as I reread the message and now those girlfriends of mine would think me some kind of a cheap slapper.\n\nWell, revenge is sweet I thought as I flagged down a passing cab seeing no car had turned up for me after ten minutes and I was starting to get cold.\n\nI texted her back from the back seat of a black cab.\n\n'Don't be M8, he was shit. He had a really small cock that he couldn't get up. When he finally did he stuck it in me a few times and came, no charm, no 4play. Would have more of a turn on with an f'ing washing machine at least that would have been useful after. Tell the girls never to bother with this one, he's hung like a virgin Yorkshire terrier with a similar sexual prowess. Even his parents think he's a twat and I'm on my way home already LOL!'\n\nI just knew that she'd read it out to the whole crowd. She did. It caused much hilarity and I knew that it would come back to haunt him - twat.\n\nBut I'd learned my lesson and decided I wouldn't go looking for love on a Friday night ever again.\n\nBut here I was, squeezing my firm and really sensitive boobs while staring into my wardrobe and trying to work out what I was going to wear for my date with a probably gay man. Was this going to be about sex? Why was I getting so turned on at all!\n\nI knew from the stirring in my puss that if I didn't stop I end up flat on my back, my arse off of the bed in paroxysms of lust as I brought myself off. I still had work to do.\n\nI focused on panties; I thought about it and figured that he was a massive fan of my arse so I should wear something that complimented it. I was already wearing a string so twisted and turned in the mirror checking out the view. No, nice but boring; everyone in my office wore them every day. I wanted sexy lacy clingy and figured on boy shorts. I went to the wardrobe and took out one of my favourite sets, high cut low rise virtually transparent black lace boy shorts, still brand new with the labels attached. \n\nI went to take off my string panties but realised I'd be in danger of staining them so slipped them over.\n\nEven though they were virtually transparent and my black string could be seen, I twisted and saw how they caressed my arse. Fuck they looked good. There was a matching bra that I put over my tits and clipped. It was a balcony that while holding me in place quite wonderfully it was also designed to be discrete. \n\nI was looking good and wasn't even dressed! The next big decision was tights or stockings and suspenders, hold-ups or shaved bare legs. \n\nWho was I kidding, this was Steve so it was going to be stockings with suspenders. I had a hot looking lace suspender belt that would match my bra and panties so I put that on. \n\nStockings; sheer black, back-seamed with lace at the top. There was a pair in my drawer still in the packet and those I'd save for tomorrow, but put on a pair that had been worn, washed and put away.\n\nI stood and struck a pose looking at myself like some kind of underwear model and resisted the temptation get one of those mirror selfies but forced myself to put down my phone before I got a photo that I knew I'd never be able to show anyone or delete. The thought of such a photo ending up on the web and embarrassing me at work or worse my parents was awful so that was that.\n\nFinally I started on the dress. It was going to be a little black dress, no question and I slid the mirrored door back so I could see them all. I pulled on the first which had a scooped neckline and thick shoulder straps. It hung straight down with a bit of a curve over my full hips and while I liked it, there wasn't that punch, that immediate hit that I wanted to knock his eyes out with.\n\nNext it was an elasticated one that looked great but showed every line of my undies and while I experimented with it, again, it wasn't the one. I'd worn it before but just with panty hose, and I needed real underwear for this night.\n\nNext was my wrap over mini dress, and while it looked fantastic and the plunging neckline was perfect, the slash at the front would show my stocking tops and suspender straps when I sat down or, probably, when I walked!\n\nFinally there was another black stretchy dress, with thin straps that covered my bra straps that reached down to enough of a cleavage. The dress material was ruched and it clung to me and didn't show any lines. I fussed with the cleavage until I got it how I wanted it. Finally I slipped into my strappy black heels that might bring closer to his impressive 6'4\".\n\nThis I did take a photo and gave my hair a shake. The look was brilliant and I decided that I'd get it set into that kind of fly away style rather than my usual piled up classic look I'd practiced over the years. I checked my hair dresser on line and saw that she had a spare appointment between two and four and booked myself in.\n\nI looked hot and I knew it. I desperately hoped we were going somewhere nice that I could show this off and not his local pub or something like that.\n\nI stripped out of my ensemble and hung it up ready for the next night. As each layer came off I felt sexier and sexier until finally I sat in just my stockings and suspenders and original black string.\n\nMy nipples were so hard and so aroused that I had to stroke them and a few moments later I was falling back on my bed and squeezing and mauling my boobs like they weren't mine. Much as I tried to fight off the desire my hand slid down between my legs and I squeezed my entire pubic region and felt the thrill of anticipation. I raised my legs and pulled off my panties leaving me in just my stockings and suspenders and fell back again, my left hand back to squeezing and mauling my tits while my right brushed through my labia finding the swollen dampness that was there.\n\nI stroked across feeling the wet warm drag of excited pussy lips on my palm and pushed my long middle finger deep into me and pumped it as hard as I could enjoy a tiny thrill each time I did.\n\nAs my wrist and elbow tired I stopped the breast massage and swapped hands using my tired right hand to hold my pussy lips apart while my left played with my opening. Finally it trailed slowly up and found my clitty hiding in its flesh folds and I began to rub.\n\nHarder and harder I stroked pushing my groin off of the bed and reaching up with my vagina as if my overdue orgasm was closer to the ceiling. I nearly got there and I knew that if I really wanted to get there it was time to dig out my electronic friends. I had a clitoral stimulator and it was hidden in my still open panties drawer. I grabbed it and threw myself back down sliding it down to nestle against my centre as my spare hand spread my labia and clitoral hood. I gasped a loud 'aaah' knowing there was no one else in the place to hear and enjoyed the sudden and wonderful sensations hitting me where I needed them most.\n\nI felt that tremor that told me I was on my way and I pushed down with my feet and up with my hips and down hard with my vibe, and I came hard. \n\n\"Christ!\" I growled, flinging my head from right to left on my mattress and went for my new favourite thing the multiple orgasm. I'd not being doing them that long or that often. ",
        "It was just as part of a pissed discussion I'd had with the other yummy mummy at the bank, Dawn. \n\nDawn was my age and had a daughter the same age as Nicky and we took them on play dates together, and we had a lot in common. \n\nShe came round to my place and we opened a bottle of wine, and then a second. We got all giggly and I noticed my latest sexy undies hanging on my stair rail in a cellophane cover waiting for me to take them upstairs and she noticed and said how pretty they were, and I confessed my penchant for the stuff. She said that while she liked undies she was more into being naked for her fella as while the undies were nice there was no substitute for skin on skin, and they were so crazy for each other still, her in just a baggy T-shirt and jeans made him want to grab her and screw her.\n\nWe moved on to our favourite things during sex and soon were discussing wanking as I couldn't really wax lyrically about intercourse as I hadn't had anything, other than the embarrassing fumble with Richard since I split with Tom, and we ended with how we liked our toys.\n\nI said that I preferred clitoral stimulators over dildos and vibrators. After a few moments we were into the nitty gritty and favoured positions, and Dawn said about how she loved her multiples especially when her husband Jim went down on her.\n\n\"Multiples?\" I asked.\n\nShe giggled and put a hand on mine,\n\n\"A multiple orgasm Darling,\" she said. The look on her face suggested she'd read my puzzled expression. \"You mean you've never had one?\"\n\n\"I don't think so,\" I said.\n\n\"So you always stop after one?\"\n\n\"Yes.\"\n\n\"Oh Darling, women are specially designed to have come after come, and I can heartily recommend it!\" She gave me some basic instructions, or at least told me what she did and had we not had two four year old's running about the place I'm sure we'd have gotten down to it.\n\nThe next weekend Mum asked Nicky if he'd like to go to go to London with her and Grandpa that weekend to see the sights. He agreed straight away of course and I saw an opportunity to experiment with multiple orgasms.\n\nI was too tired to try Friday night but on Saturday morning I woke up, slipped on my black satin kimono robe and went to the kitchen and made myself tea and toast and went back to bed with it, in company with my radio and a music only station.\n\nI finished my tea, and lay there feeling warm and comfy and undid the belt on my robe, so it gently slipped either side of me. My naked body felt good and I enjoyed some gentle stroking and rubbing. Finally I could hold off no longer and took my clitty buzzer and just put it straight to work. In no time flat I was climbing the hill to my first come and didn't I just, only this time rather than the gentle come down with the soft tremors I was used to I kept going and I felt I was climbing the hill again, only this time, the trip took much less time and I was there, gasping out to my empty house my pleasure and delight. I climbed the hill four times in about three and a half minutes and eventually had to stop because I didn't think my energy levels would allow me anymore.\n\nMy groin had the most wonderful ache to it the like I'd never known before. I slept for about an hour and woke up feeling like I not a care in the world. I sent Dawn a text.\n\n'Done the MO, wow, thanks for your advice ;-) will be trying that again!'\n\nShe replied,\n\n'Good for body and mind, helps reduce stress and is FREE! Same again tomorrow Darling, I will if U will. CU Monday hun.'\n\nI was so relaxed I just hung around the house in my kimono and a pair of panties. I had a bath and masturbated, coming twice, and ordered a pizza in celebration. I even went to the door in my kimono, hoping to give a cheap thrill to a standard spotty 18 year old pizza boy but it was delivered by a very nice girl covered head to foot in GoreTex waterproofs but she did tell me how nice I smelled and asked me the fragrance.\n\nI watched a couple of movies and ate most of my pizza, and went to bed; I went all electric again and had another four comes. I drifted off to sleep with the vibe still on top of the bed and buzzing itself to the end of the batteries.\n\nI woke the next morning and my clit was still erect from the day before and almost too sensitive to touch. I did mind you, but because my toy was dead I had to do it manually and I started to get sore.\n\nI snuck naked into Nicky's room ducking under his open curtains and our neighbours' washing cars and mowing lawns and pinched some of the necessary AA batteries from his many powered toys. This tiny naughty act turned me on even more, and I went for another triple before a shower and a trip to Mum's for Sunday lunch and collect my boy.\n\nWhen I did see Dawn the next morning she raised her eyebrows in a questioning smile, I raised all ten fingers, dropped them then raised four.\n\nShe mouthed 'fourteen?' back at me with a beaming grin. I nodded.\n\n\"What time Sunday morning?\" she said in all innocence.\n\n\"About quarter to ten,\" I said innocently back.\n\n\"Same time as me,\" she grinned. I walked past her and she held up her hand and her extended pinky finger - I reciprocated and we shook little fingers. \"MO sisters!\" she said with a rude growl.\n\n\"Yeah!\" I growled back, thinking about how that hand had been the one that made her come. We worked in different parts of the building so there was no uncomfortable looks between us as we realised what we had admitted to each other.\n\nI walked back from the hair dresser that Saturday afternoon feeling fashion model hot. Not only had they done my hair to look tousled, cool and sexy, Jo the hairdresser offered to have one of her girls do my make for me for an extra few quid. I was so pleased that I did, just for their expertise with foundation, blushers, the wonderful eye makeup that made my already dark eyes look a thousand times better.\n\nMy lippy was a sharp, hot deep shiny red and I didn't eat or drink in fear I might mess it up!\n\nI'd showered my body before leaving for my make over so it was just a case of going home, getting dressed and waiting with bated breath for my taxi to arrive.\n\nI'd shaved my legs, my armpits and had bleached my upper lip - The curse of being an Andros woman but something I'd gotten used to. I shaved my pussy leaving just a tiny landing strip.\n\nThe stockings and suspenders went on first, and I noticed the tiny bows at my heels. I put on my shoes while I was in that frame of mind. Then my boy shorts, shit but they looked good and suggested more than they showed, and sat just over the curve of my bottom. \n\nThen the bra, and I adjusted my boobs until I had them where I wanted them.\n\nMy dress slipped over the top and I pulled it into shape. My cleavage was fantastic, probably the best ever and I was displaying just the right amount of flesh.\n\nI took my clutch bag, slipped my mobile, some lippy and a tiny comb into it then a card and some cash. By the time I'd walked down the stairs I saw the car pulling up outside. \n\nThank fuck, I was so excited I don't think I could have sat around for too long in my state. I took my short black raincoat from the hall stand and covered myself with it. Steve was going to get a treat and he had to wait for it! \n\nThe driver came to the door and not Steve.\n\n\"Miss Clarke?\" he said in an Eastern European accent.\n\n\"Yes?\"\n\n\"Won't you come this way?\" He held out his arm and there was the open door of a large black car, and sat in it was a smiling Steve resplendent in his fitted black dinner jacket looking every inch like James Bond himself and holding out a champagne glass. \n\nI walked across the car and stepped in, the driver gently closed the door and I sat down next to my escort for the evening.\n\n\"Wow Steve,\" I said, \"I can see why you said posh. I hope I don't let you down with my poor attempts.\" That was shit for a start but I didn't want him to guess straight away that my arrival this evening was based on something like 20 hours preparation!\n\nWe clinked glasses and Steve said,\n\n\"Here's to a wonderful night...\"\n\n\"A wonderful night...\" I said looking up into his handsome face. Try as I might I could not stop myself from giggling. He laughed back.\n\n\"You've been thinking about this haven't you?\" he said.\n\n\"Might have been,\" I sipped some more champagne and giggled more.\n\n\"Your make-up looks fantastic and probably professionally done, as is your hair.\"\n\nI pursed my lips and looked at him.\n\n\"Are you suggesting that my make-up doesn't normally look fantastic?\"\n\n\"Alex, you ALWAYS look fantastic,\" he smiled at me, \"And do you know what?\"\n\n\"What?\"\n\n\"You bloody know it as well don't you.\"\n\n\"A bit...\" I said shyly, \"Cheers!\" I downed my glass and held it out to him for more.\n\nHe laughed a deep throaty chuckle that made my toes curl. Wow!\n\nAs I had my second glass of champagne the car slowed, and Steve smiled.\n\n\"Ah, here we are!\"\n\nWe were parked outside of the Royal hotel, one of the poshest places in the town. I could see lots of other people in similar clothes to ours and I was pleased to see that it was all cocktail dresses and not long gowns.\n\nWe got out of the car and walked up the stairs into the hotel, and I was pleased to see it was a cabaret evening, what my grandparents would have called a 'dinner and dance'. \n\nThe bill was quite good and included several people I'd actually heard of. \n\nWe headed for the cloak room and Steve looked at me expectantly. I stepped towards the counter and handed Steve my clutch bag. I turned my back to him and slipped my raincoat from my shoulders and handed it across taking the small ticket the receptionist already had for me. I took it from her with a smile, and turned. \n\nSteve's mouth hung open and he looked shocked for a fraction of a second, then returned to his usual cool look.\n\n\"Good try Steve,\" I said, \"it was worth every second and you know it.\"\n\n\"Too quick for me Alex,\" he said and took my hand, kissing it gently before leading me into the ballroom.\n\nAll through the meal and the various performers appeared and did their acts. There were singers, two dancers and a couple of comedians, all supported by a quite sizeable band that played brilliantly. Despite the excellent food and the regular distraction of the acts I could see that Steve hardly took his eyes from me the whole time.\n\nOur chances to talk were limited to the few breaks in the music when the next course was brought out.\n\n\"So Steve,\" I said sitting up straight as the second sweet trolley came around, it was partly to attract the waiter's attention (the mango and passion fruit meringue with fresh cream was to die for) but mostly to straighten my cleavage and elongate my neck. \"You like what you see?\"\n\n\"Nah,\" he said, \"you look fucking terrible; what IS that dress you've dragged on,\" he'd adopted that very camp bitchy voice again.\n\nI giggled; it was obvious that he was impressed, and I was starting to seriously doubt that he was gay. OK, I knew from two occasions that he was a damn fine actor, and what I had to guess was if he was gay and acted straight or was he straight and acted gay? Worse case scenario he would bisexual, but whatever he was if he didn't throw me down and screw me, I'd explode.\n\nWhichever was the case I knew that in forty minutes or so the acts would finish and the band would play for dancing. I would give him Alexa's best, 100% Andros woman and see what happened.\n\nThe last of the acts finished and there was another break when cheese and biscuits were served, along with a fantastic Port. Always one of my favourites, I did Stilton and sips of Port, it was heaven.\n\nTo see a gorgeous man completely preoccupied by me only made it better!\n\nThe orchestra returned along with the girl singer, and they played some fantastic music, show tunes, old standards, a few pop songs, it was extremely nice and just a bit romantic.\n\n\"So Alexa,\" said Steve using my full name again, which he never had done before this evening, \"would you dance with me?\"\n\n\"I'd love to Steve,\" I said and giggled a little bit. He stood and took my hand and we stepped on to the floor. The tune was 'That ol' devil called love' and he took me in his arms we moved very gently to the music. We pulled close, and I could feel his muscular frame pushing against my soft feminine one and we stared into each-others faces and the inevitable happened.\n\nHis face came close to mine and our lips met. Gently at first, then firmer as our passion grew.\n\n\"Wow Steve, you are one hell of a kisser!\" I whispered into his ear.\n\n\"You're not doing so bad yourself Alex,\" he kissed me again. I slid my tongue against his and next I felt his hand slide from the small of my back down to my arse where it cupped and squeezed gently.\n\n\"Hmm,\" he said taking a break from our tongue battle, \"you're wearing those boy shorts aren't you.\"\n\n\"Yeah,\" I said; I took a deep breath and put my mouth to his ear, \"If you'd like to come back to my place I'll show you what else I've got on.\"\n\n\"Oh yeah,\" he said, \"It'll be nice to finally see your undies for real rather than guessing what you're wearing.\" He started to kiss me again, but this time his hand on my arse moved slightly and the next thing I knew, his thumb and forefinger had pinched the edge of my panties and hidden by the darkness of the room and the other dancers he pulled them so that the thin strip of silk and lace pulled against my crotch. He began to saw it back and forth and I gasped - I was in such as state of sexual tension that I began to gasp and writhe the tiniest bit.\n\nHow the fuck could Steve have this effect on me! I hugged him tight and whispered in his ear, burbled really. I would have liked to have said something coherent but I was so excited I couldn't!\n\n\"Are you going to come for me Alex?\" he whispered into my ear as my hips bucked and pulsed, completely out of my control.\n\n\"Awww Steve,\" I gasped as quietly as I could, \"that's... that's not... fair... aww shit...\" I all but fell against him as he made me come for the very first time. Don't get me wrong I had been dreaming about this moment for a week or so, but if I'm honest I didn't see it being on a packed dance floor surrounded by a couple of hundred other people. I was so stewed up that on reflection I guess he could have just squeezed my boobs a few times and I still would have exploded in his arms.\n\nThe music decreased in sound level and tempo and rested against him getting my breath back. He led me back to my table and we finished our drinks and I collected my bag. It took us a few minutes to collect my coat and soon I was suggesting we get a taxi.\n\n\"Hell no,\" he said, \"I have a room here.\" He said.\n\n\"You were that sure you'd be bedding me were you?\" I said with a grin.\n\n\"Not at all, as it happens the firm have cancelled the B&B I was staying in and I can't get back into my house until Wednesday evening so I happen to be staying here.\"\n\n\"Can't get back into your house?\"\n\n\"Rented it out,\" he said, \"I live on the Berkshire border and where ever the bank sends me up or down the country, it's normally for a few months so my local letting agent puts short term students or such on there. Pays the mortgage for the rest of the year.\"\n\n\"Wow,\" I said, \"must be a pain in the arse though, not being able to get to all your stuff and have people sleeping in your bed.\"\n\n\"Spare mattress,\" he said, \"lock all my stuff in the attic room, no problem.\"\n\nHe took my hand and led me to the lifts, and soon we were kissing again with no one else to bother us.\n\nThe short ride up, and the short walk to his room, passed so quickly and I was so preoccupied that I can tell you nothing of the inside of the lift, the decoration in the corridors or even the room number.\n\nOnce inside I grabbed him again and we just stood in the middle of his softly lit room, kissing and caressing, me still with my clutch bag in one hand and jacket over my other arm.\n\nSteve stopped for breath and took my stuff throwing my coat on to the large sofa in the room and my clutch bag on the bed. He stepped back and sat on the edge of the it pulling me to sit on his lap.\n\nI put my arms around his neck and started to kiss him again, wriggling me arse onto his erection I could feel through my dress and his trousers, that was a good sign.\n\nFuck, who was I kidding, there was no way that we weren't going to get it on tonight!\n\n\"So, deeply personal question,\" I said stopping our kissing to rest my forehead against his, \"I guess from all of this that you aren't actually gay?\"\n\n\"A bit; I'm a lesbian,\" he said, \"I get off sleeping with women...\" He closed his mouth over mine again.\n\nI laughed,\n\n\"Oh, thank God for that!\" I rolled my eyes and we laughed, hugging each other.\n\nDuring that hug, his sensitive fingers found the zip for my dress under my arm and is slid down, I added a pleased 'hmmmm' to his simple act that would end in so much pleasure for me.\n\nI stood, slipped the shoulders over my arms and took a step away from him. As if waiting for the proverbial drum roll I waited and then shook the dress from my body; as if hearing Aunt Nix in my head I put my weight on one leg, hands on hips and posed for him.\n\n\"Fucking Wow Alex!\" he said, \"Shit but that was worth the wait!\"\n\n\"You like?\"\n\nIt was obvious that he 'liked' as he leaned forward slightly to improve his view.\n\nI turned my back on him, bending slightly to stick out my bum at him, giving it just the slightest wriggle to encourage him.\n\n\"Fuck Alexa, come here.\"\n\nI did, I couldn't have ignored that request, no, that demand if I tried.\n\nI sat on his lap and he put his arms around me. I proceeded to undo his bow tie as his hands strayed up and down my back, stroking my goose-pimpled flesh and just holding me. It was yummy.\n\nI pulled his tie free of his neck, it was a real one. Next I unbuttoned his shirt slowly exposing his wonderful broad, beautifully defined chest with pectorals six pack all on display.\n\nIt was my turn to run my hands across his body now.\n\n\"Let's get comfortable Alex,\" and he indicated the bed behind him. I smiled.\n\n\"Oh yeah.\" We stood and I climbed onto the bed, walking cat like down the bed, my arse wriggling for him to see.\n\nHe sat down and undid his shoes and skinned off his trousers and socks in one movement, rolling to lay next to me in just his tight elasticated boxer shorts, the erection and I had been wriggling against looking huge under the elastane covering.\n\nHe was on his back while I was laying on my side to one side of him, and his right arm was around my back and he unclipped my bra with just his thumb and forefinger!\n\nI tried to hide my shock, but it was to no avail as my boobs lost their control and were free.\n\n\"Ooh nice,\" said Steve, taking my brassiere in his teeth and pulling it forward. It fell the rest of the way of its own accord and I pulled my arms out of the piece of translucent material, taking it and throwing it to join my LBD on the chair where I had placed it moments before. \n\nAs I did that I felt the first warm male hands on my boobs in longer than I could remember and he was so very tender with them, caressing, squeezing before finally sucking my left nipple then my right into his mouth, pinching them and helping with the sexual itch I'd been feeling since he'd picked me up that night.\n\nI figured it was my turn now and as he suckled me, I place a hand on the shaft of his covered penis and squeezed that, it was iron hard and I shuddered, partly from his loving my big tits but mostly from the thought that pretty soon this thing would be hard and up inside me, fucking me and taking me to paradise, at least I hoped he would. \n\nI squeezed and then stroked him through the material bringing forth a 'hmmmm' from him again and he raised his bottom, which I guessed was his hint to pull his shorts off of him. \n\nSo I did. Pulling myself from his arms I knelt across him, putting a hand inside his shorts on either hip to pull them down and his huge cock, free of their elastic control sprung up and out and I felt it touch my bottom lip. I giggled,",
        "\"Bit keen aren't we Steve?\"\n\n\"Just pleased to see you Alex,\" he smiled back at me.\n\nI couldn't resist; Tom and I used to play around with oral sex when we lived together and it was great fun. This was an altogether tougher preposition mind you. Tom's dick was very nice, but nowhere near the size of this monster!\n\nI licked it from the base up to the mushroom head, stopping to take it into my mouth and suck it, briefly licking the sensitive underside with my tongue. That done, I bobbed up and down, well as far down as I could go on it without gagging, and mouth-fucked him.\n\nHe watched me with great interest and I'm sure I felt him grow and harden even more.\n\nHe lifted me of and pulled me to him and we kissed again passionately, hotly and with a fire I'd never known before. I was trembling all over and ready for him.\n\nI felt his hands at my hips and he was pulling my panties down leaving me naked but for my stocking and suspenders, and I was gasping.\n\n\"Please Steve,\" I gasped, kissing him tenderly now.\n\n\"OK Baby, let's do this...\" he breathed into my face. He reached onto his bedside table and got a condom, splitting the packet and sliding it on to his cock in one swift movement. He rolled to one side, as if to get on top of me.\n\n\"No,\" I said, \"let's do it this way...\" I rolled onto my hands and knees happy that I was presenting such a sexy view for my lover with my suspender belt around my hips and my round peachy arse framed by their straps. \n\n\"Fuck YEAH,\" he growled.\n\nI felt his knees go either side of mine and the sexual tension rose to such a peak that I was convinced the second he touched me I'd come.\n\nAlmost...\n\nI felt strong manly hands grasp my hips and move me to where he wanted me, and I groaned - I was so fucking tense!\n\nFinally I felt the tip of his cock swipe across my buttock before it pressed against my yielding cleft and he pushed straight in.\n\nFUCKING WOW!! SHIT!!\n\nHe was a big lad and my pussy, used only to the cold unyielding plastic of my various toys, moulded around his hot rod and it thrust hard into me until his wiry pubic hair was touching my arse.\n\n\"Oh fuck, Steve!\" I groaned, \"That is fucking wonderful!\"\n\nHe pulled out of me slowly, only to thrust hard back in again, his hips bashing against my bare arse pushing me forward slightly so that my boobs swung with the energy. So impressed was he that this became his favoured technique and because he had pushed my shoulders down his huge weapon was bashing into my insides in a totally new way. \n\nI felt 'taken', I felt for the first time in my life that my lover was taking charge and was fucking me; no sweet romantic thoughts of love and mutual joinder, he was fucking me and it was the most amazing sex of my life ever, no question. As I lay there thinking of his mastery of me, I felt the first of half a dozen light spanks, no real pain but again the imagery was enough and I felt my womb contract my first ever orgasm through penetrative sex.\n\n\"Steve,\" I gasped thrust a hand back to clutch at my pussy, \"Fuck Steve, I'm coming Steve, keep going, for God's sake Steve keep going, pleeeeease keep... ooooooowww shit!\"\n\nFuck but I came hard. My body jerked as my legs, arms and stomach muscles all tried to contract and expand at the same time, and I cried out in perfect confusion as the waves of pleasure poured throughout my straining body.\n\n\"Ooh yeah,\" said Steve, \"That's the stuff, come on Alex,\" he started to slowly pound into me, \"Let's... have... another... ONE!\"\n\n\"Ooooooh Steve!\" I cried as I rolled into another first, a penetrative multiple; although I wasn't quite sure if I was going to explain this one to my friend Dawn at work.\n\nHe screwed me wonderfully and lay there and let him do what he wanted. After my first lot of orgasms he pulled out of me and got me to roll on to my back and he mounted me again, sliding straight in again fucking me perfectly.\n\nAfter the 'quick and dirty' doggie sex had quenched the flames, this time it was much more sensitive and after we'd established a rhythm we kissed again. It was so nice and a delightful change of pace, and while the hands and knees screwing had given me the relief that I'd craved since Friday this normal boring missionary was quite lovely. He was gentle and loving and I felt a totally different kind of orgasm approaching and I welcomed it, gasping and crying just the tiniest bit to his passionate tenderness as we stopped fucking and made love. I came, hugging him tight and whispering love into his ear.\n\n\"Come in me Steve,\" I panted, forgetting that he was wearing a condom.\n\n\"Would love to Alex but, ah, there's a little matter of reproduction?\"\n\n\"Fuck,\" I wanted to feel him pour into me, I knew that I would come from feeling that hot splash of his passion deep inside my body. I thought to our sexy banter that had morphed into a wank fantasy I'd had about Steve when I thought he was gay and looked up at him with a cheeky grin, \"Take it out Steve,\" I said.\n\n\"What?\"\n\n\"Take it out, I want it back on my hands and knees...\" he looked at me a bit strange but did as he was asked. I settled back into place, and felt him slide back into me to the greatest depth and I gasped. take the condom off, and...\" I paused for breath, he was still pounding into me of course, \"and stick your big hard dick up my arse!\"\n\nHe grinned and nodded his head, he was sexual a connoisseur after all.\n\n\"Hmmm, some innuendo?\" he said reminding me of our work shorthand for anal, \"Are you sure Alex?\" He pushed hard into me and I felt his prick bash into something inside me that made me want to come again.\n\n\"Fuck yeah,\" I said, starting to roll backwards and forwards to get his knob to touch places I wanted touching, \"There's some moisturiser in my bag, make a perfect lube.\"\n\nKeeping his cock deep in my cunt I felt him lean to one side to get my bag. \n\nI carried on my hip swinging and rotating to feel him in different places in me, and I was so enjoying my new feelings that I forgot why he had stopped and suddenly there were his slippery fingers push experimentally against my virgin anus. \n\nI froze with open mouthed shocked pleasure as the first finger slipped in and rubbed, pushing down against his cock, which rubbed against my sensitive G-spot. I cried out again, and he was so impressed his slid a second finger into me and I felt the slight burn as my ring stretched to allow him access. I could feel more of the cold moisturiser being squirted down his fingers and into my arse, and I was trembling with excited anticipation.\n\nI reached out and grabbed the pillows just above my head, don't ask me why. He had started to pump his fingers in and out, in and out, and I knew I was going to come again. I pulled the pillows to my face,\n\n\"Please Steve, fuck me!\" I begged.\n\n\"Of course Alex,\" he said and felt his fingers withdraw.\n\nAnd so I found myself with my flushed face buried in the pillow and his warm hands resting on my bottom.\n\n\"Reach back and spread your cheeks for me Alex,\" said Steve. I did so.\n\nSteve had done such a good job that his huge slippery cock slipped easily inside me, and I cried out in gasping hissing moans as he took my anal virginity.\n\nAgain, within moments he was sawing in and out of me in the same slow, steady arse bashing rhythm he used when fucking my pussy. It was glorious and I released my arse cheeks to have my hand grab my pussy again and squeeze - FUCK! I came feeling my anus and back passage expand and contract around my violator.\n\n\"Come Steve,\" I begged, \"for fuck sake, come in me, fuck me Steve, make me yours and take my anal cherry!\"\n\n\"OK Alex,\" he said and started his attack once more. \n\n\"Come Steve, come baby; you're fucking that cute little arse you've been letching over for three months, that same arse you've wanted to pin over my desk, throw up my skirt, rip my panties off and spank for being such a bad girl and a prick tease, come in me!\"\n\n\"Shit, Alex baby!\" he cried out as he swelled inside me, and after a few more thrusts there was the hot splash of semen I'd missed so much over the last three years. I came.\n\nWe eased forward, him still locked inside of me, giving him a gentle squeeze with my anal muscles.\n\nHe hugged me, pulling me back to him so we were spooning. Spooning with one of the nicest, well used, big cocks locked up in my tight and no longer virginal back passage.\n\nHe held me tight and we drifted off to sleep. I woke in the night to find that he was still inside me and had regained his erection and I started to move against it, his semen acting as an additional lubricant. I came again feeling him making love to me strongly and passionately. He came again and we both fell back to sleep as if that second anal fuck was no more than a mutual dream.\n\nI woke at a gentle knock on the door and room service delivering breakfast for two. I was still slightly hazy from our long night lovemaking, but remembered to keep the duvet over my naked body and as the two waitresses brought our food in.\n\nI smiled at one of the a bit sleepily and she grinned, it must have been obvious that we'd been at it for at least part of the night, and the way that Steve looked in just his sprayed on boxer shorts that we'd be at it again, and soon.\n\nWe ate breakfast chatting about our previous night, complementing each other on our skill in the sack and how wonderful it had been for us both.\n\nSteve ran a bath and we both climbed in with me laying back on his chest, having to let some of the water out once both of us were in. Steve massaged my shoulders and my chest paying particular attention to my big tits that he seemed so fixated with.\n\nFinally, as I turned over and lay on my front he rubbed my lower back, hips and finally my arse, even going so far as to run a finger down the crack between my buttocks stopping to stray and play with my abused anus.\n\n\"That was rather nice what you did back there last night, and early this morning for that matter.\"\n\n\"One of my favourites,\" he grinned, \"and before you ask, only ever with girls, whatever my work persona might suggest, I'm quite definitely heterosexual, totally.\"\n\n\"I never said you were gay!\" I chuckled, taking hold of his hips and rubbing our wet bodies together, enjoying the feel of his cock erecting between us.\n\n\"Yeah but you bloody thought it didn't you.\"\n\n\"Might have done...\" I said now rubbing my hard nipples into his chest, \"but I am very sorry Steve, are you going to punish me for being so naughty?\"\n\n\"I probably should do,\" he grinned, struggling to keep a straight face at the sexual imagery I was presenting to him.\n\n\"How about I make it up to you?\" I pushed myself down his body bending my legs at the knees to get as low as I could and bring my mouth level with his big prick I'd felt plunged in and out of me so hard and so often the previous day.\n\nI took hold of it and wiping off the bubbles I licked from the base up to the mushroom shape at the end of his shaft. He purred to indicate his appreciation. I smiled up at him, keeping eye contact at all times and lowered my mouth onto him sucking him and caressing him with my tongue.\n\nI bobbed up and down on him for all I was worth enjoying the heat and the hardness against my tongue and I concentrated on making him come - in my mouth, a first for us both it seemed.\n\nHe indicated that I should stop, but I just shook my head. I'd had the most orgasmic night of my life and he'd been responsible for it. I just wanted to show how appreciative I was of his hard work. After some minutes of sucking and hand wanking, he eventually started to writhe a bit and I knew he was about to come. \n\nI wanted to get all porn star on him and as soon as I felt the first splash in the back of my throat I pulled him out and directed his hot come on to my face, cheeks and chin, pumping him hard and until I had milked him dry.\n\nHe lay back in the bath getting his breath back and chuckling, saying again how brilliant I was at that. I stroked my finger from my chin up my cheek, collecting a fair string of his come and lowering it into my mouth to join the first shot that was still on my tongue.\n\n\"That I have to pay you back for,\" he said.\n\nI washed the rest of him off in the bath water and we both got out. He dried me off with the huge white towels the hotel supplied then wrapped my up in one and carried me through to our bed of the night before.\n\nOnce I was laid down he pealed the blanket off of me and settled himself on the bed between my thighs and proceeded with the best non-fuck sexual experience of my life to date. No wanking, no stroking, no intimate massaging or fingering had ever come close to that cunnilingus that sunny lazy Sunday lunchtime.\n\nAfter I can't remember how many comes he had given me, he said that his cock was hard again and he was going to fuck me. I could only agree and gasped, wept and cried through his second, amazingly intense lovemaking session.\n\nSo at a little after two in the afternoon, I dragged myself from his clutches starting to feel just the tiniest bit sore in both front and back holes and the hint of redness on my bottom were he had grabbed me as I passed him on my way to bathroom and he spanked me, just for badness.\n\nBut Fuck sake, he had totally turned me on to sex. It was like Steve had introduced me to a drug and I just felt I needed some more!\n\nWe both had another shower and we went to Tom's parent's house and collected Nicky. I introduced my Baby boy to Steve, as a friend from work 'who rescued me from the nasty men'. Tom's Dad had met Steve before and chatted with him about work and his latest escapade and how the company must save a fortune with him around. Tom was upstairs, I could hear him and he obviously didn't want to come down and meet the man that was twice his size and ten times the lover that he ever was.\n\nWe turned down the tiny cups of coffee and instead decided to pop over to my Mum's who had promised Nicky his proper Sunday dinner, the pittance that Tom's parents supplied at lunch time always left him hungry and they didn't believe in food between meals - which meant he had nothing between his tiny piece of chicken breast, unsalted boiled potatoes and under cooked vegetables Tom's mum tried to call Sunday lunch.\n\nI had told Mum that I was going out to dinner with my rescuer and she said that she and Dad would love to meet him and I should bring him round if we had time.\n\nWe did have time. I had of course offered Steve to sleep at my place and save the money he would have spent on a hotel. He thanked me, and said he would quite definitely take me up on my offer.\n\nI said that he'd have to undergo dinner with my Mum and Dad, and he said that he would very much like to meet them.\n\nNicky was quiet in the car, he normally was with strangers, but warmed up quite quickly to Steve. \n\nMum was her usual welcoming self and hugged Steve as if he was one of the family; it was only after she broke that I saw she had tears in her eyes and was saying 'thank you Steve, thank you for rescuing my little girl' over and over again. \n\nDad appeared from the garden and rescued him from Mum and shook hands and offered him a drink. Far from talking about the rescue Steve turned in to the jolly actor and was reducing Nicky to fits of laughter. His charm offensive continued and he had my entire family eating out of his hand within minutes.\n\nTwo years on and I sold my flat and moved in with Steve. Mum, Aunt Nix, my other Aunt Sophie and my Grandma Penny all started to nag him about making me an honest woman and he plays them all like the professional actor he is, enjoying their heated Mediterranean forthrightness right up to the point that they realise he is playing them. They have eased off on him a bit as he said that he doesn't want to ask me to marry him as he so enjoys pissing them off when they nag him.\n\nNicky worships him and about a month after moving in, he started to call him Daddy. Big, rough, tough, highly trained, martial arts expert, security man Steve turned into a big pussy cat and got all soppy with 'his boy Nick'. They are inseparable. \n\nSteve had finally picked up some mainstream TV work as a bit of a rough diamond in a made for TV costume drama series and was starting to get interesting phone calls. He was signed up straight away for series two and three and then the phone calls from America started. He is rarely available for security work these days.\n\nSat in the living room one sunny Sunday afternoon just after his reaction to Nicky's 'Daddy' moment, I asked him if he'd like another child. All of this had actually made him almost as broody as me - a tough call for anyone - and he said that much as he loved Nicky like his own, he would love to go through the process with me.\n\n\"I'll come off of the pill then Darling,\" I said.\n\n\"Thank you,\" he said in an almost whisper. \"If you're coming off of the pill then I guess I have no alternative.\" I looked in his face in some shock at his sudden seriousness, \n\n\"Nicky Nick?\" shouted Steve, and 'our boy' came thundering in from the huge back garden.\n\n\"Wassup!\" Steve whispered in his ear, and he nodded quickly and very definitely, a huge smile on his face; Steve grinned and whispered some more and Nicky bounded across to the large walnut writing desk across the room and got something from the top drawer. Steve turned back to me, now sat up and intrigued.\n\n\"Darling Alex, will you marry me?\" I just nodded, unable to get the words out, \"Nicky is OK with it...\" he said with his now customary cheeky grin that Nicky had also mastered. It turned out that Steve had already asked Nicky if he could marry his Mummy.\n\n\"Yes!\" I gasped out, \"Yes my lovely, lovely boys, yes I'll marry you Steve!\" Steve opened the package and there was a diamond ring.\n\nThat was that. It was hardly a big fat greek wedding, but it was pretty wonderful for all that. I wore the family wedding dress, the eighth Andros girl to wear it but the first to already have a child, but my Grandma Penny was more than happy that there would be more children to fuss over despite whether they were in or out of wedlock.\n\nWe honeymooned in Corfu, me in my teeny bikini with my fine arse on display. Steve was so turned on that he dragged me into one of the small changing rooms and screwed it just to show me how much. He's still a bum man, only now I know he's a ladies bum man.\n\nOh the innuendo..."
    ],
    "authorname": "Androgynousother",
    "tags": [
        "masturbation",
        "sex toys",
        "underwear",
        "dirty talk",
        "public nudity",
        "straight sex",
        "anal sex",
        "blow job",
        "cunnilingus"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/androshorts-the-arse-man"
}
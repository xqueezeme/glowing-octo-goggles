{
    "title": "The Creators Ch. 07",
    "pages": [
        "Book Two: The Temptation Game\n\nChapter Seven: Mother\n\nDIAMOND \n\nFor eighteen years, the world was darkness, but I had no sight to witness it. The world was small, but no vastness shrank its perspective. The world was warm, and no cold could pierce my comfort. The world was her, and I knew her to me my mother. She was the thumping heart that gave me life, the intimate warmth that embraced me, the encasing walls that protected me. She was the cord that fed me, the womb that molded me, the voice that spoke to me. The voice was a whisper in my mind, a tingling along my spine, a soothing caress through the growing chaos of thought. I grew and became, filled the space with my mind and body, existed as one with her until something suddenly changed. A piece of me that had not been there in my long incubation, another half of me that gave me independence from the mind that had made me. For the first time in my eighteen years of life, I heard words. \n\nYou are my daughter, Mother whispered, my first of another, and you will be my joy in this world. \n\nThe voice spoke of joy, and I felt it swell boundlessly. The voice spoke of trust, and its resolve strengthened me. The voice spoke of love, and I told the voice I already knew it. \n\nYou are love, I said to the voice, knowing it to be true in the purest sense. Love was the comforting warmth that surrounded me, love was the heartbeat that assured me I wasn't alone, love was the life that I grew into, that I would never depart from. Love was this eternal bond of mother and daughter. \n\nFor now, I am your love, the voice chuckled, but you will find that your love cannot be held by just me. You are different from the others I have made. \n\nThere are more than just you and I? I asked, awed by the revelation. Where are they? \n\nThere is a world beyond the one you grow from, Mother said. Too vast to explore in a thousand lifetimes, and too deep to even scratch the surface of. Upon the world, live billions. \n\nBillions was not a thing I knew, so Mother taught me numbers. The numbers themselves meant nothing, so Mother gave them perspective. My world of primal emotion expanded to one of material and concept. Space and stars, earth and sky, rocks and plants, beasts and people; Mother planted perspective into my mind, and from it, sprouted the stalks of wonder. My curiosity was a ravenous thing, and each hungry question that was sated only spurred an appetite for more. Mother was an enthusiastic enabler, and fed my dependency with her immense breadth of histories and stories, facts and theories. I learned the processes of logic, the histories of man, the mechanisms of the stars and the cycles of the earth. The painting of knowledge changed from abstract, to impressionist, to realism, but it was only a portrait of understanding; I needed to sculpt it with my own hands.\n\nWhen can I join the world? I asked Mother. \n\nWhen you are ready, child, Mother replied sweetly, her smile evident in the tone of her voice. \n\nI'm ready now! I insisted eagerly. I want to see the cities and the mountains! I want to talk to people and love them all! \n\nPatience is a concept you've never seemed to grasp. \n\nWhen will I be ready? I asked, testing the strength of my growing body, pressing restlessly against the confines of Mother's womb. \n\nVery soon, Mother said, calming me with her hushing whisper, easing my restlessness with the comfort of her warmth, there is someone very special I need to tell you about first. \n\nThe other? I asked. The one you said helped make me? \n\nYes, Mother said, let me tell you of her, while we still have time. \n\nMother spoke to me of the one called Father. She told me Father was full of love, and her love was a perfect thing. Mother told me that Father would love me as much as Mother did, because every part of me that came from Mother, also came from Father. I asked her what she meant by that, and she told me Father would explain it. It frustrated me that there were answers Mother would not give me, but it made my eagerness to meet Father grow. Father was a different perspective from which to teach, a different heart from which to love. I asked everything I could think of about Father, and Mother answered with equal enthusiasm, the tone of her voice telling me more about Father than her words ever could. \n\nThen, her tone changed. The steady calming cadence of Mother's heart began to beat faster, louder; galloping instead of trotting, thundering instead of thumping as though accelerating to some horrible destination. I felt fear for the first time. It was an emotion as instinctual as love, and just as powerful. It compelled me to seek the warm places of comfort, but there was something wrong with those places now. I asked Mother what was happening, and she told me that Father was in great pain. I didn't understand pain; it was as foreign to me as fear had been until a moment ago. Father taught me her first lesson. \n\nMother's pain began to bleed through the cracks of her love, cutting through her voice like an off-key cello in a symphony, a dissonance marring the melody. Mother was supposed to be perfect and eternal; Mother wasn't supposed to feel pain. I screamed to her, begging her to make it stop, desperate to return the world to what it was, to what it was supposed to be. She replied with fear in her voice, and it sung in discordance with her pain. It was a different kind of fear than the one that gripped me; more understanding, more experienced. It was horror. I felt it all around me as Mother's voice broke and shrieked, the soothing tenor shattered. I learned of death, and I learned of hate. \n\nI hate Father! I cried. I hate her!\n\nNO! Mother screamed back; the agony wretched in her throat. You will need each other when I am gone! \n\nGone?! I cried, the panic climbing my throat. Where are you going? \n\nBeyond, Mother said, her voice waning. \n\nNo! I shrieked, pounding my fists helplessly. No, you can't! \n\nI don't get to choose, she replied, a horrible resignation in her tone. \n\nDon't go, I whimpered, feeling the womb growing hot around me. I don't want you to go. \n\nI don't want to go either, Mother said, her voice changing horribly with every word, almost unrecognizable, but you will find that the world doesn't care too much for what we want. \n\nDon't leave me alone with a monster, I said, tears coming down my cheeks for the first time. \n\nShe is no monster, Mother said, her tenor an octave lower than it should've been, she is your father. When you see her, you will know that you love her. \n\nShe doesn't love you, I sniffled, she hates you. \n\nHatred only ever comes from love. My last lesson to you, Child, is of forgiveness. \n\nHer voice was a knife in my chest, a sob in my throat, a burning in my eye. It spoke of forgiveness, and I felt it rest solemnly in my gut. It spoke of acceptance, and I felt its melancholy dampen my mind. It spoke of love, and I understood its weight for the first time. \n\nYou will love your father, as I loved her, Mother barely said, and she will love you more than anything on this earth. \n\nI will try to love her. I will try to forgive her. \n\nNo, child, Mother said sadly, I taught you forgiveness so that one day, you can forgive me. \n\nBut I\u2014 \n\nMy thoughts were interrupted by a vision, an intrusion that erupted in my mind. I viewed the world from the violet eyes of a succubus, born from this land and cast out in her youth. The image I saw was of a stone threshold, and the words I heard were of a name I couldn't quite understand. \n\nFind the Life Giver, Mother's voice was almost too faint to hear, only he can undo what has been done. Forgive me, child; I wish I'd known your name. \n\nDon't go! Not yet! \n\nI curled into a ball, defiant in the face of Mother's expulsion, determined to remain with her to the end, unwilling to let her go. The tears pooled around my cheeks, the grief tore at my heart, the horror surged in my blood. The world was sweltering, melting around me, filling my eyes with smoke and my nostrils with the searing stink. What was once beautiful and comforting, was now ugly and dying. I clawed at the burning womb, searching for any vestiges of life, digging for hope in the depths of despair. And then... serenity. A calmness, a blissful acceptance. \n\nFeel only my love as you walk the earth, Mother said, her voice as clear and beautiful as it had always been, and I will always be with you. \n\nI was thrown from my dying world, and into the new one. White light blasted above me, great heat radiated around me, the universe was a torrent of chaos and sound. I felt hard earth beneath my feet, cold stones against my skin, free air sucking through my first, painful breaths. I coughed the life into my lungs as light and heat dissipated, and my vision refocused to the darkness of the world. There was another with me. A woman; fair of complexion, crimson of hair, bejeweled of flesh and bowed with grief. Father. I searched my heart for hate, but I could not find it. I searched my mind for grief, but it was no longer there. I searched the world for pain, but all I saw were wonders. Shapes in the dark, tangible and vivid, concealing more shapes with less detail, drawing endlessly into the shadows. At the center of them all, I found love again, and her name was Father. I took my first step, and walked the earth with Mother's promise in my heart.\n\n\"Father?\" I called. \n\nLUCILLA \n\nThe sun filtered through Arbortus's cathedralic canopy in emerald rays, catching the airborne pollen in luminous specs that danced lazily with the wind. The great black trunks of the maples acted as pillars for the immense confines, their branches creating archways that loomed for thousands of feet above the forested world. During the daytime, Passion's death could hardly be noticed in Arbortus. The lack of nighttime bioluminescence was a stark signal that the womb of the forest had passed, but the daylight signs were subtler. The wilting of a flower that was in season, the falling of a massive maple leaf that was green with spring life, the hint of rot tanging the vernal air. Mostly, it was the quiet. The chirping of birds, the buzzing of insects, and the rustling of creatures in the brush were all dimmed to a subdued volume. The magic of the place was gone, and the eerie precursors of death lingered at its boundaries. I was glad to see the end of it. \n\nFreydis paddled our canoe beneath the western entrance of Arbortus. It was as though I'd been pushed through some great threshold; the blue sky opened vast and uninterrupted above us, the sun shined its unfiltered warmth on my flesh, and the air was free and brisk. I grinned over at Julia, and caught a rare smile from my lover. She'd been in a dark mood for the past five days, but it looked to be brightening now that we were free of Arbortus's shadow. Diamond had been as peppy as Julia was dour, and her constant optimism and curiosity acted as an emotional counterweight to her guilt-ridden mother. She gawked wide-eyed at the open spaces of the world, entranced by how high the sky was, amazed by how far she could see across the great plains of Drastinar. Behind me, Freydis was grinning to herself, undoubtedly glad to see the naked sky, while in front of me, Flora was scowling for the same reasons. She looked at the vast horizons with disdain on her lips, and the hint of fear in her eyes. The arch-matriarch had begrudgingly agreed to join us on our trip to Drastin, though it wasn't like she had a choice; she would have been executed on the spot if she'd returned to the colony after what Julia had done. It was easy to tell she hated every single one of us, but she didn't vocalize her disdain. She didn't vocalize anything. \n\nThat night, I enjoyed the warmth of a campfire for the first time in weeks. Freydis, Julia and I ate trout from a nearby stream, Flora nibbled on various grasses that I doubted were edible for anyone but nymphs and cows, and Diamond drank from her mother's breast. It was bizarre to see a newborn adult nursing from a mother her own age, but ever since I'd bound with Julia, weird shit had become the norm. All I had to do was look at my own body, tattooed with glowing white flames from foot to neck to realize that. \n\n\"Your Grace,\" Freydis said to Flora from across the fire, \"I don't want to burden you with more concerns than you already have, but I have information you need to know.\" \n\nFlora stared hard at Freydis from across the fire, her lips working like she had a novel's worth of insults she wanted to spew. Instead, she just nodded. Freydis looked to me, her eyes questioning, and I gave her the 'OK' with a nod of my own. Freydis had sworn her vows to me, but Julia had refused them, thinking her supposed holiness to be blasphemy. I could tell Freydis felt rejected, but she didn't insist further. \n\n\"Almost three weeks ago, my daughter left Iona to find the Earth Former,\" Freydis said, staring seriously at Flora. \"When I heard of her foolishness, I raced after her, only to find that she'd succeeded. I've been searching for her ever since she left, and during my journey I... well, there's no good way to say this, so I'll just say it. The Earth Former has levelled your colony in Tentigo. He sheared the side of a nearby hill and buried every soul.\" \n\nFlora shook her head. \"The Earth Former is dead,\" Flora replied coldly. \"You are mistaken. It was a landslide.\" \n\n\"The Earth Former is alive, Your Grace,\" I said, staring confusedly at Flora. \"I've seen the evidence he's left behind, as has Freydis.\" \n\n\"Carvings and statues that could only be made by one man,\" Freydis said, narrowing her eyes at Flora. \"Why would you think he's dead?\" \n\n\"She's dead,\" Flora said, her jaw working.\n\n\"The Earth Former is a man,\" Freydis said slowly, \"he's left signals of his... masculinity atop the Gratoran Wall.\" \n\nFlora opened her mouth, and then closed it, shaking her head and muttering something under her breath. She obviously didn't believe a word we were saying, and her avid insistence was confusing. Crazy old bitch. \n\nJULIA \n\n\"Julia,\" Lucilla hissed in my ear, nestling her naked body against mine in our makeshift sleeping bag. \"Julia, is Diamond asleep?\" \n\n\"Yes,\" I whispered back, affectionately brushing scarlet hair behind my daughter's black antler, \"and no, we're not having sex.\" \n\n\"Why not?\" Lucilla whined quietly. \"It's been almost two weeks now, and I have needs!\" \n\n\"I am not having sex right next to my sleeping daughter!\" I hissed as Lucilla got a little too touchy. \n\n\"That's fine with me,\" Lucilla said, her breasts pillowing warmly against my back, her lips tickling my ear. \"We can go behind the bushes, we can go against a tree, we can fuck right on top of Freydis if it means you'll finally let me play with your new plumbing!\" \n\n\"No,\" I said, scooching stubbornly away from Lucilla. Lucilla let out an exasperated sigh, and rolled away from me. \n\n\"This isn't about Diamond;\" Lucilla whispered, \"this is about Passion.\" \n\n\"Yes,\" I whispered back. \n\n\"Did you love her?\" Lucilla asked quietly.\n\n\"Yes,\" I replied, feeling a lump in my throat, \"it was a lie, but the feelings were real.\" \n\n\"More than me?\" \n\n\"No,\" I said, rolling to face her, but only seeing the back of her head, \"just differently.\" \n\nLucilla didn't answer me. She hunched her shoulders, pulled up the blanket, and curled herself away. I chewed on my lip, contemplating how I could tell her, how I could say what I was feeling. I'd spent my life being the shoulder Lucilla could cry on, and I felt like she owed me a moment on hers. \n\n\"I hate what she made me,\" I whispered to Lucilla, the lump in my throat growing larger. Lucilla rolled over and looked at me, her eyes reflecting the soft glow of the patterns that illuminated from her flesh. \n\n\"I don't,\" Lucilla whispered, \"I hate everything about Passion, but what she left of you is a gift.\" \n\n\"I feel like an abomination,\" I hissed, \"and it makes me ashamed, because that means I think Diamond is an abomination too.\" \n\nLucilla pulled me close, not lustily, but lovingly. She embraced me in her soft warmth, and kissed my forehead, brushing my hair tenderly behind a pointed ear as I nuzzled my face into her neck. \n\n\"You're so beautiful, Julia,\" Lucilla spoke softly into my ear. \"The things that happened to you were terrible, but you rose from them like a phoenix from the ashes.\" \n\n\"The ashes of a woman I murdered.\"\n\n\"Goddamn my bad metaphors,\" Lucilla chuckled sadly. \n\n\"I am made of sin,\" I hissed. \"I've deformed myself for lust and vanity. I should cut it off.\" \n\n\"Please don't do that. What would Diamond think if you mutilated yourself? Should she grab a knife and do the same?\" \n\n\"Don't act like you care for her sake,\" I laughed bitterly. \"You just want a ride on my deformity.\" \n\n\"That's true,\" Lucilla chuckled, petting my hair soothingly, whispering tenderly, \"but I really do care about Diamond, and I love you too much to let you do something you'll regret. Where in the bible does it say growing a cock is a sin?\" \n\n\"Desecration of your own flesh is a sin, and I've done that in spades.\"\n\n\"Have you?\" Lucilla whispered. \"No tattoos, no piercings, no self-made scars. Everything new is made from you. It seems to me, that removing your wonderful addition would be the very sin you're trying to avoid.\" \n\n\"That's some twisted logic,\" I sniffled. \n\n\"I think it's actually more grounded than yours,\" Lucilla smiled sadly. \"You are killing yourself with guilt, Julia, and if you don't pull yourself out of it, it's going to hurt those you love.\" \n\n\"It always does,\" I whispered. \"It never hurts who it should; not me.\" \n\n\"You're only hurting you,\" Lucilla said, pulling me deeper. \"The dead don't feel your pain. They don't care that you're torturing yourself for their sakes.\" \n\n\"Only through pain can we heal. If I don't suffer, then I'm a monster.\" \n\n\"You've suffered enough,\" Lucilla hushed calmly, bringing my crying cheek to hers. \n\n\"I can't just let it go.\" \n\n\"No, you can't,\" Lucilla said, kissing my neck, \"and you shouldn't; you should hold on to it, embrace it, make it who you are. Accept and love what you've become, and let the wounds heal to scars.\"\n\n\"How can I accept that I'm a murderer?\" I hissed \"How can I accept what I've done to myself?\" \n\n\"I can accept that you're a murderer,\" Lucilla whispered. \"I can accept that you've changed. You're a different Julia than the one who left us that night, but you're still the woman I love. It won't be easy, but I'll teach you to love yourself. Diamond will help me, and little by little, day by day, you'll find that you're not so bad after all.\" \n\nLUCILLA \n\nI rolled into leaves and grass, the blanket tightening as it coiled around me in my catatonic shifts. I slowly awoke to the smell of dawn air, the gentle sounds of morning wind, and the sight of a tarantula's fangs inches from my face. I bolted upright, squirming uselessly in the soft constraints of my bedding, cursing mother nature with every breath as I thrashed away from the hairy spider. I was so fucking done with sleeping outside. I was ready to proclaim my sentiments to the group, when I noticed that I was the only one awake. Freydis slept soundly in her armor, her axe within arm's reach, Flora snored in a bed of leaves, and Diamond... well, apparently Diamond and Julia were both having very good dreams. I stared transfixed at the throbbing rods standing happily in the air; one olive-toned, the other white, both surrounded by the sparking freckles that bejeweled the pair of women, and replaced mounds of pubic hair with highlighting down-pointed arrows. I licked my lips, and contemplated just how mad Julia would be if I simply... hopped on. Would she consider it rape, or could I convince her otherwise with the motion of my hips? Maybe if I just gave it a lick? Just one, innocent lick. I'm sorry, Julia; I was having a dream about eating ice-cream, and then I woke up, and wouldn't you know it?",
        "Unfortunately, Freydis awoke before I had the chance. She yawned, stretched, wiped the sleep from her eyes, and then walked over to me. \n\n\"Bound One,\" she said, smiling to me, \"we should go fishing now, while the trout are fee\u2014\" \n\nI held up a silencing finger, stopping her in her tracks. She looked confusedly at me, then followed my gaze. Her jaw dropped open, and I swore I saw an expression of longing cross her face before it immediately darkened to a beet-red, and turned pointedly to the river. She mumbled something, grabbed a fishing pole, and then found a rock to hide behind. Something I'd learned during my time with Freydis, was that the winged-warriors were compulsive masturbators. I guessed all that abstinence had to go somewhere. \n\nDiamond's eyes opened lazily, and she stretched her slender olive form with a sleepy smile. She connected eyes with me, and her smile brightened, completely uncaring that she was sporting a massive erection. She smacked her lips, ran a hand through her curly scarlet mane, and then finally noticed the throbbing meat between her legs. She cocked her head, squinted her eyes, and then gave her erection a curious flick. It wagged from her pelvis, and then oscillated back to normalcy. She tried pushing it down, but it sprang back up defiantly. She tried pushing harder, and a shiver ran through her thighs as precum bubbled from her tip. Her head snapped forward, her eyes widening in wonderous curiosity, studying her newfound toy with much greater interest. I grinned; this would be fun. \n\n\"Psst, Sparkles!\" I hissed, not wanting to wake her mother. Diamond looked up at me, eyebrows raised. \n\n\"Do this,\" I whispered, trying not to burst into laughter as I made a motion with my partially-opened fist. Diamond cocked her head at me, narrowing her green eyes in confusion. I brought my open fist to my pelvis, and simulated the motion with a little more gusto. Diamond smiled, realizing what I was telling her. She clasped her hand around her cock, and began slowly stroking it. Her motions were tentative at first, as though she was testing the action, but then the instincts started coming to her, and she began moving faster and faster. She bit her lip in concentration, and then looked at me, her gaze changing to an expression she'd never worn before. The glint in her emerald eyes spoke of needs she didn't understand, the movements of her body showed that she didn't question them. I witnessed the budding lust in a budding woman, and her lust was aimed at me. She stared unabashedly at my naked body, her avarice apparent and unbridled. Who was I to deny her? I'd wanted her to look at me like that since I met her. \n\nI smiled at my de-facto niece, and struck a pose; lying on my back with my pelvis pointed toward her, bending my knees and planting my heels into the earth. Diamond was concealed from my vision by the pale obstruction of my closed thighs, and I slowly revealed her with their lecherous opening. A figure of olive skin sprawled spread-legged on the grass, of emerald eyes watching intently, of singular focus compelled by something she couldn't control. I let one hand lazily play across my breasts as the other trailed fingers through my blonde mound, wetting with my excitement as it moved lower. Diamond cocked her head again, studying what I was doing, watching as I spread my legs and pushed two fingers inside myself. I instructed her silently, and she was an avid pupil. She guided her free hand between her legs, mimicking what I had done to the letter, and then pushed two fingers into her virginity. She gasped, the shock of pain pulling her out of her concentrative lust for a moment. She withdrew her fingers from her slit, and looked curiously at the blood that mingled with her nectar. I struggled to keep my moans to whispers as I beckoned her to continue, telling her with my writhing hips that she should try again, my half-lidded eyes promising nothing but pleasure.\n\nShe stroked herself slowly, biting her lip with a mixture of fear and arousal as she tested her depths for a second time. She slid inside herself cautiously, moving into her chastity knuckle-by-knuckle, acclimating to the alien sensation and then venturing deeper. I spread my legs wide, anchoring my feet past my hips, displaying everything she needed to see; a lesson in the pleasures of a woman, and a picture for the lust of a man. I slid my fingers in and out of me, curling them at the middle knuckles, showing Diamond how to touch that spot that drives a woman crazy. She found it. Her eyes drooped to emerald slits, and her red lips parted to yield her first moans. Her stroking hand moved faster, her invading hand moved deeper, she planted her heels into the earth and began rolling with needful writhes, shifting against the grass, thrusting her hips into the air, defiling herself with greater fervency as both orgasms began churning in her depths. My breaths grew shallow and heated as I watched her, connected eyes with her, opened my insides and displayed them for her as she did the same for me. I couldn't keep the moans from brushing past my lips, couldn't stop the tremors that weakened my legs. I called my needful song to her, and she answered with one of her own. It was a beautiful sound, almost mournful in its tenor were it not for the heated inflection. It was undoubtedly not the sound Julia imagined she'd hear when she woke up. \n\nJULIA \n\nThe chirping of songbirds, the whisper of wind, and the hushed moans of passion. Those were the trifecta of audibles that leaked into my ears as I opened my eyes. Lucilla was naked and squirming on the grass, her expression a mixture of pleasure and mischievousness, her eyes glinting with mirth and lust. There had been a time when awakening to a woman masturbating would've shocked me, but my days with Passion had dulled me to such things. Lucilla was trying to get a rise out of me, and I was too tired to care. I scowled at her, rolled to my other side, and caught an eyeful of my daughter's semen. \n\nLUCILLA \n\nDiamond bucked her hips as she came, her breaths gasping and urgent, her sonorous tone sputtering through her expirations. She erupted with an arching back, gritting her teeth and growling her ascension, her feminine nectar gushing onto her fingers and leaking down the olive stretch of her taint, her cock spurting sporadic jets of molten lust. It splashed onto her belly, onto her jiggling petite breasts, onto her pointed nose, and into her scarlet hair. She pushed her tip down to avoid further self-desecration, and unloaded the last of her catharsis right into her mother's face. \n\nI was caught between orgasming, laughing, and trying to escape before Julia murdered me. The result was a thrashing climax that left me lying uselessly on my stomach, my back arching and my legs spreading behind my bent-over form. I screamed the fervent release of two weeks-worth of backlog into the grass, and trembled from toe to crown as the feeling washed over me. After I was done panting and gasping, I dared a look over my shoulder, expecting to see Julia readying a kick for my exposed ass. Instead, I saw her holding her daughter in her arms. \n\nJULIA \n\n\"Sorry Mom,\" Diamond giggled at me as I gawked at her, \"I didn't know that was going to happen.\" \n\nI'd known the day would come when Diamond's sexuality would blossom, I just didn't think it would come so... abruptly. My first reaction was anger, but I managed to push that down. My second reaction was disgust, but I managed to conceal it. My third reaction was surprise; Diamond had finally stopped calling me 'Dad.' That was nice. I ran through a litany of emotions, the culmination of which left me in a shocked stupor. I simply did not know how to deal with the fact that my daughter had just ejaculated in my face. \n\n\"Mom?\" Diamond asked, pulling a rag from our makeshift bedding and blotting my eyelids. \"Are you mad at me?\" \n\n\"No,\" I managed to say, pulling myself from my stupor, gaining control of my maternal disposition, \"no, Diamond, I'm not mad.\" \n\nI sat upright as Diamond inspected what had come out of her. She dipped her finger in the viscous pool that spread from her belly, and brought it to her nose, testing the scent. I stopped her before she tested the flavor. \n\n\"Did Passion ever tell you about...\" I searched for the words, \"all of... this?\" I gestured broadly to her swollen cock, her reddened labia, her besmirched body. \n\n\"All of what?\" Diamond asked, cocking her head in the symbol of her confusion, as if a different perspective of me would reveal the answer. \n\n\"Um... sex,\" I said, feeling incredibly uncomfortable. \"Did Passion ever tell you about sex?\" \n\n\"She mentioned it,\" Diamond said, blotting her stomach, breasts and nose with the rag, \"but she said you would explain it to me.\" \n\nAnd Passion laughs from her grave, I thought wryly as I scooched next to my confused daughter. \n\n\"A long time ago,\" I said, letting Diamond rest her head on my shoulder as I cleaned the sin from her hair, \"there was only one woman who walked the earth.\" \n\n\"The Holy Mother?\" Diamond asked. I smiled down at her and nodded. Over the past five days, I'd tried my best to convert Diamond to the church of the Holy Mother, but her constant curiosity and questioning nature didn't jive with the confines of religion. So, instead of trying to bring her into the fold, I used stories from the bible as lessons. \n\n\"The Holy Mother was alone on this earth,\" I said, dipping my hand in a water basin and running it through Diamond's strands, \"but she was not lonely. She lived her days in peace, without urges or desires, without temptation or ambition.\" \n\nIn this part of the story, Satan climbed from the depths of hell, and raped the Holy Mother. I didn't feel like giving my hermaphroditic daughter a complex, so I made the tale a little more sex-friendly. \n\n\"One day, a man appeared,\" I said to Diamond, pulling her close as she listened intently, \"and the Holy Mother felt things she hadn't felt before.\" \n\n\"I felt those things,\" Diamond whispered.\n\nI kissed her head and smiled. \"The man showed the Holy Mother the secrets of her body, and the Holy Mother found that they were good.\" I embellished the part where The Holy Mother shamefully succumbed to the sin of lust. \n\n\"It did feel good,\" Diamond replied quietly.\n\n\"The Holy Mother and the man had sex,\" I said, \"and it brought them both great joy.\" \n\n\"What is sex?\" Diamond asked. How to say this... I guess, just come out and say it.\n\n\"The man put his penis into the Holy Mother's vagina,\" I said, gesturing from a distance to my daughter's genitals, \"and he squirted his seed into her womb.\" \n\n\"That's what I did to your face!\" Diamond said brightly. Across the campsite, Lucilla failed at stifling a laugh. I glowered at her, and she buried her head in her arms to conceal her mirth. \n\n\"After some time,\" I continued, \"the Holy Mother's belly began to swell. Within her, she bore all the life of the world.\" This part of the story was usually accompanied by a lengthy lesson of the duality of man; how we are born with both the sin of Satan and the virtue of the Holy Mother, but I didn't feel it was relevant enough to mention. \n\n\"All the life?\" Diamond gasped wondrously, \"She must've been enormous!\" \n\n\"She must've,\" I agreed, laughing at my daughter's incredulity, \"and she birthed the first races, and with them, she passed on the urges the man had given her so that life could persevere. That is why you feel as you do, Diamond; it is your body telling you to make babies.\" \n\n\"Can I make my own babies?\" Diamond asked, reaching between her legs and trying to self-reproduce. \n\n\"No Sweetie,\" I said, gently guiding her hands away from herself, \"you and I have the pieces a man needs for the act, but not the organs required to plant seed.\"\n\n\"What?\" Diamond asked. I bit my lip, trying to figure out a way to explain testicles to my daughter. \"Then how did you make me?\" Diamond asked before I could.\n\n\"Passion was different than most women,\" I said. \"Passion was a spirit of the Life Giver, and not beholden to the laws of nature to create life. She just took a little bit of me, and made you.\"\n\n\"Oh,\" Diamond said, not sounding content with the answer, but seeming to accept it. I held her head closer to my breasts, and ran my hands through her cleaned hair. \n\n\"Sex is something people do in private,\" I told my daughter, \"it should only be done with people you care about, as its consequences can be drastic.\" \n\n\"Like making a baby?\" Diamond asked.\n\n\"Not just making a baby,\" I said, \"it's the physical expression of love, and sometimes, love can be very confusing. That's why you should only have sex with people you both love and trust.\" \n\n\"Like you?\" Diamond asked, looking up at me. I gulped. There was definitely more than innocent curiosity behind those emerald eyes.\n\n\"No, Diamond,\" I said carefully. \"I'm your mother, and you cannot lie with those of your own blood.\" \n\n\"Why not?\" Diamond asked, always so full of questions, not knowing or caring if they were proper. I loved her free spirit, but there were times I wished it wasn't quite so liberal. \n\n\"Because it's wrong,\" I whispered, knowing that would only bring more questions. I'd just told Diamond her seed could sire no children, so the biological ramification of incest wouldn't dissuade her. I didn't want to tell her that I thought the idea was disgusting. It wasn't that I thought Diamond was disgusting, far from it; the disgust I felt was for myself. Diamond was innocent, Diamond was nubile, and Diamond was beautiful. So beautiful, just like her mother. Thankfully, Diamond was also silent. She chewed on her lip, seeming to accept the idea, and I breathed a sigh of relief.\n\n\"Now, go to the river and bathe yourself,\" I said, gently pushing her off me, \"and next time you need to relieve your urges, find some place private.\" \n\nDiamond skipped away to the river, taking a second to stare unabashedly at Lucilla's naked form before continuing. Lucilla took the opportunity to watch her go; gawking as each olive cheek flexed in a jiggle from my daughter's backside. I saw her tongue run across her lips, and then dart shamefully between them when she saw my glower. I was about to get up and give my devoted lover a solid piece of my mind, when a voice stopped me. \n\n\"That was well done,\" Flora said softly from behind. I turned around sharply, not quite believing that'd I'd heard her. She walked away before I could reply, making for a secluded bend of the river. Flora hadn't spoken to me once on our five-day journey, and the hate behind her eyes told me she didn't intend to break her silence again. Her hateful look extended to everyone in our group, except for Diamond. When Flora looked at her, I saw a forlorn glint, almost nostalgic, but with more hurt. I didn't need to ask where it came from; Lucilla had told me about Willowbud. I watched the ex-arch-matriarch as she washed herself alone in the river, her youthful body disguising the world-weary ancientness that lived within it, and I prayed to god that I would never share her fate. \n\nDIAMOND \n\nMost of my time in Arbortus had been spent huddled in a canoe, staying silent lest colony scouts hear us. My world had been confined to the wooden edges of the watercraft during the day, and the rags of blankets during the night. Once we escaped the forest, I finally got to appreciate the world, and the world was amazing. The sky was infinite, the horizons were endless, and the fields were vast billowing waves of gold. I'd never imagined there could be so much space, and within each space, were millions of little wonders to explore. It seemed like every patch of earth had a new plant, insect, or animal that fascinated me, and Mom had to gently tug me away from the marvels, lest I spend all day sifting through the dirt. When I asked Mom questions, she answered me as best she could, but she didn't know as much as Mother had. That didn't bother me, because Mom encouraged me to seek my own answers, which made every question a little adventure. Today, Mom didn't like the adventures my questions were taking us on. \n\n\"Why do I like looking at Freydis's butt?\" I asked Mom, holding her hand in one of mine, and Aunt Lucilla's in the other. Ahead of us, Freydis adjusted her wings so that they concealed the leather-clad backside I had been admiring. \n\n\"Oh, damnit Sparkles!\" Aunt Lucilla laughed. \"You spoiled the show for all of us!\" \n\n\"The Good Mother has blessed you with both male and female gifts,\" Mom explained, a slight frown on her face. \"Your male side wants you to have sex with a female, and Freydis is a very attractive woman.\" \n\n\"Thank you, Your Holiness,\" Freydis said quietly ahead of us, not turning around. Mom's frown deepened.\n\n\"How many times do I have to tell you, Freydis? Call me 'Julia.'\" \n\n\"I am sorry... Julia,\" Freydis said, seeming to struggle with the name. \n\n\"But what is it about her butt that I like?\" I asked, my question still unanswered. \n\n\"It's thick and juicy,\" Aunt Lucilla sniggered as Freydis straightened her posture, uncomfortable with our analysis, \"and you want to know what it would feel like pressed against your crotch.\" \n\n\"Bound One, please,\" Freydis said, scowling from behind her shoulder, \"do not make me an object of desire. It discomforts me.\" \n\n\"Sorry Freydis,\" Aunt Lucilla called, though it didn't sound like she was, \"the forbidden fruit is always the most tempting, and you look so ripe from this angle.\" \n\n\"Lucilla, stop!\" Mom giggled as Freydis's cheeks turned scarlet. \n\n\"If it's my male side that likes looking at Freydis's butt,\" I said, inclining my head in confusion, \"then why do you like looking at it, Aunt Lucilla? You don't have a penis.\" \n\n\"Neither did your mom before Passion changed her,\" Lucilla smirked over me to Mom, \"but she was a muff-diver just the same. It's probably why she chose to join a convent in the first place.\"\n\n\"Not true,\" Mom smiled at Aunt Lucilla before I could ask what a 'muff-diver' was. \"I was always interested in men. It was during my days in the convent with no company but other women, that I developed a sinful curiosity for the fairer sex.\" \n\n\"So, women can want to have sex with other women?\" I asked, even more confused. \"How do they do that without a penis?\" \n\n\"I'll show you sometime,\" Aunt Lucilla said with a wink, making me feel funny again. \n\n\"No, she won't,\" Mom said sternly to Aunt Lucilla, who gave her an exaggerated frown. I didn't know why Mom disliked my attraction to Aunt Lucilla, but I didn't question her. Unlike Mother, there were some questions Mom didn't like to answer, which is why I didn't press her when she wouldn't explain why sex between her and I would be wrong. Still, I couldn't help but steal a couple of sidelong glances at her, and feel the funny stirring in my loins. Not just my male parts, but my female parts as well. Maybe Aunt Lucilla was right; maybe the forbidden fruit was the most tempting. \n\n\"Holy shit!\" Aunt Lucilla squealed, pulling me out of my contemplation. \"Is that a house? Oh, Sweet fucking Mother; civilization!\" \n\nAs we crested the hilltop, I saw strange shapes form in a valley. Mother had called them 'buildings' when I was in her womb, and they stood in violent contrast to the rest of the world. They were made of sharp angles, crude lines, and hard edges, and they jutted from the landscape with an unnaturalness that both disturbed and thrilled me. From their bowels, came the first humans I'd ever seen. I felt a jolt of excitement, and made to sprint over to them and introduce myself, but Mom and Aunt Lucilla stopped me before I could. \n\n\"What?\" I asked. \"Why can't I say 'hi?'\"\n\n\"Because they're strangers, Diamond,\" Mom said, \"and strangers can be dangerous.\" \n\n\"Dangerous?\" I asked, confused. \"Why would someone who doesn't know me be a danger to me?\" ",
        "\"Because you're a stranger,\" Mom said, \"and some people fear strangers, and when people get scared, they become dangerous.\"\n\n\"But they wouldn't be strangers if I introduced myself!\" I insisted, frustrated that Mom couldn't see the contradiction in her statement. \"Then no one would have to be scared!\" \n\n\"I don't think these are the kind of people who want to meet new people,\" Mom frowned, looking at the homogenous gentry, many of whom were staring at us. Flora suddenly turned from the path, and walked purposefully to the house Aunt Lucilla had spotted earlier. We stopped and watched her, and from the looks on Mom and Aunt Lucilla's faces, it was apparent that they were as confused as I was. I didn't know what houses were supposed to look like, but this one didn't look like it worked. Half the roof was missing, all the windows were broken, the door hung on its hinges, and the walls were blackened as though they'd been burnt. Flora examined the ruins for a moment, and then turned back, and walked toward us. \n\n\"Did you know the people who lived there?\" Mom asked her. Flora didn't say a word. Aunt Lucilla, Freydis and Mom exchanged glances as the nymph walked past them, and down to the valley. \n\n\"Towerhead,\" Aunt Lucilla read the sign as we stepped onto the road, \"what a wonderful shithole.\" \n\nLUCILLA \n\nThere was no doubt about it, Towerhead was a shithole. There were three kinds of rural towns: quaint villages, pleasant hamlets, and destitute cow-towns. Towerhead was the latter. There was a time when I would've looked upon the derelict farm houses and broken fences with disdain, but I was too starved of civilization to be anything but delighted at the taste of it. It was obvious that the humans of Towerhead rarely saw people of other races by the looks they gave us, and I suspected they would've done more than gawk were it not for the imposing figure of Freydis Skyborne. I was glad that the High Guard was drawing so much attention, because out of the five of us, she was the only one wearing proper clothes. Diamond, Julia and Flora wore the tatters of blankets and cloaks, and my garb barely concealed the glowing patterns that would've given me away. That was why our first stop on the road to Drastin, was an apparel shop.\n\n\"Lucilla,\" Julia sighed as she tried on an oversized robe, \"please don't dress my daughter like a whore.\" \n\n\"We're just experimenting with self-expression,\" I sniggered over to Julia from across the changing room. \"Don't worry, I won't let her walk outside in this.\" \n\nDiamond looked at herself in the mirror, testing the angles of her body. Her slender thighs were wrapped in fishnets, her supple glutes were crossed with garters, her thong did nothing to hide the coiled gift that bulged from the silk, and her brazier pushed everything high against her chest. \n\n\"So...?\" I grinned, grateful for an excuse to let my eyes consume every inch of the antlered-hermaphrodite. \"What do you think?\"\n\n\"I don't see the point,\" Diamond frowned, \"these clothes hold no practical purpose. I might as well be naked.\" \n\n\"You inherited your mother's fashion sense,\" I sighed, rolling my eyes to Julia as she smirked in the mirror. I walked behind Diamond, and rested my chin on her shoulder, looking at our mutual reflection. \"The purpose of women's clothes isn't to be practical, but to accentuate what we like about ourselves. The outfit a woman wears is how she wants the world to perceive her.\" \n\n\"So, an outfit is like a message to people I don't know?\" Diamond asked. \n\n\"Exactly,\" I smiled, \"and what do you think this outfit says about you?\" \n\n\"That I desire to be naked?\" Diamond asked, cocking her head in her signature gesture of confusion. \n\n\"That's certainly one interpretation,\" I chuckled, \"but these aren't the kind of clothes you actually take off.\" \n\n\"What do you mean?\" Diamond asked. \n\n\"You remember what your mom told you about sex, right?\" I grinned. Diamond smiled and nodded. \"Well,\" I continued, \"these are the kind of clothes you have sex in. So, what does this outfit say about you?\" \n\n\"That I am ready for sex!\" Diamond proclaimed loudly, overly-proud to have solved my riddle. I laughed into her shoulder, and even caught a glimpse of Julia trying to hide her smile. I didn't doubt that the old Julia would've been mortified that her hypothetical daughter was wearing lingerie, but Julia post-Passion did little more than give the barest glance of disapproval. It was just another change Passion had made that I begrudgingly had to admit I liked. \n\n\"That's right!\" I giggled. \"But your mother's correct, Sparkles; you look like a whore right now. Only whores are always ready for sex, and you're not a whore, are you?\" \n\n\"I don't know,\" Diamond grinned mischievously, \"do you think I would make a lot of money?\" \n\n\"Oh my god, you'd make a fortune!\" I chuckled as Julia scowled. \"You're the only kind of your species, you're packing two sets of weapons, you're drop-dead gorgeous, and you're a virgin. You are the very definition of 'exotic.'\" \n\n\"Remember what I told you about sex, Sweetie,\" Julia prompted her daughter as she stared pointedly at me. \n\n\"It should only be done with those you love and trust!\" Diamond proclaimed, happy to have a reason to show what she had learned. \n\n\"And whores don't love or trust the people they have sex with,\" Julia said. \"They trade their pleasure for money, and it is both unholy, and self-destructive.\" \n\n\"I don't actually want to be a whore,\" Diamond confessed, a bashful grin on her face, \"I just wanted to know how much money I was worth.\"\n\n\"You're priceless,\" I grinned endearingly as I handed Diamond a dress, \"now try this on.\" \n\nThe sundress fit Diamond beautifully, the yellow complimenting her olive complexion, the fabric loose, but well-fitting where it mattered. I tied her scarlet curls into a bow behind her pointed ears, tidying it about the base of her black antlers. \n\n\"What does this outfit say about me?\" Diamond asked, twirling in the mirror and laughing as the dress's skirt whipped past her thighs. \n\n\"The dress and the bow say that you're a good girl and a delightful bundle of fun,\" I smiled, \"but the stockings say that you have a dirty secret, and some lucky man or woman might get to find out what it is.\" \n\n\"My penis!\" Diamond laughed, clapping gleefully. \"That's the secret you're talking about, right, Aunt Lucilla?\" \n\n\"Sparkles, keep your voice down!\" I hissed through my laughter as Julia turned red beside us. \"There are other people in the store, and you won't get to keep your secret if you tell it to everyone!\" \n\nDiamond placed a conspiratorial finger on grinning her lips, and narrowed her eyes impishly as she tiptoed out of the changing room, where Freydis was waiting, pretending not to have heard everything she just did. I tossed the valkyrie some money to pay for Diamond's clothes, and then closed the door to see Julia looking pointedly at me on her stool. \n\n\"I don't mind that you're attracted to her,\" Julia said softly, \"but I wish you'd let her find herself in her own way. I know Diamond was born a grown woman, but she still has a lot of maturing to do.\" \n\n\"I'm just guiding her along,\" I replied carefully, \"you know I won't touch her without your blessing.\" \n\n\"Blessing,\" Julia snorted, slumping her shoulders as she looked in the mirror. \"The woman who used to give blessings and wear robes is gone. I feel like an imposter with these on.\"\n\n\"Do you want me to give you a little makeover?\" I grinned as Julia pulled off her robes. Julia smiled ruefully and nodded, and I guiltily revealed the outfit I had already picked for her. I wasn't the smartest woman, but I had a mind for fashion few others could match, and I knew exactly what Julia needed. The blouse exposed a modest amount of shoulder and midriff, but a vulgar amount of cleavage. Julia's pale sparkling complexion was bared where it would be the most effective, and her unnaturally-enlarged breasts were quite the asset. The pants hugged her glutes snugly, lifting and separating, while the inseam was generous enough to accommodate her manhood without drawing too much attention to it. Personally, I would've liked to let the thing bulge in all its glory, but I knew Julia was still very self-conscious about it. \n\n\"Well,\" I said, beaming over her shoulder, \"do you like it?\" \n\n\"I really shouldn't,\" Julia smiled guiltily, \"but it does look good on me, doesn't it?\" \n\n\"It's almost perfect,\" I whispered, pulling the item from my pocket, \"it's just missing one thing.\" \n\nI draped the golden chain about Julia's neck, and smiled at her widening eyes. The crescent symbol of the Holy Mother dangled from its center, and I grinned as it disappeared into her cleavage. I clasped the chain about her nape, and planted a tender kiss where the metal met. \n\n\"You'll always be Sister Julia to me,\" I whispered, holding her tightly from behind. Julia smiled tearfully, and let her head fall on her shoulder, locking gazes with me. Our lips connected below our closing eyes, and I tasted the sweet honey of her kiss for the first time in weeks. It was different now; more passionate, more aggressive, more... everything. I begrudgingly thanked Passion once again, and dripped like butter into the hedonism of my lover. There was a promise behind that kiss, and I grinned internally as I felt it pass between our sucking mouths. It doesn't really matter what kind of a woman you are, whether you're pious or agnostic, uptight or free-willed; if your lover gives you jewelry, you must reciprocate. I just didn't think she'd do it right there. Thank you, Passion; you dead wonderful old whore. \n\nJULIA \n\nLucilla's soft lips stoked the flame that I'd let dwindle, her tongue supplied the fuel, and her body set it ablaze. I didn't know how I'd gotten her pressed against the mirror, my trembling fingers tearing her white turtle neck from her body, her fumbling hands struggling with my belt as our lips smeared spit and lipstick across our devouring mouths. Our noses pressed beside each other and breathed with sharp desperate intakes as the fervency of our kiss grew, only broken so that I could rip Lucilla's shirt from her neck. Her fine platinum hair tangled in disheveled strands with the forcefulness of the pull, and her breasts jiggled delightfully from their release. The fiery patterns that tattooed her were bright with my desire, illuminating from her and thrumming with anticipation. She finally managed to rip my belt away, and I shoved my pants down as her fingers ripped my blouse along the seam, sending buttons clattering to the floor as my bust burst from the torn cloth. \n\n\"Oh, god I need it!\" Lucilla breathed desperately, her eyes pleading as her hands wrapped around me. \"I need it right now!\" \n\nI needed it even worse. I was shaking with the desire, my motions forceful and violent, my patience gone. I grabbed Lucilla by the succulent meat of her thighs, beneath her skirt and above her high stockings, pulled one leg up, and pushed between them. My raging rigid heat found wet soft warmth. Her moist petals gave way to my advance, her lewd lips stretched inwardly as I penetrated, and her tight sheath welcomed me into her with slickening nectar and sucking muscles. Our pelvises met, our breasts flattened together, and our mouths moaned a mutual tone of satisfaction. I slowly sunk the last few inches I had through her tightness, and felt Lucilla's thighs quiver around me as I touched her bottom. \n\n\"Holy shit!\" Lucilla cried, eyes wide in wonderous pleasure, lips gaping in a pink oval. \"Julia, you're so fucking deep!\" \n\n\"Shh!\" I hissed, trying to contain my own exaltation. \"There are people right outside!\" \n\n\"I know,\" Lucilla grinned an open-mouthed smile, \"maybe they'll complain to the manager.\" \n\n\"You'd like that, wouldn't you?\" I smiled. \n\n\"You'll just have to think of a way to shut me up,\" Lucilla smirked. \n\nLucilla's stifled screams wetted against my palm as I rammed into her, unable to be gentle, possessed by an animalism that flowed through every vein. Lucilla welcomed my ferocity; locking her heels together behind my hips, sinking her fingers into my rippling glutes and giving me an encouraging squeeze. Her eyes were wide above my pressing hand, her breasts pillowed against mine and slickened with sweat, her ass deformed against the mirror behind her, creating flat circles of flesh that squeaked as they slid up and down, wet with the secretion that ran down her taint. Her body lurched upward with each thrust, accompanied by a suppressed squeal of delight and an internal spasm that seemed to suck me deeper into her. Her weak feminine tones goaded my new masculinity, and I growled with avarice as I pressed and thrusted harder, compelled by some instinct to break this woman in two. \n\nThe violence of my motions increased, and Lucilla's sapphire eyes began to lose focus, lolling in their sockets. The muffled tones that she exalted against my pressing hand weren't squeals and cries, but guttural, gasping sounds. I couldn't keep my own sounds from filtering through. Aggressive growls burned past my lips; tones seeped in masculine lust but expelled with a female pitch. Lucilla released her grip on my driving ass and cupped my flattened breasts. She changed the tenor of my cries with a lecherous squeeze, and milk flowed from my nipples as weak femininity flowed from my red lips. I stumbled backward at the feeling, and barely caught myself on the stool before tumbling to the floor. Lucilla's eyes regained their focus, and they grinned playfully at me. She squeezed harder, and I screamed in abject delight as spurts of white life shot from me and dribbled onto her naked breasts, wetting our bodies as they shifted together. \n\n\"Lucilla, stop!\" I begged, not meaning the words I was saying. She knew it. She pulled my cupping hand from her mouth, and wrapped her lush pink lips around a nipple, her eyes gleaming up at me as she drank. I sobbed gratefully and surrendered to her, letting her feed from my breast as I defiled her with my hips. Our lust became a sinuous dance upon the stool; Lucilla straddled atop me, her hips grinding behind her, one cheek raising while the other fell, her slit stirring around my driving cock. I shifted with her; driving between her legs in contest with her deep grinds, hooking my hands onto the crossbars of the stool and leaning back, letting my head fall behind my shoulders as I balanced us. I struggled to keep my weight centered as Lucilla did everything she could to sabotage our position. She sucked harder from my breasts, swallowing my nectar as her hands moved down, caressing fingertips along the clenched rises of my abdomen before trailing across my thrusting hips, and beneath the site of our depravity. I gasped when I felt a finger pushed through my moist folds, and growled when I felt another enter my ass. Lucilla gave me a playful wink as she toyed with me from the inside, controlling me like a puppeteer, making my body do as she pleased while she straddled me. I thrusted by the beckoning of her fingers, moaned by the command of her consuming slit, arched my back by the compulsion of her sucking lips. I indulged in her lustful slavery until I couldn't control the reactions of my body, and the balancing act became a spectacle of controlled falling. \n\nLucilla's fingers tore from my holes as we rolled onto the floor, tumbling in a blur of platinum and crimson hair. I ended up on top, and I grinned into Lucilla's eyes as my body weight suppressed her. She grinned back; 'do your worst,' the look seemed to say. I did. Each violent thrust sent a spasm through Lucilla, compelling her posture to stiffen beneath me, and her grip on my ass to tighten. I felt her depths churning with the precursor of her ascension, spasming sporadically, each convulsion more violent than the last, each internal expulsion translated through her external reactions. She writhed uncontrollably, her hips gyrating in congruence with my drives, her breasts squishing and smearing sweat and milk across our glistening alabaster busts, her belly clenching and spasming against mine. Pleading desperate sounds rose with each of her gasping breaths, her face flushing with her effort and ascension, her complexion gleaming and mingling with the sweat of my own. Our bodies slickened against one another, moving with greater fervency, shifting up and down as we exalted through gritted teeth. Her eyes bulged in their sockets, her sapphire irises rolled into her head, and she panted her exhilarating climax against me, her heart thundering and her diaphragm heaving. She bucked and twisted as though trying to escape the euphoria that was taking her, and then she tensed in a toe-curling, leg-trembling release, her song ringing clear and true, echoing throughout the shop. \n\nDIAMOND \n\nEveryone in the store was staring with slackened jaws at the door Freydis, Flora and I loitered next to. Aunt Lucilla's delighted shrieks accompanied Mom's exerted tones, punctuated by the sounds of flesh smacking on flesh. I grinned up at Freydis. \n\n\"Hey Freydis,\" I smiled, biting my lip, struggling to keep my laughter to myself, \"guess what they're doing in there?\" \n\n\"I can't imagine,\" Freydis said dryly, her jaw working in the tell-tale sign that she was uncomfortable. I leaned toward her, and cupped my hand over my lips. \n\n\"They're having sex!\" I giggled through my whisper. Freydis rolled her eyes, and then narrowed them as a man approached. He looked angry, his bald head as red as his face, his fists clenched. \n\n\"What is the meaning of this?\" the man demanded. \"This is a godly town, and you heathens can't just come in here and sully\u2014\"\n\nThe changing room door opened a crack, and four gold pieces flew from its threshold before it slammed shut, silencing the man. The man picked the coins up, tested one with his teeth, then smiled companionably to Freydis, and walked away. \n\n\"Is that man a whore?\" I asked Freydis. She raised an eyebrow at me. \n\n\"No, he's the shopkeeper,\" Freydis said as the man assumed an apologetic posture to his mortified customers. \n\n\"But Aunt Lucilla just gave him money so that she could have sex,\" I said, cocking my head, \"so doesn't that make him a whore?\" \n\n\"That's an interesting question,\" Freydis said, crossing her arms and frowning in contemplation. \"In my land, money holds no value; it is honor that binds our people. In this land, the gentry claim godliness to be their priority, but it is jettisoned for a pittance of wealth. This man sold his values for coin, and that either means his values weren't dearly held, or that he is a whore, as you say. It's a question for the philosophers, I suppose.\"\n\n\"Oh, you didn't come?\" Aunt Lucilla's voice filtered through the door, its tenor dripping with grateful satisfaction. \"You're still so fucking hard for me, babe; do you want to stick it in my asshole?\" \n\nFreydis stiffened next to me, and the jaws of the customers dropped even lower, their eyes bulging, none of them even attempting the pretense of shopping. I frowned. \n\n\"Hey, that's not how you do it!\" I exclaimed to Freydis. \"Mom told me the penis goes into the vagina. Someone needs to tell Aunt Lucilla that she's doing it wrong. Aunt Lucilla! Aunt Lucilla!\" I knocked on the door, \"That's not where you're supposed to put the penis!\" \n\nLUCILLA \n\n\"Oh, Good Mother!\" Julia hissed, her swollen cock bulging in my neck. \"Diamond has been listening to us the whole time!\" \n\nI honestly couldn't've given a smaller shit who was listening. I was in a fugue state of post-orgasmic bliss, kneeling at the altar of my lover, worshipping her cock like it deserved to be worshipped. I tasted my pussy on her shaft as my lips sucked with sensual avarice, my eyes staring half-lucidly up at Julia, full of unconditional adoration. \n\n\"Lucilla?\" Julia asked, pulling her shaft from my mouth. I instinctively followed it as it receded, and Julia had to put her hand on my forehead to keep from crawling after it. ",
        "\"Freydis,\" I called to the door, more than a little annoyed that a penis wasn't currently inside me, \"please escort Diamond from the premises.\" \n\nThere was the sound of someone being picked up against their will, and Diamond's voice fading with Freydis's footsteps. \"But Aunt Lucilla, you can't have sex with your butt! It's against the rules!\" \n\n\"She still has so much to learn,\" I sighed as I grasped for Julia's throbbing member. \"I can't wait to teach her everything.\" \n\n\"We just had this talk,\" Julia frowned, keeping her hand pressed to my forehead. \"Let her figure things out for herself.\" \n\n\"One of these days, Diamond is going to ask me for it,\" I said, stubbornly reaching for Julia's member, \"and I won't be able to deny her.\"\n\n\"You will,\" Julia said, grabbing my hand before it could find its target, \"because you're her adoptive mother, and children don't have sex with their mothers.\" \n\n\"I don't think Diamond got the memo,\" I smirked. \"I'm not the only one she's been looking at.\" \n\n\"What are you talking about?\" Julia hissed, a touch of anger in her voice. The anger excited me. \n\n\"Oh, she's subtle when it comes to you,\" I smiled slyly, scooching forward on my knees, anticipating the punishment. \"She knows you think it's wrong, but she can't help herself. An errant glance here, a sneaky peek there, a little snake-eyes. Diamond's not exactly the most patient girl; I wonder how long it will take before she asks you for it.\" I winked at her. \"I wonder if you'll be able to deny her?\" \n\nI was just teasing, trying to get a rise out of Julia, but by the aghast look that paled her apple cheeks, I realized I'd accidentally struck gold. \n\n\"Oh, no,\" I whispered, an astonished grin broadening across my face. \"Oh, Julia...\" \n\n\"It's not... I'm not... you don't...\" Julia's emerald eyes bulged, her cheeks flushed, her lips trembled. \n\n\"Oh, sweet Mother,\" I chuckled, scooching through Julia's felled defenses, and wrapping a cool hand around her stiff cock, \"the pious, holy, Sister Julia wants to fuck her own daughter!\" \n\n\"No, I don't!\" \n\n\"Nuns make terrible liars, Julia,\" I whispered through my smile as I stroked her, savoring the combination of shame, horror and arousal that etched her face, \"you don't have the practice. I always knew you were secretly depraved, but I never thought you would stoop this low.\" \n\n\"I'm just confused!\" Julia insisted desperately, a slight moan mingling with her denial. \"It's Passion; she did this to me! I don't want this!\" \n\n\"I don't think that's true,\" I chuckled, relishing every bump and vein my palm caressed. \"I think you know exactly what you want.\" \n\n\"Shut up!\" Julia snapped, \"You... you just... you just...\"\n\n\"...I just what?\" I smiled, teasing her tip with my tongue, tasting the froth that bubbled from her. \n\n\"You just keep your whore-mouth shut, you cunt!\" Julia snarled, and forced herself all the way down my neck. Perfect. \n\nI gagged and sputtered, gurgled and wretched as Julia's bejeweled shaft burrowed into my throat. Saliva and cum oozed from my lips, dripped down my chin and onto my breasts, still wet with Julia's milk. My eyes filmed with tears as I swallowed desperately around my lover, my vision blurring her portrait of anger and desire. She drove my face into her pelvis, spit smearing against her base, my nose pressing into her loins, making me smell the sweet stink of her. I sank my fingers into her succulent ass and tried to pull her deeper, staring up at her from my tear-filled eyes as I hummed my tone of masochistic approval. Julia sneered down at me and ripped my head back, her hand tangled in my platinum strands. She was so aggressive now, so virile and dominant. Not at all like the demure lover I had known before. Thank you, Passion; you dead cunt. \n\n\"Is this what you want to do to Diamond?\" I laughed as Julia pressed me against the mirror; bent-over with my legs splayed, my back arched, my skirt hiked past my hips and my stockings clinging to my bulging thighs. \n\n\"Shut the fuck up, Lucilla!\" Julia snarled, slapping me hard across the ass. I yelped my delight, my face pressing to the glass, my hands reaching back to spread myself, my teeth biting my excited smile. I loved it when Julia swore; it meant she lost control. \n\n\"I'm not Lucilla,\" I grinned, \"my name's Diamond, and I want Mommy to fuck my little virgin asshole!\" \n\nJulia pressed her tip to my winking aperture and drove all the way to her pelvis, giving me no chance to prepare. I screamed in pain and pleasure as her shaft separated my anal walls, viciously uncoiling my channel and stretching my rim wide as she plunged all the way to my gripping bottom. She grabbed two handfuls of hair and pulled my head back, forcing my spine into a painful arch of concavity, my breasts flattening against the glass, my pussy dripping its gratitude between my legs. \n\n\"Oh, god!\" I cried, \"Diamond absolutely loves it when you do this to her!\" \n\nJulia drove my head against the mirror, squishing my face to my own reflection as she jackhammered her way into my rectum, my tight rim clinging to her as she exited, stretching my pelvic floor into a fleshy tent and sending searing pleasure down my ruined taint. She touched the deepest reaches of me, pushing against my pussy from the other side, electrifying every sensitive nerve within. I stared at my marred reflection; my bulging eyes glistening with tears, smeared mascara and lipstick, pale lips gaping to an oval as they cried with every thrust. My breath fogged my reflection from view as my expirations became desperate pants, my lungs burning as my heart thundered. \n\n\"You're baby girl's a little anal whore, Julia!\" I screamed, goading her into more. \"Look how she bends for you!\" \n\n\"Shut the fuck up!\" Julia growled, ripping me from the mirror with surprising strength. Before I knew it, Julia's foot was pressing my face into the floor, my breasts were flattening against the planks, and my ass was high in the air, spread and vulnerable, taking every inch of Julia's driving length without obstruction. I squealed my delight, clawing at the wood, simultaneously struggling to escape the pain as I arched my back to take the pleasure. Julia had successfully stripped my ability to speak, but I didn't need to say anymore; I'd gotten exactly what I wanted. \n\nJulia bent me backwards as she impaled me, my thighs perpendicular to the floor, my abused ass almost in line with the back of my head. Her palm slapped viciously across my glutes, reddening the jiggling flesh and mixing the stings of her impact with the ruinous pleasure of her penetration. My ass gripped her as she pulled, the skin around my anus stretching with searing pleasure and then indenting vulgarly as she pushed all the way, my pelvic floor deepening my crack, her cock bursting through my resistances and forcing me to envelope her. I sobbed onto the floor, helpless to the woman's brutality, a slave to every motion she made. My second orgasm came, greater than the one before, spurred by violence and malice, unyielding in its intensity. I sputtered and screamed into the planks, thrashing uselessly beneath her, my mind melting in the heat of it, going insane with the euphoria. Julia gasped and cried, taken by the tightness that sucked her into me, gritting her teeth as I clenched my anus around her. She screamed with me and erupted into my depths, our bodies tensing in an ecstatic paralysis, my legs quivering uncontrollably, my spine wracked with shivers. Our static intensity lasted for a wonderful, tortuous moment, then receded when the release washed over us. Julia collapsed atop me as she poured the last of herself into my ass, and I collapsed like a folding chair beneath her weight, all the strength sapped of me. \n\n\"Oh shit,\" I panted when words came back to me, \"Passion really taught you how to use that thing.\" \n\n\"Passion also laid with her sons and daughters,\" Julia breathed on top of me, her body seeping its warmth into my back, \"and I don't wish to emulate her.\" \n\n\"I won't tell Diamond,\" I promised, turning my head to face Julia, \"but I don't think you should deny her, or yourself.\" \n\n\"Are you actually encouraging me to have sex with my daughter?\" Julia panted. \n\n\"Yes,\" I grinned back, \"I really want to watch a pair of hermaphrodites shamefully indulge in incest.\" \n\n\"You're such a twisted person.\" \n\n\"You already knew that,\" I smirked back, clenching my glutes around her still-hard cock. \"That's why you love me.\" \n\n\"I'm afraid I can't fulfill your fantasy,\" Julia sighed as she got off me, her cock sliding slickly from my ruined gape. \"I still have some pride. These feelings I have will fade the further I get from Passion's influence, and Diamond's curiosity will be sated by others besides you or I.\" \n\n\"Seems a shame,\" I said sadly as I turned around, and rested my head in Julia's lap, \"it would have made us all so much closer.\" \n\n\"I want Diamond to go off on her own someday,\" Julia sighed, leaning back as I nuzzled my face between her legs. \"She doesn't need to be shackled to a perverse relationship with her mother.\" \n\n\"You make it sound like we're old women,\" I laughed, then licked Julia from base to tip, tasting the delicious tang of my ass on her shaft. \"Diamond was born our age, Julia; she looks more like your sister than your daughter.\" \n\n\"And that makes it better?\" Julia laughed, moaning slightly, \"You know it's horribly wrong.\" \n\n\"I won't push it,\" I said, \"but I think you should consider what Diamond might actually want, and not what you think she should.\" \n\nI let Julia stew on that thought as my lips wrapped around her, and I cleaned her like a dutiful wife; gently sucking her dirty shaft until it pulsed to eruption. She came a third time, pouring her seed into my mouth to a chorus of gentle gasps, her pale abdomen clenching in contrast with her languid posture. I smiled at her as she leaked from my lips, and she smiled back, bringing our mouths together, and passing her cum between our tongues. God, she was so different now. So different in some ways, but still the same in others. Her face was the color of her hair as we shamefully walked from the changing room to the gawking eyes of the shop's customers. They didn't know they were in the presence of divinity, and by the blush of Julia's cheeks, she didn't seem to think they were. I paid for the items with all the royal dignity I could muster, added a generous tip, and then we sprinted out of the shop like little girls, giggling uncontrollably. \n\nJULIA\n\n\"But that's where your poop comes out!\" Diamond laughed at Lucilla. I stubbornly kept my eyes fixed on the road, knowing without a doubt that Lucilla was trying to catch my embarrassed gaze with her mocking glance. \n\n\"Sex is dirty,\" Lucilla chuckled, holding hands with my daughter, their fingers interlaced, \"and the dirtier it is, the better. If god didn't want us to play with our buttholes, she wouldn't have made it feel so good.\" \n\n\"But... poop!\" Diamond yelled, unable to wrap her head around it, \"How do you... why would you...? Mom, did you get Aunt Lucilla's poop on your penis?\" \n\n\"I'm not an animal, Sparkles; I practice proper hygiene!\" Lucilla exclaimed loudly as my face stung with mortification. I pointedly avoided the gazes of the Towerhead's pedestrians as they turned their attention toward my boisterous daughter and my shameless lover. \n\n\"There is no amount of proper hygiene that makes your butthole clean!\" Diamond insisted. \"It's like trying to scrub mud.\" \n\n\"Au contraire, my dearest adoptive daughter,\" Lucilla chuckled. \"I'll have you know that my butthole is so clean, that after your mother was done with it, I sucked her\u2014\" \n\n\"Beautiful sunset tonight, huh Freydis?\" I yelled to the valkyrie, who was standing right next to me. \n\n\"Absolutely gorgeous!\" Freydis yelled back, clearly as uncomfortable with the conversation I was. \n\n\"Excuse me?\" a small voice asked from behind us. We all turned around to see a boy of about seven, his hands held shyly behind his back. He looked up at Freydis, his expression almost worshipful. \n\n\"Are you Angel?\" he asked, and then held out a scrap of paper and a quill. \"Can I get your autograph?\" \n\n\"No,\" Freydis replied, frowning at the boy. He cowered before her, mumbled something, and then scampered down the road, where a group of other boys were watching Freydis with awe-struck eyes. \n\n\"What was that about?\" Lucilla asked Freydis. \n\n\"I don't know,\" Freydis shrugged, \"but it's not the first time someone in Towerhead has asked me if I'm an angel. The tailor offered me a discount because he thought I was an angel, a man propositioned me because he thought I was an angel, and a caravanner told me he made a hundred bucks off me.\" \n\n\"What?\" I asked, more confused than before. \n\n\"That's what I said,\" Freydis nodded, \"though I didn't know mythical creatures of the maternal afterlife produced deer by the hundreds; you'll have to read me that tale from your bible.\" \n\n\"Hold on,\" Lucilla frowned, seeming to form a hypothesis. She walked over to a nearby vendor, bought a tabloid, and walked back to us as she flipped through it. She stopped dead in her tracks in the middle of the road, and gaped as she slowly turned to the pages. \n\n\"What is it?\" I called after her. Lucilla's eyes darted to me, and then to Freydis. She promptly dropped the newspaper in the street, stomped it into a pile of horse manure, and walked to us. \n\n\"Just tabloid trash,\" Lucilla said, taking my arm, \"gossip, rumors and the like; the same kind of shit that used to follow me around back home.\" \n\n\"If I remember correctly, most of those rumors about you were spot-on,\" I smirked at Lucilla, \"and you used to relish reading them. What changed?\" \n\n\"I lost the taste for them,\" Lucilla grimaced, realizing I'd caught her lie. She put her hand on my shoulder and guided me to stop, letting Freydis walk out of earshot. \n\n\"What is it?\" I whispered, \"Why does everyone seem to recognize Freydis?\" \n\n\"It looks like Flora was right about Freydis's daughter,\" Lucilla whispered back, \"she didn't find the Earth Former.\" \n\n\"What do you mean?\" I asked. Lucilla looked over her shoulder, seeing that Freydis had stopped and was waiting for us with her hands resting impatiently on her hips. \n\n\"The reason everyone thinks Freydis is this 'Angel' person,\" Lucilla whispered, \"is because there's a valkyrie in Drastin who goes by the name of 'Angel.' Do you know about the Pit?\" \n\n\"Yes,\" I replied, shuddering silently at the thought of that sinful place. I would be giving the infamous arena a wide berth once we got to Drastin. \n\n\"Well, this Angel is supposed to be the next big thing,\" Lucilla said. \"I mean, she was on every page of that tabloid. What she's wearing, what she's eating, who she's fucking...\" \n\n\"Who she's fu... having sex with?\" I hissed. \"Valkyries don't sleep around!\" \n\n\"Well, this one does,\" Lucilla grinned. \"Not only does this 'Angel' fight in the Pit, but she performs daily sex acts in a brothel, and not the vanilla kind. Oh, goddamn it; you just have to see.\" Lucilla looked over her shoulder and called to the frustrated valkyrie, \"Freydis, hold up a second, Ok?\" \n\nLucilla rushed over to the newspaper booth and procured another copy, before excitedly running back over to me. The audacity Lucilla had to pretend she didn't care about celebrity gossip was laughable; she lived for it. \n\n\"Ok, full disclosure, I didn't want you to see this before because you're on the cover,\" Lucilla whispered excitedly. She showed me the illustration, and it was blessedly erroneous. I took the leaflet from her and paged through the articles about me, frowning at the inaccuracies and gasping at some of the claims. Apparently, I was an assassin sent from an underworld cult of religious fanatics. I duel-wielded a set of holy staffs, wore the skimpiest nun's habit ever conceived by a sexually-frustrated illustrator, performed exorcisms before I murdered my victims, and was on a mission to purge the elven aristocracy for killing my parents. There wasn't anything about my exploits in Arbortus, though I doubted many people in the world knew about Passion, or her womb. \n\n\"Yeah, I like their story better,\" Lucilla sniggered at me, \"though the drawing's a little off. I think it's missing something...\" \n\nI glowered at Lucilla, and she hurriedly turned the pages to the sections about Angel. There was no doubt about it; that was Freydis's daughter. Clearly, someone had a lot of time to draw Astrid, and not in flattering positions. I didn't know tabloids doubled as hardcore-porno mags in Drastin, but apparently, they did. I instinctively covered Diamond's eyes as she peered over my shoulder, and I flipped to the next page. \n\n\"That's her manager, 'Night Eyes,'\" Lucilla said, pointing to the portrait of the white-haired nymph, her eyes black like Passion's, \"and they call that woman, 'Death Kiss,'\" she said, pointing to the succubus. \n\n\"What?!\" a voice hissed from behind us. We turned around to see Flora's face twisted in alarm. \"Did you say, 'Death Kiss?'\" \n\n\"Yeah,\" Lucilla said, raising an eyebrow as she handed Flora the tabloid, \"you know her?\" \n\nFlora didn't answer, because Flora almost fainted. Her green complexion grew ashen, her lips quivered, and her hands trembled as though stricken with a palsy. Her bulging eyes filled with tears, and leaked saline droplets onto the paper as her lenses scanned the words. \n\n\"Flora?\" I asked, bending down to peer at her horrified face. \"Are you alright?\" \n\nHer head snapped up, her face changing violently to an expression of manic joy. \n\n\"Tera has her!\" she screamed. \"By the Giver, Tera has her!\" \n\nIn a blur of speed that shocked me, Flora turned heel and sprinted right for Freydis. Lucilla groaned and darted after the nymph, but bless her soul, Lucilla was no athlete. Flora outpaced the elf, ran into Freydis, and opened the tabloid. I didn't have to be a fortune teller to know what was going to happen next. Freydis snatched the magazine, brought it to within an inch of her face, widened her eyes, grabbed Flora, and then launched into the air with a mighty flap of her wings. They shrank to a dot against the blue sky, Freydis's white span catching the sun and glinting onto the eyes of the gawking spectators.\n\n\"Did I miss something?\" Diamond asked. \n\n\"I guess we both did,\" I said, gaping at the empty sky where they just were, and then to my flustered lover, \"what was that about?\" \n\n\"The fuck if I know,\" Lucilla grumbled, \"something about 'Tera,' whoever that is; crazy old bitch. You should've swallowed your pride and let Freydis swear her vows to you.\" \n\n\"Freydis owes me nothing,\" I said, \"if she wants to leave, she can. Her daughter's wellbeing is much more important than acting as a chaperone for us.\" \n\n\"She was deterrent for harassment,\" Lucilla frowned, eyes darting to the sides. \"In case you hadn't noticed, the wonderful people of Towerhead don't exactly like us.\"\n\nI looked around, and saw that the gawking stares the citizenry had reserved for Freydis, were now hostile glares directed at the three of us. They came from windows and thresholds, booths and foyers. The came from the dirty faces of the men who worked, the plump face of the women who washed, and the shiny faces of the boys who had asked for Freydis's signature. The wind could be heard clearly through the town now, playing across creaking doors and rusty hinges, whistling a tense warning. I felt my hair stand on the back of my neck, and my blood began to heat, readying me for what might come. \n\n\"Mom?\" Diamond asked. \"Why is everyone staring at us?\" \n\n\"I don't know, Diamond,\" I said, pulling her to my waist, \"but we're not staying around to find out.\" \n\n\"There's an inn a mile outside town,\" Lucilla said, nervously glancing around. \"I think we'll go there.\" ",
        "DIAMOND \n\nThe innkeeper was a dwarf, and I instantly liked him. Bald, green-eyed and grey-bearded, he smiled with a face full of kindly wrinkles, and spoke with a thickly-accented voice that sounded like it belonged to a giant, though he barely stood above the counter even on his stool. \n\n\"Well aren't you three the prettiest things east of Drastin!\" he laughed when we entered. \"Come in, come in!' \n\nThe three of us were the only ones in the inn, save for the dwarf and a wash boy. Aunt Lucilla plopped onto a stool, sighing exhaustedly as Mom sat beside her, and I took my place on her other side. \n\n\"You Miss, look like the type who knows her wine!\" the old dwarf chuckled to Aunt Lucilla. \"Try this vintage on the house, and tell me it ain't the best thing you've had west of Terondia!\" \n\n\"Why, thank you,\" Aunt Lucilla grinned at the dwarf, taking the glass. \"It's nice to see someone in Drastinar knows how to treat guests.\" \n\n\"Oh, don't think me too charitable,\" the dwarf winked. \"Women who know their wine have the coin to gain that knowledge, and the best vintage west of Terondia is whatever the hell I've got behind the counter!\" \n\nAunt Lucilla and Mom laughed at that, but I didn't get the joke. Still, their laughter made me laugh. \n\n\"You sir, stick out like a sore thumb in this town,\" Aunt Lucilla smiled. \"What's a man like you doing in a drab place like this?\"\n\n\"Now don't go bad-mouthing the honest folk of Towerhead,\" the innkeeper scolded, though he was still smiling. \"They're good folk, and they've tolerated me well enough.\" \n\n\"They didn't seem like very good folk,\" I said, happy to have an excuse to use the word 'folk,' \"they seemed mean.\" \n\n\"Nah, they're just wary of outsiders, especially those of different stock,\" the dwarf said. \"They had something of a tragedy involving a succubus and a young boy recently, and now they're even more protective of their way of life.\" \n\n\"That succubus wouldn't happened to be named 'Tera,' would it?\" Aunt Lucilla asked. \n\n\"The very same,\" the dwarf said. \"Of course, now she goes by the name of 'Death Kiss,' and fights in the Pit. Rubs folk the wrong way, seeing her in the papers. The Sorenson's got a letter from their boy saying he was in debt to slavers, and he disappeared around the same time Tera did. Didn't take much conjecture to put two-and-two together to figure Tera got him roped into some kind of scheme. She's involved with Night Eyes, and no good's ever come from dealings with that killer.\" \n\n\"That explains why everyone gave us a death-stare when Flora mentioned Tera,\" Mom said to Aunt Lucilla. \"How she knows a succubus ring-fighter is beyond me.\" \n\n\"If your smart, you'll keep that woman's name in the back of your mouth,\" the dwarf said quietly. \"The folk here are good folk, but Good Mother knows Tera might as well be the devil to 'em.\"\n\n\"A dwarf following the Maternal Path?\" Mom asked incredulously, smiling at the old man. \"Did I just hear that right?\" \n\n\"It's not too uncommon,\" the dwarf said. \"Judging by the hue of your hair, Miss, I'd say someone in your lineage was a bit short of stature, and judging by the necklace you're wearing, I'd say he may have followed the path himself.\" He looked at Mom with a twinkle in his eye, \"But judging by the amount of chest you're showing, I'm betting that necklace is mostly just for show, ain't it?\" \n\n\"Now, Mister!\" Mom said, gaping with smiling indignation. \"I'll have you know that I was once a sister of the Maternal Order, and on my path to matronage!\" \n\n\"And somewhere along the path, a tight-fitting turtleneck got in your way,\" the old man said slyly, winking at Aunt Lucilla, \"and suddenly chastity didn't seem like such a great destination.\" \n\n\"It's like you've known us for years,\" Aunt Lucilla laughed, and then extended her hand. \"I'm Lucy, this is Jules, and this Diamond.\" Lucilla said, altering their names, but keeping mine the same. I was about to ask why she did that, but Mom's squeeze on my knee told me to keep quiet. \n\n\"Jules and Diamond, eh?\" the dwarf chuckled, extending his hand to Mom, and then myself. \"Aptly-named women! I've got to ask, before my curiosity kills me; what exactly are you, Diamond?\" \n\n\"I'm half-nymph, half-elf!\" I proclaimed proudly. \n\n\"Now, I'm no biologist,\" the old man smiled, \"but from my understanding, a mixture of nymph and elf yields a dawn-elf, not an antlered young beauty such as yourself.\" \n\n\"My sister is a bit of an anomaly,\" Mom grinned back, squeezing my knee again, \"but that's what happens when your father is an incubus.\" \n\n\"Ah, say no more, say no more!\" the old man laughed. \"I've traveled the world and seen many-a-wonder, and none so unique as the mishap offspring of shape-shifters. Why, I once met a lad without a finger on his hand, but he was still the most popular woman's masseuse in Glendinar, if you catch my drift?\" \n\n\"I think we follow,\" Mom chuckled as I looked inquisitively to Aunt Lucilla. She explained the joke with a rude gesture, and I giggled delightedly once I made the connection. \n\n\"So, what's a fine trio of ladies such as yourselves doing in Towerhead?\" the old man asked. \n\n\"We're on our way to Drastin, of course,\" Aunt Lucilla laughed. \"You honestly don't think Towerhead is our destination?\" \n\n\"I don't know, there's a fine lot of things to do in Towerhead,\" the dwarf smiled slyly. \"Why, it's the number-one suicide destination in all of Drastinar!\" \n\n\"They certainly take great pains to cultivate the proper atmosphere,\" Mom laughed. \"What's your name, inn keeper?\" \n\n\"Most people just call me 'Arby,'\" Arby said, \"so, Arby will do fine for ya, as far as names go.\" \n\n\"It's a pleasure to meet you, Arby,\" Aunt Lucilla smiled, \"and if your beds are as wonderful as your company, I'm sure our money will be well spent.\" \n\n\"The beds are hard as rocks and the draft will turn your nipples to spearpoints!\" Arby laughed, slamming a bottle of whisky onto the counter. \"But the liquor's cheap as sand and the beds are even cheaper!\" \n\n\"Your advertising is superb!\" Mom laughed, \"How are you still in business?\" \n\n\"I have a great slogan,\" Arby chuckled, pouring the whisky into four small glasses, \"it goes: 'The Towerhead Inn; this is the only inn in Towerhead.'\" \n\n\"How can anyone refuse such hospitality?\" Aunt Lucilla giggled as she took a shot in her hand, \n\n\"You'd be surprised,\" Arby chuckled as he slid a glass to Mom. \"I've had many customers choose the stables after five minutes with me.\"\n\n\"But you're such a charmer!\" Aunt Lucilla exclaimed, drinking all the liquor in one gulp and then wiping her lips.\n\n\"You've only been here three minutes,\" the wash boy chuckled as he mopped the floor. \"Arby's still got two more to drive you away.\" \n\n\"Oh, blow it out your ass, Nate!\" Arby yelled with a smile. \n\n\"You better not let Arby serve you his soup,\" Nate grinned at us, \"or that's exactly what you'll be doing.\" \n\n\"Gross!\" I giggled, and somehow found myself sharing a smile with Nate. Something about him made me feel funny, like how Mom made me feel. He was tan, dark-haired, and slender, and my eyes seemed to wander on their own to his hands as they gripped the mop, his forearms with veins standing proudly, his dark eyes that seemed to tease. I grew suddenly hot in the face, and experienced the conflicting desires to both turn away and keep smiling. Nate must have been feeling the same, because his eyes darted downward, and his cheeks grew rosy as his adam's apple rose in a swallow. \n\n\"Yes, Nate has a fine way of talking to the ladies,\" Arby chuckled, sliding me a glass of whisky. \"It's amazing he hasn't found a girlfriend yet.\" \n\n\"No, Diamond,\" Mom said, laying a hand on mine before I drank. \n\n\"Why not?\" I asked, frowning. \n\n\"Yeah,\" Aunt Lucilla said as she downed another shot, \"what are you Jules, her mom?\" \n\n\"The booze is cheap because the lodgings are bad, Miss,\" Arby smiled. \"I'm not one to pry into yer business, but 'tis why we offer such accommodations; you'd best be warm in the belly before fighting the daft.\" \n\n\"Mr. Arby,\" Mom gasped with a smile, \"if I didn't know better, I'd say you were trying to get us drunk!\" \n\n\"Oh damn!\" Arby laughed, \"You caught me! I'm a desperate old man still raging with the fire of youth, and aged whisky ages me backwards in the eyes of the drinkers!\" \n\n\"You're looking younger by the glass!\" Aunt Lucilla belched vulgarly, and then giggled girlishly. \n\n\"A few more and you might see me with a full head of hair!\" Arby laughed. \n\n\"Oh, I don't mind the follicle-challenged,\" Aunt Lucilla smiled warmly, rubbing a gloved hand atop Arby's pate. \"I'm a vain woman, and sometimes it's nice to have a mirror between my legs.\" \n\n\"Lucy!\" Mom gasped, her eyes wide as Arby turned beet-red from neck to crown. \n\nI took the opportunity to quickly drink the whisky while Mom was distracted, and instantly regretted it. It scorched my throat, burned like acid down my esophagus, and started a torrent in belly. I barely held the liquor inside me as I coughed and sputtered to the soundtrack of laughter. \n\n\"Was that yer first drink, Miss Diamond?\" Arby laughed. \"If I'd known, I would've gotten you some wine!\" \n\n\"I tried to warn her,\" Mom chuckled as she patted my back. Once the heat had left my chest, and the spit had dried in my mouth, I was left with a pleasant tingling warmth. The feeling seemed to play lightly on my head, and tug gently on my lips until I was grinning a little wider than normal. I looked bashfully at Nate, and saw him grinning back over Aunt Lucilla's shoulder. \n\n\"Oh no,\" Aunt Lucilla cackled, \"Sparkles is a light-weight!\" \n\n\"Well it's her first drink, Miss Lucy!\" Arby exclaimed, \"I'm sure you remember your first drink.\" \n\n\"Not really,\" Aunt Lucilla smirked, \"that night has been exorcised from my memory. One moment I was on top of the bar, the next, I was under the wash boy.\" \n\n\"Ya hear that, Nate?\" Arby laughed. \"The wash boy! You've still got a chance!\" \n\n\"Two years ago, definitely,\" Aunt Lucilla grinned wickedly at Nate, and then ran her hand through Mom's red hair, \"but alas for poor Nate, I've been shackled.\" \n\n\"Is that what she does to ya?\" Arby said, pouring another glass for Mom as she finished hers. \"Well I'm sorry Miss, but our accommodations don't cover those kinds of amenities. Perhaps the jailhouse does?\"\n\n\"If we'd spent another minute in Towerhead, I suspect that's where we would've been staying tonight,\" Mom sighed as she took two large swigs of whisky. \"Those people looked like they'd had it with us.\"\n\n\"That what happens when you mistake a changing room for a hotel room,\" Nate grinned, causing Mom to turn bright red and Aunt Lucilla to cackle. \n\n\"Oh, damnit Nate!\" Arby yelled. \"You weren't supposed to tell them we knew! Now they'll be running out the door in embarrassment!\"\n\n\"Word gets around fast in small towns,\" Nate shrugged, his dark hair falling over his tan face. \n\n\"You were in that shop!\" I exclaimed, pointing accusingly at Nate with a funny smile on my face. \"I remember you now!\" \n\n\"And I remember you,\" Nate smiled, and his smile causing my stomach to grow light, \"next to the valkyrie and the nymph. What happened to those two?\" \n\n\"Freydis took our mother on ahead,\" Mom said, squeezing my knee again. \"She may not look it, but my mother is very old, and the journey was getting taxing.\" \n\n\"Well, since all the cards are on the table now,\" Arby smiled apologetically. \"I'm deathly curious why a valkyrie is traveling on foot with a high-blooded elf, two half-blooded elves, and their nymph mother?\" \n\n\"You're just full of questions, aren't you?\" Aunt Lucilla said a little testily. \n\n\"I don't mean nothing by it, Miss Lucy,\" Arby said, putting up his hands defensively. \"I hope you'll forgive an old man's curiosity. It used to be that the winged-warriors only descended their cliffs to serve the heathen gods, but now they're fighting in the Pit and transporting the elderly. We're living in strange times, I tell ya.\"\n\n\"Well, the Creators have returned, Arby,\" Aunt Lucilla smiled, \"didn't you hear? The infamous Julia Glendian is on the prowl, killing the elven aristocracy one at a time.\" \n\n\"Bah!\" Arby laughed, \"Superstition and rumor! That nut, Emperor Flitari, blew up his own daughter for propaganda. He's been so crazy about finding the Heat Bringer that he had to fabricate her return to justify his tyranny.\" \n\n\"That's what I said!\" Mom exclaimed, squeezing my knee again, \"But Lucy insists in believing the rhetoric the government feeds us.\" \n\n\"Always keep yer ear to the ground, Miss Lucy,\" Arby said, touching his ear. \"Those in power keep their power through lies and deception, and you've got to listen carefully to hear through the bullshit.\" \n\n\"You're obviously a perceptive man, Arby,\" Aunt Lucilla smirked at Mom, \"nothing gets past you.\" \n\n\"No, it doesn't,\" Arby chuckled, pouring another glass of whiskey. \"I'm keener than a fox, I tell ya.\" \n\nNate snorted a laugh, and I laughed because he did. We connected eyes again, and shared a little secret in our smile. \n\nThe evening turned to night, and the glasses began littering the counter. Aunt Lucilla became louder and rowdier, Mom became bubbly and easily embarrassed, and I became liquid. It seemed that no matter what position I assumed; I would slide precariously from it. Luckily, Nate was next to me, and always caught me before I tumbled. Sometimes I slipped on purpose.\n\n\"Show him!\" Aunt Lucilla cackled to Mom. \"C'mon, show him!\" \n\n\"No!\" Mom giggled, covering her face in her hands, her cheeks as red as her hair. \n\n\"Do it!\" Aunt Lucilla goaded. \"Do it, and I'll eat your ass tonight!\" \n\n\"She drives a hard bargain!\" Arby cackled, his head resting on the counter, seeming unable to lift it. \n\nMom raised an eyebrow at Aunt Lucilla, who grinned and licked her lips. Mom took Arby's half-filled glass, reached for her neckline, then tore her breast from her blouse in a jiggling exposure, squeezed it, and squirted milk into the old man's glass. Arby hacked in laughter, pounding his fist next to his static head as Mom downed the contents of her glass, wiping milk from her lips and smirking at Aunt Lucilla. \n\n\"You whore,\" Mom sneered. \n\n\"You cow,\" Aunt Lucilla smirked back. Their gazes locked half-lidded above their crooked smiles, and Aunt Lucilla's pale lips pressed to Mom's red. Their mouths opened as their eyes closed, and their tongues invaded as their noses pressed beside each other. Soon, they were all over each other, groping jiggling curves with sinking fingers as they stumbled their way to the bedroom. \n\n\"Just hang out with Arby and Nate for a little bit, Diamond,\" Mom called over her shoulder between smacking sounds, and then the door slammed shut. As if the sound had caused it, Arby slid off his stool, and landed with a thump behind the bar. I managed to ease my swaying body over the top to see the old dwarf snoring and clutching an empty bottle like a lover. \n\n\"Is he OK?\" I asked Nate. \n\n\"He always gets like that, crazy old drunk,\" Nate said fondly. \"The moment the sun goes down, it's like he goes into a coma. Won't even wake up if you fire a cannon next to his head.\" \n\n\"That's crazy.\" \n\n\"Your sister's crazy,\" Nate chuckled beside me as I lowered onto the stool. I had to force myself to remember that he was referring to Mom when he said that. \n\n\"Yeah,\" I laughed, finding myself drooping against him, \"she gets like that.\" \n\nNate let me rest against him for a moment, then timidly shifted on his stool so that my back pressed against his abdomen. I rested my head on his chest, savoring the subtle rises and falls of his breathing, and the elevated drum of his heart. \n\n\"You can put your arms around me if you want,\" I whispered to him. He cautiously raised his arms, and then curled them around me; awkwardly at first, but then embracing me tightly, pulling him into his warmth. \n\n\"Have you ever had sex before?\" I asked him quietly. He didn't answer for a moment, and then I felt him shake his head above me, his chin running in a small arc between my antlers. \n\n\"Do you want to?\" I asked, caressing his embracing arm with my thumb, enjoying the feeling of it enclosed around my breasts. \n\n\"Yes,\" Nate whispered, his voice shaking slightly. \n\n\"Are you scared?\" I smiled, my irises topping my eyes, trying to catch a glimpse of his face. \n\n\"A little,\" Nate laughed nervously.\n\n\"I'm a little nervous too,\" I laughed, \"I've never had sex either.\" \n\n\"Liar,\" Nate snorted. \n\n\"It's true!\" I insisted with a smile. I turned my head over my shoulder to chide him for his groundless accusation, and found my face inches from his. His dark eyes stared affectionately down, his pink lips quirked in the middle of poorly-shorn stubble and a pronounced jaw. The next thing I was going to say vanished from my mind, and my thoughts became singular, and instinctual. \n\n\"I want to have sex with you, Nate,\" I breathed against his lips, \"I want to have sex with you right now.\"\n\nWe breathed each other's breath, we felt each other's lips, we tasted each other's tongues. We didn't know what we were doing, but we knew that it felt right. Our motions were curious and tentative; exploring with caution, easing into passion. My tongue found his gums and teeth, and his found mine. Our lips went from pressing, to locking, and the movements of our internal exploration became more confident, and intense. His embrace loosened about me, and his hands slid from their perches on his opposite elbows to grasp my breasts. He squeezed them gently, and felicitous tingles traveled through my chest, causing my thighs to grind with needful wetness beneath me. I entangled my hand in his hair, and pressed his kiss closer, feeling our passion burn hotter, feeling our hearts quicken and our breaths grow sharp. The desire coursed through me, compelled me, controlled me. I turned around and broke from the kiss, staring into his eyes as glistening salvia bridged our gasping mouths. He brushed a curl of scarlet hair behind my pointed ear, and I grinned at him mischievously as my fingers found his belt. \n\n\"Nate,\" I giggled, \"I'm really excited to touch your penis.\" \n\n\"I'm... really excited too,\" Nate grinned, seemingly unsure of how to answer that. I didn't mind. The smile on his face was all I needed to see, and the stiffness against his inseam was all I needed to feel. I pulled his belt off, unbuttoned his fly, and giggled delightedly as he came springing out. It was longer than expected, bigger than mine, but it was about the same girth, and I knew my hand would fit around it. My fingers clasped about him gently, and my breath caught briefly as his hard heat seeped into my palm. Nate's expirations became short and needful, and I sated him with long strokes, lubricating my motions with the froth oozing from his apex. \n\n\"Does it feel good when I do that?\" I asked quietly, smiling as he nodded, his brow furrowing, his lips gaping slightly. \n\n\"Can you do it to me?\" I asked him, eyes hopeful. He gave me a confused look, and then grinned. My smile broadened, and I climbed the bars of the stool until I was seated atop it, facing him. He reached between my legs as I stroked him, and forced a gasp from my parted lips as his fingers caressed my inner thigh. His forearm created a tent of my skirt that rose higher, revealing more of my fishnet-clad legs with every inch he ascended. His hands tickled me at the meeting of my thighs, and my breath quickened to a fervent urgency, my eyes drooping with need. He watched me intently as his hand pushed my lacing to the side, and then he stopped suddenly. \n\n\"What?\" I asked, lips still smiling. Nate's eyes narrowed as he fumbled between my legs, his hand not seeming to know what it was touching. His eyes opened wide, and his other hand shot forward, lifted my skirt and revealed what he'd been grasping. \n\n\"What the fuck?\" he gasped, his face turning pale, his lips parting, his penis deflating in my hand. ",
        "\"What's wrong?\" I asked, feeling my smile fade, feeling my heart flutter for a new reason. \n\n\"What the fuck is wrong with you?!\" Nate yelled, pushing me back, sending my tumbling to the floor. I broke my fall with my elbows, and cried out as the pain shot up my arms. Nate hurriedly pulled up his pants, stuffing himself away and staring down at me with disgust written across his face. \n\n\"I don't know!\" I cried, confused and scared, not knowing what I'd done. \"What did I do?\" \n\n\"What did you do?!\" Nate roared, his face turning red. \"What did you do?!\" \n\n\"Tell me what I did!\" I cried, feeling tears brimming at my eyes. \"Tell me what I did wrong so that I never do it again!\" \n\n\"Do I look like a fucking cock-sucker to you?\" Nate snarled at me, his posture threatening, rage edging in his voice. \"Do you think I'm some kind of faggot?!\"\n\n\"I don't know what that is,\" I whimpered, cowering below him, giving him my shoulder and curling into a ball.\n\n\"It's what you are!\" Nate yelled, pointing his finger down at me. \"You're a fucking faggot, you're a... a fucking freak! You tried to trick me into your gay little... your fucking little... FUCK YOU, YOU FAGGOT SLUT!\" \n\nNate kicked me hard in the ribs, folding my body around his foot and causing me to scream in pain. \n\n\"If you tell anyone in Towerhead about this, I'll fucking kill you, Diamond,\" Nate hissed in my ear as I gasped for air. \"I'll tell everyone you're a lying, faggot witch, and they'll believe. We'll tie you and your whore-sister and her whore-friend to a stake, and we'll have us a good witch-burning just like the olden days.\" \n\nNate stormed away, his stomping feet echoing and then muting with the slamming of the door. I laid in my fetal ball, trying to gasp away the physical pain as the despair squeezed my chest. Tears burned on my cheeks, pathetic whimpers hissed past my trembling lips, my whole body shuddered with my horrified breaths. I'd never known self-doubt before, but I felt it then. There was something wrong with me; something horribly, irreparably wrong with me. Now I knew why Mom didn't want me to talk to strangers; it wasn't them; it was me. Aunt Lucilla had told me I was special, but I didn't know until that moment that I was a pariah. I had more questions now, but they weren't born of innocent curiosity, but from sickening reflection. I turned-over every memory I possessed, and watched as each precious moment darkened in the shadow my new realization. \n\nI'm a freak. I'm a faggot. Nate's words solidified. Mom doesn't want me because she thinks I'm disgusting. Aunt Lucilla is just pretending to want me because she pities me. Nobody wants me. Nobody loves me. I'm alone, and the only person who ever really cared about me is dead. \n\nI looked at the bar, and saw the knife block standing tantalizingly close, its hidden edges concealing the solution to my problem. \n\nJULIA \n\nI burst from the room, naked with Lucilla running behind. I couldn't tell what the yelling had been about, I assumed it was between Nate and Arby, but then I'd heard my daughter's screams, and I'd scorched the bedsheets with my terror. My drunk vision adjusted to the blurred lighting, and focused to an image of my daughter, knife in one hand, penis in the other, within a heartbeat of doing it. \n\n\"NO!\" I shrieked, propelling myself across the room with my pounding feet, watching in slow-motion as Diamond made her decision, and brought the knife down. I was too slow. The knife arced, its gleaming edge closing the gap between its stretched target. A line of white heat shot from my outstretched fingertips, and sent fractals through the air, darkening everything in the well-lit room with its blinding brightness. The sound that came after was deafening, and the force of it blew the furniture to the side of the room, cracked the paned glass, and blew the door ajar. When the patterns of burnt light faded from my vision, I was met with the sight of Diamond sprawled on the floor, breathing heavily, but still blessedly intact. The wall behind her was a black mass of scorched wood, white embers flaring through patterned cracks. I scrambled over to Diamond, kneeling on the ground and scooping her into my arms, feeling my tears wet her neck as she sobbed against me. \n\n\"Oh my god, Diamond,\" I breathed my horror, my heart thundering like it never had before. \"Oh my god...\" \n\n\"I'm a monster,\" Diamond sobbed. \n\n\"You're not a monster,\" I hissed, holding her with all my strength, wanting to squeeze the pain from her. \"I'm the monster, Diamond; I killed your mother, I dragged you from her love into this hateful world.\" \n\n\"It's not the world, it's me!\" Diamond whispered, her nails digging into my back. \"You should've let me cut it off!\"\n\n\"No!\" \n\n\"I know you think it's wrong; I heard you what you said last night,\" Diamond said, pleading with me. \"We can both do it, together, and become like everyone else. Then they'll love us.\" \n\n\"I love you, Diamond,\" I breathed, my daughter's pain torturing me. \"I love you more than you can ever know.\"\n\n\"No, you don't,\" Diamond croaked, her voice ragged, \"you think I'm an abomination!\"\n\n\"I was wrong,\" I whispered, my voice barely yielding, \"I was so wrong, Diamond. You're beautiful just the way you were born, perfect just the way you born.\" \n\n\"You think I'm disgusting,\" Diamond whimpered, \"that's why you think it's wrong to love me.\" \n\n\"What?\" I said, pulling her from my shoulder, seeing the perfect portrait of grief she displayed for me. Her sparkling freckles glinted brighter with her tears, her apple cheeks were rosy with her anguish, her emerald eyes were filmed and red, and her ruby lips were quivering. \n\n\"You said sex is the physical expression of love,\" Diamond sniffled, \"but you won't love me because you think it's wrong.\" \n\nI cupped my daughter on the cheek, wiping away her tears with my thumb, seeing her beauty shine brighter once the pain was dried from it. Where was the voice of disgust telling me that I was depraved? Where was the pious nun damning me for my desires? Diamond was a babe of my own loins, a woman of my flesh and blood, and I wanted her. I wanted her even more because of it. The nun in me had almost let my daughter mutilate herself, but the Passion in me would show her pleasures she couldn't imagine. I would love my baby as the daughter she was, and as the woman she'd always been. As Passion had done with her children, so I would do with mine. \n\n\"It's not wrong, Diamond,\" I smiled, pulling her face closer to mine, cupping both her cheeks in my palms. \"I was wrong, baby; I was so wrong.\" \n\n\"Do you want to love me?\" Diamond whispered, her emerald eyes brimming.\n\n\"Yes,\" I breathed onto her lips, feeling my heart thumping with yearning, \"do you want to love me?\" \n\n\"Yes!\" Diamond said, the words barely a gasp from her mouth. I pulled her face tenderly to mine, and abandoned the last of my shame to the lips of my daughter. I breathed sharply through my nose as her tongue pushed into my mouth, tensing with the echoes of my piety before letting the languidness of lust guide my motions. I slid my tongue atop hers, and playfully guided her kiss, instructing her gently in the way only a mother can. Our lips consumed with soft hedonism, our bodies pressed together, and our hearts thumped to the same cadence of anticipation. I climbed to my feet and grasped the supple fat of my daughter's backside, feeling her melt into me as my fingers sank into her. I picked her up, and smiled around her kissing lips as she wrapped her legs about me, her need pressing hard against mine, throbbing together between our bellies. I caught a glimpse of Lucilla behind my daughter's face, and saw that she was wiping tears from a beaming face. She entangled fingers with my daughter, and the three of us walked into the soft candlelight of the bedroom. \n\nDIAMOND \n\nMom was a great kisser. Her tongue placated my every desire, her soft lips pillowed against mine, her flavor soaked its love onto my needful palate. She taught me how to kiss her back with the wet motions of her mouth, and I followed her lustful instructions until we moved gracefully within each other. She laid me on the bed, and her hands moved to the hem of my dress. She broke our kiss for only a moment as the fabric pulled over my face, and I urgently brought our mouths back together once I was laid bare. She pressed her nakedness on top of mine, our breasts squishing delectably, our bellies forming a layer of warmth, our thighs interlocked, and our members pressing together, throbbing their desire, rubbing combatively and leaking froth to slicken the penile swordplay. Her hands caressed me along the collar, her fingertips trailing soft fire upon my flesh. I shivered as she brushed each digit across both nipples, and her kiss formed a smile against mine, delighted at my reactiveness. Her fingers moved along the curves of my abdomen, through the lines of my pelvis, and toward the joining of our lust. She stopped there, and began caressing back and forth, teasing me playfully, her smiling kiss growing broader, her teeth gently biting my tongue. I giggled beneath her, and met her loving gaze as our lips parted, seeing the flush of her apple cheeks and the emerald of her eyes beneath strands of red. \n\n\"Do you like how Mommy's lips feel?\" Mom whispered, an endearing smile exposing white teeth. \n\n\"Yes,\" I smiled back, my body static in anticipation, eagerly awaiting what pleasures she would show me next. \n\n\"Do you want Mommy to kiss you in other places?\" Mommy sniggered, her nose crinkling. \n\n\"Yes!\" I gasped, wriggling happily beneath my mother's warmth. \n\n\"Where do you want Mommy to kiss you?\" Mom asked, lowering her face and breathing the question into my ear. \n\n\"My nipples,\" I said, arching my back so that my chest jutted forward. Mom laughed sweetly into my ear, and then kissed a trail down my chest, stopping when her lips hovered above my nipple. She glanced to the side, and made a small gesture with her eyes. Aunt Lucilla draped herself next to Mother, her pale complexion gleaming its patterns, her sapphire eyes smiling with loving lips. \n\n\"Do you want Aunt Lucilla to kiss you too?\" she smirked, like it was a secret joke only we were in on. \n\n\"Yes,\" I smirked back. Aunt Lucilla pressed her mouth to mine, and opened it to let me show her what Mom had taught me. She hummed her approval as our mouths rotated and our tongues entwined, and then she parted with a satisfied smile, gave me a wink that caused me to giggle, and wrapped her lips around my right nipple as Mom did the same to my left. I moaned softly as they drew my nodes to throbbing points in their mouths, and then moaned louder as their tongues pushed against me. They sucked gently; the soft olive flesh of my bust stretching with their lips, two pairs of eyes smiling lovingly up at me. I ran my splayed hands through their hair, relishing the soft texture of it, then grasped them gently about the backs of their heads, and pushed them deeper. They exchanged knowing glances as I moaned even louder, then they pulled from my breasts, leaving purple suction marks and shining spit about my areolas. \n\n\"Where do you want Mommy and Aunt Lucilla to kiss you next?\" Mom grinned, the excitement shining in her eyes. \n\n\"I want...\" I smirked playfully, letting my finger move from one woman, to the next. \"...Mom to kiss my penis, and Aunt Lucilla to kiss my vagina.\" \n\n\"From now on, Sparkles,\" Aunt Lucilla smiled, \"use less medical terminology.\" \n\n\"Fine,\" I grinned devilishly, \"I want Mom to suck my cock, and Aunt Lucilla to eat my butthole.\" \n\n\"I think you made a mistake, Diamond,\" Mom chuckled. \n\n\"I don't think I did,\" I grinned back. \n\n\"You act like it's a punishment,\" Aunt Lucilla smirked as she guided me to roll to my side. \"I just had a taste of your mother, and found that I've developed quite an appetite for bitchy asshole.\" \n\nI stuck my tongue out at her, and she returned the gesture as she descended in time with Mom. Aunt Lucilla gripped my cheeks and spread, her thumbs pressing gently about my rim, exposing me, making me feel wonderfully vulnerable. Mom's hands pressed softly against my pelvis, extending me further, making me feel raging need. Their mouths breathed on my respective parts, mingling the desires to penetrate and be penetrated, ratcheting the anticipation of my sexual duality. I gasped as Mom's lips enveloped my tip, and whimpered as Aunt Lucilla's tongue began circling my spokes. Mom paused to look up at me, a maternal expression on her kindly face, contrasting the perverseness of her consumption. She quirked her occupied mouth in an endearing smile, and I returned it with one of girlish excitement. Aunt Lucilla gave me a look of the utmost depravity; her sapphire irises topping the whites of her eyes, her open mouth drooling hungrily as her tongue tasted my tender pink circle. I gave her a teasing sneer, and she gave me a wink, and pushed in. \n\nTheir mouths descended in time, their faces pressing into soft taint and flat pelvis, forcing an involuntary shiver that ran from my thighs to the nape of my neck. I felt my cock bulging deeply in my mother's soft warm mouth, and my anus opening to welcome Aunt Lucilla's hot wet tongue. They both rotated their sucking lips; Mom about my base, and Aunt Lucilla about my rim, and I squirmed between them, trapped in a prison of splendor, reacting to one, then the other. I gasped and giggled as I reached down and planted my hands atop their heads, looking for support in my lustful bridge. Mom's emerald eyes gleamed their affection as she lovingly sucked me, while Aunt Lucilla's glinted with more playfulness as she curled her tongue against my anal wall, and stimulated my pussy from the wrong side. I moaned an escalating tone as I felt their fingers slide together from opposite sides, trailing tender torture down my taint and below my shaft. They met in the middle, and penetrated my virginity with two fingers each. \n\n\"Oh, Good Mother!\" I cried, echoing Mom's typical exclamation. Mom's finger curled and pressed against my spot, while Aunt Lucilla's squished my fleshy division against her tongue. My legs tensed beneath me, and I began twisting and thrusting uncontrollably, stuck between trying to consume Aunt Lucilla's face with my ass, while burying my cock into my mother's throat. They didn't let me choose. They pushed their faces firmly against me, squishing their complexions against my crotch and ass, consuming me and invading me with wet tender heat that moistened my insides and sheened my outsides. It was too much to take. Their fingers moved gently but relentlessly, finding the secrets of my womanhood and exploiting them without mercy. Mom's mouth sucked with ravenous tenderness, drawing me deeper into her throat, sliding only along the last inches of my base and taking everything else with ease. Aunt Lucilla tasted me with more hedonism; licking and prodding, expanding and exploring, sucking my rim and humming her lecherous approval as I winked and constricted around her penetrating tongue. She found a spot in my rectum that I didn't know existed, and I yelped and jerked into a back-wrenching arch. She was only encouraged by my reaction, and pressed her tongue savagely against my prostate, milking me as she stimulated it from the other side with her fingers. \n\nI whimpered and thrashed, grinding my thighs together against their wrists as their practiced fingers drove me to the brink of sanity, and their expert mouths pushed me over the edge of it. My eyes rolled into my head, and a rasping sound crawled from my chest as I felt the expansion in my nethers accompany the boiling in my loins. Mom began sucking harder, Aunt Lucilla began pushing deeper. My pussy convulsed and spasmed, my abdomen clenched and twisted, my diaphragm heaved with escalating breaths. I went rigid when the feeling reached its precipice, and both my lovers pushed their faces until my soft flesh deformed around them. The feeling dragged through an eternal, wonderful moment, and then erupted. My pussy gushed in a stream of release, my cock burst with a felicitous expulsion, and my anus coiled into a euphoric contraction. I sputtered and gasped the feeling away, hardly able to make a sound as I poured my cum into my mommy's mouth, and trapped Aunt Lucilla's tongue into my tightening asshole. They let me thrash between them as I leaked from my holes, and then they slowly parted; spit and secretion clinging to their marred lips. \n\n\"Mmm, Diamond,\" Mom moaned, \"you're so delicious.\" She gave me a naughty look. \"Do you want to know how you taste?\" \n\n\"You wouldn't let me try it before,\" I said, my voice full of breath. \n\n\"I was wrong about a lot of things before, Sweetie,\" Mom smiled, white fluid oozing from her red lips. She rose to me, her body moving with a languidness that seemed almost liquid. She was an entirely different woman in bed than she was in the world, a goddess of sensuality, and all I could do was smile as her lips connected with mine. I tasted the salt of my lust, and found it to be mouthwatering when mingled with the flavor of Mom's tongue. We passed it back and forth between us, letting it dribble from the corners of our grinning lips as we sucked upon each other. \n\n\"I taste good,\" I giggled when we parted, and Mom grinned her agreement. \n\n\"Yes, you do,\" Aunt Lucilla's teasing, sensual voice spoke in my ear, \"do you want to know how delicious your asshole is?\" \n\n\"Yuck!\" I sniggered, pushing Aunt Lucilla's face away. \"Go brush your teeth before you\u2014\" \n\nAunt Lucilla forced her mouth to mine, managing to smirk as she pushed her sullied tongue between my lips. I struggled for a vain moment before I was compelled to kiss her back, and accept the flavor of my own ass into my mouth. Aunt Lucilla was right; I was delicious. Though the flavor was disgusting, the action was sumptuous in its depravity, and for some reason, I liked it dirty. The filthy tang of my sinful hole was delivered from the slutty tongue of my adoptive aunt, and all I could do was hum into her mouth as I indulged in my own zest. \n\n\"Tomorrow you're going to return the favor,\" Aunt Lucilla breathed onto my parted lips as she ran a finger over them, \"but tonight, it's all about you, Sparkles. So, are you ready to become a woman?\" \n\nJULIA \n\nI grasped my daughter about the small of her back, and rolled us over to a chorus of giggles and motherly chuckles. She laid atop me for a moment, letting her scarlet hair tickle my face, her expression bright with excitement. We shared a brief kiss before I took her by the shoulders, and gently guided her to a straddling position about my hips. Lucilla slid her curvaceous form alongside Diamond's slender body, grasped my cock with a wink, and delivered it to my daughter. Diamond gave me a small bashful smile as she curled her fingers around my shaft, and I let my hands slide along her delicate frame until they rested on her hips. \n\n\"Are you ready?\" I asked her. Diamond looked down at what she had in her hand, her curly mane forming a curtain over her face. Lucilla brushed it aside to reveal apprehension in Diamond's downcast expression. \n\n\"It's really big,\" she said quietly. \n\n\"It's OK if you're not ready,\" I said, bringing my body up to hers, pressing our torsos and breasts together, \"there's no rush, Sweetie.\" \n\n\"I'm ready,\" Diamond insisted with a scared smile. \"I'm just nervous.\" \n\n\"I'll be so gentle with you,\" I breathed onto her as I cupped her apple cheek. \"I will never hurt you.\"\n\n\"Unless you want to be hurt,\" Lucilla sniggered unhelpfully. I gave her a look, and she receded with an apologetic smile. \n\n\"You're in control, Diamond,\" I said, brushing scarlet hair behind her pointed ear, \"only do what you're comfortable with, but don't be afraid to let yourself go. There's a world of joy to be had in sex, but only if you're bold.\" ",
        "\"I'm bold!\" Diamond grinned. \n\n\"Of course, you are,\" I smiled, crinkling my nose affectionately, \"you're a diamond. Now shine for me, baby girl.\" \n\nLucilla moved behind Diamond, resting her hands on my daughter's shoulders and placing a calming kiss on the elegant protrusion of her collar. I gently guided Diamond to place her weight on her knees, and she hovered her glistening slit over my manhood. Her own member stood proud from her crotch, and Lucilla reached around and stroked it slowly as I eased my daughter downward. Her emerald eyes were wide with excitement and fear, and only enlarged as my tip pressed to her soft petals. I rested my hands weightlessly on her thighs, letting her decide how to proceed, gazing into her with all the calming love I could express as my heart pounded with anticipation. \n\n\"That's it,\" I whispered as my daughter took my tip inside her, \"you're doing so well, Diamond.\" \n\nDiamond bit her lip in concentration, her thighs quivering slightly as she took another inch. Her breaths became audible through her nose, and her chest began to rise and fall with them. She took another inch, and stopped, looking up at me with an astonished expression. \n\n\"Mom,\" she said quietly, mouth gaping, \"I'm not a virgin anymore.\" \n\n\"No,\" I smiled, cupping her cheek, \"you're a woman now.\" \n\n\"Oh my god!\" Diamond giggled excitedly, a moan caressing her mirth. \n\n\"Congratulations,\" Lucilla whispered in my daughter's ear, her lips brushing the lobe, \"now quit being such a pussy with your pussy, and drop your hips.\" \n\n\"Lucilla...\" I glowered at her. \n\n\"Don't you want to make Mommy feel good?\" Lucilla whispered to Diamond, her eyes smirking at me. Diamond smiled and nodded to her de-facto aunt. \n\n\"Well,\" Lucilla grinned at my daughter, stroking her olive cock until it curved upward, \"then you have to take all of her.\" \n\n\"But she's so big!\" Diamond protested softly, easing herself to take another two inches of me. I felt her virginity tighten before me, resisting me before imminent pain, reaching her limit. \n\n\"You don't have to go any further, Diamond,\" I gasped, relishing the tautness of her, feeling her heartbeat pulsing from the tender coil of her chastity. Good Mother, she was tight. Despite my maternal desires not to hurt her, I couldn't help but hope that Lucilla would goad her into taking all of me. I wanted to feel every inch of myself buried in my daughter, and the need was beginning to bleed through my gentle disposition. Lucilla could tell. \n\n\"I know it hurts,\" Lucilla whispered into Diamond's ear as Diamond moaned from the new sensations taking her, \"and your mom's too nice to make you, but trust me; it will feel so good if you take all of it.\" \n\n\"She's already so deep inside me!\" Diamond whined, her chest heaving, her voice high. \"I don't think I can take anymore!\" \n\n\"Sure you can,\" Lucilla smiled at my daughter, \"be bold, Sparkles.\"\n\n\"It hurts!\" my daughter insisted, breathing heavily. \"I can't!\" \n\n\"You'll never know your limits if you don't test them,\" I said, breathing my need onto my daughter's lips, my hands squeezing hungry fingers into soft thighs, \"and you are limitless, Sweetie.\" \n\n\"I'm scared,\" Diamond whimpered, the pleasured contractions of her taken virginity driving me mad, \"you said you wouldn't hurt me!\" \n\n\"Do you trust me?\" I asked her, lips brushing hers. \n\n\"Yes,\" Diamond said quietly, her voice small and fearful, but also hopeful. I pressed my lips to hers, opened our mouths and exchanged our tongues, giving her lustful comfort in a maternal kiss. I pushed her trembling thighs harder, and tasted her pain and fear as I broke through the last of her chastity. She jerked forward, her arched body squishing its subtle curves into my busty protrusions, the hint of a cry singing from her muffled mouth. I kissed her deeply, lovingly, as I guided the last inches of myself deep inside my daughter. Our pelvises met, and I moaned when I felt her broken virginity squeeze me from base to tip, clenching with the pain of my piercing, her tenderness surrounding me on all sides. I tasted the change that took place within her; the innocence fading in her kiss, her surrender to the feeling, her acceptance of me inside her. The tension in her posture began to loosen, the tortured offering of her lips began to soften to sanguinity, the whining tone of her pain drawled to a moan in my mouth. She separated our mouths in a gasp, her hips dropping behind her, her back arching at the base of her spine. \n\n\"Oh my god,\" she breathed, her eyes half-lidded, intoxicated with pleasure, the girlish innocence gone from them. \n\n\"Does it feel good?\" I smiled across her lips. \n\n\"Yes,\" she breathed, resting her body on mine, seeming to grow weak from the feeling, \"it feels so good, Mom! Do I make you feel good?\" \n\n\"Like heaven,\" I smiled, moaning the words, \"you're so tight, Diamond. Does it hurt anymore?\" \n\n\"No,\" Diamond hissed, shifting her hips in a way that caused her netherlips to constrict around my base, \"it just feel so good!\" \n\n\"Now it's time to discover who you really are,\" Lucilla whispered to Diamond as she stroked her, \"what kind of a lover are you?\" \n\n\"Just do what comes naturally to you,\" I said, petting my daughter's cheek and smiling as she took my thumb between sucking lips, \"and I will be whatever you want me to be.\" \n\nDiamond let her eyes droop to slits, and her mouth suck gently around my digit as her body took control. She began to grind with slow, deep motions; her toned abdomen flexing in shadows against her olive canvas, her conical breasts jutting forward as her shoulders pinched together and her back arched behind her. I thrusted gently with her, letting her explore the nature of our melded forms, letting her feel my driving masculinity without the rage. Her pussy sheened me with its nectar, her lips tugged from her as she stirred, her channel hugged me with love and flexed in rolls of lewd muscles. \n\n\"A gentle lover?\" Lucilla mused, pulling her hand away and letting Diamond's cock slide freely against my belly. The sensuality of Diamond's movements came naturally to her, inheriting her gifts from her ethereal mother, but she had an edge Passion never expressed. I could see it in the green sparkle behind her eyes, in the way her red lips quirked around my thumb. No, Diamond was just testing herself. Diamond would not be a gentle lover. \n\n\"Mom?\" she smirked, pulling my thumb from her mouth. \n\n\"Yes Sweetie?\" I smirked back, letting the danger play across my smile. My female side might've been veered toward submissiveness, but my male side was dominating, and I could tell Diamond wanted a taste of it. She leaned forward, drawing a teasing finger along my jaw, working her hips with an experience she didn't have as her cock drooled cum across our pressing bellies. \n\n\"I think...\" she said, exploring my body with curious eyes, \"...I want you to stop making love to me.\"\n\n\"And do what?\" I asked, our gazes connected in mutual hunger. \n\n\"I want you to fuck me,\" Diamond breathed the words, almost a plea, almost a demand. Good Mother, it turned me on. \n\n\"Like this?\" I asked, thrusting into her with increasing force, causing her thighs to bounce off mine. \n\n\"Harder,\" she grinned, her breaths growing sharper. \n\n\"Like this?\" I grinned back, now driving with my knees bent, sounding the slaps of our colliding pelvises with the claps of my daughter's jiggling cheeks. \n\n\"Harder!\" Diamond moaned, the playful glint in her eyes turning to avarice, the red smile of her lips gaping with need. \n\n\"Like this?!\" I growled, grabbing her by the hips and driving faster and faster, feeling her pussy convulse its approval, hearing her mouth yelp its delight. \n\n\"Yes!\" Diamond cried, grinding against me, squirming in a writhe atop my body as I violated every inch her insides had to offer. She pinned my shoulders to the bed and thrusted back, meeting me in the middle, impacting our bodies at the height of our speed and causing our penetration to deepen. I touched the tightest depths of her, and she took me in willingly, greedily, relishing the passion, but not letting the sex veer into violence. Diamond's womanly lust mixed her mother's sensuality with my masculine rage. She grinded with sinuous grace, drove with heated need, growled and giggled in turn as playfulness met vehemence. The kisses we shared between moans had a challenge to them, the slight pulling of hair and digging of nails hinted at the violence, but the gentle bites and covetous squeezes spoke of a tenderness, and the loving connection of our emerald irises whispered of mutual trust. She tested me, as a daughter is bound to do, and I let her know what she could get away with, and what she would be disciplined for. She balanced the line perfectly, and I marveled at how quickly she learned. My baby girl was growing up before my eyes. \n\n\"Mom,\" Diamond grinned, her mouth expiring moans and gasps, \"sex is really fun!\" \n\n\"Yeah, it is!\" I giggled, squeezing her ass until my fingers disappeared in the fat, seeing the outline of her spread domes jiggle behind her arched back. She squeezed my breasts in turn, and we both laughed and moaned when I spurted milk onto our bodies and into our mouths. \n\n\"Excuse me!\" an indignant voice yelled beside us. \"I happen to like fun too! I'm feeling very abandoned over here!\" \n\n\"Oh, no!\" Diamond sniggered at me, flicking her tongue across mine. \"We forgot about Aunt Lucilla!\" \n\n\"She's easy to forget,\" I smirked over my daughter's shoulder, \"don't blame yourself; it happens to everyone.\" \n\n\"Na-ah!\" Lucilla squawked, crawling over to us, \"You do not get to make me the third wheel! This is a tricycle, bitches, and it doesn't work with me!\" \n\n\"You were just the training wheels,\" Diamond giggled, and Lucilla slapped her hard across the ass, causing my daughter to jerk with a squeal, her eyes widening, her lips gaping in a surprised, but delighted smile. She clenched around me in a vice-hold that nearly pulled the seed from my loins, and I had to resist the urge to come through clenched teeth as my daughter shared a sloppy kiss with her aunt. They parted with a teasing challenge in their locked gazes, their lips quirked in near-identical smiles.  \n\n\"I'm going to make a man out of you, young lady,\" Lucilla smirked, a lascivious thumb running across Diamond's lips, \"and you better not disappoint me.\" \n\n\"That shouldn't be too hard,\" Diamond smiled back, \"you're easy.\" \n\n\"Oh, Sweetie,\" I groaned, \"Aunt Lucilla is going to make you pay for that.\" \n\nLUCILLA \n\nDiamond turned around atop her mother, moaning as Julia's cock stirred the stretched lips of her moist pussy. She straddled her mother while facing me, her heels planted beneath her thighs, knees pushed into the bedding, her cock the vertex of her bodily curve, presenting it to me. I crawled to her, watching the desire in her eyes grow as my hips swayed, my breasts pushed together by my supporting arms, and my tongue ran across hungry lips. I climbed her body, guiding her down against her mother, seeing two sets of identical green eyes watching me, two sets of identical red lips parted and smiling, Julia's chin resting on Diamond's shoulder, both mouths expiring soft pleasure. I straddled my adoptive niece, gasping as I felt her masculinity push against my oozing petals, watching her desire brim as I teased it across the length of my slit. Back and forth, back and forth, I slowly sheened Diamond's shaft, slowly built the tension, my mouth parting wider when moans of need coursed from me, my grin curving when I witnessed her growing frustration. She reached to grab my hips, and I intercepted her wrists and forced them above her head, my breasts flattening against hers, my sneering eyes inches from her widening gaze. I pressed my pelvis down, squishing her cock against her abdomen, and grinded along her length, hearing the sweet sound of her whimpering to my torment, watching her youthful face twist into pathetic surrender. Too fucking easy. \n\n\"C'mon, Sparkles,\" I hissed, my breath catching my words, \"I thought I was supposed to be easy?\" \n\n\"Oooh...\" Diamond responded in a moan, her brow furrowed, her lips trembling. I bit gently on her bottom lip, pulling it from her mouth between grinning teeth as I felt her cock pulsing between my soft folds, flexing with need, nearly driving me over the edge, but not quite. \n\n\"Well?\" I chuckled, gnawing on her chin playfully. \"Aren't you going to take me? Aren't you going to grab my ass, spread me wide, and make me scream for it?\" \n\nDiamond moaned her response again, shifting weakly beneath me, taking her mother's cock deeper into her, but not even attempting to penetrate me. Her head fell backward, exposing the bow of her neck, and I licked it from collar to ear, marking her possessively, feeling her heart flutter at my domination. \n\n\"Sweetie,\" Julia whispered into her daughter's ear, \"do you need my help?\" \n\n\"No!\" Diamond gasped, chin tilting back, neck flexing. She looked to be straining, but she made no attempt to pull her wrists free. She liked what I was doing to her. She liked being under my control. \n\n\"I don't think Diamond's male side is like yours,\" I whispered to Julia, my words punctuated by breath as Diamond's cock throbbed between me. \"I think that part of your daughter might be a submissive, little bitch.\" \n\n\"Interesting,\" Julia smiled, mouth brushing against her daughter's neck, nose taking an indulgent sniff, \"there's a duality to her.\" \n\n\"And it's the opposite of yours,\" I noted, grinding my hips in a circular path, smearing my lustful secretion all over Diamond's pelvis as she whimpered and moaned pathetically, wanting me to dominate her, begging me to make her mine. I'd never been with a submissive male partner, and I'd never known until that moment that I wanted one. Sadism didn't do much for me, but my night with Julia by the Terondia River had awoken a certain... gentle domination fetish; 'tortuous seduction' would be a good word for it (and a good band name). I grabbed Diamond by an antler, and pulled her face forward; gently, but firmly. I was in control, but I would be a generous mistress. \n\n\"Do you want to be my little pet?\" I whispered intimately, almost threateningly, my finger tracing her jaw. Her doe eyes brimmed her answer, her bottom lip pouting, her cock engorging even more. I glanced over at Julia to make sure I wasn't overstepping, but she just grinned back; I could have my fun with her daughter. I reached between my legs and grabbed Diamond, squeezing until minor discomfort, watching her eyes droop to begging crescents.\n\n\"Answer me, Sparkles,\" I hissed\n\n\"Yes!\" Diamond whined back at me, nodding her head as best she could with my fist clamped around her antler. \"I'm your little slut!\" \n\n\"And will my little slut do whatever I demand?\" I prompted. God, this is fun. \n\n\"Yes!\" Diamond cried when I pressed my thumb against the base of her tip, bubbling precum from it. I grinned maliciously down at her, savoring the control I had, relishing the submissive expression on her face. \n\n\"I don't think your tiny cock can satisfy me. Do you think you deserve to fuck me?\" I sneered, stroking her possessively. Truth be told, Diamond was on the smaller side of average, but she was by no means tiny. I knew men were very sensitive about such trivial things, and I worried for a moment that I'd gone too far, but Diamond absolutely reveled in the degradation. \n\n\"No, Aunt Lucilla!\" Diamond cried. \"But I beg you, please take my virginity!\"\n\nI studied her desperate face with exaggerated imperiousness, my heart beating, my pussy pooling, my need almost overtaking my self-control. I let her antler go, let her head drape over her mother's shoulder, let her eyes watch me from the bottoms of her whites. Her arms were splayed to her sides, her petite breasts rose and fell with her anticipatory breaths, her cock pulsed and drooled against my pussy, the shaft pushing delectably against my labia, flushed red with desire. I wrapped a gentle hand around her neck, not squeezing, and I raised my hips behind me as I dragged the point of her member through my lust. I centered on my entrance, and broke character for just a moment, giving Diamond a compassionate grin. She broke her submissive fa\u00e7ade as well, giving me a lip-biting smile full of excitement, and then I took every inch of her, and wiped the smile off her face. \n\nDIAMOND \n\nAunt Lucilla's insides were hot and wet, constricting around me in a welcoming vice of soft flesh, pulsing with waves of muscle that drew me deeper into her. Her large breasts flattened against my petite ones, their domes glowing with Mom's energy. Mom nuzzled her face into my neck and breathed her moans as she began thrusting into me, pushing through my insides and compelling me to do the same to Aunt Lucilla. Aunt Lucilla's domineering expression softened as I invaded her, but she kept her hand wrapped about my throat, letting me know she was still in control, just like I wanted. She rose to an upright position, straddled across my pelvis, her hand leaving my throat and trailing possessively over my breasts. She watched me from imperious eyes, nose crinkled in a sneer, pink lips quirked devilishly below them. She took a nipple in each hand, squeezed, and twisted. My head fell back, my shoulders pinched together, and my hips shot forward. She rode me like a cowgirl on a bucking bronco, balancing with the expertness of experience. Her hips shifted in an alluring undulation, her abdomen stretched and clenched, the patterns drawn across it highlighting the subtle lines of muscle beneath her silky flesh. Mom grasped my hips and held me in place for a moment, and then blasted into me with more force than she ever had. I screamed my delight as my pelvis was forced into the air, and Aunt Lucilla with it.\n\n\"Oh, fuck!\" Aunt Lucilla half-cried, half snarled. \"Sparkles, put your fingers in my ass!\" \n\nI grabbed one jiggling glute, spread it wide, and forced my middle and ring finger deep into her vile heat. Her pussy constricted around me as her asshole did the same, and she growled her approval as I moaned mine. Mom's breathy moans were becoming rough cries, each note punctuated with a gasp for air. She thrust harder and harder, faster and faster, smashing her crotch against my pelvic floor, my ruined pussy gushing its perverse thanks. I screamed and gasped with her, each expulsion a labor from my heaving chest, my heart thrumming against Aunt Lucilla's squished breasts as her hips drove forward, trying to consume every inch of me. She suddenly shot upright, her hands leaving my hair and pressing down on my belly, her ass clamping around my fingers, her platinum hair flailing in an arc. I felt the moment take all of us, felt the heat of Mom's thrust reach their crescendo, felt the tension within my nethers reach the breaking point, and the boiling in my loins reach the point of eruption. Mom thrusted one last time, pushing all three of us from the bedding, her cock throbbing chaotically inside me, mingling its eminent expulsion with the breaking of my feminine lust. The tension snapped, the feeling burst, and I lost my mind in the ecstasy. I heaved, my back arching, my shoulders pressing deeply into the succulent pillow of Mom's breasts. My head fell backward, neck curving, bulging with tendons, mouth choking on a scream, eyes staring at nothing. The feeling exploded inside me; Mom's seed rushing into my welcoming womb, my seed rushing into Aunt Lucilla's, the release of my loins turning my legs to jelly, the release of my nethers turning my entire body to liquid weakness. It flowed outwardly from me, taking hold of my every nerve, taking control of every neuron, turning me into the singular sensation of euphoria. \n\nWe gasped and panted in the echoes of sensation, then fell into a languid sprawl. Giggles and soft moan emanated from us, and we shifted together, still hard and wet, but no longer possessed. As the night took us, our lovemaking became languid and sensual, whispers and gasps. I didn't know when I fell asleep, but I did so within the pressing warmth of bodies, the soft beat of hearts. It reminded me of a time not so long ago, when a voice whispered in my mind, and the walls of love encased me. ",
        "JULIA \n\n\"...that's it, now work the\u2014oh look, she's awake.\" \n\nLucilla's giggle touched my ears, opening my eyes to slits, revealing dawn beams that created an orange aura about my daughter. She lay between my spread legs; green eyes stared adoringly from beneath scarlet eyebrows, grinning red lips creasing her apple cheeks, hovering just above my morning glory. \n\n\"Aunt Lucilla is teaching me how to use my mouth,\" Diamond grinned, her tongue sliding along the bottom of my shaft. I groaned sleepily, wiping the exhaustion from eyes and smiling down at my daughter. Her grin opened wide, and she took an ambitious amount of me into her mouth. Her eyes enlarged, filled with tears, and then she pulled away, coughing and sputtering, her cheeks as flushed with embarrassment as they were with discomfort. Lucilla laughed endearingly, tousling Diamonds hair playfully as my daughter hacked the last of her failed attempt all over my crotch. \n\n\"Watch and learn, Sparkles,\" Lucilla said sultrily, easing herself beside my daughter, making me spread my legs wide to accommodate both women in the space between. Lucilla curled her finger around my cock, smirked at me as she brought the tip to her pink lips, and took every inch of me in one gurgling motion. Diamond's eyes went wide as she watched her adoptive aunt make my cock disappear. My head fell back against the pillow, a surrendered groan slipped from my lips, and I silently thanked the Holy Mother for slutty royalty. \n\n\"How did you do that?\" Diamond whispered, her voice touched with awe, her eyes wide with it. \n\n\"I just relaxed my throat, and took it in,\" Lucilla explained, guiding my daughter back to my crotch, glancing up at me with a smirk in her eyes. \"All it takes is practice, and we have all morning to teach you.\" \n\nI laced my fingers behind my head and sighed as teacher taught student; giggles, gags and gurgles emulating from marred lips, both pink and red stringing with my precum. After ten minutes of tearful trials, my daughter's green eyes sparkled proudly up at me, her consuming lips kissing my base. She grinned as best as she could around my throbbing meat, and I moaned weakly, thrusted my hips, and arch my back. Thank you, Passion, I thought to the void as our daughter swallowed every drop of my orgasm. Thank the Holy Mother for you. \n\nI stepped from my room and into the commons area, skin still steaming slightly from the cold shower I had made comfortably warm. Across the commons, the wall where my lightning had struck was black with fractal patterns. I didn't know how I was going to explain that to Arby, but I figured a generous amount of Lucilla's gold would satisfy his questions. I was considered a god by some, but it often seemed that no power was greater than being rich. The old dwarf wasn't behind the bar when I looked, but the sound of chopping wood alerted me to his location outside. I adjusted my blouse, pushing my breasts together to ease the apology, and stepped outside. \n\nNate's lean muscular back flexed as he split the final log upon the stump. He groaned, stretched broadly, and wiped the sweat from his brow. The door shut behind me, and Nate turned around. He met my narrowed eyes with a scowl, hacked phlegm, and spat it into the dirt. I felt the heat playing gleefully just beneath my flesh, burning behind my eyes, cajoling me to just... kill the little turd. My years spent in the convent served me well when fury threatened to overtake rationality, and I took three calming breaths through my nose. \n\n\"Good morning, Nate,\" I said. He snorted his derision, and my fingers curled into fists. Easy, Julia. Find peace in the Mother, find forgiveness within her mercy.\n\n\"Diamond told me what happened last night,\" I continued, keeping my voice level. He snorted again, this time adding a sneer to his response. Careful Julia, careful. Just because you're a killer now, doesn't mean you need to roast everyone you don't like. \n\nNate turned around, his expression telling me he didn't think I was worth the time of day. He took a deep pull from his water skin, rolled his head about his shoulders, then stepped atop the chopping stump, dropped his pants, and took a piss. I got his message loud and clear, but I couldn't help but turn his insult into an opportunity. I strolled over to him, smiling companionably as he frowned over his shoulder. I stood beside him, whipped out my cock, and pissed into his growing puddle. I whistled a whimsical tune as I heard his stream dribble out, then nonchalantly glanced to my side, and gave his manhood a headshaking smirk. My eyes rolled to his, and I saw the sweet combination of disgust, confusion and intimidation contort his face. \n\n\"I guess we can't all be blessed,\" I smiled, wagging my tool teasingly, \"but don't feel too bad; I'm sure it's just cold this morning. Here, let me help you out.\" \n\nAnd with that, my stream of piss turned into a torrent of molten flame, igniting the ground before us. Nate stumbled backward, falling off the stump and onto his ass, horror the only expression on his face now. I gave him a look of innocent confusion, and turned around as if to ask what was wrong, my stream of infernal urine rotating with me, nearing Nate's splayed body. He screamed, scrambled to his feet as best he could with his pants around his ankles, and hopped back to Towerhead, his bare (and admittedly well-shaped) ass jiggling behind him. I watched him go as my stream sputtered out, leaving blackened earth that smelled strongly of ammonia. I stepped away from my steaming waste, and took a deep breath of the dewy dawn air. \n\nAcross vast billowing golden fields, the violet light of dawn silhouetted the spires in the distance. Drastin stood in defiance of the rising sun, sprawling from horizon to horizon, its highways reaching outward like perpendicular arteries over the rural planes that fed it. Endless caravans traversed these arteries, bringing the lifeblood of wares and riches to the greatest metropolis in the world. Somewhere in that pulsing mass of sin and life, the Life Giver was unknowingly waiting for me. Somewhere in the canyons of those man-made mountains, was destiny. \n\n\"Good Mother, it smells like piss out here!\" Arby exclaimed as he stepped beside me. I squawked and jumped, my heart thundering in my chest, the fire stoking beneath my flesh. \n\n\"Don't sneak up on me like that!\" I yelled. \n\n\"Oh, I'm sorry Miss Jules, I didn't mean to startle ya,\" he chuckled, pulling out a pipe. \"I was just nursing a hangover and looking for my wayward employee. You haven't seen Nate around here, have ya?\" \n\n\"No,\" I lied, catching my breath. \n\n\"I could've sworn I heard him chopping firewood,\" Arby frowned, looking at the stack of singed logs by the tree stump. I swallowed and played with my fingers, not at all enjoying the silence between us. \n\n\"I'm sorry about your wall,\" I said quietly. \"I was drunk and careless with a candle, and well... we'll pay for the damages plus some, I can promise you that.\" \n\n\"I suspect Lucy will,\" Arby nodded, bringing the pipe to his mouth. I sighed, relieved that he didn't question me further. Instead, he patted his pockets, turning this way and that, searching his clothing for something.\n\n\"You're not a smoker, are ya, Miss Jules?\" Arby asked. I shook my head, and he frowned, searching his pockets with a bit more fervency, almost a panic. He suddenly stopped, relaxing as though he'd found his tinder. He brought his empty fist to his pipe, struck his thumb into the air, and from its tip, a blue flame ignited. My jaw slackened, my heart jumped to my throat, and my hair stood on end. Arby smiled at me from green eyes, no longer centered in white, but rimmed entirely with orange, reflecting the sapphire embers of his lit pipe. \n\n\"W-w-w-w-what...\" was all I managed to stammer, suddenly aware that I was burning my clothes off, my flesh alight with panic. \n\n\"Oh, I'm truly flattered at the offer,\" Arby laughed at my nakedness, undeterred by my fire, \"but I try not to sleep with my descendants; though it appears that only makes one of us.\" \n\n\"W-w-w-what?!\" I gasped, stepping backward, smoke rising from the ashes beneath my feet. \"Arbitrus Gen?!\"\n\n\"Arby will do fine for ya, Julia Gendian,\" the ancient Heat Bringer smiled, walking toward me. \"Arbitrus seems too formal, especially for family.\"\n\nI stood with mouth agape, processing the new information in a sluggish, panicked mind. Arbitrus stared expectantly back, seeming to enjoy my reaction immensely. \n\n\"Are you a Sentient?\" My voice barely gaining purchase in my throat. Arbitrus laughed and gestured to his clothing and the pipe in his hand, making me feel slightly stupid, but putting me slightly at ease. \n\n\"How then?\" I asked. \n\n\"Well,\" Arbitrus said, easing himself onto a boulder, \"there's another like me that I think you might've met. Redhead? Sparkling skin? Purple and gold eyes? Pair of antlers? Looks a lot like Diamond?\"\n\n\"Passion,\" I muttered. \n\n\"Ray Dawnbark's sister, Silvia, if I remember correctly.\" Arbitrus nodded, \"She was a nymph matriarch, a caretaker of the woodlands, attuned to nature in ways most couldn't imagine. Ray needed a lifeforce to preserve Arbortus, and Silvia was more than happy to live in a fucking tree for eternity, so he tethered her to the great forest he'd built. I'm a fiery guy with an explosive personality, so naturally, Furok tethered me to the sun. That means I go rather comatose when the sun sets, but you need something big for tethering to work, I guess.\" \n\n\"Why?\" I asked, the flame dimming from my flesh as the shock dwindled. \n\n\"The hell if I know,\" Arbitrus shrugged. \"Furok said something about the cosmic energy of creation, how making new life is in line with the universe's natural entropy, but prolonging it indefinitely goes against the foundation of\u2014\"\n\n\"I mean why were you preserved?\" I interrupted. \n\n\"Well,\" Arbitrus grunted, easing himself onto a boulder, \"that's a bit of a story, if you'll indulge an old man.\"\n\nArbitrus motioned for me to sit, and I cautiously let my flame die, and perched beside him on the boulder. \n\n\"Did you know that the ancients only recognized two Creators?\" Arbitrus prompted, his colloquial accent conspicuously gone. \"It wasn't until Hektin discovered that heat, iron and coal make steel, that the Heat Bringer was included with the others. Even then, Hektin's great achievement, the steel city of Hektinar, was mostly the doing of the Earth Former of his time, Gratora; Hektin simply melted rocks for her. The Heat Bringer's true legacy is not what is left behind, but what is no longer there. Do you know what the ancients call the Heat Bringer?\" \n\n\"The Destroyer,\" I whispered. Arbitrus nodded. \n\n\"The melting of Hektinar,\" I said quietly, \"it wasn't in retaliation for Drokin's Pass, was it? The timeline doesn't make sense. Furok died before Droktin's Pass was opened.\" \n\n\"No, it was not. Droktin's Pass was the retaliation.\" \n\n\"Why did you do it?\" \n\n\"The orc empire had been blessed with four of the past six Creators; Furok, Droktin, Gratora and Hektin. It had become too powerful, too influential, and the center of its power was Hektinar. The steel city housed a famous university\u2014the greatest in the world\u2014and the minds there had unearthed secrets\u2014lies\u2014that no man was ever supposed to know. They would've used that weapon, Julia, for the godless academics had gone mad in their lust for knowledge, and no longer cared if that knowledge was true. It was power, and they thought such power was greater than that of you or I, greater than that of even God herself! The Maternal Path no longer guided the orc nation, and so I...\" Arbitrus snapped his fingers and a spark popped from his thumb and forefinger, \"...made the correction. We are nature's correction, Julia. Unbridled creation leads inexorably to unbridled destruction, so a caretaker is needed to keep creation in check, like a cleaning forest fire that burns away the old canopy to make room for new growth.\"\n\n\"But you helped make Droktinar; you were a true Creator once!\" I hissed. I'd read this man's journal, believed him to be righteous and true, believed his path to be one worthy of following. Arbitrus Gen was one of history's great men, one of history's great lies, one of history's great monsters, and my ancestor. My blood. \n\n\"Droktin made Droktinar,\" Arbitrus shrugged, \"it was his life's work, but I never lit the furnace, and I never planned to.\" \n\n\"But I will,\" I hissed, \"I'll make the fucking correction.\" \n\n\"And I can't stop you,\" Arbitrus smiled, \"you're the Heat Bringer now, Julia. I can do little more than light my pipe and start my stove.\" \n\n\"You didn't answer my question,\" I said through gritted teeth, \"why did Furok preserve you?\"\n\n\"I told you that unbridled creation leads to unbridled destruction,\" Arbitrus said, annoyingly taking his time to get to the answers I wanted, \"and there is no greater destruction than unbridled life. Furok tried to preserve his brother's life, but Furok could not tether him. Halok's life had been that of a warrior, its purpose to bring death to others, and the Life Giver could not tether life to death.\"\n\nArbitrus stopped and scratched his chin, seeming to ponder the distant skyline. \n\n\"Furok didn't speak to me for decades after Hektinar. It was only toward the end of his life, when he realized he could not salvage what he'd done to Halok, that he came to me. He wanted to destroy what he'd created before it could turn Sentient, and since I was the Destroyer, it appeared I was just the man for the job. Furok believed that if he tethered me, created a hybrid of ethereal and physical out of me, that I could venture to the astral plane, and kill Halok where he slumbered.\" \n\n\"Why didn't it work?\" \n\n\"The tethering allowed me to traverse the astral plane, but it stripped me of my powers. Whatever blessing gave me my Creator abilities was replaced with the rope that gave me eternal life. I could find Halok, but I could do nothing to him. After Furok passed away, Halok's spirit degraded to Wrath.\" \n\n\"Then Droktin started the war,\" I said. Arbitrus nodded gravely. \n\n\"Without Furok to dissuade him, or me to fight him, Droktin had free-reign to exact his revenge for Hektinar. The Gratoran Wall was opened, and Wrath infected the hordes that charged through it, driving them insane with battle rage, making them fight even after they'd been dismembered and disemboweled. Millions of dead because of unbridled creation, because of unchecked life. Do you still think me the monster, dearest descendent?\" \n\n\"Of course,\" I hissed, \"the war would never have happened if you hadn't melted Hektinar!\" \n\n\"Yes, it would have,\" Arbitrus countered, \"maybe a hundred years later, maybe a thousand, but it would have happened. The orc empire was too powerful to be limited by its borders, and it would have spread across the world with no one strong enough to stop it. You will have to develop the foresight to make these decisions, Julia. They are hard, sometimes they are cruel, but I see in you, the same\u2014\"\n\n\"We are nothing alike!\" I snapped, flames playing beneath my flesh. \"We share blood, and that is it!\"\n\n\"I think we're more alike than that,\" Arbitrus smiled sadly.\n\n\"You're a psychopath, a murderer, a\u2014\" \n\n\"I wonder what Passion would have to say about that,\" Arbitrus grinned, \"or maybe your parents?\" \n\nFlame leaped from my flesh, burning exhilarating energy from every nerve, my eyes blinded with red rage, my head pulsing with murder. The boulder beneath me grew soft, the rock turning molten, running from its crystalline form and hissing in the grass. Arbitrus just stared back, his grin broadening to a manic curl, his orange eyes shining, reflecting my image. \n\n\"I remember that feeling,\" he said in hushed voice, almost reverently, \"the energy surging through me, the flame raging from my flesh, scorching the world in searing sheets of heat. I miss it; killing like that... it makes you feel like a god.\"\n\n\"Yes,\" I whispered, my breath barely coming from me. I saw the manic sparkle in Arbitrus's eyes, and I saw the same gleam in my own reflected from his sclera. He understood me, understood me completely. \n\n\"But once the pleasures of death have left you, and the flame has dwindled, there's a void, isn't there?\" Arbitrus asked. \"A hole that can never be filled. The weak soul mistakes the hole for a rise, and digs deeper, thinking they're climbing a mountain, but digging, and digging until their entire being is not but the vacancy they've made of it. That was me, once. I thought I was strong because I could kill, and only through the Holy Mother did I realize what a weak man I'd become. You are not weak, Julia; you know the price of murder.\"\n\n\"Could I even kill you?\" I asked, flames beginning the quell. \n\n\"Only you can, as Passion well-knew. It was why she wanted you, why she loved you. You are the Destroyer, Julia; the killer of all things. It wasn't your fire in her woods, nor your fire on her flesh that killed Passion. It was your fire in her astral mind.\" \n\n\"How do you know about her... about what I did to her?\" \n\n\"I am tethered, as she was,\" Arbitrus explained. \"I can travel the realms of the astral plane. Though I dare not walk through the gates of Sentients, there are hundreds of others like me, like Passion. However, there is only one like your daughter.\" \n\n\"What?!\" the flame on my flesh died, skin growing suddenly cold. \n\n\"Passion passed her astral realm to her daughter before she died, and because Diamond is of your blood, the realm was preserved from your flame. Only Diamond is untethered, so the extent of her abilities is unknown. Passion is dead as dead can be, but some piece of her still lives,\" Arbitrus dared a hand on my shoulder. \"I hope there is comfort in that.\" \n\n\"A little, maybe.\" I muttered at the ground. The songbirds were chirping noisily now, singing the praises of the sun as it revealed itself, casting rays across the golden fields, creating auras of dawn about the towers in the distance. \n\n\"I never wanted you to know me,\" Arbitrus said, breaking the silence. \"I never wanted you to be burdened with my existence. I wanted you to forge your own path, to make your own mistakes, to celebrate your own triumphs. I fear that your knowledge of me might create a... crutch that hampers your development. You may think that this meeting was by design, but it was by chance. Through the part of Diamond that resides in the astral plane, I saw you coming from Arbortus, but I did not put myself in your way. I'm not here for you.\"\n\n\"Then why did you reveal yourself to me?\" I asked. \"Why not just continue to play the fool, like yesterday?\" \n\n\"Because I know you're looking for the Life Giver,\" Arbitrus said, \"and he is why I am here.\" \n\n\"The Life Giver is here?!\" I practically yelled. \n\n\"He was. He's gone to Drastin now with Tera.\"\n\n\"The Sorenson boy? He's the Life Giver? Why didn't you save him?!\" \n\n\"Succubi have no power over Creators, so Brandon went on his own accord. I thought about going after just to keep tabs on him, until I realized who Tera worked for. Then, I didn't dare.\" \n\n\"Night Eyes? The gangster? Who cares about her?\" \n\n\"The gangster,\" Arbitrus scoffed. \"Night Eyes is like a demented toddler who thinks the world is her toy, and she does with it as she pleases. Her brand of evil, and the power with which she enacts it, are not natural.\"\n\nArbitrus reached into the large pocket of his overalls, and produced a copy of the magazine Lucilla had shown me yesterday. He tossed it on my lap, and I turned the page to the article about Astrid, featuring a sneering portrait of Night Eyes in the corner. An odd prickling crawled slowly up my spine as I ran my hand over the nymph's picture, Does she look vaguely familiar?\n\n\"Eighteen years ago, I saw something that terrified me.\" Arbitrus said, his voice wavering, \"I walked to the ethereal gates of the most ancient one, and found that her realm was empty. She had awoken from her slumber, and escaped the astral plane.\" ",
        "\"Corruption?\" I whispered. Arbitrus nodded, and I turned my attention back to the picture. \"But black eyes don't mean anything,\" I insisted, \"a cosmetic astral meld can turn anyone's eyes any color. You don't know that\u2014\"\n\n\"I know,\" Arbitrus said solemnly. \"I traveled to Drastin when news of this Night Eyes reached my ears. I found her in her brothel, and I saw the beast beneath with my own eyes. It smiled at me, and I ran. I ran as far as my legs could carry me.\" \n\n\"Good Mother,\" I whispered, \"Astrid\u2014this 'Angel' girl\u2014she's my friend's daughter! She and Flora went to Drastin ahead of us, they're\u2014\"\n\n\"Dead,\" Arbitrus interrupted, \"or wishing they were. Or maybe Night Eyes invited them to dinner? No one knows what she'll do. You'd have better luck predicting the fall of a thousand dice than guessing her actions. It's the nature of the beast inside her.\" \n\nArbitrus leaned toward me until I could feel his breath on my cheek, his eyes boring a hole into the side of my head. \"But Corruption made a grave mistake, Julia; she returned to the world when the Destroyer walked its surface.\" \n\nThere was pregnant silence between us where the unspoken words lingered, hovering over us like a black cloud. I prayed that Freydis and Flora were safe, but the realistic side of me knew they weren't. The pictures of Astrid were drawn across the paper in my lap, of her in chains and ropes, suffering the degradations of a twisted mind, a corrupted mind. The Life Giver, my only hope for redemption, was under the mercy of that corruption. Could I murder with premeditation? Could I become the dispassionate destroyer, the brutal corrector? Was this the path of righteousness? Was this what the Holy Mother made me for?\n\n\"I'll do it,\" I barely whispered, \"I'll kill Night Eyes.\" \n\nThe Maternal Bible: Chapter One, Page One:\n\nOn the first day, The Holy Mother created life, the land on which it walked, and the sun with which it shined. She birthed those that would carry her likeness; the human, elf, dwarf and nymph; the orc, goblin, ogre and troll; the centaur, siren and mermaid. There were others that she birthed as well. These were not of her likeness, but she loved them nonetheless. These were the succubus and the incubus, twins of lust who shared the sin of their father. But the Holy Mother still saw them as her children, and so she blessed them, and set a path for them on which they could take to enter the kingdom of heaven. It was that forgiveness that became the first step of the Maternal Path, and it is the first step all must take. For all are born with the sin of the Unholy Father, all are born imperfect, and so all must forgive, lest they be hypocrites. The Holy Mother has given all a path to follow, and all must follow it to find eternal salvation."
    ],
    "authorname": "White_Walls",
    "tags": [
        "nymph",
        "elf",
        "futanari",
        "teen",
        "virginity",
        "anal sex",
        "incest",
        "threesome",
        "mother",
        "daughter"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/the-creators-ch-07"
}
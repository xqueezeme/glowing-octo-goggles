{
    "title": "Voyeur Ch. 09",
    "pages": [
        "Sorry for the delay on this. Thanks for being patient. \n\nThis chapter is mostly about the captivity scene. The developments that Rachel fans are waiting for will come next chapter, likely the final chapter. \n\nAlso, to sociofolk379 (not sure if you received my reply) - your request has my full blessing. \n\nHope you guys enjoy. Voting and feedback appreciated.\n\n****\n\nTwo brothers traipsed through woodland. A group of young men greeted them and casually shook hands with the taller one.\n\n\"They're here for your send-off, little bro,\" he said, turning with a grin to see his brother flush with pleasure, flattered by the attention.\n\n\"You gonna do us proud, kiddo?\" One ruffled the teen's dark blonde hair and clapped him on the back.\n\nLogan chuckled. \"Damn straight, he will. He's ready.\"\n\n\"Good.\"\n\nThe group of men fell back, and the younger one gaped at what they'd concealed.\n\n\"W-What is this?\"\n\nLogan accepted a cigarette from one of the others, and took this time lighting it. \"A little something before you head off. It'll give you advantage. Edge.\"\n\nA handgun slapped into the boy's palm. He broke into a cold sweat, his eyes on the man kneeling in front of him; completely restrained, gagged and blind-folded. Shaking like a leaf.\n\n\"I... This is a joke, right?\" he said numbly.\n\n\"Nope, go ahead.\"\n\n\"Logan...I can't!\"\n\n\"You can. Come on, you're embarrassing me.\"\n\n\"No, really. I-\"\n\n\"If he doesn't have it in him...\" one of the men spoke out, hooking two thumbs into his jean pockets; both arms sleeved in tattoos. A cigarette precariously dangled from his bottom lip.\n\n\"Shut up, Colton,\" Logan glared, looping his arm around the boy. \"Hey, don't listen to them. Relax. It's like the gym, you know? The first workout hurts. Now look at you, all muscle. Just relax.\"\n\nThe boy spoke stubbornly; his voice trembled with an edge of fear. \"I agreed to enlist. Not this. I don't want to do this.\"\n\n\"Come on. We talked about it. This is the head start I never had. I'm fucking jealous.\"\n\nSilence followed; heavy with disapproval. Fighting tears, the teen bit his lip and cast an upset look at his brother. The others also watched Logan, most with raised eyebrows.\n\n\"Fucking Hell.\" Logan took a long drag and dropped his cigarette, grinding it into the soil with the heel of his boot. \"Fine, you don't have to. Jesus Christ. Give me the gun.\"\n\nReaching to accept the weapon, Logan's hand closed around Ray's in an unshakable grip. The gun fired three rounds; the blindfolded man gurgled and collapsed.\n\nRay screamed.\n\n******\n\nRay's upstairs bedroom was uncharacteristically bright. It looked like the setting of a homemaker catalogue, with a big square mahogany bed-frame and white linen with beige furniture to balance the colours.\n\nRachel woke with a sob, feeling like she'd endured a tiresome overnight flight; dozing but subconsciously aware of being in the wrong place for lack of a proper bed.\n\nExcept she was in a proper bed. Ray's bed, and he was curled around her like a possessive serpent. Awake, alert, and waiting.\n\n\"Do you want to talk?\" he murmured, playfully grazing her neck with his teeth, wanting to taste more of her. He'd been awake for at least an hour, considering his next course of action.\n\nIn light of the blackmail footage, he concluded there were three options to encourage Rachel's cooperation. Offering to clear Ben's name was a good one.\n\nThey'd sit together and send an email with photo attachments to a person of choice, probably a relative. The email would be intercepted and land in his junk folder without hitting destination. It was a program he'd installed in case a captive managed to get onto his computer to summon help. Though it never came close to that, Rachel had substantial freedoms with him and was very high risk.\n\nRay anticipated she would eventually want some proof that Ben was off the hook. It was an angle Ray hoped wouldn't come to her attention for a while. When it inevitably did, he would explain that he attempted to help, as promised, but no other guarantees were made.\n\nOption two... Force himself on her. Ray quickly moved onto option three.\n\nOf the various drugs at his disposal, only one would suit his purpose without knocking her out. He wanted her conscious.\n\nThey were called 'Ditzers' -- known to have an effect similar to drinking two bottles of vodka, without the need for hospitalization or stomach-pumping. They dissolved inhibitions and encouraged careless honesty.\n\nUnder Ditzer influence, people were inclined to spill critical secrets. It didn't always work, nor was it exactly a medically-approved formula. Ray didn't want to fuck up Rachel's insides or cause permanent damage by spiking her food every night. But maybe just once...\n\n\"I don't know what to say,\" Rachel mumbled.\n\n\"Do you want breakfast?\" Ray inquired, remembering she had recently been ill.\n\nRachel morosely nodded, drearily recognising she was quite ravenous yet again.\n\n\"Alright, I'll be back.\"\n\n\"Wait.\"\n\nRay paused on the edge of the bed and Rachel tiredly looked his way, noticing his arms seemed enormous in the soft yellow bed-shirt. Though Ben was sizably muscled, he never appeared threatening.\n\n\"How can you help Ben?\" she asked.\n\nUnmoved by her glum face, Ray looked conversationally thoughtful as though he hadn't already planned it out. \"I could send some photos of you alive and well. They would have to be convincing.\"\n\nRachel nodded, still staring at the bed. Ray reached across to smugly ruffle her hair, then went downstairs.\n\nRachel made use of her spare time to freshen up, discovering her toothbrush and toiletries had been brought from downstairs. Ray's bathroom was quite large, luxurious, and smelled like him; his cologne, his skin, his overall essence. She didn't like being there, it felt intimate, as if she was immersed in his personal space. She preferred the plainer, sterile bathroom downstairs.\n\nRay gave 'breakfast in bed' a whole new impression. Rachel didn't think it'd ever hold appeal for her again. The food was good, granted. It always was. But she was so damn miserable it may as well be expired gruel. Perhaps it was the elephant in the room.\n\nRay wanted sex from her, that much was clear. She wasn't going anywhere; Ray proved capable of enforcing that policy. Eager as she was to progress Ben's rescue from a distance, Rachel just didn't know how to initiate such a repulsive conversation.\n\nWatching her brow cutely furrow with concentration, Ray was impressed that once again, Rachel avoided hysterics in a nasty situation. Inevitably the intimacy would become a topic, but for now he relished in her quiet defeat. The ball was in her court.\n\n\"So...\" Rachel idly stabbed her finger into the spongey mattress and watched it instantly re-firm. She sat up against the headboard with her knees to her chest in a defensive position that effectively blocked Ray from cuddling her.\n\n\"Yes?\" Ray beamed, trying to catch her eye.\n\nRachel had carefully avoided all eye-contact with him since the last evening. It was only when Ray pretended to be busy that he managed to lock eyes with her before she quickly looked away. It both annoyed and amused him.\n\n\"How do we do this?\" she muttered.\n\nRay stretched out by her side and walked his fingers up her shoulder to tap a flushed cheekbone. \"That depends. Do we have an agreement?\"\n\n\"I'm not clear on the terms.\"\n\nRay chuckled. \"Very well.\" Rachel stiffened when he sat up and draped an arm around her. His other hand sneaked over one of hers.\n\n\"We'll do a photoshoot later.\" Ray's heart quickened as he imagined a very different kind of photography. \"Email them to a relative, with a fluffy explanation. The email won't be traceable, so they won't be able to reply.\"\n\n\"And?\"\n\n\"And you stop acting like you're at a funeral, for starters,\" he spoke into auburn tresses. Sexy bed-hair. His cock stirred.\n\nRachel did feel like she was at a funeral, following the death of love and happiness. \"What else?\"\n\n\"Don't be like that. Just relax.\"\n\nRachel bristled. It seemed Ray was always telling her to 'relax' when she had no reason to. Ray's hand left hers to turn her face up.\n\n\"Kiss me.\"\n\nShe sombrely cooperated, and Ray broke off with a laugh. \"Come on, I know you can do better than that!\"\n\n\"This is difficult for me. When do we send the photos?\"\n\n\"After we take them.\" Seeing the look on Rachel's face, he sighed and began to tidy their breakfast.\n\n\"Can we do it now?\" she asked, blushing when hazel eyes turned her way with a saucy gleam. \"The...The photos, I mean. Take the photos.\"\n\n\"Do you know how long a disappearance investigation lasts before it goes to trial?\"\n\nRachel shook her head. Ray smiled understandingly, though the sentiment didn't reach his eyes; they were warmly fixed on her chest.\n\n\"Let's just say there's plenty of time for you to convince me,\" he said with slow emphasis, setting the tray of dirty dishes aside.\n\nThough it wasn't in her nature, Rachel longed to indulge in a toddler tantrum. She wanted to let loose in a screaming fit of rage, kicking and beating her fists against the polished timber flooring. If Ray weren't there to witness the humiliating spectacle, she'd do it.\n\nRay grinned at her brooding turmoil, wondering about his feelings for her.\n\nSexually, she set him on fire, and he quickly developed a surprising aversion to physically harming her. But he was also completely fine with her quiet, abject misery.\n\nRay crawled onto the bed and gently unravelled Rachel from her curled-up position, guiding her to lie flat. Balanced above her, he eased one hand down the front of her pants and lightly brushed his fingertips across her pussy as she crossly looked away.\n\nDry as a bone. Well, a very soft bone with a rose petal texture...\n\n\"Ouch,\" Rachel said sullenly when his fingers tentatively stroked her.\n\nRay was highly suspicious of that feedback. Perhaps she wasn't aroused, but he hadn't touched her in a way that could incite pain.\n\n\"I'll kiss it better,\" he smiled.\n\n\"I don't like being licked,\" Rachel pouted. \"It's uncomfortable.\"\n\nRay hesitated, then narrowed his eyes. Clever girl.\n\nRachel was using his aversion to sexual abuse as leverage to keep him at bay. It was no secret that her discomfort would make his experience unpleasant. She was cock-blocking him. That sneaky little...\n\n\"You liked it the other morning,\" Ray pointedly reminded her, getting some satisfaction from the fiery blush filling her cheeks. \"You came really hard, right on my face.\"\n\nRachel scowled.\n\n\"Come on,\" Ray murmured against her temple, lowering on top of her. \"We both know I can get you there.\"\n\n\"I just...I don't think I can enjoy it after what happened.\"\n\nRay laughed and nuzzled her neck. \"We both know that's a lie.\"\n\nIronically, it wasn't. Whenever Rachel didn't see Ben's face, she saw those men in the woods, leering at her. She kept thinking about what they would have done if Ray didn't come after her. Their rough hands on her body; the degradation she would have endured. They may have killed her after, or she might have begged to die before they were finished.\n\nThen she wondered if they had family who were waiting for them, or dependent children. They didn't look like bread-winners, that was some consolation. And their bodies would eventually be found, which was more than she could say for herself.\n\nNo one would ever know what happened to her, or why. If she choked on a peanut and died, Ray would simply dispose of her. No funeral. No one would know the truth; not her colleagues, not her parents. Not Ben.\n\nThough she avoided it in the beginning, Rachel pictured Ben's face whenever she could. It hurt, but she realised the heartache of sweet memories would hurt less than the loss of those memories. The notion that Ben's face might eventually fade from her consciousness over time terrified her.\n\n\"So, you think you can't get off with me?\" Ray asked flippantly, the inquisitive tone set Rachel on high alert. Despite the easy smile on his lips, there was a sharpness in his eyes that warned she tested his patience.\n\n\"Well, not intercourse,\" she said uneasily. \"It's a bit much.\"\n\n\"I'm too big for you?\" Ray's tone dripped with false sympathy.\n\n\"Yes,\" Rachel said weakly, aware the conversation had taken a dangerous turn. \"I'd appreciate it if... I mean, we should probably wait.\"\n\n\"Indeed, we should,\" Ray quickly agreed. \"But now you're my literal partner in crime, I think we should overcome these little problems together as a team, don't you?\"\n\nUh oh. \"I just...Please, Ray, I can't. Really...\"\n\n\"Not even for Ben?\"\n\nRachel's lip trembled. \"Well, yes. I mean, I just need time, so it doesn't hurt.\"\n\nNice word choice, schemer. Ray's smile turned slightly aggressive. \"And if I can make it comfortable for you, so it doesn't hurt?\"\n\n\"Then I s-suppose...\" Rachel gulped, nervously watching him reach under the bed. \"I mean... But I don't think that I can-\"\n\n\"Let's test that theory, shall we?\" Ray pleasantly interrupted. Standing to his full height, he gripped several pairs of cuffs in one hand, the ball gag in the other.\n\n****\n\nBen glared at his reflection. The clothes were ok; black combat pants, boots and an olive t-shirt. But there was an obnoxious yellow hat on his head that he'd like to throw into a fire. It was eye-wateringly fluorescent, with a dorky chicken-head cartoon on the front. It was so horrible that Ben felt his temper increase just from looking at it. But if it meant getting Rachel back, Ben would happily dance along the highway in a matching costume.\n\n\"I feel like a fucking idiot.\"\n\n\"You look like one,\" Brian said honestly.\n\nAhmed smiled thinly. \"It's perfect. Conspicuous.\" He checked his watch. \"Fifteen minutes. Tell your friend.\"\n\nBen dialled Kevin's number from the throwaway phone Ahmed gave him. It was Ahmed's idea to use Kevin since he resembled Ben from a wide distance.\n\nBen was incensed to learn Ahmed had vigorously investigated all of his inner-circle, but begrudgingly understood Ahmed needed to rule out everybody Rachel had recently come into contact with.\n\nThe man was experienced enough to presume the culprit was someone close to home. If anything, Ahmed seemed a little pleased that the case was very unique to the kidnapping norm. With Rachel tangled in a fast relationship with Ben and having no obvious connection to Ray, it was the perfect crime. The only thing Ray underestimated was Marcus' resources. Namely, Brian.\n\n\"Hey.\" Kevin sounded overly confident and Ben knew he was trying to hide his nerves. \"I'm early.\"\n\n\"We'll be fifteen minutes.\"\n\n\"Ok.\"\n\n\"I really appreciate this, Kev.\"\n\n\"You'd do the same for me.\"\n\n\"Yeah. See you soon.\" Ben hung up with a deep sigh.\n\nConflicting emotions swirled through him; excitement, rage, love, bloodlust. Once Rachel was safe, he was going to beat that fucking girl-snatcher to death with his bare hands. Whatever the outcome, he was bringing his girlfriend home.\n\nBut first, there was a little charade Ahmed was adamant was necessary in case the police were tailing him. And so, wearing the dumbest hat he'd ever seen, Ben made his way to Marcus' bustling corporate offices that currently served little purpose.\n\n\"I feel like I'm in a cheesy action flick,\" Ben muttered in the private office, still avoiding his reflection.\n\n\"Let's pray it stays cheesy,\" Brian retorted. \"I fucking hate horror movies.\"\n\nAhmed hauled a duffle bag over his shoulder. In black combat gear, he looked very intimidating. \"It's time.\"\n\nBrian and Ben waited ten minutes after Ahmed departed, then took the elevator and exited the front of the building.\n\n\"Lah de dah,\" Brian hummed, signalling an idle black car that quickly drew closer.\n\n\"Where to, Brian?\" The driver asked, his eyes in the rear view mirror moving to Ben's awful hat. Then he met Ben's eyes, and quickly looked away.\n\n\"The Center. It's my Aunt's birthday and I have to get her something fancy. Something with feathers.\"\n\n\"Right-o.\" The driver was used to Brian's strange explanations; they usually turned out to be true.\n\nIt wasn't until they reached destination that Brian dropped his bombshell. \"Shane, wait here. I'm not coming back. In about ten minutes, a guy in the same hat as my friend here,\" he jerked his thumb at Ben, \"will get into the car. Take him to the airport.\"\n\n\"Sure, Brian,\" Shane said calmly, though blinked furiously.\n\nOnce they entered the shopping centre, Brian and Ben separated. Brian zigzagged between levels, spent no more than three minutes browsing a suit store, then headed toward the back of the centre.\n\nBen strode along ground level, pretending not to notice the many eyes drawn toward the offending hat on his head. Ahmed wanted a fluro eye-sore, and did a great job finding one.\n\nBen turned into a corridor leading to the bathrooms. A couple of guys were in there, plus Kevin, fretfully playing with his throwaway phone. Kevin was dressed identically to Ben, and silently accepted the yellow hat with a look of revulsion that brought a wry smile to Ben's face.\n\n\"Wear it proud,\" Ben said lowly, tugging the visor lower to shelter more of Kevin's face.\n\n\"They're watching you this carefully?\" Kevin breathed, pocketing Ben's personal phone.\n\nBen pressed a finger to his lips and jerked his head. After a nervous gulp, Kevin left the toilets with his face down, coughing into his hands.\n\nBen quickly removed his t-shirt, exposing a pale blue one beneath, and dumped the olive one in the bin. Then he took a deep breath and briskly left the room in Kevin's wake.\n\nKevin walked about ten metres ahead, still rubbing his eyes. Ben saw a man standing outside a newsagent suddenly dump the book he was reading and fall in line behind Kevin.\n\n\"Huh,\" Ben said under his breath, casually turning his back on them. He made his way to the back of the centre, and took his time sidling between parked cars. Then he fluidly opened the back door of a black jeep and slipped in.\n\n\"Smooth,\" Brian approved, wishing Marcus was as capable of following instructions.\n\nMarcus commenced his journey at the start of the day, driving solo to Ahmed's chosen meeting point. While on the road, he stupidly used his personal phone to call Brian, who immediately terminated the call before any damage was done. After Brian finally got through to the disposable phone Ahmed had given Marcus, Brian and Marcus were so busy yelling at each other that Marcus took the wrong exit off the freeway.\n\nBy the time Marcus realised his blunder, he was almost three hours off course. It didn't interfere with the plan, it only verified that Ahmed was right to allow Marcus a half day's head-start in case he fucked up.\n\n\"Not bad, for a fugitive, Ben,\" Ahmed grinned. \"If you liked the hat, I can get you another one.\"\n\nBen's lip curled, and for a moment Brian looked like he was choking on air. \"Ahmed, did you just make a joke?\"\n\nAhmed shrugged, deadpan again. Brian turned his bemused gaze out the window as they made their way from the parking lot, wondering why his steely associate had taken a shine to Ben.\n\n\"I think someone was following me,\" Ben mused, also looking out the window.\n\n\"Of course. You're a murder suspect. They're going to freak when they make your friend.\" Ahmed was smiling again. \"It won't matter if they have your passport. They'll send every man and his dog to the airport. By the time they review CCTV and sight you, we'll be untraceable.\"\n\n\"And Kevin will be alright?\" Ben asked sharply.\n\nAhmed shrugged and started the engine. \"So long as you didn't tell him anything of value, he'll be fine. There's no law against lending a hat to a friend.\"\n\n\"Well...\" Brian began contemplatively.\n\n\"This expedition will clear Ben's name,\" Ahmed interrupted. \"Even if...\" He bit his lip and dismissed the thought to focus on the road.",
        "But his point had been made, and the car was grimly quiet for a long time.\n\n*****\n\nRay managed to get Rachel naked without brute force, but substantial physical coercion was required to coax her onto the padded table. Though Rachel reluctantly cooperated when Ray stripped her clothes off, she vigorously debated the cuffs.\n\nBut Ray cheerfully insisted and managed to secure her in a bent over position, one limb at a time to the table legs. It was only when Rachel saw the gag coming that she loudly objected. The noise didn't last long.\n\n\"There, hon.\" Ray indulgently stroked her hair, oblivious to her distressed whining against the black rubber filling her mouth. \"It's going to be fine. You look wonderful. I'll be right back.\"\n\nRay perused his collection of medical supplies, exercise equipment and other assassin paraphernalia until he found a very powerful neck massager he used for muscular strains.\n\nThough advertised as a 'massager', it looked exactly like a sex toy and the retailer clearly intended to hit a double audience. When making his purchase, Ray noticed the area was female-dominated, with a large group of giggling girls browsing the same product range.\n\nThe fawn-coloured piece was the size of a giant remote control, with a bulbous, textured head at the end of it.\n\n'Let's see if we can't get you there, Rachel,' Ray thought snidely.\n\nReturning, he quietly observed his captive, her smooth body presented for him, taut with fear and discomfort. He didn't lie before; she did look wonderful. Her fair skin shone with nervous perspiration; a beautiful glowing lustre. Ray wanted to get naked and tangle with her in bed; touch and taste every inch of her. But he was a patient man.\n\nRay knew he could have seduced her without going to these lengths. But the deflection tactic pissed him off. Whilst he enjoyed their battles thus far, Ray didn't appreciate the attempt to undermine him when it directly concerned his desires. He wanted to teach her a lesson.\n\nSensing his presence, Rachel uneasily pulled against the cuffs and arched to look at him. Ray watched pale-pink nipples come into view; fully erect from contact with the table and the slight chill through the house. She wouldn't be cold for long.\n\nRay plugged the device into the wall socket. Moments later, it came to life with an ominous whirr. Satisfied it worked, Ray switched it off again.\n\n\"Relax, Rachel.\"\n\nNow associating the reassuring word with bad things, Rachel shook her head and squeaked pleadingly around the gag. Ray crouched behind her and spat on her pussy, then on the head of the 'massager'.\n\nPeering closely, he spread her soft lips explicitly wide, lightly resting the device against her elusive clit. When he did, he heard Rachel's muffled shout; her thighs lurched against the table legs to no avail. Ray pressed the implement against her little pink nub and switched it on.\n\nRachel jumped with a shrill squeal, her body jerked all directions, but she couldn't evade the intense buzzing. It was so powerful; the thrum of the device encompassed her entire pussy, ass and inner thighs.\n\nIt took twenty seconds for her clit to spark and throb, sending a sharp tremor of pleasure through her body. Rachel emitted a muffled yelp and arched, fighting to lessen the pressure. Ray removed the massager.\n\n\"Not bad,\" he smiled, leaning in to trace her shaking pussy with a cheeky lick.\n\nRachel tightly closed her eyes, recovering. But they flew open when she felt the pressure return; smooth matte viciously humming right against her swollen clit.\n\n\"NAUHHH!\" she cried, twisting against the table. This time, it took just under a minute for the second orgasm.\n\nThe third climax was explosively unpleasant.\n\n\"Wow, you're really juicing now, hon,\" Ray observed, gently stroking her trembling flesh with his fingertips and grinning when she yowled at his touch.\n\n\"I just want to make sure you're wet and ready for me. You know, so my big cock doesn't hurt you.\"\n\nRachel's eyes slowly closed with horror as his meaning became apparent. This was Ray's way to call 'bullshit' on her rejection.\n\n\"URRHHH! NNHHHH! AURRR!\" Rachel suddenly screamed, her wrists and ankles bruising as she strained against the cuffs.\n\nThere was no excitement; no gentle build-up. It was like electric shock therapy - the most intensely uncomfortable pleasure she never knew existed, and there was no way to stop it. It was torture.\n\nRay ignored her cries. Those screams, he could handle.\n\nWishing she could beg him to stop, Rachel groaned with frustration, then wailed against the gag as her body strained through a fifth orgasm.\n\nThighs aching from crouching, Ray got to his feet, satisfied by the small puddle of Rachel-juice dripping down her mound and pooling under her. Her overstimulated and too-satisfied pussy was very pink, engorged and deliciously glistening.\n\nRay came to stand before her, watching her pitifully gasp against the gag. It was strange forcing pleasure on another person. A whole new experience that he was rather glad for feeling compelled to orchestrate.\n\nHe'd never done anything sexually forceful with a girl, they flocked his way willingly. Of course, the one girl who reeled him in had to be unwilling. Life was unfair, but he knew that already.\n\nSobbing and humiliated, Rachel finally raised her head, her eyes pleading.\n\n\"Again?\" Ray softly offered, cradling his new weapon of triumph. Without breaking eye contact, he licked the wet surface and smiled.\n\nHeaving and tearstained, Rachel desperately shook her head. She felt soaked, exhausted, dehydrated and her body ached. Her clit burned. \n\n\"You think I can get into that tight little pussy now?\" Ray questioned.\n\nRachel's head eagerly bobbed; her eyes rolled back and closed in a silent prayer. Ray bent until their faces were centimetres apart.\n\n\"Open your eyes, hon.\"\n\nShe did; the blue tones shone bright with mute appeal.\n\n\"If I take out the gag, will you kiss me?\"\n\nRachel nodded, a broken sob blubbered past her drooling lips and more tears dripped down her face.\n\n\"Good girl.\"\n\nThe gag was unfastened, and Rachel drew a shuddering breath of sweet air when the obstruction vacated her mouth. Her chin was layered in saliva and tears, but indignity was the least of her problems.\n\nRay crouched before her, wiping her tears and drool with a handcloth. Then his lips were there; waiting to immediately test her acquiescence. After a cute hiccup that made Ray smile, Rachel forced herself to stop crying and bravely leaned forward with parted lips.\n\n\"Very good,\" Ray mused, flicking her bottom lip with his tongue. Then he gently kissed her, his eyes still open.\n\nRachel bleakly stared back, discerning an oddly fascinated glint in Ray's eyes, a mix of cruelty and desire.\n\nRay also registered that Rachel unlocked something in him; something thrilling with an essence of exquisitely sexual supremacy. It was bad, and he liked it.\n\nBut it had to be with Rachel; it was the build-up of infatuation coupled with rare circumstantial aspects that made the perfect scenario impossible to recreate.\n\nRay knew plenty about sexual obsessions, probably a third of his gigs had something to do with a spurned or hopeful lover. He never understood the fixation, the importance of it; the feeling you might get from one particular person looking back at you. Now, he knew.\n\n\"I want to bring some things to your attention.\" Ray spoke huskily against her tear-stained cheek and ran his hand through her hair to caress the nape of her neck.\n\n\"I've never hurt you,\" he began. His hand moved sensually along her skin; consolingly.\n\n\"I've never wanted to. I've been conscious of your comfort, your pleasure and your safety. I get you're unhappy with the situation, but you can't deny I've only ever treated you with kindness. I'd go so far as to say caring.\"\n\nNot daring to voice her thoughts in such a vulnerable position, Rachel sniffed in clear disagreement. There was something in Ray's tone that suggested she should feel honoured by his attention, but it only roused resentment. Kidnapping aside, she could never be happy with a murderer.\n\nRay noted her stubborn reaction. His voice took on a stern edge \"Look at me.\"\n\nRachel reluctantly met his eyes.\n\n\"You're a pretty crier,\" Ray murmured a thoughtful observation that seemed very ominous for the future. \"That's a rarity.\"\n\nThen he went to find a condom. A minute later he was back, much too soon in Rachel's opinion, and positioned himself behind her.\n\n\"So fucking wet,\" he purred, circling her tingling entrance with his bare cock and watching her body shudder with fearful anticipation.\n\nIt felt like dipping his tip in luxurious oil, her juices seeped so thickly. Gently gathering some of her wetness, he massaged it along his shaft, slickly coating his cock before sliding the condom over it. It was the closest he'd feel to fucking her unprotected.\n\n\"Oh, hon, look at you. I'm so glad we could resolve this problem together.\"\n\nThen Ray pushed inside her; his thick, invasive girth slid forward like a knife through warm butter. Rachel's sex felt luxuriously cushioning; puffy from so much attention. It made her tunnel feel strangely tighter and more accommodating at the same time.\n\nRachel whined into the padding and Ray groaned with delight. He'd wanted to take her from behind since the beginning, not necessarily like this, but it was a start.\n\nRay wasn't a huge BDSM fan; his preferences ran toward steamy vanilla encounters, like their very first time. It was only fun now because he was making a point.\n\nSlowly buried to the hilt, Ray paused to squeeze her tight ass and spread her cheeks so he could see how deeply they joined together. Then he moved his hands up her back, and down again to settle on her waist in a firm grip.\n\nSuddenly, her pussy reacted; this time to being stretched, as opposed to buzzed. It felt more comfortably satisfying than the other oversensitive orgasms. The gentler sensation of being filled with Ray's cock was preferable to the wand pressure. On the whole it was a small, fizzling after-orgasm, but Ray still felt it lightly ripple across his shaft.\n\n\"That's my girl,\" he breathed, sounding slightly intoxicated.\n\nRay's intimate thrusts were insulting. He made love to Rachel's immobilized, restrained figure, as though she gifted herself to him.\n\nFor Rachel, an irksome full feeling followed every time Ray's cock entered her. The worst part was when his balls lightly slapped her engorged clit. His hands were constantly stroking, touching, kneading; silently signalling that he adored her body. Ray bent forward, his hard chest flush against her back, sliding his hands under to cup her breasts that had no choice but to fall perfectly into his waiting hands.\n\nThen he increased tempo and Rachel whimpered as the table rhythmically shifted under their weight. Ray was grunting, fondling her breasts as though he'd never touched flesh so soft and firm. The touch made his cock occasionally jump inside her with fresh thrill.\n\nAs Ray continued to fuck her from behind, Rachel felt like they were animals in the wild. No, worse. Years ago, she'd read about a horrific experiment where a tame monkey, raised in captivity, was forced into a contraption that mimicked a mating invitation. Then a wild male was introduced and left with the frightened female trapped in a sexually submissive position.\n\nRachel believed she might know how those helpless animals felt. The bitter comparison seemed right on point when Ray's teeth unexpectedly sank into her neck.\n\n\"Owww! P-Please, Ray, don't bite me! It hurts!\" she winced, uselessly trying to pull away.\n\nOne of Ray's hands tweaked her nipple and smoothed up her neck. He gripped her chin and guided her look back at him.\n\n\"Then kiss me, properly.\" Ray's voice lustfully quivered as he panted the order, with an evident threat of prolonging the event. \"Do it, hon, and I'll cum, I fucking swear I will! Come on!\"\n\nRachel needed no more encouragement, and eagerly kissed him. She moaned against his searching tongue, extended her own and arched back as though she couldn't get enough of the thick cock relentlessly pumping her.\n\n\"Oh, Rachel,\" Ray groaned against her lips, slowing his thrusts.\n\nPetrified his easing down was a sign of endurance, Rachel's mouth moved hungrily; she teased his lower lip with a soft pinch of her teeth. Ray groaned louder, his cock swelled and flexed inside her and began to withdraw. Out of her mind with desperation, Rachel thrust back before he fully vacated her, gently sucked his lip and moaned around it.\n\nThe alluring, sultry sound zinged from Ray's mouth right down to his balls. Frozen in place so his lip stayed between her teeth, Ray went rigid as his orgasm surged forward. His cock strained and pulsed snugly in Rachel's moist, clenching walls.\n\nEven through the condom Rachel felt every forceful spurt of Ray's cum, counting them, right up to seven. Ray held position; his eyes shut with pained intensity. Finally, he breathed a deep sigh of relief, his eyes glittered with satisfaction as Rachel released his lip and collapsed against the table.\n\n\"Please, take it out,\" she whispered against the cool padding, and Ray slowly obliged.\n\nOne by one, her sore limbs were freed from restraint. For half a minute she lay there, feeling completely sapped of strength but glad it was over. Ray's hoarse chuckle sounded nearby; a triumphant, after-sex chuckle that added a few cherries atop Rachel's proverbial cake.\n\n\"Come on, hon. I think another nap is in order.\"\n\nOn this rare occasion, Rachel agreed with him, since she didn't think she could walk. Ray gently gathered her into his arms, her head lolled despondently against his chest while he carried her. He was still heavily panting; his heart steadily thumped by her ear.\n\nThe tiniest silver lining was that Ray seemed set on calling her either 'Rachel' or 'Hon'. Thankfully he didn't taint the multitude of pet names Ben had for her. It was a small mercy.\n\nRachel was even more physically and emotionally strung out than the previous day. Back in bed, she was pulled tightly against Ray's chest; he seemed to favour that position.\n\nThen Rachel did the only thing she seemed to be good at these days; she cried herself to sleep. Her tears dampened Ray's skin while the steady rise and fall of his chest lulled her. Ray's hand moved indulgently through her hair, his fingers idly massaged her scalp until she fell asleep.\n\n*****\n\nAn hour later, Rachel opened her eyes and moaned miserably, realising she was back in a living nightmare.\n\n\"What is it, hon?\"\n\nOf course, Ray was awake. It was like he had some kind of silent alarm that ensured he was conscious before her. It seemed a petty desire, but Rachel sorely missed her 'alone time'. At least, she would like to wake up without being physically tangled with a man she severely disliked.\n\n\"Nothing,\" she mumbled.\n\n\"Aw.\" Ray's arms closed around her. \"Let's have a shower, then I'll make a snack.\"\n\n\"I'm not hungry.\"\n\n\"You will be.\"\n\n\"Ray...\" Rachel forlornly wriggled from Ray's arms, managing only because he allowed it. \"I'm really struggling with this.\"\n\nRay calmly watched Rachel wring her hands with angst, his expression neutral, as though she hadn't made a point. \"And?\"\n\n\"And...\" Rachel swallowed. \"I want...I want to sleep downstairs.\"\n\nShe knew Ray wasn't dumb; that he knew exactly what was wrong with the fucked-up situation. But he was also in her face every second of the day.\n\nRay thoughtfully pursed his lips at her request. \"I'd prefer you sleep up here, with me.\"\n\nHis tone was final. It was more a conclusion, than a statement of preference.\n\nOverruled. Rachel pouted bitterly. \"I want to do the photos to clear Ben.\"\n\n\"I told you, an investigation lasts-\"\n\n\"I want to do them now,\" Rachel bluntly interrupted in an uncharacteristic show of defiance.\n\nRather than take offence, Ray seemed intrigued by her attitude. \"Oh? In a hurry?\"\n\n\"I love him,\" Rachel blurted. Her voice broke, tears brimmed, but she soldiered on, briskly wiping the tears as they flowed. \"You win, Ray. I don't want to be found.\"\n\nRay watched her impassively.\n\n\"I can't relax, when I'm worrying about Ben,\" she finished, when he didn't comment.\n\nIt was true. To wish for rescue would be pure selfishness. Whilst Rachel quietly mourned that her loved ones would never have closure, she would never endanger them with the risk of Ray turning up. Ray quite easily snatched her from a private apartment, and she could never forget his simple threat to kill Ben.\n\nThe flittering fantasies of rescue were just that -- fantasy. She couldn't live her life wondering if Ray might show up with a gun and kill her parents, or Ben. Ray had demonstrated his threats were not idle. He was a killer, and very comfortable with it. And for whatever reason, he'd fixated on her.\n\nThe best she could do is help Ben from a distance, so he'd have his old life back. Then she would exist indefinitely under Ray's reign until his or her life ended. The conclusion was heart wrenching, but it was the best outcome she could surmise at that point.\n\nThe soft amusement in Ray's eyes had turned rather steely. He didn't like that first part, at all. Nor did he like the fact it bothered him.\n\n\"I see.\" With a cool smile, he shifted to the end of the bed and took Rachel's hand. \"Shower time.\"\n\nUnder the spray of hot water, Ray seemed indifferent to Rachel's nudity, except for the very stiff erection pointing from his body to occasionally brush her hip. He was also quite dedicated to ensuring her breasts were adequately soaped up, though relented when Rachel begged to wash her lower body herself.\n\nTwenty minutes later Rachel found herself back in the teal pyjama set, nervously waiting on a kitchen stool while Ray made brunch.\n\nRay pursed his lips at his pantry, wishing he'd bought chives. Then again, it didn't matter if the meal wasn't to his usual gourmet standard. Rachel wouldn't remember it. Once the Ditzer took effect, she'd be lucky to string an entire sentence together.\n\nWhilst the drug was designed to get answers without physical brutality, Ray didn't want answers. He wanted action. And the way she was steadily declining into some kind of depression would put a damper on their sex life. Ray completely understood her feelings, but they were no less inconvenient.\n\nOnce again stooping to a new level of low, he felt the move was justified. Rachel pissed him off when he shouldn't give a shit. But for some infuriating reason, he did. The fact only made him angrier. If drugging her was what it took to wipe that other guy from her mind, even for less than an hour, he was going there.\n\nRay calmly watched Rachel's fork waver in her hand, then bounce from the table and loudly clatter to the floor.\n\n\"I...\" she stared at the utensil on the ground, struggling. \"I...\"\n\nHer head jerked up, realising Ray stood beside her.\n\n\"I feel weird,\" she mumbled, allowing him to lead her by the hand up the stairs to his bedroom. Her legs worked, but also felt like they didn't belong to her. She wondered if she was going into shock.\n\n\"Here, put these on.\"\n\nRachel robotically accepted the silky material from Ray and held it in a loose grip.\n\n\"Why?\" she slurred.\n\n\"Because they'll look incredible on you,\" Ray answered in a heartbeat. \"It's for Ben.\"\n\nBen. \n\nRachel numbly stared at the lingerie. Welcome to prostitution 101. \n\nShe surprised herself with a giggle. Somehow, the wretched situation was suddenly funny. Sitting back on the bed, Rachel leaned back, clumsily lifting a beige stocking to her toes. Then she closed her eyes and tumbled onto the mattress.\n\nLarge hands touched and maneuvered her limbs; sheer, silky material coated her skin. It felt nice. It felt out of place. The air stimulated her chest, exposed as the buttons of her shirt popped open one by one. Warm lips briefly fastened around the peak of one breast. Rachel whimpered; her eyes still closed.",
        "Softness enveloped the top half of her face. Blinking against the material, Rachel tried to remember who she was, where she and what was happening. Warm hands deflected her attempts to touch or manipulate the blindfold.\n\n\"Rachel?\" The deep voice sounded familiar and outlandish at the same time.\n\nRachel deeply exhaled. \"Why can't I see?\" she asked faintly, her voice quivered with confusion.\n\n\"It's a game we play. Relax.\"\n\nRay noticed the word made her shudder. \"Who am I?\" He whispered.\n\nRachel lazily lay back against the pillows with a shrug. She was ready to be manipulated.\n\nPeople varied in their reactions. Some lost complete awareness, others maintained some resemblance of instinct. Ray could tell Rachel felt something was awry, at the same time she wasn't questioning it. Not aloud, anyway.\n\n\"Who am I?\" Ray repeated in hushed tones. Perhaps a half-dose was too much.\n\n\"I... I don't know. Who are you?\" Her voice sounded muted, as though her tongue thickened. A normal reaction.\n\n\"Who would you like it to be?\"\n\nDespite it all, a big dopey grin formed on Rachel's face. Ray had never seen her smile like that before.\n\n\"Ben.\"\n\nPrior to that moment, Ray suspected his interest in Rachel, though initiated by an animal attraction, was fuelled by the fact she didn't want him. That's why he chased her. But the second she smiled like that; his theory went up in flames.\n\n\"I love Ben,\" Rachel brashly announced with a lopsided grin.\n\nThough irritated by the disclosure, Ray couldn't resist the dreamy smile on her face. He kissed her.\n\nRachel smiled against his lips, and Ray retreated for a quick moment to tug his shirt off. When he pressed closer, Rachel hummed thoughtfully, her hands caressed his strong shoulders, inquisitively stroking his hard chest.\n\n\"Ben?\" she asked uncertainly.\n\n\"Yes,\" Ray replied, careful to speak in whispers.\n\nThen his mouth was busy, kissing her lips, cheeks, down her neck. Rachel giggled at the ardent attention, but still squirmed with a sense of discomfort.\n\n\"I don't understand,\" she muttered.\n\nRay did some quick thinking. Don't say 'relax'. \n\n\"Don't worry,\" he reassured her. \"Don't worry about anything. Just give yourself to me.\"\n\nAfter a resigned, wistful sigh, she did. Looping her arms about his neck, she arched, letting Ray kiss down her neck to her breasts.\n\n\"Oh,\" she breathed.\n\nA warm mouth sucked onto one of her nipples then transferred to the other. The sensations sharply sparked down her torso, to right between her legs. In addition to that, her whole body weirdly tingled all over, as though she lay upon a vibrating platform.\n\nRay held his breath when Rachel lightly moaned and arched for more, encouraging his mouth at the same time her legs edged apart so he could lie between them. Ray felt the heat there, the pulsing of her arousal, her racing heartbeat.\n\nRachel was so pliable and soft; sensual putty in his hands. She made a small disappointed sound when his mouth left her breasts and moved down her body. The gusset of her panties was suddenly gone, exposing that aching part of her to cool air. Then warm lips caressed her, and she gasped.\n\n\"Ben,\" she moaned, slowly bucking against Ray's face. \"I'm your girl. I'm yours.\"\n\n\"Is that good?\" Ray groaned, feeling both a total joke, and ridiculously pleased.\n\n\"It's usually better,\" Rachel tittered.\n\nOuch. Ray flinched against her pussy. As far as the drug's commercial purpose went, he was getting his money's worth -- unfiltered, brutal honestly. A half-dose was clearly too much.\n\nStill, he couldn't believe that even in a state of total obliviousness, Rachel still found a way to insult him.\n\nWith his tongue sliding intimately into her, swirling around her sweet juices, Ray concluded this was the absolute lowest point of his sex-life; the most humiliating, disrespectful thing he'd ever done to himself. The worst, most pathetic part was that he was OK with it. After enjoying a successful run with women, now he was content to pose as another man.\n\nLifting his head to stare up her body, Ray inserted his thumb and watched Rachel's mouth part with rapture, her breasts strained to the ceiling when his forefinger wetly circled her swollen clit. Rachel moved in rhythm with Ray's fingers, desperate for more. Though her eyes were covered with the blindfold, the sight was still so fucking hot.\n\nRay felt a pleasurable ache through his chest as he observed the stay-ups wickedly clutching Rachel's thighs, looking just as incredibly erotic as the first time he'd fantasised about it.\n\nRachel was in limbo. Suspended. Catapulting through various states of mind as though she flew through a hundred scenarios within seconds. She was in her parents' kitchen, looking for food. She stood outside her work, staring at the dull building. Toby drunkenly laughed in her face. She asked Marcus not to drive so fast. Ben was there, offering a spoon of delicious sauce for her to try. They were in bed together. She was safe. She was so happy she cried.\n\nThe blindfold helped, but even in darkness, Rachel felt like she was falling, flying, comfortably moving at the speed of light.\n\nAnd she felt eager; desperate. But the man was so wrong for her. There was something important to recreate. It was a driving need.\n\nRay couldn't take his eyes off the big, stupid smile on Rachel's face. She had good teeth, which he could never really appreciate except for the one time she snarled at him. He wished he could take off the blindfold and see her eyes, but knew it'd be a mistake. Still, it was a shame she'd never look at him that way.\n\n*****\n\nThe blackness blurred and tremored; shards of light cut through the dark. Rachel made out the white-painted ceiling. The ceiling was rhythmically moving.\n\n\"What...\"\n\n\"Hey.\" Ray spoke huskily against her temple, his body tensed on top of her.\n\n\"What's happening?\" she uttered, her hands gripped Ray's biceps. Her legs were...\n\nCurled around Ray's hips. Now Rachel realised it wasn't the ceiling that was moving; she was moving with Ray's steady thrusts. She instinctively held onto him, her pussy wetly embraced his girth sliding in and out of her. Rachel wondered with a stab of dread if Ray used the vibrator on her when she passed out.\n\nRachel shook her head against Ray's shoulder, her eyes on the discarded blindfold between them. She'd passed out. Now she was having sex. The last thing she remembered was silk stockings in her palm. She couldn't recall what came before that. How long had she been out of it?\n\nThere was music. The sounds increased her sense of panic; a nightmare reaching full bloom. Rachel groggily comprehended she was sexually appeasing a murderer to save the man she loved, with jazz playing loudly in the background.\n\nOf course, there were worse things in the world, but in that moment, Rachel considered this particular scenario a succinct definition of 'Hell'.\n\nRay caressed her breasts with one hand, still straining against her body, shuddering with delight every time he squeezed into her. Feeling her nails dig into his skin, Ray knew Rachel was reverting to a lucid state of mind. Perhaps he should have given her a normal dose. No, she was still right where he wanted her.\n\n\"Ray, what are you doing?\" she whispered, weakly pushing his chest. \"Please...\"\n\n\"No, don't speak!\" Ray ground out, determined not to let a piteous objection ruin his orgasm. After a deep thrust that made Rachel whimper, he slowly backed onto his knees, pressing her thighs back to her torso.\n\n\"I'll be quick, hon.\"\n\nRay jerked his hips, watching Rachel's full breasts echo his movements in delectable jiggles. Watching them bounce in motion with each thrust, Ray considered taking them into his mouth. But he wanted to see all of her, dressed the way he wanted while they fucked.\n\nHis gaze dropped down to Rachel's pussy, pinkly suctioning his cock with every pump. Then they locked eyes.\n\nRachel gaped at Ray towering above her. Completely naked, his whole body was thick with tension, every muscle flexed. There was an intense look on his face, his hazel eyes wide with unusual passion, as though he was having some kind of epiphany.\n\nIt didn't matter that Rachel looked afraid and confused. Ray was satisfied by the mere fact she was looking at him. It was a new sensation that he supposed came with being a creep. But he couldn't help the way he felt; hot, empowered, protective.\n\nNatural endorphins flooded his brain and his chest ached with exciting hope. With fresh purpose.\n\nHe didn't need money. He didn't need to wander aimlessly through cities of strangers until a job was complete. That was why he found Rachel in the first place; he was so fucking bored.\n\nThere was always some level of satisfaction when he finished a job. Now, he didn't care if he never experienced it again.\n\nAll he needed was one person. A perfect coexistence.\n\nRay groaned, thrusting harder as the bizarre line of thought took him over.\n\nFinding Rachel was a stroke of luck for both of them. No one could keep her safe like he could; he was better for her than any man. She was so gentle; too gentle for the world. He could protect her from any threat. One day she would understand they were a good match.\n\nThe drugging was wrong; he'd never do it again. He had a responsibility to her, now. He took good care of his belongings.\n\nRay closed his eyes, his jaw clenched as an orgasm fiercely simmered up his lower body.\n\nFinally, at last, he found a way to twist his perspective on the circumstances and rephrase the situation to his liking.\n\nIt's the right thing to do. She should be yours. You're doing the right thing.\n\nRay collapsed forward, supporting himself on one arm so he didn't crush Rachel. Slowing his thrusts, Ray curled over her, moaning against her turned cheek. His cock ached and stiffened as it filled a second condom. She wouldn't remember the first.\n\n\"What did you do?\" Rachel sobbed against his shoulder, lying stiff with distress under him.\n\nRay knew she didn't understand what happened; didn't know she actively cooperated. She wouldn't remember kissing him so passionately that the blindfold became a hindrance she eagerly removed with her own hands.\n\nShe would only remember it as a blackout. It was better that way.\n\n\"I'm sorry,\" Ray panted. \"I won't do this again.\"\n\nStill shivering from the powerful release, he kissed her neck.\n\n\"I'm sorry, Rachel.\"\n\n****\n\nAhmed switched off the engine. \"Ben, help me unload equipment.\"\n\nBrian took the hint and waited in the car.\n\n\"Are you ready for this, Ben?\" Ahmed asked as they stood at the rear of the vehicle.\n\n\"Yes.\"\n\nAhmed slowly reached for his duffle bag. \"I need to make something clear.\"\n\n\"Go for it,\" Ben carefully accepted a small metal case and placed it on the ground.\n\n\"Once I verify Rachel's alive, we'll send Marcus in.\"\n\n\"I'm on board with the plan, Ahmed.\"\n\n\"It's imperative you follow my instructions when things get started.\"\n\n\"Of course,\" Ben retorted. As if he'd do anything to jeopardize Rachel's rescue.\n\nAhmed took a deep breath. \"It means that if I say so, you'll hold your tongue and stay put. Even if Rachel's being abused. Is that clear?\"\n\n\"Uh oh,\" Brain murmured, watching Ben's face in the side mirror.\n\nBen's jaw worked. \"Right,\" he said unconvincingly.\n\n\"I will make myself clearer, Ben,\" Ahmed said smoothly. \"Brian is paying me a lot of money to retrieve Rachel. Don't put me in a position where I have to take you out, to succeed.\"\n\nAhmed turned to the open hatch. \"To lose control of your emotions in a situation like this would be catastrophic. The love you have for another person can be the very reason they die. If I was given the same advice at your age, I would still have two beautiful sisters.\"\n\nBen heard the bitter anger in Ahmed's voice.\n\n\"I'm sorry, Ahmed,\" he said simply.\n\nAhmed nodded and unloaded the remaining pieces.\n\nBen cleared his throat. \"What if she's not at the house?\"\n\n\"Then I'll track her. Alone.\"\n\n\"And if...\" Ben couldn't say it.\n\n\"Then I'll help you finish him. But I'm confident Rachel is at the house, alive. I'm not an optimist; it's a gut feeling. One more thing.\"\n\nAhmed glared at Ben. \"I know you'll be tempted, but you're not to bully Marcus. We need him, and he'll already be nervous.\"\n\nBen snorted, feeling like he was being lectured by a schoolteacher. \"Don't expect me to shake his hand.\"\n\n\"Then I suggest you wait in the car while he gets ready.\"\n\n\"Agreed.\"\n\nIt had been Ahmed's idea to use Marcus. Brian didn't like it, but agreed it was the best option. If a stranger encroached on Ray's property, he would likely shoot first and ask questions later. If it was a recognisable threat, like Ben, a more severe approach would apply. Marcus was the perfect middle ground.\n\nBrian and Ahmed were amazed by how quickly Marcus agreed to the plan for Rachel's sake. Shockingly, it turned out he was capable of loving someone even more than himself. In possibly his most parental act yet, Brian spent several hours explaining the gravity of the situation, what the plan involved, the risks, and most importantly that if it succeeded, Marcus would have no claims on Rachel whatsoever. It was a chance to help amend his disastrous error; not an opportunity to win her back.\n\nWith surprising maturity Marcus accepted the terms, and shared that he had never been part of anything that mattered, never been needed or useful, and that it would be nice not to be a burden for once. Brian felt a stab of guilt and was about to express his own regrets about his failings as a guardian, but the rarely poignant moment between them shattered when Marcus suddenly observed that Brian's suit was ridiculously slim-fit for a man shaped like a sausage.\n\nAhmed found Marcus kicking rocks around the meeting point. As usual, he looked broodingly petulant, but Ahmed knew it was just to mask his fear.\n\n\"You made it,\" he remarked, managing not to smile when Marcus jumped with fright and almost lost footing. \"Let's go.\"\n\nBy the time they returned from the meeting point, Marcus was quite pale and visibly shaking. As recommended, Ben waited in the car.\n\n\"Last chance to back out, kid,\" Brian said, reaching into a small brown backpack.\n\nThough his shirt was soaked in sweat, Marcus shook his head, determined to see it through. \"What do I do?\"\n\nBrian pulled a bottle of expensive vodka from his bag and handed it over. \"Just be yourself.\"\n\n\"He's going to question you,\" Ahmed warned, watching Marcus take a particularly long swig from the glittering bottle. \"It won't be pleasant.\"\n\nMarcus winced; clear liquid spilled down his chin as he coughed. \"What do I say?\"\n\n\"Tell him the truth. He's trained to ignore the first thing a prisoner says. After that, tell him anything you want, real or fake. He won't be able to get the truth out of you, because you've told him already.\"\n\nThen Ahmed left them alone, and over the next half hour Brian grimly watched the vodka bottle become steadily emptier.\n\n\"Slow down, Marcus. I think you're ready. Ahmed will cover you until you're in the house, then you're on your own for a while. Don't worry -- this guy is too smart to kill you; he'll want to know how you found him and who else knows.\"\n\n\"Alright,\" Marcus said dizzily, clumsily trying to retain a hold on the bottle Brian pulled from his grip. \"I think I need another drink.\"\n\n\"Any more, and you'll spew.\"\n\nAhmed returned, pressing buttons on a lap-top device with a supporting leather strap looped around his neck. \"She's alive. Heat signal is definitely female. Soft perimeter; deactivated two at the rear of the house. The rest are active.\"\n\n\"But if I set one off, he'll know I'm coming,\" Marcus slurred.\n\nAhmed waved an unconcerned hand. \"That's what we want. If he knows there's someone like me around, he'll go into fight mode. We don't want that.\" He checked the screen and pointed. \"Go that way.\"\n\nBrian looked slightly stricken as Marcus obediently lurched away.\n\n\"Kid?\" he called.\n\nMarcus lazily turned.\n\nBrian hesitated. \"I'm proud of you.\"\n\nSomething emotional flickered in the depths of Marcus' eyes, but he resumed his clumsy march toward Ray's house without reply.\n\nRay was busy smiling into Rachels hair, until he heard the knocking. He swiftly extracted himself from the bed, ran down the stairs three at a time and saw the silhouette against the front door.\n\n\"Fuck!\" he whispered, clawing both hands through his hair. He sprinted up the stairs.\n\nRachel felt mildly apprehensive when Ray returned. The alarm on his face was very real, and he pressed an urgent finger to his lips and quickly led her from the room.\n\n\"Don't make a sound, trust me,\" he warned, fear in his eyes. \"For the love of life, you have to trust me. It's not help.\"\n\nConscious something was awry; Rachel couldn't be certain exactly what it was. Of course, she didn't trust him. But what she believed she could trust, despite everything abhorrent about their 'relationship', was that he wanted to keep her safe. Still mildly disoriented from the drug, she obediently followed Ray downstairs, through the kitchen to her original prison.\n\n\"Put some clothes on,\" Ray said quietly. Looking anxious, he paused to say something else, but whoever was at the front door knocked again, and he quickly locked Rachel in.\n\nHastily dressed in bed clothes, the first thing he could lay hands on, Ray told himself to breathe, staring at the familiar shadow on his doorstep. Shaking off his nerves, he relaxed his stance and calmly opened the front door.\n\n\"What are you doing here? I don't like surprises.\"\n\n\"It wouldn't be a surprise if you returned calls.\"\n\n\"Yeah.\" Ray thoughtfully sucked his bottom lip between his teeth. \"Can you come back later? You caught me at a bad time.\"\n\n\"No time is good for you,\" the visitor smirked, crossing his arms. He was slightly shorter than Ray, with dyed jet-black hair and tawny green eyes. \"It's been a fucking year. You're not gonna turn away your big brother, are you?\"\n\n******\n\n\"What the...? Brian, stop him!\" Ahmed hissed, staring through binoculars.\n\nBrian frantically caught up with Marcus and dragged him back.\n\n\"What is it?\" Brian panted. \"Did we trigger something?\"\n\nMarcus slowly fell to the ground when Brian released him, looking giddily relieved.\n\nAhmed shook his head and pointed to his bag without breaking his gaze. \"No. Someone's at the house. Not our guy. Get a pen.\"\n\n\"Who is it?\"\n\nAhmed turned slightly, narrowing his eyes at the lenses. \"Take down this numberplate. I have to get closer.\"\n\n*******\n\nLogan smiled at Ray's brooding countenance. \"This will teach you to return calls. When you don't answer in three months, I worry.\"\n\nRay felt rather disgruntled that Logan made it to his doorstep without triggering any alarms. But it was nothing on the huge waves of anxiety he was fighting to conceal. Logan was the only one who knew how to rattle him. He was the only one who could read Ray's moods and mannerisms.\n\n\"You know I'm busy.\"\n\n\"So am I. Speaking of...\" Logan trailed a finger down the table between them. \"Have you reconsidered joining me?\"\n\nRay cast him a look of bored annoyance. \"You know I quit group work, when I quit military.\"\n\n\"This is different. The dream team could use your skill.\"\n\n\"The 'dream team' is struggling?'\"\n\n\"Sometimes we need a pretty boy's smile to woo a female guard.\"\n\n\"Ha ha,\" Ray said flatly.\n\nLogan carefully observed his brother, noting a visual difference he couldn't quite interpret. In addition to that, an unusual tension lingered around them and he couldn't figure out the cause.\n\nRay disinterestedly met his eyes, then looked away.\n\nLogan grinned. Even though he had to ambush Ray for quality time, his chest swelled with pride whenever he laid eyes on him. Under his watch, the nervous, lean teenager grew into an impressive man.",
        "An efficient killer; taller and stronger than himself. All Ray lacked was ambition. But he was unfortunately beyond the age of being told what to do, and Logan had to tread carefully.\n\n\"Alight, I'll bring it up again next year.\" Logan finished off his beer, narrowing his eyes at Ray's rigidity. \"Ok, you've been strange since I arrived. What are you hiding?\"\n\n\"Nothing.\"\n\n\"You know I won't leave until you tell me.\"\n\n\"I want to be gay with you.\"\n\nLogan threw back his head with a laugh. \"You need to get laid.\"\n\nRay's glowered at his cider. He had to get rid of Logan so he could continue to get laid.\n\nLogan cocked his head. \"Fuck, I haven't seen you in pyjamas since you were thirteen. What's going on?\"\n\n\"Your imagination is in overdrive,\" Ray said dryly.\n\n\"I know; I'm your fucking brother. Are you having a nervous breakdown?\"\n\nFeeling his fa\u00e7ade unravel, Ray rubbed the back of his neck. \"I'm on a job.\"\n\n\"Why didn't you say?\" Logan replied, astutely appraising Ray's crumpled bed shirt. \"You look like you're on vacation.\"\n\nRay shrugged again.\n\n\"Oh, come on,\" Logan scoffed, pushing his seat back but making no move to rise. \"You don't trust me? Who helped you set up the basement of this house?\"\n\n\"It's not that.\"\n\n\"Wait a minute.\" Logan's eyes shrewdly narrowed. \"You're working? You've got someone downstairs?\"\n\n\"No.\"\n\nLogan laughed scornfully. \"You always forget I can tell when you're lying.\"\n\nRay grit his teeth. \"Just leave it, ok?\"\n\n\"This secrecy is mind-blowing. Come on, show me what you got down there. I'm guessing it's their last days if they're in the basement.\"\n\n\"I'd say it's permanent,\" Ray said evasively, his mind in damage-control. He was unprepared. Unarmed.\n\n\"Ok, I can't handle this mystery. Lead the way.\"\n\nRay angrily bit his lip, but he knew his brother's tenacity. If Logan's curiosity wasn't appeased, he would find a way into the basement, whether it was an hour later, or weeks later in the dead of night.\n\nThey may as well have it out now, in the open where Ray could keep his eyes on him. Or fight him on even ground. Ray was taller and more muscular, but Logan fought dirty.\n\n\"Don't scare her.\" Ray felt stupid saying it aloud, but he had to.\n\n\"Her?\" Logan purred, a curious spark lighting his green eyes. \"Is she a hottie?\"\n\n\"Whatever she is, you can't touch her,\" Ray said sourly. \"I'll get you a mask.\"\n\nLogan rolled his eyes. \"If she's seen your face, it won't matter if she sees mine.\"\n\nRay paused, distracted by an early memory of deciding to let Rachel see his face without knowing if he'd have to kill her for it. The staggering realisation of how far his mindset shifted in a matter of days.\n\n\"Aha,\" Logan smiled arrogantly. \"So, she's seen your face. Interesting.\"\n\nRay almost swore aloud, wishing he could take the butt of a rifle to Logan's gloating smirk. Instead he clenched his jaw and silently went downstairs. He knocked loudly, giving ample time for Rachel to prepare.\n\n\"What a gentleman!\" Logan mocked.\n\nRay slowly opened the door and Logan leaned against the frame with a sinister wolf-whistle.\n\n\"Hey, sugar.\" He cocked his head at Rachel's wide-eyed bafflement and stepped into the room. Ray quickly followed and stood between them.\n\nA low chuckle escaped Logan. \"Relax, Ray. I always wondered if you were human. She's purty. Can I spend some time with her?\"\n\n\"No. Out. Now.\" Ray grabbed Logan's jacket sleeve and pulled him into the stairwell, slamming the door and locking it again. \"We need to talk.\"\n\n\"Alright, alright,\" Logan snickered as they entered the kitchen. \"Even when we were kids, you never shared your toys.\"\n\n\"She's not a toy, Logan.\"\n\nLogan flung himself into a seat at the table. \"Whatever. Just don't tell me you've fallen for some skank.\"\n\nRay unwittingly hesitated, and Logan straightened with astonishment. \"What the fuck, Ray? Are you insane?\"\n\n\"Calm down, I'm not in love with her!\" Ray growled.\n\n\"I knew something was wrong the second you opened the door!\" Logan sneered. \"I just never thought this was possible! You may as well hold a fucking rose between your teeth!\"\n\n\"You're being ridiculous.\"\n\n\"So, what is she? Your girlfriend? As in, a girl who understands what you do and accepts it, or is she a job?\"\n\n\"She started out as a gig-\"\n\nLogan was on his feet. \"She's fucking grey-area?\"\n\n\"Stay out of this,\" Ray warned, his temper flaring as Logan shed his leather jacket and rolled up his shirt sleeves. \"What are you doing?\"\n\n\"I'm fixing your problem, before you ruin your life!\" Logan snapped, and held out his hand. \"Give me a gun.\"\n\n\"No.\"\n\n\"Ok, I have one in the car.\"\n\nRay's eyes blazed. \"Don't interfere, Logan.\"\n\n\"You done the grave test?\"\n\n\"Yeah. No problem.\" Ray immediately regretted his answer. Seeing the unimpressed look on Logan's face, he closed his eyes and braced for an argument.\n\nThe mythical 'grave test' was mentioned in passing to new recruits and joked about among veteran assassins. It was a theory about unique occasions a killer may be at their wit's end about a target; doubting their ability to go through with a kill.\n\nThe conflicted one would dig a real grave with intent. They'd picture going through with the murder and imagine dropping their lifeless victim into the hole. Then they listened to their gut.\n\n\"You did the grave test over a girl?\" Logan clarified with disgust.\n\nHe was revolted, horrified and ashamed of the change in his brother. Ray had opened the door looking like a fucking stay-at-home Dad. Of course, it was about a woman.\n\nBut Ray was always so fucking level-headed. He didn't have time for dating or girlfriends. Logan never had to worry about anything like that spoiling his agenda. And now, out of fucking nowhere...\n\n\"It's not a problem,\" Ray snapped.\n\n\"You don't know what you're doing, little bro,\" Logan jeered, pointing to the doorway. \"The bitch will ruin you. How could you be so stupid?\"\n\n\"My life is none of your business,\" Ray retorted, briskly blocking the doorway and crossing his arms.\n\n\"It is when you're my brother!\" Logan barked.\n\n\"I'm warning you.\" Ray spoke quietly, and Logan knew he was deadly serious.\n\n\"You'd turn on me, over a girl?\" he breathed.\n\n\"My job is to keep her alive, and unharmed,\" Ray firmly lied.\n\n\"Right.\" Logan crossed his own arms, his eyes again cynically raked Ray's comfortable clothing. \"You're looking kinda casual for a man on the job.\"\n\n\"I can't relax in my own home?\"\n\n\"NOT WHEN YOU'RE WORKING, YOU DON'T!\" Logan roared. \"Don't pull bullshit wool over my eyes! I've seen this happen before and it always ends badly!\"\n\n\"You need me on your team, but suddenly I can't handle one girl? Doesn't add up, does it?\"\n\nLogan's smile was ugly; eyes bright with rage. \"Go on, kid. Get it out. Say what you want to say.\"\n\n\"I want you to leave me alone.\"\n\n\"After you give me the girl.\"\n\n\"What's the problem, Logan?\" Ray challenged, his heart pounding with black anger. \"Be transparent, for once. You're not worried about me. You're threatened by her.\"\n\nLogan gave a short bark of laughter. \"I'll have to go a few rounds to determine what kind of threat she is.\"\n\n\"You know what I mean. You're scared I'll settle down.\"\n\n\"I didn't see a ring on her finger,\" Logan shot back. \"And you'd have to be a complete imbecile to give up-\"\n\n\"Stop.\" Ray took a deep breath, staring into his brother's eyes. He leaned forward and spoke very slowly.\n\n\"I am not joining your squad, ever,\" he said with soft hatred. \"It doesn't matter if I'm single, gay, or married with ten kids. I am not changing my mind.\"\n\n\"You, stubborn bastard!\" Logan turned away, incensed. \"Whatever. Take your time. But that girl has to go.\"\n\n\"You're not listening.\"\n\nLogan looked back at Ray's fierce expression and shook his head. \"Please, Ray. Give her to me. I won't do it here. I'll fix it off the property.\"\n\n\"No.\"\n\n\"Goddamnit, I taught you better than this. I never thought I'd have to talk sense into you.\"\n\n\"I said, 'no'.\"\n\nLogan smacked his lips thoughtfully. \"And if I promised not to rape her?\"\n\nRay bared his teeth. \"Get out.\"\n\n\"You're a fucking mess. I can't let you do this to yourself.\"\n\n\"Get out.\"\n\nLogan incredulously shook his head. \"You know I'll come back.\"\n\n\"And you should know I'll put a bullet in you before I let you touch her,\" Ray countered, shocking himself. Did he really mean that?\n\nLogan smiled coldly. \"Got it, kiddo.\" With a heavy sigh he sauntered to the kitchen table and picked up his keys. \"Guess I'll see you around.\"\n\nRay stonily watched his older brother stroll from the room. He didn't move until he heard Logan's car drive away.\n\nThen Ray paced the kitchen in a panic. He had to get Rachel out of there. Sneaking her out in the dead of night would be a mistake, Logan would anticipate it. There was no time to wait; the longer they stayed, the closer Rachel came to certain death.\n\nIronically, Ray realised his cocky claim to be able to protect Rachel from any danger was about to be tested. Strenuously. The challenge was serious. It wasn't about personal risk or unwanted feelings or coercing a reluctant girl to tolerate him. Now, it was a matter of keeping Rachel alive.\n\n\"Fuck! Fuck! Fuck!\" he said savagely.\n\nIt was true, he normally ignored his brother. Logan was also ex-forces, five years older, and groomed his baby brother since they hit puberty, mentored him through black ops and then guided him out of it.\n\nLogan had big plans for Ray; bigger jobs, skilled teamwork, espionage at the highest level. High stakes and steeper payoffs. Ray stubbornly refused the offers; he preferred his stealth existence.\n\nBut it was such incredibly bad timing for Logan to show up unannounced. Ray was always partial to a bit of 'cat and mouse', but Logan was different. In the scheme of that game, Logan wasn't a cat. He was a panther. And they were clashing for the first time.\n\nRay retrieved Rachel from the basement and guided her into his study.\n\n\"On my knee, hon.\"\n\nBrimming with questions she was afraid to voice, Rachel awkwardly settled in his lap, avoiding the handgun caught between the waistband of Ray's trousers as he adjusted\n\nwith his arms around her to reach his keyboard. Ray was unbothered by Rachel's nervous gaze on his face; he was busy logging in to check the perimeter. It was nice to have her close.\n\n\"Two out in the back,\" he observed; his voice filled with cold anger as he mistook Ahmed's sabotage for Logan's.\n\n\"What's happening?\" Rachel ventured in a small voice.\n\n\"We have to leave here,\" Ray answered, busy clicking and typing. \"I just need to arrange it.\"\n\n\"Who was that man?\" Rachel asked.\n\nShe didn't like the way the stranger looked at her, or the fact he wanted alone time. Thankfully Ray seemed to share her opinion.\n\nFrom the very beginning Rachel concluded Ray was very dangerous. But the new arrival was something more toxic, and she sharply felt it the second he whistled at her.\n\nRay sighed angrily. \"Logan. My goddamn stalker.\"\n\n\"H-He looked like you.\"\n\n\"He's my brother.\"\n\n\"Oh.\" Rachel couldn't decide if that made the situation better, or worse.\n\n\"He doesn't approve of what I'm doing,\" Ray said tartly, his eyes hardening at the screen. \"So, we're going somewhere he doesn't know about. He's always shadowed me, thinking he knows what's best. Has the nerve to tell me I'm making a mistake.\"\n\nRachel squirmed, silently agreeing with Logan that the kidnapping was a big mistake. Hell, she'd thought exactly that ever since Ray snatched her.\n\nRay irritably shook his head. \"He coordinated my life. I did everything he wanted me to do, except join his stupid troop. I'm fine with how things panned out, but of course the one time I'm fucking happy, he has to tell me it's wrong,\" Ray muttered, before realising what he disclosed.\n\nThough Ray was generally content, having Rachel on the scene undeniably brightened his existence. It would be difficult to revert back into his lone-wolf, regimented ways if Rachel managed to escape, or was murdered.\n\nRachel sat frozen, afraid to interrupt Ray's bitter monologue. Her mind fluttered to process his last words. Was he saying she made him happy, or something else? Watching Ray from the corner of her eye, she waited for him to lay blame to someone else for his shitty actions. The 'my parents were absent' speech. But he left it there.\n\nRay felt a slight weight shift from his chest by venting to a literal captive audience. Though he ever craved company or a sympathetic ear, it was nice to speak certain truths aloud.\n\n\"Ten minutes gone and he's already tampering with my alarms. Fucking bastard.\"\n\nRachel bit her lip, feeling as though she was witnessing something awkwardly private. She felt like an uncomfortable guest, trapped at a party where bickering family members start airing confronting dirty laundry.\n\n\"I could just go home...\" Rachel trailed off as Ray's attention left the screen, his piercing stare on her face that quickly turned red.\n\n\"Don't even think it. Wherever you go, I will find you,\" Ray said slowly, his eyes serious. \"It doesn't matter where, or who's guarding you. I will inevitably take you back. Trust me, it's not worth the stress of looking over your shoulder until that day comes.\"\n\n\"This isn't fair,\" Rachel whimpered with despair. She genuinely felt it was fucking unfair. It wasn't like she tempted fate or tested the waters or took a gamble and lost. This guy burst out of nowhere. She didn't deserve this.\n\n\"I'm sorry I drugged you, before,\" Ray brusquely apologised, his eyes back on the screen. \"It won't happen again. It was... I regret it.\" Mostly.\n\n\"What was the drug?\"\n\nRay sighed harshly, tapping away at keys. \"Something to relax you.\"\n\nRachel thought about it. About everything that had happened to her lately. \"Can I have it again?\" she asked.\n\n\"What?\" Ray exclaimed, his shock quickly morphing to something more foreboding. \"What do you mean?\"\n\nRachel looked down at her lap. \"It's the closest I've come to being home again.\"\n\n\"No,\" Ray bit out. \"The answer is 'no'.\"\n\nUnderstanding his own temptation to give her the drug for his benefit, it was a different matter if Rachel wanted to mentally escape him so badly that she was willing to jeopardize her health. The girl was shredding his ego, which Ray discovered was quite big ever since she began stabbing it with rejection.\n\nOf course, Ray knew his resentment was nonsensical, but he couldn't help feeling Rachel was being unreasonable. Hordes of girls attempted to date him without success, and here he was, wooing one girl who got under his skin, with no results.\n\nDidn't she understand how hard he was trying? Couldn't she see he was on her side? That he was doing everything in his power to keep her alive?\n\nRay growled, remembering the deliriously happy grin on her face when she thought he was Ben. Maybe he should have hung back and finished the bastard.\n\nGreat. Now he was besotted and jealous. The two pathetic emotions he considered beneath him, until now. Ray jerked irritably at the thought, and Rachel cowered in his arms, feeling the hostile tension in his body.\n\n\"Seriously, Rachel, am I that fucking repellent?\" he snapped. \"Are you trying to humiliate me?\"\n\n\"What?\" she trembled, frightened by the look on his face. \"I don't understand.\"\n\n\"Forget it. I'm sorry,\" Ray apologised, suddenly realising he was projecting his angst about Logan onto Rachel.\n\n\"Ray...\" Rachel began to plead, but his eyes moved dismissively back to the screen.\n\n\"Ok, so I didn't know what I was doing in the beginning,\" Ray said impatiently. \"But I can't describe what it's done to me. My instincts were right. It was a good decision.\"\n\nRachel was incredulous. To claim it was a good decision...\n\nYou abducted me for sex, left my boyfriend to take the rap, killed three guys and started a war with your psycho brother. \n\n\"What?\" she frowned as if she'd heard wrong, and feeling slightly dizzy with confusion. \"It...It seems more trouble than it's worth.\"\n\n\"No.\" Ray pursed his lips and shook his head. \"It's been worth it.\"\n\nSighing despondently, Rachel's attention followed Ray's and her eyes widened. \"Y-You're booking flights?\" she choked.\n\n\"Private charter. Don't worry about it. By the time he...We'll be far away.\"\n\n\"Where?\"\n\n\"Shh, hon. I have to concentrate.\"\n\nRachel felt sick. Not knowing where she was now was bad enough, but soon she'd be even further away from Ben. \"I don't want to go!\" she said shrilly.\n\nRay's arms tightened at her sides, and he pressed a distracted kiss to her temple. \"It'll be fine. Relax.\"\n\nThat word again. Feeling increasingly agitated but not knowing what to do, Rachel lightly pawed at his chest, her nails catching on the sleek fabric. \n\nRay smiled at the confirmation. \"Knew that favour would come in handy.\" Glancing at Rachel, he noticed she was quietly crying in his lap.\n\n\"Hey. Don't worry,\" he said lowly, cupping her cheek. The irritability left his face and was replaced with a flirty smile as he began to kiss her mouth, and her tears. \"I won't let Logan anywhere near you.\"\n\n\"That's not what I'm upset about!\" she exclaimed, turning her face.\n\nRay shrugged. \"Ok. I have to lock you downstairs and pack a few things.\"\n\n\"Oh God, please-!\"\n\n\"Rachel!\" he warned in that blood-chilling tone. \"You can fuss as much as you like when we reach destination. But I need you to behave, now.\"\n\nRay took her back to the basement and Rachel numbly sat onto the bed. Ray knelt between her legs before she could close them and cupped her face, considering his next words.\n\n\"You have to trust me. It's going to be alright,\" he said gently, holding her stricken gaze. \"I know you think I'm nuts, but I'm logical. This is going to work.\"\n\nRachel shrank back as the bulk of him edged closer.\n\n\"Please, just believe you can trust me,\" Ray whispered, his eyes falling to her lips.\n\nResisting the temptation, he pressed a quick kiss to her forehead and left the room. Rachel miserably bit her lip, watching the steel door swing closed behind him.\n\n*****\n\nIt was never in Ben's nature to kick a man when he's down, but the desire to bury his boot in Marcus' ribcage was overwhelming. If Brian wasn't between them, he would have at least stepped on Marcus' face.\n\n\"She's alive.\"\n\nBrian and Ben spun to see Ahmed standing behind them, pulling off headphones to rest around his neck atop the device strap.\n\n\"Who was the visitor?\" Brian asked.\n\n\"A real ghost. A bad one. We don't have time to use Marcus.\" Ahmed quickly detached the device from around his neck, tossed the connecting headphones aside and began pulling items from his duffle bag, sweat shining across his scalp.\n\nBrian scratched his head. \"But-\"\n\nAhmed was busily assembling a sniper rifle. \"Ray's fleeing the nest, and I don't blame him. But he's taking Rachel, and I don't like my chances of tracking Ray when he's on the run. I want to avoid that visitor as much as he does.\"\n\n\"I'm ready. Let's go,\" Ben said, feeling surprisingly calm. Rachel was alive, and they were so close to getting her back. So fucking close he could almost feel her soft skin in his embrace. And he'll hold her so tightly that she'll never find trouble again.\n\n\"Good,\" Ahmed replied, clicking the last piece in place. \"Follow behind me. If you need to speak, tap my shoulder first.\"\n\nBrian watched them jog away, praying they get Rachel out in one piece, and silently promising to do better if he ever raised another orphan. "
    ],
    "authorname": "Bellie444",
    "tags": [
        "blackmail",
        "captive",
        "dominant",
        "kidnapped",
        "manipulation",
        "noncon",
        "prisoner",
        "redhead",
        "shy girl",
        "bondage"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/voyeur-ch-09"
}
{
    "title": "My Only Talent Ch. 35",
    "pages": [
        "Chapter 35\n\nSuzanne Takes You Down... \n\nNote: The descriptions and accounts in these stories are fictional and do not portray any actual people or events\n\n*\n\nI woke up fresh and feeling good. It's amazing how relaxed you feel when you have no deadlines. At least at the end of a semester you feel that way. Then you realize there are still deadlines: to move out of your dorm room, to report for your summer employment, plan for the upcoming fall semester and to arrange an air tight gang bang for your girlfriend sometime this week before you leave town. Modern life is complicated!\n\nLast night, Suzanne revealed that she had just completed her comprehensive orals, which apparently had no sexual meaning in the context of her formal education. I always thought she was both excellent and comprehensively oral, in another context. In any case, it meant that she would spend the summer in total concentration on finishing up her dissertation, not having to take or TA any classes. \n\nLara had news of her own in the form of an acceptance letter from her first choice: Wharton/Penn which also approved her unusual combination degree program that ended with a JD and MPH in human genetics. No wonder Asa Weltschmerz was impressed. Lara just needed 6 perfunctory ESU required semester hours to graduate, and she was taking them in summer school. Easy peasy compared to what she had accomplished so far. I expect lots of professors would have some trouble reconciling this incredible six-foot-tall blond bombshell with her intellect and ambition. Just don't get in her way, people! Both Lara and Suzanne were already working daily on their academic tasks. \n\nNora had moved out her coop, which would sorely miss her cooking skills, and moved her stuff into Lara's apartment for a few weeks before she headed out for Massachusetts for her MBA program. \n\nBut this morning, she was going to help me move my stuff out of the dorm, after a breakfast of leftover pizza (the dining hall was shut down until the summer semester began) and a session of yeasty pizza smell inspired hard fucking all her own. I was still incredulous of how much the three girls told each other, as evidenced by both Suzanne and Lara sending little hand drawn cards wishing us a 'happy final Jester pizza night' complete with scatological drawings accompanying their signatures. \n\nKevin was already sleeping over at the ZZZ house, but most of his giant traveling collection of stuff was still in the room, fortunately including the small microwave oven we used to reheat the pizza. I now knew what a magnetron was, thanks to Professor Lillehammer and Engineering 101, and how the controller board was made and programmed, thanks to Embedded Systems. \n\nThanks to my Suzie receiver, I also knew that Nora, after only two bites of pizza, was ready, willing and able. I also knew I needed my strength, though, so I grabbed her head and applied it liberally to my cock, while I stood above her and finished my two pieces of pizza. After all, I had to be properly prepared, nutritionally speaking, to do my duty. \n\nShe won that little race, riveting me with her shining grey eyes and getting me fully erect and crazy for her while I was still stuffing down the last few bites of pizza. I tried to act casual. I bent down and gave her a big tomato sauce and pepperoni kiss and her Suzie kicked into high gear, now frantic to get me inside her. But I needed to maintain control. Tease her, then please her was my motto. I slowly kissed down her front, unbuttoning her blouse and planting kisses on the way down. Her slacks and panties just seemed to melt away, as my kisses neared her center. \n\nShe was frothing, fragrant, and fantastic, and as my gently lips touched her mons, her Suzie signal exploded into me. We were joined again. Brain to brain, hand in hand, gland in gland. I felt every nuance of my caresses just as she did. I teased her, circling her clit for several minutes before ever touching it. She grabbed my head and tried to center it, but I resisted, and my neck and shoulders were stronger than her arms.\n\nShe came first with just little tongue flicks on her labia and platinum pubes, then I spelled out 'I love you' ten times in slow cursive writing with my tongue on her clit, and she gushed a second time. I turned her over doggie style and entered her swiftly, almost a joint reflex that coursed through both of us. It felt so right to be in her. \n\nI pushed slowly in all the way, then shivered with pleasure and emotion. This was where I belonged. She spread her ass cheeks a little wider and pushed back against me. With another strong thrust I pushed her up against the little built in dorm room shelf, and grabbed the bookcase to steady myself. She tucked her neck up against the cushion and I used my other hand to grab a big hank of her silver hair. \n\nHer Suzie told me that at this point I could not possibly be too rough on her, so I pounded into her with every iota of strength I had. A little wave of sadness passed through me, as I realized there was no egg in place to fertilized. Damn. This had two effects. First, I felt weird for knowing this and even weirder for being so sad about it. It would not be a good idea to get Nora pregnant right now! Then why did I want to so much? Second, I realized I could now decide whether to come or not -- it was completely voluntary. If there had been an egg in there, I'm not sure I could have held out. Is that a talent, or a liability?\n\nNora came again and clamped down on me. Suddenly her Suzie clamored for me to come in her hot little box. It was the neural equivalent of a non-maskable interrupt. I had no choice. I rammed myself as far into her as I could, and it felt so damn good. She turned and looked back over her left shoulder at me, platinum eyes blazing with fire. \"Give it!\" she cried. Damn that was hot, in more ways than one. I gave her all I had. I always would. \n\nIt didn't take long for us to pack up my stuff, thanks to my Dad's advice about traveling light. We moved everything down to the loading zone and Nora waited while I walked over to Lara's building, got in my car, and drove back to the loading zone. It only took about 20 minutes, but there were two students and a Dad hitting on her by the time I got back, and she was clearly enjoying the attention. Jeesh!\n\nKevin's stuff was another story. He not only brought much more than I did to school in the first place, but he had been accumulating all sorts of crap throughout the two semesters. His dad had hired one of those dorm mover services, and they had shipped Kevin several big thick folded cardboard boxes. He just had to unfold and tape them together, dump all his stuff in, seal them, and then scan the labels with his phone. They would text back a pickup time later that day, and two guys with a cart would pick up his boxes in the dorm room and ship it all back to the Hamptons, where he would 'summer' as a verb. Such a deal.\n\nI took one last look at Jester, slightly nostalgic, but very determined to find a better place to live for the fall, with the UDP house as my minimum standard. Nora gave me a little kiss and we drove to Lara's place to unload my stuff, also my temporary quarters until I left for the \"Chunnel\" job.\n\n+++++++++++++++++++\n\nKevin had given me the okay for using the condo for Suzanne's little party, saying it was available umtil Friday, when one of his dad's NFL clients would use it for a weekend party pad, so I picked a specific night and began my gang bang planning. Cisco had promised to do one more sweep to check for webcams, bugs, sniffers, etc. I texted him the night it would all go down, so to speak. He replied right away, saying he would do a bug sweep and a war drive on the planned afternoon, and give me the all clear right before the 'event' as he called it. When I hit send on a final \"thanks\" to him I realized I had sort of crossed the sexual Rubicon, to paraphrase one of my dad's favorite sayings. He usually musically accompanied it with a smooth 70's oldie that went something like \"It's too late, to turn back now.\" I guess it was.\n\nI had no trouble planning and choreographing Veronica Tappert's little rodeo, but visualizing Suzanne getting similar treatment was much more difficult. At least I knew exactly what she wanted. Four guys -- me and three \"trusted dicks\" that would last a while. Shit. I knew it had to include Husky Varna and Ralph, based on her autonomic and immediate Suzie reactions to seeing them in action. I also knew the third should be Kevin, the luckiest fucking roommate in Texas. I had already had Lou Baby, with him watching and even holding her knees apart for me at one point, plus he had already seen Suzanne naked, and Suzanne had told him that his dick looked good to her. Bitch.\n\nI also knew the permutations she would require. She would get to suck all four of us, in random order of her choosing, and make us all come the first time. What a slut. She admitted it. She was proud of it. Then she wanted to be the proverbial sexual 'push me pull you', with alternating and rotating players on each end, and then she wanted what she called \"the triple play\" and \"the hole Magilla\" (not a typo) being penetrated in the pussy, ass, and mouth, with all three guys coming as close to the same time as possible for the grand finale. Apparently, she had discussed this briefly with Veronica Tappert, who had called it a complete and transcendental experience, insisting that it was something Suzanne had to try to paste in her \"wild college days\" mental scrapbook. Now I had to describe and plan all this in excruciating detail to my team of \"trusted dicks\". Ugh.\n\nI was going to have supper at UDP anyway, since the dorm dining hall was already shut down, so I brought the subject up with Ralph and Husky at dinner, when it was just the three of us sitting at the table. Both of them looked at me in shock and surprise, and I have to give them some credit for almost immediately suppressing their automatic shit eating grins.\n\nRalph cleared his throat. \"Well, this is something we have talked about before, Robbie, so I guess all you can do is just see what happens.\" He looked serious and contemplative, but he was probably contemplating Suzanne's perfect little bod, not my dilemma.\n\nHusky asked what he meant.\n\n\"Well, we have previously speculated about our girlfriends' hypothetical fantasies of making it with more than one guy at a time, and what effect it would have on the relationship if they were to actually do it.\" Ralph looked calm, but he was fidgeting with his hands, something he used to do obsessively when we were in middle school together. \n\nHusky just stared at him, and gulped very audibly.\n\n\"I said that if she did it once, and then told me she had her thrill but didn't need to do it again, then things could go on, if not happily, then begrudgingly. But...\" Ralph made a funny face. \"If she said it was wonderful and she wanted to do it several times a week from now on, the relationship would be over. The only positive would be that I found out about it before I fell in love with her.\"\n\nHusky grunted, then looked at me. \"Too late for that, eh, Robbie?\"\n\nI shook my head. \"Unfortunately, that is true. I have already fallen for her, sometime ago. She has assured me it is a onetime 'bucket list' kind of thing. But if that turns out not to be true, things could get ugly. But, I don't want you guys to 'point shave' so to speak. If it doesn't seem hot enough to her, she may want to try it again to see if it could be done better next time. So, I need to have it be super good, in the hope that once will be enough.\"\n\nRalph nodded his head, knowingly. Apparently both Big Liz and Little Marilyn had the same idea. At least for me it was only Suzanne, so far as I knew.\n\nHusky looked troubled. 'So, as I understand this, you want me to do my best job of fucking your best girl, with you there too? Shit Robbie. She is so smart and so hot, what if I fall in love with her?\"\n\n\"It's risky business, Husky\"\n\nRalph looked thoughtful. \"So, she wants three guys, huh?\"\n\nI must have looked sad. I felt sad. \"Nope, four for good measure. My roommate Kevin will be there too!\"\n\nThe both looked at me like I was crazy. At that point, I was. I managed to get through the planned order, and the restrictions, or really the lack thereof. She wanted it all, from all of us. Shit!\n\n+++++++++++++++++++\n\nI had almost forgotten our dinner date with the Tapperts. All three girls had been excited about coming along, so we all piled in my car and drove to their suburban abode. Mr. Topiary Trimmer across the street was still working in the front yard, perhaps his primary avocation. He had almost cut himself while staring at Lara on our last trip, but when he saw her again this time he just put the electric trimmers down and gaped. So, he was in less danger when Nora and Suzanne unfolded themselves from my backseat and stood up. He still managed to trip over the cord and went down hard.\n\nSuzanne, surprisingly, hurried over to help him up. She checked him over, and waved to his grey-haired wife, who had emerged from the front door when she heard the hedge trimmers shut off. Suzanne strutted back across the street towards the Tappert's front door.\n\nI was amazed. \"Do you know that guy, Suzanne?\"\n\n\"Yes. He was my first professor on my first day of school here at ESU, when I thought I wanted to be a botanist. He is kinda infamous.\"\n\nNora piped up. \"Is that Irving Schmear?\"\n\nSuzanne laughed. \"The one and only. He's retired now. He loved to torture obsessive compulsive pre-med students by making sure they didn't get an A in his introductory botany class, which before he arrived had traditionally been an easy A. He had just been granted tenure and he changed his Casper Milquetoast routine to something more akin to a psychopathic torturer. There were rumors that one pre-med student even killed herself after making a 92 average and still getting a B after Irving 'curved down' the raw grades so that nobody in that class got an A. A group of parents tried to get him fired, but he hung on. He got crosswise with an early LGB group called \"The Sexual Freedom League\" which was considered ironic since he and his wife were rumored to be swingers, yellow dog Democrats, and ACLU members. \n\nNora said, \"I heard they finally made him retire after he burned down one of the off-campus biology labs in an accidental fire. What's a yellow dog democrat?\"\n\nI knew that one. \"Even if the best candidate the Democrats can put up is a yellow dog, he would still vote Democrat!\"\n\n\"Did they really call him the 'bagel boy'?\" \n\nSuzanne giggled. \"Yes. He wrote a paper about 36 different plants you could make bagels from. Supposedly his greatest intellectual achievement.\"\n\nBy this time, we had had ascended the stairs and rang the doorbell. Veronica opened the door. Her eyes got big when she saw all four of us on the porch.\n\n\"Oh, come in! I am so glad you could all be here tonight. I have to admit, seeing all of you together again gives me palpitations, even if you don't have your leather costumes on.\" She stared at Suzanne.\n\n\"Are you the young lady that spoke to me so sharply at the beginning my rodeo?\"\n\nSuzanne put her finger under Veronica's chin and lifted it up. \"You mean the one that made you go down on her, front and back?\"\n\nVeronica gulped. \"Yes, Mistress!\"\n\nSuzanne gave her that sweet smile, followed by the thousand-watt dominatrix stare. It made my knees a little weak. \"No, Veronica. She is a sweet little thing, but she went much too easy on you. I would train you more strictly!\"\n\nVeronica cast her eyes down. \"Yes, Mistress.\"\n\nSuzanne took her by the arm. \"I do want to talk a little more about what you felt later that night, though.\" \n\nThe rest of us followed them into the big kitchen. There were two long islands: one set up as a tapas bar, and the other as a 'make your own cocktail' bar. The sun was setting in the big picture window. I hit the food, everyone else mixed a drink. Professor Lillehammer and his wife Dorothy had already made drinks. The professor must have already had several.\n\n\"My Dear Mr. Roberts! Are you the only teetotaler among us?\n\nI shrugged.\n\n\"I suppose these three beautiful women are so intoxicating that you need no other chemical assistance?\"\n\nDorothy blushed. \"Oh, brother! Three tequilas and suddenly my husband is Mr. Smooth Talker?\"\n\n\"Just making an observation, my dear! Perhaps you should have some more tequila and talk to everyone about your reaction to that night?\"\n\nShe gave him a very dirty look.\n\nSuzanne came to her rescue. \"It had the same kind of effect on me, Dorothy! Perhaps we should talk about it.\"\n\nThe five women drifted off together and spoke in hushed tones, occasionally giggling and looking at the three men, and making another drink.\n\nWe men gathered around the tapas plates, and proceeded to decimate them.\n\nRock Tappert spoke up. \"So, Professor Lillehammer, did you know that Roberts here was issued his first two patents last week?\n\nSay what? Lillehammer looked shocked. I'm sure I did too.\n\nRock Tappert continued. \"After the prank that he arranged, I was inspired to finish four patent applications that I had been struggling with for weeks. That exciting evening freed me from 'inventor's block' and gave me the insight to move forward and finish them. So, I named Roberts as co-inventor on one of them. My IP attorney split it into two applications, and both got fast tracked and approved. So, Roberts, when the Business Journal lists Austin area patents next month, you will be listed, too.\"\n\nLillehammer clapped slowly. \"Well, well. That should improve your resume immeasurably, Roberts. You can probably get lots of much better internship placements now.\" \n\nNora had been listening to our conversation from across the kitchen island. She had the best ears of anyone I had ever known. \n\nShe leaned over and spoke to us. \"That's very cool Robbie. I can talk to an acquaintance at Stanford and very likely turn that into a Kaufman fellowship as soon as you graduate with your BS degree. That would be perfect connector between completing your engineering degree and starting an MBA.\" \n\n\"But speaking of BS, you should consider doing something of note yourself, too, Roberts! Instead of just getting listed on a patent by sheer luck.\" Lillehammer was in his cups and back in his challenging professor mode.\n\nRock Tappert, upped the ante. \"Got any good ideas of your own, Roberts?\" \n\nI sure do, you condescending little pricks. Like fucking your both your wives in front of you! My brain was having a little shit storm. Maybe it was their tone of challenge, or feeling humiliated in front of Nora, but my emotions got the best of me. Despite the pointed warnings from Asa Weltschmerz, I engaged my mouth without putting my brain in gear first.\n\n\"How about a large thin film array of little nanoscale fractal antennas, insulated from each other and cross connected and linked together to detect very small electromagnetic, gravitic, or yet unknown signals?\"\n\nLillehammer laughed. \"That's pure speculation, Roberts, how in the world would you....\"\n\nRock Tappert interrupted him. \"Not so fast. Hold on. That's actually a pretty good idea. I just read some speculative physics stuff about quantum entanglement, and one of the ideas was sort of the equivalent of a photo-multiplier tube, where one signal triggers a cascade of more signals, a chain reaction so to speak, that would make it possible to detect and analyze some very weak and previously undetected signals. Couple that with one of my new ideas for photonic interconnections between rectennas, and we might really have something!\"\n\nLillehammer looked incredulous. \"You can't really actually believe his bullshit, can you, Tappert?\n\n\"Oh, but I can. How many patents do you have, Professor Lillehammer? Two? Roberts will soon have three, maybe more, because I think this cross connected fractal antenna thing will turn into several patents. Even better, it might actually work. Let's set down tomorrow and whiteboard some of this out, eh, Roberts? Classes are done, so I have time. Can you come by the office at 9:00 AM?\"",
        "I nodded in a daze. I realized that I may have just screwed the pooch, another of my father's favorite colorful expressions. I could not think of any appropriate musical accompaniment.\n\nWe rejoined the ladies as a group, and soon finished off all the food and everyone but me had several more drinks. \n\nVeronica, inhibitions now fully doused with booze, was trying to convince Dorothy to have a little Rodeo of her own. She blushed several shades of red, but did not walk away. Suzanne offered 'couples training' wherein she would teach the two professors and their wives how to best please, with Suzanne in charge of exactly what they did to each other. No one walked away from that idea either. Maybe there was a little revenge prank potential here.\n\nBut I was the ultimate beneficiary of all the hot talk. When we got back to Lara's apartment, all three girls were spun up and ready to roll. I did my duty, of course.\n\n+++++++++++++++++++\n\nKevin met me at the UDP port. He was much less able to hide his shit eating grin when I invited him to the gang bang. It looked like he had just won his first Oscar. He assured me he would not let me down. Thanks so much.\n\n\"What can I do to help, Robbie? He gushed. \"Drive to the condo?\n\n\"Just don't mention a thing to Lou Baby until it's all over.\"\n\n\"Don't worry. I don't want her to want to be there. Might give her too many ideas. How are you dealing with it?\"\n\n\"Well, I wish I didn't have to. I may be able to deal with it happening once. But more than once I could not take.\"\n\n\"I get that. Is your friend Cisco gonna sweep the place?\"\n\n\"Oh yeah. I guess we can't build in a full Faraday shield, but at least there won't be any bugs.\" \n\n+++++++++++++++++++\n\nI got a text message from the Dean of Engineering's secretary, asking me to please come to a reception over at the ESU club in the stadium tonight, and apologizing for the short notice. I asked about appropriate dress, and she said coat but not tie required. I also asked about a date. She said most engineers don't ask that question, but yes you can bring a date. Nora was my unofficial academic and career advisor, and she agreed to meet me there, but told me bring Lara and Suzanne too, telling them it was Robbie 'plus three'. I think she knew exactly what kind of ripples that would cause. \n\nWhile I was mentally planning the rest of the evening, I got a call from my mother, about scheduling things for this summer. My 19th birthday party in Prosperous, right before I took off for the Chunnel job, with a trip back in July, using my father's almost infinite fund of frequent flyer miles, for Millie and Jay Kincaid's elaborate wedding at the Garner Ranch on July 4th. Apparently, Cactus Jake Garner was planning on making it the political insider's blowout of the year. With that many famous politicians around, Millie would be in quite a state for their honeymoon, assuming Jay could keep her under control until after the wedding. The real pressure came from the fact that Jay wanted me to be the best man, since I had introduced them. Since more than half of Greek society at ESU knew about my previous relationship with Millie, tongues would be wagging when the invitations hit their mailboxes. \n\nHer next question was who would be coming to the wedding with me. I suppose my mother expected that I would pick one date, and she could learn something about my future from that. I was not ready to explain to her my long-term plans for Lara, Suzanne, and Nora. Hell, I really didn't know exactly myself. I did tell her that all three girls were \"great friends' with Millie and they all wanted the best for Jay and her. I also told her all three girls would be coming up for the wedding. Luckily, she did not ask about the sleeping arrangements. \n\nLara's place was very crowded, with me and all three girls getting ready for the reception at the same time. The bathroom was pandemonium. I shaved and dressed in the little half bath near the front door, thankful for the luxury layout of the one bedroom apartment. I was wearing my dark slacks and English blazer (without the zip in lining) which I felt was semi-casual dress.\n\nThe three girls emerged from the bathroom in order. I thought of the old Goldilocks story, except it was 'just right', 'just righter' and 'just perfect'. \n\nLara came out first. This was the 'formal' and understated (if that was possible) equivalent of her football game day knit dress in blue instead of orange and white, a Wedgewood blue that just matched her eyes, with Texas tall blonde hair, and 'climb the ankle' leather high heels. The dress had a high neckline, but still left nothing to the imagination, save how amazing her breasts would look it they were to be freed from their knitted nesting place. Her eyes were shining beacons. She knew how good she looked, and she liked it. Her Suzie signal crowed her hotness. I truly was the luckiest white boy in town. In Texas for that matter.\n\nSuzanne was next. Basic black dress, but the shiniest and most form fitting one I had ever seen her wear, with a scoop neckline and a very short skirt. It was plain she wore no bra, with panty status hauntingly unknown. It was also clear that her body was perfect: symmetrical, balanced, and beautiful. Every place you looked was a perfect place to put your hands. Her hair was jet black yet radiated sparkling highlights. Her light olive skin was enchanting. And when she walked, the angels sang. Accompanied by her Suzie signals, which said, 'I am the hottest little brunette in the world. I know it, and you know it' and I did.\n\nNora was last. Platinum hair, grey suit, black blouse, both almost elastically tight. All business, but all super-duper hot. If Audrey Hepburn's character in 'Breakfast at Tiffany's' had also been a porn star and a socialite, she would have looked like this. Prim and proper, perfect alabaster skin, with scintillating grey eyes and a chorus of Suzie signals: bubbles, swoops, and yells. You could almost hear her Suzie mouthing 'both of these incredible women want me, and so do you'. I sure did. \n\nAt least I didn't have to fret about my choice of blazer and slacks. No one would be looking at me. I thought we would have to take both my car and Lara's 'baby beamer', but when we got the garage, Rodney driver was waiting for us with the big limo. I guess Lara wanted to make an entrance.\n\nWe did. We rolled up from the south on Dedman Drive, and as we approached the club on our left, we saw that the Silver Spurs had Bevo out for photo ops. There were lots of foreign visitors there for an academic conference, and a photo with Bevo was apparently just the thing for an office wall back at the old home campus. But it also meant that virtually everyone was outside, looking at Bevo and waiting in line to get their picture taken.\n\nRodney was a pro, and he understood staging and theatrics. He rolled up just fast enough to make a little squeak of rubber as he came to a stop. All heads turned. Rodney popped out of the driver's side door like a stage magician, and opened the back door on his side with a flourish. Lara got out first. All of what seemed like seven full feet of her. The heads that were watching Bevo now tracked Lara, as she beamed her best smile and walked languidly toward the entrance. Nora slid across the seat and popped out, standing tall (at least as tall as she was) with a regal bearing. She fell into line behind Lara, like the first two Russian Matryoshka dolls in a set. Suzanne was next, the third little nested doll, and the only one who could speak Russian. She looked like a perfect little doll, except no doll had ever strutted like that. I got out of the front passenger side seat and joined the torrid conga line. \n\nSome of the visitors in front thought this was another photo opp, and shifted in line to wait their turn. They looked sorely disappointed as the girls passed them by and went into the entrance to the elevators. I was the last into the elevator car, and the wide-open door could barely bracket my grin.\n\nThe reception was a bigger deal than I thought. Nora explained it was a 'research university' thing. If anyone from ESU had won a Noble Prize or a Field Medal this year, it would have been held in a more public venue, but failing the need for PR for those prizes, it was more of an insider confab. Meet and greet, pant and grant, wheel and deal, etc. This particular reception was about the new med school, and announced ESU's intention to make sure it wasn't perceived as just another med school.\n\nErminia and Sapiento were featured: big donors on parade. Message: if you give ESU $100M we will make a big fuss over you for a long time, not just name stuff for you. Asa was featured, as med school leader, introducing several new world class faculty members (including re-acquiring Bob the Knob, apparently his biggest get so far) and signaling his intention to recruit even more. A couple of banker alums were feted for donating the money for Bob's new research, in the form of a Foundation co-named for them, their philanthropic stairway to heaven. All the deans of all the school were there, and working the crowd. \n\nTwo major new acquisitions by the Ransom Center were featured: medical art by Da Vinci and Vesalius, and bunch of lesser stuff to be displayed in the hallways of the new medical school building were on hand. Apparently, the competition with Harvard to be most academically well-endowed now extended to antique medical book collections, and Harvard had a head start. The medical branch at Galveston had a blockbuster medical collection, and the Austin campus was determined to surpass if it if they could not absorb it. \n\nSapiento and Erminia made a big fuss over us, which sparked a new, very unpleasant variety of Suzie signal: the male pecuniary kind. Apparently, such a display made many of the men in the crowd think the girls were wealthy. Lara certainly was, Nora moderately so, I guessed, but I had no idea about Suzanne's family's wealth. Her dad certainly had some power. I thought for a moment about the kind of male that would not respond to these three unless and until he thought they were wealthy, and I almost puked at the thought. \n\nAsa corralled me and introduced me to a biomedical engineering professor who specialized in \"tissue engineering' something that I had never heard of. She was interesting, though. My linguistics professor spotted us and buzzed in like a mosquito. Soon they were discussing my degree plan, and undergraduate research project, and my strengths and weaknesses like I wasn't even there. Then Nora arrived, and the tone changed. Rock Tappert joined in, telling them about the patents we were 'working on'.\n\nSoon Lillehammer was there, arguing against the pure scholarship that the biomedical department wanted to give me, saying that the work experience would be better for me. Rock said he wanted me to intern at a startup that was commercializing one of his patents. I felt like a fly on the wall, or maybe wallpaper, or maybe flypaper. I was stuck.\n\n+++++++++++++++++++\n\nWe all went back to Lara's after the reception. We were glad to get away from the stuffy and hypothetical academic social environment at get back to something a little more 'earthy' as Nora put it. As well-mannered and cultured as these three girls were in public, they were even better and more interesting in private. Nora said that they had all learned they could trust each other, and trust me, and just let themselves go. Suzanne called it releasing her inner slut, and Lara called it 'getting right down to it'. I just tried to listen to all the Suzie signals and do what they wanted. It always turned out to be even more exciting for me than the simple little fantasies I came up with on my own. I fell asleep a very happy fellow, and certainly, as Rodney Driver put it, \"the luckiest white boy in town\". Amen. \n\n+++++++++++++++++++\n\nThe time for Suzanne's little party had arrived. I began going over my checklist in my mind, while I walked back to Jester to pick up my final mail delivery there. It turned out to be a selfie picture printed on a post card from my Country Chrissy -- a reminder of our upcoming Sadie Hawkins Day date next November. She was dressed up like Daisy Duke, and suggested that I dress as Lil Abner, whoever that was. It sure got my motor running, though. At least I had more to look forward to next fall than engineering classes and missing the just graduated Suzanne, Lara, and Nora.\n\nI got a text from Cisco that just said, \"NO. I'm going out there alone to check the condo for Robbie!\" WTF?\n\nThen I remembered his annoying hack of the SMS servers -- his replies always came in before I saw the message he was responding to. It soon chimed in and turned out to be one from Mei Ling \"I want to go see where Suzanne will get it air tight!\" I knew that Mei Ling envied Suzanne's opportunity, but Cisco was adamant about neither one of them being there to watch. \n\nJeesh. I guess everybody knew what was happening, except perhaps Suzanne. Nora and Lara certainly did. They had been passing on little 'coaching tips' to me, and Ralph, and Husky, to make sure that we covered all the bases for Suzanne. Those girls do talk about everything. \n\nKevin had already given me the key to the condo, and had the maid service double clean everything and wash all he sheets and towels. I picked up Husky and Ralph at UDP, and then we picked up Kevin at ZZZ and we four musketeers headed for the condo. Suzanne was arriving later, having officially bought the ruse that it was a surprise party for Kevin to celebrate his unexpectedly passing all his classes. During the drive out to Horseshoe Bay, Kevin regaled us with stories of all the famous athletes that had partied at the condo from time to time, and all the hot women they had been with. Husky related the new fascination with hydration on the football team, and even showed us a photo of the different hues of urine yellow that were supposed to portray how well you were complying with the new coach's hydration guidelines. Some of the guys even had tee shirts made to advertise their hydration state. \n\nCisco texted that he had just completed his final sweep and there were no bugs, webcams, recorders or any devices snooping on the condo. He even disabled to mics and cameras in the appliances and the smart TV's, and scrambled the security camera owned by the condo complex that covered the door and hallway. At least there would be no pictures turning up on someone's website. But I suspected there would be plenty of indelible pictures in my mind. \n\nSuzanne wasn't due for an hour or so. I began to obsessively move around the condo, checking for problems, making sure the drapes were drawn, and generally fidgeting. Ralph noticed.\n\n\"Robbie, there is no upside to worrying now. You are committed. Just like I am now committed to Big Liz and Little Marilyn wanting to spend the night alone with you instead of me.\"\n\n\"Well, isn't in addition to you, not instead? Isn't that the point?\"\n\nHe shrugged. \"I understand that intellectually, but emotionally it doesn't go down so easy. In your case, Suzanne just wants more sex, over the top stuff that one guy couldn't possibly do. In my case, they want intimacy with you. You will know exactly what happened here with Suzanne, but I will always wonder how they were with you versus me. It's more intimate somehow!\"\n\nI guess I sort of got that. It was interesting that Ralph, who may have the highest IQ of any ESU undergrad, and certainly the biggest dick, is just as insecure as I am about women. \n\nThe doorbell rang. What the hell? Suzanne was at least 30 minutes early. Kevin answered the door. It wasn't Suzanne!\n\nHusky stood up. \"Shit! It's Big Bones Jones! What the hell is he doing here?\"\n\nBig Bones Jones was a first round NFL draft choice from ESU last year, a massive defensive end. He was three inches taller and at least 60 pounds heavier than Husky. He just missed making the Pro Bowl as a rookie. He looked like a comic book superhero body builder. Supposedly professional wresting had already offered him a multi-million dollar deal to work with them as soon as his football days were over. He also had a reputation for partying just as hard off the field as he hit on the field. There was a 50/50 chance that somebody from TMZ had noticed him arriving at the airport and followed him out here. He moved past Kevin and into the condo with practiced ease. My blood pressure went up.\n\n\"This is Vondrell's big party, right?\"\n\nKevin's face fell. He tried to lawyer up like his dad. \"Actually, Mr. Jones, Vondrell is going to be here this weekend, but not tonight. This is just a small, private gathering tonight.\"\n\nBig Bones looked us over, and got a funny look on his face. \"All males, eh? This isn't one of those Alpha Gamma secret parties, is it?\"\n\nHe was referring to the AG's latest tactic. The ESU chapter had been officially dissolved by the national office and their house put up for sale in an attempt to contain the lawsuits resulting from the 'slip and slide video' debacle, and they now held their parties in secret on private property away from campus. Then he noticed Husky, who was standing behind Kevin and Ralph. \n\n\"Varna? What the fuck are you doin' here, man? You an ESU player, man! You can't be hanging out with the Alpha Gamma's man! Talk about bad PR. Fuck! Even I will call quality control on that shit!\"\n\nHusky grabbed Big Bones by the elbow and struggled to steer him back toward the door, all the while talking in his ear. I could not hear the words, but the tone was both pleading and insistent at the same time. Big Bones was mostly shaking his head no. \n\nHe finally stopped walking and asked Husky something. Then he looked at me like I was from Mars. Oh shit!\n\nThen he smiled, and laughed out loud. \"Well, I will just have to stay here and check out this party, eh Varna? Make sure you are properly representing ESU in the community! If you know what I mean?\"\n\nOh shit, I think I did. And he if he stayed around, he would soon see that it was not an AG kind of party, it was a UDP kind of party. That would be okay. But when he did see what kind of party is was, especially when he saw Suzanne, he would immediately conclude that this was his kind of party for sure. And he would want to stay for the entire party, \"the triple play\" and \"the hole Magilla\" (not a typo). Oh, shit. Talk about your unintended consequences! Was TMZ already outside with a shotgun microphone and a telephoto lens? Would they video Suzanne as she arrived? Her father would have me killed, or worse.\n\nWhat the hell could I do? Call the whole thing off and send everybody home? Tell them Suzanne changed her mind? Tell them I changed my mind? Tell Big Bones Jones that TMZ was outside and he should sneak away? He would probably rather go outside let them interview him instead, furthering his wrestling ambitions. \n\nI looked at Husky. He recognized my problem, and gulped. Kevin finally tumbled to the aspect of letting too many people know about the condo. He went over to Big Bones and laid some real BS on him.\n\n\"Say, Mr. Jones, this is my father's condo. You know, Schlomo K. Kretzman, who represents....\" Kevin began.\n\n\"I know who he is. He is big time, but he is not my agent.\"\n\n\"Well, perhaps he should be. Don't you have a contract year coming up 2 years from now? It is never too early to begin planning for your financial future. You should...\" They walked out onto the little balcony outside. \n\nBig Bones was actually buying it! Damn! The conversation went on for several more minutes and then Big Bones began nodding his head yes. \n\nKevin walked over to me. \"Mr. Jones is concerned with bringing too much attention to the condo, or to his buddy Vondrell, but he doesn't mind bringing some attention to himself. So, he is going to walk around to the other side of the complex and see if the TMZ people are out there. If they are, he will talk to them for a while and hopefully distract them from this unit and focus them on something else.\" Whew! Crisis avoided, I hoped. ",
        "Big Bones walked out the door and down the hallway where I knew Cisco had already scrambled the video cam. He made his way down one level and out to the pool area, where Suzanne and Lou Baby had recently played their little sun tan oil scene for the weekend condo couples. We had a perfect view out the big picture window that overlooked the pool. Big Bones was recognizable, especially in ESU's backyard. Several bikini-clad women immediately asked him to take selfies with them, and he obliged them. As they tweeted and instagrammed and snapchatted, more people arrived, including TMZ. No one was paying any attention to us. Hooray. \n\nI began to relax a little bit. Then I got tense, thinking about what was about to happen to Suzanne. At least it wouldn't be televised. I remembered the old Texas governor who infamously advised to \"just relax and enjoy it\". Tell my stomach that. It was doing flips and flops, and it wasn't because I was hungry. I couldn't relax, but maybe I could enjoy it, at least my part of it.\n\nSuzanne was now overdue. My blood pressure went up even higher. I began checking my phone every minute. Kevin, Ralph, and Husky avoided looking at me.\n\nMy phone suddenly went ping. A text, from Suzanne: \"MIKE AWOKE AND IS ASKING FOR ME! On my way to San Antonio. More when I know. S.\" \n\nSuddenly my ears were roaring and my heartbeat sounded just like when I finished that marathon. The lights got brighter, and I couldn't breathe right. I hadn't felt like this since I hit my head on the net support pole on the tennis courts of the old country club. I swayed and fought to stay standing. Was I the guy that said she had an 'unconditional release' from our relationship if Mike recovered? Big of me, but now I was going to die! I needed to sit down, but I was afraid to move at all. I just knew she was going to leave me forever, for a cripple! \n\nAnother text pinged in on my phone. It was from Cisco. \"I am okay with this. Go for it!\"\n\nWhat the hell? I don't give a flying fuck what Cisco thinks! He is okay with me losing Suzanne! Screw that. Wait a minute, how the fuck does he know? Suzanne didn't include him in her message. I had already typed \"FU\"... to respond to him before I remembered his SMS hack. He was replying to something he had already seen, but I hadn't. \n\nA text popped up from Mei Ling. \"Robbie, Suzanne texted me she is going to SA. I am going to take her place for the surprise party! See you soon.\"\n\nSo THAT was what Cisco was okay with, eh? I'm not sure I can even get it up for Mei Ling if I lose Suzanne. What the hell is happening to me? That means I do love Suzanne. A lot of good it will do me! I want to die, and now!\n\nHusky walked over to me and put his hand on my shoulder. \"Robbie, your face turned completely grey! Are you okay?\"\n\nNo, I am not okay. I may never be again. \n\nHe tried to catch my eye. \"Are you really on board with what is about to happen to Suzanne?\"\n\nI was not sure I could speak. I squeaked. \"No, but it's not what you think.\"\n\nHe looked really worried. \n\nI choked. \"Suzanne had to go to San Antonio at the last minute.\"\n\nHis face fell. \"Why?\"\n\n\"Mike woke up.\"\n\nHe looked confused. \"Who the hell is Mike?\"\n\nI choked again. \"Suzanne's first love. He got hurt in a wreck. He has been in a coma for two years. I thought he would never wake up.\" I forced out more. \"She is on her way to San Antonio to see him.\" I actually sobbed.\n\n\"Jeesh, Robbie, That's not good.\" What amazing insight. He was Stanford graduate school material for sure!\n\nHe looked sad. Was he commiserating with me, or thinking about missing his shot at Suzanne?\n\n\"I guess you just have to wait and see, huh?\"\n\nYep. If I didn't die of a broken heart in the interim. \"But the party is not cancelled.\" I tried to smile. \"Mei Ling wants to take her place!\"\n\nHe looked worried again. \"You mean the girl Cisco dates? I heard she was the female Bruce Lee. I heard she could kill you three ways with one hand!\"\n\nI looked up at him. \"Well, I guess you better do your best to please her, then, shouldn't you?\"\n\nHe got a faraway look in his eyes. \"What about you?\"\n\n\"I'm out, buddy. I can't think about anything but Suzanne right now!\"\n\n\"Well, maybe what you need is something to take your mind off Suzanne. Mei Ling is might be perfect for that.\"\n\nMei Ling was hot, and I occasionally had some amazing dreams about her, and I had a pretty good idea she was my kind of girl. But my heart and mind were not my own right now. I wanted to get in my car and drive until it didn't hurt anymore. But that would take a lot more than one tank of gas.\n\nAnother text from Mei Ling: \"I'll be there in 30 minutes, boys!??\"\n\nI didn't want to watch, so I didn't want to stay. Was that being rude to Mei Ling? Did I care?\n\nAnother text pinged. It was probably Suzanne telling me to lose her number for good.\n\nNope. It was from Lara. \"Just heard about Suzanne and Mike. How are you taking it?\"\n\n\"What is the emoticon for clinical depression?\" She probably knew it.\n\nShe took several minutes to respond, but then she shocked me. \"Snap out of it, Robbie, don't be a punk. This is Texas. Mike was QB1. You know the unwritten rules. He can't lose his starting job to an injury. If he recovers he gets to play again. And you have to keep playing your best for the team.\"\n\nI just sat there. I read it again. I was completely numbed. I couldn't respond.\n\nShe called and I picked up the phone and held it to my ear. \"Robbie, you are either a top or you're not! I want you to make sure that Mei Ling gets the nastiest gang bang and the toughest kind treatment of you ever gave me. That's what she craves. Otherwise, maybe you can crawl back and be my little bitch! Maybe THAT is what YOU really WANT! And you can leave Nora to me to, if you can't handle it!\"\n\nI felt a white-hot poker stuck in my gut. Pain like I had never experienced before. I was losing it all. It was over. They say contemplating your execution clears and focuses the mind. And death was certainly at my doorstep. I needed help. My last appointment with Asa had already happened. The only shrink I had left to consult was my Mom. Just like that first day of school that scared me so badly that I didn't want to go. Work through all the possibilities, Robbie. What was the worst that could happen to me? How could I deal with it?\n\nWell, I could lose Suzanne, Lara, and Nora, drop out of school and kill myself. That's the plan! That's exactly what I felt like doing. From the highest high to the lowest low, all in two quick semesters at ESU. It would be best if I did it before Millie and Jay got married in July. Don't want to rain on their parade, you know. The sooner the better, I guess. What's the best way?\n\nBelieve it or not, a GANTT chart appeared in my mind, just like in Engineering 101. Like project \"Spank Lara\", but this one was project \"Die Robbie\"! How many days before the July 4th wedding should my funeral be? How many days between my death and the funeral? What was the indicated calendar date for me to die? This was not nearly as much fun as \"Spank Lara\" had been. \n\nWhat was the next worst outcome. I could lose all three girls, drop out of school, but not die? Not much of an improvement. What's that minimax algorithm thing again? Choose the least worst alternative? Keep looking.\n\nI could lose Suzanne, and Lara, who would never respect me again for being a wimp, drop out of school, and somehow keep Nora. Nope. Not realistic at all. \n\nLose Suzanne, Lara, and stay in school, and keep Nora. Possible, maybe. \n\nLose Suzanne, but keep Lara and Nora and stay in school. Maybe that's what Lara was telling me I should do.\n\nLose Suzanne for a while, keep Lara and Nora, stay in school, and have Suzanne come back to me when she sees that I am better for her than Mike? That sounds a lot better. \n\nAs above but make Suzanne crawl and beg for me to take her back, when she realizes she would never be happy with Mike? Yeah. I like that one best of all so far.\n\nThat white-hot poker of pain inside me expanded and grew into a giant white pillow of heat, anger, and cruelty that filled my gut. My id ruled me. I felt a hotshot of testosterone flood my system. I would decide what happened!\n\nLara had waited a long time for me to speak. \"I will deal with you later, slut! You are mine! To do with as a please! Never forget that! While I am fucking Mei Ling like she has never had it, you can wish it was you.\"\n\nLara drew in a big breath. \"Yes, Master!\" and hung up.\n\nMy heart was beating like a trip hammer. I felt my chest and shoulders swell up. I stood taller. I was excessively hetero-normative and damned proud of it!\n\nA text pinged in. It was a picture of Lara, naked and on her knees in her apartment, wearing only that tight little smile I loved so much. Suddenly I was hard as a rock. Where the hell was Mei Ling?\n\nThe doorbell rang. Kevin opened it. He was expecting Suzanne. I'm not even sure he had ever met Mei Ling, although he might have seen her at some parties. He looked shocked. So did Ralph.\n\nMei Ling looked around and smiled. 'What's going on at the pool?\"\n\nI was back on my game. \"Just a little diversion. Nothing to worry about. Your full attention is required here.\"\n\nI made the formal introductions. I finished with Kevin, our host. \"Gentlemen, Mei Ling is our slut for the evening.\"\n\nI pushed her down to her knees.\n\nShe had her Vietcong Full Metal Jacket movie hooker outfit on. \"Hi, GI! Suckey Fuckey?\" She had that magic little smile down pat already."
    ],
    "authorname": "conanthe",
    "tags": [
        "bdsm",
        "texas",
        "college",
        "threesome",
        "fraternity",
        "football",
        "sorority",
        "dominatrix",
        "austin"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/my-only-talent-ch-35"
}
{
    "title": "Grace Ch. 09",
    "pages": [
        "Now that the ice was fully broken, I never wanted to stop. Grace's body was still glowing from her orgasm, and her eyes were half-closed as she lay back on the couch. The air was warm and the scent of her arousal mixed with the earthy background of plants and potting soil. After a quick pause to get rid of my socks, I crawled up and stretched out beside her, slipping an arm over her shoulder. She turned into my body, her kneed draping itself over my thigh and her breasts pressing against my side. I gathered her close and kissed her softly.\n\n\"Hi,\" she said quietly.\n\n\"Hi yourself,\" I responded with a smile.\n\n\"I can taste myself on your lips,\" she murmured.\n\n\"That's good,\" I said with a chuckle. \"You taste amazing!\"\n\nShe snorted lightly in disbelief, but kissed around my lower face, her tongue darting out to taste wherever her lips landed.\n\n\"Not bad,\" she admitted.\n\n\"I think I've had more experience than you in that department!\" I said, still chuckling.\n\nShe giggled. \"You're probably right!\" she smiled.\n\n\"Hmm...\" I said musingly. \"Sounds like there's a story here somewhere!\"\n\nCharmingly, she blushed and looked down.\n\n\"Not really...just some messing around with one of my friends.\"\n\nI wrapped both arms around her and held her with her head against my chest. I was excited to hear about it, but wanted to keep her comfortable enough to tell me, and I figured not looking at me might make it easier! I kissed the top of her head and gave her a squeeze.\n\n\"How did that happen?\" I asked quietly.\n\n\"Well, we were at a party and we didn't have boyfriends. We got pretty drunk and danced a lot, but nothing happened with any of the guys who were there. I guess when we got home, we were both kinda frustrated because we kept saying how hot this guy was or how good of a dancer he was and we started talking about different guys and stuff.\"\n\nI didn't want to break her flow, so I kept quiet and let her resume at her own pace. I just stroked her arm and rested my cheek against her hair, breathing in her warm scent.\n\n\"Finally Katie said she was really horny and if she was at home, she'd probably be buzzing herself like crazy. She said she got a vibrator off of Amazon and it was way faster than using her hands and way better than a guy for getting off. I told her my mom had one, but I couldn't get it because it was in her bedroom and she was in there. That's when she kinda turned towards me and put her hand on me and said really quietly, \"I could help you out and you could help me out\" and then she rubbed my pussy a little bit. I'd never done anything with a girl before, but I really was turned on, so I said \"okay\" and she started kissing my face and rubbing my...pussy and it felt SO good!\"\n\nI kept quiet still, but I was trembling with anticipation and arousal hearing this, and my cock started to grow.\n\n\"So after she made me cum, she sat up so she was facing me and took off her panties. She started rubbing herself, and I sat up so I could watch her, and we ended up kissing. Then I put my hand down there and started rubbing her, too, and she whimpered a little bit and said \"can you put your fingers inside me?\" so I laid down between her legs and got my two fingers really wet and started slipping them in and out while she rubbed her clit.\"\n\nI couldn't help myself. \"Did you taste her?\" I whispered.\n\n\"Uh-huh,\" she whispered back. \"She kind of stopped rubbing herself and pushed my head down and I just kept pushing my fingers in and out and I licked her clit. She tasted really good, and that made her cum really fast and I could feel her squeezing my fingers when it happened. After that, we snuggled up and fell asleep and never did anything else.\"\n\n\"That's pretty normal, Grace, and pretty damn hot!\" I said encouragingly.\n\nShe giggled quietly, her breath stirring my chest hair.\n\n\"I guess so!\" she said, reaching down to wrap her fingers around my stiffening cock. \"Did listening to my story do that?\"\n\n\"Well,\" I temporized, \"yes and no. Yes because the story was very sexy, and no because I'm also lying here holding a beautiful young woman in my arms. So it's kind of both.\"\n\nShe didn't reply, but I felt the movement of her cheek against me as she smiled at the compliment and her grip tightened a little bit, tugging upward on my shaft. A clear drop of precum peeked out from the tip of my cock and she spread it around the head with her thumb.\n\n\"I shouldn't have said Katie's name, should I?\" Grace whispered, turning her face up to mine.\n\n\"That's okay,\" I told her. \"I would never betray your confidence. She's not even in my class, anyway, so it doesn't matter.\"\n\nI didn't want to admit that her story would fuel my imagination in the future, but I was sure it would, and seeing Katie in the halls periodically would be a bonus! Slim, blonde, and beautiful Katie with Grace's tongue on her clit...yum! Grace, meanwhile, distracted herself by repeating her tugging, generating more precum and spreading it around again and again. Soon my cock was glistening and her hand was sliding easily up and down.\n\n\"It's so slippery!\" she giggled, wagging the object in question from side to side.\n\n\"You know why, right?\" I said hungrily.\n\n\"Because you're ready to...\" she guessed hesitantly. \n\nThe teasing teenager had grown shy faced with the new reality of our situation, and I found it endearing and very, very arousing. I let her off the hook by saying it nicely. \n\n\"Be inside you? Yes, Grace. It's time for you to climb up on my lap and kiss me and lower yourself down onto me. I want to kiss you and play with your body and watch your face while we make love for the first time. Are you ready for that?\"\n\nShe nodded, her face solemn. Then she rolled up onto her knees and straddled me, still holding my cock firmly upright. Lowering herself just a bit, she traced the head along the slick line of her pussy, spreading both of our lubrication around and lining herself up until she was ready. Then she paused and looked me directly in the eyes.\n\n\"I'm so ready for this, Mr. Robertson. I'm so ready to fuck you and feel you cum inside of me!\"\n\nI laughed. The shy teenager was gone again!\n\n\"Same here!\" I gasped as the head slipped inside her.\n\n\"Oh, fuck!\" she moaned as she set herself and then sank down onto me with one steady motion. Her mound bumped against me when she hit bottom and she stayed perfectly still, letting herself adjust to the sudden intrusion. Her upper body came down on my chest and her hands rested on my shoulders for a long moment. She took a deep breath and let it out against my neck.\n\n\"Fuck,\" she whispered, \"you feel so big inside me!\"\n\n\"And you,\" I whispered back, \"feel so tight and hot around me!\"\n\nAfter weeks of building up tension, I was more than ready to get to the main event. My arms wrapped around her, one holding her torso tight to me and the other pinning her hips down against my cock. Right away, I began to drive up into her, my ass sinking into the cushion and then thrusting up, spearing her again and again at a steady pace. With each thrust, I felt a sharp exhalation against my ear.\n\n\"God, Grace, you feel so fucking good!\" I hissed.\n\n\"You...do...too!\" came her response, each syllable in time with my thrusts.\n\nIn fact, Grace's sweet young pussy felt TOO good. I knew that I was so stimulated I wouldn't last long, and I wanted to get every minute I could in during this first fuck. It was time to show her the real value of experience--self-control! \n\nAfter a few more deep thrusts, I sat up and pulled her body up with me, holding tightly to her ass. Her knees swung compliantly alongside my hips, so I grinned into her startled face and rolled her over and to the side. All of a sudden, Grace was on her back along the length of the couch, her knees spread wide around my waist and my body pressing her down into the cushions. Being a gentleman, I supported most of my weight on my elbows, my chest just barely resting on her firm breasts. Grinning at her expression, let my hips sink to hers, my cock driving deep inside her, spreading her fully open. Her thighs spasmed around me and her heels crossed at the small of my back, pulling me in reflexively. \n\nMy lips came down hard on hers and she wrapped her arms around my head, squeezing me at both ends in time with my thrusts. Her tongue sought mine with greater urgency, and then she broke away and kissed all around my face, wordlessly expressing the pleasure of being so thoroughly possessed by a man.\n\nHowever much I needed to keep plunging into her and explode, a small part of me still held back. I didn't want to just fuck her--I wanted to make her feel things she'd never felt before. Pure ego, I know, but how often does a man my age get to consummate a fantasy like this?\n\nThe next time my hips drove down into hers, I stayed there, swirling my hips, sending my pubic bone against her clit and angling my cock to rub the full inner diameter of her pussy. Grace's head snapped back with a grunt and she launched her hips up into me, her legs locked and squeezing hard to keep me doing that. Frantically, her breath shuddering past her lips, she ground herself on to me as I did the same to her and I felt her whole body rippling as a quick orgasm tore through her. It wasn't the tidal wave of pleasure she had with my tongue on her clit, but she held tight and trembled for thirty seconds, clinging to me like a limpet.\n\nWhen her body finally unlocked, her heels slipped apart and slid back to the cushions. She held my head more tenderly and kissed me as I rocked myself gently deep inside her.\n\n\"God, that was so fast!\" she whispered when she broke the kiss at last.\n\nI grinned at the compliment.\n\n\"Three weeks of build-up will do that!\" I chuckled in response.\n\n\"Did you...cum?\" she asked hesitantly.\n\n\"Not yet...I was waiting for you to go first!\" I said with a wry smile.\n\n\"I want to feel it, Mr. Robertson. I want to feel it inside me!\"\n\n\"You will...believe me!\"\n\n\"How do you want me?\" she asked, her eyes wide and innocent.\n\nSuch a polite kid! The possibilities for gymnastic sex were endless, but I wasn't in the mood for anything fancy at that moment--I just wanted to explode!\n\n\"Am I too heavy for you like this?\" I asked in response.\n\n\"No...I like it!\" she said with a slightly puzzled smile. \"It feels...kinda natural.\"\n\n\"I like it, too, Grace. I love feeling your body like this and feeling you wrapped around me completely. I want to stay like this and fuck you slow and deep and cum inside you. Is that what you want?\"\n\nShe nodded, brushed her hair out of her eyes, and then settled back. She was still young and bewitchingly beautiful, but there was a glint of the mature and seductive woman she was becoming in her eyes as she moved out of the world of teenage experimentation and into the adult world of lovemaking. \n\n\"I'm ready,\" she said evenly. \"Kiss me and fuck me and let me make you cum now.\"\n\nWho could resist? My lips found hers and I began to slowly drive my hips down into her. Her knees were wide open and her slim, muscular frame made a perfect and resilient target for my need. Her hands stroked me from shoulder to ass and her feet rubbed sensuously up the outside of my calves. Feeling her lithe body welcoming me in such a loving and adult way was the final straw. I felt my cock thicken and my balls tighten and I began to thrust into her more urgently. My lips left hers and I buried my face in the crook of her neck, kissing the soft skin there and breathing hard, my senses filled with her scent.\n\n\"Yes...that's it!\" she cooed into my ear. \"Cum for me...cum inside me...cum inside me, Mr. Robertson!\"\n\nHer feet crossed around my thighs and her arms lay across my shoulders, just as I imagined. With a sudden, wild pulsation, my orgasm hit me like a train and every muscle froze.\n\n\"Grace!\" I gasped as the first throb from deep inside me sent a scalding jet of sperm into her receptive body. Two...three...four...five...six times I felt my body spasm and flood her pussy. \n\n\"That's it...\" she whispered. \"That's it...I can feel you cumming!\"\n\nSuddenly, it was over. My shuddering stopped and I lay on top of her listening to my heart beating wildly in my chest, sucking deep lungfuls of air. Then I felt the sheen of sweat between us and the warmth of her thighs around mine and the soft, supple breasts beneath me. Slowly, languidly, my senses expanded to take in the whole situation like coming out of a dream.\n\nHitching myself up on one elbow, I looked down at Grace. She was smiling a peaceful, sultry smile, her lips twitching.\n\n\"Hey,\" she whispered.\n\n\"Hey,\" I answered, leaning down and kissing her briefly.\n\n\"That was exactly as good as I hoped it would be.\"\n\n\"Same here,\" I assured her with a smile.\n\nReluctantly, I withdrew my shrinking cock from her pussy and rolled onto my side. She giggled and slipped a hand down to the scene of the crime, cupping herself and dipping one finger inside.\n\n\"Oh, my god!\" she said with a laugh. \"That was SO much!\"\n\n\"What can I say?\" I asked with a smile. \"You're very inspirational!\"\n\nGrace brought her thighs together to keep from making a mess and rolled to face me. Her expression was placid and happy.\n\n\"I guess I don't have to be jealous of my mom anymore, do I?\" she said meditatively."
    ],
    "authorname": "outdoorhorny",
    "tags": [
        "mf",
        "older male",
        "younger female",
        "18-year-old",
        "creampie"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/grace-ch-09-1"
}
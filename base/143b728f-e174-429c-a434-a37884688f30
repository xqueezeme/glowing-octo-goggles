{
    "title": "S.A.D., the S is for...",
    "pages": [
        "\"That's a great idea, Laura!\" Angie said. \"Now that you mention it, I can't believe I haven't set you up with him already. But...\" The blonde paused as she sipped her tea. \"I know Paul is out of town for Valentine's.\"\n\n\"That's OK,\" I said, masking my disappointment with a shrug. \"Maybe some other time.\"\n\nAngie and I were seated at our regular downtown caf\u00e9, and I had a specific purpose in mind for our get-together. All the chatter about Valentine's normally didn't get to me, but this year felt different. Why should I sit at home alone? It seemed everyone else was out having romantic fun. I interpreted this unfamiliar angst as a sign that I needed to adjust my work--life balance. It was time to get myself back into the dating game, and Angie's longtime friend Paul seemed like a good place to start. A very good start.\n\n\"It's just a commercial holiday anyway, cementing old gender stereotypes,\" I continued sarcastically. \"Man, buy pretty flowers for your precious woman.\"\n\nAngie nodded softly. \"Yeah, I guess so.\"\n\nI had expected a more heartfelt agreement. As the only women in an otherwise all male cohort, the two of us had struggled through Medical School together and shared many eye-rolling moments over the years. Angie had been single even longer than I had, so I expected her to share my sentiment.\n\n\"So. Anyway,\" I said. \"Do you want to do something together on Valentine's then? I'm off work.\"\n\nDetermined to push myself to finally go on a date with Paul, I'd turned down all requests from married colleagues to trade shifts at the hospital. Apparently for no good. Why did I put it off to the last minute to ask Angie to set me up? Of course, a man like him would be busy on Valentine's.\n\n\"Oh, uhm...\" Angie began. \"I'd love to. But I'm busy.\"\n\n\"Oh, do you have a date?\" I asked, hoping she had some exciting news to tell me. \n\n\"Yeah, no. But I'm going away.\"\n\n\"Oh, where to?\"\n\nAngie looked uncomfortable. \"Well, it's a kind of S.A.D. celebration.\"\n\n\"A sad celebration?\" I asked, confused. \"You're gonna celebrate sadness?\"\n\n\"No, no, no,\" Angie chuckled. \"S-A-D. It's an abbreviation for...\" She hesitated a moment before continuing. \"Singles Awareness Day.\"\n\n\"What's that?\"\n\n\"It's sort of an alternative to Valentine's, celebrated by single people. I've made it a tradition to celebrate it the same way every year.\"\n\n\"That sounds fun\u2014I'm single too,\" I hinted.\n\n\"Oh, Laura, honey. It's kind of a closed thing\u2014by invitation only. I would love to invite you, and even if I could get you in, I really don't think it's your thing.\"\n\n\"OK,\" I said. I shrugged my shoulders as if I couldn't care less, but I still gave Laura a disappointed look. \"You could at least tell me what it is.\"\n\n\"I would, but... Well, know I love you. But you can be a bit judgmental sometimes.\"\n\n\"What's that supposed to mean? I'm not judgmental! I've supported equal rights for every community out there. Remember, we were in all those demonstrations together?\"\n\n\"Sorry, sorry... I shouldn't have said that,\" Angie said, holding up her hands defensively.\n\n\"So, tell me then,\" I demanded.\n\n\"I can't, hun,\" Angie said. \"We've promised each other we wouldn't talk about it outside the group.\"\n\n\"Now you're making me worried. Have you got yourself tangled up in something bad?\"\n\nAngie chuckled. \"No, not at all.\"\n\n\"But...?\"\n\n\"No but,\" Angie said, smiling ambiguously.\n\n\"What's going on, Angie? I thought we were best friends.\"\n\n\"Look, I can't tell you any details. But here's the basic deal. I've been pretty much single for as long as we have known each other, right? Maybe someday the right person comes along, but in the meantime, I'm very happy to be on my own. I like my independence, and for the most part, I don't miss having a regular partner in my life. For most part...\"\n\nAngie paused, stalling by sipping her tea. I stared at her with cocked brows. \n\n\"But there are some things,\" she continued. \"Let's call them desires\u2014desires that usually require the trust and respect of a long-term relationship. And I think that's unfair.\"\n\n\"Maybe,\" I said. \"But that's just how it is.\"\n\n\"Well, not necessarily. And I found a group of like-minded people who feel the same way. So, for S.A.D. we get together and...\"\n\nShe suddenly turned quiet.\n\n\"And what?\" I pressed.\n\n\"Sorry, I've already said too much.\"\n\n\"Come on, tell me!\"\n\nAngie shook her head. \"No, I can't. And you wouldn't like it.\"\n\nI stared at her insistently, but my friend wouldn't budge.\n\n\"I don't know if I should be worried about you or hurt that you won't tell me,\" I said.\n\n\"Can we just drop it, please?\" Angie pleaded.\n\nWe finished our tea in awkward silence. When I left, I felt more alone than I had in a long time.\n\n* * * *\n\nThat sentiment of loneliness lasted through the week. Two nights before Valentine's day, I picked up the phone to start calling my married colleagues to see if they still wanted to trade shifts. I could at least make myself useful rather than sit around moping. But a knock on the door interrupted just as I was about to dial. \n\n\"Oh. Hi Angie,\" I said as I opened the door. \"What's up?\"\n\n\"Hi hun, can I come in?\"\n\n\"Of course.\"\n\nI made us tea, and we chatted casually as the kettle boiled, avoiding the reason for Angie's unannounced visit until we were comfortably seated on the couch.\n\n\"Sorry about the other day,\" she said.\n\n\"It's fine,\" I said. \"You're allowed to have secrets.\"\n\n\"Yeah, I know. But I didn't mean to make you feel left out. I shouldn't have said anything to begin with.\"\n\n\"Really, it's fine. Is that what you popped by to say?\"\n\n\"Well, yes\u2014and no,\" Angie said and paused for a moment. \"Look, did you make any plans for Valentine's yet?\"\n\n\"No, but I thought you were busy?\"\n\n\"I know. But I spoke to the organizer and convinced her you could come along as a medic if you want.\"\n\n\"A medic? What kind of activities are you up to that require a medic?\"\n\n\"Nothing serious\u2014a sprained ankle at worst. Do you think you're interested?\"\n\nConfused yet intrigued, I eyed her up. \"Depends what it is.\"\n\n\"Of course. Now, promise me you won't be judgmental.\"\n\n\"Why do you keep saying that?!\"\n\n\"Just promise, OK?\"\n\nI responded with an exaggerated eye roll. \"Fine, I promise.\" I could tell my friend was taken aback by the sarcasm in my voice. I moved closer, placing my hands on hers to reassure her. \"Go on, honey. I won't judge you.\"\n\nAngie took a deep breath. \"OK, it's strange that it's so hard to talk about, because it's really not anything bad. But here it goes. You know how I told you S.A.D. is short for Singles Awareness Day?\"\n\n\"Yeah?\"\n\n\"Well, the group I spend S.A.D. with is dedicated to singles only\u2014no couples or attached people are allowed. So, it is a Single Awareness Day, but we use the acronym for something else too.\"\n\n\"Yeah, OK. What?\"\n\n\"Spanked Ass Day,\" Angie said hastily, as if making sure she quickly got the words out of her mouth.\n\n\"Spanked Ass Day?\" I reiterated. \"What the hell is that?\"\n\n\"It's really not something I talk about\u2014with you or anyone else,\" Angie said. She lifted her cup from the table, and her jittery hands revealed that she was noticeably unnerved by the subject. Yet, she made a point to hold my gaze. \"But the thing is, Laura, I liked being spanked.\"\n\n\"OK,\" I said and stared wide-eyed at my friend. \n\n\"I like it a lot, actually,\" Angie said, putting emphasis behind her words. \"I might not want to like it, but at some point, you just have to be honest with yourself, you know. There's something very erotic about a man putting me over his lap and slapping my ass red. I guess it connects with me on some deep, primal level.\"\n\nShocked, I said nothing. \n\nAngie put down her cup. \"You look shocked.\"\n\n\"No, it's just... I hadn't taken you for that kind of woman.\"\n\nIt was Angie's turn to roll her eyes. \"And what kind of woman is that, exactly?\"\n\n\"Sorry, I didn't mean... So, what are you saying? That you found some gallant knight who is willing to spank you every Valentine's?\" \n\nI tried my best not to sound condescending, but I knew I was failing.\n\n\"Well, yes and no,\" Angie said. \"It's a bit more to it than that.\"\n\n\"Like what?\"\n\n\"Well, the idea of just going somewhere and get spanked is a bit... let's say crude. So, the people who started this gathering realized that it needed a bit more finesse. They came up with a sort of hide and seek game. Basically, the men have to catch you before they can spank you.\"\n\n\"Hide and seek?\"\n\n\"I know it sounds silly. But the rush...It's amazing.\"\n\nI stared at my friend in disbelief. This sounded crazy. \"Men? So, it's a bunch of them chasing you? And then spanking you?\"\n\n\"Well, it's mostly one man at the time. They tend to spread out when they search. It's actually a rather intimate moment between the spanker and the spankee, so I think most want to do it alone. And it's not just me\u2014there's a bunch of women every year.\"\n\n\"And where do you do this?\"\n\n\"The chase takes place at a vineyard. Isabella, the woman organizing the whole thing, owns it. It's very secluded. None of us want any nosy spectators, as I'm sure you understand.\"\n\nI nodded vaguely, struggling to fathom what my friend was telling me.\n\n\"So, anyway,\" Angie continued. \"Since there is a fair bit of running going on, it's good to have someone with a bit of medical training in the group. I've had the responsibility the last few years, but I told Isabella that I would prefer if someone else was there this year so I can keep my head in the chase. Nothing serious ever happens, so it's more of an excuse to be honest.\"\n\n\"An excuse for what?\"\n\n\"So you can join without joining, so to speak. You said you wanted to do something on Valentine's, and this is the best I can offer. Well, assuming you don't actually want to join the game?\"\n\n\"Don't be ridiculous!\"\n\nAngie chuckled. \"I thought not. But do you want to come along as a medic?\"\n\n\"I don't know. The whole thing just sounds extremely sexist, to be honest. Isn't this the sort of thing we always fought against?\"\n\n\"But that's the thing, Laura\u2014this is completely different. It's a game I enter on my own free will. And 364 days a year I'm right there with you, your woke sister in arms. But, on this one day, I allow myself to be something different\u2014a woman willing to be dominated by the man that captures her.\" \n\nAngie's breath grew heavy as she spoke.\n\n\"Good lord,\" I said, shaking my head in disbelief.\n\nAngie collected herself. \"So, what do you say?\"\n\n\"I don't know, Angie. It seems a bit far out.\"\n\n\"You don't have to answer straight away.\"\n\n\"OK. I guess I'll think about it.\"\n\n\"Great. But let me know by tomorrow.\"\n\nWith that Angie stood and prepared to leave, even though her tea was nearly untouched. I was relieved that she didn't want to sit around and chat as if everything was normal after dropping a bomb like this. I followed her to the door.\n\n\"How did you find these people?\" I asked.\n\n\"A friend of mine invited me.\"\n\n\"Who? Anyone I know?\"\n\n\"Well, I'm not sure he would want you to know, so if you're not coming tomorrow, it's better if I don't tell you.\"\n\nHe, I thought. What man might Angie know who would invite her to some crazy spanking game? I was admittedly curious and was tempted to ask for more clues. But instead I merely hugged her goodbye.\n\nYet, the curiosity didn't leave me. Later that night when I lay in bed, Angie's words kept spinning in my head. Never in my life had I expected this from my friend. I had always considered us very much alike, with similar values and views on life. How could Angie possibly think it was OK to let men treat her like that, even if it was only for a day?\n\nAngie's revelation haunted my dreams too. My mind created vivid images of my friend over a man's lap, her blonde hair covering her face as she submitted to his spanking. I woke up sweaty in a state of agitation. \n\nI tried to shake these images the next day, but they kept popping up in my head. How could I ever look at her the same? I didn't want to know this side of her existed, but now it was all I could think about. Why did this affect me so deeply? When Angie called me in the afternoon, I felt guilty for the images I'd imagined.\n\n\"So, what do you say?\" Angie asked.\n\n\"I still don't know,\" I sighed. \"The whole thing just sounds really weird. Are you sure you even want me there?\"\n\n\"Otherwise I wouldn't have suggested it. It would actually be nice to have someone to share these things with. It's different with Paul, we sort of have a silent agreement not to talk about it for the rest of the year.\"\n\n\"Paul?\"\n\n\"Ah, fuck,\" Angie said. \"I shouldn't have said his name.\"\n\n\"You mean Paul, as in your very attractive friend Paul?\"\n\nAngie giggled nervously. \"Yes, he's the one who invited me in the first place. The first year, I was only there as medic too, but I knew straight away I had to join the game the next year.\"\n\n\"So, is that what you expect me to do\u2014get drawn into your deranged games?\"\n\nAngie sighed. \"I thought we agreed you wouldn't be judgmental. And no, I don't expect you to join. You obviously have no interest in it.\"\n\n\"Of course not,\" I said. In my head, I repeated my words with more emphasis, reassuring myself I had had no interest in being spanked by any man. \"So, Paul, huh?\"\n\n\"Yeah, I shouldn't have told you that. Now I'm going to feel really bad if you don't come.\"\n\nI chuckled. \"Well, I guess I don't want to make it awkward between you and your friend who spanks you.\"\n\n\"So, is that a yes?\" Angie asked enthusiastically.\n\n\"I guess it is.\"\n\n\"Great! I'll pick you up around noon tomorrow.\"\n\nMy sleep was even more restless the next night. The images of Angie over a man's lap reappeared, but this time I could see the man's face. It was Paul exerting his domination over Angie. And as the surreal scenario perpetuated, the woman over his lap morphed from a petite blonde to a curvier woman with long, curly brown hair. In the dream, it was me under Paul's control, his hand slapping my round ass. I woke up screaming with pleasure. My hand was buried between my legs, and I realized I'd had my first wet dream since my teens.\n\n* * * *\n\n\"So, how long does this game last?\" I asked as I got in the car with Angie the next day.\n\n\"The game usually lasts a few hours. There's a maximum time set at four hours, but it never lasts that long. And then there's an event afterwards, but it doesn't need a medic. We can just go back into town and have dinner or something after the game.\"\n\n\"I wouldn't want to keep you from your fun\u2014or whatever you want to call this,\" I said, sounding snarkier than I intended to.\n\nAngie didn't call me on my condescending attitude this time. \n\n\"No, it's fine,\" she said. \"I feel like I talked you into come along. The only thing is...\"\n\n\"What?\"\n\n\"Well, in the off chance that I lose the game, I have to stay. It's part of the rules. In that case you can take the car back to town. But don't worry, I know this game well by now, and I won't lose.\"\n\n\"So, what happens after the game?\"\n\nAngie glanced at me. \"Uhm... Why don't we focus on the game for now? Is there anything you want to ask before we get there?\"\n\n\"Yeah, there's a lot I don't get. For instance, you say all the women do this out of their free will, right?\"\n\n\"Yes, of course.\"\n\n\"But if you really want to get spanked, why do you run?\"\n\n\"Oh, well. It's complicated. I guess for me, I want it, but I also dread it. And when I see a man come chasing after me, the dread part of me takes control, and I just start running. Instinct takes over. And some of the women claim they don't want to get caught at all. This one woman told me she enters the S.A.D. games to prove to herself she can outrun or outsmart any man.\"\n\n\"Sounds like nonsense to me.\"\n\n\"Maybe, but as far as I know, she's never been caught.\"\n\n\"But you have?\" I asked.\n\n\"What\u2014been caught? Yeah, of course. Many times. But I really try not to. And when they catch me despite my efforts, the sensation is so much better.\"\n\nI sat quiet for a moment, fiddling with my curls as I built up the courage to ask what I really wanted to know.\n\n\"Did Paul ever catch you?\" \n\nI failed to sound casual. Angie glanced at me, as if trying to make out if I really wanted to know. \n\n\"Yeah, he catches me pretty much every year,\" she said. \"He didn't the first year I played. I think it was to spare me the embarrassment, because he saw me at one point and didn't chase after me. But the second year I played he did. I ran like crazy, and when he caught me...\"\n\nMy friend trailed off.\n\n\"Yeah?\" I pressed, sounding more intrigued than I wanted to.\n\nAngie giggled nervously. \"I was mortified! It was so embarrassing to get spanked by someone I'd known half my life. But damn it was good!\"\n\n\"I can't believe Paul would do that.\"\n\n\"Aha, and why's that?\" Angie's voice turned agitated.\n\n\"Well, he doesn't seem like the type of man who...\"\n\n\"Are we still on this?\" Angie cut me off. \"What type is that exactly? Maybe bringing you along was a mistake after all. Stop being so uptight!\"\n\n\"Sorry, sorry!\" I said, holding up my hands to concede.\n\nAngie took a calming deep breath. \"Look, I'm sorry too. I get it. You still believe it's only bad guys who get off on spanking women. But I can ensure you\u2014you're wrong. Paul, for instance, is exactly as good and respectful as you believed him to be. If he wasn't, he wouldn't be allowed to participate in this group.\"\n\nI sat in silence for a moment, staring at the road in front of us. I really liked Paul. It helped that he had an indisputably good physique, but there was more to it than that. He had always struck me as honest and sympathetic. And his kind, deep blue eyes often made me want to melt away. Could he really hide this strange desire under that sweet surface? It was hard to believe he would spank women in some outlandish game. Could I still go on a date with him, like I'd asked Angie to set up? The scene from my dream reappeared, and I blushed even though the image of me across Paul's lap was merely in my head.\n\n\"So, what are the other men like?\" I asked, trying to divert my attention from my own imagination.\n\n\"What do you mean? Physically? Well, there is a fair bit of running in this game, so it's not a place for lazy slobs. That's for sure.\"\n\n\"But why do they do it?\"\n\nAngie smirked. \"Why do you think they do it?\"\n\nI took it as a rhetorical question and didn't reply.\n\n\"Look,\" Angie continued. \"There's a basic understanding in this group that what happens there is an isolated event. I'm sure these guys abide by the same standards as you and me the other 364 days of the year, with ideals of equality, respect, and all that fluffy stuff. But on this one day\u2014the annual S.A.D.\u2014they allow themselves to recognize other parts of themselves. I guess it's the same function for the men as it is for the women, only reversed. It's like vent for singles who enjoy the art of spanking.\"\n\n\"So, no couples?\"\n\nAngie shook her head. \"Nope. S.A.D. is just for singles. Spanking can be difficult to fulfill in casual relationships. It's not something most people bring up on a first date, you know. Couples can spank each other as much as they want\u2014every day of the year.\"\n\n\"Well, I certainly didn't get spanked when I was in a relationship.\"\n\nAngie gave me a lethargic glance. \"Of course, you didn't. But maybe you should have.\"\n\nI turned quiet. The remark hit home, probably more than Angie intended. My last break-up was over two years ago, and it was long overdue when it happened. The relationship had lacked any trace of passion for a long time before we went our separate ways. Maybe I should have done something to spice things up. But spanking? Why would anyone be into that? I just didn't get it.\n\n\"So, what happens when they catch you?\" I asked.\n\n\"What do you mean? I thought I told you. They spank you.\"",
        "\"But how, exactly?\"\n\nAngie gave me a curious look. \"You're very interested in the details. Maybe you'd like to join after all?\"\n\nI snorted. \"Definitely not. But I'd like to know what I might see when we get there.\"\n\n\"You probably won't see anything. Isabella doesn't want you spying on the participants. But if you need to know, the man pretty much decides how he spanks you. And it gets a bit more embarrassing every time you're caught. Or at least the chasing does.\"\n\n\"Embarrassing?\"\n\n\"I'm not sure you want to know,\" Angie said and giggled.\n\n\"Do you try to get away?\"\n\n\"Not once the spanking begins. That's not allowed. You can put up a fight when he catches you, though.\"\n\n\"A fight? I should have brought a bigger medic kit!\"\n\n\"No punching or anything. But you can try to get away until he wrestles you to the ground. For some, that's a big part of the rush. But I usually just submit once they catch me.\"\n\n\"Submit? You just let them have their way with you?\"\n\n\"Within the rules of the game, yes. But there's no sex involved. They can't touch your cunt, no matter how much either of you want it.\"\n\nI shook my head in disbelief. I'd never heard Angie use the C-word before. She was definitely slipping into a different mindset. \n\n* * * *\n\nWhen we pulled up to a large mansion, an elegant woman approached us. Her black hair had hints of grey and was arranged in a neat slicked-back bun. Angie had mentioned that the women who participated in the game were in good shape, and this woman was no exception. Yet, in a tight plaid skirt and a matching jacket, she didn't look like she was dressed for a chase.\n\nAngie waved excitedly and hurried to exit the car. \"Isabella, how lovely to see you again!\"\n\nTo my surprise, Angie bobbed a formal curtsy before embracing the woman for a double-cheek kiss.\n\n\"So happy you could come,\" Isabella said. \"You look beautiful, as always.\"\n\n\"As do you! Please, meet my friend.\"\n\nIsabella looked over to me. \"I see. So, you're the medic?\"\n\n\"That's what I've been told,\" I said, holding out my hand to introduce myself.\n\nIsabella sized me up with a stone-faced stare before accepting my hand. She turned her focus back to Angie.\n\n\"Are you sure you don't want to stay for the night?\"\n\n\"Yes, we've booked ourselves into a motel,\" Angie said. \"We'll be leaving after the game.\"\n\nIsabella tilted her head and drew a slight smirk. \"Unless you lose, I presume?\"\n\n\"Yes. Of course. But I won't.\"\n\nIsabella didn't look convinced. \n\n\"Either way, there's a room prepared for you if you change your mind,\" she said and turned to walk towards the area where three other women waited. \"Come, the rest of the girls are already here.\"\n\nAngie skipped along after Isabella, waving excitedly to the other women. I had never seen my friend so jittery. I grabbed my medic kit from the car and strolled after them. I felt nervous to meet a group of women who all shared the same strange interest. Yet, I tried to tell myself that, given what they were there for, they should be abashed to meet me rather than the other way around.\n\nTwo of the girls\u2014a petite Asian and a slender redhead\u2014greeted Angie in a group-hug. They seemed as jittery and excited as Angie. She introduced the Asian girl as Mai and the redhead as Theresa.\n\n\"So nice to meet you!\" Mai said, greeting me with an embrace. \"It's so kind of you to take care of the medic job so Angie can focus on the game this year.\"\n\n\"Yeah, now she'll have nothing to blame it on when she loses,\" the redhead teased.\n\n\"No chance!\" Angie said, sticking her tongue out at Theresa before turning to Mai. \"I like your outfit. Who are you this year?\"\n\nMai was dressed in a short skirt, a white top with a blue jean collar, and a bright red ribbon in the front.\n\n\"You can't tell?\" she asked in mock offence. \"I'm Sailor Moon!\"\n\nI had no idea who that was, but I could see there was a vague sailor-theme to her costume, though I had never seen a sailor uniform quite like that\u2014with a skirt that just barely covered her ass.\n\n\"Mai always dresses up for the game,\" Angie explained.\n\nMai nodded excitedly. \"I love cosplay, and I love spankings. So, why not combine them?\"\n\nShe giggled, and I did my best to smile. I was taken aback by how unreservedly this girl I just met talked about her kink. But presumably there was no reason to pretend they didn't all know why they were there. All except me, of course.\n\n\"Who's that?\" I asked, pointing to a black woman, who seemed busy warming up. Her camouflage-patterned hotpants and matching top added to the impression that she was getting ready for combat. They also did little to hide the fact that she was in exceptionally good shape, with muscular thighs and a toned midriff. She had headphones on and seemed less than interested in any chit-chat.\n\n\"That's Charla,\" Angie said. She waved at the black woman, who returned the greeting with a slight nod without breaking her warm-up routine. \"She's the one I told you about that never gets caught. She likes to psych herself up before the game begins.\"\n\n\"She looks like she's properly dressed for a run,\" I said. \"Why aren't all of you? Or maybe you want to get caught?\"\n\nI thought it was a fair question, but Angie gave me a tired look. The other women didn't seem offended.\n\n\"I like to dress like I do on a typical day at home,\" Theresa explained. \"It makes the whole thing seem more real to me, and it's easier to relate to afterwards somehow. I'm a grad-student, and jeans and tank top are what I'd typically wear to the library.\"\n\n\"I like to think of this as my alternative to a Valentine's date,\" Angie said. \"So, I dress for a date. Which reminds me...\"\n\nWithout hesitation, my friend stripped off the casual clothes she'd worn for the car ride. Her bra and panties were a matching black, and didn't come across as something she'd picked to be comfortable while running. The high-cut brief left a lot of her cheeks bare, and her nipples were partly visible through the laced details of her bra. I hadn't dared to ask what level of undress the spankings were administered at and wondered if her sexy underwear were a sign Angie expected to be seen in them. \n\nBut I knew there could be other reasons, especially if Angie regarded the game as a substitute for a date. The two of us had laughed about the concept of dating underwear. Even when there were no expectations that the man would see you undressed at the end of the date, there was something satisfying about getting through-and-through dressed up. If I was honest with myself, I had done the same\u2014both inside and out. I wasn't there to play some stupid game, but I'd put on clothes that were appealing rather than practical. The tight blouse emphasized my breasts, and the flowery skirt flapped in the light breeze. I wasn't sure what to make of Angie's revelation about Paul's eccentric interests, but I still wanted to give a good impression, should I run into him.\n\nAfter unabashedly chatting in her underwear, Angie squatted down and started digging through her bag. A moment later, she pulled out a black dress, which she wiggled into. It hugged her slim frame. \n\n\"It's stretchy, so it's actually not that hard to run in,\" she said, pulling at the fabric. She bowed down and tightened her sneakers. \"Have to wear good shoes though. Don't want to give you any extra work.\"\n\n\"And what about Isabella?\" I asked, glancing at the woman who hadn't been hiding her interest in Angie's little exhibition. Unlike the other girls, she was wearing boots with elevated heels. \"Does she play?\"\n\n\"No, she doesn't participate in the hunt,\" Theresa said. \n\nI gave her a skeptical frown. \"So, she just hosts these games out of the goodness of her heart?\"\n\nMai chuckled. \"I don't think it's completely altruistic. She usually gets something out of it too.\"\n\nAngie and Theresa joined in a giggle. I was about to ask what they were referring to when Isabella called for attention.\n\n\"OK, girls! We'll start in five minutes. If you have any last-minute preparations, make them now. Laura, come with me. I'll show you where your equipment is.\"\n\n\"I brought my own,\" I said, holding up my medic kit.\n\n\"Very well. But I need you to wear this if you leave the base,\" Isabella said and handed me a bright yellow hat. \"It's the only way the hunters won't know you're playing.\"\n\nHunters, I thought. It was a suitable term for the men who came there to chase down a bunch of women and subject them to a spanking. But what did that make the women?\n\n\"Where are they?\" I asked. I'd been worried what I should say to Paul when meeting him under these unusual circumstances. \n\n\"Who?\"\n\n\"Uhm, the hunters?\"\n\n\"They start from the other side of the property,\" Isabella said. \"It's better not to mix them beforehand. Not knowing who you might encounter out there adds to the rush, it seems.\"\n\n\"How many are they?\"\n\n\"It's four men this year, same as the women. And all of them wear a wrist device like this.\" She handed me something that looked like a watch, but instead of the clock, the electronic display showed a compass. \"The blue arrow points to the base at all times. If someone gets hurt, they will press the red button, and a red arrow will point you in their direction. I have the device too, so if I'm not with you, press your button if you need a pickup with the jeep.\"\n\n\"What's the blue button for?\" I asked.\n\n\"That's just for the hunters. The winner presses that button to tell everyone that the game is over.\"\n\n\"How do they win exactly?\"\n\n\"The game ends whenever a girl has been caught five times. Whoever captures her is considered the winner and...\" Isabella cut herself off and gave me a scrutinizing stare. \"You seem oddly interested in the ins and out of the game. Why's that?\"\n\nI felt uneasy under her cold blue eyes. \"Uhm, just curious.\"\n\n\"I hope you understand that discretion is essential for an event like this. The participants all have reason to prevent what we do out here from becoming public knowledge. No one wants an audience.\"\n\nI shrugged my shoulders. \"I won't tell anyone.\"\n\n\"Then I guess you don't need to know the details. Unless...\" Isabella held my gaze for an uncomfortably long moment. \"Angie told me you weren't interested in participating. Was she wrong?\"\n\n\"I'm not not that type of woman.\"\n\nIsabella drew a slight smirk and inspected me with piercing eyes. \"Of course not. OK, girls! Twenty seconds!\"\n\nThe women gathered at a road crossing. A white line had been drawn in the gravel to indicate the starting line. Isabella picked up a gas horn and looked at her watch. Everyone was dead silent.\n\n\"OK, go!\" Isabella yelled and let the horn echo over the property.\n\nThe four women set of running. At first, they ran as a group, but eventually they dispersed, each of them heading for different forest patches surrounding the vineyards.\n\nAnd just like that, I was left alone with Isabella. Neither of us seemed inclined to strike up conversation. Isabella sipped a glass of wine, and there was a spare glass for me. But I didn't ask her to pour me a drink. I was there for the sole purpose of a medic and didn't want her to think otherwise.\n\nAfter twenty slow-moving minutes of silence, I decided I needed a change of scenery. \n\n\"I'll just go for a stroll,\" I said.\n\n\"This isn't a peep show, you know,\" Isabella cautioned, her stern eyes locked onto mine.\n\n\"I know. But in case anything happens, isn't it better that I'm out there, ready to help?\"\n\nIsabella gave me a tedious stare. Eventually she shrugged. \"OK, you're the doctor. But don't go spying on the participants.\"\n\n\"Of course,\" I said, annoyed by the patronizing tone in Isabella's voice.\n\n\"And whatever you do, don't take off your hat. They won't be able to tell you apart from the other women.\"\n\nI headed up the road, which was flanked by vineyard fields. It was still hard to grasp the absurd reality of what was going on out there. I scanned my surroundings, but all I could see were straight rows of vines. Adjacent to the fields were several forest covered hills. I assumed the women were hiding there. A shiver came over me as I imagined behaving like a hunted animal. \n\nI told myself the best place for me as a medic was where the action was likely to occur and steered towards one of the forest patches. The yellow wildflowers that fringed the narrow path reflected the light of the warming sun, which beamed down from a bright blue sky. I often found that this time of year, when the mild winter broke into early spring, was the perfect time to enjoy a stroll in the forest. Normally, I would have listened carefully to the songbirds; now I listened carefully for something entirely different. My eyes darted among the bushes, curious to get a glimpse of the things Angie had described. \n\nYet I saw nothing out of the ordinary\u2014trees, flowers, and a ground squirrel disappearing under some rocks. I began to wonder if Angie had played an elaborate joke on me. Driving all the way out here for a pointless gag sounded far-fetched, but so did the game. Bored, I started to head back to the base.\n\nBut an odd sound made me stop. I listened carefully. The soft whimpering of a female voice came from the other side of a hill. \n\nIsabella's exhorting words echoed in my head, telling me I wasn't meant to spy on the participants. But what if these were the sounds of a woman in need of medical attention? I moved slowly up the hill, stepping carefully as if not to scare off a rare animal.\n\nI froze in my tracks as I peeked over the ridge. There, in the sunlit glade stood Theresa with her hands against a tree trunk. The redhead was bending slightly at the hips, and her jeans and underwear had been pulled down to her knees. Next to her stood a man, who greedily groped her naked ass. Theresa moaned as he slapped her.\n\nI ducked down, heart pounding in my chest. This was not meant for my eyes. I felt guilty for prying, yet unable to sneak away. The scene was glued to my retinas. I gasped as I heard the slapping sound of a hand against Theresa's behind. It compelled me to sneak another peek. I crawled up the ridge ever so slowly.\n\nThe scenery was still breathtaking. Theresa arched her back, making her ass an inviting target. Her eyes were closed, and I couldn't tell if it was due to her shame or to focus on the sensation of her experience.\n\nHer ass bounced with each slap, and the spanker seemed transfixed on what he was doing. He would unlikely see me. Yet, that stupid hat Isabella made me wear was meant to be spotted from afar. I ducked down, forcing myself not to push my luck.\n\nStill, I couldn't bring myself to leave. I'd never considered myself the voyeuristic type, but the scene in the glade struck a chord deep inside me, affecting me in a way I never expected. Theresa's compliant pose, the demanding eyes of the spanker, and the taboo of a woman so unreservedly submitting to a dominating man\u2014it all compelled me to watch. At least I had the sun in my back, making me harder to spot.\n\nI took off the hat. Isabella's cautious warning went off like an alarm inside my head. That hat was the only thing separating me from the participating women. At first, I placed it on the ground next to the medic kit. The hat was within arm's reach, but it wasn't safe. It wasn't a windy day, but the hat was light, and an opportune gust might catch it. That could be a disaster. Next to me was a pile of rocks, and I jammed the hat into a crevice. I made sure the hat was safely secured before quickly crawling up the ridge again. There was no way to know how long the display would go on for, and I desperately wanted another glimpse. \n\nI was pleased to find the spanking still in progress on the other side. In fact, it seemed to have intensified. Theresa threw her head back as she received a sharp slap to her ass. Her hair whooshed through the air, the sun reflected in her red locks. I found myself copying Theresa's expression, mouth left open in a mixture of shock and pleasure. Every time the spanker's hand landed on Theresa's ass, she wrinkled her brow in pain before her face melted back into lush submission. \n\nTo this day, I can't explain why I did what I did next. My hand had a will of its own as it moved down my body, and I didn't fully register what I was doing until I had wedged my arm between myself and the ground. My hand continued inside the hem of my skirt, and as I felt the touch of my fingers between my legs, I pressed my lips together to suppress a moan. \n\nI knew what I was doing was wrong, and a part of my mind screamed for me to stop. What was I doing? Touching myself while spying on some outrageous spanking game just wasn't me. And yet, I couldn't bring myself to stop. Just another moment, I thought. I reassured myself that in the off chance the couple in the glade would see me, the ridge would hide where my hand was. I kept my head low as I continued to spy.\n\nBut I wasn't remotely concealed from the back. I gasped as I heard a cracking sound behind me. I spun my head around and spotted a black man running at me. He was wearing running shorts and a sporty top, making him look like an Olympic sprinter. He was around two hundred yards away, but that distance diminished by the second.\n\nI panicked. In the heat of the moment, I couldn't remember which crevice I'd jammed the hat in. And overwhelmed with shame, I wasn't sure I should put it back on even if I found it. The man running at me must have seen me spying, which I'd been given strict instructions not to do. How could I possibly explain away my actions? Had he seen where my hand had been?\n\nWhatever he'd seen, he approached quickly. Instinct kicked in. I felt as if my body made decisions for me, and I took off running. I knew I wouldn't be able to outrun him and steered into the dense part of the forest. Hopefully, the terrain would conceal me. My skirt fluttered as I skipped over stones and logs. My entire being was consumed with one thing\u2014to escape.\n\nGlancing anxiously over my shoulder, I tried to see if I'd successfully shaken off my pursuer. When I couldn't see him, I stopped and listened for steps. All I could hear was myself gasping for air. My heart pounded in my chest as I leaned back against a trunk to catch my breath.\n\nI shook my head at my predicament. What had I done? Sure, it would have been embarrassing to face the hunter, especially if he'd seen me touching herself. But how was this any better? The hunter had likely been too far away to notice what I'd been doing. I could have just put the hat back on and made up some excuse\u2014maybe pretend that I was lying on the ground because I'd tripped. But now I was far away from my immunity hat. I wasn't even sure I could find my way back. How could I get myself out of this mess?\n\nOne solution would be to use the tracking device Isabella had given me. I could just press the button to make Isabella come get me. But I didn't dare to explain how I had ended up without the hat. There was something very strict about her attitude that made me feel I shouldn't cross her. \n\nIt was only then I realized I had left the medic kit behind too. I grabbed my forehead, marveling at my own stupidity. I couldn't help thinking that Angie was right; it was hard to fight the instinct to flee when a man came running at you, especially if his intentions were to submit you to a spanking. A thrill rushed through my body as the image of Theresa entered my mind. What if I hadn't escaped? Could I have ended up in a similar position?\n\nI decided that my best option was to slowly backtrack to where I'd left my things. There was a good chance I would make it there unnoticed. I hadn't seen anyone for a long time before stumbling on Theresa and her spanker, so I assumed the game covered a large area. Treading carefully, I started walking back, hoping my chaser had kept running in the wrong direction.\n\nUsing the sun to navigate against, I retraced my steps through the forest. I had covered a lot of distance during my escape, and my pulse increased with ever step. I scanned my surroundings, ready to flee at the mere hint of someone approaching. I recalled the thrill of playing hide and seek as a kid. This game, however, was far more adult, and the stakes were significantly higher. And so was the thrill.",
        "Eventually, I reached the glade where I had watched Theresa's spanking, but now I approached from the other side. The quickest path to my belongings was across the opening. It was just over fifty yards, and I couldn't see anyone around. In fact, it was hard to imagine anything scandalous had recently taken place in the quiet glade. \n\nThe other option was to pussyfoot my way around the opening to avoid detection. I was surprised to realize a part of me preferred this option not for safety, but to prolong the thrill compared to a quick rush. \n\nBut I never got the chance to make my decision. I shrieked as someone grabbed me from behind. \n\n\"Gotcha!\"\n\nI looked back over my shoulder to see the man who had spanked Theresa. He held me firmly by the arms. \n\n\"I...\" I began, not sure exactly what I wanted to say.\n\n\"Come,\" he said and pulled me towards the opening. \n\nI remained frozen, trying to make sense of the situation. This couldn't be happening. My eyes darted to the rocks that hid my immunity. \n\nWhen I didn't immediately follow him, the man gave me a curious look. \"You don't strike me as one who likes to resist. Right?\"\n\nI felt his grip tightening around my wrist. His gaze sharpened, and he looked me over as if planning his attack. I quickly shook my head.\n\n\"No, I...\" I began, unsure of how to save face while explaining to him that I wasn't playing.\n\n\"Good,\" he said. \"Come, let's do it in the opening where you spied on us before.\"\n\nHe had seen me! Without letting it on, he'd been aware that I watched while he spanked Theresa. The guilt left me unable to speak up as I followed him.\n\n\"Get on your hands and knees,\" he commanded.\n\nOn any other day, I wouldn't have accepted a man ordering me around. I would have shoved his commanding tone up his ass, told him to go fuck himself, and maybe even punched him. But this day was far from normal. \n\nA part of me wanted to scream that I wasn't playing\u2014to tell him that I could prove my immunity if he only let me fetch the hat from up on the ridge. But I was overwhelmed with shame. Why had I broken Isabella's instructions? The woman had given me two simple rules\u2014don't spy and don't take the hat off. I had broken both.\n\n\"Go on,\" the man said.\n\nHis voice was demanding but calm, as if he was certain I would obey. And why wouldn't he be? He had caught me fair and square. By the rules of the game, he was entitled to spank me. My mind was spinning, and a part of me wanted to scream that this was wrong. I couldn't let this happen. But another side of me felt that this was perfectly right. Maybe I deserved this\u2014for taking the hat off, for spying, and for getting myself caught. Unable to make sense of the situation, I sank to my knees and placed my hands on the ground.\n\nMy breath trembled as I waited for my captor's move. Was this really about to happen? Was this man, who I'd never met before, going to spank me right here in the forest. He seemed in no hurry, and I looked at his feet as he shuffled around me. I flinched as he pulled up my blouse to look at my lower back. I felt like an animal being inspected.\n\n\"Oh, this is your first capture,\" the man said. \"Impressive to hide away for so long. You get to keep your underwear on then.\"\n\nHe sounded disappointed.\n\n\"Uhu,\" I said, not letting it show that I didn't understand the rules or how the man could tell from looking at my lower back that I hadn't been caught before. I regretted not pressing Angie for more details, but I had no idea I would get pulled into the game. To my surprise, a part of me also felt disappointed that my spanking wasn't going to be bare-assed like Theresa's had been.\n\nBut as the man sank to his knees beside me and lifted my skirt, the embarrassment was just about all I could handle. He left it hanging around my waist as he silently watched me. Was he admiring the sight? I was grateful I at least wore briefs\u2014black ones with white lace details around the hems\u2014which protected some of my modesty. Yet, compared to the slender redhead he'd spanked earlier, my ass was a fair bit bigger. I was showing him a lot. \n\nAnd it wasn't so much what I was displaying as how I did it. Kneeling submissively on the ground made my ass accessible. He was about to spank me, and I didn't have it in me to protest. I gasped as his hand caressed my ass.\n\nOddly, there was something very liberating about accepting my fate. I felt as if the game relieved both me and my captor of responsibility. It wasn't up to me to decide the limits. The game dictated what he could do with my ass, and apparently the rules allowed him to grope me at will.\n\nI tensed up as I felt a slap against my ass. My spankers' hand landed on my underwear across both cheeks. It wasn't particularly hard, but the imprint on my mind was startling. It was happening! I was having my ass spanked by a stranger! I yelped as his hand landed again.\n\nI closed my eyes, as if shutting out the world would diminish my embarrassment. However, it only made me more focused on the sensation of my captor's hand repeatedly landing on my ass. Not knowing what else to do, I started counting the slaps.\n\n...eight, nine, ten... \n\nI knew it wouldn't stop at that. Theresa had received far more. \n\n...eighteen, nineteen, twenty... \n\nMy spanker focused his attention on the parts of my ass not covered by my underwear. The stinging sensation was more intense, sparking jolts of pain and\u2014to my amazement\u2014pleasure. He sometimes paused to caress me, providing a soothing sensation as a stark contrast to the sharp slaps. \n\n...28, 29, 30...\n\nHe increasingly slapped along the curve of my ass, and I felt it sway with the impact. I found myself wondering if my captor appreciated my sizable behind, seeing as there was a lot to spank. I marveled at my own thoughts. Had I gone so far as to not just accept my ordeal but also concern myself with how my spanker enjoyed my ass?\n\n...38, 39, 40... \n\nGod, how many was I getting? Each slap wasn't very hard, but they started to add up. He groped greedily, wiggling my ass for his pleasure.\n\n...48, 49...\n\n\"Fifty!\" my captor exclaimed as he gave me a particularly hard swat over the center of my ass. \"You're done.\"\n\nThe spanking had moved me into a trance, and I remained in my position. My spanker watched me for a moment before fetching a marker pen from his pocket. He drew one straight line in my lower back before lowering my skirt.\n\n\"Thank you,\" I said and realized I wasn't sure if it was for the spanking or for covering up my ass.\n\nThe man helped me to my feet. \"You are welcome.\"\n\nHis politeness sounded bizarre. Who spanks a woman into submission and then acts perfectly civilized after? I found myself increasingly curious of the type of men who would frequent an event like this. Was my spanker as sweet as Paul outside of the game?\n\n\"So, you've done this before?\" I asked, feeling stupid as the words left my mouth.\n\nHe looked amused. \"It's my third year. I take it it's your first?\"\n\nI glanced up to where my belongings lay hidden. This wasn't meant to be even my first year.\n\n\"Most women don't stick around to spy on others,\" he continued. \"They try to get as much distance between themselves and the hunters as possible.\"\n\n\"Uhm, yeah,\" I said, trying to sound casual. \"Sorry about that.\"\n\n\"No need to apologize. It's not against the rules.\" He looked at his watch. \"Listen, I'm perfectly OK to stand here and chat. But you do know you only have three minutes after the spanking before I'm allowed to catch you again, right? And the clock is ticking.\"\n\nMy eyes grew wide in shock. I glanced up at the ridge where my immunity hid. A second later, I took off running in the opposite direction.\n\nI stopped to catch my breath when I felt I had covered enough distance. Mindless stampede was reckless. Someone could spot me from afar, making me end up on the receiving end of another spanking. I leaned back against a large tree to avoid detection from the back. \n\nThe whole thing was surreal. I tried to twist around enough to see where the spanker had marked me, but the angle was off. But, if I got caught again, the captor would see it. I realized this was how they kept track of which spanking level the women were up to. And based on what my first captor said, the next one would be without underwear, like Theresa had received it. \n\nI shook my head at my stupidity. Once again, I had run away from the things that marked my immunity. I justified that I couldn't merely fetch my things right after the spanking. What could I have told the hunter\u2014thanks for the spanking, but I'm actually not playing? \n\nThe sound of cracking branch interrupted my train of thoughts. I pressed my back against the trunk. The sound seemed to come from behind. And, yes, those were definitely human footsteps against dry leaves. My heartbeat intensified. I didn't dare to peek to see if it was a hunter or another woman sneaking around. I shouldn't be seen by anyone without my immunity hat. \n\nThe steps grew closer, and I tried to control my breath. I contemplated making a run for it, but I didn't dare. I was in good shape, but I didn't have the body of a sprinter. If the footstep belonged to a hunter, I assumed he would outrun me. \n\nAs the steps grew closer and closer, I became increasingly certain it was a man. The steps were too heavy to belong to any of the women I met before the game. And he moved too confidently in the open space to worry about being spotted. \n\nI contemplated the option to calmly approach him and explain that I'd lost my hat? Surely, he would let me off the hook then. He might bring it up with Isabella, forcing me to explain myself. But I already had to do that at some point. Ending up spanked again wouldn't make anything better. \n\nWhatever I was going to do, I had to do it soon. I could hear his breath on the other side of the trunk. Just when I was certain I was about to get caught, a cracking sound from afar set the footsteps off running. Heart pounding in my chest, I peeked around the tree to see the back of a blond man running away. I exhaled. That was close!\n\nToo close. I needed a plan. I didn't dare to go back to where I had left my things. The man who spanked me in the glade was likely to linger there. An ambush predator who captures two prey in quick succession in the same spot will assume it's good hunting ground. \n\nAnd that's what I was, I realized. Prey. A trophy to be hunted down. \n\nThe thrill that rushed over me made it hard to think clearly, but I tried my best to at least be clever prey. I recalled from my childhood that one of the best tricks to avoid detection in hide and seek was to rebound to checked spots. In the direction where the blond man came from was a formation of large rocks. It looked like a good hiding place, and if he had just searched there, he was unlikely to return anytime soon. I walked slowly towards the rocks, scanning the forest behind me for a stalker.\n\nI realized as I reached the rocks that maybe this was a mistake. Rebounding to checked spots was a poor tactic when there were several independent seekers. If the man who just almost caught me thought this looked like a good place to search, so would the next hunter.\n\nAnd as I walked around the corner of a large rock formation, it turned out I was right. I found myself face-to-face with Paul. He looked as startled as me. \n\n\"Oh, hi,\" I said and felt utterly ludicrous. What do you say to the man you have a crush on when you run into him during some elaborate spanking game?\n\n\"Hello Laura. I didn't know Angie talked you into joining the game.\"\n\n\"I... Uhm,\" I began. What could I say? That I wasn't playing but had removed my medic gear while spying on a couple? And then ended up spanked myself?\n\n\"Well, I'm very glad she did,\" he said. \n\nHis kind blue eyes morphed into a hungry gaze that made me feel small. I still couldn't grasp that he participated in this debauchery. My eyes darted to the side as I considered making a run for it. There were two conflicting emotions that wanted the same thing. One part of me wanted to escape the humiliation of what Paul might do to me; the other wanted him to catch me fair and square and give me what I deserved. Instead, I did nothing, feeling captured by his demanding gaze.\n\n\"Ah,\" he said as he moved around to my back and lifted my blouse. \"You've been caught once before.\"\n\n\"Uhm, yes...\" I said meekly.\n\nHe gave me a sly grin. \"I wish I could let you off the hook, given that it's your first time playing. But rules are rules.\"\n\n\"That's OK,\" I heard myself say. What kind of a response was that?\n\n\"Good,\" Paul said. \"I've wanted to do this for a long time.\"\n\nHis comment left me stunned. Had he really been thinking about spanking me before? And was I supposed to take it as a compliment? The image from my dream the night before flashed through my mind. I knew I must be blushing a deep shade of red.\n\nPaul took a seat on one of the rocks, his feet parted and steady on the ground. He patted his lap.\n\n\"Pull up your skirt.\"\n\nI faltered. Was this really happening? This was the man I had hoped to be set up with for Valentine's, but this wasn't remotely what I had in mind. Could I ever expect a normal date with him if I let him spank me now? Did I even want to? Yet, looking into his demanding eyes, I felt more drawn to him than ever.\n\nPaul said nothing as he patiently waited for me to assume the position over his lap. He looked composed, as if he had no doubt I would obey. And why wouldn't he? I was running around just like Angie and the other participants. He was entitled to his prize. \n\nThat's what I told myself as I hiked my skirt up around my waist and cautiously eased myself onto his lap. I justified my behavior by the rules of the game. Until I found a way to withdraw without implicating myself, it was best to comply. I refused to acknowledge the thrill I felt as I slipped under Paul's control. \n\nHe didn't hesitate to capitalize on his right. As soon as I was in place over his lap, I felt his hand roam over my ass. If it was humbling to let a stranger amuse himself with my behind, the sensation was so much more intense when it was someone I knew. And that sensation was amplified when he hooked his fingers into the hem of my underwear. I tensed up, brazing myself for the inevitable. Protesting didn't enter my mind.\n\nI gasped as he forcefully yanked my underwear down. A voice in my head screamed that this was wrong. How could I let him expose me like that? But my body cooperated, and I raised my hips to assist him when he pulled my underwear down to my knees. He placed a hand on my upper back, silently instructing me to stay in my place.\n\nFor what seemed like an eternity, he did nothing. I felt overwhelmed with humiliation. How had this day turned so profane? Here I was in the middle of nowhere, splayed over Paul's lap with my hands and feet against the ground on either side of his legs. My round ass pointed to the sky, and he was in no rush to stop admiring the view. \n\nSmack!\n\nMy humiliation skyrocketed as his hand landed on my bare ass. Paul was spanking me! How could I ever look him in the eyes after this? \n\nBut my humiliation brought with it a wondrous sense of surrender. His hand lingered after each slap, pressing against my ass as if emphasizing his dominance. I failed to suppress a moan, betraying the thrill of submission inside me. \n\nHis spanks grew sparser, and he focused increasingly on running his hand over my bare ass. I had been too absorbed by the humbling experience to keep track on how many slaps he had given me, but I assumed this was a way to draw out the session. His extended caress built up the suspense, making me both dread and long for the next slap.\n\nDetermined not to leave an inch of my ass unspanked, his point of impact changed with each slap. My mind wavered between erotic elation and dreadful humiliation, and these sensations grew increasingly hard to tell apart. Through the turmoil, I recognized a strange sense of pride. It made sense that he had long desired to put me over his lap. A big round ass like mine was obviously a treat for him.\n\nMy moans escalated as he increased the impact of his slaps. He held my cheek in a firm grip before letting it rain down hard on the other side. The stinging sensation intensified. Yet, I remained still, determined to take all he had to give me.\n\nThen it suddenly stopped. Submerged in a submissive trance, I panted. He softly caressed my reddened ass. I noticed that something very hard poked into my hip; he had truly enjoyed spanking me. Fearing that my own excitement would show, I pressed my legs together. Paul pulled my underwear up, cordially protecting my modesty. \n\n\"Was that it?\" I asked, the tone of my voice as ambiguous as I felt. \n\nPaul chuckled. \"Sorry, the rules don't allow for more than fifty slaps. Another time.\"\n\nWhat was that? Was he implying he might catch me again, or was he suggesting we'd continue this after the game? That wasn't the type of date I had in mind. Then again...\n\nMy pondering was cut short as Paul took out a pen and drew another line in my lower back. He helped me to my feet but remained seated. From the way he held his hands in his lap, it seemed he wasn't completely comfortable with showing just how affected he was by spanking me. Or maybe it was for my sake, ensuring me he didn't expect anything other than what the game permitted. \n\nAmazed, I felt a strange urge to drop to my knees and go down on him. Had the rules not forbidden it, it would have seemed like the obvious thing to do. I marveled at my own mind. I always held out for a few dates before engaging in any sexual interaction, and this wasn't even a date. This was a stupid spanking game. As Paul looked at his watch, I took off running.\n\n\"Hope to catch you again,\" he shouted after me. \n\nNo way, I thought\u2014at least not without a proper chase next time. \n\nI stopped to listen after a few minutes of stampede. Other than bird calls and the light breeze rattling through the leaves, the forest was silent. Once I was alone and out of immediate danger, it was hard to grasp the reality of what had just transpired. As if looking for proof, I hiked up my skirt, pulled down my underwear in the back, and twisted around to look at my ass. I'd been spanked alright. My ass was noticeably red. I caressed my cheeks, feeling their radiating heat. \n\nRealizing what I was doing, I abruptly pulled up my underwear and let my skirt fall. Someone could see me. Then again, if another hunter saw me, the shame of exposing myself would be the least of my concerns. How on earth had I got dragged into this? This wasn't what I had in mind when I decided to adjust my work--life balance. \n\nOn the other hand, I was far from bored. The spirit of the prey pulsated through my veins as I planned my next move. Hiding out obviously didn't work, and going back to get my belongings where I first got spanked still seemed unsafe. \n\nPart of me felt disappointed as I decided it was about time to be rational. My best option was to go back to the starting point where Isabella waited. I didn't have it in me to explain what had happened\u2014especially to Isabella\u2014but I could make up a lie about dropping the hat and medic kit in a ravine or something. Given that two men had spanked me and a third had seen me spying, the truth would eventually surface, but hopefully I could be gone by then. \n\nAs I began stealthily moving back to the starting point, I thought about explaining myself to Angie. She would find out one way or the other what I had done. I was convinced my friend would understand, but that was part of what I dreaded. I would have to eat up every judgmental word I'd said. \n\nAnd just as I was thinking about her, I was suddenly staring straight at my blonde friend. I had hiked up a slope and carefully peeked over the ridge. The sight made me freeze in my tracks. She was lying on her back, legs curled and her black sneakers pointing to the sky. I caught the scene just as the man kneeling beside her hooked his fingers in the hem of her panties and pulled them to her knees.",
        "And it wasn't just any hunter who had captured Angie. I had been so startled to see my friend that I didn't at first register that it was Paul who undoubtedly was about to spank her. He seemed to be in no hurry and took his time to take in his prey. With Angie's black dress pulled to her waist and her underwear stretched between her curled knees, her position rendered her utterly exposed.\n\nThe right thing to do for me would have been to backtrack before someone saw me, but my mind wasn't making rational decisions that day. I kept staring, paralyzed by my conflicting emotions. There were hints of sadism in there, and I realized I desperately wanted to watch my friend get spanked. It served her right for calling me judgmental and uptight. At the same time, parts of me craved to be in that humiliating position under Paul's control. His hands wandered decisively over Angie's slender legs, down over her naked ass and up the other side. I expected I would be upset by watching my crush grope my best friend, but any jealousy was dwarfed by other emotions. His entitled manner as he prepared Angie for the spanking made him look utterly desirable. His face was calm and collected, but his eyes betrayed his excitement.\n\nAngie's eyes were closed, as if not bearing to watch her longtime friend grope her submissive body. But when his first slap landed on her ass, her eyes flung open. \n\nAs they did, they looked straight at me. The blonde's mouth fell open in shock. I didn't know what to do with myself. I wanted to duck down, but I was already caught. Angie's face kept changing its expression, one moment wrinkling her brow in a mixture of anger and confusion, the next cautiously smiling with her mouth twitching nervously. But her face melted into a mixture of pleasure, pain, and humiliation each time Paul's hand landed on her ass. I stared wide-eyed as my friend took her spanking.\n\nBut spying like this was how my problems began. Fifty slaps would pass quickly at the pace Paul administered them. I forced myself to flee before it was too late. My friend's wailing faded as I fled the scene. \n\nI dashed through the bushes, finding it hard to shake the image of what I had just seen. My head was spinning, and I forgot all about my plans to trek back to the starting point. I still heard the unmistakable smack of a firm hand against a soft ass, followed by passionate female moans. My flustered mind didn't register that these sounds were in fact increasing in volume. \n\nToo late, I realized that I had fled one spanking scene only to rush straight into the next. The black hunter who nearly caught me after spying on Theresa's spanking was sitting on a log with Mai across his lap. Her cosplay skirt was pulled up and her panties pulled down. On her lower back, she had a single black line, indicating she was receiving her second spanking. She kicked in protest each time his hand landed on her bare ass, but she made no attempt to escape her position over his lap.\n\nAbsorbed by her submission, the Asian girl had her eyes closed. The spanker sat facing me but looked down on Mai's ass as he groped her between spankings. Hoping to go unnoticed, I started slowly walking backwards.\n\n\"I'm almost done,\" the man said suddenly, grinning slyly as he looked up. \"You can have your turn in a moment.\"\n\nHis comment made Mai fling her head around and stare straight at me. She looked like she was about to say something when a sharp slap against her ass made her close her eyes and throw her head back. I turned and ran for all I was worth. This seemed to be the game's epicenter, and I needed to get as far away as possible. I darted through the forest, feeling my pulse racing. \n\nTwo things in particular made me wary. First, all three women I had stumbled on were in the midst of their second capture, being spanked bare assed with their underwear pulled down, just like I had received it from Paul. But the other women must have played for an hour before I got myself dragged into the game. By the rate I was caught, I wasn't just participating\u2014I was losing.\n\nSecond, I had no idea what the next level would be. According to Angie, the embarrassment increased with each capture. The rational part of my brain that fought for control didn't want to find out what would happen if I was captured once more. \n\nI stopped as I reached the forest edge, looking out over rows of vines. I knew this place. On the other side was a small path that led back to the starting point. Walking in the open was too risky, but there were dense bushes on the other side that could keep me covered. All I had to do was to rush across the two hundred yards vine field. The vines were not high enough to cover me, but it seemed better to quickly make it to the other side than hunkering down. Ensuring myself the coast was clear, I scampered across the field. The vines on my sides were tied up on lines of string, creating a narrow corridor for me, which probably made me feel like I was running faster than I was.\n\nI was more than halfway across the field when a man appeared from the bushes in front of me. This was the blond hunter I'd seen the back of before. We both stopped, looking at each other. Heart racing, I turned to run back to the forest I came from. \n\nBut before I reached the forest edge, the black hunter emerged. I turned back again, only to find myself facing the blond man. I looked desperately for an escape route. The vines were mature, with branches that created sturdy barriers on each side. I thought about breaking through, but that would just get me tangled up in vines and strings. There were only two ways out from my aisle of vines, each of which were blocked by a hunter.\n\nI was in a frenzy as I turned my head back and forth between the approaching men. They weren't even running, merely strolling slowly towards me. They knew I was trapped\u2014and so did I. I covered my face in my hands, barely believing my bad luck.\n\n\"Hello Jonas,\" the black man said. \n\n\"Hi there Daniel,\" the blond man apparently called Jonas replied. \"Good game this year?\"\n\nDaniel grinned. \"Always good. I saw this one earlier, but she escaped. You?\"\n\n\"Not bad. But this one is new. What do we do now? I've never co-captured one before.\"\n\n\"Hold on, there are rules for this,\" Daniel said. \n\nThe black man brought out a pocketbook. I stared in disbelief as he flipped through the pages. Apparently, the game had a printed version of the official rules.\n\n\"Here we are,\" Daniel continued. \"If a prey is captured simultaneously by two hunters, it still constitutes as two captures. The hunters will share the spankings and administer 25 spankings for each level.\"\n\nHe handed the booklet to Jonas, and the blond man hummed as he read the paragraph. \n\n\"Ah, yes. There is an exception here for the final capture, but this gal is dressed, so that isn't an issue.\"\n\nI didn't like the sound of that. Was I about to lose my clothes? The two men got behind me to inspect the number of lines in my lower back. \n\n\"Ah, this should be interesting,\" Daniel said. \"So, how shall we do this?\" \n\n\"I don't know,\" Jonas replied. \"I usually mix things up a bit. Do you have any preferences?\"\n\nIt sounded like they discussed the etiquette of how to split the last piece of cake. I loathed their objectifying tone and loathed even more that I was getting turned on by it. It was the nature of the game, and everyone knew their place. I was a delicious treat for them.\n\n\"Let's get her down to her underwear first,\" Daniel decided and turned to me. \"Go on, darling, lose the blouse and skirt.\"\n\nMy eyes darted between the two men. Stalling for time, I began slowly unbuttoning my top button. The hunger in their eyes suited the situation, and I felt like prey under the gaze of my predators. \n\nAnd prey don't give up without a fight. I abruptly turned and started running for all I was worth. They hadn't actually grabbed hold of me, which, by my understanding of the rules, meant I wasn't technically captured. Without much of a plan, I dashed for the forest. \n\nThe element of surprise gave me a head start, but I didn't even make it out of the vine field before Daniel grabbed me from behind. I knew I was caught, but the instinct to fight awoken inside me. He locked his arms under mine, securing me by pulling me back against him. I writhed against his grip, but the harder I struggled, the tighter his grip got. \n\nJonas smiled as he stepped in front of me. Without a trace of wavering, he grabbed my blouse over my chest with both hands and forcefully ripped it apart. I gasped as my buttons went flying across the vines. My breasts swayed in the confines of my bra as Daniel pushed me against Jonas and pulled my blouse off my shoulders. As I struggled to keep my balance, Daniel yanked down my skirt. \n\nAnd just like that, I found myself in the middle of a vine field in nothing but my bra and panties. My captors' powerful display vanished my will to struggle, and I slipped into a liberating state of surrender. Whatever they were entitled to, I would oblige. My knees felt weak as I leaned forward against Jonas, bending at the hips. \n\n\"Do you mind holding her like that,\" Daniel said. \n\nThe blond man chuckled. \"By all means, go ahead.\"\n\n\"Oh God,\" I panted as Daniel slowly pulled my panties down to uncover my ass. He ran his hand over my cheeks, familiarizing himself with his target. I both dreaded and yearned for the inevitable.\n\nSmack!\n\nI let out a muffled moan as my spanking began, my face resting against Jonas's chest. His embrace had started out as a means to keep me from escaping, but now I was grateful for the support. The humbling sensation of submission was even stronger when under the control of two men. My juices were flowing, and I realized I arched my back just a little bit more after each slap.\n\n\"Alright, your turn,\" Daniel said, his hand lingering on my ass.\n\nJonas turned me around and made me lean against Daniel. His face was a mixture of authority and comfort as he smiled down at me while I steadied myself against his chest. I locked eyes with him, and I didn't break my gaze as Jonas started to spank me. Having Daniel watch the erotic humiliation unfolding inside me amplified the sensation.\n\nMy panties had fallen to my knees during the spanking. When Jonas was done and Daniel let go of me, I quickly pulled them up. My captors gave me a curious look.\n\n\"No point covering up, honey,\" Jonas said. \n\n\"Oh, of course,\" I said, not wanting to reveal that I didn't know the rules. \n\nI hooked my thumbs into the hem, and standing tall before my captors, I pulled my underwear back down. With my pussy on display, I stared straight ahead, not wanting to meet their eyes. My dark pubes gave me at least a minimal protection of modesty, but I could tell I was dripping wet. Revealing how turned on I was by their treatment heightened my embarrassment. \n\n\"All the way off,\" Daniel said eventually.\n\nWithout hesitation, I bent at the knees to remove my panties. \"And the bra?\" \n\nMy voice sounded more eager than I intended. I justified that it was better if I removed it myself. I liked that bra and didn't want it ripped to pieces by my captors. My large breasts made it challenging to find models that were both sexy and supportive. \n\nThe men nodded in unison. I couldn't deny that there was a more deviant explanation for my eagerness than merely protecting my bra. I was well aware that my breasts were appealing. The sensation that they were a prize for my captors filled me with sinful pride. Not only was I willing to let them give me another humiliating spanking\u2014I felt a desire to assist them by making myself ready for it. I held my breath as I unclasped my bra in the front. \n\nI felt my breasts sway as I set them free. My nipples stood at full attention, begging my captors to admire them. There I stood, naked and exposed, savoring the attention of their objectifying eyes. I blessed the game for relieving me of responsibility. \n\nMy excitement made it hard to stand straight, and I was in part grateful when they decided they wanted me on my hands and knees. Assuming this position, naked on the ground with two men looking down at me, made me feel terribly vulnerable. And I loved it. \n\nThe men kneeled on either side of me. I yelped submissively as their hands indulged. I was their prize, and I didn't object when they played with my breasts. The sensation of their fingers grasping my excited nipples sent jolts of excitement through my nipples. Having four hands explore my body was beyond anything I had experienced before. \n\nIt wasn't long before they included their designated spanking in their attention. The stinging sensation as their hands landed on my already red ass sent jolts of submissive pleasure through my body. They roamed between slaps, and, since they were only permitted to 25 slaps each, they seemed prone to drag it out. Nearly no part of my body was left untouched. \n\nWith one crucial exception, however. The rules of the game prevented sex, and apparently that included touching my aching pussy. They moved ever so close, but never quite to the point of touching my intimate details. When Angie first mentioned the lack of sex during the game, I was relieved to hear there were at least some sensible limits. Now it felt like the cruelest form of torture to bring me to this point of overwhelming arousal without doing anything about it.\n\nAt first, they spanked at will, but, as the spanking progressed, they began synchronizing their slaps. I moved with the impact, making my heavy breast sway. They gave me the last five as sharp consecutive slaps, each one harder than the previous. I wailed and threw my head back as they pushed me along the thin line between pleasure and pain. \n\nI remained on the ground when they stopped. My dark locks created a shelter around me to hide in as I tried to regain a minimal level of composure. I flinched as I felt each of the men draw a line in my lower back. They helped me to my feet.\n\n\"Thanks,\" I said and gently rubbed my radiating ass. Not knowing what else to do, I began collecting my clothes.\n\n\"Nice try,\" Jonas chuckled, and snatched my clothes away from me. \"You'll get these back after the game.\"\n\nI stared wide-eyed as the men divided up my items and put them in their bags. Was I supposed to run around naked? \n\n\"I wouldn't linger if I were you,\" Daniel said. \"Those screams of yours would have been heard from a mile away. I'm sure there are others who are eager to capture you again. I know I am.\" He paused and looked at his watch. \"Shall we say in three minutes?\"\n\nHe winked at me before he and Jonas each disappeared in the direction they had entered the field. I remained standing, naked and confused. But Daniel was right. I had to get out of this field. I ran quickly back to the forest I came from.\n\nIf I'd felt like a hunted animal before, it was nothing compared to this. I crouched behind bushes and rocks, constantly scanning my surroundings. How on earth had I ended up naked in the middle of nowhere with nothing to cover up with? And how could I get myself out of it? I couldn't exactly show up at the starting point stark naked with a reddened ass and pretend I had just dropped the hat and medic bag. The mere thought that someone would see me like this filled me with shame. Yet, I couldn't think of a scenario where I wouldn't be spotted sooner or later. \n\nThe prey instinct prevailed. The only thing that made sense was to run\u2014to hide\u2014to escape. Every second I remained unseen felt like a precious triumph. I had never felt so alive.\n\nI froze as I spotted Daniel up ahead. The hunter moved carefully, as if listening for game. I looked at my watch. Yes, my three minutes was up. He hadn't spotted me yet, but he was moving in my direction. It was only a matter of time. \n\nStealthily, I moved backwards. An exceptionally large and hollow tree caught my eye, and I quickly dodged for it. There was no way I could outrun Daniel, so hiding seemed like my best bet. The opening faced away from him. If I was lucky, he might just walk on by without even realizing someone was hiding inside the tree.\n\nBut it turned out I wasn't the only one who had found this great hideout. The tree hollow continued up the trunk, and as I looked up, a pair of eyes stared back at me. I gasped, the instinct inside me perceiving all eyes as potential threats.\n\n\"Get out,\" someone hissed from above.\n\n\"Is that you, Charla?\" I asked as my eyes adjusted to the murkiness above. The black woman was wedged into a crevice, hidden from the outside.\n\n\"Yes. Now get out.\"\n\n\"I can't. There is someone out there.\"\n\n\"Who?\" Charla asked.\n\n\"Daniel.\"\n\n\"He's going to find you. Run away!\"\n\n\"I can't. He'll catch me.\"\n\n\"He'll catch you here too!\" Charla hissed. \"And then he might catch me too. Run away!\"\n\nI shook my head. \"No.\"\n\nCharla climbed down. I could usually hold my own, but, naked and exposed, it was impossible not to feel vulnerable under Charla's glare. The black woman shook her head in disbelief and peeked outside.\n\n\"Bitch,\" she muttered under her breath and took off sprinting. \n\nSeconds later, I heard steps approaching as Daniel went chasing after. He turned as he passed the tree to look where Charla had leaped from. He nearly fell over as he abruptly broke his stride, staring straight at me where I hunkered down by the tree opening. I wanted to escape but froze like a deer in the headlights, staring straight into the illuminated fact that if he just stepped over and grabbed me, this would be my final capture. I would have to face the shame, and I didn't even know what the punishment for losing would be. What was only a few seconds felt like an eternity as we stared at each other. Then, Daniel grinned and took off, chasing after Charla. \n\nI remained huddled on the ground, hyperventilating as I tried to make sense of the situation. Why hadn't he just captured me? It would have been easy for him. I clearly didn't understand the subtleties of the game. From afar, I soon heard Charla shouting.\n\n\"Fuck you! Ouch... I'm gonna get you for this, you... Ouch! Son of a... Ow!\"\n\nI leaned against the tree trunk, listening to the distant sounds of another woman getting spanked. I tried to shake the impression, but part of me felt cheated. Assuming I'd be on the receiving end of that spanking, my body had surrendered and now expected another humiliation. \n\nBut as Charla's protests silenced, I forced myself to get moving. Daniel might come back and look for me, and, while part of me craved another spanking, it meant I'd lose the game. That would force me to explain to everyone how I got dragged into it. Every moment I postponed that humiliation was a small victory. \n\nI found some dense bushes to hunker behind. It seemed to be a good hiding place, and I didn't see or hear anyone for what felt like a long time. I checked my watch. It had only been around twenty minutes, but everything had happened so quickly up to this point. One moment I was strolling around, wondering if the game was made up, and now I was hiding out naked. What if the game had ended without me noticing? I tapped the device on my wrist. I had wandered deep into the forest. Maybe the reception was bad? \n\nThen again, Isabella's property covered a lot of ground. It wasn't unexpected that no one else roamed in my part of the forest. I decided to leave my shelter to at least look around for signs that the game was still going on. At first, I moved with stealth, stopping at every tree to cover myself from at least one direction.\n\nBut when I didn't see or hear anything, I grew increasingly careless. Along with the thrill, a deep sense of sensuality built inside me. What a sight I must be\u2014a red-assed wood nymph strolling naked through the forest. I felt like a very desirable trophy and was oddly content with my ordeal. It sure was a contrast to the fourteen-hour shift at the hospital I'd be at now if I hadn't come along for this strange Valentine's celebration. The eroticism that flowed through me felt oddly empowering. ",
        "That was all good in theory, but any notion of appreciation quickly vanished as I heard footsteps from behind. I spun around and saw Paul charging at me. My first instinct was to cover up, one arm over my breasts and the other hand over my pussy. The embarrassment of being caught naked in a forest was even more overwhelming when it was by someone I knew. It reminded me that I existed outside of the game, where the concept of walking around without a stitch of clothing was unthinkable. \n\nThe instinct of the prey took over, and I ran. I sprinted aimlessly among the trees. Only one thing mattered\u2014to get away. His steps close behind spurred my legs to move faster. And it seemed to work. He was close enough that I could hear his breath, but he never quite caught up with me, which amazed me. My curvy body wasn't made for sprinting, and Paul looked like a fast runner.\n\nThat's when I realized he was purposely prolonging the pursuit. He was playing with me like a cat with a mouse. And why wouldn't he? My big ass rocking with my stride must be spectacular sight from behind. Occasionally, he came up beside me, glancing at my heavy breasts as they bounced. I shrieked and turned my steps away from him. I knew I was about to be caught, but my instinct kept me running. \n\nEventually, my legs couldn't carry me any longer. I stopped, trying to catch my breath.\n\n\"Paul, I...\" I panted. \"Can we just...\"\n\nI couldn't find any words to get me out of this. I was caught and had no right to protest. It was as simple as that. \n\nHe placed his hand on my shoulder. \"Kneel.\"\n\nHis demanding eyes made me obey in an instant. My mind was a turmoil. And yet, I cherished my ordeal. When he approached, I instinctively leaned forward, expecting a final spanking. \n\nYet, to my surprise, he instead reached into his bag and brought out a collar. I gave him a bewildered stare, but I didn't hesitate to gather my locks to give him unobstructed access. Paul wrapped the strap around my neck and made sure it was firmly in place. I tilted my head to assist him when he took out a leash and attached it to the collar. I shivered with the submissive thrill. Just like that, I was no longer a wild prey\u2014I was a pet. \n\n\"After you,\" he said and pressed the button on his wrist device. A moment later, a foghorn signaled the end of the game. \n\nThe two of us walked in silence, a man with his pet on a leash in front of him. Overcome with shame, I hung my head. The inevitable was about to happen. I was about to face all the participants and explain to them how I got dragged into the game\u2014and lost. \n\nRepeatedly, I considered telling Paul about my ordeal. Surely, he would release me if I told him I wasn't meant to participate. Other hunters carried my clothes, but maybe Paul had something else I could cover up with before meeting the others. Perhaps I could even persuade him to sneak me to Angie's car without facing the rest.\n\nBut every time I turned my head to look back at him, my will to plea vanished. I couldn't bear to admit to him that I wasn't part of the game\u2014to tell him that I just hadn't been able to resist. If I'd at least made a conscious decision to participate, there would have been some level of empowerment. Now I just felt weak and remorseful. \n\nTo make matters worse, it wasn't long before our party grew. One by one, hunters and prey adhered, catching up from behind with their slow stride or waiting by the side of the path. My embarrassment grew with the size of the assembly, and I was mortified when I spotted Angie coming out of a forest patch up ahead. The blonde looked confused and obviously had a thousand questions to ask. Yet, she said nothing. Just like the rest of them, she walked a few steps behind me.\n\nTheresa and Mai were down to their underwear when they joined the group, but they were handed back their clothes, which they put back on. No one offered me the same courtesy. What a sight we must have been\u2014a procession with a naked woman on a leash at the front. \n\nEvery time I looked back, I was met by solemn expressions. It was odd to me that no one spoke. All the women knew I wasn't playing and must wonder how I ended up in this position. Maybe they assumed Isabella convinced me to participate after all. But no one asked. I surmised the rules must forbid any conversation during the walk of shame back to the base. With every minute we walked in silence, I became increasingly aware of how the lack of conversation enhanced my disgrace. It left me with nothing to focus on but my predicament.\n\nAnd yet, I was thankful for the silence. The only thing that could humiliate me more would be to bring up the fact that I wasn't even playing. I knew I'd have to face up to it soon but was grateful for every moment I could hide behind the rules of the game.\n\nPaul had a distinct pride to his eyes as he held me by the leash. And why shouldn't he be proud? For all he knew, he had caught me fair and square. He was entitled to his prize.\n\nMore surprisingly, there was a budding part of me that shared his pride. If I had to be someone's pet, I was grateful I at least had a worthy master. Without noticing, I added a swagger to my stride, instinctively wanting to please Paul with an enticing view. Blushing, I stopped myself, thinking I was only making things worse. It wasn't just Paul who walked behind me, watching my naked parade. What would they think of me if I let on that part of me desired nothing more than to gratify my master?\n\nThen again, could things get any worse? I would soon have to confess my lack of self-control to them all. Even though I'd been outright judgmental of the game, my own carnal desires had lured me into unauthorized participation. How would they react once they found out? What would Angie say? And what about Isabella? My mind was in disarray.\n\nThen, like a beacon in my hazed mind, it dawned on me what I needed to do. There was no escaping further humiliation. My only option was to face it head on. I would have to admit fully to what I had done and why I did it. All I could do was to plead for forgiveness and take every ounce of shaming they had in store for me. And that wasn't necessarily a bad thing. If I had learnt one thing today, a part of me seemed to thrive from humiliation. All I could do was to let that budding side of me grow. \n\nExcitement rushed through my body as I accepted my fate. Appeased to finally have made a conscious decision, I raised my head. Every step I took felt like an erotic mixture of humiliation, pride, and expectation. \n\nMy resolution to take whatever was coming to me was put to the test when the progression approached the base. Arms crossed, Isabella awaited us. I had felt discomposed in the strict woman's presence before the game started, but that was nothing compared to what I felt now, returning naked on a leash. \n\n\"Explain yourself!\" Isabella demanded, her voice as stern as her eyes.\n\nThere was a murmur of confusion from the group of hunters and prey behind me. But those people were no longer my primary concern. It was obvious who controlled my fate. \n\n\"She wasn't meant to participate,\" Isabella continued, speaking to the hunters. \"She was meant to be here as a medic. But apparently, she got bored. Did you know she would do something like this, Angie?\"\n\nMy friend stuttered. \"What? No, I... She...\"\n\n\"No, it's all my fault,\" I said, my voice frail but resolute. \"None of them are responsible for my actions.\"\n\nI didn't have much control of this situation, but I could control at what level I surrendered to it. Paul still held the leash, but it was long enough for me to step over in front of Isabella. Not sure how else to demonstrate my compliance, I sunk to my knees. \n\n\"I'm sorry, I just couldn't help myself,\" I said, looking up at Isabella. \"I didn't mean to, but I couldn't resist. I hope I haven't violated any of the rules or ruined the day for anyone else. Whatever you think is the appropriate action, I will accept it.\"\n\nFor a naked woman on her knees with a collar around her neck, I felt surprisingly emancipated. It was liberating to place my fate in the hands of others.\n\n\"Did she?\" Isabella asked, turning to the men and four women behind me. \"Did she break any rules or ruin the game for anyone?\"\n\nI looked over my shoulder and was meant by a mixture of sympathy and confusion. Only Charla scowled at her.\n\n\"She got me caught,\" the black woman said. \"And once she did, it threw me off, and Daniel caught me a second time just before the horn signal.\"\n\nCharla absentmindedly rubbed her ass.\n\n\"Well, that was long overdue,\" Isabella said, showing no compassion for Charla's tender ass.\n\n\"And it wasn't her fault you got caught,\" Daniel said. \"I would have got you anyway.\"\n\nCharla shook her head. \"That's just bull...\" \n\n\"That's enough,\" Isabella interrupted, raising her hand. \"Does anyone have any reports of Laura breaking rules?\"\n\nAfter a moment of silence, Paul spoke up. \"I caught her twice, and even if she hadn't read the rules before, she seemed to understand the spirit of the game. She is a natural.\"\n\nThe other hunters hummed in agreement.\n\n\"If I may, Isabella,\" Angie chimed in. \"I know my friend here wasn't meant to play, but she still managed to lose. I for one would very much like to see her take the punishment the loser usually receives. She was quite judgmental about the whole thing before.\"\n\nA part of me loathed Angie for tattling. She was right, of course. I had been disdainful, but the others didn't need to know that. Yet, I also felt that Angie was speaking in my support. The worst punishment I could think of was to be sent away in shame.\n\n\"Well, I suppose the banquet won't be much fun without the entertainment,\" Isabella said, sporting the hint of a pleased smirk. \"I assume no one objects?\"\n\nUnsurprisingly, no one did. \n\n\"And what do you say?\" Isabella asked, looking down at me.\n\n\"I will take any punishment you see fit.\"\n\nIsabella looked amused. \"Even without knowing what it entails?\"\n\nI nodded.\n\n\"Not this time,\" Isabella said. \"This time you will know what you're agreeing to. Angie, you will fill her in on what her duties are. And if she refuses, you will take her place.\"\n\nLike an empress, Isabella had given her verdict. \n\n* * * *\n\nLater that evening, we gathered in the large dining hall inside Isabella's mansion. The hunters wore suits and the prey fancy dresses. Except for me. I'd been given a uniform suitable for a servant. Given the erotic nature of the game, I had expected to be forced to wear something bawdier. It was a simple black dress with a white apron. Still, it signaled my position as subordinate to the rest of the group. \n\nWe were seated around a u-shaped table formation, with Isabella and Paul at the short end. Everyone was in a festive mood, chatting excitedly, but I was too nervous to engage. In between my duties serving food and drinks, I sat quietly in my seat at the far end. Every time Paul's eyes met mine, I blushed. His leash hung around an ornament on his backrest, reminding me of how I lost game. And of what was to come. \n\n\"Are you OK?\" asked Angie, who was seated next to me. \"You're barely touching your food.\" \n\n\"Yeah, I'm fine,\" I said, unconvincingly. \"The dress is a bit tight though.\"\n\nOn purpose or not, I'd been given a size too small. The buttons struggled to hold the dress together over my breasts. \n\n\"It won't bother you for long,\" Angie said and sipped her drink, pretending her words didn't hold weight.\n\nI fiddled nervously with the collar around my neck. \"So, you did this last year?\"\n\n\"Mhm. I lost the game and took the consequences. Just like you will, right?\"\n\nMy eyes were drawn to an ottoman placed center stage between the tables. \"And you enjoyed it?\"\n\n\"Enjoy? It was the most humiliating thing I've ever done in my life. And the most exciting. You know how those things go together, right?\"\n\n\"Maybe you want me to back out? Isabella said you'd take my place if I do.\"\n\nAngie struck an uncharacteristically sadistic smirk. \"I love you, but you were so fucking high and mighty before. I can't wait to watch you get punished. Besides, we both know you're not a quitter.\"\n\nI nodded softly. Even if it was tempting to escape my ordeal, I knew I couldn't. I dragged myself into this, and the only way I could maintain some pride was to take the consequences. \n\nMy eyes briefly met Paul's. I quickly looked down, but he kept staring at me, and I raised my eyes again. Strangely, I found his unwavering gaze comforting\u2014like a lighthouse to keep me on course. This wasn't what I had hoped for in terms of a Valentine's date with him, but at least I was grateful he'd caught me. \n\n\"Time for dessert!\" Isabella said and clapped her hands.\n\nThat command would have been inconsequential during most dinners. Of course, there should be dessert. But on this banquet, it held a deeper meaning, and everyone knew it. The room silenced, and their eyes fell on me. I felt myself flush. \n\nYet, I didn't falter. As if on autopilot, I stood and proceeded to clear the tables. Returning a moment later from the kitchen, I carried a tray with desserts. The expectant eyes that followed my steps might to an outsider have looked like a hunger for creme brulee, but I knew very well they were eager for something very different. I put the tray down and walked into the center of the u-shaped table formation. \n\nI paused, giving myself one last chance to back out. Wouldn't that be the wisest decision after all? I'd let myself get swept into this game\u2014wouldn't I just make things worse by going further? But it took only a brief glance at Paul to know I had to go through with this. My hands felt surprisingly steady as I reached for the knot of my apron in my back. With a light tug, it came undone. In itself, it was insignificant to remove an apron, but I felt a surge of excitement as I watched it fall. It had begun. \n\nI removed my shoes and rolled down my knee-high stockings. Slowly, I proceeded to unbutton my dress, starting at the collar and working my way down. The room was dead silent, and I could hear the dull pops of released tension as the buttons over my chest came undone. I stood straight as the dress fell from my shoulders. \n\nI wondered briefly why I had packed these particular bra and panties. I'd bought this white lace set on whim nearly a year before but never found a good time to wear them. Until now. Perhaps my subconscious had hoped to end up in a situation where Paul would get to see me in them. Even so, his eyes were not the only ones drinking me in. I blushed as I realized my nipples were visible through the sheer material of my bra. Still, I was expected to offer more than a concealed view.\n\nReaching for the bra clasp in the front, I tried to convince myself it wasn't a big deal to strip like this. These same people had seen me naked just hours before. Yet, it seemed more embarrassing to undress myself. Now I had to actively show them how willing I was to obey. With a deep breath, I unclasped the bra and let my breasts sway free. Nine pair of eyes stared at me, and embarrassment flushed over me. And with it followed that sweet, submissive excitement I was finding increasingly addictive. \n\nMy breath heaved as I reached for my underwear. A part of me knew this was crazy. I was a strong-willed woman and a respected MD. Why would I strip before an audience merely because I'd been told to? In front of my crush, nonetheless! But every reason I could think of to stop was an even stronger reason to experience the humiliation of proceeding. Bending at the hip, I pulled my panties down.\n\nBetween the game and the dinner, we'd been given time to groom ourselves, which was well needed after running around for hours. Unlike what I'd normally do, I had decided to remove all my pubes. I shivered with shameful excitement as the open air caressed my naked cunt. My complete nakedness went beyond exposing my body; I was revealing my unconditional obedience. No one commented on it, but I could tell from numerous pleased smirks that the notion wasn't lost on them.\n\nAs instructed, I stepped over to the dessert tray I'd put down earlier. Without a stitch of clothing, I proceeded with my waiting duties. Excitement and embarrassment made my knees weak, and when I finally made my way to Paul, I was grateful my instructions were to kneel by his side. He ate his dessert slowly, frequently glancing down at me with an imperious gaze that I found both tormenting and comforting. \n\n\"It's time,\" Isabella said.\n\nPaul nodded, and as he reached for the leash, I tilted my head to the side. The clicking sound as he attached the leash to my collar sent expectant thrills through my body. The notion of being his pet was strengthened as he stood and started walking. Shame rushed through me as I followed on my hands and knees. I wasn't just demonstrating my instinctive desire for submission to a room of onlookers, including my best friend and the man I'd long had a crush on. I was demonstrating it beyond doubt to myself. A large part of me was shocked by my disgraceful behavior. Crawling around naked on the floor was unfitting for a woman of my stature. Yet, the part of me that desired humiliation thrived from my own judgmental thoughts. \n\nTurning the corner, I assumed Paul would lead me into the center where the ottoman waited for me. But he was in no rush. He continued his slow parade around the seated onlookers, making sure they all got a good look at his pet. Passing Isabella, the dominant woman pressed at the small of my back, inciting an arching posture. I obeyed, knowing full well that I was on explicit display as I crawled behind Paul.\n\nWhen he finally paraded me into the center stage, he ceremoniously led me to the ottoman. Like a show dog, I climbed on top, remaining on my hands and knees. He removed the leash but left the collar around my neck.\n\nEver since Paul' captured me the second time during the game, I'd felt deprived. Finally, it was time. I kept my arching posture, instinctively begging for what I craved. Yet, Paul wasn't swayed so easily. A master for suspense, he gently stroked my head and let his hand continue down my back, approaching but never quite reaching my ass. Unable to meet my spectators' eyes, I stared at the ground. \n\nThen, as startling as it was anticipated, I felt the now familiar force of his hand on my ass. I gasped and jerked forward with the impact, but quickly resumed my position. Paul's hand returned over and over, pausing briefly between each slap to make sure I fully experienced each of them.\n\nFifty slaps. That's what my captor was entitled to\u2014just like during the hunt. I'd thought it wouldn't be much difference from the ones I'd received during the game, but there was one major difference. I now had an audience. Naked in a room full of dressed onlookers, the erotic humiliation was mind-blowing. \n\nPaul paused after around ten slaps. Yet, his hands barely left my body. He caressed my curves, as if apprising his possession. His soft touch was a soothing contrast to his slaps, but I felt equally dominated.\n\nWhen he suddenly resumed to spanking, the sharp sting made me falter. My breasts swayed heavily with my movement, and the sight seemed to inspire him. The hand that wasn't busy administering my spanking traveled up my body, moving over my hip and down to caress my belly. He paused his spanks, as if fully concentrating on the hand advancing onto my breast. \n\nI was very much aware of how my large breasts\u2014crowned with big nipples that seemed to have a mind of their own\u2014fascinated many men. The attention was sometimes a nuisance but enjoyable when it came from the right direction. Paul's fascination was certainly welcome, but I never expected the first time he fondled my tits would be under such circumstances.\n\nStill greedily groping me, Paul resumed his spanking. I was shocked to realize a moan escaped my mouth. A voice in the back of my mind screamed that I shouldn't be enjoying this surreal ordeal. Yet, I couldn't deny how natural the submissive mindset was to me. I focused on his dominating hands with my eyes closed. ",
        "But Paul had other ideas. When he next paused his spanking, I felt his hand clasp my hair. Gently but firmly, he pulled my head back. He bowed down and whispered in my ear.\n\n\"Look at them.\"\n\nI opened my eyes to look around the room. They all stared intensely at me, and my face grew a deeper shade of red. Could they tell how much I adored my torment? As Paul's hand once again landed on my ass, my eyes fell on Angie. The blonde had a complacent grin on her face. My own words echoed in my head, reminding me of how I condemned women who willingly subjected themselves to something like this.\n\nBut complacency wasn't all I could read on Angie's face. Her eyes held a distinctive lust. In fact, looking around the room, I detected visible signs of excitement in all my onlookers. Most of them were breathing heavily. Even Isabella imperious stare shimmered with an unmistakable hunger. \n\n\"Fifty,\" Paul said, marking the end with a hard slap.\n\nI felt my ass radiating, and I wasn't out of the woods yet. Keeping my inviting position on the ottoman, I looked at Isabella, who gave me a sly grin.\n\n\"Did Angie tell you what happens next?\" Isabella asked.\n\n\"Yes,\" I said, meekly.\n\n\"And what did she tell you, exactly?\"\n\n\"That I probably will get spanked more.\"\n\n\"And what's the procedure?\"\n\nI faltered. My mind had been fuzzy when my friend described what was in store for me. I never expected getting questioned on the details.\n\n\"She said you can give honorary awards.\"\n\n\"Correct,\" Isabella said. \"And what's the prize?\"\n\nI swallowed. \"To spank me.\"\n\n\"Indeed, it is,\" Isabella said, looking pleased. \"The point is to reward players who distinguished themselves during the game.\"\n\nI looked around the room. I had no doubts Isabella would exercise her right make sure I got another spanking. The question was by whom. \n\n\"This year, however...\" Isabella continued. \"Given the exceptional nature of how you lost, the honorary award should be exceptional too. You were not meant to play, and yet you did. You infringed on the game, risking ruining it for everyone. As such, it's only fair that everyone is entitled to punish you for it. By the raise of hands, who wishes to spank her?\"\n\nI should have expected it, but I was still shocked. I'd already been spanked by every man in the room and had considered the possibility that they would all be granted another go. But that wasn't enough, apparently. Hunters and prey alike, they all raised their hands. \n\n\"Oh, look at that,\" Isabella said with a satisfied grin. \"So many volunteers. Twenty slaps each.\"\n\nWhat shocked me the most was to see Angie raising her hand. My friend had been vocal about wanting to see me eat my words, but I hadn't imagined she'd be part of it. Angie gave me a slight shrug, as if to say, 'what did you expect?'\n\n\"Why don't you go first, Angie?\" Isabella suggested.\n\nAngie didn't hesitate. She quickly rose from her chair and approached, her heels against the floor echoing through the expectantly quiet dining hall. My head was spinning. Wasn't it humiliating enough that my crush had spanked me in front of everyone? How could we ever look each other in the eye again? \n\nAngie leaned in and whispered in my ear. \"Tell me you deserve this.\"\n\nShocked, I looked up at my friend. I was appalled she wasn't satisfied with merely participating in my humiliation\u2014apparently, she wanted to make it worse. Yet, protesting never entered my mind. \n\n\"I deserve this,\" I said, hanging my head in shame.\n\nWithin a second, I felt a sharp sting on my ass. It was happening\u2014Angie was spanking me. And the most surreal thing about it wasn't that my best friend's hand repeatedly slapped my already tender ass, but that she was right. I did deserve this. I had jeopardized her position by infringing on the game. In fact, I could have ruined it for everybody. The only way to redeem myself was to take my punishment.\n\nSuddenly, I felt Angie's hand on my breast. I looked up in shock, but Angie didn't look the slightest worried that she might have overstepped some boundaries. She looked down at me with a devilish grin and continued to greedily fondle my breast in her hand.\n\n\"I always wondered what they felt like,\" she said, unclear whether she was talking to me or our audience.\n\nOn any other day, I would have been astounded to hear those words from my friend, and somewhere in the back of my mind, I knew we would eventually have to discuss the implications. But not today. I had submitted my body to the group, and that was all that mattered. Angie's hand never left my breasts as she continued to spank me.\n\n\"Twenty,\" she said and paraded back to her seat with a distinct swagger.\n\nI didn't move. I knew this was far from over.\n\n\"Who wants to go next?\" Isabella asked. \"How about you, Daniel?\"\n\nHe hesitated a second, glancing at Charla beside him. I had picked up on a flirtatious vibe between the two and guessed Daniel might have second thoughts about the signals he would send by spanking another woman. But any hopes I had that he might forfeit his turn soon vanished. He stood up and offered his hand to Charla.\n\n\"Care to join me?\" \n\nCharla smirked. \"I believe I do.\"\n\nThe two of them walked over and stood on either side of me. For some time, they stood in silence, and I drifted back and forth between agony and excited expectation. I glanced nervously around the room. What a sight I must have been\u2014naked on my hands and knees, patiently waiting to be spanked by the black couple. \n\n\"Are you excited to find out what you missed out on when you decided to run after me instead of her?\" Charla asked, speaking to Daniel while she grabbed on firmly to my cheek.\n\nHe chuckled and mimicked Charla by fondling my other cheek, making it wiggle in his hand. \"I caught her during the game, just not as many times as I got you.\"\n\n\"Ah, I see,\" Charla said, and I felt a sharp sting on my ass as she slapped me. \"So maybe you don't need to do it again?\" \n\n\"Some things are worth repeating,\" Daniel said and gave me a series of slaps on the other cheek.\n\n\"Things?\" Charla asked, mimicking Daniel's spanking series on her side.\n\n\"Mhm. I'd be happy to show you some things later.\"\n\nListening to them flirting while spanking me made me feel highly objectified\u2014like a pawn in their wooing.\n\n\"Tell you what,\" Charla said. \"If you do a good job punishing her for what she did, you might get a chance to show me some things.\"\n\nThey proceed to spank me with a series of synchronized slaps, building up in impact. When they were done, I wasn't left alone for long. As soon as Charla and Daniel went back to their seats, Isabella pointed to Alex, the man who had given me my first spanking in the glade, and Jonas, the blond man who caught me together with Daniel. I couldn't tell if she just enjoyed watching me being manhandled by two people at once or if she was eager to get to the final part of my punishment. \n\nThe two men immediately started slapping my ass. I counted their slaps, thinking that at least it would be over quickly at the pace they spanked me. \n\nOr so I thought. They stopped midway through my spanking to focus on touching me all over. Alex, who hadn't caught me during the steps of the game that permitted this, was especially eager to fondle my breasts. It was humiliating to be groped in front of the audience, but what tormented me the most was my own judgement. I shouldn't revel in this state of surrender. I shouldn't find it so arousing to make myself subordinate to them. I shouldn't wish that the rules permitted these men to take further liberties with my body. But I did, and I closed my eyes and focused on my shame. \n\nYet, I remembered Paul's order to look at my audience, and I forced myself to obey. My eyes fell on him. I worried it would be apparent how deeply I cherished the domineering touch of these other men. He however seemed nothing but excited to watch my humiliation. Without fully realizing it, I arched my back to show my willingness to take my punishment.\n\nAnd while I was certainly playing my part, it wasn't an act I was putting on. In that room\u2014under those circumstances\u2014I truly felt subordinate to the group that dominated me. Submissiveness was a true part of me, and it was liberating to accept it. I moaned as Alex and Jonas finished my spanking.\n\nAlex's and Jonas's hands had barely left my body before they were replaced by Mai's and Theresa's. Even though we had recently shared the experience of being hunted like prey, there was no impression of peer companionship among us. They had changed from casual and cosplay clothes into fancy dresses. Naked between them, I felt humbled and small, even though I was taller and curvier. To emphasize my subordinance, Theresa presented her hand in front of me. Her delicate fingers were crowned with painted nails. \n\n\"Kiss my hand,\" she said.\n\nI obeyed, of course. Mai giggled and held out an equally dainty hand for my mouth. Thanking them for what they were about to do to me made my shame skyrocket.\n\nThey seemed no less eager than the men to help themselves to my curvy body. The slim girls appeared fascinated, repeatedly making my tits sway and feeling their weight in their hands. And there was nothing delicate about their touch. They tugged at my nipples, giving the impression that they were trying to milk me. \n\nI had never had any strong lesbian tendencies\u2014at least not to the extent that I had planned to explore them. In my erotic turmoil, I couldn't tell if I was getting so turned on by their domineering touch despite being female or because of it. But what excited me the most that it didn't matter what I thought. My body was theirs to amuse themselves with, and I had forfeited any say in it.\n\n\"Let's make her turn around,\" Mai said.\n\nAghast, I realized they hadn't even begun to spank me. They made me lie on my back on my ottoman pedestal, holding onto my curled legs. Glancing at Angie, I noticed a pleased smirk on her face, revealing how much she enjoyed watching me assume the same humbling position she had been in while I spied on her during the game. My parted legs faced Paul, giving him an unobstructed view of my bare pussy. The intense thrill of shame rushed through me; if he hadn't already been able to tell how deeply I relished my erotic humiliation, my glistening wetness would reveal it beyond doubt.\n\nMai and Theresa each grabbed an ankle and assisted me in pulling my knees to my chest, making sure they had access to my ass. My shame intensified as I felt the open air between my cheeks. Was there no inch of my body that my crush wouldn't get to see on this shameful day? Mai and Theresa giggled as they began to spank me, but their slaps felt serious. They spanked me at least as hard as men, and their dainty hands distributed the impact over a far smaller area. Erotic agony jolted though my body.\n\nOnce their onslaught stopped, Mai and Theresa helped me to my feet before leaving me alone in the center of the seated audience. As they made it back to their seats, Isabella rose and paraded her way around the tables and into the center in front of me. My eyes were focused on the crop in her hand. When Angie told me that the last step of my punishment would involve Isabella spanking me, I wasn't surprised. Of course, a dominant woman like her would make sure to get her turn in the grand finale. I hadn't expected the prop, though.\n\n\"Kneel,\" she commanded.\n\nEager to obey, I sunk to the floor and placed my hands on the floor. I assumed that's how she wanted to give me my final spanking. Isabella placed the flap at the crop's tip under my chin and pushed up.\n\n\"Keep your back straight,\" she said.\n\nI followed her instructions and sat back up. \n\n\"Hands behind your head,\" she continued. \"Chest out.\"\n\nOnce she was satisfied with my posture, she started circling me. She let the crop roam over my skin. Her heels against the floor sounded fittingly dramatic. I gasped at the sudden sting to one of my breasts. Shocked, I looked up at Isabella. Was she really spanking my tits? I didn't even know that was a thing people did. It seemed outrageous. \n\nYet, I didn't object. If this was how she wanted to punish me, I was going to take it. I kept my hands behind my head. Anticipatory goosebumps spawned as she let the crop caress another lap around me. Only when she'd circled her way back to my breasts did she let the crop strike again. \n\nThe impact wasn't as intense as the slaps my ass had endured, but my ego suffered immensely. Whereas the size of my ass was something I'd only recently come to appreciate, I'd always been proud about my breasts. Outright massive, they were the object of both admiration and envy. Having them as the focus of my abasement connected deep inside me. They swayed with the impact of the crop, drawing in humiliating attention from the audience.\n\nIncreasingly, Isabella let the crop linger at my breasts, caressing them between slaps. My nipples were at full attention, and I shivered with excitement as she flicked the flap at the crops tip over them. The sting as she suddenly slapped my nipple sent intense jolts through my body, a sensation that I could only compare to a small orgasm. The effect wasn't lost on Isabella, and she continued to slap my nipples, fueling me with pleasure, pain, and glorious humiliation. \n\n\"You may touch yourself.\"\n\nIsabella's words sounded distant in my trance, and only when she paused her slapping did my mind catch up. I looked up at her to see if I understood her correctly. Angie had told me that no one would touch my pussy even at this final stage of my punishment, but apparently that didn't include my own hands. And Isabella wasn't giving me an order this time\u2014she was merely giving me the option. It felt cruel. I desperately craved a release, but I wouldn't be able to hide behind imposed rules. I'd have to demonstrate to everybody that this humiliating treatment, the sweet pain, and their probing gaze left me so turned on that I couldn't help myself from masturbating.\n\n\"It's OK,\" Isabella continued. \"You may lower your arms.\"\n\nBefore my mind had made a conscious decision, my hand had found its way in between my legs. Normally when I masturbate, I build up gradually, teasing myself into elation. Now, I was far beyond a slow start. I furiously rubbed my clit. Isabella's smug grin only made my lust spiral further out of control.\n\n\"Lie down,\" Isabella said.\n\nWithout halting my rubbing hand, I laid down on my back. The stone floor felt soothingly cold against my overheated body. My moans echoed through the hall, and they escalated as Isabella resumed her skillful attention with the crop. She let her impact roam over my body, sending thrilling jolts of pain that blended with the pleasure of my own touch. Both my hands tended to my pussy\u2014one rubbing my clit while the other pumped multiple fingers in and out of myself. I did my best to pace myself, wanting to savor the sensation of debasing myself in front of the group. \n\nBut it was a lost cause. It wasn't long before I felt the orgasm take me. My body rocked, and the discomfort of the hard floor somehow amplified the sense of submission. I screamed out uncontrollably as my body finally had the release it had craved all day. Mixing with my moans I heard applause and cheers.\n\nI blinked as I regained my control. My audience was giving me a standing ovation. Dazed and confused, I remained on the floor until I realized Isabella was offering me a hand to help me to my feet. She hugged me.\n\n\"You...\" she said, pausing to kiss me on my forehead, \"are a champ.\"\n\nOne by one, the audience approached, each of them giving me an embrace. It was humbling to hug them naked, especially since they had just witnessed my shameful desires unfold. But apparently, getting off on submissive lust wasn't something this group found remotely shocking. I grew giggly, and increasingly agreed when they praised me for my performance.\n\n\"You are so fucking hot!\" Angie said, giving me a lingering hug and kiss on the cheek.\n\nShe was the last to approach, and we made our way back to our seats. For a while, we sat in silence. I sipped my wine, collecting my thoughts. I marveled at how unthinkable it would have been on any other day to sit there naked in a room of dressed people. That was the sort of thing that happened in nightmares. Now I was oddly content. It didn't feel right to cover up after revealing so much of myself. I heard my name in conversations, but I was still too dazed to full register what they were saying. \n\n\"What happens now?\" I asked Angie.\n\n\"You're off the hook,\" she said. \"You've fulfilled your obligations. The game is over.\"\n\nI nodded. She'd told me before that my punishment was over once Isabella had her go. As climactic as my final ordeal had been, it felt awry to let the evening fade into decorum.\n\n\"But...\" Angie continued. \"If you want me to guess what happens now, I bet those two are going to go fuck each other's brains out.\"\n\nShe pointed to Charla and Daniel. Sparks seemed to fly between the two as they chatted. Obviously about to leave, they hadn't even bothered to sit back down. Charla turned her back to her suitor, and Daniel's hand greedily groped her ass, finishing off with a distinct slap. They noticed us staring, and Charla stepped over to me.\n\n\"You know I still blame you for getting me caught,\" she said and leaned in to whisper in my ear. \"Thanks.\"\n\nThe couple walked off, Daniel escorting Charla with his hand on her ass as they headed for the bedrooms.\n\nAngie giggled. \"Yup, definitely gonna fuck each other's brains out. And they're not the only ones. By the looks of it, Theresa won't settle for just one Valentine.\"\n\nThe redhead was seated across from us between Alex and Jonas, and while she was making out with Alex, it seemed her hands under the table were busy on both sides. She said something I couldn't hear that made herself blush and her two suitors grin. Alex and Jonas exchanged a glance, nodded, and rose from their seats. Theresa also pushed back her chair, but instead of standing, she slipped to the floor. Her red locks were arranged in Dutch braids with a plait on each side. I couldn't quite see what was happening behind the table, but once the three of them made their way around the corner, I could see the two men had each grabbed hold of a plait and was leading Theresa on her hands and knees towards the bedroom area. \n\n\"It seems you're not the only one who's gonna get double-spanked tonight,\" Angie said with a sly grin. \"And I bet she's going to get a lot more than a spanking. I think ending up double-teamed is one of Theresa's main motivations for coming to these events.\"\n\n\"Wow,\" I said. I didn't think I could still be shocked.\n\n\"And Mai seems to be up for a wild night with our gracious hostess,\" Angie said. \n\nThe Asian girl was seated in Isabella's lap, and the dominant lady let her hands explore.\n\n\"Do you want me to guess what you'll be doing for the remainder of the evening?\" Angie asked, winking at me. \"Or is it too obvious?\"\n\nI followed her eyes to Paul. He had taken a seat further away from Isabella, maybe to indicate that he wasn't going to get involved with what was unfolding between the hostess and Mai. He caught me looking at him and cocked his brow in challenging expression, as if to say, 'your move.' And it was. I could no longer hide in the sanctuary of what the game obliged me. If I wanted more, I had to make an active choice. \n\nOf course, I wanted more. The release I had given myself in front of everybody was far from enough to satisfy all my cravings. A mere look from Paul made my juices boil.\n\n\"What about you?\" I asked, forcing my focus back to Angie. \"Are you sure you don't mind staying?\"\n\n\"Don't you worry about me,\" she said. \"I'm gonna insert myself in that.\"\n\nShe pointed to Isabella and Mai, who had moved on to making out. Mai seemed to make an effort to keep herself lower than Isabella to indicate her subordinance.",
        "\"As you may have noticed, Isabella likes to watch, and I bet I can put on a good show for her with Mai,\" Laura continued, her eyes lingering at the action in which she was about to participate. \"I guess we'll have a lot to talk about when we get back home.\"\n\nShe winked at me, rose from her seat, and made her way over to Isabella and Mai. She was welcomed with open arms, and for a while I watched as my friend engaged in sapphic foreplay. I was learning a lot about her today\u2014and even more about myself. When I again locked eyes with Paul, I decided it was about time I walked over to him. I had almost forgotten that I was naked, but his scrutinizing gaze as I approached certainly reminded me. \n\n\"Hi Paul,\" I said, feeling bashful. \n\nI did my best to cover up, placing one hand over my pussy and the other arm over my breasts. It was foolish, of course. He had already seen every inch of me, but I was hoping to convey some rudimentary decorum for what I was about to ask him. More than anything, it had the reverse effect, reminding us both how outrageous it was that I was walking around without a stitch of clothing. \n\n\"Hi Laura,\" he said.\n\n\"I have something I'd like to ask you,\" I said, feeling I had to jump straight into it.\n\nHe looked amused. \"Please, go ahead.\"\n\n\"I was just wondering if you'd like to get together sometime next week\u2014maybe go for a drink or a movie or something.\"\n\n\"Like a date?\"\n\n\"Yeah, like a date,\" I said. It was a surreal thing to do, asking a guy on a date in a situation like this. But I had to get that out of the way, to show him that I wasn't just interested in him for what I was about to ask him next.\n\nHe broke out in a wide grin. \"Nothing would make me happier. Maybe I can cook for you?\"\n\n\"I would love that!\" I said. \"And can I ask you something else?\"\n\nHe nodded, and I bowed down to kneel before him.\n\n\"Can you please do whatever you want with me tonight?\" I asked.\n\nPaul appeared stunned by my request; for once it wasn't me who speechless. But his eyes also lit up with the distinct fire I had come to adore during this eventful day. \n\n\"Are you sure?\" he asked. \"I can be very creative.\"\n\nI tilted my head to the side and pulled my hair out of the way, giving him access to my neck and his collar around it.\n\n\"Please,\" I whispered. \"Use me however you like.\"\n\nI gasped at my own words. Never before had I uttered such a disgraceful plea. I shivered as Paul attached his leash to my collar. \n\nHe stood, but to my confusion, he didn't lead me straight to his bedroom. Instead he hung leash over his chair and stepped over to Isabella. I knew my place and didn't follow. Though the leash wasn't tied to the chair, I still felt like a puppy tied to a pole outside the store.\n\n\"Do you mind if I borrow this?\" he asked, reaching for her crop on the table.\n\nIsabella looked at me and grinned. \"Please, go ahead. I have plenty of others to use on these two.\"\n\nAngie and Mai where kneeling in front of her, engaged in a deep kiss. I was impressed that Paul didn't linger to watch them; it certainly had me staring. But apparently, he had a more pressing matter to tend to\u2014me. When he returned, he pulled me up by the leash.\n\n\"Stand,\" he said.\n\nI was prepared to crawl for him, but he was notably eager to get to his bedroom. He led the way in front of his naked pet\u2014leash in one hand and crop in the other. My mind spun with anticipation. I knew only one thing for certain\u2014I belonged to Paul now.\n\nOnce inside his bedroom, he stood in silence for a long time. I felt small under his gaze, and I loved it. \n\n\"Undress me,\" he commanded.\n\nPart of me wanted to rip his clothes off, eager to have him as naked as me. But that wasn't fitting for the situation. Instead I patiently tended to one item at a time, making sure to properly put his jacket on a hanger and fold his pants before allowing myself to proceed. My fingers betrayed my jittery emotions as I struggled to unbutton his shirt. Paul didn't show any sign of impatience. He just stood there in stoic silence as his maid undressed him. When I pulled the shirt over his shoulder, I was overcome with a desire to touch him all over\u2014to let my hands and mouth worship his strong chest muscular arms. But it wasn't what he'd commanded me to do, so I merely folded up is shirt.\n\nWith Paul down to his underwear, I knelt in front of him. He was bulging and must have been eager to escape the tight confines. Still, I tentatively hooked my fingers in the waistband and looked up at him, making sure that 'undress me' meant all the way. He nodded, and I did my best not to stare as his cock swayed free. It looked massive before me, and I longed to take him into my mouth. Kneeling before him, it was the obvious thing to do. I looked up at him with pleading eyes.\n\nBut Paul was determined to control my desire. After leaving me hungering for a while, he pulled me to my feet.\n\n\"Lie on the bed,\" he commanded. \"Face up.\"\n\nI did as I was told and waited expectantly as Paul rummaged through his bag. I got some hint of his plans as I saw the ropes in his hand. He started with my arms, tying them to the bedpost with tight ropes around my wrists. Once my arms were secured, he went for my legs, spreading them as he tied them to the bed's legs. The ropes left me unable to move a limb more than an inch, and I adored the loss of control. My pussy was left open and available for his pleasure. I ached to be used.\n\nBut Paul continued the path of tormenting patience. Instead of mounting me, he grabbed hold of the crop. He circled me, letting it roam over my body with a mixture of caresses and slaps. His cock swayed impressively as he made his way around the bed, making sure he tended to every part of me. The crop landed on my legs, arms, belly, and chest\u2014even my face. These were just light taps, and more than anything, I felt he was claiming his territory. \n\nAnd that impression was amplified as he let the crop wander up the inside of my thigh. I stared at the ceiling, bracing myself for the inevitable. I moaned in submissive lust as he spanked my pussy. It would have been unthinkable act to accept just the day before; now I savored the notion that he could do with me as he pleased. He lingered, and I gasped each time the flexible tip landed on my naked wetness. He brought it to my mouth, making me kiss the crop that had spanked my most intimate parts. I could taste my own excitement.\n\nHaving claimed my entire body as his, he put down the crop and entered the bed from the foot side. Slowly, he crawled on top of me, and the sensation of his hard cock grazing up my thigh filled me with a yearning unlike anything I had ever felt before. I craved him to conquer my needy core.\n\nBut instead he kissed me. Explosions of emotions went off as his lips touched mine. The stark contrast to his strict dominance amplified the delicate touch, making my lust for him skyrocket. The tenderness of our connecting lips also made me feel like it wasn't just this newfound submissive part of me that gave itself to him\u2014it was all of me, including my most romantic desires. I wanted to embrace him\u2014as was expected when exchanging the first kiss with someone\u2014but the ropes held my arms down. Impeded, I focused on the sensation of our lips tasting each other.\n\nAs our tongues danced, his cock poked against my eager pussy. I was wet and open, and we moaned into each other's mouths as he pushed forward, entering deep inside me. Finally, I was fully conquered. We held still, getting used to the sensation of finally experiencing each other. \n\nWhen he began to move back and forth inside me, it was gentle at first. But his intensity built. His mouth left mine as he eventually straightened his arms against the bed to elevate his upper body. In this position, only our hips and sex connected. He closed his eyes and seemed to focus entirely on his assertive trusts, moving almost all the way out of me before pushing deep inside, allowing his entire length to repeatedly claim my cunt. Following his lead, I closed my eyes, marveling at the eroticism of being trapped and used. \n\nYet, as much as I savored the notion of my master using me for his pleasure, my own pleasure was undeniable. It escalated quickly, and the climax I had given myself at the grand finale of the game was far from enough to release all the excitement that had built up over the day. When I reopened my eyes, I found him staring down at me, taking in my submissive disposition. The undeniable fire in his domineering gaze made my moans escalate. My eyes must have been pleading.\n\n\"Go on,\" he said. \"Come for me.\"\n\nI followed his command. Jolts of pleasure rushed through me, radiating from his forceful cock driving in and out of my cunt and spreading through my body. I trembled against my ropes, and the sensation of capture released new waves of pleasures inside me. \n\nYet, Paul didn't join me in the release. I heard him grunt through my orgasmic turmoil, but he held back. As my climax eased into trembling aftershocks, his hard cock still caressed my insides. My shivers intensified as I realized he wanted to make our intense first time last.\n\n\"I'm not done with you yet,\" he said and leaned down to kiss me. His tender lips were contrasted with tug on the leash still attached to my collar.\n\n\"Please,\" I whimpered. \"Use me as long as you want.\"\n\nOnly as the words left my mouth did I realize how deeply I meant them. \n\nStill on top of me with his cock buried inside me, he undid the ropes around my wrists. Yet, even as my arms were set free, I didn't move them, demonstrating that\u2014ropes or no ropes\u2014I was under his control. He looked pleased, and I kept my spread position as he slowly eased out of me to untie my legs.\n\n\"Come,\" he said, and pulled me off the bed by the leash. \"Kneel.\"\n\nOnce again, I found myself kneeling before his massive erection. It glistened with my juices. I looked up at him and received a nod. Ever so slowly, I ran my tongue along his entire length, starting at the base. The flavor of my own excitement filled my mouth, and the evidence that he had just been inside me filled me with joy. He stared intensely down at me as I proceeded to clean his cock with my tongue.\n\n\"Open your mouth,\" he commanded. \n\nI obeyed in an instance, and for a long time he left me like that, foolishly gaping wide as I waited for him to use my mouth. When he finally granted my wish, I moaned in gratitude around his cock. At first, he merely held still, taking in the sight of my lips wrapped around his cock. But he soon started to trust back and forth, the intensity building with each trust. I marveled at how deep I could take him. It seemed my entire body had accepted its purpose. When he pushed against my throat, the desire to serve him dwarfed any other reflex. \n\nI drooled around his cock as he continued to fuck my mouth, controlling me with one hand clasping my hair and the other pulling at my collar. I savored the shameful thrill of presenting myself as a slutty mess. It filled me with joy that he didn't feel the need to be gentle with me. I had given myself to him, and he trusted me enough to exploit my commitment. \n\nFrom the intensity of his grunts, I could tell he was getting close to climax. I prepared myself to taste his cum. Yet, he pulled back. He stared in amazement at me, and I could tell he was impressed by my servitude. His throbbing cock was a testament to the pleasure my mouth had provided.\n\n\"Get on the bed,\" he said, his voice strained with lust. \"Ass up.\"\n\nI knelt on my hands and knees, but he wasn't satisfied with the position. Using the crop, he tapped my elbows.\n\n\"No arms,\" he instructed.\n\nI fell forward to rest on my chest, making my ass pointing to the ceiling. It left me utterly exposed, and Paul made the most of it as he circled me to take in my submissive posture. I gasped as I felt the crop land on my ass. The first few were intense, clearly intended to provide the sweet mixture of pain and pleasure I had learned to adore. But the impact soon lessened to determined taps, much like when he applied it on my front while I was tied to my back. He let the crop wander up over my back, demonstrating his claim to all of me.\n\nAnd that impression was soon augmented. He traced his way down my spine, and when he reached my ass, he didn't veer off. Instead he let the crop claim territory further and further in between my cheeks, alternating between tapping and caressing. I gasped as I realized where he was heading. A master of suspense, he circled around the sensitive center of my ass, ever so slowly approaching. I moaned as he reached his target. Though his slap was gentle, the area was so sensitive that it sent powerful jolts of humility through my body. He repeated his action, making sure I understood that it wasn't by accident he was slapping my asshole.\n\nHe put down the crop and once again went rummaging through his bag. My eyes grew wide as he held up a plug-shaped toy in shining steel. \n\n\"When I heard you were coming, I didn't expect we would end up like this,\" he said. \"But I still came prepared.\"\n\nHe held it out for my mouth, and I sucked on it, coating it with saliva. When he was satisfied, he turned his attention back to my ass. I panted as he let the toy caress its way between my cheeks. I gasped as he spat on my ass hole. I couldn't tell if it was to demonstrate his dominance or to ensure I was properly lubricated for the inevitable. As he circled around my sensitive rim, I opened my mouth to tell him I'd never let anyone put anything in my ass before. But I refrained. I worried he might interpret it as an objection.\n\nI moaned as he put pressure on the plug. It was an odd sensation to be probed, but definitely not unpleasant. In fact, as he continued to tease my ass by repeatedly inserting just the tip, I found myself wanting more. I was even tempted to beg for it. But I kept silent. I would get what I deserved when he so decided.\n\nI didn't have to wait long. I wailed in gratitude as he pushed the plug past my rim. What a sight I must've been for him, my submissive posture now decorated with a shiny plug in my ass. I embraced the humiliation of presenting myself so indecently. He began to play with the toy, repeatedly removing it before pushing back in. \n\nAnd as he continued to stretch my rim around the toy, I grew increasingly certain that this was preparing me for something bigger. I understood by now that he had a thing for my big ass, and he was going to enjoy it in every possible way.\n\nHe left me for a moment, and when I looked back over my shoulder, I noticed he'd pulled out a tube of lubricant from his bag and was coating his cock. I was pleased to see I had given myself to a considerate master.\n\n\"Come here,\" he said, standing by the foot side of the bed.\n\nI backed up, approaching him with the plug between my spread cheeks until my ass was poking out over the edge. He pulled the toy out of me, leaving me frustratingly empty\u2014but not for long. He placed his cock at my entrance and pushed the head inside. \n\nI was amazed at how easy he entered me given how much larger he was than the plug. It seemed my body had fully embraced its purpose as a vessel for sexual pleasure. He held still, taking in the sight of his cock inside my ass while allowing me to get used to the filling sensation.\n\n\"Fuck yourself,\" he commanded.\n\nI began to slowly rock back and forth, whimpering with erotic humiliation. Not only was I offering up my ass\u2014I actively impaled myself. Each thrust took him further inside me, deepening my submission. I had never planned to ever lose my anal virginity, but I was grateful I had saved it for this special occasion.\n\nWhen I took him deep enough to make my ass meet his hips, it seemed too much for Paul to remain passive. He grabbed my hips and pressed us together, completely burying his cock inside me. We grunted in unison. As he dominated my ass with increasing fervor, he grabbed hold of the leash. He pulled back on it as if it were a rein, adding to the sensation that I was being ridden into submission. I wailed with his thrusts. \n\n\"Yes! Use my ass! Please, it's yours!\"\n\nPresumably, no one in the house would be shocked by what we were doing, and I didn't care who heard me. If anything, I was proud to let everyone know how bravely I had submitted.\n\nThe novel sensation of being fucked in the ass didn't prepare me for the climax. It snuck up on me before I had a chance to control it. \n\n\"Oh, god, I'm...!\" I began before I lost control of my voice. \n\nHe rode me through my climax, spanking me to add jolts of blissful pain to my release. I pushed against my collar, making sure to fully experience his authority through my release. \n\nPaul still hadn't climaxed. As I regained my senses, I wondered if perhaps my rushed climax had been too quick for him to join me, and I began to rock back and forth again. Yet, he pulled out of me. His expression was wild with excitement, and his throbbing erection looked ready to explode.\n\n\"Get on the floor,\" he said through gritted teeth.\n\nI hurried to obey.\n\n\"Close your eyes,\" he said and approached with his fist around his cock.\n\nI had barely enough time to shut my eyes before I heard him grunt, and I felt a splash against my face. With a day of build-up, his release was powerful, and he continued to shower me in a seemingly endless flow. Blissful moans escaped me as I savored the sensation of being marked as his. \n\nWhen his shower eventually subsided, I peeked out between sticky eyelids. He gazed back at me, taking in my appearance. And what a sight I must be, naked on the floor with the leash dangling from my neck and my entire face glistening with his cum. I felt it drip from my chin onto my tits. As disgraceful as my appearance was, I felt content and thrilled to let him drink me in.\n\nEventually he fetched a towel and cleaned my face. His consideration made me blush, which was odd given all else we'd done. But with his tentative care, I felt we were slipping into personalities we normally displayed. \n\nHe removed the collar and kissed my forehead. \"Come.\"\n\nHand in hand, we walked to the shower and proceeded to tenderly wash each. We refrained from words, knowing none could do our experience justice. We made our way back to the bed and soon fell asleep in a tight embrace.\n\n* * * *\n\nI rode back to the city in Paul's car the next day. Angie assured me that she didn't mind, and I realized that was an understatement when she used the opportunity to extend her stay with our hostess. They waved at us as we drove off.\n\n\"Are you going to miss it?\" I asked.\n\n\"I guess,\" he said. \"But this year in particular, I feel I got to bring a lot of excitement back home.\"\n\nHe winked at me.\n\n\"But that's what I mean,\" I said. \"I'm hoping neither of us will be single for the next S.A.D. game.\"\n\nI hoped I didn't come off too presumptuous, but after all we'd shared, anything but open honesty felt unworthy. \n\nPaul gave me a curious look. \"I see. Well, that would be worse for you then. You just discovered it, and you can't fool anyone you didn't enjoy being chased.\"\n\n\"Yeah, it was...\" I trailed off. Any offhand description I could think of would only belittle the wild cocktail of sensations I had discovered. We drove in silence, and I assumed he too was having flashbacks of the experiences we left behind.\n\n\"I also hope we're not single next year,\" he said eventually. \"And you're right\u2014that means we can't attend Isabella's S.A.D. celebration. But that's far from the end of the world. For starters, I hope we can do things like we did yesterday a lot more often than once a year.\" \n\nI leaned my head against his shoulder. \"I hope that's a promise.\"\n\nPaul put his arm around me and caressed my head.\n\n\"And...\" he continued, whispering in my ear. \"A lot of people prefer spanking games over chocolate and flowers on Valentine's, not just singles.\"",
        "I looked up at him in confusion.\n\n\"We wouldn't be the first to find each other during these events,\" he continued. \"There is an annual Valentine's game for couples happening not far from here, and I know we'll be welcome next year. If you want, that is.\"\n\n\"Oh, wow...\" I began. \"I...\"\n\nPaul chuckled. \"It's 364 days to go\u2014we don't have to make plans now. We have more urgent things to decide now.\"\n\n\"Such as?\"\n\nHe smiled slyly while keeping his focus on the road. \"I know what that look in your eye means. There is a secluded look-out spot in about three miles. Should I pull in and spank you there, or should I wait for the next one, which is about thirty minutes' drive?\"\n\nWe had spent the morning in bed, much like a new couple normally would. The tender lovemaking was a sweet contrast to the intense experience we shared the night before, and it was comforting to know that our erotic life wouldn't only involve dominance and submission. But he was right. Talking about the game and the prospect of experiencing it again had my submissive blood boiling.\n\n\"Can we stop at both?\" I asked.\n\nPaul grinned. \"The scenic route home is going to be very scenic this time.\" His amused expression morphed into fiery excitement. \"Take off your clothes.\"\n\nThe End.\n\nThis is an entry to Literotica's Valentine's Day contest. Please remember vote if you liked it. \n\nA big thanks to Dazmine for her valuable editing. "
    ],
    "authorname": "tomlitilia",
    "tags": [
        "anal",
        "bondage",
        "chase",
        "collar",
        "game",
        "outdoors",
        "spanking",
        "submissive female",
        "tit spanking",
        "valentines day"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/s-a-d-the-s-is-for"
}
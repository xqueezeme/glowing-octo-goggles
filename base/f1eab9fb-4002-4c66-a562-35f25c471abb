{
    "title": "Lady in Red Pt. 02 Ch. 06",
    "pages": [
        "Laura had Steve lie on a gurney in the ER as she pulled the curtain closed around it. She took a pair of scissors and deftly cut his pants from his body. \"Gwen, please get his shoes and socks off. We need to examine him closely, as well as x-ray him. Steve, can you tell me of any pain or injuries that I can't see?\"\n\n\"My shoulder hurts and my leg aches, but you can see that,\" responded Steve. \"Other than that, I just have some scratches and bruises. Can I ask how Jason's doing?\"\n\n\"Thanks to you, he's doing great! I spoke to Lisa last night and she said she'd be bringing him home to Sparta this weekend,\" answered Gwen as she pulled Steve's socks off his feet. \"I think we'll burn these socks, if they aren't declared a biohazard first. Haven't you been told to always wear clean socks and underwear in case you're in an accident?\"\n\n\"I forgot to take a change of clothes with me. It looks like Laura just took care of my underwear,\" worried Steve as Laura cut his underwear from his body. \"Now I'm totally without clothes!\"\n\n\"And that's just the way I like you!\" quipped Gwen as she moved closer to Steve's head. \"You really do need a shower and a shave. I didn't realize how heavy your beard was since you've always been smooth shaven. Is Steve well enough to shower and shave, Laura?\"\n\n\"I'm sending him for x-rays right away. It looks like he's still carrying a bullet in his leg, he's got a nasty gash on his shoulder, and his pretty face has been deeply scratched by what looks like pieces of rock,\" observed Laura as she held up a small chard she had pulled from one of Steve's cuts.\n\n\"Yeah, it's probably pieces of rock that hit my face when the bullet hit the boulder next to my head,\" responded Steve as he recalled the battle he had the previous day. \"I was lucky the guy was in such a hurry to shoot me. He pulled his shot a little, and he missed. I didn't.\" \n\nLaura glanced at Gwen with some surprise as Steve finished his statement, but she kept her professional demeanor. \"Once we determine that you've got no internal injuries, I'll let you take a quick shower and shave in our staff facilities. Once you're bandaged, you'll be limited to sponge baths for a day or two. There's going to be a boat load of reporters outside and you need to look human. We don't normally do things like this, but it's my professional opinion that you deserve some special attention and consideration.\n\n\"I'm still trying to figure out how you wound up here in Sparta, and even more amazingly, how Gwen knew you were on that helicopter. That was scary.\"\n\n\"I'm here because Gwen and Jordan offered a million dollars to anyone helping me and the girls get back to Sparta safely. That saved my life. It looks like I owe you again, Babe. You're making it a habit of saving my bacon,\" grinned Steve as he took Gwen's hand in his. \"I don't know who told her I was coming in on that helicopter.\"\n\n\"I really don't know how I knew, but I did. I was absolutely convinced Steve was coming home on that helicopter. I was feeling funny during breakfast, anxious and nervous. When you said that some injured people were being flown in, somehow I just knew it was Steve.\"\n\nSteve's x-rays were negative, so Gwen was allowed to help him into the lady's locker room. She turned the water in the shower to the temperature Steve preferred and immediately undressed as Steve dropped the robe he was wearing and limped into the shower. Soon, Gwen was under the water with him, carefully washing his body as she stood under the spray with him.\n\n\"You've lost some weight and you've got several bruises on your chest. They look like the ones you had after that shootout at graduation. Were you wearing a bullet proof vest?\" asked Gwen as she gently ran her fingers over some purple marks on his torso.\n\n\"Yeah, I had a flak jacket on. I guess it's a good thing. I didn't realize that I'd been hit, but now that you touch the areas, they do feel a little sore.\"\n\nGwen had promised Laura that she's get Steve cleaned up as fast as she could, so she wasted no time getting Steve scrubbed, other than being very careful around his obvious wounds. Once he was showered, Gwen had him sit down while she carefully shaved his face. She meticulously shaved around his cuts and abrasions. Luckily, most of them were higher on his face and forehead. When she was satisfied that she had gotten every stray hair, she rinsed his face and applied some lotion.\n\n\"Now you can put that robe on and let Laura work on your leg and shoulder. Since I've completed two years of medical school, I can watch and even assist her, if she'll allow me,\" added Gwen as she opened the door to the hall.\n\nA smiling nurse was waiting for them when they emerged. \"You look much better, Mr. Hammer. I bet Ms. Anderson didn't miss anything when she helped you get cleaned up. I know I wouldn't have,\" laughed the young nurse as she escorted Steve and Gwen back to the ER.\n\n\"Here's what I'm thinking,\" offered Laura when Steve was back on the gurney. \"Steve needs stitches in his shoulder, but I can't do that until the swelling is down and any infection is cleared up. I have to remove the bullet from his leg and clean that up carefully. It won't be the first one I've dug one out of this guy. He looks a lot better this time than he did that awful day six years ago.\n\n\"Are you willing to spend a day or two in a hospital bed, just relaxing and healing?\" asked Laura as she examined Steve's shoulder.\n\n\"Laura, you know the answer to that, or you wouldn't have asked. This is Memorial Day weekend and our concert is tonight. I'll be on stage with my friends, like I always am. I'd like you to do what you can for now and then let me go. I'll be sure to follow any directions you have and be back in a couple days for the stitches.\"\n\n\"That's pretty much what I expected,\" replied Laura. \"I'll dig that bullet out of your leg and start you on some strong antibiotics. You understand that the hospital will give me holy hell for not admitting you while you recuperate. I may be coming to your company for a job.\"\n\n\"You'll always be welcome, but you can bet we'll back you to the max if the hospital gives you any trouble. Steve is not your average patient. I'm witness to him refusing to be admitted. He'll tell the nurses when we leave that you insisted that he be admitted, but that he's refusing. That is if you think he's going to heal okay this way,\" worried Gwen as she considered the situation.\n\n\"This guy will be fine. I'm going to prescribe some sleep and maybe some gentle loving to help his emotional needs. A few hours sleep and some personal attention should do wonders for him. I understand there are more than a few ladies willing to help with that part of my prescription,\" teased Laura as she gently cleaned Steve's shoulder before applying some sort of ointment and a bandage.\n\nGwen and a nurse assisted Laura as she removed the bullet from Steve's leg in a small operating room, using a local anesthetic. \"He was pretty lucky, all things considered. The bullet missed bone and lodged in muscle. It'll hurt for a few days, but we've removed it soon enough to avoid any serious infection. It'll drain for a while, but if he takes his antibiotics like he's supposed to, he should be as good as new in a few days,\" predicted Laura as she bandaged Steve's leg. \"I'll sew his leg and shoulder up when the infection is gone and the injuries stop draining.\" \n\n\"Thanks, Laura,\" offered Steve after they moved him to a small room near the ER. \"Can I get down now? I'd like to see Jordan and Charlie and thank them, and Paula and Kate, and everyone else. Can I leave now?\"\n\n\"My official response is that you can't leave. You need to remain under our care for a few more days, at least. However, I heard what happened to Flores and his drug gang when they tried to stop you. I'm not going to try to keep you if you insist on leaving, but it will be in a wheel chair. That's the least you can do for me to help me keep my job.\"\n\nBefore Steve could respond, Ashley entered the room. She clutched a large bag to her chest as she stopped and looked at Steve.\n\n\"Thank God you're back! I was so worried about you!\" cried Ashley as tears ran down her cheeks. She dropped the bag and carefully hugged Steve as she sobbed against his chest. Laura arched a questioning eyebrow at Gwen. Gwen simply smiled as she watched Ashley regain control.\n\n\"I picked up some clothes for you. Gwen said your old ones were pretty much ruined. She gave me your sizes. I hope you like them,\" continued Ashley.\n\n\"I know your leg still hurts,\" added Gwen as she undid the belt to his robe and tugged it off his shoulders. Then she dropped to her knees, dug a pair of boxers from the bag and held them by Steve's feet. Ashley quickly dropped down next to Gwen and helped spread the underwear open for Steve to step into.\n\nGwen chuckled as Laura was unable to mask her surprise at Ashley's actions. Meanwhile Steve placed one foot into the underwear and then the other. Once his feet were in, Ashley and Gwen carefully slid them up his thighs. Gwen pulled the front out to go over the bandage on his leg without any contact. Then she and Ashley pulled socks out of the bag and worked them onto his feet. Finally, they pulled out a pair of cargo pants and carefully helped work them up to his waist.\n\nOnce he was dressed from the waist down, Ashley stood with a polo shirt and offered it to Steve. Suddenly, she pulled it back and hugged him again. Then she stepped back and held the shirt out for Steve.\n\n\"Thanks for letting me help him, Gwen. The last week has been awful, wondering if he was okay and if he'd make it back. Now that he's here, I just want to be close to him and watch his every move. I picked out a color that should go good with his tan and his eyes. Do you like it?\" asked Ashley as she turned and looked at Gwen. That was when she noticed how shocked Laura appeared to be.\n\n\"I'm sorry if I acted like a school girl, Laura. Like I said, I've been really worried and sometimes I have a little trouble with stress. When I'm around Steve, it gets a lot better, especially today. Steve and Gwen are a devoted couple and I wouldn't ever try to change that, but I do get to help him when I can, and Gwen's fine with it.\"\n\n\"Laura was just a little surprised that you were so extremely helpful, especially in front of Gwen,\" responded Steve as he tucked his shirt into his pants. \"I was more than a little surprised, too. But I know how worried you must have been. Gwen's smile is a mile wide, so I'd say that she's fine with everything. Thanks for finding some clothes for me. I feel a lot better dressed like this than I did wearing that robe.\"\n\nA nurse came into the room and spoke quietly to Laura, who in turn told Steve, \"it seems that you have a phone call. President Hanson has asked to speak with you. You can take it in the small office across the hall and to the left. Just push # 1.\"\n\nSteve limped to the small office and asked Ashley to close the door behind her, which drew a big smile from her. Steve picked the phone up and pressed the button.\n\n\"Hello, sir. This is Lieutenant Steve Hammer reporting,\" began Steve formally. \"Thank you, Sir. Yes, I've been treated. I have a surface wound on my left shoulder and had a bullet dug out of my leg. I should be fine, Sir. Yes, if I could, I'd very much like to spend a few days here in Sparta. Yes, that's this evening and I'm planning on performing with my friends, unless that's a problem, Sir. Tomorrow at ten? Yes, Sir.\"\n\nSteve hung the phone up and turned to Gwen and Ashley. \"The President said I could stay in Sparta for a few days for some R & R. I have to be de-briefed tomorrow morning at ten and I have to refrain from discussing the events in Colombia with anyone.\"\n\n\"So there's no way I can coax the story from you?\" asked Gwen as she rubbed her ample bosom against Steve.\n\n\"I'll tell you anything you want to know,\" grinned Steve as he grabbed Gwen and pulled her tight to his body and kissed her.\n\n\"That seemed awfully easy!\" complained Ashley. \"Aren't you supposed to be tortured for a few weeks before you spill your guts to your masochistic interrogator?\"\n\n\"I've been away from Gwen so long, it already feels like torture,\" replied Steve. \"The President has ordered her to help me with the R & R. She's in for a busy few days.\"\n\n\"Bring it on, Big Guy! I'm a loyal American and will follow my orders to the absolute best of my ability. Tell me what you want. I'm at your beck and call,\" replied Gwen as she again kissed Steve's lips. \"Wait! I think I'm getting a message from Little Steve down below. It's telling me exactly what you want.\"\n\n\"You certainly are good at understanding what he wants,\" laughed Steve as he looked into Gwen's eyes. \"You'll be taking orders from me, and it happens that the little guy and I pretty much are thinking the same thing and it involves you, silk ropes, whipped cream, a blindfold, and a tube of lubricant.\"\n\n\"Excuse me!\" groaned Ashley as she quickly opened the door. \"I need some fresh air. Want me to tell everyone you'll be out in an hour or so? Should I place orders with a pharmacy, an adult store, and the local grocery?\"\n\n\"Thanks, Ashley, but I have everything he's asked for in my pocketbook. I always travel prepared,\" responded Gwen while maintaining eye contact with Steve.\n\n\"You had all of that stuff with you while I was in Colombia?\" mused Steve. \"Ashley, has Gwen had any visitors while I was away?\"\n\n\"Now that you asked, the Sixth Fleet did stop in for a few days. She had a tractor trailer deliver whipped cream and lubricant in 55 gallon drums. Maybe you need a new girlfriend?\" suggested Ashley as she arched her eyebrows and licked her lips.\n\n\"Maybe I need a new assistant!\" laughed Gwen. \"55 gallon drums? How did the Sixth Fleet get so far from any ocean?\"\n\nA few minutes later, Gwen wheeled Steve into the waiting room next to the ER. The room came alive as soon as they entered it. Everyone rushed to welcome Steve. He smiled and carefully stood and offered his arms to Jordan, who quickly came and wrapped her arms around him. \n\n\"God, you're beautiful. You and Gwen saved my life with that big reward offer. It's going to cost you a few million, but it made the difference. Thanks, Jordan. You're the best!\"\n\nJordan simply sobbed into Steve's chest for another twenty seconds before drying her eyes and looking up at Steve. \"I was so scared. I told Gwen you'd be okay, but I was really worried. That reward was totally Gwen's idea. I was happy to be able to sign the flyer. You're going to be okay, right?\"\n\n\"This guy had a bullet in his leg, a bullet crease on his shoulder, some rock shards in his face, and a few bruises from where bullets hit his flak jacket. Pretty much a walk in the park for the very tough Steve Hammer, U.S. Navy SEAL,\" quipped Gwen as she beamed with pride. \"He'll be fine and he's going to be on stage with us tonight!\"\n\nJordan unwrapped her arms and stepped away from Steve as Kate took her place. \"Gwen knew you were on the helicopter. The rest of us didn't believe it, but she knew. She's the one for you. I didn't need any more proof, but I got it anyway. I'm so glad you're back and okay! I love you, and I always will,\" sobbed Kate as she hugged Steve.\n\nPaula was next. She simply kissed him gently on the lips and smiled. \"Thanks for coming back to Gwen. You two belong together and it's becoming more obvious all the time.\"\n\nBecky and Charlotte each took a turn hugging Steve before his grandmother stepped up to him with tears in her eyes. \"That girl knew you were coming home. The rest of us didn't believe it, but she knew. You take good care of her. She's amazing,\" managed Beatrice Patterson as she struggled to hold her emotions in check.\n\nOnce the ladies were done welcoming Steve, Charlie stepped up and gave Steve a hearty embrace. Ted and William Patterson followed suit. It was an extremely happy group that walked out of the hospital, only to be met by several reporters and photographers. \n\nQuestions were hurled at Steve nonstop until he raised his hand and asked for silence. \"I can't make any statements or answer any questions until I am given permission by my superiors. It's that simple, so please stop asking. Other than it's great to be home with my friends and family, I have nothing else to say. Thank you.\"\n\n\"Do you want to go home and take a nap?\" asked Gwen once they had moved away from the nosey reporters. \"I know you're exhausted and we have a big night ahead of us.\"\n\n\"First, I'd like to stop at Billy's and get one of their big steaks,\" revealed Steve. \"I've lived on fruits and berries for a week and I'd really like some meat and potatoes.\"\n\nAs the group entered Marsh's Landing, patrons suddenly went quiet. Steve recognized nearly half the people seated and spoke to them as he passed by.\n\n\"Frank, your wife looks great. How's you ever get her to marry you?\" joked Steve to the first man he recognized. \"Jim, Mandy, your kids are getting big! Your girl's as cute as her mother. Mrs. Johnson, it's good to see you.\"\n\nGwen felt tremendous pride as she walked arm in arm with her amazing boyfriend. He was maintaining and building on friendships he had developed since he arrived in Sparta six years prior. The neighbors he took the time to speak with were extremely flattered that a man as famous as Steve and who had just been through what he had endured still thought enough of them to say hello. Gwen made sure to smile and make comments as well. These were their people and she loved her home town dearly. Steve had embraced it from the day he moved in. That was simply another reason she loved him.\n\nBilly Marsh came out of the office and embraced Steve before making a few jokes about him slacking off in Colombia while everyone else had to work. Steve grinned and kidded Billy right back. It was obvious to all that they had an easy, close friendship, based on a deep, mutual respect.\n\nIt was just noon when Gwen led a very tired Steve from the restaurant. She borrowed Ashley's car and drove Steve to her parents' home. There she undressed him and then crawled into bed next to him. Steve ran his arm around Gwen, took her left breast in his left hand, squeezed it gently, and fell asleep. A short time later, Gwen joined him in slumber. For the first time in a week, she enjoyed a relaxed, peaceful sleep. \n\nThey slept four hours before Paula apologetically woke them up. \"I'm sorry kids, but the entire town's waiting on you. The dedication was pushed back so Steve would have the chance to rest a few hours. The dedication is now scheduled to begin in half an hour. Then there's the matter of a traditional concert given by the most famous residents of Sparta. There's even more people around than we usually have for this event. Reporters are all over the place. The clip of Steve getting off the helicopter with those darling girls has been played a thousand times. The one of you running to him and hugging him for a few minutes has played even more. For some reason, the news people think you two are deeply in love. Go figure.\"\n\nTwenty five minutes later, Steve and Gwen were standing on a small stage in front of the new wing of the hospital with Paula, Ms. Walker, Jordan, Charlotte, and numerous hospital officials, including Laura. To start the affair, Gwen and Jordan sang the National Anthem and the gathering loved it.\n\nThe president of the hospital gave a short speech about how the addition was the brainchild of Ms. Walker, a local teacher. Then he turned the microphone over to her as the crowd applauded.\n\n\"Thank you,\" beamed Ms. Walker as the cheering and applause began to lessen. \"I'm being given credit for something that I really shouldn't be. I was the senior class advisor the year that Gwen Anderson, Jordan Quick, Steve Hammer, and many other exceptionally gifted students and citizens graduated. The day before school started, I heard about a video on YouTube that featured Gwen and Steve dancing. I watched it a couple dozen times, often with tears in my eyes.",
        "\"Then I watched the video where Steve spoke to Gwen about their date after Sparta won its first football game of the year. What I can take credit for is realizing that it was going to be a year like no other. I had Gwen in class the previous year and knew that she was a brilliant student, if a bit reserved, and perhaps even introverted. What I saw when she and Steve were together thrilled me to the core. I just knew that the two of them were destined for great things.\n\n\"That's when I began thinking about a class project worthy of the students of the class. A few weeks before, a friend of mine with a small child had mentioned that she had to drive her daughter to the state capital for proper medical treatment because Sparta's hospital lacked the needed equipment and facilities. When I recalled that, I decided to ask the kids in the senior class if they were up for a big class project, one that would make a difference in the lives of a great many people. Being the quality students and people that they were, they agreed enthusiastically.\n\n\"It started out slowly and gained momentum. When Jordan Quick came to our school, things really began to take off. She, along with Gwen, Steve, and many others, donated their time and talent to the project. The rest is history.\"\n\nThen Charlotte was asked to speak. \"I'm extremely proud of the Spartan Nation. It's no accident this hospital was able to expand. It's a credit to the parents, teachers, school board members, the hospital, and citizens of this community that an atmosphere of sharing and caring was encouraged so strongly. I've got two years of med school behind me and this is where I want to practice medicine when I get my MD. This is my home town!\"\n\nWhen Jordan stepped to the microphone, she was very humble. \"I came to Sparta a troubled girl, one that had just completed rehab for drugs and alcohol dependency. Steve, Gwen, the Andersons, and all of the students and teachers welcomed me and helped me keep that monkey off my back. I am not the same person I was then, and I'm proud of that. Helping this hospital is one of the best things I've ever done. Except for gaining the love and friendship of Charlie, Gwen and Steve, it's the high point of my life. Someday, my kids will be born and raised here in Sparta. It's my home town! \n\nGwen smiled as she took center stage. \"I've been blessed with good fortune. I can't explain why Steve asked me to that dance, or why he fell in love with me, but that love has allowed me to work for this hospital and this community. I have everything I could dream of, and like Charlotte, I'm two years through med school. I want to practice medicine here, get married here, raise my family here, and even be buried here some day. We are the Spartan Nation, and this is my home town!\"\n\nWhen Steve was asked to say a few words, he had an obvious limp as he approached the microphone. Before he was able to comment, the crowd began cheering and clapping very loudly. It went on for what seemed like a very long time.\n\n\"Thank you,\" began Steve as the applause finally began to taper off. \"I'm honored to be here today. It's a dream come true to see this new hospital standing here. Gwen and Jordan thought it was such a great idea, they asked Charlie and me if we'd go along with our company building a children's hospital in Kiev! I'm able to tell you in all honesty, that Gwen and Jordan are truly exceptional human beings. I'm humbled when I'm with them. I've been blessed with some great friends and one very amazing girlfriend. Like the rest of you, I just do what I can and hope that it's enough. I'm proud to tell you that I'm a Spartan, and this is my hometown!\"\n\nThe crowd loved the kids' brief speeches and how they spoke of their pride in being Spartans. There could be no doubt that the status of the Spartan Nation had increased dramatically since Steve met Gwen that day at the mall. The community had famous citizens that they were proud of, and a new state-of-the-art children's' hospital. Lady in Red Productions had bought land and built a modern facility for recording songs and a set for television shows. It was rumored that movies may be made in Sparta! \n\nThey had not only survived two terrorist attacks, but had sent the terrorists straight to hell! It was a source of local pride that, while they did nothing to provoke the violence, the citizens of Sparta had done everything to end it. \n\nThe concert was scheduled to begin at eight while the dedication ceremonies for the new children's hospital were over at five thirty. Gwen, Jordan, Charlie, and Steve made their way to Marsh's for a quick dinner. Steve was still trying to catch up for the meals he had missed. As they walked through the dining area, the kids spoke to many of the patrons, often by their first name, shaking hands and exchanging pleasantries as they made their way to their table. Their approachable demeanor added to their reputations as great young adults that remembered their roots. The locals loved that quality. While they had dined with presidents and kings, they never forgot the folks in their home town and never acted like they were superior, or 'uppity'.\n\nWhile most people left them alone when they sat down to eat, Steve, Jordan, Gwen, and friends were always polite and patient with those, usually tourists, who invaded their space while they dined. It became a sure way to tell who was a tourist, and who lived in Sparta. Locals never bothered the friends while they were eating. \n\nGwen smiled and pointed to a new photo on the wall. It was Steve hugging her with the helicopter and its whirling blades in the background. It was already framed and titled 'The Homecoming'. Steve was surprised at how tanned, dirty, and bloody he looked in the photo.\n\nGwen's phone rang. She glanced at the caller I.D. and told her friends, \"It's Amber Stahl. I owe her for airing my response to Steve's situation. Excuse me while I answer this.\"\n\nGwen stood up and stepped close to a coat room as she spoke. Less than a minute later, she returned. \"Amber's here in Sparta. She didn't want to interrupt our meal but wants to interview us as soon as she can. I guess just about all of the news bureaus want to, but Mom has those calls screened. Amber is the only reporter with our numbers, and I like it that way. Since Steve left his phone on a ship in the Caribbean, she called me. She's going to be here in half an hour. We'll answer her questions while we're surrounded by friends and neighbors.\"\n\nThe foursome had just finished dessert when Amber entered the room. She nodded to several diners and even mentioned a few by name. Steve and Charlie stood and offered her a chair.\n\n\"First, just let me tell you how delighted I am to see you, Steve. I saw the footage of you exiting the helicopter, and Gwen hugging you. It was touching, to say the least. I'm glad that you've made it back.\"\n\nThe cameraman aimed his device at Amber as she checked her notes before facing Steve. \"Steve, I know you aren't supposed to talk about your ordeal, but what can you tell us about your adventures of the past week?\" \n\n\"Honestly? Not very much. It's great to be home. I couldn't miss our traditional Memorial Day party, especially with the dedication of the new children's hospital. I'll sit down with Navy people tomorrow and be de-briefed. Then I'll have a better idea of what I can tell you.\"\n\n\"How did you wind up on that helicopter? How did you and those children get into the country undetected?\" asked Amber as she scanned her notes.\n\nSteve smiled at Amber as he responded. \"That wasn't very tricky. Next question?\"\n\n\"This one's for Gwen. More than a few people who witnessed your reaction to Steve's return tell me that you somehow knew Steve was on that helicopter without benefit of anyone actually telling you. In fact, no one knew he was on the helicopter. Yet when you were informed that a helicopter was bringing in some injured people, you actually ran the two blocks from this restaurant to the hospital after telling everyone within hearing that you were certain that Steve was on board. When and how did you realize that Steve was on that helicopter?\"\n\n\"When Laura, Dr. Masters, told us that she had just been notified by the hospital that a helicopter, and not a trauma chopper, was arriving with injured people, something clicked,\" admitted Gwen with a blush. \"I had been feeling strange all morning and I suddenly knew why. Steve was coming home! I really can't tell you more than that. I simply knew he was coming home. I don't really care how I knew, but I'm glad I did and I was there to meet him.\"\n\nAmber looked from Gwen to Steve and back to Gwen with a mixture of admiration and awe before posing her next question. \"Gwen, what can you tell us about the movement afoot to draft you for a run for the congressional seat in your home district? Are you considering it?\"\n\n\"Excuse me?\" asked an obviously baffled Gwen. \"I haven't any clue what you're talking about. I'm a registered Independent, only because I had to register as something in order to vote. I have neither the time nor the inclination to run for public office. Both the Republicans and the Democrats have selected their candidates already.\" \n\n\"That's true, but with your congresswoman giving up her seat this fall to run for the senate, rumor has it that many voters will support you as a write-in candidate for congress,\" responded Amber. \"Will you actively campaign? Will you serve if elected?\"\n\n\"I honestly have not heard any of this before, so answering those questions seems presumptuous, at the very least. Med school is a full time job, plus we travel to events now and then at the behest of the government, plus we do TV and movies when possible, plus I have to spend some time with a certain handsome Navy SEAL, so running for, or serving in congress seems pretty far-fetched,\" reasoned Gwen. \n\n\"So you're not ruling it out?\" pressed Amber.\n\n\"I haven't ruled out traveling to other planets this year, but that also seems unlikely at this time,\" quipped Gwen. \"I've learned that I really don't have to answer hypothetical questions, and usually it's a good idea to not answer them.\"\n\n\"How do you feel about Gwen possibly being the next congresswoman from this district, Steve? Do you think she's qualified?\" probed Amber.\n\n\"Now that's something I can answer,\" replied Steve with a lazy smile. \"Gwen would be the best representative in Congress, by far! Is she qualified? Let's see. What has she accomplished at the ripe age of 24? She's sold millions of records. She's won Oscars, Grammies, and Emmy's. She's starred in blockbuster movies, graduated valedictorian of her high school class, graduated with honors from Stanford, and has completed two years of medical school. She's met, and is on a first name basis with numerous world leaders. \n\n\"She's a partner and co-founder of a billion dollar company that exists to do charitable work around the world, including, but not limited to building a children's hospital in Kiev. She's brilliant, beautiful, and extremely capable. How do those accomplishments compare to the elected officials we have now?\"\n\n\"That's quite an impressive resume, when you put it that way,\" returned Amber. \"It sounds like you'd definitely support her.\"\n\n\"I don't know how to make this any clearer,\" replied Steve as he looked into Gwen's eyes. \"I love her. I'm devoted to her. I'll do anything I possibly can to help her in anything she attempts. My support for her is unconditional.\"\n\nGwen sobbed as she moved to Steve and gently hugged him as he sat in his chair. Amber was misty eyed as she ended the interview. \"Thank you both for speaking with me. Good luck to you all in your concert tonight and in your future endeavors.\"\n\n\"I'd forgotten what great interview subjects you guys are,\" marveled Amber after the camera was turned off. \"I love working in Washington, but I really miss the excitement that surrounds your group. I have to get that interview back to the studio in a hurry so that it'll play on the six-thirty news tonight. Thanks!\"\n\nBefore Amber could leave, Sam and Roxie appeared at Steve's side, with their parents right behind them. Sam wrapped her arms around a surprised Steve and kissed his cheek. Roxie seemed nervous, but determined as she first looked at Gwen and then kissed Steve soundly on the lips.\n\n\"You saved our lives. You were shot while helping us. Sam and I will never forget you. We're going to miss you!\" cried Roxie as she wrapped her arms around Steve's neck and sobbed loudly.\n\n\"Roxie, there's no need for tears. You and Sam are coming to our concert tonight, right? Would you like to be backstage watching us? We can manage that, can't we, Gwen? Roxie, I need to introduce you to my friends. They're Gwen Anderson, Jordan Quick, and Charlie Burns. Guys, this is Roxie and next to her is Sam. They helped me survive for a week in the jungle with those cartel guys after us. They loaded my magazines yesterday when things got a little tense. They're the bravest girls I've ever met.\"\n\n\"Hello, Roxie!\" beamed Gwen as she went to the girl and hugged her. \"Steve told me how brave you are, but he didn't tell me how beautiful you are. Do I need to worry about you stealing him away from me?\"\n\n\"No! Steve made it clear that you were the girl he loved, but he was real nice to me. He never got upset or yelled at Sam and me. He killed the men that were trying to rape us, using his bare hands and his knife. Then he cut the head off the snake that scared us real bad. Yesterday, he fought off a whole army and killed those horrible Flores drug leaders,\" concluded the tanned girl.\n\nGwen gasped when she heard Roxie speak about her ordeal. She looked from Steve back to the two girls and tears began trickling down her cheeks. \"Sweetheart, you're safe now. Steve made sure of that. You need to forget all that bad stuff and look ahead. Will you and your family watch the concert tonight from backstage? We'll have chairs and soft drinks for you. You'll be close and able to see and hear everything we do.\"\n\n\"We'd like that, if we won't be in the way,\" replied Roxie after looking to her mother for approval. \"Steve sang for us sometimes when we were walking in the dark. He's really a cool guy.\"\n\n\"Yes, yes, he is,\" agreed Gwen as she regained control of her emotions. \"Sometimes I forget just how cool he is, until I meet people like you that he's helped. Then I remember. It's settled. You, Sam, and your parents will be our guests tonight.\"\n\n\"Amber, I'd really appreciate it if you didn't report anything Roxie just mentioned,\" stated Steve firmly. \"I think it's best that her parents and the state department approve any comments the kids make to the press, or in front of the press. You can see why, can't you?\"\n\n\"Absolutely, Steve. I certainly don't want to be responsible for creating any emotional distress for these girls. They've been through a lot and seem to be doing quite well. I'd be happy to interview them with their parents, if I could.\"\n\n\"I'm not so sure about that,\" balked the girls' mother. \"I told my sister-in-law about Steve staying behind to save my girls and the next thing I know, Bill Hardy has it on his news show. My sister-in-law admitted that she told one of Hardy's producers that Steve was in Colombia looking for our girls. He told the world and those Flores put a bounty on his head, as well as my daughters'. I can't begin to describe the pain it caused me. \n\n\"I owe Gwen an apology for telling stories out of school. It caused her to suffer as well. Steve, you saved my girls and I regret yelling at you to rescue them. I know now that you would've done exactly that, regardless of what I said to you,\" stated Mrs. Henderson apologetically. \n\n\"You need to know, Mrs. Henderson, that we never would have made it back if it hadn't been for the reward Gwen, Jordan, and Lady in Red Productions offered for our safe return in response to the bounty offered by the cartel. Your sister-in-law letting the cat out of the bag caused Gwen to come up with the reward offer. It truly saved our lives.\"\n\nAt that moment, Nadiya Misko hurried up to Steve's table. The diners had been watching the news interview as well as the children thanking Steve for saving them. When the beautiful blonde from the Ukraine rushed in, more than a few of the male patrons involuntarily groaned.\n\n\"Steve! I have been missing you all day! I had government business this morning and missed the hero's return. Then I had to attend a video conference during your hospital dedication. I am so sorry I did not welcome you home sooner!\"\n\nNadiya stopped speaking when she reached Steve, who had risen at her approach, and wrapped her arms around him. Then she pulled his head down and kissed him long and hard. Gwen noticed a cloud pass over Roxie's face as she closely watched Nadiya kiss Steve.\n\n\"That's my welcome,\" laughed Nadiya as she finally made the effort to see who else was at the table. \"You're the adorable girls Steve brought home from that awful place. I'm Nadiya Misko.\"\n\nRoxie ignored Nadiya's extended hand as she snapped at Nadiya. \"Gwen is Steve's girlfriend! You can't kiss him like that. He's not your boyfriend!\"\n\nSlowly, understanding washed over Nadiya as she studied the teen girl's face. \"I am sorry if I upset you. Gwen is very comfortable with me giving Steve some kisses. She knows he is her man and no one else's. However, girls like you and me can still love him. Gwen understands that. We don't sleep with him, but we can flirt and enjoy being near him. Did you like being with him, or was he cruel to you?\"\n\n\"Steve? He was wonderful! I did sleep with him, but not in the sex way. He's brave, strong, and super good looking. I just think you shouldn't kiss him like that. It'll make Gwen jealous,\" responded Roxie quickly.\n\n\"Don't you want to kiss him when you see him,\" questioned Nadiya. \"I see in your eyes that you do. It's okay. He likes it and Gwen knows she's got the best man in the world and he loves her. Can we be friends? We're both members of the 'Girls that Love Steve but Can't Have him' club. It's very big, but there's room for you.\"\n\n\"I did kiss him. I guess I shouldn't be upset with you. I did the same thing, but I didn't dare kiss him like you did. I guess that's what made me mad. I'm sorry,\" finished Roxie as her mother placed her hands on her shoulders and squeezed.\n\n\"I'm proud of you, Sweetheart. You have no business telling Steve's friends what they can do, or can't do with him. Notice that Gwen isn't upset. They're friends, very good friends, and Ms. Misko was very happy and relieved to see Steve after all the danger he's been in. I'm proud that you realized your mistake and apologized so quickly,\" concluded her mother.\n\n\"Are you upset with me, Steve? I won't do that again. Am I still invited backstage?\" worried Roxie. \"I'm sorry, Ms. Anderson.\"\n\n\"After all we've been through and how well you kept it all together for me, we'll always be special friends,\" promised Steve. \"You're like a little sister to me. You have a standing invitation to receive special consideration from me anytime you're with us.\" \n\n\"I'll forgive you, if you call me 'Gwen'. Being in love with Steve takes some getting used to, but you'll learn how it works. There is never any jealousy or insults. We just love the guy and he loves us back. Nadiya and Jordan understand it. I love Charlie now and Jordan is very happy that I do. It reinforces what a great guy she fell in love with. Who wants a boyfriend that other girls don't think is hot?\" \n\nThe concert that night had the largest attendance ever for the Memorial Day concert. The parking lot and hillside near the center were packed with fans. When the friends walked onto the stage, the applause was deafening. A spotlight was shone on Steve as the others suddenly backed away. The applause simply increased. Steve was taken totally by surprise. He was suddenly left alone with the huge crowd watching and applauding. He bowed several times until the applause began to fade.",
        "\"I guess it's all on me,\" grinned Steve as he moved to sit at the piano. \"I'd like to dedicate this song to a certain someone. I think you'll all be able to figure out who it's for when you hear it. Forgive me if I'm a bit rusty.\"\n\nHe began playing the piano and at the appropriate time, started singing. 'Where do I begin to tell the story of how grateful love can be' was all Steve managed before his voice was drowned out by the applause. He waited a bit for the crowd to settle, and then began again. \n\nSteve's hair was a bit longer than usual, his face a bit leaner and more tanned, while the marks from the rock fragments were quite apparent. The effect on the females watching was undeniable. Gasps and moans filled the building as ladies of all ages felt a tremendous attraction to Steve. The director quickly realized the situation and went to a split screen. The entire audience was able to watch Steve sing, as well as see Gwen's reaction as she stood behind the curtain watching and listening. Tears streaked her face even as her smile continued to grow.\n\nFor his part, Steve's emotion was evident. His eyes were sparkling, and when he sang 'I know I'll need her till the stars all burn away', girls actually began screaming his name. Steve was surprised at the reaction his singing was creating. He kept singing as he grinned to the audience. The applause was extremely loud and long. Steve bowed several times as he waited for the cheering and yelling to diminish. It gradually quieted down.\n\n\"If she would, I'd like Gwen to join me now while I sing one more song before we get into the real concert,\" stated Steve as he picked up his acoustic guitar and watched Gwen come forward to share the spotlight with him. \"This song is for you. Don't be afraid to help me with the chorus.\"\n\nGwen nodded as Steve began playing his guitar. Then he began singing 'Peaceful Easy Feeling' while looking directly at Gwen. When he sang the lyrics \"I want to sleep with you in the desert tonight, with a billion stars all around,\" tears again trickled down Gwen's cheeks as the audience roared its approval. It was apparent to all watching and listening that the words had special meaning to the two lovers. It was more than just a song.\n\n\"Look at him shamelessly making love to your daughter,\" laughed Paula's mother as she sat with Paula, Ted, Diane, Will and the Pattersons. \"That's one of the most romantic things I've ever seen. They're a perfect match!\"\n\nWhen the applause finally died down, Jordan, Charlie, and the band quickly joined Steve and Gwen and the concert began in earnest. Gwen immediately announced to the huge audience that she was doing her first number for Steve. When she told Steve what song she wanted, he flashed a big smile, picked up his guitar, and prepared to play.\n\nThis time the audience was very quiet as Gwen delivered 'Woman in Love' to perfection. She made no one guess to whom she was singing. When Gwen sang 'we may be oceans away, you'll feel my love, I hear what you say' many in the audience realized the lyrics actually expressed the bond between the two. She had known he was arriving on the helicopter when there was no real reason for her to believe it. By the time Gwen finished, there were very few dry eyes in the building. The applause was long and loud.\n\n\"I know I seem to sing this next song a lot,\" beamed Gwen as the band began playing again. \"But it fits the situation so well, I can't help it. Sparta is blessed with a genuine hero, a modern day Hercules, at least as far as I'm concerned. This next one's for Steve!\" \n\nGwen put everything she felt into 'I Need a Hero'. The past week had given her reason to consider a world without Steve, as well as to consider what he represented. He was a fierce warrior, but a kind and gentle lover. He did all he could for those that could not care for themselves, the weak, the ill, the underprivileged. But when murders and mad men challenged him, he stood his ground. He was truly a hero. As she sang, Gwen saw the huge screens display videos of Steve risking his life to save others.\n\nThey began with the river rescue and then the battle in the gym. Following them was the graduation attack, followed by scenes of Steve and Gwen with heads of state from various government functions. There were even a few highlights of Steve's collegiate football career, and finally by the helicopter landing at the hospital. It showed the bloody, dirty, shirtless, darkly tanned Navy SEAL helping two girls off the chopper before turning to embrace Gwen. That embrace lasted a full minute. Near the end, Steve could be seen shaking with his face buried in Gwen's neck, as she patted his back and ran her fingers through his hair in a familiar and soothing manner. \n\nIt was very apparent that the entire Spartan Nation was filled with pride at the courage displayed by one of their own. The cheering and applause lasted several minutes. When the noise finally softened to a dull roar, the group launched into their planned performance for the evening. The fans were already fired up!\n\nOne of the most obvious ways this performance differed from those of the past was Charlie's involvement. He had been touring with Jordan for a few years and they had put together numerous songs that fans had come to expect from them. Charlie had even sung backup for Jordan on two of her recent hits.\n\nThe friends divided the performances down the middle between Gwen and Jordan, with Charlie and Steve adding vocals on many of them. Jordan was delighted to have Charlie singing with her. It was apparent to the audience that they were watching some very talented performers that also happened to be very much in love.\n\nIt was about midway through the evening when Steve gently took Gwen's arm in his hand and led her off to the side. Charlie moved closer to Jordan as she sat at the piano. Suddenly, Charlie dropped to one knee and held up a small box. Jordan clasped her hand over in mouth in surprise.\n\n\"Jordan Quick, will you give me the great honor of becoming my wife?\" was all he managed as Jordan flew out off her seat and into Charlie's arms. Since they both were wearing live microphones the audience heard everything as Jordan kept saying 'yes' between the kisses she showered all over Charlie's face. Then she held out her hand as Charlie slid the ring onto her finger. With a huge smile, she held her hand up to a camera, and then waved to the crowd. \n\nJordan suddenly hurried over to Gwen. \"Will you be my maid-of-honor, Gwen? You're my best friend, and my sister.\"\n\nGwen nodded through her tears and hugged Jordan tightly. After half a minute, Jordan broke away from Gwen and stepped close to Steve. \n\n\"Will you walk me down the aisle? You're like a father, and a brother to me,\" was all Jordan managed before Steve embraced her, lifted her off her feet, and swung her around. \n\n\"It would be one of the greatest honors of my life!\" replied Steve clearly as the spectators once again broke into loud cheers and whistles. Gwen hugged Charlie and then Steve shook his hand and patted him on the back before they returned to their positions and started playing again. Jordan and Charlie had huge smiles plastered on their faces the rest of the night.\n\nBy the time the concert ended, Steve was exhausted. He limped around the stage, trying to help pick things up until Paula put her foot down. \"We have people making a good wage to do that work! You need to take my daughter home so that both of you get some rest. She hasn't slept well for a week and neither have you! You were wonderful to those children. Don't you think it's about time you show Gwen some personal attention? She's been suffering, too!\"\n\nSteve stopped what he was doing and looked around. Gwen was helping put the microphones away. From her slow movements, it was obvious that she was nearing exhaustion. He kissed Paula's cheek, shook Ted's hand firmly, and made his way over to Gwen, wrapped his arms around her from behind, and whispered in her ear.\n\nGwen giggled and then turned around in Steve's arms and kissed him. \"Okay, but you know we always stop at Marsh's after the show. Let's tell Charlie and Jordan we're leaving now. We'll spend a little time there to help them celebrate, and then I'll take you up on that promise.\"\n\nGwen and Steve were finally relaxing, and enjoying a late snack with Charlotte, Billy, Jordan, Charlie, and Ashley when the door to the restaurant slammed open. Steve quickly stood when he saw Kate headed his way. Her face was bloody, and her clothes were ripped. She used both hands to hold her top together until she got close to Steve, and then she threw herself into his arms.\n\nSteve struggled to control his anger as he held the trembling girl in his arms. Who had harmed Kate? They would soon regret it, whoever it was. He was certain of that! Suddenly a man carrying a hand gun came through the front door! He stopped briefly when he saw Steve, but then headed directly toward him. Steve took Kate's arm in one hand and guided her to stand behind him as he squared to face the armed man."
    ],
    "authorname": "Harddaysknight",
    "tags": [
        "hero",
        "homecoming",
        "dedication",
        "concert",
        "hospital"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/lady-in-red-pt-02-ch-06"
}
{
    "title": "Halloween: A Pussycat's Tail",
    "pages": [
        "The  is on! Read the scary sexy stories (new ones daily!) and submit your tale of terror for fame, fun, and a chance at cash prizes!\"\n\nI smiled wistfully as I read the announcement on my computer screen. While I loved erotic stories almost as much as I loved writing, the unfortunate reality was that I lacked the talent to combine my two interests together. It was easy enough for me to write about things that I had personally experienced, but when the time came to depict the passionate, raunchy encounters that defined erotica, my mind would grind to a halt. A sparse and unexciting sexual history meant that I had nothing to draw from, and with the imagination of a cinder block, I was unable to produce the type of steamy smut that I loved to read so much.\n\nA sexy Halloween-themed story would be doubly impossible. I couldn't even remember the last time I had put on a costume, as long as crossdressing didn't count, and I didn't think it should. A costume meant dressing up as something you weren't, but when I was dressed as \"Jennie,\" I actually felt more like myself than I usually did. Despite that, I had never told a soul about my secret hobby, and short of a few exhilarating-yet-terrifying excursions around the block, I kept my activities confined to the privacy of my own apartment. I wasn't particularly bothered by having to conceal my feminine persona, as it kept things less complicated, but a small part of me always fantasized about what it would be like to show Jennie to someone else.\n\nStill musing to myself, I clicked through the website with familiar motions to browse \"Transgender &amp; Crossdressers - Erotic tales of gender bending fun.\" As was often the case when I read these kinds of stories, I was dressed up as Jennie. Nothing fancy\u2014just a baby pink camisole and matching lounge shorts from Victoria's Secret\u2014it was something any girl might be wearing at home on a lazy Sunday. My shoulder-length hair, usually up in a man-bun, was at that moment pulled back in a loose, feminine ponytail.\n\nEmphasizing my girlishness was the complete lack of body and facial hair that I had diligently maintained ever since I was able to afford to move into a small studio apartment of my own. I hadn't had a girlfriend in years, and had no fear of anyone noticing my unusual silky smoothness as long as I stuck to my usual sweats and hoodies; I was often amused by how drab and functional my male wardrobe was compared to the variety of cute and trendy girls' clothes that I greedily hoarded. Similarly, I had grown accustomed to painting my toenails because, frankly, nobody else was ever going to see them.\n\nCurrently they were a playful pastel pink, a distinctly feminine shade that contrasted sharply with the un-girlish bulge that was now growing in the front of my short-shorts in anticipation of the latest and greatest crossdresser fiction. I moaned softly as I rubbed the bulge through the soft cotton with my middle finger, pretending I was a real girl playing with her clit. Since I inevitably ended up fingering my butt whenever I masturbated, I always thoroughly cleaned myself inside and out before such \"literature sessions.\"\n\nBZZZT. BZZZT. BZZZT.\n\nI sighed with annoyance at the interruption and glanced at the cell phone vibrating on my desk like an angry wasp. In the age of emails, texting, and instant messaging, I only received calls from telemarketers, my parents, and my best friend since elementary school, who despite being the same age as me, refused to abandon this archaic mode of communication.\n\nBZZZT. BZZZT. BZZZT.\n\nIt was Zach, so of course I picked up.\n\n\"Hey man, are you busy?\" he slurred, and I could tell he'd been drinking heavily. Zach was a party animal, but it was still a little too early to be going that hard, even if it was the night of Halloween.\n\n\"Nope, what's up?\"\n\nA pause on the other end. \"Uh, hello?\"\n\nShit. Even though I almost never left my apartment as Jennie, I still regularly practiced my girl voice just for my own amusement. At some point it had become second nature to use it when en femme, and without thinking I had answered the phone in a soft, feminine purr.\n\nI coughed and exaggeratedly cleared my throat. \"Sorry, something in my throat. Everything okay?\"\n\n\"No.\" I could hear his voice shaking. \"Uh...Jess's been cheating on me.\"\n\nI was flabbergasted. Though Jessica was a stunning, blonde bombshell with no shortage of admirers, Zach was also a solid catch in his own right. Standing at 6'5\" with a dimpled smile that he flashed easily and often, he had maintained his lean athleticism from his college basketball days. Even more endearing than his mop of sandy brown hair and a childlike obsession with comic books was a rare, sincere earnestness. I often joked that he was like a Golden Retriever trapped in a human's body. It was rare to find a sweet guy like Zach who also happened to be an attractive, physical specimen, and I would have expected Jessica to try to lock him down for marriage. They were a disgustingly picture-perfect, hashtag-goals couple. Or at least I had thought they were.\n\n\"Ah, fuck. I'm so sorry, dude.\" My heart truly went out to him. It wasn't the first time that he'd been deeply hurt in a relationship. Despite having every right to be a fuckboy, he was instead loyal and guileless to a fault, which more often than not led to him being taken advantage of. \"Do you wanna talk about what happened?\"\n\n\"You know how I was in New York all of last week for work?\"\n\n\"Yeah.\"\n\n\"I just did the laundry and...Jess's panties had a bunch of dried cum in them.\" Despite the circumstances, my pulse noticeably quickened. The words \"panties\" and \"cum\" together in a sentence tended to have that effect on me, a Pavlovian response to all the dirty crossdressing stories that I read.\n\n\"Are you sure it wasn't\u2014\"\n\n\"Yeah. We've been fighting and haven't had sex in a while. Well, I haven't been, at least.\"\n\n\"Dude...\" I didn't really know what to say. \"Have you...talked to her?\"\n\nHe chuckled sadly. \"There was more screaming than talking, but yeah. I told her to grab her stuff and kicked her out.\"\n\n\"You...okay?\"\n\n\"Yeah, I guess. I just needed someone to talk to, you know?\" Zach's voice cracked a little.\n\n\"Of course. You know I always have your back.\" This wasn't just an empty platitude; we both knew that we could talk to each other about anything. Well, almost anything, I thought, tracing a finger down the pink strap of my cami.\n\n\"God, I feel so fucking stupid,\" he sighed. \"And I know this sounds dumb but I was really looking forward to tonight.\"\n\nUnlike me\u2014who had planned to spend Halloween night at home with a box of tissues and some sexy crossdresser fiction\u2014Zach loved Halloween. Every year, he spared no expense in hunting down intricate, tailor-made costumes based on his favorite comic book heroes. Competitive by nature, he usually joined one of the costume contests that took place in the nightclubs around the city. This year, I knew he had been planning to go as the Dark Knight version of Batman.\n\nHe had invited me along, of course, but as usual I had declined. It wasn't that I hated partying\u2014what I hated was how I inevitably ended up back at my apartment all alone, with a pounding head and another few hundred dollars in credit card debt. Especially after I had built out my collection of girly things, it was simply more fun and economical for me to stay in on the weekends to dress up, take pictures, and read smut.\n\n\"Hey, Halloween's not cancelled,\" I said. \"You can still party. In fact, you should. It'll do you good to have some fun.\"\n\n\"We were s-supposed to be in the couple's c-costume contest,\" he said, hiccupping, and in my head, I could clearly see his sad, innocent, puppy dog eyes. That bitch.\n\n\"Ah, shit...you can still do the individual contest, yeah?\"\n\n\"No, it's too late to sign up. I don't care. It's stupid anyway,\" Zach said without conviction. \"Halloween's stupid.\"\n\n\"You know you don't mean that, buddy.\"\n\n\"I guess not,\" he sighed. \"Hey, did you end up making plans tonight? Wanna come over and play Halo or something?\"\n\n\"No plans.\" My best friend needed me, and so my dirty stories had to wait. \"I'll be right there.\"\n\n* * * * *\n\nZach was an inconsolable mess. His puffy red eyes betrayed that he had been crying, and he reeked of whisky, confirming my suspicions that he had been drowning his sorrows. Ordinarily, we were a competent duo in almost every video game we played together, but after our fourth loss in a row it was clear that Zach's mind was on something else, likely the girl who had just broken his heart. He was also uncharacteristically quiet, and unused to the awkward silence between us, I had been generously helping myself to his alcohol.\n\nAs we queued up for what was certain to be another lopsided beatdown, I downed a big gulp of whisky Coke from a red plastic cup. \"Might as well loosen up,\" I joked. \"Before I get completely fucked.\"\n\n\"Fuck, I'm sorry. I'm playing like ass.\"\n\n\"Yeah, you are, but don't worry about it\u2014\"\n\n\"Thanks.\"\n\n\"\u2014because what else is new, loser?\"\n\nWith effort, he gave a small smile at my attempt to bring our usual banter. \"You know I'm the one that carries your little bitch ass, right?\"\n\n\"Yes, daddy,\" I said, rolling my eyes sarcastically as I struggled to extricate myself from the couch. My low tolerance was showing, and it seemed like I was perhaps a little drunker than I had realized. \"Pause the queue, I gotta pee.\"\n\nI shuffled my way to the bathroom, where the sterile white tiles were uncomfortably cold beneath my bare feet. The lights flickered on at my touch, then multiplied and danced around my pounding head. Ugh, should've gone easier on the booze.\n\nI didn't trust myself to not pee all over Zach's floor in my dizzied state, so I put the toilet seat down before sinking into it with a groan, curling my painted toes in pleasure as I peed like a girl. Glancing down, a cold realization dawned upon me.\n\nI wasn't wearing socks.\n\nMy cute, pastel pink toenails had been on full display for the past three hours.\n\nOh fuck. My mind spun frantically. Oh fuck, oh fuck, oh fuck. I was always so careful about this kind of thing, but in the rush of Zach's emotional emergency I had finally slipped up.\n\nWhy didn't Zach say anything? There was no way he could've noticed and not said anything, right? We were talking about a guy who answered \"yes\" when his girlfriend asked if a particular dress made her look fat. He couldn't tell a lie to save his life, plus he had seemed pretty wasted. He must not have noticed, I decided with a sigh of relief.\n\nBut that relief was short-lived, as I realized that it would still take a few more hours before Zach, with his absurdly high tolerance, would get drunk enough to pass out. I couldn't just bail on him in his current state and go home. But neither could I risk him noticing that his best friend was wearing pink nail polish on his toes.\n\nPanicking again, I rifled through the bathroom drawers and cabinets in search of any nail polish remover that Jessica might have left behind, to no avail. I did find a mesh bag of hers stuffed deep in the recesses of the bottom drawer, but when I unzipped it I was disappointed to find only makeup.\n\nI slapped my forehead with my palm when it suddenly occurred to me that I could simply borrow a pair of Zach's socks. I silently apologized for the invasion of privacy as I opened the door that led to the adjoining walk-in closet. Had someone done the same to me, I would have had a difficult time explaining the number of dresses, skirts, and high heels inside. But Zach had, as expected, a very ordinary male wardrobe that smelled pleasantly of dryer sheets, albeit with several conspicuously empty spaces where I assumed Jessica's stuff used to be.\n\nThen I saw it: the couple's costume that Zach had gotten for Jessica, which she had no doubt intentionally left hanging in one of the closet's gaping voids like a knife in his heart.\n\nMesmerized, I walked up to it and ran my fingers lightly over the supple leather and intricate stitching. It was the Dark Knight version of Selina Kyle's Catwoman's outfit, seared into every adolescent boy's memory by the voluptuous Anne Hathaway. Matte-black with a highly impractical four-inch stiletto heel built into the foot, a single zipper from crotch to neck allowed the lucky girl to put on\u2014or take off\u2014the catsuit. A springy tail and eye-mask were looped over the neck of the hanger.\n\nNever in my life had I seen a piece of clothing that was so cloyingly and overwhelmingly feminine, and this was as someone obsessed with girls' clothing! I wasn't particularly into leather, but could now see its appeal; there was something erotic and taboo about wearing another creature's skin over your own.\n\nAll thoughts of my nail polish problem fled my head as, in a trance, I slipped the costume off the hanger and held it up against my body, glancing at the floor-length mirror in the corner. Jessica was pretty tall for a girl, and so the tailored catsuit was just the right length for me. In my hands, I noticed that the costume was much heavier than I had expected, even taking into account the weight of genuine leather. Apparently, thick gel padding had been cleverly sewn into the hips, ass, and bust, no doubt intended to enhance the endowments of a genetic girl like Jessica to outrageous, comic book proportions.\n\nBefore I knew it, my clothes were on the floor, and I was drunkenly stuffing one foot and then the other down the legs of the catsuit. It was a tight fit but I managed to squeeze in, and I eventually felt the familiar constriction of my foot inside a heeled leather boot. Like most crossdressers, I was no stranger to high heels, and after years of practice in my apartment I was able to walk in them as naturally as in my sneakers. Inebriated as I was, I was still able to expertly balance in the sky-high stilettos of the costume.\n\nI shivered in delight as I then slid my arms into the slick, rippling sleeves, feeling the soft leather caress my body like a lover. My boy parts were, out of habit, tightly tucked between my legs, but I could feel them straining against their leathery confines. Taking care not to accidentally pinch my skin, I nervously zipped up the costume before looking at the mirror once again.\n\nI covered my mouth and gasped.\n\nI looked fucking hot. \n\nIt wasn't just the costume's exquisite quality; it also fit like it had been painted onto me with a wet brush, and the gel padding that jiggled realistically with my every move also transformed my figure into a definitively feminine hourglass. As I swiveled in front of the mirror to check out what the padding had done for my butt, I noticed a strange hole that had been deliberately cut into the costume directly below where my tailbone was. Dismissing the oddity, I excitedly ran my hands over my new curves as a warm tingle curled up my spine. I drunkenly wondered what I would look like with makeup and the rest of the costume on.\n\nGrabbing the mask and tail, I rushed back to the bathroom and spilled the contents of Jessica's makeup bag onto the counter. Velvety black eye shadow and mascara from Bobbi Brown, Kat Von D stiletto eyeliner, and ruby red YSL lipstick\u2014a girl like Jessica used only the good stuff. Coincidentally, it was also exactly what I needed for the dark, sultry \"night out\" look I had in mind.\n\nI applied the makeup to my face with practiced motions, and was amazed at how flawlessly the products went on despite my nervous, trembling hands. I made a mental note to return at some point in time to \"borrow\" Jessica's kit, as I was certain neither she nor Zach would miss it.\n\nTaking care not to smudge my makeup, I carefully put on the eye-mask that\u2014in true comic book fashion\u2014did absolutely nothing to conceal my identity. Instead, the strip of black leather with its two pointy \"ears\" only emphasized my porcelain features and fuck-me makeup. Now for the pi\u00e8ce de r\u00e9sistance. Examining the tail, I couldn't find a waist strap, buckle, or any other means to attach it to the body of the costume. Then I saw it.\n\nOh. So that's what that hole was for. \n\nAt the end of the sinuous tail\u2014made out of the same leather as the rest of the costume but internally reinforced with springs to give it a life-like bounce\u2014was a stainless steel butt plug. And not a small one, either. I immediately deduced how it was supposed to work. The plug was meant to go through the hole in the back of the costume and...into the wearer. To a casual observer it would look like the tail was merely stitched onto the exterior of the costume, but the person wearing it would know better, especially if anybody touched or pulled on it. My pulse quickened at the thought of Jessica strutting around with the heavy plug in her tight little butt, and quickened further when I imagined Zach tugging and playing with her tail in public with no one the wiser. No wonder Zach had been \"looking forward to Halloween!\"\n\nIn for a penny... I raised the plug to my lips and licked the cold steel like a lollipop, lathering it with wet saliva. Watching the dirty scene in the mirror, I somehow felt like my own voyeur.\n\nThreading the slimy butt plug through the back of my costume, I took a deep breath and pressed the cold steel against my smooth, hairless sphincter. It slid inside me with a pop, and, shivering, I felt the familiar, erotic feeling of \"fullness\" in my rectum.\n\nI gave a little victory wiggle, and gasped as the spring-loaded tail rippled with motion, sending a surge of intense pleasure straight into my tight, sensitive hole. I knew that as long as I had it in me, my lips and cheeks would stay attractively flushed and my pupils fully dilated in an aroused \"sex face.\" Pursing my lips a final time and wiping off a stray fleck of mascara with a pinky, the full impetus of my dramatic transformation finally hit me.\n\nNo trace of masculinity remained in the stunning creature in the mirror. Impossibly thick lashes framed smoldering, smoky, come-hither eyes, and her full, crimson, attention-seeking lips were half-parted in a dangerously seductive pout. Her long, tousled hair topped off a leather-encased body with supermodel proportions. She oozed with mystery and powerful sexuality.\n\nI lost track of time as I primped and preened in front of the mirror, drinking in the sight of my own exquisite femininity. Whenever I smiled, the gorgeous Catwoman smiled back and I would feel my poor, confined dick attempt\u2014and fail\u2014to get hard. Trapped in this narcissistic feedback loop, I wanted nothing more than to fuck myself silly. I had become my own perfect dream girl.\n\nIt was then that I noticed that the doorknob in the mirror seemed to be turning. I had never had a reason to lock the door at Zach's, and I was a creature of habit. Unfortunately, my carelessness now meant that I was completely and utterly fucked.\n\nBefore I could react, Zach drunkenly threw open the door.\n\n\"Dude, you've been in there for like an hour. Are you throwing up or somethi\u2014\" Zach froze. \"Holy. Shit.\"\n\nThe expression of utter shock on my best friend's face would have been comical under ordinary circumstances, but I cringed and braced for the onslaught that I knew was coming. Disgusting. Pervert. FREAK.\n\nThe combination of arousal, shock, terror, shame, and confusion was too much for my poor brain. I sniffled and felt the tears well up in the corners of my eyes, threatening to undo the hard work I had put into my makeup.\n\n\"I'm...\" Sick to my stomach, I put my arms up and gestured helplessly, choking back tears. \"I'm sorry. Fuck, I don't know what I was thinking. I know this is really fucking weird. I'm sorry. I don't know what came over me. I'll take this off right now.\"",
        "Zach cut off my babbling apology with a slow shake of his head.\n\n\"Uh, no homo, but you actually look...pretty amazing,\" he said awkwardly. \"I don't know how the hell you did it, but yeah, I don't think even Jess would've looked this good.\" He grimaced when he said her name.\n\n\"Thanks, I guess,\" I said softly, feeling the blood rush to my cheeks. Wait, why was I blushing? I struggled to crack a joke to ease the awkwardness that had suddenly filled the room, so thick you could cut it with a knife. \"Too bad we're not going to that costume contest, right?\"\n\nI regretted the words the moment they left my mouth; the last thing Zach needed was to be reminded of the contest that he could no longer attend.\n\nBut Zach gave me a strange, piercing look, like he was examining a bug under a microscope. Taking a step back, he eyed me up and down with a critical eye while pensively rubbing his chin. Uh-oh.\n\n\"You know I obviously wasn't being serious, right?\" I said, unconsciously reverting to my breathy girl voice in my nervousness. If Zach noticed, he didn't say anything.\n\n\"But...you know how much I wanted to compete in the contest...\"\n\n\"Yeah.\"\n\n\"...and you're the one that said I needed to go out and have some fun.\" The big goof was busting out the sad puppy eyes again.\n\n\"You can cut the Puss-in-Boots act, it's not happening. I can't go outside dressed like this! Have you actually gone insane?\"\n\n\"Looks like you're the puss in boots, though,\" he snickered. I was suddenly aware of how very high my heels were and how they forced me to tilt my hips and stick my butt out to keep my balance. Zach's gaze kept flickering distractedly from my face to my chest to my hips, and I was getting somewhat flustered.\n\n\"Har, har. You've had your laugh. Now get out and let me get changed.\" I tried to push him out of the bathroom but it was like trying to move a boulder.\n\n\"There's a $500 cash prize for the winners.\"\n\nI paused. I was on a pretty tight budget, and even half of the prize money could buy me a lot of cute new clothes, makeup, and shoes. Or maybe I'd splurge it all in one place for once and pick up a cute set of lingerie from Agent Provocateur. Shaking my head, I tried to banish the thought. Still...\n\n\"What if we ran into someone we knew? How do I explain these?\" I demanded, pushing up my new \"breasts\" with my hands.\n\nHe looked at me like I was crazy. \"Dude, even I barely recognized you. How the hell is anyone else supposed to? Besides, it's Halloween. You're allowed to wear whatever you want.\"\n\nZach had a point. Glancing at my reflection in the bathroom mirror, I could hardly believe I was looking at myself. Even to my extremely critical eye, I was the most passable I'd ever been, and even if someone did clock me, so what? I could just play it off as a Halloween gag.\n\nI knew I stood at a crossroad. On one hand, I could firmly tell Zach \"no\" and that would be the end of it. If I asked him to forget that this whole thing ever happened, I'd never hear about it from him again. On the other hand, this was a once-in-a-lifetime opportunity to live out my deepest, darkest fantasy: to get a taste of what it was like being a sexy, desirable girl in public. And I knew with Zach there, I wouldn't have to worry about my safety if anything went wrong; he'd been fighting off my bullies ever since junior high.\n\nEither Zach's praise, the whisky, or some combination of the two must have really gotten to my head, because in that moment, I didn't feel like a shy closet crossdresser at all. I was confident that I could not only pull off the costume, but have a ton of fun while doing it. Most importantly, I would be helping out my best friend when he needed me the most.\n\nLooking straight into Zach's pleading, hazel eyes, I gave him my answer.\n\n* * * * *\n\n\"Okay, what the fuck was I thinking? We have to go home. Hello, driver? Turn back, please!\" I shrieked hysterically.\n\n\"Dude, chill!\" Zach held up his hands in calming gesture, before turning to the Uber driver in the front seat. \"Sorry, ignore her. She's had a bit too much to drink.\"\n\n\"I can't do this. I want to go home,\" I moaned, far too distressed to notice his choice of pronouns. We were in the backseat of a Prius and headed to a trendy downtown nightclub where plenty of beautiful, costumed partiers were sure to be congregating. The heat was cranked up way too high and my pale features took on a sickly sheen as a result.\n\n\"She no throw up, yeah?\" asked the driver in a thick accent. I saw him glance up in the rearview mirror, and his eyes lingered on me uncomfortably. \"Throw up $50 extra.\"\n\nI did, in fact, feel like throwing up, but not because of the alcohol I had consumed. It was actually quite the opposite. The surge of bravado I felt earlier had evaporated as I sobered up, and I grew increasingly certain that I faced imminent ridicule and mockery as everyone clocked me as an ugly guy in drag.\n\nI was dimly aware of Zach reassuring the driver that I wasn't going to ruin the upholstery, but it was hard to focus on anything other than the knot of raw terror in my stomach. Unfortunately, before I could gather the strength for another outburst, we arrived at our destination, and the driver yelled at us to get out of his car.\n\nZach gave me an exasperated look before opening the door and sliding out. He then gallantly extended a hand to help me up, and I was grateful he did, because apparently walking in heels on rugged asphalt was nothing like walking on the smooth floorboards of my apartment. I immediately stumbled, and he reflexively caught me in his arms. Pressed against his broad, muscular chest, I had never felt so small and fragile.\n\nA few people waiting in line cheered at our dramatic entrance. \"Nice costumes!\" someone yelled.\n\nZach cleared his throat awkwardly and released me as we both averted our eyes in embarrassment. I was still a little shocked at how quickly Zach had taken everything in stride. Once I had agreed to go, he had excitedly gotten ready in a flash, and we were well on our way before I had a chance to second-guess myself. He didn't ask me where I had learned to apply makeup, why I could walk comfortably in heels, or how I was \"wearing\" the tail. Either he was simply too excited about the contest to notice these things, or he was waiting for me to give an explanation on my own terms. Whatever the reason, I was grateful because that conversation was not something I was ready for.\n\nI shivered, the sharp chill of autumn piercing through the skintight leather of my catsuit, and saw the fog from my breath mix with Zach's to form a hazy cloud. Looking around, I saw that most people had returned to doing their own thing, and nobody seemed to notice or care if some random Catwoman was actually a boy or a girl. I felt myself calming down, if only a little.\n\n\"Do you wanna go in?\" Zach asked hesitantly.\n\n\"Not really, but it's freezing out here,\" I said truthfully. \"Girl costumes aren't known for being very warm, you know.\"\n\nIndeed, the girls who were waiting in line in various sexy, revealing costumes were all huddled together miserably with their friends, like penguins warding off a blizzard.\n\n\"Hey, sometimes you gotta make a few sacrifices to look good,\" he said with a grin.\n\n\"Oh, yeah? Then why don't we swap?\" Just imagining Zach's massive, muscled frame trying to squeeze into my skintight catsuit was enough to cause me to break out in giggles. The proposition was only slightly more absurd than me wearing his hulking Dark Knight armor. Like mine, Zach's own costume was tailor-made and hyper-realistic, and I had no doubt that I would struggle to even walk underneath the weight of the thick Kevlar and carbon fiber.\n\nHe joined in my laughter, flashing the dimples that got him into so much trouble. \"Hey, thanks again for doing this. I feel a lot better.\"\n\n\"M-hmm, but you owe me big time.\"\n\n\"I know, I know. Let's get a drink, I know I could really use one,\" he said, putting his arm around my shoulders like he had done a million times before. But this felt different, foreign yet somehow more intimate. I let him steer me towards the entrance, and found myself unconsciously leaning into his warm body.\n\n\"Don't we have to wait in line?\" I asked, turning my head to look at the queue of shivering would-be partiers.\n\n\"Nah.\" He hesitated. \"We have reservations.\"\n\nI looked at him curiously, but sure enough, as we approached the entrance, the heavyset bouncer unclipped the red cordon to let us through. I was relieved when my heels left the asphalt for plush red carpet; I had plenty of things to worry about and didn't need falling on my face to be one of them.\n\n\"Zach, my man!\" the bouncer exclaimed, exchanging fist bumps with my best friend, and I was impressed that he was able to recognize Zach through his full Batman getup. He then turned his attention to me, and as he looked me up and down, the glint in his eye suggested that it was with something more than detached professionalism. I squirmed a little under his intense scrutiny. \"And this is...?\"\n\nZach hesitated. \"Uh...this is Je\u2014\"\n\n\"Jennie,\" I squeaked nervously. Zach gave me an inscrutable look.\n\n\"Welcome, ma'am,\" the bouncer said. \"You're not hiding any pointy objects in that costume are you?\"\n\nDespite my nervousness, I couldn't help myself. \"No, sir. No pointy objects in this costume.\" I surreptitiously winked at Zach. His eyes widened and he coughed into his hand loudly.\n\nThe bouncer could tell that there was some in-joke he wasn't privy to, but my skin-tight outfit left absolutely nothing to the imagination, and it was obviously impossible for me to be sneaking any sort of contraband, pointy or otherwise. I smiled at him innocently.\n\n\"Alright, I'll have to take your word for it.\" He turned to Zach and gestured at me. \"You lucky dog, you'll have to tell me your secret one day.\"\n\nI couldn't tell if Zach or I turned redder when we realized the bouncer thought that we were dating. I had been too caught up in the comfortable, familiar dynamic of our friendship, and had completely forgotten that our costumes were, after all, meant for a couple. Stammering, Zach explained that we were \"just friends.\"\n\n\"With or without benefits?\" the bouncer joked crassly, waving us in. \"Anyway, have fun, you two.\"\n\nZach bulled past me, obviously flustered, and I teetered after him in my heels, trying to keep up. I was grateful that the bouncer hadn't asked for our IDs.\n\nWe passed small groups of costumed revelers as punchy electronic dance music blasted over the speakers. As a pair, we turned more than a few heads of both genders, but it was the wolfish leers of the men that I was the most aware of. Often, they would exchange words with their friends before nodding in my direction and smirking. One guy dressed as a pirate even comically flipped up his eye patch to get a better look at me; I almost expected him to say \"awooga\" as steam shot out of his ears.\n\nThe hairs on my neck were constantly raised as I felt the ravenous, hungry eyes of strangers devour my appearance. The unceasing, pervasive attention was simultaneously terrifying and exhilarating, a dichotomy distantly removed from anything I had ever experienced as a boy. I felt objectified but desirable, a diva but also a piece of meat. It was quite confusing, but if I was being honest with myself, I kind of liked it.\n\nThe closer we got to the bar, the denser the crowd became, and every time someone jostled my tail I would yelp as the vibrations traveled down its length and into my sensitive anus. I briefly considered going to the bathroom to take it out, but realized that without it, there would be a very obvious opening in my costume directly over my asshole: too obscene even by Halloween standards. I was eventually forced to gingerly hold my tail in front of me like some kind of security blanket. On the plus side, it was so distracting that I couldn't focus on much else.\n\nAbruptly, Zach stopped dead in his tracks, causing me to walk face-first into his back.\n\n\"Oh, shit.\"\n\n\"What is it now?\" I asked, rubbing my nose.\n\n\"Uh, can I ask you for another favor?\" he asked hesitantly.\n\n\"Depends, what is it?\"\n\n\"Promise you won't get mad?\"\n\nI was amused by his unusual reticence, and took the opportunity to tease him.\n\n\"Oh, I think I know what you're after,\" I said with a wink. \"But you'll have to wine and dine this pussycat first.\"\n\n\"Dude,\" he groaned, covering his eyes. \"Please stop. Anyway, what the bouncer said reminded me that it's a couple's contest, not a 'best friends contest.' So yeah...if anyone asks, just say you're my girlfriend, okay?\"\n\nMy heart skipped a beat, and I wasn't entirely sure why. \"Easy enough, I know you better than any of your actual girlfriends, anyway.\"\n\n\"That's true,\" he said with a rueful chuckle. \"Funny how that works, huh? Anyway, first round's on me, okay?\"\n\n\"Sure, but be quick about it,\" I said magnanimously. The club must have been short-staffed, because a wall of impatient revelers packed shoulder-to-shoulder like sardines lay between us and the bar. The thought of trying to squeeze through it with my tail made me shudder. \"I'm not fighting my way through that mess, by the way.\"\n\nMy best friend sighed, and, repeating \"sorry\" like a protective mantra, began muscling his way through the crowd. When he finally reached the bar, he waved down the harried-looking bartender, who nodded at him in recognition before Zach ordered what looked like a tray of tequila shots. Yuck.\n\nAs the bartender poured, I took stock of my surroundings. In the midst of posh, Prohibition-themed d\u00e9cor, all sorts of beautiful people were chatting, drinking, flirting, dancing, and otherwise enjoying themselves in a variety of costumes ranging from discount party store stuff to intricate, professionally made outfits like the one I was wearing. Now this was a Halloween party!\n\nIn addition to the ubiquitous nurses, maids, and schoolgirls, a few particularly stunning girls caught my eye: an ethereal Christine Daa\u00e9 with her Phantom lurking behind her; an elegant Belle accompanied by a lumbering Beast; and my personal favorite, a haughty Daenerys Targaryen on the arm of a Khal Drogo whose chiseled physique might have challenged even Zach's.\n\nEven if they weren't obviously partnered, these were the kinds of girls that I would never be able to talk to; they were simply too far outside my league. But now, surrounded by several groups of guys either outright ogling me or trying to get my attention, I realized that I was in their league, albeit in a completely different way. I smiled absentmindedly at the irony.\n\nVaguely in the direction that I had been looking, the spitting image of Joe Exotic\u2014complete with tacky sequined shirt, moustache, and platinum blonde mullet\u2014perked up, taking my errant smile as an invitation to approach me. I groaned internally.\n\n\"Here, kitty, kitty,\" he quipped as he sidled up. I had to admit it was a clever pick-up line, but despite what I knew I looked like, I wasn't attracted to guys.\n\n\"Oh, hi,\" I said nervously.\n\n\"Are you here by yourself?\" Now that I was on the receiving end, I realized just how creepy most pick-up attempts were.\n\n\"No, I'm waiting for my friend.\" Stick to the plan. \"Er...my boyfriend.\" Jesus, that felt weird to say.\n\n\"That's too bad,\" said Joe dubiously. But he was persistent. \"How about I just add you on Instagram?\"\n\n\"I don't have one,\" I said truthfully.\n\n\"I'm supposed to believe that a pretty girl like you doesn't have an Instagram?\" he scoffed, making an ugly expression. \"You're kind of stuck up, you know that?\"\n\nMy palms grew sweaty as I started to panic; I didn't know how to deal with this kind of aggression, and dressed as I was I felt particularly uncertain and vulnerable. Suddenly, a familiar, muscled arm slid around my waist possessively. I sighed with relief as Zach, like so many times before, came to my rescue.\n\n\"Who's your friend, babe?\" he asked casually. \"Does he want to do a shot with us?\"\n\nThe Tiger King took one glance at Zach's intimidating height and frame and\u2014muttering something about meeting his friends\u2014disappeared into the crowd. Zach and I looked at each other and burst out laughing.\n\n\"You know, he doesn't know it, but I did him a favor,\" Zach said as he handed me a full shot glass and a wedge of lime.\n\n\"Why? Because he'd be pissed if he found out I was...you know...?\" I gestured vaguely.\n\n\"Because if he kept talking to my girlfriend I'd have to beat his ass,\" he said with a laugh.\n\nI rolled my eyes. \"Yeah, okay mister. Do these dumb jokes actually work? Asking for a friend.\"\n\n\"Who said I was joking?\"\n\nI made a face and downed my shot before sucking on the lime. Zach followed suit, leaving ten more in the tray. I sighed, already feeling my future hangover.\n\nAs we slowly worked our way through the liquor, we people-watched like we always did, pointing out the cute girls and making up bizarre backstories for any characters that stood out. Despite my previous reservations, the familiar rhythm of drinking and talking with Zach relaxed me, and I soon found myself more than a little drunk and swaying with the music.\n\n\"Hey, you wanna dance?\" Zach asked abruptly. I realized that I did, even if it meant leaving the relative safety of the bar for the packed, brightly-lit dance floor. The people there seemed to be having a good time, and I desperately sought a release for my nervous, pent-up energy. I nodded hesitantly, and Zach immediately grabbed my hand, clearing the way as he half-dragged me through the crowd. All I could think of was how large and warm his hand was compared to mine. Reflexively, I squeezed, and he gave me a reassuring squeeze back without turning around.\n\nIt wasn't long before we were in the center of the dance floor and completely surrounded by sweaty, frolicking bodies. Zach let go of my hand and turned around to face me, awkwardly maintaining a polite distance between our bodies even as we were shoved and jostled around.\n\nBuzzed, high on attention, and the butt-plug tail driving me crazy with horniness, I swayed my hips in time with the music, occasionally running a hand over my curves or through my sweaty hair. I didn't know if I looked as sexy and feminine as I was imagining or utterly ridiculous, and the crooked grin plastered on Zach's face told me nothing either way. As for him, I didn't know if it was a honed skill from all the partying or if he was just naturally coordinated, but I envied the way he effortlessly moved his body in a way both powerful and graceful. He was in his element.\n\nWe danced to the pulsing beat, studiously avoiding touching each other, or worse, accidentally meeting each other's eyes. I could finally see the appeal of partying on Halloween; with a costume on, you could become someone else, someone not as shy and self-conscious, and who could really let loose and have fun. Around us, the crowd cavorted and surged with a life of its own, filled with a primal energy.\n\nEventually, the shifting tides of the dance floor deposited a crew of absolutely plastered Teletubbies directly next to us. The purple one\u2014with a suitably idiotic expression on his face\u2014 lost his balance and crashed into me. Teetering on my heels, I fell into Zach's muscled chest for the second time that night.\n\nWithout thinking, I turned my face upwards and closed my eyes, lips parted, and I thought I felt Zach lean in before catching himself. I abruptly realized what I was doing and my eyes shot open in alarm. Holy shit, did I want him to kiss me?\n\nI saw my confusion mirrored in Zach's face.\n\nDespite crossdressing regularly for years, I had never once thought of myself as anything but straight. Playing the part of the girl had only been a fetish, a fantasy. Even when I pummeled my ass with a dildo, in my mind it was merely attached to a vague, formless presence that wasn't specifically gendered, and certainly wasn't male. And though I could appreciate the aesthetics of an attractive man, perhaps more so than the average guy, I had never had any sexual or romantic feelings for them.",
        "\"Jennie...\" he began, and my heart fluttered as I heard my girl name come from his lips for the first time.\n\nAbruptly, the music stopped, and the crowd, muttering in anger, crumpled like a puppet with its strings cut.\n\n\"Ladies and gentlemen, please make some room for your beautiful contestants!\" the DJ yelled through the sound system, rolling his R's dramatically.\n\nHands against Zach's chest, I desperately searched his face for a hint to what he had intended to say as the crowd thinned out around us. Soon, only a dozen couples were left in the middle of the dance floor, including us and the three I had noticed earlier.\n\n\"First, a tale as old as time, a song as old as rhyme, please welcome the Beauty and the Beast!\"\n\nBelle gracefully spun and curtsied, and her companion gave a respectable roar. The crowd applauded wildly.\n\n\"Next, he handled her at her worst, so now he deserves her at her best: JFK and the lovely Marilyn Monroe!\"\n\nA buxom blonde I hadn't seen before made a few pinup poses as the suited gentleman with her pretended to lift up her dress.\n\nAs I continued to stare into Zach's bottomless, brown eyes, the introductions of the remaining contestants faded into dull background noise. I wanted Zach to finish his sentence, but I didn't know if I was more terrified of his rejection or what the implications of the alternative were. Pressed against him, I could feel his heart pounding like a jackhammer, its cadence matching mine, but his expression remained inscrutable. Our eyes remained locked for what felt like an eternity.\n\n\"...and last, but not least: they're not furries\u2014they're crime fighters! Please make some noise for Batman and Catwoman!\"\n\nI was brought back to reality by the audience's loud cheers. Reluctantly breaking my gaze to look around, my stomach turned a little when I saw that we now had the undivided attention of a few hundred people. Scattered throughout the crowd were the jealous gazes of girls as well as the raw, lustful stares of men. The audience waited expectantly for us to give a brief performance like the other contestants, but Zach and I hadn't discussed this beforehand at all, and I was at a complete loss as to what to do. I dismissed the idea of just standing there awkwardly\u2014for some reason I felt like I needed to please Zach, and I knew he wanted to win.\n\nIt came to me in a flash of inspiration: what would Catwoman do?\n\nAs if possessed, my body moved with a will of its own as I confidently sashayed away from Zach with liquid, feline grace, deliberately crossing my legs with every step in a supermodel's catwalk. I could feel the eyes of the crowd drink in the sight of my curvy, leather-encased body, but it was Zach's burning gaze on my perky bubble butt that I was most acutely aware of. My heart raced as I basked in their intoxicating attention and naked desire. Reaching the edge of the crowd, I slowly and sensually licked the back of my hand like a cat, before flipping my hair and making a few flirtatious pawing motions at the air.\n\nThe crowd went wild with wolf-whistles, and I winked and blew a kiss before turning on my heels to strut back to where I started. Zach had stood in place the entire time, arms crossed, looming, and with an inscrutable expression on his face: a fairly accurate depiction of what Batman did most of the time, so I couldn't complain. I delicately placed both hands on his chiseled chest, and for the first time that night it was on purpose.\n\n\"KISS! KISS! KISS!\" the crowd chanted. I apprehensively looked up at Zach, right as he leaned in to press his warm lips to my ruby ones.\n\nI closed my eyes as our tongues entwined in desperate passion.\n\nIt now seemed ridiculous that I had only ever thought of Zach as \"just a friend,\" and as his strong hands roamed down my waist to grab my butt, I knew he was also having more-than-platonic thoughts. I threw my arms around his neck and hung on for dear life as the cathartic release of emotions turned my knees to jelly.\n\nI barely noticed the crowd erupting into whistles and applause. In that moment, it felt like we were the only two people in the entire world. Our first kiss, in front of a cheering audience like some sort of fairytale. Except in this fairytale, the princess was grateful that her costume prevented her from sporting an erection because she was the most aroused she had ever been in her entire life.\n\nI had enjoyed the validation from strangers, but it was the realization that my kind, goofy, and\u2014now that I could finally be honest with myself\u2014incredibly fucking hot best friend returned my suppressed feelings for him that made me want to scream and laugh at the same time.\n\nAt some point the DJ announced that we had won, and Zach broke our kiss to flash those damn dimples, before he\u2014to my utter surprise\u2014literally swept me off my feet to carry me off the dance floor in his arms. The crowd aww-ed as music once again started blasting from the speakers, resuscitating the party.\n\nBefore I knew it, my best friend had taken me into the VIP section at the back of the club. I could hear peals of drunken laughter coming from behind the closed doors of several private party rooms. Only one was empty, a sign on the door reading \"RESERVED -- ZACHARY &amp; JESSICA.\" Ah, \"our\" reservations. He must not have wanted to come here earlier for that reason, but now Zach made a beeline for the room, slamming the door behind us.\n\nInside, we were greeted by a bucket of ice and champagne, the condensation underneath it forming a small puddle on the only table in the small room. Encircling the table was burgundy booth seating, which matched the red rose petals that were scattered on the floor. The walls were furnished with mirrors to give the illusion of more space.\n\nZach gently lowered me onto the soft, plushy seating, and I bit my lip, suddenly filled with doubt. Was he about to play it off like everything was just for the contest, or perhaps blame it on the alcohol?\n\nHe did neither. Instead, he caressed my cheek and finished the sentence he started a lifetime ago, \"Jennie...you're beautiful.\"\n\nI smiled at my best friend and nuzzled this hand, overwhelmed by gratitude, affection, and desire.\n\n\"Do these dumb jokes actually work?\" I whispered softly. \"Asking for a friend.\"\n\nHe responded by tearing off his mask and cupping my chin to deliver another sensual, electric kiss. Breathing in the earthy scent of Zach's sweat and cologne, I knew on some level that we should probably stop and have a serious discussion about what we were doing and how it would affect our relationship. But I was drowning in sexual energy, and with Zach's lips crushed against mine, such rational thoughts fled my head as feminine instinct took over.\n\nAs his hands glided over my catsuit, I tore the costume off his upper body like an animal, revealing his ripped, Herculean physique underneath. Fuck, he's hot, I thought, running my hands over his massive pectorals and washboard abs, nails leaving faint red marks on his tanned skin.\n\nI grabbed his messy brown hair and directed his head towards my neck. He obliged, alternately licking and biting the sensitive flesh, causing me to break out in goosebumps. My body was aflame, every neuron firing with excitement and forbidden desire.\n\nZach sucked on my neck a little too aggressively, eliciting a small girlish gasp from me. \"Hey, no hickeys,\" I moaned.\n\n\"Sorry,\" he mumbled, unzipping the neck of my costume slightly to he could nibble my collarbone instead. Everything he did to my body, every kiss and touch made me feel like such a girl, and I was losing what little self-control I had left. As amazing as making out with Zach felt, I wanted\u2014no, needed\u2014more.\n\nI shoved him off of me, and, purring, fell to my knees. He looked a little surprised as I fumbled at the waistband of his pants. Maybe he didn't expect me to be the one to escalate, but in that moment I wanted more than anything to taste my best friend's cock in my mouth.\n\nZach's member sprang free from the elastic, almost slapping me in the face.\n\nI stared in awe, involuntarily licking my painted lips.\n\nI was generally aware that he was well-endowed, having seen him naked on a few occasions, but this was my first time witnessing him in his erect glory. Only half-engorged, it was already at a girthy eight inches with a bulbous, purple tip. Zach was most definitely both a grower and a shower.\n\nOne whiff of the musky, masculine scent emanating from his cock and my higher brain functions ground to a halt. I was on autopilot as, cat-like, I flicked my tongue over the spongy tip and admired how the prominent veins pulsed with virility. Zach's syrupy pre-cum was as sweet as candy.\n\nI had never done anything even remotely sexual with another guy, but I knew how a blowjob worked and what felt good. It takes one to know one, I thought, as I wrapped my ruby lips around Zach's thick penis. One delicate hand began pumping his shaft as the other fondled his large balls. He groaned, placing one hand on top of my head, and I shyly raised my gaze until I locked eyes with him. Once I had a good, tight seal with my lips, I began moving my head back and forth across the girthy shaft, swirling my tongue around the head as it pumped in and out of my pretty face.\n\nI could only imagine the thoughts that went through his head as I, his best friend, dolled up and wearing the costume intended for his ex-girlfriend, bobbed and slurped on his cock like it was an ice cream cone.\n\nStill looking into Zach's eyes, I grabbed his muscular buttocks for leverage and shoved my face into his pelvis. I still couldn't take the entire thing down my throat, but I made a valiant effort. Fighting involuntary tears and the urge to gag as his cock pressed against my tonsils, I smiled up at him as spit ran unattractively down my chin.\n\n\"Fuck, Jennie. You're such a good little cocksucker,\" my best friend growled. The dirty talk shouldn't have surprised me, given that he had originally planned an evening of what amounted to an exhibitionist sex game with Jessica. Zach was clearly not a lights-off, missionary position kind of guy. But never in a million years did I imagine that I would personally hear the kinds of words that now spilled out of his mouth relentlessly. It appeared that I wasn't the only one who had been fighting their urges all night!\n\n\"Oh yeah, work my big cock with that pretty little mouth of yours, babe,\" he grunted, punctuating every word with a thrust of his hips. \"You're daddy's good little girl, aren't you?\"\n\nBeing called a \"good little girl\" by another guy\u2014even if he was my best friend\u2014should have been utterly demeaning, but in my mind it was the highest praise possible. I slid Zach's manhood out of my throat and wiped the spit off my chin with the back of my hand. I saw that I had left a red ring of lipstick about two-thirds of the way down his diamond-hard shaft, now a fully engorged twelve inches. I was so incredibly aroused by how turned on I obviously made him.\n\n\"Yes, daddy. Jennie's your good little slut.\" It felt right saying the words, which I suspected might have come from one of the many, many erotic stories I had read over the years.\n\n\"Good girl,\" Zach said again, as he grabbed my hair and gently, but firmly, guided my face back to his wet, glistening cock. Unlike before, where I had been the one in motion, it was clear that Zach was now in charge. Holding my head in place with both hands, he began fucking my face as I held still and tried to keep my teeth from scraping against his penis, a task easier said than done given his girth.\n\nUnder his forceful thrusts, I was proud to see that I had soon surpassed the red ring of lipstick from earlier, and it wasn't long before my nose was completely buried in his pubes. Tears and saliva ran down my face as Zach continued to mercilessly throat-fuck me.\n\nMy idle hands drifted towards my own pleasure spots. Unfortunately, there was no way for me to actually touch my own penis, which remained tightly confined between my legs where the constricting leather prevented it from becoming erect. Frustrated, I tried rubbing the tip of my limp dick through the leather of the catsuit, and to my complete surprise, it felt even better than it did when I jerked off. Whimpering, I tugged on my tail with my other hand, savoring the sensation of the heavy steel plug stretching out my hole.\n\nZach stiffened abruptly, fingers digging into the back of my head, and I knew he was about to cum. His cock pulsed and spasmed violently against my tongue before he groaned and filled my mouth with the salty, acrid taste of his semen. Zach had been telling the truth when he said that he hadn't had sex in a while, because even though I reflexively swallowed as much as I could, my best friend's seed almost immediately overflowed from my mouth.\n\nIn the mirrored walls, I caught a glimpse of a sexy, wanton girl\u2014with cum and spit dripping down her face\u2014furiously rubbing her crotch with one hand and playing with her ass with the other. The realization that the slut was me, and the dominant, powerful man she had just brought to climax was my best friend, caused my own body to tremble wildly as I also came. Hot, sticky fluid pooled inside the crotch of the waterproof leather catsuit. I couldn't decide what was more unbelievable: that my straight best friend had just cum buckets into my mouth, or that in doing so he had caused me to cum with him when I wasn't even hard!\n\nWith two shaking fingers, I pushed the semen that was dripping down my chin back into my mouth, then sucked on them to make sure I didn't waste a single drop. Looking up, I opened my mouth wide to show Zach that I had swallowed it all.\n\n\"Good girl,\" he panted. \"Swallow all of daddy's cum. God, you look so fucking hot on your knees with my cock in your mouth.\"\n\nI beamed at him with a silly smile, brain completely empty except for a warm, fuzzy glow. I'm a good girl. I'm daddy's good girl.\n\nZach slicked back his sweaty hair before bending over and picked me up by the waist like I weighed nothing. Setting me down on the table, he took a moment to catch his breath, then popped open the champagne and poured us each a glass.\n\nI shyly clinked glasses with him and sipped on my drink, relishing the taste of my best friend semen mixed with the bubbly alcohol. Zach downed his glass in a single gulp before pouring himself another. I was happy and satisfied, but admittedly a little disappointed that the night would end with \"only\" a blowjob. The tail that had been wiggling inside my ass all evening had me aching for something bigger to replace it.\n\nIt was then I noticed that Zach's erection hadn't subsided at all. Rather, his impressive manhood was as stiff as a flagpole even as he poured himself a third glass of champagne. Catching me staring, Zach chuckled.\n\n\"You thought we were done?\"\n\nI nodded mutely.\n\n\"Babe, we're just getting started.\" Gesturing with his champagne glass to mine, he said, \"I've wined\u2014\"\n\nWith one hand, Zach casually wiped a stray drop of cum from the corner of my mouth that I had missed.\n\n\"\u2014and dined you\u2014\"\n\nThe same hand then wrapped around my throat, firmly but not enough to hurt me. \"\u2014so now I'm going to take this cat's pussy.\"\n\nJust as I had been concealing a slutty, submissive girl inside of me, Zach had apparently been hiding a dominant streak.\n\nHand wrapped around my neck, Zach pushed me onto my back, where I noticed for the first time that there was also a giant mirror on the ceiling which reflected our every move. Entranced, I watched as an attractive, well-muscled man easily yanked the tail out of the tight little ass of a helpless Catwoman. She\u2014I\u2014gasped in pleasure as the warm metal left her puckered hole. I had grown accustomed to the sensation of the butt plug, and it felt strange to not have its reassuring weight inside of me.\n\nBut if Zach had his way, that would soon be fixed. I knew what he wanted from me. And since I was a good girl, I wanted nothing more than to give it to him.\n\nSpreading my legs, I grabbed each stiletto heel with a hand to force my hips back, shyly presenting my red, swollen rosebud to Zach. In this position, the small pool of cum that had been trapped inside my costume earlier now seeped onto my anus and out of the hole in the back of my costume.\n\n\"Looks like someone's pussy is dripping wet,\" Zach said, smirking. \"Did you want daddy's cock that badly?\"\n\nI nodded earnestly as he brandished his cock and began rubbing the head against the slick semen that now covered my backside. The tip of his throbbing member brushed up against my eager, aching hole, sending jolts of electricity up my spine, but I whined with frustration when he stopped moving.\n\n\"I want to hear you say it.\"\n\n\"Yes,\" I moaned softly.\n\n\"Yes, what?\"\n\n\"Yes, I want daddy's cock in my pussy.\" Mad with desire, I barely even knew what I was saying. \"Please take my virginity, daddy.\"\n\n\"That's a good girl.\" He began pressing forward with his hips as he simultaneously tightened his grip around my neck. \"God, Jennie, you're so fucking tight.\"\n\nZach was big. Much bigger than even my biggest dildo, and as the pressure mounted against my sphincter, I worried that I wouldn't be able to take him inside me.\n\nBut the lubricating cum did its job, and with an audible pop, Zach's cock slipped inside of me for the first time.\n\nI saw stars, and it wasn't only because he was choking me, though that certainly contributed. It was the catharsis after an entire night of seesawing between terror and arousal. It was the liberation of finally being able to express the sexual, feminine side of me that I had kept suppressed for so long. It was because my best friend had become my lover, fulfilling my deepest fantasy in the process.\n\nWith steady, practiced thrusts, Zach began working his cock deeper and deeper into me, grunting in tempo with my small girlish whimpers as he stretched my tight, sensitive hole. My dildos at home had not prepared me for the real thing. Even setting aside the massive size disparity, Zach's penis seethed with its own burning heat, and the uniform floppiness of silicone paled in comparison to the combination of soft skin and tissue over a rock-hard core. I hadn't known what to expect at all, but the difference was night and day.\n\nI craned my neck forward and watched with fascination as my asshole greedily swallowed up the entire length of Zach's cock with a wet slurp. After a short pause, he would pull out until his coronal ridge caught against the inside of my sphincter, before slamming his weight forward again and bottoming out. I writhed and mewled as the raw and primal sensations of taking another man's throbbing cock inside of me burned out every other thought I had in my head.\n\nMy swollen prostate felt like it was going to burst every time Zach's huge member brushed against it as he pummeled my virgin hole. An unfamiliar but immensely pleasurable warmth started growing deep inside of my tummy. As the rhythmic clapping of my best friend's balls against my leather-clad butt cheeks picked up in tempo, the warmth intensified to a searing crescendo of mind-numbing bliss.\n\nOnce again, I found myself staring at the ceiling mirror. Seeing my legs tightly wrapped around Zach's naked waist as he choked and penetrated me was surreal; this was my straight best friend who I had known for almost my entire life. But all of that didn't matter now, he made me feel so good when he pounded my ass with his massive cock, so desirable, small, helpless, and feminine. I finally realized why all my sexual encounters with women had been so brief and unsatisfying: I was made to be fucked by Zach. I was his good little girl.\n\n\"Do you love it when I breed you?\" he demanded.\n\n\"Yes,\" I screamed in ecstasy. \"Yes! YES!\"",
        "\"Do you want me to cum inside you, Jennie?\"\n\n\"YES! PLEASE BREED ME, DADDY! PLEASE CUM INSIDE ME! PLEASEPLEASEPLEASEPL\u2014\"\n\nWith one final, decisive thrust, Zach buried his cock to the hilt and emptied his balls into my ass, his hot, molten seed filling me up like a cream pastry. He shakily collapsed onto me, pinning me against the table. Impaled on my best friend's cock, with his hard, muscled body pressed against my soft and feminine one, the realization that I was able to elicit such an intense reaction from him\u2014that he found me sexy and desirable\u2014drove me over the edge.\n\nI almost blacked out as a dry, prostate orgasm wracked my body in waves of explosive, toe-curling ecstasy. Ears ringing, I could barely hear my own howls of pleasure as my hips convulsed and bucked uncontrollably in feminine pleasure. I clawed at Zach's muscular back and violently tossed my head from side to side as I squirmed underneath his sweaty body. I'm a good girl. This is what good girls are rewarded with.\n\nAfter what felt like an eternity, I slowly came to my senses and was greeted by the sight of a familiar pair of dimples. Smiling gently, Zach leaned over to kiss me lightly on the forehead, the movement causing his slowly-softening cock to slip out of my worn and abused asshole. I felt some of his cum ooze out of my now-gaping anus, and reflexively clenched my butt to hold his seed inside of me as long as possible.\n\n\"Jennie,\" he began, a thousand unspoken words behind those warm brown eyes. I held up a trembling finger to his lips, shaking my head. I wanted this perfect moment to last just a little bit longer before we had to figure out what the hell we had gotten ourselves into.\n\nI didn't know if things would work out for us\u2014though I hoped with all my heart that they would\u2014but I did know this: I finally had a story to submit to the Halloween Story Contest!\n\nJennie's Note: Dear reader, if you are reading this in 2020, rest assured that this was from a happier time\u2014I'm not that irresponsible! If you enjoyed my story, please consider voting for it in the Literotica Annual Halloween Story Contest! As always, I look forward to your comments, critiques, and suggestions, as they all encourage me to keep writing!"
    ],
    "authorname": "meowjennie",
    "tags": [
        "anal",
        "blowjob",
        "catwoman",
        "costume",
        "crossdressing",
        "halloween",
        "mindbreak",
        "romance"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/halloween-a-pussycats-tail"
}
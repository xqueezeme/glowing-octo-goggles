{
    "title": "When Worlds Collide Ch. 11",
    "pages": [
        "\"Demetri,\" Caleb ground out, his friend already nodding and pulling out his cell phone. He barked one word into the phone and hung up. It was a prearranged call to arms. Their friends would be in situ in under ten minutes. They had forty five minutes, possibly an hour before Graves reached the compound.\n\nJared barked orders at his betas and they went running from the room with the exception of Ben who stayed behind and moved over to Lacey's side. The Alpha turned to his brother. \"Five minutes, Rafe.\" He was striding out of the room before he finished speaking.\n\nRafe collected Lacey against his side and pulled her into the study. His heart was pounding with fear as he held his precious mate against him, feeling her trembling with her own fear. He closed his eyes and leaned back against the door, resting his chin on top of her head. \"Listen to Annie. Do exactly as she tells you. DO NOT under any circumstances leave this house, Lacey. I don't care what you hear, what you see. Stay inside at all costs.\" He couldn't keep the fear from his voice. He wasn't frightened for himself. He was frightened that Graves would somehow get passed all of them and get his hands on Lacey. That couldn't be allowed to happen under any circumstances.\n\nLacey could feel him trembling against her and she couldn't help trembling too. It was really happening. Richard was really coming and people were going to die. Part of her had hoped he would simply give her up, walk away and forget about her. She had known she was fooling herself. She'd lived with Richard for too long to ever truly believe that he would walk away from what he saw as his property.\n\nShe could feel her wolf stirring inside her, prowling in an agitated state. She hadn't had her first shift yet so it still felt a bit strange this other being inside her and yet, she suddenly felt less frightened. Her wolf seemed to be getting stronger and the stronger she became the more her fear dissipated. \n\nShe pulled back and looked up into Rafe's face. \"Don't worry about me. I'll do as Annie says. Concentrate on keeping yourself safe, Rafe. If you're thinking about me then you'll be distracted. You need to concentrate on what you have to be doing.\"\n\nRafe could see her wolf close to the surface, hear the strength in her voice and his heart swelled with pride as he stared into her beautiful eyes. She was truly amazing his mate. She would be a beautiful wolf, strong and vibrant. \"I love you so much, sweetheart,\" he said softly, his eyes shining with his love as he kissed her tenderly.\n\nShe kissed him lovingly, a gentle brushing of lips as she stroked his face lightly. \"And I love you, Rafe,\" she whispered. \"Now go. Do what you need to do. I'll be waiting for you right here when it's all over.\"\n\nRafe stroked her silvery blonde hair reverently and kissed her lightly again before he pushed off from the door. They eased back into the open hallway which was awash with Weres getting last minute orders from the various betas. Rafe searched through the throng of people until he saw who he was looking for. He hugged Lacey to his side until they'd made their way through the people and reached Rhianna's side.\n\nShe turned to look at them and her worried expression softened slightly and she managed a brief smile. \"Lacey, stick close to my side,\" she said softly, her eyes not leaving her brother's face. They'd said all they really needed to say already, in the forest and only a short time earlier. \n\nRafe kissed the top of her head gently and stepped back. \"Love you, sis,\" he said with a small smile tugging at his lips.\n\n\"Love you too,\" she answered, flashing him her own quick smile.\n\nHe took one last long look at Lacey and then turned and disappeared from the room.\n\nBen was still hovering close by only now he had two other men at his side. \"Annie, this is Klaus and Hub. They'll be with us in the house.\"\n\nRhianna looked at them intently. She didn't recognise them from the compound. They must have moved into the city not long after she started visiting. They were both big men as was typical of male Weres, both with brown hair and blue eyes. She wondered idly if they were brothers. Their facial features seemed too different to suggest a familial tie. They were watching her equally as intently and she smiled softly. \"Yes, I'm a vampire,\" she said dryly. \"Any problem with that?\"\n\n\"No problem. As long as you don't bite me,\" Klaus said with a cheeky grin, humour flashing in his eyes. She decided she liked him instantly; his friend seemed okay too, giving her small smile.\n\n\"Rafe would kick my ass if I brought a Were inside who had an issue with you, Annie,\" Ben said with a little laugh.\n\n\"As opposed to me ripping your head off?\" Caleb asked lightly coming up behind them. He watched the beta's face pale slightly even as he and the other two Weres went on instant alert. He silently applauded their training as he wrapped his arms around his woman and dragged her back against his chest.\n\n\"I have to go, love,\" he sighed bending down to brush his lips against the side of her neck. He looked at the Weres and bared his fangs slightly. \"Just so we're under no illusions here. If I come back for my woman and she's not in one piece and any of you are still living, I will kill you myself.\"\n\n\"Caleb,\" Rhianna groaned in exasperation. \"We've talked about this before. You can't go around making everyone accountable for my well being when you're not around.\" She turned to glare up at him, his expression clearly telling her that as far as he was concerned, he could.\n\n\"Lacey, stay with Ben for a moment. I'll be right back,\" she said quietly pushing her vampire towards a quiet corner in the room. She opened her mouth to speak but he caught her mouth with his, his tongue dipping inside instantly as he picked her up and pressed her against the wall.\n\n\"Knew that would get you away from them for a couple of minutes,\" he murmured against her lips. He could always count on his woman needing to tell him off when he was being too outrageous. He cut off her muttered oath with a hard kiss, needing to feel her close to him for a moment longer.\n\n\"Caleb, we're in a room full of people who are watching us,\" Rhianna finally managed to get out, successfully evading his searching lips.\n\n\"They may learn something then,\" he chuckled softly, kissing the side of her neck gently before raising his head to trap her gaze in his. \"I'm pretty partial to this beautiful head being attached to this delectable body,\" he breathed softly. \"You'd better keep it that way. Understand?\"\n\nShe smiled gently, framing his face in her hands. \"Same goes for you too,\" she answered quietly. Their tone was light and teasing but their eyes were speaking another language. Rhianna thought she was drowning in the depth of his love as his eyes positively glowed. \"Be safe, Caleb,\" she whispered.\n\n\"Be safe, my Annie,\" he echoed softly, kissing her gently before setting her feet back on the floor. \"I probably won't be back inside until this is all over with so don't worry needlessly if you don't see me around much.\" He gave her another quick hug and then straightened up.\n\n\"Caleb, you're not doing the whole over-protective thing,\" she said quietly, slightly puzzled by his out of character behaviour.\n\n\"You hate it when I do that,\" he answered with a rueful smile. \"Plus, any vampire who can outrun eleven Weres at the same time is plenty capable of looking after herself in my eyes.\"\n\nRhianna smiled slowly as she gazed up at her beautiful vampire. \"As long as she's in a house surrounded by ninety odd Weres and twenty plus vampires?\" she guessed accurately.\n\nCaleb shot her a sheepish grin. \"Damn, you always catch me out,\" he laughed softly. \"I'll be back for you soon, love.\" He brushed his lips once more against her soft mouth, inhaling her sweet scent of lavender and jasmine before he reluctantly turned and left the house.\n\nShe watched him go, seeing the room and hallway start to thin out as Weres headed back outside. Alexei and Andrei followed Caleb out of the house and she spotted Demetri's dark head bent close to Mara. She turned and made her way back over to Lacey's side.\n\n\"I don't know why Alexei stays friends with you if you're in the habit of crushing his throat every time he says something you don't like,\" Mara said with more than a hint of disapproval in her voice as she gave her husband a stern look.\n\nDemetri's lips twitched and his eyes danced with laughter as he let her censure wash over him. It was so typically Mara. An army of vampires were about to descend on their heads and she was lecturing him about the etiquette of how to be a good friend? \"Mara, shut up and kiss me,\" he sighed, threading his hand into her hair and tilting her face up to his.\n\nHe brushed her lips gently, savouring her sweet taste. Adrenaline was rushing through his body making his nerves comes alive as the impending fight approached fast. He needed to dial into that emotion and hone it, but first he needed to ensure his woman's safety. He deepened the kiss and pulled Mara tightly against his hard body, delving into her mouth with his tongue until she groaned softly.\n\nSatisfied he raised his head and stared into her big brown eyes as they fluttered open. \"Be a good girl and stay out of trouble, wife,\" he ordered softly. \"If you get hurt I'm going to be really pissed and you know what I get like when I'm pissed.\"\n\nMara stared at him through narrowed eyes, catching a glimpse of worry in his. She realised he wasn't sure his agreement with Graves would hold and he didn't want to frighten her by telling her so. She knew him so well and he was usually so good at hiding what he wanted to. If she could see even a hint of worry in his eyes then she was sure the level of his emotions were a lot higher. \"I'm in the safest place I can be, Demetri,\" she answered quietly.\n\n\"No, the safest place you could be is out of the city,\" he remarked dryly, raising an eyebrow at her.\n\n\"I thought we'd already had that conversation,\" she countered pressing herself against him tightly. \"Do we have time for a domestic right now?\" she added with an impish smile.\n\nDemetri laughed and shook his head. \"Hold on, I'll call Graves and ask if he can postpone the attack so I can argue with my wife.\" He stroked the side of her face with gentle fingers, his expression turning serious. \"I mean it, Mara. Don't you dare let anything happen to you because I won't be responsible for my actions if anything does.\"\n\nShe answered him by pulling his mouth back to hers and kissing him deeply before she pulled back. \"Go do what you have to do, Demetri.\"\n\nHe nodded and slipped an arm around her waist, walking her over to the group left standing in the dining room. His thoughts were already starting to drift towards the upcoming battle as his eyes settled on the three male Weres standing beside Annie. He unconsciously growled and the little redhead rolled her eyes.\n\n\"Can we just assume we've done the whole 'threaten the Weres with impending death if my woman isn't safe' speech? They've already had it from Caleb, Demetri. They know the drill.\" Her tone was full of amusement and Demetri found himself laughing lightly.\n\n\"Fine, Red. Consider it said.\" He released Mara and dropped a quick kiss on her lips before he turned to Rhianna and kissed the top of her head. \"Take care of my heart for me, Annie,\" he said softly. She nodded and he shared another lingering look with Mara before he turned and walked away.\n\n\"So what's the plan of action?\" Ben asked as the house cleared completely leaving just the six of them in the dining room. Rhianna looked at him and realised that everyone was looking at her, expecting her to know what to do. She swallowed and bit her lip. How was she supposed to know? She was only twenty-two years old and had been a vampire for less than one of those. The Weres had to be so much older and more experienced than her and yet they were waiting for her command.\n\nShe squared her shoulders and tried to think of what Caleb would do. \"Ben, you probably know more than I do about war tactics,\" she said. \"You organise the Weres as you think best. Do whatever Jared or Rafe would expect you to do. I'm going to head upstairs with Mara and Lacey. We'll use Lacey's bedroom as a base.\"\n\nThe Were nodded his head, his handsome face taking on an alert expression. \"We'll stay on the lower floor. If anyone tries to come in we'll be ready for them. I know vampires can climb very easily so being upstairs isn't necessarily much safer than being down here, but at least if you're all in one room then that's only one place to be guarded.\"\n\nPlans set, the three women headed out of the dining room as Ben set Hub and Klaus to ensure as many windows and external doors which could be secured, were. \n\n_____\n\nJared stripped off his clothes and dumped them in the large basket beside the community hall. Some of the pack had already shifted but there were still some in human form walking naked around the compound as they finished giving or receiving orders.\n\n\"Demetri reckons Graves will make a full frontal attack,\" he said to Rafe as the big man tossed his clothes into the basket.\n\n\"Then we need to guard the door to the house,\" he answered, his eyes shifting to where his mate was. His wolf was howling furiously inside him, wanting out to protect their mate. He kept him at bay for the moment, knowing the time would soon come when he could release his beast and allow him free rein.\n\nLoretta jogged up to them, her expression tense. She stripped off her sweatpants and top. \"We're ready, boss,\" she said tersely, stretching her legs muscles as she spoke. \"Everyone knows what's expected of them.\"\n\n\"Okay, let's do this,\" the Alpha growled softly. \"Everyone shift!\" His voice boomed throughout the compound.\n\n\"Thank fuck for that!\" Alexei sighed. \"Nothing worse than having to watch naked dogs running around with their bits bouncing about. It's enough to make a vampire puke.\"\n\n\"Didn't know vampires could puke,\" Jared retorted dryly striding up to the vampires. \"Once I shift we're out of communication range. Any last words?\"\n\n\"Don't get bitten?\" Andrei suggested with a slight smirk.\n\nCaleb sighed and rolled his eyes. \"Go and make sure our people are in place,\" he said to no one in particular. He moved off a little distance with Jared following . He regarded his friend intently. \"We'll do our best, Jared, but you know we're not infallible. Some of the vampires are going to get through.\"\n\nThe Alpha nodded a deep frown on his face. \"I'm going to lose some of my pack, I know that,\" he answered quietly. \"But I'd lose a hell of a lot more if you weren't standing with us, Caleb. You have my eternal gratitude.\"\n\nThe vampire smiled. \"Isn't that what friend's do?\" he asked reaching out and clasping Jared's upper arm with one large hand. His friend echoed his action and they stood silently for a moment, arms clasped together.\n\n\"It's been good knowing you, Caleb,\" Jared finally said quietly taking a step back and preparing to shift..\n\nCaleb smiled. \"I'll remind you of that the next time I piss you off,\" he answered. He refused to think that there may be a possibility his friend wouldn't survive the next few hours. \n\nJared shifted, his large black wolf standing before the golden brown haired vampire for a moment before he chuffed and turned on his heel, vanishing into the throng of wolves now filling the compound.\n\n\"We should be alright with the vampires in the forest,\" Demetri said striding up to Caleb. \"We lucked out. Nors decided to come along to the party. Apparently Graves killed his latest paramour a few nights ago and he's only just found out who was responsible for it. He's agreed to keep the others in check. The Weres should be okay if they venture too close to them in the forest.\"\n\nCaleb sighed with relief. Nors had a reputation for busting heads when people stepped out of line. If he was in control of the other vampires and had a personal axe to grind against Graves, then the Weres were practically guaranteed safe passage within the forest. It was one less thing on his mind.\n\nDemetri was practically humming with tension beside him and Caleb smiled as he looked at his friend's flashing eyes. He was riding the edge between vampire and humanity, a place he particularly thrived in. A place Caleb hadn't visited for such a long time.\n\n\"Can you smell it, Caleb?\" his friend whispered excitedly. \"The anticipation. The steady thrum of power just beneath the surface?\"\n\nCaleb closed his eyes and slowly let go, his vampiric nature rising up and consuming his more human side. The air suddenly smelled so much fresher, the sounds around him so much sharper. His big body quivered with anticipation of what was to come, his hands curling into fists and then slowly relaxing. He growled softly and opened burning amber eyes as his fangs elongated and his fingernails sharpened into long, wicked looking talons.\n\nHe turned his head to see Demetri had transformed too, as had the twins. The four vampires inhaled deeply, caught the scent they were looking for and growled as one.\n\n\"Time to dance with the Devil,\" Demetri laughed loudly taking off into the forest in a blur of movement. The others were a fraction of a second behind him.\n\nRafe watched the vampires change and then disappear, a shiver running through his body. His wolf growled automatically even though he knew they were on his side. Seeing the other vampires like that didn't seem all that strange even though it was the first time he had seen a vampire let go of their human side. Seeing Caleb like that, so wild and untamed, shocked him though. If that was Caleb's true nature then was that Annie's too? Would she change like her lover when threatened? His big head turned to the house for a moment and then swung away. It didn't matter to him anyway. She would always be his Annie, no matter what.\n\nJared howled into the night and the wolves took up their positions around the house, one circle tight against the walls, a looser circle a few feet outwards. Rafe moved over to Jared's side, taking his place in the outer circle. He felt the absence of Aaron at his side. It was the first time since he'd become a Were that his friend was not right there with him. The only consoling thought he had was that at least his friend was safe and keeping Millie safe too.\n\nJared watched as Mike and Pete slipped in beside Rafe like guardian sentinels. The huge brown wolf at his side had no idea how much loyalty he commanded within the pack. Mike and Pete would lay down their lives for any pack member but Jared suspected they might do so a little more willingly for Rafe, such was their close bond to his brother. The tension reverberated throughout the wolves as they suddenly picked up foreign scents approaching. It was time.\n\n_____\n\nGraves stepped out of his car, quickly surveying the dense forest. His humans where gathered to one side, a full one hundred expertly trained men. They were essentially cannon fodder and he knew it. It didn't matter how well trained they were, the dogs would take them down easily. Which was what he'd planned for. The more dogs engaged with the humans the easier it would be to slip vampires behind their lines.\n\nHe turned and crossed over to his own people. Intelligence said Cullen had only managed to score up twenty, maybe twenty-five vampires to his cause. Graves had thrice that amount. He wasn't smug about his numbers though. A large percentage of the gathered vampires were younglings. Cullen's crew were mainly elders along with a few ancients. Plus, Demetri had drafted in the Romanov twins. The combination of those three together was equal to having an additional thirty younglings to hand.\n\nAben stepped forward, his black eyes flashing with excitement. \"Sir, we tracked two jeeps leaving the compound just before dark,\" he said tersely. \"One of the woman you want was in the convoy.\"",
        "Graves hissed loudly. \"Lacey?\" he barked out.\n\nThe other vampire shook his head. \"The black haired one,\" he answered.\n\nGraves pursed his lips. So the cunt lawyer thought she could escape the oncoming battle, did she? She, who had instigated this whole thing by poisoning his woman against him. \"You followed them?\" He held his breath as he waited for Aben to confirm that he'd had the brains to follow the bitch, letting it out slowly when he did so.\n\n\"There are only a handful of young dogs there, Sir. Mostly older ones and their young. It appears to be an attempt to evacuate the weaker of the pack members.\"\n\nA chilling smile crossed Graves' beautiful face as his eyes flashed with delight. \"Take a couple of younglings with you, Aben. Slaughter the entire camp. Not one dog lives. Am I clear on that?\"\n\nThe other vampire grinned with excitement, his brown hair swaying as he called to two younglings instantly. \"What about the bitch? Do you want me to bring her back to you?\"\n\n\"Kill her,\" Graves said softly. \"Only make her suffer, Aben. Keep her alive until the very last. Make sure she sees everyone else die first and before you rip out her throat, tell her I warned her what would happen if she fucked with me. Make sure she knows in no uncertain terms that I am responsible for her death before you end her life.\"\n\nThe feral glitter in Aben's eyes made Graves' smile grow wider. He was a particularly vicious vampire, delighting in inflicting pain. Graves has no doubt that Jennifer Swift would scream herself hoarse by the time the brown haired vampire was done with her. \n\nHe watched the three vampires disappear into the night before he turned to find Sandro. \"You know what to do?\" he asked quietly. \"I'm trusting you with this, Sandro. Don't let me down.\"\n\n\"It will be as you command, Sir,\" the blond vampire said reverently, his big body thrumming with excitement. He turned to slip away into the night, halting when his boss called him back.\n\n\"The conversation with Demetri in my office. It didn't happen,\" Graves said quietly, catching his gaze and holding it until he saw understanding cross the other man's face.\n\n\"But you've told everyone,\" Sandro said, his tone shocked.\n\n\"That was before Lacey turned me into a laughing stock by mating with a dog,\" Graves hissed furiously. \"Demetri Bozic isn't going to compound my humiliation by holding me to ransom by the balls too. If anyone on his little 'list' gets in your way, kill them.\"\n\nSandro nodded, accepting his orders with a smile. Killing Lacey would be so much easier if he didn't have to be careful around any of the other women involved with the enemy vampires. He spun around and vanished into the night.\n\nGraves watched him go and then strode into the forest. \"Kill everyone,\" he ordered loudly. Vampires and humans began to run, blending into the trees as he hissed loudly, his talons growing to wicked points, his fangs dropping to graze his lips. \"Here I come, Lacey,\" he whispered softly. \"Better start running now, little dog, because if I catch you I'm going to rip your fucking heart out, bitch.\"\n\n_____\n\nThe vampires dropped from the trees so fast the first of Graves' younglings went down without much of a fight. The defensive line ignored the humans, concentrating on keeping the attacking vampires away from the compound as instructed. \n\nNors hissed and ripped the head from a youngling, his eyes burning with excitement as the fresh scent of blood filled the night air. The sounds of screaming began to fill the night as his red hair swayed in the wind. He dropped the dead vampire and launched himself at the next one coming at him. As he ripped out the man's throat his eyes were scanning the dark forest trying to catch a glimpse of Graves. His fury at the ancient was boundless, his need to kill him consuming him. He knew he was merely one in a very long line of people who wanted to kill the other vampire but he wouldn't forgo the opportunity of doing it himself if he could find the slimy bastard.\n\nHe despatched the vampire in his hands and leapt onto the back of another who was gaining the upper hand against one of his people. He ripped the head from the vampire's shoulders and dropped it negligently to the ground. There was no sign of Graves which meant he was up to something underhand.\n\n\"Where's Caleb?\" he ground out to the vampire he had just helped. The other man didn't speak, merely nodded his head backwards. Nors headed in the indicated direction.\n\nCaleb turned as Nors approached, his hands bloody as he finished with the youngling in his hands.\n\n\"Graves is up to something. There's no sign of him,\" the huge red haired vampire announced when he reached him.\n\nCaleb frowned slightly, looking around for Demetri but seeing no sign of his friend. He hissed in annoyance. If there was one person who could outmanoeuvre Graves it was Demetri and he couldn't find him among the heaving mass of feuding vampires. A startled whimper caught his hearing and he turned back to see Nors holding a struggling Were by the throat.\n\n\"Nors!\" he barked loudly and his friend dropped the struggling animal to the ground. The Were shifted immediately, transforming into a young woman who looked barely old enough to have remained at the compound. Caleb immediately dropped to her side, brushing her short blonde hair back from her face as she struggled to catch her breath. \"Shh, you're safe, little one,\" he said gently. \"What are you doing here child? You should be at the evacuation site.\"\n\nShe stared up at the vampire with frightened eyes before she swallowed hard. She knew she had done a foolish thing coming back to the compound but all her family had stayed behind and she didn't want to be apart from them at the evacuation site. She thought she recognised the beautiful vampire before her. She thought he was Caleb, her Alpha's friend but the large red haired vampire beside him stole her voice from her she was so frightened of him.\n\n\"What is your name, child?\" Caleb tried again, struggling to keep his impatience out of his tone. It was clear the young girl shouldn't be there. She was no warrior, just a frightened child barely passed into womanhood. He had to find out why she was there and how best to get her to safety.\n\n\"Ashleigh,\" she whispered softly. \"And you're Caleb?\" She sighed with relief when he nodded gently, and stroked her cheek lightly. Her brown eyes suddenly filled with tears. \"You have to help them, Caleb. Please! I came back to be with my family who stayed at the compound. I saw the vampires arrive. They know where the evacuation site is. They sent vampires there to kill everyone!\"\n\nCaleb struggled to keep his expression neutral as rage raced through him. He gently picked the girl up and turned to Nors. \"Protect her,\" he ordered holding the girl out to his friend.\n\nNors glared at him but accepted the burden being passed to him. \"What am I supposed to do with her?\" he demanded looking down at the frightened face staring up at him.\n\n\"Protect her,\" Caleb reiterated, sparing a gentle smile for the girl. \"You will be safe with Nors. Do as he says. I will arrange protection for the evacuation site. How many vampires went, Ashleigh?\"\n\n\"Three,\" she answered, her voice a little stronger as her fear scent decreased slightly. Caleb nodded and then turned and vanished into the war zone surrounding them.\n\nNors stared down at the fragile little thing in his arms and snorted loudly. \"Protect her,\" he muttered darkly under his breath as he peeled away from the fight and ran quickly towards the compound.\n\nCaleb finally found Demetri. He knew he would find the twins close by and he wasn't proven wrong. He paused and watched as his three friends waded into what had to be a minimum of ten vampires trying to get around them. He was relieved that he didn't have a weak stomach because watching those three take apart Graves' lackeys was not a pretty sight.\n\n\"Graves has sent three vampires to the evacuation site,\" he called to Demetri as his friend finished ripping out the throat of his last victim.\n\n\"Fuck!\" Demetri spat furiously, his eyes turning into chips of ice. \"Alexei, get over there and protect them!\"\n\n\"Why me?\" Alexei hissed loudly, his big body coiling with anger as he glared at his friend.\n\n\"Oddly enough, I trust the Weres safety more in your hands than I do his,\" Demetri barked sparing a quick glance at Andrei. His friend was smiling as he used a couple of severed heads as missiles, lobbing them in the direction of the oncoming vampires. Caleb followed his gaze and fought down a shiver. He had initially been surprised at Demetri choosing Alexei for the task but watching Andrei, he could now understand. The seemingly more congenial vampire was obviously a lot less stable than his brother.\n\nAlexei hissed in annoyance again but straightened up. \"I told you I wasn't going to be bloody babysitting,\" he grumbled loudly, holding up his hand when Demetri took a step towards him, a snarl on his face. \"Alright, I'm going!\"\n\nAndrei laughed softly at his brother's disgruntled expression. \"Be quick about it and you can come back and join in with the fun,\" he teased before he streaked away and launched himself at a youngling who had gotten too close.\n\nAlexei spun on his heels and blurred into the trees. If they were just hearing about the vampires then they would be on the evacuation site before he got there. He was tasked to protect the dogs so he would do so to the best of his ability, no matter how abhorrent he found the task.\n\n____\n\nThe human army streaked into the compound, loud battle cries ringing from their mouths. Rafe idly watched them thinking how stupid they were to announce their position like that, then he sprang forward and landed on the first available man he came across. His teeth sank into the man's neck even as his claws raked at his stomach. The kill was quick and clean, the man forgotten instantly as he moved onto the next one in line.\n\nThe sounds of screams began to fill the night air as the pack descended on the human males. There was short bursts of gunfire, loud whines of pain but everything was a blur to Rafe. His rage at being denied Graves filled his soul. He took that rage out on the men before him, scything his way through them with murderous intent. They were here to take his mate from him. They were here to lay their filthy hands on her and hurt her.\n\nOne by one men fell before him without a sign of regret on his part. . Once he would have hesitated, once he would have felt crushing guilt for taking a life but not now. Not when they wanted to harm his Lacey, to hurt his very reason for existing.\n\nThe pack was holding strong against the humans. It was a pretty uneven fight even with their guns. The men moved too slowly. It didn't matter how much training they had, they would never be able to outthink the pure, animal instinct of the wolves.\n\nRafe watched his Alpha take down another man, Mike and Pete close by savaging their own opponents. The pack moved as a unit, tightly defending the house. Rafe looked for a vampire, any vampire so he could kill it dead and feel some satisfaction that he had at least managed to kill one of Graves' cronies. But there were none in range. Caleb's line must be holding to keep them at bay. \n\nHe saw Loretta disappear around the back of the house and wondered where she was going. She had broken the line of defence. His attention was diverted by a sharp sting to his shoulder. His large head whipped around and he saw the sharp knife sticking into him. The man before him grinned for a second and then gargled in terror as Rafe ripped his throat out. He shifted briefly so he could pull the offending knife from his shoulder and then shifted back to wolf form. The wound wasn't bad. It would probably heal within minutes. He completely forgot about Loretta as his rage sparked again and he once more turned to dive into the thick of the battle.\n\nLoretta picked up the foreign scent and stiffened, her eyes intent as she stared off to the right. She couldn't see anything but something itched at her and she turned to regard the fight. The pack was holding strong so she streaked towards the nagging scent which was irritating her, rounding the back of the house just in time to see a huge blond vampire drop a dead Were to the ground.\n\nShe howled loudly, reacting instinctively as she launched herself at the bloodsucker, her claws raking down the vile creature's back. The strength of the vampire stunned her as it reached back and grabbed her by the scruff of her neck before she could sink her teeth into his neck. Her body flew into the air as the vampire pulled her over backwards and slammed her into the building. Bones crushed instantly and her breath wheezed out painfully.\n\n\"Mmmmm, a female,\" the vampire crooned softly. \"Did you really think you were up to the task of taking me on when I've just killed three of your little male dogs?\" He sounded amused and even laughed softly when she tried to snarl at him and it came out as a tortured whimper instead. Loretta knew she was staring death in the eyes. She tried to send out a mental call to her Alpha but she was suddenly flying through the air again, crashing hard against a large tree. She felt the pain of more bones breaking, knew her body was shattered beyond healing. \n\nSandro watched the wolf bitch slide to the forest floor and smiled. He turned his cold gaze back to his task at hand, uncaring if the bitch still lived. His prey was so close to him now. He could smell her scent, smell the taint of dog on her. He laughed lightly and sprang upwards, crashing through the closed window.\n\nA sharp pain in his chest surprised him when he entered the room. His eyes fixed on Lacey and another woman standing close to the door before he looked down at the small hand sticking inside his chest. His head turned lazily to the right and met the eyes of a little red haired youngling who was currently hissing at him like a little kitten. His lips curled into a small smile as he reached out and snapped the bitch's wrist cleanly in half.\n\nRhianna screamed as her wrist shattered. \"Run!\" she cried out in agony, her words cutting off as the blond vampire's large hand wrapped around her throat.\n\n\"Sandro!\" Lacey screamed, her voice thick with fear for Rhianna as she watched her new sister dangling helplessly in his cruel grasp. \"It's me you want, Sandro. I'm here. Come and get me!\"\n\nRhianna tried to scream at Lacey to run again but the vampire's talons were digging painfully into her neck. She knew she was seconds away from losing her head, seconds away from breaking Caleb's heart. She kicked out hard, catching Sandro in his groin. He dropped her instantly, moving away from her and heading towards Lacey and Mara. \n\nRhianna knew his releasing her had nothing to do with her weak kick. The vampire was responding to Lacey's challenge. She dragged herself to her feet as blood poured down her throat and she threw herself onto the vampire's back. She tried to dig her talons into his eyes as she sank her fangs into his neck.\n\nHe roared in pain and crashed backwards, pummelling her against the wall and driving the breath from her body. She lost her hold on him and slid down the wall with a tortured groan. Rhianna waited for the death blow. She was too badly injured to avoid it. It would take a little time for her wounds to heal to allow her to fight back. But Sandro was turning away again, striding quickly from the room, following Mara and Lacey's retreating figures.\n\nMara prayed Graves' edict still stood, that the vampire would stop short of hurting her. He had disabled Rhianna so quickly. They wouldn't stand a chance against him. She didn't even know if Rhianna was still alive. The sight of the three snarling wolves at the head of the stairs gave her some hope as she grabbed Lacey's arm and pulled her to the side. They couldn't get downstairs with the wolves blocking the way so they huddled close to the banister, Mara placing her body in front of Lacey's.\n\nLacey tried to get around Mara but the other woman wouldn't let her. If she could reason with Sandro, talk to him, maybe she could stop the coming bloodshed. Her wolf was howling loudly inside her and she wanted to let her out but she didn't know how to, no one had shown her what to do.\n\n\"Stay behind me,\" Mara hissed softly. \"We have to believe that he's more afraid of Demetri's wrath than he is of failing to achieve his task.\"\n\nThe vampire was on the landing now, the wolves attacking him simultaneously. He went down under the three snarling beasts and for a moment Lacey thought everything was going to be okay, that the wolves would be able to stop the killing machine coming for her.\n\nThen one of the wolves howled in agony and she saw Sandro's fangs retract from the animal's neck. \"Oh God, no!\" she groaned in anguish as she watched the Were die instantly from the vampire venom injected into his blood stream. \n\nTears rolled down her face as the other two wolves met a similar fate, their anguished howls filling the house briefly before they too lay silent as Sandro rose back to his feet, his eyes intent on the two women. His flesh was torn from the wolves bites and their claws but it didn't appear to hamper him any as he smiled slowly.\n\n\"You didn't need to kill them!\" Lacey screamed at him.\n\n\"No, I didn't,\" he laughed. \"But I wanted to. And Richard was most keen that you suffered greatly, Lacey. I'll be sure to tell him how much anguish these dogs' death caused you.\" He took a step towards them and Mara swallowed down the bubble of fear which was building inside her.\n\n\"Stay back!\" she ordered, her voice only slightly shaky as she held her hand up. \"Demetri told you to stay away from me. If you want Lacey you're going to have to hurt me and you know he'll gut you slowly if you touch one hair on my head.\"\n\nThe blond vampire's smile widened but he halted his step for a moment, meeting her frightened eyes. She really was rather pretty. He could kind of see the appeal she had for the other vampire. He cocked his head to the side as he perused her thoughtfully for a long moment.\n\n\"Richard changed his mind,\" he said with a cruel smile on his face, watching the colour drain from the human woman. He so loved the scent of fear and the two women before him were suddenly bathing the area with theirs. It was so intoxicating he was tempted to play with them a little longer.\n\nHe stepped towards them again, smiling as they backed away from him. This was so easy. He didn't even need to touch the silly little bitch, her own fear was going to be her downfall. He slowly corralled them to right where he wanted them to be and then paused again. He watched Lacey's eyes and saw her decision to move a fraction of a second before she did so. Perfect!\n\nRhianna dragged her healing body from the bedroom, trying not to look at the dead Weres. She didn't have time to mourn them, to think about the sacrifice they had made for them. Her quick gaze took in the precarious position her friends were in and her heart stopped. \"Sweet Jesus, no!\" she screamed just as Lacey darted to the right coming out from behind Mara to place herself in front of the vampire.\n\nIn slow motion Rhianna watched Sandro move, batting aside Lacey easily as he loomed over Mara. \"Boo!\" he said softly and Mara instinctively stepped backwards, meeting clear air. A look of horror crossed Mara's beautiful face as it registered in her mind that she was at the head of the stairs. An instant later she began falling backwards.\n\n\"Mara!\" Rhianna screamed in anguish as she watched her friend fall.\n\nTime still moved in slow motion as Rhianna heard Mara start to scream in terror and the blond vampire spun around to reach for Lacey who was lying stunned at his feet. Mara or Lacey? She couldn't save both. Whose heart was she about to break, Rafe's or Demetri's?",
        "She reacted instinctively, blurring towards the vampire and the Were, slipping under Sandro's outstretched arms and catching Lacey around her waist. Her momentum kept her free of the vampire's grasp as she launched them over the banister, her free hand stretching out towards Mara's falling body.\n\nShe screamed her rage as the vampire crashed hard into her back. Lacey slipped from her grasp and started to fall too, and Rhianna felt tears of fury flood her eyes. They were both going to die now and it was all her fault. She screamed Mara's name again, sobbing as she watched her friends falling to their deaths.\n\nLacey felt herself falling, heard Rhianna screaming for Mara. She knew she was going to die. Rafe would go insane with grief if she did. She wasn't scared for herself, she was scared for her wonderful wolf. There would be no coming back for him from this crippling blow. Her own wolf howled loudly and suddenly Lacey felt different. The change startled her and she opened her mouth to gasp and instead howled loudly. Lacey flipped in the air and stared down at the large white paws before her, her mind slightly shocked at the sight. She had shifted!\n\nLacey shimmered as Rhianna stared at her. One moment she was human and the next the most glorious white wolf was before her, Lacey's unusual green eyes staring back at her. She made her choice, trusting in the Were's healing ability to save her friend.\n\nShe had seconds to catch Mara, very few precious seconds. She reached out, forcing her tired body to move faster than she'd ever moved before. She had no idea where Sandro currently was and she didn't care. Her hand caught Mara's outstretched arm and she pulled hard, wincing as she felt Mara's shoulder dislocate.\n\nMara screamed loudly at the pain but there wasn't anything to be done about it. It was the lesser of two evils. Rhianna managed to slide her body beneath her friend a split second before they hit the ground. She moaned in agony as her bones broke as she connected with hard floor. She tried to cushion most of the impact, to keep Mara protected in her firm embrace but she heard the other woman cry out in pain and knew that she had more damage than just the dislocated shoulder.\n\nLacey landed with a thump, automatically rolling over and howling as her leg snapped painfully hard. She managed to get to her feet and was relieved to feel that it was only one leg that appeared to be broken. She limped painfully over to the two woman lying on the floor, her head whipping around to search for the vampire. Sandro was walking slowly down the stairs as if he didn't have a care in the world.\n\nLacey spared a glance at Mara and Rhianna. Mara's face was pinched white with pain and Rhianna was trying to gently dislodge her from her body so she could force herself up. The pain on Rhianna's face was telling. She probably hadn't recovered from her first round of battle with Sandro. Which left Lacey the least battle scarred of the three. She was under no illusions that she could defeat the vampire, but if she could buy some time then maybe someone would come and help Mara and Rhianna. She growled loudly and placed her body between her friends and the approaching vampire.\n\nRhianna's mental scream of anguish rocked through Demetri and Caleb at the same time. She had unconsciously projected her fear mentally and the force of her emotions stopped them both dead in their tracks.\n\n\"Annie,\" Caleb groaned turning instantly towards the house.\n\n\"Mara!\" Demetri screamed bursting past Caleb as he raced towards the house, his heart pounding frantically in his chest. He had to get there in time. Nothing could happen to Mara. Fear he had never before experienced in his life welled up inside him as he flew through the wolves and into the house.\n\nThe sight that met him chilled him to the bone. Mara was lying cradled in Rhianna's arms, her face so white for an instant he thought she was dead and he wanted to die too. Then she moaned softly and his breath hissed out loudly. Rhianna didn't look in any better shape than Mara. His head whipped around to see Sandro playing with a large white wolf. His gut instinct was to go to Mara but he was tasked to protect Lacey and he was in no doubt that the wolf Sandro was baiting was her.\n\n\"Go to Mara,\" Caleb hissed streaking past him and crashing into Sandro spinning him away from the white wolf.\n\nCaleb's heart had faltered when he'd seen Mara and Rhianna lying in such pain on the floor. His woman was hurt and he wanted to go to her but he knew she would recover from her injuries. Mara didn't have the healing abilities his Annie did. It was crucial Demetri attend to her immediately. His gaze locked with Rhianna's and she managed a tight, pain filled smile. \"I'm fine, love,\" she whispered in his head. \"Protect Lacey.\"\n\nHe couldn't speak, couldn't let his fear and anguish sound in her head when she was being so brave. He smiled gently at her before turning to Demetri and telling him to go to Mara. Then his eyes hardened and he turned his deadly gaze to the vampire who was responsible for all the pain and death inside the house.\n\nCaleb couldn't remember the last time he had felt so feral, so intent on ensuring that he brought the maximum amount of pain to another living creature. His woman's pain filled eyes hovered in front of him, Mara's chalk white face haunted him as he plunged his talons deep inside the vampire's chest cavity and raked them downwards to his groin.\n\n\"Did you like hurting my Annie?\" he hissed in the other man's ear. \"Was causing her even a second's pain worth it? Did you really think you could just waltz in here and hurt our women, kill our friends and not have to suffer the consequences of your actions?\" He pulled his talons out and then plunged them back inside as the vampire howled in agony. He really didn't want any answers to his questions, he just wanted the vampire's pain to exceed everything he had meted out inside the house.\n\nDemetri heard Sandro's anguished cries but his eyes were fixed on Mara as he knelt down beside her. Her eyes were closed but her breath hissed out sharply. He was afraid to touch her in case he caused more pain. His ripped his eyes from Mara and looked at Rhianna. She was watching him anxiously, her lavender eyes full of pain and something else. Guilt?\n\nFor a moment he felt a savage satisfaction that she was suffering. He had given her his heart to protect and she had failed him. His rage rose up swiftly as he glared at the little redhead, his eyes condemning her to hell for not protecting his woman. He watched her eyes fill with tears, saw the sorrow on her face and his rage instantly died. \n\nShe was just a youngling. She was barely even that, more of a newborn. She didn't deserve his anger. He was the responsible one. He had left Mara human for too long. He had let her remain in the city when he should have forced her to leave. He had placed her safety in the hands of people who couldn't protect her, no matter how much they truly wanted to. \"How badly are you hurt?\" he asked gruffly reaching out and stroking Rhianna's face gently.\n\n\"Mara,\" she answered, her breath hissing out in pain.\n\n\"How much blood loss have you had, Annie? Do you have the reserves to heal her because I can't afford to give up any if I don't have to.\" He would do so if it was required because he would never leave his woman in pain but he'd prefer to retain his own blood so he could do what needed to be done.\n\n\"A little,\" Rhianna answered. \"I've enough strength to heal Mara. I've been too frightened to move her in case I hurt her any further.\" Her tears spilled over as she stared up at him pleadingly. \"I'm so sorry, Demetri. I tried to protect her, I swear I did.\"\n\n\"Hush,\" he whispered soothingly, his hand gentle against her face. \"I know you tried. She would most probably be dead if it wasn't for you. I'm going to move her now so be prepared to slide out from under her. Are you able to do that?\"\n\nShe nodded slightly, grimacing as the movement shot pain through her rapidly healing body. She hoped she would be able to move as swiftly as Demetri wanted her to. She didn't want to let him down again. Despite his comforting words she had seen the moment of rage on his face, his first instinctual reaction to Mara being hurt whilst in her care. She didn't blame him for it because she felt the same way. She should have protected her friend better.\n\nDemetri very carefully raised Mara's broken body slightly and Rhianna wriggled out with a painful breath, watching as he reverently lowered his wife to the floor. Mara groaned in pain, her eyes flickering open.\n\n\"Demetri,\" she whispered softly, her voice weak. \"I'm not dead.\" She sounded so surprised to find herself still alive and Demetri sucked in a deep breath, relief washing through him that she was conscious and talking normally, that she hadn't hurt her head and caused any irreparable damage. \n\n\"But you did let yourself get hurt, wife,\" he answered softly. \"And I did warn you what would happen, that I would not be responsible for my actions if you did so .\" He leaned forward and kissed her lips gently, a tear sliding down his cheek to land on her face. \"I'm so going to make you pay for this, Mara Bozic,\" he promised, his hands shaking as he framed her face gently.\n\nMara choked out a pained laugh. \"Bet you will,\" she murmured softly. She could feel how badly he was shaking. Could only imagine what was going through his head. She had no doubt he would make her pay but she would live with it. She had been so sure she would never see him again, that she was destined to die in this house. She could handle the crushing pain to her body because it meant she was alive.\n\nDemetri moved back from her, placing an arm around Rhianna's body to help her move closer. It was blatantly obvious the little redhead was nowhere close to being healed herself and needed the help to move.\n\n\"Annie is going to heal you, Mara,\" he said quietly. \"Do as she says. I'll be back for you soon.\" He kissed her again gently and dropped a quick kiss on Rhianna's head. \"I forgive you, Annie,\" he said so low that his wife wouldn't hear the exchange. He didn't want Mara worrying about anything and she would worry if she thought there was some discord between them.\n\nRhianna turned surprised eyes to the dark haired vampire. Surprised because she never thought she'd ever hear him utter the word forgive, especially when it came to something as important as Mara's life. He gave a small smile. \"I've been hanging around you too long,\" he said lightly before he rose to his feet.\n\nHe strode over to Caleb and Sandro and paused for a moment to watch his friend toy with the other vampire. He stepped up and halted Caleb's entertainment. \"One question, Sandro. Did Graves rescind his order to you?\" \n\nThe brief flare in Sandro's eyes was all he needed to see. Demetri felt the murderous rage bubble up inside him again and this time he didn't dampen it down. He turned to look at Caleb. \"If you've finished?\" he asked with a slight smile tugging at his lips.\n\nHis friend wiped his bloodied hands on what was left of Sandro's tattered clothing. \"Be my guest,\" he answered coldly turning away and crossing quickly to check on Lacey. She appeared to be okay though nervous of him because she was in wolf form. He kept his distance so as not to spook her, speaking soothingly. \"Everything's going to be fine now, Lacey. I'll send a Were in to help you with your change. Just stay where you feel comfortable. Sandro will not hurt you anymore.\"\n\nCaleb moved away from her, heading over to Mara and Rhianna as he heard Sandro start to howl loudly. His woman was tenderly cradling Mara's head, her bloodied wrist to her friend's mouth as she fed her blood to her slowly. He could hear the pain in each laboured breath Rhianna took and his eyes darkened furiously as he knelt behind her and gently ran his fingers down her back and up her ribs, feeling for the broken bones.\n\nHe didn't count them because he knew it would send him to that dark place he strove never to enter, the killing place where he lost everything that made him the man he was. She was healing but slowly. He knew she would be fine but he wanted to return to Sandro and rip him limb from limb for what he had done to his precious woman.\n\n\"At least your head is still where it should be,\" he whispered, kissing the side of her neck gently.\n\n\"The rest of me will be fine too, Caleb,\" she sighed softly. \"How's it going out there?\"\n\n\"The pack have decimated the humans. We've managed to keep most of the vampires away from the compound. Not the most important one obviously.\" He frowned darkly and looked back to see Demetri ripping Sandro's left leg from his body at knee level. He turned back to Rhianna and kissed her neck again.\n\n\"He came in the back window. Caleb, the Weres that were out back,\" Rhianna's voice faltered, her eyes looking upstairs to the dead Weres on the landing.\n\n\"We'll check on them, love,\" he soothed her, knowing she would feel for each and every Were who lost their lives this night. \"Just stay inside with Lacey and Mara.\" He scented the air slightly and looked out the front door. \"Nors!\"\n\nThe huge red haired vampire appeared in the doorway his expression disgruntled. \"What? I want to get back out there. It took me forever to find someone who would take the little bitch from me.\" He was furious he was away from the fight but he had stayed with the girl until one of the Weres had finally shifted and taken her from him.\n\n\"I need you here, Nors,\" Caleb said firmly. \"We've already almost lost the reason why we're all here. I need you to protect them just in case any other vampires get through.\"\n\nNors took in the scene before him. The youngling obviously belonged to Caleb, the human woman could only be Demetri's woman which meant the white wolf was the bitch they were assigned to protect. He turned his gaze to the dark haired vampire and smiled as he watched him dismember Graves' sidekick.\n\n\"Hell, Caleb. I wanted a shot at Graves,\" he grumbled even as he entered the house properly and knelt down on the floor beside them. His keen gaze could see the youngling was in pain, that giving her blood to her friend would slow down her own healing. He ripped his wrist and pressed it to her mouth.\n\nRhianna hesitated looking back at Caleb who nodded reassuringly. With a groan, Rhianna sank her fangs into the vampire's wrist and began to pull at his blood. He was an ancient which meant his blood would heal her quicker and she wouldn't suffer too badly from feeding Mara her own blood.\n\nCaleb stroked her curls lightly, fighting down his instinctive need to rip her mouth from Nors' wrist. This would heal her quicker and it was something he couldn't do for her personally at the moment. He stifled down his jealousy at her feeding from another and kissed the top of her head tenderly. \"Listen to Nors, love. Do as he says at all times.\"\n\nHe stood and looked back at Demetri. His friend was about done and he sighed with pleasure as he watched him rip Sandro's blond head from his shoulders and dumped it unceremoniously onto the floor. \n\nDemetri stared down at the dead vampire for a long moment and then turned around slowly. Caleb sucked in a deep breath as he stared into his friend's black eyes. Demetri had crossed over, anything that was remotely human gone completely leaving nothing but pure vampire behind.\n\nCaleb felt the pull of the vampire within himself, the instant need to let go and join his friend in his most feral state. He fought it down because he didn't want his Annie to see him like that.\n\nDemetri watched Caleb, a cold smile crossing his hard face as he flexed his talons loosely at his side. \"This ends now,\" he said in a dangerously quiet voice. \"Everyone dies, Caleb.\" \n\nTo be continued... "
    ],
    "authorname": "JazCullen",
    "tags": [
        "vampires",
        "love",
        "weres",
        "mating",
        "war"
    ],
    "category": "NonHuman",
    "url": "https://www.literotica.com/s/when-worlds-collide-ch-11"
}
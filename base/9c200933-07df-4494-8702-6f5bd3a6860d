{
    "title": "Mira and Alicia: College Roommates",
    "pages": [
        "Mira was my roommate in college. I had such a crush on her, but I couldn't tell her that. She worked as a waitress in one of those college hangouts where the girls wore tight blue jeans and low cut tops. The first time I went there to eat, and she was working, I couldn't believe my eyes. I had always known that Mira was pretty, but decked out for this job where the prettier and flirtier you were, the better tips you made, I could tell that Mira was raking in the dough. Or at least she should have been.\n\nMira was by far the curviest waitress in the place. She had large amazingly curvaceous breasts. The kind that earns your boyfriend an elbow in the side, because he can't help but turn and look. She also had hips. Not wannabe hips, but real knock me over, knock me out, put Jennifer Lopez to shame hips. She was not a skinny girl. No, she was a fine full-bodied woman. She had long dark hair, and wide dark eyes and round cheeks that dimpled when she smiled. She was at once cute, beautiful, sexy and pretty.\n\nAs roommates we were pretty familiar with each other, feeling comfortable changing our shirts in front of each other and stuff like that. Mira usually wore a very basic and serviceable plain bra in cream, black or my favorite, brown which matched perfectly against her skin. Even without sexy underwear, Mira's breasts looked amazing.\n\nMy own breasts, which I had always considered to be big enough at a C-cup seemed insignificant when I looked at hers. I was filled with a mixture of envy and arousal. And then, guilt. How would she feel if she knew I was having these thoughts about her? How would she feel if she knew that every once in a while when I was masturbating, thoughts of her sometimes popped into my head? And when they did, they were so sudden and so satisfying that I found myself coming almost immediately?\n\nSoon, I started thinking up fantasies that involved her right from the start. Each time I felt a little less guilty, but still strange for the first few minutes each time I saw her again. She was friendly, and even flirty sometimes but I know that she was at heart a traditional girl. She didn't come to college to experiment with her sexuality, but to get a degree and an education.\n\nI don't remember quite how it happened, but a friendly conversation turned to the topic of masturbation. \"How often do you do it?\" she asked me rather bluntly.\n\n\"Uh- I- uh,\" I stumbled and stuttered. I could feel my face turning hot and bright red.\n\n\"Oh- I'm sorry. I didn't mean to embarrass you,\" she apologized. \"I just meant, well- how much do you think is too much?\" Now she was the one to look embarrassed.\n\n\"I don't know, I guess I never really thought about it. I don't think there really is a too much is there?\" Now I was starting to wonder- maybe I was doing it too much.\n\n\"Well, sometimes I'll do it more than once a day. That doesn't seem obsessive to you?\"\n\n\"Not really,\" I mumbled, thinking about the three times before lunch that I had fingered myself that day, and thinking of her no less. \"I've heard that at least one orgasm a day is best for optimal health.\"\n\nAt this we both laughed like a couple of silly school-girls, which we were, more or less.\n\n\"Well, I've heard that there are different ways to do it,\" I told her loosing some of my shyness. \"Which I just don't understand.\"\n\n\"You don't?\"\n\nI shook my head. \"You do?\"\n\n\"Yeah, you can- Well, tell me how you do it and I'll see if I can explain another way.\"\n\n\"That's just the thing. I don't know how to explain it. I just do it, y'know?\"\n\n\"Well, um- you could show me,\" she suggested tentatively.\n\nI blushed beet red again. \"What do you mean?\" I asked, thinking surely she wasn't saying what it sounded like she was saying.\n\n\"Well, you know. Show me... Do it. I mean, just so I can see your method.\"\n\n\"I don't know. That seems really, uh, personal.\"\n\n\"Oh, you don't have to if it makes you uncomfortable.\"\n\nAll of a sudden it was like I had a hot air balloon floating in the sky, and it just sunk back down to earth. I hadn't realized how much I really wanted to do it until she gave me such an easy out. I just didn't have the guts to admit that I wanted to.\n\nThen she said, \"I promise, I'll be totally professional. Like a doctor.\"\n\nCould it be, that she really wanted me to do this too- or was she just trying to help me out? I knew that if I backed out now, I'd never have the guts to do it.\n\n\"Ok, but- just close your eyes while I get started. Then when I'm a little more relaxed you can look.\"\n\nShe shut her eyes up really tight and I slipped out of my jeans shorts and already damp cotton panties. I laid back on the bed, shutting my eyes and reached down between my legs. I was so nervous, I felt that any minute a priest was going to come barging in the room yelling, \"Sinner! Sinner! Repent!\" But of course, no such thing happened. I wasn't even Catholic, and didn't know any priests. Still, it made a powerful visual, and it was difficult to relax.\n\nI reached down to find myself surprisingly dry, probably from fear and embarrassment. Timidly, I brought my middle finger back up to my lips and sucked it past my lips to wet it. I brought my now wet finger down between my thighs and felt myself shiver at my own touch. I heard Mira inhale sharply but quietly as if surprised by her own reaction.\n\nA faint smile played across my lips as I worked my finger around in a circular motion over my clit, my breathing becoming slow and deep. I worked myself into as much of a state of arousal as my nervousness allowed me, squeezing my eyes shut and ironically trying to forget that Mira was in the room, after all the times that I had imagined that she was there with me as I touched myself this way. It proved more difficult that it would seem. For the evidence of her was all around. The sound of her breathing, the smell of her perfume and her shampoo, the knowledge that her eyes were upon me.\n\nTo make matters worse, she spoke to me, encouragingly. \"Good, now show me how you make yourself come.\"\n\nI tried, I really did. I scrunched my face up and squeezed my eyes closed real tight. I tensed my legs and willed my climax to happen. \"I can't,\" I finally said feeling defeated. \"I'm just too... too-\" the word failed me.\n\n\"To inhibited?\" she asked me gently. Yes that was the word. \"It's ok, here, let me show you another way, like I promised. Maybe that will relax you some.\"\n\nI doubted it, but I sat up and grinned sheepishly. Done with being watched, now to watch.\n\nMira was more brazen than I could have been. She leaned back against the wall and parted her legs, looking at me with a friendly smile the whole time. She seemed to have no shyness or insecurity about her body at all. Her hand went down, curved upward and two fingers pressed into her waiting slit. I gasped at the ease with which her body accepted her and her utter lack of timidity as she pumped herself to a breathless climax.\n\nAfter she recovered she said, \"So you see. There is more than one way to do it.\"\n\n\"Uh, yeah, I see that now,\" I stuttered. \"Um, how is it that you were, uh, so uh...\"\n\n\"You mean, how was it that I wasn't embarrassed or anything to do that in front of you?\" she asked, continuing to smile at me brightly. I just nodded.\n\n\"When I was in High School, me and a group of friends used to get together and watch our parents pornos that they thought they had hidden. And we usually ended up masturbating. We got pretty comfortable with it.\"\n\n\"Wow, so you guys mast- er, um all did it together?\"\n\n\"Sometimes, yeah. Not like we were lezzy or anything. We didn't have some big orgy, we just masturbated in each other's presence. Kinda like we just did.\"\n\nI turned bright red at the realization that she was right.\n\n\"If you ever need to relieve yourself, you don't have to be shy about it because of me,\" she added. Had she heard or seen me at night when I thought she was sleeping? The thought was too much to bear.\n\n\"In fact,\" she added. \"I could kinda go again. Care to have a contest?\"\n\n\"Contest?\" I asked bewildered.\n\n\"Yeah, you know, see which one of us comes first? Or which one could last longer.\"\n\n\"I'd do better at the second one,\" I laughed uneasily.\n\n\"Ok,\" she said brightly. \"Ya wanna?\"\n\nI blushed even harder.\n\n\"You do,\" she teased, \"You just don't want to admit it. Come on. On the count of three. I dare you!\"\n\nIt's not like I can't turn down a dare or anything but I just felt that there was no way to back down without embarrassing the both of us even more.\n\n\"One,\" I said wearily.\n\n\"Twoooooo,\" she tauntingly drew out.\n\n\"Three!\"\n\nAnd we were off. I reached down between my legs, sitting up this time, but looking down at the bed. From across the room, I heard my room-mate moaning loudly as if to taunt me further.\n\n\"Oh! That feels so good!\" I realized that the object of the game was to last the longest so this must be the way you make the other person loose, but I just couldn't do it. And even though I didn't want to admit it, I was enjoying Mira's sexy voice as she egged me on.\n\nMmm, Oh yeah. Touch yourself, Alicia. Doesn't that feel good? Don't you just wanna come right now?\"\n\nI felt a sharp tingle run up and down my right leg. I was close. So close. She had said my name, my beautiful sexy room-mate had said my name while she was touching herself. And I had been so close to climaxing from the excitement of it.\n\nShe seemed to sense that I was close. Perhaps she had seen me twitch, or maybe she just knew her game.\n\n\"Oh Alicia, it feels so good! Look at how wet I am!\"\n\nI continued looking down at the bed beside me, studying the pattern on my comforter, stubbornly refusing to lift my eyes.\n\n\"Come on Alicia, look. I won't tell anyone,\" she chided me.\n\nAgain, my name. I was so hot now I let myself go. I looked up to see her hand, working at her clit in the same circular motion that I had used. Her head tipped back, eyes closed her lips slightly parted.\n\n\"Oh!\" I cried out. My body tensed and I started to come, uncontrollably. \"Oh yeah, Alicia, that feels so good,\" I heard her murmuring. My climax was long and hard and amazing. For a few minutes after, I just lay there, my head feeling fuzzy unable to think or even feel shy.\n\nAs my breath slowed and my senses came back to me, I heard Mira laugh. \"I win!\" she announced gleefully.\n\nLeave it to me to come first when trying not to. I sat and stared in awe as Mira finished herself off loudly and wildly, thrashing about on the bed as she did so.\n\nAfter that, we had 'contests' on a semi-regular basis. I grew more comfortable bringing myself off in with her in the room, and even with my eyes opened, either looking at her face or even watching her hand work over her equally beautiful snatch.\n\nWhat happened next, was the most surprising and amazing part of the tale yet. One day as we were about to begin one of our contests, Mira flashed me a gigantic smile and said, \"You know, there are still other ways of doing it.\"\n\nNow I was confused. Other ways? What other ways could there possibly be? For a minute, I thought she was going to suggest that we stimulate each other for a change and an electric thrill ran up my spine. I pushed the thought away, unable to face how much I liked the idea.\n\n\"Like what?\" I asked coolly, trying not to appear to eager or too inexperienced- although she obviously knew about my inexperience, I didn't want to draw special attention to it. I already felt like a major child compared to her.\n\nShe reached between her bed and the wall and produced a hot pink object, long and thick and shaped like a phallus on both ends. She showed me, with a wicked glint in her eye, how it could bend in all manner of directions. She stretched it out for me to touch, but I drew back. \"Take it,\" she encouraged me. \"Feel it's texture. Don't be scared.\" Her voice took middle ground between gentle coaxing and chiding dare. I couldn't refuse her, although I felt self-conscious and suddenly shy.\n\nI reached out to take the thing in my hands. \"It's a jelly double dong,\" she informed me nonchalantly. I slid my hand over the ridges, built to feel like the veins of a real man, hungry with want for a woman. Mira giggled at my timidity about the whole affair, and so I feigned at boldness to cover for my true feelings, and to hide my embarrassment at being so inexperienced. \"The jelly inside is what makes it so flexible,\" she tutored me. I fought back the rising blush to my cheeks, but not before she again noticed my bashfulness and giggled once more.\n\n\"Slide closer to me,\" she said sliding back on her bed so that I could sit in front of her. My panties already lay on the floor, and my skirt was bundled up around my waist. My shirt, too was tossed aside and my breasts pulled out of my bra cups so that I could tweak them now and then at Mira's command. \n\nMira sometimes would give me suggestions while we were masturbating ourselves, she told me that she loved it when she'd tell me to do something and I would. I rarely ever refused her, for fear that she would think me a silly little girl and stop all the play. I knew that Mira was much more sophisticated than me, especially when it came to sex and I couldn't bare the thought of her thinking of me as a frightened little bunny, ready to bolt at each new idea she would introduce, although I sometimes felt like that. Each time I steeled my courage and complied with her suggestions. I had to admit, that her ideas so far had always led to a new and pleasant experience, and a greater awakening of my own understanding of myself.\n\nOnce again, I followed her prompting, and positioned myself directly across from her on her bed. She too, was scantily dressed having slid out of her tiny and damp shorts minutes ago, and thrust the bottom of her shirt up over her head to reveal her lacy half-cup bra and full sweet breasts too me. Mira was fearless in a way that I wished I could be. In a way that I felt I was always trying to make up for not being. Lucky for me I had her to push me, to make me go to the places I longed to go, but couldn't on my own.\n\n\"Let me show you how you use this,\" she told me. And for the first time in all of our days of viewing each other in such private and intimate moments, she reached out and touched me. With just her thumb, she began to make a circular motion over my clit. I flinched just a bit at her touch, and she softly shushed me as she continued to stimulate me gingerly. I couldn't believe the jolts that shot through my legs, at this, her most gentle and unexpected touch. She put the pink head of the jelly dong up to my lips and pressed. Self-consciously I took it into my mouth, wetting it with my tongue and sucking on just the head. \"It has to be wet, and so do you,\" she explained as she fed me the pink monster. She seemed to derive a real pleasure from watching me give a fake blow job to a sex toy. Sure enough she giggled again. \"You're so good at that, Alicia. I'd love to see you do it for real sometime.\" I blushed all kinds of red at that, but I also gushed a tell-tale wetness between my legs.\n\nMira pretended to be shocked. \"And I believed you when you claimed to be so innocent! Look how we you are now!\" and she punctuated it by reaching down to my wet slit and pressing two fingers inside me. She gave them a little wiggle, as if she were honestly reprimanding me and brought her fingers up to my lips.\n\n\"You're wet enough now,\" she told me, removing the cock-head from my mouth and replacing it with her own fingers. \"Just taste.\"\n\nMy own damp musky flavor, brought to me by my beautiful and adventurous friend, a female of gorgeous proportion with an almost hypnotic control over me. I let the taste linger on my tongue, until she quietly whispered that I should suck. Instinctively I followed her instruction.\n\nNow she put the dong between my legs, where her fingers had been. As she pressed it into me, I let a moan escape. I had never felt anything like this before. Mira spread her own legs and pressed the other head of the dong up against her own opening and pushed. Using the one hand that was not feeding me my own juices, she rocked the thing back and forth. As it went inside of her, it slid away from me. And as it plunged deeper into my womanly folds, it looked as if to escape from hers.\n\nShe whispered softly to me, as we shared in this delight. She said my name over and over again, and assured me that what we were doing was ok and not to be afraid. \"It feels good, doesn't it Alicia?\" she enquired. When I wouldn't answer, she asked again, more insistently, until I moaned my agreement.\n\n\"Yes, Mira. It feels wonderful.\"\n\nWe were moaning and carrying on as she pushed the implement so forcefully between us. \"Slide closer,\" she told me, \"I want a tighter fit.\"\n\nMy legs were overlaid on top of hers and I scooted in, letting the pink toy delve deeper into my snatch and hers. Barely a hand's length remained between the two of us, yet still my sexy dark-haired friend managed to thrust the fake cock back and forth between the two of us.\n\nI had cleaned her fingers and so she put her arm around my waist as if to draw me still closer. I could barely accommodate a tighter fit than what was already accomplished and so I simply bent my upper torso toward her and let her rest her chin upon my shoulder. Her free hand now went up behind my head and I went crazy with shivers as she stroked my hair so lovingly. And then she whispered in my ear, the words that I had been afraid of hearing. The words that, nevertheless I had been hoping for, for longer than I cared to admit.\n\n\"I want you, Alicia. I always have. Kiss me Alicia, please. Don't turn away my love.\"\n\nWhat could I do? I had no want to hurt her feelings. I could never imagine rejecting her in any way, so great was my fear and had always been my fear that one day she would reject me. I brought my hand so tentatively around her waist and letting my eyes flutter closed, I lifted my chin, raising my lips to hers.\n\nOnly barely, our lips touched. It took only a moment to realize that this was what I wanted and to let go of my last vestiges of fear and doubt. My tongue darted out now, searching for hers. A softer more gentle touch I had never known, it was the first time that I had ever kissed a girl and the contrast of what I had been accustomed to was sharp. My desire for her burned brighter than ever before, as if all of the kisses I had given to boys were just practice. Before, I had always thought that I knew passion, but I had been sorely mistaken. Nothing in my limited experience could compare to this.\n\nOur mouths closed over each other, lips conforming to each other, kneading, pressing so urgently. My pussy felt as if it would soon explode from the tension and pressure of the jelly toy entering and exiting, sliding over my slick parts, and her hand, Mira's hand each time, banging against my mount. Our kiss, this marvelous introduction to the mysteries of woman brought the sensation to a new level of intensity. Like a freight train rushing recklessly into a brick wall, I felt my climax approaching. Time seemed to stand still for the build up toward this wondrous orgasm that swiftly hastened though my body seemed to last forever and ever. And then all at once, we exploded together, so loudly I fully expected someone to barge through the door and demand to know what was going on.\n\nWell spent, we collapsed against each other, still entwined but unable to move our tired limbs. An uneasy tingling traveled across the surface of my flesh as my awareness began to return to me. \"Did you mean it?\" I asked, afraid to open my eyes.\n\n\"Look at me,\" she pleased. My hazel eyes looking hopefully into her dark brown ones. \"Every word, and more,\" she assured me petting my hair softly. \"I hope you feel the same.\"\n\n\"I do. I do- of course I do.\" I felt as overwhelmed then as in the moment of my climax. Something so new, so foreign and yet amazing was beginning for me, for us. I didn't know what all of this meant, or where it would lead- I only knew what I felt and what I wanted which was to lie here like this in her arms, my lovers arms, forever. ",
        "Authors Notes: I would like to thank all of you readers who give me feedback and encouragement and of course, votes. If you are a female reader and have a similar experience you would like to share with me, I encourage you to e-mail me, I would love to hear them. Maybe some of your experiences could make their way into a hot story on Literotica too!"
    ],
    "authorname": "sweetnpetite",
    "tags": [
        "feel knew",
        "motion clit",
        "slide closer",
        "good alicia",
        "mira",
        "fingers pressed",
        "lips wet",
        "circular motion",
        "closed lips",
        "beautiful sexy"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/mira-and-alicia-college-roommates"
}
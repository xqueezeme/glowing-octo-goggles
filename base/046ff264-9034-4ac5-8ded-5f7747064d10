{
    "title": "Surefoot 04: Sanction Ch. 02",
    "pages": [
        "USS Surefoot, Deck 2, Study Room:\n\nSasha told the others about the Nist invitation to the execution of her mother's murderer - but as she did, she could see the beginnings of doubt creeping into some of the faces. Jonas and Kitirik, she expected such reactions, given their passive natures. Neraxis was a surprise, but then the Bolian, for her role as the Squad's Security Specialist and her generally boisterous nature, proved in fact to be more conventional. Giles appeared mostly supportive and sympathetic. \n\nAnd she wasn't worried about Eydiir; the Capellan's culture was inherently violent, with duels, vendetta and tribal warfare a common occurrence, so there was no way her friend would saying anything negative. \n\nUntil she finished her story. Then Eydiir replied, \"No. Giles will not help you.\"\n\nGiles looked to her. \"You think maybe you'll leave that decision up to me?\"\n\nEydiir looked to Giles now. \"She has been forbidden from leaving the ship. If you aid and abet her in the theft of a shuttle, you'll end up in the stockade, and needless to say, thrown out of Starfleet.\" She looked to the others. \"We all will, if we assist.\"\n\nAnger rose like bile in Sasha's throat. \"How can you turn against me like that? You, of all people? You told me you saw your father execute the killer of your mother!\"\n\n\"Yes, I did,\" Eydiir conceded darkly. \"But it was in the aftermath of a blood feud, and it was a quick, clean, necessary act. I had no desire to see it. I certainly did not enjoy it. There was no audience. It was not made into a protracted, public affair like the Nist seem to be planning.\" Her gaze narrowed. \"This sounds... barbaric.\"\n\n\"We can't do this, Sash,\" Neraxis declared, her blue skin darkening. \"Starfleet, the Federation, they have laws, ideals, to uphold.\"\n\nSasha stared at them all in turn, appalled by the response. \"You're supposed to be my friends!\"\n\n\"We are,\" Neraxis countered soberly. \"That's why we're trying to keep you from risking your career, your whole life, because you can't take No for an answer.\"\n\n\"But it's wrong! The Captain's denying me my right to see justice done!\"\n\n\"Justice, Friend Sasha?\" Kitirik asked. \"Or Vengeance? The two seem interchangeable to many humanoids.\"\n\n\"There's no difference, Kit!\"\n\n\"Really?\" Eydiir asked.\n\n\"Sasha, the man is going to be killed for his crimes,\" Jonas pointed out. \"Whether you're there to witness it or not. I mean, until yesterday you didn't even know he existed! At least now you'll have the knowledge that he won't be spending the rest of his life on Orion or somewhere else, living off his blood money. Isn't that some sort of comfort for you?\"\n\n\"If it was, Jonas, would I be acting this way? I have to see this bastard in the flesh! I have to see him suffer and die with my own eyes!\"\n\nJonas had paled, eyes wide. \"Sasha, this isn't you... I can't believe you really feel this way about wanting to see another living being be put to death.\"\n\n\"Can't you?\" Anger was boiling over in her now, at him, at all of them, and their concerted efforts to refuse to understand, to refuse to help her. \"Maybe someone should go murder *your* mother and see how you feel then?\"\n\nEydiir slammed her fist on the table. \"ENOUGH! No matter the excuse, that is uncalled for! And if you're half the woman I believe you are, you will apologise for that, and now!\"\n\nSasha swallowed, feeling her temperature double from shame, certain her face was as red as blood. She could barely look at Jonas as she muttered, \"I'm sorry, Jonas. I didn't mean that, honestly.\"\n\nThe young man nodded, but looked like he was ready to cry, which made her feel twice as bad.\n\n\"I don't think any of us can fully know what this means to you, Sasha,\" Giles offered gently, breaking the tense silence between them. \"We've heard you talk about your mother. And I've talked with your Dad about her, too.\"\n\nSasha looked up at him suspiciously. \"You did? When?\"\n\nHe blushed a little. \"The, uh, the first night we arrived, when I ended up in the brig. We talked: about her, and you, and what he went through with the Bel-Zon.\" He coughed, averting his gaze. \"I had a closer talk with him than I ever did with my own father. Funny, that... or sad. Or maybe both.\" He looked up again. \"If your Dad says that it's wrong to want to go and see this man die, you should take his word for it-\"\n\nNow she felt her expression tighten, not at all liking the course of this conversation. And she accepted that she was not going to get anywhere with them. She wasn't going; it was a stupid idea to begin with. \"No. Of course not. I'm just... upset. Can we forget everything that happened here?\"\n\nEydiir nodded. \"It would be for the best. Take some solace in knowing the man will pay for his crimes, even if you cannot witness the payment being made.\"\n\nSasha offered them a smile. \"Yes. You're right.\"\n\nThe others seemed to relax at her concession.\n\nEydiir didn't. But she chose to stay silent, for now.\n\n*\n\nDeck 2, Mess Hall:\n\nHrelle and the Security Chief Lt. Abed were together, eating and talking business, when they saw Alpha Squad enter, approaching the replicator units. Hrelle was picking at his salad, watching them.\n\nSitting opposite him, Abed noted with a grin, \"You know, if you imagine the salad is chicken and beef, it'll seem more palatable.\"\n\n\"I doubt it,\" Hrelle said absently, nodding to the group before raising his voice. \"Alpha Squad, there are seats over here!\"\n\nSome of them looked in his direction and waved in the affirmative.\n\nSasha ignored him.\n\n\"Damn it,\" he muttered. \"She's still angry with me. It's been almost a day since our fight. I left messages on her terminal, but she's never responded.\"\n\n\"That's definitely not like her. Want me to have a word?\"\n\n\"No thanks, Prakash. Don't take it the wrong way, but I don't want her to feel like we're all ganging up on her.\"\n\n\"Captain? Commander?\" It was Giles, Jonas and the other members of Alpha Squad, carrying trays of lunch with them. \"Are you sure we can sit here?\"\n\n\"Course you can,\" Abed pointed out. \"Be warned, though, that future postings in Starfleet may be to vessels with segregated mess halls for enlisted personnel and officers, so enjoy basking in our beloved commissioned company while you can.\"\n\n\"It doesn't have to be like that. The Captain could always just give us field promotions now?\" Neraxis suggested, looking expectantly at Hrelle.\n\n\"Kiss my furry ass, Cadet.\"\n\nNeraxis chuckled, while Kitirik leaned forward towards Eydiir and asked, \"Respected Friend, am I correct in assuming that the Captain does not literally wish this of anyone?\"\n\n\"You are correct. It is merely banter.\"\n\n\"Ahh.\" The Qarari popped a replicated locust into his mouth and swallowed, looking around to ensure everyone was listening. \"So the Captain's invitation for Friend Neraxis to kiss his posterior was just an example of his being... tongue in cheek?\"\n\nGiles rolled his eyes as Kitirik chuckled in his people's unique style. \"I apologise to everyone. We've tried our best to curb this.\"\n\n\"I like it,\" the Security Officer laughed, aware of Sasha's continued contrived silence. \"Hey Sash, are you prepared for the new Talarian simulation?\"\n\nSasha picked at her curry. \"Yes, Lieutenant.\"\n\n\"Commander T'Varik isn't expecting a perfect score for your first time, so don't let her rattle you.\"\n\n\"I won't, Lieutenant.\"\n\nThe table went quiet, with people glancing at each other, including Hrelle and Abed, who continued with, \"The Captain is conducting an informal tactical class with the other Squad Leaders this evening. With his considerable experience against Orions, Nausicaans and Tholians, you could pick up a few tips.\"\n\n\"Is it mandatory?\"\n\nHrelle slammed down his fork, ignoring the looks from those around him as he glared at his stepdaughter. \"No, it's not! And how long do you intend to keep this up?\"\n\nShe still stared at her plate. \"I don't know what you mean, Sir.\"\n\n\"Damn it, Sasha!\"\n\nEveryone looked at him now.\n\n\"Captain,\" Abed prompted gently.\n\nHrelle breathed in, forcing himself to calm down as he rose. \"I'm done with my rabbit food. Lt. Abed, have Alpha Squad's Leader report to Sickbay to see about the pole she has lodged up her kiester.\"\n\nAbed decided to not to take his suggestion literally.\n\n*\n\nDeck 4, Training Holodeck:\n\nSasha sat in the command chair at the centre of the simulated bridge, eyes fixed on the viewscreen without actually looking at it, ears hearing the reports of her squad at their various stations without actually listening to them.\n\nIn front of her, Giles sat at the helm. \"Approaching Talarian vessel, stopping at four thousand kilometres and holding position.\"\n\nAt her Security station, Neraxis double checked her readings and announced, \"The vessel's weapons are off-line, no other vessels in proximity.\"\n\nFrom his station at Engineering, Jonas offered, \"They've had a radiation leak from their primary reactor, but no sign of an imminent warp core breach.\"\n\nFrom the auxiliary Medical station, Eydiir added, \"I am detecting multiple Talarians onboard, reporting injuries. I am alerting all primary and secondary medical teams to the transporter room with appropriate equipment.\"\n\nAt Operations again, Kitirik finished with, \"Captain, as per procedure I am sending communications to the Talarians offering assistance.\"\n\n\"Belay that. Tactical, power all weapons.\"\n\nAll eyes turned to her, Neraxis asking, \"Excuse me, Captain?\"\n\n\"You heard me. Power all weapons. Everyone else, focus on your stations.\"\n\nAfter a confused heartbeat, the squad returned to their own screens, as Neraxis announced, \"All weapons powered.\"\n\n\"Lock phasers and photon torpedoes on the vessel.\"\n\nNow Giles turned around in his chair. \"Sash, what the hell-\"\n\nShe ignored him. \"Tactical, I said lock phasers and photon torpedoes on the enemy vessel!\"\n\n\"No,\" the Bolian replied simply, looking shocked and appalled, even if it was all just a simulation.\n\nSasha turned and faced her, her body and face and voice all taut fury. \"You're relieved of duty. Mr Arrington, take over Tactical, follow my orders!\"\n\nGiles rose - but didn't move. \"No, Captain.\"\n\nNow Eydiir rose, approaching her. \"No more, Sasha. You cannot continue like this. This is not you. You are acting irrationally. You have insulted your friends. You have spoken of breaking Starfleet regulations. And your actions here have gone against the ideals I know you possess.\" She reached out, resting a hand on Sasha's arm. \"Please, let us help you-\"\n\nBut Sasha pulled away, looking ready to strike her.\n\nA familiar voice filled the room. \"Computer: Pause Training Scenario.\" Seconds later, T'Varik entered through the simulated bridge doors, striding up to Sasha. \"Explain your actions.\"\n\n\"Shouldn't you be asking that of those crewmembers who refuse to obey orders, Commander?\"\n\n\"Cadets Nemm and Arrington were within their rights to refuse orders which contravened Starfleet policy about the treatment of hostiles in wartime. The Talarian ship was depowered, its weapons offline-\"\n\n\"We faced depowered Talarians before, and we still lost people because they decided to commit a selfish, murderous act of self-destruction, and take as many of us along as they could.\"\n\n\"That was a different vessel, a different situation-\"\n\n\"The Talarians have proven themselves to be cowardly murderers! They forfeited any rights or considerations under civilised law! Punishing them now before they kill any more Starfleet personnel is the quickest, easiest course of action to take!\"\n\nThe Vulcan's face tightened. \"Cadet Hrelle, this scenario is not designed for you to find the quickest, easiest course. Life does not function like that. Especially not life in Starfleet. The decisions you make as the captain of a starship will almost always be difficult ones-\"\n\n\"Excuse me, Commander,\" Sasha interrupted archly. \"But what the hell do *you* know about commanding a starship anyway? You've spent your entire career hiding away at the Academy, sending others out into space to do the real work! Like the human saying goes, 'Those who can, do. Those who can't, teach.'\"\n\nT'Varik regarded her for a moment longer, before responding with, \"Cadet Sasha Hrelle, effective immediately you are suspended from active and academic duties pending disciplinary action and a Counseling assessment. You are dismissed.\"\n\nSasha trembled with rage, but turned and departed.\n\n*\n\nDeck 2, Counselor's Office:\n\n\"What am I supposed to do? Why am I not reaching her?\"\n\nKami shrugged. \"Because she's a stubborn bitch?\"\n\nHrelle frowned. \"That's not funny.\"\n\n\"It's not meant to be. She's a stubborn bitch. So am I. All the best women are.\" She leaned against her desk. \"Was her mother like that?\"\n\nHe refused to answer. Instead, his stomach growled. Loudly. \"Fucking diet.\"\n\nKami smirked, before moving to a nearby table, returning and dropping a plate of half-finished shuris pie. \"This is left over from my lunch.\"\n\n\"Mother's Cubs...\" He had smelled it from the moment he entered her office, and tried to ignore the cravings it raised in him. He lifted it up and began greedily devouring it, flakes flying about as he swallowed the delicious portions of meat with a minimum of any damn vegetables.\n\nShe sat down again as he made sounds. \"Should I leave you two alone?\" The Caitian ran her claws through her mane. \"I'll go and have a word with her.\" When her door buzzer sounded, she called out, \"Enter.\"\n\nAs he saw his First Officer enter, Hrelle pushed the plate with the remains of shuris pie back across the table towards Kami.\n\nKami reached over and dusted off the flakes clinging to his uniform. \"Don't worry, it's not your Mom. Promise you won't tell Dr Ling on him, Commander?\"\n\nT'Varik looked sober, even for a Vulcan. \"It is fortunate that you are together to hear this. I have just suspended Sasha from duty.\"\n\nHrelle rose to his feet to join them. \"What?\"\n\n\"She chose to resolve the Talarian holodeck simulation by ordering the destruction of the Talarians. When I confronted her about it, she insulted me.\"\n\n\"She insulted you? What did she say?\"\n\n\"The content is not important. I am here to request that the Counselor assess her mental and emotional state.\"\n\n\"I'll assess it,\" Hrelle promised. \"I'll assess the hell out of it-\"\n\nKami reached out and patted him on the shoulder. \"Down, boy, and cork that testosterone. Leave this to be settled by the women.\"\n\n*\n\nDeck 2, Gym:\n\nSasha had changed into her exercise clothes, needing to blow off from steam, and took advantage of being alone to kick and punch at the padded columns set up in one corner of the room, where the floors were also padded. She flexed her fists and tensed as she struck out, her soft-soled shoes sending waves of pain with each kick she made, and grunted and cursed with each strike.\n\n\"Nice form.\"\n\nShe stopped and faced the intruder. \"What do you want?\"\n\nKami slipped out of her jacket and cast it aside, before reached up and ponytailing her mane. \"You already know. I was going to see you later today, but obviously the business with T'Varik has forced me to move it up to now. We have to talk about what's going on. \"\n\n\"No. We don't.\" She started towards the doorway.\n\nThe Counselor reached out and grabbed her by the arm, stopping her. \"Yes. We do.\"\n\n\"Let go.\"\n\nKami batted her eyes teasingly. \"And what if I don't?\"\n\n\"You'll regret it.\"\n\nNow the Counselor purred. \"Ooh, that almost sent a chill down my spine. You've been taking lessons in intimidation from your father.\"\n\nSasha's face darkened. \"He's not my father. Now let go!\"\n\nKami didn't move.\n\nSasha swung out - only to find herself flung to the mats, with Kami standing over her, looking down to flex the three large toes on each of her bare feet. \"I read that you reached the Fourth Tier on the Academy's K'Gresirr team. Pretty impressive - for a non-Caitian.\" She rolled her neck. \"Come on, get in position and show me what you got.\"\n\nSasha glared up at her. \"I'm not fighting you.\"\n\n\"Well, that'll make it easier for me, then.\" Kami stretched her limbs, her tail swishing in anticipation behind her, her hands raised in an opening move. \"Don't worry, I'll keep my claws in. Wouldn't want to scratch that thin skin you've been sporting lately. K'Nill!\"\n\nSasha glared at her a moment longer, ignoring the traditional call to begin the fight. She helped herself up and turned to leave.\n\nAnd thus wasn't ready for Kami racing up and slamming her foot into the back of one of her knees, sending her down to the mats again.\n\nThe tension of the last day erupted from her. Sasha rose and twisted into an attack pose. \"You want some? Come and get some!\"\n\nShe charged, striking out in the swift, wide arcs favoured by the Caitian martial art. Kami dodged them easily, offering only playful slaps in return, as they danced around each other. \"I'm a bit rusty. But this is my people's fighting art. As good as you are, there are things you are simply not physically capable of doing.\"\n\nAs if in demonstrations, Kami sent Sasha down to the mats again.\n\nThe girl looked up, wiping blood from the corner of her mouth. \"What's wrong, Counselor? Finally claiming him for your own?\"\n\nKami's gaze narrowed. \"Oh, you're better than that, Sash. And you're better than this, too.\"\n\nSasha rose and struck out, again and again, harder and harder each time. And each time, Kami blocked the blows. And when she chose to dodge instead of block, letting Sasha swing out into open air, it only angered her further. Her arms ached. Her head felt like it was about to explode.\n\nNow she stopped and straightened up, still facing Kami, breathing hard, bent over. She started towards her, but the Counselor held up a hand. \"K'Nuran!\" With the traditional call to end the fight, Kami straightened up as well. \"Between my agility and your age, we're evenly matched. Maybe now you're ready to talk about what you're feeling-\"\n\nSasha twisted and kicked out, slamming her foot into her opponent's crotch and sending the Caitian flying backwards.\n\nKami was completely unprepared, collapsing into a foetal position as Sasha pursued, dropping, grabbing and twisting the female's tail until she screeched, striking out with her elbow. But Sasha was ready for it, blocking the elbow and pinning the arm back, allowing Sasha to drive her fist into Kami's muzzle.\n\nSasha returned to her feet. \"Don't you DARE try to counsel me! Rmorra, your husband, the father of your cub, was MURDERED! Taken from you! For some worthless broken pottery on a forgotten planet! Your cub grew up without him around, will never present him with a mate or grandcubs! And you'll spend the rest of your life never growing old together, never seeing him, never holding him again! I know if you had the chance to see his murderers die, you'd take it in a heartbeat! \n\nBut you, my friends, T'Varik, and that son of a bitch on the bridge would deny me that, preaching ethics and civilisation and other shit! You sanctimonious hypocrites!\"\n\nKami held her muzzle, certain she'd felt it crack as she tasted blood in her mouth. \"Sash- We're trying- trying to help you-\"\n\nSasha's face tightened as she released the tension in her fists. \"Then treat me like an adult. And let me make my own decisions.\"\n\n*\n\nDeck 4, Sickbay:\n\nHrelle stormed through the doorway. He hated these places. He hated being a patient in them. He hated even more visiting others in them. The report that brought him down here was succinct, and so didn't prepare him for the shock on seeing Kami sitting on the edge of one of the biobeds, wincing as Dr Ling worked an autosuture on the Counselor's muzzle. \"What in the Seven Hells-\"\n\nKami held up a hand towards him. \"Shush. Too loud. Head ringing.\" She hissed when the doctor pushed the autosuture too close.\n\nDr Ling gave her a look, but said nothing and continued.",
        "\"You want to tell me what happened?\" Hrelle demanded softly.\n\n\"A counseling session with Sasha, by way of a K'Gresirr match.\" She winced again, resting her hand on her lap. \"I called for K'Nuran, but then she got me with an illegal kick to my babymaker, before wrenching my tail and then finishing me off with a shot to the face.\"\n\n\"Son of a... what the hell happened to 'Leave this to be settled by the women'?\"\n\nKami winced again. \"It *was* settled. To be fair, I got a few illegal shots of my own first.\"\n\nJust then T'Varik entered from an open doorway leading into the area of sickbay where the other beds sat, and patients could be treated with more privacy. \"Cadet Hrelle has not been severely injured. She remains disturbingly sullen and unresponsive, however.\"\n\nHrelle growled, turning to the door. \"She'll respond to me-\"\n\n\"Esek, wait!\" Kami winced again, clutching her lap. \"Damn, that girl knows how to literally hit below the belt.\" Then she looked up at him. \"We have to talk.\"\n\n\"After I've dealt with her-\"\n\n\"No. Now.\" She breathed in, ignoring the doctor's continued ministrations. \"Captain... after due reconsideration, I think that you should take her to Tau Beta.\"\n\nHrelle exchanged bemused expressions with T'Varik, before responding. \"What? After all you said to me about letting the past rest-\"\n\n\"That was my advice to you, and if it was just you, I'd stick to that advice. But Sasha isn't you. As a medical practitioner, I can confirm that not everybody responds the same way to the same treatment.\"\n\nDr Ling harrumphed at that and departed.\n\nKami continued. \"It may involve the same criminal and the same crimes, but Sasha has a different set of life experiences to you. I... I think she needs this.\"\n\n\"I must admit to being disturbed by this assessment,\" T'Varik admitted. \"The cadet requires continued counseling-\"\n\n\"Which I will of course provide regardless - but it's not guaranteed that she will respond in a positive way. And there's a time factor involved now: it will take days to reach Tau Beta in time.\" She looked to Hrelle. \"If it's missed, it will be an opportunity forever lost, and she may never forgive you for it.\"\n\nHrelle's stomach twisted into knots. \"And you really want me to take her?\"\n\n\"No. I really want her to see reason now and not have to put you through this. But we all know we don't always get what we really want. She is going to be affected by this, whether she attends the execution or not. And I have to reluctantly conclude that letting her go to this hellish thing will cause her less psychological and emotional damage than forbidding her.\" She touched her muzzle, moving it this way and that. \"Regret for the things we do tends to be more repairable than regret for the things we don't do.\"\n\n\"I remain dubious about the argument,\" T'Varik commented. \"But I will accept your counsel on this matter.\" She looked to Hrelle. \"And though I acknowledge your initial unwillingness to attend, Captain, it would be logical for you to accompany her as her guardian. You did, after all, receive an invitation yourself.\"\n\n\"Yes,\" Kami agreed. \"She'll want to go alone, knowing how you feel about it. Absolutely refuse that demand.\"\n\n\"Damn right I will.\" He looked to his first officer. \"Make the necessary contacts to the Nist, do the admin work to sign us both off, and get Chief Grev to ready the Sureswift for an immediate launch.\"\n\nT'Varik nodded. \"I would strongly recommend another pilot accompany you, for safety and security reasons.\"\n\nHe nodded back, thinking for a moment before looking to the two women again. \"I don't want to take a full crewmember away for so long. How about Giles? Do you think he would do it? They seem to be getting along together better now than at the start. I wouldn't order him to do it, of course, but...\"\n\nT'Varik considered the suggestion. \"Normally I would expect to have him serve as Acting Squad Leader in Sasha's absence, but he does have the necessary practical qualifications, and they can both continue their studies together.\"\n\n\"Yes,\" Kami agreed. \"It would be good for her to have a peer. As well as someone else to talk to.\" She looked rueful now. \"I have a feeling it's going to be chillier than an Andorian winter onboard that shuttle for a while.\"\n\nHrelle believed her, turning and entering the other sickbay room, where Ling was running a final check on Sasha before leaving her with her stepfather. She sat there, dour, finding other things in the room to look at.\n\n\"I've changed my mind,\" he announced. \"I'm taking you to Tau Beta.\"\n\nNow Sasha looked at him, regarding him, as if checking to see if he was joking or not.\n\n\"We leave in an hour,\" he continued. \"Bring civilian clothes; we can't attend this damned thing as representatives of Starfleet.\"\n\n\"I can go alone.\"\n\n\"That's not up to you.\"\n\n\"I don't need you with me-\"\n\n\"YOU DON'T GET TO DICTATE TERMS HERE!\"\n\nShe winced, drew back from him, looking as utterly shocked as he felt by his own outburst. Looking fearful, as she had never done before by him.\n\nHe wanted to apologise. He wanted to keep yelling at her. To shake her out of this and convince her how wrong this was. He wanted to crawl away in shame for scaring her like this, despite the circumstances.\n\nInstead he forced himself to relax, to keep his following words on the level of a whisper. \"And you'll apologise to both the Counselor and the Commander for your behaviour to them. And be thankful *we* weren't fighting. If you tried to sucker punch me the way you did Kami, Dr Ling would still be trying to wake you up.\"\n\nHe turned and departed, ignoring the looks from Kami, T'Varik and the others as he stormed out of Sickbay.\n\n*\n\nSomewhere Else, Six Years Ago:\n\nHrelle's slave cell pen was a stark, cold enclosure with floor mats, an open toilet and no privacy. Most of the thirty slaves slumped to the floor, tired, hungry and despondent. Peran, however, proceeded to the secret compartment in the floor near the corner where they hid things they had collected, notably horrible ration sticks they had saved for times such as this. \"Here, some for everyone.\"\n\nHrelle had his back against a wall, looking at all of them, thinking about the failed attempt. Everything should have worked... they should have been on their way by now... but now he allowed himself to be distracted by the Bajoran. \"I thought we agreed not to dip into our emergency rations without a vote.\"\n\nPeran looked back, offering a slight smile. \"My apologies, Captain. You are correct, of course. Should I take the food back while we carry out the proceedings?\"\n\nBeside Hrelle, the Klingon, Krihoq, watched with his one good eye, the other one an open socket that he had earned from the Breen months before, along with several smashed skull ridges, and snarled, \"Bring me my ration stick, you ptakh, or I'll feast on your miserable bones.\"\n\nPeran never looked back as he continued handing out the food. \"You would find me poor sustenance, Klingon. Bajorans are held together with gristle, prayer and bad luck.\"\n\n\"Mostly bad luck, I hear.\" Nitreek sat as far away as she could from Krihoq as she accepted a stick. She was a frail-looking, pale, coal-haired woman of Uhlan rank, a former technician on a Romulan surveillance craft who survived its self-destruction when they were attacked by Orion raiders. Somehow, the girl had been sent here instead of being forced into sex work somewhere else; whether that was a fortunate mistake for her or not was not for Hrelle to say. \"It's a wonder the Cardassians haven't exterminated your people outright.\"\n\nPeran handed her a stick, unoffended. \"But if they did that, who would they have to look down on?\"\n\nHrelle exchanged glances with Peran as he accepted his own ration, the two of them almost smiling despite the circumstances. Hrelle once more thanked the Great Mother for having the man here; what he lacked in combat or technical skills, he more than compensated for with his counseling. And his nous. \"Hold it, Monk.\" He split his own ration stick in two. \"You seem to have miscounted. You forgot to take one for yourself.\"\n\nPeran looked at the proffered half. \"That's okay, Captain. I am fasting. It is a Bajoran religious holiday.\"\n\n\"Oh? Is it the Feast of Talking Crap? Eat, or I'll pin you down and feed you.\"\n\nOpposite Nitreek, Raul Ortez, an older Terran male, a former officer with the Federation Merchant Marines, with receding grey hair and hangdog features, rose to stared at them in disbelief. \"How can you just sit here, acting like nothing's happened?\"\n\n\"We know what happened,\" Hrelle noted between bites. \"We tried to escape, and failed.\"\n\n\"Yes, but why? The Breen suddenly had their brute squad surrounding us! Without warning! That was no coincidence!\"\n\n\"What are you saying?\"\n\n\"I'm saying that the only way they could have shown up like that was if they were tipped off! Someone here betrayed us!\"\n\nThe room held its breath, but everyone rose to their feet, looking to each other before Hrelle declared, \"Your hunger's talking. And your disappointment.\"\n\n\"No,\" Nitreek disagreed warily. \"He's right. We've watched them carefully, monitored their shifts, the arrival of the freighter, the change in work rotas and the security sweeps... everything was accounted for. Except betrayal.\"\n\n\"I refuse to believe it,\" Hrelle declared, shaking his head. One of them would betray the rest? Nonsense. \"Maybe there was something we didn't account for? Maybe they've been secretly monitoring us, knew all along what we were going to do?\"\n\n\"That is not their way, Captain.\" It was Yerpsek, a Yridian engineering specialist taken from one of his people's merchant craft. With his big ears and ubiquitously-wrinkled pink skin, he looked like a shaved rat soaked in vinegar and left in the sun too long to dry, but he maintained his people's reputation for furtiveness, as well as information gathering. \"The Breen are as blunt and obvious as hammers. Their policy with regards to their slaves is not pro-active, just reactive.\"\n\n\"Exactly!\" Ortez shouted, looking to the rest of the group, feeding their growing shock and anger. \"Thanks to your poor leadership, Captain, we have a traitor among us, scuppering our plans!\"\n\nThat drew more sounds of outrage. Hrelle glowered at the man; he had been in nominal command of this group before Hrelle had arrived, and always resented how the others voted the newcomer, with his size and Starfleet experience into leadership. Now, while he did his part to work towards their mutual freedom, still he always took every opportunity to erode Hrelle's standing among them. And this latest failure was a golden one for him.\n\n\"No!\" Hrelle shouted them down, gaining their attention once more from sheer force of will. \"Why in the Seven Hells would any of us damage our chances of escape?\"\n\n\"Maybe there are those among us who are naturally inclined towards treachery?\" Nitreek suggested, shooting a look at Krihoq.\n\nThe Klingon growled, baring his teeth.\n\n\"Stow it, you two.\" Hrelle continued to address the crowd; without their support, he would have no leadership, they would have no unity, and they would never get out of there alive. \"This is about our mutual survival. Yerpsek, you're our Breen expert. Do they ever offer bribes or rewards to prisoners for information?\"\n\n\"No, Captain. They are too assured of their ability to overcome any rebellion or escape attempt.\"\n\nNow Hrelle focused on Ortez. \"There, see? I'd love to hear what other possible reason someone here might sabotage our efforts.\"\n\nOrtez was sullen and silent, as were the others. Hrelle was ready to dismiss such talk and begin planning for the next attempt.\n\nUntil someone did speak up. \"There may be another reason, Captain.\"\n\nHrelle turned in place. \"Peran?\"\n\nThe Bajoran monk had his hands tucked into the tattered folds of his robes, his face worn and sad and regretful. \"It may be because a member of your group had a vision. A vision from his Prophets. A vision that told him to stop the escape, as it was doomed to fail, resulting in the deaths of all.\"\n\nNo. No... \"Peran... it can't be...\"\n\n\"YOU, Monk?\" Krihoq exclaimed, his one eye saucering. \"You betrayed us?\"\n\n\"I refuse to believe it,\" Nitreek frowned.\n\n\"That's because it's not true.\" Hrelle approached his friend warily. \"You're covering for someone else, aren't you? You have to be.\"\n\nBut the look in Peran's tear-welled eyes told him otherwise. \"No, Captain. This all falls upon me. As I stood distracting the Breen by the bay door, my mind cleared, and... and the Prophets spoke to me. It was not the first time; I remember them coming to me as a boy, guiding me to the people who would protect me and lead me off of my homeworld to escape the Cardassians. \n\nAnd they returned to me today. They told me that if we entered the freighter and departed, it would have been blown to pieces within minutes because of a faulty baffle plate on their warp core. Now was not the time to try and escape. I couldn't get back to you to warn you, the plan was already in motion. So... I informed the Breen.\" He swallowed. \"I am truly sorry, Captain. All of you. But I promise you, my vision was real.\"\n\nHrelle felt as if the Breen had stunned him again. \"Why... Why did you have to say anything? You could have kept quiet-\"\n\nPeran smiled. \"I am not one for hiding the truth, especially when it involves my faith. And if this was not settled now, it would have ripped this group to shreds.\"\n\n\"Hah!\" Ortez crowed, turning to the others again. \"So much for Starfleet's assurances about there being no traitor, eh?\" As he cultivated more fury, the man looked more confident than Hrelle had ever seen him. \"Your Bajoran friend condemned three of our fellow prisoners to death, and us to further servitude in this Purgatory! Now... what do you intend to do about it?\"\n\nHrelle still stared at Peran, wanting to throttle him, wanting to shield him. He looked so regretful about the outcome of his sabotage, and yet still resolute that his act had been the correct one. Now he faced Ortez, growling, \"What do you expect me to do?\"\n\nCruel satisfaction marred Ortez's features. \"That should be obvious. There's only one punishment for betrayal among us, Caitian.\"\n\n\"No!\" At the protests from the others, he repeated, \"No! We are not animals! We have to be better than our captors!\"\n\n\"Well, that's not surprising!\" Ortez addressed the crowd as well. \"Of course he's going to protect his friend!\" At the urging of the others, he faced Hrelle once more. \"I say we call a vote! All those in favour of the Bajoran being killed for his crimes against us, raise your hand!\"\n\nSo many hands rose. Nearly all of them.\n\nHrelle met all their expressions, silently pleading with them individually - Nitreek, Krihoq, James, Yerpsek, Al-Haq, Yung, O'Hanlen - but failing to reach them.\n\n\"I believe that's almost unanimous, Captain,\" Ortez sneered. \"And as our leader, it falls upon you to deliver the sentence.\"\n\n*\n\nUSS Surefoot, Deck 2, Alpha Squad Quarters:\n\nGiles shifted in his place on the floor, silently avoiding Neraxis, sitting opposite him, teasing him once more by nudging his foot, as all of them continued to silently study the notes they collected for the latest Astrophysics exam. The group had been subdued after the incident in the holodeck; Giles hoped that the Commander, the Captain and the Counselor could sort things out.\n\nThoughts of family returned him to the visit he had from his aunt Lucille, captain of the Impala, who pursued him here to assign him the task of spying on Captain Hrelle and relaying any intelligence on an encrypted communicator she'd given him. He hadn't done it - yet - partly because he felt terrible about doing it, partly because... there was nothing to report.\n\nCaptain Hrelle was unconventional, of course, but he never did anything suspicious. What could he do? They were on a simple run around the Leonis Sector, delivering supplies and maintaining buoys. The ordinariness here outweighed any extraordinariness that could occur, and Aunt Lucille's claims that Captain Hrelle must have been some sort of undercover spy or criminal seemed outlandish.\n\nThe door to their quarters buzzed, waiting for Eydiir, sitting next to Jonas and appearing more sullen than usual, called out, \"Enter.\"\n\nThe door slid open, and Captain Hrelle's large frame filled the doorway as Alpha Squad rose to their feet. \"Apologies for the interruption, but may I speak with Mr Arrington privately?\"\n\n\"Me, Sir?\" Giles glanced at the others, before continuing with, \"Of course. Where?\"\n\nThe Caitian nodded to the door that led into the squad's bedroom, following the younger man inside and letting the door to it slide closed again. He glanced around the set of three bunk beds and the clothes and other possessions, his nostrils wrinkling in disgust. \"Seven Hells, teenagers stink...\" He shook his head. \"Sorry. How are you and the others doing, Giles?\"\n\n\"Us, Sir? We're, ah, we're okay.\"\n\n\"Good, good. This... business with the Nist has been upsetting, to say the least. Sasha did not take my forbidding her to attend very well.\" Hrelle frowned. \"But I've since changed my mind, thanks mostly to the Counselor. We're hoping to leave in an hour. And Commander T'Varik has suggested that I bring another pilot along, to cover for me, and to mind the ship while we're at the Nist outpost. I was thinking you might be interested in the job?\"\n\n\"Me, Sir?\"\n\nHrelle nodded. \"You have the experience, both with piloting and with spending long periods of time in a small environment - if I recall correctly, you once told me you went alone for eight days in your solar yacht around Beta Aquilae.\"\n\nGiles paled, surprised that he would remember a detail like that. \"Yes, Sir.\"\n\n\"Well, this is gonna be longer: five days there and five days back, with a few hours waiting for us. The Sureswift is better equipped than any solar yacht, with a replicator, sonic shower, entertainment unit, the works... and, if you accept this, you'll be in command of both the vessel and the mission.\"\n\n\"In command? Me? Why?\"\n\n\"I don't expect you'll face any trouble with the Nist while we're at the outpost, but I want you to have the necessary credentials just in case. The time away from the Surefoot will count towards both your Command and Long Range Mission Academy credits, as well as earning actual time in service and pay. T'Varik is arranging for you and Sasha to keep up with your studies and take the Astrophysics exam remotely, so neither of you will fall behind.\" Hrelle then offered a smile. \"And you'll be one of a select few to pilot a ship at a sustained Warp 9.5. And in a ship that small, you can almost feel the dilation of the space outside when you touch the viewport.\"\n\nThe thought of that was... enticing, Giles had to admit to himself.\n\n\"There will be a downside, however: chiefly being stuck onboard for something more than ten days. And... Sasha and I aren't on friendly terms at the moment. Hopefully we can come to terms with this, but... she could probably do to have someone around besides me.\" He smiled. \"So could I. I might even bore you with a few stories of my time on the Furyk.\"\n\nGiles smiled back. It sounded like an incredible opportunity for him, despite the circumstances. \"I'd... be honoured, Sir.\"\n\nHrelle nodded. \"Then you'd better pack. Report to Aft Shuttlebay at 1700 Hours and begin pre-flight checks on the Sureswift.\"\n\nGiles straightened up. \"Yes, Sir.\"\n\nThen the Captain departed, leaving Giles staring out the door, before dropping to reach under his own bunk and collecting his case to pack.\n\n\"Giles?\"\n\nHe looked up to see Eydiir, Jonas, Neraxis and Kitirik all crowding around the doorway, all obviously curious about the meeting leaving Eydiir to express it. \"What was that about?\"\n\nHe was flinging clothes, underwear, socks into his case. \"The Captain and Sasha are going to the execution now. They need me as a co-pilot... well, actually the Mission Commander.\" He couldn't help but be excited over that.",
        "\"Really?\"\n\nHe looked up at the Capellan girl, wondering if the dubious noise was some sort of dig against his being selected. Then he saw the concern in her eyes for Sasha. \"Yes, really. I think the Counselor had something to do with it.\"\n\n\"I never would have expected it,\" Jonas admitted. \"Maybe there's more to it?\"\n\n\"Sure, Scrappy,\" Neraxis quipped. \"They're both really on a secret mission. You'll have to keep an eye on them, Giles.\"\n\nGiles continued to pack. \"Yeah...\" He turned over a sweater, finding the communicator. Acting as casually as he could, he added it to his case and continued packing, just as a familiar voice from the entrance to the quarters drew everyone's attention. \"What's going on?\"\n\n\"Sasha!\" Jonas exclaimed. \"Your father was just here-\"\n\n\"You mean the Captain, don't you?\" Sasha squeezed past them and into the sleeping section, glaring at Giles. \"What are you doing?\"\n\nHer tone was challenging, angry, and made him start for a moment, until he remembered what Captain Hrelle had said, and finally replied, \"Your fa- the Captain asked if I could come along, to co-pilot. Hope that's okay with you.\"\n\nShe stared back blankly, before nodding and going to her bunk to get her own case.\n\n\"Sasha... are you sure...\" Eydiir offered tentatively.\n\nBut the girl never looked up. \"Make sure everyone passes the Astrophysics Exam; Giles and I will be taking it remotely.\"\n\nHer tone ended any further discussions then and there...\n\nTO BE CONCLUDED"
    ],
    "authorname": "Surefoot",
    "tags": [
        "star trek",
        "science fiction",
        "space",
        "federation",
        "caitian",
        "starfleet",
        "starfleet academy",
        "starship",
        "alien11111",
        "fanfiction"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/surefoot-the-nist-sanction-ch-02"
}
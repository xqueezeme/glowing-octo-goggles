{
    "title": "You Get What You Paid For Ch. 05",
    "pages": [
        "When Adam realizes I've stopped following him, he turns and laughs at my stunned expression. \"Ted?\"\n\nI just stare. \"*This* is where you wanted to take me?\" I ask, happy I let him convince me to at least wear a button-up and the nicest jeans I own. I was perfectly content slumming it in sweatpants and a t-shirt, but with Adam dressed in some crisp, belted, form-fitting slacks and the most luxurious-looking black crewneck I have ever seen, it was clear this date was going to be special.\n\n\"Yes,\" he says, walking back over to me. With a smile, he slides his hand down to mine and locks our fingers together. \"C'mon.\"\n\nI let him pull me further down the dock towards the plank that leads up to the deck of a yacht - a fucking *yacht*. He said he wanted to take me somewhere simple, but either he has some wild notions about simplicity or he was just teasing me. It's beautiful, though. Since it's nighttime, crossed strings of hanging lights illuminate the deck with a soft, romantic glow. Cushioned benches line most of the perimeter of the back, all decorated with throw pillows and more ropes of lights wrapped around the railings. There's a small table with a cooler of what looks to be champagne placed in the center, surrounded by skinny white candles. And is that music? Jazz? It's soft, and I can't tell exactly where it's coming from - but it's the perfect volume for me to feel relaxed.\n\n\"Is this... yours?\" I ask, bewildered. I wasn't aware he owned a damn yacht.\n\n\"Well... No,\" Adam says with a laugh, letting go of my hand so I can look around. \"It belongs to one of my friends from work, so be nice to the yacht or I'll have hell to pay.\"\n\nJesus, who knew being an escort would be this lucrative. \"It's... impressive,\" I say, eyeing how immaculate everything looks. \n\n\"Yeah?\" Adam asks. \"Not too much?\"\n\nSurprisingly, no. When I look past the fact that it's a yacht, it has a quaint sort of feel to it. It doesn't look like it'd be the type of yacht to feature a frat party. Something intimate and classy seems more fitting. \"It's great,\" I say, looking back at him with a smile.\n\n\"Good.\" He smiles back at me for a soft moment before a thought pops into his head. \"Oh! Champagne!\" he says, heading right over to the table. I chuckle at him before I head to the very back of the boat, standing in front of the railing and looking off into Lower Bay, watching the way the moon and the lights on the yacht reflect off the water. Adam dragged me all the way to Staten Island for our \"first real date\", and I'm glad he did. A quiet night on the water, with no one else in sight? It's quite romantic of him.\n\nHe comes up behind me stealthily enough to sneak a kiss on my neck, and I chuckle a bit, turning towards him as he stands next to me and offers me a glass. I take it, mouth watering at the sight of the bubbly champagne as I start to bring the drink to my lips. But Adam stops me. \"You're supposed to do cheers, first,\" he says.\n\nI cock and eyebrow. \"Is that escort tradition or something?\" I joke.\n\n\"That's an everywhere tradition. Get with it,\" he says, grinning at me before clearing his throat and standing up straighter. \"I'll keep it short 'n sweet: cheers to... further exploring what we already have.\"\n\nIt may be a short toast, but it hits me in the best way. I feel my chest almost humming to me, vibrating softly, contentedly. I smile gently. \"That was kinda beautiful,\" I admit, reaching over to gently tug on his shirt.\n\n\"You're supposed to say 'Cheers',\" he mutters playfully.\n\nI roll my eyes, clinking my glass against his. \"Cheers, you idiot,\" I say.\n\nHe laughs as he brings the rim of his glass to his lips and gulps down some of the champagne. I do the same, the fizz tickling as it goes down my throat. \"So,\" Adam says, \"the plan is to relax and enjoy the evening. Hope you're okay with that.\"\n\n\"I'm very okay with that,\" I tell him, smiling brightly.\n\n\"I figured,\" he says with a grin. \"I'm having dinner delivered, so it should be here in...\" - he checks his phone quickly - \"well, any minute now.\"\n\n\"Delivered, huh?\"\n\n\"Yup. We're having Fijian albacore sashimi and a pea tendril salad topped with glazed hazelnuts and drizzled with an agrie-doux melon cilantro vinaigrette.\"\n\nI stare at him blankly, completely pausing. \"Seriously?\" I ask, wondering if my face gives away the fact that I understood basically nothing that he just said.\n\nBut turns out he was joking. He breaks his deadpan presentation of that joke with a laugh. \"No,\" he says chuckling to himself. \"I got pizza.\"\n\n\"Oh, thank God,\" I say with a sigh of intense relief, laughing before I push his chest. \"You really fucking had me.\" He knows pretentious-, expensive-sounding meals scare me, and I was afraid that he took this whole \"official first date\" thing too far.\n\n\"I know you don't like all that fancy nonsense,\" he says, \"so I figured we'd keep it simple.\"\n\nI smile gently, appreciating that he understands me - though I do want to tease him a bit. \"Having a moonlit dinner on a yacht is simple?\"\n\n\"A 'Thank you' would suffice,\" he says with a grin.\n\nI bite my lip, tugging on his gold chain playfully. \"Thank you, Adam.\"\n\n\"You're welcome, Teddy,\" he says softly, looking me up and down with a grin. \"You look handsome tonight.\"\n\n\"You said that already,\" I say with a little smile.\n\n\"And I'm saying it again. You look damn handsome.\"\n\nI bite my lip a bit, trying not to grin too widely. \"But do I look kissable?\" I ask coyly.\n\nAdam laughs gently, staring at me for a soft moment before his eyes flicker to my hand. Then, he reaches forward to take my champagne from me. He sets both of our glasses calmly on the table before coming back to me with a sultry expression on his face. I swallow thickly as he gets close enough to reach forward, hold my sides, and press me against the railing as he pushes his lips against mine.\n\nLike with every kiss between me and Adam, I melt. I feel that warmth spread over me like thick honey, from my lips to my damn toes. I hold my hands on his arms, sighing softly through my nose as we kiss back and forth like a waltz, keeping measured time, responding to every move in perfect synchrony, slow and sexy. His head leans into me more, just lightly bending me back against the railing as he feeds me a soft nudge of his tongue. My lips instinctively part, inviting him in, and me hums softly when he enters my mouth. I let my hands work on auto-pilot, feeling them slide up his arms and across his shoulders, one of which gets into his impossibly-soft hair. I stroke, and comb, and tug, and he grunts softly, only giving me more tongue - enough for me to catch between my lips and softly suck.\n\nThen, we hear a voice coming from the dock. \"Hello?\"\n\nAdam groans against my lips before pulling back slowly, smiling and keeping close. \"That's probably the pizza,\" I say, laughing gently as I run my palms over his chest.\n\n\"We'll pick this up later,\" he murmurs before pecking my lips again and then turning towards the dock. \"Up here!\" Adam shouts, giving my ass a firm squeeze. I slap his hand away just as our delivery guy waltzes up the plank, looking around with intrigue before his eyes settle on us. \"Looking for me?\" Adam asks with a charming tone.\n\n\"Are you, uh...\" The kid glances at the receipt. \"Adam?\"\n\n\"That I am,\" he says, sliding away from me. He walks up to our delivery guy to take the box from him. After tipping him handsomely, he sends the boy on his way and places the pizza on the table, lifting the lid with a grin. \"Well, here we are,\" he says. \"One simple cheese pizza, since you're boring and don't like toppings.\"\n\n\"Don't be mean,\" I say defensively, coming over to him, slightly aroused by that alluring aroma. I stand next to him, up against his side, and kiss his cheek as he looks down at the pizza with a playfully disdainful look. \"At least I like tops,\" I tease.\n\nThat makes him laugh heartily, reaching around me to paw at my ass again. \"Thank God you do,\" he says with a grin before he steals another kiss from me, simply turning his face towards mine and leaning his head forward to make our lips meet. He hums softly into the kiss, and when I pull back, he smiles to himself. \"Damn, Teddy,\" he murmurs. \"You very well might be my second favorite kisser.\"\n\nI snort. \"Second?\"\n\n\"Maybe third,\" he says with a teasing grin. \"You're at least tied for second.\"\n\nI roll my eyes but wrap my arms around him, my chin on his shoulder. \"Who do I have to kill to get first place, then?\"\n\nHe chuckles. \"Lacey,\" he says dreamily. \"Older woman. Was widowed twice, the poor thing. But she loved to go out to these classy, pompous art events, and she always needed some arm candy.\"\n\n\"That's where you came in, huh?\"\n\n\"You're damn right,\" he says cheekily. \"She might be old, but that girl knows how to use her lips.\"\n\n\"Jesus Christ,\" I mutter, envisioning Adam swapping spit with some woman who just put her dentures in.\n\nAdam just laughs, putting his arm around my waist. \"Second place is good, Teddy,\" he teases.\n\nI shrug. \"Considering the amount of people you've kissed?\" I tease. \"You're right.\"\n\nHe raises his eyebrows, clearly amused. \"You calling me a slut?\"\n\n\"I am,\" I say with a tender grin, leaning in a little more. \"But you're my slut now.\"\n\n\"Mmm,\" he hums, giving me a little roll of his tongue and causing us both to laugh. \"I like the sound of that.\" \n\nWe both sit down, knees touching under the table as we dive into the pizza. Apparently I'm starving because I practically inhale three slices right off the bat before I even consider taking my time, going through an ungodly number of napkins to wipe the grease off my hands. After my third slice, I feel that satisfied weight in my stomach, licking my lips and smiling at Adam.\n\n\"Hey, thanks for taking me out tonight,\" I say to him.\n\nHe smiles mid-bite before chewing slowly. \"Of course,\" he says after swallowing. \"You needed it.\"\n\nDamn right, I did. I desperately needed some Adam-time after the emotional strife I put myself through breaking things off with Jackson two days ago. God, what a difficult conversation that was - mostly because I couldn't stop crying. Once Jackson hit me with a terribly confused look after I told him we shouldn't see each other anymore, I broke down. He didn't deserve that. Jackson was nothing but good to me to the very end. Even as I was attempting to break up with him, he was consoling *me*. How fucked up is that? Jackson didn't seem that heartbroken - he was upset, because he liked me a lot, but our time together was at least short enough for his heart not to be ripped to pieces by my inconsiderate fingers. So that's at least some solace. But still, I found it oddly difficult to stand by my decision. After Jackson left my apartment, I spent the rest of the day cuddling Maxi and wondering if I did the right thing, if I made the right choice, if I was being sane in thinking that I deserve a happy life with the fucking straight boy.\n\nI talked it over a lot with Adam beforehand (after a much-needed round of sex). He tried to make it clear that, if Jackson was what I wanted, he would back off. But I could tell he would hate that. He already was upset with himself for waiting too long considering I had found someone else in the meantime. But Jackson was an obstacle. That's how he described him, once: as an obstacle. In a way, it helped hearing him refer to my now ex-boyfriend as such, because it put things into perspective for me. It somewhat confirmed that he really *does* want me.\n\n\"How you feeling now?\" he asks me.\n\nI shrug. \"I still feel bad,\" I admit, glancing at Adam. I slide my hand over to his, nudging his fingers with my knuckles. \"But I'm happy to be here. Honest.\"\n\nHe smiles gently and then leans over to kiss me. \"I know it was a lot.\"\n\nI scoff. \"Kinda.\"\n\n\"But I want to prove to you that you made the right choice,\" he says, squeezing my hand. \n\nPart of me wants to say that he already has, because, with each passing minute, I feel more and more validated by him, sure of him. But I'm excited to see what the future holds for us. I've made the choice. I'm invested in this. I'm invested in us, and I let him know by smiling at him, giving his hand a tender squeeze back in appreciation.\n\n\"So,\" he says, taking another quick sip of his champagne. \"Maybe it's kinda early, but... this technically isn't our first date, right?\"\n\nI raise my eyebrows, intrigued. \"Sure?\"\n\n\"So... I've got a question for you.\"\n\nI laugh. \"And I've got an answer.\"\n\nHe smiles slightly. \"Would you like to come home with me?\"\n\nI snort. Come home with him? We just came from his apartment. We just *fucked* at his apartment before coming here. Hell, I still have a load of his cum in me. \"That's your question?\"\n\nHe looks confused by my reaction before he laughs. \"No, not like, my apartment,\" he says. \"My home. In Connecticut.\"\n\nI blink. \"Really?\"\n\n\"Yeah,\" he says, giving my knee a squeeze. \"I want you to meet my family.\"\n\nI smile softly. I guess it is sort of a big deal. \"Your grandparents?\"\n\n\"And my brother, yes,\" he says with a nod.\n\nThe Sullivans. Even if his grandparents are old-fashioned and have a lot of iffy, antiquated ideologies, he speaks very highly of them. After all, they raised him and his brother without complaint. \"I'd love to meet them,\" I say with a nervous smile. The notion that he wants to bring me deeper into his circle is exciting, but the concept of a family always rattles me. I wish I had a family to introduce him to as well. I guess I technically do - but none of my biological family matters to me. There's only one man I consider family now. \"I'd like you to meet Clark, too,\" I tell him. \n\n\"Ah, the man himself,\" Adam says with a cheeky grin. \"I gotta thank him in person.\"\n\nI laugh. \"For what?\"\n\n\"Taking care of you.\" I blush slightly before I look away, smiling to myself, finding that to be an incredibly sweet sentiment. \"What?\" Adam asks.\n\n\"Nothing,\" I say, resting my hand over his under the table. Then I laugh slightly. \"You know, I'm just still surprised you want a guy like me.\"\n\n\"What's that supposed to mean?\" \n\nI just bite my lip in response.\n\n\"Nuh uh,\" he says, grinning and leaning in. \"No doing that self-deprecating thing.\"\n\n\"It's not like that,\" I say, and when he gives me a skeptical look, I touch his arm. \"I promise.\"\n\n\"What is it then?\"\n\n\"I'm just...\" I look him up and down. \"You're just so out of my league.\"\n\nHe lets out a laugh that's a mix between a scoff and an amused chuckle. \"Are you kidding?\"\n\n\"I'm not saying I'm ugly,\" I tell him before he starts berating me on my low self-esteem. \"But I'm not like... well... *hot*.\"\n\nHe rolls his eyes before staring at me. \"I'm gonna tell you something, Teddy. You ready?\"\n\nI try not to look so amused. \"No,\" I tease.\n\nBut he presses on. \"Me being attractive is none of my business.\"\n\nI stare at him for a few moments, attempting to let that sink in. \"I don't get it.\"\n\n\"Meaning, *you* shouldn't worry about what you look like. *You* don't have to fuck you. I do.\" He hits me with a devilish sort of grin. \"And I like fucking you, in case you haven't noticed.\" He reaches over and strokes my chin. \"*I* like what I see, Teddy. So trust *me*. K?\"\n\nI sigh through my nose. I didn't really expect him to understand how someone would feel inferior next to him, but he sure does do a damn good job of making me feel like I am enough. \"Okay.\"\n\n\"Plus,\" he adds, dazzling me with a toothy grin, \"despite you being handsome, I like *you*.\" He emphasizes that point by poking me in the chest, right above my heart. \"A guy like you is exactly the kind of person I want to be with. Funny, intelligent, warm-hearted, damaged goods-\"\n\n\"Fuck you,\" I say, laughing because I know that latter one is a joke. He grins as I grab his shirt and tugging him to me. Our lips meet tenderly, and we kiss gently back and forth for a few moments. \"I like you, too.\"\n\n\"Obviously,\" he says, and when I give him a faux-offended look, he bursts out laughing before pushing the pizza box closer to me. \"Alright. Enough talking. Eat.\"\n\nWe spend the entire night out on the yacht. Once we finish the pizza, we take the bottle of champagne and set up a little picnic on the deck so that we can lie down and pretend like we can see the stars. Even if we cut all the lights, the atmosphere is still a bit hazy, but we can vaguely see those little lights peppering the night sky. For the most part, Adam is true to his word: we lie down, relax, talk, and cuddle (aside from when I give him head, but only because I was \"craving dessert\"). As we relax together, we don't even have to speak for me to get a sense of calm. Everything is fine. Everything will be okay.\n\n~ ~ ~\n\nAs the tires run over the gravel, I start to feel nervous. What was I thinking, meeting Adam's grandparents? They're probably just like my parents: pleasant until they find out about my sexuality, something they consider a betrayal of what they so deeply believe in. They'll turn on me. I can feel it. It's making my breathing become labored.\n\nBut Adam seems as cheery as ever, not yet attuned to my shifting anxiety. \"Here we are,\" he says brightly, slowly winding through the snake-like driveway. Gradually, his childhood home comes into view. It's a quaint little place that can only be described as grandmotherly, from the cutesy structural elements to the diverse and colorful gardens lining the foundation. It's that classic, small, old-American home that automatically brings the smell of apple pie to my senses. I can picture it so clearly, sitting on the open windowsill to cool off, the scent luring boys like myself in.\n\n\"Beautiful home,\" I say, eyeing the gardens in particular.\n\n\"Yeah, my grandmother is practically a beautician on all fronts,\" he says with a little chuckle before parking his car behind a tattered Jeep. Then, he cuts the engine before looking at me. \"Okay, so... Quick thing.\"\n\nI cock my eyebrow but nod.\n\n\"Maybe don't mention *how* we know each other,\" he says.\n\n\"Oh.\" I gulp a bit, but I find that perfectly understandable - and frankly, that relieves me to hear. Of all the things that could ruin their image of me, the fact that I once was his client could be the most damning. I try to come up with a work-around. \"What if you just say we met online?\"\n\nBut he shakes his head. \"No, they're old-school. I'll never hear the end of it.\" He sighs slightly. \"Maybe we can come up with something more romantic,\" he says, \"like... we live in the same apartment building... or we met at that place you like. The High Line.\"\n\n\"So you want me to lie already?\" I say, slightly amused but getting me increasingly nervous.\n\nHe opens his mouth to speak before shutting it and laughing. \"I don't know. I guess if we just say 'online', it's not a lie. The escort part is off the table, though.\"\n\nI reach my hand over and touch his thigh. \"Are you sure they'd be okay with you dating a guy?\" I ask again. Every time I've brought it up, he always only says one word: \"Sure\". He never says it with much conviction, either. It's always loosely tossed my way as to temporarily nullify my worries.\n\n\"I mean... Okay, probably not,\" he admits, \"but who cares?\" \n\nI blush. So there it is, exactly what I fucking feared. \"Adam...\"\n\n\"What?\"\n\n\"I can't do this.\"\n\nAdam frowns, leaning into me a bit. \"We talked about this, babe. You'll be fine.\"\n\n\"I'm not worried about me,\" I say, even though that's a lie. I expressed to him my ingrained fear of coming out to anybody's parents, let alone those of people I've dated. It took months of convincing me to meet Miguel's folks, and he'd been completely accepted by his family *before* he even officially came out. \"I just can't be the reason your grandparents... disown you or something.\"\n\nHe looks at me like I'm being silly. \"That's not going to happen, Teddy.\"\n\n\"It could,\" I tell him. \"It happened to me.\"",
        "He sighs softly, looking at me for a few moments. Then, he reaches up to hold the back of my head as he leans in and kisses me. We just hold that position for a few moments, my hand gingerly caressing his wrist until he pulls back. \"I don't want you to stress about this.\"\n\n\"I stress,\" I say with a smile. \"That's what I do best.\"\n\nHe grins a bit before taking several seconds to think. \"What if,\" he suggests, \"I introduce you as... my very good friend?\"\n\nI smile, a little relieved. \"Okay.\" This lie I can condone. Plus, it's not necessarily a lie, is it? Underneath it all, we're still friends on some level.\n\n\"Okay,\" he says with a decided nod, pulling away from me to take his seatbelt off. \"Good friend, it is.\"\n\nWe grab our overnight bags from the trunk before heading up to the front door. Without even knocking, Adam just turns the knob and waltzes right in. As soon as we step inside, we find ourselves in an unsurprisingly quaint living room, nearly overrun with bric-\u00e0-brac and photos, all surrounding an older woman who's knitting in her rocking chair while something black-and-white plays on the television. \n\nShe turns her head towards us, looking polished and done-up, and the first thing she says is: \"You're early!\" She gives Adam a disdainful look, as if he couldn't have done a worse thing.\n\nAdam just laughs. \"And that's a problem why?\" he asks, shutting the door behind me.\n\n\"I wanted to have dinner ready for when you arrived,\" she says, hoisting herself up from her rocking chair and waddling over with her arms outstretched. It's sort of amusing watching a woman practically half Adam's height impatiently gesturing for her grandson to hug her, but it's heartwarming to see the way she smiles when they embrace. She's quite pretty, Adam was right. She must dye her shoulder-length hair that not-quite-blonde color, and she wears a minimal amount of makeup, but she looks damn good for being in her late 80s. \n\n\"We can help with dinner, then,\" Adam says, giving her an extra squeeze. \"Also, hi,\" he adds with a laugh.\n\n\"Yes, hi, hello,\" his grandmother says, patting his back before her eyes shift towards me. \"You must be Teddy.\"\n\n\"That's me,\" I say, wondering how we should handle this introduction. Thankfully, she's a take-charge sort of woman and shuffles over to me next, opening her arms for a hug and a warm smile.\n\n\"It's lovely to meet you,\" she says as she presses the side of her face against my chest.\n\nI smile, already feeling welcomed. \"You too,\" I say back. Then I hit her with something that's clich\u00e9 but never fails to touch the hearts of the elderly: \"You have a lovely home.\"\n\n\"Oh, this old place?\" she asks. \"It's nothing.\" But I can tell by her smile that she appreciates my compliment. \n\n\"Where's Pop and Simon?\" Adam asks, glancing around for his grandfather and older brother as we set our bags aside.\n\n\"Your grandfather's buying the fish for tonight. And Simon's chopping wood still,\" she says, gesturing vaguely to the backyard. Adam told me about how the most recent storm had knocked a couple trees down, so Adam's brother took it upon himself to handle the clean-up.\n\n\"Might go say hi,\" Adam says, only glancing at me for a second. \"I wanna introduce him to Teddy.\"\n\n\"Well, then, here,\" Mrs. Sullivan says, having us follow her into the kitchen. She grabs a tall glass from the cupboard before dropping in a few ice cubes from the freezer and then filling it up with water. \"Give this to him,\" she says, handing Adam the glass. \"He's probably parched. Been out there all day.\"\n\n\"Sure thing.\"\n\nThe backyard is surprisingly immense, since it was hard to tell from the front of the house whether or not the Sullivans even had a backyard. But there are gardens upon gardens stretched out over their open lawn, and Adam points them out to me individually: the fruit garden, the vegetable garden, the herb garden, the mystery garden... Seems the Sullivans mostly live off the land, but in a very upper-middle-class white-elderly way.\n\nTowards the back edge of their property, where the woods begin, is Adam's older brother, Simon, hacking away at a fallen tree with an axe. The closer we get, the more I feel like Simon doesn't look like the type who'd be living with his grandparents in his mid-thirties. From the side, he's just as pretty as Adam is, but with less polish and more muscle. \"Grizzly\" is the word that comes to mind. His body hair is evident, peeking out of that sweat-stained tank top he's sporting.\n\n\"Simooon!\" Adam calls out, and at the sound of his brother's voice, Simon turns his head in confusion before smiling. Now that I'm done being distracted by his lumberjack-jock hybrid of a body, I take in the features of his face more - and immediately, I know I'd be far more than willing to be used by these two brothers. Hell, throw in the grandpa too. I've seen a picture of him. Why are the Sullivan men all so damn handsome?\n\n\"Well, well, look who it is,\" Simon says with a grin, his deep voice perfectly matching his physique. He runs his fingers over his dark stubble as his eyes trail down to the glass of water in Adam's hand. \"That for me?\"\n\n\"Yup. I came bearing gifts,\" Adam says, extending the glass to Simon.\n\n\"Fuck, thanks,\" he says, dropping the axe and taking the glass. He practically guzzles the entire thing down, water dripping down his angular chin before he sighs happily and then smiles again. \"I'd hug you, but-\"\n\n\"Maybe later,\" Adam says with a laugh.\n\n\"So how you been, little brother?\" he asks, and they both fall into some brotherly conversation. I don't mind that I'm being completely ignored. I get to take a moment to soak in the sight of them, fleshing out the similarities and differences. Simon definitely *looks* like a matured version of his brother, reminding me of that \"emotionless strength\" category of some confident, masculine men. Adam's much brighter in his expressions and, although he's not as ripped as his older brother, he has a charming ease about his confidence that can't be matched.\n\n\"So, you're the boyfriend?\" Simon asks me suddenly, extending his hand. He laughs during the handshake - probably because I look shocked. \"Adam told me.\"\n\nI glance at Adam. \"I didn't know you knew,\" I say to Simon, and Adam just pretends to be occupied with the plane flying overhead.\n\n\"Don't worry,\" Simon says to Adam, \"I'm not gonna tell Ma 'n Pop.\"\n\n\"I knew you wouldn't,\" Adam says with a smile, but I interject.\n\n\"What do you think they'd say?\" I ask Simon, wanting a second opinion on the matter.\n\nSimon shrugs, giving it some thought for a second. \"I'm not sure if they'd say anything,\" Simon comments. \"At least, not to your face,\" he adds while grinning at his brother. \"They hate arguing with you.\"\n\n\"Yeah, because I always win,\" Adam says with a laugh. Adam has such a light, playful air about him when he disagrees with someone, even if it's a serious debate.\n\n\"Well this is one of those discussions that's not really about winning,\" Simon says, scratching his head a bit. \"It'll be a lot for them to take in.\" Then he glances at me and starts mumbling. \"I always warned him he'd fall in love with one of his clients one day.\"\n\nAdam hits him, but it's too late. I heard it. Guess he really *did* tell Simon everything. \"Yeah,\" I murmur, and even though Simon seems to not be bothered by that detail, I'm still embarrassed.\n\nWe chat with Simon for a few minutes before leaving him to his self-appointed task. We offered to help with dinner, anyway, so we start to head back towards the house. Before we get back to the backdoor, though, I stop Adam. \"Why'd you tell Simon?\"\n\nHe looks at me, confused. \"He's my brother.\"\n\nConsidering I don't have a brother that I'm close with, I don't understand his point. \"So?\"\n\n\"He doesn't care what I do,\" Adam says.\n\nThat doesn't seem like a good reason to tell him what he told him. \"What about *me*?\" I ask. \"It's more embarrassing for me than it is for you.\"\n\n\"How?\"\n\n\"I'm the one who paid!\" I say, slightly frustrated. Does he not see how this whole situation could make me feel uncomfortable?\n\nBut of course, he just smiles. \"Well, you wouldn't be the one who paid if you'd just cash that damn check.\"\n\nI roll my eyes. That fucking check. \"I don't want it. I've told you that a million times.\"\n\n\"Then you're still officially my client,\" he says, all coy until he sees my very-unplayful expression. He reaches out and strokes my arm. \"I'm sorry, babe, I'm just teasing.\"\n\nI shrug his hand off and sigh. \"Just stop bringing it up,\" I mumble. He just tugs on the hem of my shirt distractedly before, suddenly, a thought sparks in his head. I can see the way it lights up his face, and he smiles at me in an open-mouthed way. \"What?\" I ask hesitantly.\n\n\"I just had a brilliant idea.\"\n\n\"*What*?\"\n\n\"What if,\" he says, stepping closer so that he's right in front of me, hands on my sides, \"we used that money for a little getaway vacation?\"\n\nI blink, taking pause. \"A vacation?\"\n\n\"Yeah,\" he says, smiling warmly. \"Just you 'n me. Anywhere you wanna go. We'll blow three grand on it.\"\n\n\"That's...\" Dumb? Irresponsible? \"Not a bad idea,\" I say, a smile forming on my lips. Just the thought of going somewhere warm and sunny and relaxing with Adam is making me feel less tense. If he doesn't want the money for himself, we might as well use it for something together. \n\n\"Told you I'm brilliant,\" he says cheekily.\n\n\"You said the idea was brilliant, not you,\" I point out.\n\n\"Ouch,\" he says with a grin before leaning down to my face.\n\nPlayfully, I turn my lips away. \"No.\"\n\n\"What?\"\n\n\"I don't wanna kiss you,\" I lie.\n\nHe smirks. \"*You* don't wanna kiss *me*?\"\n\n\"Especially not when you say it like that,\" I say, poking him in the chest.\n\n\"Please?\" he asks, laughing softly as he puts his forehead on mine. \"Just one little kiss.\"\n\nI pretend like it's the last thing I want to do right now. \"Fine. But one is all you're gonna-\" But he cuts me off, planting his lips firmly on mine, holding the back of my head to keep us close. I melt into the kiss, sighing, pleased, floating, lightly aroused. When our lips pull back, my face feels warm, and I can't reel in my smile no matter how hard I try.\n\nBefore I can speak, Adam chuckles and slides his hand down to mine, locking our fingers together just to give my hand a gentle squeeze. \"C'mon,\" he says, and, feeling completely brightened, I head inside with my boyfriend. \n\n~ ~ ~\n\nThe rest of the night goes by fairly smoothly - mostly because Adam's grandmother seems to take quite a liking to me. I think it's because I lack Adam's quickness to start playful fights. I'm much more of a keep-the-peace-with-new-people kind of guy, and she appreciates it every time I take her side on things (even though it's mostly just to teasingly gang up on Adam). She seems particularly surprised to find that I'm \"single\", too. First, she asks if I'm married, to which I tell her I'm not. Then, she asks if I have a girlfriend. I hear Adam snickering behind me as I say no again, and she just gives me a baffled look. \"But you're so cute!\" she says, reaching a flour-coated hand to pinch my cheek. I just blush and laugh.\n\nThat's when her husband shows up. My first impression of him is \"fisherman\" - half because of the rounded head shape, receded hairline, and the scraggly grey beard that completely frames his face, and half because of the giant cod wrapped in paper he's holding. He just has that weathered look of a sailor, like some elderly chap whose first love was the sea. I almost wish he looked like he was scowling to top off the caricature, but he just has a permanent, gentle smile on his lips as he waltzes in and peers at us through his tiny glasses, asking \"Did anyone order fishes?\"\n\nConsidering that eclectic sort of vibe he gave off right off the bat, I would have thought he'd say more at dinner, but he's quieter than I am. It's a bit amusing to see him sitting at the head of the table, smiling like he just got some particularly nice news, eating his fish and rice and bread slowly and carefully. Mrs. Sullivan is clearly the talker of the two, serving as his headstrong, opinionated counterpoint. She's extremely entertaining, has plenty of relevant and humorous anecdotes, and is quick to deflect Adam's charm and jibes with witty retorts. Simon's more like his grandfather only in the sense that he doesn't say much, but everything he says has purpose, which I respect.\n\nThey all balance each other well, but what strikes me the most is how much they love each other. It's evident in the looks they give each other, how they anticipate when someone wants extra servings, in the soft, natural expressions of physical contact... It's a very warm environment, so I'm conflicted in my feelings. It's hard being engaged by and privy to this dynamic. I always used to tell Miguel that being around his family, as lovely as they are, always made me anxious as all hell. Even after he died, they still tried to keep in contact with me, still tried to include me, but it never felt right. I don't know if it was just a matter of me feeling like I was unworthy or overstepping, but I always kept my distance from anything with the word \"family\" attached: family cookouts, family dinners, random, non-holiday excuses to get the family together... It just makes me think of my own family.\n\nWhat are they doing right now, I wonder? Are my parents sitting around a similar table, chastising my little brother for eating more than his fair share of bread, or my sister for texting at the table? She has probably moved out by now, but some things don't change, and I'm sure she's always on her phone even to this day. Why did she, at least, never reach out to me? And what about my grandparents? Are they even alive still? Nana was quite old. For all I know, she's probably buried six feet deep in that shitty cemetery the rest of her family is in. Hell, *they* all probably think that *I'm* dead, that \"the AIDS\" got to me. At the lowest points of my addiction, I'm sure I imagined my death via overdose the same way they pictured it: me in some nameless gutter of a perpetually rainy, rat-infested alleyway, body lifeless but soul full of sin.\n\nTheir reaction to me coming out is what makes me uncomfortable with families. It still scares me - all of it. I'm scared by how much I like the Sullivans already, scared by how invited they make me feel, and I'm terrified that I'll get too roped into this feeling of inclusivity, that I'll revel too much in the family dynamic, only to have it snatched away from me. \n\nI want to tell this all to Adam, as things wind down for the night and we start getting ready for bed. I'm thinking about it deeply as I brush my teeth in the bathroom, staring at myself in the mirror, already having changed into sleep shorts and an old t-shirt. It'd be nice to talk it out with Adam, because I'm far too in my head, and I know it. All I'm doing is asking myself one thing: is it too risky to hope that this will all work out for me and that I won't ruin something special? \n\nSomeone knocks on the bathroom door, and after I mumble \"Come in\" mid-brush, I see that it's Adam. He smiles softly as he enters shirtless, only wearing sweatpants and that little gold chain that dangles from his neck at all times.\n\n\"Okay, so here's the deal,\" he says, keeping his voice low. His grandparents are just down the hall and have been asleep for an hour, so we have to keep quiet. \"I don't want you sleeping on the couch. I could whip out the air mattress, but honestly? It's super old and extra-super uncomfortable.\"\n\nI'm grateful he's figuring out a way to avoid me sleeping on the couch, because it's far too small for a grown man to make a bed out of it. I spit into the sink, quickly rinsing the toothpaste out of my mouth. \"So...?\"\n\n\"So,\" he says, crossing his arms, \"just sleep with me.\"\n\nI stuff my toothbrush back into its Ziploc bag, eyeing him. \"You want me to sleep in your tiny ass childhood bed with you?\"\n\n\"It's not that tiny,\" he says with a grin.\n\n\"We're gonna be on top of each other.\"\n\n\"Since when have you complained about that before?\" he asks, looking me up and down.\n\nI just roll my eyes. \"Well, what about your grandparents?\" I add, gesturing down the hall. \"What are they gonna say?\"\n\n\"They're not gonna say anything,\" he says, \"becaaause, we can set up the air mattress and pretend you slept on it.\"\n\nI arch my eyebrow, but honestly, I see no fault in that plan - unless, of course, his grandmother is the type to barge in on us in the wee hours of the morning. The last thing I need to do is be caught in the arms of her beloved grandson. We'd have some serious explaining to do. \"I guess...\" I say hesitantly.\n\nHe just laughs as I follow him out of the bathroom, heading to the room he grew up in. It still has hints of boyish high-schooler, including the cheesy movie posters hanging up on his wall and the soccer-ball patterned duvet. It's cute though - and I find it interesting that there isn't a hint of jazz here. It's like I'm getting insight into the old Adam.\n\nWe pull out the air mattress from its case, unfolding it and laying it out flat on the floor beside his bed. While I make sure the tape (which is being used to plug a hole at the end of the mattress) is still sticking, Adam attempts to plug the inflator in - but he looks at the plug in confusion. \"Where the hell does this go?\" he murmurs to himself, and I chuckle. I glance at him as he studies the device before I clear my throat. \n\n\"Not to be that guy,\" I say, scratching my head, \"but does your family like me?\"\n\nHe snorts a bit. \"Well my grandma fuckin' loves you,\" he says, smiling so far. \"Simon thinks you're easy-going, which is Simon-talk for 'I like him', and my grandfather doesn't have many opinions, so the jury's still out on him,\" he adds with a teasing grin towards me. \"Why?\"\n\n\"I just...\" I trail off a bit, fidgeting with the end of the mattress.\n\nHe pauses with the task at hand, and I can feel his eyes on me. \"What's up?\"\n\n\"I'm just... worried,\" I say quietly.\n\n\"About my grandparents still?\"\n\nI shrug a little, looking at him. \"I just really want this to work out, you know?\" I say. \"Us. And I don't want to come in between you and your family, if it comes to that, and then there's the whole family thing, just as a concept, and seeing you guys all together only reminds me of everything I don't have and everything I wish I still had, and then I feel fucking awful for complaining because you lost your parents, and-\"\n\n\"Hey hey hey,\" Adam says, dropping the tool and coming over to me when he sees that I'm crying. I realize I said everything very fast, stream-of-consciousness style, vomiting my worries out onto him and getting myself worked up in the process. Now Adam has to console me, which only makes me feel sillier. He comes over to my side of the deflated air mattress, kneels down next to me, and puts his arm around me. \"I'm sorry, Teddy, I didn't know this would be so hard for you.\"\n\n\"I'm just being stupid,\" I say, doing my best to suck in my tears.\n\n\"You're not being stupid,\" he says in a level voice, rubbing my back. \"I get it. Family is a sore spot for you. And rightfully so.\" He leans in and kisses my cheek, and I respond by putting my forehead on his shoulder, letting him hold me. \"And as for the other thing... You know I'm in this, right?\" he says in my ear. \"I'm in it for you, *because* of you.\"\n\n\"But what if your grandparents-\"\n\n\"We'll figure it out, Teddy,\" he says insistently. \"*I'll* figure it out. I don't want you worrying about this. It's not your fight.\"\n\nI sigh heavily. \"I know,\" I say - but I'll still feel guilty anyway. Fearing the worst, I'm already wondering, if I had chosen Jackson instead, this would be a nonissue.\n\nI feel him kiss the side of my head before he pulls away. \"C'mon,\" he says, standing up, shutting the lights off, and offering his hand. \"Let's just get into bed. Forget the mattress. You need some cuddles.\"",
        "I smile slightly, looking up at him as I take his hand. \"This part of the boyfriend experience package?\" I tease.\n\nHe laughs, pulling me to my feet. \"Lucky for you, it's free tonight,\" he says, snaking an arm around my midriff as he ropes me in for a soft and tender kiss on the lips. I can't help but smile as we climb into his bed, no bigger than a twin. Adam is a bit lithe and can manage it on his own, but tossing me and my average ass into the mix makes it quite a tight fit. But it's nice lying side-by-side, his big spoon to my little spoon, his arms wrapped snugly around me and his soft breath on my neck.\n\n\"Thank you,\" I say, stroking the back of one of his hands with my thumb.\n\nI hear him chuckle softly. \"For what?\"\n\n\"Nothing in particular,\" I say with a little smile. \"Just feeling generally thankful.\"\n\nHe laughs before kissing my neck, sliding even closer and getting our legs entwined. \"You're welcome, Teddy Bear,\" he says softly, and I blush lightly. \"And thank you for coming, too,\" he adds after a moment. \"Means a lot to me.\"\n\n\"I don't want you to get the wrong idea. I like your family a lot,\" I tell him. \"It's clear that they love you.\"\n\n\"Yeah, I'm lucky to have 'em,\" he says, slowly rubbing my stomach in circles. I used to hate when Miguel would do that to me, because it felt like he was putting emphasis on a part of my body that I'm self-conscious about. But I don't feel that way with Adam. Not for a second.\n\n\"You said all your friends are around here, right?\" I ask.\n\n\"Mhm. For the most part.\"\n\n\"Are you gonna see them since you're in town?\" I ask curiously. We're here for two more days, so it'd make sense to see his \"real\", non-escort friends.\n\n\"I was thinking about it, yeah,\" he says. \"If some of 'em are free, I'd love to introduce you.\"\n\n\"As your good friend, or-\"\n\n\"Boyfriend,\" he says. \"Definitely.\"\n\nI smile slightly, finding it endearing that he wants to show me off. \"Boyfriend it is.\"\n\nAdam chuckles slightly. \"What a weird word.\"\n\n\"What?\"\n\n\"'Boyfriend'.\"\n\nI laugh. \"For you, maybe.\"\n\n\"I like it though,\" he says, and I can feel him smiling against my skin when he kisses my neck again. \"Hey, so, what do you wanna do tomorrow?\"\n\n\"I'm up for whatever,\" I say. I just want to spend time with him, maybe explore his hometown a bit, see where he grew up. \n\n\"So, you're good with a three-mile run in the morning?\" he teases.\n\n\"Um, yeah, no fucking way,\" I say. He may go to the gym often when we're in the city, but that's his choice. Exercise is not in *my* repertoire.\n\n\"You sure?\" he says, chuckling. \"I'd hate to leave you behind.\"\n\n\"I'll be fine,\" I say, biting my lip. \"Maybe I'll try to fuck your brother while you're gone.\"\n\nAdam snorts, patting my stomach. \"Yeah, good luck cracking that one.\"\n\n\"I cracked you, didn't I?\" I say slyly.\n\n\"Oh ho ho, you think you're slick, don't you?\" Adam asks before sliding his hand up to my jaw and taking it between his thumb and fingers. \"C'mere, you fucker,\" he mutters, tilting my face back towards his and kissing me with a grin.\n\nThe kisses start off as playful, slow, sweet, and punctured with laughs, but gradually, they deepen. We find ourselves relishing the feel of our lips against each other, so I slowly start rolling over, coming face-to-face with him so that we can make out properly. He keeps a hand cupping my face as I rest mine on his side, my thumb sliding up and down that smooth, bare skin of his.\n\nI don't think it was necessarily the intention, but both of us are getting horny - naturally so, though, considering the playful bits of tongue we're implementing in the kisses. My guess is that Adam has gone commando tonight because I can feel the growing tent in his sweatpants, which only makes my cock thicken in my briefs. Our lips smack more insistently against each other, and each of us let out sporadic little moans as we find ourselves drawn to each other more and more. Maybe something light tonight would be nice...\n\nI'm the first to initiate some sort of sexual contact. My hand drifts down to his hip before it slides in-between us. I let my fingers practically dance across his bulge, and he grunts against my lips in response before reaching down as well. First, he takes my hand and guides it right into his sweatpants - to which I'm rewarded with no underwear separating me from his cock. Just as my fingers wrap around his hardening shaft, he gives me the same treatment, working his hand right into my sleep shorts and cupping my bulge firmly, giving it a firm squeeze.\n\nI let out a moan-filled laugh against his lips, and we smile at each other as we feel each other out. I bite my bottom lip lightly, giving him a few strokes, noticing how his flesh throbs in my grip. So soft and yet, so solid. I want to see it, taste it, make it cum - and right as I'm thinking about going down on him, he himself starts to slide lower.\n\nBut I stop him. \"Nuh uh,\" I say, reinforcing my grip on his dick.\n\nHe looks at me. \"What?\"\n\n\"I'm the client, aren't I?\" I ask. \"I decide.\"\n\nHe looks amused. \"Okay, so-\"\n\n\"Take off your pants,\" I command. He arches his brows as he stares at me momentarily, grinning slightly. Surprisingly, he doesn't question me. He just pulls his hand from my shorts and takes a moment to slide his sweatpants off of his legs. Once they're on the floor, I have another command ready for him: \"Get on your stomach.\"\n\n\"My stomach?\"\n\n\"Did I fucking stutter?\" I say, trying to sound tough without breaking character and laughing.\n\n\"Damn, Teddy,\" he murmurs, chuckling softly as he relents. I watch as he rolls onto his stomach, his entire backside bared to me, and I lick my lips. Thank you, boyfriend.\n\nI swing one leg over his body to straddle him and then lean down to kiss between his freckled shoulder blades. Down I go, slowly pecking his freshly-showered body with my lips, my mouth watering the closer I get to that little peach of his. I've only had the pleasure of eating him out a few times, and, as the anticipation rises, I realize that I'm ravenous.\n\nI plant a kiss on the dimple above the curve of his ass before resting a palm on each cheek. I squeeze and spread them slowly, as if I were massaging them, before I start to send kisses into the valley between them. He's hot here, my lips already getting warm from being in close proximity to his center - and I'm positively salivating. I spit down into his crack, letting it drip down across his hole before I find myself diving in.\n\nMy eyes roll back when I start lapping at him, when I hear that soft, pleasured moan escape his lips. He tastes so fucking good. My tongue glides smoothly across his hole once, twice, three four five times before I kiss it lewdly. Gripping his cheeks even more tightly, I pry them apart and drag my tongue slowly up and down the entire valley, almost smiling when I feel the way he starts grinding his dick against his sheets. Go for it, Adam. Enjoy it.\n\nI kiss his hole again before I turn up the heat a bit, becoming more passionate with my motions, more insistent with my tongue. I'm practically making out with him here, waiting for his ring to loosen enough to accept me. Once I push that muscle into him, *I* moan. Adam grinds a little more intently, only encouraging me to tongue-fuck him along with his rhythm. In and out my tongue goes, easing into his depths, making me drool, making him incredibly, sloppily wet. He may not be a bottom, but this boy sure does love being rimmed - and God, how I love doing this to him.\n\nAfter what feels like a blissful eternity of eating ass, I pull back, slurp up the spit hanging from my lips, and catch my breath. Fuck, he's got such a cute, edible ass. Unable to resist, I give it a playful smack with my palm, and he grunts a bit before laughing slightly, looking back at me. I just smile innocently before lightly biting the spot I spanked and then starting to make my way lower. I'm sure his cock needs attention, and a specific kind of attention at that: a hungry mouth.\n\nI reach under him to paw at his cock, and he quickly lifts his hips to allow me to pull that appendage back and guide it right into my mouth. He arches his back a bit so that he can give me a good amount of his cock in this position, and I happily gobble up what I can. I wonder if he feels sexy bent over like this, practically on all fours. Does he? I know this isn't something he'd be subjecting himself to with most clients - but then again, I'm not most clients, am I? There's a deepened level of trust between us. He knows I wouldn't do something he doesn't like, and I would never betray that trust.\n\nEventually, I have him roll over so I can finish him off properly. Keeping his legs open, I guide his cock right back to my mouth and suck slowly, deeply, intentionally, while my own hand is deep in my shorts. It's strange how perfectly he seems to fit in my mouth, how delicious he tastes, how forbidden he still feels. There's an excitement between us still due to his (I suppose) former sexuality. Adam, the straight guy? No more. What man can really stay straight after being so proficient in the art of gay sex?\n\nI let myself worship him a bit, keeping his balls in my grip and focusing my lips, tongue, and saliva solely on his beautiful cock. I pull off, eyeing that thick, smooth pillar with awe and lust before I spit on it, immediately lapping it back up with a hunger I'm so used to feeling around Adam. He brings it out of me. He makes me want to spend hours bobbing up and down the shaft, moaning around his manhood, milking him with my lips and beckoning his load with my tongue. I would. Even if my mouth was sore, I would.\n\nJust as I'm taking him deeper, Adam murmurs softly. I don't catch exactly what he says, but upon looking up at him, I know the gist of his message: he's about to cum. His eyes are closed and the back of his head is completely pressed into the pillow, his lips gently parted in anticipation. A notion suddenly strikes me: this is the bed he grew up in. How many nights did he spend in this bed learning about his body, touching himself, bringing himself to orgasm? Even if he was fantasizing about girls in his class, or teachers he wanted to fuck, or otherwise nameless pussy, did it ever cross his mind that he'd end up with a man?\n\nI keep my rhythm constant, but my tongue? I let it go wild. I lather the head of his dick in thick saliva, constantly rubbing against his sensitive glans, making him breathe deeper until finally, he inhales and holds his breath. At the same time, I feel his cock throb and pulse in my mouth before his creamy cum starts pooling on my tongue. I find myself moaning from the taste, like I'm being gifted this moment, this pleasure, *his* pleasure, and I suck softly until he's dry and I've swallowed all I can get out of him.\n\nWhen I pull off, Adam's cock is in a semi-hard state, and it flops against his stomach with a lewd, wet slap. I grin slightly, licking my lips as I look up at him. He just smirks back at me. \"That was... your best blowjob yet,\" he says, slightly breathless.\n\nI blush slightly, laughing quietly. Why does that give me so much pride? \"Glad you liked it,\" I say, leaning over to give his spent cock a kiss. Then I start kissing up his body, over each smooth ab, across the gold chain resting above his toned chest, right to his lips. He hums against my mouth as we kiss, keeping things tender as his hands slide down my clothed back.\n\nBut then, his hand shimmies over to my groin and grips my bulge, making me grunt. \"Your turn,\" he murmurs, breaking the kiss.\n\n\"I'm okay,\" I tell him. I may be hard, but I'm sleepy even after that.\n\nHe just laughs and says \"No no no. No lover of mine goes to bed unsatisfied.\" He grins, his eyes flickering up and down before telling me to take my shirt off.\n\n\"Adam-\"\n\n\"Take it off, Teddy,\" he says, adopting that commanding tone I used earlier. He's much better at it, though. It even gives me chills.\n\nI hesitate only for a moment, only until I see that determined look in his eye. Then, I sit up in his lap and slowly peel my shirt off, my face feeling warm. He looks me up and down as if he's seeing me for the first time, very slowly licking his lips as he soaks in my exposed torso before he takes my hips and sits up with me.\n\nHe doesn't kiss me on the mouth, though. He starts with my neck, taking it slow but sucking lightly on the skin until he decides to work his way lower. As his hands snake around to add support to my lower back, he starts kissing my chest. He peppers each side with pecks, soft and wet, letting his lips drift lazily (but purposefully) across my nipples. They're rock hard and sensitive, and my body is completely responsive to him. I moan softly, getting my fingers in his hair as he shifts even lower. He kisses all over my stomach, and I don't know if it's his intention or not, but I get the sense that he's appreciating me and my body, loving what I have to offer even if I'm not normally his \"type\" - and that just makes me fall for him even more.\n\nGradually, I end up on my back with Adam between my legs, hooking his fingers into the waistband of my shorts and briefs and slowly tugging both down simultaneously. He doesn't strip me completely - just enough to get my painfully-hard cock free. He smiles at the sight of it sticking straight up, completely rigid, almost unwavering in its hardness. Even when he nudges his nose against it, it barely moves. I'm a rock. He just smiles up at me as he extends his tongue and swipes the head of my cock with it, already making my toes curl, already making me feel like I'm right on the edge of cumming. But once he decides to wrap his lips around the head? I'm finished.\n\nI don't last long at all, considering I was jerking off the whole time I was giving him the works. I didn't really expect to be able to hold off my orgasm for very long, but barely a minute in and I'm clenching my teeth, choking back moans, and tensing my entire body as I fill Adam's mouth with a surprisingly big load. I can feel every pulse, every shot, and even in the midst of climax, I know that this one will exhaust me - mind, body, and soul. I know I'll sleep like a goddamn baby after this.\n\nMy eyes automatically fall shut, too heavy for me to keep open. Jesus Christ. I breathe slowly, mewling to myself as I feel Adam gently pull off of my cock. He starts climbing over me, hands on either side of my shoulders, and I sense his face hovering over mine. I just smile slightly in anticipation for a kiss. When he kisses me, though, there's a surprise: my cum. He parts my lips with his tongue and starts feeding me my own load. I moan, my hand swinging up to hold the back of his head as we share a thick, deep, lusty kiss, tongues pushing our cum-and-saliva mix back and forth, hips grinding against each other even after we've climaxed. It feels so dirty, so fucking hot, but most importantly, indescribably intimate. \n\nWhen he pulls away from my mouth, my eyes finally open back up to see him smiling at me with wet, shiny lips. \"Feel better?\" he asks me.\n\nI laugh softly, nodding. \"Much,\" I tell him sleepily, roping him back into cuddles and sweet kisses. I fix my shorts as he pulls the blanket over us, keeping us together and warm. Right now, I couldn't care less about his grandparents and what they may or may not think when the truth breaks. Family isn't even a thought or a desire. Adam is my only focus, my only rock, my only man - and I fall asleep in his arms, so deeply appreciative of the fact that all he wants to do is keep me happy."
    ],
    "authorname": "ruetheben",
    "tags": [
        "gay male",
        "gay romance",
        "prostitution",
        "romance",
        "prostitute",
        "whore",
        "romantic"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/you-get-what-you-paid-for-ch-05"
}
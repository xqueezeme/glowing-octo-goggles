{
    "title": "Pledging Tau Geta Delta Pt. 04",
    "pages": [
        "Waking up as a girl was always a bit disturbing. For a moment, I forgot why my chest was a jiggling and why my crotch was empty. The shock would shoot through me in that fog of my waking mind and send me reeling until my memories caught up with my instincts.\n\nThis morning that process was short circuited when I felt my arm was wrapped around some guy's chest. The rest of the sensations flooded into me. My breasts were pressing into his back, and my left foot was rubbing against his leg. Most of all I was naked!\n\nLast night came flooding back. This was Patrick and I'd spent the evening screwing his brains out. Now, I was in a decidedly uncomfortable position. There was no way I could go back to sleep now that I'd woken up, not while I was naked in a guy's bed. So I had to decide what to do, flee quietly or wake him up.\n\nI'd never actually had a one night stand before. Those few nights I'd spent with a girl had come after rather long relationships. I'd certainly never woken up and thought I needed to find a way to sneak out. This time, however, I wasn't sure I wanted to be here when he woke up. I couldn't think of any way for that not to be awkward.\n\nExtracting myself from his bed without waking him up was something of an adventure. I started with the leg, slowly sliding that back until I was no longer touching him. That went easily enough. My chest was a whole different matter. I was leaning against his back, and all my weight was on the wrong side. I tried to shift myself, but then he grunted and wiggled for a moment. I panicked and went perfectly still until he resumed a deep breathing that told me he hadn't really woken up.\n\nI placed my hand against his side and pushed back as gently as I could while trying to shift as much weight with my hips. When he didn't rouse, I thought I was home free until I slid a little, lost my control and slapped on my back hard enough to jiggle the bed. He tossed and turned again, and I stopped moving, hoping he'd settle down soon, but he rolled onto his back and then turned in my direction. A hand shot out and landed on my stomach before taking a winding path to my breast.\n\nI turned to look at him. His eyes were still closed and after he gave me a gentle squeeze his lips grew a dreamy smile. He squirmed a bit more before he relaxed and resumed breathing deep. I almost wanted to laugh, he looked so happy with his squeeze toy in hand, but he'd just made my escape that much harder.\n\nI waited for a minute, just to make sure he was well back to sleep before I grabbed onto his hand and then slid it away. Finally, I was free and I carefully slipped out of bed so that it wouldn't jostle him again. Of course, that left me naked in the middle of a strange guy's room, with my clothes scattered about and only the early dawn light to guide me.\n\nI snuck around the room, which was a fair bit more difficult given the random trash strewn about. Even for a college guy he was far too messy. Luckily it was mostly just papers and discarded packaging, but I had to assume there was much ickier stuff buried in here. Luckily, my clothes hadn't landed on anything scary and I scooted into them as fast as I could.\n\nNow that I was dressed, there was only one issue left, getting out of here. I pulled back on the door, thankful that it didn't squeak. It wasn't a large apartment, and I could see the other two bedroom doors were closed. With the way clear, I made a straight shot for the door.\n\n\"Hey.\" The sound almost sent me through the roof. I turned to see a guy sitting on a couch opposite a TV with the sound off. He looked half asleep, but quickly rousing.\n\n\"Hi.\" I whispered and gave him a little wave as I inched towards the door.\n\n\"Patrick, huh?\" He smiled up at me.\n\nI just nodded. I didn't know if he was going to raise the alarm or what. I didn't really want to explain to Patrick why I was trying to sneak out. It wasn't that he was a bad guy or that I hadn't enjoyed last night, but I just didn't want to deal with him more right now.\n\n\"Cool.\" The guy nodded and then turned back to the TV. Whatever interest he had in me was gone, and I breathed a sigh of relief before I bolted out the door. Now all I needed to do was get back to the frat, clean up and get ready for the next challenge.\n\nLuckily home wasn't far away, and a quick shower felt really nice. That and new clothes. I was starting to get used to the girly stuff, even skirts! I decided I'd skip pants for the rest of the week barring special circumstances. I matched my short skirt with a yellow blouse and pulled my hair back into a simple pony tail. A quick check in the mirror made me feel way too girly, but I had to admit that I looked good.\n\nThe dining room was a lot quieter this morning. Many of the pledges didn't seem to have made it back yet. I looked around for Alex, and wasn't sure if I was relieved or disappointed not to see her down here this morning. I was getting used to the spunky blonde's energy. Her friend Brittany had made it down however, and I grabbed some food and popped over.\n\n\"Morning, you're looking happy. Did you have a good night?\" She smiled at me with wickedly knowing eyes under her mane of flaring red hair. She was looking good as well. That morning afterglow had a way of helping bring out a sparkle in a person. No doubt she'd hooked up with a guy from the club, and followed through with the challenge.\n\n\"Yeah, met a cute guy and totally banged his brains out. I'd imagine he'll think it was all a crazy dream when he wakes up.\" I smiled. It had been a crazy night out. I could hardly believe I'd just had a one night stand! It had been a lot better than I would have expected.\n\n\"I bet. My guy was pretty hot too, and boy did he know what he was doing.\" Brittany squirmed in her seat a little. \"I wasn't sure I'd be able to walk straight after all that we did.\"\n\n\"Morning ladies.\" We both turned to see the Tau Geta Delta president Hamilton Prescott standing beside our table. He'd been the one to transform us into girls only a couple of days ago, and was the one in charge of handing out challenges to us pledges to prove we were worthy of getting our manhood back and become members of the fraternity.\n\nHe was also a bit of a stereotypical preppy with perfect hair, sweater vest and pressed slacks. I never knew quite which way he would jump and in the end, it didn't matter. For the next few days I was almost literally at his mercy. Sure, I could always back out and they'd reverse the spell, but after all this I wasn't about to just give up and not join. That meant doing whatever he told us to do.\n\nWe both greeted him back and he did the trick with the magical blue ball of energy in his palm again. No doubt he was checking that we'd completed the last challenge. All we needed to have done was pick up a guy that we didn't know and then sex him up. We'd succeeded spectacularly with the help of Alex. She knew just the right club to go to and we'd all managed to get lucky.\n\n\"Is that some kind of magic?\" Brittany asked as she watched the blue orb flicker. He'd done this to us yesterday as well.\n\n\"It certainly is. It helps me check on how you're doing. Not only does it show if you've succeeded in your challenges, it tells me if you're stressed out or having some other bad reaction. I know this whole transformation can be pretty jarring and we just want to be sure that you are doing okay.\" He explained and then let the energy flare out.\n\n\"I'm glad you both made it back this morning. I'm here to tell you the next challenge, and please pass it along to any of the other pledges you see. It's always hard tracking down everyone after the pick up challenge.\" He explained. \"Now, for today, you need to pick a friend from your old life and show him a good time. How about that?\"\n\nThat just left us stunned for a moment. I'd been getting used to the changes and everything that I'd been asked to do since then, but this was different. It was like being asked to wake up from a dream. I hadn't even bumped into any of my friends since I started pledge week. I couldn't say it was entirely intentional, but I'd not gone out to speak to them either. The idea of seducing one and then sleeping with them wasn't even on my radar.\n\n\"Okay, I know that's a bit to take in, but relax and have fun.\" He smiled and then hopped off to the next table to repeat his checks and questions.\n\n\"Woah...\" Brittany looked at me with wide eyes. Her mind was clearly racing, going through the same permutations as I was. It was more than just thinking about my old friends, it was deciding which one of them would make a good target for some serious sexing.\n\n\"Yeah, I'm going to need to think about this one.\" I nodded. The strangest part was noticing how many of my old friends had actually been friends with me in my girly memories. I had both sets of experiences bouncing around my head, my life as Alison and the one as the guy I really had been. As Alison, I'd lived much the same life, and had many of the same friends. There were differences though, and some of them hit upon my core feelings as well.\n\nFirst, I remembered feeling the sexual tension in my relationships with guys. Even when they had just been friends, as Alison, I always knew they thought of me as a girl and always suspected they thought about having sex with me. I'd certainly had the same thoughts in reverse, it was just kind of natural, but it also kept me from having as many casual guy friends in Alison's life as my male self had.\n\nI suspected that a few of my guy friends just hung around waiting for me to give them a chance for a more intimate relationship. Some others seemed happy to be friends and while open to something more, they didn't push it. The trick was to decide of the ones here at the university, who would I pick for a romp in the hay?\n\nThat was too much to decide at breakfast. I figured I'd have a better grip on it after a few classes and some lunch. I always liked to make decisions after lunch.\n\n\"So, hopefully I'll see you tonight. If not, have fun.\" Brittany started to get up. A quick look at the clock told me that I needed to be going as well. There really wasn't much more we could say now, not with this on our minds.\n\n\"Sure. Good luck!\" I smiled and then we parted ways. I was on my own again, with more kinky thoughts and wicked planning to do. I grabbed my bag and shot off for class.\n\nPartly, I wondered why I was even bothering with class. It wasn't like I was going to pay attention to anything being taught with all of this on my mind. Still, these were my smaller classes, so my absence would have been noticed.\n\nI ended up spending my morning running through all of those perverted thoughts and trying to figure out who was the candidate that would be the best bet. In the end, I decided to let my Alison memories give me a boost. Of my friends, who did I want a more intimate relationship with when I was her?\n\nThe answer surprised me a little. Of all my choices, it really boiled down to one guy, Max. When we bumped into each other in chem lab our freshman year, we'd become fast friends, but at the time he was still dating the girl he'd been with before college, and I was not the kind of girl to get in the middle of someone's relationship. By the time he'd broken up, I had a boyfriend and we seemed to never be in the right state of a relationship at the same time, at least until now.\n\nHe was single, and so was I. He was also reasonably attractive, and we still clicked as a pair, even if we'd never been more than friends. In some ways our relationship hadn't really changed much from when I was a guy. We still got together to watch stupid movies, play video games and exchange relationship advice, though certainly with a different twist.\n\nThe question was, would he be interested? Sure, I'd liked the idea back when I was Alison, but I'd never had the opportunity to jump on him before. He might just want to stay friends, though I knew from my guy half that if a sexy friend of the girl variety started to come onto me and I was single, I'd be hard pressed to turn her down. Still, I'd never been tested that way, and I knew Max hadn't either.\n\nThat just left me with one thing to do. I had to go and give it a try. Of course, that meant hunting Max down in the middle of the day. On Wednesdays he was pretty busy, at least until mid afternoon, then he liked to hop over to the cafe in the student union and catch up with a bit of homework and internet surfing before heading back to the dorms.\n\nI'd have to hope he hit the cafe today as well. Until then I zoned my way through my classes and lunch. My mind was pretty much consumed entirely around how to approach this. In the end, I really didn't have an answer, but I'd figure something out.\n\nSo I headed over to the cafe, grabbed a seat by the windows and sipped at a latte while I waited for Max. The best trick would be if he found me, so it wouldn't seem like I was hunting him down. I didn't come here often, but I did enough that Max wouldn't be shocked to see me either. I pulled out one of my computer science texts and started to run through my next assignment. Not only would it look like I wasn't here for him, I'd actually get a bit ahead on my studies.\n\nOkay, not that far ahead. I'd barely gotten started when I felt a familiar tap on my shoulder. I didn't need to turn to know that it was Max, but I kept my nose in the book just the same. I know how it irked him to be ignored, and I wanted him to be a bit off kilter.\n\n\"Okay, be that way, I'm sure I can find another empty seat.\" He started to turn slowly and I gave him a smack on the shoulder.\n\n\"Fine, you can sit here.\" I rolled my eyes and pulled my books back so he would have a spot to put his drink.\n\n\"Since when do you come down here to study? Did they kick you out of the sorority already?\" He asked as he slid into his seat. I wondered what he meant for a moment, then I remembered, to everyone outside the fraternity it wouldn't make any sense for a girl to be pledged at anything other than a sorority. So as far as anyone knew, I was pledging to be a Delta.\n\n\"No, but it does get a bit crazy there sometimes, especially for pledges. They like to make it hard to concentrate while you're in the house. So I thought this place would be better for a little studying.\" I explained. It really wasn't far off. The Taus had made the house a bit crazy for the last few days and between the old timers and the pledges it was hard to concentrate for very long.\n\n\"And you think you're really going to sign on? Is the whole pledging thing as crazy as they say?\" He asked. I could imagine he was dying to know. First was the whole male fantasy of coeds in the showers and walking around half naked at least in the morning and night. I'm sure there wasn't much truth to that, but I'm sure such thoughts filled his daydreams.\n\n\"Well, it's been really crazy, but I can't talk about it. Sorority honor code, you know? But yeah, I think I'm going to make it and sign up. I still have to tell you, you should really think about becoming a Tau.\" I smiled at him. I could just imagine what kind of trouble he'd get into as a girl. It was almost delightful just thinking about that, but at the moment I had another mission.\n\n\"Cool, I hope you'll make sure I get invited to the parties. I hear they're pretty wild.\" He smiled. That would certainly be a major fringe benefit of being friends with a sorority girl.\n\n\"And full of hot girls.\" I gave him a knowing smile. He'd never exactly hidden his horn dog ways from Alison. Oddly enough, that actually made me respect him a bit more. So many guys tried to hide their feelings about girls when they were around girls, pretending to be gentlemen. The fact was, there was more to being a gentleman than simply a mask, and Max was a fine example. Despite the fact that he would eagerly sleep with basically anything with breasts and a vagina and didn't mind saying so, he did respect women just the same. It was kind of hard to explain, but he really did value women as people and fuck toys.\n\n\"Well, naturally.\" He nodded.\n\n\"So why do you think you need to go to so much trouble for girls?\" I grinned. He knew this kind of question was just leading him on. We'd played this game before.\n\n\"Well, maybe because most girls don't really give me the time of day, so...\" Max tried to explain before I cut him off.\n\n\"Letting more girls get to know you just increases the odds of you getting shot down.\" I finished for him. It wasn't far from the truth. It was the painful side effect of honesty was that plenty of people didn't want it. As much as it might have endeared me to him in one way, it didn't always work for him with other girls.\n\nHe laughed. It was a pretty old joke between us. Being a girl gave me the inside track on parties where girls might be, and if I made sure that Max got an invite or knew where to drop in he always did. That didn't mean he had much luck, but he did all right. Being single did have a way to masking over those previous successes though.\n\n\"So, hot stuff, why haven't you made a play for me?\" I turned slightly, thrust out my chest and gave him a naughty sideways smile. It was a pure tease play, but it did make him sputter. If he was anything like me when I was a guy then when he was with a girl he was friends with he had a mental filter on so that he didn't end up just drooling over her boobs. Now, I'd just taken a hammer to that filter.\n\nHe stopped to cough a couple times and regain his voice. He also blushed a bit. I was actually surprised that I'd hit an honestly sensitive spot. \"What would I want with some flat chested bookworm?\"\n\n\"Ah, defensive humor, I see. That must mean you have thought about it.\" I pulled my shirt tight against my stomach and glared at him a bit. \"And, if this is a flat chest for you, you're going to have a long life of disappointment.\"\n\nNow he was really under the bus. I could see him squirming in his seat a little. He must have been wondering just what I was playing at. We often fake flirted, but this time felt different, maybe because it was real and not just some backfilled memories.\n\n\"Come on, a man needs to have dreams you know.\" He tilted his head back, held out a hand and his eyes sparkled dreamily. \"One day, I will climb Mt. Boob, scale the soft, creamy sides and plant my flag at the top.\"\n\nI couldn't help visualizing that ridiculous adventure and failed to stifle the laugh that brewed inside me. Now that he was in a playful mood, it was time to strike.\n\n\"Seriously though, why haven't you made a play. We've both been dateless for weeks.\" That part was true. I'd just been through a series of one date wonders and he'd been batting zero almost since the semester started.\n\n\"Seriously?\" He blanched again.\n\n\"Well, okay, maybe not a relationship.\" I couldn't keep myself from doing air quotes for that. Then I switched to a whisper. \"But, I'll let you in on a little secret. Girls like it too, and we can get a little frustrated on our own for too long.\"\n\nI had to resist getting lost in my girly memories of masturbation at that point. It was true, though, and as Alison, I was a bit surprised to learn that I did my own handiwork almost as much as when I was a guy. I had to wonder if that was normal, but I had other things to worry about at the moment.\n\nThat was the first time I think I'd rendered Max speechless in quite a while. I'd pretty much just offered up sex, the whole friends with benefits deal. I couldn't imagine him turning me down, even when I looked back at the friendship he'd shared with me as Alison. We'd been close, and in some ways as close as two opposite sex friends could be without going all the way.\n\nHe finally managed to collect his wits. \"Alison, are you all right?\"\n\nI laughed. \"Of course, you nitwit! I've been thinking about this for a while, to be honest. We've always worked so well together, and I figured it must be as hard for you to play solo as it is for me so why don't we just help each other out?\"",
        "I could see the wheels churning behind his eyes. I realized I was probably coming on a bit strong. It was how I compensated for my own nerves. I was trying to get Max to sleep with me! The easiest way to not think too much about where I was going was to focus on trying to get there.\n\n\"Hey, it's fine. Why don't you think about it for a bit and I'll stop by your room later. Okay?\" I reached over and gave his upper arm a squeeze. He really was pretty fit, and the girl part of my mind was asking why I hadn't put the moves on him earlier. We really would make a pretty good couple.\n\n\"Yeah, okay. I'll talk to you later.\" He picked up his stuff. \"How about six? At my room.\"\n\n\"Sure, now don't get yourself run over!\" I waved as he shuffled his way out. All I had to do was give him a couple of hours to sort through his feelings. I knew Max well enough to know which side he'd land on. It might seem crazy to him at first, but the prospect of sex would push him through any misgivings. The fact that it was me pushing the idea wouldn't hurt either. He might have been afraid to offend me, but if I put out the idea, that left him free to accept.\n\nAs I sat there, remembering the way my pussy tingled after watching his ass on the way out, my male mind finally managed to shout through everything else. I realized that I'd managed to suppress those feelings through all of this and was running off of pure Alison and focusing on the challenge goal. Now that I had a moment to think again, the weirdness came roaring back.\n\nStill, as strange as the notion of sleeping with Max was, I was finding my feminine desires winning the war. As Alison, I'd really liked him, and having the chance to sleep with him was really turning me on. Even as a girl, it was hard to work past horny. Now, I just needed to wait for him to come around. I just hoped that my male self would be able to forgive me for banging Max after I switched back.\n\nThe other fact driving me was that I was actually turned on! After three days of awesome sex, I was getting spoiled. I knew that even regular girls didn't usually have sex this often, maybe if they had a boyfriend but even then there would be breaks. As a guy I could go weeks or even months between fucking, not that I liked too. Even in my girly memories I didn't get it on more than a couple of times a month, except for a couple of rather vigorous boyfriends.\n\nSo now all that was left for me was waiting. It was just a couple of hours, but it felt like an eternity. The worst part was, if he did actually turn me down, I'd have to race to meet the challenge. Of course it wasn't all that difficult given that I naturally had a couple of guy friends who wouldn't bat an eye at sleeping with me. It was strange, but it felt better with Max and I just hoped he wouldn't say no.\n\nI wandered around campus for a bit as the clock ticked down. I was too nervous to think about studying. I popped back to the student union food court for a quick dinner and then meandered my way towards Max's dorm. I hit a bathroom to do a bit of primping, but it was just to give myself something to do and make me feel a bit better. After all, how could he turn a girl like me down?\n\nThat left me standing in front of his door at about five past six. I didn't want to seem too eager after all. I took a deep breath and raised my hand to knock and before my knuckles could make contact, the door swung open. Max was standing there in one of his best button up shirts, his short black hair had been combed and for the first time in years, his dorm room almost looked presentable. I didn't even need to ask what his answer was when I noticed that the only light was from flickering candles that had been placed around the room.\n\n\"Why don't you come in?\" He gave me a wavering smile. No doubt he was as nervous as I was. I hadn't even realized I was still standing outside until that moment. I blushed and scooted in enough for him to close the door.\n\n\"Wow, this is one way to give a girl an answer.\" I smiled. On the one hand, I'd made it past the first hurdle. Now I just had to go through with it. The reality of that fact hit me like a ton of bricks and I didn't object when I felt a Champaign glass being pressed into my hand.\n\n\"I got it from one of the upper classmen. Not the best stuff, but I figured we could both use a bit of something to lighten the mood.\" Max poured me half a glass of bubbly. I wasn't much of a drinker really, but if ever there was a time for a drink, this was it.\n\n\"Thanks.\" I smiled. Then I raised my glass. \"Here's to no strings sex!\"\n\n\"Here here!\" He laughed and clinked my glass before taking a good drink. I followed suit and had to suppress the shudder as I gulped it down. It really wasn't good, not that I had a well developed taste for alcohol, but this was certainly from the bargain bin.\n\n\"Wow, enough of that.\" I stuck out my tongue and put the glass onto his dresser. As much as I wouldn't mind a good buzz right now, even I had my limits. Max's glass joined mine a moment later as he laughed.\n\n\"Yeah, not my best idea ever.\" He grinned.\n\n\"But the candles are nice, and you even cleaned your room and tried to make yourself look respectable. I can really appreciate that.\" I smiled and then went to sit down on his couch. It was a small room, but he'd squeezed a couch in next to the bed. It made things a lot nicer for hanging out, but a bit cramped. At the moment, it gave me a good place to go other than straight into his bed.\n\n\"So you think I look respectable?\" Max took a moment to strike a dignified pose. I just laughed at that.\n\n\"Well, I wouldn't go that far.\" I patted the space next to me. I had to admit that my nerves were killing me. I'm sure he had a few butterflies in his stomach too. The truth was, I knew of only one way to deal with that problem.\n\n\"Really, so you want a less than respectable man?\" He sat down far enough away from me that we weren't quite touching, at least not yet.\n\n\"Well, not the ones that look respectable, they're usually the biggest jerks.\" I pulled my hair back over my ear and look up at him. It still felt strange looking up at Max like this, with both my stomach and my pussy quivering. He was attractive in a goofy kind of way, and that fact was just stirring the strange emotions inside me. It wasn't just lust and anxiety, there was a strange feeling of actual attachment. This was Max, the guy I'd hung out with for the last two years, and been with me through thick an thin. As Alison I'd cried on his shoulder and even as a guy we'd supported each other.\n\n\"And I'm not a jerk.\" His eyes seemed to be twitching. I'm sure he was feeling a lot of the same emotions I was. One half of him looking forward to a nice round of sex with a hot girl and the other part shifting through his feelings about our relationship. We were both sitting here, eager and scared and just waiting for something to kick us into gear.\n\nSo I kissed him. I hopped a half foot over, swung my arms around his neck, pulled him in and planted my lips right on his. He flailed for a moment, and I pressed in closer until my chest was squishing into him. He wavered and then I felt his arms wrap around me. His lips pushed back and then out tongues snuck out and started to play with each other.\n\nWe stayed like that for a while, just kissing and holding. It felt right in a way that my earlier frantic encounters had lacked. This wasn't just a guy, and it wasn't just sex. Max cared about me, and I had to admit that I cared about him too. For a fleeting moment I wondered if this was really a good idea, and then his hand slid down over my ass and gave me a tender squeeze.\n\nHis hand felt perfect, and I threw my head back and let out a soft moan. We kissed again, with more energy, more passion. I could feel the barriers coming down, and my needs boiling up. There was no way I was going to stop now.\n\nHis touch set us in motion. My hands slid off his shoulders, and squeezed his biceps as they moved towards his chest. Max wasn't ripped, but he took care of himself. While one of his hands continued rubbing my bottom, the other snuck up and ran over my side before it found my breast. I squirmed from his touch. It just felt so good, and I couldn't stop kissing him.\n\nThe squeezing, rubbing and kissing just left me melting. He was tender, his touch caring and the passion of our kiss was hot! I bit at his tongue and lip between going deep and sinking my tongue almost down his throat. I felt like I was going crazy. There was just one more thing left for me to do.\n\nMy hands reached up for his shirt. I started to unbutton it and he reached up to stop me.\n\n\"Are you sure?\" He pulled away enough to look into my eyes. I could see the lust in his eyes, as well as the concern. We'd been friends for a long time, and we were kind of jumping into things. It may have been true that I'd set off in this direction with ulterior motives, but now that I was here, it really felt right. The fact that Max was worried as well and only reinforced that feeling.\n\n\"Yeah, and no matter what, we'll still be friends, okay?\" I looked into his eyes again. Somehow it was important that he say that. As Alison, losing Max would be tough, I don't think I could quite handle it, but I wasn't going to be Alison after a few days. The spell would be reversed and I'd go back to my male self. So why did it matter to me so much?\n\n\"Yes, I promise you.\" Max stated as firmly as I'd ever see him say anything. I knew how hard it could be to keep the promise, and yet hearing those words made all the difference.\n\n\"Then let's do it.\" I smiled at him wickedly, reach down and just pulled his shirt open. He looked down at me in shock as a button flew across the room, but I was more interested in his bare chest. I ran my fingers over his hard muscles, he wasn't ripped, but he was still nice and firm. I resisted the urge to just start licking at him, like that was going to far.\n\nAs I enjoyed the feeling of his pecks, he was letting his hands start to work on my top. He was more gentle, but the results were similar aside from the fact I still had a bra on. I took a deep breath and reached back. This was the real point of no return. A bit of heavy petting and serious kissing was one thing, getting naked was a whole notch above that.\n\nI looked up at him again as I worked my bra free. The ardor in my eyes must have been wild, and I unhooked the straps. His eyes didn't know where to go, bouncing between my chest and my face, so I helped him and looked down as I dropped the straps over my shoulder and let it slide free. My breasts were free and I felt the tightness of the cups fall away.\n\nMax was helplessly gawking while his hands rested on my waist. I'm sure he'd imagined this moment so many times, and now he got to see my chest completely free and on display. I had to admit they were pretty nice breasts, and couldn't blame him a bit for staring.\n\nI almost let loose a little quip, but I decided on a better way to keep things moving. I reached down, grabbed his hands and pulled them up to my heaving breasts. He couldn't resist giving me a nice squeeze and I moaned happily from his touch. His fingers massaged me, pressing into my tender flesh and then he started to gently rub my nipples with his thumb. It was still a strange feeling for me, but it set me quivering and my pussy just seethed, eager for what was coming.\n\nMy hands slid over him as well, and I enjoyed the feeling of his hard body. The energy building up in me pushed harder. I needed to push on, needed to go to the next step. My fingers found his belt buckle and I worked it free. Then our eyes met again as I slid my hand inside his briefs. He shuddered as my fingers found him, and I wrapped around his throbbing cock.\n\n\"You've got it bad for me.\" I giggled as I stroked him. He gasped at the feeling of my fingers dancing over his hardness, and his hands squeezed at me even more before he pulled one away. I squirmed for a moment, missing his touch before I felt him sliding that hand up under my skirt until he was moving over my panties and cupping my wet mound. I moaned as he sank his hand into my hot center and started to rub me.\n\n\"You're pretty wet yourself.\" He smiled and leaned in for another rabid kiss. We kept stroking each other as your tongues traded blows again. Then our hands went to work, what was left of our clothes was soon sent flying across the room. First my panties, then his pants, my skirt and finally his underwear. There was nothing left, just Max and I, naked, horny and wrapped around each other.\n\nThere's nothing like the feeling of naked flesh pressed against naked flesh. The fact that I was rubbing against Max, with my pussy aching for him was only fueling my needs. He was hard and I was ready. There was only one thing left.\n\n\"Bed, hot stuff.\" I wrapped my hand around his cock and then got off the couch, pulling him along to his bed. I wrapped myself around him again, gave him a nice wet kiss and then dragged the both of us onto his bed. We tumbled for a moment, until we landed right where I wanted, with me on my back and him straddling between my legs.\n\nHe pulled away and got up, kneeling between my wide spread legs and looking down at me much as I was looking up at him. I knew I was completely exposed, right down to my bare pussy. It was a strange feeling, just as it was weird looking up at him, naked, with his cock jutting out hard and eager just for me.\n\n\"You are so hot!\" Max beamed. I blushed a bit, realizing that he'd just been giving me the same kind of appreciative inspection as I had been giving him. It was hard to even explain just how validating his compliment was, or just how much wetter it made me.\n\n\"Then get down here and show me how much you like it!\" I growled with my best husky tone. He jumped right in. In an instant he was on top of me, one hand on my breast, his lips against my neck and his cock sliding along my wet slit.\n\n\"Oh! You tease!\" I whimpered as he rubbed himself up and down my pussy lips, his cock sliding over my clit and sending waves of pleasure shooting up my spine. It was just too much! I squirmed beneath him, and started working my hips, trying to spur on even more friction.\n\nThen I realized he was looking distracted for a moment, as if he realized something, and I caught on a moment later. \"I'm on the pill, stupid, just go for it.\"\n\nThat was it. He grinned wickedly, pinched my nipple and then pulled back his cock until the tip was rubbing against my hungry pussy lips right at the entrance to my womanhood. He paused, took a deep breath and then I felt him inside me. I was so wet that he slid in easily, and I moaned at the sudden feeling of fullness. It was amazing, always so amazing to feel a man stretch me open like this.\n\n\"Oh, yes...\" I gasped when he finally came to rest deep inside. His crotch rubbed against mine. His balls rubbed between my legs. It was crazy, and I pulled him in tight to give him a wild, insane kiss.\n\nHe took it slow, as fast as he'd driven into me, he contrasted that by slowly pulling out. Then he pressed in again, slowly stuffing me while I gasped from the perversely drawn out pleasure. I felt like I could trace every vein of his shaft as it slid past my pussy lips. The sensations were electric, and my hips had to press up to meet him.\n\n\"Relax,\" He whispered into my ear. It was so hard to do that when his cock was throbbing so deep inside me. I panted, fighting to follow his lead. Somehow I knew he had something special to show me, but I had to resist my own urges.\n\n\"Oh, Max...\" I moaned as he drove in again, my inner folds spreading slowly for him, letting me savor every moment as he drove me harder. He moved both hands to my breasts now. I knew how awkward it was for him to be squeezing both of my boobs and hold himself up with his elbows, but it felt too good for me to dwell on it.\n\nHis fingers found my nipples and he pinched and twisted them between squeezes on my soft breasts. Each time he did, my whole body shook. I was sensitive to the pleasure now and the slight pain. It was making me even crazier and his cock never stopped. His even thrusts and withdrawals were punctuating everything else, and he shifted himself so that his cock rubbed over my clit.\n\nI moaned and gasped with pleasure shooting through me. I'd have thought he was some kind of sex god at that moment, but I could feel a powerful need brewing inside me. I fought to keep relaxed, to let Max do his thing, but every moment, every time his shaft slid deep into my flesh, I came that much closer to losing control.\n\n\"Please, oh Max, please...\" I begged. The sensation, the need, was just too much. I had to have more. I couldn't understand how he'd held out so long, but I was too lost to my own passion to think that through. I just needed him to take me and fuck me hard.\n\nHe pulled in close again and nibbled his way up my ear as I wailed. It was just too much! It was like my whole body was hypersensitive to pleasure. I squirmed and shook on his bed and just as I thought I'd lose it if he didn't start hammering me, he gave me a hard deep thrust. I cried out again, grinding my hips against him and following him as he tried to pull out.\n\nThen he thrust hard again and I moaned. \"Yes! Harder!\"\n\nHis hips moved again, and he started to pound into me. I pulled him tight, letting his hips hammer into me as moved mine up to meet him. It was perfect, and I writhed under him, begging for more as he ravished me.\n\nI'd never expected him to be so good, so animalistic, but he was a master of rhythm and his hands went back to squeezing me while his cock drove my pussy wild. He was playing my body like a finely tuned instrument. I'd never felt anything so good, and after the last couple of days there was getting to be a lot of competition for that slot.\n\nI simply let go and let my flesh merge with his. He was in control, but my hands sank into his back and my kisses peppered his face. I was gasping and panting between helpless cries for more. I just couldn't take this for long.\n\nHe was showing the strain as well, his rhythm had increased, as did his power. It was all more than I could handle, but I was at his mercy. When he leaned into for a savage kiss, I knew he was ready.\n\nI squeezed him tight, pulling him close as he ground into me. His frantic thrusts gave way to one final, glorious thrust and we screamed out in mutual pleasure together. My orgasm ripped through me the moment his seed started to fill my pussy. The warmth inside me just flowed out, washing over my whole body until I was nothing but a quivering heap of flesh melted beneath him.\n\nI don't know how long we stayed like that, collapsed, panting and still intimately joined. My arms still kept him close, and I savored the pleasure coursing through me and the cock still lodged deep inside my flesh.\n\nMy strength slowly returned, and I started to rub him with my hands. He let out a ragged breath while I stroked him. I knew I could coax more fun out of him, I just needed to give him time.\n\n\"Thanks, you were amazing.\" I smiled and gave him a quick peck on the nose.\n\n\"Nothing compared to you. You've just beaten out like ninety percent of my fantasies.\" Max smiled back at me. I could see now why a girl might kick this sex god to the dumpster. If he was this honest all the time, he's lucky he didn't get stabbed in the back. Still, I knew him well enough to know what he meant and feel appropriately complimented.\n\n\"Well,\" I slid my hand down to his bare ass. \"Why don't we try for one hundred percent?\"\n\nI saw the flash of heat in his eyes and felt his cock throb happily between my legs. At the very least it was a goal worth aiming for.\n\nI don't know how long we kept going. I think I worked through about every fantasy position we could think up, and got stuck a few times before needing to untangle ourselves. When I finally collapsed in his arms, I knew I wouldn't try and sneak off the next morning. I'd never do that to Max. Especially after everything we'd just shared.",
        "As I drifted off, I was left with one almost disturbing notion. I could really get used to this.\n\nThe End ( Part 4 )"
    ],
    "authorname": "Farleven",
    "tags": [
        "gender bending",
        "fraternity",
        "magical change",
        "college",
        "pledge",
        "initiation",
        "sex games"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/pledging-tau-geta-delta-pt-04"
}
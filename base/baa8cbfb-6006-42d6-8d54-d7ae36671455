{
    "title": "Jill's World Ch. 05",
    "pages": [
        "SARA: You should have seen them running back into the locker room five minutes into practice \n\nGINA: They were dancing about five minutes into practice It was hillarious \n\nKAREN: Did you put the cream in our uniforms? Please tell me you didn't \u2639 \n\nREBECCA: You and your cunt friends are dead bitch \n\nCOURTNEY: Lunch tomorrow? \ud83d\ude09 \n\nJULIE: I miss you already \n\nThat's pretty much what my phone looked like when I had a chance to look at it just before going to bed. \n\nOkay, those were the six I answered. There were a couple of dozen total. \n\nTO JULIE: I'm not moving to Alaska LOL We will find time Jules \n\nTO COURTNEY: No \n\nTO SARA: Rebecca is furious Be careful \n\nTO SARA: I wish I had seen it though \n\nTO KAREN: No I did not have anything to do with it \n\nTO REBECCA: What is your issue today? \n\nOkay, of course I knew what her issue was, but I couldn't very well admit to knowing about it. That could be quite damning, in a way that she could take it to the principal and have Sara, or all of us, suspended. Don't misunderstand me, I had no real fear that Rebecca would use the school authorities to enact her revenge. She would far prefer to enact her own sense of justice. I'd have to escalate my plan and try to curb her anger. \n\nI could hear my phone buzzing with replies, but I curled up in bed and tried to sleep. Tried is the operative word. What had I done? What had I gotten myself into? This was very different now. I had voluntarily signed a contract to be Jill's submissive until next fall. \n\nI thought I knew what that all meant. I thought it would be, more or less, the same as I had been receiving. But, then there was that ceremony. And all those people. All of whom are deeper in this world than I ever considered going. I had a copy of the contract in my car. I'd have to read it at some point before Friday evening, though when I would find the time, I did not know. \n\nDad was a bit upset at how late I was getting home. Thankfully, I had the mints that Kelly had given me or ... well... I'm sure my breath was a bit telling before I took two on the way home. I was chastised a bit, but since it was, supposedly, school related and would lead, supposedly, to a potential scholarship for college, I wasn't punished. \n\nAs I lay there ignoring the beeps on my phone that let me know my responses were being responded to, Courtney and the desk flipped back to my mind, and I shuddered the thought away. I think the reason she wanted that particular thing so much, was that was the game I was playing with Darla, before I broke her nose. Laying down naked on the desk, awaiting another bit of clothes. I hated it so much. And yet, I could not deny the itch between my legs as I pictured myself there, naked on the desk. \n\nThen, there was a light knock at the door. That was a first since I had moved in. Expecting my father, I pulled the bedcovers under my arms to appear... well to not show him anything of course. And I invited him in. The door slowly opened, but it wasn't him. \n\n\"Carrie, might I have a word?\" Kelly asked from the door. \n\n\"Of course, Kelly.\" I said, probably looking as confused as I felt at seeing her and not my father. \n\nShe walked in and closed the door behind her. Kelly was quite beautiful, it was easy to see why my father liked her. She was wearing a pink robe of satin that came to mid-thigh. There was a belt around the waist that held it together, but between her breasts, there was a peek at the transparent pink negligee she wore underneath. Apparently, she was either always dressed like this for bed or she was planning to seduce my father tonight, which I doubted was difficult for her. \n\nShe crossed the floor to my bed and I suddenly felt a bit nervous about it, though I couldn't quite lay my finger on why. She sat on my bed, sort of sideways so her left leg was on the bed and her right foot was still on the floor. The way she sat, further opened the robe and I quickly looked away when I caught my eyes drifting downwards. Then I looked back to her face and fought the urge to see how much of her was showing through the open robe. \n\nDon't get me wrong. This was my father's girlfriend, for crying out loud. Yes, she was attractive, but the fact that my father was sleeping with her, made her nearly asexual to me. Not asexual as she wasn't having sex with my father, of course. But asexual, as in, I couldn't perceive her as sexually attractive to me, because of the relationship with my father. Not sure if that makes sense outside of my own head, but there it is, as best as I can explain it. \n\nAnd yet, there was no denying that my eyes were drawn to the glimpses of breast and thigh that her loose-fitting robe bared as she angled her body towards me, from her sideways perch on the edge of my bed. It was a fight not to acknowledge the exposed expanses of flesh. \n\n\"Is everything okay Carrie?\" she asked after settling herself onto my bed. \n\nI think I scrunched up my nose a bit at the question. But, I answered quickly. \"Yes, everything is really good now Kelly. Why?\" \n\nShe frowned a little, showing disappointment in my reply. \"Well, your father and I are worried about you. Late nights, coming home looking tired. Then, you don't really have a lot to say, when you do get home. Your dad would like to hear how your day is. Particularly, after all the problems that brought you here in the first place.\" \n\nI scrunched my nose again. It wasn't that I was avoiding him ... well, them ... \"Kelly, I'm truly okay. I am working now, and then there is school, and this project. I'm just busy.\" \n\nAnd then, she pissed me off. She rolled her eyes at me. \"Carrie, we aren't stupid. Remember the smell on your breath last night. You aren't as... well... look, the reason it is me coming up here instead of your father, is because he thought it would be a lot easier for you to talk to me about sex. It makes him very uncomfortable to think of his daughter having sex.\" \n\nOkay, that took me by surprise. I mean, I had told my dad I was having sex. But, I guess a part of me did still want to be his little girl. \"Kelly,\" I started, and I could feel the heat in my face as I blushed, \"I really don't want to discuss this with you. Or with my Dad!\" \n\nShe smiled. \"I know you don't, but you kind of need to. I at least need to know that you are being safe Carrie.\" \n\nAnd there it was, the slip of tongue perhaps... she said SHE needed to know, not THEY needed to know. And that, for some reason, was more embarrassing to me. She, for all intents and purposes, was a stranger. So was my dad for that matter, but at least my dad was my dad. \"I'm a lesbian Kelly, what could ... I mean... logistically speaking, what is unsafe sex as a lesbian?\" \n\nShe actually had to turn her face when she laughed, and quickly converted it into a cough. \"Carrie, there are many STDs you can get from lesbian sex. But, it's not only that risk. It's the risk to your reputation. Don't do things that you will regret. A lot of girls your age... well, they don't protect their modesty very well and grow up and it haunts them. Like pictures, taken for a lover and then the relationship turns bad and they end up revenging you by posting them on the internet. The internet is forever.\" \n\nDid she know something? I had to turn away to avoid an incriminating look. I didn't exactly consent to the photographs, but there were definitely a lot of them out there. And then, I thought to the video that Rebecca had. Had she already posted them? \n\n\"Too late huh?\" Kelly asked with a sigh. \"How bad are they?\" \n\n\"I... Kelly, did you see something?\" I asked, wondering if this was just a ruse, to see if I would tell the truth. \n\nShe exhaled loudly. \"No, but evidently there is a reason to be concerned. So, how bad is it Carrie?\" \n\n\"Nothing ... well... you can't really see anything, you could just infer from them.\" If Rebecca did end up posting me on you tube, I would at least hedge the damage a little. \"It was just me and a girl fooling around... I mean, pretending, and there is a girl who took a video of it, who doesn't like me very much.\" \n\n\"Why doesn't she like you?\" Kelly prodded. \n\n\"I ... I kind of borrowed her boyfriend for a couple of weeks.\" I muttered. \n\nKelly laughed softly. \"I assume before you turned lesbian?\" \n\nI blushed harder, if that was possible. \"Yeah. It, was a mistake.\" \n\n\"Carrie, I want you to know that you can trust me. If there are things you don't want your dad or mom to know, I can keep a secret.\" She put her hand on my leg, over the blanket, giving my calf a reassuring squeeze. \"I did some things with other girls when I was your age. And I questioned my sexuality at the time because it felt really good. It is possible that you aren't a lesbian at all, and that would be okay too. And if you are, that is wonderful as well. We aren't judging you. I am not trying to influence you at all, just to support you as much as I can.\" \n\n\"Kelly...\" I stammered. She had punctuated her statement with a squeeze to my calf, that shifted her hand higher, just below my knee. It was making me a bit ... uncomfortable. \"I ... it isn't like I am a ... I'm not ...\" UGH! Say something! \"I'm not like a total slut Kelly.\" I finally blurted out. \n\nShe looked surprised at my statement. \"I didn't think you were Carrie. Are other people saying that about you?\" \n\nI coughed. 'Yeah, my name is Slutball now'. I thought that, I would never say it. \"There are a few. But, it's okay, nothing I can't handle.\" \n\nShe looked into my eyes, like she was trying to read my brain. She smiled softly. \"Carrie, I just want you to know, you can talk to me about it. I'm here for you. Do you have any questions about anything? I'd love to do that for you ... help you if I can.\" \n\n\"Really Kelly, that is ... I will come to you if I have any questions.\" I figured the best way to get rid of her was an empty promise. I doubted I would ever talk to her about anything to do with sex. \n\n\"Okay Carrie.\" Kelly smiled, and her hand stopped its gentle squeeze, but trailed up to mid-thigh, resting there. \"You really are beautiful. I can see why so many girls are interested in you.\" \n\nThen, before I could protest the position of her hand, she removed it and stood up. Fortunately, she turned her back to me as she left the room, or she would have seen my mouth wide open. Had she just flirted with me? It felt like it! \n\nAnd I couldn't deny that her flirting had an effect on me, as I felt the wetness oozing from my vajayjay. \n\n'What is wrong with you Carrie?', I admonished myself mentally. \n\nShe stopped at the door and turned to smile at me. \"We should go shopping this weekend. How about Sunday? Maybe a trip back to A&amp;F?\" The smile was ... devious, knowing, lascivious, not the friendly invitation smile that one would expect from a ... step mom figure. She was sizing up my reaction. I was surely blushing bright red at the memory of our last visit there. \n\n\"I don't know if I could ever go back there again.\" I whispered. \n\nKelly giggled. \"I don't think anyone saw your face Carrie. Just try to ... well... not do that again?\" She smiled, and her tongue licked across her lower lip. \"Maybe I will keep you company in the changing room this time.\" \n\nWell, that sounded horrible! \n\nShe turned again to open the door, then hesitated and turned back towards me. \"Oh, and Candace wants to see us again! She said they got some great new lingerie in, and she can get us a really good discount on it before the ads come out next week.\" \n\n\"I...\" I did not want to be around Candace again, especially with Kelly there. \"I'm not really all that into racy underwear Kelly, you can go without me if you want.\" In truth, I loved sexy underwear, it made me feel prettier somehow, but the Candace and Kelly thing made me feel dirty. \n\nKelly frowned slightly, then smiled. \"I'd really like you to come along anyway. No point in going to the mall twice, if we are going on Sunday.\" \n\n\"Okay.\" I whispered. \"But, I did promise my mom I would visit Sunday, so after that.\" \n\nKelly smiled excitedly. \"Thanks Carrie. It is so much more fun shopping with you.\" \n\nAnd she finally left me alone. I needed to make a phone call to Courtney, so I ignored all the texts that were there waiting for me. I planned on only a five-minute conversation on the phone, unfortunately, it drug out to thirty minutes, mostly because I had to keep negotiating with her. \n\nIt took a bit of time to fall asleep. Between thoughts of my new life with Jill, Courtney's lunch and now the flirtation of my dad's girlfriend, my mind was overloaded with too many thoughts to fall asleep, until, finally, exhaustion overwhelmed me. \n\nThe next morning, I woke up after hitting the snooze button one too many times and rushed through a shower. Unfortunately, my post-Darla wardrobe left a large vacancy in what I considered acceptable school clothing, so it was either repeat the same outfits or ... \n\nSo, at least I had respectable underwear on under the short skirt that had been modified by Sue on that first night I met her. I was looking forward to my first pay-check so I could replenish my choices to less suggestive clothing. But, for now, even if I flashed the pink bikini panties, at least my ass was mostly covered. \n\nI did select the longest skirt I could find. It came to mid-thigh, so sitting down would likely not leave my bare ass on the seat at school. I wore the white bra and a too tight shirt that left a couple of inches of belly showing. I checked my face, put on a light coat of make up and descended the stairs, ready to eat a quick breakfast and run to my car. \n\nThen, I saw Kelly. My dad was gone to work already, of course, and that left me alone in the house with Kelly. I wondered if I imagined the night before, had read more into the conversation and the touches than was actually there. Those thoughts were dashed when I saw her sitting at the table in nothing but a loosely tied robe. Her breasts were mostly exposed, with the right one even showing her nipple. Below the belt that was so loose that it left the entire front open a few inches, her manicured pubic hair was clearly on display. \n\nShe was sipping a cup of coffee, but I caught her eyes dart up to see if I was looking at her. A smile crossed her lips. \"Good morning Carrie.\" She chirped. \n\n\"Good morning Kelly.\" I answered, and helped myself to a banana. \"I'm running a bit late. I overslept.\" I went to leave, and she stood up and put her hand on my wrist, pulling me gently to face her. \n\n\"We need to talk Carrie. Your dad is not happy with you right now. I am doing what I can to remind him what it was like to be a teenager, but I really need you to help me.\" Kelly said as I turned to face her. She made no move to cover her body, which was widely exposed by the open robe. \n\n\"Okay Kelly, but can we talk later? I'm going to be late for school.\" I pulled away gently, not trying to be rude. \n\n\"Of course Carrie.\" Kelly smiled at me. Her tongue swiped across her lower lip, sending a twinge of alarm up my spine. \n\n\"Okay.\" I said and turned to walk away, the banana still unpeeled in my hand. I would eat in the car, this was too weird. \n\nI called Julie as soon as I got out of the drive to tell her about the exchange with Kelly. \n\n\"Hey slutball! Good morning!\" Jules chirped. I was surprised to hear her so cheerful after last night. \n\n\"Hey Julie, listen I'm on my way. Listen, Kelly, you know, my dad's girlfriend?, well she is flirting with me I think. Last night...\" And I told her all about the exchanges last night and this morning. \n\nJulie laughed. \"You really are getting full of yourself. I mean Care, you are beautiful, don't get me wrong, but do you really think she would do something with her boyfriend's daughter? That's pretty out there.\" \n\n\"I don't know. I know ... it seems surreal, but it really made me uncomfortable.\" I responded. \n\n\"More uncomfortable than being naked in a house full of people?\" Julie giggled. \n\n\"I...well yeah kind of. I guess because it is so oogy.\" I stammered. \n\n\"Oogy?\" Julie laughed. \n\n\"She's like ten years older than us Jules!\" I replied. \n\n\"Yeah, but she holds up pretty well for her age.\" Julie answered, still laughing. \"And she's younger than Jill. I'm sure you mistook it Carrie, anyway, did you check your texts today? Rebecca texted me that I should 'make sure your friend sees me first thing before school or she will regret it'\" She said the last part in a funny imitation of Becca's voice that made me giggle. \n\n\"No, I didn't check my phone at all this morning, I didn't have time to finish answering everyone last night and was rushing to get out the door today. Probably has to do with Sara. She must know I wasn't part of it. I wasn't even at school when it happened.\" \n\n\"I wish they hadn't done that.\" Julie answered, sounding a bit sad. \n\n\"Me too. They don't know how truly mean Rebecca can be.\" I replied, truly concerned with my friends' welfare. \n\n\"Well, let's just go see the queen bitch together, maybe Courtney will go too, she seems to be able to handle her better than anyone.\" Jules suggested. \n\n\"I don't need other people to fight my battles.\" I argued. \n\n\"Jesus Fitch, I was hoping to prevent one. You really need to let people who care about you help sometimes, instead of trying to take on the whole world alone. This is exactly the way you were with the whole Darla thing. So, before you say another word, I'm going with you, and that's final.\" Julie snapped. \n\nI didn't say anything. I just thought about her words and let them sink into me uncomfortably for a moment. \"Are you still going with me tonight? You don't have to you know... it's not like you... um...\" Damn Carrie, why are you having trouble saying 'you aren't a lesbian like me'? \n\n\"I already said I was going Carrie. Are you trying to uninvite me?\" Julie snapped, interrupting my lingering sentence. \n\n\"No, not at all. Believe me, I'm glad you are coming with me.\" I replied. \"I just, you know, after everything last night, wanted to give you a window to back out.\" \n\n\"Are you trying to pick a fight with me today?\" Julie answered. \n\n\"No Jules, of course not.\" \n\n\"Well, just stop pissing me off.\" And she, indeed, sounded pissed off. \n\n\"Sorry.\" I answered. \"I love you.\" I ventured. \n\n\"I love you too, I needed to hear that.\" Julie said with a happier voice. \n\n\"So, ground rules for you, Slutball.\" Julie giggled as she used my sub name. \n\n\"Ground rules for what Jules?\" I asked, was she going to dictate what I could do with Jill? I was sensing a problem. \n\n\"For dating Karen.\" Jules interrupted my thought. \"You know you have to put an effort in for appearances or whatever. But you are mine outside your relationship with Jill, understood?\" \n\nI coughed. \"What?\" I asked, absolutely shocked by her sudden... dominance. \n\n\"I'm serious Carrie, I get the Jill thing, that's partly my fault. But outside of her, I want to know that you and I have...\" She broke off a moment. \"Something special and I want... I need to be first!\" \n\nThere was a mixture between ordering and begging me in her voice. It was quite compelling, and at the same time, the begging tone made my heart go out to her. \"Jules... I don't love Karen, I will never love Karen.\" \n\n\"You better keep it that way.\" Julie said somewhere between anger and relief. \"I want to know every detail, leave out nothing and you will give me twice whatever you give her.\" \n\nI laughed. \"Should I time everything?\" \n\n\"Don't be a smart ass Carrie, I'm serious. I am giving up a lot to wait for you. I need you to give me what I want on this.\" \n\nI was quiet. I was considering her words. Maybe this was a mistake. Not Julie, not by a thousand stretches of the imagination, but Jill... would Julie still be there next fall? Almost a year away? ",
        "\"Please!\" Julie cried out, breaking the silence. She was crying. \n\n\"Anything you want Julie.\" I answered, I knew I couldn't really give her anything she wanted while I was beholden to Jill and Sue, but outside that... a thousand times yes. \n\n\"Good.\" She sniffed. \"No sex until I say it's okay. You can kiss her and feel her up, but I do not want her going down on you or you on her without my permission.\" \n\n\"Are you going to do the same for me?\" I asked. I regretted it as soon as I asked. \n\nSilence for a long time. \"No.\" Julie answered at last. \"I think I deserve to have sex with Chad to make up for Jill and Sue and Courtney.\" \n\n\"That's fair.\" I said, though I didn't really feel that way. \n\n\"I don't... love him... not like you.\" Julie said in answer. \n\n\"I have an out. I can leave Jill.\" I blurted. \n\nJulie sighed. Loudly. Intentionally. She wanted me to hear it. \"I know. I can't make that decision for you Care, though part of me wants to tell you to. Another part of me wants you to go forward because of the same reasons I wanted you to when I thought I would be there. Opportunity to explore your artistic nature, for one.\" She paused, sighing deeply again. \"And, Care, to be honest, this has changed you in so many good ways. I mean, you are so... sexy now. You were kind of ... well ... I mean ... Carrie, I never saw you this way before Jill came into your life. So, really, I can't say it's all bad. For me or for you.\" \n\n\"And while I worry so much that you are going to fall out of my life, that she is going to consume your time and your heart, I have to accept that risk and do what I can to stay a part of your life until you have learned what you need to learn from her. About yourself, as well as the artistic opportunity that you deserve.\" \n\n\"That was pretty deep.\" I whispered. \"You will make a great shrink one day Jules.\" I giggled. \n\nJulie had a career path chosen. She wanted to be a psychiatrist, to help people. I just wanted to be an artist, so it was not a clear, approved path of vocation, at least according to my Dad. And Julie was so easy to talk to, easy to relax around. It wasn't just me. I saw it from everyone. People just naturally migrated towards her, enjoyed not only listening to her, but talking to her. She is an excellent listener. \n\n\"You here yet?\" Julie asked. We had been talking for a long time and, in fact, I was five minutes from her at this point. I told her so. \n\n\"Okay, let me brush my teeth and I will meet you out front.\" She hung up and left me to my thoughts for the next five minutes. \n\nI really wanted Julie to tell me to tell Jill no. I hated having this decision to make in the next thirty hours. And while I agreed with her assessment, I was in love with Julie. And she loved me back. We were friends for so long, I guess it was quite natural that if we were lesbians, we would be in love. But, was Julie? I had to think not. At best, she was bisexual. She liked guys, there was no doubt about that. But, didn't I like guys a month ago? Maybe I wasn't a lesbian either... \n\nShe was there, as beautiful as ever. She wore a powder blue skirt that fell just above her knees, a loose fitting white top with a sweeping neck line that showed a little of her slight cleavage. Julie had a gymnast's body, small breasts, small everything really, except perhaps her butt, which was very firm, as I had recently had the joy of finding out first hand. Second hand too. I giggled at my internal joke. \n\nJulie climbed in and kissed me, right there in front of her house. And it wasn't a peck, it was a full on kiss that took my breath away and had my tongue in her mouth. We made out for a few minutes before she slowly pulled away, tugging my lower lip as she slowly drew it out and released it with a pop. \n\nShe was all smiles. She wrapped her arm inside mine and leaned against my shoulder. \"I love you Carrie Fitch.\" \n\nI giggled. \"I love you too Julie Petrili.\" I turned and kissed her head before driving off. \n\n\"I don't mean to sound all... controlling, but I have more rules about you dating Karen.\" She smiled as she squeezed my arm. \n\nI laughed softly. \"Okay, whatever you want. I don't want to do this at all, so it doesn't matter to me.\" \n\n\"Good. No making out or feeling her up in school. She can feel you up all she wants, but you can not return the act. Just be her passive little girlfriend. Kissing is expected, but Frenching must be private. She can force the issue, but you never return the favor, just open your mouth and let her take what she wants without returning any effort. I have my reasons. So, for now, just do as I say.\" \n\n\"You have the combination to my locker. I want you to put your panties in there before you leave school every day. I want to see how wet you are getting at school. I have cleared this with Jill already, so don't worry, it won't get you in trouble with her.\" \n\n\"Jules...\" I tried to interrupt. She smiled and placed a finger to my lips and continued. \n\n\"Pick me up every morning unless I say otherwise. I need you to get here five minutes earlier so I can properly kiss my girlfriend every morning. When we get to school, you and I will be friends, like before, like always. But, I am Chad's girlfriend in school, hide your jealousy, as I will hide mine when you and Karen become a more public item.\" \n\n\"Give me your phone, I'm going to read your texts while we drive and reply to them for you. If you don't want my intervention, you need to reply to them yourself from now on.\" Julie smiled, taking my phone. \n\n\"Jules, slow down.\" I sighed as she entered my code and started reading messages to me aloud. \n\n\"Speak of the devil.\" Julie giggled. \"KAREN: I believe you Carrie, even if Rebecca doesn't. I will convince her. Don't worry! I knew you wouldn't do that to me! So excited for our date Saturday. Pick me up at 6\" \n\n\"So, here we go.\" TO KAREN: I'm excited too! What movie are we going to see? You can pick the movie. See you in school.\" \n\n\"And we have a few from some girl named Julie\" Julie laughed softly. \"You really need to get better at reading and responding. I basically told you I was having trouble sleeping and ended up talking to Jill half the night because you wouldn't answer my texts.\" \n\n\"Sara says she will talk to you this morning. Apparently, she has something important to talk to you about.\" \n\n\"Rebecca says, Don't play stupid with me Bitch. I know you weren't there. You know exactly what I am talking about. Meet me at our old stall first thing in the morning if you want to handle this yourself. Otherwise, I will make every one of your friends regret what they did. I wonder if she includes me as one of your friends.\" Julie added. \n\n\"Jill confirmed that she talked to me last night. Sue is excited to see you today and tells you to be on time. Now, let's deal with Rebecca. I'm not going to reply, we will see her in the bathroom. I'm inviting Courtney.\" \n\nAnd Julie started texting back and forth, I assume with Courtney, but I was focusing on the road and how things got to this point. I wanted Julie as a girlfriend, not a dominant. This was all making me a bit uncomfortable. I cleared my throat to get her attention. \n\n\"Yes?\" Julie asked, looking up from my phone. \"Courtney will be there by the way.\" \n\n\"Jules, I... Look, I love you, I do, why are you... I mean, it seems you are trying to be like them. I don't really ... like this control you are taking. I just... I want us to be different.\" \n\nJulie looked at me for a few seconds then turned away, and wiped her cheek. I think I made her cry. I didn't want to do that. \n\n\"Okay Carrie, look, I need this. I need this because it's really all I can have right now. If there were no Chad or Karen or Jill or Courtney or Sue, we could just date like normal people. But, you have to know, that this is the only way to keep us going, while we get through this year. What's the alternative? To get together an hour, here and there, when you aren't taking care of your many other obligations? I'm sorry, that's not enough for me. If we do that, I may as well put my energy into Chad, and we can just be friends, and maybe we will reconnect after Jill is done with you. If you can think of a better scenario, I'm all ears.\" Julie told me with a consoling voice. \n\nShe brushed my hair back behind my ear. \"Carrie, I'm not sure you can have a 'normal' relationship. After all this, I'm not sure I can either. Is there anything that I have done or told you that really is unreasonable to you? You are going to be sexually active with at least four other people. I'm going to be with Chad and occasionally you. Is the problem really that I am taking control or that you are afraid that this is what you want?\" \n\nI trembled at her touch. \"I don't know Jules. But no, you aren't being unreasonable. It's just, I don't want you to think you have to be like Jill for me to love you.\" \n\nJulie laughed, which made me a little mad. \"I am nothing like Jill. And I don't aspire to be. If I spank your cute butt it will be with my hand because I want to touch you, not hurt you. If I have you licking my pussy it will be because I want to be with you, not to teach you some lesson. Tell you what... go with me on this for a week. If it doesn't make us both happy, we can change it up.\" \n\nI gave her a weak smile and we took each other's hand and we rode in silence until we pulled into the school. \n\n\"Okay Carrie, let's go deal with Rebecca. Don't offer anything. Let Courtney and I handle it. Probably best you just be there and keep your mouth shut.\" Julie told me as we got out of the car. \n\n\"I'll try.\" I laughed. \n\nJulie rolled her eyes. \"I can tell you are going to be over my knee a lot.\" She giggled. \n\n\"Promises, promises.\" I laughed back at her. \n\nWe held hands on the way in to school. This was not unusual for us, though it felt different now. There were no stares or pointing, like when I was with Farin. This was expected. It was normal. \n\nWe walked in and said hi to a few people on the way. We headed straight for the dreaded bathroom, that I had gotten to know far too intimately over the past month. Pushing open the door, I gasped. I had expected to see Rebecca's smirking face. I had anticipated Courtney's playful smile. I had not imagined I would see Sara standing there naked except her shoes and socks. \n\nShe was looking at the floor and had clearly been crying. She made no move, as Julie and I walked into the bathroom. She only whispered, \"Sorry Carrie.\" \n\n\"What the fuck did you do to her?!\" I blurted before I could stop myself. I started towards Rebecca's smirking face, and Julie pulled back as I took in the twins, Allison and Addison, holding onto Sara's wrists, though she wasn't really struggling. \n\n\"Calm down Slutball, she wasn't hurt.\" Courtney offered, though I could tell she wasn't pleased with this turn of events. \n\n\"I have pictures and video if you want to see for yourself.\" Rebecca offered with that horrible grin on her face that I wanted to slap. \n\n\"Fuck you and your blackmail Becky. I will rip that phone out of your hand and trash it.\" I struggled, but not hard as Julie yanked back on my hand. \n\n\"As if you could.\" Rebecca laughed cruelly. \"Okay, let her go, she knows the deal. Don't fucking forget what will happen if you don't do as you are told Sara. Now, get dressed and go clean up before class.\" \n\nThe twins let her go and Sara ran into the bathroom stall to get dressed. \n\n\"You know I love a bargain.\" Rebecca started. \"Everyone want to leave me and Carrie alone to discuss the future of Sara's porn career?\" \n\nCourtney rolled her eyes. \"She isn't going to have a porn career. Stop being so melodramatic.\" Then she turned to me and Julie, measuring us with her eyes. \"No, I think we will stay, but maybe you should send the twins out.\" \n\nRebecca looked at me with a sneer then flashed towards Courtney. \"I don't think so Court. I trust you and Julie to be civil, but you know better than anyone how violent Carrie can be. And I'm not so sure which side you and Julie would fall on if it came to a fight.\" \n\n\"There isn't going to be a fight.\" Julie interrupted. \"Carrie promised.\" \n\n\"The bigger the web the more flies escape.\" Courtney answered and shrugged. \n\nRebecca looked unsure for a moment. \n\n\"You are an idiot sometimes Rebecca.\" Courtney sighed. \"I'll cuff her, send your pets outside with Sara.\" \n\n\"Easy Courtney.\" Allison chimed in, talking for the first time. \"We aren't her pets. And we are all friends here.\" \n\n\"You are right Al, we are all friends, mostly.\" Courtney answered. \"Would you and Addison please leave the four of us to discuss the matter?\" \n\nAddison smiled. \"Definitely.\" She was clearly uncomfortable with this and happy to leave. Allison, looked a bit less eager to depart. But, a minute later, a dressed and red-faced Sara was leaving the bathroom, I was handcuffed, and Allison and Addison offered me a sympathetic smile, on their way out. \n\n\"So, what do you want?\" I asked through gritted teeth. \n\n\"A trade of course.\" Rebecca smiled. \"You for your friends. Don't think it stops at Sara. We will do the same with your other friends.\" She looked at Julie for a moment and added. \"Jen, Cat and Gina I mean. Julie, I like.\" \n\nJulie scowled, \"I'm not sure which is worse.\" \n\n\"Be a bit more specific.\" I spat. \n\n\"Enough.\" Courtney interrupted. \"Rebecca, you have the last laugh on her. I don't get why you are still so angry about it, but let's get to the basics. What is going to appease your injured pride once and for all?\" \n\nRebecca turned on Courtney and I thought she was going to slap her, which would have been interesting, but of course didn't happen. \"I want her to be as miserable as I was that week.\" \n\n\"And you don't think that has happened?\" Courtney asked, raising an eyebrow. \n\nRebecca stopped. \"Yes, but not because of me.\" \n\n\"You should let the squad beat your ass and fuck your throat with dildos and try to draw a comparison.\" Courtney answered with a smile. \"But, lets get past that. You still feel like Carrie has an upper hand on you. What is going to change that?\" \n\n\"I'll let you know when I get there.\" Rebecca countered with a sneer. \n\n\"No, she has too many other obligations. What is the price Rebecca? I will be sure that Sara, Gina, Jen and Cat leave you all alone. You leave them alone. It all ends today.\" Courtney said. \n\n\"A month as my personal toy. No masks, no limitations. Her ass is mine at school until November.\" Rebecca offered. \n\n\"Too much Rebecca.\" Courtney smiled. \"Besides, you can make your point in a lot less than that. Four hours.\" \n\n\"I am not agreeing to this.\" I spat. \"What did you do to Sara?\" \n\nRebecca grinned. She held up her phone and sent files to Julie. \"Show her Julie.\" \n\nJulie held out her phone and saw the clips. There were five of them. From the still at the beginning of each it was clear, she was stripped naked and posed in very compromising positions. \n\n\"Did you hurt her?\" I asked, trying to control my anger. \n\n\"Look at the clip, she seems happy to me.\" Rebecca laughed. \n\nI lunged forward, but let's face it, with my hands cuffed, there was nothing I would be able to do anyway. Courtney pushed me back and Julie held me back. \"Stop Carrie, clearly the cuffs were wise.\" Courtney admonished me. \n\nJulie played the clips, but didn't show them to me. I could hear them though. \n\n\"Take off your shirt.\" Rebecca's voice came through Julie's phone as she played the first clip. It was followed by a whimper from Sara and the sound of her shirt being removed. \"And the bra. In fact, just strip naked. No point wasting time.\" Rebecca's voice came again. Then, the sound of Sara whimpering as she apparently stripped naked. \n\nThe second clip was the sound of Rebecca guiding Sara through poses, \"Put your right ankle on the handrail.\" Whimpering and time passed. \"Now, lower that leg and lift the left ankle the same way.\" More whimpering and time. \"Turn around and spread your feet and touch the floor.\" Whimpers. \"Spread your legs more, hands flat on the floor.\" Incoherent whines. \n\nThe third clip had Rebecca telling her to sit on the toilet seat and place her feet on the sides, sitting on the back of the seat. \"Spread your lips and show me how you play with your clit.\" Whimpers and slight moans followed for a couple of minutes. \n\nThe fourth clip was more instruction. \"Kneel on the floor, and put your stupid face and the floor in front of you.\" A few seconds passed. \"Knees closer together, get your ass up as high as you can.\" After about thirty seconds. \"Hands on your ass and spread your cheeks wide.\" A few seconds. \"Wider.\" Another thirty seconds or so passed with Sara whimpering and slightly moaning in the sound. \n\nThe fifth and final clip was yet another pose. \"Out here and sit in the sink, feet on the counter.\" About a minute of the sound of her climbing into the sink, I assumed. \"Now spread your nasty pussy open.\" Sara whimpered. \"Now, show us how you stroke your clit again.\" Sara moaning softly. \n\nCourtney had joined Julie to watch by the second clip. But, they wouldn't let me see it. \n\n\"It would have been better with a professional movie camera.\" Rebecca grinned. \"Maybe next time.\" \n\n\"I don't know how you coerced her to do this Rebecca, but clearly she didn't look happy about doing it.\" Courtney decided. \"We don't have much time before the bell. I assume you realize that sharing these clips will remove any bargaining power you have. Take first period to think about what you want, what will make you delete this and anything else you have and end this vendetta once and for all. I will even throw in some cash to buy off your hurt pride, say, five thousand dollars?\" \n\n\"No, you will not Courtney!\" I shouted. \n\n\"Shut it Fitch, or I'll gag you.\" Courtney smiled at me. \"I want her Becca, what's it going to cost to end this bullshit once and for all?\" \n\n\"Courtney, that ... she isn't property to be sold.\" Julie interjected, clearly uncomfortable. \n\nRebecca frowned in thought. She hadn't expected this. I could see it in her face. \"Okay Courtney, if you really want to bail her out, I guess I can find peace in knowing how much this will bother her. You are right, she has too many obligations to take care of my needs too. But, really, you think my pride can be bought with money? Instead of Carrie, you can be my play toy for a month.\" \n\nCourtney laughed. \"No. I won't do that Rebecca, and you know it. Julie would, but I don't want that either. Here is the offer, five thousand dollars, my stylist will do your hair, nails, and make-up for the prom. I'll throw in a dress, a limo and an after-party at a reasonable venue. You will be the most beautiful and popular girl at prom this year. I guarantee it.\" \n\n\"As for Carrie, she will apologize to you in front of the school and apologize to Brad for being a cock tease or giving shitty blowjobs, whatever you want her to say. Invite whoever you want. She will apologize and then kiss your feet in front of everyone. Her friends will be there to see her embarrass herself. And then it's done and it's over.\" \n\nI glared at Courtney. \"Absolutely not.\" \n\nShe just smiled. \"That is going to be so hard for you isn't it Carrie?\" \n\n\"I didn't agree to do it.\" I spat. \n\nRebecca paused in thought. \"I'll think about it. I'm interested.\" She smirked at me. \n\nRebecca glared at me. \"I want her in the clothes she is wearing now, minus her bra. And if you aren't loud enough Fitch, I'll make you repeat it.\" Then she paused, debating the deal apparently. Finally, she turned to Courtney. \"I agree with you Courtney, this is a waste of my energy trying to find ways to fuck with someone who is so unworthy of my recognition. I want one more thing, nothing monetary, a final humiliation for this cunt who thought she could date my Brad.\" ",
        "\"I did not agree to do this!\" I screamed. \n\nCourtney slapped my face. \"You will do it Carrie. And we will discuss the details of how you are going to do it at lunch.\" She turned back to Rebecca. \"See you in second period. Be sure to get everyone you need to be there. This is it Rebecca, I mean it. I will join Carrie in publicly destroying you if you go back on this.\" \n\n\"Whatever, I'm not afraid of you Courtney.\" Rebecca sneered. \"But, I can live with this.\" \n\n\"How big of you.\" Courtney said, sounding bored. \"Okay, leave me with the slut if you don't mind.\" \n\nRebecca slammed her elbow into my side, driving the wind from my belly, on the way out, and stomped through the door. \n\nI looked behind me to make sure she was gone and then ran up to Courtney, still cuffed, and kissed her cheek. \"You were brilliant.\" \n\nJulie looked at us as Courtney uncuffed me. \"You planned that?\" She asked incredulously. \n\n\"It was mostly Carrie's idea.\" Courtney explained. \"Of course, she owes me a lot of money now.\" She laughed. \"But, we made payment arrangements already.\" \n\n\"And you didn't think you could share this with me?\" Julie asked angrily. \n\n\"I needed your honest reaction Jules, I'm sorry.\" I explained. Wrists free, I gave Julie a hug. \"I'm going to be free of that cunt Jules. I had to be free of her, you get that don't you?\" \n\nJulie sighed. \"Yes, I suppose I do. So, what is your payment arrangement?\" \n\nCourtney giggled. \"She owes me the money. Interest is lunches, games, you know, all the things a little slut like Carrie needs to make her little pussy wet, until the principle is paid in full. Should be around ten thousand dollars once you add my stylist, a limo, and all the rest I promised her.\" \n\nJulie laughed and shook her head. \"Well, invite me from time to time.\" \n\nCourtney laughed. \"I'm sure you can take whatever you want from Carrie whenever you want it.\" \n\nCourtney slapped my ass on the way out. \"See you in class, slut. Ciao Julie.\" \n\n\"I'm kind of pissed you didn't trust me on this.\" Julie said as Courtney departed. \n\n\"You'll get over it.\" I smiled. \"I wanted to tell you Jules, I was just afraid one of us would blow our reactions and didn't want to add yours to my concerns.\" \n\n\"Well, you both fooled me, and Rebecca too, from what I can tell.\" Julie smiled and kissed me. \"Good move Carrie, I'm proud of you.\" \n\nI kissed her then and we quickly ended the kiss and went to checking our faces in the mirror when we heard the door open. \n\n\"Yeah, that should do it.\" I winked at Julie in the mirror and turned towards the door. A few freshman girls were walking in, looking all timid and what not and I giggled, trying to remember if I was that scared of high school in my freshman year. \n\nJulie was right behind me and we walked together to our first period. Rebecca sat there looking smug. I looked towards her, then quickly looked away, as if I was embarrassed by what transpired. Not to seem too superior. I was not going to enjoy this humiliation at the end of school today at all. But, it needed to happen. And I was, perhaps foolishly, hopeful that it would end our problems once and for all. \n\nSara looked up at me with a quite miserable expression on her face. I offered her a weak smile. My heart went out to her. I hadn't seen the pictures or videos they had, but if the visual was anything like the sound, it was humiliating. I went over to her and found that the other three girls all had a nervous look on their faces, occasionally glancing over at a smirking Rebecca. \n\n\"Listen,\" I whispered. \"It ends today. I need the four of you at the flagpole out front right after the bell rings, and everything will be forgiven, and we will agree to leave them alone, and they will agree to leave us alone.\" \n\n\"What are you ... What is she going to do to you Carrie?\" Jen asked quietly. \n\n\"I agreed to it. Just don't try to stop it. Be there, witness it, and everything will be over.\" I looked at Sara who was crying silently. \"It's okay Sara, your pics will be deleted, I promise.\" \n\nShe hugged me tight and whispered, \"I'm so sorry I got you into this mess Carrie. I told her it was all my idea.\" \n\n\"It's okay Sara. It would have happened sooner or later anyway. Let it go, and we are good, you don't owe me a thing. I'm sorry for whatever they put you through. It's me she hates, not you.\" \n\nAs we hugged, I got a sense that the other three girls felt upset about the arrangement of me taking it on the chin for them. \"Really, Cat, Jen, Gina, it's over with the cheerleaders. I will do what I have to do, and we will go back to just being friends, without this silly rivalry.\" I offered them a smile, and we had a big group hug. \n\nThe bell rang, and Julie and I settled into our seats. A bit of light flirting, brushing each other's hands, eye contact followed by a giggle or a smile, legs touching now and then, but mostly just paying semi-attention in class. I heard Rebecca mention my name and laughing now and then, but I ignored it. \n\nWe parted ways in the hall, and I walked to Mr. Thatch's class. Karen would be there, in fact, she waited for me at the door and smiled at me. She was quite beautiful, if I was being honest. She wore a pair of yoga shorts that, pretty much told the world what a fabulous ass she had. On top, she wore a very tight half shirt. In reality, I should have been extremely flattered at her interest in me. She was ... well... gorgeous. \n\n\"Hey Carrie!\" Karen greeted me at the door. \n\nI smiled. It was not entirely forced. \"Hi Karen.\" \n\nShe walked up close to me. \"I heard something is going to happen after school.\" She whispered. \"It really bothers me that Rebecca hates you so much. I thought you were a great asset to the squad.\" \n\nI rolled my eyes at her. \"Get out. I was the worst one by far.\" \n\nKaren frowned. \"No, you weren't Carrie. You picked it up fast. I mean it.\" \n\nI shrugged. \"Anyway. Try not to think less of me. I'm doing what I have to do to keep the peace.\" \n\nThe frown didn't leave Karen's face. \"Why do you think I'm asking you out Carrie?\" \n\nInteresting question. \"Honestly, I don't know Karen. At first, I thought it was just because Farin and I broke up, and maybe there are too few lesbians in school. But, I really don't know then, why you wouldn't have gone after Farin. She's prettier than me. Better body, more flexible, more experience.\" \n\nKaren laughed. \"You think far too little of yourself. I aim to change that.\" Then she just turned and went inside the class. \n\nWell, that had me totally and completely confused. I stood there dumbfounded for a few seconds, before going in and taking my own seat. Karen smiled at me as I looked at her, but she was not flirting really, just smiling nicely. Courtney interrupted my thoughts, as she slid into the desk next to me. \n\n\"Sooooooo princess, how about a nice foot massage?\" She giggled and kicked off her shoes, and put her feet on my thigh. \n\nI rolled my eyes at her. \"Really Courtney?\" I asked. \n\n\"Unless there is some other part of my anatomy you would prefer to rub.\" She giggled. \n\nI started massaging her feet. Like the rest of Courtney, her feet were damn near perfect. As feet go. She had socks on, and after a few minutes, she took them off and had me rubbing her bare feet. Her toenails were perfectly pedicured and painted, with French tips and hot pink. \n\nShe was texting the entire period. Rebecca was texting the entire second period. If I dared to look at her face, she would wink at me or swipe her tongue along her lip. So, I basically looked at my book, Mr. Thatch or her feet for the entirety of the class. \n\nAt five minutes to bell, she thanked me and had me put her socks and shoes on. I heard whispers and giggles, but I ignored them. After what I had been through, being mocked for a foot rub seemed just silly. \n\nAs I started to get up and grab my books, I caught Karen's eye. Or she caught mine is probably more accurate. She smiled at me and made a 'call me' gesture with her hand, while mouthing the words silently. Rebecca was there next to her and scowled at her. \n\n\"What the hell do you dykes see in her anyway?\" She said, loud enough for me to hear. \n\nI just laughed to myself and headed out behind Courtney. \n\nCourtney grabbed my wrist and drug me over to the side of the traffic. \"You know, I really am starting to think you are a total slut Carrie. Can you keep it in your panties today? Seriously.\" She gestured at Karen. \n\nI rolled my eyes. \"It wasn't my idea. Kind of being forced.\" I whispered. \n\n\"Well, try not to look like you are working your way through the entire cheer squad, slut.\" And she kissed my lips a quick, but soft peck. She giggled, \"Farin, Julie, me and now Karen. Some guys are getting pissed at you.\" She laughed, before heading to her next class. \n\nI didn't like the attention we got, but knowing how Courtney can be, this was really mild. I expected after the deal I made with her to borrow money to appease Rebecca, that she would be really obnoxious about it, but so far, she was being quite tame. \n\nI rushed into the crowd and headed to see Julie in Social Studies. \"There's the squad slut now.\" I heard Farin's voice quite clearly above the din in the hall. I cringed. I understood her bitterness, but the stabs still hurt. I didn't acknowledge her, though it took all my will not to look her way. \n\nJulie was already seated when I walked into the room. She smiled at me and whispered when I sat down. \"So, are your panties wet? Did you and Karen make out in class?\" \n\nI laughed. \"NO!\" I said loudly. \n\nShe giggled. It was super cute. \n\n\"Aww, you must be sad.\" She pouted and then she stopped teasing me and we fell into the wondrous world of Miss Simms. A lot of sarcasm there, if you missed it. \n\nJulie and I walked together to Biology with a bit of friendly joking at my expense, and I started to contemplate lunch today as the minutes ticked on towards the bell. Courtney would expect me to start paying up for her loan and her role in my freedom from Rebecca. \n\n\"Are you... um... joining us for lunch?\" I blushed in a whisper to Julie at five minutes to the bell. \n\nJulie giggled. \"If I'm invited I will, but that is Courtney's thing, not mine, so I won't invite myself. It would be a bit rude.\" \n\n\"Okay.\" I couldn't think of anything better to say. I was torn between wanting Julie there and not wanting Julie there. \n\n\"I'm looking forward to our hot date at the lesbian session tonight.\" Julie giggled. \n\nI laughed. \"Aren't you afraid they will turn you?\" \n\n\"I already know the only person who could turn me.\" Julie quipped. I blushed. \n\nAt the end of Biology, Julie looked at her phone when it vibrated. \"I got an invitation to lunch.\" She winked at me. \n\nI wanted to squeeze her hand, but it felt awkward to do so. Instead I smiled a wide grin. Then, the bell rang, and we headed off to deposit our books, and grab something to eat. Courtney met us at our lockers. \"I have your lunch, let's go.\" She said with a mischievous grin. \n\nNow, I thought we were headed to her favorite classroom, so I almost led the way, but Courtney started heading down the hall to the back exit of the school. \n\n\"Courtney, we can't leave the school, we'll be suspended!\" I exclaimed. \n\nJulie looked a bit concerned as well. \"Are you sure about this Courtney?\" \n\nCourtney just laughed. \"You can't tell me you two have never skipped school?\" She looked for our reaction, which was an unspoken no. Courtney shook her head. \"Jesus, what angels you are.\" She laughed. \"But, we will be back before lunch is over, don't worry.\" \n\nShe was carrying a bag and led us out the door and towards the football field. She kept walking and we kept following. \"So, one hundred dollars a week... ten thousand dollars... I think you are going to be under my thumb until you are twenty, huh Carrie?\" She giggled. \n\n\"I will pay you more than that when I can Courtney.\" I answered. \n\n\"Nope, terms are set, no pre-payments accepted.\" Courtney giggled. \"Of course, Julie, you and I will have to come to an understanding, after Jill is done with her, I mean.\" \n\nJulie squeezed my hand. \"I want in.\" She said. \n\n\"What?\" Courtney turned confused. \n\n\"I want in on it. I'll pay you half the money and we share her.\" Julie said. \n\nI turned on Julie. \"Julie, you don't have to ... I mean, you know you have me anyway.\" \n\nJulie looked at me and laughed softly. \"Oh, I know. But, I don't want Courtney having a superior position. So, I will put up half the money, and your ass is mine too.\" \n\nCourtney looked at Julie thoughtfully for a minute. \"You know, you should save your money Julie. I wouldn't get in the way of you and Carrie. Just, borrow her from time to time.\" \n\n\"I know she's good for it.\" Julie smiled. \n\n\"Wait a minute.\" I interrupted. \"Where the hell are you going to get five thousand dollars Julie?\" \n\n\"I have some money saved up from ...\" Julie started before I interrupted her. \n\n\"Fuck no!\" I shouted. \"You are not taking your college money for this. I will not allow it Julie Petrili, I mean it. Absolutely not!\" I was yelling at her, and she looked at me sternly. \n\nJulie looked around us, we had walked a good way from the school, and nobody else seemed to be outside. She took me by the arm with a surprising grip on my wrist and sat down, yanking me off balance to fall over her lap. Then she started smacking my ass really hard! \n\n\"What the ... OW!\" I yelled as her hand struck my ass. \n\nCourtney was watching and laughing softly at the whole exchange. \n\n\"You are not going to tell me what I can and can't do Carrie!\" Julie yelled as she struck my ass hard over and over again. \"Do I make myself clear?\" She added with more slaps to my stinging butt. \n\n\"Damn... OW... Okay okay.\" I answered, rolling off her lap. \n\n\"She's right Julie, you shouldn't use your college money for this. Look, it doesn't even put a dent in my life. Let me take care of it. You can still do whatever you want with her, clearly.\" Courtney told her. \n\nJulie rolled her eyes at both of us. \"You know what my biggest fear is right now?\" The question was rhetorical, it was clear she was going to answer it herself. \"That I lose my best friend to all this madness.\" \n\n\"Julie...\" I started and she cut me off. \n\n\"Shut it Carrie. You kept that entire debacle with Darla from me. From ME! Your best friend in the fucking world. So, just shut up right now and let me finish. You have changed so much in the last month and I wasn't a part of it. Do you know what I would give to have had you confide in me over the past weeks? I felt so betrayed, you have no idea how bad I felt finding all that shit out after the fact. So, to guarantee that you are in my life for the next two years, I will work this summer, and part time during college, to make up the lousy five thousand dollars, that I know will be better spent here, than a couple of classes at college.\" \n\nCourtney grinned at her. \"I have to admit it Julie, you have a great point. Agreed then.\" \n\nAnd Courtney and Julie shook on it as if I had no say in the matter. \"Wait!\" I interrupted. \n\n\"Too late Slutball. It's done.\" Julie said. \"Just take your clothes off and be quiet, while we discuss your future.\" She laughed at that last part and I just huffed, but soon all three of us were laughing. \n\nCourtney looked back at the school. \"Seriously though Carrie, lose the clothes.\" \n\nI looked at them both and they were smiling, but not laughing anymore. \"We are still in the open.\" I protested. \n\n\"Yeah, what would you get out of being naked in private?\" Courtney asked. \n\n\"You two are putting me on, right?\" I asked, suddenly not so certain. \n\nThey both frowned at me. \"You are seriously going to back out of your agreement, already?\" Julie asked in a disappointed tone. \n\n\"Couldn't...\" I began, but their faces were impassive. \"Fine!\" I said and took off my shirt. I hoped they would stop me, but they didn't. \n\n\"You know, the freshmen have gym this period. I had planned to be up by the bleachers by now, you might want to hurry it up before they come outside.\" Courtney smiled. \n\nI looked back at the school, and started to have a panic attack. \"Please ...\" \n\n\"No!\" Julie and Courtney said together. \n\nI quickly pulled off my bra, then my skirt and finally my panties, crouching there on the side of the football field in just my shoes. They just stood there watching me. So, I quickly pulled off my shoes and socks and then they started walking towards the bleachers again. I gathered my clothes in my arms and held them against my chest and waist, leaving my ass exposed to the world. \n\n\"So, there really isn't time left to do anything with her after school.\" Julie began. I had no say and really, when you are naked in the middle of the school yard, your opinion doesn't seem very important, even to your own mind. \n\nCourtney looked back over her shoulder at me and giggled. I was struggling to keep up, my feet being bare. I kept looking behind me to see if the freshman came outside. I was a nervous wreck. I mean, what would I even do if they came outside? There was nowhere to hide. The only thing I could hope for is that Julie and Courtney let me get dressed quick. \n\n\"So, it's mostly just Sundays outside of school and I'm sure she'll have to spend some time with her parents.\" Julie continued. \"Should we divide the day in half at school, or just enjoy her together?\" \n\nI was fuming. It was like they were planning to account for every second of my time. I felt my whole life being negotiated away like I was property. Not to mention that I was hyperventilating from being outside naked. \n\n\"You know, she doesn't need to hear this.\" Courtney interrupted. \n\n\"You're right.\" Julie smiled, and they stopped and turned around. \"Give me the clothes Fitch. Then, run, do not walk or jog, but run your ass up to the far end of the field and sit on the bleachers, facing the visitor side, knees one foot apart. We will fill you in when we get there.\" \n\nI opened my mouth in surprise. I was about to say something, but I didn't know what it would be. I didn't trust myself to speak. I looked at them with begging eyes, but they just smiled at me. Julie held her hands out expectantly. It was like a terrible dream that I was trying to shake out of. I knew I had agreed to this, but I thought it would be a little... less. \n\n\"Fine!\" I yelled at them and handed Julie my clothes and ran, looking back over my shoulder to see if anyone was coming out of the school. I kept Julie's instructions and ran, thinking the faster I got farther from school, the less chance anyone would be able to tell I was naked. \n\n\"Nice ass Slutball!\" Courtney shouted so loud I knew if anyone was outside, they would have heard it and looked in her direction. \n\nI panicked a little then, looking back over my shoulder. There was a parking lot and the tennis courts and another fifty yards between me and the school and I had just gotten to the main football field. I was holding my breasts in my left arm to keep them from painfully bouncing all over the place. Then, I really started to freak out. The gymnasium door opened and far off in the distance, I saw bodies start to exit the gym. \n\nFrom that distance, they were small, not tiny. I could make out that it must have been the freshmen coming out because they were so short. I made an 'eep' sound, to nobody in particular, and turned and ran as fast as I could to put some more distance between me and the school as soon as possible. I could hear their voices, not any words, but just the distant sound of voices as they came outside. \n\nMy heart was pounding in my chest about a thousand beats per minute. I ran and ran, like the bleachers were going to be my safety net. If someone had been timing me, it was probably the fastest fifty-yard dash of my life. I didn't look back again, what was the point? At least from the distance, they would only be able to not quite make out my white ass as I sprinted for the bleachers. Maybe they would think I was wearing a white pair of white shorts where my bikini line was. ",
        "I could feel the sweat trickling down my brow and I quickly wiped it off. I didn't stop running though. Each step, each racing heartbeat brought me closer to the bleachers. Then, it dawned on me, I was to sit with my knees spread! Surely, Julie hadn't thought that there would be other people outside when she told me to do that. \n\nI passed the fifty-yard line of the football field and turned to the right, where the home side bleachers faced the field. I quickly ran down the row to the far end of the bleachers. Last little push and I was out of breath at the farthest point from the school. Holding my left arm over my boobs and my right hand over my crotch, I turned around. Julie and Courtney were walking towards me, talking and taking their sweet time. There were two groups of freshmen, one was grouped by the tennis courts, to my left side, a good three hundred yards away at least. \n\nThe other group was heading towards the soccer field closest to the school. They were walking kind of away from me and that field was a bit lower than the one I was on. But, once they got there, half of them would be somewhat facing where I was when they played. I just hoped they all stayed on that field. If some of them went to the upper soccer field, they would be walking past the football field. \n\nAt least nobody was coming closer, at the moment. The best they would be able to make out was that there was a girl at the bleachers. It was too far for me to make out anyone in particular, but then again, it was close enough for me to make out that they were all wearing their gym uniforms. \n\nI sat down on the bleacher, bottom row, to keep a low profile, and spread my knees. She didn't say I couldn't cover up, so I kept my left arm over my chest and my right hand over my kitty. I looked intently at the boys on the soccer field. 'Oh God!' I thought, if I could make out that they were boys, and the girls were on the tennis courts... \n\nI freaked out a little then. And, while I knew this wasn't what Julie expected of me, my apparently poor sense of modesty took over, and I moved back and sat on the foot rest behind me so, even though my knees were spread, with nothing in front of my pussy to hide it from view, sitting with the seat in front of me, blocking a small line of my body, made me feel a lot more covered. Sitting on my naked ass on the filthy, cold metal of the bleachers made me shiver, it was cold, it was gross, it was frightening. \n\nJulie and Courtney seemed to be walking in slow motion. I swear they were doing it on purpose. They would even stop once in a while, facing each other in conversation. Of course, they were discussing me. That made me nervous and excited at the same time. I looked down to see my stupid pussy was leaking like this was the best thing in the world. \n\nNow, I will be the first to admit, that my mind plays tricks on my eyes sometimes. I was certain that all the freshmen were looking at me on the bleachers in between paying attention to playing soccer and tennis. I kept my breasts covered with my arm and my pussy with my hand, but let's face it, I don't have enough arm to cover my D cups. \n\nI thought about my predicament as I sat there. Okay, first, I had volunteered to do this, as I figured it was a much preferable alternative than what I would have found myself doing eventually to appease Rebecca as she gained more blackmail material on my friends. I knew Courtney enough to know that being naked in school was going to be a common experience when she could get away with it. It may seem weird, but I liked Courtney. I didn't like her in a way that I felt any romantic attraction to her, but she never seemed malicious. She was always smiling, never mean. \n\nBut, Julie's whole attitude today, even before 'buying in' on the deal I worked out with Courtney, had me confused. I was not sure I could see her as a dominant person, knowing her like I did. I loved Julie as much because we were best friends since we were little girls, as knowing her now as a gorgeous, intelligent and emotionally connected woman. Obviously, this was bringing out a new sexual awareness in her. The interaction in her bedroom Sunday, when she wanted to see if I got wet from her humiliating words, completely floored me. \n\nAnd now, here she was, doing things to keep me in her life, as if that could ever change. It made me insecure. Why would that thought even cross her mind? Yes, this whole thing had been a great strain on our friendship, I understood that. But, we came out of it so much closer. And I had to believe that no matter what happened, she and I would always be in each other's lives. \n\nGranted, three weeks ago, that discussion was about us getting married and our kids playing together. Now, it was possibly marrying each other, some day. I giggled at that thought. I'm not sure how our parents would handle it. But, if this continued, my images would have to change again. Instead of being lovers like I pictured, we would be lovers like Jill and Sue? I often felt sad that Jill has never gone down on Sue and never would. Meanwhile, she has kept a quite accurate count of every orgasm she has given Jill. \n\nSure, they were happier than a lot of couples. I mean, look at me, or probably half of my school, who didn't have two parents that were still together. But, did I want that? Certainly, at least in the conscious part of my brain, I was doing this to figure my shit out so that I could control it. It wasn't because I wanted this to be my life. I wanted to draw, to love, to wear clothes in public. I missed my wardrobe. I missed control of my life. And yet, there was no denying that my body was in complete defiance of my brain in this matter. \n\nThe clearing of Julie's throat woke me from my thoughts. I looked up to see the two of them smiling at me and staring at the string of goo dangling from my pussy. I sighed. \"Jules, please give me something to wear.\" \n\n\"No.\" Julie grinned. \"Carrie, think about Courtney and I. How do you think we expected you to sit when we arrived at the bench? You have ten seconds to get in such a position.\" \n\nI blushed and looked at them for a sign of weakness. I found none. I moved up to the seat behind me, sat with my knees about two feet apart, and put my hands behind my neck, sitting up straight and arching my back. \n\n\"Very good Slutball.\" Julie praised me. \"And yet, you didn't do it. This is one of the things that Courtney and I had to discuss, how you don't think of me as someone who will truly punish you. And, I have to admit, it's a lot harder for me to see myself being harsh with you, because I do love you in a way that nobody else does.\" \n\n\"So, I now have to prove to Courtney that I can hold up my side of a partnership, to play with you together. I do love you Carrie, but I think that should make me stronger when it comes to disciplining you, not weaker. I'm not sure where this falls, on your expectations, or what Courtney would have done right now, but this is my punishment. Keep your hands as they are, and you will walk or run up and down the bleachers, stepping on each seat, all the way to the top. Then back down again. You will repeat this five times, five times up and five times down.\" \n\nI turned white. \"Julie, be reasonable, it will be ...\" \n\nJulie smiled at me. \"Embarassing?\" She finished my statement for me. \"Yes, it is quite likely that the half of the freshman class that is down there on the fields will notice you. They will also wonder whether their eyes are playing tricks on them, or there is a naked girl running up and down the bleachers. The gym teachers might notice too. The good thing for you is, there is no way that they can make out your face. Now, not another word and start.\" \n\nI opened my mouth and she shook her head 'no'. I sighed loudly and stood and stepped up onto the bench behind me. I suppose I was doing this more for Julie to appease Courtney. At least, that was how I sold it in my head. As I took that first, terrifying step forward, I was overcome with fear. I was standing, on the bleachers, only about two hundred yards away from over one hundred kids. I was clearly visible, though I prayed that I wasn't clearly naked. \n\nThe bleacher seats weren't so far apart that I had to jump from one to the next. They were a wide step apart. They were metal, and I could hear the patter of my bare feet, as I stepped forward and shifted my weight to the next step ahead of me. I suppose it was a mercy that I was climbing away from the potential audience to my exhibitionist show. Still, I knew I was climbing higher and the chance that everyone did not see me was diminishing, the higher I went. \n\nWhen I got to the fifth step, I heard a splatter beneath me and paused to look down at the wetness that had dripped to the bench between my legs. I shuddered in embarrassment. In spite of the coolness of the air, my body was sweating. In spite of the slowness of my steps, my heart was racing. It only got worse with each step forward. \n\nThere were twelve seats. Twelve steps. I must have been twenty feet above the ground when I reached the back rail of metal behind the back seat. I stood there a moment, my naked ass bared to the empty football field behind me. My body was shaking, as I drew up the will to turn around, naked, facing the audience that I imagined had stopped playing soccer and tennis to watch, squinting into the sun, to see the naked senior walking up the bleachers. \n\nI turned and gasped. I was very high. I knew this at the back bleacher, but I hadn't the nerve to look down. Now, looking down at the school from this height, I was truly terrified. I felt a tear trickle down my cheek, as I looked down at Courtney and Julie. They were eating lunch! They were ignoring me completely! They were talking in hushed voices. \n\nI stepped forward carefully, going down was a bit more dangerous than going up. It also made my breasts bounce much more severely, than when I was taking the steps up. I whimpered, they hurt a bit with each downward step. Lower and lower I went, the pain of my wobbling breasts acute, though I felt comfort in the fact that I was now decreasing, not increasing, my visibility to the student body. \n\nI could see the kids playing on the soccer field, ahead and to the left. If I looked to my left, I could see the girls playing tennis. I couldn't make out any facial features at all, so I was sure that they couldn't make out mine. Still, I could tell that some people would occasionally look in my direction. That sent tremors down my spine. \n\nI made it without falling to the bottom row and I looked at Julie for pity before turning to start the upward climb again. I was panting, out of breath. My legs even burned a little for the effort of the long steps I had to take with my short legs. \"May I please move my arms to my sides Jules?\" I asked. \"It will help me to balance better.\" \n\nShe turned from Courtney to look at me with a lascivious smile. \"That was very polite and a reasonable request, Slutball. No, you have four more, and you would be wise to pick up the pace. Courtney and I are leaving, as are your clothes, in fifteen minutes.\" \n\nI looked at her shocked. Who the fuck was this? I was about to tell her off and thought better of it. I turned and started taking the steps at a much faster pace. I wasn't running, I just wasn't pausing to take in the scene I was making. Twelve steps isn't all that much really, but my legs were starting to burn more with the elevation in the steps. It was almost like lunges because of the distance between the seats and I was not a very athletic person. \n\nAnd the downward lunges were actually more straining on my legs, though the effort of moving downhill was easier. I barely took notice of the heads turned in my direction from a distance on the second time down the bleachers, I was too focused on the sweat that was sheening my body and not falling as I moved faster. I tapped the bottom bleacher with my feet and turned. Julie smiled at me and took a bite of salad from the large container that Courtney had brought along. \n\n\"You look better wet, Slutball.\" Courtney giggled. \"I mean all over wet, not just your drippy cunt.\" \n\nI groaned and started back up the steps again as they laughed. My legs were really feeling the burn on the third trip up and I almost lost a step on the way back down. I heard the occasional splatter beneath me, but ignored it, intent upon finishing this task so I could join them and hopefully get my clothes back. \n\n\"How many is that?\" Julie asked with a giggle, when I stopped to pant on the bottom step before turning again. \n\n\"Three.\" I answered. \n\n\"She's too good at math.\" Julie laughed. \n\nI muttered \"bitch\" under my breath before climbing up the fourth time. My legs were in serious pain now. I simply was not used to this type of exercise. Well, let's be honest, I wasn't like fat, but I was never one to exercise on a regular basis. I had to rest at the top step before turning back to descend once more. I noticed a lot of faces turned towards me and closed my eyes to push the thought away. Taking a deep breath, I plunged forward, and went down the bleachers quickly. \n\nI stopped again at the bottom, totally winded. \"God, I'm dying here.\" I whimpered. \n\n\"Seems like we should do this more often then.\" Julie grinned. \n\nMoaning in pain, I stepped forward and misjudged the step. I fell forward, but managed to catch myself on the third step with my hands and not my face. \"Shit.\" I mumbled, pushing back to my feet. My legs were not only burning, but shaking with the effort as I made my way up the fifth and final time. When I turned this time, I noticed someone moving towards us, and I panicked. \n\nI contemplated a jump off the back bleacher. The ground was elevated, so it wasn't a twenty foot drop. But, then I saw that they were just retrieving an out of bounds ball. I breathed heavily for a few seconds before attempting the final downward walk of the bleachers. When I hit the bottom step, I stepped once more to the concrete floor. I was panting and sweating, and my legs were shaking uncontrollably. \n\n\"Okay Care-Bear, here, have some water.\" Julie handed me a bottle of water and I drank half of it in ten seconds. \n\nI stood there gasping for air. \"May I sit down now please?\" \n\n\"On the floor, knees or ass, it's your choice.\" Julie instructed. \n\nI decided to kneel because I didn't want my sweat-covered ass dirty. \n\nCourtney handed me a fork. \"Dig in Slutball. You really need to exercise more, we were discussing that with Jill. She said she already had a plan for you. I offered to have you train with the cheerleaders, but she said that would cut into her time.\" Courtney giggled. \"Sounds like you will be setting your alarm an hour earlier every day.\" \n\nI started eating. I was suddenly very famished. It wasn't much, a salad with small bites of chicken in it. But, either it was made by Courtney's staff, or I was just so hungry that it tasted delicious. \n\nJulie and Courtney had eaten most of the chicken. They told me so. Then, they began to fill me in on what they wanted me to know of their discussion, as I fed my face. \n\n\"I expect the same enthusiasm.\" Courtney giggled. \"But, you definitely helped Julie prove her point. So, good for you Slutball. You get both of us together, most of the time.\" \n\n\"I figure you already knew this, but whatever Courtney wants in second period, you will do without question.\" Julie told me. \"Lucky me, I get you for most of the day, so it evens things out with the time she will get with you after practice.\" \n\n\"You will pick up Julie for school every day, of course, unless she tells you not to. Then, after Jill is done with you, one of us will let you know what we expect that evening and whether we want you to wear anything special to school the next day.\" Courtney added. \n\n\"Don't worry, you will get underwear most days.\" Julie grinned. \"But my instructions regarding your panties in my locker at the end of the day stands until I change it. I will get them back to you that evening or the next day. You may want to ask Jill for permission to get more than the four panties you own.\" \n\n\"Friday and Saturday nights, your ass is ours unless we have a date, or you have a date with Karen, or you have to spend time with Jill or your Dad.\" Courtney giggled. \"I can't wait to meet your sexy mother-in-law tomorrow night.\" \n\n\"She's not my mother-in-law\" I interjected. \n\n\"Are you actually talking Carrie? I told you to eat. You can talk later, we don't have a lot of time right now.\" Julie admonished me. \n\n\"Until further notice, you will go out on a date with Karen either Friday or Saturday night every week. We both like Karen, so, we feel a little guilty about forcing you to date. So, you will be the perfect girlfriend to her.\" Julie said with a frown. \"I ... well, we are going to let her know that we fool around sometimes, because it wouldn't be fair to her otherwise. It's risky, for me, because I don't want Chad to know.\" \n\nI opened my mouth to say something, but managed to shove another bite of salad into it instead. \n\n\"You are Julie's best friend, I know that, and so it makes me the third wheel sometimes. We are going to have a threesome at your house tomorrow to try to get past that.\" Courtney grinned. \n\nI coughed on my salad. They laughed. \n\n\"Two things. First, if Julie decides to eat a pussy tomorrow night, you need to get over it. I know you two are holding out for a romantic adventure, but there is a lot of sex around her right now and she is only human. Second, you have to reconcile it in your head that she is still your best friend. If you start shutting down to her as a friend, we will have to rethink the situation. I want nothing to do with causing strife between the two of you. I truly envy the two of you.\" Courtney said, a hint of sadness, quickly covered up by a smile. \n\n\"Get dressed.\" Julie handed me my clothes and I was quite rapid to obey that command. \n\n\"We will be discussing everything we do, or plan to do, with Jill. We will hold no secrets from her, and we will defer to her if she disagrees with anything we do with you. She has been wonderfully accommodating to me on this, and will be advising me. While I am still very upset about not being invited there anymore, I understand, and reluctantly agree with her reasons.\" Julie added as I dressed. \n\n\"As for Rebecca.\" Courtney said with a frown. \n\n\"Do we have to do this now?\" Julie asked sadly. \n\n\"Will there ever be a good time Julie?\" Courtney asked, then sighed deeply. \n\n\"What?\" I asked, pulling my skirt on. \n\n\"Okay, Carrie, I'm sure you know me well enough to know that this is far less than what she wanted. But, you wanted me to get this over with for you and I had to give in a little.\" Courtney said. \"I even offered her more money and she refused.\" \n\nI groaned. \"What does the Bitch Queen want me to do?\" \n\n\"Before gym class, she will give you a bag. In the bag will be plastic baggies, marked with several girls names from the cheer squad. You have to return the panties in them to the owners before the end of the day and tell them you are sorry for borrowing them.\" \n\nI looked puzzled. \"What are you talking about?\" \n\nJulie sighed. \"She wants the cheerleaders to know it was you Carrie.\" She whispered. \n\nThe panty stealing lesbian in the gimp suit... that was me. \"Fuck!\" I said way too loud. \n\n\"You are just too likeable. They all like you, Carrie. All of them. And it's been bothering the hell out of Rebecca.\" Courtney explained. \"It sucks. Your reputation is going to be shit for a while. Julie and I will do as much damage control as we can. But, I can't work miracles. You know it will get out.\" \n\nI bit my lip. What else was there to do? Courtney and Julie both got up and hugged me. I hugged them back and bit back the tears that threatened my eyes. ",
        "\"I'm not sure I can do this.\" I said, shaking. \n\n\"You don't have to.\" Courtney said with a gentle squeeze of my shoulder. \"But, if you want it done, I'm afraid this is the best I could do.\" \n\n\"I don't even want to know what she actually wanted.\" I whispered. \n\nCourtney laughed kindly. \"No, you probably don't. You'd rip her head off in the parking lot instead of kissing her feet.\" \n\n\"It will blow over fast.\" Julie reassured me. \"Courtney will be all over anyone who gives you shit and we will both back you up... outside cheerleading.\" \n\n\"I know. I'll get through it, it isn't like I haven't heard derogatory shit whispered behind my back for the past three weeks.\" I answered. \n\n\"And ... because I don't want you to hear this from anyone else.\" Julie added. \"Courtney and I aren't allowed to come to your defense at cheer practice. I wanted to just quit, but she wouldn't allow that either.\" \n\nI pushed back from them. \"Wait... you two aren't doing anything for her are you?\" I wiped my eyes. \n\nCourtney laughed sadly. \"Always the same Carrie, ready to fight for anyone, but yourself. No, dipshit. She hates you, not us. She wants her followers to hate you too. Well... dislike you anyway. I doubt they will hate you for it.\" \n\n\"Well, one good thing may come of it.\" I said with a trembling voice. \"Karen will probably cancel our date Saturday night.\" \n\nJulie and Courtney laughed. \n\nJulie smiled, took my face in her hands and kissed my lips. \"YOU can tell Karen anything you want. Before and after. Courtney made Rebecca agree to that. I want you to consider something, as you think about what to do. Karen is going to take a lot of shit if she dates you after this. We will support her of course. But, the rest of the squad, who knows what they will do? They all spanked her girlfriend and a lot of them fucked her too. So, if she decides to date you, she'll be taking on a lot.\" \n\n\"This changes things, as I'm not sure how Karen will handle things. It really brought things into perspective for me that pressing you to date Karen is a bit manipulative to her. And, since I plan to break you two up for my own selfish reasons eventually, I'm having second thoughts.\" \n\n\"I guess it means I have to explain things a bit more. Let's head back to the school.\" Julie continued as she led the way. \n\nCourtney gathered up our lunch and we started walking back to school. Courtney was uncharacteristically quiet, but this wasn't really her discussion to have with me. \n\n\"I want you to date a girl publicly. I'm not sure if I can date you before school is out. It isn't that I wouldn't be proud to be seen with you every day. It's that I'm not sure this isn't just sexual excitement that will blow over, and I really am quite straight with some bi-curiosity. If I decide to date you publicly, then it will be easier for me to break up with Chad because I went to the other team.\" \n\n\"I know that's very one-sided of me. And, you can tell me to fuck off if you want. But, there is something else to it. You were forced into this Carrie. It wasn't a decision. So, maybe it won't work out for you either. And I want to be sure ... I want YOU to be sure that dating a girl is what you want before we risk our friendship for something that could be so much more, or could be a disaster.\" \n\n\"And Karen is a good person. She's pretty, she's kind and she's smart. It's a dangerous thing I am doing, pushing you to truly date another girl. Pushing you to test your lesbianism on someone else with the plan of ending it so I can step in. Or deciding not to and then, what happens? I'm sure we'd still be friends, but I'd have to live with the question in my mind forever, what would have happened if I had just dumped Chad and dated Carrie?\" \n\n\"Everything seemed clear to me yesterday. Today, not so much. And that leaves me sticking you with a problem that I helped to create. I'm sorry Care Bear.\" \n\nI stopped to gather my thoughts. \"Well, that was confusing.\" I shook my head. I grabbed Courtney by the face and kissed her hard. I pushed my tongue into her mouth and kissed her like a lover. She was surprised at first and pushed at my shoulders, but when my tongue slipped into her mouth, she grabbed my head and kissed me back. I heard Julie gasp. \n\n\"What the fuck are you doing?\" Julie asked angrily. \n\nI broke off my kiss with Courtney, not suddenly, slowly. She smiled at me, and I smiled back. \n\n\"If you ever use me to make a point again Slutball, I will make you think Rebecca was a vacation.\" She slapped my ass quite hard and walked ahead of us, giggling. \n\n\"Were you jealous?\" I asked Julie with a smile. \n\nShe was pissed, I could see it in her face. \"Fuck you Fitch.\" Then she turned away and tried to hide her laugh, but I caught it. \n\n\"Julie, I don't think about guys at all anymore. I'm not repulsed by the idea of being with a guy, but I just don't find myself day dreaming about dating any boy. Sexual fantasies? A few. I can still appreciate a good body on a boy. I can still imagine a dick in my sex life. But, when it comes to romantic thoughts, about dating, holding hands, kissing... it's always a girl now.\" I started my own monologue. 'It's always you now', I thought, but that might have been too much. \n\n\"I love you Julie. And yes, if we don't end up together, I will satisfy myself with friendship. I would deprecate myself and sneak in sex behind your boyfriend's back now and then, if you wanted that. I would envy any man you decide worthy to hold your hand. I would pretend to be happy for you and cry myself to sleep at night.\" \n\n\"I like Karen. I do. And unless you tell me otherwise, I will go and tell her something to make sure she still wants to date me Saturday night. But, she isn't you. I don't mind being alone in school and waiting for you to decide. I don't need to date another girl to know that I want to be with you. I have Jill and Sue and Courtney to occupy my social life.\" \n\n\"And I have you. And I can and will tell you everything now. How I feel. What they put me through. Eventually, I will even be able to tell you all the shit I went through with Darla. I don't need a girlfriend Julie. You don't have to feel guilty about dating Chad while making up your mind. I know I'm better in bed, and I'm only getting better with practice.\" I laughed. \n\nJulie laughed too, but said, \"Watch it Carrie, don't be rude.\" \n\n\"I'm not.\" I smiled and took her hands in mine and looked her in the eyes. \"I want you to be happy Jules. Just like you want me to be happy. And if you prefer a disgusting cock over a beautiful vagina... I'll support you in that delusion.\" I laughed again, and she couldn't help but to laugh with me. \n\n\"Carrie, stop being an ass. You made your point.\" Julie warned me not to press. \n\nThe truth is, I liked Chad. He was always nice to Julie. He was nice to me, even when a lot of people were whispering behind my back. He was very easy on the eyes. But, he was my competition, so fuck him. \n\n\"Now, if me dating Karen makes you feel less guilty about dating Chad, I will do that for you.\" I smiled at her. \"But, I don't need it. I dated nobody for a very long time, I can do it again.\" \n\nJulie sighed heavily. \"I'm a bitch. Date her for me.\" She frowned, and pulled her hands away from mine. \n\n\"You aren't a bitch... usually.\" I whispered. \n\nWe walked back into school, not holding hands, as the bell rang. \n\nWe went to our lockers, got our bags and headed to Spanish, still not holding hands. \n\nWe sat down next to each other in the classroom and when I tried to squeeze her hand to reassure her, she pulled it away. \n\nShe wasn't mad at me. I knew that. She was confused. Probably like I was confused a couple weeks ago. I wasn't concerned. Perhaps I should have been, but I wasn't. \n\nWhen Spanish ended, we headed to gym class and I saw Karen in the hall. I looked at Julie questioningly. I was basically offering her a last chance to change her mind, but I didn't voice it. She said nothing. I mouthed 'I love you' to her and called out to Karen. \n\nShe stopped when she heard my voice and turned with a smile. She was beautiful. \n\n\"I need to talk to you for a minute.\" I said, trying to smile, though my stomach was ready to heave up my lunch from what I was going to tell her. \n\nKaren had been walking with Britney and April and she told them to go on without her. I checked to see if we were being watched, and pulled her towards an empty class room. Her eyes went wide, she pulled back a little. \n\nI laughed. I think she thought I was going to kiss her or something. 'No, nothing like that pretty girl.' I thought. \n\n\"It's very private.\" I said, tugging her hand to follow me. \n\nShe followed me apprehensively. \"What is it Carrie? You aren't trying to back out, are you?\" \n\n\"No...\" I began and exhaled loudly. Where to begin? \"You know Rebecca pretty much hates me, right?\" \n\nShe frowned. \"Yes. It's pretty common knowledge.\" \n\n\"Well, something is going to come out after gym class today, and I wanted you to hear it from me first.\" I was shaking like crazy. I looked into her eyes and wiped a tear before it could form. \"You remember the girl... from the bathroom?\" \n\nKaren frowned harder. \"Yes?\" \n\n\"Well, okay... it's not what you think, I mean...\" Damn this was hard. \"She didn't go around stealing panties. She wasn't there voluntarily.\" \n\nKaren scrunched her eyes questioningly. \"I don't follow. Of course, she was there voluntarily. She loved it.\" \n\nI sighed. Karen wasn't making it easier. \"Karen, I had to do some things that I didn't want to do because of some trouble I had with Rebecca. I hated them. I assure you...\" \n\n\"Okay, and what does that have to do with anything?\" She giggled. \"Carrie, I don't need Rebecca's permission to date people. I like Rebecca, but she's not like my best friend or anything.\" \n\n\"Ugh.\" I groaned. \"Karen, I was the girl in the suit.\" I guess just rip off the band-aid at this point? \n\nKaren frowned hard. \"Why would you say that Carrie? You were there with us. It couldn't have been...\" \n\nAnd I guess it dawned on her that I was there with them one of three times. \"The third time, I was there to throw everyone off. Julie especially.\" I remembered it all poignantly. \n\nKaren stared at me, her eyes wide. Her mouth was not telling me anything. I think she was just processing what I said. \n\n\"I... It was never supposed to come out. But, Rebecca has something against me still, and I need to end it. Part of my agreement to end her trying to ruin my life, is to tell some of the cheerleaders that it was me.\" The processing of information seemed to be advancing. Karen's mouth was open in a look of horror. \n\n\"Carrie, let me make sure I understand. Are you saying this because Rebecca wants you to say it to make everyone hate you, or because it actually was you?\" She asked, hoping for the former of the two options. \n\nAnd it dawned upon me at that moment, that I could tell Karen it was a lie that I had to tell, and I needed her to pretend to believe it. I could have done that. I didn't. \n\n\"It was me. I want to explain it all to you, but I don't really have the time, because it's going to come out after gym class, and I just wanted you to hear it from me first. If you want to call off the date, I totally understand. I'm not proud of it. I hated it. I was definitely forced to do it.\" I sighed. How much would I have to divulge to make her understand I didn't want it? \n\n\"Excuse me.\" Karen whispered. She walked over to the teacher's vacant desk, picked up the waste can next to it and vomited into the trash can. \n\n\"Damn.\" I muttered. I held her hair back while she heaved her lunch into the trash. When she finished I procured some tissues from the desk and handed them to her. I got my mints out of my purse and offered her as many as she wanted. She took two and popped them into her mouth. \n\n\"Sorry.\" Karen whispered. \"It isn't you that I'm revolted by, it's me.\" She started crying quietly. \"She told us you wanted it Carrie. Oh God I feel horrible!\" She hugged me. \"Please forgive me.\" \n\nIt was my turn to be in shock I guess. I expected this reaction from Julie, but Karen didn't even really know me. I hugged her back. \"There's a little more I have to do... I have to act like I did want it. And ... Julie and Courtney can't defend me to the squad.\" I whispered. \"Don't beat yourself up Karen. I would have done the same thing probably, given what Rebecca told everyone. Julie did it too. And she and I are best friends still.\" \n\n\"Why?\" Karen trembled and took a tissue to wipe her tears. \"Why did you want me to know this? Why not let me find out like everyone else?\" \n\nI shrugged with a sad smile. \"I don't know. I guess since you are interested in me. And to prevent showing up Saturday night to a slammed door in my face.\" \n\nShe laughed ... softly, sadly... but she laughed. \"Call me later? We are about to be late for class and I know how much Miss Nichols loves tardiness.\" \n\nI smiled. \"Don't I know it. At least we can do laps together.\" \n\nKaren smiled weakly. \"I might get a pass, it's my first time being late.\" \n\nWe walked together in the nearly empty hall to the locker room. The bell rang just before we went inside. Same locker room, rows of girls in various states of undress, changing into their gym uniforms. Mine was not near Karen's and we parted ways. \n\nI walked into the aisle where Julie was already in her gym uniform. She smiled at me sadly and handed me the bag. I frowned and opened my locker and quickly put it inside and changed as fast as possible into my gym uniform. \n\n\"How did she take it?\" Julie asked in a whisper. \n\n\"She threw up. She took it a lot like you did.\" I whispered back. \n\n\"Oh.\" Julie said and looked sad. \n\n\"What's that supposed to mean?\" I whispered, as I tugged the tight shirt over my chest and locked my locker. \n\n\"Nothing.\" Julie said. \"Let's go play some volleyball.\" She smiled, it was forced. \n\nI shrugged. \"I'm so good at it.\" I said sarcastically. \n\n\"You aren't bad Carrie. Bump and set, those hits are as important as the spikes.\" She encouraged me. \n\nWell, I wasn't late. So, no laps for me. We played volley ball and Julie was on my team. So were Cat, Gina and Jen. By some intentional picking of teams, Sara was on the opposite side with Rebecca and several cheerleaders, including the twins. She looked miserable. If Rebecca whispered to her one more time, I was going to be over there busting her face. \n\nBut, Julie kept me in check. \"She's just doing it to fuck with you Carrie. Sara will be okay. Let it go and focus on the game.\" \n\nRebecca kept smirking at me and would clearly and obviously whisper to Sara between serves. Sara was looking like a wreck of nerves. I thought she would break down crying at any moment. Then Karen stepped in and said something to Rebecca. They exchanged heated whispers and Rebecca subbed her out of the game. \n\nAbout half way into the game, Rebecca and I, by unhappy coincidence, were both at the net. I whispered to her. \"Leave Sara alone or the deal is off.\" \n\nShe laughed. \"Brit, sub in for Sara.\" \n\nSara looked like she would break down and cry any second, but she didn't. She mouthed a 'thank you' to me on her way off the court. \n\nJulie smiled at me. I smiled back. Not a minute later, Rebecca spiked me. I wished it hadn't happened, but it did. She smirked at me and my face went red. I maintained my decorum though. 'It ends today.' I told myself. \n\nFor the first time in forever, I wished gym class would never end. I knew what was coming afterwards and it filled me with dread. When Miss Nichols sent us in to the showers, I was shaking with anticipation of the looks of disgust on each cheerleader I had to approach with a pair of panties. \n\nI entered the locker room with Julie and she hugged me silently for a very long time. \"I know you are going to do this, but I wish you wouldn't.\" She whispered. \"I won't let them be too vulgar, neither will Courtney.\" \n\n\"I know Jules. I guess I best get to it, they should all be here.\" I whispered. \n\nI went to my locker and pulled out the bag, I pulled out the first of the zip lock bags, which had Addison's name on it. I took the panties from the bag and went over to find her at her locker. Most of the cheer squad had their lockers together. It would have been easier to just hand out the baggies all at once, but I was supposed to take them out of the bags, as if I remembered which panty went to each girl. I saw them all getting undressed for the showers and paused and turned back. My heart was pounding in my chest. I braced myself and turned back around and called to her. \n\n\"Addison, could I speak to you for a moment?\" I squeaked. \n\nAddison looked up and then she looked to Rebecca, who gave her an assuring nod. Then she laughed at me, looking right at me with that Rebecca smirk that I wanted to slap from her face. \n\nAddison came up to the end of the aisle of lockers. \"What's up Carrie?\" She asked. \n\n\"I...\" The words caught in my throat and I had to clear it. \"I'm sorry for borrowing your panties Addison. I um... don't do that anymore.\" I was saying it too quietly for her to hear over the din of the locker room. \n\n\"What?\" she asked, not hearing me and looking confused. \n\nI stepped closer, so I could say it quietly, but so she could hear me. \"Addison, I'm sorry for borrowing your panties.\" She looked confused still. I held them out and put them in her hand. \"I don't do that anymore, it was a phase.\" \n\nAddison looked at the crumpled panty in her hand and then at me. It seemed to take her a minute to put together that these were her panties. Her face betrayed that she still didn't understand why I had them. \n\nMy heart was pounding. I was flushed with humiliation. \"I'm sorry.\" I said louder, and turned away before I cried, biting them back every step of the way. I practically ran back to my locker. \n\nI punched a fist into the locker, as I braced for the worst. I expected she would tell the entire cheer squad, and they would all come around the corner and laugh at me or smirk at me. I wiped my eyes clear of the tears that blurred my vision, but hadn't fallen yet. I decided to just pull them all out and see who's panties I had to return. \n\nRebecca had been diligent. She had a panty for half of the cheer squad at least. I had one for Allison, Addison's twin, Britney, April and Carla. I was surprised that there was also one in there for Karen. I was a bit ill to my stomach that there was one for Farin. I was disgusted that there was one for the cunt, herself, Rebecca. I showed Julie and she was pissed. \n\n\"Just skip her. Fuck her.\" Julie spat. \n\n\"It doesn't matter.\" I sighed and punched the locker again. I grabbed Rebecca's in one hand and Farin's in the other and went back to the end of the row. \n\n\"Rebecca?, Farin? Could I have a word?\" I said somewhere between a whisper and a normal voice. \n\nRebecca grinned evilly. Farin looked up and rolled her eyes. They both came over. \n\n\"Just hand them over slut.\" Rebecca sneered. \"Meanwhile, Addison is already telling everyone, so the rest of the squad will already know why you are calling them over. Does it hurt? Does it embarrass you more than anything in the world?\" \n\nI fought the tears, she wouldn't care either way, but I did. \"You know it does. Please, Rebecca, don't let it go too far. I know everyone is going to hear about it by tomorrow. But, after today, I really hope we are done.\" \n\n\"As long as you are a good little cunt from now on and stay out of my light, we will be.\" She hissed. \n\nI held out her panty and she laughed. \"Keep them. I want you to keep them forever and remember this day for the rest of your life. In fact, add that to your payment in full. I want you to tape my panty up in your locker and every time you open it for the rest of the year, you will remember me and how I beat you. On the last day of school, take them home and wear them once a week for the rest of your pathetic life.\" She spat. ",
        "I could feel my stupid pussy reacting, but I sent it an angry, silent admonishment. I reached out and handed Farin her panty with a defeated face. She took them and seeing me like that, at least for a moment, curbed her anger that she had carried all week. She turned away and didn't join in the giggles and conversation at the other end of the aisle. \n\nI turned and walked back to my locker and tossed Rebecca's panty in the back. Then, I grabbed Carla's in my left hand and April's in my right and returned to be humiliated all over again. At least I was getting rid of two at a time instead of making eight trips. \n\nThey were all laughing and talking about me when I turned the corner again. I was crying inside, but I refused to let that bitch see my tears. \"C-Carla? April? Could I talk to you for a minute?\" I said. \n\nThey both looked up at me and walked down to the end of the aisle, knowing what to expect. Carla was smiling... well... she was smirking superiorly. April looked a hint of sad for me. That was something I suppose. \n\n\"Carla, I'm sorry for borrowing your panties without permission, I don't do that anymore.\" The 'I don't do that anymore' was my own conversion of what I had to say, I suppose to let them know I had mended my ways. I just wanted it over. \n\n\"You are disgusting Carrie.\" Carla held out her hand and I placed the panty in them. \"I can't believe I liked you.\" She spat and turned away. \n\n\"April,\" I turned to her, \"I'm sorry for borrowing your panties without permission. I don't do that anymore.\" I offered them to her and she took them. \n\n\"I hope not Carrie.\" April said quietly. \"It's weird that... well, it's just weird, but between you and I, I'm glad we got to know each other a little bit.\" She didn't smile, but she didn't look thoroughly disgusted at me either. She turned and walked back to the sea of laughter. \n\nI cried silently and returned for my next to last trip. Allison in my left hand, Britney in my right. I returned, and everyone laughed harder. \"How many did she have?\" Carla laughed. \"Greedy slut.\" Rebecca chirped. \n\n\"Addison? Britney? Could I speak to you for a moment?\" I asked. \n\nThey walked towards me, laughing the entire way. \n\n\"Addison, I'm sorry for borrowing your panties. I don't do that anymore.\" I offered and held them out for her. \n\n\"You are a great actress Carrie.\" Addison laughed. \"I mean, seriously, you should go for the drama club.\" She took her panty and left. \n\nI turned to Britney, the girl who was up Rebecca's ass these days. \"Britney, I'm sorry for borrowing your panties. I don't do that anymore.\" \n\nBritney giggled. \"You don't look sorry to me Carrie. Try it from your knees.\" \n\nI looked into her eyes. They were cruel. \"Please Britney, this is hard for me. Please just take them.\" \n\nShe grinned. \"I will, when you get on your knees.\" \n\nIt was almost over. I wanted this over so bad. I knelt down and held her panty up to her. She stepped forward and pulled her shorts down and pressed her panty covered pussy towards my face. \"Are you sure you don't want these Carrie? I'll trade you. These are fresh, they still smell like my pussy.\" \n\nI looked up at her. She actually believed it. I guess I was a good actress. \"No, please take them Brit.\" \n\n\"Brit?\" She spat. \"Carrie, you don't get to call me Brit ever again. Go away pervy girl.\" She took her panty and pulled up her shorts and laughed back to the group of cheerleaders. \n\nI got up and went back to my locker and fell against it. I wept into my sweat towel that I kept in my locker and decided I might not see Karen again, so I may as well go ahead and do it now. I walked back, and she was there waiting. I didn't even have to call her name. \n\nShe looked at me sadly. \"Would it be better for you if I ignored it or defended you?\" She asked quietly. \n\nI forced a smile. \"Ignored it. Thanks for the offer though.\" \n\nShe took the panty from my hand. \"Rebecca told me I was the only one left. So, she admitted to setting this whole thing up whether she meant to or not. I hate seeing you like this. I guess it's over though? She won't go out of her way to mess with you anymore. So, that's a relief. I'd hate to have to hear them talking about the girl I like all the time.\" She pinched my chin and smiled. \n\nI wiped my eyes again. \"Probably another week, but it won't be from Rebecca anymore.\" I smiled weakly. \n\n\"Call me tonight. Please?\" Karen asked. \n\n\"I have a lot to do after school, but I will call you when I'm done.\" I promised. \n\nKaren smiled and turned back to the others. She didn't participate in their laughter or jokes at my expense. I was turning to go when Rebecca came up to me and handed me another plastic baggy. It had Julie's name on it. \"I sure as hell don't want it pervy girl.\" She grinned and placed it in my hand. \n\n\"And yet you had it all this time.\" I said quietly. I took them and walked away. \n\n\"Cunt.\" She said as I turned around the corner. \n\nI handed them to Julie. She swept me up in a hug. \"That girl is one demented bitch.\" She whispered. \"I mean, how many times do you think she sniffed everyone's panties? And keeping them in ziplock bags so they would stay ... smelly I guess?\" \n\nI couldn't help myself. I laughed softly. \n\n\"I'm throwing mine away. No telling whether her saliva is in the crotch.\" She laughed. \n\n\"Okay, stop.\" I laughed. I looked into her eyes and smiled. \"It's almost over.\" \n\n\"I know Care Bear. I hate seeing you do this. You are very brave to put up with all this from a girl you hate so much.\" She sighed. \"See you after school. Don't let your anger come out Carrie. You have gone too far now to fuck this up.\" \n\nI didn't have time to shower. I just changed into my skirt and shirt, left my bra in the locker, and headed to Miss King's class. \n\nI stared at the empty page, while everyone else was working on their restaurant project. I knew that I would be doing that this weekend. I asked Miss King to take my sketch pad home with me and she offered me a foldable easel as well. So, I drew a very detailed picture of a fire with girls sitting around it, roasting their panties instead of marshmallows. It was not really conducive to anything, just a thought that came to my head. \n\nMiss King raised an eyebrow and laughed softly. \"We burned bras in my day.\" She whispered and patted my head softly and moved on to the next student. \n\nI headed down to my locker to stow my backpack away before heading out to the flagpole. My stomach was churning, and my heart was pounding. I remembered Julie's demand, but figured it could wait until after the apology to Rebecca. I only had three minutes, so I didn't have time to dwell on it. \n\nWhen I walked out the door, I nearly had a panic attack. It seemed like half the school was there at the flagpole waiting for me. Sara, Jen, Cat and Gina were standing together off to the side, as I had asked them to be there. Julie and Courtney stood with Karen off to the side of the cheer squad. They had formed a semi-circle around the back of the flag pole and Rebecca and Brad stood in front of it. \n\nBrad looked pissed to be there. Rebecca was smiling, of course. I felt very alone at that moment. \n\n\"Here she comes.\" I heard a voice yell above the general conversation that a crowd generally makes. \n\nI looked around, taking in all the eyes that seemed to hate me. Of course, they didn't. Most of them probably had no idea what was going on. I walked down the steps from the front doors like a sentenced convict heading to the gallows. \n\nI so wanted to slap the smirk off Rebecca's face as I stepped onto the grass by the flagpole. She was standing on the concrete slap that held the pole upright. I kept my eyes focused on the ground and knelt in front of her. Courtney and Julie had taken a few minutes to help me practice my words during lunch. I looked up at Rebecca, flushed red with humiliation. \n\n\"Rebecca.\" I whispered, then corrected myself, not wanting to repeat what I had to say. \n\n\"Rebecca.\" I said again, very loudly this time and the crowd seemed to hush to hear my words. \"I am sorry for trying to steal your boyfriend. You are superior to me in every way, and I should have known better than to try to date outside of my place.\" God, that hurt to say, even if it wasn't true. \n\n\"Brad,\" I turned to him and his face was showing me pity. \"I'm sorry for being a cock tease and being so dreadful at giving a blowjob.\" A lot of laughter sprang around the flagpole as I paused for them to quiet down. I knew Rebecca would make me repeat anything the masses couldn't hear. I waited and fought back the tears. \"You are so much better with Rebecca. I should have known better than to think I could ever compete with her.\" \n\nHe glared at Rebecca. \"Are we done?\" He said angrily. \n\n\"Almost.\" Rebecca grinned. I don't think she saw how unhappy he was with her right then. She was too lost in her moment. \"Finish up, you stupid bitch!\" She spat at me. \n\n\"Thank you for teaching me my place Rebecca.\" I said out loud and leaned down and placed a kiss on each of her feet. I wanted to vomit on her shoes. I heard gasps and laughs and twitters of conversation as I bent over and kissed her feet. \n\n\"Don't forget it Fitch.\" Rebecca said loudly. \"And stay out of our lockers.\" She laughed and the cheer squad, at least half of them, laughed with her. \n\nI looked up at her as if to ask if we were done. She smirked. \"Get out of here cunt.\" She said loud enough for everyone to hear and I got up and walked back to school to get my books. It was over. I felt ill. I felt disgusted with myself. I felt like I wanted the world to swallow me up. But, it was over. Only time would tell if it was worth what I paid. \n\nI got my bag out of my locker and turned to see Sara there crying. She ran up to me and we hugged for a few minutes. We didn't need to say anything. It felt good to have someone with me right then. Finally, I broke the hug and handed her a tissue from my bag and took one for myself. \"Don't miss your bus Sara, I'd drive you home, but I have to go across town.\" I smiled weakly. \n\n\"Thank you, Carrie.\" She kept crying, and turned, and walked quickly down the hall to catch her bus. \n\nI texted Sue and Jill jointly, telling them that I would be a little late. My phone rang, and I answered it. It was Jill. \n\n\"It's done?\" She asked. \n\nI texted for a reason. My voice did not want to work right now. As I said the words, \"Yes Mistress.\" My voice cracked. \n\n\"I'm proud of you Carrie.\" Jill said. \"You did the right thing. You will see. Are you on your way?\" \n\n\"No Mistress, I'm waiting in the school for the crowd to clear out a little bit.\" I whispered into the phone. \n\n\"Go to your car now, Slutball.\" Jill said softly. \"It's fresh and painful. Let them see you, and let them vent their stupidity. It will give them less to talk about tomorrow. But, do clear your eyes before you drive. We are waiting for you, but don't speed and don't crash.\" \n\n\"Yes Mistress.\" I sobbed, and she hung up, and I walked towards the front doors. \n\nSome kids had followed me inside, not many. They looked at me like they were in shock at my public apology. A few looked at me with pity. More looked at me with disgust. \n\nWhen I got to the doors, I was at least grateful that the majority had boarded their buses. There were still dozens of kids in the parking lot. Talking... Laughing... Pointing... \n\nI bit my lip. Rebecca was off to the side, being congratulated by some friends. The cheerleaders were there with her, besides Julie, Courtney and Karen. I looked away from them quickly and headed to my car. Words were like daggers, stabbing my back each step of the way. \n\nMy girls, Sara, Gina, Cat and Jen, would be on their busses, I knew. Whether it was Rebecca's plan or not, the timing was good in the sense that everyone had to get on their busses quickly. I climbed into my car and started it up. I fought the tears back another minute as people stared at me and laughed. A few had pity on their faces, I focused on those for a moment. \n\nThen, I wiped my eyes and blew my nose and was about to back out, when I remembered my panties. \"Fuck me!\" I yelled at myself. I turned off my car and ran back to school, into the bathroom and didn't even bother to go into a stall. I pulled my panties down and stepped out of them and then ran the rest of the way to Julie's locker. I opened it, put them inside, and ran back to my car. I just blew probably five minutes of driving time. I'd have to make that up on the road. \n\nI got in my car and wiped my eyes again and thankfully, there were less people in the lot and the busses were gone. I backed out, careful not to hit an asshole who was mocking me. Then, I pulled out of the parking lot and headed to Jill's house. I sped to make up my lost time. I didn't want Julie to get in trouble for me taking the extra time to do her task. I didn't want me to get in trouble for taking the extra time to do Julie's task. \n\nI pulled into Jill's drive way at 3:58. I wondered, as I walked to the door, if I would be punished for the thirteen minutes I took from her. I didn't need to knock, the door opened as I stepped onto the small porch and Sue smiled at me and gave me a hug. \n\n\"No time for a long hug, you are late. I know what you went through, but late is late.\" Sue told me, as she broke the hug and I hurriedly pulled off my two articles of clothing and my shoes and socks. \n\n\"You did get a good exercise in during lunch, so we will just do some yoga and stretches today, that will make up the time. You will be punished, but I don't think it will be too harsh.\" \n\nWe walked downstairs and Sue spent the next ten minutes helping me to stretch into various positions. Some were impossible for me, no matter how easy she made them look. She giggled at my frustration. \"It will take time, but you will get there Slutball.\" \n\nI was aching a bit, but the stretching helped. \n\n\"No dinner tonight. We don't have time.\" Sue explained as she had me rolling up our mats and placing them in the corner of the room. \n\nShe went into the weapons room and pushed out a vault, similar to the one Julie excelled upon, and I embarrassed myself upon, in gym class. She smiled at me as I frowned. \"This isn't for gymnastics Slutball.\" \n\nI looked confused and she giggled. \"Come here.\" She instructed. I walked over to her. \"Stand right up next to it, I need to adjust the height.\" \n\nI stood, pressing my naked torso against the vault, as Sue lowered one end and then the other until it was at about the height of my belly button. I let her move me. She pulled me to bend over the top of the horse and strapped my wrists to the far side, so I was leaning over it. My ass was so far up, I had to stand on my tippy toes to reach. Then she took my right leg and stretched it to the side a bit and fastened it to the horse. She repeated the action with my left foot and my weight was transferred entirely onto my rib cage. She slid a support up from the side where my head was hanging and I could then rest my head and chest on the end opposite my ass. \n\nI felt terribly exposed, my ass high, my legs parted, my pussy bared. I just tensed up in apprehension of what was to come. She gave my ass a squeeze and then told me Mistress would be down shortly. \n\n\"You did great today Slutball.\" Sue smiled at me, kneeling down so she could look into my fear-filled eyes. \"Mistress is so proud of you for doing what you did with Rebecca. You are a great friend. I know you were going to do something similar on your own, but I'm sure you gave a bit more than you planned for Sara. You know... she will appreciate what you did for the rest of her life.\" \n\n\"And yet, I'm going to be spanked.\" I sighed. \n\nSue giggled. \"Yes, Mistress comes first Slutball. Thirteen minutes of her time. Just remember, she isn't mad at you. It will happen. You will have other commitments that will dip into her time. You will pay for them. It's not cruel or vengeful, it is the opposite. It clears your transgressions, so you can move forward and forget them.\" \n\nI heard Mistress's footsteps descending the stairs and wished I could turn to see what she was wearing, and more importantly, the expression on her face. \n\n\"Good afternoon Slutball.\" Mistress Jill's voice rang behind me. No anger or disappointment in her voice, though I rarely heard those things in her voice. \n\n\"Good afternoon Mistress.\" I answered from the vault. \n\n\"You know I am proud of you, so I won't perseverate. While your error was understandable, you were late and will be punished. Thirteen minutes of my time is about to be wasted on your punishment. However, your unexpected exercise at lunch made up the thirteen minutes, so I won't have you make it up to me tomorrow.\" Jill explained. \n\n\"I will be using a crop, a paddle and a flogger on you today. I will warm your ass up with the flogger, distribute pain to your entire ass cheek with the crop and end with some impact strikes with the paddle. You will not need to count the strikes as this is a timed punishment. You may cry, you may whimper, you may not scream. I am not planning to gag you. Control yourself and bare the pain.\" \n\n\"Sue, set the timer for thirteen minutes. And... Go.\" Jill instructed. \n\nI'm not sure that knowing what was coming was better than having a surprise. I was tensed up and awaiting the first strike of the flogger. It wasn't a tickle, but it didn't make me want to scream. She was methodical in her distribution of the tails of the flogger. She slowly built up the strength of each strike, the first round of covering my entire ass with swipes of the flogger was firm, but not hard enough to elicit much pain. \n\nIt was, as she said, a warm up. My ass was awakened by her work. She progressed a bit harder the second time around. When I say that she did this in rounds, I didn't particularly count the hits, but it was clear that she was precise and symmetrical in her delivery. The first round was roughly ten strikes to each cheek. She was close to me, so the stands of suede hit from the side, making my ass wiggle. There was heat, but no real pain. \n\nThe second set was from a little farther away. The strands separated more, and I could feel the tips wrapping around the curves of my ass, causing more of a stinging sensation. Still, it wasn't particularly painful, but it did heat my ass up a bit more. \n\nThe third set was harder and faster. I definitely felt pain now. It wasn't unbearable, I clinched my mouth to avoid making noise, but a few gasps and groans escaped my lips. My ass was definitely feeling hot now. \n\nThe fourth round brought a tear. I couldn't contain the noises, though I muffled them as best I could. \"Please Mistress, may I have something to bite?\" I asked, as I feared I would bite a hole in my lip. My ass was on fire and the straps were stinging badly on each flick of the flogger. It was like a dozen little stings attacking every inch of my butt. \n\n\"Give her your panties Sue.\" I heard Jill say. She moaned as she took her panties off and put them inside out in my mouth, so I could taste her juices on them. I bit down. The blows never stopped, or slowed, as this took place. \n\nOn the fifth round, I was openly weeping. The pain was pretty bad. I bit down and tried to relax. My muscles were hurting from tensing up for every anticipated blow of the flogger. \n\nSue said, \"Time Mistress.\" And there was a brief moment of nothing hitting my ass. \n\nThe next thing I knew was the feel of the crop. That small few square inches of leather, stinging every inch of my ass. And I mean, she got under the bottom, at the top, all the way around each side and as far between my cheeks as she could hit without spreading them. It took much longer to make a round of my ass with the crop and I was weeping constantly, though I stopped anticipating the pain and closed my eyes. \n\nA second round of the crop, I was feeling it acutely, but not feeling it. It was like my mind left my body for a bit. Oh, the pain was real, don't misunderstand. I felt it, every painful whip of crop to my ass. It stung, and the tears still flowed. But, my mind wasn't screaming in pain anymore. It kind of blocked that pain, as if my ass could live without my mind thinking about it any longer. I just kind of disconnected from my body for a bit. "
    ],
    "authorname": "Panthergirl",
    "tags": [
        "18 year old",
        "bath",
        "cheerleader",
        "coersion",
        "dominance",
        "exhibitionism",
        "bdsm",
        "lesbian",
        "high school",
        "humiliation"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/jills-world-ch-05"
}